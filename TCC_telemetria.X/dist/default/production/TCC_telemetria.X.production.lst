

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Fri Apr 29 14:38:40 2022

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=2
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=2
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=2
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1,group=2
   125                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   126                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   127                           	psect	text107,global,reloc=2,class=CODE,delta=1
   128                           	psect	text108,global,reloc=2,class=CODE,delta=1
   129                           	psect	text109,global,reloc=2,class=CODE,delta=1
   130                           	psect	text110,global,reloc=2,class=CODE,delta=1
   131                           	psect	text111,global,reloc=2,class=CODE,delta=1,group=2
   132                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1,group=2
   134                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   135                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   136                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   137                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   138  0000                     
   139                           ; Version 2.30
   140                           ; Generated 26/08/2020 GMT
   141                           ; 
   142                           ; Copyright © 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   143                           ; All rights reserved.
   144                           ; 
   145                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   146                           ; 
   147                           ; Redistribution and use in source and binary forms, with or without modification, are
   148                           ; permitted provided that the following conditions are met:
   149                           ; 
   150                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   151                           ;        conditions and the following disclaimer.
   152                           ; 
   153                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   154                           ;        of conditions and the following disclaimer in the documentation and/or other
   155                           ;        materials provided with the distribution. Publication is not required when
   156                           ;        this file is used in an embedded application.
   157                           ; 
   158                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   159                           ;        software without specific prior written permission.
   160                           ; 
   161                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   162                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   163                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   164                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   165                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   166                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   167                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   168                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   169                           ; 
   170                           ; 
   171                           ; Code-generator required, PIC18F4550 Definitions
   172                           ; 
   173                           ; SFR Addresses
   174  0000                     
   175                           	psect	idataCOMRAM
   176  0054C0                     __pidataCOMRAM:
   177                           	callstack 0
   178                           
   179                           ;initializer for leitura_sdcard@size
   180  0054C0  58                 	db	88
   181                           
   182                           	psect	idataBANK2
   183  00542A                     __pidataBANK2:
   184                           	callstack 0
   185                           
   186                           ;initializer for escreve_inteiro_uart@F3215
   187  00542A  30                 	db	48
   188  00542B  30                 	db	48
   189  00542C  30                 	db	48
   190  00542D  30                 	db	48
   191  00542E  30                 	db	48
   192  00542F  30                 	db	48
   193  005430  00                 	db	0
   194                           
   195                           ;initializer for escreve_inteiro_lcd@F3223
   196  005431  30                 	db	48
   197  005432  30                 	db	48
   198  005433  30                 	db	48
   199  005434  30                 	db	48
   200  005435  30                 	db	48
   201  005436  30                 	db	48
   202  005437  00                 	db	0
   203                           
   204                           	psect	mediumconst
   205  00608A                     __pmediumconst:
   206                           	callstack 0
   207  00608A  00                 	db	0
   208  00608B                     _fence_diff_long:
   209                           	callstack 0
   210  00608B  2D                 	db	45
   211  00608C  30                 	db	48
   212  00608D  34                 	db	52
   213  00608E  36                 	db	54
   214  00608F  32                 	db	50
   215  006090  39                 	db	57
   216  006091  2E                 	db	46
   217  006092  37                 	db	55
   218  006093  33                 	db	51
   219  006094  34                 	db	52
   220  006095  37                 	db	55
   221  006096  37                 	db	55
   222  006097  2D                 	db	45
   223  006098  30                 	db	48
   224  006099  34                 	db	52
   225  00609A  36                 	db	54
   226  00609B  32                 	db	50
   227  00609C  39                 	db	57
   228  00609D  2E                 	db	46
   229  00609E  36                 	db	54
   230  00609F  38                 	db	56
   231  0060A0  36                 	db	54
   232  0060A1  30                 	db	48
   233  0060A2  31                 	db	49
   234  0060A3  2D                 	db	45
   235  0060A4  30                 	db	48
   236  0060A5  34                 	db	52
   237  0060A6  36                 	db	54
   238  0060A7  32                 	db	50
   239  0060A8  39                 	db	57
   240  0060A9  2E                 	db	46
   241  0060AA  36                 	db	54
   242  0060AB  38                 	db	56
   243  0060AC  36                 	db	54
   244  0060AD  30                 	db	48
   245  0060AE  31                 	db	49
   246  0060AF  2D                 	db	45
   247  0060B0  30                 	db	48
   248  0060B1  34                 	db	52
   249  0060B2  36                 	db	54
   250  0060B3  32                 	db	50
   251  0060B4  39                 	db	57
   252  0060B5  2E                 	db	46
   253  0060B6  37                 	db	55
   254  0060B7  33                 	db	51
   255  0060B8  34                 	db	52
   256  0060B9  37                 	db	55
   257  0060BA  37                 	db	55
   258  0060BB                     __end_of_fence_diff_long:
   259                           	callstack 0
   260  0060BB                     _fence_diff_lat:
   261                           	callstack 0
   262  0060BB  2D                 	db	45
   263  0060BC  32                 	db	50
   264  0060BD  33                 	db	51
   265  0060BE  34                 	db	52
   266  0060BF  32                 	db	50
   267  0060C0  2E                 	db	46
   268  0060C1  30                 	db	48
   269  0060C2  37                 	db	55
   270  0060C3  31                 	db	49
   271  0060C4  31                 	db	49
   272  0060C5  32                 	db	50
   273  0060C6  2D                 	db	45
   274  0060C7  32                 	db	50
   275  0060C8  33                 	db	51
   276  0060C9  34                 	db	52
   277  0060CA  32                 	db	50
   278  0060CB  2E                 	db	46
   279  0060CC  30                 	db	48
   280  0060CD  37                 	db	55
   281  0060CE  31                 	db	49
   282  0060CF  31                 	db	49
   283  0060D0  32                 	db	50
   284  0060D1  2D                 	db	45
   285  0060D2  32                 	db	50
   286  0060D3  33                 	db	51
   287  0060D4  34                 	db	52
   288  0060D5  32                 	db	50
   289  0060D6  2E                 	db	46
   290  0060D7  31                 	db	49
   291  0060D8  31                 	db	49
   292  0060D9  37                 	db	55
   293  0060DA  38                 	db	56
   294  0060DB  34                 	db	52
   295  0060DC  2D                 	db	45
   296  0060DD  32                 	db	50
   297  0060DE  33                 	db	51
   298  0060DF  34                 	db	52
   299  0060E0  32                 	db	50
   300  0060E1  2E                 	db	46
   301  0060E2  31                 	db	49
   302  0060E3  31                 	db	49
   303  0060E4  37                 	db	55
   304  0060E5  38                 	db	56
   305  0060E6  34                 	db	52
   306  0060E7                     __end_of_fence_diff_lat:
   307                           	callstack 0
   308  0060E7                     mensagem_inicial@F3658:
   309                           	callstack 0
   310  0060E7  54                 	db	84
   311  0060E8  43                 	db	67
   312  0060E9  43                 	db	67
   313  0060EA  2D                 	db	45
   314  0060EB  2D                 	db	45
   315  0060EC  54                 	db	84
   316  0060ED  45                 	db	69
   317  0060EE  4C                 	db	76
   318  0060EF  45                 	db	69
   319  0060F0  4D                 	db	77
   320  0060F1  54                 	db	84
   321  0060F2  52                 	db	82
   322  0060F3  49                 	db	73
   323  0060F4  41                 	db	65
   324  0060F5  00                 	db	0
   325  0060F6  00                 	db	0
   326  0060F7  00                 	db	0
   327  0060F8                     __end_ofmensagem_inicial@F3658:
   328                           	callstack 0
   329  0060F8                     mensagem_inicial@F3656:
   330                           	callstack 0
   331  0060F8  46                 	db	70
   332  0060F9  41                 	db	65
   333  0060FA  54                 	db	84
   334  0060FB  45                 	db	69
   335  0060FC  43                 	db	67
   336  0060FD  20                 	db	32
   337  0060FE  53                 	db	83
   338  0060FF  54                 	db	84
   339  006100  20                 	db	32
   340  006101  41                 	db	65
   341  006102  4E                 	db	78
   342  006103  44                 	db	68
   343  006104  52                 	db	82
   344  006105  45                 	db	69
   345  006106  00                 	db	0
   346  006107  00                 	db	0
   347  006108  00                 	db	0
   348  006109                     __end_ofmensagem_inicial@F3656:
   349                           	callstack 0
   350  0000                     _TMR0	set	4054
   351  0000                     _PORTEbits	set	3972
   352  0000                     _PCL	set	4089
   353  0000                     _PCLATH	set	4090
   354  0000                     _PIE1bits	set	3997
   355  0000                     _RCSTA	set	4011
   356  0000                     _TXSTA	set	4012
   357  0000                     _RCREG	set	4014
   358  0000                     _RCSTAbits	set	4011
   359  0000                     _SPBRG	set	4015
   360  0000                     _PIR1bits	set	3998
   361  0000                     _SSPBUF	set	4041
   362  0000                     _SSPCON1bits	set	4038
   363  0000                     _SSPSTATbits	set	4039
   364  0000                     _SSPCON1	set	4038
   365  0000                     _SSPSTAT	set	4039
   366  0000                     _TRISCbits	set	3988
   367  0000                     _TRISBbits	set	3987
   368  0000                     _PORTBbits	set	3969
   369  0000                     _PR2	set	4043
   370  0000                     _TMR2	set	4044
   371  0000                     _T2CON	set	4042
   372  0000                     _OSCCONbits	set	4051
   373  0000                     _TRISE	set	3990
   374  0000                     _TRISC	set	3988
   375  0000                     _TRISA	set	3986
   376  0000                     _TRISD	set	3989
   377  0000                     _LATB	set	3978
   378  0000                     _TRISB	set	3987
   379  0000                     _ADCON1	set	4033
   380  0000                     _T0CONbits	set	4053
   381  0000                     _INTCONbits	set	4082
   382  0000                     _PIE1	set	3997
   383  0000                     _INTCON3	set	4080
   384  0000                     _INTCON2	set	4081
   385  0000                     _INTCON	set	4082
   386  0000                     _SPPCFG	set	3939
   387  0000                     _SPPCON	set	3941
   388  0000                     _T0CON	set	4053
   389  0000                     _PORTDbits	set	3971
   390  0000                     _TRISDbits	set	3989
   391  0000                     _LATBbits	set	3978
   392  0000                     _LATCbits	set	3979
   393  0000                     _INT0IE	set	32660
   394  0000                     _INT0IF	set	32657
   395  0000                     _T0IF	set	32658
   396  0000                     _TMR0IF	set	32658
   397  0000                     _RCIF	set	31989
   398  0000                     _TXEN	set	32101
   399  0000                     _CREN	set	32092
   400  0000                     _SPEN	set	32095
   401  0000                     _SYNC	set	32100
   402  0000                     _BRGH	set	32098
   403  006109                     STR_14:
   404  006109  0A                 	db	10
   405  00610A  76                 	db	118	;'v'
   406  00610B  25                 	db	37
   407  00610C  73                 	db	115	;'s'
   408  00610D  3B                 	db	59	;';'
   409  00610E  6C                 	db	108	;'l'
   410  00610F  74                 	db	116	;'t'
   411  006110  25                 	db	37
   412  006111  73                 	db	115	;'s'
   413  006112  3B                 	db	59	;';'
   414  006113  6C                 	db	108	;'l'
   415  006114  6F                 	db	111	;'o'
   416  006115  25                 	db	37
   417  006116  73                 	db	115	;'s'
   418  006117  3B                 	db	59	;';'
   419  006118  72                 	db	114	;'r'
   420  006119  25                 	db	37
   421  00611A  73                 	db	115	;'s'
   422  00611B  3B                 	db	59	;';'
   423  00611C  63                 	db	99	;'c'
   424  00611D  25                 	db	37
   425  00611E  73                 	db	115	;'s'
   426  00611F  3B                 	db	59	;';'
   427  006120  6B                 	db	107	;'k'
   428  006121  25                 	db	37
   429  006122  73                 	db	115	;'s'
   430  006123  3B                 	db	59	;';'
   431  006124  68                 	db	104	;'h'
   432  006125  25                 	db	37
   433  006126  73                 	db	115	;'s'
   434  006127  3B                 	db	59	;';'
   435  006128  64                 	db	100	;'d'
   436  006129  25                 	db	37
   437  00612A  73                 	db	115	;'s'
   438  00612B  00                 	db	0
   439  00612C                     STR_18:
   440  00612C  73                 	db	115	;'s'
   441  00612D  74                 	db	116	;'t'
   442  00612E  72                 	db	114	;'r'
   443  00612F  69                 	db	105	;'i'
   444  006130  6E                 	db	110	;'n'
   445  006131  67                 	db	103	;'g'
   446  006132  5F                 	db	95	;'_'
   447  006133  64                 	db	100	;'d'
   448  006134  61                 	db	97	;'a'
   449  006135  64                 	db	100	;'d'
   450  006136  6F                 	db	111	;'o'
   451  006137  2E                 	db	46
   452  006138  6F                 	db	111	;'o'
   453  006139  64                 	db	100	;'d'
   454  00613A  6F                 	db	111	;'o'
   455  00613B  6D                 	db	109	;'m'
   456  00613C  65                 	db	101	;'e'
   457  00613D  74                 	db	116	;'t'
   458  00613E  72                 	db	114	;'r'
   459  00613F  6F                 	db	111	;'o'
   460  006140  5F                 	db	95	;'_'
   461  006141  74                 	db	116	;'t'
   462  006142  6F                 	db	111	;'o'
   463  006143  74                 	db	116	;'t'
   464  006144  61                 	db	97	;'a'
   465  006145  6C                 	db	108	;'l'
   466  006146  00                 	db	0
   467  006147  6F                 	db	111	;'o'
   468  006148  20                 	db	32
   469  006149  53                 	db	83	;'S'
   470  00614A  69                 	db	105	;'i'
   471  00614B  73                 	db	115	;'s'
   472  00614C  74                 	db	116	;'t'
   473  00614D  65                 	db	101	;'e'
   474  00614E  6D                 	db	109	;'m'
   475  00614F  61                 	db	97	;'a'
   476  006150  20                 	db	32
   477  006151  64                 	db	100	;'d'
   478  006152  65                 	db	101	;'e'
   479  006153  20                 	db	32
   480  006154  61                 	db	97	;'a'
   481  006155  72                 	db	114	;'r'
   482  006156  71                 	db	113	;'q'
   483  006157  75                 	db	117	;'u'
   484  006158  69                 	db	105	;'i'
   485  006159  76                 	db	118	;'v'
   486  00615A  6F                 	db	111	;'o'
   487  00615B  00                 	db	0
   488  00615C                     STR_29:
   489  00615C  42                 	db	66	;'B'
   490  00615D  31                 	db	49	;'1'
   491  00615E  3A                 	db	58	;':'
   492  00615F  52                 	db	82	;'R'
   493  006160  50                 	db	80	;'P'
   494  006161  4D                 	db	77	;'M'
   495  006162  20                 	db	32
   496  006163  20                 	db	32
   497  006164  42                 	db	66	;'B'
   498  006165  32                 	db	50	;'2'
   499  006166  3A                 	db	58	;':'
   500  006167  46                 	db	70	;'F'
   501  006168  45                 	db	69	;'E'
   502  006169  4E                 	db	78	;'N'
   503  00616A  43                 	db	67	;'C'
   504  00616B  45                 	db	69	;'E'
   505  00616C  00                 	db	0
   506  00616D                     STR_17:
   507  00616D  73                 	db	115	;'s'
   508  00616E  74                 	db	116	;'t'
   509  00616F  72                 	db	114	;'r'
   510  006170  69                 	db	105	;'i'
   511  006171  6E                 	db	110	;'n'
   512  006172  67                 	db	103	;'g'
   513  006173  5F                 	db	95	;'_'
   514  006174  64                 	db	100	;'d'
   515  006175  61                 	db	97	;'a'
   516  006176  64                 	db	100	;'d'
   517  006177  6F                 	db	111	;'o'
   518  006178  2E                 	db	46
   519  006179  63                 	db	99	;'c'
   520  00617A  6F                 	db	111	;'o'
   521  00617B  6D                 	db	109	;'m'
   522  00617C  62                 	db	98	;'b'
   523  00617D  00                 	db	0
   524  00617E                     STR_27:
   525  00617E  42                 	db	66	;'B'
   526  00617F  31                 	db	49	;'1'
   527  006180  3A                 	db	58	;':'
   528  006181  52                 	db	82	;'R'
   529  006182  50                 	db	80	;'P'
   530  006183  4D                 	db	77	;'M'
   531  006184  20                 	db	32
   532  006185  42                 	db	66	;'B'
   533  006186  32                 	db	50	;'2'
   534  006187  3A                 	db	58	;':'
   535  006188  46                 	db	70	;'F'
   536  006189  45                 	db	69	;'E'
   537  00618A  4E                 	db	78	;'N'
   538  00618B  43                 	db	67	;'C'
   539  00618C  45                 	db	69	;'E'
   540  00618D  00                 	db	0
   541  00618E                     STR_19:
   542  00618E  73                 	db	115	;'s'
   543  00618F  74                 	db	116	;'t'
   544  006190  72                 	db	114	;'r'
   545  006191  69                 	db	105	;'i'
   546  006192  6E                 	db	110	;'n'
   547  006193  67                 	db	103	;'g'
   548  006194  5F                 	db	95	;'_'
   549  006195  64                 	db	100	;'d'
   550  006196  61                 	db	97	;'a'
   551  006197  64                 	db	100	;'d'
   552  006198  6F                 	db	111	;'o'
   553  006199  2E                 	db	46
   554  00619A  64                 	db	100	;'d'
   555  00619B  74                 	db	116	;'t'
   556  00619C  63                 	db	99	;'c'
   557  00619D  00                 	db	0
   558  00619E                     STR_15:
   559  00619E  73                 	db	115	;'s'
   560  00619F  74                 	db	116	;'t'
   561  0061A0  72                 	db	114	;'r'
   562  0061A1  69                 	db	105	;'i'
   563  0061A2  6E                 	db	110	;'n'
   564  0061A3  67                 	db	103	;'g'
   565  0061A4  5F                 	db	95	;'_'
   566  0061A5  64                 	db	100	;'d'
   567  0061A6  61                 	db	97	;'a'
   568  0061A7  64                 	db	100	;'d'
   569  0061A8  6F                 	db	111	;'o'
   570  0061A9  2E                 	db	46
   571  0061AA  76                 	db	118	;'v'
   572  0061AB  65                 	db	101	;'e'
   573  0061AC  6C                 	db	108	;'l'
   574  0061AD  00                 	db	0
   575  0061AE                     STR_16:
   576  0061AE  73                 	db	115	;'s'
   577  0061AF  74                 	db	116	;'t'
   578  0061B0  72                 	db	114	;'r'
   579  0061B1  69                 	db	105	;'i'
   580  0061B2  6E                 	db	110	;'n'
   581  0061B3  67                 	db	103	;'g'
   582  0061B4  5F                 	db	95	;'_'
   583  0061B5  64                 	db	100	;'d'
   584  0061B6  61                 	db	97	;'a'
   585  0061B7  64                 	db	100	;'d'
   586  0061B8  6F                 	db	111	;'o'
   587  0061B9  2E                 	db	46
   588  0061BA  72                 	db	114	;'r'
   589  0061BB  70                 	db	112	;'p'
   590  0061BC  6D                 	db	109	;'m'
   591  0061BD  00                 	db	0
   592  0061BE                     STR_2:
   593  0061BE  49                 	db	73	;'I'
   594  0061BF  6E                 	db	110	;'n'
   595  0061C0  73                 	db	115	;'s'
   596  0061C1  69                 	db	105	;'i'
   597  0061C2  72                 	db	114	;'r'
   598  0061C3  61                 	db	97	;'a'
   599  0061C4  20                 	db	32
   600  0061C5  6F                 	db	111	;'o'
   601  0061C6  20                 	db	32
   602  0061C7  43                 	db	67	;'C'
   603  0061C8  61                 	db	97	;'a'
   604  0061C9  72                 	db	114	;'r'
   605  0061CA  74                 	db	116	;'t'
   606  0061CB  61                 	db	97	;'a'
   607  0061CC  6F                 	db	111	;'o'
   608  0061CD  00                 	db	0
   609  0061CE  45                 	db	69	;'E'
   610  0061CF  72                 	db	114	;'r'
   611  0061D0  72                 	db	114	;'r'
   612  0061D1  6F                 	db	111	;'o'
   613  0061D2  20                 	db	32
   614  0061D3  61                 	db	97	;'a'
   615  0061D4  6F                 	db	111	;'o'
   616  0061D5  20                 	db	32
   617  0061D6  6D                 	db	109	;'m'
   618  0061D7  6F                 	db	111	;'o'
   619  0061D8  6E                 	db	110	;'n'
   620  0061D9  74                 	db	116	;'t'
   621  0061DA  61                 	db	97	;'a'
   622  0061DB  72                 	db	114	;'r'
   623  0061DC  00                 	db	0
   624  0061DD                     STR_31:
   625  0061DD  52                 	db	82	;'R'
   626  0061DE  45                 	db	69	;'E'
   627  0061DF  47                 	db	71	;'G'
   628  0061E0  49                 	db	73	;'I'
   629  0061E1  41                 	db	65	;'A'
   630  0061E2  4F                 	db	79	;'O'
   631  0061E3  20                 	db	32
   632  0061E4  4E                 	db	78	;'N'
   633  0061E5  45                 	db	69	;'E'
   634  0061E6  47                 	db	71	;'G'
   635  0061E7  41                 	db	65	;'A'
   636  0061E8  44                 	db	68	;'D'
   637  0061E9  41                 	db	65	;'A'
   638  0061EA  00                 	db	0
   639  0061EB  45                 	db	69	;'E'
   640  0061EC  72                 	db	114	;'r'
   641  0061ED  72                 	db	114	;'r'
   642  0061EE  6F                 	db	111	;'o'
   643  0061EF  20                 	db	32
   644  0061F0  61                 	db	97	;'a'
   645  0061F1  6F                 	db	111	;'o'
   646  0061F2  20                 	db	32
   647  0061F3  63                 	db	99	;'c'
   648  0061F4  72                 	db	114	;'r'
   649  0061F5  69                 	db	105	;'i'
   650  0061F6  61                 	db	97	;'a'
   651  0061F7  72                 	db	114	;'r'
   652  0061F8  00                 	db	0
   653  0061F9  65                 	db	101	;'e'
   654  0061FA  78                 	db	120	;'x'
   655  0061FB  74                 	db	116	;'t'
   656  0061FC  66                 	db	102	;'f'
   657  0061FD  65                 	db	101	;'e'
   658  0061FE  6E                 	db	110	;'n'
   659  0061FF  63                 	db	99	;'c'
   660  006200  65                 	db	101	;'e'
   661  006201  2E                 	db	46
   662  006202  74                 	db	116	;'t'
   663  006203  78                 	db	120	;'x'
   664  006204  74                 	db	116	;'t'
   665  006205  00                 	db	0
   666  006206                     STR_4:
   667  006206  4D                 	db	77	;'M'
   668  006207  4D                 	db	77	;'M'
   669  006208  43                 	db	67	;'C'
   670  006209  20                 	db	32
   671  00620A  56                 	db	86	;'V'
   672  00620B  65                 	db	101	;'e'
   673  00620C  72                 	db	114	;'r'
   674  00620D  2E                 	db	46
   675  00620E  20                 	db	32
   676  00620F  33                 	db	51	;'3'
   677  006210  00                 	db	0
   678  006211                     STR_1:
   679  006211  53                 	db	83	;'S'
   680  006212  65                 	db	101	;'e'
   681  006213  6D                 	db	109	;'m'
   682  006214  20                 	db	32
   683  006215  43                 	db	67	;'C'
   684  006216  61                 	db	97	;'a'
   685  006217  72                 	db	114	;'r'
   686  006218  74                 	db	116	;'t'
   687  006219  61                 	db	97	;'a'
   688  00621A  6F                 	db	111	;'o'
   689  00621B  00                 	db	0
   690  00621C  56                 	db	86	;'V'
   691  00621D  65                 	db	101	;'e'
   692  00621E  72                 	db	114	;'r'
   693  00621F  69                 	db	105	;'i'
   694  006220  66                 	db	102	;'f'
   695  006221  69                 	db	105	;'i'
   696  006222  71                 	db	113	;'q'
   697  006223  75                 	db	117	;'u'
   698  006224  65                 	db	101	;'e'
   699  006225  00                 	db	0
   700  006226  6F                 	db	111	;'o'
   701  006227  20                 	db	32
   702  006228  61                 	db	97	;'a'
   703  006229  72                 	db	114	;'r'
   704  00622A  71                 	db	113	;'q'
   705  00622B  75                 	db	117	;'u'
   706  00622C  69                 	db	105	;'i'
   707  00622D  76                 	db	118	;'v'
   708  00622E  6F                 	db	111	;'o'
   709  00622F  00                 	db	0
   710  006230                     STR_3:
   711  006230  53                 	db	83	;'S'
   712  006231  44                 	db	68	;'D'
   713  006232  20                 	db	32
   714  006233  56                 	db	86	;'V'
   715  006234  45                 	db	69	;'E'
   716  006235  52                 	db	82	;'R'
   717  006236  2E                 	db	46
   718  006237  20                 	db	32
   719  006238  31                 	db	49	;'1'
   720  006239  00                 	db	0
   721  00623A  6F                 	db	111	;'o'
   722  00623B  20                 	db	32
   723  00623C  63                 	db	99	;'c'
   724  00623D  61                 	db	97	;'a'
   725  00623E  72                 	db	114	;'r'
   726  00623F  74                 	db	116	;'t'
   727  006240  61                 	db	97	;'a'
   728  006241  6F                 	db	111	;'o'
   729  006242  00                 	db	0
   730  006243                     STR_28:
   731  006243  42                 	db	66	;'B'
   732  006244  32                 	db	50	;'2'
   733  006245  3A                 	db	58	;':'
   734  006246  48                 	db	72	;'H'
   735  006247  4F                 	db	79	;'O'
   736  006248  4D                 	db	77	;'M'
   737  006249  45                 	db	69	;'E'
   738  00624A  00                 	db	0
   739  00624B                     STR_32:
   740  00624B  4C                 	db	76	;'L'
   741  00624C  4F                 	db	79	;'O'
   742  00624D  2D                 	db	45
   743  00624E  4C                 	db	76	;'L'
   744  00624F  54                 	db	84	;'T'
   745  006250  3A                 	db	58	;':'
   746  006251  00                 	db	0
   747  006252                     STR_6:
   748  006252  47                 	db	71	;'G'
   749  006253  50                 	db	80	;'P'
   750  006254  47                 	db	71	;'G'
   751  006255  47                 	db	71	;'G'
   752  006256  41                 	db	65	;'A'
   753  006257  00                 	db	0
   754  006258                     STR_5:
   755  006258  47                 	db	71	;'G'
   756  006259  50                 	db	80	;'P'
   757  00625A  52                 	db	82	;'R'
   758  00625B  4D                 	db	77	;'M'
   759  00625C  43                 	db	67	;'C'
   760  00625D  00                 	db	0
   761  00625E                     STR_24:
   762  00625E  56                 	db	86	;'V'
   763  00625F  45                 	db	69	;'E'
   764  006260  4C                 	db	76	;'L'
   765  006261  3A                 	db	58	;':'
   766  006262  00                 	db	0
   767  006263                     STR_23:
   768  006263  52                 	db	82	;'R'
   769  006264  50                 	db	80	;'P'
   770  006265  4D                 	db	77	;'M'
   771  006266  3A                 	db	58	;':'
   772  006267  00                 	db	0
   773  006268                     STR_13:
   774  006268  2E                 	db	46
   775  006269  74                 	db	116	;'t'
   776  00626A  6C                 	db	108	;'l'
   777  00626B  6D                 	db	109	;'m'
   778  00626C  00                 	db	0
   779  00626D                     STR_26:
   780  00626D  6C                 	db	108	;'l'
   781  00626E  6F                 	db	111	;'o'
   782  00626F  3A                 	db	58	;':'
   783  006270  00                 	db	0
   784  006271                     STR_25:
   785  006271  6C                 	db	108	;'l'
   786  006272  74                 	db	116	;'t'
   787  006273  3A                 	db	58	;':'
   788  006274  00                 	db	0
   789  006275                     STR_21:
   790  006275  46                 	db	70	;'F'
   791  006276  41                 	db	65	;'A'
   792  006277  54                 	db	84	;'T'
   793  006278  00                 	db	0
   794  006279  0D                 	db	13
   795  00627A  0A                 	db	10
   796  00627B  00                 	db	0
   797  00627C                     STR_33:
   798  00627C  2D                 	db	45
   799  00627D  00                 	db	0
   800  00627E  00                 	db	0	; dummy byte at the end
   801  0000                     
   802                           ; #config settings
   803                           
   804                           	psect	cinit
   805  004660                     __pcinit:
   806                           	callstack 0
   807  004660                     start_initialization:
   808                           	callstack 0
   809  004660                     __initialization:
   810                           	callstack 0
   811                           
   812                           ; Initialize objects allocated to BANK2 (14 bytes)
   813                           ; load TBLPTR registers with __pidataBANK2
   814  004660  0E2A               	movlw	low __pidataBANK2
   815  004662  6EF6               	movwf	tblptrl,c
   816  004664  0E54               	movlw	high __pidataBANK2
   817  004666  6EF7               	movwf	tblptrh,c
   818  004668  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   819  00466A  6EF8               	movwf	tblptru,c
   820  00466C  EE02  F0AD         	lfsr	0,__pdataBANK2
   821  004670  EE10 F00E          	lfsr	1,14
   822  004674                     copy_data0:
   823  004674  0009               	tblrd		*+
   824  004676  CFF5 FFEE          	movff	tablat,postinc0
   825  00467A  50E5               	movf	postdec1,w,c
   826  00467C  50E1               	movf	fsr1l,w,c
   827  00467E  E1FA               	bnz	copy_data0
   828                           
   829                           ; Initialize objects allocated to COMRAM (1 bytes)
   830                           ; load TBLPTR registers with __pidataCOMRAM
   831  004680  0EC0               	movlw	low __pidataCOMRAM
   832  004682  6EF6               	movwf	tblptrl,c
   833  004684  0E54               	movlw	high __pidataCOMRAM
   834  004686  6EF7               	movwf	tblptrh,c
   835  004688  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   836  00468A  6EF8               	movwf	tblptru,c
   837  00468C  0009               	tblrd		*+	;fetch initializer
   838  00468E  CFF5 F046          	movff	tablat,__pdataCOMRAM
   839                           
   840                           ; Clear objects allocated to BIGRAM (544 bytes)
   841  004692  EE02  F0BB         	lfsr	0,__pbssBIGRAM
   842  004696  EE12 F020          	lfsr	1,544
   843  00469A                     clear_0:
   844  00469A  6AEE               	clrf	postinc0,c
   845  00469C  50E5               	movf	postdec1,w,c
   846  00469E  50E1               	movf	fsr1l,w,c
   847  0046A0  E1FC               	bnz	clear_0
   848  0046A2  50E2               	movf	fsr1h,w,c
   849  0046A4  E1FA               	bnz	clear_0
   850                           
   851                           ; Clear objects allocated to BANK2 (139 bytes)
   852  0046A6  EE02  F000         	lfsr	0,__pbssBANK2
   853  0046AA  0E8B               	movlw	139
   854  0046AC                     clear_1:
   855  0046AC  6AEE               	clrf	postinc0,c
   856  0046AE  06E8               	decf	wreg,f,c
   857  0046B0  E1FD               	bnz	clear_1
   858                           
   859                           ; Clear objects allocated to BANK1 (250 bytes)
   860  0046B2  EE01  F000         	lfsr	0,__pbssBANK1
   861  0046B6  0EFA               	movlw	250
   862  0046B8                     clear_2:
   863  0046B8  6AEE               	clrf	postinc0,c
   864  0046BA  06E8               	decf	wreg,f,c
   865  0046BC  E1FD               	bnz	clear_2
   866                           
   867                           ; Clear objects allocated to BANK0 (8 bytes)
   868  0046BE  EE00  F0F6         	lfsr	0,__pbssBANK0
   869  0046C2  0E08               	movlw	8
   870  0046C4                     clear_3:
   871  0046C4  6AEE               	clrf	postinc0,c
   872  0046C6  06E8               	decf	wreg,f,c
   873  0046C8  E1FD               	bnz	clear_3
   874                           
   875                           ; Clear objects allocated to COMRAM (19 bytes)
   876  0046CA  EE00  F033         	lfsr	0,__pbssCOMRAM
   877  0046CE  0E13               	movlw	19
   878  0046D0                     clear_4:
   879  0046D0  6AEE               	clrf	postinc0,c
   880  0046D2  06E8               	decf	wreg,f,c
   881  0046D4  E1FD               	bnz	clear_4
   882  0046D6                     end_of_initialization:
   883                           	callstack 0
   884  0046D6                     __end_of__initialization:
   885                           	callstack 0
   886  0046D6  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   887  0046D8  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   888  0046DA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   889  0046DC  6EF8               	movwf	tblptru,c
   890  0046DE  0100               	movlb	0
   891  0046E0  EF81  F028         	goto	_main	;jump to C main() function
   892                           
   893                           	psect	bssCOMRAM
   894  000033                     __pbssCOMRAM:
   895                           	callstack 0
   896  000033                     _flag:
   897                           	callstack 0
   898  000033                     	ds	3
   899  000036                     _time_atualizacao:
   900                           	callstack 0
   901  000036                     	ds	2
   902  000038                     _FatFs:
   903                           	callstack 0
   904  000038                     	ds	2
   905  00003A                     troca_de_tela@last_state:
   906                           	callstack 0
   907  00003A                     	ds	1
   908  00003B                     troca_de_tela@state:
   909                           	callstack 0
   910  00003B                     	ds	1
   911  00003C                     _tarefa_em_execucao:
   912                           	callstack 0
   913  00003C                     	ds	1
   914  00003D                     _sinaliza_int_timer:
   915                           	callstack 0
   916  00003D                     	ds	1
   917  00003E                     _data_uart_recebe:
   918                           	callstack 0
   919  00003E                     	ds	1
   920  00003F                     _estado:
   921                           	callstack 0
   922  00003F                     	ds	1
   923  000040                     escrita_sdcard@f_fix:
   924                           	callstack 0
   925  000040                     	ds	1
   926  000041                     _data_hoje:
   927                           	callstack 0
   928  000041                     	ds	1
   929  000042                     	ds	1
   930  000043                     _Term:
   931                           	callstack 0
   932  000043                     	ds	1
   933  000044                     _SentenceType:
   934                           	callstack 0
   935  000044                     	ds	1
   936  000045                     _char_number:
   937                           	callstack 0
   938  000045                     	ds	1
   939                           
   940                           	psect	dataCOMRAM
   941  000046                     __pdataCOMRAM:
   942                           	callstack 0
   943  000046                     	ds	1
   944                           
   945                           	psect	bssBANK0
   946  0000F6                     __pbssBANK0:
   947                           	callstack 0
   948  0000F6                     _point_buff_gps_long:
   949                           	callstack 0
   950  0000F6                     	ds	2
   951  0000F8                     _point_buff_gps_lat:
   952                           	callstack 0
   953  0000F8                     	ds	2
   954  0000FA                     _time_recovery:
   955                           	callstack 0
   956  0000FA                     	ds	2
   957  0000FC                     _time_sd:
   958                           	callstack 0
   959  0000FC                     	ds	2
   960                           
   961                           	psect	bssBANK1
   962  000100                     __pbssBANK1:
   963                           	callstack 0
   964  000100                     _tempo_tarefa:
   965                           	callstack 0
   966  000100                     	ds	8
   967  000108                     _tempo_backup:
   968                           	callstack 0
   969  000108                     	ds	8
   970  000110                     _p_tarefas:
   971                           	callstack 0
   972  000110                     	ds	8
   973  000118                     _timeout_tarefa:
   974                           	callstack 0
   975  000118                     	ds	2
   976  00011A                     _fsid:
   977                           	callstack 0
   978  00011A                     	ds	2
   979  00011C                     _GPGGA_ok:
   980                           	callstack 0
   981  00011C                     	ds	2
   982  00011E                     _GPRMC_ok:
   983                           	callstack 0
   984  00011E                     	ds	2
   985  000120                     _data_buff:
   986                           	callstack 0
   987  000120                     	ds	2
   988  000122                     _poligono_ext:
   989                           	callstack 0
   990  000122                     	ds	124
   991  00019E                     _fil:
   992                           	callstack 0
   993  00019E                     	ds	28
   994  0001BA                     _buffer:
   995                           	callstack 0
   996  0001BA                     	ds	12
   997  0001C6                     _temp_buff_lat:
   998                           	callstack 0
   999  0001C6                     	ds	11
  1000  0001D1                     _rawTime:
  1001                           	callstack 0
  1002  0001D1                     	ds	11
  1003  0001DC                     _rawDate:
  1004                           	callstack 0
  1005  0001DC                     	ds	7
  1006  0001E3                     _rawCourse:
  1007                           	callstack 0
  1008  0001E3                     	ds	6
  1009  0001E9                     _rawSpeed:
  1010                           	callstack 0
  1011  0001E9                     	ds	6
  1012  0001EF                     _sentence:
  1013                           	callstack 0
  1014  0001EF                     	ds	6
  1015  0001F5                     _rawSatellites:
  1016                           	callstack 0
  1017  0001F5                     	ds	3
  1018  0001F8                     _rawFix:
  1019                           	callstack 0
  1020  0001F8                     	ds	2
  1021                           
  1022                           	psect	bssBANK2
  1023  000200                     __pbssBANK2:
  1024                           	callstack 0
  1025  000200                     _string_dado:
  1026                           	callstack 0
  1027  000200                     	ds	59
  1028  00023B                     _dado_arquivo:
  1029                           	callstack 0
  1030  00023B                     	ds	20
  1031  00024F                     _filename:
  1032                           	callstack 0
  1033  00024F                     	ds	15
  1034  00025E                     _rawLongitude:
  1035                           	callstack 0
  1036  00025E                     	ds	13
  1037  00026B                     _rawLatitude:
  1038                           	callstack 0
  1039  00026B                     	ds	13
  1040  000278                     _temp_buff_long:
  1041                           	callstack 0
  1042  000278                     	ds	12
  1043  000284                     _rawAltitude:
  1044                           	callstack 0
  1045  000284                     	ds	7
  1046                           
  1047                           	psect	dataBANK2
  1048  0002AD                     __pdataBANK2:
  1049                           	callstack 0
  1050  0002AD                     	ds	7
  1051  0002B4                     escreve_inteiro_lcd@F3223:
  1052                           	callstack 0
  1053  0002B4                     	ds	7
  1054                           
  1055                           	psect	bssBIGRAM
  1056  0002BB                     __pbssBIGRAM:
  1057                           	callstack 0
  1058  0002BB                     _fs:
  1059                           	callstack 0
  1060  0002BB                     	ds	544
  1061                           
  1062                           	psect	cstackBANK2
  1063  00028B                     __pcstackBANK2:
  1064                           	callstack 0
  1065  00028B                     fprintf@s:
  1066                           	callstack 0
  1067                           
  1068                           ; 16 bytes @ 0x0
  1069  00028B                     	ds	16
  1070  00029B                     fprintf@res:
  1071                           	callstack 0
  1072                           
  1073                           ; 2 bytes @ 0x10
  1074  00029B                     	ds	2
  1075  00029D                     _fprintf$2130:
  1076                           	callstack 0
  1077                           
  1078                           ; 2 bytes @ 0x12
  1079  00029D                     	ds	2
  1080  00029F                     fprintf@w:
  1081                           	callstack 0
  1082                           
  1083                           ; 2 bytes @ 0x14
  1084  00029F                     	ds	2
  1085  0002A1                     fprintf@f:
  1086                           	callstack 0
  1087                           
  1088                           ; 1 bytes @ 0x16
  1089  0002A1                     	ds	1
  1090  0002A2                     fprintf@r:
  1091                           	callstack 0
  1092                           
  1093                           ; 1 bytes @ 0x17
  1094  0002A2                     	ds	1
  1095  0002A3                     fprintf@val:
  1096                           	callstack 0
  1097                           
  1098                           ; 4 bytes @ 0x18
  1099  0002A3                     	ds	4
  1100  0002A7                     fprintf@arp:
  1101                           	callstack 0
  1102                           
  1103                           ; 1 bytes @ 0x1C
  1104  0002A7                     	ds	1
  1105  0002A8                     fprintf@cc:
  1106                           	callstack 0
  1107                           
  1108                           ; 2 bytes @ 0x1D
  1109  0002A8                     	ds	2
  1110  0002AA                     fprintf@i:
  1111                           	callstack 0
  1112                           
  1113                           ; 2 bytes @ 0x1F
  1114  0002AA                     	ds	2
  1115  0002AC                     fprintf@c:
  1116                           	callstack 0
  1117                           
  1118                           ; 1 bytes @ 0x21
  1119  0002AC                     	ds	1
  1120                           
  1121                           	psect	cstackBANK0
  1122  000060                     __pcstackBANK0:
  1123                           	callstack 0
  1124  000060                     ??_get_fattime:
  1125  000060                     configura_baudrate_uart@x:
  1126                           	callstack 0
  1127  000060                     escreve_inteiro_lcd@texto:
  1128                           	callstack 0
  1129  000060                     mensagem_inicial@msg_linha_um:
  1130                           	callstack 0
  1131                           
  1132                           ; 17 bytes @ 0x0
  1133  000060                     	ds	1
  1134  000061                     sdc_disk_read@start_add:
  1135                           	callstack 0
  1136                           
  1137                           ; 4 bytes @ 0x1
  1138  000061                     	ds	1
  1139  000062                     sdc_disk_initialize@stat:
  1140                           	callstack 0
  1141  000062                     sdc_disk_write@count1:
  1142                           	callstack 0
  1143                           
  1144                           ; 2 bytes @ 0x2
  1145  000062                     	ds	1
  1146  000063                     sdc_disk_initialize@count1:
  1147                           	callstack 0
  1148                           
  1149                           ; 2 bytes @ 0x3
  1150  000063                     	ds	1
  1151  000064                     sdc_disk_write@res:
  1152                           	callstack 0
  1153                           
  1154                           ; 1 bytes @ 0x4
  1155  000064                     	ds	1
  1156  000065                     sdc_disk_initialize@crc_number:
  1157                           	callstack 0
  1158  000065                     sdc_disk_read@length:
  1159                           	callstack 0
  1160  000065                     sdc_disk_write@j:
  1161                           	callstack 0
  1162                           
  1163                           ; 2 bytes @ 0x5
  1164  000065                     	ds	2
  1165  000067                     sdc_disk_initialize@buff_i:
  1166                           	callstack 0
  1167  000067                     sdc_disk_read@buff:
  1168                           	callstack 0
  1169  000067                     sdc_disk_write@buff:
  1170                           	callstack 0
  1171                           
  1172                           ; 1 bytes @ 0x7
  1173  000067                     	ds	1
  1174  000068                     sdc_disk_initialize@ocr:
  1175                           	callstack 0
  1176  000068                     disk_read@buff:
  1177                           	callstack 0
  1178  000068                     disk_write@buff:
  1179                           	callstack 0
  1180                           
  1181                           ; 2 bytes @ 0x8
  1182  000068                     	ds	1
  1183  000069                     sdc_disk_initialize@count2:
  1184                           	callstack 0
  1185                           
  1186                           ; 2 bytes @ 0x9
  1187  000069                     	ds	1
  1188  00006A                     disk_read@sector:
  1189                           	callstack 0
  1190  00006A                     disk_write@sector:
  1191                           	callstack 0
  1192                           
  1193                           ; 4 bytes @ 0xA
  1194  00006A                     	ds	1
  1195  00006B                     sdc_disk_initialize@buff:
  1196                           	callstack 0
  1197                           
  1198                           ; 1 bytes @ 0xB
  1199  00006B                     	ds	3
  1200  00006E                     disk_read@count:
  1201                           	callstack 0
  1202  00006E                     disk_write@count:
  1203                           	callstack 0
  1204                           
  1205                           ; 1 bytes @ 0xE
  1206  00006E                     	ds	1
  1207  00006F                     disk_read@pdrv:
  1208                           	callstack 0
  1209  00006F                     disk_write@pdrv:
  1210                           	callstack 0
  1211                           
  1212                           ; 1 bytes @ 0xF
  1213  00006F                     	ds	1
  1214  000070                     disk_read@result:
  1215                           	callstack 0
  1216  000070                     disk_write@result:
  1217                           	callstack 0
  1218                           
  1219                           ; 2 bytes @ 0x10
  1220  000070                     	ds	1
  1221  000071                     mensagem_inicial@msg_dois:
  1222                           	callstack 0
  1223                           
  1224                           ; 17 bytes @ 0x11
  1225  000071                     	ds	1
  1226  000072                     disk_read@res:
  1227                           	callstack 0
  1228  000072                     disk_write@res:
  1229                           	callstack 0
  1230                           
  1231                           ; 1 bytes @ 0x12
  1232  000072                     	ds	1
  1233  000073                     move_window@sector:
  1234                           	callstack 0
  1235  000073                     check_fs@sect:
  1236                           	callstack 0
  1237                           
  1238                           ; 4 bytes @ 0x13
  1239  000073                     	ds	4
  1240  000077                     ??_move_window:
  1241  000077                     check_fs@fs:
  1242                           	callstack 0
  1243                           
  1244                           ; 2 bytes @ 0x17
  1245  000077                     	ds	2
  1246  000079                     auto_mount@path:
  1247                           	callstack 0
  1248                           
  1249                           ; 1 bytes @ 0x19
  1250  000079                     	ds	1
  1251  00007A                     auto_mount@chk_wp:
  1252                           	callstack 0
  1253                           
  1254                           ; 1 bytes @ 0x1A
  1255  00007A                     	ds	1
  1256  00007B                     ??_auto_mount:
  1257                           
  1258                           ; 1 bytes @ 0x1B
  1259  00007B                     	ds	6
  1260  000081                     move_window@n:
  1261                           	callstack 0
  1262                           
  1263                           ; 1 bytes @ 0x21
  1264  000081                     	ds	1
  1265  000082                     move_window@wsect:
  1266                           	callstack 0
  1267                           
  1268                           ; 4 bytes @ 0x22
  1269  000082                     	ds	4
  1270  000086                     move_window@fs:
  1271                           	callstack 0
  1272                           
  1273                           ; 2 bytes @ 0x26
  1274  000086                     	ds	2
  1275  000088                     ??_get_cluster:
  1276  000088                     put_cluster@clust:
  1277                           	callstack 0
  1278  000088                     f_sync@fp:
  1279                           	callstack 0
  1280                           
  1281                           ; 2 bytes @ 0x28
  1282  000088                     	ds	2
  1283  00008A                     put_cluster@val:
  1284                           	callstack 0
  1285  00008A                     f_sync@tim:
  1286                           	callstack 0
  1287                           
  1288                           ; 4 bytes @ 0x2A
  1289  00008A                     	ds	2
  1290  00008C                     ??_put_cluster:
  1291                           
  1292                           ; 1 bytes @ 0x2C
  1293  00008C                     	ds	2
  1294  00008E                     f_sync@res:
  1295                           	callstack 0
  1296                           
  1297                           ; 1 bytes @ 0x2E
  1298  00008E                     	ds	1
  1299  00008F                     f_sync@dir:
  1300                           	callstack 0
  1301                           
  1302                           ; 2 bytes @ 0x2F
  1303  00008F                     	ds	2
  1304  000091                     get_cluster@wc:
  1305                           	callstack 0
  1306  000091                     f_close@fp:
  1307                           	callstack 0
  1308  000091                     auto_mount@maxclust:
  1309                           	callstack 0
  1310                           
  1311                           ; 4 bytes @ 0x31
  1312  000091                     	ds	1
  1313  000092                     _put_cluster$1527:
  1314                           	callstack 0
  1315                           
  1316                           ; 2 bytes @ 0x32
  1317  000092                     	ds	1
  1318  000093                     f_close@res:
  1319                           	callstack 0
  1320  000093                     get_cluster@fatsect:
  1321                           	callstack 0
  1322                           
  1323                           ; 4 bytes @ 0x33
  1324  000093                     	ds	1
  1325  000094                     _put_cluster$1528:
  1326                           	callstack 0
  1327                           
  1328                           ; 2 bytes @ 0x34
  1329  000094                     	ds	1
  1330  000095                     auto_mount@bootsect:
  1331                           	callstack 0
  1332                           
  1333                           ; 4 bytes @ 0x35
  1334  000095                     	ds	1
  1335  000096                     put_cluster@fatsect:
  1336                           	callstack 0
  1337                           
  1338                           ; 4 bytes @ 0x36
  1339  000096                     	ds	1
  1340  000097                     get_cluster@bc:
  1341                           	callstack 0
  1342                           
  1343                           ; 2 bytes @ 0x37
  1344  000097                     	ds	2
  1345  000099                     get_cluster@fs:
  1346                           	callstack 0
  1347  000099                     auto_mount@totalsect:
  1348                           	callstack 0
  1349                           
  1350                           ; 4 bytes @ 0x39
  1351  000099                     	ds	1
  1352  00009A                     put_cluster@bc:
  1353                           	callstack 0
  1354                           
  1355                           ; 2 bytes @ 0x3A
  1356  00009A                     	ds	1
  1357  00009B                     next_dir_entry@dj:
  1358                           	callstack 0
  1359                           
  1360                           ; 1 bytes @ 0x3B
  1361  00009B                     	ds	1
  1362  00009C                     ??_next_dir_entry:
  1363  00009C                     put_cluster@p:
  1364                           	callstack 0
  1365                           
  1366                           ; 2 bytes @ 0x3C
  1367  00009C                     	ds	1
  1368  00009D                     auto_mount@p:
  1369                           	callstack 0
  1370                           
  1371                           ; 2 bytes @ 0x3D
  1372  00009D                     	ds	1
  1373  00009E                     put_cluster@fs:
  1374                           	callstack 0
  1375                           
  1376                           ; 2 bytes @ 0x3E
  1377  00009E                     	ds	1
  1378  00009F                     auto_mount@fmt:
  1379                           	callstack 0
  1380                           
  1381                           ; 1 bytes @ 0x3F
  1382  00009F                     	ds	1
  1383  0000A0                     ?_create_chain:
  1384                           	callstack 0
  1385  0000A0                     auto_mount@stat:
  1386                           	callstack 0
  1387  0000A0                     remove_chain@clust:
  1388                           	callstack 0
  1389  0000A0                     create_chain@clust:
  1390                           	callstack 0
  1391                           
  1392                           ; 2 bytes @ 0x40
  1393  0000A0                     	ds	1
  1394  0000A1                     auto_mount@fatsize:
  1395                           	callstack 0
  1396                           
  1397                           ; 4 bytes @ 0x41
  1398  0000A1                     	ds	1
  1399  0000A2                     
  1400                           ; 1 bytes @ 0x42
  1401  0000A2                     	ds	1
  1402  0000A3                     next_dir_entry@clust:
  1403                           	callstack 0
  1404                           
  1405                           ; 2 bytes @ 0x43
  1406  0000A3                     	ds	1
  1407  0000A4                     remove_chain@nxt:
  1408                           	callstack 0
  1409  0000A4                     create_chain@mcl:
  1410                           	callstack 0
  1411                           
  1412                           ; 2 bytes @ 0x44
  1413  0000A4                     	ds	1
  1414  0000A5                     next_dir_entry@idx:
  1415                           	callstack 0
  1416  0000A5                     auto_mount@fs:
  1417                           	callstack 0
  1418                           
  1419                           ; 2 bytes @ 0x45
  1420  0000A5                     	ds	1
  1421  0000A6                     remove_chain@fs:
  1422                           	callstack 0
  1423  0000A6                     create_chain@fs:
  1424                           	callstack 0
  1425                           
  1426                           ; 2 bytes @ 0x46
  1427  0000A6                     	ds	1
  1428  0000A7                     trace_path@dj:
  1429                           	callstack 0
  1430                           
  1431                           ; 1 bytes @ 0x47
  1432  0000A7                     	ds	1
  1433  0000A8                     trace_path@fn:
  1434                           	callstack 0
  1435  0000A8                     create_chain@cstat:
  1436                           	callstack 0
  1437                           
  1438                           ; 2 bytes @ 0x48
  1439  0000A8                     	ds	1
  1440  0000A9                     trace_path@path:
  1441                           	callstack 0
  1442                           
  1443                           ; 2 bytes @ 0x49
  1444  0000A9                     	ds	1
  1445  0000AA                     create_chain@scl:
  1446                           	callstack 0
  1447                           
  1448                           ; 2 bytes @ 0x4A
  1449  0000AA                     	ds	1
  1450  0000AB                     trace_path@dir:
  1451                           	callstack 0
  1452                           
  1453                           ; 1 bytes @ 0x4B
  1454  0000AB                     	ds	1
  1455  0000AC                     ??_trace_path:
  1456  0000AC                     create_chain@ncl:
  1457                           	callstack 0
  1458                           
  1459                           ; 2 bytes @ 0x4C
  1460  0000AC                     	ds	2
  1461  0000AE                     reserve_direntry@dj:
  1462                           	callstack 0
  1463  0000AE                     f_write@fp:
  1464                           	callstack 0
  1465  0000AE                     f_lseek@fp:
  1466                           	callstack 0
  1467                           
  1468                           ; 2 bytes @ 0x4E
  1469  0000AE                     	ds	1
  1470  0000AF                     reserve_direntry@dir:
  1471                           	callstack 0
  1472                           
  1473                           ; 1 bytes @ 0x4F
  1474  0000AF                     	ds	1
  1475  0000B0                     ??_reserve_direntry:
  1476  0000B0                     f_write@buff:
  1477                           	callstack 0
  1478  0000B0                     _trace_path$1684:
  1479                           	callstack 0
  1480  0000B0                     f_lseek@ofs:
  1481                           	callstack 0
  1482                           
  1483                           ; 4 bytes @ 0x50
  1484  0000B0                     	ds	1
  1485  0000B1                     f_write@btw:
  1486                           	callstack 0
  1487                           
  1488                           ; 2 bytes @ 0x51
  1489  0000B1                     	ds	1
  1490  0000B2                     _trace_path$1686:
  1491                           	callstack 0
  1492                           
  1493                           ; 2 bytes @ 0x52
  1494  0000B2                     	ds	1
  1495  0000B3                     f_write@bw:
  1496                           	callstack 0
  1497                           
  1498                           ; 1 bytes @ 0x53
  1499  0000B3                     	ds	1
  1500  0000B4                     ??_f_lseek:
  1501  0000B4                     ??_f_write:
  1502  0000B4                     trace_path@fs:
  1503                           	callstack 0
  1504  0000B4                     reserve_direntry@sector:
  1505                           	callstack 0
  1506                           
  1507                           ; 4 bytes @ 0x54
  1508  0000B4                     	ds	2
  1509  0000B6                     trace_path@clust:
  1510                           	callstack 0
  1511                           
  1512                           ; 2 bytes @ 0x56
  1513  0000B6                     	ds	2
  1514  0000B8                     trace_path@ds:
  1515                           	callstack 0
  1516  0000B8                     reserve_direntry@n:
  1517                           	callstack 0
  1518                           
  1519                           ; 1 bytes @ 0x58
  1520  0000B8                     	ds	1
  1521  0000B9                     trace_path@dptr:
  1522                           	callstack 0
  1523  0000B9                     reserve_direntry@dptr:
  1524                           	callstack 0
  1525                           
  1526                           ; 2 bytes @ 0x59
  1527  0000B9                     	ds	2
  1528  0000BB                     reserve_direntry@c:
  1529                           	callstack 0
  1530                           
  1531                           ; 1 bytes @ 0x5B
  1532  0000BB                     	ds	1
  1533  0000BC                     reserve_direntry@clust:
  1534                           	callstack 0
  1535                           
  1536                           ; 2 bytes @ 0x5C
  1537  0000BC                     	ds	2
  1538  0000BE                     reserve_direntry@fs:
  1539                           	callstack 0
  1540                           
  1541                           ; 2 bytes @ 0x5E
  1542  0000BE                     	ds	2
  1543  0000C0                     f_write@res:
  1544                           	callstack 0
  1545  0000C0                     f_open@fp:
  1546                           	callstack 0
  1547                           
  1548                           ; 2 bytes @ 0x60
  1549  0000C0                     	ds	1
  1550  0000C1                     f_write@wbuff:
  1551                           	callstack 0
  1552                           
  1553                           ; 1 bytes @ 0x61
  1554  0000C1                     	ds	1
  1555  0000C2                     f_open@path:
  1556                           	callstack 0
  1557  0000C2                     f_write@sect:
  1558                           	callstack 0
  1559                           
  1560                           ; 4 bytes @ 0x62
  1561  0000C2                     	ds	2
  1562  0000C4                     f_open@mode:
  1563                           	callstack 0
  1564  0000C4                     f_lseek@res:
  1565                           	callstack 0
  1566                           
  1567                           ; 1 bytes @ 0x64
  1568  0000C4                     	ds	1
  1569  0000C5                     ??_f_open:
  1570  0000C5                     f_lseek@ifptr:
  1571                           	callstack 0
  1572                           
  1573                           ; 4 bytes @ 0x65
  1574  0000C5                     	ds	1
  1575  0000C6                     f_write@cc:
  1576                           	callstack 0
  1577                           
  1578                           ; 2 bytes @ 0x66
  1579  0000C6                     	ds	2
  1580  0000C8                     f_write@clust:
  1581                           	callstack 0
  1582                           
  1583                           ; 2 bytes @ 0x68
  1584  0000C8                     	ds	1
  1585  0000C9                     f_lseek@csize:
  1586                           	callstack 0
  1587  0000C9                     f_open@fn:
  1588                           	callstack 0
  1589                           
  1590                           ; 12 bytes @ 0x69
  1591  0000C9                     	ds	1
  1592  0000CA                     f_write@wcnt:
  1593                           	callstack 0
  1594                           
  1595                           ; 2 bytes @ 0x6A
  1596  0000CA                     	ds	2
  1597  0000CC                     ?_fputc:
  1598                           	callstack 0
  1599  0000CC                     fputc@chr:
  1600                           	callstack 0
  1601                           
  1602                           ; 2 bytes @ 0x6C
  1603  0000CC                     	ds	1
  1604  0000CD                     f_lseek@clust:
  1605                           	callstack 0
  1606                           
  1607                           ; 2 bytes @ 0x6D
  1608  0000CD                     	ds	1
  1609  0000CE                     fputc@fil:
  1610                           	callstack 0
  1611                           
  1612                           ; 2 bytes @ 0x6E
  1613  0000CE                     	ds	2
  1614  0000D0                     fputc@c:
  1615                           	callstack 0
  1616                           
  1617                           ; 1 bytes @ 0x70
  1618  0000D0                     	ds	1
  1619  0000D1                     fputc@bw:
  1620                           	callstack 0
  1621                           
  1622                           ; 2 bytes @ 0x71
  1623  0000D1                     	ds	2
  1624  0000D3                     ?_fputs:
  1625                           	callstack 0
  1626  0000D3                     fputs@str:
  1627                           	callstack 0
  1628                           
  1629                           ; 2 bytes @ 0x73
  1630  0000D3                     	ds	2
  1631  0000D5                     f_open@rs:
  1632                           	callstack 0
  1633  0000D5                     fputs@fil:
  1634                           	callstack 0
  1635                           
  1636                           ; 2 bytes @ 0x75
  1637  0000D5                     	ds	2
  1638  0000D7                     ??_fputs:
  1639  0000D7                     f_open@dw:
  1640                           	callstack 0
  1641                           
  1642                           ; 4 bytes @ 0x77
  1643  0000D7                     	ds	1
  1644  0000D8                     fputs@n:
  1645                           	callstack 0
  1646                           
  1647                           ; 2 bytes @ 0x78
  1648  0000D8                     	ds	2
  1649  0000DA                     ?_fprintf:
  1650                           	callstack 0
  1651  0000DA                     fprintf@fil:
  1652                           	callstack 0
  1653                           
  1654                           ; 2 bytes @ 0x7A
  1655  0000DA                     	ds	1
  1656  0000DB                     f_open@res:
  1657                           	callstack 0
  1658                           
  1659                           ; 1 bytes @ 0x7B
  1660  0000DB                     	ds	1
  1661  0000DC                     f_open@dir:
  1662                           	callstack 0
  1663  0000DC                     fprintf@str:
  1664                           	callstack 0
  1665                           
  1666                           ; 2 bytes @ 0x7C
  1667  0000DC                     	ds	2
  1668  0000DE                     f_open@dj:
  1669                           	callstack 0
  1670                           
  1671                           ; 14 bytes @ 0x7E
  1672  0000DE                     	ds	16
  1673  0000EE                     ??_fprintf:
  1674                           
  1675                           ; 1 bytes @ 0x8E
  1676  0000EE                     	ds	2
  1677  0000F0                     
  1678                           ; 1 bytes @ 0x90
  1679  0000F0                     	ds	1
  1680  0000F1                     disparo_gravacao@fix_gps:
  1681                           	callstack 0
  1682                           
  1683                           ; 2 bytes @ 0x91
  1684  0000F1                     	ds	2
  1685  0000F3                     
  1686                           ; 1 bytes @ 0x93
  1687  0000F3                     	ds	2
  1688  0000F5                     escalonador@cont:
  1689                           	callstack 0
  1690                           
  1691                           ; 1 bytes @ 0x95
  1692  0000F5                     	ds	1
  1693                           
  1694                           	psect	cstackCOMRAM
  1695  000001                     __pcstackCOMRAM:
  1696                           	callstack 0
  1697  000001                     ?_strcmp:
  1698                           	callstack 0
  1699  000001                     stringcpy@str1:
  1700                           	callstack 0
  1701  000001                     strcmp@s1:
  1702                           	callstack 0
  1703  000001                     i2write_timer_zero@timer0:
  1704                           	callstack 0
  1705                           
  1706                           ; 2 bytes @ 0x0
  1707  000001                     	ds	2
  1708  000003                     stringcpy@str2:
  1709                           	callstack 0
  1710  000003                     strcmp@s2:
  1711                           	callstack 0
  1712                           
  1713                           ; 2 bytes @ 0x2
  1714  000003                     	ds	2
  1715  000005                     ??_strcmp:
  1716  000005                     stringcpy@dir:
  1717                           	callstack 0
  1718                           
  1719                           ; 2 bytes @ 0x4
  1720  000005                     	ds	2
  1721  000007                     ??_stringcpy:
  1722  000007                     strcmp@r:
  1723                           	callstack 0
  1724                           
  1725                           ; 1 bytes @ 0x6
  1726  000007                     	ds	2
  1727  000009                     stringcpy@chr:
  1728                           	callstack 0
  1729                           
  1730                           ; 1 bytes @ 0x8
  1731  000009                     	ds	1
  1732  00000A                     GPSRead@buff:
  1733                           	callstack 0
  1734                           
  1735                           ; 1 bytes @ 0x9
  1736  00000A                     	ds	1
  1737  00000B                     GPSRead@c:
  1738                           	callstack 0
  1739                           
  1740                           ; 1 bytes @ 0xA
  1741  00000B                     	ds	1
  1742  00000C                     ??_isr:
  1743                           
  1744                           ; 1 bytes @ 0xB
  1745  00000C                     	ds	12
  1746  000018                     isr@cont:
  1747                           	callstack 0
  1748                           
  1749                           ; 1 bytes @ 0x17
  1750  000018                     	ds	1
  1751  000019                     ??_dummy_clocks:
  1752  000019                     ??_verifica_diferenca_graus:
  1753  000019                     ??_verifica_diferenca_minutos:
  1754  000019                     ??_isdigit:
  1755  000019                     ?_Latitude:
  1756                           	callstack 0
  1757  000019                     ?_Longitude:
  1758                           	callstack 0
  1759  000019                     ?_fix:
  1760                           	callstack 0
  1761  000019                     ?_strlen:
  1762                           	callstack 0
  1763  000019                     ?_memcmp:
  1764                           	callstack 0
  1765  000019                     ?_GPSSecond:
  1766                           	callstack 0
  1767  000019                     ?_GPSMinute:
  1768                           	callstack 0
  1769  000019                     ?_GPSHour:
  1770                           	callstack 0
  1771  000019                     ?_GPSDay:
  1772                           	callstack 0
  1773  000019                     ?_GPSMonth:
  1774                           	callstack 0
  1775  000019                     ?_GPSyear:
  1776                           	callstack 0
  1777  000019                     ?___wmul:
  1778                           	callstack 0
  1779  000019                     ?___lwdiv:
  1780                           	callstack 0
  1781  000019                     ?___lwmod:
  1782                           	callstack 0
  1783  000019                     ?___lmul:
  1784                           	callstack 0
  1785  000019                     ?___lldiv:
  1786                           	callstack 0
  1787  000019                     ?___aldiv:
  1788                           	callstack 0
  1789  000019                     ?___llmod:
  1790                           	callstack 0
  1791  000019                     disk_ioctl@cmd:
  1792                           	callstack 0
  1793  000019                     delay@contador_ext:
  1794                           	callstack 0
  1795  000019                     response@buff:
  1796                           	callstack 0
  1797  000019                     write_timer_zero@timer0:
  1798                           	callstack 0
  1799  000019                     f_mount@fs:
  1800                           	callstack 0
  1801  000019                     ___wmul@multiplier:
  1802                           	callstack 0
  1803  000019                     ___lwdiv@dividend:
  1804                           	callstack 0
  1805  000019                     ___lwmod@dividend:
  1806                           	callstack 0
  1807  000019                     memcmp@s1:
  1808                           	callstack 0
  1809  000019                     memcpy@d1:
  1810                           	callstack 0
  1811  000019                     memset@p1:
  1812                           	callstack 0
  1813  000019                     strcat@to:
  1814                           	callstack 0
  1815  000019                     strlen@s:
  1816                           	callstack 0
  1817  000019                     wait_ready@timeout:
  1818                           	callstack 0
  1819  000019                     ___lmul@multiplier:
  1820                           	callstack 0
  1821  000019                     ___lldiv@dividend:
  1822                           	callstack 0
  1823  000019                     ___aldiv@dividend:
  1824                           	callstack 0
  1825  000019                     ___llmod@dividend:
  1826                           	callstack 0
  1827                           
  1828                           ; 4 bytes @ 0x18
  1829  000019                     	ds	1
  1830  00001A                     sdc_disk_status@pdrv:
  1831                           	callstack 0
  1832  00001A                     delay@contador_int:
  1833                           	callstack 0
  1834  00001A                     escreve_SPI@dado:
  1835                           	callstack 0
  1836  00001A                     _isdigit$3129:
  1837                           	callstack 0
  1838  00001A                     disk_ioctl@buff:
  1839                           	callstack 0
  1840                           
  1841                           ; 2 bytes @ 0x19
  1842  00001A                     	ds	1
  1843  00001B                     ??_GPSSecond:
  1844  00001B                     ??_GPSMinute:
  1845  00001B                     ??_GPSHour:
  1846  00001B                     ??_GPSDay:
  1847  00001B                     ??_GPSMonth:
  1848  00001B                     ??_GPSyear:
  1849  00001B                     escreve_cmd_lcd@comando:
  1850                           	callstack 0
  1851  00001B                     endereco_cursor_lcd@endereco:
  1852                           	callstack 0
  1853  00001B                     escreve_caractere_lcd@data:
  1854                           	callstack 0
  1855  00001B                     dummy_clocks@n:
  1856                           	callstack 0
  1857  00001B                     f_mount@drv:
  1858                           	callstack 0
  1859  00001B                     isdigit@c:
  1860                           	callstack 0
  1861  00001B                     ___wmul@multiplicand:
  1862                           	callstack 0
  1863  00001B                     ___lwdiv@divisor:
  1864                           	callstack 0
  1865  00001B                     ___lwmod@divisor:
  1866                           	callstack 0
  1867  00001B                     memcmp@s2:
  1868                           	callstack 0
  1869  00001B                     memcpy@s1:
  1870                           	callstack 0
  1871  00001B                     memset@c:
  1872                           	callstack 0
  1873  00001B                     strcat@from:
  1874                           	callstack 0
  1875  00001B                     strcpy@to:
  1876                           	callstack 0
  1877  00001B                     strlen@cp:
  1878                           	callstack 0
  1879                           
  1880                           ; 2 bytes @ 0x1A
  1881  00001B                     	ds	1
  1882  00001C                     ??_init_lcd:
  1883  00001C                     disk_ioctl@pdrv:
  1884                           	callstack 0
  1885  00001C                     posicao_cursor_lcd@coluna:
  1886                           	callstack 0
  1887  00001C                     escreve_frase_ram_lcd@buffer:
  1888                           	callstack 0
  1889  00001C                     dummy_clocks@i:
  1890                           	callstack 0
  1891                           
  1892                           ; 2 bytes @ 0x1B
  1893  00001C                     	ds	1
  1894  00001D                     ?_get_fattime:
  1895                           	callstack 0
  1896  00001D                     disk_status@pdrv:
  1897                           	callstack 0
  1898  00001D                     disk_ioctl@res:
  1899                           	callstack 0
  1900  00001D                     posicao_cursor_lcd@linha:
  1901                           	callstack 0
  1902  00001D                     wait_ready@res:
  1903                           	callstack 0
  1904  00001D                     verifica_diferenca_graus@select_data:
  1905                           	callstack 0
  1906  00001D                     verifica_diferenca_minutos@select_data:
  1907                           	callstack 0
  1908  00001D                     ___lwdiv@counter:
  1909                           	callstack 0
  1910  00001D                     ___lwmod@counter:
  1911                           	callstack 0
  1912  00001D                     monta_sd@dado:
  1913                           	callstack 0
  1914  00001D                     ___wmul@product:
  1915                           	callstack 0
  1916  00001D                     memcmp@n:
  1917                           	callstack 0
  1918  00001D                     memcpy@n:
  1919                           	callstack 0
  1920  00001D                     memset@n:
  1921                           	callstack 0
  1922  00001D                     strcat@cp:
  1923                           	callstack 0
  1924  00001D                     strcpy@from:
  1925                           	callstack 0
  1926  00001D                     ___lmul@multiplicand:
  1927                           	callstack 0
  1928  00001D                     ___lldiv@divisor:
  1929                           	callstack 0
  1930  00001D                     ___aldiv@divisor:
  1931                           	callstack 0
  1932  00001D                     ___llmod@divisor:
  1933                           	callstack 0
  1934                           
  1935                           ; 4 bytes @ 0x1C
  1936  00001D                     	ds	1
  1937  00001E                     disk_status@stat:
  1938                           	callstack 0
  1939  00001E                     posicao_cursor_lcd@endereco:
  1940                           	callstack 0
  1941  00001E                     verifica_diferenca_graus@point_index_lat:
  1942                           	callstack 0
  1943  00001E                     verifica_diferenca_minutos@point_index_lat:
  1944                           	callstack 0
  1945  00001E                     ___lwdiv@quotient:
  1946                           	callstack 0
  1947  00001E                     command@arg:
  1948                           	callstack 0
  1949                           
  1950                           ; 4 bytes @ 0x1D
  1951  00001E                     	ds	1
  1952  00001F                     ??_memcmp:
  1953  00001F                     ??_mensagem_inicial:
  1954  00001F                     ?_atoi:
  1955                           	callstack 0
  1956  00001F                     monta_sd@index:
  1957                           	callstack 0
  1958  00001F                     verifica_diferenca_graus@point_index_long:
  1959                           	callstack 0
  1960  00001F                     verifica_diferenca_minutos@point_index_long:
  1961                           	callstack 0
  1962  00001F                     memcpy@tmp:
  1963                           	callstack 0
  1964  00001F                     validate@fs:
  1965                           	callstack 0
  1966  00001F                     atoi@s:
  1967                           	callstack 0
  1968  00001F                     memset@p:
  1969                           	callstack 0
  1970  00001F                     strcpy@cp:
  1971                           	callstack 0
  1972                           
  1973                           ; 2 bytes @ 0x1E
  1974  00001F                     	ds	1
  1975  000020                     monta_sd@size:
  1976                           	callstack 0
  1977  000020                     verifica_diferenca_graus@j:
  1978                           	callstack 0
  1979  000020                     verifica_diferenca_minutos@j:
  1980                           	callstack 0
  1981  000020                     utoa@buf:
  1982                           	callstack 0
  1983  000020                     memcpy@d:
  1984                           	callstack 0
  1985                           
  1986                           ; 2 bytes @ 0x1F
  1987  000020                     	ds	1
  1988  000021                     ??_atoi:
  1989  000021                     monta_sd@i:
  1990                           	callstack 0
  1991  000021                     make_dirfile@path:
  1992                           	callstack 0
  1993  000021                     verifica_diferenca_graus@point:
  1994                           	callstack 0
  1995  000021                     verifica_diferenca_minutos@point:
  1996                           	callstack 0
  1997  000021                     ___aldiv@counter:
  1998                           	callstack 0
  1999  000021                     ___llmod@counter:
  2000                           	callstack 0
  2001  000021                     validate@id:
  2002                           	callstack 0
  2003  000021                     utoa@val:
  2004                           	callstack 0
  2005  000021                     ___lmul@product:
  2006                           	callstack 0
  2007  000021                     ___lldiv@quotient:
  2008                           	callstack 0
  2009  000021                     get_fattime@f_time:
  2010                           	callstack 0
  2011                           
  2012                           ; 10 bytes @ 0x20
  2013  000021                     	ds	1
  2014  000022                     command@CRC:
  2015                           	callstack 0
  2016  000022                     make_dirfile@dirname:
  2017                           	callstack 0
  2018  000022                     verifica_diferenca_graus@i:
  2019                           	callstack 0
  2020  000022                     verifica_diferenca_minutos@i:
  2021                           	callstack 0
  2022  000022                     ___aldiv@sign:
  2023                           	callstack 0
  2024  000022                     memcpy@s:
  2025                           	callstack 0
  2026                           
  2027                           ; 2 bytes @ 0x21
  2028  000022                     	ds	1
  2029  000023                     ??_make_dirfile:
  2030  000023                     ??_validate:
  2031  000023                     command@CMD:
  2032                           	callstack 0
  2033  000023                     atoi@sign:
  2034                           	callstack 0
  2035  000023                     utoa@base:
  2036                           	callstack 0
  2037  000023                     ___aldiv@quotient:
  2038                           	callstack 0
  2039                           
  2040                           ; 4 bytes @ 0x22
  2041  000023                     	ds	1
  2042  000024                     command@argument:
  2043                           	callstack 0
  2044  000024                     atoi@a:
  2045                           	callstack 0
  2046                           
  2047                           ; 2 bytes @ 0x23
  2048  000024                     	ds	1
  2049  000025                     ?_clust2sect:
  2050                           	callstack 0
  2051  000025                     ___lldiv@counter:
  2052                           	callstack 0
  2053  000025                     sdc_disk_read@p_buff:
  2054                           	callstack 0
  2055  000025                     sdc_disk_write@p_buff:
  2056                           	callstack 0
  2057  000025                     clust2sect@clust:
  2058                           	callstack 0
  2059  000025                     _make_dirfile$1637:
  2060                           	callstack 0
  2061  000025                     utoa@v:
  2062                           	callstack 0
  2063                           
  2064                           ; 2 bytes @ 0x24
  2065  000025                     	ds	1
  2066  000026                     ??_calcula_diff_graus:
  2067  000026                     ??_calcula_diff_minutos:
  2068                           
  2069                           ; 1 bytes @ 0x25
  2070  000026                     	ds	1
  2071  000027                     make_dirfile@b:
  2072                           	callstack 0
  2073  000027                     utoa@c:
  2074                           	callstack 0
  2075  000027                     sdc_reset@count_nosd:
  2076                           	callstack 0
  2077  000027                     sdc_disk_read@sector:
  2078                           	callstack 0
  2079  000027                     sdc_disk_write@sector:
  2080                           	callstack 0
  2081  000027                     configura_baudrate_uart@baudrate:
  2082                           	callstack 0
  2083                           
  2084                           ; 4 bytes @ 0x26
  2085  000027                     	ds	1
  2086  000028                     make_dirfile@t:
  2087                           	callstack 0
  2088  000028                     itoa@buf:
  2089                           	callstack 0
  2090                           
  2091                           ; 1 bytes @ 0x27
  2092  000028                     	ds	1
  2093  000029                     ??_clust2sect:
  2094  000029                     make_dirfile@a:
  2095                           	callstack 0
  2096  000029                     sdc_reset@count:
  2097                           	callstack 0
  2098  000029                     itoa@val:
  2099                           	callstack 0
  2100                           
  2101                           ; 2 bytes @ 0x28
  2102  000029                     	ds	1
  2103  00002A                     make_dirfile@n:
  2104                           	callstack 0
  2105  00002A                     calcula_diff_graus@temp_var_deg:
  2106                           	callstack 0
  2107                           
  2108                           ; 4 bytes @ 0x29
  2109  00002A                     	ds	1
  2110  00002B                     ??_configura_baudrate_uart:
  2111  00002B                     sdc_reset@buff:
  2112                           	callstack 0
  2113  00002B                     sdc_disk_read@count:
  2114                           	callstack 0
  2115  00002B                     sdc_disk_write@count:
  2116                           	callstack 0
  2117  00002B                     make_dirfile@c:
  2118                           	callstack 0
  2119  00002B                     itoa@base:
  2120                           	callstack 0
  2121                           
  2122                           ; 2 bytes @ 0x2A
  2123  00002B                     	ds	1
  2124  00002C                     ??_sdc_disk_initialize:
  2125  00002C                     ??_sdc_disk_read:
  2126  00002C                     ??_sdc_disk_write:
  2127  00002C                     calcula_diff_minutos@point:
  2128                           	callstack 0
  2129                           
  2130                           ; 1 bytes @ 0x2B
  2131  00002C                     	ds	1
  2132  00002D                     disk_initialize@pdrv:
  2133                           	callstack 0
  2134  00002D                     calcula_diff_minutos@count:
  2135                           	callstack 0
  2136                           
  2137                           ; 1 bytes @ 0x2C
  2138  00002D                     	ds	1
  2139  00002E                     disk_initialize@stat:
  2140                           	callstack 0
  2141  00002E                     calcula_diff_graus@point:
  2142                           	callstack 0
  2143  00002E                     escreve_inteiro_lcd@valor:
  2144                           	callstack 0
  2145  00002E                     clust2sect@fs:
  2146                           	callstack 0
  2147                           
  2148                           ; 2 bytes @ 0x2D
  2149  00002E                     	ds	1
  2150  00002F                     calcula_diff_graus@count:
  2151                           	callstack 0
  2152                           
  2153                           ; 1 bytes @ 0x2E
  2154  00002F                     	ds	1
  2155  000030                     ??_verifica_fence_externo:
  2156  000030                     ??_troca_de_tela:
  2157  000030                     ??_disk_read:
  2158  000030                     ??_disk_write:
  2159  000030                     
  2160                           ; 1 bytes @ 0x2F
  2161  000030                     	ds	1
  2162  000031                     ?_get_cluster:
  2163                           	callstack 0
  2164  000031                     sync@fs:
  2165                           	callstack 0
  2166  000031                     get_cluster@clust:
  2167                           	callstack 0
  2168                           
  2169                           ; 2 bytes @ 0x30
  2170  000031                     	ds	2
  2171  000033                     
  2172                           ; 1 bytes @ 0x32
  2173 ;;
  2174 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2175 ;;
  2176 ;; *************** function _main *****************
  2177 ;; Defined at:
  2178 ;;		line 221 in file "main.c"
  2179 ;; Parameters:    Size  Location     Type
  2180 ;;		None
  2181 ;; Auto vars:     Size  Location     Type
  2182 ;;		None
  2183 ;; Return value:  Size  Location     Type
  2184 ;;                  1    wreg      void 
  2185 ;; Registers used:
  2186 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2187 ;; Tracked objects:
  2188 ;;		On entry : 0/0
  2189 ;;		On exit  : 0/0
  2190 ;;		Unchanged: 0/0
  2191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2192 ;;      Params:         0       0       0       0       0       0       0       0       0
  2193 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2194 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2195 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2196 ;;Total ram usage:        0 bytes
  2197 ;; Hardware stack levels required when called:   18
  2198 ;; This function calls:
  2199 ;;		_dados_gps_to_sd
  2200 ;;		_escalonador
  2201 ;;		_inicializa_tarefas
  2202 ;;		_inicializa_uart
  2203 ;;		_init_hardware
  2204 ;;		_init_lcd
  2205 ;;		_mensagem_inicial
  2206 ;; This function is called by:
  2207 ;;		Startup code after reset
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           	psect	text0
  2212  005102                     __ptext0:
  2213                           	callstack 0
  2214  005102                     _main:
  2215                           	callstack 13
  2216                           
  2217                           ;main.c: 223: init_hardware();
  2218                           
  2219                           ;incstack = 0
  2220  005102  ECE8  F029         	call	_init_hardware	;wreg free
  2221                           
  2222                           ;main.c: 224: T0CONbits.TMR0ON = 0;
  2223  005106  9ED5               	bcf	213,7,c	;volatile
  2224                           
  2225                           ;main.c: 225: init_lcd();
  2226  005108  EC2D  F021         	call	_init_lcd	;wreg free
  2227                           
  2228                           ;main.c: 226: mensagem_inicial();
  2229  00510C  ECF4  F023         	call	_mensagem_inicial	;wreg free
  2230                           
  2231                           ;main.c: 227: inicializa_tarefas();
  2232  005110  ECD5  F024         	call	_inicializa_tarefas	;wreg free
  2233                           
  2234                           ; BSR set to: 1
  2235                           ;main.c: 228: inicializa_uart();
  2236  005114  EC0F  F029         	call	_inicializa_uart	;wreg free
  2237                           
  2238                           ; BSR set to: 0
  2239                           ;main.c: 229: T0CONbits.TMR0ON = 1;
  2240  005118  8ED5               	bsf	213,7,c	;volatile
  2241  00511A                     l12366:
  2242                           
  2243                           ;main.c: 231: {;main.c: 233: if ((sinaliza_int_timer == 1) && (4))
  2244  00511A  043D               	decf	_sinaliza_int_timer^0,w,c
  2245  00511C  A4D8               	btfss	status,2,c
  2246  00511E  D004               	goto	l12372
  2247                           
  2248                           ;main.c: 234: {;main.c: 235: sinaliza_int_timer = 0;
  2249  005120  0E00               	movlw	0
  2250  005122  6E3D               	movwf	_sinaliza_int_timer^0,c
  2251                           
  2252                           ;main.c: 236: escalonador();
  2253  005124  ECDA  F020         	call	_escalonador	;wreg free
  2254  005128                     l12372:
  2255                           
  2256                           ;main.c: 237: };main.c: 238: dados_gps_to_sd();
  2257  005128  ECE6  F027         	call	_dados_gps_to_sd	;wreg free
  2258  00512C  D7F6               	goto	l12366
  2259  00512E                     __end_of_main:
  2260                           	callstack 0
  2261                           
  2262 ;; *************** function _mensagem_inicial *****************
  2263 ;; Defined at:
  2264 ;;		line 249 in file "main.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;		None
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;  msg_dois       17   17[BANK0 ] const unsigned char [17]
  2269 ;;  msg_linha_um   17    0[BANK0 ] const unsigned char [17]
  2270 ;; Return value:  Size  Location     Type
  2271 ;;                  1    wreg      void 
  2272 ;; Registers used:
  2273 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2274 ;; Tracked objects:
  2275 ;;		On entry : 0/0
  2276 ;;		On exit  : 0/0
  2277 ;;		Unchanged: 0/0
  2278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2279 ;;      Params:         0       0       0       0       0       0       0       0       0
  2280 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2281 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2282 ;;      Totals:         2      34       0       0       0       0       0       0       0
  2283 ;;Total ram usage:       36 bytes
  2284 ;; Hardware stack levels used:    1
  2285 ;; Hardware stack levels required when called:    6
  2286 ;; This function calls:
  2287 ;;		_escreve_cmd_lcd
  2288 ;;		_escreve_frase_ram_lcd
  2289 ;;		_posicao_cursor_lcd
  2290 ;; This function is called by:
  2291 ;;		_main
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           	psect	text1
  2296  0047E8                     __ptext1:
  2297                           	callstack 0
  2298  0047E8                     _mensagem_inicial:
  2299                           	callstack 24
  2300                           
  2301                           ;main.c: 251: const unsigned char msg_linha_um[17] = "FATEC ST ANDRE";
  2302                           
  2303                           ;incstack = 0
  2304  0047E8  0EF8               	movlw	low mensagem_inicial@F3656
  2305  0047EA  6EF6               	movwf	tblptrl,c
  2306  0047EC                     	if	1	;There is more than 1 active tblptr byte
  2307  0047EC  0E60               	movlw	high mensagem_inicial@F3656
  2308  0047EE  6EF7               	movwf	tblptrh,c
  2309  0047F0                     	endif
  2310  0047F0                     	if	0	;There are less than 3 active tblptr bytes
  2311  0047F0                     	endif
  2312  0047F0  EE20  F060         	lfsr	2,mensagem_inicial@msg_linha_um
  2313  0047F4  0E10               	movlw	16
  2314  0047F6                     u15200:
  2315  0047F6  0009               	tblrd		*+
  2316  0047F8  CFF5 FFDE          	movff	tablat,postinc2
  2317  0047FC  06E8               	decf	wreg,f,c
  2318  0047FE  E2FB               	bc	u15200
  2319                           
  2320                           ;main.c: 252: const unsigned char msg_dois[17] = "TCC--TELEMTRIA";
  2321  004800  0EE7               	movlw	low mensagem_inicial@F3658
  2322  004802  6EF6               	movwf	tblptrl,c
  2323  004804                     	if	1	;There is more than 1 active tblptr byte
  2324  004804  0E60               	movlw	high mensagem_inicial@F3658
  2325  004806  6EF7               	movwf	tblptrh,c
  2326  004808                     	endif
  2327  004808                     	if	0	;There are less than 3 active tblptr bytes
  2328  004808                     	endif
  2329  004808  EE20  F071         	lfsr	2,mensagem_inicial@msg_dois
  2330  00480C  0E10               	movlw	16
  2331  00480E                     u15210:
  2332  00480E  0009               	tblrd		*+
  2333  004810  CFF5 FFDE          	movff	tablat,postinc2
  2334  004814  06E8               	decf	wreg,f,c
  2335  004816  E2FB               	bc	u15210
  2336                           
  2337                           ;main.c: 254: posicao_cursor_lcd(1,0);
  2338  004818  0E00               	movlw	0
  2339  00481A  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  2340  00481C  0E01               	movlw	1
  2341  00481E  EC3C  F025         	call	_posicao_cursor_lcd
  2342                           
  2343                           ;main.c: 255: escreve_frase_ram_lcd(msg_linha_um);
  2344  004822  0E60               	movlw	low mensagem_inicial@msg_linha_um
  2345  004824  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  2346  004826  6A1D               	clrf	(escreve_frase_ram_lcd@buffer+1)^0,c
  2347  004828  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  2348                           
  2349                           ;main.c: 257: posicao_cursor_lcd(2,0);
  2350  00482C  0E00               	movlw	0
  2351  00482E  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  2352  004830  0E02               	movlw	2
  2353  004832  EC3C  F025         	call	_posicao_cursor_lcd
  2354                           
  2355                           ;main.c: 258: escreve_frase_ram_lcd(msg_dois);
  2356  004836  0E71               	movlw	low mensagem_inicial@msg_dois
  2357  004838  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  2358  00483A  6A1D               	clrf	(escreve_frase_ram_lcd@buffer+1)^0,c
  2359  00483C  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  2360                           
  2361                           ;main.c: 259: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2362  004840  0E3D               	movlw	61
  2363  004842  6E20               	movwf	(??_mensagem_inicial+1)^0,c
  2364  004844  0EE1               	movlw	225
  2365  004846  6E1F               	movwf	??_mensagem_inicial^0,c
  2366  004848  0E40               	movlw	64
  2367  00484A                     u15387:
  2368  00484A  2EE8               	decfsz	wreg,f,c
  2369  00484C  D7FE               	bra	u15387
  2370  00484E  2E1F               	decfsz	??_mensagem_inicial^0,f,c
  2371  004850  D7FC               	bra	u15387
  2372  004852  2E20               	decfsz	(??_mensagem_inicial+1)^0,f,c
  2373  004854  D7FA               	bra	u15387
  2374                           
  2375                           ;main.c: 260: escreve_cmd_lcd(0b00000001);
  2376  004856  0E01               	movlw	1
  2377  004858  ECA5  F022         	call	_escreve_cmd_lcd
  2378  00485C  0012               	return		;funcret
  2379  00485E                     __end_of_mensagem_inicial:
  2380                           	callstack 0
  2381                           
  2382 ;; *************** function _init_lcd *****************
  2383 ;; Defined at:
  2384 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;		None
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;		None
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  1    wreg      void 
  2391 ;; Registers used:
  2392 ;;		wreg, status,2, status,0, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2398 ;;      Params:         0       0       0       0       0       0       0       0       0
  2399 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2400 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2401 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2402 ;;Total ram usage:        1 bytes
  2403 ;; Hardware stack levels used:    1
  2404 ;; Hardware stack levels required when called:    5
  2405 ;; This function calls:
  2406 ;;		_delay
  2407 ;;		_escreve_cmd_lcd
  2408 ;; This function is called by:
  2409 ;;		_main
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           	psect	text2
  2414  00425A                     __ptext2:
  2415                           	callstack 0
  2416  00425A                     _init_lcd:
  2417                           	callstack 25
  2418                           
  2419                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2420                           
  2421                           ;incstack = 0
  2422  00425A  9495               	bcf	149,2,c	;volatile
  2423                           
  2424                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2425  00425C  9295               	bcf	149,1,c	;volatile
  2426                           
  2427                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2428  00425E  9095               	bcf	149,0,c	;volatile
  2429                           
  2430                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2431  004260  9895               	bcf	149,4,c	;volatile
  2432                           
  2433                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2434  004262  9A95               	bcf	149,5,c	;volatile
  2435                           
  2436                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2437  004264  9C95               	bcf	149,6,c	;volatile
  2438                           
  2439                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2440  004266  9E95               	bcf	149,7,c	;volatile
  2441                           
  2442                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2443  004268  9483               	bcf	131,2,c	;volatile
  2444                           
  2445                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2446  00426A  9283               	bcf	131,1,c	;volatile
  2447                           
  2448                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2449  00426C  9083               	bcf	131,0,c	;volatile
  2450                           
  2451                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2452  00426E  9E83               	bcf	131,7,c	;volatile
  2453                           
  2454                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2455  004270  9C83               	bcf	131,6,c	;volatile
  2456                           
  2457                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2458  004272  8A83               	bsf	131,5,c	;volatile
  2459                           
  2460                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2461  004274  8883               	bsf	131,4,c	;volatile
  2462                           
  2463                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2464  004276  0EEA               	movlw	234
  2465  004278  6E1C               	movwf	??_init_lcd^0,c
  2466  00427A  0EC3               	movlw	195
  2467  00427C                     u15397:
  2468  00427C  2EE8               	decfsz	wreg,f,c
  2469  00427E  D7FE               	bra	u15397
  2470  004280  2E1C               	decfsz	??_init_lcd^0,f,c
  2471  004282  D7FC               	bra	u15397
  2472  004284  F000               	nop	
  2473                           
  2474                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2475  004286  8083               	bsf	131,0,c	;volatile
  2476                           
  2477                           ;display_lcd.c: 108: delay();
  2478  004288  ECA4  F029         	call	_delay	;wreg free
  2479                           
  2480                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2481  00428C  9083               	bcf	131,0,c	;volatile
  2482                           
  2483                           ;display_lcd.c: 110: delay();
  2484  00428E  ECA4  F029         	call	_delay	;wreg free
  2485                           
  2486                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2487  004292  0E4E               	movlw	78
  2488  004294  6E1C               	movwf	??_init_lcd^0,c
  2489  004296  0EEB               	movlw	235
  2490  004298                     u15407:
  2491  004298  2EE8               	decfsz	wreg,f,c
  2492  00429A  D7FE               	bra	u15407
  2493  00429C  2E1C               	decfsz	??_init_lcd^0,f,c
  2494  00429E  D7FC               	bra	u15407
  2495  0042A0  F000               	nop	
  2496                           
  2497                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2498  0042A2  8083               	bsf	131,0,c	;volatile
  2499                           
  2500                           ;display_lcd.c: 119: delay();
  2501  0042A4  ECA4  F029         	call	_delay	;wreg free
  2502                           
  2503                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2504  0042A8  9083               	bcf	131,0,c	;volatile
  2505                           
  2506                           ;display_lcd.c: 121: delay();
  2507  0042AA  ECA4  F029         	call	_delay	;wreg free
  2508                           
  2509                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2510  0042AE  0E4E               	movlw	78
  2511  0042B0  6E1C               	movwf	??_init_lcd^0,c
  2512  0042B2  0EEB               	movlw	235
  2513  0042B4                     u15417:
  2514  0042B4  2EE8               	decfsz	wreg,f,c
  2515  0042B6  D7FE               	bra	u15417
  2516  0042B8  2E1C               	decfsz	??_init_lcd^0,f,c
  2517  0042BA  D7FC               	bra	u15417
  2518  0042BC  F000               	nop	
  2519                           
  2520                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2521  0042BE  8083               	bsf	131,0,c	;volatile
  2522                           
  2523                           ;display_lcd.c: 130: delay();
  2524  0042C0  ECA4  F029         	call	_delay	;wreg free
  2525                           
  2526                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2527  0042C4  9083               	bcf	131,0,c	;volatile
  2528                           
  2529                           ;display_lcd.c: 132: delay();
  2530  0042C6  ECA4  F029         	call	_delay	;wreg free
  2531                           
  2532                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2533  0042CA  9E83               	bcf	131,7,c	;volatile
  2534                           
  2535                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2536  0042CC  9C83               	bcf	131,6,c	;volatile
  2537                           
  2538                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2539  0042CE  8A83               	bsf	131,5,c	;volatile
  2540                           
  2541                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2542  0042D0  9883               	bcf	131,4,c	;volatile
  2543                           
  2544                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2545  0042D2  8083               	bsf	131,0,c	;volatile
  2546                           
  2547                           ;display_lcd.c: 143: delay();
  2548  0042D4  ECA4  F029         	call	_delay	;wreg free
  2549                           
  2550                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2551  0042D8  9083               	bcf	131,0,c	;volatile
  2552                           
  2553                           ;display_lcd.c: 145: delay();
  2554  0042DA  ECA4  F029         	call	_delay	;wreg free
  2555                           
  2556                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2557  0042DE  0E28               	movlw	40
  2558  0042E0  ECA5  F022         	call	_escreve_cmd_lcd
  2559                           
  2560                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2561  0042E4  0E06               	movlw	6
  2562  0042E6  ECA5  F022         	call	_escreve_cmd_lcd
  2563                           
  2564                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2565  0042EA  0E0E               	movlw	14
  2566  0042EC  ECA5  F022         	call	_escreve_cmd_lcd
  2567                           
  2568                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2569  0042F0  0E01               	movlw	1
  2570  0042F2  ECA5  F022         	call	_escreve_cmd_lcd
  2571  0042F6  0012               	return		;funcret
  2572  0042F8                     __end_of_init_lcd:
  2573                           	callstack 0
  2574                           
  2575 ;; *************** function _init_hardware *****************
  2576 ;; Defined at:
  2577 ;;		line 52 in file "bibliotecas/hardware.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;		None
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;		None
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  1    wreg      void 
  2584 ;; Registers used:
  2585 ;;		wreg, status,2, cstack
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2591 ;;      Params:         0       0       0       0       0       0       0       0       0
  2592 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2593 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2594 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2595 ;;Total ram usage:        0 bytes
  2596 ;; Hardware stack levels used:    1
  2597 ;; Hardware stack levels required when called:    5
  2598 ;; This function calls:
  2599 ;;		_config_timer_dois
  2600 ;;		_config_timer_zero
  2601 ;;		_init_interrupt
  2602 ;;		_init_oscilador
  2603 ;;		_init_ports
  2604 ;; This function is called by:
  2605 ;;		_main
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text3
  2610  0053D0                     __ptext3:
  2611                           	callstack 0
  2612  0053D0                     _init_hardware:
  2613                           	callstack 25
  2614                           
  2615                           ;hardware.c: 55: init_oscilador();
  2616                           
  2617                           ;incstack = 0
  2618  0053D0  EC5B  F02A         	call	_init_oscilador	;wreg free
  2619                           
  2620                           ;hardware.c: 58: init_ports();
  2621  0053D4  ECB3  F029         	call	_init_ports	;wreg free
  2622                           
  2623                           ;hardware.c: 61: config_timer_zero();
  2624  0053D8  ECC1  F029         	call	_config_timer_zero	;wreg free
  2625                           
  2626                           ;hardware.c: 64: config_timer_dois();
  2627  0053DC  EC1C  F02A         	call	_config_timer_dois	;wreg free
  2628                           
  2629                           ;hardware.c: 67: init_interrupt();
  2630  0053E0  ECF3  F029         	call	_init_interrupt	;wreg free
  2631  0053E4  0012               	return		;funcret
  2632  0053E6                     __end_of_init_hardware:
  2633                           	callstack 0
  2634                           
  2635 ;; *************** function _init_ports *****************
  2636 ;; Defined at:
  2637 ;;		line 151 in file "bibliotecas/hardware.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;		None
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;		None
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  1    wreg      void 
  2644 ;; Registers used:
  2645 ;;		wreg, status,2
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2651 ;;      Params:         0       0       0       0       0       0       0       0       0
  2652 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2653 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2654 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2655 ;;Total ram usage:        0 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    3
  2658 ;; This function calls:
  2659 ;;		Nothing
  2660 ;; This function is called by:
  2661 ;;		_init_hardware
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           	psect	text4
  2666  005366                     __ptext4:
  2667                           	callstack 0
  2668  005366                     _init_ports:
  2669                           	callstack 26
  2670                           
  2671                           ;hardware.c: 153: ADCON1 = 0X0F;
  2672                           
  2673                           ;incstack = 0
  2674  005366  0E0F               	movlw	15
  2675  005368  6EC1               	movwf	193,c	;volatile
  2676                           
  2677                           ;hardware.c: 154: TRISB = 0b00000001;
  2678  00536A  0E01               	movlw	1
  2679  00536C  6E93               	movwf	147,c	;volatile
  2680                           
  2681                           ;hardware.c: 155: LATB = 0xFF;
  2682  00536E  688A               	setf	138,c	;volatile
  2683                           
  2684                           ;hardware.c: 156: TRISD = 0x00;
  2685  005370  0E00               	movlw	0
  2686  005372  6E95               	movwf	149,c	;volatile
  2687                           
  2688                           ;hardware.c: 157: TRISA = 0b00000111;
  2689  005374  0E07               	movlw	7
  2690  005376  6E92               	movwf	146,c	;volatile
  2691                           
  2692                           ;hardware.c: 158: TRISC = 0x01111111;
  2693  005378  0E11               	movlw	17
  2694  00537A  6E94               	movwf	148,c	;volatile
  2695                           
  2696                           ;hardware.c: 159: TRISE = 0b00000011;
  2697  00537C  0E03               	movlw	3
  2698  00537E  6E96               	movwf	150,c	;volatile
  2699  005380  0012               	return		;funcret
  2700  005382                     __end_of_init_ports:
  2701                           	callstack 0
  2702                           
  2703 ;; *************** function _init_oscilador *****************
  2704 ;; Defined at:
  2705 ;;		line 169 in file "bibliotecas/hardware.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;		None
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;		None
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  1    wreg      void 
  2712 ;; Registers used:
  2713 ;;		None
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2719 ;;      Params:         0       0       0       0       0       0       0       0       0
  2720 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2721 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2722 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2723 ;;Total ram usage:        0 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:    3
  2726 ;; This function calls:
  2727 ;;		Nothing
  2728 ;; This function is called by:
  2729 ;;		_init_hardware
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733                           	psect	text5
  2734  0054B6                     __ptext5:
  2735                           	callstack 0
  2736  0054B6                     _init_oscilador:
  2737                           	callstack 26
  2738                           
  2739                           ;hardware.c: 172: OSCCONbits.IRCF0 = 1;
  2740                           
  2741                           ;incstack = 0
  2742  0054B6  88D3               	bsf	211,4,c	;volatile
  2743                           
  2744                           ;hardware.c: 173: OSCCONbits.IRCF1 = 1;
  2745  0054B8  8AD3               	bsf	211,5,c	;volatile
  2746                           
  2747                           ;hardware.c: 174: OSCCONbits.IRCF2 = 1;
  2748  0054BA  8CD3               	bsf	211,6,c	;volatile
  2749  0054BC  0012               	return		;funcret
  2750  0054BE                     __end_of_init_oscilador:
  2751                           	callstack 0
  2752                           
  2753 ;; *************** function _init_interrupt *****************
  2754 ;; Defined at:
  2755 ;;		line 94 in file "bibliotecas/hardware.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;		None
  2758 ;; Auto vars:     Size  Location     Type
  2759 ;;		None
  2760 ;; Return value:  Size  Location     Type
  2761 ;;                  1    wreg      void 
  2762 ;; Registers used:
  2763 ;;		wreg, status,2
  2764 ;; Tracked objects:
  2765 ;;		On entry : 0/0
  2766 ;;		On exit  : 0/0
  2767 ;;		Unchanged: 0/0
  2768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2769 ;;      Params:         0       0       0       0       0       0       0       0       0
  2770 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2771 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2772 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2773 ;;Total ram usage:        0 bytes
  2774 ;; Hardware stack levels used:    1
  2775 ;; Hardware stack levels required when called:    3
  2776 ;; This function calls:
  2777 ;;		Nothing
  2778 ;; This function is called by:
  2779 ;;		_init_hardware
  2780 ;; This function uses a non-reentrant model
  2781 ;;
  2782                           
  2783                           	psect	text6
  2784  0053E6                     __ptext6:
  2785                           	callstack 0
  2786  0053E6                     _init_interrupt:
  2787                           	callstack 26
  2788                           
  2789                           ;hardware.c: 96: INTCON = 0b10110000;
  2790                           
  2791                           ;incstack = 0
  2792  0053E6  0EB0               	movlw	176
  2793  0053E8  6EF2               	movwf	242,c	;volatile
  2794                           
  2795                           ;hardware.c: 97: INTCON2 = 0b00000000;
  2796  0053EA  0E00               	movlw	0
  2797  0053EC  6EF1               	movwf	241,c	;volatile
  2798                           
  2799                           ;hardware.c: 98: INTCON3 = 0b00000000;
  2800  0053EE  0E00               	movlw	0
  2801  0053F0  6EF0               	movwf	240,c	;volatile
  2802                           
  2803                           ;hardware.c: 100: PIE1 = 0b00101000;
  2804  0053F2  0E28               	movlw	40
  2805  0053F4  6E9D               	movwf	157,c	;volatile
  2806  0053F6  0012               	return		;funcret
  2807  0053F8                     __end_of_init_interrupt:
  2808                           	callstack 0
  2809                           
  2810 ;; *************** function _config_timer_zero *****************
  2811 ;; Defined at:
  2812 ;;		line 79 in file "bibliotecas/hardware.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;		None
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;		None
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  1    wreg      void 
  2819 ;; Registers used:
  2820 ;;		wreg, status,2, cstack
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2826 ;;      Params:         0       0       0       0       0       0       0       0       0
  2827 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2828 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2829 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2830 ;;Total ram usage:        0 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; Hardware stack levels required when called:    4
  2833 ;; This function calls:
  2834 ;;		_write_timer_zero
  2835 ;; This function is called by:
  2836 ;;		_init_hardware
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           	psect	text7
  2841  005382                     __ptext7:
  2842                           	callstack 0
  2843  005382                     _config_timer_zero:
  2844                           	callstack 25
  2845                           
  2846                           ;hardware.c: 81: T0CON = 0b11000101;
  2847                           
  2848                           ;incstack = 0
  2849  005382  0EC5               	movlw	197
  2850  005384  6ED5               	movwf	213,c	;volatile
  2851                           
  2852                           ;hardware.c: 82: SPPCON = 0b00000000;
  2853  005386  0E00               	movlw	0
  2854  005388  6E65               	movwf	101,c	;volatile
  2855                           
  2856                           ;hardware.c: 83: SPPCFG = 0b00000000;
  2857  00538A  0E00               	movlw	0
  2858  00538C  6E63               	movwf	99,c	;volatile
  2859                           
  2860                           ;hardware.c: 84: write_timer_zero(0x45);
  2861  00538E  0E00               	movlw	0
  2862  005390  6E1A               	movwf	(write_timer_zero@timer0+1)^0,c
  2863  005392  0E45               	movlw	69
  2864  005394  6E19               	movwf	write_timer_zero@timer0^0,c
  2865  005396  EC42  F02A         	call	_write_timer_zero	;wreg free
  2866  00539A  0012               	return		;funcret
  2867  00539C                     __end_of_config_timer_zero:
  2868                           	callstack 0
  2869                           
  2870 ;; *************** function _write_timer_zero *****************
  2871 ;; Defined at:
  2872 ;;		line 134 in file "bibliotecas/hardware.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;  timer0          2   24[COMRAM] unsigned int 
  2875 ;; Auto vars:     Size  Location     Type
  2876 ;;		None
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  1    wreg      void 
  2879 ;; Registers used:
  2880 ;;		None
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2886 ;;      Params:         2       0       0       0       0       0       0       0       0
  2887 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2888 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2889 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2890 ;;Total ram usage:        2 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; Hardware stack levels required when called:    3
  2893 ;; This function calls:
  2894 ;;		Nothing
  2895 ;; This function is called by:
  2896 ;;		_config_timer_zero
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           	psect	text8
  2901  005484                     __ptext8:
  2902                           	callstack 0
  2903  005484                     _write_timer_zero:
  2904                           	callstack 25
  2905                           
  2906                           ;hardware.c: 142: TMR0 = timer0;
  2907                           
  2908                           ;incstack = 0
  2909  005484  C019  FFD6         	movff	write_timer_zero@timer0,4054	;volatile
  2910  005488  C01A  FFD7         	movff	write_timer_zero@timer0+1,4055	;volatile
  2911  00548C  0012               	return		;funcret
  2912  00548E                     __end_of_write_timer_zero:
  2913                           	callstack 0
  2914                           
  2915 ;; *************** function _config_timer_dois *****************
  2916 ;; Defined at:
  2917 ;;		line 198 in file "bibliotecas/hardware.c"
  2918 ;; Parameters:    Size  Location     Type
  2919 ;;		None
  2920 ;; Auto vars:     Size  Location     Type
  2921 ;;		None
  2922 ;; Return value:  Size  Location     Type
  2923 ;;                  1    wreg      void 
  2924 ;; Registers used:
  2925 ;;		wreg, status,2
  2926 ;; Tracked objects:
  2927 ;;		On entry : 0/0
  2928 ;;		On exit  : 0/0
  2929 ;;		Unchanged: 0/0
  2930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2931 ;;      Params:         0       0       0       0       0       0       0       0       0
  2932 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2933 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2934 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2935 ;;Total ram usage:        0 bytes
  2936 ;; Hardware stack levels used:    1
  2937 ;; Hardware stack levels required when called:    3
  2938 ;; This function calls:
  2939 ;;		Nothing
  2940 ;; This function is called by:
  2941 ;;		_init_hardware
  2942 ;; This function uses a non-reentrant model
  2943 ;;
  2944                           
  2945                           	psect	text9
  2946  005438                     __ptext9:
  2947                           	callstack 0
  2948  005438                     _config_timer_dois:
  2949                           	callstack 26
  2950                           
  2951                           ;hardware.c: 200: T2CON = 0b00000100;
  2952                           
  2953                           ;incstack = 0
  2954  005438  0E04               	movlw	4
  2955  00543A  6ECA               	movwf	202,c	;volatile
  2956                           
  2957                           ;hardware.c: 201: TMR2 = 0;
  2958  00543C  0E00               	movlw	0
  2959  00543E  6ECC               	movwf	204,c	;volatile
  2960                           
  2961                           ;hardware.c: 202: PR2 = 0x01;
  2962  005440  0E01               	movlw	1
  2963  005442  6ECB               	movwf	203,c	;volatile
  2964  005444  0012               	return		;funcret
  2965  005446                     __end_of_config_timer_dois:
  2966                           	callstack 0
  2967                           
  2968 ;; *************** function _inicializa_tarefas *****************
  2969 ;; Defined at:
  2970 ;;		line 168 in file "main.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;		None
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;		None
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  1    wreg      void 
  2977 ;; Registers used:
  2978 ;;		wreg, status,2, status,0
  2979 ;; Tracked objects:
  2980 ;;		On entry : 0/0
  2981 ;;		On exit  : 3F/1
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2984 ;;      Params:         0       0       0       0       0       0       0       0       0
  2985 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2986 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2987 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2988 ;;Total ram usage:        0 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:    3
  2991 ;; This function calls:
  2992 ;;		Nothing
  2993 ;; This function is called by:
  2994 ;;		_main
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text10
  2999  0049AA                     __ptext10:
  3000                           	callstack 0
  3001  0049AA                     _inicializa_tarefas:
  3002                           	callstack 27
  3003                           
  3004                           ;main.c: 171: p_tarefas[0] = verifica_dados_operacionais;
  3005                           
  3006                           ;incstack = 0
  3007  0049AA  0EBE               	movlw	low _verifica_dados_operacionais
  3008  0049AC  0101               	movlb	1	; () banked
  3009  0049AE  6F10               	movwf	_p_tarefas& (0+255),b
  3010  0049B0  0E54               	movlw	high _verifica_dados_operacionais
  3011  0049B2  6F11               	movwf	(_p_tarefas+1)& (0+255),b
  3012                           
  3013                           ;main.c: 172: p_tarefas[1] = disparo_gravacao;
  3014  0049B4  0E42               	movlw	low _disparo_gravacao
  3015  0049B6  6F12               	movwf	(_p_tarefas+2)& (0+255),b
  3016  0049B8  0E4E               	movlw	high _disparo_gravacao
  3017  0049BA  6F13               	movwf	(_p_tarefas+3)& (0+255),b
  3018                           
  3019                           ;main.c: 173: p_tarefas[2] = verifica_fence_externo;
  3020  0049BC  0E30               	movlw	low _verifica_fence_externo
  3021  0049BE  6F14               	movwf	(_p_tarefas+4)& (0+255),b
  3022  0049C0  0E4B               	movlw	high _verifica_fence_externo
  3023  0049C2  6F15               	movwf	(_p_tarefas+5)& (0+255),b
  3024                           
  3025                           ;main.c: 174: p_tarefas[3] = troca_de_tela;
  3026  0049C4  0E1E               	movlw	low _troca_de_tela
  3027  0049C6  6F16               	movwf	(_p_tarefas+6)& (0+255),b
  3028  0049C8  0E16               	movlw	high _troca_de_tela
  3029  0049CA  6F17               	movwf	(_p_tarefas+7)& (0+255),b
  3030                           
  3031                           ; BSR set to: 1
  3032                           ;main.c: 178: tempo_backup[0] = 100;
  3033  0049CC  0E00               	movlw	0
  3034  0049CE  6F09               	movwf	(_tempo_backup+1)& (0+255),b
  3035  0049D0  0E64               	movlw	100
  3036  0049D2  6F08               	movwf	_tempo_backup& (0+255),b
  3037                           
  3038                           ; BSR set to: 1
  3039                           ;main.c: 179: tempo_backup[1] = 100;
  3040  0049D4  0E00               	movlw	0
  3041  0049D6  6F0B               	movwf	(_tempo_backup+3)& (0+255),b
  3042  0049D8  0E64               	movlw	100
  3043  0049DA  6F0A               	movwf	(_tempo_backup+2)& (0+255),b
  3044                           
  3045                           ; BSR set to: 1
  3046                           ;main.c: 180: tempo_backup[2] = 1000;
  3047  0049DC  0E03               	movlw	3
  3048  0049DE  6F0D               	movwf	(_tempo_backup+5)& (0+255),b
  3049  0049E0  0EE8               	movlw	232
  3050  0049E2  6F0C               	movwf	(_tempo_backup+4)& (0+255),b
  3051                           
  3052                           ; BSR set to: 1
  3053                           ;main.c: 181: tempo_backup[3] = 100;
  3054  0049E4  0E00               	movlw	0
  3055  0049E6  6F0F               	movwf	(_tempo_backup+7)& (0+255),b
  3056  0049E8  0E64               	movlw	100
  3057  0049EA  6F0E               	movwf	(_tempo_backup+6)& (0+255),b
  3058                           
  3059                           ; BSR set to: 1
  3060                           ;main.c: 184: tempo_tarefa[0] = 100;
  3061  0049EC  0E00               	movlw	0
  3062  0049EE  6F01               	movwf	(_tempo_tarefa+1)& (0+255),b
  3063  0049F0  0E64               	movlw	100
  3064  0049F2  6F00               	movwf	_tempo_tarefa& (0+255),b
  3065                           
  3066                           ; BSR set to: 1
  3067                           ;main.c: 185: tempo_tarefa[1] = 100;
  3068  0049F4  0E00               	movlw	0
  3069  0049F6  6F03               	movwf	(_tempo_tarefa+3)& (0+255),b
  3070  0049F8  0E64               	movlw	100
  3071  0049FA  6F02               	movwf	(_tempo_tarefa+2)& (0+255),b
  3072                           
  3073                           ; BSR set to: 1
  3074                           ;main.c: 186: tempo_tarefa[2] = 1000;
  3075  0049FC  0E03               	movlw	3
  3076  0049FE  6F05               	movwf	(_tempo_tarefa+5)& (0+255),b
  3077  004A00  0EE8               	movlw	232
  3078  004A02  6F04               	movwf	(_tempo_tarefa+4)& (0+255),b
  3079                           
  3080                           ; BSR set to: 1
  3081                           ;main.c: 187: tempo_tarefa[3] = 100;
  3082  004A04  0E00               	movlw	0
  3083  004A06  6F07               	movwf	(_tempo_tarefa+7)& (0+255),b
  3084  004A08  0E64               	movlw	100
  3085  004A0A  6F06               	movwf	(_tempo_tarefa+6)& (0+255),b
  3086                           
  3087                           ; BSR set to: 1
  3088                           ;main.c: 189: tarefa_em_execucao = 0;
  3089  004A0C  0E00               	movlw	0
  3090  004A0E  6E3C               	movwf	_tarefa_em_execucao^0,c	;volatile
  3091                           
  3092                           ; BSR set to: 1
  3093  004A10  0012               	return		;funcret
  3094  004A12                     __end_of_inicializa_tarefas:
  3095                           	callstack 0
  3096                           
  3097 ;; *************** function _escalonador *****************
  3098 ;; Defined at:
  3099 ;;		line 200 in file "main.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;		None
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;  cont            1  149[BANK0 ] unsigned char 
  3104 ;; Return value:  Size  Location     Type
  3105 ;;                  1    wreg      void 
  3106 ;; Registers used:
  3107 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3108 ;; Tracked objects:
  3109 ;;		On entry : 0/0
  3110 ;;		On exit  : 3F/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3113 ;;      Params:         0       0       0       0       0       0       0       0       0
  3114 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3115 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3116 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3117 ;;Total ram usage:        3 bytes
  3118 ;; Hardware stack levels used:    1
  3119 ;; Hardware stack levels required when called:   17
  3120 ;; This function calls:
  3121 ;;		_disparo_gravacao
  3122 ;;		_troca_de_tela
  3123 ;;		_verifica_dados_operacionais
  3124 ;;		_verifica_fence_externo
  3125 ;; This function is called by:
  3126 ;;		_main
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           	psect	text11
  3131  0041B4                     __ptext11:
  3132                           	callstack 0
  3133  0041B4                     _escalonador:
  3134                           	callstack 13
  3135                           
  3136                           ;main.c: 202: unsigned char cont;;main.c: 203: for(cont = 0; cont<4;cont++)
  3137                           
  3138                           ; BSR set to: 1
  3139                           ;incstack = 0
  3140  0041B4  0E00               	movlw	0
  3141  0041B6  0100               	movlb	0	; () banked
  3142  0041B8  6FF5               	movwf	escalonador@cont& (0+255),b
  3143  0041BA                     l12262:
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;main.c: 204: {;main.c: 205: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3147  0041BA  51F5               	movf	escalonador@cont& (0+255),w,b
  3148  0041BC  0D02               	mullw	2
  3149  0041BE  0E10               	movlw	low _p_tarefas
  3150  0041C0  24F3               	addwf	243,w,c
  3151  0041C2  6ED9               	movwf	fsr2l,c
  3152  0041C4  0E01               	movlw	high _p_tarefas
  3153  0041C6  20F4               	addwfc	prodh,w,c
  3154  0041C8  6EDA               	movwf	fsr2h,c
  3155  0041CA  50DE               	movf	postinc2,w,c
  3156  0041CC  10DE               	iorwf	postinc2,w,c
  3157  0041CE  B4D8               	btfsc	status,2,c
  3158  0041D0  D03F               	goto	l12274
  3159                           
  3160                           ; BSR set to: 0
  3161  0041D2  51F5               	movf	escalonador@cont& (0+255),w,b
  3162  0041D4  0D02               	mullw	2
  3163  0041D6  0E00               	movlw	low _tempo_tarefa
  3164  0041D8  24F3               	addwf	243,w,c
  3165  0041DA  6ED9               	movwf	fsr2l,c
  3166  0041DC  0E01               	movlw	high _tempo_tarefa
  3167  0041DE  20F4               	addwfc	prodh,w,c
  3168  0041E0  6EDA               	movwf	fsr2h,c
  3169  0041E2  50DE               	movf	postinc2,w,c
  3170  0041E4  10DE               	iorwf	postinc2,w,c
  3171  0041E6  A4D8               	btfss	status,2,c
  3172  0041E8  D033               	goto	l12274
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;main.c: 206: {;main.c: 207: tarefa_em_execucao = 1;
  3176  0041EA  0E01               	movlw	1
  3177  0041EC  6E3C               	movwf	_tarefa_em_execucao^0,c	;volatile
  3178                           
  3179                           ;main.c: 208: timeout_tarefa = 10000;
  3180  0041EE  0E27               	movlw	39
  3181  0041F0  0101               	movlb	1	; () banked
  3182  0041F2  6F19               	movwf	(_timeout_tarefa+1)& (0+255),b
  3183  0041F4  0E10               	movlw	16
  3184  0041F6  6F18               	movwf	_timeout_tarefa& (0+255),b
  3185                           
  3186                           ; BSR set to: 1
  3187                           ;main.c: 209: p_tarefas[cont]();
  3188  0041F8  0100               	movlb	0	; () banked
  3189  0041FA  51F5               	movf	escalonador@cont& (0+255),w,b
  3190  0041FC  0D02               	mullw	2
  3191  0041FE  0E10               	movlw	low _p_tarefas
  3192  004200  24F3               	addwf	243,w,c
  3193  004202  6ED9               	movwf	fsr2l,c
  3194  004204  0E01               	movlw	high _p_tarefas
  3195  004206  20F4               	addwfc	prodh,w,c
  3196  004208  6EDA               	movwf	fsr2h,c
  3197  00420A  D801               	call	u15188
  3198  00420C  D00A               	goto	u15189
  3199  00420E                     u15188:
  3200  00420E  0005               	push	
  3201  004210  6EFA               	movwf	pclath,c
  3202  004212  50DE               	movf	postinc2,w,c
  3203  004214  6EFD               	movwf	tosl,c
  3204  004216  50DE               	movf	postinc2,w,c
  3205  004218  6EFE               	movwf	tosh,c
  3206  00421A  50F8               	movf	tblptru,w,c
  3207  00421C  6EFF               	movwf	tosu,c
  3208  00421E  50FA               	movf	pclath,w,c
  3209  004220  0012               	return		;indir
  3210  004222                     u15189:
  3211                           
  3212                           ;main.c: 210: tarefa_em_execucao = 0;
  3213  004222  0E00               	movlw	0
  3214  004224  6E3C               	movwf	_tarefa_em_execucao^0,c	;volatile
  3215                           
  3216                           ;main.c: 211: tempo_tarefa[cont] = tempo_backup[cont];
  3217  004226  0100               	movlb	0	; () banked
  3218  004228  51F5               	movf	escalonador@cont& (0+255),w,b
  3219  00422A  0D02               	mullw	2
  3220  00422C  0E08               	movlw	low _tempo_backup
  3221  00422E  24F3               	addwf	243,w,c
  3222  004230  6ED9               	movwf	fsr2l,c
  3223  004232  0E01               	movlw	high _tempo_backup
  3224  004234  20F4               	addwfc	prodh,w,c
  3225  004236  6EDA               	movwf	fsr2h,c
  3226  004238  51F5               	movf	escalonador@cont& (0+255),w,b
  3227  00423A  0D02               	mullw	2
  3228  00423C  0E00               	movlw	low _tempo_tarefa
  3229  00423E  24F3               	addwf	243,w,c
  3230  004240  6EE1               	movwf	fsr1l,c
  3231  004242  0E01               	movlw	high _tempo_tarefa
  3232  004244  20F4               	addwfc	prodh,w,c
  3233  004246  6EE2               	movwf	fsr1h,c
  3234  004248  CFDE FFE6          	movff	postinc2,postinc1
  3235  00424C  CFDD FFE5          	movff	postdec2,postdec1
  3236  004250                     l12274:
  3237                           
  3238                           ; BSR set to: 0
  3239  004250  2BF5               	incf	escalonador@cont& (0+255),f,b
  3240                           
  3241                           ; BSR set to: 0
  3242  004252  0E03               	movlw	3
  3243  004254  65F5               	cpfsgt	escalonador@cont& (0+255),b
  3244  004256  D7B1               	goto	l12262
  3245  004258  0012               	return	
  3246  00425A                     __end_of_escalonador:
  3247                           	callstack 0
  3248                           
  3249 ;; *************** function _troca_de_tela *****************
  3250 ;; Defined at:
  3251 ;;		line 651 in file "main.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;		None
  3254 ;; Auto vars:     Size  Location     Type
  3255 ;;		None
  3256 ;; Return value:  Size  Location     Type
  3257 ;;                  1    wreg      void 
  3258 ;; Registers used:
  3259 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3260 ;; Tracked objects:
  3261 ;;		On entry : 3F/0
  3262 ;;		On exit  : 0/0
  3263 ;;		Unchanged: 0/0
  3264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3265 ;;      Params:         0       0       0       0       0       0       0       0       0
  3266 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3267 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3268 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3269 ;;Total ram usage:        2 bytes
  3270 ;; Hardware stack levels used:    1
  3271 ;; Hardware stack levels required when called:    7
  3272 ;; This function calls:
  3273 ;;		_Latitude
  3274 ;;		_Longitude
  3275 ;;		_escreve_cmd_lcd
  3276 ;;		_escreve_frase_ram_lcd
  3277 ;;		_escreve_inteiro_lcd
  3278 ;;		_fix
  3279 ;;		_posicao_cursor_lcd
  3280 ;; This function is called by:
  3281 ;;		_inicializa_tarefas
  3282 ;;		_escalonador
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           	psect	text12
  3287  00161E                     __ptext12:
  3288                           	callstack 0
  3289  00161E                     _troca_de_tela:
  3290                           	callstack 22
  3291                           
  3292                           ; BSR set to: 0
  3293                           ;main.c: 654: static unsigned char state = 0;;main.c: 655: static unsigned char last_sta
      +                          te = 0;;;main.c: 658: switch(!flag[2].point)
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;incstack = 0
  3297  00161E  D185               	goto	l11964
  3298  001620                     l1416:
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;main.c: 662: if(!PORTEbits.RE0 && !flag[2].point || (state == 1 ))
  3302  001620  B084               	btfsc	132,0,c	;volatile
  3303  001622  D002               	goto	u14420
  3304                           
  3305                           ; BSR set to: 0
  3306  001624  A035               	btfss	(_flag+2)^0,0,c
  3307  001626  D003               	goto	u14430
  3308  001628                     u14420:
  3309                           
  3310                           ; BSR set to: 0
  3311  001628  043B               	decf	troca_de_tela@state^0,w,c
  3312  00162A  A4D8               	btfss	status,2,c
  3313  00162C  D042               	goto	l11842
  3314  00162E                     u14430:
  3315                           
  3316                           ; BSR set to: 0
  3317                           ;main.c: 663: {;main.c: 665: if(!time_atualizacao)
  3318  00162E  5036               	movf	_time_atualizacao^0,w,c
  3319  001630  1037               	iorwf	(_time_atualizacao+1)^0,w,c
  3320  001632  A4D8               	btfss	status,2,c
  3321  001634  D011               	goto	l11822
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;main.c: 666: {;main.c: 667: posicao_cursor_lcd(2,6);
  3325  001636  0E06               	movlw	6
  3326  001638  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3327  00163A  0E02               	movlw	2
  3328  00163C  EC3C  F025         	call	_posicao_cursor_lcd
  3329                           
  3330                           ;main.c: 668: escreve_frase_ram_lcd(fix());
  3331  001640  EC51  F02A         	call	_fix	;wreg free
  3332  001644  C019  F01C         	movff	?_fix,escreve_frase_ram_lcd@buffer
  3333  001648  C01A  F01D         	movff	?_fix+1,escreve_frase_ram_lcd@buffer+1
  3334  00164C  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3335                           
  3336                           ;main.c: 669: time_atualizacao = 10000;
  3337  001650  0E27               	movlw	39
  3338  001652  6E37               	movwf	(_time_atualizacao+1)^0,c
  3339  001654  0E10               	movlw	16
  3340  001656  6E36               	movwf	_time_atualizacao^0,c
  3341  001658                     l11822:
  3342                           
  3343                           ;main.c: 670: };main.c: 672: if(last_state != 1)
  3344  001658  043A               	decf	troca_de_tela@last_state^0,w,c
  3345  00165A  B4D8               	btfsc	status,2,c
  3346  00165C  D028               	goto	l11840
  3347                           
  3348                           ;main.c: 673: {;main.c: 674: state = 1;
  3349  00165E  0E01               	movlw	1
  3350  001660  6E3B               	movwf	troca_de_tela@state^0,c
  3351                           
  3352                           ;main.c: 675: escreve_cmd_lcd(0b00000001);
  3353  001662  0E01               	movlw	1
  3354  001664  ECA5  F022         	call	_escreve_cmd_lcd
  3355                           
  3356                           ;main.c: 676: posicao_cursor_lcd(1,0);
  3357  001668  0E00               	movlw	0
  3358  00166A  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3359  00166C  0E01               	movlw	1
  3360  00166E  EC3C  F025         	call	_posicao_cursor_lcd
  3361                           
  3362                           ;main.c: 677: escreve_frase_ram_lcd("RPM:");
  3363  001672  0E63               	movlw	low STR_23
  3364  001674  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3365  001676  0E62               	movlw	high STR_23
  3366  001678  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3367  00167A  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3368                           
  3369                           ;main.c: 678: posicao_cursor_lcd(2,0);
  3370  00167E  0E00               	movlw	0
  3371  001680  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3372  001682  0E02               	movlw	2
  3373  001684  EC3C  F025         	call	_posicao_cursor_lcd
  3374                           
  3375                           ;main.c: 679: escreve_frase_ram_lcd("VEL:");
  3376  001688  0E5E               	movlw	low STR_24
  3377  00168A  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3378  00168C  0E62               	movlw	high STR_24
  3379  00168E  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3380  001690  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3381                           
  3382                           ;main.c: 680: posicao_cursor_lcd(2,6);
  3383  001694  0E06               	movlw	6
  3384  001696  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3385  001698  0E02               	movlw	2
  3386  00169A  EC3C  F025         	call	_posicao_cursor_lcd
  3387                           
  3388                           ;main.c: 681: escreve_frase_ram_lcd(fix());
  3389  00169E  EC51  F02A         	call	_fix	;wreg free
  3390  0016A2  C019  F01C         	movff	?_fix,escreve_frase_ram_lcd@buffer
  3391  0016A6  C01A  F01D         	movff	?_fix+1,escreve_frase_ram_lcd@buffer+1
  3392  0016AA  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3393  0016AE                     l11840:
  3394                           
  3395                           ;main.c: 682: };main.c: 683: last_state = 1;
  3396  0016AE  0E01               	movlw	1
  3397  0016B0  6E3A               	movwf	troca_de_tela@last_state^0,c
  3398  0016B2                     l11842:
  3399                           
  3400                           ;main.c: 685: };main.c: 688: if(!PORTEbits.RE1 && !flag[2].point || (state == 2))
  3401  0016B2  B284               	btfsc	132,1,c	;volatile
  3402  0016B4  D002               	goto	u14470
  3403  0016B6  A035               	btfss	(_flag+2)^0,0,c
  3404  0016B8  D004               	goto	u14480
  3405  0016BA                     u14470:
  3406  0016BA  0E02               	movlw	2
  3407  0016BC  183B               	xorwf	troca_de_tela@state^0,w,c
  3408  0016BE  A4D8               	btfss	status,2,c
  3409  0016C0  D06D               	goto	l11886
  3410  0016C2                     u14480:
  3411                           
  3412                           ;main.c: 689: {;main.c: 690: if(!time_atualizacao)
  3413  0016C2  5036               	movf	_time_atualizacao^0,w,c
  3414  0016C4  1037               	iorwf	(_time_atualizacao+1)^0,w,c
  3415  0016C6  A4D8               	btfss	status,2,c
  3416  0016C8  D026               	goto	l11858
  3417                           
  3418                           ;main.c: 691: {;main.c: 692: point_buff_gps_lat = Latitude();
  3419  0016CA  EC4C  F02A         	call	_Latitude	;wreg free
  3420  0016CE  C019  F0F8         	movff	?_Latitude,_point_buff_gps_lat
  3421  0016D2  C01A  F0F9         	movff	?_Latitude+1,_point_buff_gps_lat+1
  3422                           
  3423                           ;main.c: 693: point_buff_gps_long = Longitude();
  3424  0016D6  EC47  F02A         	call	_Longitude	;wreg free
  3425  0016DA  C019  F0F6         	movff	?_Longitude,_point_buff_gps_long
  3426  0016DE  C01A  F0F7         	movff	?_Longitude+1,_point_buff_gps_long+1
  3427                           
  3428                           ;main.c: 694: posicao_cursor_lcd(1,4);
  3429  0016E2  0E04               	movlw	4
  3430  0016E4  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3431  0016E6  0E01               	movlw	1
  3432  0016E8  EC3C  F025         	call	_posicao_cursor_lcd
  3433                           
  3434                           ;main.c: 695: escreve_frase_ram_lcd(point_buff_gps_lat);
  3435  0016EC  C0F8  F01C         	movff	_point_buff_gps_lat,escreve_frase_ram_lcd@buffer
  3436  0016F0  C0F9  F01D         	movff	_point_buff_gps_lat+1,escreve_frase_ram_lcd@buffer+1
  3437  0016F4  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3438                           
  3439                           ;main.c: 696: posicao_cursor_lcd(2,4);
  3440  0016F8  0E04               	movlw	4
  3441  0016FA  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3442  0016FC  0E02               	movlw	2
  3443  0016FE  EC3C  F025         	call	_posicao_cursor_lcd
  3444                           
  3445                           ;main.c: 697: escreve_frase_ram_lcd(point_buff_gps_long);
  3446  001702  C0F6  F01C         	movff	_point_buff_gps_long,escreve_frase_ram_lcd@buffer
  3447  001706  C0F7  F01D         	movff	_point_buff_gps_long+1,escreve_frase_ram_lcd@buffer+1
  3448  00170A  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3449                           
  3450                           ;main.c: 698: time_atualizacao = 2000;
  3451  00170E  0E07               	movlw	7
  3452  001710  6E37               	movwf	(_time_atualizacao+1)^0,c
  3453  001712  0ED0               	movlw	208
  3454  001714  6E36               	movwf	_time_atualizacao^0,c
  3455  001716                     l11858:
  3456                           
  3457                           ;main.c: 699: };main.c: 702: if(last_state != 2)
  3458  001716  0E02               	movlw	2
  3459  001718  183A               	xorwf	troca_de_tela@last_state^0,w,c
  3460  00171A  B4D8               	btfsc	status,2,c
  3461  00171C  D03D               	goto	l11884
  3462                           
  3463                           ;main.c: 703: {;main.c: 704: state = 2;
  3464  00171E  0E02               	movlw	2
  3465  001720  6E3B               	movwf	troca_de_tela@state^0,c
  3466                           
  3467                           ;main.c: 705: escreve_cmd_lcd(0b00000001);
  3468  001722  0E01               	movlw	1
  3469  001724  ECA5  F022         	call	_escreve_cmd_lcd
  3470                           
  3471                           ;main.c: 706: point_buff_gps_lat = Latitude();
  3472  001728  EC4C  F02A         	call	_Latitude	;wreg free
  3473  00172C  C019  F0F8         	movff	?_Latitude,_point_buff_gps_lat
  3474  001730  C01A  F0F9         	movff	?_Latitude+1,_point_buff_gps_lat+1
  3475                           
  3476                           ;main.c: 707: point_buff_gps_long = Longitude();
  3477  001734  EC47  F02A         	call	_Longitude	;wreg free
  3478  001738  C019  F0F6         	movff	?_Longitude,_point_buff_gps_long
  3479  00173C  C01A  F0F7         	movff	?_Longitude+1,_point_buff_gps_long+1
  3480                           
  3481                           ;main.c: 708: posicao_cursor_lcd(1,0);
  3482  001740  0E00               	movlw	0
  3483  001742  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3484  001744  0E01               	movlw	1
  3485  001746  EC3C  F025         	call	_posicao_cursor_lcd
  3486                           
  3487                           ;main.c: 709: escreve_frase_ram_lcd("lt:");
  3488  00174A  0E71               	movlw	low STR_25
  3489  00174C  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3490  00174E  0E62               	movlw	high STR_25
  3491  001750  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3492  001752  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3493                           
  3494                           ;main.c: 710: posicao_cursor_lcd(1,4);
  3495  001756  0E04               	movlw	4
  3496  001758  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3497  00175A  0E01               	movlw	1
  3498  00175C  EC3C  F025         	call	_posicao_cursor_lcd
  3499                           
  3500                           ;main.c: 711: escreve_frase_ram_lcd(point_buff_gps_lat);
  3501  001760  C0F8  F01C         	movff	_point_buff_gps_lat,escreve_frase_ram_lcd@buffer
  3502  001764  C0F9  F01D         	movff	_point_buff_gps_lat+1,escreve_frase_ram_lcd@buffer+1
  3503  001768  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3504                           
  3505                           ;main.c: 712: posicao_cursor_lcd(2,0);
  3506  00176C  0E00               	movlw	0
  3507  00176E  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3508  001770  0E02               	movlw	2
  3509  001772  EC3C  F025         	call	_posicao_cursor_lcd
  3510                           
  3511                           ;main.c: 713: escreve_frase_ram_lcd("lo:");
  3512  001776  0E6D               	movlw	low STR_26
  3513  001778  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3514  00177A  0E62               	movlw	high STR_26
  3515  00177C  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3516  00177E  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3517                           
  3518                           ;main.c: 714: posicao_cursor_lcd(2,4);
  3519  001782  0E04               	movlw	4
  3520  001784  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3521  001786  0E02               	movlw	2
  3522  001788  EC3C  F025         	call	_posicao_cursor_lcd
  3523                           
  3524                           ;main.c: 715: escreve_frase_ram_lcd(point_buff_gps_long);
  3525  00178C  C0F6  F01C         	movff	_point_buff_gps_long,escreve_frase_ram_lcd@buffer
  3526  001790  C0F7  F01D         	movff	_point_buff_gps_long+1,escreve_frase_ram_lcd@buffer+1
  3527  001794  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3528  001798                     l11884:
  3529                           
  3530                           ;main.c: 716: };main.c: 717: last_state = 2;
  3531  001798  0E02               	movlw	2
  3532  00179A  6E3A               	movwf	troca_de_tela@last_state^0,c
  3533  00179C                     l11886:
  3534                           
  3535                           ;main.c: 718: };main.c: 721: if((!PORTEbits.RE1 && state!=0) && !flag[2].point )
  3536  00179C  B284               	btfsc	132,1,c	;volatile
  3537  00179E  D025               	goto	l11908
  3538  0017A0  503B               	movf	troca_de_tela@state^0,w,c
  3539  0017A2  A4D8               	btfss	status,2,c
  3540  0017A4  B035               	btfsc	(_flag+2)^0,0,c
  3541  0017A6  D021               	goto	l11908
  3542                           
  3543                           ;main.c: 722: {;main.c: 723: if(last_state != 4)
  3544  0017A8  0E04               	movlw	4
  3545  0017AA  183A               	xorwf	troca_de_tela@last_state^0,w,c
  3546  0017AC  B4D8               	btfsc	status,2,c
  3547  0017AE  D01B               	goto	l11906
  3548                           
  3549                           ;main.c: 724: {;main.c: 725: escreve_cmd_lcd(0b00000001);
  3550  0017B0  0E01               	movlw	1
  3551  0017B2  ECA5  F022         	call	_escreve_cmd_lcd
  3552                           
  3553                           ;main.c: 726: state = 0;
  3554  0017B6  0E00               	movlw	0
  3555  0017B8  6E3B               	movwf	troca_de_tela@state^0,c
  3556                           
  3557                           ;main.c: 727: posicao_cursor_lcd(1,0);
  3558  0017BA  0E00               	movlw	0
  3559  0017BC  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3560  0017BE  0E01               	movlw	1
  3561  0017C0  EC3C  F025         	call	_posicao_cursor_lcd
  3562                           
  3563                           ;main.c: 728: escreve_frase_ram_lcd("B1:RPM B2:FENCE");
  3564  0017C4  0E7E               	movlw	low STR_27
  3565  0017C6  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3566  0017C8  0E61               	movlw	high STR_27
  3567  0017CA  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3568  0017CC  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3569                           
  3570                           ;main.c: 729: posicao_cursor_lcd(2,0);
  3571  0017D0  0E00               	movlw	0
  3572  0017D2  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3573  0017D4  0E02               	movlw	2
  3574  0017D6  EC3C  F025         	call	_posicao_cursor_lcd
  3575                           
  3576                           ;main.c: 730: escreve_frase_ram_lcd("B2:HOME");
  3577  0017DA  0E43               	movlw	low STR_28
  3578  0017DC  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3579  0017DE  0E62               	movlw	high STR_28
  3580  0017E0  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3581  0017E2  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3582  0017E6                     l11906:
  3583                           
  3584                           ;main.c: 731: };main.c: 732: last_state = 4;
  3585  0017E6  0E04               	movlw	4
  3586  0017E8  6E3A               	movwf	troca_de_tela@last_state^0,c
  3587  0017EA                     l11908:
  3588                           
  3589                           ;main.c: 733: };main.c: 735: if(!state && !flag[2].point)
  3590  0017EA  503B               	movf	troca_de_tela@state^0,w,c
  3591  0017EC  A4D8               	btfss	status,2,c
  3592  0017EE  0012               	return	
  3593  0017F0  B035               	btfsc	(_flag+2)^0,0,c
  3594  0017F2  0012               	return	
  3595                           
  3596                           ;main.c: 736: {;main.c: 737: if(last_state != 4)
  3597  0017F4  0E04               	movlw	4
  3598  0017F6  183A               	xorwf	troca_de_tela@last_state^0,w,c
  3599  0017F8  B4D8               	btfsc	status,2,c
  3600  0017FA  D019               	goto	l11920
  3601                           
  3602                           ;main.c: 738: {;main.c: 739: escreve_cmd_lcd(0b00000001);
  3603  0017FC  0E01               	movlw	1
  3604  0017FE  ECA5  F022         	call	_escreve_cmd_lcd
  3605                           
  3606                           ;main.c: 740: posicao_cursor_lcd(1,0);
  3607  001802  0E00               	movlw	0
  3608  001804  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3609  001806  0E01               	movlw	1
  3610  001808  EC3C  F025         	call	_posicao_cursor_lcd
  3611                           
  3612                           ;main.c: 741: escreve_frase_ram_lcd("B1:RPM  B2:FENCE");
  3613  00180C  0E5C               	movlw	low STR_29
  3614  00180E  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3615  001810  0E61               	movlw	high STR_29
  3616  001812  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3617  001814  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3618                           
  3619                           ;main.c: 742: posicao_cursor_lcd(2,0);
  3620  001818  0E00               	movlw	0
  3621  00181A  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3622  00181C  0E02               	movlw	2
  3623  00181E  EC3C  F025         	call	_posicao_cursor_lcd
  3624                           
  3625                           ;main.c: 743: escreve_frase_ram_lcd("B2:HOME");
  3626  001822  0E43               	movlw	low STR_28
  3627  001824  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3628  001826  0E62               	movlw	high STR_28
  3629  001828  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3630  00182A  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3631  00182E                     l11920:
  3632                           
  3633                           ;main.c: 744: };main.c: 745: last_state = 4;
  3634  00182E  0E04               	movlw	4
  3635  001830  6E3A               	movwf	troca_de_tela@last_state^0,c
  3636  001832  0012               	return	
  3637  001834                     l1436:
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;main.c: 750: if(flag[2].point || state == 3)
  3641  001834  B035               	btfsc	(_flag+2)^0,0,c
  3642  001836  D004               	goto	u14590
  3643                           
  3644                           ; BSR set to: 0
  3645  001838  0E03               	movlw	3
  3646  00183A  183B               	xorwf	troca_de_tela@state^0,w,c
  3647  00183C  A4D8               	btfss	status,2,c
  3648  00183E  0012               	return	
  3649  001840                     u14590:
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;main.c: 751: {;main.c: 753: if(!time_atualizacao)
  3653  001840  5036               	movf	_time_atualizacao^0,w,c
  3654  001842  1037               	iorwf	(_time_atualizacao+1)^0,w,c
  3655  001844  A4D8               	btfss	status,2,c
  3656  001846  D024               	goto	l11934
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;main.c: 754: {;main.c: 755: posicao_cursor_lcd(2,7);
  3660  001848  0E07               	movlw	7
  3661  00184A  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3662  00184C  0E02               	movlw	2
  3663  00184E  EC3C  F025         	call	_posicao_cursor_lcd
  3664                           
  3665                           ;main.c: 756: escreve_inteiro_lcd(flag[0].point);
  3666  001852  A033               	btfss	_flag^0,0,c
  3667  001854  D003               	goto	u14610
  3668  001856  6A30               	clrf	??_troca_de_tela^0,c
  3669  001858  2A30               	incf	??_troca_de_tela^0,f,c
  3670  00185A  D001               	goto	u14618
  3671  00185C                     u14610:
  3672  00185C  6A30               	clrf	??_troca_de_tela^0,c
  3673  00185E                     u14618:
  3674  00185E  5030               	movf	??_troca_de_tela^0,w,c
  3675  001860  6E2E               	movwf	escreve_inteiro_lcd@valor^0,c
  3676  001862  6A2F               	clrf	(escreve_inteiro_lcd@valor+1)^0,c
  3677  001864  EC03  F028         	call	_escreve_inteiro_lcd	;wreg free
  3678                           
  3679                           ;main.c: 757: posicao_cursor_lcd(2,9);
  3680  001868  0E09               	movlw	9
  3681  00186A  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3682  00186C  0E02               	movlw	2
  3683  00186E  EC3C  F025         	call	_posicao_cursor_lcd
  3684                           
  3685                           ;main.c: 758: escreve_inteiro_lcd(flag[1].point);
  3686  001872  A034               	btfss	(_flag+1)^0,0,c
  3687  001874  D003               	goto	u14620
  3688  001876  6A30               	clrf	??_troca_de_tela^0,c
  3689  001878  2A30               	incf	??_troca_de_tela^0,f,c
  3690  00187A  D001               	goto	u14628
  3691  00187C                     u14620:
  3692  00187C  6A30               	clrf	??_troca_de_tela^0,c
  3693  00187E                     u14628:
  3694  00187E  5030               	movf	??_troca_de_tela^0,w,c
  3695  001880  6E2E               	movwf	escreve_inteiro_lcd@valor^0,c
  3696  001882  6A2F               	clrf	(escreve_inteiro_lcd@valor+1)^0,c
  3697  001884  EC03  F028         	call	_escreve_inteiro_lcd	;wreg free
  3698                           
  3699                           ;main.c: 759: time_atualizacao = 10000;
  3700  001888  0E27               	movlw	39
  3701  00188A  6E37               	movwf	(_time_atualizacao+1)^0,c
  3702  00188C  0E10               	movlw	16
  3703  00188E  6E36               	movwf	_time_atualizacao^0,c
  3704  001890                     l11934:
  3705                           
  3706                           ;main.c: 760: };main.c: 762: if(last_state != 3)
  3707  001890  0E03               	movlw	3
  3708  001892  183A               	xorwf	troca_de_tela@last_state^0,w,c
  3709  001894  B4D8               	btfsc	status,2,c
  3710  001896  D046               	goto	l11960
  3711                           
  3712                           ;main.c: 763: {;main.c: 764: state = 3;
  3713  001898  0E03               	movlw	3
  3714  00189A  6E3B               	movwf	troca_de_tela@state^0,c
  3715                           
  3716                           ;main.c: 765: escreve_cmd_lcd(0b00000001);
  3717  00189C  0E01               	movlw	1
  3718  00189E  ECA5  F022         	call	_escreve_cmd_lcd
  3719                           
  3720                           ;main.c: 766: posicao_cursor_lcd(1,0);
  3721  0018A2  0E00               	movlw	0
  3722  0018A4  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3723  0018A6  0E01               	movlw	1
  3724  0018A8  EC3C  F025         	call	_posicao_cursor_lcd
  3725                           
  3726                           ;main.c: 767: escreve_frase_ram_lcd("REGIAO NEGADA");
  3727  0018AC  0EDD               	movlw	low STR_31
  3728  0018AE  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3729  0018B0  0E61               	movlw	high STR_31
  3730  0018B2  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3731  0018B4  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3732                           
  3733                           ;main.c: 768: posicao_cursor_lcd(2,0);
  3734  0018B8  0E00               	movlw	0
  3735  0018BA  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3736  0018BC  0E02               	movlw	2
  3737  0018BE  EC3C  F025         	call	_posicao_cursor_lcd
  3738                           
  3739                           ;main.c: 769: escreve_frase_ram_lcd("LO-LT:");
  3740  0018C2  0E4B               	movlw	low STR_32
  3741  0018C4  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3742  0018C6  0E62               	movlw	high STR_32
  3743  0018C8  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3744  0018CA  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3745                           
  3746                           ;main.c: 770: posicao_cursor_lcd(2,7);
  3747  0018CE  0E07               	movlw	7
  3748  0018D0  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3749  0018D2  0E02               	movlw	2
  3750  0018D4  EC3C  F025         	call	_posicao_cursor_lcd
  3751                           
  3752                           ;main.c: 771: escreve_inteiro_lcd(flag[0].point);
  3753  0018D8  A033               	btfss	_flag^0,0,c
  3754  0018DA  D003               	goto	u14640
  3755  0018DC  6A30               	clrf	??_troca_de_tela^0,c
  3756  0018DE  2A30               	incf	??_troca_de_tela^0,f,c
  3757  0018E0  D001               	goto	u14648
  3758  0018E2                     u14640:
  3759  0018E2  6A30               	clrf	??_troca_de_tela^0,c
  3760  0018E4                     u14648:
  3761  0018E4  5030               	movf	??_troca_de_tela^0,w,c
  3762  0018E6  6E2E               	movwf	escreve_inteiro_lcd@valor^0,c
  3763  0018E8  6A2F               	clrf	(escreve_inteiro_lcd@valor+1)^0,c
  3764  0018EA  EC03  F028         	call	_escreve_inteiro_lcd	;wreg free
  3765                           
  3766                           ;main.c: 772: posicao_cursor_lcd(2,8);
  3767  0018EE  0E08               	movlw	8
  3768  0018F0  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3769  0018F2  0E02               	movlw	2
  3770  0018F4  EC3C  F025         	call	_posicao_cursor_lcd
  3771                           
  3772                           ;main.c: 773: escreve_frase_ram_lcd("-");
  3773  0018F8  0E7C               	movlw	low STR_33
  3774  0018FA  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3775  0018FC  0E62               	movlw	high STR_33
  3776  0018FE  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3777  001900  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3778                           
  3779                           ;main.c: 774: posicao_cursor_lcd(2,9);
  3780  001904  0E09               	movlw	9
  3781  001906  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3782  001908  0E02               	movlw	2
  3783  00190A  EC3C  F025         	call	_posicao_cursor_lcd
  3784                           
  3785                           ;main.c: 775: escreve_inteiro_lcd(flag[1].point);
  3786  00190E  A034               	btfss	(_flag+1)^0,0,c
  3787  001910  D003               	goto	u14650
  3788  001912  6A30               	clrf	??_troca_de_tela^0,c
  3789  001914  2A30               	incf	??_troca_de_tela^0,f,c
  3790  001916  D001               	goto	u14658
  3791  001918                     u14650:
  3792  001918  6A30               	clrf	??_troca_de_tela^0,c
  3793  00191A                     u14658:
  3794  00191A  5030               	movf	??_troca_de_tela^0,w,c
  3795  00191C  6E2E               	movwf	escreve_inteiro_lcd@valor^0,c
  3796  00191E  6A2F               	clrf	(escreve_inteiro_lcd@valor+1)^0,c
  3797  001920  EC03  F028         	call	_escreve_inteiro_lcd	;wreg free
  3798  001924                     l11960:
  3799                           
  3800                           ;main.c: 776: };main.c: 777: last_state = 3;
  3801  001924  0E03               	movlw	3
  3802  001926  6E3A               	movwf	troca_de_tela@last_state^0,c
  3803  001928  0012               	return	
  3804  00192A                     l11964:
  3805                           
  3806                           ; BSR set to: 0
  3807  00192A  B035               	btfsc	(_flag+2)^0,0,c
  3808  00192C  D002               	goto	u14660
  3809  00192E  0E01               	movlw	1
  3810  001930  D001               	goto	u14670
  3811  001932                     u14660:
  3812  001932  0E00               	movlw	0
  3813  001934                     u14670:
  3814  001934  6E30               	movwf	??_troca_de_tela^0,c
  3815  001936  6A31               	clrf	(??_troca_de_tela+1)^0,c
  3816                           
  3817                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3818                           ; Switch size 1, requested type "simple"
  3819                           ; Number of cases is 1, Range of values is 0 to 0
  3820                           ; switch strategies available:
  3821                           ; Name         Instructions Cycles
  3822                           ; simple_byte            4     3 (average)
  3823                           ;	Chosen strategy is simple_byte
  3824  001938  5031               	movf	(??_troca_de_tela+1)^0,w,c
  3825  00193A  0A00               	xorlw	0	; case 0
  3826  00193C  A4D8               	btfss	status,2,c
  3827  00193E  D77A               	goto	l1436
  3828                           
  3829                           ; BSR set to: 0
  3830                           ; Switch size 1, requested type "simple"
  3831                           ; Number of cases is 1, Range of values is 1 to 1
  3832                           ; switch strategies available:
  3833                           ; Name         Instructions Cycles
  3834                           ; simple_byte            4     3 (average)
  3835                           ;	Chosen strategy is simple_byte
  3836  001940  5030               	movf	??_troca_de_tela^0,w,c
  3837  001942  0A01               	xorlw	1	; case 1
  3838  001944  B4D8               	btfsc	status,2,c
  3839  001946  D66C               	goto	l1416
  3840  001948  D775               	goto	l1436
  3841  00194A                     __end_of_troca_de_tela:
  3842                           	callstack 0
  3843                           
  3844 ;; *************** function _disparo_gravacao *****************
  3845 ;; Defined at:
  3846 ;;		line 626 in file "main.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;		None
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;  fix_gps         2  145[BANK0 ] PTR unsigned char 
  3851 ;;		 -> rawFix(2), 
  3852 ;; Return value:  Size  Location     Type
  3853 ;;                  1    wreg      void 
  3854 ;; Registers used:
  3855 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3856 ;; Tracked objects:
  3857 ;;		On entry : 3F/0
  3858 ;;		On exit  : 0/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3861 ;;      Params:         0       0       0       0       0       0       0       0       0
  3862 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3863 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3864 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3865 ;;Total ram usage:        3 bytes
  3866 ;; Hardware stack levels used:    1
  3867 ;; Hardware stack levels required when called:   16
  3868 ;; This function calls:
  3869 ;;		_escrita_sdcard
  3870 ;;		_fix
  3871 ;; This function is called by:
  3872 ;;		_inicializa_tarefas
  3873 ;;		_escalonador
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text13
  3878  004E42                     __ptext13:
  3879                           	callstack 0
  3880  004E42                     _disparo_gravacao:
  3881                           	callstack 13
  3882                           
  3883                           ; BSR set to: 0
  3884                           ;main.c: 628: unsigned char *fix_gps;;main.c: 630: fix_gps = fix();
  3885                           
  3886                           ;incstack = 0
  3887  004E42  EC51  F02A         	call	_fix	;wreg free
  3888  004E46  C019  F0F1         	movff	?_fix,disparo_gravacao@fix_gps
  3889  004E4A  C01A  F0F2         	movff	?_fix+1,disparo_gravacao@fix_gps+1
  3890                           
  3891                           ;main.c: 632: if(fix_gps[0] == '1')
  3892  004E4E  C0F1  FFD9         	movff	disparo_gravacao@fix_gps,fsr2l
  3893  004E52  C0F2  FFDA         	movff	disparo_gravacao@fix_gps+1,fsr2h
  3894  004E56  0E31               	movlw	49
  3895  004E58  18DE               	xorwf	postinc2,w,c
  3896  004E5A  A4D8               	btfss	status,2,c
  3897  004E5C  0012               	return	
  3898                           
  3899                           ;main.c: 633: {;main.c: 634: if(!time_sd && !time_recovery)
  3900  004E5E  0100               	movlb	0	; () banked
  3901  004E60  51FC               	movf	_time_sd& (0+255),w,b
  3902  004E62  11FD               	iorwf	(_time_sd+1)& (0+255),w,b
  3903  004E64  A4D8               	btfss	status,2,c
  3904  004E66  0012               	return	
  3905                           
  3906                           ; BSR set to: 0
  3907  004E68  51FA               	movf	_time_recovery& (0+255),w,b
  3908  004E6A  11FB               	iorwf	(_time_recovery+1)& (0+255),w,b
  3909  004E6C  A4D8               	btfss	status,2,c
  3910  004E6E  0012               	return	
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;main.c: 635: {;main.c: 636: escrita_sdcard();
  3914  004E70  ECFF  F01C         	call	_escrita_sdcard	;wreg free
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;main.c: 637: time_sd = 1000;
  3918  004E74  0E03               	movlw	3
  3919  004E76  6FFD               	movwf	(_time_sd+1)& (0+255),b
  3920  004E78  0EE8               	movlw	232
  3921  004E7A  6FFC               	movwf	_time_sd& (0+255),b
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;main.c: 638: time_recovery = 5000;
  3925  004E7C  0E13               	movlw	19
  3926  004E7E  6FFB               	movwf	(_time_recovery+1)& (0+255),b
  3927  004E80  0E88               	movlw	136
  3928  004E82  6FFA               	movwf	_time_recovery& (0+255),b
  3929  004E84  0012               	return		;funcret
  3930  004E86                     __end_of_disparo_gravacao:
  3931                           	callstack 0
  3932                           
  3933 ;; *************** function _verifica_dados_operacionais *****************
  3934 ;; Defined at:
  3935 ;;		line 607 in file "main.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;		None
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;		None
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  1    wreg      void 
  3942 ;; Registers used:
  3943 ;;		None
  3944 ;; Tracked objects:
  3945 ;;		On entry : 3F/0
  3946 ;;		On exit  : 3F/0
  3947 ;;		Unchanged: 3F/0
  3948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3949 ;;      Params:         0       0       0       0       0       0       0       0       0
  3950 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3951 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3952 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3953 ;;Total ram usage:        0 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:    3
  3956 ;; This function calls:
  3957 ;;		Nothing
  3958 ;; This function is called by:
  3959 ;;		_inicializa_tarefas
  3960 ;;		_escalonador
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           	psect	text14
  3965  0054BE                     __ptext14:
  3966                           	callstack 0
  3967  0054BE                     _verifica_dados_operacionais:
  3968                           	callstack 26
  3969                           
  3970                           ; BSR set to: 0
  3971                           
  3972                           ;incstack = 0
  3973  0054BE  0012               	return		;funcret
  3974  0054C0                     __end_of_verifica_dados_operacionais:
  3975                           	callstack 0
  3976                           
  3977 ;; *************** function _verifica_fence_externo *****************
  3978 ;; Defined at:
  3979 ;;		line 272 in file "main.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;		None
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;		None
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  1    wreg      void 
  3986 ;; Registers used:
  3987 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3988 ;; Tracked objects:
  3989 ;;		On entry : 3F/0
  3990 ;;		On exit  : 3F/1
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3993 ;;      Params:         0       0       0       0       0       0       0       0       0
  3994 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3995 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3996 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3997 ;;Total ram usage:        1 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    6
  4000 ;; This function calls:
  4001 ;;		_armazena_latitude
  4002 ;;		_armazena_longitude
  4003 ;;		_calcula_diff_graus
  4004 ;;		_calcula_diff_minutos
  4005 ;;		_verifica_diferenca_graus
  4006 ;;		_verifica_diferenca_minutos
  4007 ;;		_verifica_plausibilidade_lat
  4008 ;;		_verifica_plausibilidade_long
  4009 ;; This function is called by:
  4010 ;;		_inicializa_tarefas
  4011 ;;		_escalonador
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           	psect	text15
  4016  004B30                     __ptext15:
  4017                           	callstack 0
  4018  004B30                     _verifica_fence_externo:
  4019                           	callstack 23
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;main.c: 570: armazena_latitude();
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;incstack = 0
  4026  004B30  ECDB  F029         	call	_armazena_latitude	;wreg free
  4027                           
  4028                           ;main.c: 571: armazena_longitude();
  4029  004B34  ECCE  F029         	call	_armazena_longitude	;wreg free
  4030                           
  4031                           ;main.c: 573: verifica_diferenca_graus(0);
  4032  004B38  0E00               	movlw	0
  4033  004B3A  EC31  F016         	call	_verifica_diferenca_graus
  4034                           
  4035                           ;main.c: 574: verifica_diferenca_graus(1);
  4036  004B3E  0E01               	movlw	1
  4037  004B40  EC31  F016         	call	_verifica_diferenca_graus
  4038                           
  4039                           ;main.c: 576: verifica_diferenca_minutos(0);
  4040  004B44  0E00               	movlw	0
  4041  004B46  EC2C  F013         	call	_verifica_diferenca_minutos
  4042                           
  4043                           ;main.c: 577: verifica_diferenca_minutos(1);
  4044  004B4A  0E01               	movlw	1
  4045  004B4C  EC2C  F013         	call	_verifica_diferenca_minutos
  4046                           
  4047                           ;main.c: 579: calcula_diff_graus();
  4048  004B50  ECAD  F01A         	call	_calcula_diff_graus	;wreg free
  4049                           
  4050                           ;main.c: 580: calcula_diff_minutos();
  4051  004B54  EC93  F01E         	call	_calcula_diff_minutos	;wreg free
  4052                           
  4053                           ;main.c: 583: flag[0].point = verifica_plausibilidade_long();
  4054  004B58  EC2D  F020         	call	_verifica_plausibilidade_long	;wreg free
  4055  004B5C  6E30               	movwf	??_verifica_fence_externo^0,c
  4056  004B5E  5033               	movf	_flag^0,w,c
  4057  004B60  1830               	xorwf	??_verifica_fence_externo^0,w,c
  4058  004B62  0BFE               	andlw	-2
  4059  004B64  1830               	xorwf	??_verifica_fence_externo^0,w,c
  4060  004B66  6E33               	movwf	_flag^0,c
  4061                           
  4062                           ; BSR set to: 1
  4063                           ;main.c: 584: flag[1].point = verifica_plausibilidade_lat();
  4064  004B68  EC85  F020         	call	_verifica_plausibilidade_lat	;wreg free
  4065  004B6C  6E30               	movwf	??_verifica_fence_externo^0,c
  4066  004B6E  5034               	movf	(_flag+1)^0,w,c
  4067  004B70  1830               	xorwf	??_verifica_fence_externo^0,w,c
  4068  004B72  0BFE               	andlw	-2
  4069  004B74  1830               	xorwf	??_verifica_fence_externo^0,w,c
  4070  004B76  6E34               	movwf	(_flag+1)^0,c
  4071                           
  4072                           ; BSR set to: 1
  4073                           ;main.c: 586: if(flag[0].point || flag[1].point)
  4074  004B78  B033               	btfsc	_flag^0,0,c
  4075  004B7A  D002               	goto	u14370
  4076                           
  4077                           ; BSR set to: 1
  4078  004B7C  A034               	btfss	(_flag+1)^0,0,c
  4079  004B7E  D002               	goto	l1396
  4080  004B80                     u14370:
  4081                           
  4082                           ; BSR set to: 1
  4083                           ;main.c: 587: {;main.c: 588: flag[2].point = 1;
  4084  004B80  8035               	bsf	(_flag+2)^0,0,c
  4085                           
  4086                           ;main.c: 589: }
  4087  004B82  0012               	return	
  4088  004B84                     l1396:
  4089                           
  4090                           ; BSR set to: 1
  4091                           ;main.c: 590: else;main.c: 591: {;main.c: 592: flag[2].point = 0;
  4092  004B84  9035               	bcf	(_flag+2)^0,0,c
  4093                           
  4094                           ; BSR set to: 1
  4095  004B86  0012               	return		;funcret
  4096  004B88                     __end_of_verifica_fence_externo:
  4097                           	callstack 0
  4098                           
  4099 ;; *************** function _verifica_plausibilidade_long *****************
  4100 ;; Defined at:
  4101 ;;		line 294 in file "bibliotecas/fence.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;		None
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;		None
  4106 ;; Return value:  Size  Location     Type
  4107 ;;                  1    wreg      unsigned char 
  4108 ;; Registers used:
  4109 ;;		wreg, status,2, status,0
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 3F/1
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4115 ;;      Params:         0       0       0       0       0       0       0       0       0
  4116 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4117 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4118 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4119 ;;Total ram usage:        0 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; Hardware stack levels required when called:    3
  4122 ;; This function calls:
  4123 ;;		Nothing
  4124 ;; This function is called by:
  4125 ;;		_verifica_fence_externo
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           	psect	text16
  4130  00405A                     __ptext16:
  4131                           	callstack 0
  4132  00405A                     _verifica_plausibilidade_long:
  4133                           	callstack 25
  4134                           
  4135                           ;fence.c: 296: switch(temp_buff_long[0])
  4136                           
  4137                           ; BSR set to: 1
  4138                           ;incstack = 0
  4139  00405A  D051               	goto	l8600
  4140  00405C                     l8534:
  4141                           
  4142                           ; BSR set to: 2
  4143                           ;fence.c: 299: if(;fence.c: 300: ((poligono_ext[0].diff_long_min >= 0 &&;fence.c: 301: p
      +                          oligono_ext[1].diff_long_min <= 0) &&;fence.c: 303: (poligono_ext[0].diff_long_deg >= 0 
      +                          &&;fence.c: 304: poligono_ext[1].diff_long_deg <= 0)))
  4144  00405C  0101               	movlb	1	; () banked
  4145  00405E  BF5F               	btfsc	(_poligono_ext+61)& (0+255),7,b
  4146  004060  D016               	goto	l8548
  4147                           
  4148                           ; BSR set to: 1
  4149  004062  BF9D               	btfsc	(_poligono_ext+123)& (0+255),7,b
  4150  004064  D007               	goto	u9410
  4151  004066  519D               	movf	(_poligono_ext+123)& (0+255),w,b
  4152  004068  119C               	iorwf	(_poligono_ext+122)& (0+255),w,b
  4153  00406A  119B               	iorwf	(_poligono_ext+121)& (0+255),w,b
  4154  00406C  E110               	bnz	l8548
  4155  00406E  059A               	decf	(_poligono_ext+120)& (0+255),w,b
  4156  004070  B0D8               	btfsc	status,0,c
  4157  004072  D00D               	goto	l8548
  4158  004074                     u9410:
  4159                           
  4160                           ; BSR set to: 1
  4161  004074  BF3F               	btfsc	(_poligono_ext+29)& (0+255),7,b
  4162  004076  D00B               	goto	l8548
  4163                           
  4164                           ; BSR set to: 1
  4165  004078  BF7D               	btfsc	(_poligono_ext+91)& (0+255),7,b
  4166  00407A  D007               	goto	u9430
  4167  00407C  517D               	movf	(_poligono_ext+91)& (0+255),w,b
  4168  00407E  117C               	iorwf	(_poligono_ext+90)& (0+255),w,b
  4169  004080  117B               	iorwf	(_poligono_ext+89)& (0+255),w,b
  4170  004082  E105               	bnz	l8548
  4171  004084  057A               	decf	(_poligono_ext+88)& (0+255),w,b
  4172  004086  B0D8               	btfsc	status,0,c
  4173  004088  D002               	goto	l8548
  4174  00408A                     u9430:
  4175                           
  4176                           ; BSR set to: 1
  4177                           ;fence.c: 305: {;fence.c: 306: return 0;
  4178  00408A  0E00               	movlw	0
  4179  00408C  0012               	return	
  4180  00408E                     l8548:
  4181                           
  4182                           ; BSR set to: 1
  4183                           ;fence.c: 308: else if((poligono_ext[0].diff_long_min == 0 ||;fence.c: 309: poligono_ext
      +                          [1].diff_long_min == 0 ) &&;fence.c: 312: (poligono_ext[0].diff_long_deg == 0 ||;fence.c
      +                          : 313: poligono_ext[1].diff_long_deg == 0))
  4184  00408E  515C               	movf	(_poligono_ext+58)& (0+255),w,b
  4185  004090  115D               	iorwf	(_poligono_ext+59)& (0+255),w,b
  4186  004092  115E               	iorwf	(_poligono_ext+60)& (0+255),w,b
  4187  004094  115F               	iorwf	(_poligono_ext+61)& (0+255),w,b
  4188  004096  B4D8               	btfsc	status,2,c
  4189  004098  D006               	goto	u9450
  4190  00409A                     u9440:
  4191                           
  4192                           ; BSR set to: 1
  4193  00409A  519A               	movf	(_poligono_ext+120)& (0+255),w,b
  4194  00409C  119B               	iorwf	(_poligono_ext+121)& (0+255),w,b
  4195  00409E  119C               	iorwf	(_poligono_ext+122)& (0+255),w,b
  4196  0040A0  119D               	iorwf	(_poligono_ext+123)& (0+255),w,b
  4197  0040A2  A4D8               	btfss	status,2,c
  4198  0040A4  D00C               	goto	l8562
  4199  0040A6                     u9450:
  4200                           
  4201                           ; BSR set to: 1
  4202  0040A6  513C               	movf	(_poligono_ext+26)& (0+255),w,b
  4203  0040A8  113D               	iorwf	(_poligono_ext+27)& (0+255),w,b
  4204  0040AA  113E               	iorwf	(_poligono_ext+28)& (0+255),w,b
  4205  0040AC  113F               	iorwf	(_poligono_ext+29)& (0+255),w,b
  4206  0040AE  B4D8               	btfsc	status,2,c
  4207  0040B0  D7EC               	goto	u9430
  4208                           
  4209                           ; BSR set to: 1
  4210  0040B2  517A               	movf	(_poligono_ext+88)& (0+255),w,b
  4211  0040B4  117B               	iorwf	(_poligono_ext+89)& (0+255),w,b
  4212  0040B6  117C               	iorwf	(_poligono_ext+90)& (0+255),w,b
  4213  0040B8  117D               	iorwf	(_poligono_ext+91)& (0+255),w,b
  4214  0040BA  B4D8               	btfsc	status,2,c
  4215  0040BC  D7E6               	goto	u9430
  4216  0040BE                     l8562:
  4217                           
  4218                           ; BSR set to: 1
  4219                           ;fence.c: 317: else;fence.c: 318: {;fence.c: 319: return 1;
  4220  0040BE  0E01               	movlw	1
  4221  0040C0  0012               	return	
  4222  0040C2                     l8566:
  4223                           
  4224                           ; BSR set to: 2
  4225                           ;fence.c: 324: if(;fence.c: 325: (poligono_ext[0].diff_long_min <= 0 &&;fence.c: 326: po
      +                          ligono_ext[1].diff_long_min >= 0 ) &&;fence.c: 327: (poligono_ext[0].diff_lat_deg <= 0 &
      +                          &;fence.c: 328: poligono_ext[1].diff_lat_deg >= 0))
  4226  0040C2  0101               	movlb	1	; () banked
  4227  0040C4  BF5F               	btfsc	(_poligono_ext+61)& (0+255),7,b
  4228  0040C6  D007               	goto	u9480
  4229  0040C8  515F               	movf	(_poligono_ext+61)& (0+255),w,b
  4230  0040CA  115E               	iorwf	(_poligono_ext+60)& (0+255),w,b
  4231  0040CC  115D               	iorwf	(_poligono_ext+59)& (0+255),w,b
  4232  0040CE  E110               	bnz	l8580
  4233  0040D0  055C               	decf	(_poligono_ext+58)& (0+255),w,b
  4234  0040D2  B0D8               	btfsc	status,0,c
  4235  0040D4  D00D               	goto	l8580
  4236  0040D6                     u9480:
  4237                           
  4238                           ; BSR set to: 1
  4239  0040D6  BF9D               	btfsc	(_poligono_ext+123)& (0+255),7,b
  4240  0040D8  D00B               	goto	l8580
  4241                           
  4242                           ; BSR set to: 1
  4243  0040DA  BF3B               	btfsc	(_poligono_ext+25)& (0+255),7,b
  4244  0040DC  D007               	goto	u9500
  4245  0040DE  513B               	movf	(_poligono_ext+25)& (0+255),w,b
  4246  0040E0  113A               	iorwf	(_poligono_ext+24)& (0+255),w,b
  4247  0040E2  1139               	iorwf	(_poligono_ext+23)& (0+255),w,b
  4248  0040E4  E105               	bnz	l8580
  4249  0040E6  0538               	decf	(_poligono_ext+22)& (0+255),w,b
  4250  0040E8  B0D8               	btfsc	status,0,c
  4251  0040EA  D002               	goto	l8580
  4252  0040EC                     u9500:
  4253                           
  4254                           ; BSR set to: 1
  4255  0040EC  AF79               	btfss	(_poligono_ext+87)& (0+255),7,b
  4256  0040EE  D7CD               	goto	u9430
  4257  0040F0                     l8580:
  4258                           
  4259                           ; BSR set to: 1
  4260                           ;fence.c: 332: else if((poligono_ext[0].diff_long_min == 0 ||;fence.c: 333: poligono_ext
      +                          [1].diff_long_min == 0) &&;fence.c: 334: (poligono_ext[0].diff_long_deg == 0 ||;fence.c:
      +                           335: poligono_ext[1].diff_long_deg == 0))
  4261  0040F0  515C               	movf	(_poligono_ext+58)& (0+255),w,b
  4262  0040F2  115D               	iorwf	(_poligono_ext+59)& (0+255),w,b
  4263  0040F4  115E               	iorwf	(_poligono_ext+60)& (0+255),w,b
  4264  0040F6  115F               	iorwf	(_poligono_ext+61)& (0+255),w,b
  4265  0040F8  A4D8               	btfss	status,2,c
  4266  0040FA  D7CF               	goto	u9440
  4267                           
  4268                           ; BSR set to: 1
  4269  0040FC  D7D4               	goto	u9450
  4270  0040FE                     l8600:
  4271  0040FE  0102               	movlb	2	; () banked
  4272  004100  5178               	movf	_temp_buff_long& (0+255),w,b
  4273                           
  4274                           ; Switch size 1, requested type "simple"
  4275                           ; Number of cases is 1, Range of values is 45 to 45
  4276                           ; switch strategies available:
  4277                           ; Name         Instructions Cycles
  4278                           ; simple_byte            4     3 (average)
  4279                           ;	Chosen strategy is simple_byte
  4280  004102  0A2D               	xorlw	45	; case 45
  4281  004104  B4D8               	btfsc	status,2,c
  4282  004106  D7AA               	goto	l8534
  4283  004108  D7DC               	goto	l8566
  4284  00410A                     __end_of_verifica_plausibilidade_long:
  4285                           	callstack 0
  4286                           
  4287 ;; *************** function _verifica_plausibilidade_lat *****************
  4288 ;; Defined at:
  4289 ;;		line 356 in file "bibliotecas/fence.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;		None
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;		None
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  1    wreg      unsigned char 
  4296 ;; Registers used:
  4297 ;;		wreg, status,2, status,0
  4298 ;; Tracked objects:
  4299 ;;		On entry : 3F/1
  4300 ;;		On exit  : 3F/1
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4303 ;;      Params:         0       0       0       0       0       0       0       0       0
  4304 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4305 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4306 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4307 ;;Total ram usage:        0 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    3
  4310 ;; This function calls:
  4311 ;;		Nothing
  4312 ;; This function is called by:
  4313 ;;		_verifica_fence_externo
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           	psect	text17
  4318  00410A                     __ptext17:
  4319                           	callstack 0
  4320  00410A                     _verifica_plausibilidade_lat:
  4321                           	callstack 25
  4322                           
  4323                           ; BSR set to: 1
  4324                           ;fence.c: 358: switch(temp_buff_lat[0])
  4325                           
  4326                           ; BSR set to: 1
  4327                           ;incstack = 0
  4328  00410A  D04F               	goto	l8670
  4329  00410C                     l8604:
  4330                           
  4331                           ; BSR set to: 1
  4332                           ;fence.c: 361: if(;fence.c: 362: (;fence.c: 363: poligono_ext[0].diff_lat_min <= 0 &&;fe
      +                          nce.c: 364: poligono_ext[1].diff_lat_min >= 0) &&;fence.c: 366: (poligono_ext[0].diff_la
      +                          t_deg <= 0 &&;fence.c: 367: poligono_ext[1].diff_lat_deg >= 0))
  4333  00410C  BF5B               	btfsc	(_poligono_ext+57)& (0+255),7,b
  4334  00410E  D007               	goto	u9560
  4335  004110  515B               	movf	(_poligono_ext+57)& (0+255),w,b
  4336  004112  115A               	iorwf	(_poligono_ext+56)& (0+255),w,b
  4337  004114  1159               	iorwf	(_poligono_ext+55)& (0+255),w,b
  4338  004116  E112               	bnz	l8618
  4339  004118  0558               	decf	(_poligono_ext+54)& (0+255),w,b
  4340  00411A  B0D8               	btfsc	status,0,c
  4341  00411C  D00F               	goto	l8618
  4342  00411E                     u9560:
  4343                           
  4344                           ; BSR set to: 1
  4345  00411E  BF99               	btfsc	(_poligono_ext+119)& (0+255),7,b
  4346  004120  D00D               	goto	l8618
  4347                           
  4348                           ; BSR set to: 1
  4349  004122  BF3B               	btfsc	(_poligono_ext+25)& (0+255),7,b
  4350  004124  D007               	goto	u9580
  4351  004126  513B               	movf	(_poligono_ext+25)& (0+255),w,b
  4352  004128  113A               	iorwf	(_poligono_ext+24)& (0+255),w,b
  4353  00412A  1139               	iorwf	(_poligono_ext+23)& (0+255),w,b
  4354  00412C  E107               	bnz	l8618
  4355  00412E  0538               	decf	(_poligono_ext+22)& (0+255),w,b
  4356  004130  B0D8               	btfsc	status,0,c
  4357  004132  D004               	goto	l8618
  4358  004134                     u9580:
  4359                           
  4360                           ; BSR set to: 1
  4361  004134  BF79               	btfsc	(_poligono_ext+87)& (0+255),7,b
  4362  004136  D002               	goto	l8618
  4363  004138                     u9590:
  4364                           
  4365                           ; BSR set to: 1
  4366                           ;fence.c: 369: {;fence.c: 370: return 0;
  4367  004138  0E00               	movlw	0
  4368  00413A  0012               	return	
  4369  00413C                     l8618:
  4370                           
  4371                           ; BSR set to: 1
  4372                           ;fence.c: 372: else if(;fence.c: 373: (poligono_ext[0].diff_lat_min == 0 ||;fence.c: 374
      +                          : poligono_ext[1].diff_lat_min == 0) &&;fence.c: 375: (poligono_ext[0].diff_lat_deg == 0
      +                           ||;fence.c: 376: poligono_ext[1].diff_lat_deg == 0))
  4373  00413C  5158               	movf	(_poligono_ext+54)& (0+255),w,b
  4374  00413E  1159               	iorwf	(_poligono_ext+55)& (0+255),w,b
  4375  004140  115A               	iorwf	(_poligono_ext+56)& (0+255),w,b
  4376  004142  115B               	iorwf	(_poligono_ext+57)& (0+255),w,b
  4377  004144  B4D8               	btfsc	status,2,c
  4378  004146  D006               	goto	u9610
  4379  004148                     u9600:
  4380                           
  4381                           ; BSR set to: 1
  4382  004148  5196               	movf	(_poligono_ext+116)& (0+255),w,b
  4383  00414A  1197               	iorwf	(_poligono_ext+117)& (0+255),w,b
  4384  00414C  1198               	iorwf	(_poligono_ext+118)& (0+255),w,b
  4385  00414E  1199               	iorwf	(_poligono_ext+119)& (0+255),w,b
  4386  004150  A4D8               	btfss	status,2,c
  4387  004152  D00C               	goto	l8632
  4388  004154                     u9610:
  4389                           
  4390                           ; BSR set to: 1
  4391  004154  5138               	movf	(_poligono_ext+22)& (0+255),w,b
  4392  004156  1139               	iorwf	(_poligono_ext+23)& (0+255),w,b
  4393  004158  113A               	iorwf	(_poligono_ext+24)& (0+255),w,b
  4394  00415A  113B               	iorwf	(_poligono_ext+25)& (0+255),w,b
  4395  00415C  B4D8               	btfsc	status,2,c
  4396  00415E  D7EC               	goto	u9590
  4397                           
  4398                           ; BSR set to: 1
  4399  004160  5176               	movf	(_poligono_ext+84)& (0+255),w,b
  4400  004162  1177               	iorwf	(_poligono_ext+85)& (0+255),w,b
  4401  004164  1178               	iorwf	(_poligono_ext+86)& (0+255),w,b
  4402  004166  1179               	iorwf	(_poligono_ext+87)& (0+255),w,b
  4403  004168  B4D8               	btfsc	status,2,c
  4404  00416A  D7E6               	goto	u9590
  4405  00416C                     l8632:
  4406                           
  4407                           ; BSR set to: 1
  4408                           ;fence.c: 381: else;fence.c: 382: {;fence.c: 383: return 1;
  4409  00416C  0E01               	movlw	1
  4410  00416E  0012               	return	
  4411  004170                     l8636:
  4412                           
  4413                           ; BSR set to: 1
  4414                           ;fence.c: 388: if((poligono_ext[0].diff_lat_min >= 0 &&;fence.c: 389: poligono_ext[1].di
      +                          ff_lat_min <= 0 ) &&;fence.c: 392: (poligono_ext[0].diff_lat_deg >= 0 &&;fence.c: 393: p
      +                          oligono_ext[1].diff_lat_deg <= 0);fence.c: 394: )
  4415  004170  BF5B               	btfsc	(_poligono_ext+57)& (0+255),7,b
  4416  004172  D014               	goto	l8650
  4417                           
  4418                           ; BSR set to: 1
  4419  004174  BF99               	btfsc	(_poligono_ext+119)& (0+255),7,b
  4420  004176  D007               	goto	u9650
  4421  004178  5199               	movf	(_poligono_ext+119)& (0+255),w,b
  4422  00417A  1198               	iorwf	(_poligono_ext+118)& (0+255),w,b
  4423  00417C  1197               	iorwf	(_poligono_ext+117)& (0+255),w,b
  4424  00417E  E10E               	bnz	l8650
  4425  004180  0596               	decf	(_poligono_ext+116)& (0+255),w,b
  4426  004182  B0D8               	btfsc	status,0,c
  4427  004184  D00B               	goto	l8650
  4428  004186                     u9650:
  4429                           
  4430                           ; BSR set to: 1
  4431  004186  BF3B               	btfsc	(_poligono_ext+25)& (0+255),7,b
  4432  004188  D009               	goto	l8650
  4433                           
  4434                           ; BSR set to: 1
  4435  00418A  BF79               	btfsc	(_poligono_ext+87)& (0+255),7,b
  4436  00418C  D7D5               	goto	u9590
  4437  00418E  5179               	movf	(_poligono_ext+87)& (0+255),w,b
  4438  004190  1178               	iorwf	(_poligono_ext+86)& (0+255),w,b
  4439  004192  1177               	iorwf	(_poligono_ext+85)& (0+255),w,b
  4440  004194  E103               	bnz	l8650
  4441  004196  0576               	decf	(_poligono_ext+84)& (0+255),w,b
  4442  004198  A0D8               	btfss	status,0,c
  4443  00419A  D7CE               	goto	u9590
  4444  00419C                     l8650:
  4445                           
  4446                           ; BSR set to: 1
  4447                           ;fence.c: 398: else if((poligono_ext[0].diff_lat_min == 0 ||;fence.c: 399: poligono_ext[
      +                          1].diff_lat_min == 0) &&;fence.c: 401: (poligono_ext[0].diff_lat_deg == 0 ||;fence.c: 40
      +                          2: poligono_ext[1].diff_lat_deg == 0))
  4448  00419C  5158               	movf	(_poligono_ext+54)& (0+255),w,b
  4449  00419E  1159               	iorwf	(_poligono_ext+55)& (0+255),w,b
  4450  0041A0  115A               	iorwf	(_poligono_ext+56)& (0+255),w,b
  4451  0041A2  115B               	iorwf	(_poligono_ext+57)& (0+255),w,b
  4452  0041A4  A4D8               	btfss	status,2,c
  4453  0041A6  D7D0               	goto	u9600
  4454                           
  4455                           ; BSR set to: 1
  4456  0041A8  D7D5               	goto	u9610
  4457  0041AA                     l8670:
  4458                           
  4459                           ; BSR set to: 1
  4460  0041AA  51C6               	movf	_temp_buff_lat& (0+255),w,b
  4461                           
  4462                           ; Switch size 1, requested type "simple"
  4463                           ; Number of cases is 1, Range of values is 45 to 45
  4464                           ; switch strategies available:
  4465                           ; Name         Instructions Cycles
  4466                           ; simple_byte            4     3 (average)
  4467                           ;	Chosen strategy is simple_byte
  4468  0041AC  0A2D               	xorlw	45	; case 45
  4469  0041AE  B4D8               	btfsc	status,2,c
  4470  0041B0  D7AD               	goto	l8604
  4471  0041B2  D7DE               	goto	l8636
  4472  0041B4                     __end_of_verifica_plausibilidade_lat:
  4473                           	callstack 0
  4474                           
  4475 ;; *************** function _verifica_diferenca_minutos *****************
  4476 ;; Defined at:
  4477 ;;		line 187 in file "bibliotecas/fence.c"
  4478 ;; Parameters:    Size  Location     Type
  4479 ;;  select_data     1    wreg     unsigned char 
  4480 ;; Auto vars:     Size  Location     Type
  4481 ;;  select_data     1   28[COMRAM] unsigned char 
  4482 ;;  i               1   33[COMRAM] unsigned char 
  4483 ;;  point           1   32[COMRAM] unsigned char 
  4484 ;;  j               1   31[COMRAM] unsigned char 
  4485 ;;  point_index_    1   30[COMRAM] unsigned char 
  4486 ;;  point_index_    1   29[COMRAM] unsigned char 
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  1    wreg      void 
  4489 ;; Registers used:
  4490 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4496 ;;      Params:         0       0       0       0       0       0       0       0       0
  4497 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4498 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4499 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4500 ;;Total ram usage:       10 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    3
  4503 ;; This function calls:
  4504 ;;		Nothing
  4505 ;; This function is called by:
  4506 ;;		_verifica_fence_externo
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           	psect	text18
  4511  002658                     __ptext18:
  4512                           	callstack 0
  4513  002658                     _verifica_diferenca_minutos:
  4514                           	callstack 25
  4515                           
  4516                           ; BSR set to: 1
  4517                           ;incstack = 0
  4518                           ;verifica_diferenca_minutos@select_data stored from wreg
  4519  002658  6E1D               	movwf	verifica_diferenca_minutos@select_data^0,c
  4520                           
  4521                           ;fence.c: 189: unsigned char point, point_index_lat ,point_index_long;;fence.c: 190: uns
      +                          igned char i, j;;fence.c: 192: point_index_lat = 0;
  4522  00265A  0E00               	movlw	0
  4523  00265C  6E1E               	movwf	verifica_diferenca_minutos@point_index_lat^0,c
  4524                           
  4525                           ;fence.c: 193: point_index_long = 0;
  4526  00265E  0E00               	movlw	0
  4527  002660  6E1F               	movwf	verifica_diferenca_minutos@point_index_long^0,c
  4528                           
  4529                           ;fence.c: 194: point = 0;
  4530  002662  0E00               	movlw	0
  4531  002664  6E21               	movwf	verifica_diferenca_minutos@point^0,c
  4532                           
  4533                           ;fence.c: 195: switch(select_data)
  4534  002666  D10C               	goto	l8494
  4535  002668                     l8404:
  4536                           
  4537                           ;fence.c: 199: {;fence.c: 200: for(i=6; i<11; i++)
  4538  002668  0E06               	movlw	6
  4539  00266A  6E22               	movwf	verifica_diferenca_minutos@i^0,c
  4540  00266C                     l8410:
  4541                           
  4542                           ;fence.c: 201: {;fence.c: 202: if(point == 0 || point == 2)
  4543  00266C  5021               	movf	verifica_diferenca_minutos@point^0,w,c
  4544  00266E  B4D8               	btfsc	status,2,c
  4545  002670  D004               	goto	u9190
  4546  002672  0E02               	movlw	2
  4547  002674  1821               	xorwf	verifica_diferenca_minutos@point^0,w,c
  4548  002676  A4D8               	btfss	status,2,c
  4549  002678  D072               	goto	l8438
  4550  00267A                     u9190:
  4551                           
  4552                           ;fence.c: 203: {;fence.c: 204: if(point == 2 && !point_index_lat)
  4553  00267A  0E02               	movlw	2
  4554  00267C  1821               	xorwf	verifica_diferenca_minutos@point^0,w,c
  4555  00267E  A4D8               	btfss	status,2,c
  4556  002680  D003               	goto	l8420
  4557  002682  501E               	movf	verifica_diferenca_minutos@point_index_lat^0,w,c
  4558  002684  B4D8               	btfsc	status,2,c
  4559                           
  4560                           ;fence.c: 205: {;fence.c: 206: point_index_lat++;
  4561  002686  2A1E               	incf	verifica_diferenca_minutos@point_index_lat^0,f,c
  4562  002688                     l8420:
  4563                           
  4564                           ;fence.c: 207: };fence.c: 208: if(fence_diff_lat[point][i] != temp_buff_lat[i])
  4565  002688  0EC6               	movlw	low _temp_buff_lat
  4566  00268A  2422               	addwf	verifica_diferenca_minutos@i^0,w,c
  4567  00268C  6ED9               	movwf	fsr2l,c
  4568  00268E  6ADA               	clrf	fsr2h,c
  4569  002690  0E01               	movlw	high _temp_buff_lat
  4570  002692  22DA               	addwfc	fsr2h,f,c
  4571  002694  5021               	movf	verifica_diferenca_minutos@point^0,w,c
  4572  002696  0D0B               	mullw	11
  4573  002698  0EBB               	movlw	low _fence_diff_lat
  4574  00269A  6E1A               	movwf	(??_verifica_diferenca_minutos+1)^0,c
  4575  00269C  0E60               	movlw	high _fence_diff_lat
  4576  00269E  6E1B               	movwf	(??_verifica_diferenca_minutos+2)^0,c
  4577  0026A0  50F3               	movf	243,w,c
  4578  0026A2  261A               	addwf	(??_verifica_diferenca_minutos+1)^0,f,c
  4579  0026A4  50F4               	movf	244,w,c
  4580  0026A6  221B               	addwfc	(??_verifica_diferenca_minutos+2)^0,f,c
  4581  0026A8  5022               	movf	verifica_diferenca_minutos@i^0,w,c
  4582  0026AA  261A               	addwf	(??_verifica_diferenca_minutos+1)^0,f,c
  4583  0026AC  0E00               	movlw	0
  4584  0026AE  221B               	addwfc	(??_verifica_diferenca_minutos+2)^0,f,c
  4585  0026B0  C01A  FFF6         	movff	??_verifica_diferenca_minutos+1,tblptrl
  4586  0026B4  C01B  FFF7         	movff	??_verifica_diferenca_minutos+2,tblptrh
  4587  0026B8                     	if	0	;tblptru may be non-zero
  4588  0026B8                     	endif
  4589  0026B8                     	if	0	;tblptru may be non-zero
  4590  0026B8                     	endif
  4591  0026B8  50DE               	movf	postinc2,w,c
  4592  0026BA  0009               	tblrd		*+
  4593  0026BC  18F5               	xorwf	tablat,w,c
  4594  0026BE  B4D8               	btfsc	status,2,c
  4595  0026C0  D050               	goto	l8440
  4596                           
  4597                           ;fence.c: 209: {;fence.c: 210: for(j= 0; i < 11; j++)
  4598  0026C2  0E00               	movlw	0
  4599  0026C4  6E20               	movwf	verifica_diferenca_minutos@j^0,c
  4600  0026C6                     l8424:
  4601  0026C6  0E0A               	movlw	10
  4602  0026C8  6422               	cpfsgt	verifica_diferenca_minutos@i^0,c
  4603  0026CA  D001               	goto	l8428
  4604  0026CC  D04A               	goto	l8440
  4605  0026CE                     l8428:
  4606                           
  4607                           ;fence.c: 211: {;fence.c: 212: poligono_ext[point_index_lat].fence_lat_min[j] = fence_di
      +                          ff_lat[point][i];
  4608  0026CE  5021               	movf	verifica_diferenca_minutos@point^0,w,c
  4609  0026D0  0D0B               	mullw	11
  4610  0026D2  0EBB               	movlw	low _fence_diff_lat
  4611  0026D4  6E19               	movwf	??_verifica_diferenca_minutos^0,c
  4612  0026D6  0E60               	movlw	high _fence_diff_lat
  4613  0026D8  6E1A               	movwf	(??_verifica_diferenca_minutos+1)^0,c
  4614  0026DA  50F3               	movf	243,w,c
  4615  0026DC  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  4616  0026DE  50F4               	movf	244,w,c
  4617  0026E0  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  4618  0026E2  5022               	movf	verifica_diferenca_minutos@i^0,w,c
  4619  0026E4  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  4620  0026E6  0E00               	movlw	0
  4621  0026E8  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  4622  0026EA  C019  FFF6         	movff	??_verifica_diferenca_minutos,tblptrl
  4623  0026EE  C01A  FFF7         	movff	??_verifica_diferenca_minutos+1,tblptrh
  4624  0026F2                     	if	0	;tblptru may be non-zero
  4625  0026F2                     	endif
  4626  0026F2                     	if	0	;tblptru may be non-zero
  4627  0026F2                     	endif
  4628  0026F2  501E               	movf	verifica_diferenca_minutos@point_index_lat^0,w,c
  4629  0026F4  0D3E               	mullw	62
  4630  0026F6  0E22               	movlw	low _poligono_ext
  4631  0026F8  6E1B               	movwf	(??_verifica_diferenca_minutos+2)^0,c
  4632  0026FA  0E01               	movlw	high _poligono_ext
  4633  0026FC  6E1C               	movwf	(??_verifica_diferenca_minutos+3)^0,c
  4634  0026FE  0E1E               	movlw	30
  4635  002700  261B               	addwf	(??_verifica_diferenca_minutos+2)^0,f,c
  4636  002702  0E00               	movlw	0
  4637  002704  221C               	addwfc	(??_verifica_diferenca_minutos+3)^0,f,c
  4638  002706  50F3               	movf	243,w,c
  4639  002708  261B               	addwf	(??_verifica_diferenca_minutos+2)^0,f,c
  4640  00270A  50F4               	movf	244,w,c
  4641  00270C  221C               	addwfc	(??_verifica_diferenca_minutos+3)^0,f,c
  4642  00270E  5020               	movf	verifica_diferenca_minutos@j^0,w,c
  4643  002710  241B               	addwf	(??_verifica_diferenca_minutos+2)^0,w,c
  4644  002712  6ED9               	movwf	fsr2l,c
  4645  002714  0E00               	movlw	0
  4646  002716  201C               	addwfc	(??_verifica_diferenca_minutos+3)^0,w,c
  4647  002718  6EDA               	movwf	fsr2h,c
  4648  00271A  0008               	tblrd		*
  4649  00271C  CFF5 FFDF          	movff	tablat,indf2
  4650                           
  4651                           ;fence.c: 213: poligono_ext[point_index_lat].point_lat_min[j] = temp_buff_lat[i];
  4652  002720  0EC6               	movlw	low _temp_buff_lat
  4653  002722  2422               	addwf	verifica_diferenca_minutos@i^0,w,c
  4654  002724  6ED9               	movwf	fsr2l,c
  4655  002726  6ADA               	clrf	fsr2h,c
  4656  002728  0E01               	movlw	high _temp_buff_lat
  4657  00272A  22DA               	addwfc	fsr2h,f,c
  4658  00272C  501E               	movf	verifica_diferenca_minutos@point_index_lat^0,w,c
  4659  00272E  0D3E               	mullw	62
  4660  002730  0E22               	movlw	low _poligono_ext
  4661  002732  6E19               	movwf	??_verifica_diferenca_minutos^0,c
  4662  002734  0E01               	movlw	high _poligono_ext
  4663  002736  6E1A               	movwf	(??_verifica_diferenca_minutos+1)^0,c
  4664  002738  0E2A               	movlw	42
  4665  00273A  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  4666  00273C  0E00               	movlw	0
  4667  00273E  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  4668  002740  50F3               	movf	243,w,c
  4669  002742  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  4670  002744  50F4               	movf	244,w,c
  4671  002746  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  4672  002748  5020               	movf	verifica_diferenca_minutos@j^0,w,c
  4673  00274A  2419               	addwf	??_verifica_diferenca_minutos^0,w,c
  4674  00274C  6EE1               	movwf	fsr1l,c
  4675  00274E  0E00               	movlw	0
  4676  002750  201A               	addwfc	(??_verifica_diferenca_minutos+1)^0,w,c
  4677  002752  6EE2               	movwf	fsr1h,c
  4678  002754  CFDF FFE7          	movff	indf2,indf1
  4679                           
  4680                           ;fence.c: 214: i++;
  4681  002758  2A22               	incf	verifica_diferenca_minutos@i^0,f,c
  4682  00275A  2A20               	incf	verifica_diferenca_minutos@j^0,f,c
  4683  00275C  D7B4               	goto	l8424
  4684  00275E                     l8438:
  4685                           
  4686                           ;fence.c: 220: else;fence.c: 221: {;fence.c: 222: i = 11;
  4687  00275E  0E0B               	movlw	11
  4688  002760  6E22               	movwf	verifica_diferenca_minutos@i^0,c
  4689  002762                     l8440:
  4690  002762  2A22               	incf	verifica_diferenca_minutos@i^0,f,c
  4691  002764  0E0A               	movlw	10
  4692  002766  6422               	cpfsgt	verifica_diferenca_minutos@i^0,c
  4693  002768  D781               	goto	l8410
  4694                           
  4695                           ;fence.c: 223: };fence.c: 224: };fence.c: 225: point++;
  4696  00276A  2A21               	incf	verifica_diferenca_minutos@point^0,f,c
  4697  00276C                     l8446:
  4698  00276C  0E03               	movlw	3
  4699  00276E  6421               	cpfsgt	verifica_diferenca_minutos@point^0,c
  4700  002770  D77B               	goto	l8404
  4701  002772  0012               	return	
  4702  002774                     l8448:
  4703                           
  4704                           ;fence.c: 230: {;fence.c: 231: for(i=7; i<12; i++)
  4705  002774  0E07               	movlw	7
  4706  002776  6E22               	movwf	verifica_diferenca_minutos@i^0,c
  4707  002778                     l8454:
  4708                           
  4709                           ;fence.c: 232: {;fence.c: 233: if(point == 0 || point == 2)
  4710  002778  5021               	movf	verifica_diferenca_minutos@point^0,w,c
  4711  00277A  B4D8               	btfsc	status,2,c
  4712  00277C  D004               	goto	u9270
  4713  00277E  0E02               	movlw	2
  4714  002780  1821               	xorwf	verifica_diferenca_minutos@point^0,w,c
  4715  002782  A4D8               	btfss	status,2,c
  4716  002784  D072               	goto	l8482
  4717  002786                     u9270:
  4718                           
  4719                           ;fence.c: 234: {;fence.c: 235: if(point == 2 && !point_index_long)
  4720  002786  0E02               	movlw	2
  4721  002788  1821               	xorwf	verifica_diferenca_minutos@point^0,w,c
  4722  00278A  A4D8               	btfss	status,2,c
  4723  00278C  D003               	goto	l8464
  4724  00278E  501F               	movf	verifica_diferenca_minutos@point_index_long^0,w,c
  4725  002790  B4D8               	btfsc	status,2,c
  4726                           
  4727                           ;fence.c: 236: {;fence.c: 237: point_index_long++;
  4728  002792  2A1F               	incf	verifica_diferenca_minutos@point_index_long^0,f,c
  4729  002794                     l8464:
  4730                           
  4731                           ;fence.c: 238: };fence.c: 241: if(fence_diff_long[point][i] != temp_buff_long[i])
  4732  002794  0E78               	movlw	low _temp_buff_long
  4733  002796  2422               	addwf	verifica_diferenca_minutos@i^0,w,c
  4734  002798  6ED9               	movwf	fsr2l,c
  4735  00279A  6ADA               	clrf	fsr2h,c
  4736  00279C  0E02               	movlw	high _temp_buff_long
  4737  00279E  22DA               	addwfc	fsr2h,f,c
  4738  0027A0  5021               	movf	verifica_diferenca_minutos@point^0,w,c
  4739  0027A2  0D0C               	mullw	12
  4740  0027A4  0E8B               	movlw	low _fence_diff_long
  4741  0027A6  6E1A               	movwf	(??_verifica_diferenca_minutos+1)^0,c
  4742  0027A8  0E60               	movlw	high _fence_diff_long
  4743  0027AA  6E1B               	movwf	(??_verifica_diferenca_minutos+2)^0,c
  4744  0027AC  50F3               	movf	243,w,c
  4745  0027AE  261A               	addwf	(??_verifica_diferenca_minutos+1)^0,f,c
  4746  0027B0  50F4               	movf	244,w,c
  4747  0027B2  221B               	addwfc	(??_verifica_diferenca_minutos+2)^0,f,c
  4748  0027B4  5022               	movf	verifica_diferenca_minutos@i^0,w,c
  4749  0027B6  261A               	addwf	(??_verifica_diferenca_minutos+1)^0,f,c
  4750  0027B8  0E00               	movlw	0
  4751  0027BA  221B               	addwfc	(??_verifica_diferenca_minutos+2)^0,f,c
  4752  0027BC  C01A  FFF6         	movff	??_verifica_diferenca_minutos+1,tblptrl
  4753  0027C0  C01B  FFF7         	movff	??_verifica_diferenca_minutos+2,tblptrh
  4754  0027C4                     	if	0	;tblptru may be non-zero
  4755  0027C4                     	endif
  4756  0027C4                     	if	0	;tblptru may be non-zero
  4757  0027C4                     	endif
  4758  0027C4  50DE               	movf	postinc2,w,c
  4759  0027C6  0009               	tblrd		*+
  4760  0027C8  18F5               	xorwf	tablat,w,c
  4761  0027CA  B4D8               	btfsc	status,2,c
  4762  0027CC  D050               	goto	l8484
  4763                           
  4764                           ;fence.c: 242: {;fence.c: 243: for(j= 0; i < 12; j++)
  4765  0027CE  0E00               	movlw	0
  4766  0027D0  6E20               	movwf	verifica_diferenca_minutos@j^0,c
  4767  0027D2                     l8468:
  4768  0027D2  0E0B               	movlw	11
  4769  0027D4  6422               	cpfsgt	verifica_diferenca_minutos@i^0,c
  4770  0027D6  D001               	goto	l8472
  4771  0027D8  D04A               	goto	l8484
  4772  0027DA                     l8472:
  4773                           
  4774                           ;fence.c: 244: {;fence.c: 245: poligono_ext[point_index_long].fence_long_min[j] = fence_
      +                          diff_long[point][i];
  4775  0027DA  5021               	movf	verifica_diferenca_minutos@point^0,w,c
  4776  0027DC  0D0C               	mullw	12
  4777  0027DE  0E8B               	movlw	low _fence_diff_long
  4778  0027E0  6E19               	movwf	??_verifica_diferenca_minutos^0,c
  4779  0027E2  0E60               	movlw	high _fence_diff_long
  4780  0027E4  6E1A               	movwf	(??_verifica_diferenca_minutos+1)^0,c
  4781  0027E6  50F3               	movf	243,w,c
  4782  0027E8  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  4783  0027EA  50F4               	movf	244,w,c
  4784  0027EC  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  4785  0027EE  5022               	movf	verifica_diferenca_minutos@i^0,w,c
  4786  0027F0  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  4787  0027F2  0E00               	movlw	0
  4788  0027F4  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  4789  0027F6  C019  FFF6         	movff	??_verifica_diferenca_minutos,tblptrl
  4790  0027FA  C01A  FFF7         	movff	??_verifica_diferenca_minutos+1,tblptrh
  4791  0027FE                     	if	0	;tblptru may be non-zero
  4792  0027FE                     	endif
  4793  0027FE                     	if	0	;tblptru may be non-zero
  4794  0027FE                     	endif
  4795  0027FE  501F               	movf	verifica_diferenca_minutos@point_index_long^0,w,c
  4796  002800  0D3E               	mullw	62
  4797  002802  0E22               	movlw	low _poligono_ext
  4798  002804  6E1B               	movwf	(??_verifica_diferenca_minutos+2)^0,c
  4799  002806  0E01               	movlw	high _poligono_ext
  4800  002808  6E1C               	movwf	(??_verifica_diferenca_minutos+3)^0,c
  4801  00280A  0E24               	movlw	36
  4802  00280C  261B               	addwf	(??_verifica_diferenca_minutos+2)^0,f,c
  4803  00280E  0E00               	movlw	0
  4804  002810  221C               	addwfc	(??_verifica_diferenca_minutos+3)^0,f,c
  4805  002812  50F3               	movf	243,w,c
  4806  002814  261B               	addwf	(??_verifica_diferenca_minutos+2)^0,f,c
  4807  002816  50F4               	movf	244,w,c
  4808  002818  221C               	addwfc	(??_verifica_diferenca_minutos+3)^0,f,c
  4809  00281A  5020               	movf	verifica_diferenca_minutos@j^0,w,c
  4810  00281C  241B               	addwf	(??_verifica_diferenca_minutos+2)^0,w,c
  4811  00281E  6ED9               	movwf	fsr2l,c
  4812  002820  0E00               	movlw	0
  4813  002822  201C               	addwfc	(??_verifica_diferenca_minutos+3)^0,w,c
  4814  002824  6EDA               	movwf	fsr2h,c
  4815  002826  0008               	tblrd		*
  4816  002828  CFF5 FFDF          	movff	tablat,indf2
  4817                           
  4818                           ;fence.c: 246: poligono_ext[point_index_long].point_long_min[j] = temp_buff_long[i];
  4819  00282C  0E78               	movlw	low _temp_buff_long
  4820  00282E  2422               	addwf	verifica_diferenca_minutos@i^0,w,c
  4821  002830  6ED9               	movwf	fsr2l,c
  4822  002832  6ADA               	clrf	fsr2h,c
  4823  002834  0E02               	movlw	high _temp_buff_long
  4824  002836  22DA               	addwfc	fsr2h,f,c
  4825  002838  501F               	movf	verifica_diferenca_minutos@point_index_long^0,w,c
  4826  00283A  0D3E               	mullw	62
  4827  00283C  0E22               	movlw	low _poligono_ext
  4828  00283E  6E19               	movwf	??_verifica_diferenca_minutos^0,c
  4829  002840  0E01               	movlw	high _poligono_ext
  4830  002842  6E1A               	movwf	(??_verifica_diferenca_minutos+1)^0,c
  4831  002844  0E30               	movlw	48
  4832  002846  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  4833  002848  0E00               	movlw	0
  4834  00284A  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  4835  00284C  50F3               	movf	243,w,c
  4836  00284E  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  4837  002850  50F4               	movf	244,w,c
  4838  002852  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  4839  002854  5020               	movf	verifica_diferenca_minutos@j^0,w,c
  4840  002856  2419               	addwf	??_verifica_diferenca_minutos^0,w,c
  4841  002858  6EE1               	movwf	fsr1l,c
  4842  00285A  0E00               	movlw	0
  4843  00285C  201A               	addwfc	(??_verifica_diferenca_minutos+1)^0,w,c
  4844  00285E  6EE2               	movwf	fsr1h,c
  4845  002860  CFDF FFE7          	movff	indf2,indf1
  4846                           
  4847                           ;fence.c: 247: i++;
  4848  002864  2A22               	incf	verifica_diferenca_minutos@i^0,f,c
  4849  002866  2A20               	incf	verifica_diferenca_minutos@j^0,f,c
  4850  002868  D7B4               	goto	l8468
  4851  00286A                     l8482:
  4852                           
  4853                           ;fence.c: 251: else;fence.c: 252: {;fence.c: 253: i = 11;
  4854  00286A  0E0B               	movlw	11
  4855  00286C  6E22               	movwf	verifica_diferenca_minutos@i^0,c
  4856  00286E                     l8484:
  4857  00286E  2A22               	incf	verifica_diferenca_minutos@i^0,f,c
  4858  002870  0E0B               	movlw	11
  4859  002872  6422               	cpfsgt	verifica_diferenca_minutos@i^0,c
  4860  002874  D781               	goto	l8454
  4861                           
  4862                           ;fence.c: 254: };fence.c: 256: };fence.c: 257: point++;
  4863  002876  2A21               	incf	verifica_diferenca_minutos@point^0,f,c
  4864  002878                     l8490:
  4865  002878  0E03               	movlw	3
  4866  00287A  6421               	cpfsgt	verifica_diferenca_minutos@point^0,c
  4867  00287C  D77B               	goto	l8448
  4868  00287E  0012               	return	
  4869  002880                     l8494:
  4870  002880  501D               	movf	verifica_diferenca_minutos@select_data^0,w,c
  4871                           
  4872                           ; Switch size 1, requested type "simple"
  4873                           ; Number of cases is 1, Range of values is 1 to 1
  4874                           ; switch strategies available:
  4875                           ; Name         Instructions Cycles
  4876                           ; simple_byte            4     3 (average)
  4877                           ;	Chosen strategy is simple_byte
  4878  002882  0A01               	xorlw	1	; case 1
  4879  002884  B4D8               	btfsc	status,2,c
  4880  002886  D772               	goto	l8446
  4881  002888  D7F7               	goto	l8490
  4882  00288A                     __end_of_verifica_diferenca_minutos:
  4883                           	callstack 0
  4884                           
  4885 ;; *************** function _verifica_diferenca_graus *****************
  4886 ;; Defined at:
  4887 ;;		line 80 in file "bibliotecas/fence.c"
  4888 ;; Parameters:    Size  Location     Type
  4889 ;;  select_data     1    wreg     unsigned char 
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;  select_data     1   28[COMRAM] unsigned char 
  4892 ;;  i               1   33[COMRAM] unsigned char 
  4893 ;;  point           1   32[COMRAM] unsigned char 
  4894 ;;  j               1   31[COMRAM] unsigned char 
  4895 ;;  point_index_    1   30[COMRAM] unsigned char 
  4896 ;;  point_index_    1   29[COMRAM] unsigned char 
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  1    wreg      void 
  4899 ;; Registers used:
  4900 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4901 ;; Tracked objects:
  4902 ;;		On entry : 0/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4906 ;;      Params:         0       0       0       0       0       0       0       0       0
  4907 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4908 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4909 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4910 ;;Total ram usage:       10 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; Hardware stack levels required when called:    3
  4913 ;; This function calls:
  4914 ;;		Nothing
  4915 ;; This function is called by:
  4916 ;;		_verifica_fence_externo
  4917 ;; This function uses a non-reentrant model
  4918 ;;
  4919                           
  4920                           	psect	text19
  4921  002C62                     __ptext19:
  4922                           	callstack 0
  4923  002C62                     _verifica_diferenca_graus:
  4924                           	callstack 25
  4925                           
  4926                           ;incstack = 0
  4927                           ;verifica_diferenca_graus@select_data stored from wreg
  4928  002C62  6E1D               	movwf	verifica_diferenca_graus@select_data^0,c
  4929                           
  4930                           ;fence.c: 83: unsigned char point, point_index_lat ,point_index_long;;fence.c: 84: unsig
      +                          ned char i, j;;fence.c: 85: point = 0;
  4931  002C64  0E00               	movlw	0
  4932  002C66  6E21               	movwf	verifica_diferenca_graus@point^0,c
  4933                           
  4934                           ;fence.c: 86: point_index_long = 0;
  4935  002C68  0E00               	movlw	0
  4936  002C6A  6E1F               	movwf	verifica_diferenca_graus@point_index_long^0,c
  4937                           
  4938                           ;fence.c: 87: point_index_lat = 0;
  4939  002C6C  0E00               	movlw	0
  4940  002C6E  6E1E               	movwf	verifica_diferenca_graus@point_index_lat^0,c
  4941                           
  4942                           ;fence.c: 89: switch(select_data)
  4943  002C70  D0CA               	goto	l8400
  4944  002C72                     l8318:
  4945                           
  4946                           ;fence.c: 93: {;fence.c: 94: for(i=1; i<6; i++)
  4947  002C72  0E01               	movlw	1
  4948  002C74  6E22               	movwf	verifica_diferenca_graus@i^0,c
  4949  002C76                     l8324:
  4950                           
  4951                           ;fence.c: 95: {;fence.c: 96: if(point == 0 || point == 2)
  4952  002C76  5021               	movf	verifica_diferenca_graus@point^0,w,c
  4953  002C78  B4D8               	btfsc	status,2,c
  4954  002C7A  D004               	goto	u9050
  4955  002C7C  0E02               	movlw	2
  4956  002C7E  1821               	xorwf	verifica_diferenca_graus@point^0,w,c
  4957  002C80  A4D8               	btfss	status,2,c
  4958  002C82  D055               	goto	l8350
  4959  002C84                     u9050:
  4960                           
  4961                           ;fence.c: 97: {;fence.c: 98: if(point == 2 && !point_index_long)
  4962  002C84  0E02               	movlw	2
  4963  002C86  1821               	xorwf	verifica_diferenca_graus@point^0,w,c
  4964  002C88  A4D8               	btfss	status,2,c
  4965  002C8A  D003               	goto	l8334
  4966  002C8C  501F               	movf	verifica_diferenca_graus@point_index_long^0,w,c
  4967  002C8E  B4D8               	btfsc	status,2,c
  4968                           
  4969                           ;fence.c: 99: {;fence.c: 100: point_index_long++;
  4970  002C90  2A1F               	incf	verifica_diferenca_graus@point_index_long^0,f,c
  4971  002C92                     l8334:
  4972                           
  4973                           ;fence.c: 101: };fence.c: 102: for(j= 0; i < 6; j++)
  4974  002C92  0E00               	movlw	0
  4975  002C94  6E20               	movwf	verifica_diferenca_graus@j^0,c
  4976  002C96                     l8336:
  4977  002C96  0E05               	movlw	5
  4978  002C98  6422               	cpfsgt	verifica_diferenca_graus@i^0,c
  4979  002C9A  D001               	goto	l8340
  4980  002C9C  D048               	goto	l8350
  4981  002C9E                     l8340:
  4982                           
  4983                           ;fence.c: 103: {;fence.c: 104: poligono_ext[point_index_long].point_long_deg[j] = temp_b
      +                          uff_long[i];
  4984  002C9E  0E78               	movlw	low _temp_buff_long
  4985  002CA0  2422               	addwf	verifica_diferenca_graus@i^0,w,c
  4986  002CA2  6ED9               	movwf	fsr2l,c
  4987  002CA4  6ADA               	clrf	fsr2h,c
  4988  002CA6  0E02               	movlw	high _temp_buff_long
  4989  002CA8  22DA               	addwfc	fsr2h,f,c
  4990  002CAA  501F               	movf	verifica_diferenca_graus@point_index_long^0,w,c
  4991  002CAC  0D3E               	mullw	62
  4992  002CAE  0E22               	movlw	low _poligono_ext
  4993  002CB0  6E19               	movwf	??_verifica_diferenca_graus^0,c
  4994  002CB2  0E01               	movlw	high _poligono_ext
  4995  002CB4  6E1A               	movwf	(??_verifica_diferenca_graus+1)^0,c
  4996  002CB6  0E10               	movlw	16
  4997  002CB8  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  4998  002CBA  0E00               	movlw	0
  4999  002CBC  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  5000  002CBE  50F3               	movf	243,w,c
  5001  002CC0  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  5002  002CC2  50F4               	movf	244,w,c
  5003  002CC4  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  5004  002CC6  5020               	movf	verifica_diferenca_graus@j^0,w,c
  5005  002CC8  2419               	addwf	??_verifica_diferenca_graus^0,w,c
  5006  002CCA  6EE1               	movwf	fsr1l,c
  5007  002CCC  0E00               	movlw	0
  5008  002CCE  201A               	addwfc	(??_verifica_diferenca_graus+1)^0,w,c
  5009  002CD0  6EE2               	movwf	fsr1h,c
  5010  002CD2  CFDF FFE7          	movff	indf2,indf1
  5011                           
  5012                           ;fence.c: 105: poligono_ext[point_index_long].fence_long_deg[j] = fence_diff_long[point]
      +                          [i];
  5013  002CD6  5021               	movf	verifica_diferenca_graus@point^0,w,c
  5014  002CD8  0D0C               	mullw	12
  5015  002CDA  0E8B               	movlw	low _fence_diff_long
  5016  002CDC  6E19               	movwf	??_verifica_diferenca_graus^0,c
  5017  002CDE  0E60               	movlw	high _fence_diff_long
  5018  002CE0  6E1A               	movwf	(??_verifica_diferenca_graus+1)^0,c
  5019  002CE2  50F3               	movf	243,w,c
  5020  002CE4  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  5021  002CE6  50F4               	movf	244,w,c
  5022  002CE8  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  5023  002CEA  5022               	movf	verifica_diferenca_graus@i^0,w,c
  5024  002CEC  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  5025  002CEE  0E00               	movlw	0
  5026  002CF0  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  5027  002CF2  C019  FFF6         	movff	??_verifica_diferenca_graus,tblptrl
  5028  002CF6  C01A  FFF7         	movff	??_verifica_diferenca_graus+1,tblptrh
  5029  002CFA                     	if	0	;tblptru may be non-zero
  5030  002CFA                     	endif
  5031  002CFA                     	if	0	;tblptru may be non-zero
  5032  002CFA                     	endif
  5033  002CFA  501F               	movf	verifica_diferenca_graus@point_index_long^0,w,c
  5034  002CFC  0D3E               	mullw	62
  5035  002CFE  0E22               	movlw	low _poligono_ext
  5036  002D00  6E1B               	movwf	(??_verifica_diferenca_graus+2)^0,c
  5037  002D02  0E01               	movlw	high _poligono_ext
  5038  002D04  6E1C               	movwf	(??_verifica_diferenca_graus+3)^0,c
  5039  002D06  0E05               	movlw	5
  5040  002D08  261B               	addwf	(??_verifica_diferenca_graus+2)^0,f,c
  5041  002D0A  0E00               	movlw	0
  5042  002D0C  221C               	addwfc	(??_verifica_diferenca_graus+3)^0,f,c
  5043  002D0E  50F3               	movf	243,w,c
  5044  002D10  261B               	addwf	(??_verifica_diferenca_graus+2)^0,f,c
  5045  002D12  50F4               	movf	244,w,c
  5046  002D14  221C               	addwfc	(??_verifica_diferenca_graus+3)^0,f,c
  5047  002D16  5020               	movf	verifica_diferenca_graus@j^0,w,c
  5048  002D18  241B               	addwf	(??_verifica_diferenca_graus+2)^0,w,c
  5049  002D1A  6ED9               	movwf	fsr2l,c
  5050  002D1C  0E00               	movlw	0
  5051  002D1E  201C               	addwfc	(??_verifica_diferenca_graus+3)^0,w,c
  5052  002D20  6EDA               	movwf	fsr2h,c
  5053  002D22  0008               	tblrd		*
  5054  002D24  CFF5 FFDF          	movff	tablat,indf2
  5055                           
  5056                           ;fence.c: 107: i++;
  5057  002D28  2A22               	incf	verifica_diferenca_graus@i^0,f,c
  5058  002D2A  2A20               	incf	verifica_diferenca_graus@j^0,f,c
  5059  002D2C  D7B4               	goto	l8336
  5060  002D2E                     l8350:
  5061  002D2E  2A22               	incf	verifica_diferenca_graus@i^0,f,c
  5062  002D30  0E05               	movlw	5
  5063  002D32  6422               	cpfsgt	verifica_diferenca_graus@i^0,c
  5064  002D34  D7A0               	goto	l8324
  5065                           
  5066                           ;fence.c: 108: };fence.c: 110: };fence.c: 112: };fence.c: 114: point++;
  5067  002D36  2A21               	incf	verifica_diferenca_graus@point^0,f,c
  5068  002D38                     l8356:
  5069  002D38  0E03               	movlw	3
  5070  002D3A  6421               	cpfsgt	verifica_diferenca_graus@point^0,c
  5071  002D3C  D79A               	goto	l8318
  5072  002D3E  0012               	return	
  5073  002D40                     l8358:
  5074                           
  5075                           ;fence.c: 120: {;fence.c: 121: for(i=1; i<5; i++)
  5076  002D40  0E01               	movlw	1
  5077  002D42  6E22               	movwf	verifica_diferenca_graus@i^0,c
  5078  002D44                     l8364:
  5079                           
  5080                           ;fence.c: 122: {;fence.c: 123: if(point == 0 || point == 2)
  5081  002D44  5021               	movf	verifica_diferenca_graus@point^0,w,c
  5082  002D46  B4D8               	btfsc	status,2,c
  5083  002D48  D004               	goto	u9120
  5084  002D4A  0E02               	movlw	2
  5085  002D4C  1821               	xorwf	verifica_diferenca_graus@point^0,w,c
  5086  002D4E  A4D8               	btfss	status,2,c
  5087  002D50  D051               	goto	l8390
  5088  002D52                     u9120:
  5089                           
  5090                           ;fence.c: 124: {;fence.c: 126: if(point == 2 && !point_index_lat)
  5091  002D52  0E02               	movlw	2
  5092  002D54  1821               	xorwf	verifica_diferenca_graus@point^0,w,c
  5093  002D56  A4D8               	btfss	status,2,c
  5094  002D58  D003               	goto	l8374
  5095  002D5A  501E               	movf	verifica_diferenca_graus@point_index_lat^0,w,c
  5096  002D5C  B4D8               	btfsc	status,2,c
  5097                           
  5098                           ;fence.c: 127: {;fence.c: 128: point_index_lat++;
  5099  002D5E  2A1E               	incf	verifica_diferenca_graus@point_index_lat^0,f,c
  5100  002D60                     l8374:
  5101                           
  5102                           ;fence.c: 129: };fence.c: 132: for(j= 0; i < 5; j++)
  5103  002D60  0E00               	movlw	0
  5104  002D62  6E20               	movwf	verifica_diferenca_graus@j^0,c
  5105  002D64                     l8376:
  5106  002D64  0E04               	movlw	4
  5107  002D66  6422               	cpfsgt	verifica_diferenca_graus@i^0,c
  5108  002D68  D001               	goto	l8380
  5109  002D6A  D044               	goto	l8390
  5110  002D6C                     l8380:
  5111                           
  5112                           ;fence.c: 133: {;fence.c: 134: poligono_ext[point_index_lat].point_lat_deg[j] = temp_buf
      +                          f_lat[i];
  5113  002D6C  0EC6               	movlw	low _temp_buff_lat
  5114  002D6E  2422               	addwf	verifica_diferenca_graus@i^0,w,c
  5115  002D70  6ED9               	movwf	fsr2l,c
  5116  002D72  6ADA               	clrf	fsr2h,c
  5117  002D74  0E01               	movlw	high _temp_buff_lat
  5118  002D76  22DA               	addwfc	fsr2h,f,c
  5119  002D78  501E               	movf	verifica_diferenca_graus@point_index_lat^0,w,c
  5120  002D7A  0D3E               	mullw	62
  5121  002D7C  0E22               	movlw	low _poligono_ext
  5122  002D7E  6E19               	movwf	??_verifica_diferenca_graus^0,c
  5123  002D80  0E01               	movlw	high _poligono_ext
  5124  002D82  6E1A               	movwf	(??_verifica_diferenca_graus+1)^0,c
  5125  002D84  0E0B               	movlw	11
  5126  002D86  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  5127  002D88  0E00               	movlw	0
  5128  002D8A  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  5129  002D8C  50F3               	movf	243,w,c
  5130  002D8E  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  5131  002D90  50F4               	movf	244,w,c
  5132  002D92  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  5133  002D94  5020               	movf	verifica_diferenca_graus@j^0,w,c
  5134  002D96  2419               	addwf	??_verifica_diferenca_graus^0,w,c
  5135  002D98  6EE1               	movwf	fsr1l,c
  5136  002D9A  0E00               	movlw	0
  5137  002D9C  201A               	addwfc	(??_verifica_diferenca_graus+1)^0,w,c
  5138  002D9E  6EE2               	movwf	fsr1h,c
  5139  002DA0  CFDF FFE7          	movff	indf2,indf1
  5140                           
  5141                           ;fence.c: 135: poligono_ext[point_index_lat].fence_lat_deg[j] = fence_diff_lat[point][i]
      +                          ;
  5142  002DA4  5021               	movf	verifica_diferenca_graus@point^0,w,c
  5143  002DA6  0D0B               	mullw	11
  5144  002DA8  0EBB               	movlw	low _fence_diff_lat
  5145  002DAA  6E19               	movwf	??_verifica_diferenca_graus^0,c
  5146  002DAC  0E60               	movlw	high _fence_diff_lat
  5147  002DAE  6E1A               	movwf	(??_verifica_diferenca_graus+1)^0,c
  5148  002DB0  50F3               	movf	243,w,c
  5149  002DB2  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  5150  002DB4  50F4               	movf	244,w,c
  5151  002DB6  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  5152  002DB8  5022               	movf	verifica_diferenca_graus@i^0,w,c
  5153  002DBA  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  5154  002DBC  0E00               	movlw	0
  5155  002DBE  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  5156  002DC0  C019  FFF6         	movff	??_verifica_diferenca_graus,tblptrl
  5157  002DC4  C01A  FFF7         	movff	??_verifica_diferenca_graus+1,tblptrh
  5158  002DC8                     	if	0	;tblptru may be non-zero
  5159  002DC8                     	endif
  5160  002DC8                     	if	0	;tblptru may be non-zero
  5161  002DC8                     	endif
  5162  002DC8  501E               	movf	verifica_diferenca_graus@point_index_lat^0,w,c
  5163  002DCA  0D3E               	mullw	62
  5164  002DCC  0E22               	movlw	low _poligono_ext
  5165  002DCE  6E1B               	movwf	(??_verifica_diferenca_graus+2)^0,c
  5166  002DD0  0E01               	movlw	high _poligono_ext
  5167  002DD2  6E1C               	movwf	(??_verifica_diferenca_graus+3)^0,c
  5168  002DD4  50F3               	movf	243,w,c
  5169  002DD6  261B               	addwf	(??_verifica_diferenca_graus+2)^0,f,c
  5170  002DD8  50F4               	movf	244,w,c
  5171  002DDA  221C               	addwfc	(??_verifica_diferenca_graus+3)^0,f,c
  5172  002DDC  5020               	movf	verifica_diferenca_graus@j^0,w,c
  5173  002DDE  241B               	addwf	(??_verifica_diferenca_graus+2)^0,w,c
  5174  002DE0  6ED9               	movwf	fsr2l,c
  5175  002DE2  0E00               	movlw	0
  5176  002DE4  201C               	addwfc	(??_verifica_diferenca_graus+3)^0,w,c
  5177  002DE6  6EDA               	movwf	fsr2h,c
  5178  002DE8  0008               	tblrd		*
  5179  002DEA  CFF5 FFDF          	movff	tablat,indf2
  5180                           
  5181                           ;fence.c: 136: i++;
  5182  002DEE  2A22               	incf	verifica_diferenca_graus@i^0,f,c
  5183  002DF0  2A20               	incf	verifica_diferenca_graus@j^0,f,c
  5184  002DF2  D7B8               	goto	l8376
  5185  002DF4                     l8390:
  5186  002DF4  2A22               	incf	verifica_diferenca_graus@i^0,f,c
  5187  002DF6  0E04               	movlw	4
  5188  002DF8  6422               	cpfsgt	verifica_diferenca_graus@i^0,c
  5189  002DFA  D7A4               	goto	l8364
  5190                           
  5191                           ;fence.c: 137: };fence.c: 139: };fence.c: 140: };fence.c: 141: point++;
  5192  002DFC  2A21               	incf	verifica_diferenca_graus@point^0,f,c
  5193  002DFE                     l8396:
  5194  002DFE  0E03               	movlw	3
  5195  002E00  6421               	cpfsgt	verifica_diferenca_graus@point^0,c
  5196  002E02  D79E               	goto	l8358
  5197  002E04  0012               	return	
  5198  002E06                     l8400:
  5199  002E06  501D               	movf	verifica_diferenca_graus@select_data^0,w,c
  5200                           
  5201                           ; Switch size 1, requested type "simple"
  5202                           ; Number of cases is 1, Range of values is 1 to 1
  5203                           ; switch strategies available:
  5204                           ; Name         Instructions Cycles
  5205                           ; simple_byte            4     3 (average)
  5206                           ;	Chosen strategy is simple_byte
  5207  002E08  0A01               	xorlw	1	; case 1
  5208  002E0A  B4D8               	btfsc	status,2,c
  5209  002E0C  D795               	goto	l8356
  5210  002E0E  D7F7               	goto	l8396
  5211  002E10                     __end_of_verifica_diferenca_graus:
  5212                           	callstack 0
  5213                           
  5214 ;; *************** function _calcula_diff_minutos *****************
  5215 ;; Defined at:
  5216 ;;		line 270 in file "bibliotecas/fence.c"
  5217 ;; Parameters:    Size  Location     Type
  5218 ;;		None
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;  count           1   44[COMRAM] unsigned char 
  5221 ;;  point           1   43[COMRAM] unsigned char 
  5222 ;; Return value:  Size  Location     Type
  5223 ;;                  1    wreg      void 
  5224 ;; Registers used:
  5225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5226 ;; Tracked objects:
  5227 ;;		On entry : 0/0
  5228 ;;		On exit  : 0/0
  5229 ;;		Unchanged: 0/0
  5230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5231 ;;      Params:         0       0       0       0       0       0       0       0       0
  5232 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5233 ;;      Temps:          6       0       0       0       0       0       0       0       0
  5234 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5235 ;;Total ram usage:        8 bytes
  5236 ;; Hardware stack levels used:    1
  5237 ;; Hardware stack levels required when called:    5
  5238 ;; This function calls:
  5239 ;;		_atoi
  5240 ;; This function is called by:
  5241 ;;		_verifica_fence_externo
  5242 ;; This function uses a non-reentrant model
  5243 ;;
  5244                           
  5245                           	psect	text20
  5246  003D26                     __ptext20:
  5247                           	callstack 0
  5248  003D26                     _calcula_diff_minutos:
  5249                           	callstack 23
  5250                           
  5251                           ;fence.c: 272: unsigned char point, count;;fence.c: 275: while(point<4)
  5252                           
  5253                           ;incstack = 0
  5254  003D26  D06F               	goto	l11680
  5255  003D28                     l11670:
  5256                           
  5257                           ;fence.c: 276: {;fence.c: 277: if(point == 0 || point == 2)
  5258  003D28  502C               	movf	calcula_diff_minutos@point^0,w,c
  5259  003D2A  B4D8               	btfsc	status,2,c
  5260  003D2C  D004               	goto	u14260
  5261  003D2E  0E02               	movlw	2
  5262  003D30  182C               	xorwf	calcula_diff_minutos@point^0,w,c
  5263  003D32  A4D8               	btfss	status,2,c
  5264  003D34  D067               	goto	l11678
  5265  003D36                     u14260:
  5266                           
  5267                           ;fence.c: 278: {;fence.c: 279: poligono_ext[count].diff_lat_min = (atoi(poligono_ext[cou
      +                          nt].fence_lat_min)) - (atoi(poligono_ext[count].point_lat_min));
  5268  003D36  502D               	movf	calcula_diff_minutos@count^0,w,c
  5269  003D38  0D3E               	mullw	62
  5270  003D3A  0E40               	movlw	low (_poligono_ext+30)
  5271  003D3C  24F3               	addwf	243,w,c
  5272  003D3E  6E1F               	movwf	atoi@s^0,c
  5273  003D40  0E01               	movlw	high (_poligono_ext+30)
  5274  003D42  20F4               	addwfc	prodh,w,c
  5275  003D44  6E20               	movwf	(atoi@s+1)^0,c
  5276  003D46  EC07  F01F         	call	_atoi	;wreg free
  5277  003D4A  C01F  F026         	movff	?_atoi,??_calcula_diff_minutos
  5278  003D4E  C020  F027         	movff	?_atoi+1,??_calcula_diff_minutos+1
  5279  003D52  502D               	movf	calcula_diff_minutos@count^0,w,c
  5280  003D54  0D3E               	mullw	62
  5281  003D56  0E4C               	movlw	low (_poligono_ext+42)
  5282  003D58  24F3               	addwf	243,w,c
  5283  003D5A  6E1F               	movwf	atoi@s^0,c
  5284  003D5C  0E01               	movlw	high (_poligono_ext+42)
  5285  003D5E  20F4               	addwfc	prodh,w,c
  5286  003D60  6E20               	movwf	(atoi@s+1)^0,c
  5287  003D62  EC07  F01F         	call	_atoi	;wreg free
  5288  003D66  501F               	movf	?_atoi^0,w,c
  5289  003D68  5C26               	subwf	??_calcula_diff_minutos^0,w,c
  5290  003D6A  6E28               	movwf	(??_calcula_diff_minutos+2)^0,c
  5291  003D6C  5020               	movf	(?_atoi+1)^0,w,c
  5292  003D6E  5827               	subwfb	(??_calcula_diff_minutos+1)^0,w,c
  5293  003D70  6E29               	movwf	(??_calcula_diff_minutos+3)^0,c
  5294  003D72  6A2A               	clrf	(??_calcula_diff_minutos+4)^0,c
  5295  003D74  BE29               	btfsc	(??_calcula_diff_minutos+3)^0,7,c
  5296  003D76  062A               	decf	(??_calcula_diff_minutos+4)^0,f,c
  5297  003D78  502A               	movf	(??_calcula_diff_minutos+4)^0,w,c
  5298  003D7A  6E2B               	movwf	(??_calcula_diff_minutos+5)^0,c
  5299  003D7C  502D               	movf	calcula_diff_minutos@count^0,w,c
  5300  003D7E  0D3E               	mullw	62
  5301  003D80  0E58               	movlw	low (_poligono_ext+54)
  5302  003D82  24F3               	addwf	243,w,c
  5303  003D84  6ED9               	movwf	fsr2l,c
  5304  003D86  0E01               	movlw	high (_poligono_ext+54)
  5305  003D88  20F4               	addwfc	prodh,w,c
  5306  003D8A  6EDA               	movwf	fsr2h,c
  5307  003D8C  C028  FFDE         	movff	??_calcula_diff_minutos+2,postinc2
  5308  003D90  C029  FFDE         	movff	??_calcula_diff_minutos+3,postinc2
  5309  003D94  C02A  FFDE         	movff	??_calcula_diff_minutos+4,postinc2
  5310  003D98  C02B  FFDE         	movff	??_calcula_diff_minutos+5,postinc2
  5311                           
  5312                           ;fence.c: 280: poligono_ext[count].diff_long_min = (atoi(poligono_ext[count].fence_long_
      +                          min)) - (atoi(poligono_ext[count].point_long_min));
  5313  003D9C  502D               	movf	calcula_diff_minutos@count^0,w,c
  5314  003D9E  0D3E               	mullw	62
  5315  003DA0  0E46               	movlw	low (_poligono_ext+36)
  5316  003DA2  24F3               	addwf	243,w,c
  5317  003DA4  6E1F               	movwf	atoi@s^0,c
  5318  003DA6  0E01               	movlw	high (_poligono_ext+36)
  5319  003DA8  20F4               	addwfc	prodh,w,c
  5320  003DAA  6E20               	movwf	(atoi@s+1)^0,c
  5321  003DAC  EC07  F01F         	call	_atoi	;wreg free
  5322  003DB0  C01F  F026         	movff	?_atoi,??_calcula_diff_minutos
  5323  003DB4  C020  F027         	movff	?_atoi+1,??_calcula_diff_minutos+1
  5324  003DB8  502D               	movf	calcula_diff_minutos@count^0,w,c
  5325  003DBA  0D3E               	mullw	62
  5326  003DBC  0E52               	movlw	low (_poligono_ext+48)
  5327  003DBE  24F3               	addwf	243,w,c
  5328  003DC0  6E1F               	movwf	atoi@s^0,c
  5329  003DC2  0E01               	movlw	high (_poligono_ext+48)
  5330  003DC4  20F4               	addwfc	prodh,w,c
  5331  003DC6  6E20               	movwf	(atoi@s+1)^0,c
  5332  003DC8  EC07  F01F         	call	_atoi	;wreg free
  5333  003DCC  501F               	movf	?_atoi^0,w,c
  5334  003DCE  5C26               	subwf	??_calcula_diff_minutos^0,w,c
  5335  003DD0  6E28               	movwf	(??_calcula_diff_minutos+2)^0,c
  5336  003DD2  5020               	movf	(?_atoi+1)^0,w,c
  5337  003DD4  5827               	subwfb	(??_calcula_diff_minutos+1)^0,w,c
  5338  003DD6  6E29               	movwf	(??_calcula_diff_minutos+3)^0,c
  5339  003DD8  6A2A               	clrf	(??_calcula_diff_minutos+4)^0,c
  5340  003DDA  BE29               	btfsc	(??_calcula_diff_minutos+3)^0,7,c
  5341  003DDC  062A               	decf	(??_calcula_diff_minutos+4)^0,f,c
  5342  003DDE  502A               	movf	(??_calcula_diff_minutos+4)^0,w,c
  5343  003DE0  6E2B               	movwf	(??_calcula_diff_minutos+5)^0,c
  5344  003DE2  502D               	movf	calcula_diff_minutos@count^0,w,c
  5345  003DE4  0D3E               	mullw	62
  5346  003DE6  0E5C               	movlw	low (_poligono_ext+58)
  5347  003DE8  24F3               	addwf	243,w,c
  5348  003DEA  6ED9               	movwf	fsr2l,c
  5349  003DEC  0E01               	movlw	high (_poligono_ext+58)
  5350  003DEE  20F4               	addwfc	prodh,w,c
  5351  003DF0  6EDA               	movwf	fsr2h,c
  5352  003DF2  C028  FFDE         	movff	??_calcula_diff_minutos+2,postinc2
  5353  003DF6  C029  FFDE         	movff	??_calcula_diff_minutos+3,postinc2
  5354  003DFA  C02A  FFDE         	movff	??_calcula_diff_minutos+4,postinc2
  5355  003DFE  C02B  FFDE         	movff	??_calcula_diff_minutos+5,postinc2
  5356                           
  5357                           ;fence.c: 281: count++;
  5358  003E02  2A2D               	incf	calcula_diff_minutos@count^0,f,c
  5359  003E04                     l11678:
  5360                           
  5361                           ;fence.c: 282: };fence.c: 283: point++;
  5362  003E04  2A2C               	incf	calcula_diff_minutos@point^0,f,c
  5363  003E06                     l11680:
  5364  003E06  0E03               	movlw	3
  5365  003E08  642C               	cpfsgt	calcula_diff_minutos@point^0,c
  5366  003E0A  D78E               	goto	l11670
  5367  003E0C  0012               	return	
  5368  003E0E                     __end_of_calcula_diff_minutos:
  5369                           	callstack 0
  5370                           
  5371 ;; *************** function _calcula_diff_graus *****************
  5372 ;; Defined at:
  5373 ;;		line 156 in file "bibliotecas/fence.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;		None
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;  temp_var_deg    4   41[COMRAM] unsigned long 
  5378 ;;  count           1   46[COMRAM] unsigned char 
  5379 ;;  point           1   45[COMRAM] unsigned char 
  5380 ;; Return value:  Size  Location     Type
  5381 ;;                  1    wreg      void 
  5382 ;; Registers used:
  5383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5384 ;; Tracked objects:
  5385 ;;		On entry : 0/0
  5386 ;;		On exit  : 0/0
  5387 ;;		Unchanged: 0/0
  5388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5389 ;;      Params:         0       0       0       0       0       0       0       0       0
  5390 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5391 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5392 ;;      Totals:        10       0       0       0       0       0       0       0       0
  5393 ;;Total ram usage:       10 bytes
  5394 ;; Hardware stack levels used:    1
  5395 ;; Hardware stack levels required when called:    5
  5396 ;; This function calls:
  5397 ;;		_atoi
  5398 ;; This function is called by:
  5399 ;;		_verifica_fence_externo
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           	psect	text21
  5404  00355A                     __ptext21:
  5405                           	callstack 0
  5406  00355A                     _calcula_diff_graus:
  5407                           	callstack 23
  5408                           
  5409                           ;fence.c: 158: unsigned char point, count;;fence.c: 159: unsigned long int temp_var_deg;
      +                          ;fence.c: 161: while(point<4)
  5410                           
  5411                           ;incstack = 0
  5412  00355A  D095               	goto	l11666
  5413  00355C                     l11648:
  5414                           
  5415                           ;fence.c: 162: {;fence.c: 163: if(point == 0 || point == 2)
  5416  00355C  502E               	movf	calcula_diff_graus@point^0,w,c
  5417  00355E  B4D8               	btfsc	status,2,c
  5418  003560  D004               	goto	u14230
  5419  003562  0E02               	movlw	2
  5420  003564  182E               	xorwf	calcula_diff_graus@point^0,w,c
  5421  003566  A4D8               	btfss	status,2,c
  5422  003568  D08D               	goto	l11664
  5423  00356A                     u14230:
  5424                           
  5425                           ;fence.c: 164: {;fence.c: 165: temp_var_deg = atoi(poligono_ext[count].point_lat_deg);
  5426  00356A  502F               	movf	calcula_diff_graus@count^0,w,c
  5427  00356C  0D3E               	mullw	62
  5428  00356E  0E2D               	movlw	low (_poligono_ext+11)
  5429  003570  24F3               	addwf	243,w,c
  5430  003572  6E1F               	movwf	atoi@s^0,c
  5431  003574  0E01               	movlw	high (_poligono_ext+11)
  5432  003576  20F4               	addwfc	prodh,w,c
  5433  003578  6E20               	movwf	(atoi@s+1)^0,c
  5434  00357A  EC07  F01F         	call	_atoi	;wreg free
  5435  00357E  C01F  F02A         	movff	?_atoi,calcula_diff_graus@temp_var_deg
  5436  003582  C020  F02B         	movff	?_atoi+1,calcula_diff_graus@temp_var_deg+1
  5437  003586  0E00               	movlw	0
  5438  003588  BE2B               	btfsc	(calcula_diff_graus@temp_var_deg+1)^0,7,c
  5439  00358A  0EFF               	movlw	-1
  5440  00358C  6E2C               	movwf	(calcula_diff_graus@temp_var_deg+2)^0,c
  5441  00358E  6E2D               	movwf	(calcula_diff_graus@temp_var_deg+3)^0,c
  5442                           
  5443                           ;fence.c: 166: poligono_ext[count].diff_lat_deg = atoi(poligono_ext[count].fence_lat_deg
      +                          );
  5444  003590  502F               	movf	calcula_diff_graus@count^0,w,c
  5445  003592  0D3E               	mullw	62
  5446  003594  0E22               	movlw	low _poligono_ext
  5447  003596  24F3               	addwf	243,w,c
  5448  003598  6E1F               	movwf	atoi@s^0,c
  5449  00359A  0E01               	movlw	high _poligono_ext
  5450  00359C  20F4               	addwfc	prodh,w,c
  5451  00359E  6E20               	movwf	(atoi@s+1)^0,c
  5452  0035A0  EC07  F01F         	call	_atoi	;wreg free
  5453  0035A4  C01F  F026         	movff	?_atoi,??_calcula_diff_graus
  5454  0035A8  C020  F027         	movff	?_atoi+1,??_calcula_diff_graus+1
  5455  0035AC  0E00               	movlw	0
  5456  0035AE  BE27               	btfsc	(??_calcula_diff_graus+1)^0,7,c
  5457  0035B0  0EFF               	movlw	255
  5458  0035B2  6E28               	movwf	(??_calcula_diff_graus+2)^0,c
  5459  0035B4  6E29               	movwf	(??_calcula_diff_graus+3)^0,c
  5460  0035B6  502F               	movf	calcula_diff_graus@count^0,w,c
  5461  0035B8  0D3E               	mullw	62
  5462  0035BA  0E38               	movlw	low (_poligono_ext+22)
  5463  0035BC  24F3               	addwf	243,w,c
  5464  0035BE  6ED9               	movwf	fsr2l,c
  5465  0035C0  0E01               	movlw	high (_poligono_ext+22)
  5466  0035C2  20F4               	addwfc	prodh,w,c
  5467  0035C4  6EDA               	movwf	fsr2h,c
  5468  0035C6  C026  FFDE         	movff	??_calcula_diff_graus,postinc2
  5469  0035CA  C027  FFDE         	movff	??_calcula_diff_graus+1,postinc2
  5470  0035CE  C028  FFDE         	movff	??_calcula_diff_graus+2,postinc2
  5471  0035D2  C029  FFDE         	movff	??_calcula_diff_graus+3,postinc2
  5472                           
  5473                           ;fence.c: 167: poligono_ext[count].diff_lat_deg -= temp_var_deg;
  5474  0035D6  502F               	movf	calcula_diff_graus@count^0,w,c
  5475  0035D8  0D3E               	mullw	62
  5476  0035DA  0E38               	movlw	low (_poligono_ext+22)
  5477  0035DC  24F3               	addwf	243,w,c
  5478  0035DE  6ED9               	movwf	fsr2l,c
  5479  0035E0  0E01               	movlw	high (_poligono_ext+22)
  5480  0035E2  20F4               	addwfc	prodh,w,c
  5481  0035E4  6EDA               	movwf	fsr2h,c
  5482  0035E6  502A               	movf	calcula_diff_graus@temp_var_deg^0,w,c
  5483  0035E8  5EDE               	subwf	postinc2,f,c
  5484  0035EA  502B               	movf	(calcula_diff_graus@temp_var_deg+1)^0,w,c
  5485  0035EC  5ADE               	subwfb	postinc2,f,c
  5486  0035EE  502C               	movf	(calcula_diff_graus@temp_var_deg+2)^0,w,c
  5487  0035F0  5ADE               	subwfb	postinc2,f,c
  5488  0035F2  502D               	movf	(calcula_diff_graus@temp_var_deg+3)^0,w,c
  5489  0035F4  5ADE               	subwfb	postinc2,f,c
  5490                           
  5491                           ;fence.c: 168: temp_var_deg = atoi(poligono_ext[count].point_long_deg);
  5492  0035F6  502F               	movf	calcula_diff_graus@count^0,w,c
  5493  0035F8  0D3E               	mullw	62
  5494  0035FA  0E32               	movlw	low (_poligono_ext+16)
  5495  0035FC  24F3               	addwf	243,w,c
  5496  0035FE  6E1F               	movwf	atoi@s^0,c
  5497  003600  0E01               	movlw	high (_poligono_ext+16)
  5498  003602  20F4               	addwfc	prodh,w,c
  5499  003604  6E20               	movwf	(atoi@s+1)^0,c
  5500  003606  EC07  F01F         	call	_atoi	;wreg free
  5501  00360A  C01F  F02A         	movff	?_atoi,calcula_diff_graus@temp_var_deg
  5502  00360E  C020  F02B         	movff	?_atoi+1,calcula_diff_graus@temp_var_deg+1
  5503  003612  0E00               	movlw	0
  5504  003614  BE2B               	btfsc	(calcula_diff_graus@temp_var_deg+1)^0,7,c
  5505  003616  0EFF               	movlw	-1
  5506  003618  6E2C               	movwf	(calcula_diff_graus@temp_var_deg+2)^0,c
  5507  00361A  6E2D               	movwf	(calcula_diff_graus@temp_var_deg+3)^0,c
  5508                           
  5509                           ;fence.c: 169: poligono_ext[count].diff_long_deg = atoi(poligono_ext[count].fence_long_d
      +                          eg);
  5510  00361C  502F               	movf	calcula_diff_graus@count^0,w,c
  5511  00361E  0D3E               	mullw	62
  5512  003620  0E27               	movlw	low (_poligono_ext+5)
  5513  003622  24F3               	addwf	243,w,c
  5514  003624  6E1F               	movwf	atoi@s^0,c
  5515  003626  0E01               	movlw	high (_poligono_ext+5)
  5516  003628  20F4               	addwfc	prodh,w,c
  5517  00362A  6E20               	movwf	(atoi@s+1)^0,c
  5518  00362C  EC07  F01F         	call	_atoi	;wreg free
  5519  003630  C01F  F026         	movff	?_atoi,??_calcula_diff_graus
  5520  003634  C020  F027         	movff	?_atoi+1,??_calcula_diff_graus+1
  5521  003638  0E00               	movlw	0
  5522  00363A  BE27               	btfsc	(??_calcula_diff_graus+1)^0,7,c
  5523  00363C  0EFF               	movlw	255
  5524  00363E  6E28               	movwf	(??_calcula_diff_graus+2)^0,c
  5525  003640  6E29               	movwf	(??_calcula_diff_graus+3)^0,c
  5526  003642  502F               	movf	calcula_diff_graus@count^0,w,c
  5527  003644  0D3E               	mullw	62
  5528  003646  0E3C               	movlw	low (_poligono_ext+26)
  5529  003648  24F3               	addwf	243,w,c
  5530  00364A  6ED9               	movwf	fsr2l,c
  5531  00364C  0E01               	movlw	high (_poligono_ext+26)
  5532  00364E  20F4               	addwfc	prodh,w,c
  5533  003650  6EDA               	movwf	fsr2h,c
  5534  003652  C026  FFDE         	movff	??_calcula_diff_graus,postinc2
  5535  003656  C027  FFDE         	movff	??_calcula_diff_graus+1,postinc2
  5536  00365A  C028  FFDE         	movff	??_calcula_diff_graus+2,postinc2
  5537  00365E  C029  FFDE         	movff	??_calcula_diff_graus+3,postinc2
  5538                           
  5539                           ;fence.c: 170: poligono_ext[count].diff_long_deg -= temp_var_deg;
  5540  003662  502F               	movf	calcula_diff_graus@count^0,w,c
  5541  003664  0D3E               	mullw	62
  5542  003666  0E3C               	movlw	low (_poligono_ext+26)
  5543  003668  24F3               	addwf	243,w,c
  5544  00366A  6ED9               	movwf	fsr2l,c
  5545  00366C  0E01               	movlw	high (_poligono_ext+26)
  5546  00366E  20F4               	addwfc	prodh,w,c
  5547  003670  6EDA               	movwf	fsr2h,c
  5548  003672  502A               	movf	calcula_diff_graus@temp_var_deg^0,w,c
  5549  003674  5EDE               	subwf	postinc2,f,c
  5550  003676  502B               	movf	(calcula_diff_graus@temp_var_deg+1)^0,w,c
  5551  003678  5ADE               	subwfb	postinc2,f,c
  5552  00367A  502C               	movf	(calcula_diff_graus@temp_var_deg+2)^0,w,c
  5553  00367C  5ADE               	subwfb	postinc2,f,c
  5554  00367E  502D               	movf	(calcula_diff_graus@temp_var_deg+3)^0,w,c
  5555  003680  5ADE               	subwfb	postinc2,f,c
  5556                           
  5557                           ;fence.c: 172: count++;
  5558  003682  2A2F               	incf	calcula_diff_graus@count^0,f,c
  5559  003684                     l11664:
  5560                           
  5561                           ;fence.c: 173: };fence.c: 174: point++;
  5562  003684  2A2E               	incf	calcula_diff_graus@point^0,f,c
  5563  003686                     l11666:
  5564  003686  0E03               	movlw	3
  5565  003688  642E               	cpfsgt	calcula_diff_graus@point^0,c
  5566  00368A  D768               	goto	l11648
  5567  00368C  0012               	return	
  5568  00368E                     __end_of_calcula_diff_graus:
  5569                           	callstack 0
  5570                           
  5571 ;; *************** function _atoi *****************
  5572 ;; Defined at:
  5573 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\atoi.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;  s               2   30[COMRAM] PTR const unsigned char 
  5576 ;;		 -> poligono_ext.point_long_min(6), poligono_ext.fence_long_min(6), poligono_ext.point_lat_min(6), poligono_ext.fenc
      +e_lat_min(6), 
  5577 ;;		 -> poligono_ext.fence_lat_deg(5), poligono_ext.point_lat_deg(5), poligono_ext.fence_long_deg(6), poligono_ext.point
      +_long_deg(6), 
  5578 ;;		 -> poligono_ext(124), 
  5579 ;; Auto vars:     Size  Location     Type
  5580 ;;  a               2   35[COMRAM] int 
  5581 ;;  sign            1   34[COMRAM] unsigned char 
  5582 ;; Return value:  Size  Location     Type
  5583 ;;                  2   30[COMRAM] int 
  5584 ;; Registers used:
  5585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5586 ;; Tracked objects:
  5587 ;;		On entry : 0/0
  5588 ;;		On exit  : 0/0
  5589 ;;		Unchanged: 0/0
  5590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5591 ;;      Params:         2       0       0       0       0       0       0       0       0
  5592 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5593 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5594 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5595 ;;Total ram usage:        7 bytes
  5596 ;; Hardware stack levels used:    1
  5597 ;; Hardware stack levels required when called:    4
  5598 ;; This function calls:
  5599 ;;		___wmul
  5600 ;;		_isdigit
  5601 ;; This function is called by:
  5602 ;;		_calcula_diff_graus
  5603 ;;		_calcula_diff_minutos
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607                           	psect	text22
  5608  003E0E                     __ptext22:
  5609                           	callstack 0
  5610  003E0E                     _atoi:
  5611                           	callstack 23
  5612                           
  5613                           ;incstack = 0
  5614  003E0E  D002               	goto	l11522
  5615  003E10                     l11520:
  5616  003E10  4A1F               	infsnz	atoi@s^0,f,c
  5617  003E12  2A20               	incf	(atoi@s+1)^0,f,c
  5618  003E14                     l11522:
  5619  003E14  C01F  FFD9         	movff	atoi@s,fsr2l
  5620  003E18  C020  FFDA         	movff	atoi@s+1,fsr2h
  5621  003E1C  0E20               	movlw	32
  5622  003E1E  18DE               	xorwf	postinc2,w,c
  5623  003E20  B4D8               	btfsc	status,2,c
  5624  003E22  D7F6               	goto	l11520
  5625  003E24  C01F  FFD9         	movff	atoi@s,fsr2l
  5626  003E28  C020  FFDA         	movff	atoi@s+1,fsr2h
  5627  003E2C  0E09               	movlw	9
  5628  003E2E  18DE               	xorwf	postinc2,w,c
  5629  003E30  B4D8               	btfsc	status,2,c
  5630  003E32  D7EE               	goto	l11520
  5631  003E34  0E00               	movlw	0
  5632  003E36  6E25               	movwf	(atoi@a+1)^0,c
  5633  003E38  0E00               	movlw	0
  5634  003E3A  6E24               	movwf	atoi@a^0,c
  5635  003E3C  0E00               	movlw	0
  5636  003E3E  6E23               	movwf	atoi@sign^0,c
  5637  003E40  C01F  FFD9         	movff	atoi@s,fsr2l
  5638  003E44  C020  FFDA         	movff	atoi@s+1,fsr2h
  5639  003E48  0E2D               	movlw	45
  5640  003E4A  18DE               	xorwf	postinc2,w,c
  5641  003E4C  A4D8               	btfss	status,2,c
  5642  003E4E  D002               	goto	l11532
  5643  003E50  2A23               	incf	atoi@sign^0,f,c
  5644  003E52  D008               	goto	u14040
  5645  003E54                     l11532:
  5646  003E54  C01F  FFD9         	movff	atoi@s,fsr2l
  5647  003E58  C020  FFDA         	movff	atoi@s+1,fsr2h
  5648  003E5C  0E2B               	movlw	43
  5649  003E5E  18DE               	xorwf	postinc2,w,c
  5650  003E60  A4D8               	btfss	status,2,c
  5651  003E62  D01E               	goto	l11540
  5652  003E64                     u14040:
  5653  003E64  4A1F               	infsnz	atoi@s^0,f,c
  5654  003E66  2A20               	incf	(atoi@s+1)^0,f,c
  5655  003E68  D01B               	goto	l11540
  5656  003E6A                     l11536:
  5657  003E6A  C024  F019         	movff	atoi@a,___wmul@multiplier
  5658  003E6E  C025  F01A         	movff	atoi@a+1,___wmul@multiplier+1
  5659  003E72  0E00               	movlw	0
  5660  003E74  6E1C               	movwf	(___wmul@multiplicand+1)^0,c
  5661  003E76  0E0A               	movlw	10
  5662  003E78  6E1B               	movwf	___wmul@multiplicand^0,c
  5663  003E7A  ECEA  F028         	call	___wmul	;wreg free
  5664  003E7E  C01F  FFD9         	movff	atoi@s,fsr2l
  5665  003E82  C020  FFDA         	movff	atoi@s+1,fsr2h
  5666  003E86  50DF               	movf	indf2,w,c
  5667  003E88  6E21               	movwf	??_atoi^0,c
  5668  003E8A  5021               	movf	??_atoi^0,w,c
  5669  003E8C  2619               	addwf	?___wmul^0,f,c
  5670  003E8E  0E00               	movlw	0
  5671  003E90  221A               	addwfc	(?___wmul+1)^0,f,c
  5672  003E92  0ED0               	movlw	208
  5673  003E94  2419               	addwf	?___wmul^0,w,c
  5674  003E96  6E24               	movwf	atoi@a^0,c
  5675  003E98  0EFF               	movlw	255
  5676  003E9A  201A               	addwfc	(?___wmul+1)^0,w,c
  5677  003E9C  6E25               	movwf	(atoi@a+1)^0,c
  5678  003E9E  D7E2               	goto	u14040
  5679  003EA0                     l11540:
  5680  003EA0  C01F  FFD9         	movff	atoi@s,fsr2l
  5681  003EA4  C020  FFDA         	movff	atoi@s+1,fsr2h
  5682  003EA8  50DF               	movf	indf2,w,c
  5683  003EAA  EC95  F029         	call	_isdigit
  5684  003EAE  B0D8               	btfsc	status,0,c
  5685  003EB0  D7DC               	goto	l11536
  5686  003EB2  5023               	movf	atoi@sign^0,w,c
  5687  003EB4  B4D8               	btfsc	status,2,c
  5688  003EB6  D00D               	goto	l2272
  5689  003EB8  C024  F021         	movff	atoi@a,??_atoi
  5690  003EBC  C025  F022         	movff	atoi@a+1,??_atoi+1
  5691  003EC0  1E21               	comf	??_atoi^0,f,c
  5692  003EC2  1E22               	comf	(??_atoi+1)^0,f,c
  5693  003EC4  4A21               	infsnz	??_atoi^0,f,c
  5694  003EC6  2A22               	incf	(??_atoi+1)^0,f,c
  5695  003EC8  C021  F01F         	movff	??_atoi,?_atoi
  5696  003ECC  C022  F020         	movff	??_atoi+1,?_atoi+1
  5697  003ED0  0012               	return	
  5698  003ED2                     l2272:
  5699  003ED2  C024  F01F         	movff	atoi@a,?_atoi
  5700  003ED6  C025  F020         	movff	atoi@a+1,?_atoi+1
  5701  003EDA  0012               	return		;funcret
  5702  003EDC                     __end_of_atoi:
  5703                           	callstack 0
  5704                           
  5705 ;; *************** function _isdigit *****************
  5706 ;; Defined at:
  5707 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\isdigit.c"
  5708 ;; Parameters:    Size  Location     Type
  5709 ;;  c               1    wreg     unsigned char 
  5710 ;; Auto vars:     Size  Location     Type
  5711 ;;  c               1   26[COMRAM] unsigned char 
  5712 ;; Return value:  Size  Location     Type
  5713 ;;		None               void
  5714 ;; Registers used:
  5715 ;;		wreg, status,2, status,0
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5721 ;;      Params:         0       0       0       0       0       0       0       0       0
  5722 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5723 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5724 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5725 ;;Total ram usage:        3 bytes
  5726 ;; Hardware stack levels used:    1
  5727 ;; Hardware stack levels required when called:    3
  5728 ;; This function calls:
  5729 ;;		Nothing
  5730 ;; This function is called by:
  5731 ;;		_atoi
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           	psect	text23
  5736  00532A                     __ptext23:
  5737                           	callstack 0
  5738  00532A                     _isdigit:
  5739                           	callstack 23
  5740                           
  5741                           ;incstack = 0
  5742                           ;isdigit@c stored from wreg
  5743  00532A  6E1B               	movwf	isdigit@c^0,c
  5744  00532C  0E00               	movlw	0
  5745  00532E  6E1A               	movwf	_isdigit$3129^0,c
  5746  005330  0E3A               	movlw	58
  5747  005332  601B               	cpfslt	isdigit@c^0,c
  5748  005334  D005               	goto	l7704
  5749  005336  0E2F               	movlw	47
  5750  005338  641B               	cpfsgt	isdigit@c^0,c
  5751  00533A  D002               	goto	l7704
  5752  00533C  0E01               	movlw	1
  5753  00533E  6E1A               	movwf	_isdigit$3129^0,c
  5754  005340                     l7704:
  5755  005340  C01A  F019         	movff	_isdigit$3129,??_isdigit
  5756  005344  3019               	rrcf	??_isdigit^0,w,c
  5757  005346  0012               	return		;funcret
  5758  005348                     __end_of_isdigit:
  5759                           	callstack 0
  5760                           
  5761 ;; *************** function _armazena_longitude *****************
  5762 ;; Defined at:
  5763 ;;		line 56 in file "bibliotecas/fence.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;		None
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;		None
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  1    wreg      void 
  5770 ;; Registers used:
  5771 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5777 ;;      Params:         0       0       0       0       0       0       0       0       0
  5778 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5779 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5780 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5781 ;;Total ram usage:        0 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    4
  5784 ;; This function calls:
  5785 ;;		_Longitude
  5786 ;;		_strcpy
  5787 ;; This function is called by:
  5788 ;;		_verifica_fence_externo
  5789 ;; This function uses a non-reentrant model
  5790 ;;
  5791                           
  5792                           	psect	text24
  5793  00539C                     __ptext24:
  5794                           	callstack 0
  5795  00539C                     _armazena_longitude:
  5796                           	callstack 24
  5797                           
  5798                           ;fence.c: 58: strcpy(temp_buff_long, Longitude());
  5799                           
  5800                           ;incstack = 0
  5801  00539C  0E78               	movlw	low _temp_buff_long
  5802  00539E  6E1B               	movwf	strcpy@to^0,c
  5803  0053A0  0E02               	movlw	high _temp_buff_long
  5804  0053A2  6E1C               	movwf	(strcpy@to+1)^0,c
  5805  0053A4  EC47  F02A         	call	_Longitude	;wreg free
  5806  0053A8  C019  F01D         	movff	?_Longitude,strcpy@from
  5807  0053AC  C01A  F01E         	movff	?_Longitude+1,strcpy@from+1
  5808  0053B0  EC6A  F028         	call	_strcpy	;wreg free
  5809  0053B4  0012               	return		;funcret
  5810  0053B6                     __end_of_armazena_longitude:
  5811                           	callstack 0
  5812                           
  5813 ;; *************** function _armazena_latitude *****************
  5814 ;; Defined at:
  5815 ;;		line 68 in file "bibliotecas/fence.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;		None
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;		None
  5820 ;; Return value:  Size  Location     Type
  5821 ;;                  1    wreg      void 
  5822 ;; Registers used:
  5823 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5824 ;; Tracked objects:
  5825 ;;		On entry : 3F/0
  5826 ;;		On exit  : 0/0
  5827 ;;		Unchanged: 0/0
  5828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5829 ;;      Params:         0       0       0       0       0       0       0       0       0
  5830 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5831 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5832 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5833 ;;Total ram usage:        0 bytes
  5834 ;; Hardware stack levels used:    1
  5835 ;; Hardware stack levels required when called:    4
  5836 ;; This function calls:
  5837 ;;		_Latitude
  5838 ;;		_strcpy
  5839 ;; This function is called by:
  5840 ;;		_verifica_fence_externo
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           	psect	text25
  5845  0053B6                     __ptext25:
  5846                           	callstack 0
  5847  0053B6                     _armazena_latitude:
  5848                           	callstack 24
  5849                           
  5850                           ; BSR set to: 0
  5851                           ;fence.c: 70: strcpy(temp_buff_lat, Latitude());
  5852                           
  5853                           ;incstack = 0
  5854  0053B6  0EC6               	movlw	low _temp_buff_lat
  5855  0053B8  6E1B               	movwf	strcpy@to^0,c
  5856  0053BA  0E01               	movlw	high _temp_buff_lat
  5857  0053BC  6E1C               	movwf	(strcpy@to+1)^0,c
  5858  0053BE  EC4C  F02A         	call	_Latitude	;wreg free
  5859  0053C2  C019  F01D         	movff	?_Latitude,strcpy@from
  5860  0053C6  C01A  F01E         	movff	?_Latitude+1,strcpy@from+1
  5861  0053CA  EC6A  F028         	call	_strcpy	;wreg free
  5862  0053CE  0012               	return		;funcret
  5863  0053D0                     __end_of_armazena_latitude:
  5864                           	callstack 0
  5865                           
  5866 ;; *************** function _escreve_inteiro_lcd *****************
  5867 ;; Defined at:
  5868 ;;		line 376 in file "bibliotecas/display_lcd.c"
  5869 ;; Parameters:    Size  Location     Type
  5870 ;;  valor           2   45[COMRAM] int 
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;  texto           7    0[BANK0 ] unsigned char [7]
  5873 ;; Return value:  Size  Location     Type
  5874 ;;                  1    wreg      void 
  5875 ;; Registers used:
  5876 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5877 ;; Tracked objects:
  5878 ;;		On entry : 0/0
  5879 ;;		On exit  : 0/0
  5880 ;;		Unchanged: 0/0
  5881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5882 ;;      Params:         2       0       0       0       0       0       0       0       0
  5883 ;;      Locals:         0       7       0       0       0       0       0       0       0
  5884 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5885 ;;      Totals:         2       7       0       0       0       0       0       0       0
  5886 ;;Total ram usage:        9 bytes
  5887 ;; Hardware stack levels used:    1
  5888 ;; Hardware stack levels required when called:    6
  5889 ;; This function calls:
  5890 ;;		_escreve_frase_ram_lcd
  5891 ;;		_itoa
  5892 ;; This function is called by:
  5893 ;;		_troca_de_tela
  5894 ;; This function uses a non-reentrant model
  5895 ;;
  5896                           
  5897                           	psect	text26
  5898  005006                     __ptext26:
  5899                           	callstack 0
  5900  005006                     _escreve_inteiro_lcd:
  5901                           	callstack 22
  5902                           
  5903                           ;display_lcd.c: 378: char texto[7] = "000000";
  5904                           
  5905                           ;incstack = 0
  5906  005006  EE22  F0B4         	lfsr	2,escreve_inteiro_lcd@F3223
  5907  00500A  EE10  F060         	lfsr	1,escreve_inteiro_lcd@texto
  5908  00500E  0E06               	movlw	6
  5909  005010                     u14181:
  5910  005010  CFDB FFE3          	movff	plusw2,plusw1
  5911  005014  06E8               	decf	wreg,f,c
  5912  005016  E2FC               	bc	u14181
  5913                           
  5914                           ;display_lcd.c: 379: itoa(texto,valor, 10);
  5915  005018  0E60               	movlw	low escreve_inteiro_lcd@texto
  5916  00501A  6E28               	movwf	itoa@buf^0,c
  5917  00501C  C02E  F029         	movff	escreve_inteiro_lcd@valor,itoa@val
  5918  005020  C02F  F02A         	movff	escreve_inteiro_lcd@valor+1,itoa@val+1
  5919  005024  0E00               	movlw	0
  5920  005026  6E2C               	movwf	(itoa@base+1)^0,c
  5921  005028  0E0A               	movlw	10
  5922  00502A  6E2B               	movwf	itoa@base^0,c
  5923  00502C  EC39  F028         	call	_itoa	;wreg free
  5924                           
  5925                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
  5926  005030  0E60               	movlw	low escreve_inteiro_lcd@texto
  5927  005032  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  5928  005034  6A1D               	clrf	(escreve_frase_ram_lcd@buffer+1)^0,c
  5929  005036  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
  5930  00503A  0012               	return		;funcret
  5931  00503C                     __end_of_escreve_inteiro_lcd:
  5932                           	callstack 0
  5933                           
  5934 ;; *************** function _itoa *****************
  5935 ;; Defined at:
  5936 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\itoa.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;  buf             1   39[COMRAM] PTR unsigned char 
  5939 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  5940 ;;  val             2   40[COMRAM] int 
  5941 ;;  base            2   42[COMRAM] int 
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;  cp              1    0        PTR unsigned char 
  5944 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      PTR unsigned char 
  5947 ;; Registers used:
  5948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5954 ;;      Params:         5       0       0       0       0       0       0       0       0
  5955 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5956 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5957 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5958 ;;Total ram usage:        6 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; Hardware stack levels required when called:    5
  5961 ;; This function calls:
  5962 ;;		_utoa
  5963 ;; This function is called by:
  5964 ;;		_escreve_inteiro_lcd
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           	psect	text27
  5969  005072                     __ptext27:
  5970                           	callstack 0
  5971  005072                     _itoa:
  5972                           	callstack 22
  5973                           
  5974                           ;incstack = 0
  5975  005072  AE2A               	btfss	(itoa@val+1)^0,7,c
  5976  005074  D00A               	goto	l11134
  5977  005076  5028               	movf	itoa@buf^0,w,c
  5978  005078  6ED9               	movwf	fsr2l,c
  5979  00507A  6ADA               	clrf	fsr2h,c
  5980  00507C  0E2D               	movlw	45
  5981  00507E  6EDF               	movwf	indf2,c
  5982  005080  2A28               	incf	itoa@buf^0,f,c
  5983  005082  6C29               	negf	itoa@val^0,c
  5984  005084  1E2A               	comf	(itoa@val+1)^0,f,c
  5985  005086  B0D8               	btfsc	status,0,c
  5986  005088  2A2A               	incf	(itoa@val+1)^0,f,c
  5987  00508A                     l11134:
  5988  00508A  C028  F020         	movff	itoa@buf,utoa@buf
  5989  00508E  C029  F021         	movff	itoa@val,utoa@val
  5990  005092  C02A  F022         	movff	itoa@val+1,utoa@val+1
  5991  005096  C02B  F023         	movff	itoa@base,utoa@base
  5992  00509A  C02C  F024         	movff	itoa@base+1,utoa@base+1
  5993  00509E  ECCA  F021         	call	_utoa	;wreg free
  5994  0050A2  0012               	return		;funcret
  5995  0050A4                     __end_of_itoa:
  5996                           	callstack 0
  5997                           
  5998 ;; *************** function _utoa *****************
  5999 ;; Defined at:
  6000 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\itoa.c"
  6001 ;; Parameters:    Size  Location     Type
  6002 ;;  buf             1   31[COMRAM] PTR unsigned char 
  6003 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  6004 ;;  val             2   32[COMRAM] unsigned int 
  6005 ;;  base            2   34[COMRAM] int 
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;  v               2   36[COMRAM] unsigned int 
  6008 ;;  c               1   38[COMRAM] unsigned char 
  6009 ;; Return value:  Size  Location     Type
  6010 ;;                  1    wreg      PTR unsigned char 
  6011 ;; Registers used:
  6012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6013 ;; Tracked objects:
  6014 ;;		On entry : 0/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6018 ;;      Params:         5       0       0       0       0       0       0       0       0
  6019 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6020 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6021 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6022 ;;Total ram usage:        8 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; Hardware stack levels required when called:    4
  6025 ;; This function calls:
  6026 ;;		___lwdiv
  6027 ;;		___lwmod
  6028 ;; This function is called by:
  6029 ;;		_itoa
  6030 ;; This function uses a non-reentrant model
  6031 ;;
  6032                           
  6033                           	psect	text28
  6034  004394                     __ptext28:
  6035                           	callstack 0
  6036  004394                     _utoa:
  6037                           	callstack 22
  6038                           
  6039                           ;incstack = 0
  6040  004394  C021  F025         	movff	utoa@val,utoa@v
  6041  004398  C022  F026         	movff	utoa@val+1,utoa@v+1
  6042  00439C                     l11098:
  6043  00439C  C025  F019         	movff	utoa@v,___lwdiv@dividend
  6044  0043A0  C026  F01A         	movff	utoa@v+1,___lwdiv@dividend+1
  6045  0043A4  C023  F01B         	movff	utoa@base,___lwdiv@divisor
  6046  0043A8  C024  F01C         	movff	utoa@base+1,___lwdiv@divisor+1
  6047  0043AC  ECEF  F025         	call	___lwdiv	;wreg free
  6048  0043B0  C019  F025         	movff	?___lwdiv,utoa@v
  6049  0043B4  C01A  F026         	movff	?___lwdiv+1,utoa@v+1
  6050  0043B8  2A20               	incf	utoa@buf^0,f,c
  6051  0043BA  5025               	movf	utoa@v^0,w,c
  6052  0043BC  1026               	iorwf	(utoa@v+1)^0,w,c
  6053  0043BE  A4D8               	btfss	status,2,c
  6054  0043C0  D7ED               	goto	l11098
  6055  0043C2  5020               	movf	utoa@buf^0,w,c
  6056  0043C4  6ED9               	movwf	fsr2l,c
  6057  0043C6  6ADA               	clrf	fsr2h,c
  6058  0043C8  0E00               	movlw	0
  6059  0043CA  6EDF               	movwf	indf2,c
  6060  0043CC  0620               	decf	utoa@buf^0,f,c
  6061  0043CE                     l11108:
  6062  0043CE  C021  F019         	movff	utoa@val,___lwmod@dividend
  6063  0043D2  C022  F01A         	movff	utoa@val+1,___lwmod@dividend+1
  6064  0043D6  C023  F01B         	movff	utoa@base,___lwmod@divisor
  6065  0043DA  C024  F01C         	movff	utoa@base+1,___lwmod@divisor+1
  6066  0043DE  EC87  F027         	call	___lwmod	;wreg free
  6067  0043E2  5019               	movf	?___lwmod^0,w,c
  6068  0043E4  6E27               	movwf	utoa@c^0,c
  6069  0043E6  C021  F019         	movff	utoa@val,___lwdiv@dividend
  6070  0043EA  C022  F01A         	movff	utoa@val+1,___lwdiv@dividend+1
  6071  0043EE  C023  F01B         	movff	utoa@base,___lwdiv@divisor
  6072  0043F2  C024  F01C         	movff	utoa@base+1,___lwdiv@divisor+1
  6073  0043F6  ECEF  F025         	call	___lwdiv	;wreg free
  6074  0043FA  C019  F021         	movff	?___lwdiv,utoa@val
  6075  0043FE  C01A  F022         	movff	?___lwdiv+1,utoa@val+1
  6076  004402  0E09               	movlw	9
  6077  004404  6427               	cpfsgt	utoa@c^0,c
  6078  004406  D002               	goto	l2290
  6079  004408  0E07               	movlw	7
  6080  00440A  2627               	addwf	utoa@c^0,f,c
  6081  00440C                     l2290:
  6082  00440C  0E30               	movlw	48
  6083  00440E  2627               	addwf	utoa@c^0,f,c
  6084  004410  5020               	movf	utoa@buf^0,w,c
  6085  004412  6ED9               	movwf	fsr2l,c
  6086  004414  6ADA               	clrf	fsr2h,c
  6087  004416  C027  FFDF         	movff	utoa@c,indf2
  6088  00441A  0620               	decf	utoa@buf^0,f,c
  6089  00441C  5021               	movf	utoa@val^0,w,c
  6090  00441E  1022               	iorwf	(utoa@val+1)^0,w,c
  6091  004420  A4D8               	btfss	status,2,c
  6092  004422  D7D5               	goto	l11108
  6093                           
  6094                           ;	Return value of _utoa is never used
  6095  004424  2A20               	incf	utoa@buf^0,f,c
  6096  004426  0012               	return		;funcret
  6097  004428                     __end_of_utoa:
  6098                           	callstack 0
  6099                           
  6100 ;; *************** function ___lwmod *****************
  6101 ;; Defined at:
  6102 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\lwmod.c"
  6103 ;; Parameters:    Size  Location     Type
  6104 ;;  dividend        2   24[COMRAM] unsigned int 
  6105 ;;  divisor         2   26[COMRAM] unsigned int 
  6106 ;; Auto vars:     Size  Location     Type
  6107 ;;  counter         1   28[COMRAM] unsigned char 
  6108 ;; Return value:  Size  Location     Type
  6109 ;;                  2   24[COMRAM] unsigned int 
  6110 ;; Registers used:
  6111 ;;		wreg, status,2, status,0
  6112 ;; Tracked objects:
  6113 ;;		On entry : 0/0
  6114 ;;		On exit  : 0/0
  6115 ;;		Unchanged: 0/0
  6116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6117 ;;      Params:         4       0       0       0       0       0       0       0       0
  6118 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6120 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6121 ;;Total ram usage:        5 bytes
  6122 ;; Hardware stack levels used:    1
  6123 ;; Hardware stack levels required when called:    3
  6124 ;; This function calls:
  6125 ;;		Nothing
  6126 ;; This function is called by:
  6127 ;;		_utoa
  6128 ;; This function uses a non-reentrant model
  6129 ;;
  6130                           
  6131                           	psect	text29
  6132  004F0E                     __ptext29:
  6133                           	callstack 0
  6134  004F0E                     ___lwmod:
  6135                           	callstack 22
  6136                           
  6137                           ;incstack = 0
  6138  004F0E  501B               	movf	___lwmod@divisor^0,w,c
  6139  004F10  101C               	iorwf	(___lwmod@divisor+1)^0,w,c
  6140  004F12  B4D8               	btfsc	status,2,c
  6141  004F14  D018               	goto	l2084
  6142  004F16  0E01               	movlw	1
  6143  004F18  6E1D               	movwf	___lwmod@counter^0,c
  6144  004F1A  D004               	goto	l10714
  6145  004F1C                     l10712:
  6146  004F1C  90D8               	bcf	status,0,c
  6147  004F1E  361B               	rlcf	___lwmod@divisor^0,f,c
  6148  004F20  361C               	rlcf	(___lwmod@divisor+1)^0,f,c
  6149  004F22  2A1D               	incf	___lwmod@counter^0,f,c
  6150  004F24                     l10714:
  6151  004F24  AE1C               	btfss	(___lwmod@divisor+1)^0,7,c
  6152  004F26  D7FA               	goto	l10712
  6153  004F28                     u12590:
  6154  004F28  501B               	movf	___lwmod@divisor^0,w,c
  6155  004F2A  5C19               	subwf	___lwmod@dividend^0,w,c
  6156  004F2C  501C               	movf	(___lwmod@divisor+1)^0,w,c
  6157  004F2E  581A               	subwfb	(___lwmod@dividend+1)^0,w,c
  6158  004F30  A0D8               	btfss	status,0,c
  6159  004F32  D004               	goto	l10720
  6160  004F34  501B               	movf	___lwmod@divisor^0,w,c
  6161  004F36  5E19               	subwf	___lwmod@dividend^0,f,c
  6162  004F38  501C               	movf	(___lwmod@divisor+1)^0,w,c
  6163  004F3A  5A1A               	subwfb	(___lwmod@dividend+1)^0,f,c
  6164  004F3C                     l10720:
  6165  004F3C  90D8               	bcf	status,0,c
  6166  004F3E  321C               	rrcf	(___lwmod@divisor+1)^0,f,c
  6167  004F40  321B               	rrcf	___lwmod@divisor^0,f,c
  6168  004F42  2E1D               	decfsz	___lwmod@counter^0,f,c
  6169  004F44  D7F1               	goto	u12590
  6170  004F46                     l2084:
  6171  004F46  C019  F019         	movff	___lwmod@dividend,?___lwmod
  6172  004F4A  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  6173  004F4E  0012               	return		;funcret
  6174  004F50                     __end_of___lwmod:
  6175                           	callstack 0
  6176                           
  6177 ;; *************** function ___lwdiv *****************
  6178 ;; Defined at:
  6179 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;  dividend        2   24[COMRAM] unsigned int 
  6182 ;;  divisor         2   26[COMRAM] unsigned int 
  6183 ;; Auto vars:     Size  Location     Type
  6184 ;;  quotient        2   29[COMRAM] unsigned int 
  6185 ;;  counter         1   28[COMRAM] unsigned char 
  6186 ;; Return value:  Size  Location     Type
  6187 ;;                  2   24[COMRAM] unsigned int 
  6188 ;; Registers used:
  6189 ;;		wreg, status,2, status,0
  6190 ;; Tracked objects:
  6191 ;;		On entry : 0/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6195 ;;      Params:         4       0       0       0       0       0       0       0       0
  6196 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6197 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6198 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6199 ;;Total ram usage:        7 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; Hardware stack levels required when called:    3
  6202 ;; This function calls:
  6203 ;;		Nothing
  6204 ;; This function is called by:
  6205 ;;		_utoa
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           	psect	text30
  6210  004BDE                     __ptext30:
  6211                           	callstack 0
  6212  004BDE                     ___lwdiv:
  6213                           	callstack 22
  6214                           
  6215                           ;incstack = 0
  6216  004BDE  0E00               	movlw	0
  6217  004BE0  6E1F               	movwf	(___lwdiv@quotient+1)^0,c
  6218  004BE2  0E00               	movlw	0
  6219  004BE4  6E1E               	movwf	___lwdiv@quotient^0,c
  6220  004BE6  501B               	movf	___lwdiv@divisor^0,w,c
  6221  004BE8  101C               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6222  004BEA  B4D8               	btfsc	status,2,c
  6223  004BEC  D01C               	goto	l2074
  6224  004BEE  0E01               	movlw	1
  6225  004BF0  6E1D               	movwf	___lwdiv@counter^0,c
  6226  004BF2  D004               	goto	l10694
  6227  004BF4                     l10692:
  6228  004BF4  90D8               	bcf	status,0,c
  6229  004BF6  361B               	rlcf	___lwdiv@divisor^0,f,c
  6230  004BF8  361C               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6231  004BFA  2A1D               	incf	___lwdiv@counter^0,f,c
  6232  004BFC                     l10694:
  6233  004BFC  AE1C               	btfss	(___lwdiv@divisor+1)^0,7,c
  6234  004BFE  D7FA               	goto	l10692
  6235  004C00                     u12560:
  6236  004C00  90D8               	bcf	status,0,c
  6237  004C02  361E               	rlcf	___lwdiv@quotient^0,f,c
  6238  004C04  361F               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6239  004C06  501B               	movf	___lwdiv@divisor^0,w,c
  6240  004C08  5C19               	subwf	___lwdiv@dividend^0,w,c
  6241  004C0A  501C               	movf	(___lwdiv@divisor+1)^0,w,c
  6242  004C0C  581A               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6243  004C0E  A0D8               	btfss	status,0,c
  6244  004C10  D005               	goto	l10704
  6245  004C12  501B               	movf	___lwdiv@divisor^0,w,c
  6246  004C14  5E19               	subwf	___lwdiv@dividend^0,f,c
  6247  004C16  501C               	movf	(___lwdiv@divisor+1)^0,w,c
  6248  004C18  5A1A               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6249  004C1A  801E               	bsf	___lwdiv@quotient^0,0,c
  6250  004C1C                     l10704:
  6251  004C1C  90D8               	bcf	status,0,c
  6252  004C1E  321C               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6253  004C20  321B               	rrcf	___lwdiv@divisor^0,f,c
  6254  004C22  2E1D               	decfsz	___lwdiv@counter^0,f,c
  6255  004C24  D7ED               	goto	u12560
  6256  004C26                     l2074:
  6257  004C26  C01E  F019         	movff	___lwdiv@quotient,?___lwdiv
  6258  004C2A  C01F  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6259  004C2E  0012               	return		;funcret
  6260  004C30                     __end_of___lwdiv:
  6261                           	callstack 0
  6262                           
  6263 ;; *************** function _escreve_cmd_lcd *****************
  6264 ;; Defined at:
  6265 ;;		line 162 in file "bibliotecas/display_lcd.c"
  6266 ;; Parameters:    Size  Location     Type
  6267 ;;  comando         1    wreg     unsigned char 
  6268 ;; Auto vars:     Size  Location     Type
  6269 ;;  comando         1   26[COMRAM] unsigned char 
  6270 ;; Return value:  Size  Location     Type
  6271 ;;                  1    wreg      void 
  6272 ;; Registers used:
  6273 ;;		wreg, status,2, status,0, cstack
  6274 ;; Tracked objects:
  6275 ;;		On entry : 0/0
  6276 ;;		On exit  : 0/0
  6277 ;;		Unchanged: 0/0
  6278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6279 ;;      Params:         0       0       0       0       0       0       0       0       0
  6280 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6281 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6282 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6283 ;;Total ram usage:        1 bytes
  6284 ;; Hardware stack levels used:    1
  6285 ;; Hardware stack levels required when called:    4
  6286 ;; This function calls:
  6287 ;;		_delay
  6288 ;; This function is called by:
  6289 ;;		_init_lcd
  6290 ;;		_mensagem_inicial
  6291 ;;		_troca_de_tela
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           	psect	text31
  6296  00454A                     __ptext31:
  6297                           	callstack 0
  6298  00454A                     _escreve_cmd_lcd:
  6299                           	callstack 25
  6300                           
  6301                           ;incstack = 0
  6302                           ;escreve_cmd_lcd@comando stored from wreg
  6303  00454A  6E1B               	movwf	escreve_cmd_lcd@comando^0,c
  6304                           
  6305                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
  6306  00454C  9483               	bcf	131,2,c	;volatile
  6307                           
  6308                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
  6309  00454E  9283               	bcf	131,1,c	;volatile
  6310                           
  6311                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
  6312  004550  9083               	bcf	131,0,c	;volatile
  6313                           
  6314                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
  6315  004552  A81B               	btfss	escreve_cmd_lcd@comando^0,4,c
  6316  004554  D002               	goto	l191
  6317  004556  8883               	bsf	131,4,c	;volatile
  6318  004558  D001               	goto	l11552
  6319  00455A                     l191:
  6320                           
  6321                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
  6322  00455A  9883               	bcf	131,4,c	;volatile
  6323  00455C                     l11552:
  6324                           
  6325                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
  6326  00455C  AA1B               	btfss	escreve_cmd_lcd@comando^0,5,c
  6327  00455E  D002               	goto	l193
  6328  004560  8A83               	bsf	131,5,c	;volatile
  6329  004562  D001               	goto	l11556
  6330  004564                     l193:
  6331                           
  6332                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
  6333  004564  9A83               	bcf	131,5,c	;volatile
  6334  004566                     l11556:
  6335                           
  6336                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
  6337  004566  AC1B               	btfss	escreve_cmd_lcd@comando^0,6,c
  6338  004568  D002               	goto	l195
  6339  00456A  8C83               	bsf	131,6,c	;volatile
  6340  00456C  D001               	goto	l11560
  6341  00456E                     l195:
  6342                           
  6343                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
  6344  00456E  9C83               	bcf	131,6,c	;volatile
  6345  004570                     l11560:
  6346                           
  6347                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
  6348  004570  AE1B               	btfss	escreve_cmd_lcd@comando^0,7,c
  6349  004572  D002               	goto	l197
  6350  004574  8E83               	bsf	131,7,c	;volatile
  6351  004576  D001               	goto	l198
  6352  004578                     l197:
  6353                           
  6354                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
  6355  004578  9E83               	bcf	131,7,c	;volatile
  6356  00457A                     l198:
  6357                           
  6358                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
  6359  00457A  8083               	bsf	131,0,c	;volatile
  6360                           
  6361                           ;display_lcd.c: 181: delay();
  6362  00457C  ECA4  F029         	call	_delay	;wreg free
  6363                           
  6364                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
  6365  004580  9083               	bcf	131,0,c	;volatile
  6366                           
  6367                           ;display_lcd.c: 183: delay();
  6368  004582  ECA4  F029         	call	_delay	;wreg free
  6369                           
  6370                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
  6371  004586  A01B               	btfss	escreve_cmd_lcd@comando^0,0,c
  6372  004588  D002               	goto	l199
  6373  00458A  8883               	bsf	131,4,c	;volatile
  6374  00458C  D001               	goto	l200
  6375  00458E                     l199:
  6376                           
  6377                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
  6378  00458E  9883               	bcf	131,4,c	;volatile
  6379  004590                     l200:
  6380                           
  6381                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
  6382  004590  A21B               	btfss	escreve_cmd_lcd@comando^0,1,c
  6383  004592  D002               	goto	l201
  6384  004594  8A83               	bsf	131,5,c	;volatile
  6385  004596  D001               	goto	l202
  6386  004598                     l201:
  6387                           
  6388                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
  6389  004598  9A83               	bcf	131,5,c	;volatile
  6390  00459A                     l202:
  6391                           
  6392                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
  6393  00459A  A41B               	btfss	escreve_cmd_lcd@comando^0,2,c
  6394  00459C  D002               	goto	l203
  6395  00459E  8C83               	bsf	131,6,c	;volatile
  6396  0045A0  D001               	goto	l204
  6397  0045A2                     l203:
  6398                           
  6399                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
  6400  0045A2  9C83               	bcf	131,6,c	;volatile
  6401  0045A4                     l204:
  6402                           
  6403                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
  6404  0045A4  A61B               	btfss	escreve_cmd_lcd@comando^0,3,c
  6405  0045A6  D002               	goto	l205
  6406  0045A8  8E83               	bsf	131,7,c	;volatile
  6407  0045AA  D001               	goto	l206
  6408  0045AC                     l205:
  6409                           
  6410                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
  6411  0045AC  9E83               	bcf	131,7,c	;volatile
  6412  0045AE                     l206:
  6413                           
  6414                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
  6415  0045AE  8083               	bsf	131,0,c	;volatile
  6416                           
  6417                           ;display_lcd.c: 197: delay();
  6418  0045B0  ECA4  F029         	call	_delay	;wreg free
  6419                           
  6420                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
  6421  0045B4  9083               	bcf	131,0,c	;volatile
  6422                           
  6423                           ;display_lcd.c: 199: delay();
  6424  0045B6  ECA4  F029         	call	_delay	;wreg free
  6425                           
  6426                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
  6427  0045BA  041B               	decf	escreve_cmd_lcd@comando^0,w,c
  6428  0045BC  B4D8               	btfsc	status,2,c
  6429  0045BE  D008               	goto	u14170
  6430  0045C0  0E02               	movlw	2
  6431  0045C2  181B               	xorwf	escreve_cmd_lcd@comando^0,w,c
  6432  0045C4  B4D8               	btfsc	status,2,c
  6433  0045C6  D004               	goto	u14170
  6434  0045C8  0E03               	movlw	3
  6435  0045CA  181B               	xorwf	escreve_cmd_lcd@comando^0,w,c
  6436  0045CC  A4D8               	btfss	status,2,c
  6437  0045CE  0012               	return	
  6438  0045D0                     u14170:
  6439                           
  6440                           ;display_lcd.c: 205: { delay(); }
  6441  0045D0  ECA4  F029         	call	_delay	;wreg free
  6442  0045D4  0012               	return		;funcret
  6443  0045D6                     __end_of_escreve_cmd_lcd:
  6444                           	callstack 0
  6445                           
  6446 ;; *************** function _Longitude *****************
  6447 ;; Defined at:
  6448 ;;		line 179 in file "bibliotecas/GPS.c"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;		None
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;		None
  6453 ;; Return value:  Size  Location     Type
  6454 ;;                  2   24[COMRAM] PTR unsigned char 
  6455 ;; Registers used:
  6456 ;;		wreg, status,2, status,0
  6457 ;; Tracked objects:
  6458 ;;		On entry : 0/0
  6459 ;;		On exit  : 0/0
  6460 ;;		Unchanged: 0/0
  6461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6462 ;;      Params:         2       0       0       0       0       0       0       0       0
  6463 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6464 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6465 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6466 ;;Total ram usage:        2 bytes
  6467 ;; Hardware stack levels used:    1
  6468 ;; Hardware stack levels required when called:    3
  6469 ;; This function calls:
  6470 ;;		Nothing
  6471 ;; This function is called by:
  6472 ;;		_troca_de_tela
  6473 ;;		_armazena_longitude
  6474 ;; This function uses a non-reentrant model
  6475 ;;
  6476                           
  6477                           	psect	text32
  6478  00548E                     __ptext32:
  6479                           	callstack 0
  6480  00548E                     _Longitude:
  6481                           	callstack 24
  6482                           
  6483                           ;GPS.c: 182: return rawLongitude;
  6484                           
  6485                           ;incstack = 0
  6486  00548E  0E5E               	movlw	low _rawLongitude
  6487  005490  6E19               	movwf	?_Longitude^0,c
  6488  005492  0E02               	movlw	high _rawLongitude
  6489  005494  6E1A               	movwf	(?_Longitude+1)^0,c
  6490  005496  0012               	return		;funcret
  6491  005498                     __end_of_Longitude:
  6492                           	callstack 0
  6493                           
  6494 ;; *************** function _Latitude *****************
  6495 ;; Defined at:
  6496 ;;		line 173 in file "bibliotecas/GPS.c"
  6497 ;; Parameters:    Size  Location     Type
  6498 ;;		None
  6499 ;; Auto vars:     Size  Location     Type
  6500 ;;		None
  6501 ;; Return value:  Size  Location     Type
  6502 ;;                  2   24[COMRAM] PTR unsigned char 
  6503 ;; Registers used:
  6504 ;;		wreg, status,2, status,0
  6505 ;; Tracked objects:
  6506 ;;		On entry : 0/0
  6507 ;;		On exit  : 0/0
  6508 ;;		Unchanged: 0/0
  6509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6510 ;;      Params:         2       0       0       0       0       0       0       0       0
  6511 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6512 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6513 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6514 ;;Total ram usage:        2 bytes
  6515 ;; Hardware stack levels used:    1
  6516 ;; Hardware stack levels required when called:    3
  6517 ;; This function calls:
  6518 ;;		Nothing
  6519 ;; This function is called by:
  6520 ;;		_troca_de_tela
  6521 ;;		_armazena_latitude
  6522 ;; This function uses a non-reentrant model
  6523 ;;
  6524                           
  6525                           	psect	text33
  6526  005498                     __ptext33:
  6527                           	callstack 0
  6528  005498                     _Latitude:
  6529                           	callstack 24
  6530                           
  6531                           ;GPS.c: 176: return rawLatitude;
  6532                           
  6533                           ;incstack = 0
  6534  005498  0E6B               	movlw	low _rawLatitude
  6535  00549A  6E19               	movwf	?_Latitude^0,c
  6536  00549C  0E02               	movlw	high _rawLatitude
  6537  00549E  6E1A               	movwf	(?_Latitude+1)^0,c
  6538  0054A0  0012               	return		;funcret
  6539  0054A2                     __end_of_Latitude:
  6540                           	callstack 0
  6541                           
  6542 ;; *************** function _fix *****************
  6543 ;; Defined at:
  6544 ;;		line 185 in file "bibliotecas/GPS.c"
  6545 ;; Parameters:    Size  Location     Type
  6546 ;;		None
  6547 ;; Auto vars:     Size  Location     Type
  6548 ;;		None
  6549 ;; Return value:  Size  Location     Type
  6550 ;;                  2   24[COMRAM] PTR unsigned char 
  6551 ;; Registers used:
  6552 ;;		wreg, status,2, status,0
  6553 ;; Tracked objects:
  6554 ;;		On entry : 0/0
  6555 ;;		On exit  : 0/0
  6556 ;;		Unchanged: 0/0
  6557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6558 ;;      Params:         2       0       0       0       0       0       0       0       0
  6559 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6560 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6561 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6562 ;;Total ram usage:        2 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; Hardware stack levels required when called:    3
  6565 ;; This function calls:
  6566 ;;		Nothing
  6567 ;; This function is called by:
  6568 ;;		_disparo_gravacao
  6569 ;;		_troca_de_tela
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573                           	psect	text34
  6574  0054A2                     __ptext34:
  6575                           	callstack 0
  6576  0054A2                     _fix:
  6577                           	callstack 25
  6578                           
  6579                           ;GPS.c: 187: return rawFix;
  6580                           
  6581                           ;incstack = 0
  6582  0054A2  0EF8               	movlw	low _rawFix
  6583  0054A4  6E19               	movwf	?_fix^0,c
  6584  0054A6  0E01               	movlw	high _rawFix
  6585  0054A8  6E1A               	movwf	(?_fix+1)^0,c
  6586  0054AA  0012               	return		;funcret
  6587  0054AC                     __end_of_fix:
  6588                           	callstack 0
  6589                           
  6590 ;; *************** function _escrita_sdcard *****************
  6591 ;; Defined at:
  6592 ;;		line 206 in file "bibliotecas/SDCard.c"
  6593 ;; Parameters:    Size  Location     Type
  6594 ;;		None
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;  fix_gps         3    0        PTR unsigned char 
  6597 ;;  bw              2    0        unsigned short 
  6598 ;; Return value:  Size  Location     Type
  6599 ;;                  1    wreg      void 
  6600 ;; Registers used:
  6601 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6602 ;; Tracked objects:
  6603 ;;		On entry : 3F/0
  6604 ;;		On exit  : 3F/0
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6607 ;;      Params:         0       0       0       0       0       0       0       0       0
  6608 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6609 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6610 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6611 ;;Total ram usage:        0 bytes
  6612 ;; Hardware stack levels used:    1
  6613 ;; Hardware stack levels required when called:   15
  6614 ;; This function calls:
  6615 ;;		_desliga_SPI
  6616 ;;		_desliga_uart
  6617 ;;		_f_close
  6618 ;;		_f_lseek
  6619 ;;		_f_mount
  6620 ;;		_f_open
  6621 ;;		_fprintf
  6622 ;;		_inicializa_SPI
  6623 ;;		_inicializa_uart
  6624 ;;		_strcat
  6625 ;;		_strcpy
  6626 ;; This function is called by:
  6627 ;;		_disparo_gravacao
  6628 ;; This function uses a non-reentrant model
  6629 ;;
  6630                           
  6631                           	psect	text35
  6632  0039FE                     __ptext35:
  6633                           	callstack 0
  6634  0039FE                     _escrita_sdcard:
  6635                           	callstack 13
  6636                           
  6637                           ; BSR set to: 0
  6638                           ;SDCard.c: 208: unsigned char *fix_gps;;SDCard.c: 209: static unsigned char f_fix = 0;;S
      +                          DCard.c: 210: WORD bw;;SDCard.c: 211: PORTBbits.RB3 = 0;
  6639                           
  6640                           ;incstack = 0
  6641  0039FE  9681               	bcf	129,3,c	;volatile
  6642                           
  6643                           ; BSR set to: 0
  6644                           ;SDCard.c: 212: desliga_uart();
  6645  003A00  EC23  F02A         	call	_desliga_uart	;wreg free
  6646                           
  6647                           ; BSR set to: 0
  6648                           ;SDCard.c: 213: inicializa_SPI();
  6649  003A04  EC75  F029         	call	_inicializa_SPI	;wreg free
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;SDCard.c: 214: f_mount(0,&fs);
  6653  003A08  0EBB               	movlw	low _fs
  6654  003A0A  6E19               	movwf	f_mount@fs^0,c
  6655  003A0C  0E02               	movlw	high _fs
  6656  003A0E  6E1A               	movwf	(f_mount@fs+1)^0,c
  6657  003A10  0E00               	movlw	0
  6658  003A12  ECB6  F026         	call	_f_mount
  6659                           
  6660                           ;SDCard.c: 216: if(!f_fix)
  6661  003A16  5040               	movf	escrita_sdcard@f_fix^0,w,c
  6662  003A18  A4D8               	btfss	status,2,c
  6663  003A1A  D016               	goto	l11612
  6664                           
  6665                           ;SDCard.c: 217: {;SDCard.c: 219: strcpy(filename, string_dado.data);
  6666  003A1C  0E4F               	movlw	low _filename
  6667  003A1E  6E1B               	movwf	strcpy@to^0,c
  6668  003A20  0E02               	movlw	high _filename
  6669  003A22  6E1C               	movwf	(strcpy@to+1)^0,c
  6670  003A24  0E00               	movlw	low _string_dado
  6671  003A26  6E1D               	movwf	strcpy@from^0,c
  6672  003A28  0E02               	movlw	high _string_dado
  6673  003A2A  6E1E               	movwf	(strcpy@from+1)^0,c
  6674  003A2C  EC6A  F028         	call	_strcpy	;wreg free
  6675                           
  6676                           ;SDCard.c: 221: strcat(filename, ".tlm");
  6677  003A30  0E4F               	movlw	low _filename
  6678  003A32  6E19               	movwf	strcat@to^0,c
  6679  003A34  0E02               	movlw	high _filename
  6680  003A36  6E1A               	movwf	(strcat@to+1)^0,c
  6681  003A38  0E68               	movlw	low STR_13
  6682  003A3A  6E1B               	movwf	strcat@from^0,c
  6683  003A3C  0E62               	movlw	high STR_13
  6684  003A3E  6E1C               	movwf	(strcat@from+1)^0,c
  6685  003A40  EC43  F027         	call	_strcat	;wreg free
  6686                           
  6687                           ;SDCard.c: 222: f_fix = 1;
  6688  003A44  0E01               	movlw	1
  6689  003A46  6E40               	movwf	escrita_sdcard@f_fix^0,c
  6690  003A48                     l11612:
  6691                           
  6692                           ;SDCard.c: 223: };SDCard.c: 225: if (f_open(&fil, filename, 0x02 ) == FR_OK)
  6693  003A48  0E9E               	movlw	low _fil
  6694  003A4A  0100               	movlb	0	; () banked
  6695  003A4C  6FC0               	movwf	f_open@fp& (0+255),b
  6696  003A4E  0E01               	movlw	high _fil
  6697  003A50  6FC1               	movwf	(f_open@fp+1)& (0+255),b
  6698  003A52  0E4F               	movlw	low _filename
  6699  003A54  6FC2               	movwf	f_open@path& (0+255),b
  6700  003A56  0E02               	movlw	high _filename
  6701  003A58  6FC3               	movwf	(f_open@path+1)& (0+255),b
  6702  003A5A  0E02               	movlw	2
  6703  003A5C  6FC4               	movwf	f_open@mode& (0+255),b
  6704  003A5E  EC76  F009         	call	_f_open	;wreg free
  6705  003A62  0900               	iorlw	0
  6706  003A64  A4D8               	btfss	status,2,c
  6707  003A66  D040               	goto	l11620
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;SDCard.c: 226: {;SDCard.c: 228: f_lseek(&fil, ((&fil)->fsize));
  6711  003A68  0E9E               	movlw	low _fil
  6712  003A6A  6FAE               	movwf	f_lseek@fp& (0+255),b
  6713  003A6C  0E01               	movlw	high _fil
  6714  003A6E  6FAF               	movwf	(f_lseek@fp+1)& (0+255),b
  6715  003A70  C1A8  F0B0         	movff	_fil+10,f_lseek@ofs
  6716  003A74  C1A9  F0B1         	movff	_fil+11,f_lseek@ofs+1
  6717  003A78  C1AA  F0B2         	movff	_fil+12,f_lseek@ofs+2
  6718  003A7C  C1AB  F0B3         	movff	_fil+13,f_lseek@ofs+3
  6719  003A80  EC72  F005         	call	_f_lseek	;wreg free
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;SDCard.c: 229: fprintf(&fil, "\nv%s;lt%s;lo%s;r%s;c%s;k%s;h%s;d%s", "string_dado.vel", 
      +                          string_dado.lt, string_dado.lo, "string_dado.rpm", "string_dado.comb", "string_dado.odom
      +                          etro_total", string_dado.hora, "string_dado.dtc");
  6723  003A84  0E9E               	movlw	low _fil
  6724  003A86  6FDA               	movwf	fprintf@fil& (0+255),b
  6725  003A88  0E01               	movlw	high _fil
  6726  003A8A  6FDB               	movwf	(fprintf@fil+1)& (0+255),b
  6727  003A8C  0E09               	movlw	low STR_14
  6728  003A8E  6FDC               	movwf	fprintf@str& (0+255),b
  6729  003A90  0E61               	movlw	high STR_14
  6730  003A92  6FDD               	movwf	(fprintf@str+1)& (0+255),b
  6731  003A94  0E9E               	movlw	low STR_15
  6732  003A96  6FDE               	movwf	(?_fprintf+4)& (0+255),b
  6733  003A98  0E61               	movlw	high STR_15
  6734  003A9A  6FDF               	movwf	(?_fprintf+5)& (0+255),b
  6735  003A9C  0E12               	movlw	low (_string_dado+18)
  6736  003A9E  6FE0               	movwf	(?_fprintf+6)& (0+255),b
  6737  003AA0  0E02               	movlw	high (_string_dado+18)
  6738  003AA2  6FE1               	movwf	(?_fprintf+7)& (0+255),b
  6739  003AA4  0E1F               	movlw	low (_string_dado+31)
  6740  003AA6  6FE2               	movwf	(?_fprintf+8)& (0+255),b
  6741  003AA8  0E02               	movlw	high (_string_dado+31)
  6742  003AAA  6FE3               	movwf	(?_fprintf+9)& (0+255),b
  6743  003AAC  0EAE               	movlw	low STR_16
  6744  003AAE  6FE4               	movwf	(?_fprintf+10)& (0+255),b
  6745  003AB0  0E61               	movlw	high STR_16
  6746  003AB2  6FE5               	movwf	(?_fprintf+11)& (0+255),b
  6747  003AB4  0E6D               	movlw	low STR_17
  6748  003AB6  6FE6               	movwf	(?_fprintf+12)& (0+255),b
  6749  003AB8  0E61               	movlw	high STR_17
  6750  003ABA  6FE7               	movwf	(?_fprintf+13)& (0+255),b
  6751  003ABC  0E2C               	movlw	low STR_18
  6752  003ABE  6FE8               	movwf	(?_fprintf+14)& (0+255),b
  6753  003AC0  0E61               	movlw	high STR_18
  6754  003AC2  6FE9               	movwf	(?_fprintf+15)& (0+255),b
  6755  003AC4  0E07               	movlw	low (_string_dado+7)
  6756  003AC6  6FEA               	movwf	(?_fprintf+16)& (0+255),b
  6757  003AC8  0E02               	movlw	high (_string_dado+7)
  6758  003ACA  6FEB               	movwf	(?_fprintf+17)& (0+255),b
  6759  003ACC  0E8E               	movlw	low STR_19
  6760  003ACE  6FEC               	movwf	(?_fprintf+18)& (0+255),b
  6761  003AD0  0E61               	movlw	high STR_19
  6762  003AD2  6FED               	movwf	(?_fprintf+19)& (0+255),b
  6763  003AD4  ECB7  F007         	call	_fprintf	;wreg free
  6764  003AD8                     l11618:
  6765                           
  6766                           ;SDCard.c: 232: f_close(&fil);
  6767  003AD8  0E9E               	movlw	low _fil
  6768  003ADA  0100               	movlb	0	; () banked
  6769  003ADC  6F91               	movwf	f_close@fp& (0+255),b
  6770  003ADE  0E01               	movlw	high _fil
  6771  003AE0  6F92               	movwf	(f_close@fp+1)& (0+255),b
  6772  003AE2  ECAD  F028         	call	_f_close	;wreg free
  6773                           
  6774                           ;SDCard.c: 233: }
  6775  003AE6  D00D               	goto	l11624
  6776  003AE8                     l11620:
  6777                           
  6778                           ; BSR set to: 0
  6779                           ;SDCard.c: 234: else;SDCard.c: 235: {;SDCard.c: 236: f_open(&fil, filename, 0x08 );
  6780  003AE8  0E9E               	movlw	low _fil
  6781  003AEA  6FC0               	movwf	f_open@fp& (0+255),b
  6782  003AEC  0E01               	movlw	high _fil
  6783  003AEE  6FC1               	movwf	(f_open@fp+1)& (0+255),b
  6784  003AF0  0E4F               	movlw	low _filename
  6785  003AF2  6FC2               	movwf	f_open@path& (0+255),b
  6786  003AF4  0E02               	movlw	high _filename
  6787  003AF6  6FC3               	movwf	(f_open@path+1)& (0+255),b
  6788  003AF8  0E08               	movlw	8
  6789  003AFA  6FC4               	movwf	f_open@mode& (0+255),b
  6790  003AFC  EC76  F009         	call	_f_open	;wreg free
  6791  003B00  D7EB               	goto	l11618
  6792  003B02                     l11624:
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;SDCard.c: 239: };SDCard.c: 241: PORTBbits.RB3 = 1;
  6796  003B02  8681               	bsf	129,3,c	;volatile
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;SDCard.c: 242: desliga_SPI();
  6800  003B04  EC3C  F02A         	call	_desliga_SPI	;wreg free
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;SDCard.c: 243: inicializa_uart();
  6804  003B08  EC0F  F029         	call	_inicializa_uart	;wreg free
  6805                           
  6806                           ; BSR set to: 0
  6807  003B0C  0012               	return		;funcret
  6808  003B0E                     __end_of_escrita_sdcard:
  6809                           	callstack 0
  6810                           
  6811 ;; *************** function _strcpy *****************
  6812 ;; Defined at:
  6813 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strcpy.c"
  6814 ;; Parameters:    Size  Location     Type
  6815 ;;  to              2   26[COMRAM] PTR unsigned char 
  6816 ;;		 -> temp_buff_lat(11), temp_buff_long(12), filename(15), 
  6817 ;;  from            2   28[COMRAM] PTR const unsigned char 
  6818 ;;		 -> string_dado.data(7), string_dado(59), rawLongitude(13), rawLatitude(13), 
  6819 ;; Auto vars:     Size  Location     Type
  6820 ;;  cp              2   30[COMRAM] PTR unsigned char 
  6821 ;;		 -> temp_buff_lat(11), temp_buff_long(12), filename(15), 
  6822 ;; Return value:  Size  Location     Type
  6823 ;;                  2   26[COMRAM] PTR unsigned char 
  6824 ;; Registers used:
  6825 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6826 ;; Tracked objects:
  6827 ;;		On entry : 0/0
  6828 ;;		On exit  : 0/0
  6829 ;;		Unchanged: 0/0
  6830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6831 ;;      Params:         4       0       0       0       0       0       0       0       0
  6832 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6833 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6834 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6835 ;;Total ram usage:        6 bytes
  6836 ;; Hardware stack levels used:    1
  6837 ;; Hardware stack levels required when called:    3
  6838 ;; This function calls:
  6839 ;;		Nothing
  6840 ;; This function is called by:
  6841 ;;		_escrita_sdcard
  6842 ;;		_armazena_longitude
  6843 ;;		_armazena_latitude
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847                           	psect	text36
  6848  0050D4                     __ptext36:
  6849                           	callstack 0
  6850  0050D4                     _strcpy:
  6851                           	callstack 24
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;incstack = 0
  6855  0050D4  C01B  F01F         	movff	strcpy@to,strcpy@cp
  6856  0050D8  C01C  F020         	movff	strcpy@to+1,strcpy@cp+1
  6857  0050DC  D004               	goto	l11262
  6858  0050DE                     l11260:
  6859  0050DE  4A1F               	infsnz	strcpy@cp^0,f,c
  6860  0050E0  2A20               	incf	(strcpy@cp+1)^0,f,c
  6861  0050E2  4A1D               	infsnz	strcpy@from^0,f,c
  6862  0050E4  2A1E               	incf	(strcpy@from+1)^0,f,c
  6863  0050E6                     l11262:
  6864  0050E6  C01D  FFD9         	movff	strcpy@from,fsr2l
  6865  0050EA  C01E  FFDA         	movff	strcpy@from+1,fsr2h
  6866  0050EE  C01F  FFE1         	movff	strcpy@cp,fsr1l
  6867  0050F2  C020  FFE2         	movff	strcpy@cp+1,fsr1h
  6868  0050F6  CFDF FFE7          	movff	indf2,indf1
  6869  0050FA  50E7               	movf	indf1,w,c
  6870  0050FC  B4D8               	btfsc	status,2,c
  6871  0050FE  0012               	return	
  6872  005100  D7EE               	goto	l11260
  6873  005102                     __end_of_strcpy:
  6874                           	callstack 0
  6875                           
  6876 ;; *************** function _strcat *****************
  6877 ;; Defined at:
  6878 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strcat.c"
  6879 ;; Parameters:    Size  Location     Type
  6880 ;;  to              2   24[COMRAM] PTR unsigned char 
  6881 ;;		 -> filename(15), 
  6882 ;;  from            2   26[COMRAM] PTR const unsigned char 
  6883 ;;		 -> STR_13(5), 
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;  cp              2   28[COMRAM] PTR unsigned char 
  6886 ;;		 -> filename(15), 
  6887 ;; Return value:  Size  Location     Type
  6888 ;;                  2   24[COMRAM] PTR unsigned char 
  6889 ;; Registers used:
  6890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6891 ;; Tracked objects:
  6892 ;;		On entry : 0/0
  6893 ;;		On exit  : 0/0
  6894 ;;		Unchanged: 0/0
  6895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6896 ;;      Params:         4       0       0       0       0       0       0       0       0
  6897 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6898 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6899 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6900 ;;Total ram usage:        6 bytes
  6901 ;; Hardware stack levels used:    1
  6902 ;; Hardware stack levels required when called:    3
  6903 ;; This function calls:
  6904 ;;		Nothing
  6905 ;; This function is called by:
  6906 ;;		_escrita_sdcard
  6907 ;; This function uses a non-reentrant model
  6908 ;;
  6909                           
  6910                           	psect	text37
  6911  004E86                     __ptext37:
  6912                           	callstack 0
  6913  004E86                     _strcat:
  6914                           	callstack 24
  6915                           
  6916                           ;incstack = 0
  6917  004E86  C019  F01D         	movff	strcat@to,strcat@cp
  6918  004E8A  C01A  F01E         	movff	strcat@to+1,strcat@cp+1
  6919  004E8E  D002               	goto	l11268
  6920  004E90                     l11266:
  6921  004E90  4A1D               	infsnz	strcat@cp^0,f,c
  6922  004E92  2A1E               	incf	(strcat@cp+1)^0,f,c
  6923  004E94                     l11268:
  6924  004E94  C01D  FFD9         	movff	strcat@cp,fsr2l
  6925  004E98  C01E  FFDA         	movff	strcat@cp+1,fsr2h
  6926  004E9C  50DF               	movf	indf2,w,c
  6927  004E9E  B4D8               	btfsc	status,2,c
  6928  004EA0  D005               	goto	l11272
  6929  004EA2  D7F6               	goto	l11266
  6930  004EA4                     l11270:
  6931  004EA4  4A1D               	infsnz	strcat@cp^0,f,c
  6932  004EA6  2A1E               	incf	(strcat@cp+1)^0,f,c
  6933  004EA8  4A1B               	infsnz	strcat@from^0,f,c
  6934  004EAA  2A1C               	incf	(strcat@from+1)^0,f,c
  6935  004EAC                     l11272:
  6936  004EAC  C01B  FFF6         	movff	strcat@from,tblptrl
  6937  004EB0  C01C  FFF7         	movff	strcat@from+1,tblptrh
  6938  004EB4                     	if	0	;tblptru may be non-zero
  6939  004EB4                     	endif
  6940  004EB4                     	if	0	;tblptru may be non-zero
  6941  004EB4                     	endif
  6942  004EB4  C01D  FFD9         	movff	strcat@cp,fsr2l
  6943  004EB8  C01E  FFDA         	movff	strcat@cp+1,fsr2h
  6944  004EBC  0008               	tblrd		*
  6945  004EBE  CFF5 FFDF          	movff	tablat,indf2
  6946  004EC2  50DF               	movf	indf2,w,c
  6947  004EC4  B4D8               	btfsc	status,2,c
  6948  004EC6  0012               	return	
  6949  004EC8  D7ED               	goto	l11270
  6950  004ECA                     __end_of_strcat:
  6951                           	callstack 0
  6952                           
  6953 ;; *************** function _inicializa_uart *****************
  6954 ;; Defined at:
  6955 ;;		line 206 in file "bibliotecas/uart.c"
  6956 ;; Parameters:    Size  Location     Type
  6957 ;;		None
  6958 ;; Auto vars:     Size  Location     Type
  6959 ;;		None
  6960 ;; Return value:  Size  Location     Type
  6961 ;;                  1    wreg      void 
  6962 ;; Registers used:
  6963 ;;		wreg, status,2, status,0, cstack
  6964 ;; Tracked objects:
  6965 ;;		On entry : 3E/1
  6966 ;;		On exit  : 3F/0
  6967 ;;		Unchanged: 0/0
  6968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6969 ;;      Params:         0       0       0       0       0       0       0       0       0
  6970 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6971 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6972 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6973 ;;Total ram usage:        0 bytes
  6974 ;; Hardware stack levels used:    1
  6975 ;; Hardware stack levels required when called:    5
  6976 ;; This function calls:
  6977 ;;		_configura_baudrate_uart
  6978 ;; This function is called by:
  6979 ;;		_escrita_sdcard
  6980 ;;		_main
  6981 ;; This function uses a non-reentrant model
  6982 ;;
  6983                           
  6984                           	psect	text38
  6985  00521E                     __ptext38:
  6986                           	callstack 0
  6987  00521E                     _inicializa_uart:
  6988                           	callstack 25
  6989                           
  6990                           ;uart.c: 208: TRISCbits.RC6 = 0;
  6991                           
  6992                           ;incstack = 0
  6993  00521E  9C94               	bcf	148,6,c	;volatile
  6994                           
  6995                           ;uart.c: 209: TRISCbits.RC7 = 0;
  6996  005220  9E94               	bcf	148,7,c	;volatile
  6997                           
  6998                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  6999  005222  0E80               	movlw	128
  7000  005224  6E27               	movwf	configura_baudrate_uart@baudrate^0,c
  7001  005226  0E25               	movlw	37
  7002  005228  6E28               	movwf	(configura_baudrate_uart@baudrate+1)^0,c
  7003  00522A  0E00               	movlw	0
  7004  00522C  6E29               	movwf	(configura_baudrate_uart@baudrate+2)^0,c
  7005  00522E  0E00               	movlw	0
  7006  005230  6E2A               	movwf	(configura_baudrate_uart@baudrate+3)^0,c
  7007  005232  EC87  F01D         	call	_configura_baudrate_uart	;wreg free
  7008                           
  7009                           ; BSR set to: 0
  7010                           ;uart.c: 213: TXSTA = 0x20;
  7011  005236  0E20               	movlw	32
  7012  005238  6EAC               	movwf	172,c	;volatile
  7013                           
  7014                           ; BSR set to: 0
  7015                           ;uart.c: 214: RCSTA = 0x90;
  7016  00523A  0E90               	movlw	144
  7017  00523C  6EAB               	movwf	171,c	;volatile
  7018                           
  7019                           ; BSR set to: 0
  7020  00523E  0012               	return		;funcret
  7021  005240                     __end_of_inicializa_uart:
  7022                           	callstack 0
  7023                           
  7024 ;; *************** function _configura_baudrate_uart *****************
  7025 ;; Defined at:
  7026 ;;		line 50 in file "bibliotecas/uart.c"
  7027 ;; Parameters:    Size  Location     Type
  7028 ;;  baudrate        4   38[COMRAM] const long 
  7029 ;; Auto vars:     Size  Location     Type
  7030 ;;  x               2    0[BANK0 ] unsigned int 
  7031 ;; Return value:  Size  Location     Type
  7032 ;;                  1    wreg      unsigned char 
  7033 ;; Registers used:
  7034 ;;		wreg, status,2, status,0, cstack
  7035 ;; Tracked objects:
  7036 ;;		On entry : 3E/1
  7037 ;;		On exit  : 3F/0
  7038 ;;		Unchanged: 0/0
  7039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7040 ;;      Params:         4       0       0       0       0       0       0       0       0
  7041 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7042 ;;      Temps:          8       0       0       0       0       0       0       0       0
  7043 ;;      Totals:        12       2       0       0       0       0       0       0       0
  7044 ;;Total ram usage:       14 bytes
  7045 ;; Hardware stack levels used:    1
  7046 ;; Hardware stack levels required when called:    4
  7047 ;; This function calls:
  7048 ;;		___aldiv
  7049 ;; This function is called by:
  7050 ;;		_inicializa_uart
  7051 ;; This function uses a non-reentrant model
  7052 ;;
  7053                           
  7054                           	psect	text39
  7055  003B0E                     __ptext39:
  7056                           	callstack 0
  7057  003B0E                     _configura_baudrate_uart:
  7058                           	callstack 25
  7059                           
  7060                           ;uart.c: 52: unsigned int x;;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  7061                           
  7062                           ; BSR set to: 0
  7063                           ;incstack = 0
  7064  003B0E  C027  F02B         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  7065  003B12  C028  F02C         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  7066  003B16  C029  F02D         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  7067  003B1A  C02A  F02E         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  7068  003B1E  0E06               	movlw	6
  7069  003B20                     u13215:
  7070  003B20  90D8               	bcf	status,0,c
  7071  003B22  362B               	rlcf	??_configura_baudrate_uart^0,f,c
  7072  003B24  362C               	rlcf	(??_configura_baudrate_uart+1)^0,f,c
  7073  003B26  362D               	rlcf	(??_configura_baudrate_uart+2)^0,f,c
  7074  003B28  362E               	rlcf	(??_configura_baudrate_uart+3)^0,f,c
  7075  003B2A  2EE8               	decfsz	wreg,f,c
  7076  003B2C  D7F9               	goto	u13215
  7077  003B2E  502B               	movf	??_configura_baudrate_uart^0,w,c
  7078  003B30  0800               	sublw	0
  7079  003B32  6E19               	movwf	___aldiv@dividend^0,c
  7080  003B34  0E6C               	movlw	108
  7081  003B36  542C               	subfwb	(??_configura_baudrate_uart+1)^0,w,c
  7082  003B38  6E1A               	movwf	(___aldiv@dividend+1)^0,c
  7083  003B3A  0EDC               	movlw	220
  7084  003B3C  542D               	subfwb	(??_configura_baudrate_uart+2)^0,w,c
  7085  003B3E  6E1B               	movwf	(___aldiv@dividend+2)^0,c
  7086  003B40  0E02               	movlw	2
  7087  003B42  542E               	subfwb	(??_configura_baudrate_uart+3)^0,w,c
  7088  003B44  6E1C               	movwf	(___aldiv@dividend+3)^0,c
  7089  003B46  C027  F02F         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  7090  003B4A  C028  F030         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  7091  003B4E  C029  F031         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  7092  003B52  C02A  F032         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  7093  003B56  0E06               	movlw	6
  7094  003B58                     u13225:
  7095  003B58  90D8               	bcf	status,0,c
  7096  003B5A  362F               	rlcf	(??_configura_baudrate_uart+4)^0,f,c
  7097  003B5C  3630               	rlcf	(??_configura_baudrate_uart+5)^0,f,c
  7098  003B5E  3631               	rlcf	(??_configura_baudrate_uart+6)^0,f,c
  7099  003B60  3632               	rlcf	(??_configura_baudrate_uart+7)^0,f,c
  7100  003B62  2EE8               	decfsz	wreg,f,c
  7101  003B64  D7F9               	goto	u13225
  7102  003B66  C02F  F01D         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  7103  003B6A  C030  F01E         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  7104  003B6E  C031  F01F         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  7105  003B72  C032  F020         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  7106  003B76  EC6E  F01F         	call	___aldiv	;wreg free
  7107  003B7A  C019  F060         	movff	?___aldiv,configura_baudrate_uart@x
  7108  003B7E  C01A  F061         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  7109                           
  7110                           ;uart.c: 55: if(x > 255)
  7111  003B82  0100               	movlb	0	; () banked
  7112  003B84  0561               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  7113  003B86  A0D8               	btfss	status,0,c
  7114  003B88  D03B               	goto	l11076
  7115                           
  7116                           ; BSR set to: 0
  7117                           ;uart.c: 56: {;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  7118  003B8A  C027  F02B         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  7119  003B8E  C028  F02C         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  7120  003B92  C029  F02D         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  7121  003B96  C02A  F02E         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  7122  003B9A  0E04               	movlw	4
  7123  003B9C                     u13245:
  7124  003B9C  90D8               	bcf	status,0,c
  7125  003B9E  362B               	rlcf	??_configura_baudrate_uart^0,f,c
  7126  003BA0  362C               	rlcf	(??_configura_baudrate_uart+1)^0,f,c
  7127  003BA2  362D               	rlcf	(??_configura_baudrate_uart+2)^0,f,c
  7128  003BA4  362E               	rlcf	(??_configura_baudrate_uart+3)^0,f,c
  7129  003BA6  2EE8               	decfsz	wreg,f,c
  7130  003BA8  D7F9               	goto	u13245
  7131  003BAA  502B               	movf	??_configura_baudrate_uart^0,w,c
  7132  003BAC  0800               	sublw	0
  7133  003BAE  6E19               	movwf	___aldiv@dividend^0,c
  7134  003BB0  0E6C               	movlw	108
  7135  003BB2  542C               	subfwb	(??_configura_baudrate_uart+1)^0,w,c
  7136  003BB4  6E1A               	movwf	(___aldiv@dividend+1)^0,c
  7137  003BB6  0EDC               	movlw	220
  7138  003BB8  542D               	subfwb	(??_configura_baudrate_uart+2)^0,w,c
  7139  003BBA  6E1B               	movwf	(___aldiv@dividend+2)^0,c
  7140  003BBC  0E02               	movlw	2
  7141  003BBE  542E               	subfwb	(??_configura_baudrate_uart+3)^0,w,c
  7142  003BC0  6E1C               	movwf	(___aldiv@dividend+3)^0,c
  7143  003BC2  C027  F02F         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  7144  003BC6  C028  F030         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  7145  003BCA  C029  F031         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  7146  003BCE  C02A  F032         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  7147  003BD2  0E04               	movlw	4
  7148  003BD4                     u13255:
  7149  003BD4  90D8               	bcf	status,0,c
  7150  003BD6  362F               	rlcf	(??_configura_baudrate_uart+4)^0,f,c
  7151  003BD8  3630               	rlcf	(??_configura_baudrate_uart+5)^0,f,c
  7152  003BDA  3631               	rlcf	(??_configura_baudrate_uart+6)^0,f,c
  7153  003BDC  3632               	rlcf	(??_configura_baudrate_uart+7)^0,f,c
  7154  003BDE  2EE8               	decfsz	wreg,f,c
  7155  003BE0  D7F9               	goto	u13255
  7156  003BE2  C02F  F01D         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  7157  003BE6  C030  F01E         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  7158  003BEA  C031  F01F         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  7159  003BEE  C032  F020         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  7160  003BF2  EC6E  F01F         	call	___aldiv	;wreg free
  7161  003BF6  C019  F060         	movff	?___aldiv,configura_baudrate_uart@x
  7162  003BFA  C01A  F061         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  7163                           
  7164                           ;uart.c: 58: BRGH = 1;
  7165  003BFE  84AC               	bsf	4012,2,c	;volatile
  7166  003C00                     l11076:
  7167                           
  7168                           ;uart.c: 59: };uart.c: 60: if(x < 256)
  7169  003C00  0100               	movlb	0	; () banked
  7170  003C02  0561               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  7171  003C04  B0D8               	btfsc	status,0,c
  7172  003C06  0012               	return	
  7173                           
  7174                           ; BSR set to: 0
  7175                           ;uart.c: 61: {;uart.c: 62: SPBRG = x;
  7176  003C08  C060  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  7177                           
  7178                           ;uart.c: 63: SYNC = 0;
  7179  003C0C  98AC               	bcf	4012,4,c	;volatile
  7180                           
  7181                           ;uart.c: 64: SPEN = 1;
  7182  003C0E  8EAB               	bsf	4011,7,c	;volatile
  7183                           
  7184                           ;uart.c: 65: TRISCbits.RC7 = 1;
  7185  003C10  8E94               	bsf	148,7,c	;volatile
  7186                           
  7187                           ;uart.c: 66: TRISCbits.RC6 = 0;
  7188  003C12  9C94               	bcf	148,6,c	;volatile
  7189                           
  7190                           ;uart.c: 67: CREN = 1;
  7191  003C14  88AB               	bsf	4011,4,c	;volatile
  7192                           
  7193                           ;uart.c: 68: TXEN = 1;
  7194  003C16  8AAC               	bsf	4012,5,c	;volatile
  7195                           
  7196                           ; BSR set to: 0
  7197                           
  7198                           ;uart.c: 70: return (1);;	Return value of _configura_baudrate_uart is never used
  7199  003C18  0012               	return		;funcret
  7200  003C1A                     __end_of_configura_baudrate_uart:
  7201                           	callstack 0
  7202                           
  7203 ;; *************** function ___aldiv *****************
  7204 ;; Defined at:
  7205 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\aldiv.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;  dividend        4   24[COMRAM] long 
  7208 ;;  divisor         4   28[COMRAM] long 
  7209 ;; Auto vars:     Size  Location     Type
  7210 ;;  quotient        4   34[COMRAM] long 
  7211 ;;  sign            1   33[COMRAM] unsigned char 
  7212 ;;  counter         1   32[COMRAM] unsigned char 
  7213 ;; Return value:  Size  Location     Type
  7214 ;;                  4   24[COMRAM] long 
  7215 ;; Registers used:
  7216 ;;		wreg, status,2, status,0
  7217 ;; Tracked objects:
  7218 ;;		On entry : 3E/1
  7219 ;;		On exit  : 3E/0
  7220 ;;		Unchanged: 3E/0
  7221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7222 ;;      Params:         8       0       0       0       0       0       0       0       0
  7223 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7224 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7225 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7226 ;;Total ram usage:       14 bytes
  7227 ;; Hardware stack levels used:    1
  7228 ;; Hardware stack levels required when called:    3
  7229 ;; This function calls:
  7230 ;;		Nothing
  7231 ;; This function is called by:
  7232 ;;		_configura_baudrate_uart
  7233 ;; This function uses a non-reentrant model
  7234 ;;
  7235                           
  7236                           	psect	text40
  7237  003EDC                     __ptext40:
  7238                           	callstack 0
  7239  003EDC                     ___aldiv:
  7240                           	callstack 25
  7241                           
  7242                           ; BSR set to: 0
  7243                           ;incstack = 0
  7244  003EDC  0E00               	movlw	0
  7245  003EDE  6E22               	movwf	___aldiv@sign^0,c
  7246  003EE0  AE20               	btfss	(___aldiv@divisor+3)^0,7,c
  7247  003EE2  D00A               	goto	l10650
  7248  003EE4  1E20               	comf	(___aldiv@divisor+3)^0,f,c
  7249  003EE6  1E1F               	comf	(___aldiv@divisor+2)^0,f,c
  7250  003EE8  1E1E               	comf	(___aldiv@divisor+1)^0,f,c
  7251  003EEA  6C1D               	negf	___aldiv@divisor^0,c
  7252  003EEC  0E00               	movlw	0
  7253  003EEE  221E               	addwfc	(___aldiv@divisor+1)^0,f,c
  7254  003EF0  221F               	addwfc	(___aldiv@divisor+2)^0,f,c
  7255  003EF2  2220               	addwfc	(___aldiv@divisor+3)^0,f,c
  7256  003EF4  0E01               	movlw	1
  7257  003EF6  6E22               	movwf	___aldiv@sign^0,c
  7258  003EF8                     l10650:
  7259  003EF8  AE1C               	btfss	(___aldiv@dividend+3)^0,7,c
  7260  003EFA  D00A               	goto	l10656
  7261  003EFC  1E1C               	comf	(___aldiv@dividend+3)^0,f,c
  7262  003EFE  1E1B               	comf	(___aldiv@dividend+2)^0,f,c
  7263  003F00  1E1A               	comf	(___aldiv@dividend+1)^0,f,c
  7264  003F02  6C19               	negf	___aldiv@dividend^0,c
  7265  003F04  0E00               	movlw	0
  7266  003F06  221A               	addwfc	(___aldiv@dividend+1)^0,f,c
  7267  003F08  221B               	addwfc	(___aldiv@dividend+2)^0,f,c
  7268  003F0A  221C               	addwfc	(___aldiv@dividend+3)^0,f,c
  7269  003F0C  0E01               	movlw	1
  7270  003F0E  1A22               	xorwf	___aldiv@sign^0,f,c
  7271  003F10                     l10656:
  7272  003F10  0E00               	movlw	0
  7273  003F12  6E23               	movwf	___aldiv@quotient^0,c
  7274  003F14  0E00               	movlw	0
  7275  003F16  6E24               	movwf	(___aldiv@quotient+1)^0,c
  7276  003F18  0E00               	movlw	0
  7277  003F1A  6E25               	movwf	(___aldiv@quotient+2)^0,c
  7278  003F1C  0E00               	movlw	0
  7279  003F1E  6E26               	movwf	(___aldiv@quotient+3)^0,c
  7280  003F20  501D               	movf	___aldiv@divisor^0,w,c
  7281  003F22  101E               	iorwf	(___aldiv@divisor+1)^0,w,c
  7282  003F24  101F               	iorwf	(___aldiv@divisor+2)^0,w,c
  7283  003F26  1020               	iorwf	(___aldiv@divisor+3)^0,w,c
  7284  003F28  B4D8               	btfsc	status,2,c
  7285  003F2A  D02A               	goto	l10678
  7286  003F2C  0E01               	movlw	1
  7287  003F2E  6E21               	movwf	___aldiv@counter^0,c
  7288  003F30  D006               	goto	l10664
  7289  003F32                     l10662:
  7290  003F32  90D8               	bcf	status,0,c
  7291  003F34  361D               	rlcf	___aldiv@divisor^0,f,c
  7292  003F36  361E               	rlcf	(___aldiv@divisor+1)^0,f,c
  7293  003F38  361F               	rlcf	(___aldiv@divisor+2)^0,f,c
  7294  003F3A  3620               	rlcf	(___aldiv@divisor+3)^0,f,c
  7295  003F3C  2A21               	incf	___aldiv@counter^0,f,c
  7296  003F3E                     l10664:
  7297  003F3E  AE20               	btfss	(___aldiv@divisor+3)^0,7,c
  7298  003F40  D7F8               	goto	l10662
  7299  003F42                     u12520:
  7300  003F42  90D8               	bcf	status,0,c
  7301  003F44  3623               	rlcf	___aldiv@quotient^0,f,c
  7302  003F46  3624               	rlcf	(___aldiv@quotient+1)^0,f,c
  7303  003F48  3625               	rlcf	(___aldiv@quotient+2)^0,f,c
  7304  003F4A  3626               	rlcf	(___aldiv@quotient+3)^0,f,c
  7305  003F4C  501D               	movf	___aldiv@divisor^0,w,c
  7306  003F4E  5C19               	subwf	___aldiv@dividend^0,w,c
  7307  003F50  501E               	movf	(___aldiv@divisor+1)^0,w,c
  7308  003F52  581A               	subwfb	(___aldiv@dividend+1)^0,w,c
  7309  003F54  501F               	movf	(___aldiv@divisor+2)^0,w,c
  7310  003F56  581B               	subwfb	(___aldiv@dividend+2)^0,w,c
  7311  003F58  5020               	movf	(___aldiv@divisor+3)^0,w,c
  7312  003F5A  581C               	subwfb	(___aldiv@dividend+3)^0,w,c
  7313  003F5C  A0D8               	btfss	status,0,c
  7314  003F5E  D009               	goto	l10674
  7315  003F60  501D               	movf	___aldiv@divisor^0,w,c
  7316  003F62  5E19               	subwf	___aldiv@dividend^0,f,c
  7317  003F64  501E               	movf	(___aldiv@divisor+1)^0,w,c
  7318  003F66  5A1A               	subwfb	(___aldiv@dividend+1)^0,f,c
  7319  003F68  501F               	movf	(___aldiv@divisor+2)^0,w,c
  7320  003F6A  5A1B               	subwfb	(___aldiv@dividend+2)^0,f,c
  7321  003F6C  5020               	movf	(___aldiv@divisor+3)^0,w,c
  7322  003F6E  5A1C               	subwfb	(___aldiv@dividend+3)^0,f,c
  7323  003F70  8023               	bsf	___aldiv@quotient^0,0,c
  7324  003F72                     l10674:
  7325  003F72  90D8               	bcf	status,0,c
  7326  003F74  3220               	rrcf	(___aldiv@divisor+3)^0,f,c
  7327  003F76  321F               	rrcf	(___aldiv@divisor+2)^0,f,c
  7328  003F78  321E               	rrcf	(___aldiv@divisor+1)^0,f,c
  7329  003F7A  321D               	rrcf	___aldiv@divisor^0,f,c
  7330  003F7C  2E21               	decfsz	___aldiv@counter^0,f,c
  7331  003F7E  D7E1               	goto	u12520
  7332  003F80                     l10678:
  7333  003F80  5022               	movf	___aldiv@sign^0,w,c
  7334  003F82  B4D8               	btfsc	status,2,c
  7335  003F84  D008               	goto	l10682
  7336  003F86  1E26               	comf	(___aldiv@quotient+3)^0,f,c
  7337  003F88  1E25               	comf	(___aldiv@quotient+2)^0,f,c
  7338  003F8A  1E24               	comf	(___aldiv@quotient+1)^0,f,c
  7339  003F8C  6C23               	negf	___aldiv@quotient^0,c
  7340  003F8E  0E00               	movlw	0
  7341  003F90  2224               	addwfc	(___aldiv@quotient+1)^0,f,c
  7342  003F92  2225               	addwfc	(___aldiv@quotient+2)^0,f,c
  7343  003F94  2226               	addwfc	(___aldiv@quotient+3)^0,f,c
  7344  003F96                     l10682:
  7345  003F96  C023  F019         	movff	___aldiv@quotient,?___aldiv
  7346  003F9A  C024  F01A         	movff	___aldiv@quotient+1,?___aldiv+1
  7347  003F9E  C025  F01B         	movff	___aldiv@quotient+2,?___aldiv+2
  7348  003FA2  C026  F01C         	movff	___aldiv@quotient+3,?___aldiv+3
  7349  003FA6  0012               	return		;funcret
  7350  003FA8                     __end_of___aldiv:
  7351                           	callstack 0
  7352                           
  7353 ;; *************** function _inicializa_SPI *****************
  7354 ;; Defined at:
  7355 ;;		line 48 in file "bibliotecas/SPI.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;		None
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;		None
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  1    wreg      void 
  7362 ;; Registers used:
  7363 ;;		wreg, status,2, status,0
  7364 ;; Tracked objects:
  7365 ;;		On entry : 3F/0
  7366 ;;		On exit  : 3F/0
  7367 ;;		Unchanged: 3F/0
  7368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7369 ;;      Params:         0       0       0       0       0       0       0       0       0
  7370 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7371 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7372 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7373 ;;Total ram usage:        0 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:    3
  7376 ;; This function calls:
  7377 ;;		Nothing
  7378 ;; This function is called by:
  7379 ;;		_escrita_sdcard
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           	psect	text41
  7384  0052EA                     __ptext41:
  7385                           	callstack 0
  7386  0052EA                     _inicializa_SPI:
  7387                           	callstack 24
  7388                           
  7389                           ; BSR set to: 0
  7390                           ;SPI.c: 50: TRISBbits.RB1 = 0;
  7391                           
  7392                           ;incstack = 0
  7393  0052EA  9293               	bcf	147,1,c	;volatile
  7394                           
  7395                           ;SPI.c: 51: TRISBbits.RB4 = 0;
  7396  0052EC  9893               	bcf	147,4,c	;volatile
  7397                           
  7398                           ;SPI.c: 52: TRISBbits.RB0 = 1;
  7399  0052EE  8093               	bsf	147,0,c	;volatile
  7400                           
  7401                           ;SPI.c: 53: TRISCbits.RC7 = 0;
  7402  0052F0  9E94               	bcf	148,7,c	;volatile
  7403                           
  7404                           ;SPI.c: 55: LATBbits.LATB4 = 1;
  7405  0052F2  888A               	bsf	138,4,c	;volatile
  7406                           
  7407                           ; BSR set to: 0
  7408                           ;SPI.c: 56: SSPSTAT &= 0x3F;
  7409  0052F4  0E3F               	movlw	63
  7410  0052F6  16C7               	andwf	199,f,c	;volatile
  7411                           
  7412                           ; BSR set to: 0
  7413                           ;SPI.c: 57: SSPCON1 = 0x00;
  7414  0052F8  0E00               	movlw	0
  7415  0052FA  6EC6               	movwf	198,c	;volatile
  7416                           
  7417                           ; BSR set to: 0
  7418                           ;SPI.c: 59: SSPSTATbits.SMP = 0;
  7419  0052FC  9EC7               	bcf	199,7,c	;volatile
  7420                           
  7421                           ; BSR set to: 0
  7422                           ;SPI.c: 60: SSPSTATbits.CKE = 1;
  7423  0052FE  8CC7               	bsf	199,6,c	;volatile
  7424                           
  7425                           ; BSR set to: 0
  7426                           ;SPI.c: 61: SSPCON1bits.CKP = 0;
  7427  005300  98C6               	bcf	198,4,c	;volatile
  7428                           
  7429                           ; BSR set to: 0
  7430                           ;SPI.c: 63: SSPCON1 = 0b00000011;
  7431  005302  0E03               	movlw	3
  7432  005304  6EC6               	movwf	198,c	;volatile
  7433                           
  7434                           ; BSR set to: 0
  7435                           ;SPI.c: 65: SSPCON1bits.SSPEN = 1;
  7436  005306  8AC6               	bsf	198,5,c	;volatile
  7437                           
  7438                           ; BSR set to: 0
  7439  005308  0012               	return		;funcret
  7440  00530A                     __end_of_inicializa_SPI:
  7441                           	callstack 0
  7442                           
  7443 ;; *************** function _fprintf *****************
  7444 ;; Defined at:
  7445 ;;		line 1816 in file "bibliotecas/tff.c"
  7446 ;; Parameters:    Size  Location     Type
  7447 ;;  fil             2  122[BANK0 ] PTR struct _FIL
  7448 ;;		 -> fil(28), 
  7449 ;;  str             2  124[BANK0 ] PTR const unsigned char 
  7450 ;;		 -> STR_14(35), 
  7451 ;; Auto vars:     Size  Location     Type
  7452 ;;  s              16    0[BANK2 ] unsigned char [16]
  7453 ;;  val             4   24[BANK2 ] unsigned long 
  7454 ;;  i               2   31[BANK2 ] int 
  7455 ;;  cc              2   29[BANK2 ] int 
  7456 ;;  w               2   20[BANK2 ] int 
  7457 ;;  res             2   16[BANK2 ] int 
  7458 ;;  c               1   33[BANK2 ] unsigned char 
  7459 ;;  arp             1   28[BANK2 ] PTR void [1]
  7460 ;;		 -> ?_fprintf(2), 
  7461 ;;  r               1   23[BANK2 ] unsigned char 
  7462 ;;  f               1   22[BANK2 ] unsigned char 
  7463 ;; Return value:  Size  Location     Type
  7464 ;;                  2  122[BANK0 ] int 
  7465 ;; Registers used:
  7466 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7467 ;; Tracked objects:
  7468 ;;		On entry : 3F/0
  7469 ;;		On exit  : 3F/2
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7472 ;;      Params:         0      20       0       0       0       0       0       0       0
  7473 ;;      Locals:         0       0       0      34       0       0       0       0       0
  7474 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7475 ;;      Totals:         0      22       0      34       0       0       0       0       0
  7476 ;;Total ram usage:       56 bytes
  7477 ;; Hardware stack levels used:    1
  7478 ;; Hardware stack levels required when called:   14
  7479 ;; This function calls:
  7480 ;;		___lldiv
  7481 ;;		___llmod
  7482 ;;		___wmul
  7483 ;;		_fputc
  7484 ;;		_fputs
  7485 ;; This function is called by:
  7486 ;;		_escrita_sdcard
  7487 ;; This function uses a non-reentrant model
  7488 ;;
  7489                           
  7490                           	psect	text42
  7491  000F6E                     __ptext42:
  7492                           	callstack 0
  7493  000F6E                     _fprintf:
  7494                           	callstack 13
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;tff.c: 1822: va_list arp;;tff.c: 1823: UCHAR c, f, r;;tff.c: 1824: ULONG val;;tff.c: 18
      +                          25: char s[16];;tff.c: 1826: int i, w, res, cc;;tff.c: 1829: *arp = __va_start();
  7498                           
  7499                           ; BSR set to: 0
  7500                           ;incstack = 0
  7501  000F6E  0EDE               	movlw	low (?_fprintf+4)
  7502  000F70  0102               	movlb	2	; () banked
  7503  000F72  6FA7               	movwf	fprintf@arp& (0+255),b
  7504                           
  7505                           ; BSR set to: 2
  7506                           ;tff.c: 1831: for (cc = res = 0; cc != -1; res += cc) {
  7507  000F74  0E00               	movlw	0
  7508  000F76  6F9C               	movwf	(fprintf@res+1)& (0+255),b
  7509  000F78  0E00               	movlw	0
  7510  000F7A  6F9B               	movwf	fprintf@res& (0+255),b
  7511  000F7C  C29B  F2A8         	movff	fprintf@res,fprintf@cc
  7512  000F80  C29C  F2A9         	movff	fprintf@res+1,fprintf@cc+1
  7513  000F84                     l11358:
  7514                           
  7515                           ; BSR set to: 2
  7516  000F84  29A8               	incf	fprintf@cc& (0+255),w,b
  7517  000F86  E103               	bnz	l11362
  7518  000F88  29A9               	incf	(fprintf@cc+1)& (0+255),w,b
  7519  000F8A  B4D8               	btfsc	status,2,c
  7520  000F8C  0012               	return	
  7521  000F8E                     l11362:
  7522                           
  7523                           ; BSR set to: 2
  7524                           ;tff.c: 1832: c = *str++;
  7525  000F8E  C0DC  FFF6         	movff	fprintf@str,tblptrl
  7526  000F92  C0DD  FFF7         	movff	fprintf@str+1,tblptrh
  7527  000F96                     	if	0	;tblptru may be non-zero
  7528  000F96                     	endif
  7529  000F96                     	if	0	;tblptru may be non-zero
  7530  000F96                     	endif
  7531  000F96  0008               	tblrd		*
  7532  000F98  CFF5 F2AC          	movff	tablat,fprintf@c
  7533                           
  7534                           ; BSR set to: 2
  7535  000F9C  0100               	movlb	0	; () banked
  7536  000F9E  4BDC               	infsnz	fprintf@str& (0+255),f,b
  7537  000FA0  2BDD               	incf	(fprintf@str+1)& (0+255),f,b
  7538                           
  7539                           ; BSR set to: 0
  7540                           ;tff.c: 1833: if (c == 0) break;
  7541  000FA2  0102               	movlb	2	; () banked
  7542  000FA4  51AC               	movf	fprintf@c& (0+255),w,b
  7543  000FA6  B4D8               	btfsc	status,2,c
  7544  000FA8  0012               	return	
  7545                           
  7546                           ; BSR set to: 2
  7547                           ;tff.c: 1834: if (c != '%') {
  7548  000FAA  0E25               	movlw	37
  7549  000FAC  19AC               	xorwf	fprintf@c& (0+255),w,b
  7550  000FAE  B4D8               	btfsc	status,2,c
  7551  000FB0  D019               	goto	l11378
  7552                           
  7553                           ; BSR set to: 2
  7554                           ;tff.c: 1835: cc = fputc(c, fil);
  7555  000FB2  C2AC  F0CC         	movff	fprintf@c,fputc@chr
  7556  000FB6  0100               	movlb	0	; () banked
  7557  000FB8  6BCD               	clrf	(fputc@chr+1)& (0+255),b
  7558  000FBA  C0DA  F0CE         	movff	fprintf@fil,fputc@fil
  7559  000FBE  C0DB  F0CF         	movff	fprintf@fil+1,fputc@fil+1
  7560  000FC2  ECA8  F027         	call	_fputc	;wreg free
  7561  000FC6  C0CC  F2A8         	movff	?_fputc,fprintf@cc
  7562  000FCA  C0CD  F2A9         	movff	?_fputc+1,fprintf@cc+1
  7563                           
  7564                           ; BSR set to: 0
  7565                           ;tff.c: 1836: if (cc != -1) cc = 1;
  7566  000FCE  0102               	movlb	2	; () banked
  7567  000FD0  29A8               	incf	fprintf@cc& (0+255),w,b
  7568  000FD2  E103               	bnz	u13770
  7569  000FD4  29A9               	incf	(fprintf@cc+1)& (0+255),w,b
  7570  000FD6  B4D8               	btfsc	status,2,c
  7571  000FD8  D183               	goto	l11502
  7572  000FDA                     u13770:
  7573                           
  7574                           ; BSR set to: 2
  7575  000FDA  0E00               	movlw	0
  7576  000FDC  6FA9               	movwf	(fprintf@cc+1)& (0+255),b
  7577  000FDE  0E01               	movlw	1
  7578  000FE0  6FA8               	movwf	fprintf@cc& (0+255),b
  7579  000FE2  D17E               	goto	l11502
  7580  000FE4                     l11378:
  7581                           
  7582                           ; BSR set to: 2
  7583                           ;tff.c: 1838: };tff.c: 1839: w = f = 0;
  7584  000FE4  0E00               	movlw	0
  7585  000FE6  6FA1               	movwf	fprintf@f& (0+255),b
  7586  000FE8  C2A1  F29F         	movff	fprintf@f,fprintf@w
  7587  000FEC  6BA0               	clrf	(fprintf@w+1)& (0+255),b
  7588                           
  7589                           ; BSR set to: 2
  7590                           ;tff.c: 1840: c = *str++;
  7591  000FEE  C0DC  FFF6         	movff	fprintf@str,tblptrl
  7592  000FF2  C0DD  FFF7         	movff	fprintf@str+1,tblptrh
  7593  000FF6                     	if	0	;tblptru may be non-zero
  7594  000FF6                     	endif
  7595  000FF6                     	if	0	;tblptru may be non-zero
  7596  000FF6                     	endif
  7597  000FF6  0008               	tblrd		*
  7598  000FF8  CFF5 F2AC          	movff	tablat,fprintf@c
  7599                           
  7600                           ; BSR set to: 2
  7601  000FFC  0100               	movlb	0	; () banked
  7602  000FFE  4BDC               	infsnz	fprintf@str& (0+255),f,b
  7603  001000  2BDD               	incf	(fprintf@str+1)& (0+255),f,b
  7604                           
  7605                           ; BSR set to: 0
  7606                           ;tff.c: 1841: if (c == '0') {
  7607  001002  0E30               	movlw	48
  7608  001004  0102               	movlb	2	; () banked
  7609  001006  19AC               	xorwf	fprintf@c& (0+255),w,b
  7610  001008  A4D8               	btfss	status,2,c
  7611  00100A  D023               	goto	l11398
  7612                           
  7613                           ; BSR set to: 2
  7614                           ;tff.c: 1842: f = 1; c = *str++;
  7615  00100C  0E01               	movlw	1
  7616  00100E  6FA1               	movwf	fprintf@f& (0+255),b
  7617  001010                     l11388:
  7618                           
  7619                           ; BSR set to: 2
  7620  001010  C0DC  FFF6         	movff	fprintf@str,tblptrl
  7621  001014  C0DD  FFF7         	movff	fprintf@str+1,tblptrh
  7622  001018                     	if	0	;tblptru may be non-zero
  7623  001018                     	endif
  7624  001018                     	if	0	;tblptru may be non-zero
  7625  001018                     	endif
  7626  001018  0008               	tblrd		*
  7627  00101A  CFF5 F2AC          	movff	tablat,fprintf@c
  7628                           
  7629                           ; BSR set to: 2
  7630  00101E  0100               	movlb	0	; () banked
  7631  001020  4BDC               	infsnz	fprintf@str& (0+255),f,b
  7632  001022  2BDD               	incf	(fprintf@str+1)& (0+255),f,b
  7633  001024  D016               	goto	l11398
  7634  001026                     l11392:
  7635                           
  7636                           ; BSR set to: 2
  7637                           ;tff.c: 1845: w = w * 10 + (c - '0');
  7638  001026  C29F  F019         	movff	fprintf@w,___wmul@multiplier
  7639  00102A  C2A0  F01A         	movff	fprintf@w+1,___wmul@multiplier+1
  7640  00102E  0E00               	movlw	0
  7641  001030  6E1C               	movwf	(___wmul@multiplicand+1)^0,c
  7642  001032  0E0A               	movlw	10
  7643  001034  6E1B               	movwf	___wmul@multiplicand^0,c
  7644  001036  ECEA  F028         	call	___wmul	;wreg free
  7645  00103A  0102               	movlb	2	; () banked
  7646  00103C  51AC               	movf	fprintf@c& (0+255),w,b
  7647  00103E  2619               	addwf	?___wmul^0,f,c
  7648  001040  0E00               	movlw	0
  7649  001042  221A               	addwfc	(?___wmul+1)^0,f,c
  7650  001044  0ED0               	movlw	208
  7651  001046  2419               	addwf	?___wmul^0,w,c
  7652  001048  6F9F               	movwf	fprintf@w& (0+255),b
  7653  00104A  0EFF               	movlw	255
  7654  00104C  201A               	addwfc	(?___wmul+1)^0,w,c
  7655  00104E  6FA0               	movwf	(fprintf@w+1)& (0+255),b
  7656  001050  D7DF               	goto	l11388
  7657  001052                     l11398:
  7658  001052  0E2F               	movlw	47
  7659  001054  0102               	movlb	2	; () banked
  7660  001056  65AC               	cpfsgt	fprintf@c& (0+255),b
  7661  001058  D003               	goto	u13800
  7662                           
  7663                           ; BSR set to: 2
  7664  00105A  0E39               	movlw	57
  7665  00105C  65AC               	cpfsgt	fprintf@c& (0+255),b
  7666  00105E  D7E3               	goto	l11392
  7667  001060                     u13800:
  7668                           
  7669                           ; BSR set to: 2
  7670                           ;tff.c: 1847: };tff.c: 1848: if (c == 'l') {
  7671  001060  0E6C               	movlw	108
  7672  001062  19AC               	xorwf	fprintf@c& (0+255),w,b
  7673  001064  A4D8               	btfss	status,2,c
  7674  001066  D00B               	goto	l11410
  7675                           
  7676                           ; BSR set to: 2
  7677                           ;tff.c: 1849: f |= 2; c = *str++;
  7678  001068  83A1               	bsf	fprintf@f& (0+255),1,b
  7679                           
  7680                           ; BSR set to: 2
  7681  00106A  C0DC  FFF6         	movff	fprintf@str,tblptrl
  7682  00106E  C0DD  FFF7         	movff	fprintf@str+1,tblptrh
  7683  001072                     	if	0	;tblptru may be non-zero
  7684  001072                     	endif
  7685  001072                     	if	0	;tblptru may be non-zero
  7686  001072                     	endif
  7687  001072  0008               	tblrd		*
  7688  001074  CFF5 F2AC          	movff	tablat,fprintf@c
  7689                           
  7690                           ; BSR set to: 2
  7691  001078  0100               	movlb	0	; () banked
  7692  00107A  4BDC               	infsnz	fprintf@str& (0+255),f,b
  7693  00107C  2BDD               	incf	(fprintf@str+1)& (0+255),f,b
  7694  00107E                     l11410:
  7695                           
  7696                           ;tff.c: 1850: };tff.c: 1851: if (c == 's') {
  7697  00107E  0E73               	movlw	115
  7698  001080  0102               	movlb	2	; () banked
  7699  001082  19AC               	xorwf	fprintf@c& (0+255),w,b
  7700  001084  A4D8               	btfss	status,2,c
  7701  001086  D015               	goto	l11416
  7702                           
  7703                           ; BSR set to: 2
  7704                           ;tff.c: 1852: cc = fputs((*(char* *)__va_arg((*(char* **)arp), (char*)0)), fil);
  7705  001088  51A7               	movf	fprintf@arp& (0+255),w,b
  7706  00108A  6ED9               	movwf	fsr2l,c
  7707  00108C  6ADA               	clrf	fsr2h,c
  7708  00108E  CFDE F0D3          	movff	postinc2,fputs@str
  7709  001092  CFDD F0D4          	movff	postdec2,fputs@str+1
  7710  001096  C0DA  F0D5         	movff	fprintf@fil,fputs@fil
  7711  00109A  C0DB  F0D6         	movff	fprintf@fil+1,fputs@fil+1
  7712  00109E  ECEB  F022         	call	_fputs	;wreg free
  7713  0010A2  C0D3  F2A8         	movff	?_fputs,fprintf@cc
  7714  0010A6  C0D4  F2A9         	movff	?_fputs+1,fprintf@cc+1
  7715  0010AA  0E02               	movlw	2
  7716  0010AC  0102               	movlb	2	; () banked
  7717  0010AE  27A7               	addwf	fprintf@arp& (0+255),f,b
  7718                           
  7719                           ;tff.c: 1853: continue;
  7720  0010B0  D117               	goto	l11502
  7721  0010B2                     l11416:
  7722                           
  7723                           ; BSR set to: 2
  7724                           ;tff.c: 1854: };tff.c: 1855: if (c == 'c') {
  7725  0010B2  0E63               	movlw	99
  7726  0010B4  19AC               	xorwf	fprintf@c& (0+255),w,b
  7727  0010B6  A4D8               	btfss	status,2,c
  7728  0010B8  D01D               	goto	l11426
  7729                           
  7730                           ; BSR set to: 2
  7731                           ;tff.c: 1856: cc = fputc((*(char *)__va_arg((*(char **)arp), (char)0)), fil);
  7732  0010BA  51A7               	movf	fprintf@arp& (0+255),w,b
  7733  0010BC  6ED9               	movwf	fsr2l,c
  7734  0010BE  6ADA               	clrf	fsr2h,c
  7735  0010C0  50DF               	movf	indf2,w,c
  7736  0010C2  0100               	movlb	0	; () banked
  7737  0010C4  6FEE               	movwf	??_fprintf& (0+255),b
  7738  0010C6  51EE               	movf	??_fprintf& (0+255),w,b
  7739  0010C8  6FCC               	movwf	fputc@chr& (0+255),b
  7740  0010CA  6BCD               	clrf	(fputc@chr+1)& (0+255),b
  7741  0010CC  C0DA  F0CE         	movff	fprintf@fil,fputc@fil
  7742  0010D0  C0DB  F0CF         	movff	fprintf@fil+1,fputc@fil+1
  7743  0010D4  ECA8  F027         	call	_fputc	;wreg free
  7744  0010D8  C0CC  F2A8         	movff	?_fputc,fprintf@cc
  7745  0010DC  C0CD  F2A9         	movff	?_fputc+1,fprintf@cc+1
  7746                           
  7747                           ; BSR set to: 0
  7748  0010E0  0E02               	movlw	2
  7749  0010E2  0102               	movlb	2	; () banked
  7750  0010E4  27A7               	addwf	fprintf@arp& (0+255),f,b
  7751                           
  7752                           ; BSR set to: 2
  7753                           ;tff.c: 1857: if (cc != -1) cc = 1;
  7754  0010E6  29A8               	incf	fprintf@cc& (0+255),w,b
  7755  0010E8  E104               	bnz	u13840
  7756  0010EA  29A9               	incf	(fprintf@cc+1)& (0+255),w,b
  7757  0010EC  A4D8               	btfss	status,2,c
  7758  0010EE  D775               	goto	u13770
  7759  0010F0  D0F7               	goto	l11502
  7760  0010F2                     u13840:
  7761  0010F2  D773               	goto	u13770
  7762  0010F4                     l11426:
  7763                           
  7764                           ; BSR set to: 2
  7765                           ;tff.c: 1859: };tff.c: 1860: r = 0;
  7766  0010F4  0E00               	movlw	0
  7767  0010F6  6FA2               	movwf	fprintf@r& (0+255),b
  7768                           
  7769                           ; BSR set to: 2
  7770                           ;tff.c: 1861: if (c == 'd') r = 10;
  7771  0010F8  0E64               	movlw	100
  7772  0010FA  19AC               	xorwf	fprintf@c& (0+255),w,b
  7773  0010FC  A4D8               	btfss	status,2,c
  7774  0010FE  D002               	goto	l11432
  7775                           
  7776                           ; BSR set to: 2
  7777  001100  0E0A               	movlw	10
  7778  001102  6FA2               	movwf	fprintf@r& (0+255),b
  7779  001104                     l11432:
  7780                           
  7781                           ; BSR set to: 2
  7782                           ;tff.c: 1862: if (c == 'u') r = 10;
  7783  001104  0E75               	movlw	117
  7784  001106  19AC               	xorwf	fprintf@c& (0+255),w,b
  7785  001108  A4D8               	btfss	status,2,c
  7786  00110A  D002               	goto	l11436
  7787                           
  7788                           ; BSR set to: 2
  7789  00110C  0E0A               	movlw	10
  7790  00110E  6FA2               	movwf	fprintf@r& (0+255),b
  7791  001110                     l11436:
  7792                           
  7793                           ; BSR set to: 2
  7794                           ;tff.c: 1863: if (c == 'X') r = 16;
  7795  001110  0E58               	movlw	88
  7796  001112  19AC               	xorwf	fprintf@c& (0+255),w,b
  7797  001114  A4D8               	btfss	status,2,c
  7798  001116  D002               	goto	l1130
  7799                           
  7800                           ; BSR set to: 2
  7801  001118  0E10               	movlw	16
  7802  00111A  6FA2               	movwf	fprintf@r& (0+255),b
  7803  00111C                     l1130:
  7804                           
  7805                           ; BSR set to: 2
  7806                           ;tff.c: 1864: if (r == 0) break;
  7807  00111C  51A2               	movf	fprintf@r& (0+255),w,b
  7808  00111E  B4D8               	btfsc	status,2,c
  7809  001120  0012               	return	
  7810                           
  7811                           ; BSR set to: 2
  7812                           ;tff.c: 1865: if (f & 2) {
  7813  001122  A3A1               	btfss	fprintf@f& (0+255),1,b
  7814  001124  D00D               	goto	l11446
  7815                           
  7816                           ; BSR set to: 2
  7817                           ;tff.c: 1866: val = (ULONG)(*(long *)__va_arg((*(long **)arp), (long)0));
  7818  001126  51A7               	movf	fprintf@arp& (0+255),w,b
  7819  001128  6ED9               	movwf	fsr2l,c
  7820  00112A  6ADA               	clrf	fsr2h,c
  7821  00112C  CFDE F2A3          	movff	postinc2,fprintf@val
  7822  001130  CFDE F2A4          	movff	postinc2,fprintf@val+1
  7823  001134  CFDE F2A5          	movff	postinc2,fprintf@val+2
  7824  001138  CFDE F2A6          	movff	postinc2,fprintf@val+3
  7825                           
  7826                           ; BSR set to: 2
  7827  00113C  0E04               	movlw	4
  7828  00113E  D01F               	goto	L1
  7829  001140                     l11446:
  7830                           
  7831                           ; BSR set to: 2
  7832                           ;tff.c: 1868: val = (c == 'd') ? (ULONG)(long)(*(int *)__va_arg((*(int **)arp), (int)0))
      +                           : (ULONG)(*(unsigned int *)__va_arg((*(unsigned int **)arp), (unsigned int)0));
  7833  001140  0E64               	movlw	100
  7834  001142  19AC               	xorwf	fprintf@c& (0+255),w,b
  7835  001144  B4D8               	btfsc	status,2,c
  7836  001146  D00E               	goto	l11452
  7837                           
  7838                           ; BSR set to: 2
  7839  001148  51A7               	movf	fprintf@arp& (0+255),w,b
  7840  00114A  6ED9               	movwf	fsr2l,c
  7841  00114C  6ADA               	clrf	fsr2h,c
  7842  00114E  CFDE F0EE          	movff	postinc2,??_fprintf
  7843  001152  CFDD F0EF          	movff	postdec2,??_fprintf+1
  7844  001156  C0EE  F2A3         	movff	??_fprintf,fprintf@val
  7845  00115A  C0EF  F2A4         	movff	??_fprintf+1,fprintf@val+1
  7846  00115E  6BA5               	clrf	(fprintf@val+2)& (0+255),b
  7847  001160  6BA6               	clrf	(fprintf@val+3)& (0+255),b
  7848  001162  D00C               	goto	l11454
  7849  001164                     l11452:
  7850                           
  7851                           ; BSR set to: 2
  7852  001164  51A7               	movf	fprintf@arp& (0+255),w,b
  7853  001166  6ED9               	movwf	fsr2l,c
  7854  001168  6ADA               	clrf	fsr2h,c
  7855  00116A  CFDE F2A3          	movff	postinc2,fprintf@val
  7856  00116E  CFDD F2A4          	movff	postdec2,fprintf@val+1
  7857  001172  0E00               	movlw	0
  7858  001174  BFA4               	btfsc	(fprintf@val+1)& (0+255),7,b
  7859  001176  0EFF               	movlw	-1
  7860  001178  6FA5               	movwf	(fprintf@val+2)& (0+255),b
  7861  00117A  6FA6               	movwf	(fprintf@val+3)& (0+255),b
  7862  00117C                     l11454:
  7863                           
  7864                           ; BSR set to: 2
  7865  00117C  0E02               	movlw	2
  7866  00117E                     L1:
  7867  00117E  27A7               	addwf	fprintf@arp& (0+255),f,b
  7868                           
  7869                           ; BSR set to: 2
  7870                           ;tff.c: 1869: };tff.c: 1871: if (c == 'd') {
  7871  001180  0E64               	movlw	100
  7872  001182  19AC               	xorwf	fprintf@c& (0+255),w,b
  7873  001184  A4D8               	btfss	status,2,c
  7874  001186  D00E               	goto	l11464
  7875                           
  7876                           ; BSR set to: 2
  7877                           ;tff.c: 1872: if (val >= 0x80000000) {
  7878  001188  0E80               	movlw	128
  7879  00118A  5DA6               	subwf	(fprintf@val+3)& (0+255),w,b
  7880  00118C  A0D8               	btfss	status,0,c
  7881  00118E  D00A               	goto	l11464
  7882                           
  7883                           ; BSR set to: 2
  7884                           ;tff.c: 1873: val = 0 - val;
  7885  001190  6DA3               	negf	fprintf@val& (0+255),b
  7886  001192  1FA4               	comf	(fprintf@val+1)& (0+255),f,b
  7887  001194  B0D8               	btfsc	status,0,c
  7888  001196  2BA4               	incf	(fprintf@val+1)& (0+255),f,b
  7889  001198  1FA5               	comf	(fprintf@val+2)& (0+255),f,b
  7890  00119A  B0D8               	btfsc	status,0,c
  7891  00119C  2BA5               	incf	(fprintf@val+2)& (0+255),f,b
  7892  00119E  0E00               	movlw	0
  7893  0011A0  57A6               	subfwb	(fprintf@val+3)& (0+255),f,b
  7894                           
  7895                           ; BSR set to: 2
  7896                           ;tff.c: 1874: f |= 4;
  7897  0011A2  85A1               	bsf	fprintf@f& (0+255),2,b
  7898  0011A4                     l11464:
  7899                           
  7900                           ; BSR set to: 2
  7901                           ;tff.c: 1875: };tff.c: 1876: };tff.c: 1877: i = sizeof(s) - 1; s[i] = 0;
  7902  0011A4  0E00               	movlw	0
  7903  0011A6  6FAB               	movwf	(fprintf@i+1)& (0+255),b
  7904  0011A8  0E0F               	movlw	15
  7905  0011AA  6FAA               	movwf	fprintf@i& (0+255),b
  7906                           
  7907                           ; BSR set to: 2
  7908  0011AC  0E00               	movlw	0
  7909  0011AE  6F9A               	movwf	(fprintf@s+15)& (0+255),b
  7910  0011B0                     l11468:
  7911                           
  7912                           ; BSR set to: 2
  7913                           ;tff.c: 1879: c = (UCHAR)(val % r + '0');
  7914  0011B0  C2A3  F019         	movff	fprintf@val,___llmod@dividend
  7915  0011B4  C2A4  F01A         	movff	fprintf@val+1,___llmod@dividend+1
  7916  0011B8  C2A5  F01B         	movff	fprintf@val+2,___llmod@dividend+2
  7917  0011BC  C2A6  F01C         	movff	fprintf@val+3,___llmod@dividend+3
  7918  0011C0  51A2               	movf	fprintf@r& (0+255),w,b
  7919  0011C2  6E1D               	movwf	___llmod@divisor^0,c
  7920  0011C4  6A1E               	clrf	(___llmod@divisor+1)^0,c
  7921  0011C6  6A1F               	clrf	(___llmod@divisor+2)^0,c
  7922  0011C8  6A20               	clrf	(___llmod@divisor+3)^0,c
  7923  0011CA  EC09  F025         	call	___llmod	;wreg free
  7924  0011CE  5019               	movf	?___llmod^0,w,c
  7925  0011D0  0F30               	addlw	48
  7926  0011D2  6FAC               	movwf	fprintf@c& (0+255),b
  7927                           
  7928                           ; BSR set to: 2
  7929                           ;tff.c: 1880: if (c > '9') c += 7;
  7930  0011D4  0E39               	movlw	57
  7931  0011D6  65AC               	cpfsgt	fprintf@c& (0+255),b
  7932  0011D8  D002               	goto	l11474
  7933                           
  7934                           ; BSR set to: 2
  7935  0011DA  0E07               	movlw	7
  7936  0011DC  27AC               	addwf	fprintf@c& (0+255),f,b
  7937  0011DE                     l11474:
  7938                           
  7939                           ; BSR set to: 2
  7940                           ;tff.c: 1881: s[--i] = c;
  7941  0011DE  07AA               	decf	fprintf@i& (0+255),f,b
  7942  0011E0  A0D8               	btfss	status,0,c
  7943  0011E2  07AB               	decf	(fprintf@i+1)& (0+255),f,b
  7944  0011E4  0E8B               	movlw	low fprintf@s
  7945  0011E6  25AA               	addwf	fprintf@i& (0+255),w,b
  7946  0011E8  6ED9               	movwf	fsr2l,c
  7947  0011EA  0E02               	movlw	high fprintf@s
  7948  0011EC  21AB               	addwfc	(fprintf@i+1)& (0+255),w,b
  7949  0011EE  6EDA               	movwf	fsr2h,c
  7950  0011F0  C2AC  FFDF         	movff	fprintf@c,indf2
  7951                           
  7952                           ; BSR set to: 2
  7953                           ;tff.c: 1882: val /= r;
  7954  0011F4  C2A3  F019         	movff	fprintf@val,___lldiv@dividend
  7955  0011F8  C2A4  F01A         	movff	fprintf@val+1,___lldiv@dividend+1
  7956  0011FC  C2A5  F01B         	movff	fprintf@val+2,___lldiv@dividend+2
  7957  001200  C2A6  F01C         	movff	fprintf@val+3,___lldiv@dividend+3
  7958  001204  51A2               	movf	fprintf@r& (0+255),w,b
  7959  001206  6E1D               	movwf	___lldiv@divisor^0,c
  7960  001208  6A1E               	clrf	(___lldiv@divisor+1)^0,c
  7961  00120A  6A1F               	clrf	(___lldiv@divisor+2)^0,c
  7962  00120C  6A20               	clrf	(___lldiv@divisor+3)^0,c
  7963  00120E  ECB3  F023         	call	___lldiv	;wreg free
  7964  001212  C019  F2A3         	movff	?___lldiv,fprintf@val
  7965  001216  C01A  F2A4         	movff	?___lldiv+1,fprintf@val+1
  7966  00121A  C01B  F2A5         	movff	?___lldiv+2,fprintf@val+2
  7967  00121E  C01C  F2A6         	movff	?___lldiv+3,fprintf@val+3
  7968                           
  7969                           ;tff.c: 1883: } while (i && val);
  7970  001222  0102               	movlb	2	; () banked
  7971  001224  51AA               	movf	fprintf@i& (0+255),w,b
  7972  001226  11AB               	iorwf	(fprintf@i+1)& (0+255),w,b
  7973  001228  B4D8               	btfsc	status,2,c
  7974  00122A  D006               	goto	u13950
  7975                           
  7976                           ; BSR set to: 2
  7977  00122C  51A3               	movf	fprintf@val& (0+255),w,b
  7978  00122E  11A4               	iorwf	(fprintf@val+1)& (0+255),w,b
  7979  001230  11A5               	iorwf	(fprintf@val+2)& (0+255),w,b
  7980  001232  11A6               	iorwf	(fprintf@val+3)& (0+255),w,b
  7981  001234  A4D8               	btfss	status,2,c
  7982  001236  D7BC               	goto	l11468
  7983  001238                     u13950:
  7984                           
  7985                           ; BSR set to: 2
  7986                           ;tff.c: 1884: if (i && (f & 4)) s[--i] = '-';
  7987  001238  51AA               	movf	fprintf@i& (0+255),w,b
  7988  00123A  11AB               	iorwf	(fprintf@i+1)& (0+255),w,b
  7989  00123C  A4D8               	btfss	status,2,c
  7990                           
  7991                           ; BSR set to: 2
  7992  00123E  A5A1               	btfss	fprintf@f& (0+255),2,b
  7993  001240  D00B               	goto	l11488
  7994                           
  7995                           ; BSR set to: 2
  7996  001242  07AA               	decf	fprintf@i& (0+255),f,b
  7997  001244  A0D8               	btfss	status,0,c
  7998  001246  07AB               	decf	(fprintf@i+1)& (0+255),f,b
  7999  001248  0E8B               	movlw	low fprintf@s
  8000  00124A  25AA               	addwf	fprintf@i& (0+255),w,b
  8001  00124C  6ED9               	movwf	fsr2l,c
  8002  00124E  0E02               	movlw	high fprintf@s
  8003  001250  21AB               	addwfc	(fprintf@i+1)& (0+255),w,b
  8004  001252  6EDA               	movwf	fsr2h,c
  8005  001254  0E2D               	movlw	45
  8006  001256  6EDF               	movwf	indf2,c
  8007  001258                     l11488:
  8008                           
  8009                           ; BSR set to: 2
  8010                           ;tff.c: 1885: w = sizeof(s) - 1 - w;
  8011  001258  519F               	movf	fprintf@w& (0+255),w,b
  8012  00125A  080F               	sublw	15
  8013  00125C  6F9F               	movwf	fprintf@w& (0+255),b
  8014  00125E  51A0               	movf	(fprintf@w+1)& (0+255),w,b
  8015  001260  A0D8               	btfss	status,0,c
  8016  001262  2AE8               	incf	wreg,f,c
  8017  001264  0800               	sublw	0
  8018  001266  6FA0               	movwf	(fprintf@w+1)& (0+255),b
  8019                           
  8020                           ;tff.c: 1886: while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
  8021  001268  D016               	goto	l11496
  8022  00126A                     l1147:
  8023                           
  8024                           ; BSR set to: 0
  8025  00126A  0102               	movlb	2	; () banked
  8026  00126C  B1A1               	btfsc	fprintf@f& (0+255),0,b
  8027  00126E  D004               	goto	l11492
  8028                           
  8029                           ; BSR set to: 2
  8030  001270  0E00               	movlw	0
  8031  001272  6F9E               	movwf	(_fprintf$2130+1)& (0+255),b
  8032  001274  0E20               	movlw	32
  8033  001276  D003               	goto	L2
  8034  001278                     l11492:
  8035                           
  8036                           ; BSR set to: 2
  8037  001278  0E00               	movlw	0
  8038  00127A  6F9E               	movwf	(_fprintf$2130+1)& (0+255),b
  8039  00127C  0E30               	movlw	48
  8040  00127E                     L2:
  8041  00127E  6F9D               	movwf	_fprintf$2130& (0+255),b
  8042                           
  8043                           ; BSR set to: 2
  8044  001280  07AA               	decf	fprintf@i& (0+255),f,b
  8045  001282  A0D8               	btfss	status,0,c
  8046  001284  07AB               	decf	(fprintf@i+1)& (0+255),f,b
  8047  001286  0E8B               	movlw	low fprintf@s
  8048  001288  25AA               	addwf	fprintf@i& (0+255),w,b
  8049  00128A  6ED9               	movwf	fsr2l,c
  8050  00128C  0E02               	movlw	high fprintf@s
  8051  00128E  21AB               	addwfc	(fprintf@i+1)& (0+255),w,b
  8052  001290  6EDA               	movwf	fsr2h,c
  8053  001292  C29D  FFDF         	movff	_fprintf$2130,indf2
  8054  001296                     l11496:
  8055                           
  8056                           ; BSR set to: 2
  8057  001296  51AA               	movf	fprintf@i& (0+255),w,b
  8058  001298  11AB               	iorwf	(fprintf@i+1)& (0+255),w,b
  8059  00129A  B4D8               	btfsc	status,2,c
  8060  00129C  D00D               	goto	u14000
  8061                           
  8062                           ; BSR set to: 2
  8063  00129E  51AA               	movf	fprintf@i& (0+255),w,b
  8064  0012A0  5D9F               	subwf	fprintf@w& (0+255),w,b
  8065  0012A2  51A0               	movf	(fprintf@w+1)& (0+255),w,b
  8066  0012A4  0A80               	xorlw	128
  8067  0012A6  0100               	movlb	0	; () banked
  8068  0012A8  6FEE               	movwf	??_fprintf& (0+255),b
  8069  0012AA  0102               	movlb	2	; () banked
  8070  0012AC  51AB               	movf	(fprintf@i+1)& (0+255),w,b
  8071  0012AE  0A80               	xorlw	128
  8072  0012B0  0100               	movlb	0	; () banked
  8073  0012B2  59EE               	subwfb	??_fprintf& (0+255),w,b
  8074  0012B4  A0D8               	btfss	status,0,c
  8075  0012B6  D7D9               	goto	l1147
  8076  0012B8                     u14000:
  8077                           
  8078                           ;tff.c: 1887: cc = fputs(&s[i], fil);
  8079  0012B8  0E8B               	movlw	low fprintf@s
  8080  0012BA  0102               	movlb	2	; () banked
  8081  0012BC  25AA               	addwf	fprintf@i& (0+255),w,b
  8082  0012BE  0100               	movlb	0	; () banked
  8083  0012C0  6FD3               	movwf	fputs@str& (0+255),b
  8084  0012C2  0E02               	movlw	high fprintf@s
  8085  0012C4  0102               	movlb	2	; () banked
  8086  0012C6  21AB               	addwfc	(fprintf@i+1)& (0+255),w,b
  8087  0012C8  0100               	movlb	0	; () banked
  8088  0012CA  6FD4               	movwf	(fputs@str+1)& (0+255),b
  8089  0012CC  C0DA  F0D5         	movff	fprintf@fil,fputs@fil
  8090  0012D0  C0DB  F0D6         	movff	fprintf@fil+1,fputs@fil+1
  8091  0012D4  ECEB  F022         	call	_fputs	;wreg free
  8092  0012D8  C0D3  F2A8         	movff	?_fputs,fprintf@cc
  8093  0012DC  C0D4  F2A9         	movff	?_fputs+1,fprintf@cc+1
  8094  0012E0                     l11502:
  8095  0012E0  0102               	movlb	2	; () banked
  8096  0012E2  51A8               	movf	fprintf@cc& (0+255),w,b
  8097  0012E4  279B               	addwf	fprintf@res& (0+255),f,b
  8098  0012E6  51A9               	movf	(fprintf@cc+1)& (0+255),w,b
  8099  0012E8  239C               	addwfc	(fprintf@res+1)& (0+255),f,b
  8100  0012EA  D64C               	goto	l11358
  8101  0012EC                     __end_of_fprintf:
  8102                           	callstack 0
  8103                           
  8104 ;; *************** function _fputs *****************
  8105 ;; Defined at:
  8106 ;;		line 1796 in file "bibliotecas/tff.c"
  8107 ;; Parameters:    Size  Location     Type
  8108 ;;  str             2  115[BANK0 ] PTR const unsigned char 
  8109 ;;		 -> fprintf@s(16), ?_fprintf(2), STR_19(16), STR_18(27), 
  8110 ;;		 -> STR_17(17), STR_16(16), STR_15(16), string_dado(59), 
  8111 ;;  fil             2  117[BANK0 ] PTR struct _FIL
  8112 ;;		 -> fil(28), 
  8113 ;; Auto vars:     Size  Location     Type
  8114 ;;  n               2  120[BANK0 ] int 
  8115 ;; Return value:  Size  Location     Type
  8116 ;;                  2  115[BANK0 ] int 
  8117 ;; Registers used:
  8118 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8119 ;; Tracked objects:
  8120 ;;		On entry : 3D/2
  8121 ;;		On exit  : 0/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8124 ;;      Params:         0       4       0       0       0       0       0       0       0
  8125 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8126 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8127 ;;      Totals:         0       7       0       0       0       0       0       0       0
  8128 ;;Total ram usage:        7 bytes
  8129 ;; Hardware stack levels used:    1
  8130 ;; Hardware stack levels required when called:   13
  8131 ;; This function calls:
  8132 ;;		_fputc
  8133 ;; This function is called by:
  8134 ;;		_fprintf
  8135 ;; This function uses a non-reentrant model
  8136 ;;
  8137                           
  8138                           	psect	text43
  8139  0045D6                     __ptext43:
  8140                           	callstack 0
  8141  0045D6                     _fputs:
  8142                           	callstack 13
  8143                           
  8144                           ;tff.c: 1801: int n;;tff.c: 1804: for (n = 0; *str; str++, n++) {
  8145                           
  8146                           ; BSR set to: 2
  8147                           ;incstack = 0
  8148  0045D6  0E00               	movlw	0
  8149  0045D8  0100               	movlb	0	; () banked
  8150  0045DA  6FD9               	movwf	(fputs@n+1)& (0+255),b
  8151  0045DC  0E00               	movlw	0
  8152  0045DE  6FD8               	movwf	fputs@n& (0+255),b
  8153  0045E0  D027               	goto	l11066
  8154  0045E2                     l11060:
  8155                           
  8156                           ;tff.c: 1805: if (fputc(*str, fil) == -1) return -1;
  8157  0045E2  C0D3  FFF6         	movff	fputs@str,tblptrl
  8158  0045E6  C0D4  FFF7         	movff	fputs@str+1,tblptrh
  8159  0045EA  6AF8               	clrf	tblptru,c
  8160  0045EC  0E07               	movlw	(high __ramtop+-1)
  8161  0045EE  64F7               	cpfsgt	tblptrh,c
  8162  0045F0  D003               	bra	u13177
  8163  0045F2  0008               	tblrd		*
  8164  0045F4  50F5               	movf	tablat,w,c
  8165  0045F6  D005               	bra	u13170
  8166  0045F8                     u13177:
  8167  0045F8  CFF6 FFE1          	movff	tblptrl,fsr1l
  8168  0045FC  CFF7 FFE2          	movff	tblptrh,fsr1h
  8169  004600  50E7               	movf	indf1,w,c
  8170  004602                     u13170:
  8171  004602  0100               	movlb	0	; () banked
  8172  004604  6FD7               	movwf	??_fputs& (0+255),b
  8173  004606  51D7               	movf	??_fputs& (0+255),w,b
  8174  004608  6FCC               	movwf	fputc@chr& (0+255),b
  8175  00460A  6BCD               	clrf	(fputc@chr+1)& (0+255),b
  8176  00460C  C0D5  F0CE         	movff	fputs@fil,fputc@fil
  8177  004610  C0D6  F0CF         	movff	fputs@fil+1,fputc@fil+1
  8178  004614  ECA8  F027         	call	_fputc	;wreg free
  8179  004618  29CC               	incf	?_fputc& (0+255),w,b
  8180  00461A  E106               	bnz	l11064
  8181  00461C  29CD               	incf	(?_fputc+1)& (0+255),w,b
  8182  00461E  A4D8               	btfss	status,2,c
  8183  004620  D003               	goto	l11064
  8184                           
  8185                           ; BSR set to: 0
  8186  004622  69D3               	setf	?_fputs& (0+255),b
  8187  004624  69D4               	setf	(?_fputs+1)& (0+255),b
  8188  004626  0012               	return	
  8189  004628                     l11064:
  8190                           
  8191                           ; BSR set to: 0
  8192  004628  4BD3               	infsnz	fputs@str& (0+255),f,b
  8193  00462A  2BD4               	incf	(fputs@str+1)& (0+255),f,b
  8194  00462C  4BD8               	infsnz	fputs@n& (0+255),f,b
  8195  00462E  2BD9               	incf	(fputs@n+1)& (0+255),f,b
  8196  004630                     l11066:
  8197                           
  8198                           ; BSR set to: 0
  8199  004630  C0D3  FFF6         	movff	fputs@str,tblptrl
  8200  004634  C0D4  FFF7         	movff	fputs@str+1,tblptrh
  8201  004638  6AF8               	clrf	tblptru,c
  8202  00463A  0E07               	movlw	(high __ramtop+-1)
  8203  00463C  64F7               	cpfsgt	tblptrh,c
  8204  00463E  D003               	bra	u13197
  8205  004640  0008               	tblrd		*
  8206  004642  50F5               	movf	tablat,w,c
  8207  004644  D005               	bra	u13190
  8208  004646                     u13197:
  8209  004646  CFF6 FFE1          	movff	tblptrl,fsr1l
  8210  00464A  CFF7 FFE2          	movff	tblptrh,fsr1h
  8211  00464E  50E7               	movf	indf1,w,c
  8212  004650                     u13190:
  8213  004650  0900               	iorlw	0
  8214  004652  A4D8               	btfss	status,2,c
  8215  004654  D7C6               	goto	l11060
  8216                           
  8217                           ;tff.c: 1806: };tff.c: 1807: return n;
  8218  004656  C0D8  F0D3         	movff	fputs@n,?_fputs
  8219  00465A  C0D9  F0D4         	movff	fputs@n+1,?_fputs+1
  8220  00465E  0012               	return		;funcret
  8221  004660                     __end_of_fputs:
  8222                           	callstack 0
  8223                           
  8224 ;; *************** function _fputc *****************
  8225 ;; Defined at:
  8226 ;;		line 1769 in file "bibliotecas/tff.c"
  8227 ;; Parameters:    Size  Location     Type
  8228 ;;  chr             2  108[BANK0 ] int 
  8229 ;;  fil             2  110[BANK0 ] PTR struct _FIL
  8230 ;;		 -> fil(28), 
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;  bw              2  113[BANK0 ] unsigned int 
  8233 ;;  c               1  112[BANK0 ] unsigned char 
  8234 ;; Return value:  Size  Location     Type
  8235 ;;                  2  108[BANK0 ] int 
  8236 ;; Registers used:
  8237 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8238 ;; Tracked objects:
  8239 ;;		On entry : 3F/0
  8240 ;;		On exit  : 3F/0
  8241 ;;		Unchanged: 0/0
  8242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8243 ;;      Params:         0       4       0       0       0       0       0       0       0
  8244 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8245 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8246 ;;      Totals:         0       7       0       0       0       0       0       0       0
  8247 ;;Total ram usage:        7 bytes
  8248 ;; Hardware stack levels used:    1
  8249 ;; Hardware stack levels required when called:   12
  8250 ;; This function calls:
  8251 ;;		_f_write
  8252 ;; This function is called by:
  8253 ;;		_fputs
  8254 ;;		_fprintf
  8255 ;; This function uses a non-reentrant model
  8256 ;;
  8257                           
  8258                           	psect	text44
  8259  004F50                     __ptext44:
  8260                           	callstack 0
  8261  004F50                     _fputc:
  8262                           	callstack 13
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;tff.c: 1774: UINT bw;;tff.c: 1775: char c;;tff.c: 1781: if (!fil) {
  8266                           
  8267                           ;incstack = 0
  8268  004F50  51CE               	movf	fputc@fil& (0+255),w,b
  8269  004F52  11CF               	iorwf	(fputc@fil+1)& (0+255),w,b
  8270  004F54  A4D8               	btfss	status,2,c
  8271  004F56  D005               	goto	l1097
  8272  004F58                     u12440:
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;tff.c: 1783: return chr;
  8276  004F58  C0CC  F0CC         	movff	fputc@chr,?_fputc
  8277  004F5C  C0CD  F0CD         	movff	fputc@chr+1,?_fputc+1
  8278  004F60  0012               	return	
  8279  004F62                     l1097:
  8280                           
  8281                           ; BSR set to: 0
  8282                           ;tff.c: 1784: };tff.c: 1785: c = (char)chr;
  8283  004F62  C0CC  F0D0         	movff	fputc@chr,fputc@c
  8284                           
  8285                           ; BSR set to: 0
  8286                           ;tff.c: 1786: f_write(fil, &c, 1, &bw);
  8287  004F66  C0CE  F0AE         	movff	fputc@fil,f_write@fp
  8288  004F6A  C0CF  F0AF         	movff	fputc@fil+1,f_write@fp+1
  8289  004F6E  0ED0               	movlw	low fputc@c
  8290  004F70  6FB0               	movwf	f_write@buff& (0+255),b
  8291  004F72  0E00               	movlw	0
  8292  004F74  6FB2               	movwf	(f_write@btw+1)& (0+255),b
  8293  004F76  0E01               	movlw	1
  8294  004F78  6FB1               	movwf	f_write@btw& (0+255),b
  8295  004F7A  0ED1               	movlw	low fputc@bw
  8296  004F7C  6FB3               	movwf	f_write@bw& (0+255),b
  8297  004F7E  EC09  F000         	call	_f_write	;wreg free
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;tff.c: 1787: return bw ? chr : -1;
  8301  004F82  51D1               	movf	fputc@bw& (0+255),w,b
  8302  004F84  11D2               	iorwf	(fputc@bw+1)& (0+255),w,b
  8303  004F86  A4D8               	btfss	status,2,c
  8304  004F88  D7E7               	goto	u12440
  8305                           
  8306                           ; BSR set to: 0
  8307  004F8A  69CC               	setf	?_fputc& (0+255),b
  8308  004F8C  69CD               	setf	(?_fputc+1)& (0+255),b
  8309                           
  8310                           ; BSR set to: 0
  8311  004F8E  0012               	return		;funcret
  8312  004F90                     __end_of_fputc:
  8313                           	callstack 0
  8314                           
  8315 ;; *************** function _f_write *****************
  8316 ;; Defined at:
  8317 ;;		line 999 in file "bibliotecas/tff.c"
  8318 ;; Parameters:    Size  Location     Type
  8319 ;;  fp              2   78[BANK0 ] PTR struct _FIL
  8320 ;;		 -> fil(28), 
  8321 ;;  buff            1   80[BANK0 ] PTR const void 
  8322 ;;		 -> fputc@c(1), 
  8323 ;;  btw             2   81[BANK0 ] unsigned int 
  8324 ;;  bw              1   83[BANK0 ] PTR unsigned int 
  8325 ;;		 -> fputc@bw(2), 
  8326 ;; Auto vars:     Size  Location     Type
  8327 ;;  sect            4   98[BANK0 ] unsigned long 
  8328 ;;  wcnt            2  106[BANK0 ] unsigned int 
  8329 ;;  clust           2  104[BANK0 ] unsigned short 
  8330 ;;  cc              2  102[BANK0 ] unsigned int 
  8331 ;;  wbuff           1   97[BANK0 ] PTR const unsigned char 
  8332 ;;		 -> fputc@c(1), 
  8333 ;;  res             1   96[BANK0 ] enum E155
  8334 ;; Return value:  Size  Location     Type
  8335 ;;                  1    wreg      enum E155
  8336 ;; Registers used:
  8337 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8338 ;; Tracked objects:
  8339 ;;		On entry : 3F/0
  8340 ;;		On exit  : 3F/0
  8341 ;;		Unchanged: 0/0
  8342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8343 ;;      Params:         0       6       0       0       0       0       0       0       0
  8344 ;;      Locals:         0      12       0       0       0       0       0       0       0
  8345 ;;      Temps:          0      12       0       0       0       0       0       0       0
  8346 ;;      Totals:         0      30       0       0       0       0       0       0       0
  8347 ;;Total ram usage:       30 bytes
  8348 ;; Hardware stack levels used:    1
  8349 ;; Hardware stack levels required when called:   11
  8350 ;; This function calls:
  8351 ;;		_clust2sect
  8352 ;;		_create_chain
  8353 ;;		_disk_write
  8354 ;;		_memcpy
  8355 ;;		_move_window
  8356 ;;		_validate
  8357 ;; This function is called by:
  8358 ;;		_fputc
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           	psect	text45
  8363  000012                     __ptext45:
  8364                           	callstack 0
  8365  000012                     _f_write:
  8366                           	callstack 13
  8367                           
  8368                           ; BSR set to: 0
  8369                           ;tff.c: 1006: FRESULT res;;tff.c: 1007: DWORD sect;;tff.c: 1008: UINT wcnt, cc;;tff.c: 1
      +                          009: CLUST clust;;tff.c: 1010: const BYTE *wbuff = buff;
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;incstack = 0
  8373  000012  C0B0  F0C1         	movff	f_write@buff,f_write@wbuff
  8374                           
  8375                           ; BSR set to: 0
  8376                           ;tff.c: 1013: *bw = 0;
  8377  000016  51B3               	movf	f_write@bw& (0+255),w,b
  8378  000018  6ED9               	movwf	fsr2l,c
  8379  00001A  6ADA               	clrf	fsr2h,c
  8380  00001C  0E00               	movlw	0
  8381  00001E  6EDE               	movwf	postinc2,c
  8382  000020  0E00               	movlw	0
  8383  000022  6EDD               	movwf	postdec2,c
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;tff.c: 1014: res = validate(fp->fs, fp->id);
  8387  000024  EE20 F004          	lfsr	2,4
  8388  000028  51AE               	movf	f_write@fp& (0+255),w,b
  8389  00002A  26D9               	addwf	fsr2l,f,c
  8390  00002C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8391  00002E  22DA               	addwfc	fsr2h,f,c
  8392  000030  CFDE F01F          	movff	postinc2,validate@fs
  8393  000034  CFDD F020          	movff	postdec2,validate@fs+1
  8394  000038  C0AE  FFD9         	movff	f_write@fp,fsr2l
  8395  00003C  C0AF  FFDA         	movff	f_write@fp+1,fsr2h
  8396  000040  CFDE F021          	movff	postinc2,validate@id
  8397  000044  CFDD F022          	movff	postdec2,validate@id+1
  8398  000048  ECDA  F026         	call	_validate	;wreg free
  8399  00004C  0100               	movlb	0	; () banked
  8400  00004E  6FC0               	movwf	f_write@res& (0+255),b
  8401                           
  8402                           ; BSR set to: 0
  8403                           ;tff.c: 1015: if (res != FR_OK) return res;
  8404  000050  51C0               	movf	f_write@res& (0+255),w,b
  8405  000052  A4D8               	btfss	status,2,c
  8406  000054  0012               	return	
  8407                           
  8408                           ; BSR set to: 0
  8409                           ;tff.c: 1016: if (fp->flag & 0x80) return FR_RW_ERROR;
  8410  000056  EE20 F002          	lfsr	2,2
  8411  00005A  51AE               	movf	f_write@fp& (0+255),w,b
  8412  00005C  26D9               	addwf	fsr2l,f,c
  8413  00005E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8414  000060  22DA               	addwfc	fsr2h,f,c
  8415  000062  BEDF               	btfsc	indf2,7,c
  8416  000064  0012               	return	
  8417                           
  8418                           ; BSR set to: 0
  8419                           ;tff.c: 1017: if (!(fp->flag & 0x02)) return FR_DENIED;
  8420  000066  EE20 F002          	lfsr	2,2
  8421  00006A  51AE               	movf	f_write@fp& (0+255),w,b
  8422  00006C  26D9               	addwf	fsr2l,f,c
  8423  00006E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8424  000070  22DA               	addwfc	fsr2h,f,c
  8425  000072  A2DF               	btfss	indf2,1,c
  8426  000074  0012               	return	
  8427                           
  8428                           ; BSR set to: 0
  8429                           ;tff.c: 1018: if (fp->fsize + btw < fp->fsize) return FR_OK;
  8430  000076  EE20 F00A          	lfsr	2,10
  8431  00007A  51AE               	movf	f_write@fp& (0+255),w,b
  8432  00007C  26D9               	addwf	fsr2l,f,c
  8433  00007E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8434  000080  22DA               	addwfc	fsr2h,f,c
  8435  000082  EE10 F00A          	lfsr	1,10
  8436  000086  51AE               	movf	f_write@fp& (0+255),w,b
  8437  000088  26E1               	addwf	fsr1l,f,c
  8438  00008A  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8439  00008C  22E2               	addwfc	fsr1h,f,c
  8440  00008E  CFE6 F0B8          	movff	postinc1,??_f_write+4
  8441  000092  CFE6 F0B9          	movff	postinc1,??_f_write+5
  8442  000096  CFE6 F0BA          	movff	postinc1,??_f_write+6
  8443  00009A  CFE6 F0BB          	movff	postinc1,??_f_write+7
  8444  00009E  51B1               	movf	f_write@btw& (0+255),w,b
  8445  0000A0  25B8               	addwf	(??_f_write+4)& (0+255),w,b
  8446  0000A2  6FBC               	movwf	(??_f_write+8)& (0+255),b
  8447  0000A4  51B2               	movf	(f_write@btw+1)& (0+255),w,b
  8448  0000A6  21B9               	addwfc	(??_f_write+5)& (0+255),w,b
  8449  0000A8  6FBD               	movwf	(??_f_write+9)& (0+255),b
  8450  0000AA  0E00               	movlw	0
  8451  0000AC  21BA               	addwfc	(??_f_write+6)& (0+255),w,b
  8452  0000AE  6FBE               	movwf	(??_f_write+10)& (0+255),b
  8453  0000B0  0E00               	movlw	0
  8454  0000B2  21BB               	addwfc	(??_f_write+7)& (0+255),w,b
  8455  0000B4  6FBF               	movwf	(??_f_write+11)& (0+255),b
  8456  0000B6  50DE               	movf	postinc2,w,c
  8457  0000B8  5DBC               	subwf	(??_f_write+8)& (0+255),w,b
  8458  0000BA  50DE               	movf	postinc2,w,c
  8459  0000BC  59BD               	subwfb	(??_f_write+9)& (0+255),w,b
  8460  0000BE  50DE               	movf	postinc2,w,c
  8461  0000C0  59BE               	subwfb	(??_f_write+10)& (0+255),w,b
  8462  0000C2  50DE               	movf	postinc2,w,c
  8463  0000C4  59BF               	subwfb	(??_f_write+11)& (0+255),w,b
  8464  0000C6  A0D8               	btfss	status,0,c
  8465  0000C8  0012               	return	
  8466  0000CA  D228               	goto	l10486
  8467  0000CC                     l10410:
  8468                           
  8469                           ; BSR set to: 0
  8470                           ;tff.c: 1022: if ((fp->fptr % 512U) == 0) {
  8471  0000CC  EE20 F006          	lfsr	2,6
  8472  0000D0  51AE               	movf	f_write@fp& (0+255),w,b
  8473  0000D2  26D9               	addwf	fsr2l,f,c
  8474  0000D4  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8475  0000D6  22DA               	addwfc	fsr2h,f,c
  8476  0000D8  0EFF               	movlw	255
  8477  0000DA  14DE               	andwf	postinc2,w,c
  8478  0000DC  6FB4               	movwf	??_f_write& (0+255),b
  8479  0000DE  0E01               	movlw	1
  8480  0000E0  14DE               	andwf	postinc2,w,c
  8481  0000E2  6FB5               	movwf	(??_f_write+1)& (0+255),b
  8482  0000E4  0E00               	movlw	0
  8483  0000E6  14DE               	andwf	postinc2,w,c
  8484  0000E8  6FB6               	movwf	(??_f_write+2)& (0+255),b
  8485  0000EA  0E00               	movlw	0
  8486  0000EC  14DE               	andwf	postinc2,w,c
  8487  0000EE  6FB7               	movwf	(??_f_write+3)& (0+255),b
  8488  0000F0  51B4               	movf	??_f_write& (0+255),w,b
  8489  0000F2  11B5               	iorwf	(??_f_write+1)& (0+255),w,b
  8490  0000F4  11B6               	iorwf	(??_f_write+2)& (0+255),w,b
  8491  0000F6  11B7               	iorwf	(??_f_write+3)& (0+255),w,b
  8492  0000F8  A4D8               	btfss	status,2,c
  8493  0000FA  D15B               	goto	l10462
  8494                           
  8495                           ; BSR set to: 0
  8496                           ;tff.c: 1023: if (fp->csect >= fp->fs->csize) {
  8497  0000FC  EE20 F004          	lfsr	2,4
  8498  000100  51AE               	movf	f_write@fp& (0+255),w,b
  8499  000102  26D9               	addwf	fsr2l,f,c
  8500  000104  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8501  000106  22DA               	addwfc	fsr2h,f,c
  8502  000108  EE10 F01D          	lfsr	1,29
  8503  00010C  50DE               	movf	postinc2,w,c
  8504  00010E  26E1               	addwf	fsr1l,f,c
  8505  000110  50DD               	movf	postdec2,w,c
  8506  000112  22E2               	addwfc	fsr1h,f,c
  8507  000114  EE20 F003          	lfsr	2,3
  8508  000118  51AE               	movf	f_write@fp& (0+255),w,b
  8509  00011A  26D9               	addwf	fsr2l,f,c
  8510  00011C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8511  00011E  22DA               	addwfc	fsr2h,f,c
  8512  000120  50E6               	movf	postinc1,w,c
  8513  000122  5CDE               	subwf	postinc2,w,c
  8514  000124  A0D8               	btfss	status,0,c
  8515  000126  D06B               	goto	l10434
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;tff.c: 1024: if (fp->fptr == 0) {
  8519  000128  EE20 F006          	lfsr	2,6
  8520  00012C  51AE               	movf	f_write@fp& (0+255),w,b
  8521  00012E  26D9               	addwf	fsr2l,f,c
  8522  000130  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8523  000132  22DA               	addwfc	fsr2h,f,c
  8524  000134  50DE               	movf	postinc2,w,c
  8525  000136  10DE               	iorwf	postinc2,w,c
  8526  000138  10DE               	iorwf	postinc2,w,c
  8527  00013A  10DE               	iorwf	postinc2,w,c
  8528  00013C  A4D8               	btfss	status,2,c
  8529  00013E  D023               	goto	l10422
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;tff.c: 1025: clust = fp->org_clust;
  8533  000140  EE20 F00E          	lfsr	2,14
  8534  000144  51AE               	movf	f_write@fp& (0+255),w,b
  8535  000146  26D9               	addwf	fsr2l,f,c
  8536  000148  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8537  00014A  22DA               	addwfc	fsr2h,f,c
  8538  00014C  CFDE F0C8          	movff	postinc2,f_write@clust
  8539  000150  CFDD F0C9          	movff	postdec2,f_write@clust+1
  8540                           
  8541                           ; BSR set to: 0
  8542                           ;tff.c: 1026: if (clust == 0)
  8543  000154  51C8               	movf	f_write@clust& (0+255),w,b
  8544  000156  11C9               	iorwf	(f_write@clust+1)& (0+255),w,b
  8545  000158  A4D8               	btfss	status,2,c
  8546  00015A  D025               	goto	l10424
  8547                           
  8548                           ; BSR set to: 0
  8549                           ;tff.c: 1027: fp->org_clust = clust = create_chain(0);
  8550  00015C  0E00               	movlw	0
  8551  00015E  6FA1               	movwf	(create_chain@clust+1)& (0+255),b
  8552  000160  0E00               	movlw	0
  8553  000162  6FA0               	movwf	create_chain@clust& (0+255),b
  8554  000164  ECDD  F017         	call	_create_chain	;wreg free
  8555  000168  C0A0  F0C8         	movff	?_create_chain,f_write@clust
  8556  00016C  C0A1  F0C9         	movff	?_create_chain+1,f_write@clust+1
  8557  000170  EE20 F00E          	lfsr	2,14
  8558  000174  51AE               	movf	f_write@fp& (0+255),w,b
  8559  000176  26D9               	addwf	fsr2l,f,c
  8560  000178  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8561  00017A  22DA               	addwfc	fsr2h,f,c
  8562  00017C  C0C8  FFDE         	movff	f_write@clust,postinc2
  8563  000180  C0C9  FFDD         	movff	f_write@clust+1,postdec2
  8564  000184  D010               	goto	l10424
  8565  000186                     l10422:
  8566                           
  8567                           ; BSR set to: 0
  8568                           ;tff.c: 1029: clust = create_chain(fp->curr_clust);
  8569  000186  EE20 F010          	lfsr	2,16
  8570  00018A  51AE               	movf	f_write@fp& (0+255),w,b
  8571  00018C  26D9               	addwf	fsr2l,f,c
  8572  00018E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8573  000190  22DA               	addwfc	fsr2h,f,c
  8574  000192  CFDE F0A0          	movff	postinc2,create_chain@clust
  8575  000196  CFDD F0A1          	movff	postdec2,create_chain@clust+1
  8576  00019A  ECDD  F017         	call	_create_chain	;wreg free
  8577  00019E  C0A0  F0C8         	movff	?_create_chain,f_write@clust
  8578  0001A2  C0A1  F0C9         	movff	?_create_chain+1,f_write@clust+1
  8579  0001A6                     l10424:
  8580                           
  8581                           ; BSR set to: 0
  8582                           ;tff.c: 1030: };tff.c: 1031: if (clust == 0) break;
  8583  0001A6  51C8               	movf	f_write@clust& (0+255),w,b
  8584  0001A8  11C9               	iorwf	(f_write@clust+1)& (0+255),w,b
  8585  0001AA  B4D8               	btfsc	status,2,c
  8586  0001AC  D1BB               	goto	u12260
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;tff.c: 1032: if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
  8590  0001AE  05C8               	decf	f_write@clust& (0+255),w,b
  8591  0001B0  11C9               	iorwf	(f_write@clust+1)& (0+255),w,b
  8592  0001B2  B4D8               	btfsc	status,2,c
  8593  0001B4  D1EA               	goto	l10496
  8594                           
  8595                           ; BSR set to: 0
  8596  0001B6  EE20 F004          	lfsr	2,4
  8597  0001BA  51AE               	movf	f_write@fp& (0+255),w,b
  8598  0001BC  26D9               	addwf	fsr2l,f,c
  8599  0001BE  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8600  0001C0  22DA               	addwfc	fsr2h,f,c
  8601  0001C2  EE10 F016          	lfsr	1,22
  8602  0001C6  50DE               	movf	postinc2,w,c
  8603  0001C8  26E1               	addwf	fsr1l,f,c
  8604  0001CA  50DD               	movf	postdec2,w,c
  8605  0001CC  22E2               	addwfc	fsr1h,f,c
  8606  0001CE  50E6               	movf	postinc1,w,c
  8607  0001D0  5DC8               	subwf	f_write@clust& (0+255),w,b
  8608  0001D2  50E6               	movf	postinc1,w,c
  8609  0001D4  59C9               	subwfb	(f_write@clust+1)& (0+255),w,b
  8610  0001D6  B0D8               	btfsc	status,0,c
  8611  0001D8  D1D8               	goto	l10496
  8612                           
  8613                           ; BSR set to: 0
  8614                           ;tff.c: 1033: fp->curr_clust = clust;
  8615  0001DA  EE20 F010          	lfsr	2,16
  8616  0001DE  51AE               	movf	f_write@fp& (0+255),w,b
  8617  0001E0  26D9               	addwf	fsr2l,f,c
  8618  0001E2  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8619  0001E4  22DA               	addwfc	fsr2h,f,c
  8620  0001E6  C0C8  FFDE         	movff	f_write@clust,postinc2
  8621  0001EA  C0C9  FFDD         	movff	f_write@clust+1,postdec2
  8622                           
  8623                           ;tff.c: 1034: fp->csect = 0;
  8624  0001EE  EE20 F003          	lfsr	2,3
  8625  0001F2  51AE               	movf	f_write@fp& (0+255),w,b
  8626  0001F4  26D9               	addwf	fsr2l,f,c
  8627  0001F6  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8628  0001F8  22DA               	addwfc	fsr2h,f,c
  8629  0001FA  0E00               	movlw	0
  8630  0001FC  6EDF               	movwf	indf2,c
  8631  0001FE                     l10434:
  8632                           
  8633                           ; BSR set to: 0
  8634                           ;tff.c: 1035: };tff.c: 1036: sect = clust2sect(fp->curr_clust) + fp->csect;
  8635  0001FE  EE20 F010          	lfsr	2,16
  8636  000202  51AE               	movf	f_write@fp& (0+255),w,b
  8637  000204  26D9               	addwf	fsr2l,f,c
  8638  000206  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8639  000208  22DA               	addwfc	fsr2h,f,c
  8640  00020A  CFDE F025          	movff	postinc2,clust2sect@clust
  8641  00020E  CFDD F026          	movff	postdec2,clust2sect@clust+1
  8642  000212  ECD4  F01F         	call	_clust2sect	;wreg free
  8643  000216  EE20 F003          	lfsr	2,3
  8644  00021A  51AE               	movf	f_write@fp& (0+255),w,b
  8645  00021C  26D9               	addwf	fsr2l,f,c
  8646  00021E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8647  000220  22DA               	addwfc	fsr2h,f,c
  8648  000222  50DF               	movf	indf2,w,c
  8649  000224  6FB4               	movwf	??_f_write& (0+255),b
  8650  000226  51B4               	movf	??_f_write& (0+255),w,b
  8651  000228  2425               	addwf	?_clust2sect^0,w,c
  8652  00022A  6FC2               	movwf	f_write@sect& (0+255),b
  8653  00022C  0E00               	movlw	0
  8654  00022E  2026               	addwfc	(?_clust2sect+1)^0,w,c
  8655  000230  6FC3               	movwf	(f_write@sect+1)& (0+255),b
  8656  000232  0E00               	movlw	0
  8657  000234  2027               	addwfc	(?_clust2sect+2)^0,w,c
  8658  000236  6FC4               	movwf	(f_write@sect+2)& (0+255),b
  8659  000238  0E00               	movlw	0
  8660  00023A  2028               	addwfc	(?_clust2sect+3)^0,w,c
  8661  00023C  6FC5               	movwf	(f_write@sect+3)& (0+255),b
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;tff.c: 1037: cc = btw / 512U;
  8665  00023E  C0B1  F0B4         	movff	f_write@btw,??_f_write
  8666  000242  C0B2  F0B5         	movff	f_write@btw+1,??_f_write+1
  8667  000246  0E09               	movlw	9
  8668  000248  6FB6               	movwf	(??_f_write+2)& (0+255),b
  8669  00024A                     u12175:
  8670  00024A  90D8               	bcf	status,0,c
  8671  00024C  33B5               	rrcf	(??_f_write+1)& (0+255),f,b
  8672  00024E  33B4               	rrcf	??_f_write& (0+255),f,b
  8673  000250  2FB6               	decfsz	(??_f_write+2)& (0+255),f,b
  8674  000252  D7FB               	goto	u12175
  8675  000254  C0B4  F0C6         	movff	??_f_write,f_write@cc
  8676  000258  C0B5  F0C7         	movff	??_f_write+1,f_write@cc+1
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;tff.c: 1038: if (cc) {
  8680  00025C  51C6               	movf	f_write@cc& (0+255),w,b
  8681  00025E  11C7               	iorwf	(f_write@cc+1)& (0+255),w,b
  8682  000260  B4D8               	btfsc	status,2,c
  8683  000262  D069               	goto	l10452
  8684                           
  8685                           ; BSR set to: 0
  8686                           ;tff.c: 1039: if (fp->csect + cc > fp->fs->csize)
  8687  000264  EE20 F003          	lfsr	2,3
  8688  000268  51AE               	movf	f_write@fp& (0+255),w,b
  8689  00026A  26D9               	addwf	fsr2l,f,c
  8690  00026C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8691  00026E  22DA               	addwfc	fsr2h,f,c
  8692  000270  50DF               	movf	indf2,w,c
  8693  000272  6FB4               	movwf	??_f_write& (0+255),b
  8694  000274  51B4               	movf	??_f_write& (0+255),w,b
  8695  000276  25C6               	addwf	f_write@cc& (0+255),w,b
  8696  000278  6FB5               	movwf	(??_f_write+1)& (0+255),b
  8697  00027A  0E00               	movlw	0
  8698  00027C  21C7               	addwfc	(f_write@cc+1)& (0+255),w,b
  8699  00027E  6FB6               	movwf	(??_f_write+2)& (0+255),b
  8700  000280  EE20 F004          	lfsr	2,4
  8701  000284  51AE               	movf	f_write@fp& (0+255),w,b
  8702  000286  26D9               	addwf	fsr2l,f,c
  8703  000288  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8704  00028A  22DA               	addwfc	fsr2h,f,c
  8705  00028C  EE10 F01D          	lfsr	1,29
  8706  000290  50DE               	movf	postinc2,w,c
  8707  000292  26E1               	addwf	fsr1l,f,c
  8708  000294  50DD               	movf	postdec2,w,c
  8709  000296  22E2               	addwfc	fsr1h,f,c
  8710  000298  50E7               	movf	indf1,w,c
  8711  00029A  6FB7               	movwf	(??_f_write+3)& (0+255),b
  8712  00029C  6BB8               	clrf	(??_f_write+4)& (0+255),b
  8713  00029E  51B5               	movf	(??_f_write+1)& (0+255),w,b
  8714  0002A0  5DB7               	subwf	(??_f_write+3)& (0+255),w,b
  8715  0002A2  51B6               	movf	(??_f_write+2)& (0+255),w,b
  8716  0002A4  59B8               	subwfb	(??_f_write+4)& (0+255),w,b
  8717  0002A6  B0D8               	btfsc	status,0,c
  8718  0002A8  D01C               	goto	l10444
  8719                           
  8720                           ; BSR set to: 0
  8721                           ;tff.c: 1040: cc = fp->fs->csize - fp->csect;
  8722  0002AA  EE20 F004          	lfsr	2,4
  8723  0002AE  51AE               	movf	f_write@fp& (0+255),w,b
  8724  0002B0  26D9               	addwf	fsr2l,f,c
  8725  0002B2  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8726  0002B4  22DA               	addwfc	fsr2h,f,c
  8727  0002B6  EE10 F01D          	lfsr	1,29
  8728  0002BA  50DE               	movf	postinc2,w,c
  8729  0002BC  26E1               	addwf	fsr1l,f,c
  8730  0002BE  50DD               	movf	postdec2,w,c
  8731  0002C0  22E2               	addwfc	fsr1h,f,c
  8732  0002C2  50E7               	movf	indf1,w,c
  8733  0002C4  6FB4               	movwf	??_f_write& (0+255),b
  8734  0002C6  EE20 F003          	lfsr	2,3
  8735  0002CA  51AE               	movf	f_write@fp& (0+255),w,b
  8736  0002CC  26D9               	addwf	fsr2l,f,c
  8737  0002CE  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8738  0002D0  22DA               	addwfc	fsr2h,f,c
  8739  0002D2  50DF               	movf	indf2,w,c
  8740  0002D4  6FB5               	movwf	(??_f_write+1)& (0+255),b
  8741  0002D6  51B5               	movf	(??_f_write+1)& (0+255),w,b
  8742  0002D8  5DB4               	subwf	??_f_write& (0+255),w,b
  8743  0002DA  6FC6               	movwf	f_write@cc& (0+255),b
  8744  0002DC  6BC7               	clrf	(f_write@cc+1)& (0+255),b
  8745  0002DE  A0D8               	btfss	status,0,c
  8746  0002E0  07C7               	decf	(f_write@cc+1)& (0+255),f,b
  8747  0002E2                     l10444:
  8748                           
  8749                           ; BSR set to: 0
  8750                           ;tff.c: 1041: if (disk_write(0, wbuff, sect, (BYTE)cc) != RES_OK)
  8751  0002E2  C0C1  F068         	movff	f_write@wbuff,disk_write@buff
  8752  0002E6  6B69               	clrf	(disk_write@buff+1)& (0+255),b
  8753  0002E8  C0C2  F06A         	movff	f_write@sect,disk_write@sector
  8754  0002EC  C0C3  F06B         	movff	f_write@sect+1,disk_write@sector+1
  8755  0002F0  C0C4  F06C         	movff	f_write@sect+2,disk_write@sector+2
  8756  0002F4  C0C5  F06D         	movff	f_write@sect+3,disk_write@sector+3
  8757  0002F8  C0C6  F06E         	movff	f_write@cc,disk_write@count
  8758  0002FC  0E00               	movlw	0
  8759  0002FE  EC6A  F026         	call	_disk_write
  8760  000302  0900               	iorlw	0
  8761  000304  A4D8               	btfss	status,2,c
  8762  000306  D141               	goto	l10496
  8763                           
  8764                           ; BSR set to: 0
  8765                           ;tff.c: 1043: fp->csect += (BYTE)cc;
  8766  000308  EE20 F003          	lfsr	2,3
  8767  00030C  51AE               	movf	f_write@fp& (0+255),w,b
  8768  00030E  26D9               	addwf	fsr2l,f,c
  8769  000310  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8770  000312  22DA               	addwfc	fsr2h,f,c
  8771  000314  51C6               	movf	f_write@cc& (0+255),w,b
  8772  000316  26DF               	addwf	indf2,f,c
  8773                           
  8774                           ; BSR set to: 0
  8775                           ;tff.c: 1044: wcnt = 512U * cc;
  8776  000318  C0C6  F0B4         	movff	f_write@cc,??_f_write
  8777  00031C  C0C7  F0B5         	movff	f_write@cc+1,??_f_write+1
  8778  000320  0E09               	movlw	9
  8779  000322                     u12215:
  8780  000322  90D8               	bcf	status,0,c
  8781  000324  37B4               	rlcf	??_f_write& (0+255),f,b
  8782  000326  37B5               	rlcf	(??_f_write+1)& (0+255),f,b
  8783  000328  2EE8               	decfsz	wreg,f,c
  8784  00032A  D7FB               	goto	u12215
  8785  00032C  C0B4  F0CA         	movff	??_f_write,f_write@wcnt
  8786  000330  C0B5  F0CB         	movff	??_f_write+1,f_write@wcnt+1
  8787                           
  8788                           ;tff.c: 1045: continue;
  8789  000334  D0D9               	goto	l10478
  8790  000336                     l10452:
  8791                           
  8792                           ; BSR set to: 0
  8793                           ;tff.c: 1046: };tff.c: 1047: if (fp->fptr >= fp->fsize) {
  8794  000336  EE20 F00A          	lfsr	2,10
  8795  00033A  51AE               	movf	f_write@fp& (0+255),w,b
  8796  00033C  26D9               	addwf	fsr2l,f,c
  8797  00033E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8798  000340  22DA               	addwfc	fsr2h,f,c
  8799  000342  EE10 F006          	lfsr	1,6
  8800  000346  51AE               	movf	f_write@fp& (0+255),w,b
  8801  000348  26E1               	addwf	fsr1l,f,c
  8802  00034A  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8803  00034C  22E2               	addwfc	fsr1h,f,c
  8804  00034E  50DE               	movf	postinc2,w,c
  8805  000350  5CE6               	subwf	postinc1,w,c
  8806  000352  50DE               	movf	postinc2,w,c
  8807  000354  58E6               	subwfb	postinc1,w,c
  8808  000356  50DE               	movf	postinc2,w,c
  8809  000358  58E6               	subwfb	postinc1,w,c
  8810  00035A  50DE               	movf	postinc2,w,c
  8811  00035C  58E6               	subwfb	postinc1,w,c
  8812  00035E  A0D8               	btfss	status,0,c
  8813  000360  D021               	goto	l10460
  8814                           
  8815                           ; BSR set to: 0
  8816                           ;tff.c: 1048: if (!move_window(0)) goto fw_error;
  8817  000362  0E00               	movlw	0
  8818  000364  6F73               	movwf	move_window@sector& (0+255),b
  8819  000366  0E00               	movlw	0
  8820  000368  6F74               	movwf	(move_window@sector+1)& (0+255),b
  8821  00036A  0E00               	movlw	0
  8822  00036C  6F75               	movwf	(move_window@sector+2)& (0+255),b
  8823  00036E  0E00               	movlw	0
  8824  000370  6F76               	movwf	(move_window@sector+3)& (0+255),b
  8825  000372  EC08  F017         	call	_move_window	;wreg free
  8826  000376  0900               	iorlw	0
  8827  000378  B4D8               	btfsc	status,2,c
  8828  00037A  D107               	goto	l10496
  8829                           
  8830                           ; BSR set to: 0
  8831                           ;tff.c: 1049: fp->fs->winsect = sect;
  8832  00037C  EE20 F004          	lfsr	2,4
  8833  000380  51AE               	movf	f_write@fp& (0+255),w,b
  8834  000382  26D9               	addwf	fsr2l,f,c
  8835  000384  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8836  000386  22DA               	addwfc	fsr2h,f,c
  8837  000388  EE10 F004          	lfsr	1,4
  8838  00038C  50DE               	movf	postinc2,w,c
  8839  00038E  26E1               	addwf	fsr1l,f,c
  8840  000390  50DD               	movf	postdec2,w,c
  8841  000392  22E2               	addwfc	fsr1h,f,c
  8842  000394  C0C2  FFE6         	movff	f_write@sect,postinc1
  8843  000398  C0C3  FFE6         	movff	f_write@sect+1,postinc1
  8844  00039C  C0C4  FFE6         	movff	f_write@sect+2,postinc1
  8845  0003A0  C0C5  FFE6         	movff	f_write@sect+3,postinc1
  8846  0003A4                     l10460:
  8847                           
  8848                           ; BSR set to: 0
  8849                           ;tff.c: 1050: };tff.c: 1051: fp->csect++;
  8850  0003A4  EE20 F003          	lfsr	2,3
  8851  0003A8  51AE               	movf	f_write@fp& (0+255),w,b
  8852  0003AA  26D9               	addwf	fsr2l,f,c
  8853  0003AC  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8854  0003AE  22DA               	addwfc	fsr2h,f,c
  8855  0003B0  2ADF               	incf	indf2,f,c
  8856  0003B2                     l10462:
  8857                           
  8858                           ; BSR set to: 0
  8859                           ;tff.c: 1052: };tff.c: 1053: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
  8860  0003B2  EE20 F010          	lfsr	2,16
  8861  0003B6  51AE               	movf	f_write@fp& (0+255),w,b
  8862  0003B8  26D9               	addwf	fsr2l,f,c
  8863  0003BA  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8864  0003BC  22DA               	addwfc	fsr2h,f,c
  8865  0003BE  CFDE F025          	movff	postinc2,clust2sect@clust
  8866  0003C2  CFDD F026          	movff	postdec2,clust2sect@clust+1
  8867  0003C6  ECD4  F01F         	call	_clust2sect	;wreg free
  8868  0003CA  EE20 F003          	lfsr	2,3
  8869  0003CE  51AE               	movf	f_write@fp& (0+255),w,b
  8870  0003D0  26D9               	addwf	fsr2l,f,c
  8871  0003D2  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8872  0003D4  22DA               	addwfc	fsr2h,f,c
  8873  0003D6  50DF               	movf	indf2,w,c
  8874  0003D8  6FB4               	movwf	??_f_write& (0+255),b
  8875  0003DA  51B4               	movf	??_f_write& (0+255),w,b
  8876  0003DC  2425               	addwf	?_clust2sect^0,w,c
  8877  0003DE  6FB5               	movwf	(??_f_write+1)& (0+255),b
  8878  0003E0  0E00               	movlw	0
  8879  0003E2  2026               	addwfc	(?_clust2sect+1)^0,w,c
  8880  0003E4  6FB6               	movwf	(??_f_write+2)& (0+255),b
  8881  0003E6  0E00               	movlw	0
  8882  0003E8  2027               	addwfc	(?_clust2sect+2)^0,w,c
  8883  0003EA  6FB7               	movwf	(??_f_write+3)& (0+255),b
  8884  0003EC  0E00               	movlw	0
  8885  0003EE  2028               	addwfc	(?_clust2sect+3)^0,w,c
  8886  0003F0  6FB8               	movwf	(??_f_write+4)& (0+255),b
  8887  0003F2  0EFF               	movlw	255
  8888  0003F4  25B5               	addwf	(??_f_write+1)& (0+255),w,b
  8889  0003F6  6FC2               	movwf	f_write@sect& (0+255),b
  8890  0003F8  0EFF               	movlw	255
  8891  0003FA  21B6               	addwfc	(??_f_write+2)& (0+255),w,b
  8892  0003FC  6FC3               	movwf	(f_write@sect+1)& (0+255),b
  8893  0003FE  0EFF               	movlw	255
  8894  000400  21B7               	addwfc	(??_f_write+3)& (0+255),w,b
  8895  000402  6FC4               	movwf	(f_write@sect+2)& (0+255),b
  8896  000404  0EFF               	movlw	255
  8897  000406  21B8               	addwfc	(??_f_write+4)& (0+255),w,b
  8898  000408  6FC5               	movwf	(f_write@sect+3)& (0+255),b
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;tff.c: 1054: if (!move_window(sect)) goto fw_error;
  8902  00040A  C0C2  F073         	movff	f_write@sect,move_window@sector
  8903  00040E  C0C3  F074         	movff	f_write@sect+1,move_window@sector+1
  8904  000412  C0C4  F075         	movff	f_write@sect+2,move_window@sector+2
  8905  000416  C0C5  F076         	movff	f_write@sect+3,move_window@sector+3
  8906  00041A  EC08  F017         	call	_move_window	;wreg free
  8907  00041E  0900               	iorlw	0
  8908  000420  B4D8               	btfsc	status,2,c
  8909  000422  D0B3               	goto	l10496
  8910                           
  8911                           ; BSR set to: 0
  8912                           ;tff.c: 1055: wcnt = 512U - (fp->fptr % 512U);
  8913  000424  0EFF               	movlw	255
  8914  000426  6FB4               	movwf	??_f_write& (0+255),b
  8915  000428  0E01               	movlw	1
  8916  00042A  6FB5               	movwf	(??_f_write+1)& (0+255),b
  8917  00042C  EE20 F006          	lfsr	2,6
  8918  000430  51AE               	movf	f_write@fp& (0+255),w,b
  8919  000432  26D9               	addwf	fsr2l,f,c
  8920  000434  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8921  000436  22DA               	addwfc	fsr2h,f,c
  8922  000438  CFDE F0B6          	movff	postinc2,??_f_write+2
  8923  00043C  CFDD F0B7          	movff	postdec2,??_f_write+3
  8924  000440  51B4               	movf	??_f_write& (0+255),w,b
  8925  000442  17B6               	andwf	(??_f_write+2)& (0+255),f,b
  8926  000444  51B5               	movf	(??_f_write+1)& (0+255),w,b
  8927  000446  17B7               	andwf	(??_f_write+3)& (0+255),f,b
  8928  000448  51B6               	movf	(??_f_write+2)& (0+255),w,b
  8929  00044A  0800               	sublw	0
  8930  00044C  6FCA               	movwf	f_write@wcnt& (0+255),b
  8931  00044E  51B7               	movf	(??_f_write+3)& (0+255),w,b
  8932  000450  A0D8               	btfss	status,0,c
  8933  000452  2AE8               	incf	wreg,f,c
  8934  000454  0802               	sublw	2
  8935  000456  6FCB               	movwf	(f_write@wcnt+1)& (0+255),b
  8936                           
  8937                           ; BSR set to: 0
  8938                           ;tff.c: 1056: if (wcnt > btw) wcnt = btw;
  8939  000458  51CA               	movf	f_write@wcnt& (0+255),w,b
  8940  00045A  5DB1               	subwf	f_write@btw& (0+255),w,b
  8941  00045C  51CB               	movf	(f_write@wcnt+1)& (0+255),w,b
  8942  00045E  59B2               	subwfb	(f_write@btw+1)& (0+255),w,b
  8943  000460  B0D8               	btfsc	status,0,c
  8944  000462  D004               	goto	l10474
  8945                           
  8946                           ; BSR set to: 0
  8947  000464  C0B1  F0CA         	movff	f_write@btw,f_write@wcnt
  8948  000468  C0B2  F0CB         	movff	f_write@btw+1,f_write@wcnt+1
  8949  00046C                     l10474:
  8950                           
  8951                           ; BSR set to: 0
  8952                           ;tff.c: 1057: memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
  8953  00046C  0EFF               	movlw	255
  8954  00046E  6FB4               	movwf	??_f_write& (0+255),b
  8955  000470  0E01               	movlw	1
  8956  000472  6FB5               	movwf	(??_f_write+1)& (0+255),b
  8957  000474  EE20 F006          	lfsr	2,6
  8958  000478  51AE               	movf	f_write@fp& (0+255),w,b
  8959  00047A  26D9               	addwf	fsr2l,f,c
  8960  00047C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8961  00047E  22DA               	addwfc	fsr2h,f,c
  8962  000480  CFDE F0B6          	movff	postinc2,??_f_write+2
  8963  000484  CFDD F0B7          	movff	postdec2,??_f_write+3
  8964  000488  51B4               	movf	??_f_write& (0+255),w,b
  8965  00048A  17B6               	andwf	(??_f_write+2)& (0+255),f,b
  8966  00048C  51B5               	movf	(??_f_write+1)& (0+255),w,b
  8967  00048E  17B7               	andwf	(??_f_write+3)& (0+255),f,b
  8968  000490  EE20 F004          	lfsr	2,4
  8969  000494  51AE               	movf	f_write@fp& (0+255),w,b
  8970  000496  26D9               	addwf	fsr2l,f,c
  8971  000498  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8972  00049A  22DA               	addwfc	fsr2h,f,c
  8973  00049C  CFDE F0B8          	movff	postinc2,??_f_write+4
  8974  0004A0  CFDD F0B9          	movff	postdec2,??_f_write+5
  8975  0004A4  51B6               	movf	(??_f_write+2)& (0+255),w,b
  8976  0004A6  27B8               	addwf	(??_f_write+4)& (0+255),f,b
  8977  0004A8  51B7               	movf	(??_f_write+3)& (0+255),w,b
  8978  0004AA  23B9               	addwfc	(??_f_write+5)& (0+255),f,b
  8979  0004AC  0E20               	movlw	32
  8980  0004AE  25B8               	addwf	(??_f_write+4)& (0+255),w,b
  8981  0004B0  6E19               	movwf	memcpy@d1^0,c
  8982  0004B2  0E00               	movlw	0
  8983  0004B4  21B9               	addwfc	(??_f_write+5)& (0+255),w,b
  8984  0004B6  6E1A               	movwf	(memcpy@d1+1)^0,c
  8985  0004B8  C0C1  F01B         	movff	f_write@wbuff,memcpy@s1
  8986  0004BC  6A1C               	clrf	(memcpy@s1+1)^0,c
  8987  0004BE  C0CA  F01D         	movff	f_write@wcnt,memcpy@n
  8988  0004C2  C0CB  F01E         	movff	f_write@wcnt+1,memcpy@n+1
  8989  0004C6  EC65  F027         	call	_memcpy	;wreg free
  8990                           
  8991                           ;tff.c: 1058: fp->fs->winflag = 1;
  8992  0004CA  0100               	movlb	0	; () banked
  8993  0004CC  EE20 F004          	lfsr	2,4
  8994  0004D0  51AE               	movf	f_write@fp& (0+255),w,b
  8995  0004D2  26D9               	addwf	fsr2l,f,c
  8996  0004D4  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8997  0004D6  22DA               	addwfc	fsr2h,f,c
  8998  0004D8  EE10 F01F          	lfsr	1,31
  8999  0004DC  50DE               	movf	postinc2,w,c
  9000  0004DE  26E1               	addwf	fsr1l,f,c
  9001  0004E0  50DD               	movf	postdec2,w,c
  9002  0004E2  22E2               	addwfc	fsr1h,f,c
  9003  0004E4  0E01               	movlw	1
  9004  0004E6  6EE7               	movwf	indf1,c
  9005  0004E8                     l10478:
  9006                           
  9007                           ; BSR set to: 0
  9008  0004E8  51CA               	movf	f_write@wcnt& (0+255),w,b
  9009  0004EA  27C1               	addwf	f_write@wbuff& (0+255),f,b
  9010                           
  9011                           ; BSR set to: 0
  9012  0004EC  EE20 F006          	lfsr	2,6
  9013  0004F0  51AE               	movf	f_write@fp& (0+255),w,b
  9014  0004F2  26D9               	addwf	fsr2l,f,c
  9015  0004F4  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9016  0004F6  22DA               	addwfc	fsr2h,f,c
  9017  0004F8  51CA               	movf	f_write@wcnt& (0+255),w,b
  9018  0004FA  26DE               	addwf	postinc2,f,c
  9019  0004FC  51CB               	movf	(f_write@wcnt+1)& (0+255),w,b
  9020  0004FE  22DE               	addwfc	postinc2,f,c
  9021  000500  0E00               	movlw	0
  9022  000502  22DE               	addwfc	postinc2,f,c
  9023  000504  22DE               	addwfc	postinc2,f,c
  9024                           
  9025                           ; BSR set to: 0
  9026  000506  51B3               	movf	f_write@bw& (0+255),w,b
  9027  000508  6ED9               	movwf	fsr2l,c
  9028  00050A  6ADA               	clrf	fsr2h,c
  9029  00050C  51CA               	movf	f_write@wcnt& (0+255),w,b
  9030  00050E  26DE               	addwf	postinc2,f,c
  9031  000510  51CB               	movf	(f_write@wcnt+1)& (0+255),w,b
  9032  000512  22DD               	addwfc	postdec2,f,c
  9033                           
  9034                           ; BSR set to: 0
  9035  000514  51CA               	movf	f_write@wcnt& (0+255),w,b
  9036  000516  5FB1               	subwf	f_write@btw& (0+255),f,b
  9037  000518  51CB               	movf	(f_write@wcnt+1)& (0+255),w,b
  9038  00051A  5BB2               	subwfb	(f_write@btw+1)& (0+255),f,b
  9039  00051C                     l10486:
  9040                           
  9041                           ; BSR set to: 0
  9042  00051C  51B1               	movf	f_write@btw& (0+255),w,b
  9043  00051E  11B2               	iorwf	(f_write@btw+1)& (0+255),w,b
  9044  000520  A4D8               	btfss	status,2,c
  9045  000522  D5D4               	goto	l10410
  9046  000524                     u12260:
  9047                           
  9048                           ; BSR set to: 0
  9049                           ;tff.c: 1059: };tff.c: 1061: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  9050  000524  EE20 F006          	lfsr	2,6
  9051  000528  51AE               	movf	f_write@fp& (0+255),w,b
  9052  00052A  26D9               	addwf	fsr2l,f,c
  9053  00052C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9054  00052E  22DA               	addwfc	fsr2h,f,c
  9055  000530  EE10 F00A          	lfsr	1,10
  9056  000534  51AE               	movf	f_write@fp& (0+255),w,b
  9057  000536  26E1               	addwf	fsr1l,f,c
  9058  000538  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9059  00053A  22E2               	addwfc	fsr1h,f,c
  9060  00053C  50DE               	movf	postinc2,w,c
  9061  00053E  5CE6               	subwf	postinc1,w,c
  9062  000540  50DE               	movf	postinc2,w,c
  9063  000542  58E6               	subwfb	postinc1,w,c
  9064  000544  50DE               	movf	postinc2,w,c
  9065  000546  58E6               	subwfb	postinc1,w,c
  9066  000548  50DE               	movf	postinc2,w,c
  9067  00054A  58E6               	subwfb	postinc1,w,c
  9068  00054C  B0D8               	btfsc	status,0,c
  9069  00054E  D014               	goto	l10492
  9070                           
  9071                           ; BSR set to: 0
  9072  000550  EE20 F006          	lfsr	2,6
  9073  000554  51AE               	movf	f_write@fp& (0+255),w,b
  9074  000556  26D9               	addwf	fsr2l,f,c
  9075  000558  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9076  00055A  22DA               	addwfc	fsr2h,f,c
  9077  00055C  EE10 F00A          	lfsr	1,10
  9078  000560  51AE               	movf	f_write@fp& (0+255),w,b
  9079  000562  26E1               	addwf	fsr1l,f,c
  9080  000564  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9081  000566  22E2               	addwfc	fsr1h,f,c
  9082  000568  CFDE FFE6          	movff	postinc2,postinc1
  9083  00056C  CFDE FFE6          	movff	postinc2,postinc1
  9084  000570  CFDE FFE6          	movff	postinc2,postinc1
  9085  000574  CFDE FFE6          	movff	postinc2,postinc1
  9086  000578                     l10492:
  9087                           
  9088                           ; BSR set to: 0
  9089                           ;tff.c: 1062: fp->flag |= 0x20;
  9090  000578  EE20 F002          	lfsr	2,2
  9091  00057C  51AE               	movf	f_write@fp& (0+255),w,b
  9092  00057E  26D9               	addwf	fsr2l,f,c
  9093  000580  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9094  000582  22DA               	addwfc	fsr2h,f,c
  9095  000584  0E00               	movlw	0
  9096  000586  8ADB               	bsf	plusw2,5,c
  9097  000588  0012               	return	
  9098  00058A                     l10496:
  9099                           
  9100                           ; BSR set to: 0
  9101                           ;tff.c: 1066: fp->flag |= 0x80;
  9102  00058A  EE20 F002          	lfsr	2,2
  9103  00058E  51AE               	movf	f_write@fp& (0+255),w,b
  9104  000590  26D9               	addwf	fsr2l,f,c
  9105  000592  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9106  000594  22DA               	addwfc	fsr2h,f,c
  9107  000596  0E00               	movlw	0
  9108  000598  8EDB               	bsf	plusw2,7,c
  9109                           
  9110                           ; BSR set to: 0
  9111  00059A  0012               	return		;funcret
  9112  00059C                     __end_of_f_write:
  9113                           	callstack 0
  9114                           
  9115 ;; *************** function ___llmod *****************
  9116 ;; Defined at:
  9117 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\llmod.c"
  9118 ;; Parameters:    Size  Location     Type
  9119 ;;  dividend        4   24[COMRAM] unsigned long 
  9120 ;;  divisor         4   28[COMRAM] unsigned long 
  9121 ;; Auto vars:     Size  Location     Type
  9122 ;;  counter         1   32[COMRAM] unsigned char 
  9123 ;; Return value:  Size  Location     Type
  9124 ;;                  4   24[COMRAM] unsigned long 
  9125 ;; Registers used:
  9126 ;;		wreg, status,2, status,0
  9127 ;; Tracked objects:
  9128 ;;		On entry : 3F/2
  9129 ;;		On exit  : 3F/2
  9130 ;;		Unchanged: 3F/0
  9131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9132 ;;      Params:         8       0       0       0       0       0       0       0       0
  9133 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9134 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9135 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9136 ;;Total ram usage:        9 bytes
  9137 ;; Hardware stack levels used:    1
  9138 ;; Hardware stack levels required when called:    3
  9139 ;; This function calls:
  9140 ;;		Nothing
  9141 ;; This function is called by:
  9142 ;;		_fprintf
  9143 ;; This function uses a non-reentrant model
  9144 ;;
  9145                           
  9146                           	psect	text46
  9147  004A12                     __ptext46:
  9148                           	callstack 0
  9149  004A12                     ___llmod:
  9150                           	callstack 23
  9151                           
  9152                           ; BSR set to: 2
  9153                           
  9154                           ; BSR set to: 0
  9155                           ;incstack = 0
  9156  004A12  501D               	movf	___llmod@divisor^0,w,c
  9157  004A14  101E               	iorwf	(___llmod@divisor+1)^0,w,c
  9158  004A16  101F               	iorwf	(___llmod@divisor+2)^0,w,c
  9159  004A18  1020               	iorwf	(___llmod@divisor+3)^0,w,c
  9160  004A1A  B4D8               	btfsc	status,2,c
  9161  004A1C  D024               	goto	l2003
  9162                           
  9163                           ; BSR set to: 2
  9164  004A1E  0E01               	movlw	1
  9165  004A20  6E21               	movwf	___llmod@counter^0,c
  9166  004A22  D006               	goto	l11086
  9167  004A24                     l11084:
  9168                           
  9169                           ; BSR set to: 2
  9170  004A24  90D8               	bcf	status,0,c
  9171  004A26  361D               	rlcf	___llmod@divisor^0,f,c
  9172  004A28  361E               	rlcf	(___llmod@divisor+1)^0,f,c
  9173  004A2A  361F               	rlcf	(___llmod@divisor+2)^0,f,c
  9174  004A2C  3620               	rlcf	(___llmod@divisor+3)^0,f,c
  9175  004A2E  2A21               	incf	___llmod@counter^0,f,c
  9176  004A30                     l11086:
  9177                           
  9178                           ; BSR set to: 2
  9179  004A30  AE20               	btfss	(___llmod@divisor+3)^0,7,c
  9180  004A32  D7F8               	goto	l11084
  9181  004A34                     u13280:
  9182                           
  9183                           ; BSR set to: 2
  9184  004A34  501D               	movf	___llmod@divisor^0,w,c
  9185  004A36  5C19               	subwf	___llmod@dividend^0,w,c
  9186  004A38  501E               	movf	(___llmod@divisor+1)^0,w,c
  9187  004A3A  581A               	subwfb	(___llmod@dividend+1)^0,w,c
  9188  004A3C  501F               	movf	(___llmod@divisor+2)^0,w,c
  9189  004A3E  581B               	subwfb	(___llmod@dividend+2)^0,w,c
  9190  004A40  5020               	movf	(___llmod@divisor+3)^0,w,c
  9191  004A42  581C               	subwfb	(___llmod@dividend+3)^0,w,c
  9192  004A44  A0D8               	btfss	status,0,c
  9193  004A46  D008               	goto	l11092
  9194                           
  9195                           ; BSR set to: 2
  9196  004A48  501D               	movf	___llmod@divisor^0,w,c
  9197  004A4A  5E19               	subwf	___llmod@dividend^0,f,c
  9198  004A4C  501E               	movf	(___llmod@divisor+1)^0,w,c
  9199  004A4E  5A1A               	subwfb	(___llmod@dividend+1)^0,f,c
  9200  004A50  501F               	movf	(___llmod@divisor+2)^0,w,c
  9201  004A52  5A1B               	subwfb	(___llmod@dividend+2)^0,f,c
  9202  004A54  5020               	movf	(___llmod@divisor+3)^0,w,c
  9203  004A56  5A1C               	subwfb	(___llmod@dividend+3)^0,f,c
  9204  004A58                     l11092:
  9205                           
  9206                           ; BSR set to: 2
  9207  004A58  90D8               	bcf	status,0,c
  9208  004A5A  3220               	rrcf	(___llmod@divisor+3)^0,f,c
  9209  004A5C  321F               	rrcf	(___llmod@divisor+2)^0,f,c
  9210  004A5E  321E               	rrcf	(___llmod@divisor+1)^0,f,c
  9211  004A60  321D               	rrcf	___llmod@divisor^0,f,c
  9212                           
  9213                           ; BSR set to: 2
  9214  004A62  2E21               	decfsz	___llmod@counter^0,f,c
  9215  004A64  D7E7               	goto	u13280
  9216  004A66                     l2003:
  9217                           
  9218                           ; BSR set to: 2
  9219  004A66  C019  F019         	movff	___llmod@dividend,?___llmod
  9220  004A6A  C01A  F01A         	movff	___llmod@dividend+1,?___llmod+1
  9221  004A6E  C01B  F01B         	movff	___llmod@dividend+2,?___llmod+2
  9222  004A72  C01C  F01C         	movff	___llmod@dividend+3,?___llmod+3
  9223                           
  9224                           ; BSR set to: 2
  9225  004A76  0012               	return		;funcret
  9226  004A78                     __end_of___llmod:
  9227                           	callstack 0
  9228                           
  9229 ;; *************** function _f_open *****************
  9230 ;; Defined at:
  9231 ;;		line 833 in file "bibliotecas/tff.c"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;  fp              2   96[BANK0 ] PTR struct _FIL
  9234 ;;		 -> fil(28), 
  9235 ;;  path            2   98[BANK0 ] PTR const unsigned char 
  9236 ;;		 -> STR_20(13), filename(15), 
  9237 ;;  mode            1  100[BANK0 ] unsigned char 
  9238 ;; Auto vars:     Size  Location     Type
  9239 ;;  dw              4  119[BANK0 ] unsigned long 
  9240 ;;  rs              2  117[BANK0 ] unsigned short 
  9241 ;;  dj             14  126[BANK0 ] struct _DIR_E
  9242 ;;  fn             12  105[BANK0 ] unsigned char [12]
  9243 ;;  dir             2  124[BANK0 ] PTR unsigned char 
  9244 ;;		 -> NULL(0), fs(544), 
  9245 ;;  res             1  123[BANK0 ] enum E155
  9246 ;; Return value:  Size  Location     Type
  9247 ;;                  1    wreg      enum E3236
  9248 ;; Registers used:
  9249 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9250 ;; Tracked objects:
  9251 ;;		On entry : 3F/0
  9252 ;;		On exit  : 3F/0
  9253 ;;		Unchanged: 0/0
  9254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9255 ;;      Params:         0       5       0       0       0       0       0       0       0
  9256 ;;      Locals:         0      35       0       0       0       0       0       0       0
  9257 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9258 ;;      Totals:         0      44       0       0       0       0       0       0       0
  9259 ;;Total ram usage:       44 bytes
  9260 ;; Hardware stack levels used:    1
  9261 ;; Hardware stack levels required when called:   12
  9262 ;; This function calls:
  9263 ;;		_auto_mount
  9264 ;;		_get_fattime
  9265 ;;		_memcpy
  9266 ;;		_memset
  9267 ;;		_move_window
  9268 ;;		_remove_chain
  9269 ;;		_reserve_direntry
  9270 ;;		_trace_path
  9271 ;; This function is called by:
  9272 ;;		_escrita_sdcard
  9273 ;; This function uses a non-reentrant model
  9274 ;;
  9275                           
  9276                           	psect	text47
  9277  0012EC                     __ptext47:
  9278                           	callstack 0
  9279  0012EC                     _f_open:
  9280                           	callstack 15
  9281                           
  9282                           ; BSR set to: 0
  9283                           ;tff.c: 839: FRESULT res;;tff.c: 840: DIR_E dj;;tff.c: 841: BYTE *dir;;tff.c: 842: char 
      +                          fn[8+3+1];;tff.c: 845: fp->fs = (0);
  9284                           
  9285                           ; BSR set to: 2
  9286                           ;incstack = 0
  9287  0012EC  EE20 F004          	lfsr	2,4
  9288  0012F0  51C0               	movf	f_open@fp& (0+255),w,b
  9289  0012F2  26D9               	addwf	fsr2l,f,c
  9290  0012F4  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9291  0012F6  22DA               	addwfc	fsr2h,f,c
  9292  0012F8  0E00               	movlw	0
  9293  0012FA  6EDE               	movwf	postinc2,c
  9294  0012FC  0E00               	movlw	0
  9295  0012FE  6EDD               	movwf	postdec2,c
  9296                           
  9297                           ; BSR set to: 0
  9298                           ;tff.c: 847: mode &= (0x01|0x02|0x08|0x10|0x04);
  9299  001300  0E1F               	movlw	31
  9300  001302  17C4               	andwf	f_open@mode& (0+255),f,b
  9301                           
  9302                           ; BSR set to: 0
  9303                           ;tff.c: 848: res = auto_mount(&path, (BYTE)(mode & (0x02|0x08|0x10|0x04)));
  9304  001304  0EC2               	movlw	low f_open@path
  9305  001306  6F79               	movwf	auto_mount@path& (0+255),b
  9306  001308  51C4               	movf	f_open@mode& (0+255),w,b
  9307  00130A  0B1E               	andlw	30
  9308  00130C  6F7A               	movwf	auto_mount@chk_wp& (0+255),b
  9309  00130E  ECCE  F002         	call	_auto_mount	;wreg free
  9310  001312  0100               	movlb	0	; () banked
  9311  001314  6FDB               	movwf	f_open@res& (0+255),b
  9312                           
  9313                           ; BSR set to: 0
  9314                           ;tff.c: 853: if (res != FR_OK) return res;
  9315  001316  51DB               	movf	f_open@res& (0+255),w,b
  9316  001318  B4D8               	btfsc	status,2,c
  9317  00131A  D002               	goto	l11150
  9318  00131C                     u13340:
  9319                           
  9320                           ; BSR set to: 0
  9321  00131C  51DB               	movf	f_open@res& (0+255),w,b
  9322  00131E  0012               	return	
  9323  001320                     l11150:
  9324                           
  9325                           ; BSR set to: 0
  9326                           ;tff.c: 854: res = trace_path(&dj, fn, path, &dir);
  9327  001320  0EDE               	movlw	low f_open@dj
  9328  001322  6FA7               	movwf	trace_path@dj& (0+255),b
  9329  001324  0EC9               	movlw	low f_open@fn
  9330  001326  6FA8               	movwf	trace_path@fn& (0+255),b
  9331  001328  C0C2  F0A9         	movff	f_open@path,trace_path@path
  9332  00132C  C0C3  F0AA         	movff	f_open@path+1,trace_path@path+1
  9333  001330  0EDC               	movlw	low f_open@dir
  9334  001332  6FAB               	movwf	trace_path@dir& (0+255),b
  9335  001334  EC86  F00F         	call	_trace_path	;wreg free
  9336  001338  6FDB               	movwf	f_open@res& (0+255),b
  9337                           
  9338                           ; BSR set to: 0
  9339                           ;tff.c: 858: if (mode & (0x08|0x10|0x04)) {
  9340  00133A  C0C4  F0C5         	movff	f_open@mode,??_f_open
  9341  00133E  0E1C               	movlw	28
  9342  001340  17C5               	andwf	??_f_open& (0+255),f,b
  9343  001342  B4D8               	btfsc	status,2,c
  9344  001344  D0DD               	goto	l11212
  9345                           
  9346                           ; BSR set to: 0
  9347                           ;tff.c: 859: CLUST rs;;tff.c: 860: DWORD dw;;tff.c: 861: if (res != FR_OK) {
  9348  001346  51DB               	movf	f_open@res& (0+255),w,b
  9349  001348  B4D8               	btfsc	status,2,c
  9350  00134A  D034               	goto	l955
  9351                           
  9352                           ; BSR set to: 0
  9353                           ;tff.c: 862: if (res != FR_NO_FILE) return res;
  9354  00134C  0E02               	movlw	2
  9355  00134E  19DB               	xorwf	f_open@res& (0+255),w,b
  9356  001350  A4D8               	btfss	status,2,c
  9357  001352  D7E4               	goto	u13340
  9358                           
  9359                           ; BSR set to: 0
  9360                           ;tff.c: 863: res = reserve_direntry(&dj, &dir);
  9361  001354  0EDE               	movlw	low f_open@dj
  9362  001356  6FAE               	movwf	reserve_direntry@dj& (0+255),b
  9363  001358  0EDC               	movlw	low f_open@dir
  9364  00135A  6FAF               	movwf	reserve_direntry@dir& (0+255),b
  9365  00135C  ECC2  F010         	call	_reserve_direntry	;wreg free
  9366  001360  6FDB               	movwf	f_open@res& (0+255),b
  9367                           
  9368                           ; BSR set to: 0
  9369                           ;tff.c: 864: if (res != FR_OK) return res;
  9370  001362  51DB               	movf	f_open@res& (0+255),w,b
  9371  001364  A4D8               	btfss	status,2,c
  9372  001366  D7DA               	goto	u13340
  9373                           
  9374                           ; BSR set to: 0
  9375                           ;tff.c: 865: memset(dir, 0, 32);
  9376  001368  C0DC  F019         	movff	f_open@dir,memset@p1
  9377  00136C  C0DD  F01A         	movff	f_open@dir+1,memset@p1+1
  9378  001370  0E00               	movlw	0
  9379  001372  6E1C               	movwf	(memset@c+1)^0,c
  9380  001374  0E00               	movlw	0
  9381  001376  6E1B               	movwf	memset@c^0,c
  9382  001378  0E00               	movlw	0
  9383  00137A  6E1E               	movwf	(memset@n+1)^0,c
  9384  00137C  0E20               	movlw	32
  9385  00137E  6E1D               	movwf	memset@n^0,c
  9386  001380  EC97  F028         	call	_memset	;wreg free
  9387                           
  9388                           ;tff.c: 866: memcpy(&dir[0], fn, 8+3);
  9389  001384  C0DC  F019         	movff	f_open@dir,memcpy@d1
  9390  001388  C0DD  F01A         	movff	f_open@dir+1,memcpy@d1+1
  9391  00138C  0EC9               	movlw	low f_open@fn
  9392  00138E  6E1B               	movwf	memcpy@s1^0,c
  9393  001390  6A1C               	clrf	(memcpy@s1+1)^0,c
  9394  001392  0E00               	movlw	0
  9395  001394  6E1E               	movwf	(memcpy@n+1)^0,c
  9396  001396  0E0B               	movlw	11
  9397  001398  6E1D               	movwf	memcpy@n^0,c
  9398  00139A  EC65  F027         	call	_memcpy	;wreg free
  9399                           
  9400                           ;tff.c: 867: dir[12] = fn[11];
  9401  00139E  0100               	movlb	0	; () banked
  9402  0013A0  EE20 F00C          	lfsr	2,12
  9403  0013A4  51DC               	movf	f_open@dir& (0+255),w,b
  9404  0013A6  26D9               	addwf	fsr2l,f,c
  9405  0013A8  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9406  0013AA  22DA               	addwfc	fsr2h,f,c
  9407  0013AC  C0D4  FFDF         	movff	f_open@fn+11,indf2
  9408                           
  9409                           ; BSR set to: 0
  9410                           ;tff.c: 868: mode |= 0x08;
  9411  0013B0  87C4               	bsf	f_open@mode& (0+255),3,b
  9412                           
  9413                           ;tff.c: 869: }
  9414  0013B2  D07A               	goto	l11200
  9415  0013B4                     l955:
  9416                           
  9417                           ; BSR set to: 0
  9418                           ;tff.c: 870: else {;tff.c: 871: if (mode & 0x04)
  9419  0013B4  A5C4               	btfss	f_open@mode& (0+255),2,b
  9420  0013B6  D002               	goto	l11180
  9421                           
  9422                           ; BSR set to: 0
  9423                           ;tff.c: 872: return FR_EXIST;
  9424  0013B8  0E07               	movlw	7
  9425  0013BA  0012               	return	
  9426  0013BC                     l11180:
  9427                           
  9428                           ; BSR set to: 0
  9429                           ;tff.c: 873: if (!dir || (dir[11] & (0x01|0x10)))
  9430  0013BC  51DC               	movf	f_open@dir& (0+255),w,b
  9431  0013BE  11DD               	iorwf	(f_open@dir+1)& (0+255),w,b
  9432  0013C0  B4D8               	btfsc	status,2,c
  9433  0013C2  D00C               	goto	u13410
  9434                           
  9435                           ; BSR set to: 0
  9436  0013C4  EE20 F00B          	lfsr	2,11
  9437  0013C8  51DC               	movf	f_open@dir& (0+255),w,b
  9438  0013CA  26D9               	addwf	fsr2l,f,c
  9439  0013CC  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9440  0013CE  22DA               	addwfc	fsr2h,f,c
  9441  0013D0  50DF               	movf	indf2,w,c
  9442  0013D2  6FC5               	movwf	??_f_open& (0+255),b
  9443  0013D4  0E11               	movlw	17
  9444  0013D6  17C5               	andwf	??_f_open& (0+255),f,b
  9445  0013D8  B4D8               	btfsc	status,2,c
  9446  0013DA  D002               	goto	l960
  9447  0013DC                     u13410:
  9448                           
  9449                           ; BSR set to: 0
  9450                           ;tff.c: 874: return FR_DENIED;
  9451  0013DC  0E06               	movlw	6
  9452  0013DE  0012               	return	
  9453  0013E0                     l960:
  9454                           
  9455                           ; BSR set to: 0
  9456                           ;tff.c: 875: if (mode & 0x08) {
  9457  0013E0  A7C4               	btfss	f_open@mode& (0+255),3,b
  9458  0013E2  D062               	goto	l11200
  9459                           
  9460                           ; BSR set to: 0
  9461                           ;tff.c: 880: rs = (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  9462  0013E4  EE20 F01A          	lfsr	2,26
  9463  0013E8  51DC               	movf	f_open@dir& (0+255),w,b
  9464  0013EA  26D9               	addwf	fsr2l,f,c
  9465  0013EC  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9466  0013EE  22DA               	addwfc	fsr2h,f,c
  9467  0013F0  CFDE F0D5          	movff	postinc2,f_open@rs
  9468  0013F4  CFDD F0D6          	movff	postdec2,f_open@rs+1
  9469                           
  9470                           ;tff.c: 882: *(WORD*)(BYTE*)(&dir[26])=(WORD)(0);
  9471  0013F8  EE20 F01A          	lfsr	2,26
  9472  0013FC  51DC               	movf	f_open@dir& (0+255),w,b
  9473  0013FE  26D9               	addwf	fsr2l,f,c
  9474  001400  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9475  001402  22DA               	addwfc	fsr2h,f,c
  9476  001404  0E00               	movlw	0
  9477  001406  6EDE               	movwf	postinc2,c
  9478  001408  0E00               	movlw	0
  9479  00140A  6EDD               	movwf	postdec2,c
  9480                           
  9481                           ;tff.c: 883: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(0);
  9482  00140C  EE20 F01C          	lfsr	2,28
  9483  001410  51DC               	movf	f_open@dir& (0+255),w,b
  9484  001412  26D9               	addwf	fsr2l,f,c
  9485  001414  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9486  001416  22DA               	addwfc	fsr2h,f,c
  9487  001418  6ADE               	clrf	postinc2,c
  9488  00141A  6ADE               	clrf	postinc2,c
  9489  00141C  6ADE               	clrf	postinc2,c
  9490  00141E  6ADD               	clrf	postdec2,c
  9491                           
  9492                           ;tff.c: 884: dj.fs->winflag = 1;
  9493  001420  EE20 F01F          	lfsr	2,31
  9494  001424  51E2               	movf	(f_open@dj+4)& (0+255),w,b
  9495  001426  26D9               	addwf	fsr2l,f,c
  9496  001428  51E3               	movf	(f_open@dj+5)& (0+255),w,b
  9497  00142A  22DA               	addwfc	fsr2h,f,c
  9498  00142C  0E01               	movlw	1
  9499  00142E  6EDF               	movwf	indf2,c
  9500                           
  9501                           ;tff.c: 885: dw = dj.fs->winsect;
  9502  001430  EE20 F004          	lfsr	2,4
  9503  001434  51E2               	movf	(f_open@dj+4)& (0+255),w,b
  9504  001436  26D9               	addwf	fsr2l,f,c
  9505  001438  51E3               	movf	(f_open@dj+5)& (0+255),w,b
  9506  00143A  22DA               	addwfc	fsr2h,f,c
  9507  00143C  CFDE F0D7          	movff	postinc2,f_open@dw
  9508  001440  CFDE F0D8          	movff	postinc2,f_open@dw+1
  9509  001444  CFDE F0D9          	movff	postinc2,f_open@dw+2
  9510  001448  CFDE F0DA          	movff	postinc2,f_open@dw+3
  9511                           
  9512                           ; BSR set to: 0
  9513                           ;tff.c: 886: if (!remove_chain(rs) || !move_window(dw))
  9514  00144C  C0D5  F0A0         	movff	f_open@rs,remove_chain@clust
  9515  001450  C0D6  F0A1         	movff	f_open@rs+1,remove_chain@clust+1
  9516  001454  EC7C  F021         	call	_remove_chain	;wreg free
  9517  001458  0900               	iorlw	0
  9518  00145A  B4D8               	btfsc	status,2,c
  9519  00145C  D00D               	goto	u13440
  9520                           
  9521                           ; BSR set to: 0
  9522  00145E  C0D7  F073         	movff	f_open@dw,move_window@sector
  9523  001462  C0D8  F074         	movff	f_open@dw+1,move_window@sector+1
  9524  001466  C0D9  F075         	movff	f_open@dw+2,move_window@sector+2
  9525  00146A  C0DA  F076         	movff	f_open@dw+3,move_window@sector+3
  9526  00146E  EC08  F017         	call	_move_window	;wreg free
  9527  001472  0900               	iorlw	0
  9528  001474  A4D8               	btfss	status,2,c
  9529  001476  D002               	goto	l11198
  9530  001478                     u13440:
  9531                           
  9532                           ; BSR set to: 0
  9533                           ;tff.c: 887: return FR_RW_ERROR;
  9534  001478  0E08               	movlw	8
  9535  00147A  0012               	return	
  9536  00147C                     l11198:
  9537                           
  9538                           ; BSR set to: 0
  9539                           ;tff.c: 888: dj.fs->last_clust = rs - 1;
  9540  00147C  0EFF               	movlw	255
  9541  00147E  6FC5               	movwf	??_f_open& (0+255),b
  9542  001480  0EFF               	movlw	255
  9543  001482  6FC6               	movwf	(??_f_open+1)& (0+255),b
  9544  001484  C0D5  F0C7         	movff	f_open@rs,??_f_open+2
  9545  001488  C0D6  F0C8         	movff	f_open@rs+1,??_f_open+3
  9546  00148C  51C5               	movf	??_f_open& (0+255),w,b
  9547  00148E  27C7               	addwf	(??_f_open+2)& (0+255),f,b
  9548  001490  51C6               	movf	(??_f_open+1)& (0+255),w,b
  9549  001492  23C8               	addwfc	(??_f_open+3)& (0+255),f,b
  9550  001494  EE20 F018          	lfsr	2,24
  9551  001498  51E2               	movf	(f_open@dj+4)& (0+255),w,b
  9552  00149A  26D9               	addwf	fsr2l,f,c
  9553  00149C  51E3               	movf	(f_open@dj+5)& (0+255),w,b
  9554  00149E  22DA               	addwfc	fsr2h,f,c
  9555  0014A0  C0C7  FFDE         	movff	??_f_open+2,postinc2
  9556  0014A4  C0C8  FFDD         	movff	??_f_open+3,postdec2
  9557  0014A8                     l11200:
  9558                           
  9559                           ; BSR set to: 0
  9560                           ;tff.c: 889: };tff.c: 890: };tff.c: 891: if (mode & 0x08) {
  9561  0014A8  A7C4               	btfss	f_open@mode& (0+255),3,b
  9562  0014AA  D045               	goto	l11232
  9563                           
  9564                           ; BSR set to: 0
  9565                           ;tff.c: 892: dir[11] = 0;
  9566  0014AC  EE20 F00B          	lfsr	2,11
  9567  0014B0  51DC               	movf	f_open@dir& (0+255),w,b
  9568  0014B2  26D9               	addwf	fsr2l,f,c
  9569  0014B4  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9570  0014B6  22DA               	addwfc	fsr2h,f,c
  9571  0014B8  0E00               	movlw	0
  9572  0014BA  6EDF               	movwf	indf2,c
  9573                           
  9574                           ; BSR set to: 0
  9575                           ;tff.c: 893: dw = get_fattime();
  9576  0014BC  EC02  F01A         	call	_get_fattime	;wreg free
  9577  0014C0  C01D  F0D7         	movff	?_get_fattime,f_open@dw
  9578  0014C4  C01E  F0D8         	movff	?_get_fattime+1,f_open@dw+1
  9579  0014C8  C01F  F0D9         	movff	?_get_fattime+2,f_open@dw+2
  9580  0014CC  C020  F0DA         	movff	?_get_fattime+3,f_open@dw+3
  9581                           
  9582                           ; BSR set to: 0
  9583                           ;tff.c: 894: *(DWORD*)(BYTE*)(&dir[14])=(DWORD)(dw);
  9584  0014D0  EE20 F00E          	lfsr	2,14
  9585  0014D4  51DC               	movf	f_open@dir& (0+255),w,b
  9586  0014D6  26D9               	addwf	fsr2l,f,c
  9587  0014D8  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9588  0014DA  22DA               	addwfc	fsr2h,f,c
  9589  0014DC  C0D7  FFDE         	movff	f_open@dw,postinc2
  9590  0014E0  C0D8  FFDE         	movff	f_open@dw+1,postinc2
  9591  0014E4  C0D9  FFDE         	movff	f_open@dw+2,postinc2
  9592  0014E8  C0DA  FFDE         	movff	f_open@dw+3,postinc2
  9593                           
  9594                           ; BSR set to: 0
  9595                           ;tff.c: 895: dj.fs->winflag = 1;
  9596  0014EC  EE20 F01F          	lfsr	2,31
  9597  0014F0  51E2               	movf	(f_open@dj+4)& (0+255),w,b
  9598  0014F2  26D9               	addwf	fsr2l,f,c
  9599  0014F4  51E3               	movf	(f_open@dj+5)& (0+255),w,b
  9600  0014F6  22DA               	addwfc	fsr2h,f,c
  9601  0014F8  0E01               	movlw	1
  9602  0014FA  6EDF               	movwf	indf2,c
  9603                           
  9604                           ; BSR set to: 0
  9605                           ;tff.c: 896: mode |= 0x20;
  9606  0014FC  8BC4               	bsf	f_open@mode& (0+255),5,b
  9607  0014FE  D01B               	goto	l11232
  9608  001500                     l11212:
  9609                           
  9610                           ; BSR set to: 0
  9611                           ;tff.c: 900: else {;tff.c: 902: if (res != FR_OK) return res;
  9612  001500  51DB               	movf	f_open@res& (0+255),w,b
  9613  001502  A4D8               	btfss	status,2,c
  9614  001504  D70B               	goto	u13340
  9615                           
  9616                           ; BSR set to: 0
  9617                           ;tff.c: 903: if (!dir || (dir[11] & 0x10))
  9618  001506  51DC               	movf	f_open@dir& (0+255),w,b
  9619  001508  11DD               	iorwf	(f_open@dir+1)& (0+255),w,b
  9620  00150A  B4D8               	btfsc	status,2,c
  9621  00150C  D008               	goto	u13480
  9622                           
  9623                           ; BSR set to: 0
  9624  00150E  EE20 F00B          	lfsr	2,11
  9625  001512  51DC               	movf	f_open@dir& (0+255),w,b
  9626  001514  26D9               	addwf	fsr2l,f,c
  9627  001516  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9628  001518  22DA               	addwfc	fsr2h,f,c
  9629  00151A  A8DF               	btfss	indf2,4,c
  9630  00151C  D002               	goto	l970
  9631  00151E                     u13480:
  9632                           
  9633                           ; BSR set to: 0
  9634                           ;tff.c: 904: return FR_NO_FILE;
  9635  00151E  0E02               	movlw	2
  9636  001520  0012               	return	
  9637  001522                     l970:
  9638                           
  9639                           ; BSR set to: 0
  9640                           ;tff.c: 906: if ((mode & 0x02) && (dir[11] & 0x01))
  9641  001522  A3C4               	btfss	f_open@mode& (0+255),1,b
  9642  001524  D008               	goto	l11232
  9643                           
  9644                           ; BSR set to: 0
  9645  001526  EE20 F00B          	lfsr	2,11
  9646  00152A  51DC               	movf	f_open@dir& (0+255),w,b
  9647  00152C  26D9               	addwf	fsr2l,f,c
  9648  00152E  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9649  001530  22DA               	addwfc	fsr2h,f,c
  9650  001532  B0DF               	btfsc	indf2,0,c
  9651  001534  D753               	goto	u13410
  9652  001536                     l11232:
  9653                           
  9654                           ; BSR set to: 0
  9655                           ;tff.c: 908: };tff.c: 909: fp->dir_sect = dj.fs->winsect;
  9656  001536  EE20 F004          	lfsr	2,4
  9657  00153A  51E2               	movf	(f_open@dj+4)& (0+255),w,b
  9658  00153C  26D9               	addwf	fsr2l,f,c
  9659  00153E  51E3               	movf	(f_open@dj+5)& (0+255),w,b
  9660  001540  22DA               	addwfc	fsr2h,f,c
  9661  001542  EE10 F016          	lfsr	1,22
  9662  001546  51C0               	movf	f_open@fp& (0+255),w,b
  9663  001548  26E1               	addwf	fsr1l,f,c
  9664  00154A  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9665  00154C  22E2               	addwfc	fsr1h,f,c
  9666  00154E  CFDE FFE6          	movff	postinc2,postinc1
  9667  001552  CFDE FFE6          	movff	postinc2,postinc1
  9668  001556  CFDE FFE6          	movff	postinc2,postinc1
  9669  00155A  CFDE FFE6          	movff	postinc2,postinc1
  9670                           
  9671                           ; BSR set to: 0
  9672                           ;tff.c: 910: fp->dir_ptr = dir;
  9673  00155E  EE20 F01A          	lfsr	2,26
  9674  001562  51C0               	movf	f_open@fp& (0+255),w,b
  9675  001564  26D9               	addwf	fsr2l,f,c
  9676  001566  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9677  001568  22DA               	addwfc	fsr2h,f,c
  9678  00156A  C0DC  FFDE         	movff	f_open@dir,postinc2
  9679  00156E  C0DD  FFDD         	movff	f_open@dir+1,postdec2
  9680                           
  9681                           ; BSR set to: 0
  9682                           ;tff.c: 912: fp->flag = mode;
  9683  001572  EE20 F002          	lfsr	2,2
  9684  001576  51C0               	movf	f_open@fp& (0+255),w,b
  9685  001578  26D9               	addwf	fsr2l,f,c
  9686  00157A  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9687  00157C  22DA               	addwfc	fsr2h,f,c
  9688  00157E  C0C4  FFDF         	movff	f_open@mode,indf2
  9689                           
  9690                           ;tff.c: 913: fp->org_clust =;tff.c: 917: (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  9691  001582  EE20 F01A          	lfsr	2,26
  9692  001586  51DC               	movf	f_open@dir& (0+255),w,b
  9693  001588  26D9               	addwf	fsr2l,f,c
  9694  00158A  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9695  00158C  22DA               	addwfc	fsr2h,f,c
  9696  00158E  EE10 F00E          	lfsr	1,14
  9697  001592  51C0               	movf	f_open@fp& (0+255),w,b
  9698  001594  26E1               	addwf	fsr1l,f,c
  9699  001596  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9700  001598  22E2               	addwfc	fsr1h,f,c
  9701  00159A  CFDE FFE6          	movff	postinc2,postinc1
  9702  00159E  CFDD FFE5          	movff	postdec2,postdec1
  9703                           
  9704                           ;tff.c: 918: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(&dir[28]));
  9705  0015A2  EE20 F01C          	lfsr	2,28
  9706  0015A6  51DC               	movf	f_open@dir& (0+255),w,b
  9707  0015A8  26D9               	addwf	fsr2l,f,c
  9708  0015AA  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9709  0015AC  22DA               	addwfc	fsr2h,f,c
  9710  0015AE  EE10 F00A          	lfsr	1,10
  9711  0015B2  51C0               	movf	f_open@fp& (0+255),w,b
  9712  0015B4  26E1               	addwf	fsr1l,f,c
  9713  0015B6  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9714  0015B8  22E2               	addwfc	fsr1h,f,c
  9715  0015BA  CFDE FFE6          	movff	postinc2,postinc1
  9716  0015BE  CFDE FFE6          	movff	postinc2,postinc1
  9717  0015C2  CFDE FFE6          	movff	postinc2,postinc1
  9718  0015C6  CFDE FFE6          	movff	postinc2,postinc1
  9719                           
  9720                           ; BSR set to: 0
  9721                           ;tff.c: 919: fp->fptr = 0; fp->csect = 255;
  9722  0015CA  EE20 F006          	lfsr	2,6
  9723  0015CE  51C0               	movf	f_open@fp& (0+255),w,b
  9724  0015D0  26D9               	addwf	fsr2l,f,c
  9725  0015D2  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9726  0015D4  22DA               	addwfc	fsr2h,f,c
  9727  0015D6  6ADE               	clrf	postinc2,c
  9728  0015D8  6ADE               	clrf	postinc2,c
  9729  0015DA  6ADE               	clrf	postinc2,c
  9730  0015DC  6ADD               	clrf	postdec2,c
  9731                           
  9732                           ; BSR set to: 0
  9733  0015DE  EE20 F003          	lfsr	2,3
  9734  0015E2  51C0               	movf	f_open@fp& (0+255),w,b
  9735  0015E4  26D9               	addwf	fsr2l,f,c
  9736  0015E6  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9737  0015E8  22DA               	addwfc	fsr2h,f,c
  9738  0015EA  0EFF               	movlw	255
  9739  0015EC  6EDF               	movwf	indf2,c
  9740                           
  9741                           ; BSR set to: 0
  9742                           ;tff.c: 920: fp->fs = dj.fs; fp->id = dj.fs->id;
  9743  0015EE  EE20 F004          	lfsr	2,4
  9744  0015F2  51C0               	movf	f_open@fp& (0+255),w,b
  9745  0015F4  26D9               	addwf	fsr2l,f,c
  9746  0015F6  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9747  0015F8  22DA               	addwfc	fsr2h,f,c
  9748  0015FA  C0E2  FFDE         	movff	f_open@dj+4,postinc2
  9749  0015FE  C0E3  FFDD         	movff	f_open@dj+5,postdec2
  9750                           
  9751                           ; BSR set to: 0
  9752  001602  C0E2  FFD9         	movff	f_open@dj+4,fsr2l
  9753  001606  C0E3  FFDA         	movff	f_open@dj+5,fsr2h
  9754  00160A  C0C0  FFE1         	movff	f_open@fp,fsr1l
  9755  00160E  C0C1  FFE2         	movff	f_open@fp+1,fsr1h
  9756  001612  CFDE FFE6          	movff	postinc2,postinc1
  9757  001616  CFDD FFE5          	movff	postdec2,postdec1
  9758                           
  9759                           ; BSR set to: 0
  9760                           ;tff.c: 922: return FR_OK;
  9761  00161A  0E00               	movlw	0
  9762                           
  9763                           ; BSR set to: 0
  9764  00161C  0012               	return		;funcret
  9765  00161E                     __end_of_f_open:
  9766                           	callstack 0
  9767                           
  9768 ;; *************** function _trace_path *****************
  9769 ;; Defined at:
  9770 ;;		line 502 in file "bibliotecas/tff.c"
  9771 ;; Parameters:    Size  Location     Type
  9772 ;;  dj              1   71[BANK0 ] PTR struct _DIR_E
  9773 ;;		 -> f_open@dj(14), 
  9774 ;;  fn              1   72[BANK0 ] PTR unsigned char 
  9775 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
  9776 ;;  path            2   73[BANK0 ] PTR const unsigned char 
  9777 ;;		 -> STR_20(13), filename(15), 
  9778 ;;  dir             1   75[BANK0 ] PTR PTR unsigned char 
  9779 ;;		 -> f_opendir@dir(2), f_open@dir(2), 
  9780 ;; Auto vars:     Size  Location     Type
  9781 ;;  dptr            2   89[BANK0 ] PTR unsigned char 
  9782 ;;		 -> fs.win(512), NULL(0), fs(544), 
  9783 ;;  clust           2   86[BANK0 ] unsigned short 
  9784 ;;  fs              2   84[BANK0 ] PTR struct _FATFS
  9785 ;;		 -> NULL(0), fs(544), 
  9786 ;;  ds              1   88[BANK0 ] unsigned char 
  9787 ;; Return value:  Size  Location     Type
  9788 ;;                  1    wreg      enum E155
  9789 ;; Registers used:
  9790 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9791 ;; Tracked objects:
  9792 ;;		On entry : 3F/0
  9793 ;;		On exit  : 3F/0
  9794 ;;		Unchanged: 0/0
  9795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9796 ;;      Params:         0       5       0       0       0       0       0       0       0
  9797 ;;      Locals:         0      11       0       0       0       0       0       0       0
  9798 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9799 ;;      Totals:         0      20       0       0       0       0       0       0       0
  9800 ;;Total ram usage:       20 bytes
  9801 ;; Hardware stack levels used:    1
  9802 ;; Hardware stack levels required when called:   11
  9803 ;; This function calls:
  9804 ;;		_clust2sect
  9805 ;;		_make_dirfile
  9806 ;;		_memcmp
  9807 ;;		_move_window
  9808 ;;		_next_dir_entry
  9809 ;; This function is called by:
  9810 ;;		_f_open
  9811 ;; This function uses a non-reentrant model
  9812 ;;
  9813                           
  9814                           	psect	text48
  9815  001F0C                     __ptext48:
  9816                           	callstack 0
  9817  001F0C                     _trace_path:
  9818                           	callstack 15
  9819                           
  9820                           ; BSR set to: 0
  9821                           ;tff.c: 512: FATFS *fs = FatFs;
  9822                           
  9823                           ; BSR set to: 0
  9824                           ;incstack = 0
  9825  001F0C  C038  F0B4         	movff	_FatFs,trace_path@fs
  9826  001F10  C039  F0B5         	movff	_FatFs+1,trace_path@fs+1
  9827                           
  9828                           ; BSR set to: 0
  9829                           ;tff.c: 515: dj->fs = fs;
  9830  001F14  51A7               	movf	trace_path@dj& (0+255),w,b
  9831  001F16  6ED9               	movwf	fsr2l,c
  9832  001F18  6ADA               	clrf	fsr2h,c
  9833  001F1A  0E04               	movlw	4
  9834  001F1C  26D9               	addwf	fsr2l,f,c
  9835  001F1E  C0B4  FFDE         	movff	trace_path@fs,postinc2
  9836  001F22  C0B5  FFDD         	movff	trace_path@fs+1,postdec2
  9837                           
  9838                           ; BSR set to: 0
  9839                           ;tff.c: 516: clust = fs->dirbase;
  9840  001F26  EE20 F00C          	lfsr	2,12
  9841  001F2A  51B4               	movf	trace_path@fs& (0+255),w,b
  9842  001F2C  26D9               	addwf	fsr2l,f,c
  9843  001F2E  51B5               	movf	(trace_path@fs+1)& (0+255),w,b
  9844  001F30  22DA               	addwfc	fsr2h,f,c
  9845  001F32  CFDE F0B6          	movff	postinc2,trace_path@clust
  9846  001F36  CFDD F0B7          	movff	postdec2,trace_path@clust+1
  9847                           
  9848                           ; BSR set to: 0
  9849                           ;tff.c: 523: {;tff.c: 524: dj->clust = dj->sclust = 0;
  9850  001F3A  51A7               	movf	trace_path@dj& (0+255),w,b
  9851  001F3C  6ED9               	movwf	fsr2l,c
  9852  001F3E  6ADA               	clrf	fsr2h,c
  9853  001F40  0E06               	movlw	6
  9854  001F42  26D9               	addwf	fsr2l,f,c
  9855  001F44  0E00               	movlw	0
  9856  001F46  6EDE               	movwf	postinc2,c
  9857  001F48  0E00               	movlw	0
  9858  001F4A  6EDD               	movwf	postdec2,c
  9859  001F4C  51A7               	movf	trace_path@dj& (0+255),w,b
  9860  001F4E  6EE1               	movwf	fsr1l,c
  9861  001F50  6AE2               	clrf	fsr1h,c
  9862  001F52  0E08               	movlw	8
  9863  001F54  26E1               	addwf	fsr1l,f,c
  9864  001F56  CFDE FFE6          	movff	postinc2,postinc1
  9865  001F5A  CFDD FFE5          	movff	postdec2,postdec1
  9866                           
  9867                           ; BSR set to: 0
  9868                           ;tff.c: 525: dj->sect = clust;
  9869  001F5E  51B6               	movf	trace_path@clust& (0+255),w,b
  9870  001F60  6FAC               	movwf	??_trace_path& (0+255),b
  9871  001F62  51B7               	movf	(trace_path@clust+1)& (0+255),w,b
  9872  001F64  6FAD               	movwf	(??_trace_path+1)& (0+255),b
  9873  001F66  6BAE               	clrf	(??_trace_path+2)& (0+255),b
  9874  001F68  6BAF               	clrf	(??_trace_path+3)& (0+255),b
  9875  001F6A  51A7               	movf	trace_path@dj& (0+255),w,b
  9876  001F6C  6ED9               	movwf	fsr2l,c
  9877  001F6E  6ADA               	clrf	fsr2h,c
  9878  001F70  0E0A               	movlw	10
  9879  001F72  26D9               	addwf	fsr2l,f,c
  9880  001F74  C0AC  FFDE         	movff	??_trace_path,postinc2
  9881  001F78  C0AD  FFDE         	movff	??_trace_path+1,postinc2
  9882  001F7C  C0AE  FFDE         	movff	??_trace_path+2,postinc2
  9883  001F80  C0AF  FFDE         	movff	??_trace_path+3,postinc2
  9884                           
  9885                           ; BSR set to: 0
  9886                           ;tff.c: 526: };tff.c: 527: dj->index = 0;
  9887  001F84  51A7               	movf	trace_path@dj& (0+255),w,b
  9888  001F86  6ED9               	movwf	fsr2l,c
  9889  001F88  6ADA               	clrf	fsr2h,c
  9890  001F8A  0E02               	movlw	2
  9891  001F8C  26D9               	addwf	fsr2l,f,c
  9892  001F8E  0E00               	movlw	0
  9893  001F90  6EDE               	movwf	postinc2,c
  9894  001F92  0E00               	movlw	0
  9895  001F94  6EDD               	movwf	postdec2,c
  9896                           
  9897                           ; BSR set to: 0
  9898                           ;tff.c: 529: if (*path == '\0') {
  9899  001F96  C0A9  FFF6         	movff	trace_path@path,tblptrl
  9900  001F9A  C0AA  FFF7         	movff	trace_path@path+1,tblptrh
  9901  001F9E  6AF8               	clrf	tblptru,c
  9902  001FA0  0E07               	movlw	(high __ramtop+-1)
  9903  001FA2  64F7               	cpfsgt	tblptrh,c
  9904  001FA4  D003               	bra	u12667
  9905  001FA6  0008               	tblrd		*
  9906  001FA8  50F5               	movf	tablat,w,c
  9907  001FAA  D005               	bra	u12660
  9908  001FAC                     u12667:
  9909  001FAC  CFF6 FFE1          	movff	tblptrl,fsr1l
  9910  001FB0  CFF7 FFE2          	movff	tblptrh,fsr1h
  9911  001FB4  50E7               	movf	indf1,w,c
  9912  001FB6                     u12660:
  9913  001FB6  0900               	iorlw	0
  9914  001FB8  A4D8               	btfss	status,2,c
  9915  001FBA  D00A               	goto	l10774
  9916                           
  9917                           ;tff.c: 530: *dir = (0); return FR_OK;
  9918  001FBC  0100               	movlb	0	; () banked
  9919  001FBE  51AB               	movf	trace_path@dir& (0+255),w,b
  9920  001FC0  6ED9               	movwf	fsr2l,c
  9921  001FC2  6ADA               	clrf	fsr2h,c
  9922  001FC4  0E00               	movlw	0
  9923  001FC6  6EDE               	movwf	postinc2,c
  9924  001FC8  0E00               	movlw	0
  9925  001FCA  6EDD               	movwf	postdec2,c
  9926  001FCC                     l10770:
  9927                           
  9928                           ; BSR set to: 0
  9929  001FCC  0E00               	movlw	0
  9930  001FCE  0012               	return	
  9931  001FD0                     l10774:
  9932                           
  9933                           ;tff.c: 534: ds = make_dirfile(&path, fn);
  9934  001FD0  0EA9               	movlw	low trace_path@path
  9935  001FD2  6E21               	movwf	make_dirfile@path^0,c
  9936  001FD4  C0A8  F022         	movff	trace_path@fn,make_dirfile@dirname
  9937  001FD8  EC55  F019         	call	_make_dirfile	;wreg free
  9938  001FDC  0100               	movlb	0	; () banked
  9939  001FDE  6FB8               	movwf	trace_path@ds& (0+255),b
  9940                           
  9941                           ; BSR set to: 0
  9942                           ;tff.c: 535: if (ds == 1) return FR_INVALID_NAME;
  9943  001FE0  05B8               	decf	trace_path@ds& (0+255),w,b
  9944  001FE2  A4D8               	btfss	status,2,c
  9945  001FE4  D002               	goto	l10782
  9946                           
  9947                           ; BSR set to: 0
  9948  001FE6  0E04               	movlw	4
  9949  001FE8  0012               	return	
  9950  001FEA                     l10782:
  9951                           
  9952                           ; BSR set to: 0
  9953                           ;tff.c: 537: if (!move_window(dj->sect)) return FR_RW_ERROR;
  9954  001FEA  51A7               	movf	trace_path@dj& (0+255),w,b
  9955  001FEC  6ED9               	movwf	fsr2l,c
  9956  001FEE  6ADA               	clrf	fsr2h,c
  9957  001FF0  0E0A               	movlw	10
  9958  001FF2  26D9               	addwf	fsr2l,f,c
  9959  001FF4  CFDE F073          	movff	postinc2,move_window@sector
  9960  001FF8  CFDE F074          	movff	postinc2,move_window@sector+1
  9961  001FFC  CFDE F075          	movff	postinc2,move_window@sector+2
  9962  002000  CFDE F076          	movff	postinc2,move_window@sector+3
  9963  002004  EC08  F017         	call	_move_window	;wreg free
  9964  002008  0900               	iorlw	0
  9965  00200A  A4D8               	btfss	status,2,c
  9966  00200C  D002               	goto	l10788
  9967                           
  9968                           ; BSR set to: 0
  9969  00200E  0E08               	movlw	8
  9970  002010  0012               	return	
  9971  002012                     l10788:
  9972                           
  9973                           ; BSR set to: 0
  9974                           ;tff.c: 538: dptr = &fs->win[(dj->index & 15) * 32];
  9975  002012  51A7               	movf	trace_path@dj& (0+255),w,b
  9976  002014  6ED9               	movwf	fsr2l,c
  9977  002016  6ADA               	clrf	fsr2h,c
  9978  002018  0E02               	movlw	2
  9979  00201A  26D9               	addwf	fsr2l,f,c
  9980  00201C  CFDE F0AC          	movff	postinc2,??_trace_path
  9981  002020  CFDD F0AD          	movff	postdec2,??_trace_path+1
  9982  002024  0E0F               	movlw	15
  9983  002026  17AC               	andwf	??_trace_path& (0+255),f,b
  9984  002028  0E00               	movlw	0
  9985  00202A  17AD               	andwf	(??_trace_path+1)& (0+255),f,b
  9986  00202C  0E05               	movlw	5
  9987  00202E                     u12705:
  9988  00202E  90D8               	bcf	status,0,c
  9989  002030  37AC               	rlcf	??_trace_path& (0+255),f,b
  9990  002032  37AD               	rlcf	(??_trace_path+1)& (0+255),f,b
  9991  002034  2EE8               	decfsz	wreg,f,c
  9992  002036  D7FB               	goto	u12705
  9993  002038  C0B4  F0AE         	movff	trace_path@fs,??_trace_path+2
  9994  00203C  C0B5  F0AF         	movff	trace_path@fs+1,??_trace_path+3
  9995  002040  51AC               	movf	??_trace_path& (0+255),w,b
  9996  002042  27AE               	addwf	(??_trace_path+2)& (0+255),f,b
  9997  002044  51AD               	movf	(??_trace_path+1)& (0+255),w,b
  9998  002046  23AF               	addwfc	(??_trace_path+3)& (0+255),f,b
  9999  002048  0E20               	movlw	32
 10000  00204A  25AE               	addwf	(??_trace_path+2)& (0+255),w,b
 10001  00204C  6FB9               	movwf	trace_path@dptr& (0+255),b
 10002  00204E  0E00               	movlw	0
 10003  002050  21AF               	addwfc	(??_trace_path+3)& (0+255),w,b
 10004  002052  6FBA               	movwf	(trace_path@dptr+1)& (0+255),b
 10005                           
 10006                           ; BSR set to: 0
 10007                           ;tff.c: 539: if (dptr[0] == 0)
 10008  002054  C0B9  FFD9         	movff	trace_path@dptr,fsr2l
 10009  002058  C0BA  FFDA         	movff	trace_path@dptr+1,fsr2h
 10010  00205C  50DF               	movf	indf2,w,c
 10011  00205E  A4D8               	btfss	status,2,c
 10012  002060  D00D               	goto	l10800
 10013                           
 10014                           ; BSR set to: 0
 10015                           ;tff.c: 540: return !ds ? FR_NO_FILE : FR_NO_PATH;
 10016  002062  51B8               	movf	trace_path@ds& (0+255),w,b
 10017  002064  B4D8               	btfsc	status,2,c
 10018  002066  D004               	goto	l10796
 10019                           
 10020                           ; BSR set to: 0
 10021  002068  0E00               	movlw	0
 10022  00206A  6FB1               	movwf	(_trace_path$1684+1)& (0+255),b
 10023  00206C  0E03               	movlw	3
 10024  00206E  D003               	goto	L3
 10025  002070                     l10796:
 10026                           
 10027                           ; BSR set to: 0
 10028  002070  0E00               	movlw	0
 10029  002072  6FB1               	movwf	(_trace_path$1684+1)& (0+255),b
 10030  002074  0E02               	movlw	2
 10031  002076                     L3:
 10032  002076  6FB0               	movwf	_trace_path$1684& (0+255),b
 10033                           
 10034                           ; BSR set to: 0
 10035  002078  51B0               	movf	_trace_path$1684& (0+255),w,b
 10036  00207A  0012               	return	
 10037  00207C                     l10800:
 10038                           
 10039                           ; BSR set to: 0
 10040                           ;tff.c: 541: if (dptr[0] != 0xE5;tff.c: 542: && !(dptr[11] & 0x08);tff.c: 543: && !memcm
      +                          p(&dptr[0], fn, 8+3) ) break;
 10041  00207C  C0B9  FFD9         	movff	trace_path@dptr,fsr2l
 10042  002080  C0BA  FFDA         	movff	trace_path@dptr+1,fsr2h
 10043  002084  0EE5               	movlw	229
 10044  002086  18DE               	xorwf	postinc2,w,c
 10045  002088  B4D8               	btfsc	status,2,c
 10046  00208A  D019               	goto	l10808
 10047                           
 10048                           ; BSR set to: 0
 10049  00208C  EE20 F00B          	lfsr	2,11
 10050  002090  51B9               	movf	trace_path@dptr& (0+255),w,b
 10051  002092  26D9               	addwf	fsr2l,f,c
 10052  002094  51BA               	movf	(trace_path@dptr+1)& (0+255),w,b
 10053  002096  22DA               	addwfc	fsr2h,f,c
 10054  002098  B6DF               	btfsc	indf2,3,c
 10055  00209A  D011               	goto	l10808
 10056                           
 10057                           ; BSR set to: 0
 10058  00209C  C0B9  F019         	movff	trace_path@dptr,memcmp@s1
 10059  0020A0  C0BA  F01A         	movff	trace_path@dptr+1,memcmp@s1+1
 10060  0020A4  C0A8  F01B         	movff	trace_path@fn,memcmp@s2
 10061  0020A8  6A1C               	clrf	(memcmp@s2+1)^0,c
 10062  0020AA  0E00               	movlw	0
 10063  0020AC  6E1E               	movwf	(memcmp@n+1)^0,c
 10064  0020AE  0E0B               	movlw	11
 10065  0020B0  6E1D               	movwf	memcmp@n^0,c
 10066  0020B2  EC14  F022         	call	_memcmp	;wreg free
 10067  0020B6  5019               	movf	?_memcmp^0,w,c
 10068  0020B8  101A               	iorwf	(?_memcmp+1)^0,w,c
 10069  0020BA  B4D8               	btfsc	status,2,c
 10070  0020BC  D014               	goto	l10818
 10071  0020BE                     l10808:
 10072                           
 10073                           ;tff.c: 544: if (!next_dir_entry(dj))
 10074  0020BE  C0A7  F09B         	movff	trace_path@dj,next_dir_entry@dj
 10075  0020C2  ECA3  F018         	call	_next_dir_entry	;wreg free
 10076  0020C6  0900               	iorlw	0
 10077  0020C8  A4D8               	btfss	status,2,c
 10078  0020CA  D78F               	goto	l10782
 10079                           
 10080                           ; BSR set to: 0
 10081                           ;tff.c: 545: return !ds ? FR_NO_FILE : FR_NO_PATH;
 10082  0020CC  51B8               	movf	trace_path@ds& (0+255),w,b
 10083  0020CE  B4D8               	btfsc	status,2,c
 10084  0020D0  D004               	goto	l10814
 10085                           
 10086                           ; BSR set to: 0
 10087  0020D2  0E00               	movlw	0
 10088  0020D4  6FB3               	movwf	(_trace_path$1686+1)& (0+255),b
 10089  0020D6  0E03               	movlw	3
 10090  0020D8  D003               	goto	L4
 10091  0020DA                     l10814:
 10092                           
 10093                           ; BSR set to: 0
 10094  0020DA  0E00               	movlw	0
 10095  0020DC  6FB3               	movwf	(_trace_path$1686+1)& (0+255),b
 10096  0020DE  0E02               	movlw	2
 10097  0020E0                     L4:
 10098  0020E0  6FB2               	movwf	_trace_path$1686& (0+255),b
 10099                           
 10100                           ; BSR set to: 0
 10101  0020E2  51B2               	movf	_trace_path$1686& (0+255),w,b
 10102  0020E4  0012               	return	
 10103  0020E6                     l10818:
 10104                           
 10105                           ;tff.c: 547: if (!ds) { *dir = dptr; return FR_OK; }
 10106  0020E6  0100               	movlb	0	; () banked
 10107  0020E8  51B8               	movf	trace_path@ds& (0+255),w,b
 10108  0020EA  A4D8               	btfss	status,2,c
 10109  0020EC  D008               	goto	l10826
 10110                           
 10111                           ; BSR set to: 0
 10112  0020EE  51AB               	movf	trace_path@dir& (0+255),w,b
 10113  0020F0  6ED9               	movwf	fsr2l,c
 10114  0020F2  6ADA               	clrf	fsr2h,c
 10115  0020F4  C0B9  FFDE         	movff	trace_path@dptr,postinc2
 10116  0020F8  C0BA  FFDD         	movff	trace_path@dptr+1,postdec2
 10117  0020FC  D767               	goto	l10770
 10118  0020FE                     l10826:
 10119                           
 10120                           ; BSR set to: 0
 10121                           ;tff.c: 548: if (!(dptr[11] & 0x10)) return FR_NO_PATH;
 10122  0020FE  EE20 F00B          	lfsr	2,11
 10123  002102  51B9               	movf	trace_path@dptr& (0+255),w,b
 10124  002104  26D9               	addwf	fsr2l,f,c
 10125  002106  51BA               	movf	(trace_path@dptr+1)& (0+255),w,b
 10126  002108  22DA               	addwfc	fsr2h,f,c
 10127  00210A  B8DF               	btfsc	indf2,4,c
 10128  00210C  D002               	goto	l10832
 10129                           
 10130                           ; BSR set to: 0
 10131  00210E  0E03               	movlw	3
 10132  002110  0012               	return	
 10133  002112                     l10832:
 10134                           
 10135                           ; BSR set to: 0
 10136                           ;tff.c: 549: clust =;tff.c: 553: (WORD)(*(WORD*)(BYTE*)(&dptr[26]));
 10137  002112  EE20 F01A          	lfsr	2,26
 10138  002116  51B9               	movf	trace_path@dptr& (0+255),w,b
 10139  002118  26D9               	addwf	fsr2l,f,c
 10140  00211A  51BA               	movf	(trace_path@dptr+1)& (0+255),w,b
 10141  00211C  22DA               	addwfc	fsr2h,f,c
 10142  00211E  CFDE F0B6          	movff	postinc2,trace_path@clust
 10143  002122  CFDD F0B7          	movff	postdec2,trace_path@clust+1
 10144                           
 10145                           ; BSR set to: 0
 10146                           ;tff.c: 554: dj->clust = dj->sclust = clust;
 10147  002126  51A7               	movf	trace_path@dj& (0+255),w,b
 10148  002128  6ED9               	movwf	fsr2l,c
 10149  00212A  6ADA               	clrf	fsr2h,c
 10150  00212C  0E06               	movlw	6
 10151  00212E  26D9               	addwf	fsr2l,f,c
 10152  002130  C0B6  FFDE         	movff	trace_path@clust,postinc2
 10153  002134  C0B7  FFDD         	movff	trace_path@clust+1,postdec2
 10154  002138  51A7               	movf	trace_path@dj& (0+255),w,b
 10155  00213A  6EE1               	movwf	fsr1l,c
 10156  00213C  6AE2               	clrf	fsr1h,c
 10157  00213E  0E08               	movlw	8
 10158  002140  26E1               	addwf	fsr1l,f,c
 10159  002142  CFDE FFE6          	movff	postinc2,postinc1
 10160  002146  CFDD FFE5          	movff	postdec2,postdec1
 10161                           
 10162                           ; BSR set to: 0
 10163                           ;tff.c: 555: dj->sect = clust2sect(clust);
 10164  00214A  C0B6  F025         	movff	trace_path@clust,clust2sect@clust
 10165  00214E  C0B7  F026         	movff	trace_path@clust+1,clust2sect@clust+1
 10166  002152  ECD4  F01F         	call	_clust2sect	;wreg free
 10167  002156  51A7               	movf	trace_path@dj& (0+255),w,b
 10168  002158  6ED9               	movwf	fsr2l,c
 10169  00215A  6ADA               	clrf	fsr2h,c
 10170  00215C  0E0A               	movlw	10
 10171  00215E  26D9               	addwf	fsr2l,f,c
 10172  002160  C025  FFDE         	movff	?_clust2sect,postinc2
 10173  002164  C026  FFDE         	movff	?_clust2sect+1,postinc2
 10174  002168  C027  FFDE         	movff	?_clust2sect+2,postinc2
 10175  00216C  C028  FFDE         	movff	?_clust2sect+3,postinc2
 10176                           
 10177                           ; BSR set to: 0
 10178                           ;tff.c: 556: dj->index = 2;
 10179  002170  51A7               	movf	trace_path@dj& (0+255),w,b
 10180  002172  6ED9               	movwf	fsr2l,c
 10181  002174  6ADA               	clrf	fsr2h,c
 10182  002176  0E02               	movlw	2
 10183  002178  26D9               	addwf	fsr2l,f,c
 10184  00217A  0E02               	movlw	2
 10185  00217C  6EDE               	movwf	postinc2,c
 10186  00217E  0E00               	movlw	0
 10187  002180  6EDD               	movwf	postdec2,c
 10188                           
 10189                           ;tff.c: 557: }
 10190  002182  D726               	goto	l10774
 10191  002184                     __end_of_trace_path:
 10192                           	callstack 0
 10193                           
 10194 ;; *************** function _make_dirfile *****************
 10195 ;; Defined at:
 10196 ;;		line 439 in file "bibliotecas/tff.c"
 10197 ;; Parameters:    Size  Location     Type
 10198 ;;  path            1   32[COMRAM] PTR PTR const unsigned c
 10199 ;;		 -> trace_path@path(2), 
 10200 ;;  dirname         1   33[COMRAM] PTR unsigned char 
 10201 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
 10202 ;; Auto vars:     Size  Location     Type
 10203 ;;  c               1   42[COMRAM] unsigned char 
 10204 ;;  n               1   41[COMRAM] unsigned char 
 10205 ;;  a               1   40[COMRAM] unsigned char 
 10206 ;;  t               1   39[COMRAM] unsigned char 
 10207 ;;  b               1   38[COMRAM] unsigned char 
 10208 ;; Return value:  Size  Location     Type
 10209 ;;                  1    wreg      unsigned char 
 10210 ;; Registers used:
 10211 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10212 ;; Tracked objects:
 10213 ;;		On entry : 0/0
 10214 ;;		On exit  : 0/0
 10215 ;;		Unchanged: 0/0
 10216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10217 ;;      Params:         2       0       0       0       0       0       0       0       0
 10218 ;;      Locals:         7       0       0       0       0       0       0       0       0
 10219 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10220 ;;      Totals:        11       0       0       0       0       0       0       0       0
 10221 ;;Total ram usage:       11 bytes
 10222 ;; Hardware stack levels used:    1
 10223 ;; Hardware stack levels required when called:    4
 10224 ;; This function calls:
 10225 ;;		_memset
 10226 ;; This function is called by:
 10227 ;;		_trace_path
 10228 ;; This function uses a non-reentrant model
 10229 ;;
 10230                           
 10231                           	psect	text49
 10232  0032AA                     __ptext49:
 10233                           	callstack 0
 10234  0032AA                     _make_dirfile:
 10235                           	callstack 21
 10236                           
 10237                           ;tff.c: 444: BYTE n, t, c, a, b;;tff.c: 447: memset(dirname, ' ', 8+3);
 10238                           
 10239                           ; BSR set to: 0
 10240                           ;incstack = 0
 10241  0032AA  C022  F019         	movff	make_dirfile@dirname,memset@p1
 10242  0032AE  6A1A               	clrf	(memset@p1+1)^0,c
 10243  0032B0  0E00               	movlw	0
 10244  0032B2  6E1C               	movwf	(memset@c+1)^0,c
 10245  0032B4  0E20               	movlw	32
 10246  0032B6  6E1B               	movwf	memset@c^0,c
 10247  0032B8  0E00               	movlw	0
 10248  0032BA  6E1E               	movwf	(memset@n+1)^0,c
 10249  0032BC  0E0B               	movlw	11
 10250  0032BE  6E1D               	movwf	memset@n^0,c
 10251  0032C0  EC97  F028         	call	_memset	;wreg free
 10252                           
 10253                           ;tff.c: 448: a = 0; b = 0x18;
 10254  0032C4  0E00               	movlw	0
 10255  0032C6  6E29               	movwf	make_dirfile@a^0,c
 10256  0032C8  0E18               	movlw	24
 10257  0032CA  6E27               	movwf	make_dirfile@b^0,c
 10258                           
 10259                           ;tff.c: 449: n = 0; t = 8;
 10260  0032CC  0E00               	movlw	0
 10261  0032CE  6E2A               	movwf	make_dirfile@n^0,c
 10262  0032D0  0E08               	movlw	8
 10263  0032D2  6E28               	movwf	make_dirfile@t^0,c
 10264  0032D4                     l7068:
 10265                           
 10266                           ;tff.c: 451: c = *(*path)++;
 10267  0032D4  5021               	movf	make_dirfile@path^0,w,c
 10268  0032D6  6ED9               	movwf	fsr2l,c
 10269  0032D8  6ADA               	clrf	fsr2h,c
 10270  0032DA  CFDF F023          	movff	indf2,??_make_dirfile
 10271  0032DE  0E01               	movlw	1
 10272  0032E0  26DE               	addwf	postinc2,f,c
 10273  0032E2  CFDF F024          	movff	indf2,??_make_dirfile+1
 10274  0032E6  0E00               	movlw	0
 10275  0032E8  22DD               	addwfc	postdec2,f,c
 10276  0032EA  C023  FFF6         	movff	??_make_dirfile,tblptrl
 10277  0032EE  C024  FFF7         	movff	??_make_dirfile+1,tblptrh
 10278  0032F2  6AF8               	clrf	tblptru,c
 10279  0032F4  0E07               	movlw	(high __ramtop+-1)
 10280  0032F6  64F7               	cpfsgt	tblptrh,c
 10281  0032F8  D003               	bra	u6887
 10282  0032FA  0008               	tblrd		*
 10283  0032FC  50F5               	movf	tablat,w,c
 10284  0032FE  D005               	bra	u6880
 10285  003300                     u6887:
 10286  003300  CFF6 FFE1          	movff	tblptrl,fsr1l
 10287  003304  CFF7 FFE2          	movff	tblptrh,fsr1h
 10288  003308  50E7               	movf	indf1,w,c
 10289  00330A                     u6880:
 10290  00330A  6E2B               	movwf	make_dirfile@c^0,c
 10291                           
 10292                           ;tff.c: 452: if (c == '\0' || c == '/') {
 10293  00330C  502B               	movf	make_dirfile@c^0,w,c
 10294  00330E  B4D8               	btfsc	status,2,c
 10295  003310  D004               	goto	u6900
 10296  003312  0E2F               	movlw	47
 10297  003314  182B               	xorwf	make_dirfile@c^0,w,c
 10298  003316  A4D8               	btfss	status,2,c
 10299  003318  D012               	goto	l7088
 10300  00331A                     u6900:
 10301                           
 10302                           ;tff.c: 453: if (n == 0) break;
 10303  00331A  502A               	movf	make_dirfile@n^0,w,c
 10304  00331C  B4D8               	btfsc	status,2,c
 10305  00331E  D070               	goto	l7176
 10306  003320  5029               	movf	make_dirfile@a^0,w,c
 10307  003322  1427               	andwf	make_dirfile@b^0,w,c
 10308  003324  6E23               	movwf	??_make_dirfile^0,c
 10309  003326  5023               	movf	??_make_dirfile^0,w,c
 10310  003328  6E25               	movwf	_make_dirfile$1637^0,c
 10311  00332A  6A26               	clrf	(_make_dirfile$1637+1)^0,c
 10312  00332C  5022               	movf	make_dirfile@dirname^0,w,c
 10313  00332E  6ED9               	movwf	fsr2l,c
 10314  003330  6ADA               	clrf	fsr2h,c
 10315  003332  0E0B               	movlw	11
 10316  003334  26D9               	addwf	fsr2l,f,c
 10317  003336  C025  FFDF         	movff	_make_dirfile$1637,indf2
 10318                           
 10319                           ;tff.c: 455: return c;
 10320  00333A  502B               	movf	make_dirfile@c^0,w,c
 10321  00333C  0012               	return	
 10322  00333E                     l7088:
 10323                           
 10324                           ;tff.c: 456: };tff.c: 457: if (c <= ' ' || c == 0x7F) break;
 10325  00333E  0E20               	movlw	32
 10326  003340  642B               	cpfsgt	make_dirfile@c^0,c
 10327  003342  D05E               	goto	l7176
 10328  003344  0E7F               	movlw	127
 10329  003346  182B               	xorwf	make_dirfile@c^0,w,c
 10330  003348  B4D8               	btfsc	status,2,c
 10331  00334A  D05A               	goto	l7176
 10332                           
 10333                           ;tff.c: 458: if (c == '.') {
 10334  00334C  0E2E               	movlw	46
 10335  00334E  182B               	xorwf	make_dirfile@c^0,w,c
 10336  003350  A4D8               	btfss	status,2,c
 10337  003352  D00C               	goto	l7118
 10338                           
 10339                           ;tff.c: 459: if (!(a & 1) && n >= 1 && n <= 8) {
 10340  003354  B029               	btfsc	make_dirfile@a^0,0,c
 10341  003356  D054               	goto	l7176
 10342  003358  502A               	movf	make_dirfile@n^0,w,c
 10343  00335A  B4D8               	btfsc	status,2,c
 10344  00335C  D051               	goto	l7176
 10345  00335E  0E09               	movlw	9
 10346  003360  602A               	cpfslt	make_dirfile@n^0,c
 10347  003362  D04E               	goto	l7176
 10348                           
 10349                           ;tff.c: 460: n = 8; t = 11; continue;
 10350  003364  0E08               	movlw	8
 10351  003366  6E2A               	movwf	make_dirfile@n^0,c
 10352  003368  0E0B               	movlw	11
 10353  00336A  D7B3               	goto	L5
 10354  00336C                     l7118:
 10355                           
 10356                           ;tff.c: 470: };tff.c: 471: if (c == '"') break;
 10357  00336C  0E22               	movlw	34
 10358  00336E  182B               	xorwf	make_dirfile@c^0,w,c
 10359  003370  B4D8               	btfsc	status,2,c
 10360  003372  D046               	goto	l7176
 10361                           
 10362                           ;tff.c: 472: if (c <= ')') goto md_l1;
 10363  003374  0E2A               	movlw	42
 10364  003376  602B               	cpfslt	make_dirfile@c^0,c
 10365  003378  D001               	goto	l7126
 10366  00337A  D035               	goto	l843
 10367  00337C                     l7126:
 10368                           
 10369                           ;tff.c: 473: if (c <= ',') break;
 10370  00337C  0E2D               	movlw	45
 10371  00337E  602B               	cpfslt	make_dirfile@c^0,c
 10372  003380  D001               	goto	l7130
 10373  003382  D03E               	goto	l7176
 10374  003384                     l7130:
 10375                           
 10376                           ;tff.c: 474: if (c <= '9') goto md_l1;
 10377  003384  0E3A               	movlw	58
 10378  003386  602B               	cpfslt	make_dirfile@c^0,c
 10379  003388  D001               	goto	l7134
 10380  00338A  D02D               	goto	l843
 10381  00338C                     l7134:
 10382                           
 10383                           ;tff.c: 475: if (c <= '?') break;
 10384  00338C  0E40               	movlw	64
 10385  00338E  602B               	cpfslt	make_dirfile@c^0,c
 10386  003390  D001               	goto	l846
 10387  003392  D036               	goto	l7176
 10388  003394                     l846:
 10389                           
 10390                           ;tff.c: 476: if (!(a & 1)) {
 10391  003394  B029               	btfsc	make_dirfile@a^0,0,c
 10392  003396  D027               	goto	l843
 10393                           
 10394                           ;tff.c: 477: if (c == '|') break;
 10395  003398  0E7C               	movlw	124
 10396  00339A  182B               	xorwf	make_dirfile@c^0,w,c
 10397  00339C  B4D8               	btfsc	status,2,c
 10398  00339E  D030               	goto	l7176
 10399                           
 10400                           ;tff.c: 478: if (c >= '[' && c <= ']') break;
 10401  0033A0  0E5A               	movlw	90
 10402  0033A2  642B               	cpfsgt	make_dirfile@c^0,c
 10403  0033A4  D004               	goto	l7148
 10404  0033A6  0E5E               	movlw	94
 10405  0033A8  602B               	cpfslt	make_dirfile@c^0,c
 10406  0033AA  D001               	goto	l7148
 10407  0033AC  D029               	goto	l7176
 10408  0033AE                     l7148:
 10409  0033AE  0E40               	movlw	64
 10410  0033B0  642B               	cpfsgt	make_dirfile@c^0,c
 10411  0033B2  D00A               	goto	l7158
 10412  0033B4  0E5B               	movlw	91
 10413  0033B6  602B               	cpfslt	make_dirfile@c^0,c
 10414  0033B8  D007               	goto	l7158
 10415                           
 10416                           ;tff.c: 480: (t == 8) ? (b &= 0xF7) : (b &= 0xEF);
 10417  0033BA  0E08               	movlw	8
 10418  0033BC  1828               	xorwf	make_dirfile@t^0,w,c
 10419  0033BE  A4D8               	btfss	status,2,c
 10420  0033C0  D002               	goto	l7156
 10421  0033C2  9627               	bcf	make_dirfile@b^0,3,c
 10422  0033C4  D001               	goto	l7158
 10423  0033C6                     l7156:
 10424  0033C6  9827               	bcf	make_dirfile@b^0,4,c
 10425  0033C8                     l7158:
 10426                           
 10427                           ;tff.c: 481: if (c >= 'a' && c <= 'z') {
 10428  0033C8  0E60               	movlw	96
 10429  0033CA  642B               	cpfsgt	make_dirfile@c^0,c
 10430  0033CC  D00C               	goto	l843
 10431  0033CE  0E7B               	movlw	123
 10432  0033D0  602B               	cpfslt	make_dirfile@c^0,c
 10433  0033D2  D009               	goto	l843
 10434                           
 10435                           ;tff.c: 483: if (1) (t == 8) ? (a |= 0x08) : (a |= 0x10);
 10436  0033D4  0E20               	movlw	32
 10437  0033D6  5E2B               	subwf	make_dirfile@c^0,f,c
 10438  0033D8  0E08               	movlw	8
 10439  0033DA  1828               	xorwf	make_dirfile@t^0,w,c
 10440  0033DC  A4D8               	btfss	status,2,c
 10441  0033DE  D002               	goto	l7166
 10442  0033E0  8629               	bsf	make_dirfile@a^0,3,c
 10443  0033E2  D001               	goto	l843
 10444  0033E4                     l7166:
 10445  0033E4  8829               	bsf	make_dirfile@a^0,4,c
 10446  0033E6                     l843:
 10447                           
 10448                           ;tff.c: 487: a &= 0xFE;
 10449  0033E6  9029               	bcf	make_dirfile@a^0,0,c
 10450                           
 10451                           ;tff.c: 489: if (n >= t) break;
 10452  0033E8  5028               	movf	make_dirfile@t^0,w,c
 10453  0033EA  5C2A               	subwf	make_dirfile@n^0,w,c
 10454  0033EC  B0D8               	btfsc	status,0,c
 10455  0033EE  D008               	goto	l7176
 10456                           
 10457                           ;tff.c: 490: dirname[n++] = c;
 10458  0033F0  5022               	movf	make_dirfile@dirname^0,w,c
 10459  0033F2  242A               	addwf	make_dirfile@n^0,w,c
 10460  0033F4  6ED9               	movwf	fsr2l,c
 10461  0033F6  6ADA               	clrf	fsr2h,c
 10462  0033F8  C02B  FFDF         	movff	make_dirfile@c,indf2
 10463  0033FC  2A2A               	incf	make_dirfile@n^0,f,c
 10464  0033FE  D76A               	goto	l7068
 10465  003400                     l7176:
 10466                           
 10467                           ;tff.c: 492: return 1;
 10468  003400  0E01               	movlw	1
 10469  003402  0012               	return		;funcret
 10470  003404                     __end_of_make_dirfile:
 10471                           	callstack 0
 10472                           
 10473 ;; *************** function _reserve_direntry *****************
 10474 ;; Defined at:
 10475 ;;		line 568 in file "bibliotecas/tff.c"
 10476 ;; Parameters:    Size  Location     Type
 10477 ;;  dj              1   78[BANK0 ] PTR struct _DIR_E
 10478 ;;		 -> f_open@dj(14), 
 10479 ;;  dir             1   79[BANK0 ] PTR PTR unsigned char 
 10480 ;;		 -> f_open@dir(2), 
 10481 ;; Auto vars:     Size  Location     Type
 10482 ;;  sector          4   84[BANK0 ] unsigned long 
 10483 ;;  fs              2   94[BANK0 ] PTR struct _FATFS
 10484 ;;		 -> NULL(0), fs(544), 
 10485 ;;  clust           2   92[BANK0 ] unsigned short 
 10486 ;;  dptr            2   89[BANK0 ] PTR unsigned char 
 10487 ;;		 -> fs.win(512), NULL(0), fs(544), 
 10488 ;;  c               1   91[BANK0 ] unsigned char 
 10489 ;;  n               1   88[BANK0 ] unsigned char 
 10490 ;; Return value:  Size  Location     Type
 10491 ;;                  1    wreg      enum E155
 10492 ;; Registers used:
 10493 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10494 ;; Tracked objects:
 10495 ;;		On entry : 3F/0
 10496 ;;		On exit  : 3F/0
 10497 ;;		Unchanged: 0/0
 10498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10499 ;;      Params:         0       2       0       0       0       0       0       0       0
 10500 ;;      Locals:         0      12       0       0       0       0       0       0       0
 10501 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10502 ;;      Totals:         0      18       0       0       0       0       0       0       0
 10503 ;;Total ram usage:       18 bytes
 10504 ;; Hardware stack levels used:    1
 10505 ;; Hardware stack levels required when called:   11
 10506 ;; This function calls:
 10507 ;;		_clust2sect
 10508 ;;		_create_chain
 10509 ;;		_disk_write
 10510 ;;		_memset
 10511 ;;		_move_window
 10512 ;;		_next_dir_entry
 10513 ;; This function is called by:
 10514 ;;		_f_open
 10515 ;; This function uses a non-reentrant model
 10516 ;;
 10517                           
 10518                           	psect	text50
 10519  002184                     __ptext50:
 10520                           	callstack 0
 10521  002184                     _reserve_direntry:
 10522                           	callstack 15
 10523                           
 10524                           ; BSR set to: 0
 10525                           ;tff.c: 573: CLUST clust;;tff.c: 574: DWORD sector;;tff.c: 575: BYTE c, n, *dptr;;tff.c:
      +                           576: FATFS *fs = dj->fs;
 10526                           
 10527                           ;incstack = 0
 10528  002184  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10529  002186  6ED9               	movwf	fsr2l,c
 10530  002188  6ADA               	clrf	fsr2h,c
 10531  00218A  0E04               	movlw	4
 10532  00218C  26D9               	addwf	fsr2l,f,c
 10533  00218E  CFDE F0BE          	movff	postinc2,reserve_direntry@fs
 10534  002192  CFDD F0BF          	movff	postdec2,reserve_direntry@fs+1
 10535                           
 10536                           ;tff.c: 580: clust = dj->sclust;
 10537  002196  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10538  002198  6ED9               	movwf	fsr2l,c
 10539  00219A  6ADA               	clrf	fsr2h,c
 10540  00219C  0E06               	movlw	6
 10541  00219E  26D9               	addwf	fsr2l,f,c
 10542  0021A0  CFDE F0BC          	movff	postinc2,reserve_direntry@clust
 10543  0021A4  CFDD F0BD          	movff	postdec2,reserve_direntry@clust+1
 10544                           
 10545                           ; BSR set to: 0
 10546                           ;tff.c: 581: if (clust != 0) {
 10547  0021A8  51BC               	movf	reserve_direntry@clust& (0+255),w,b
 10548  0021AA  11BD               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 10549  0021AC  B4D8               	btfsc	status,2,c
 10550  0021AE  D01D               	goto	l10848
 10551                           
 10552                           ; BSR set to: 0
 10553                           ;tff.c: 582: dj->clust = clust;
 10554  0021B0  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10555  0021B2  6ED9               	movwf	fsr2l,c
 10556  0021B4  6ADA               	clrf	fsr2h,c
 10557  0021B6  0E08               	movlw	8
 10558  0021B8  26D9               	addwf	fsr2l,f,c
 10559  0021BA  C0BC  FFDE         	movff	reserve_direntry@clust,postinc2
 10560  0021BE  C0BD  FFDD         	movff	reserve_direntry@clust+1,postdec2
 10561                           
 10562                           ; BSR set to: 0
 10563                           ;tff.c: 583: dj->sect = clust2sect(clust);
 10564  0021C2  C0BC  F025         	movff	reserve_direntry@clust,clust2sect@clust
 10565  0021C6  C0BD  F026         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 10566  0021CA  ECD4  F01F         	call	_clust2sect	;wreg free
 10567  0021CE  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10568  0021D0  6ED9               	movwf	fsr2l,c
 10569  0021D2  6ADA               	clrf	fsr2h,c
 10570  0021D4  0E0A               	movlw	10
 10571  0021D6  26D9               	addwf	fsr2l,f,c
 10572  0021D8  C025  FFDE         	movff	?_clust2sect,postinc2
 10573  0021DC  C026  FFDE         	movff	?_clust2sect+1,postinc2
 10574  0021E0  C027  FFDE         	movff	?_clust2sect+2,postinc2
 10575  0021E4  C028  FFDE         	movff	?_clust2sect+3,postinc2
 10576                           
 10577                           ;tff.c: 584: } else {
 10578  0021E8  D013               	goto	l10850
 10579  0021EA                     l10848:
 10580                           
 10581                           ; BSR set to: 0
 10582                           ;tff.c: 585: dj->sect = fs->dirbase;
 10583  0021EA  EE20 F00C          	lfsr	2,12
 10584  0021EE  51BE               	movf	reserve_direntry@fs& (0+255),w,b
 10585  0021F0  26D9               	addwf	fsr2l,f,c
 10586  0021F2  51BF               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 10587  0021F4  22DA               	addwfc	fsr2h,f,c
 10588  0021F6  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10589  0021F8  6EE1               	movwf	fsr1l,c
 10590  0021FA  6AE2               	clrf	fsr1h,c
 10591  0021FC  0E0A               	movlw	10
 10592  0021FE  26E1               	addwf	fsr1l,f,c
 10593  002200  CFDE FFE6          	movff	postinc2,postinc1
 10594  002204  CFDE FFE6          	movff	postinc2,postinc1
 10595  002208  CFDE FFE6          	movff	postinc2,postinc1
 10596  00220C  CFDE FFE6          	movff	postinc2,postinc1
 10597  002210                     l10850:
 10598                           
 10599                           ; BSR set to: 0
 10600                           ;tff.c: 586: };tff.c: 587: dj->index = 0;
 10601  002210  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10602  002212  6ED9               	movwf	fsr2l,c
 10603  002214  6ADA               	clrf	fsr2h,c
 10604  002216  0E02               	movlw	2
 10605  002218  26D9               	addwf	fsr2l,f,c
 10606  00221A  0E00               	movlw	0
 10607  00221C  6EDE               	movwf	postinc2,c
 10608  00221E  0E00               	movlw	0
 10609  002220  6EDD               	movwf	postdec2,c
 10610  002222                     l10852:
 10611                           
 10612                           ; BSR set to: 0
 10613                           ;tff.c: 590: if (!move_window(dj->sect)) return FR_RW_ERROR;
 10614  002222  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10615  002224  6ED9               	movwf	fsr2l,c
 10616  002226  6ADA               	clrf	fsr2h,c
 10617  002228  0E0A               	movlw	10
 10618  00222A  26D9               	addwf	fsr2l,f,c
 10619  00222C  CFDE F073          	movff	postinc2,move_window@sector
 10620  002230  CFDE F074          	movff	postinc2,move_window@sector+1
 10621  002234  CFDE F075          	movff	postinc2,move_window@sector+2
 10622  002238  CFDE F076          	movff	postinc2,move_window@sector+3
 10623  00223C  EC08  F017         	call	_move_window	;wreg free
 10624  002240  0900               	iorlw	0
 10625  002242  A4D8               	btfss	status,2,c
 10626  002244  D002               	goto	l10858
 10627  002246                     u12810:
 10628                           
 10629                           ; BSR set to: 0
 10630  002246  0E08               	movlw	8
 10631  002248  0012               	return	
 10632  00224A                     l10858:
 10633                           
 10634                           ; BSR set to: 0
 10635                           ;tff.c: 591: dptr = &fs->win[(dj->index & 15) * 32];
 10636  00224A  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10637  00224C  6ED9               	movwf	fsr2l,c
 10638  00224E  6ADA               	clrf	fsr2h,c
 10639  002250  0E02               	movlw	2
 10640  002252  26D9               	addwf	fsr2l,f,c
 10641  002254  CFDE F0B0          	movff	postinc2,??_reserve_direntry
 10642  002258  CFDD F0B1          	movff	postdec2,??_reserve_direntry+1
 10643  00225C  0E0F               	movlw	15
 10644  00225E  17B0               	andwf	??_reserve_direntry& (0+255),f,b
 10645  002260  0E00               	movlw	0
 10646  002262  17B1               	andwf	(??_reserve_direntry+1)& (0+255),f,b
 10647  002264  0E05               	movlw	5
 10648  002266                     u12825:
 10649  002266  90D8               	bcf	status,0,c
 10650  002268  37B0               	rlcf	??_reserve_direntry& (0+255),f,b
 10651  00226A  37B1               	rlcf	(??_reserve_direntry+1)& (0+255),f,b
 10652  00226C  2EE8               	decfsz	wreg,f,c
 10653  00226E  D7FB               	goto	u12825
 10654  002270  C0BE  F0B2         	movff	reserve_direntry@fs,??_reserve_direntry+2
 10655  002274  C0BF  F0B3         	movff	reserve_direntry@fs+1,??_reserve_direntry+3
 10656  002278  51B0               	movf	??_reserve_direntry& (0+255),w,b
 10657  00227A  27B2               	addwf	(??_reserve_direntry+2)& (0+255),f,b
 10658  00227C  51B1               	movf	(??_reserve_direntry+1)& (0+255),w,b
 10659  00227E  23B3               	addwfc	(??_reserve_direntry+3)& (0+255),f,b
 10660  002280  0E20               	movlw	32
 10661  002282  25B2               	addwf	(??_reserve_direntry+2)& (0+255),w,b
 10662  002284  6FB9               	movwf	reserve_direntry@dptr& (0+255),b
 10663  002286  0E00               	movlw	0
 10664  002288  21B3               	addwfc	(??_reserve_direntry+3)& (0+255),w,b
 10665  00228A  6FBA               	movwf	(reserve_direntry@dptr+1)& (0+255),b
 10666                           
 10667                           ; BSR set to: 0
 10668                           ;tff.c: 592: c = dptr[0];
 10669  00228C  C0B9  FFD9         	movff	reserve_direntry@dptr,fsr2l
 10670  002290  C0BA  FFDA         	movff	reserve_direntry@dptr+1,fsr2h
 10671  002294  50DF               	movf	indf2,w,c
 10672  002296  6FBB               	movwf	reserve_direntry@c& (0+255),b
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;tff.c: 593: if (c == 0 || c == 0xE5) {
 10676  002298  51BB               	movf	reserve_direntry@c& (0+255),w,b
 10677  00229A  B4D8               	btfsc	status,2,c
 10678  00229C  D004               	goto	u12840
 10679                           
 10680                           ; BSR set to: 0
 10681  00229E  0EE5               	movlw	229
 10682  0022A0  19BB               	xorwf	reserve_direntry@c& (0+255),w,b
 10683  0022A2  A4D8               	btfss	status,2,c
 10684  0022A4  D009               	goto	l10872
 10685  0022A6                     u12840:
 10686                           
 10687                           ; BSR set to: 0
 10688                           ;tff.c: 594: *dir = dptr; return FR_OK;
 10689  0022A6  51AF               	movf	reserve_direntry@dir& (0+255),w,b
 10690  0022A8  6ED9               	movwf	fsr2l,c
 10691  0022AA  6ADA               	clrf	fsr2h,c
 10692  0022AC  C0B9  FFDE         	movff	reserve_direntry@dptr,postinc2
 10693  0022B0  C0BA  FFDD         	movff	reserve_direntry@dptr+1,postdec2
 10694  0022B4                     l10868:
 10695                           
 10696                           ; BSR set to: 0
 10697  0022B4  0E00               	movlw	0
 10698  0022B6  0012               	return	
 10699  0022B8                     l10872:
 10700                           
 10701                           ; BSR set to: 0
 10702                           ;tff.c: 595: };tff.c: 596: } while (next_dir_entry(dj));
 10703  0022B8  C0AE  F09B         	movff	reserve_direntry@dj,next_dir_entry@dj
 10704  0022BC  ECA3  F018         	call	_next_dir_entry	;wreg free
 10705  0022C0  0900               	iorlw	0
 10706  0022C2  A4D8               	btfss	status,2,c
 10707  0022C4  D7AE               	goto	l10852
 10708                           
 10709                           ; BSR set to: 0
 10710                           ;tff.c: 600: if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
 10711  0022C6  51BC               	movf	reserve_direntry@clust& (0+255),w,b
 10712  0022C8  11BD               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 10713  0022CA  B4D8               	btfsc	status,2,c
 10714  0022CC  D013               	goto	u12870
 10715                           
 10716                           ; BSR set to: 0
 10717  0022CE  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10718  0022D0  6ED9               	movwf	fsr2l,c
 10719  0022D2  6ADA               	clrf	fsr2h,c
 10720  0022D4  0E08               	movlw	8
 10721  0022D6  26D9               	addwf	fsr2l,f,c
 10722  0022D8  CFDE F0A0          	movff	postinc2,create_chain@clust
 10723  0022DC  CFDD F0A1          	movff	postdec2,create_chain@clust+1
 10724  0022E0  ECDD  F017         	call	_create_chain	;wreg free
 10725  0022E4  C0A0  F0BC         	movff	?_create_chain,reserve_direntry@clust
 10726  0022E8  C0A1  F0BD         	movff	?_create_chain+1,reserve_direntry@clust+1
 10727  0022EC  51BC               	movf	reserve_direntry@clust& (0+255),w,b
 10728  0022EE  11BD               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 10729  0022F0  A4D8               	btfss	status,2,c
 10730  0022F2  D002               	goto	l10882
 10731  0022F4                     u12870:
 10732                           
 10733                           ; BSR set to: 0
 10734  0022F4  0E06               	movlw	6
 10735  0022F6  0012               	return	
 10736  0022F8                     l10882:
 10737                           
 10738                           ; BSR set to: 0
 10739                           ;tff.c: 601: if (clust == 1 || !move_window(0)) return FR_RW_ERROR;
 10740  0022F8  05BC               	decf	reserve_direntry@clust& (0+255),w,b
 10741  0022FA  11BD               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 10742  0022FC  B4D8               	btfsc	status,2,c
 10743  0022FE  D7A3               	goto	u12810
 10744                           
 10745                           ; BSR set to: 0
 10746  002300  0E00               	movlw	0
 10747  002302  6F73               	movwf	move_window@sector& (0+255),b
 10748  002304  0E00               	movlw	0
 10749  002306  6F74               	movwf	(move_window@sector+1)& (0+255),b
 10750  002308  0E00               	movlw	0
 10751  00230A  6F75               	movwf	(move_window@sector+2)& (0+255),b
 10752  00230C  0E00               	movlw	0
 10753  00230E  6F76               	movwf	(move_window@sector+3)& (0+255),b
 10754  002310  EC08  F017         	call	_move_window	;wreg free
 10755  002314  0900               	iorlw	0
 10756  002316  B4D8               	btfsc	status,2,c
 10757  002318  D796               	goto	u12810
 10758                           
 10759                           ; BSR set to: 0
 10760                           ;tff.c: 603: fs->winsect = sector = clust2sect(clust);
 10761  00231A  C0BC  F025         	movff	reserve_direntry@clust,clust2sect@clust
 10762  00231E  C0BD  F026         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 10763  002322  ECD4  F01F         	call	_clust2sect	;wreg free
 10764  002326  C025  F0B4         	movff	?_clust2sect,reserve_direntry@sector
 10765  00232A  C026  F0B5         	movff	?_clust2sect+1,reserve_direntry@sector+1
 10766  00232E  C027  F0B6         	movff	?_clust2sect+2,reserve_direntry@sector+2
 10767  002332  C028  F0B7         	movff	?_clust2sect+3,reserve_direntry@sector+3
 10768  002336  EE20 F004          	lfsr	2,4
 10769  00233A  51BE               	movf	reserve_direntry@fs& (0+255),w,b
 10770  00233C  26D9               	addwf	fsr2l,f,c
 10771  00233E  51BF               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 10772  002340  22DA               	addwfc	fsr2h,f,c
 10773  002342  C0B4  FFDE         	movff	reserve_direntry@sector,postinc2
 10774  002346  C0B5  FFDE         	movff	reserve_direntry@sector+1,postinc2
 10775  00234A  C0B6  FFDE         	movff	reserve_direntry@sector+2,postinc2
 10776  00234E  C0B7  FFDE         	movff	reserve_direntry@sector+3,postinc2
 10777                           
 10778                           ;tff.c: 604: memset(fs->win, 0, 512U);
 10779  002352  0E20               	movlw	32
 10780  002354  25BE               	addwf	reserve_direntry@fs& (0+255),w,b
 10781  002356  6E19               	movwf	memset@p1^0,c
 10782  002358  0E00               	movlw	0
 10783  00235A  21BF               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 10784  00235C  6E1A               	movwf	(memset@p1+1)^0,c
 10785  00235E  0E00               	movlw	0
 10786  002360  6E1C               	movwf	(memset@c+1)^0,c
 10787  002362  0E00               	movlw	0
 10788  002364  6E1B               	movwf	memset@c^0,c
 10789  002366  0E02               	movlw	2
 10790  002368  6E1E               	movwf	(memset@n+1)^0,c
 10791  00236A  0E00               	movlw	0
 10792  00236C  6E1D               	movwf	memset@n^0,c
 10793  00236E  EC97  F028         	call	_memset	;wreg free
 10794                           
 10795                           ;tff.c: 605: for (n = fs->csize; n; n--) {
 10796  002372  0100               	movlb	0	; () banked
 10797  002374  EE20 F01D          	lfsr	2,29
 10798  002378  51BE               	movf	reserve_direntry@fs& (0+255),w,b
 10799  00237A  26D9               	addwf	fsr2l,f,c
 10800  00237C  51BF               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 10801  00237E  22DA               	addwfc	fsr2h,f,c
 10802  002380  50DF               	movf	indf2,w,c
 10803  002382  6FB8               	movwf	reserve_direntry@n& (0+255),b
 10804  002384  D01D               	goto	l10904
 10805  002386                     l10894:
 10806                           
 10807                           ; BSR set to: 0
 10808                           ;tff.c: 606: if (disk_write(0, fs->win, sector, 1) != RES_OK)
 10809  002386  0E20               	movlw	32
 10810  002388  25BE               	addwf	reserve_direntry@fs& (0+255),w,b
 10811  00238A  6F68               	movwf	disk_write@buff& (0+255),b
 10812  00238C  0E00               	movlw	0
 10813  00238E  21BF               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 10814  002390  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 10815  002392  C0B4  F06A         	movff	reserve_direntry@sector,disk_write@sector
 10816  002396  C0B5  F06B         	movff	reserve_direntry@sector+1,disk_write@sector+1
 10817  00239A  C0B6  F06C         	movff	reserve_direntry@sector+2,disk_write@sector+2
 10818  00239E  C0B7  F06D         	movff	reserve_direntry@sector+3,disk_write@sector+3
 10819  0023A2  0E01               	movlw	1
 10820  0023A4  6F6E               	movwf	disk_write@count& (0+255),b
 10821  0023A6  0E00               	movlw	0
 10822  0023A8  EC6A  F026         	call	_disk_write
 10823  0023AC  0900               	iorlw	0
 10824  0023AE  A4D8               	btfss	status,2,c
 10825  0023B0  D74A               	goto	u12810
 10826                           
 10827                           ; BSR set to: 0
 10828                           ;tff.c: 608: sector++;
 10829  0023B2  0E01               	movlw	1
 10830  0023B4  27B4               	addwf	reserve_direntry@sector& (0+255),f,b
 10831  0023B6  0E00               	movlw	0
 10832  0023B8  23B5               	addwfc	(reserve_direntry@sector+1)& (0+255),f,b
 10833  0023BA  23B6               	addwfc	(reserve_direntry@sector+2)& (0+255),f,b
 10834  0023BC  23B7               	addwfc	(reserve_direntry@sector+3)& (0+255),f,b
 10835                           
 10836                           ; BSR set to: 0
 10837  0023BE  07B8               	decf	reserve_direntry@n& (0+255),f,b
 10838  0023C0                     l10904:
 10839                           
 10840                           ; BSR set to: 0
 10841  0023C0  51B8               	movf	reserve_direntry@n& (0+255),w,b
 10842  0023C2  A4D8               	btfss	status,2,c
 10843  0023C4  D7E0               	goto	l10894
 10844                           
 10845                           ; BSR set to: 0
 10846                           ;tff.c: 609: };tff.c: 610: fs->winflag = 1;
 10847  0023C6  EE20 F01F          	lfsr	2,31
 10848  0023CA  51BE               	movf	reserve_direntry@fs& (0+255),w,b
 10849  0023CC  26D9               	addwf	fsr2l,f,c
 10850  0023CE  51BF               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 10851  0023D0  22DA               	addwfc	fsr2h,f,c
 10852  0023D2  0E01               	movlw	1
 10853  0023D4  6EDF               	movwf	indf2,c
 10854                           
 10855                           ;tff.c: 611: *dir = fs->win;
 10856  0023D6  0E20               	movlw	32
 10857  0023D8  25BE               	addwf	reserve_direntry@fs& (0+255),w,b
 10858  0023DA  6FB0               	movwf	??_reserve_direntry& (0+255),b
 10859  0023DC  0E00               	movlw	0
 10860  0023DE  21BF               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 10861  0023E0  6FB1               	movwf	(??_reserve_direntry+1)& (0+255),b
 10862  0023E2  51AF               	movf	reserve_direntry@dir& (0+255),w,b
 10863  0023E4  6ED9               	movwf	fsr2l,c
 10864  0023E6  6ADA               	clrf	fsr2h,c
 10865  0023E8  C0B0  FFDE         	movff	??_reserve_direntry,postinc2
 10866  0023EC  C0B1  FFDD         	movff	??_reserve_direntry+1,postdec2
 10867  0023F0  D761               	goto	l10868
 10868  0023F2                     __end_of_reserve_direntry:
 10869                           	callstack 0
 10870                           
 10871 ;; *************** function _next_dir_entry *****************
 10872 ;; Defined at:
 10873 ;;		line 359 in file "bibliotecas/tff.c"
 10874 ;; Parameters:    Size  Location     Type
 10875 ;;  dj              1   59[BANK0 ] PTR struct _DIR_E
 10876 ;;		 -> f_open@dj(14), 
 10877 ;; Auto vars:     Size  Location     Type
 10878 ;;  idx             2   69[BANK0 ] unsigned short 
 10879 ;;  clust           2   67[BANK0 ] unsigned short 
 10880 ;; Return value:  Size  Location     Type
 10881 ;;                  1    wreg      enum E105
 10882 ;; Registers used:
 10883 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10884 ;; Tracked objects:
 10885 ;;		On entry : 0/0
 10886 ;;		On exit  : 3F/0
 10887 ;;		Unchanged: 0/0
 10888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10889 ;;      Params:         0       1       0       0       0       0       0       0       0
 10890 ;;      Locals:         0       4       0       0       0       0       0       0       0
 10891 ;;      Temps:          0       7       0       0       0       0       0       0       0
 10892 ;;      Totals:         0      12       0       0       0       0       0       0       0
 10893 ;;Total ram usage:       12 bytes
 10894 ;; Hardware stack levels used:    1
 10895 ;; Hardware stack levels required when called:   10
 10896 ;; This function calls:
 10897 ;;		_clust2sect
 10898 ;;		_get_cluster
 10899 ;; This function is called by:
 10900 ;;		_trace_path
 10901 ;;		_reserve_direntry
 10902 ;; This function uses a non-reentrant model
 10903 ;;
 10904                           
 10905                           	psect	text51
 10906  003146                     __ptext51:
 10907                           	callstack 0
 10908  003146                     _next_dir_entry:
 10909                           	callstack 15
 10910                           
 10911                           ;tff.c: 363: CLUST clust;;tff.c: 364: WORD idx;;tff.c: 367: idx = dj->index + 1;
 10912                           
 10913                           ; BSR set to: 0
 10914                           ;incstack = 0
 10915  003146  0100               	movlb	0	; () banked
 10916  003148  519B               	movf	next_dir_entry@dj& (0+255),w,b
 10917  00314A  6ED9               	movwf	fsr2l,c
 10918  00314C  6ADA               	clrf	fsr2h,c
 10919  00314E  0E02               	movlw	2
 10920  003150  26D9               	addwf	fsr2l,f,c
 10921  003152  CFDE F09C          	movff	postinc2,??_next_dir_entry
 10922  003156  CFDD F09D          	movff	postdec2,??_next_dir_entry+1
 10923  00315A  0E01               	movlw	1
 10924  00315C  259C               	addwf	??_next_dir_entry& (0+255),w,b
 10925  00315E  6FA5               	movwf	next_dir_entry@idx& (0+255),b
 10926  003160  0E00               	movlw	0
 10927  003162  219D               	addwfc	(??_next_dir_entry+1)& (0+255),w,b
 10928  003164  6FA6               	movwf	(next_dir_entry@idx+1)& (0+255),b
 10929                           
 10930                           ; BSR set to: 0
 10931                           ;tff.c: 368: if ((idx & 15) == 0) {
 10932  003166  C0A5  F09C         	movff	next_dir_entry@idx,??_next_dir_entry
 10933  00316A  0E0F               	movlw	15
 10934  00316C  179C               	andwf	??_next_dir_entry& (0+255),f,b
 10935  00316E  A4D8               	btfss	status,2,c
 10936  003170  D091               	goto	l10574
 10937                           
 10938                           ; BSR set to: 0
 10939                           ;tff.c: 369: dj->sect++;
 10940  003172  519B               	movf	next_dir_entry@dj& (0+255),w,b
 10941  003174  6ED9               	movwf	fsr2l,c
 10942  003176  6ADA               	clrf	fsr2h,c
 10943  003178  0E0A               	movlw	10
 10944  00317A  26D9               	addwf	fsr2l,f,c
 10945  00317C  2ADE               	incf	postinc2,f,c
 10946  00317E  0E00               	movlw	0
 10947  003180  22DE               	addwfc	postinc2,f,c
 10948  003182  22DE               	addwfc	postinc2,f,c
 10949  003184  22DE               	addwfc	postinc2,f,c
 10950                           
 10951                           ;tff.c: 370: if (dj->clust == 0) {
 10952  003186  519B               	movf	next_dir_entry@dj& (0+255),w,b
 10953  003188  6ED9               	movwf	fsr2l,c
 10954  00318A  6ADA               	clrf	fsr2h,c
 10955  00318C  0E08               	movlw	8
 10956  00318E  26D9               	addwf	fsr2l,f,c
 10957  003190  50DE               	movf	postinc2,w,c
 10958  003192  10DE               	iorwf	postinc2,w,c
 10959  003194  A4D8               	btfss	status,2,c
 10960  003196  D013               	goto	l10558
 10961                           
 10962                           ; BSR set to: 0
 10963                           ;tff.c: 371: if (idx >= dj->fs->n_rootdir) return FALSE;
 10964  003198  519B               	movf	next_dir_entry@dj& (0+255),w,b
 10965  00319A  6ED9               	movwf	fsr2l,c
 10966  00319C  6ADA               	clrf	fsr2h,c
 10967  00319E  0E04               	movlw	4
 10968  0031A0  26D9               	addwf	fsr2l,f,c
 10969  0031A2  EE10 F002          	lfsr	1,2
 10970  0031A6  50DE               	movf	postinc2,w,c
 10971  0031A8  26E1               	addwf	fsr1l,f,c
 10972  0031AA  50DD               	movf	postdec2,w,c
 10973  0031AC  22E2               	addwfc	fsr1h,f,c
 10974  0031AE  50E6               	movf	postinc1,w,c
 10975  0031B0  5DA5               	subwf	next_dir_entry@idx& (0+255),w,b
 10976  0031B2  50E6               	movf	postinc1,w,c
 10977  0031B4  59A6               	subwfb	(next_dir_entry@idx+1)& (0+255),w,b
 10978  0031B6  A0D8               	btfss	status,0,c
 10979  0031B8  D06D               	goto	l10574
 10980  0031BA                     u12320:
 10981                           
 10982                           ; BSR set to: 0
 10983  0031BA  0E00               	movlw	0
 10984  0031BC  0012               	return	
 10985  0031BE                     l10558:
 10986                           
 10987                           ; BSR set to: 0
 10988                           ;tff.c: 373: if (((idx / 16) & (dj->fs->csize - 1)) == 0) {
 10989  0031BE  C0A5  F09C         	movff	next_dir_entry@idx,??_next_dir_entry
 10990  0031C2  C0A6  F09D         	movff	next_dir_entry@idx+1,??_next_dir_entry+1
 10991  0031C6  0E04               	movlw	4
 10992  0031C8  6F9E               	movwf	(??_next_dir_entry+2)& (0+255),b
 10993  0031CA                     u12335:
 10994  0031CA  90D8               	bcf	status,0,c
 10995  0031CC  339D               	rrcf	(??_next_dir_entry+1)& (0+255),f,b
 10996  0031CE  339C               	rrcf	??_next_dir_entry& (0+255),f,b
 10997  0031D0  2F9E               	decfsz	(??_next_dir_entry+2)& (0+255),f,b
 10998  0031D2  D7FB               	goto	u12335
 10999  0031D4  0EFF               	movlw	255
 11000  0031D6  6F9F               	movwf	(??_next_dir_entry+3)& (0+255),b
 11001  0031D8  0EFF               	movlw	255
 11002  0031DA  6FA0               	movwf	(??_next_dir_entry+4)& (0+255),b
 11003  0031DC  519B               	movf	next_dir_entry@dj& (0+255),w,b
 11004  0031DE  6ED9               	movwf	fsr2l,c
 11005  0031E0  6ADA               	clrf	fsr2h,c
 11006  0031E2  0E04               	movlw	4
 11007  0031E4  26D9               	addwf	fsr2l,f,c
 11008  0031E6  EE10 F01D          	lfsr	1,29
 11009  0031EA  50DE               	movf	postinc2,w,c
 11010  0031EC  26E1               	addwf	fsr1l,f,c
 11011  0031EE  50DD               	movf	postdec2,w,c
 11012  0031F0  22E2               	addwfc	fsr1h,f,c
 11013  0031F2  50E7               	movf	indf1,w,c
 11014  0031F4  6FA1               	movwf	(??_next_dir_entry+5)& (0+255),b
 11015  0031F6  6BA2               	clrf	(??_next_dir_entry+6)& (0+255),b
 11016  0031F8  519F               	movf	(??_next_dir_entry+3)& (0+255),w,b
 11017  0031FA  27A1               	addwf	(??_next_dir_entry+5)& (0+255),f,b
 11018  0031FC  51A0               	movf	(??_next_dir_entry+4)& (0+255),w,b
 11019  0031FE  23A2               	addwfc	(??_next_dir_entry+6)& (0+255),f,b
 11020  003200  519C               	movf	??_next_dir_entry& (0+255),w,b
 11021  003202  17A1               	andwf	(??_next_dir_entry+5)& (0+255),f,b
 11022  003204  519D               	movf	(??_next_dir_entry+1)& (0+255),w,b
 11023  003206  17A2               	andwf	(??_next_dir_entry+6)& (0+255),f,b
 11024  003208  51A1               	movf	(??_next_dir_entry+5)& (0+255),w,b
 11025  00320A  11A2               	iorwf	(??_next_dir_entry+6)& (0+255),w,b
 11026  00320C  A4D8               	btfss	status,2,c
 11027  00320E  D042               	goto	l10574
 11028                           
 11029                           ; BSR set to: 0
 11030                           ;tff.c: 374: clust = get_cluster(dj->clust);
 11031  003210  519B               	movf	next_dir_entry@dj& (0+255),w,b
 11032  003212  6ED9               	movwf	fsr2l,c
 11033  003214  6ADA               	clrf	fsr2h,c
 11034  003216  0E08               	movlw	8
 11035  003218  26D9               	addwf	fsr2l,f,c
 11036  00321A  CFDE F031          	movff	postinc2,get_cluster@clust
 11037  00321E  CFDD F032          	movff	postdec2,get_cluster@clust+1
 11038  003222  EC45  F014         	call	_get_cluster	;wreg free
 11039  003226  C031  F0A3         	movff	?_get_cluster,next_dir_entry@clust
 11040  00322A  C032  F0A4         	movff	?_get_cluster+1,next_dir_entry@clust+1
 11041                           
 11042                           ; BSR set to: 0
 11043                           ;tff.c: 375: if (clust < 2 || clust >= dj->fs->max_clust)
 11044  00322E  51A4               	movf	(next_dir_entry@clust+1)& (0+255),w,b
 11045  003230  E104               	bnz	u12350
 11046  003232  0E02               	movlw	2
 11047  003234  5DA3               	subwf	next_dir_entry@clust& (0+255),w,b
 11048  003236  A0D8               	btfss	status,0,c
 11049  003238  D7C0               	goto	u12320
 11050  00323A                     u12350:
 11051                           
 11052                           ; BSR set to: 0
 11053  00323A  519B               	movf	next_dir_entry@dj& (0+255),w,b
 11054  00323C  6ED9               	movwf	fsr2l,c
 11055  00323E  6ADA               	clrf	fsr2h,c
 11056  003240  0E04               	movlw	4
 11057  003242  26D9               	addwf	fsr2l,f,c
 11058  003244  EE10 F016          	lfsr	1,22
 11059  003248  50DE               	movf	postinc2,w,c
 11060  00324A  26E1               	addwf	fsr1l,f,c
 11061  00324C  50DD               	movf	postdec2,w,c
 11062  00324E  22E2               	addwfc	fsr1h,f,c
 11063  003250  50E6               	movf	postinc1,w,c
 11064  003252  5DA3               	subwf	next_dir_entry@clust& (0+255),w,b
 11065  003254  50E6               	movf	postinc1,w,c
 11066  003256  59A4               	subwfb	(next_dir_entry@clust+1)& (0+255),w,b
 11067  003258  B0D8               	btfsc	status,0,c
 11068  00325A  D7AF               	goto	u12320
 11069                           
 11070                           ; BSR set to: 0
 11071                           ;tff.c: 377: dj->clust = clust;
 11072  00325C  519B               	movf	next_dir_entry@dj& (0+255),w,b
 11073  00325E  6ED9               	movwf	fsr2l,c
 11074  003260  6ADA               	clrf	fsr2h,c
 11075  003262  0E08               	movlw	8
 11076  003264  26D9               	addwf	fsr2l,f,c
 11077  003266  C0A3  FFDE         	movff	next_dir_entry@clust,postinc2
 11078  00326A  C0A4  FFDD         	movff	next_dir_entry@clust+1,postdec2
 11079                           
 11080                           ; BSR set to: 0
 11081                           ;tff.c: 378: dj->sect = clust2sect(clust);
 11082  00326E  C0A3  F025         	movff	next_dir_entry@clust,clust2sect@clust
 11083  003272  C0A4  F026         	movff	next_dir_entry@clust+1,clust2sect@clust+1
 11084  003276  ECD4  F01F         	call	_clust2sect	;wreg free
 11085  00327A  519B               	movf	next_dir_entry@dj& (0+255),w,b
 11086  00327C  6ED9               	movwf	fsr2l,c
 11087  00327E  6ADA               	clrf	fsr2h,c
 11088  003280  0E0A               	movlw	10
 11089  003282  26D9               	addwf	fsr2l,f,c
 11090  003284  C025  FFDE         	movff	?_clust2sect,postinc2
 11091  003288  C026  FFDE         	movff	?_clust2sect+1,postinc2
 11092  00328C  C027  FFDE         	movff	?_clust2sect+2,postinc2
 11093  003290  C028  FFDE         	movff	?_clust2sect+3,postinc2
 11094  003294                     l10574:
 11095                           
 11096                           ; BSR set to: 0
 11097                           ;tff.c: 379: };tff.c: 380: };tff.c: 381: };tff.c: 382: dj->index = idx;
 11098  003294  519B               	movf	next_dir_entry@dj& (0+255),w,b
 11099  003296  6ED9               	movwf	fsr2l,c
 11100  003298  6ADA               	clrf	fsr2h,c
 11101  00329A  0E02               	movlw	2
 11102  00329C  26D9               	addwf	fsr2l,f,c
 11103  00329E  C0A5  FFDE         	movff	next_dir_entry@idx,postinc2
 11104  0032A2  C0A6  FFDD         	movff	next_dir_entry@idx+1,postdec2
 11105                           
 11106                           ; BSR set to: 0
 11107                           ;tff.c: 383: return TRUE;
 11108  0032A6  0E01               	movlw	1
 11109                           
 11110                           ; BSR set to: 0
 11111  0032A8  0012               	return		;funcret
 11112  0032AA                     __end_of_next_dir_entry:
 11113                           	callstack 0
 11114                           
 11115 ;; *************** function _clust2sect *****************
 11116 ;; Defined at:
 11117 ;;		line 339 in file "bibliotecas/tff.c"
 11118 ;; Parameters:    Size  Location     Type
 11119 ;;  clust           2   36[COMRAM] unsigned short 
 11120 ;; Auto vars:     Size  Location     Type
 11121 ;;  fs              2   45[COMRAM] PTR struct _FATFS
 11122 ;;		 -> NULL(0), fs(544), 
 11123 ;; Return value:  Size  Location     Type
 11124 ;;                  4   36[COMRAM] unsigned long 
 11125 ;; Registers used:
 11126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11127 ;; Tracked objects:
 11128 ;;		On entry : 3F/0
 11129 ;;		On exit  : 3F/0
 11130 ;;		Unchanged: 3F/0
 11131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11132 ;;      Params:         4       0       0       0       0       0       0       0       0
 11133 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11134 ;;      Temps:          5       0       0       0       0       0       0       0       0
 11135 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11136 ;;Total ram usage:       11 bytes
 11137 ;; Hardware stack levels used:    1
 11138 ;; Hardware stack levels required when called:    4
 11139 ;; This function calls:
 11140 ;;		___lmul
 11141 ;; This function is called by:
 11142 ;;		_next_dir_entry
 11143 ;;		_trace_path
 11144 ;;		_reserve_direntry
 11145 ;;		_f_write
 11146 ;;		_f_read
 11147 ;; This function uses a non-reentrant model
 11148 ;;
 11149                           
 11150                           	psect	text52
 11151  003FA8                     __ptext52:
 11152                           	callstack 0
 11153  003FA8                     _clust2sect:
 11154                           	callstack 19
 11155                           
 11156                           ; BSR set to: 0
 11157                           ;tff.c: 343: FATFS *fs = FatFs;
 11158                           
 11159                           ; BSR set to: 0
 11160                           ;incstack = 0
 11161  003FA8  C038  F02E         	movff	_FatFs,clust2sect@fs
 11162  003FAC  C039  F02F         	movff	_FatFs+1,clust2sect@fs+1
 11163                           
 11164                           ;tff.c: 346: clust -= 2;
 11165  003FB0  0E02               	movlw	2
 11166  003FB2  5E25               	subwf	clust2sect@clust^0,f,c
 11167  003FB4  0E00               	movlw	0
 11168  003FB6  5A26               	subwfb	(clust2sect@clust+1)^0,f,c
 11169                           
 11170                           ; BSR set to: 0
 11171                           ;tff.c: 347: if (clust >= (fs->max_clust - 2)) return 0;
 11172  003FB8  0EFE               	movlw	254
 11173  003FBA  6E29               	movwf	??_clust2sect^0,c
 11174  003FBC  0EFF               	movlw	255
 11175  003FBE  6E2A               	movwf	(??_clust2sect+1)^0,c
 11176  003FC0  EE20 F016          	lfsr	2,22
 11177  003FC4  502E               	movf	clust2sect@fs^0,w,c
 11178  003FC6  26D9               	addwf	fsr2l,f,c
 11179  003FC8  502F               	movf	(clust2sect@fs+1)^0,w,c
 11180  003FCA  22DA               	addwfc	fsr2h,f,c
 11181  003FCC  CFDE F02B          	movff	postinc2,??_clust2sect+2
 11182  003FD0  CFDD F02C          	movff	postdec2,??_clust2sect+3
 11183  003FD4  5029               	movf	??_clust2sect^0,w,c
 11184  003FD6  262B               	addwf	(??_clust2sect+2)^0,f,c
 11185  003FD8  502A               	movf	(??_clust2sect+1)^0,w,c
 11186  003FDA  222C               	addwfc	(??_clust2sect+3)^0,f,c
 11187  003FDC  502B               	movf	(??_clust2sect+2)^0,w,c
 11188  003FDE  5C25               	subwf	clust2sect@clust^0,w,c
 11189  003FE0  502C               	movf	(??_clust2sect+3)^0,w,c
 11190  003FE2  5826               	subwfb	(clust2sect@clust+1)^0,w,c
 11191  003FE4  A0D8               	btfss	status,0,c
 11192  003FE6  D009               	goto	l10138
 11193                           
 11194                           ; BSR set to: 0
 11195  003FE8  0E00               	movlw	0
 11196  003FEA  6E25               	movwf	?_clust2sect^0,c
 11197  003FEC  0E00               	movlw	0
 11198  003FEE  6E26               	movwf	(?_clust2sect+1)^0,c
 11199  003FF0  0E00               	movlw	0
 11200  003FF2  6E27               	movwf	(?_clust2sect+2)^0,c
 11201  003FF4  0E00               	movlw	0
 11202  003FF6  6E28               	movwf	(?_clust2sect+3)^0,c
 11203  003FF8  0012               	return	
 11204  003FFA                     l10138:
 11205                           
 11206                           ; BSR set to: 0
 11207                           ;tff.c: 348: return (DWORD)clust * fs->csize + fs->database;
 11208  003FFA  EE20 F010          	lfsr	2,16
 11209  003FFE  502E               	movf	clust2sect@fs^0,w,c
 11210  004000  26D9               	addwf	fsr2l,f,c
 11211  004002  502F               	movf	(clust2sect@fs+1)^0,w,c
 11212  004004  22DA               	addwfc	fsr2h,f,c
 11213  004006  CFDE F029          	movff	postinc2,??_clust2sect
 11214  00400A  CFDE F02A          	movff	postinc2,??_clust2sect+1
 11215  00400E  CFDE F02B          	movff	postinc2,??_clust2sect+2
 11216  004012  CFDE F02C          	movff	postinc2,??_clust2sect+3
 11217  004016  C025  F019         	movff	clust2sect@clust,___lmul@multiplier
 11218  00401A  C026  F01A         	movff	clust2sect@clust+1,___lmul@multiplier+1
 11219  00401E  6A1B               	clrf	(___lmul@multiplier+2)^0,c
 11220  004020  6A1C               	clrf	(___lmul@multiplier+3)^0,c
 11221  004022  EE20 F01D          	lfsr	2,29
 11222  004026  502E               	movf	clust2sect@fs^0,w,c
 11223  004028  26D9               	addwf	fsr2l,f,c
 11224  00402A  502F               	movf	(clust2sect@fs+1)^0,w,c
 11225  00402C  22DA               	addwfc	fsr2h,f,c
 11226  00402E  50DF               	movf	indf2,w,c
 11227  004030  6E2D               	movwf	(??_clust2sect+4)^0,c
 11228  004032  502D               	movf	(??_clust2sect+4)^0,w,c
 11229  004034  6E1D               	movwf	___lmul@multiplicand^0,c
 11230  004036  6A1E               	clrf	(___lmul@multiplicand+1)^0,c
 11231  004038  6A1F               	clrf	(___lmul@multiplicand+2)^0,c
 11232  00403A  6A20               	clrf	(___lmul@multiplicand+3)^0,c
 11233  00403C  ECC4  F025         	call	___lmul	;wreg free
 11234  004040  5029               	movf	??_clust2sect^0,w,c
 11235  004042  2419               	addwf	?___lmul^0,w,c
 11236  004044  6E25               	movwf	?_clust2sect^0,c
 11237  004046  502A               	movf	(??_clust2sect+1)^0,w,c
 11238  004048  201A               	addwfc	(?___lmul+1)^0,w,c
 11239  00404A  6E26               	movwf	(?_clust2sect+1)^0,c
 11240  00404C  502B               	movf	(??_clust2sect+2)^0,w,c
 11241  00404E  201B               	addwfc	(?___lmul+2)^0,w,c
 11242  004050  6E27               	movwf	(?_clust2sect+2)^0,c
 11243  004052  502C               	movf	(??_clust2sect+3)^0,w,c
 11244  004054  201C               	addwfc	(?___lmul+3)^0,w,c
 11245  004056  6E28               	movwf	(?_clust2sect+3)^0,c
 11246                           
 11247                           ; BSR set to: 0
 11248  004058  0012               	return		;funcret
 11249  00405A                     __end_of_clust2sect:
 11250                           	callstack 0
 11251                           
 11252 ;; *************** function _remove_chain *****************
 11253 ;; Defined at:
 11254 ;;		line 250 in file "bibliotecas/tff.c"
 11255 ;; Parameters:    Size  Location     Type
 11256 ;;  clust           2   64[BANK0 ] unsigned short 
 11257 ;; Auto vars:     Size  Location     Type
 11258 ;;  fs              2   70[BANK0 ] PTR struct _FATFS
 11259 ;;		 -> NULL(0), fs(544), 
 11260 ;;  nxt             2   68[BANK0 ] unsigned short 
 11261 ;; Return value:  Size  Location     Type
 11262 ;;                  1    wreg      enum E105
 11263 ;; Registers used:
 11264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11265 ;; Tracked objects:
 11266 ;;		On entry : 3F/0
 11267 ;;		On exit  : 3F/0
 11268 ;;		Unchanged: 0/0
 11269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11270 ;;      Params:         0       2       0       0       0       0       0       0       0
 11271 ;;      Locals:         0       4       0       0       0       0       0       0       0
 11272 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11273 ;;      Totals:         0       8       0       0       0       0       0       0       0
 11274 ;;Total ram usage:        8 bytes
 11275 ;; Hardware stack levels used:    1
 11276 ;; Hardware stack levels required when called:   10
 11277 ;; This function calls:
 11278 ;;		_get_cluster
 11279 ;;		_put_cluster
 11280 ;; This function is called by:
 11281 ;;		_f_open
 11282 ;; This function uses a non-reentrant model
 11283 ;;
 11284                           
 11285                           	psect	text53
 11286  0042F8                     __ptext53:
 11287                           	callstack 0
 11288  0042F8                     _remove_chain:
 11289                           	callstack 16
 11290                           
 11291                           ; BSR set to: 0
 11292                           ;tff.c: 254: CLUST nxt;;tff.c: 255: FATFS *fs = FatFs;
 11293                           
 11294                           ; BSR set to: 0
 11295                           ;incstack = 0
 11296  0042F8  C038  F0A6         	movff	_FatFs,remove_chain@fs
 11297  0042FC  C039  F0A7         	movff	_FatFs+1,remove_chain@fs+1
 11298                           
 11299                           ;tff.c: 258: while (clust >= 2 && clust < fs->max_clust) {
 11300  004300  D035               	goto	l10746
 11301  004302                     l10726:
 11302                           
 11303                           ; BSR set to: 0
 11304                           ;tff.c: 259: nxt = get_cluster(clust);
 11305  004302  C0A0  F031         	movff	remove_chain@clust,get_cluster@clust
 11306  004306  C0A1  F032         	movff	remove_chain@clust+1,get_cluster@clust+1
 11307  00430A  EC45  F014         	call	_get_cluster	;wreg free
 11308  00430E  C031  F0A4         	movff	?_get_cluster,remove_chain@nxt
 11309  004312  C032  F0A5         	movff	?_get_cluster+1,remove_chain@nxt+1
 11310                           
 11311                           ; BSR set to: 0
 11312                           ;tff.c: 260: if (nxt == 1) return FALSE;
 11313  004316  05A4               	decf	remove_chain@nxt& (0+255),w,b
 11314  004318  11A5               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
 11315  00431A  A4D8               	btfss	status,2,c
 11316  00431C  D002               	goto	l10734
 11317  00431E                     u12610:
 11318                           
 11319                           ; BSR set to: 0
 11320  00431E  0E00               	movlw	0
 11321  004320  0012               	return	
 11322  004322                     l10734:
 11323                           
 11324                           ; BSR set to: 0
 11325                           ;tff.c: 261: if (!put_cluster(clust, 0)) return FALSE;
 11326  004322  C0A0  F088         	movff	remove_chain@clust,put_cluster@clust
 11327  004326  C0A1  F089         	movff	remove_chain@clust+1,put_cluster@clust+1
 11328  00432A  0E00               	movlw	0
 11329  00432C  6F8B               	movwf	(put_cluster@val+1)& (0+255),b
 11330  00432E  0E00               	movlw	0
 11331  004330  6F8A               	movwf	put_cluster@val& (0+255),b
 11332  004332  ECF9  F011         	call	_put_cluster	;wreg free
 11333  004336  0900               	iorlw	0
 11334  004338  B4D8               	btfsc	status,2,c
 11335  00433A  D7F1               	goto	u12610
 11336                           
 11337                           ; BSR set to: 0
 11338                           ;tff.c: 262: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 11339  00433C  EE20 F01A          	lfsr	2,26
 11340  004340  51A6               	movf	remove_chain@fs& (0+255),w,b
 11341  004342  26D9               	addwf	fsr2l,f,c
 11342  004344  51A7               	movf	(remove_chain@fs+1)& (0+255),w,b
 11343  004346  22DA               	addwfc	fsr2h,f,c
 11344  004348  28DE               	incf	postinc2,w,c
 11345  00434A  E103               	bnz	u12630
 11346  00434C  28DE               	incf	postinc2,w,c
 11347  00434E  B4D8               	btfsc	status,2,c
 11348  004350  D009               	goto	l10744
 11349  004352                     u12630:
 11350                           
 11351                           ; BSR set to: 0
 11352                           ;tff.c: 263: fs->free_clust++;
 11353  004352  EE20 F01A          	lfsr	2,26
 11354  004356  51A6               	movf	remove_chain@fs& (0+255),w,b
 11355  004358  26D9               	addwf	fsr2l,f,c
 11356  00435A  51A7               	movf	(remove_chain@fs+1)& (0+255),w,b
 11357  00435C  22DA               	addwfc	fsr2h,f,c
 11358  00435E  2ADE               	incf	postinc2,f,c
 11359  004360  0E00               	movlw	0
 11360  004362  22DD               	addwfc	postdec2,f,c
 11361  004364                     l10744:
 11362                           
 11363                           ; BSR set to: 0
 11364                           ;tff.c: 267: };tff.c: 268: clust = nxt;
 11365  004364  C0A4  F0A0         	movff	remove_chain@nxt,remove_chain@clust
 11366  004368  C0A5  F0A1         	movff	remove_chain@nxt+1,remove_chain@clust+1
 11367  00436C                     l10746:
 11368                           
 11369                           ; BSR set to: 0
 11370  00436C  51A1               	movf	(remove_chain@clust+1)& (0+255),w,b
 11371  00436E  E104               	bnz	u12640
 11372  004370  0E02               	movlw	2
 11373  004372  5DA0               	subwf	remove_chain@clust& (0+255),w,b
 11374  004374  A0D8               	btfss	status,0,c
 11375  004376  D00C               	goto	u12650
 11376  004378                     u12640:
 11377                           
 11378                           ; BSR set to: 0
 11379  004378  EE20 F016          	lfsr	2,22
 11380  00437C  51A6               	movf	remove_chain@fs& (0+255),w,b
 11381  00437E  26D9               	addwf	fsr2l,f,c
 11382  004380  51A7               	movf	(remove_chain@fs+1)& (0+255),w,b
 11383  004382  22DA               	addwfc	fsr2h,f,c
 11384  004384  50DE               	movf	postinc2,w,c
 11385  004386  5DA0               	subwf	remove_chain@clust& (0+255),w,b
 11386  004388  50DE               	movf	postinc2,w,c
 11387  00438A  59A1               	subwfb	(remove_chain@clust+1)& (0+255),w,b
 11388  00438C  A0D8               	btfss	status,0,c
 11389  00438E  D7B9               	goto	l10726
 11390  004390                     u12650:
 11391                           
 11392                           ; BSR set to: 0
 11393                           ;tff.c: 269: };tff.c: 270: return TRUE;
 11394  004390  0E01               	movlw	1
 11395                           
 11396                           ; BSR set to: 0
 11397  004392  0012               	return		;funcret
 11398  004394                     __end_of_remove_chain:
 11399                           	callstack 0
 11400                           
 11401 ;; *************** function _memcpy *****************
 11402 ;; Defined at:
 11403 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\memcpy.c"
 11404 ;; Parameters:    Size  Location     Type
 11405 ;;  d1              2   24[COMRAM] PTR void 
 11406 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 11407 ;;  s1              2   26[COMRAM] PTR const void 
 11408 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 11409 ;;		 -> fs(544), 
 11410 ;;  n               2   28[COMRAM] unsigned int 
 11411 ;; Auto vars:     Size  Location     Type
 11412 ;;  s               2   33[COMRAM] PTR const unsigned char 
 11413 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 11414 ;;		 -> fs(544), 
 11415 ;;  d               2   31[COMRAM] PTR unsigned char 
 11416 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 11417 ;;  tmp             1   30[COMRAM] unsigned char 
 11418 ;; Return value:  Size  Location     Type
 11419 ;;                  2   24[COMRAM] PTR void 
 11420 ;; Registers used:
 11421 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11422 ;; Tracked objects:
 11423 ;;		On entry : 0/0
 11424 ;;		On exit  : 0/0
 11425 ;;		Unchanged: 0/0
 11426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11427 ;;      Params:         6       0       0       0       0       0       0       0       0
 11428 ;;      Locals:         5       0       0       0       0       0       0       0       0
 11429 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11430 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11431 ;;Total ram usage:       11 bytes
 11432 ;; Hardware stack levels used:    1
 11433 ;; Hardware stack levels required when called:    3
 11434 ;; This function calls:
 11435 ;;		Nothing
 11436 ;; This function is called by:
 11437 ;;		_f_open
 11438 ;;		_f_write
 11439 ;;		_f_read
 11440 ;; This function uses a non-reentrant model
 11441 ;;
 11442                           
 11443                           	psect	text54
 11444  004ECA                     __ptext54:
 11445                           	callstack 0
 11446  004ECA                     _memcpy:
 11447                           	callstack 20
 11448                           
 11449                           ; BSR set to: 0
 11450                           ;incstack = 0
 11451  004ECA  C01B  F022         	movff	memcpy@s1,memcpy@s
 11452  004ECE  C01C  F023         	movff	memcpy@s1+1,memcpy@s+1
 11453  004ED2  C019  F020         	movff	memcpy@d1,memcpy@d
 11454  004ED6  C01A  F021         	movff	memcpy@d1+1,memcpy@d+1
 11455  004EDA  D010               	goto	l10172
 11456  004EDC                     l10164:
 11457  004EDC  C022  FFD9         	movff	memcpy@s,fsr2l
 11458  004EE0  C023  FFDA         	movff	memcpy@s+1,fsr2h
 11459  004EE4  50DF               	movf	indf2,w,c
 11460  004EE6  6E1F               	movwf	memcpy@tmp^0,c
 11461  004EE8  4A22               	infsnz	memcpy@s^0,f,c
 11462  004EEA  2A23               	incf	(memcpy@s+1)^0,f,c
 11463  004EEC  C020  FFD9         	movff	memcpy@d,fsr2l
 11464  004EF0  C021  FFDA         	movff	memcpy@d+1,fsr2h
 11465  004EF4  C01F  FFDF         	movff	memcpy@tmp,indf2
 11466  004EF8  4A20               	infsnz	memcpy@d^0,f,c
 11467  004EFA  2A21               	incf	(memcpy@d+1)^0,f,c
 11468  004EFC                     l10172:
 11469  004EFC  061D               	decf	memcpy@n^0,f,c
 11470  004EFE  A0D8               	btfss	status,0,c
 11471  004F00  061E               	decf	(memcpy@n+1)^0,f,c
 11472  004F02  281D               	incf	memcpy@n^0,w,c
 11473  004F04  E1EB               	bnz	l10164
 11474  004F06  281E               	incf	(memcpy@n+1)^0,w,c
 11475  004F08  B4D8               	btfsc	status,2,c
 11476  004F0A  0012               	return	
 11477  004F0C  D7E7               	goto	l10164
 11478  004F0E                     __end_of_memcpy:
 11479                           	callstack 0
 11480                           
 11481 ;; *************** function _auto_mount *****************
 11482 ;; Defined at:
 11483 ;;		line 652 in file "bibliotecas/tff.c"
 11484 ;; Parameters:    Size  Location     Type
 11485 ;;  path            1   25[BANK0 ] PTR PTR const unsigned c
 11486 ;;		 -> f_opendir@path(2), f_open@path(2), 
 11487 ;;  chk_wp          1   26[BANK0 ] unsigned char 
 11488 ;; Auto vars:     Size  Location     Type
 11489 ;;  fatsize         4   65[BANK0 ] unsigned long 
 11490 ;;  totalsect       4   57[BANK0 ] unsigned long 
 11491 ;;  bootsect        4   53[BANK0 ] unsigned long 
 11492 ;;  maxclust        4   49[BANK0 ] unsigned long 
 11493 ;;  fs              2   69[BANK0 ] PTR struct _FATFS
 11494 ;;		 -> NULL(0), fs(544), 
 11495 ;;  p               2   61[BANK0 ] PTR const unsigned char 
 11496 ;;		 -> STR_20(13), filename(15), 
 11497 ;;  stat            1   64[BANK0 ] unsigned char 
 11498 ;;  fmt             1   63[BANK0 ] unsigned char 
 11499 ;; Return value:  Size  Location     Type
 11500 ;;                  1    wreg      enum E155
 11501 ;; Registers used:
 11502 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11503 ;; Tracked objects:
 11504 ;;		On entry : 3F/0
 11505 ;;		On exit  : 3E/0
 11506 ;;		Unchanged: 0/0
 11507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11508 ;;      Params:         0       2       0       0       0       0       0       0       0
 11509 ;;      Locals:         0      22       0       0       0       0       0       0       0
 11510 ;;      Temps:          0      22       0       0       0       0       0       0       0
 11511 ;;      Totals:         0      46       0       0       0       0       0       0       0
 11512 ;;Total ram usage:       46 bytes
 11513 ;; Hardware stack levels used:    1
 11514 ;; Hardware stack levels required when called:    9
 11515 ;; This function calls:
 11516 ;;		___lldiv
 11517 ;;		___lmul
 11518 ;;		_check_fs
 11519 ;;		_disk_initialize
 11520 ;;		_disk_status
 11521 ;;		_memset
 11522 ;; This function is called by:
 11523 ;;		_f_open
 11524 ;; This function uses a non-reentrant model
 11525 ;;
 11526                           
 11527                           	psect	text55
 11528  00059C                     __ptext55:
 11529                           	callstack 0
 11530  00059C                     _auto_mount:
 11531                           	callstack 17
 11532                           
 11533                           ; BSR set to: 0
 11534                           ;tff.c: 657: BYTE fmt;;tff.c: 658: DSTATUS stat;;tff.c: 659: DWORD bootsect, fatsize, to
      +                          talsect, maxclust;;tff.c: 660: const char *p = *path;
 11535                           
 11536                           ;incstack = 0
 11537  00059C  5179               	movf	auto_mount@path& (0+255),w,b
 11538  00059E  6ED9               	movwf	fsr2l,c
 11539  0005A0  6ADA               	clrf	fsr2h,c
 11540  0005A2  CFDE F09D          	movff	postinc2,auto_mount@p
 11541  0005A6  CFDD F09E          	movff	postdec2,auto_mount@p+1
 11542                           
 11543                           ;tff.c: 661: FATFS *fs;;tff.c: 664: while (*p == ' ') p++;
 11544  0005AA  D003               	goto	l10916
 11545  0005AC                     l10914:
 11546  0005AC  0100               	movlb	0	; () banked
 11547  0005AE  4B9D               	infsnz	auto_mount@p& (0+255),f,b
 11548  0005B0  2B9E               	incf	(auto_mount@p+1)& (0+255),f,b
 11549  0005B2                     l10916:
 11550                           
 11551                           ; BSR set to: 0
 11552  0005B2  C09D  FFF6         	movff	auto_mount@p,tblptrl
 11553  0005B6  C09E  FFF7         	movff	auto_mount@p+1,tblptrh
 11554  0005BA  6AF8               	clrf	tblptru,c
 11555  0005BC  0E07               	movlw	(high __ramtop+-1)
 11556  0005BE  64F7               	cpfsgt	tblptrh,c
 11557  0005C0  D003               	bra	u12927
 11558  0005C2  0008               	tblrd		*
 11559  0005C4  50F5               	movf	tablat,w,c
 11560  0005C6  D005               	bra	u12920
 11561  0005C8                     u12927:
 11562  0005C8  CFF6 FFE1          	movff	tblptrl,fsr1l
 11563  0005CC  CFF7 FFE2          	movff	tblptrh,fsr1h
 11564  0005D0  50E7               	movf	indf1,w,c
 11565  0005D2                     u12920:
 11566  0005D2  0A20               	xorlw	32
 11567  0005D4  B4D8               	btfsc	status,2,c
 11568  0005D6  D7EA               	goto	l10914
 11569                           
 11570                           ;tff.c: 665: if (*p == '/') p++;
 11571  0005D8  C09D  FFF6         	movff	auto_mount@p,tblptrl
 11572  0005DC  C09E  FFF7         	movff	auto_mount@p+1,tblptrh
 11573  0005E0  6AF8               	clrf	tblptru,c
 11574  0005E2  0E07               	movlw	(high __ramtop+-1)
 11575  0005E4  64F7               	cpfsgt	tblptrh,c
 11576  0005E6  D003               	bra	u12947
 11577  0005E8  0008               	tblrd		*
 11578  0005EA  50F5               	movf	tablat,w,c
 11579  0005EC  D005               	bra	u12940
 11580  0005EE                     u12947:
 11581  0005EE  CFF6 FFE1          	movff	tblptrl,fsr1l
 11582  0005F2  CFF7 FFE2          	movff	tblptrh,fsr1h
 11583  0005F6  50E7               	movf	indf1,w,c
 11584  0005F8                     u12940:
 11585  0005F8  0A2F               	xorlw	47
 11586  0005FA  A4D8               	btfss	status,2,c
 11587  0005FC  D003               	goto	l10922
 11588  0005FE  0100               	movlb	0	; () banked
 11589  000600  4B9D               	infsnz	auto_mount@p& (0+255),f,b
 11590  000602  2B9E               	incf	(auto_mount@p+1)& (0+255),f,b
 11591  000604                     l10922:
 11592                           
 11593                           ;tff.c: 666: *path = p;
 11594  000604  0100               	movlb	0	; () banked
 11595  000606  5179               	movf	auto_mount@path& (0+255),w,b
 11596  000608  6ED9               	movwf	fsr2l,c
 11597  00060A  6ADA               	clrf	fsr2h,c
 11598  00060C  C09D  FFDE         	movff	auto_mount@p,postinc2
 11599  000610  C09E  FFDD         	movff	auto_mount@p+1,postdec2
 11600                           
 11601                           ; BSR set to: 0
 11602                           ;tff.c: 669: fs = FatFs;
 11603  000614  C038  F0A5         	movff	_FatFs,auto_mount@fs
 11604  000618  C039  F0A6         	movff	_FatFs+1,auto_mount@fs+1
 11605                           
 11606                           ; BSR set to: 0
 11607                           ;tff.c: 670: if (!fs) return FR_NOT_ENABLED;
 11608  00061C  51A5               	movf	auto_mount@fs& (0+255),w,b
 11609  00061E  11A6               	iorwf	(auto_mount@fs+1)& (0+255),w,b
 11610  000620  A4D8               	btfss	status,2,c
 11611  000622  D002               	goto	l10932
 11612                           
 11613                           ; BSR set to: 0
 11614  000624  0E0A               	movlw	10
 11615  000626  0012               	return	
 11616  000628                     l10932:
 11617                           
 11618                           ; BSR set to: 0
 11619                           ;tff.c: 672: if (fs->fs_type) {
 11620  000628  EE20 F01C          	lfsr	2,28
 11621  00062C  51A5               	movf	auto_mount@fs& (0+255),w,b
 11622  00062E  26D9               	addwf	fsr2l,f,c
 11623  000630  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11624  000632  22DA               	addwfc	fsr2h,f,c
 11625  000634  50DF               	movf	indf2,w,c
 11626  000636  B4D8               	btfsc	status,2,c
 11627  000638  D00F               	goto	l10950
 11628                           
 11629                           ; BSR set to: 0
 11630                           ;tff.c: 673: stat = disk_status(0);
 11631  00063A  0E00               	movlw	0
 11632  00063C  EC52  F028         	call	_disk_status
 11633  000640  0100               	movlb	0	; () banked
 11634  000642  6FA0               	movwf	auto_mount@stat& (0+255),b
 11635                           
 11636                           ; BSR set to: 0
 11637                           ;tff.c: 674: if (!(stat & 0x01)) {
 11638  000644  B1A0               	btfsc	auto_mount@stat& (0+255),0,b
 11639  000646  D008               	goto	l10950
 11640                           
 11641                           ; BSR set to: 0
 11642                           ;tff.c: 676: if (chk_wp && (stat & 0x04))
 11643  000648  517A               	movf	auto_mount@chk_wp& (0+255),w,b
 11644  00064A  A4D8               	btfss	status,2,c
 11645                           
 11646                           ; BSR set to: 0
 11647  00064C  A5A0               	btfss	auto_mount@stat& (0+255),2,b
 11648  00064E  D002               	goto	l10946
 11649  000650                     u13000:
 11650                           
 11651                           ; BSR set to: 0
 11652                           ;tff.c: 677: return FR_WRITE_PROTECTED;
 11653  000650  0E09               	movlw	9
 11654  000652  0012               	return	
 11655  000654                     l10946:
 11656                           
 11657                           ; BSR set to: 0
 11658                           ;tff.c: 679: return FR_OK;
 11659  000654  0E00               	movlw	0
 11660  000656  0012               	return	
 11661  000658                     l10950:
 11662                           
 11663                           ; BSR set to: 0
 11664                           ;tff.c: 680: };tff.c: 681: };tff.c: 685: memset(fs, 0, sizeof(FATFS));
 11665  000658  C0A5  F019         	movff	auto_mount@fs,memset@p1
 11666  00065C  C0A6  F01A         	movff	auto_mount@fs+1,memset@p1+1
 11667  000660  0E00               	movlw	0
 11668  000662  6E1C               	movwf	(memset@c+1)^0,c
 11669  000664  0E00               	movlw	0
 11670  000666  6E1B               	movwf	memset@c^0,c
 11671  000668  0E02               	movlw	2
 11672  00066A  6E1E               	movwf	(memset@n+1)^0,c
 11673  00066C  0E20               	movlw	32
 11674  00066E  6E1D               	movwf	memset@n^0,c
 11675  000670  EC97  F028         	call	_memset	;wreg free
 11676                           
 11677                           ;tff.c: 686: stat = disk_initialize(0);
 11678  000674  0E00               	movlw	0
 11679  000676  ECD7  F028         	call	_disk_initialize
 11680  00067A  0100               	movlb	0	; () banked
 11681  00067C  6FA0               	movwf	auto_mount@stat& (0+255),b
 11682                           
 11683                           ; BSR set to: 0
 11684                           ;tff.c: 687: if (stat & 0x01)
 11685  00067E  A1A0               	btfss	auto_mount@stat& (0+255),0,b
 11686  000680  D002               	goto	l10960
 11687                           
 11688                           ; BSR set to: 0
 11689                           ;tff.c: 688: return FR_NOT_READY;
 11690  000682  0E01               	movlw	1
 11691  000684  0012               	return	
 11692  000686                     l10960:
 11693                           
 11694                           ; BSR set to: 0
 11695                           ;tff.c: 690: if (chk_wp && (stat & 0x04))
 11696  000686  517A               	movf	auto_mount@chk_wp& (0+255),w,b
 11697  000688  B4D8               	btfsc	status,2,c
 11698  00068A  D002               	goto	l10968
 11699                           
 11700                           ; BSR set to: 0
 11701  00068C  B5A0               	btfsc	auto_mount@stat& (0+255),2,b
 11702  00068E  D7E0               	goto	u13000
 11703  000690                     l10968:
 11704                           
 11705                           ; BSR set to: 0
 11706                           ;tff.c: 695: fmt = check_fs(bootsect = 0);
 11707  000690  0E00               	movlw	0
 11708  000692  6F95               	movwf	auto_mount@bootsect& (0+255),b
 11709  000694  0E00               	movlw	0
 11710  000696  6F96               	movwf	(auto_mount@bootsect+1)& (0+255),b
 11711  000698  0E00               	movlw	0
 11712  00069A  6F97               	movwf	(auto_mount@bootsect+2)& (0+255),b
 11713  00069C  0E00               	movlw	0
 11714  00069E  6F98               	movwf	(auto_mount@bootsect+3)& (0+255),b
 11715  0006A0  C095  F073         	movff	auto_mount@bootsect,check_fs@sect
 11716  0006A4  C096  F074         	movff	auto_mount@bootsect+1,check_fs@sect+1
 11717  0006A8  C097  F075         	movff	auto_mount@bootsect+2,check_fs@sect+2
 11718  0006AC  C098  F076         	movff	auto_mount@bootsect+3,check_fs@sect+3
 11719  0006B0  EC72  F023         	call	_check_fs	;wreg free
 11720  0006B4  0100               	movlb	0	; () banked
 11721  0006B6  6F9F               	movwf	auto_mount@fmt& (0+255),b
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;tff.c: 697: if (fmt == 1) {
 11725  0006B8  059F               	decf	auto_mount@fmt& (0+255),w,b
 11726  0006BA  A4D8               	btfss	status,2,c
 11727  0006BC  D023               	goto	l10978
 11728                           
 11729                           ; BSR set to: 0
 11730                           ;tff.c: 699: if (fs->win[446+4]) {
 11731  0006BE  EE21 F0E2          	lfsr	2,482
 11732  0006C2  51A5               	movf	auto_mount@fs& (0+255),w,b
 11733  0006C4  26D9               	addwf	fsr2l,f,c
 11734  0006C6  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11735  0006C8  22DA               	addwfc	fsr2h,f,c
 11736  0006CA  50DF               	movf	indf2,w,c
 11737  0006CC  B4D8               	btfsc	status,2,c
 11738  0006CE  D01A               	goto	l10978
 11739                           
 11740                           ; BSR set to: 0
 11741                           ;tff.c: 700: bootsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[446+8]));
 11742  0006D0  EE21 F0E6          	lfsr	2,486
 11743  0006D4  51A5               	movf	auto_mount@fs& (0+255),w,b
 11744  0006D6  26D9               	addwf	fsr2l,f,c
 11745  0006D8  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11746  0006DA  22DA               	addwfc	fsr2h,f,c
 11747  0006DC  CFDE F095          	movff	postinc2,auto_mount@bootsect
 11748  0006E0  CFDE F096          	movff	postinc2,auto_mount@bootsect+1
 11749  0006E4  CFDE F097          	movff	postinc2,auto_mount@bootsect+2
 11750  0006E8  CFDE F098          	movff	postinc2,auto_mount@bootsect+3
 11751                           
 11752                           ; BSR set to: 0
 11753                           ;tff.c: 701: fmt = check_fs(bootsect);
 11754  0006EC  C095  F073         	movff	auto_mount@bootsect,check_fs@sect
 11755  0006F0  C096  F074         	movff	auto_mount@bootsect+1,check_fs@sect+1
 11756  0006F4  C097  F075         	movff	auto_mount@bootsect+2,check_fs@sect+2
 11757  0006F8  C098  F076         	movff	auto_mount@bootsect+3,check_fs@sect+3
 11758  0006FC  EC72  F023         	call	_check_fs	;wreg free
 11759  000700  0100               	movlb	0	; () banked
 11760  000702  6F9F               	movwf	auto_mount@fmt& (0+255),b
 11761  000704                     l10978:
 11762                           
 11763                           ; BSR set to: 0
 11764                           ;tff.c: 702: };tff.c: 703: };tff.c: 704: if (fmt || (WORD)(*(WORD*)(BYTE*)(&fs->win[11])
      +                          ) != 512U)
 11765  000704  519F               	movf	auto_mount@fmt& (0+255),w,b
 11766  000706  A4D8               	btfss	status,2,c
 11767  000708  D00C               	goto	u13070
 11768                           
 11769                           ; BSR set to: 0
 11770  00070A  EE20 F02B          	lfsr	2,43
 11771  00070E  51A5               	movf	auto_mount@fs& (0+255),w,b
 11772  000710  26D9               	addwf	fsr2l,f,c
 11773  000712  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11774  000714  22DA               	addwfc	fsr2h,f,c
 11775  000716  50DE               	movf	postinc2,w,c
 11776  000718  E104               	bnz	u13070
 11777  00071A  0E02               	movlw	2
 11778  00071C  18DE               	xorwf	postinc2,w,c
 11779  00071E  B4D8               	btfsc	status,2,c
 11780  000720  D002               	goto	l10986
 11781  000722                     u13070:
 11782                           
 11783                           ; BSR set to: 0
 11784                           ;tff.c: 705: return FR_NO_FILESYSTEM;
 11785  000722  0E0B               	movlw	11
 11786  000724  0012               	return	
 11787  000726                     l10986:
 11788                           
 11789                           ; BSR set to: 0
 11790                           ;tff.c: 708: fatsize = (WORD)(*(WORD*)(BYTE*)(&fs->win[22]));
 11791  000726  EE20 F036          	lfsr	2,54
 11792  00072A  51A5               	movf	auto_mount@fs& (0+255),w,b
 11793  00072C  26D9               	addwf	fsr2l,f,c
 11794  00072E  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11795  000730  22DA               	addwfc	fsr2h,f,c
 11796  000732  CFDE F07B          	movff	postinc2,??_auto_mount
 11797  000736  CFDD F07C          	movff	postdec2,??_auto_mount+1
 11798  00073A  C07B  F0A1         	movff	??_auto_mount,auto_mount@fatsize
 11799  00073E  C07C  F0A2         	movff	??_auto_mount+1,auto_mount@fatsize+1
 11800  000742  6BA3               	clrf	(auto_mount@fatsize+2)& (0+255),b
 11801  000744  6BA4               	clrf	(auto_mount@fatsize+3)& (0+255),b
 11802                           
 11803                           ; BSR set to: 0
 11804                           ;tff.c: 709: if (!fatsize) fatsize = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[36]));
 11805  000746  51A1               	movf	auto_mount@fatsize& (0+255),w,b
 11806  000748  11A2               	iorwf	(auto_mount@fatsize+1)& (0+255),w,b
 11807  00074A  11A3               	iorwf	(auto_mount@fatsize+2)& (0+255),w,b
 11808  00074C  11A4               	iorwf	(auto_mount@fatsize+3)& (0+255),w,b
 11809  00074E  A4D8               	btfss	status,2,c
 11810  000750  D00E               	goto	l930
 11811                           
 11812                           ; BSR set to: 0
 11813  000752  EE20 F044          	lfsr	2,68
 11814  000756  51A5               	movf	auto_mount@fs& (0+255),w,b
 11815  000758  26D9               	addwf	fsr2l,f,c
 11816  00075A  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11817  00075C  22DA               	addwfc	fsr2h,f,c
 11818  00075E  CFDE F0A1          	movff	postinc2,auto_mount@fatsize
 11819  000762  CFDE F0A2          	movff	postinc2,auto_mount@fatsize+1
 11820  000766  CFDE F0A3          	movff	postinc2,auto_mount@fatsize+2
 11821  00076A  CFDE F0A4          	movff	postinc2,auto_mount@fatsize+3
 11822  00076E                     l930:
 11823                           
 11824                           ; BSR set to: 0
 11825                           ;tff.c: 710: fs->sects_fat = (CLUST)fatsize;
 11826  00076E  EE20 F014          	lfsr	2,20
 11827  000772  51A5               	movf	auto_mount@fs& (0+255),w,b
 11828  000774  26D9               	addwf	fsr2l,f,c
 11829  000776  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11830  000778  22DA               	addwfc	fsr2h,f,c
 11831  00077A  C0A1  FFDE         	movff	auto_mount@fatsize,postinc2
 11832  00077E  C0A2  FFDD         	movff	auto_mount@fatsize+1,postdec2
 11833                           
 11834                           ; BSR set to: 0
 11835                           ;tff.c: 711: fs->n_fats = fs->win[16];
 11836  000782  EE20 F030          	lfsr	2,48
 11837  000786  51A5               	movf	auto_mount@fs& (0+255),w,b
 11838  000788  26D9               	addwf	fsr2l,f,c
 11839  00078A  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11840  00078C  22DA               	addwfc	fsr2h,f,c
 11841  00078E  EE10 F01E          	lfsr	1,30
 11842  000792  51A5               	movf	auto_mount@fs& (0+255),w,b
 11843  000794  26E1               	addwf	fsr1l,f,c
 11844  000796  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11845  000798  22E2               	addwfc	fsr1h,f,c
 11846  00079A  CFDF FFE7          	movff	indf2,indf1
 11847                           
 11848                           ; BSR set to: 0
 11849                           ;tff.c: 712: fatsize *= fs->n_fats;
 11850  00079E  C0A1  F019         	movff	auto_mount@fatsize,___lmul@multiplier
 11851  0007A2  C0A2  F01A         	movff	auto_mount@fatsize+1,___lmul@multiplier+1
 11852  0007A6  C0A3  F01B         	movff	auto_mount@fatsize+2,___lmul@multiplier+2
 11853  0007AA  C0A4  F01C         	movff	auto_mount@fatsize+3,___lmul@multiplier+3
 11854  0007AE  EE20 F01E          	lfsr	2,30
 11855  0007B2  51A5               	movf	auto_mount@fs& (0+255),w,b
 11856  0007B4  26D9               	addwf	fsr2l,f,c
 11857  0007B6  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11858  0007B8  22DA               	addwfc	fsr2h,f,c
 11859  0007BA  50DF               	movf	indf2,w,c
 11860  0007BC  6F7B               	movwf	??_auto_mount& (0+255),b
 11861  0007BE  517B               	movf	??_auto_mount& (0+255),w,b
 11862  0007C0  6E1D               	movwf	___lmul@multiplicand^0,c
 11863  0007C2  6A1E               	clrf	(___lmul@multiplicand+1)^0,c
 11864  0007C4  6A1F               	clrf	(___lmul@multiplicand+2)^0,c
 11865  0007C6  6A20               	clrf	(___lmul@multiplicand+3)^0,c
 11866  0007C8  ECC4  F025         	call	___lmul	;wreg free
 11867  0007CC  C019  F0A1         	movff	?___lmul,auto_mount@fatsize
 11868  0007D0  C01A  F0A2         	movff	?___lmul+1,auto_mount@fatsize+1
 11869  0007D4  C01B  F0A3         	movff	?___lmul+2,auto_mount@fatsize+2
 11870  0007D8  C01C  F0A4         	movff	?___lmul+3,auto_mount@fatsize+3
 11871                           
 11872                           ; BSR set to: 0
 11873                           ;tff.c: 713: fs->fatbase = bootsect + (WORD)(*(WORD*)(BYTE*)(&fs->win[14]));
 11874  0007DC  EE20 F02E          	lfsr	2,46
 11875  0007E0  51A5               	movf	auto_mount@fs& (0+255),w,b
 11876  0007E2  26D9               	addwf	fsr2l,f,c
 11877  0007E4  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11878  0007E6  22DA               	addwfc	fsr2h,f,c
 11879  0007E8  CFDE F07B          	movff	postinc2,??_auto_mount
 11880  0007EC  CFDD F07C          	movff	postdec2,??_auto_mount+1
 11881  0007F0  517B               	movf	??_auto_mount& (0+255),w,b
 11882  0007F2  2595               	addwf	auto_mount@bootsect& (0+255),w,b
 11883  0007F4  6F7D               	movwf	(??_auto_mount+2)& (0+255),b
 11884  0007F6  517C               	movf	(??_auto_mount+1)& (0+255),w,b
 11885  0007F8  2196               	addwfc	(auto_mount@bootsect+1)& (0+255),w,b
 11886  0007FA  6F7E               	movwf	(??_auto_mount+3)& (0+255),b
 11887  0007FC  0E00               	movlw	0
 11888  0007FE  2197               	addwfc	(auto_mount@bootsect+2)& (0+255),w,b
 11889  000800  6F7F               	movwf	(??_auto_mount+4)& (0+255),b
 11890  000802  0E00               	movlw	0
 11891  000804  2198               	addwfc	(auto_mount@bootsect+3)& (0+255),w,b
 11892  000806  6F80               	movwf	(??_auto_mount+5)& (0+255),b
 11893  000808  EE20 F008          	lfsr	2,8
 11894  00080C  51A5               	movf	auto_mount@fs& (0+255),w,b
 11895  00080E  26D9               	addwf	fsr2l,f,c
 11896  000810  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11897  000812  22DA               	addwfc	fsr2h,f,c
 11898  000814  C07D  FFDE         	movff	??_auto_mount+2,postinc2
 11899  000818  C07E  FFDE         	movff	??_auto_mount+3,postinc2
 11900  00081C  C07F  FFDE         	movff	??_auto_mount+4,postinc2
 11901  000820  C080  FFDE         	movff	??_auto_mount+5,postinc2
 11902                           
 11903                           ; BSR set to: 0
 11904                           ;tff.c: 714: fs->csize = fs->win[13];
 11905  000824  EE20 F02D          	lfsr	2,45
 11906  000828  51A5               	movf	auto_mount@fs& (0+255),w,b
 11907  00082A  26D9               	addwf	fsr2l,f,c
 11908  00082C  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11909  00082E  22DA               	addwfc	fsr2h,f,c
 11910  000830  EE10 F01D          	lfsr	1,29
 11911  000834  51A5               	movf	auto_mount@fs& (0+255),w,b
 11912  000836  26E1               	addwf	fsr1l,f,c
 11913  000838  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11914  00083A  22E2               	addwfc	fsr1h,f,c
 11915  00083C  CFDF FFE7          	movff	indf2,indf1
 11916                           
 11917                           ; BSR set to: 0
 11918                           ;tff.c: 715: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(&fs->win[17]));
 11919  000840  EE20 F031          	lfsr	2,49
 11920  000844  51A5               	movf	auto_mount@fs& (0+255),w,b
 11921  000846  26D9               	addwf	fsr2l,f,c
 11922  000848  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11923  00084A  22DA               	addwfc	fsr2h,f,c
 11924  00084C  EE10 F002          	lfsr	1,2
 11925  000850  51A5               	movf	auto_mount@fs& (0+255),w,b
 11926  000852  26E1               	addwf	fsr1l,f,c
 11927  000854  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11928  000856  22E2               	addwfc	fsr1h,f,c
 11929  000858  CFDE FFE6          	movff	postinc2,postinc1
 11930  00085C  CFDD FFE5          	movff	postdec2,postdec1
 11931                           
 11932                           ; BSR set to: 0
 11933                           ;tff.c: 716: totalsect = (WORD)(*(WORD*)(BYTE*)(&fs->win[19]));
 11934  000860  EE20 F033          	lfsr	2,51
 11935  000864  51A5               	movf	auto_mount@fs& (0+255),w,b
 11936  000866  26D9               	addwf	fsr2l,f,c
 11937  000868  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11938  00086A  22DA               	addwfc	fsr2h,f,c
 11939  00086C  CFDE F07B          	movff	postinc2,??_auto_mount
 11940  000870  CFDD F07C          	movff	postdec2,??_auto_mount+1
 11941  000874  C07B  F099         	movff	??_auto_mount,auto_mount@totalsect
 11942  000878  C07C  F09A         	movff	??_auto_mount+1,auto_mount@totalsect+1
 11943  00087C  6B9B               	clrf	(auto_mount@totalsect+2)& (0+255),b
 11944  00087E  6B9C               	clrf	(auto_mount@totalsect+3)& (0+255),b
 11945                           
 11946                           ; BSR set to: 0
 11947                           ;tff.c: 717: if (!totalsect) totalsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[32]));
 11948  000880  5199               	movf	auto_mount@totalsect& (0+255),w,b
 11949  000882  119A               	iorwf	(auto_mount@totalsect+1)& (0+255),w,b
 11950  000884  119B               	iorwf	(auto_mount@totalsect+2)& (0+255),w,b
 11951  000886  119C               	iorwf	(auto_mount@totalsect+3)& (0+255),w,b
 11952  000888  A4D8               	btfss	status,2,c
 11953  00088A  D00E               	goto	l11008
 11954                           
 11955                           ; BSR set to: 0
 11956  00088C  EE20 F040          	lfsr	2,64
 11957  000890  51A5               	movf	auto_mount@fs& (0+255),w,b
 11958  000892  26D9               	addwf	fsr2l,f,c
 11959  000894  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11960  000896  22DA               	addwfc	fsr2h,f,c
 11961  000898  CFDE F099          	movff	postinc2,auto_mount@totalsect
 11962  00089C  CFDE F09A          	movff	postinc2,auto_mount@totalsect+1
 11963  0008A0  CFDE F09B          	movff	postinc2,auto_mount@totalsect+2
 11964  0008A4  CFDE F09C          	movff	postinc2,auto_mount@totalsect+3
 11965  0008A8                     l11008:
 11966                           
 11967                           ; BSR set to: 0
 11968                           ;tff.c: 718: fs->max_clust = maxclust = (totalsect;tff.c: 719: - (WORD)(*(WORD*)(BYTE*)(
      +                          &fs->win[14])) - fatsize - fs->n_rootdir / 16;tff.c: 720: ) / fs->csize + 2;
 11969  0008A8  EE20 F002          	lfsr	2,2
 11970  0008AC  51A5               	movf	auto_mount@fs& (0+255),w,b
 11971  0008AE  26D9               	addwf	fsr2l,f,c
 11972  0008B0  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11973  0008B2  22DA               	addwfc	fsr2h,f,c
 11974  0008B4  CFDE F07B          	movff	postinc2,??_auto_mount
 11975  0008B8  CFDD F07C          	movff	postdec2,??_auto_mount+1
 11976  0008BC  0E04               	movlw	4
 11977  0008BE  6F7D               	movwf	(??_auto_mount+2)& (0+255),b
 11978  0008C0                     u13105:
 11979  0008C0  90D8               	bcf	status,0,c
 11980  0008C2  337C               	rrcf	(??_auto_mount+1)& (0+255),f,b
 11981  0008C4  337B               	rrcf	??_auto_mount& (0+255),f,b
 11982  0008C6  2F7D               	decfsz	(??_auto_mount+2)& (0+255),f,b
 11983  0008C8  D7FB               	goto	u13105
 11984  0008CA  517B               	movf	??_auto_mount& (0+255),w,b
 11985  0008CC  6F7E               	movwf	(??_auto_mount+3)& (0+255),b
 11986  0008CE  517C               	movf	(??_auto_mount+1)& (0+255),w,b
 11987  0008D0  6F7F               	movwf	(??_auto_mount+4)& (0+255),b
 11988  0008D2  6B80               	clrf	(??_auto_mount+5)& (0+255),b
 11989  0008D4  6B81               	clrf	(??_auto_mount+6)& (0+255),b
 11990  0008D6  EE20 F02E          	lfsr	2,46
 11991  0008DA  51A5               	movf	auto_mount@fs& (0+255),w,b
 11992  0008DC  26D9               	addwf	fsr2l,f,c
 11993  0008DE  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 11994  0008E0  22DA               	addwfc	fsr2h,f,c
 11995  0008E2  CFDE F082          	movff	postinc2,??_auto_mount+7
 11996  0008E6  CFDD F083          	movff	postdec2,??_auto_mount+8
 11997  0008EA  5182               	movf	(??_auto_mount+7)& (0+255),w,b
 11998  0008EC  6F84               	movwf	(??_auto_mount+9)& (0+255),b
 11999  0008EE  5183               	movf	(??_auto_mount+8)& (0+255),w,b
 12000  0008F0  6F85               	movwf	(??_auto_mount+10)& (0+255),b
 12001  0008F2  6B86               	clrf	(??_auto_mount+11)& (0+255),b
 12002  0008F4  6B87               	clrf	(??_auto_mount+12)& (0+255),b
 12003  0008F6  1F84               	comf	(??_auto_mount+9)& (0+255),f,b
 12004  0008F8  1F85               	comf	(??_auto_mount+10)& (0+255),f,b
 12005  0008FA  1F86               	comf	(??_auto_mount+11)& (0+255),f,b
 12006  0008FC  1F87               	comf	(??_auto_mount+12)& (0+255),f,b
 12007  0008FE  2B84               	incf	(??_auto_mount+9)& (0+255),f,b
 12008  000900  0E00               	movlw	0
 12009  000902  2385               	addwfc	(??_auto_mount+10)& (0+255),f,b
 12010  000904  2386               	addwfc	(??_auto_mount+11)& (0+255),f,b
 12011  000906  2387               	addwfc	(??_auto_mount+12)& (0+255),f,b
 12012  000908  51A1               	movf	auto_mount@fatsize& (0+255),w,b
 12013  00090A  5D84               	subwf	(??_auto_mount+9)& (0+255),w,b
 12014  00090C  6F88               	movwf	(??_auto_mount+13)& (0+255),b
 12015  00090E  51A2               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 12016  000910  5985               	subwfb	(??_auto_mount+10)& (0+255),w,b
 12017  000912  6F89               	movwf	(??_auto_mount+14)& (0+255),b
 12018  000914  51A3               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 12019  000916  5986               	subwfb	(??_auto_mount+11)& (0+255),w,b
 12020  000918  6F8A               	movwf	(??_auto_mount+15)& (0+255),b
 12021  00091A  51A4               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 12022  00091C  5987               	subwfb	(??_auto_mount+12)& (0+255),w,b
 12023  00091E  6F8B               	movwf	(??_auto_mount+16)& (0+255),b
 12024  000920  517E               	movf	(??_auto_mount+3)& (0+255),w,b
 12025  000922  5D88               	subwf	(??_auto_mount+13)& (0+255),w,b
 12026  000924  6F8C               	movwf	(??_auto_mount+17)& (0+255),b
 12027  000926  517F               	movf	(??_auto_mount+4)& (0+255),w,b
 12028  000928  5989               	subwfb	(??_auto_mount+14)& (0+255),w,b
 12029  00092A  6F8D               	movwf	(??_auto_mount+18)& (0+255),b
 12030  00092C  5180               	movf	(??_auto_mount+5)& (0+255),w,b
 12031  00092E  598A               	subwfb	(??_auto_mount+15)& (0+255),w,b
 12032  000930  6F8E               	movwf	(??_auto_mount+19)& (0+255),b
 12033  000932  5181               	movf	(??_auto_mount+6)& (0+255),w,b
 12034  000934  598B               	subwfb	(??_auto_mount+16)& (0+255),w,b
 12035  000936  6F8F               	movwf	(??_auto_mount+20)& (0+255),b
 12036  000938  5199               	movf	auto_mount@totalsect& (0+255),w,b
 12037  00093A  258C               	addwf	(??_auto_mount+17)& (0+255),w,b
 12038  00093C  6E19               	movwf	___lldiv@dividend^0,c
 12039  00093E  519A               	movf	(auto_mount@totalsect+1)& (0+255),w,b
 12040  000940  218D               	addwfc	(??_auto_mount+18)& (0+255),w,b
 12041  000942  6E1A               	movwf	(___lldiv@dividend+1)^0,c
 12042  000944  519B               	movf	(auto_mount@totalsect+2)& (0+255),w,b
 12043  000946  218E               	addwfc	(??_auto_mount+19)& (0+255),w,b
 12044  000948  6E1B               	movwf	(___lldiv@dividend+2)^0,c
 12045  00094A  519C               	movf	(auto_mount@totalsect+3)& (0+255),w,b
 12046  00094C  218F               	addwfc	(??_auto_mount+20)& (0+255),w,b
 12047  00094E  6E1C               	movwf	(___lldiv@dividend+3)^0,c
 12048  000950  EE20 F01D          	lfsr	2,29
 12049  000954  51A5               	movf	auto_mount@fs& (0+255),w,b
 12050  000956  26D9               	addwf	fsr2l,f,c
 12051  000958  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 12052  00095A  22DA               	addwfc	fsr2h,f,c
 12053  00095C  50DF               	movf	indf2,w,c
 12054  00095E  6F90               	movwf	(??_auto_mount+21)& (0+255),b
 12055  000960  5190               	movf	(??_auto_mount+21)& (0+255),w,b
 12056  000962  6E1D               	movwf	___lldiv@divisor^0,c
 12057  000964  6A1E               	clrf	(___lldiv@divisor+1)^0,c
 12058  000966  6A1F               	clrf	(___lldiv@divisor+2)^0,c
 12059  000968  6A20               	clrf	(___lldiv@divisor+3)^0,c
 12060  00096A  ECB3  F023         	call	___lldiv	;wreg free
 12061  00096E  0E02               	movlw	2
 12062  000970  2419               	addwf	?___lldiv^0,w,c
 12063  000972  0100               	movlb	0	; () banked
 12064  000974  6F91               	movwf	auto_mount@maxclust& (0+255),b
 12065  000976  0E00               	movlw	0
 12066  000978  201A               	addwfc	(?___lldiv+1)^0,w,c
 12067  00097A  6F92               	movwf	(auto_mount@maxclust+1)& (0+255),b
 12068  00097C  0E00               	movlw	0
 12069  00097E  201B               	addwfc	(?___lldiv+2)^0,w,c
 12070  000980  6F93               	movwf	(auto_mount@maxclust+2)& (0+255),b
 12071  000982  0E00               	movlw	0
 12072  000984  201C               	addwfc	(?___lldiv+3)^0,w,c
 12073  000986  6F94               	movwf	(auto_mount@maxclust+3)& (0+255),b
 12074  000988  EE20 F016          	lfsr	2,22
 12075  00098C  51A5               	movf	auto_mount@fs& (0+255),w,b
 12076  00098E  26D9               	addwf	fsr2l,f,c
 12077  000990  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 12078  000992  22DA               	addwfc	fsr2h,f,c
 12079  000994  C091  FFDE         	movff	auto_mount@maxclust,postinc2
 12080  000998  C092  FFDD         	movff	auto_mount@maxclust+1,postdec2
 12081                           
 12082                           ; BSR set to: 0
 12083                           ;tff.c: 722: fmt = 1;
 12084  00099C  0E01               	movlw	1
 12085  00099E  6F9F               	movwf	auto_mount@fmt& (0+255),b
 12086                           
 12087                           ; BSR set to: 0
 12088                           ;tff.c: 723: if (maxclust >= 0xFF7) fmt = 2;
 12089  0009A0  5194               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 12090  0009A2  1193               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 12091  0009A4  E106               	bnz	u13110
 12092  0009A6  0EF7               	movlw	247
 12093  0009A8  5D91               	subwf	auto_mount@maxclust& (0+255),w,b
 12094  0009AA  0E0F               	movlw	15
 12095  0009AC  5992               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 12096  0009AE  A0D8               	btfss	status,0,c
 12097  0009B0  D002               	goto	l11016
 12098  0009B2                     u13110:
 12099                           
 12100                           ; BSR set to: 0
 12101  0009B2  0E02               	movlw	2
 12102  0009B4  6F9F               	movwf	auto_mount@fmt& (0+255),b
 12103  0009B6                     l11016:
 12104                           
 12105                           ; BSR set to: 0
 12106                           ;tff.c: 724: if (maxclust >= 0xFFF7)
 12107  0009B6  5194               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 12108  0009B8  1193               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 12109  0009BA  E107               	bnz	u13120
 12110  0009BC  0EF7               	movlw	247
 12111  0009BE  5D91               	subwf	auto_mount@maxclust& (0+255),w,b
 12112  0009C0  0EFF               	movlw	255
 12113  0009C2  5992               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 12114  0009C4  B0D8               	btfsc	status,0,c
 12115  0009C6  D6AD               	goto	u13070
 12116  0009C8  D001               	goto	l11022
 12117  0009CA                     u13120:
 12118  0009CA  D6AB               	goto	u13070
 12119  0009CC                     l11022:
 12120                           
 12121                           ; BSR set to: 0
 12122                           ;tff.c: 733: fs->dirbase = fs->fatbase + fatsize;
 12123  0009CC  EE20 F008          	lfsr	2,8
 12124  0009D0  51A5               	movf	auto_mount@fs& (0+255),w,b
 12125  0009D2  26D9               	addwf	fsr2l,f,c
 12126  0009D4  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 12127  0009D6  22DA               	addwfc	fsr2h,f,c
 12128  0009D8  CFDE F07B          	movff	postinc2,??_auto_mount
 12129  0009DC  CFDE F07C          	movff	postinc2,??_auto_mount+1
 12130  0009E0  CFDE F07D          	movff	postinc2,??_auto_mount+2
 12131  0009E4  CFDE F07E          	movff	postinc2,??_auto_mount+3
 12132  0009E8  51A1               	movf	auto_mount@fatsize& (0+255),w,b
 12133  0009EA  257B               	addwf	??_auto_mount& (0+255),w,b
 12134  0009EC  6F7F               	movwf	(??_auto_mount+4)& (0+255),b
 12135  0009EE  51A2               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 12136  0009F0  217C               	addwfc	(??_auto_mount+1)& (0+255),w,b
 12137  0009F2  6F80               	movwf	(??_auto_mount+5)& (0+255),b
 12138  0009F4  51A3               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 12139  0009F6  217D               	addwfc	(??_auto_mount+2)& (0+255),w,b
 12140  0009F8  6F81               	movwf	(??_auto_mount+6)& (0+255),b
 12141  0009FA  51A4               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 12142  0009FC  217E               	addwfc	(??_auto_mount+3)& (0+255),w,b
 12143  0009FE  6F82               	movwf	(??_auto_mount+7)& (0+255),b
 12144  000A00  EE20 F00C          	lfsr	2,12
 12145  000A04  51A5               	movf	auto_mount@fs& (0+255),w,b
 12146  000A06  26D9               	addwf	fsr2l,f,c
 12147  000A08  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 12148  000A0A  22DA               	addwfc	fsr2h,f,c
 12149  000A0C  C07F  FFDE         	movff	??_auto_mount+4,postinc2
 12150  000A10  C080  FFDE         	movff	??_auto_mount+5,postinc2
 12151  000A14  C081  FFDE         	movff	??_auto_mount+6,postinc2
 12152  000A18  C082  FFDE         	movff	??_auto_mount+7,postinc2
 12153                           
 12154                           ;tff.c: 734: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;
 12155  000A1C  EE20 F008          	lfsr	2,8
 12156  000A20  51A5               	movf	auto_mount@fs& (0+255),w,b
 12157  000A22  26D9               	addwf	fsr2l,f,c
 12158  000A24  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 12159  000A26  22DA               	addwfc	fsr2h,f,c
 12160  000A28  CFDE F07B          	movff	postinc2,??_auto_mount
 12161  000A2C  CFDE F07C          	movff	postinc2,??_auto_mount+1
 12162  000A30  CFDE F07D          	movff	postinc2,??_auto_mount+2
 12163  000A34  CFDE F07E          	movff	postinc2,??_auto_mount+3
 12164  000A38  EE20 F002          	lfsr	2,2
 12165  000A3C  51A5               	movf	auto_mount@fs& (0+255),w,b
 12166  000A3E  26D9               	addwf	fsr2l,f,c
 12167  000A40  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 12168  000A42  22DA               	addwfc	fsr2h,f,c
 12169  000A44  CFDE F07F          	movff	postinc2,??_auto_mount+4
 12170  000A48  CFDD F080          	movff	postdec2,??_auto_mount+5
 12171  000A4C  0E04               	movlw	4
 12172  000A4E  6F81               	movwf	(??_auto_mount+6)& (0+255),b
 12173  000A50                     u13135:
 12174  000A50  90D8               	bcf	status,0,c
 12175  000A52  3380               	rrcf	(??_auto_mount+5)& (0+255),f,b
 12176  000A54  337F               	rrcf	(??_auto_mount+4)& (0+255),f,b
 12177  000A56  2F81               	decfsz	(??_auto_mount+6)& (0+255),f,b
 12178  000A58  D7FB               	goto	u13135
 12179  000A5A  517F               	movf	(??_auto_mount+4)& (0+255),w,b
 12180  000A5C  257B               	addwf	??_auto_mount& (0+255),w,b
 12181  000A5E  6F82               	movwf	(??_auto_mount+7)& (0+255),b
 12182  000A60  5180               	movf	(??_auto_mount+5)& (0+255),w,b
 12183  000A62  217C               	addwfc	(??_auto_mount+1)& (0+255),w,b
 12184  000A64  6F83               	movwf	(??_auto_mount+8)& (0+255),b
 12185  000A66  0E00               	movlw	0
 12186  000A68  217D               	addwfc	(??_auto_mount+2)& (0+255),w,b
 12187  000A6A  6F84               	movwf	(??_auto_mount+9)& (0+255),b
 12188  000A6C  0E00               	movlw	0
 12189  000A6E  217E               	addwfc	(??_auto_mount+3)& (0+255),w,b
 12190  000A70  6F85               	movwf	(??_auto_mount+10)& (0+255),b
 12191  000A72  51A1               	movf	auto_mount@fatsize& (0+255),w,b
 12192  000A74  2582               	addwf	(??_auto_mount+7)& (0+255),w,b
 12193  000A76  6F86               	movwf	(??_auto_mount+11)& (0+255),b
 12194  000A78  51A2               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 12195  000A7A  2183               	addwfc	(??_auto_mount+8)& (0+255),w,b
 12196  000A7C  6F87               	movwf	(??_auto_mount+12)& (0+255),b
 12197  000A7E  51A3               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 12198  000A80  2184               	addwfc	(??_auto_mount+9)& (0+255),w,b
 12199  000A82  6F88               	movwf	(??_auto_mount+13)& (0+255),b
 12200  000A84  51A4               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 12201  000A86  2185               	addwfc	(??_auto_mount+10)& (0+255),w,b
 12202  000A88  6F89               	movwf	(??_auto_mount+14)& (0+255),b
 12203  000A8A  EE20 F010          	lfsr	2,16
 12204  000A8E  51A5               	movf	auto_mount@fs& (0+255),w,b
 12205  000A90  26D9               	addwf	fsr2l,f,c
 12206  000A92  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 12207  000A94  22DA               	addwfc	fsr2h,f,c
 12208  000A96  C086  FFDE         	movff	??_auto_mount+11,postinc2
 12209  000A9A  C087  FFDE         	movff	??_auto_mount+12,postinc2
 12210  000A9E  C088  FFDE         	movff	??_auto_mount+13,postinc2
 12211  000AA2  C089  FFDE         	movff	??_auto_mount+14,postinc2
 12212                           
 12213                           ;tff.c: 738: fs->free_clust = (CLUST)0xFFFFFFFF;
 12214  000AA6  EE20 F01A          	lfsr	2,26
 12215  000AAA  51A5               	movf	auto_mount@fs& (0+255),w,b
 12216  000AAC  26D9               	addwf	fsr2l,f,c
 12217  000AAE  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 12218  000AB0  22DA               	addwfc	fsr2h,f,c
 12219  000AB2  0EFF               	movlw	255
 12220  000AB4  6EDE               	movwf	postinc2,c
 12221  000AB6  0EFF               	movlw	255
 12222  000AB8  6EDD               	movwf	postdec2,c
 12223                           
 12224                           ;tff.c: 754: fs->fs_type = fmt;
 12225  000ABA  EE20 F01C          	lfsr	2,28
 12226  000ABE  51A5               	movf	auto_mount@fs& (0+255),w,b
 12227  000AC0  26D9               	addwf	fsr2l,f,c
 12228  000AC2  51A6               	movf	(auto_mount@fs+1)& (0+255),w,b
 12229  000AC4  22DA               	addwfc	fsr2h,f,c
 12230  000AC6  C09F  FFDF         	movff	auto_mount@fmt,indf2
 12231                           
 12232                           ; BSR set to: 0
 12233                           ;tff.c: 755: fs->id = ++fsid;
 12234  000ACA  0101               	movlb	1	; () banked
 12235  000ACC  4B1A               	infsnz	_fsid& (0+255),f,b
 12236  000ACE  2B1B               	incf	(_fsid+1)& (0+255),f,b
 12237  000AD0  C0A5  FFD9         	movff	auto_mount@fs,fsr2l
 12238  000AD4  C0A6  FFDA         	movff	auto_mount@fs+1,fsr2h
 12239  000AD8  C11A  FFDE         	movff	_fsid,postinc2
 12240  000ADC  C11B  FFDD         	movff	_fsid+1,postdec2
 12241                           
 12242                           ;tff.c: 756: return FR_OK;
 12243  000AE0  0E00               	movlw	0
 12244  000AE2  0012               	return		;funcret
 12245  000AE4                     __end_of_auto_mount:
 12246                           	callstack 0
 12247                           
 12248 ;; *************** function _memset *****************
 12249 ;; Defined at:
 12250 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\memset.c"
 12251 ;; Parameters:    Size  Location     Type
 12252 ;;  p1              2   24[COMRAM] PTR void 
 12253 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 12254 ;;  c               2   26[COMRAM] int 
 12255 ;;  n               2   28[COMRAM] unsigned int 
 12256 ;; Auto vars:     Size  Location     Type
 12257 ;;  p               2   30[COMRAM] PTR unsigned char 
 12258 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 12259 ;; Return value:  Size  Location     Type
 12260 ;;                  2   24[COMRAM] PTR void 
 12261 ;; Registers used:
 12262 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12263 ;; Tracked objects:
 12264 ;;		On entry : 0/0
 12265 ;;		On exit  : 0/0
 12266 ;;		Unchanged: 0/0
 12267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12268 ;;      Params:         6       0       0       0       0       0       0       0       0
 12269 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12270 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12271 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12272 ;;Total ram usage:        8 bytes
 12273 ;; Hardware stack levels used:    1
 12274 ;; Hardware stack levels required when called:    3
 12275 ;; This function calls:
 12276 ;;		Nothing
 12277 ;; This function is called by:
 12278 ;;		_make_dirfile
 12279 ;;		_reserve_direntry
 12280 ;;		_auto_mount
 12281 ;;		_f_open
 12282 ;; This function uses a non-reentrant model
 12283 ;;
 12284                           
 12285                           	psect	text56
 12286  00512E                     __ptext56:
 12287                           	callstack 0
 12288  00512E                     _memset:
 12289                           	callstack 21
 12290                           
 12291                           ;incstack = 0
 12292  00512E  C019  F01F         	movff	memset@p1,memset@p
 12293  005132  C01A  F020         	movff	memset@p1+1,memset@p+1
 12294  005136  D008               	goto	l6848
 12295  005138                     l6844:
 12296  005138  C01F  FFD9         	movff	memset@p,fsr2l
 12297  00513C  C020  FFDA         	movff	memset@p+1,fsr2h
 12298  005140  C01B  FFDF         	movff	memset@c,indf2
 12299  005144  4A1F               	infsnz	memset@p^0,f,c
 12300  005146  2A20               	incf	(memset@p+1)^0,f,c
 12301  005148                     l6848:
 12302  005148  061D               	decf	memset@n^0,f,c
 12303  00514A  A0D8               	btfss	status,0,c
 12304  00514C  061E               	decf	(memset@n+1)^0,f,c
 12305  00514E  281D               	incf	memset@n^0,w,c
 12306  005150  E1F3               	bnz	l6844
 12307  005152  281E               	incf	(memset@n+1)^0,w,c
 12308  005154  B4D8               	btfsc	status,2,c
 12309  005156  0012               	return	
 12310  005158  D7EF               	goto	l6844
 12311  00515A                     __end_of_memset:
 12312                           	callstack 0
 12313                           
 12314 ;; *************** function _disk_initialize *****************
 12315 ;; Defined at:
 12316 ;;		line 59 in file "bibliotecas/diskio.c"
 12317 ;; Parameters:    Size  Location     Type
 12318 ;;  pdrv            1    wreg     unsigned char 
 12319 ;; Auto vars:     Size  Location     Type
 12320 ;;  pdrv            1   44[COMRAM] unsigned char 
 12321 ;;  result          2    0        int 
 12322 ;;  stat            1   45[COMRAM] unsigned char 
 12323 ;; Return value:  Size  Location     Type
 12324 ;;                  1    wreg      unsigned char 
 12325 ;; Registers used:
 12326 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12327 ;; Tracked objects:
 12328 ;;		On entry : 0/0
 12329 ;;		On exit  : 0/0
 12330 ;;		Unchanged: 0/0
 12331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12332 ;;      Params:         0       0       0       0       0       0       0       0       0
 12333 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12334 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12335 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12336 ;;Total ram usage:        2 bytes
 12337 ;; Hardware stack levels used:    1
 12338 ;; Hardware stack levels required when called:    8
 12339 ;; This function calls:
 12340 ;;		_sdc_disk_initialize
 12341 ;; This function is called by:
 12342 ;;		_auto_mount
 12343 ;; This function uses a non-reentrant model
 12344 ;;
 12345                           
 12346                           	psect	text57
 12347  0051AE                     __ptext57:
 12348                           	callstack 0
 12349  0051AE                     _disk_initialize:
 12350                           	callstack 17
 12351                           
 12352                           ;incstack = 0
 12353                           ;disk_initialize@pdrv stored from wreg
 12354  0051AE  6E2D               	movwf	disk_initialize@pdrv^0,c
 12355                           
 12356                           ;diskio.c: 63: DSTATUS stat;;diskio.c: 64: int result;;diskio.c: 66: switch (pdrv) {
 12357  0051B0  D005               	goto	l10520
 12358  0051B2                     l10502:
 12359                           
 12360                           ;diskio.c: 68: stat = sdc_disk_initialize();
 12361  0051B2  ECA5  F00C         	call	_sdc_disk_initialize	;wreg free
 12362  0051B6  6E2E               	movwf	disk_initialize@stat^0,c
 12363  0051B8                     l10504:
 12364                           
 12365                           ;diskio.c: 72: return stat;
 12366  0051B8  502E               	movf	disk_initialize@stat^0,w,c
 12367  0051BA  0012               	return	
 12368  0051BC                     l10520:
 12369  0051BC  502D               	movf	disk_initialize@pdrv^0,w,c
 12370                           
 12371                           ; Switch size 1, requested type "simple"
 12372                           ; Number of cases is 3, Range of values is 0 to 2
 12373                           ; switch strategies available:
 12374                           ; Name         Instructions Cycles
 12375                           ; simple_byte           10     6 (average)
 12376                           ;	Chosen strategy is simple_byte
 12377  0051BE  0A00               	xorlw	0	; case 0
 12378  0051C0  B4D8               	btfsc	status,2,c
 12379  0051C2  D7F7               	goto	l10502
 12380  0051C4  0A01               	xorlw	1	; case 1
 12381  0051C6  B4D8               	btfsc	status,2,c
 12382  0051C8  D7F4               	goto	l10502
 12383  0051CA  0A03               	xorlw	3	; case 2
 12384  0051CC  B4D8               	btfsc	status,2,c
 12385  0051CE  D7F4               	goto	l10504
 12386                           
 12387                           ;diskio.c: 88: return 0x01;
 12388  0051D0  0E01               	movlw	1
 12389  0051D2  0012               	return		;funcret
 12390  0051D4                     __end_of_disk_initialize:
 12391                           	callstack 0
 12392                           
 12393 ;; *************** function _sdc_disk_initialize *****************
 12394 ;; Defined at:
 12395 ;;		line 275 in file "bibliotecas/diskio.c"
 12396 ;; Parameters:    Size  Location     Type
 12397 ;;		None
 12398 ;; Auto vars:     Size  Location     Type
 12399 ;;  count2          2    9[BANK0 ] int 
 12400 ;;  crc_number      2    5[BANK0 ] int 
 12401 ;;  count1          2    3[BANK0 ] int 
 12402 ;;  i               2    0        int 
 12403 ;;  buff            1   11[BANK0 ] unsigned char 
 12404 ;;  ocr             1    8[BANK0 ] unsigned char 
 12405 ;;  buff_i          1    7[BANK0 ] unsigned char 
 12406 ;;  stat            1    2[BANK0 ] unsigned char 
 12407 ;; Return value:  Size  Location     Type
 12408 ;;                  1    wreg      unsigned char 
 12409 ;; Registers used:
 12410 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12411 ;; Tracked objects:
 12412 ;;		On entry : 0/0
 12413 ;;		On exit  : 3F/0
 12414 ;;		Unchanged: 0/0
 12415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12416 ;;      Params:         0       0       0       0       0       0       0       0       0
 12417 ;;      Locals:         0      12       0       0       0       0       0       0       0
 12418 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12419 ;;      Totals:         1      12       0       0       0       0       0       0       0
 12420 ;;Total ram usage:       13 bytes
 12421 ;; Hardware stack levels used:    1
 12422 ;; Hardware stack levels required when called:    7
 12423 ;; This function calls:
 12424 ;;		_command
 12425 ;;		_dummy_clocks
 12426 ;;		_escreve_frase_ram_lcd
 12427 ;;		_posicao_cursor_lcd
 12428 ;;		_proceed
 12429 ;;		_response
 12430 ;;		_sdc_reset
 12431 ;; This function is called by:
 12432 ;;		_disk_initialize
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           
 12436                           	psect	text58
 12437  00194A                     __ptext58:
 12438                           	callstack 0
 12439  00194A                     _sdc_disk_initialize:
 12440                           	callstack 17
 12441                           
 12442                           ;incstack = 0
 12443  00194A  0E00               	movlw	0
 12444  00194C  0100               	movlb	0	; () banked
 12445  00194E  6F64               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 12446  001950  0E00               	movlw	0
 12447  001952  6F63               	movwf	sdc_disk_initialize@count1& (0+255),b
 12448  001954  0E00               	movlw	0
 12449  001956  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12450  001958  0E00               	movlw	0
 12451  00195A  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 12452                           
 12453                           ;diskio.c: 280: BYTE buff = 0;
 12454  00195C  0E00               	movlw	0
 12455  00195E  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12456                           
 12457                           ; BSR set to: 0
 12458                           ;diskio.c: 281: BYTE buff_i;;diskio.c: 282: int crc_number;;diskio.c: 283: _delay((unsig
      +                          ned long)((1)*(48000000/4000.0)));
 12459  001960  0E10               	movlw	16
 12460  001962  6E2C               	movwf	??_sdc_disk_initialize^0,c
 12461  001964  0E94               	movlw	148
 12462  001966                     u15427:
 12463  001966  2EE8               	decfsz	wreg,f,c
 12464  001968  D7FE               	bra	u15427
 12465  00196A  2E2C               	decfsz	??_sdc_disk_initialize^0,f,c
 12466  00196C  D7FC               	bra	u15427
 12467  00196E  D000               	nop2	
 12468                           
 12469                           ;diskio.c: 284: dummy_clocks(100);
 12470  001970  0E64               	movlw	100
 12471  001972  ECC8  F027         	call	_dummy_clocks
 12472                           
 12473                           ;diskio.c: 287: sdc_reset();
 12474  001976  EC5D  F022         	call	_sdc_reset	;wreg free
 12475                           
 12476                           ;diskio.c: 288: command(0X48, 0x000001AA, 0x87);
 12477  00197A  0EAA               	movlw	170
 12478  00197C  6E1E               	movwf	command@arg^0,c
 12479  00197E  0E01               	movlw	1
 12480  001980  6E1F               	movwf	(command@arg+1)^0,c
 12481  001982  0E00               	movlw	0
 12482  001984  6E20               	movwf	(command@arg+2)^0,c
 12483  001986  0E00               	movlw	0
 12484  001988  6E21               	movwf	(command@arg+3)^0,c
 12485  00198A  0E87               	movlw	135
 12486  00198C  6E22               	movwf	command@CRC^0,c
 12487  00198E  0E48               	movlw	72
 12488  001990  EC6B  F025         	call	_command
 12489                           
 12490                           ;diskio.c: 289: proceed();
 12491  001994  EC30  F02A         	call	_proceed	;wreg free
 12492  001998                     l10186:
 12493                           
 12494                           ;diskio.c: 291: buff_i = response();
 12495  001998  EC2A  F02A         	call	_response	;wreg free
 12496  00199C  0100               	movlb	0	; () banked
 12497  00199E  6F67               	movwf	sdc_disk_initialize@buff_i& (0+255),b
 12498                           
 12499                           ; BSR set to: 0
 12500                           ;diskio.c: 292: if(buff_i == 1)
 12501  0019A0  0567               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
 12502  0019A2  A4D8               	btfss	status,2,c
 12503  0019A4  D004               	goto	l10192
 12504                           
 12505                           ; BSR set to: 0
 12506                           ;diskio.c: 293: {;diskio.c: 294: crc_number = buff_i<<8;
 12507  0019A6  5167               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 12508  0019A8  6F66               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
 12509  0019AA  6B65               	clrf	sdc_disk_initialize@crc_number& (0+255),b
 12510                           
 12511                           ;diskio.c: 295: }
 12512  0019AC  D006               	goto	l10196
 12513  0019AE                     l10192:
 12514                           
 12515                           ; BSR set to: 0
 12516                           ;diskio.c: 296: else if(buff_i==0xAA)
 12517  0019AE  0EAA               	movlw	170
 12518  0019B0  1967               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
 12519  0019B2  A4D8               	btfss	status,2,c
 12520  0019B4  D002               	goto	l10196
 12521                           
 12522                           ; BSR set to: 0
 12523                           ;diskio.c: 297: {;diskio.c: 298: crc_number |= buff_i;
 12524  0019B6  5167               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 12525  0019B8  1365               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
 12526  0019BA                     l10196:
 12527                           
 12528                           ; BSR set to: 0
 12529                           ;diskio.c: 299: };diskio.c: 300: count1++;
 12530  0019BA  4B63               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
 12531  0019BC  2B64               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
 12532                           
 12533                           ; BSR set to: 0
 12534                           ;diskio.c: 301: }while(crc_number != 0x1AA && count1<1000);
 12535  0019BE  0EAA               	movlw	170
 12536  0019C0  1965               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 12537  0019C2  E103               	bnz	u11810
 12538  0019C4  0566               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 12539  0019C6  B4D8               	btfsc	status,2,c
 12540  0019C8  D008               	goto	u11820
 12541  0019CA                     u11810:
 12542                           
 12543                           ; BSR set to: 0
 12544  0019CA  BF64               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
 12545  0019CC  D7E5               	goto	l10186
 12546  0019CE  0EE8               	movlw	232
 12547  0019D0  5D63               	subwf	sdc_disk_initialize@count1& (0+255),w,b
 12548  0019D2  0E03               	movlw	3
 12549  0019D4  5964               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
 12550  0019D6  A0D8               	btfss	status,0,c
 12551  0019D8  D7DF               	goto	l10186
 12552  0019DA                     u11820:
 12553                           
 12554                           ; BSR set to: 0
 12555                           ;diskio.c: 306: if (crc_number == 0x1AA)
 12556  0019DA  0EAA               	movlw	170
 12557  0019DC  1965               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 12558  0019DE  E102               	bnz	u11831
 12559  0019E0  0566               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 12560  0019E2  A4D8               	btfss	status,2,c
 12561  0019E4                     u11831:
 12562  0019E4  D09E               	goto	l10274
 12563  0019E6                     u11830:
 12564                           
 12565                           ; BSR set to: 0
 12566                           ;diskio.c: 310: count2 = 0;
 12567                           
 12568                           ; BSR set to: 0
 12569                           ;diskio.c: 309: do{
 12570  0019E6  0E00               	movlw	0
 12571  0019E8  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12572  0019EA  0E00               	movlw	0
 12573  0019EC  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 12574  0019EE                     
 12575                           ; BSR set to: 0
 12576                           ;diskio.c: 319: dummy_clocks(10);
 12577                           
 12578                           ; BSR set to: 0
 12579  0019EE  0E0A               	movlw	10
 12580  0019F0  ECC8  F027         	call	_dummy_clocks
 12581                           
 12582                           ;diskio.c: 320: command(0X77, 0X00000000, 0X00);
 12583  0019F4  0E00               	movlw	0
 12584  0019F6  6E1E               	movwf	command@arg^0,c
 12585  0019F8  0E00               	movlw	0
 12586  0019FA  6E1F               	movwf	(command@arg+1)^0,c
 12587  0019FC  0E00               	movlw	0
 12588  0019FE  6E20               	movwf	(command@arg+2)^0,c
 12589  001A00  0E00               	movlw	0
 12590  001A02  6E21               	movwf	(command@arg+3)^0,c
 12591  001A04  0E00               	movlw	0
 12592  001A06  6E22               	movwf	command@CRC^0,c
 12593  001A08  0E77               	movlw	119
 12594  001A0A  EC6B  F025         	call	_command
 12595                           
 12596                           ;diskio.c: 323: proceed();
 12597  001A0E  EC30  F02A         	call	_proceed	;wreg free
 12598  001A12                     l10216:
 12599                           
 12600                           ;diskio.c: 325: buff = response();
 12601  001A12  EC2A  F02A         	call	_response	;wreg free
 12602  001A16  0100               	movlb	0	; () banked
 12603  001A18  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12604                           
 12605                           ; BSR set to: 0
 12606                           ;diskio.c: 326: count2++;
 12607  001A1A  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12608  001A1C  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12609                           
 12610                           ;diskio.c: 327: }while((buff!=0X01)&&(count2<10));
 12611  001A1E  056B               	decf	sdc_disk_initialize@buff& (0+255),w,b
 12612  001A20  B4D8               	btfsc	status,2,c
 12613  001A22  D008               	goto	u11850
 12614                           
 12615                           ; BSR set to: 0
 12616  001A24  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12617  001A26  D7F5               	goto	l10216
 12618  001A28  516A               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12619  001A2A  E104               	bnz	u11850
 12620  001A2C  0E0A               	movlw	10
 12621  001A2E  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12622  001A30  A0D8               	btfss	status,0,c
 12623  001A32  D7EF               	goto	l10216
 12624  001A34                     u11850:
 12625                           
 12626                           ; BSR set to: 0
 12627                           ;diskio.c: 328: count2 = 0;
 12628  001A34  0E00               	movlw	0
 12629  001A36  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12630  001A38  0E00               	movlw	0
 12631  001A3A  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 12632                           
 12633                           ; BSR set to: 0
 12634                           ;diskio.c: 332: dummy_clocks(10);
 12635  001A3C  0E0A               	movlw	10
 12636  001A3E  ECC8  F027         	call	_dummy_clocks
 12637                           
 12638                           ;diskio.c: 333: command(0X69, 0X40000000 , 0x00);
 12639  001A42  0E00               	movlw	0
 12640  001A44  6E1E               	movwf	command@arg^0,c
 12641  001A46  0E00               	movlw	0
 12642  001A48  6E1F               	movwf	(command@arg+1)^0,c
 12643  001A4A  0E00               	movlw	0
 12644  001A4C  6E20               	movwf	(command@arg+2)^0,c
 12645  001A4E  0E40               	movlw	64
 12646  001A50  6E21               	movwf	(command@arg+3)^0,c
 12647  001A52  0E00               	movlw	0
 12648  001A54  6E22               	movwf	command@CRC^0,c
 12649  001A56  0E69               	movlw	105
 12650  001A58  EC6B  F025         	call	_command
 12651                           
 12652                           ;diskio.c: 334: proceed();
 12653  001A5C  EC30  F02A         	call	_proceed	;wreg free
 12654                           
 12655                           ;diskio.c: 335: buff = response();
 12656  001A60  EC2A  F02A         	call	_response	;wreg free
 12657  001A64  0100               	movlb	0	; () banked
 12658  001A66  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12659                           
 12660                           ; BSR set to: 0
 12661                           ;diskio.c: 336: count2++;
 12662  001A68  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12663  001A6A  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12664                           
 12665                           ; BSR set to: 0
 12666                           ;diskio.c: 337: }while(buff!=0X00);
 12667  001A6C  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12668  001A6E  A4D8               	btfss	status,2,c
 12669  001A70  D7BE               	goto	l10206
 12670                           
 12671                           ; BSR set to: 0
 12672                           ;diskio.c: 342: dummy_clocks(10);
 12673                           
 12674                           ; BSR set to: 0
 12675  001A72  0E0A               	movlw	10
 12676  001A74  ECC8  F027         	call	_dummy_clocks
 12677                           
 12678                           ;diskio.c: 343: command(0X7A, 0X00000000, 0XFF);
 12679  001A78  0E00               	movlw	0
 12680  001A7A  6E1E               	movwf	command@arg^0,c
 12681  001A7C  0E00               	movlw	0
 12682  001A7E  6E1F               	movwf	(command@arg+1)^0,c
 12683  001A80  0E00               	movlw	0
 12684  001A82  6E20               	movwf	(command@arg+2)^0,c
 12685  001A84  0E00               	movlw	0
 12686  001A86  6E21               	movwf	(command@arg+3)^0,c
 12687  001A88  0EFF               	movlw	255
 12688  001A8A  6E22               	movwf	command@CRC^0,c
 12689  001A8C  0E7A               	movlw	122
 12690  001A8E  EC6B  F025         	call	_command
 12691                           
 12692                           ;diskio.c: 344: proceed();
 12693  001A92  EC30  F02A         	call	_proceed	;wreg free
 12694  001A96                     l10240:
 12695                           
 12696                           ;diskio.c: 346: buff = response();
 12697  001A96  EC2A  F02A         	call	_response	;wreg free
 12698  001A9A  0100               	movlb	0	; () banked
 12699  001A9C  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12700                           
 12701                           ; BSR set to: 0
 12702                           ;diskio.c: 347: ocr = (buff << 1) & 0b10000000;
 12703  001A9E  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12704  001AA0  256B               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 12705  001AA2  0B80               	andlw	128
 12706  001AA4  6F68               	movwf	sdc_disk_initialize@ocr& (0+255),b
 12707                           
 12708                           ; BSR set to: 0
 12709                           ;diskio.c: 348: count2++;
 12710  001AA6  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12711  001AA8  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12712                           
 12713                           ; BSR set to: 0
 12714                           ;diskio.c: 349: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 12715  001AAA  5168               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 12716  001AAC  B4D8               	btfsc	status,2,c
 12717  001AAE  D00B               	goto	u11890
 12718                           
 12719                           ; BSR set to: 0
 12720  001AB0  0568               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 12721  001AB2  B4D8               	btfsc	status,2,c
 12722  001AB4  D008               	goto	u11890
 12723                           
 12724                           ; BSR set to: 0
 12725  001AB6  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12726  001AB8  D7EE               	goto	l10240
 12727  001ABA  516A               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12728  001ABC  E104               	bnz	u11890
 12729  001ABE  0E0A               	movlw	10
 12730  001AC0  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12731  001AC2  A0D8               	btfss	status,0,c
 12732  001AC4  D7E8               	goto	l10240
 12733  001AC6                     u11890:
 12734                           
 12735                           ; BSR set to: 0
 12736                           ;diskio.c: 350: }while(ocr != 0X00 && ocr !=0x01);
 12737  001AC6  5168               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 12738  001AC8  B4D8               	btfsc	status,2,c
 12739  001ACA  D003               	goto	u11910
 12740                           
 12741                           ; BSR set to: 0
 12742  001ACC  0568               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 12743  001ACE  A4D8               	btfss	status,2,c
 12744  001AD0  D78A               	goto	u11830
 12745  001AD2                     u11910:
 12746                           
 12747                           ; BSR set to: 0
 12748                           ;diskio.c: 355: _delay((unsigned long)((1)*(48000000/4000.0)));
 12749                           
 12750                           ; BSR set to: 0
 12751  001AD2  0E10               	movlw	16
 12752  001AD4  6E2C               	movwf	??_sdc_disk_initialize^0,c
 12753  001AD6  0E94               	movlw	148
 12754  001AD8                     u15437:
 12755  001AD8  2EE8               	decfsz	wreg,f,c
 12756  001ADA  D7FE               	bra	u15437
 12757  001ADC  2E2C               	decfsz	??_sdc_disk_initialize^0,f,c
 12758  001ADE  D7FC               	bra	u15437
 12759  001AE0  D000               	nop2	
 12760                           
 12761                           ;diskio.c: 356: stat = 0X00;
 12762  001AE2  0E00               	movlw	0
 12763  001AE4  0100               	movlb	0	; () banked
 12764  001AE6  6F62               	movwf	sdc_disk_initialize@stat& (0+255),b
 12765                           
 12766                           ; BSR set to: 0
 12767                           ;diskio.c: 358: if(!ocr)
 12768  001AE8  5168               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 12769  001AEA  A4D8               	btfss	status,2,c
 12770  001AEC  D0AC               	goto	u12010
 12771                           
 12772                           ; BSR set to: 0
 12773                           ;diskio.c: 359: {;diskio.c: 361: dummy_clocks(10);
 12774  001AEE  0E0A               	movlw	10
 12775  001AF0  ECC8  F027         	call	_dummy_clocks
 12776                           
 12777                           ;diskio.c: 362: command(0x50, 0x00000200,0XFF);
 12778  001AF4  0E00               	movlw	0
 12779  001AF6  6E1E               	movwf	command@arg^0,c
 12780  001AF8  0E02               	movlw	2
 12781  001AFA  6E1F               	movwf	(command@arg+1)^0,c
 12782  001AFC  0E00               	movlw	0
 12783  001AFE  6E20               	movwf	(command@arg+2)^0,c
 12784  001B00  0E00               	movlw	0
 12785  001B02  6E21               	movwf	(command@arg+3)^0,c
 12786  001B04  0EFF               	movlw	255
 12787  001B06  6E22               	movwf	command@CRC^0,c
 12788  001B08  0E50               	movlw	80
 12789  001B0A  EC6B  F025         	call	_command
 12790                           
 12791                           ;diskio.c: 363: proceed();
 12792  001B0E  EC30  F02A         	call	_proceed	;wreg free
 12793  001B12                     
 12794                           ;diskio.c: 367: buff = response();
 12795  001B12  EC2A  F02A         	call	_response	;wreg free
 12796  001B16  0100               	movlb	0	; () banked
 12797  001B18  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12798                           
 12799                           ; BSR set to: 0
 12800                           ;diskio.c: 368: }while(buff!=0X00);
 12801  001B1A  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12802  001B1C  B4D8               	btfsc	status,2,c
 12803  001B1E  D093               	goto	u12010
 12804  001B20  D7F8               	goto	l10268
 12805  001B22                     l10274:
 12806                           
 12807                           ; BSR set to: 0
 12808                           ;diskio.c: 373: else;diskio.c: 374: {;diskio.c: 376: count2 = 0;
 12809  001B22  0E00               	movlw	0
 12810  001B24  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12811  001B26  0E00               	movlw	0
 12812  001B28  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 12813                           
 12814                           ; BSR set to: 0
 12815                           ;diskio.c: 378: dummy_clocks(1);
 12816                           
 12817                           ; BSR set to: 0
 12818  001B2A  0E01               	movlw	1
 12819  001B2C  ECC8  F027         	call	_dummy_clocks
 12820                           
 12821                           ;diskio.c: 379: command(0X69, 0X00000000, 0XFF);
 12822  001B30  0E00               	movlw	0
 12823  001B32  6E1E               	movwf	command@arg^0,c
 12824  001B34  0E00               	movlw	0
 12825  001B36  6E1F               	movwf	(command@arg+1)^0,c
 12826  001B38  0E00               	movlw	0
 12827  001B3A  6E20               	movwf	(command@arg+2)^0,c
 12828  001B3C  0E00               	movlw	0
 12829  001B3E  6E21               	movwf	(command@arg+3)^0,c
 12830  001B40  0EFF               	movlw	255
 12831  001B42  6E22               	movwf	command@CRC^0,c
 12832  001B44  0E69               	movlw	105
 12833  001B46  EC6B  F025         	call	_command
 12834                           
 12835                           ;diskio.c: 380: proceed();
 12836  001B4A  EC30  F02A         	call	_proceed	;wreg free
 12837  001B4E                     l10284:
 12838                           
 12839                           ;diskio.c: 382: buff = response();
 12840  001B4E  EC2A  F02A         	call	_response	;wreg free
 12841  001B52  0100               	movlb	0	; () banked
 12842  001B54  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12843                           
 12844                           ; BSR set to: 0
 12845                           ;diskio.c: 383: count2++;
 12846  001B56  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12847  001B58  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12848                           
 12849                           ; BSR set to: 0
 12850                           ;diskio.c: 384: if(buff==0x00)
 12851  001B5A  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12852  001B5C  A4D8               	btfss	status,2,c
 12853  001B5E  D00B               	goto	l10294
 12854                           
 12855                           ; BSR set to: 0
 12856                           ;diskio.c: 385: {;diskio.c: 386: posicao_cursor_lcd(1,0);
 12857  001B60  0E00               	movlw	0
 12858  001B62  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
 12859  001B64  0E01               	movlw	1
 12860  001B66  EC3C  F025         	call	_posicao_cursor_lcd
 12861                           
 12862                           ;diskio.c: 387: escreve_frase_ram_lcd("SD VER. 1");
 12863  001B6A  0E30               	movlw	low STR_3
 12864  001B6C  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
 12865  001B6E  0E62               	movlw	high STR_3
 12866  001B70  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 12867  001B72  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
 12868  001B76                     l10294:
 12869                           
 12870                           ;diskio.c: 388: };diskio.c: 389: _delay((unsigned long)((1)*(48000000/4000.0)));
 12871  001B76  0E10               	movlw	16
 12872  001B78  6E2C               	movwf	??_sdc_disk_initialize^0,c
 12873  001B7A  0E94               	movlw	148
 12874  001B7C                     u15447:
 12875  001B7C  2EE8               	decfsz	wreg,f,c
 12876  001B7E  D7FE               	bra	u15447
 12877  001B80  2E2C               	decfsz	??_sdc_disk_initialize^0,f,c
 12878  001B82  D7FC               	bra	u15447
 12879  001B84  D000               	nop2	
 12880                           
 12881                           ;diskio.c: 390: }while(buff!=0X00 && count2<10000);
 12882  001B86  0100               	movlb	0	; () banked
 12883  001B88  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12884  001B8A  B4D8               	btfsc	status,2,c
 12885  001B8C  D008               	goto	u11960
 12886                           
 12887                           ; BSR set to: 0
 12888  001B8E  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12889  001B90  D7DE               	goto	l10284
 12890  001B92  0E10               	movlw	16
 12891  001B94  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12892  001B96  0E27               	movlw	39
 12893  001B98  596A               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12894  001B9A  A0D8               	btfss	status,0,c
 12895  001B9C  D7D8               	goto	l10284
 12896  001B9E                     u11960:
 12897                           
 12898                           ; BSR set to: 0
 12899                           ;diskio.c: 393: if(count2==10)
 12900                           
 12901                           ; BSR set to: 0
 12902  001B9E  0E0A               	movlw	10
 12903  001BA0  1969               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 12904  001BA2  116A               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12905  001BA4  A4D8               	btfss	status,2,c
 12906  001BA6  D036               	goto	u12000
 12907                           
 12908                           ; BSR set to: 0
 12909                           ;diskio.c: 394: {;diskio.c: 395: count2 = 0;
 12910  001BA8  0E00               	movlw	0
 12911  001BAA  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12912  001BAC  0E00               	movlw	0
 12913  001BAE  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;diskio.c: 396: dummy_clocks(10);
 12917  001BB0  0E0A               	movlw	10
 12918  001BB2  ECC8  F027         	call	_dummy_clocks
 12919                           
 12920                           ;diskio.c: 397: command(0X41, 0X00000000, 0XFF);
 12921  001BB6  0E00               	movlw	0
 12922  001BB8  6E1E               	movwf	command@arg^0,c
 12923  001BBA  0E00               	movlw	0
 12924  001BBC  6E1F               	movwf	(command@arg+1)^0,c
 12925  001BBE  0E00               	movlw	0
 12926  001BC0  6E20               	movwf	(command@arg+2)^0,c
 12927  001BC2  0E00               	movlw	0
 12928  001BC4  6E21               	movwf	(command@arg+3)^0,c
 12929  001BC6  0EFF               	movlw	255
 12930  001BC8  6E22               	movwf	command@CRC^0,c
 12931  001BCA  0E41               	movlw	65
 12932  001BCC  EC6B  F025         	call	_command
 12933                           
 12934                           ;diskio.c: 398: proceed();
 12935  001BD0  EC30  F02A         	call	_proceed	;wreg free
 12936  001BD4                     l10310:
 12937                           
 12938                           ;diskio.c: 400: buff = response();
 12939  001BD4  EC2A  F02A         	call	_response	;wreg free
 12940  001BD8  0100               	movlb	0	; () banked
 12941  001BDA  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12942                           
 12943                           ; BSR set to: 0
 12944                           ;diskio.c: 401: count2++;
 12945  001BDC  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12946  001BDE  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12947                           
 12948                           ; BSR set to: 0
 12949                           ;diskio.c: 402: if(buff==0x00)
 12950  001BE0  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12951  001BE2  A4D8               	btfss	status,2,c
 12952  001BE4  D00B               	goto	l10320
 12953                           
 12954                           ; BSR set to: 0
 12955                           ;diskio.c: 403: {;diskio.c: 404: posicao_cursor_lcd(1,0);
 12956  001BE6  0E00               	movlw	0
 12957  001BE8  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
 12958  001BEA  0E01               	movlw	1
 12959  001BEC  EC3C  F025         	call	_posicao_cursor_lcd
 12960                           
 12961                           ;diskio.c: 405: escreve_frase_ram_lcd("MMC Ver. 3");
 12962  001BF0  0E06               	movlw	low STR_4
 12963  001BF2  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
 12964  001BF4  0E62               	movlw	high STR_4
 12965  001BF6  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 12966  001BF8  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
 12967  001BFC                     l10320:
 12968                           
 12969                           ;diskio.c: 406: };diskio.c: 408: }while(buff!=0X00 && count2<10000);
 12970  001BFC  0100               	movlb	0	; () banked
 12971  001BFE  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12972  001C00  B4D8               	btfsc	status,2,c
 12973  001C02  D008               	goto	u12000
 12974                           
 12975                           ; BSR set to: 0
 12976  001C04  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12977  001C06  D7E6               	goto	l10310
 12978  001C08  0E10               	movlw	16
 12979  001C0A  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12980  001C0C  0E27               	movlw	39
 12981  001C0E  596A               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12982  001C10  A0D8               	btfss	status,0,c
 12983  001C12  D7E0               	goto	l10310
 12984  001C14                     u12000:
 12985                           
 12986                           ; BSR set to: 0
 12987                           ;diskio.c: 409: };diskio.c: 412: dummy_clocks(10);
 12988  001C14  0E0A               	movlw	10
 12989  001C16  ECC8  F027         	call	_dummy_clocks
 12990                           
 12991                           ;diskio.c: 413: command(0X50,0X00000200,0XFF);
 12992  001C1A  0E00               	movlw	0
 12993  001C1C  6E1E               	movwf	command@arg^0,c
 12994  001C1E  0E02               	movlw	2
 12995  001C20  6E1F               	movwf	(command@arg+1)^0,c
 12996  001C22  0E00               	movlw	0
 12997  001C24  6E20               	movwf	(command@arg+2)^0,c
 12998  001C26  0E00               	movlw	0
 12999  001C28  6E21               	movwf	(command@arg+3)^0,c
 13000  001C2A  0EFF               	movlw	255
 13001  001C2C  6E22               	movwf	command@CRC^0,c
 13002  001C2E  0E50               	movlw	80
 13003  001C30  EC6B  F025         	call	_command
 13004                           
 13005                           ;diskio.c: 414: proceed();
 13006  001C34  EC30  F02A         	call	_proceed	;wreg free
 13007  001C38                     
 13008                           ;diskio.c: 418: buff = response();
 13009  001C38  EC2A  F02A         	call	_response	;wreg free
 13010  001C3C  0100               	movlb	0	; () banked
 13011  001C3E  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 13012                           
 13013                           ; BSR set to: 0
 13014                           ;diskio.c: 419: }while(buff!=0X00);
 13015  001C40  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 13016  001C42  A4D8               	btfss	status,2,c
 13017  001C44  D7F9               	goto	l10328
 13018  001C46                     u12010:
 13019                           
 13020                           ; BSR set to: 0
 13021                           ;diskio.c: 421: };diskio.c: 425: return stat;
 13022  001C46  5162               	movf	sdc_disk_initialize@stat& (0+255),w,b
 13023                           
 13024                           ; BSR set to: 0
 13025  001C48  0012               	return		;funcret
 13026  001C4A                     __end_of_sdc_disk_initialize:
 13027                           	callstack 0
 13028                           
 13029 ;; *************** function _sdc_reset *****************
 13030 ;; Defined at:
 13031 ;;		line 238 in file "bibliotecas/diskio.c"
 13032 ;; Parameters:    Size  Location     Type
 13033 ;;		None
 13034 ;; Auto vars:     Size  Location     Type
 13035 ;;  teste          10    0        unsigned char [10]
 13036 ;;  count           2   40[COMRAM] int 
 13037 ;;  count_nosd      2   38[COMRAM] int 
 13038 ;;  i               2    0        int 
 13039 ;;  receive         2    0        unsigned int 
 13040 ;;  buff            1   42[COMRAM] unsigned char 
 13041 ;;  stat            1    0        unsigned char 
 13042 ;; Return value:  Size  Location     Type
 13043 ;;                  1    wreg      void 
 13044 ;; Registers used:
 13045 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13046 ;; Tracked objects:
 13047 ;;		On entry : 0/0
 13048 ;;		On exit  : 0/0
 13049 ;;		Unchanged: 0/0
 13050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13051 ;;      Params:         0       0       0       0       0       0       0       0       0
 13052 ;;      Locals:         7       0       0       0       0       0       0       0       0
 13053 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13054 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13055 ;;Total ram usage:        7 bytes
 13056 ;; Hardware stack levels used:    1
 13057 ;; Hardware stack levels required when called:    6
 13058 ;; This function calls:
 13059 ;;		_command
 13060 ;;		_escreve_frase_ram_lcd
 13061 ;;		_posicao_cursor_lcd
 13062 ;;		_proceed
 13063 ;;		_response
 13064 ;; This function is called by:
 13065 ;;		_sdc_disk_initialize
 13066 ;; This function uses a non-reentrant model
 13067 ;;
 13068                           
 13069                           	psect	text59
 13070  0044BA                     __ptext59:
 13071                           	callstack 0
 13072  0044BA                     _sdc_reset:
 13073                           	callstack 17
 13074                           
 13075                           ; BSR set to: 0
 13076                           ;incstack = 0
 13077  0044BA  0E00               	movlw	0
 13078  0044BC  6E2A               	movwf	(sdc_reset@count+1)^0,c
 13079  0044BE  0E00               	movlw	0
 13080  0044C0  6E29               	movwf	sdc_reset@count^0,c
 13081  0044C2  0E00               	movlw	0
 13082  0044C4  6E28               	movwf	(sdc_reset@count_nosd+1)^0,c
 13083  0044C6  0E00               	movlw	0
 13084  0044C8  6E27               	movwf	sdc_reset@count_nosd^0,c
 13085  0044CA                     l10028:
 13086                           
 13087                           ;diskio.c: 248: command(0x40, 0X00000000, 0X95);
 13088  0044CA  0E00               	movlw	0
 13089  0044CC  6E1E               	movwf	command@arg^0,c
 13090  0044CE  0E00               	movlw	0
 13091  0044D0  6E1F               	movwf	(command@arg+1)^0,c
 13092  0044D2  0E00               	movlw	0
 13093  0044D4  6E20               	movwf	(command@arg+2)^0,c
 13094  0044D6  0E00               	movlw	0
 13095  0044D8  6E21               	movwf	(command@arg+3)^0,c
 13096  0044DA  0E95               	movlw	149
 13097  0044DC  6E22               	movwf	command@CRC^0,c
 13098  0044DE  0E40               	movlw	64
 13099  0044E0  EC6B  F025         	call	_command
 13100                           
 13101                           ;diskio.c: 249: proceed();
 13102  0044E4  EC30  F02A         	call	_proceed	;wreg free
 13103  0044E8                     l10032:
 13104                           
 13105                           ;diskio.c: 251: buff = response();
 13106  0044E8  EC2A  F02A         	call	_response	;wreg free
 13107  0044EC  6E2B               	movwf	sdc_reset@buff^0,c
 13108                           
 13109                           ;diskio.c: 252: count++;
 13110  0044EE  4A29               	infsnz	sdc_reset@count^0,f,c
 13111  0044F0  2A2A               	incf	(sdc_reset@count+1)^0,f,c
 13112                           
 13113                           ;diskio.c: 253: }while(buff!=0X01 && count<10);
 13114  0044F2  042B               	decf	sdc_reset@buff^0,w,c
 13115  0044F4  B4D8               	btfsc	status,2,c
 13116  0044F6  D008               	goto	u11560
 13117  0044F8  BE2A               	btfsc	(sdc_reset@count+1)^0,7,c
 13118  0044FA  D7F6               	goto	l10032
 13119  0044FC  502A               	movf	(sdc_reset@count+1)^0,w,c
 13120  0044FE  E104               	bnz	u11560
 13121  004500  0E0A               	movlw	10
 13122  004502  5C29               	subwf	sdc_reset@count^0,w,c
 13123  004504  A0D8               	btfss	status,0,c
 13124  004506  D7F0               	goto	l10032
 13125  004508                     u11560:
 13126                           
 13127                           ;diskio.c: 254: count = 0;
 13128  004508  0E00               	movlw	0
 13129  00450A  6E2A               	movwf	(sdc_reset@count+1)^0,c
 13130  00450C  0E00               	movlw	0
 13131  00450E  6E29               	movwf	sdc_reset@count^0,c
 13132                           
 13133                           ;diskio.c: 255: if(buff != 0x01)
 13134  004510  042B               	decf	sdc_reset@buff^0,w,c
 13135  004512  B4D8               	btfsc	status,2,c
 13136  004514  D016               	goto	l10050
 13137                           
 13138                           ;diskio.c: 256: {;diskio.c: 257: posicao_cursor_lcd(1,0);
 13139  004516  0E00               	movlw	0
 13140  004518  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
 13141  00451A  0E01               	movlw	1
 13142  00451C  EC3C  F025         	call	_posicao_cursor_lcd
 13143                           
 13144                           ;diskio.c: 258: escreve_frase_ram_lcd("Sem Cartao");
 13145  004520  0E11               	movlw	low STR_1
 13146  004522  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
 13147  004524  0E62               	movlw	high STR_1
 13148  004526  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 13149  004528  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
 13150                           
 13151                           ;diskio.c: 259: posicao_cursor_lcd(2,0);
 13152  00452C  0E00               	movlw	0
 13153  00452E  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
 13154  004530  0E02               	movlw	2
 13155  004532  EC3C  F025         	call	_posicao_cursor_lcd
 13156                           
 13157                           ;diskio.c: 260: escreve_frase_ram_lcd("Insira o Cartao");
 13158  004536  0EBE               	movlw	low STR_2
 13159  004538  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
 13160  00453A  0E61               	movlw	high STR_2
 13161  00453C  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 13162  00453E  EC18  F026         	call	_escreve_frase_ram_lcd	;wreg free
 13163  004542                     l10050:
 13164                           
 13165                           ;diskio.c: 261: };diskio.c: 263: }while(buff!=0X01);
 13166  004542  042B               	decf	sdc_reset@buff^0,w,c
 13167  004544  B4D8               	btfsc	status,2,c
 13168  004546  0012               	return	
 13169  004548  D7C0               	goto	l10028
 13170  00454A                     __end_of_sdc_reset:
 13171                           	callstack 0
 13172                           
 13173 ;; *************** function _posicao_cursor_lcd *****************
 13174 ;; Defined at:
 13175 ;;		line 271 in file "bibliotecas/display_lcd.c"
 13176 ;; Parameters:    Size  Location     Type
 13177 ;;  linha           1    wreg     unsigned char 
 13178 ;;  coluna          1   27[COMRAM] unsigned char 
 13179 ;; Auto vars:     Size  Location     Type
 13180 ;;  linha           1   28[COMRAM] unsigned char 
 13181 ;;  endereco        1   29[COMRAM] unsigned char 
 13182 ;; Return value:  Size  Location     Type
 13183 ;;                  1    wreg      void 
 13184 ;; Registers used:
 13185 ;;		wreg, status,2, status,0, cstack
 13186 ;; Tracked objects:
 13187 ;;		On entry : 0/0
 13188 ;;		On exit  : 0/0
 13189 ;;		Unchanged: 0/0
 13190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13191 ;;      Params:         1       0       0       0       0       0       0       0       0
 13192 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13193 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13194 ;;      Totals:         3       0       0       0       0       0       0       0       0
 13195 ;;Total ram usage:        3 bytes
 13196 ;; Hardware stack levels used:    1
 13197 ;; Hardware stack levels required when called:    5
 13198 ;; This function calls:
 13199 ;;		_endereco_cursor_lcd
 13200 ;; This function is called by:
 13201 ;;		_sdc_reset
 13202 ;;		_sdc_disk_initialize
 13203 ;;		_mensagem_inicial
 13204 ;;		_troca_de_tela
 13205 ;; This function uses a non-reentrant model
 13206 ;;
 13207                           
 13208                           	psect	text60
 13209  004A78                     __ptext60:
 13210                           	callstack 0
 13211  004A78                     _posicao_cursor_lcd:
 13212                           	callstack 24
 13213                           
 13214                           ;incstack = 0
 13215                           ;posicao_cursor_lcd@linha stored from wreg
 13216  004A78  6E1D               	movwf	posicao_cursor_lcd@linha^0,c
 13217                           
 13218                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 13219  004A7A  0E11               	movlw	17
 13220  004A7C  601C               	cpfslt	posicao_cursor_lcd@coluna^0,c
 13221  004A7E  0012               	return	
 13222  004A80  D01B               	goto	l9892
 13223  004A82                     l232:
 13224                           
 13225                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 13226  004A82  C01C  F01E         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 13227                           
 13228                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 13229  004A86  501E               	movf	posicao_cursor_lcd@endereco^0,w,c
 13230  004A88  ECA0  F024         	call	_endereco_cursor_lcd
 13231                           
 13232                           ;display_lcd.c: 284: break;
 13233  004A8C  D022               	goto	l9894
 13234  004A8E                     l9876:
 13235                           
 13236                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 13237  004A8E  501C               	movf	posicao_cursor_lcd@coluna^0,w,c
 13238  004A90  0F40               	addlw	64
 13239  004A92  6E1E               	movwf	posicao_cursor_lcd@endereco^0,c
 13240                           
 13241                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 13242  004A94  501E               	movf	posicao_cursor_lcd@endereco^0,w,c
 13243  004A96  ECA0  F024         	call	_endereco_cursor_lcd
 13244                           
 13245                           ;display_lcd.c: 289: break;
 13246  004A9A  D01B               	goto	l9894
 13247  004A9C                     l9880:
 13248                           
 13249                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 13250  004A9C  501C               	movf	posicao_cursor_lcd@coluna^0,w,c
 13251  004A9E  0F14               	addlw	20
 13252  004AA0  6E1E               	movwf	posicao_cursor_lcd@endereco^0,c
 13253                           
 13254                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 13255  004AA2  501E               	movf	posicao_cursor_lcd@endereco^0,w,c
 13256  004AA4  ECA0  F024         	call	_endereco_cursor_lcd
 13257                           
 13258                           ;display_lcd.c: 294: break;
 13259  004AA8  D014               	goto	l9894
 13260  004AAA                     l9884:
 13261                           
 13262                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 13263  004AAA  501C               	movf	posicao_cursor_lcd@coluna^0,w,c
 13264  004AAC  0F54               	addlw	84
 13265  004AAE  6E1E               	movwf	posicao_cursor_lcd@endereco^0,c
 13266                           
 13267                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 13268  004AB0  501E               	movf	posicao_cursor_lcd@endereco^0,w,c
 13269  004AB2  ECA0  F024         	call	_endereco_cursor_lcd
 13270                           
 13271                           ;display_lcd.c: 303: break;
 13272                           
 13273                           ;display_lcd.c: 299: break;
 13274  004AB6  D00D               	goto	l9894
 13275  004AB8                     l9892:
 13276  004AB8  501D               	movf	posicao_cursor_lcd@linha^0,w,c
 13277                           
 13278                           ; Switch size 1, requested type "simple"
 13279                           ; Number of cases is 4, Range of values is 1 to 4
 13280                           ; switch strategies available:
 13281                           ; Name         Instructions Cycles
 13282                           ; simple_byte           13     7 (average)
 13283                           ;	Chosen strategy is simple_byte
 13284  004ABA  0A01               	xorlw	1	; case 1
 13285  004ABC  B4D8               	btfsc	status,2,c
 13286  004ABE  D7E1               	goto	l232
 13287  004AC0  0A03               	xorlw	3	; case 2
 13288  004AC2  B4D8               	btfsc	status,2,c
 13289  004AC4  D7E4               	goto	l9876
 13290  004AC6  0A01               	xorlw	1	; case 3
 13291  004AC8  B4D8               	btfsc	status,2,c
 13292  004ACA  D7E8               	goto	l9880
 13293  004ACC  0A07               	xorlw	7	; case 4
 13294  004ACE  B4D8               	btfsc	status,2,c
 13295  004AD0  D7EC               	goto	l9884
 13296  004AD2                     l9894:
 13297                           
 13298                           ;display_lcd.c: 306: coluna++;
 13299  004AD2  2A1C               	incf	posicao_cursor_lcd@coluna^0,f,c
 13300                           
 13301                           ;display_lcd.c: 307: }
 13302  004AD4  0012               	return	
 13303  004AD6                     __end_of_posicao_cursor_lcd:
 13304                           	callstack 0
 13305                           
 13306 ;; *************** function _endereco_cursor_lcd *****************
 13307 ;; Defined at:
 13308 ;;		line 218 in file "bibliotecas/display_lcd.c"
 13309 ;; Parameters:    Size  Location     Type
 13310 ;;  endereco        1    wreg     unsigned char 
 13311 ;; Auto vars:     Size  Location     Type
 13312 ;;  endereco        1   26[COMRAM] unsigned char 
 13313 ;; Return value:  Size  Location     Type
 13314 ;;                  1    wreg      void 
 13315 ;; Registers used:
 13316 ;;		wreg, status,2, status,0, cstack
 13317 ;; Tracked objects:
 13318 ;;		On entry : 0/0
 13319 ;;		On exit  : 0/0
 13320 ;;		Unchanged: 0/0
 13321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13322 ;;      Params:         0       0       0       0       0       0       0       0       0
 13323 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13324 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13325 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13326 ;;Total ram usage:        1 bytes
 13327 ;; Hardware stack levels used:    1
 13328 ;; Hardware stack levels required when called:    4
 13329 ;; This function calls:
 13330 ;;		_delay
 13331 ;; This function is called by:
 13332 ;;		_posicao_cursor_lcd
 13333 ;; This function uses a non-reentrant model
 13334 ;;
 13335                           
 13336                           	psect	text61
 13337  004940                     __ptext61:
 13338                           	callstack 0
 13339  004940                     _endereco_cursor_lcd:
 13340                           	callstack 24
 13341                           
 13342                           ;incstack = 0
 13343                           ;endereco_cursor_lcd@endereco stored from wreg
 13344  004940  6E1B               	movwf	endereco_cursor_lcd@endereco^0,c
 13345                           
 13346                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 13347  004942  9483               	bcf	131,2,c	;volatile
 13348                           
 13349                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 13350  004944  9283               	bcf	131,1,c	;volatile
 13351                           
 13352                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 13353  004946  9083               	bcf	131,0,c	;volatile
 13354                           
 13355                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 13356  004948  8E83               	bsf	131,7,c	;volatile
 13357                           
 13358                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 13359  00494A  A81B               	btfss	endereco_cursor_lcd@endereco^0,4,c
 13360  00494C  D002               	goto	l213
 13361  00494E  8883               	bsf	131,4,c	;volatile
 13362  004950  D001               	goto	l9730
 13363  004952                     l213:
 13364                           
 13365                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 13366  004952  9883               	bcf	131,4,c	;volatile
 13367  004954                     l9730:
 13368                           
 13369                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 13370  004954  AA1B               	btfss	endereco_cursor_lcd@endereco^0,5,c
 13371  004956  D002               	goto	l215
 13372  004958  8A83               	bsf	131,5,c	;volatile
 13373  00495A  D001               	goto	l9734
 13374  00495C                     l215:
 13375                           
 13376                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 13377  00495C  9A83               	bcf	131,5,c	;volatile
 13378  00495E                     l9734:
 13379                           
 13380                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 13381  00495E  AC1B               	btfss	endereco_cursor_lcd@endereco^0,6,c
 13382  004960  D002               	goto	l217
 13383  004962  8C83               	bsf	131,6,c	;volatile
 13384  004964  D001               	goto	l218
 13385  004966                     l217:
 13386                           
 13387                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 13388  004966  9C83               	bcf	131,6,c	;volatile
 13389  004968                     l218:
 13390                           
 13391                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 13392  004968  8083               	bsf	131,0,c	;volatile
 13393                           
 13394                           ;display_lcd.c: 236: delay();
 13395  00496A  ECA4  F029         	call	_delay	;wreg free
 13396                           
 13397                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 13398  00496E  9083               	bcf	131,0,c	;volatile
 13399                           
 13400                           ;display_lcd.c: 238: delay();
 13401  004970  ECA4  F029         	call	_delay	;wreg free
 13402                           
 13403                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 13404  004974  A01B               	btfss	endereco_cursor_lcd@endereco^0,0,c
 13405  004976  D002               	goto	l219
 13406  004978  8883               	bsf	131,4,c	;volatile
 13407  00497A  D001               	goto	l220
 13408  00497C                     l219:
 13409                           
 13410                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 13411  00497C  9883               	bcf	131,4,c	;volatile
 13412  00497E                     l220:
 13413                           
 13414                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 13415  00497E  A21B               	btfss	endereco_cursor_lcd@endereco^0,1,c
 13416  004980  D002               	goto	l221
 13417  004982  8A83               	bsf	131,5,c	;volatile
 13418  004984  D001               	goto	l222
 13419  004986                     l221:
 13420                           
 13421                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 13422  004986  9A83               	bcf	131,5,c	;volatile
 13423  004988                     l222:
 13424                           
 13425                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 13426  004988  A41B               	btfss	endereco_cursor_lcd@endereco^0,2,c
 13427  00498A  D002               	goto	l223
 13428  00498C  8C83               	bsf	131,6,c	;volatile
 13429  00498E  D001               	goto	l224
 13430  004990                     l223:
 13431                           
 13432                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 13433  004990  9C83               	bcf	131,6,c	;volatile
 13434  004992                     l224:
 13435                           
 13436                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 13437  004992  A61B               	btfss	endereco_cursor_lcd@endereco^0,3,c
 13438  004994  D002               	goto	l225
 13439  004996  8E83               	bsf	131,7,c	;volatile
 13440  004998  D001               	goto	l226
 13441  00499A                     l225:
 13442                           
 13443                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 13444  00499A  9E83               	bcf	131,7,c	;volatile
 13445  00499C                     l226:
 13446                           
 13447                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 13448  00499C  8083               	bsf	131,0,c	;volatile
 13449                           
 13450                           ;display_lcd.c: 252: delay();
 13451  00499E  ECA4  F029         	call	_delay	;wreg free
 13452                           
 13453                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 13454  0049A2  9083               	bcf	131,0,c	;volatile
 13455                           
 13456                           ;display_lcd.c: 254: delay();
 13457  0049A4  ECA4  F029         	call	_delay	;wreg free
 13458  0049A8  0012               	return		;funcret
 13459  0049AA                     __end_of_endereco_cursor_lcd:
 13460                           	callstack 0
 13461                           
 13462 ;; *************** function _escreve_frase_ram_lcd *****************
 13463 ;; Defined at:
 13464 ;;		line 445 in file "bibliotecas/display_lcd.c"
 13465 ;; Parameters:    Size  Location     Type
 13466 ;;  buffer          2   27[COMRAM] PTR unsigned char 
 13467 ;;		 -> STR_33(2), STR_32(7), STR_31(14), STR_30(8), 
 13468 ;;		 -> STR_29(17), STR_28(8), STR_27(16), STR_26(4), 
 13469 ;;		 -> STR_25(4), STR_24(5), STR_23(5), mensagem_inicial@msg_dois(17), 
 13470 ;;		 -> mensagem_inicial@msg_linha_um(17), NULL(0), STR_12(9), STR_11(10), 
 13471 ;;		 -> STR_10(10), STR_9(14), STR_8(21), STR_7(15), 
 13472 ;;		 -> rawFix(2), rawLongitude(13), rawLatitude(13), escreve_inteiro_lcd@texto(7), 
 13473 ;;		 -> STR_4(11), STR_3(10), STR_2(16), STR_1(11), 
 13474 ;; Auto vars:     Size  Location     Type
 13475 ;;		None
 13476 ;; Return value:  Size  Location     Type
 13477 ;;                  1    wreg      void 
 13478 ;; Registers used:
 13479 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13480 ;; Tracked objects:
 13481 ;;		On entry : 0/0
 13482 ;;		On exit  : 0/0
 13483 ;;		Unchanged: 0/0
 13484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13485 ;;      Params:         2       0       0       0       0       0       0       0       0
 13486 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13487 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13488 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13489 ;;Total ram usage:        2 bytes
 13490 ;; Hardware stack levels used:    1
 13491 ;; Hardware stack levels required when called:    5
 13492 ;; This function calls:
 13493 ;;		_escreve_caractere_lcd
 13494 ;; This function is called by:
 13495 ;;		_sdc_reset
 13496 ;;		_sdc_disk_initialize
 13497 ;;		_escreve_inteiro_lcd
 13498 ;;		_mensagem_inicial
 13499 ;;		_troca_de_tela
 13500 ;; This function uses a non-reentrant model
 13501 ;;
 13502                           
 13503                           	psect	text62
 13504  004C30                     __ptext62:
 13505                           	callstack 0
 13506  004C30                     _escreve_frase_ram_lcd:
 13507                           	callstack 24
 13508                           
 13509                           ;display_lcd.c: 447: while(*buffer)
 13510                           
 13511                           ;incstack = 0
 13512  004C30  D014               	goto	l9904
 13513  004C32                     l9900:
 13514                           
 13515                           ;display_lcd.c: 448: {;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 13516  004C32  C01C  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 13517  004C36  C01D  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 13518  004C3A  6AF8               	clrf	tblptru,c
 13519  004C3C  0E07               	movlw	(high __ramtop+-1)
 13520  004C3E  64F7               	cpfsgt	tblptrh,c
 13521  004C40  D003               	bra	u11337
 13522  004C42  0008               	tblrd		*
 13523  004C44  50F5               	movf	tablat,w,c
 13524  004C46  D005               	bra	u11330
 13525  004C48                     u11337:
 13526  004C48  CFF6 FFE1          	movff	tblptrl,fsr1l
 13527  004C4C  CFF7 FFE2          	movff	tblptrh,fsr1h
 13528  004C50  50E7               	movf	indf1,w,c
 13529  004C52                     u11330:
 13530  004C52  EC2F  F024         	call	_escreve_caractere_lcd
 13531                           
 13532                           ;display_lcd.c: 450: buffer++;
 13533  004C56  4A1C               	infsnz	escreve_frase_ram_lcd@buffer^0,f,c
 13534  004C58  2A1D               	incf	(escreve_frase_ram_lcd@buffer+1)^0,f,c
 13535  004C5A                     l9904:
 13536  004C5A  C01C  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 13537  004C5E  C01D  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 13538  004C62  6AF8               	clrf	tblptru,c
 13539  004C64  0E07               	movlw	(high __ramtop+-1)
 13540  004C66  64F7               	cpfsgt	tblptrh,c
 13541  004C68  D003               	bra	u11347
 13542  004C6A  0008               	tblrd		*
 13543  004C6C  50F5               	movf	tablat,w,c
 13544  004C6E  D005               	bra	u11340
 13545  004C70                     u11347:
 13546  004C70  CFF6 FFE1          	movff	tblptrl,fsr1l
 13547  004C74  CFF7 FFE2          	movff	tblptrh,fsr1h
 13548  004C78  50E7               	movf	indf1,w,c
 13549  004C7A                     u11340:
 13550  004C7A  0900               	iorlw	0
 13551  004C7C  B4D8               	btfsc	status,2,c
 13552  004C7E  0012               	return	
 13553  004C80  D7D8               	goto	l9900
 13554  004C82                     __end_of_escreve_frase_ram_lcd:
 13555                           	callstack 0
 13556                           
 13557 ;; *************** function _escreve_caractere_lcd *****************
 13558 ;; Defined at:
 13559 ;;		line 323 in file "bibliotecas/display_lcd.c"
 13560 ;; Parameters:    Size  Location     Type
 13561 ;;  data            1    wreg     unsigned char 
 13562 ;; Auto vars:     Size  Location     Type
 13563 ;;  data            1   26[COMRAM] unsigned char 
 13564 ;; Return value:  Size  Location     Type
 13565 ;;                  1    wreg      void 
 13566 ;; Registers used:
 13567 ;;		wreg, status,2, status,0, cstack
 13568 ;; Tracked objects:
 13569 ;;		On entry : 0/0
 13570 ;;		On exit  : 0/0
 13571 ;;		Unchanged: 0/0
 13572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13573 ;;      Params:         0       0       0       0       0       0       0       0       0
 13574 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13575 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13576 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13577 ;;Total ram usage:        1 bytes
 13578 ;; Hardware stack levels used:    1
 13579 ;; Hardware stack levels required when called:    4
 13580 ;; This function calls:
 13581 ;;		_delay
 13582 ;; This function is called by:
 13583 ;;		_escreve_frase_ram_lcd
 13584 ;; This function uses a non-reentrant model
 13585 ;;
 13586                           
 13587                           	psect	text63
 13588  00485E                     __ptext63:
 13589                           	callstack 0
 13590  00485E                     _escreve_caractere_lcd:
 13591                           	callstack 24
 13592                           
 13593                           ;incstack = 0
 13594                           ;escreve_caractere_lcd@data stored from wreg
 13595  00485E  6E1B               	movwf	escreve_caractere_lcd@data^0,c
 13596                           
 13597                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 13598  004860  9483               	bcf	131,2,c	;volatile
 13599                           
 13600                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 13601  004862  8283               	bsf	131,1,c	;volatile
 13602                           
 13603                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 13604  004864  9083               	bcf	131,0,c	;volatile
 13605                           
 13606                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 13607  004866  A81B               	btfss	escreve_caractere_lcd@data^0,4,c
 13608  004868  D002               	goto	l242
 13609  00486A  8883               	bsf	131,4,c	;volatile
 13610  00486C  D001               	goto	l9762
 13611  00486E                     l242:
 13612                           
 13613                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 13614  00486E  9883               	bcf	131,4,c	;volatile
 13615  004870                     l9762:
 13616                           
 13617                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 13618  004870  AA1B               	btfss	escreve_caractere_lcd@data^0,5,c
 13619  004872  D002               	goto	l244
 13620  004874  8A83               	bsf	131,5,c	;volatile
 13621  004876  D001               	goto	l9766
 13622  004878                     l244:
 13623                           
 13624                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 13625  004878  9A83               	bcf	131,5,c	;volatile
 13626  00487A                     l9766:
 13627                           
 13628                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 13629  00487A  AC1B               	btfss	escreve_caractere_lcd@data^0,6,c
 13630  00487C  D002               	goto	l246
 13631  00487E  8C83               	bsf	131,6,c	;volatile
 13632  004880  D001               	goto	l9770
 13633  004882                     l246:
 13634                           
 13635                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 13636  004882  9C83               	bcf	131,6,c	;volatile
 13637  004884                     l9770:
 13638                           
 13639                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 13640  004884  AE1B               	btfss	escreve_caractere_lcd@data^0,7,c
 13641  004886  D002               	goto	l248
 13642  004888  8E83               	bsf	131,7,c	;volatile
 13643  00488A  D001               	goto	l249
 13644  00488C                     l248:
 13645                           
 13646                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 13647  00488C  9E83               	bcf	131,7,c	;volatile
 13648  00488E                     l249:
 13649                           
 13650                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 13651  00488E  8083               	bsf	131,0,c	;volatile
 13652                           
 13653                           ;display_lcd.c: 342: delay();
 13654  004890  ECA4  F029         	call	_delay	;wreg free
 13655                           
 13656                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 13657  004894  9083               	bcf	131,0,c	;volatile
 13658                           
 13659                           ;display_lcd.c: 344: delay();
 13660  004896  ECA4  F029         	call	_delay	;wreg free
 13661                           
 13662                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 13663  00489A  A01B               	btfss	escreve_caractere_lcd@data^0,0,c
 13664  00489C  D002               	goto	l250
 13665  00489E  8883               	bsf	131,4,c	;volatile
 13666  0048A0  D001               	goto	l251
 13667  0048A2                     l250:
 13668                           
 13669                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 13670  0048A2  9883               	bcf	131,4,c	;volatile
 13671  0048A4                     l251:
 13672                           
 13673                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 13674  0048A4  A21B               	btfss	escreve_caractere_lcd@data^0,1,c
 13675  0048A6  D002               	goto	l252
 13676  0048A8  8A83               	bsf	131,5,c	;volatile
 13677  0048AA  D001               	goto	l253
 13678  0048AC                     l252:
 13679                           
 13680                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 13681  0048AC  9A83               	bcf	131,5,c	;volatile
 13682  0048AE                     l253:
 13683                           
 13684                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 13685  0048AE  A41B               	btfss	escreve_caractere_lcd@data^0,2,c
 13686  0048B0  D002               	goto	l254
 13687  0048B2  8C83               	bsf	131,6,c	;volatile
 13688  0048B4  D001               	goto	l255
 13689  0048B6                     l254:
 13690                           
 13691                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 13692  0048B6  9C83               	bcf	131,6,c	;volatile
 13693  0048B8                     l255:
 13694                           
 13695                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 13696  0048B8  A61B               	btfss	escreve_caractere_lcd@data^0,3,c
 13697  0048BA  D002               	goto	l256
 13698  0048BC  8E83               	bsf	131,7,c	;volatile
 13699  0048BE  D001               	goto	l257
 13700  0048C0                     l256:
 13701                           
 13702                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 13703  0048C0  9E83               	bcf	131,7,c	;volatile
 13704  0048C2                     l257:
 13705                           
 13706                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 13707  0048C2  8083               	bsf	131,0,c	;volatile
 13708                           
 13709                           ;display_lcd.c: 359: delay();
 13710  0048C4  ECA4  F029         	call	_delay	;wreg free
 13711                           
 13712                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 13713  0048C8  9083               	bcf	131,0,c	;volatile
 13714                           
 13715                           ;display_lcd.c: 361: delay();
 13716  0048CA  ECA4  F029         	call	_delay	;wreg free
 13717  0048CE  0012               	return		;funcret
 13718  0048D0                     __end_of_escreve_caractere_lcd:
 13719                           	callstack 0
 13720                           
 13721 ;; *************** function _delay *****************
 13722 ;; Defined at:
 13723 ;;		line 45 in file "bibliotecas/display_lcd.c"
 13724 ;; Parameters:    Size  Location     Type
 13725 ;;		None
 13726 ;; Auto vars:     Size  Location     Type
 13727 ;;  contador_int    1   25[COMRAM] unsigned char 
 13728 ;;  contador_ext    1   24[COMRAM] unsigned char 
 13729 ;; Return value:  Size  Location     Type
 13730 ;;                  1    wreg      void 
 13731 ;; Registers used:
 13732 ;;		wreg, status,2, status,0
 13733 ;; Tracked objects:
 13734 ;;		On entry : 0/0
 13735 ;;		On exit  : 0/0
 13736 ;;		Unchanged: 0/0
 13737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13738 ;;      Params:         0       0       0       0       0       0       0       0       0
 13739 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13740 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13741 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13742 ;;Total ram usage:        2 bytes
 13743 ;; Hardware stack levels used:    1
 13744 ;; Hardware stack levels required when called:    3
 13745 ;; This function calls:
 13746 ;;		Nothing
 13747 ;; This function is called by:
 13748 ;;		_init_lcd
 13749 ;;		_escreve_cmd_lcd
 13750 ;;		_endereco_cursor_lcd
 13751 ;;		_escreve_caractere_lcd
 13752 ;; This function uses a non-reentrant model
 13753 ;;
 13754                           
 13755                           	psect	text64
 13756  005348                     __ptext64:
 13757                           	callstack 0
 13758  005348                     _delay:
 13759                           	callstack 24
 13760                           
 13761                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;;display_lcd.c: 49: for(con
      +                          tador_ext = 0; contador_ext<100; contador_ext++)
 13762                           
 13763                           ;incstack = 0
 13764  005348  0E00               	movlw	0
 13765  00534A  6E19               	movwf	delay@contador_ext^0,c
 13766  00534C                     l181:
 13767                           
 13768                           ;display_lcd.c: 50: {;display_lcd.c: 51: __nop();
 13769  00534C  F000               	nop	
 13770                           
 13771                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 13772  00534E  0E00               	movlw	0
 13773  005350  6E1A               	movwf	delay@contador_int^0,c
 13774  005352                     l183:
 13775                           
 13776                           ;display_lcd.c: 53: {;display_lcd.c: 54: __nop();
 13777  005352  F000               	nop	
 13778  005354  2A1A               	incf	delay@contador_int^0,f,c
 13779  005356  0E31               	movlw	49
 13780  005358  641A               	cpfsgt	delay@contador_int^0,c
 13781  00535A  D7FB               	goto	l183
 13782  00535C  2A19               	incf	delay@contador_ext^0,f,c
 13783  00535E  0E63               	movlw	99
 13784  005360  6419               	cpfsgt	delay@contador_ext^0,c
 13785  005362  D7F4               	goto	l181
 13786  005364  0012               	return	
 13787  005366                     __end_of_delay:
 13788                           	callstack 0
 13789                           
 13790 ;; *************** function _check_fs *****************
 13791 ;; Defined at:
 13792 ;;		line 624 in file "bibliotecas/tff.c"
 13793 ;; Parameters:    Size  Location     Type
 13794 ;;  sect            4   19[BANK0 ] unsigned long 
 13795 ;; Auto vars:     Size  Location     Type
 13796 ;;  fs              2   23[BANK0 ] PTR struct _FATFS
 13797 ;;		 -> NULL(0), fs(544), 
 13798 ;; Return value:  Size  Location     Type
 13799 ;;                  1    wreg      unsigned char 
 13800 ;; Registers used:
 13801 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13802 ;; Tracked objects:
 13803 ;;		On entry : 3F/0
 13804 ;;		On exit  : 0/0
 13805 ;;		Unchanged: 0/0
 13806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13807 ;;      Params:         0       4       0       0       0       0       0       0       0
 13808 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13809 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13810 ;;      Totals:         2       6       0       0       0       0       0       0       0
 13811 ;;Total ram usage:        8 bytes
 13812 ;; Hardware stack levels used:    1
 13813 ;; Hardware stack levels required when called:    8
 13814 ;; This function calls:
 13815 ;;		_disk_read
 13816 ;;		_memcmp
 13817 ;; This function is called by:
 13818 ;;		_auto_mount
 13819 ;; This function uses a non-reentrant model
 13820 ;;
 13821                           
 13822                           	psect	text65
 13823  0046E4                     __ptext65:
 13824                           	callstack 0
 13825  0046E4                     _check_fs:
 13826                           	callstack 17
 13827                           
 13828                           ; BSR set to: 0
 13829                           ;tff.c: 628: FATFS *fs = FatFs;
 13830                           
 13831                           ;incstack = 0
 13832  0046E4  C038  F077         	movff	_FatFs,check_fs@fs
 13833  0046E8  C039  F078         	movff	_FatFs+1,check_fs@fs+1
 13834                           
 13835                           ; BSR set to: 0
 13836                           ;tff.c: 630: if (disk_read(0, fs->win, sect, 1) != RES_OK)
 13837  0046EC  0E20               	movlw	32
 13838  0046EE  2577               	addwf	check_fs@fs& (0+255),w,b
 13839  0046F0  6F68               	movwf	disk_read@buff& (0+255),b
 13840  0046F2  0E00               	movlw	0
 13841  0046F4  2178               	addwfc	(check_fs@fs+1)& (0+255),w,b
 13842  0046F6  6F69               	movwf	(disk_read@buff+1)& (0+255),b
 13843  0046F8  C073  F06A         	movff	check_fs@sect,disk_read@sector
 13844  0046FC  C074  F06B         	movff	check_fs@sect+1,disk_read@sector+1
 13845  004700  C075  F06C         	movff	check_fs@sect+2,disk_read@sector+2
 13846  004704  C076  F06D         	movff	check_fs@sect+3,disk_read@sector+3
 13847  004708  0E01               	movlw	1
 13848  00470A  6F6E               	movwf	disk_read@count& (0+255),b
 13849  00470C  0E00               	movlw	0
 13850  00470E  EC68  F024         	call	_disk_read
 13851  004712  0900               	iorlw	0
 13852  004714  B4D8               	btfsc	status,2,c
 13853  004716  D002               	goto	l10588
 13854  004718                     u12370:
 13855  004718                     l10584:
 13856                           
 13857                           ; BSR set to: 0
 13858                           ;tff.c: 631: return 2;
 13859  004718  0E02               	movlw	2
 13860  00471A  0012               	return	
 13861  00471C                     l10588:
 13862                           
 13863                           ; BSR set to: 0
 13864                           ;tff.c: 632: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 13865  00471C  EE22 F01E          	lfsr	2,542
 13866  004720  5177               	movf	check_fs@fs& (0+255),w,b
 13867  004722  26D9               	addwf	fsr2l,f,c
 13868  004724  5178               	movf	(check_fs@fs+1)& (0+255),w,b
 13869  004726  22DA               	addwfc	fsr2h,f,c
 13870  004728  0E55               	movlw	85
 13871  00472A  18DE               	xorwf	postinc2,w,c
 13872  00472C  E1F5               	bnz	l10584
 13873  00472E  0EAA               	movlw	170
 13874  004730  18DE               	xorwf	postinc2,w,c
 13875  004732  A4D8               	btfss	status,2,c
 13876  004734  D7F1               	goto	u12370
 13877                           
 13878                           ; BSR set to: 0
 13879                           ;tff.c: 635: if (!memcmp(&fs->win[54], "FAT", 3))
 13880  004736  0E56               	movlw	86
 13881  004738  2577               	addwf	check_fs@fs& (0+255),w,b
 13882  00473A  6E19               	movwf	memcmp@s1^0,c
 13883  00473C  0E00               	movlw	0
 13884  00473E  2178               	addwfc	(check_fs@fs+1)& (0+255),w,b
 13885  004740  6E1A               	movwf	(memcmp@s1+1)^0,c
 13886  004742  0E75               	movlw	low STR_21
 13887  004744  6E1B               	movwf	memcmp@s2^0,c
 13888  004746  0E62               	movlw	high STR_21
 13889  004748  6E1C               	movwf	(memcmp@s2+1)^0,c
 13890  00474A  0E00               	movlw	0
 13891  00474C  6E1E               	movwf	(memcmp@n+1)^0,c
 13892  00474E  0E03               	movlw	3
 13893  004750  6E1D               	movwf	memcmp@n^0,c
 13894  004752  EC14  F022         	call	_memcmp	;wreg free
 13895  004756  5019               	movf	?_memcmp^0,w,c
 13896  004758  101A               	iorwf	(?_memcmp+1)^0,w,c
 13897  00475A  A4D8               	btfss	status,2,c
 13898  00475C  D002               	goto	l10600
 13899                           
 13900                           ;tff.c: 636: return 0;
 13901  00475E  0E00               	movlw	0
 13902  004760  0012               	return	
 13903  004762                     l10600:
 13904                           
 13905                           ;tff.c: 641: return 1;
 13906  004762  0E01               	movlw	1
 13907  004764  0012               	return		;funcret
 13908  004766                     __end_of_check_fs:
 13909                           	callstack 0
 13910                           
 13911 ;; *************** function _memcmp *****************
 13912 ;; Defined at:
 13913 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\memcmp.c"
 13914 ;; Parameters:    Size  Location     Type
 13915 ;;  s1              2   24[COMRAM] PTR const void 
 13916 ;;		 -> fs.win(512), NULL(0), fs(544), 
 13917 ;;  s2              2   26[COMRAM] PTR const void 
 13918 ;;		 -> f_opendir@fn(12), f_open@fn(12), STR_21(4), 
 13919 ;;  n               2   28[COMRAM] unsigned int 
 13920 ;; Auto vars:     Size  Location     Type
 13921 ;;		None
 13922 ;; Return value:  Size  Location     Type
 13923 ;;                  2   24[COMRAM] int 
 13924 ;; Registers used:
 13925 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 13926 ;; Tracked objects:
 13927 ;;		On entry : 3F/0
 13928 ;;		On exit  : 0/0
 13929 ;;		Unchanged: 0/0
 13930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13931 ;;      Params:         6       0       0       0       0       0       0       0       0
 13932 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13933 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13934 ;;      Totals:         8       0       0       0       0       0       0       0       0
 13935 ;;Total ram usage:        8 bytes
 13936 ;; Hardware stack levels used:    1
 13937 ;; Hardware stack levels required when called:    3
 13938 ;; This function calls:
 13939 ;;		Nothing
 13940 ;; This function is called by:
 13941 ;;		_trace_path
 13942 ;;		_check_fs
 13943 ;; This function uses a non-reentrant model
 13944 ;;
 13945                           
 13946                           	psect	text66
 13947  004428                     __ptext66:
 13948                           	callstack 0
 13949  004428                     _memcmp:
 13950                           	callstack 22
 13951                           
 13952                           ; BSR set to: 0
 13953                           
 13954                           ;incstack = 0
 13955  004428  D03B               	goto	l10382
 13956  00442A                     l10374:
 13957  00442A  C019  FFD9         	movff	memcmp@s1,fsr2l
 13958  00442E  C01A  FFDA         	movff	memcmp@s1+1,fsr2h
 13959  004432  50DF               	movf	indf2,w,c
 13960  004434  6E1F               	movwf	??_memcmp^0,c
 13961  004436  C01B  FFF6         	movff	memcmp@s2,tblptrl
 13962  00443A  C01C  FFF7         	movff	memcmp@s2+1,tblptrh
 13963  00443E  6AF8               	clrf	tblptru,c
 13964  004440  0E07               	movlw	(high __ramtop+-1)
 13965  004442  64F7               	cpfsgt	tblptrh,c
 13966  004444  D003               	bra	u12027
 13967  004446  0008               	tblrd		*
 13968  004448  50F5               	movf	tablat,w,c
 13969  00444A  D005               	bra	u12020
 13970  00444C                     u12027:
 13971  00444C  CFF6 FFE1          	movff	tblptrl,fsr1l
 13972  004450  CFF7 FFE2          	movff	tblptrh,fsr1h
 13973  004454  50E7               	movf	indf1,w,c
 13974  004456                     u12020:
 13975  004456  181F               	xorwf	??_memcmp^0,w,c
 13976  004458  B4D8               	btfsc	status,2,c
 13977  00445A  D01E               	goto	l10380
 13978  00445C  C019  FFD9         	movff	memcmp@s1,fsr2l
 13979  004460  C01A  FFDA         	movff	memcmp@s1+1,fsr2h
 13980  004464  50DF               	movf	indf2,w,c
 13981  004466  6E1F               	movwf	??_memcmp^0,c
 13982  004468  C01B  FFF6         	movff	memcmp@s2,tblptrl
 13983  00446C  C01C  FFF7         	movff	memcmp@s2+1,tblptrh
 13984  004470  6AF8               	clrf	tblptru,c
 13985  004472  0E07               	movlw	(high __ramtop+-1)
 13986  004474  64F7               	cpfsgt	tblptrh,c
 13987  004476  D003               	bra	u12047
 13988  004478  0008               	tblrd		*
 13989  00447A  50F5               	movf	tablat,w,c
 13990  00447C  D005               	bra	u12040
 13991  00447E                     u12047:
 13992  00447E  CFF6 FFE1          	movff	tblptrl,fsr1l
 13993  004482  CFF7 FFE2          	movff	tblptrh,fsr1h
 13994  004486  50E7               	movf	indf1,w,c
 13995  004488                     u12040:
 13996  004488  6E20               	movwf	(??_memcmp+1)^0,c
 13997  00448A  5020               	movf	(??_memcmp+1)^0,w,c
 13998  00448C  5C1F               	subwf	??_memcmp^0,w,c
 13999  00448E  6E19               	movwf	?_memcmp^0,c
 14000  004490  6A1A               	clrf	(?_memcmp+1)^0,c
 14001  004492  A0D8               	btfss	status,0,c
 14002  004494  061A               	decf	(?_memcmp+1)^0,f,c
 14003  004496  0012               	return	
 14004  004498                     l10380:
 14005  004498  4A19               	infsnz	memcmp@s1^0,f,c
 14006  00449A  2A1A               	incf	(memcmp@s1+1)^0,f,c
 14007  00449C  4A1B               	infsnz	memcmp@s2^0,f,c
 14008  00449E  2A1C               	incf	(memcmp@s2+1)^0,f,c
 14009  0044A0                     l10382:
 14010  0044A0  061D               	decf	memcmp@n^0,f,c
 14011  0044A2  A0D8               	btfss	status,0,c
 14012  0044A4  061E               	decf	(memcmp@n+1)^0,f,c
 14013  0044A6  281D               	incf	memcmp@n^0,w,c
 14014  0044A8  E1C0               	bnz	l10374
 14015  0044AA  281E               	incf	(memcmp@n+1)^0,w,c
 14016  0044AC  A4D8               	btfss	status,2,c
 14017  0044AE  D7BD               	goto	l10374
 14018  0044B0  0E00               	movlw	0
 14019  0044B2  6E1A               	movwf	(?_memcmp+1)^0,c
 14020  0044B4  0E00               	movlw	0
 14021  0044B6  6E19               	movwf	?_memcmp^0,c
 14022  0044B8  0012               	return		;funcret
 14023  0044BA                     __end_of_memcmp:
 14024                           	callstack 0
 14025                           
 14026 ;; *************** function ___lmul *****************
 14027 ;; Defined at:
 14028 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\Umul32.c"
 14029 ;; Parameters:    Size  Location     Type
 14030 ;;  multiplier      4   24[COMRAM] unsigned long 
 14031 ;;  multiplicand    4   28[COMRAM] unsigned long 
 14032 ;; Auto vars:     Size  Location     Type
 14033 ;;  product         4   32[COMRAM] unsigned long 
 14034 ;; Return value:  Size  Location     Type
 14035 ;;                  4   24[COMRAM] unsigned long 
 14036 ;; Registers used:
 14037 ;;		wreg, status,2, status,0
 14038 ;; Tracked objects:
 14039 ;;		On entry : 3F/0
 14040 ;;		On exit  : 3F/0
 14041 ;;		Unchanged: 3F/0
 14042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14043 ;;      Params:         8       0       0       0       0       0       0       0       0
 14044 ;;      Locals:         4       0       0       0       0       0       0       0       0
 14045 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14046 ;;      Totals:        12       0       0       0       0       0       0       0       0
 14047 ;;Total ram usage:       12 bytes
 14048 ;; Hardware stack levels used:    1
 14049 ;; Hardware stack levels required when called:    3
 14050 ;; This function calls:
 14051 ;;		Nothing
 14052 ;; This function is called by:
 14053 ;;		_clust2sect
 14054 ;;		_auto_mount
 14055 ;; This function uses a non-reentrant model
 14056 ;;
 14057                           
 14058                           	psect	text67
 14059  004B88                     __ptext67:
 14060                           	callstack 0
 14061  004B88                     ___lmul:
 14062                           	callstack 19
 14063                           
 14064                           ; BSR set to: 0
 14065                           
 14066                           ;incstack = 0
 14067  004B88  0E00               	movlw	0
 14068  004B8A  6E21               	movwf	___lmul@product^0,c
 14069  004B8C  0E00               	movlw	0
 14070  004B8E  6E22               	movwf	(___lmul@product+1)^0,c
 14071  004B90  0E00               	movlw	0
 14072  004B92  6E23               	movwf	(___lmul@product+2)^0,c
 14073  004B94  0E00               	movlw	0
 14074  004B96  6E24               	movwf	(___lmul@product+3)^0,c
 14075  004B98                     l10018:
 14076                           
 14077                           ; BSR set to: 0
 14078  004B98  A019               	btfss	___lmul@multiplier^0,0,c
 14079  004B9A  D008               	goto	l10022
 14080                           
 14081                           ; BSR set to: 0
 14082  004B9C  501D               	movf	___lmul@multiplicand^0,w,c
 14083  004B9E  2621               	addwf	___lmul@product^0,f,c
 14084  004BA0  501E               	movf	(___lmul@multiplicand+1)^0,w,c
 14085  004BA2  2222               	addwfc	(___lmul@product+1)^0,f,c
 14086  004BA4  501F               	movf	(___lmul@multiplicand+2)^0,w,c
 14087  004BA6  2223               	addwfc	(___lmul@product+2)^0,f,c
 14088  004BA8  5020               	movf	(___lmul@multiplicand+3)^0,w,c
 14089  004BAA  2224               	addwfc	(___lmul@product+3)^0,f,c
 14090  004BAC                     l10022:
 14091                           
 14092                           ; BSR set to: 0
 14093  004BAC  90D8               	bcf	status,0,c
 14094  004BAE  361D               	rlcf	___lmul@multiplicand^0,f,c
 14095  004BB0  361E               	rlcf	(___lmul@multiplicand+1)^0,f,c
 14096  004BB2  361F               	rlcf	(___lmul@multiplicand+2)^0,f,c
 14097  004BB4  3620               	rlcf	(___lmul@multiplicand+3)^0,f,c
 14098                           
 14099                           ; BSR set to: 0
 14100  004BB6  90D8               	bcf	status,0,c
 14101  004BB8  321C               	rrcf	(___lmul@multiplier+3)^0,f,c
 14102  004BBA  321B               	rrcf	(___lmul@multiplier+2)^0,f,c
 14103  004BBC  321A               	rrcf	(___lmul@multiplier+1)^0,f,c
 14104  004BBE  3219               	rrcf	___lmul@multiplier^0,f,c
 14105  004BC0  5019               	movf	___lmul@multiplier^0,w,c
 14106  004BC2  101A               	iorwf	(___lmul@multiplier+1)^0,w,c
 14107  004BC4  101B               	iorwf	(___lmul@multiplier+2)^0,w,c
 14108  004BC6  101C               	iorwf	(___lmul@multiplier+3)^0,w,c
 14109  004BC8  A4D8               	btfss	status,2,c
 14110  004BCA  D7E6               	goto	l10018
 14111                           
 14112                           ; BSR set to: 0
 14113  004BCC  C021  F019         	movff	___lmul@product,?___lmul
 14114  004BD0  C022  F01A         	movff	___lmul@product+1,?___lmul+1
 14115  004BD4  C023  F01B         	movff	___lmul@product+2,?___lmul+2
 14116  004BD8  C024  F01C         	movff	___lmul@product+3,?___lmul+3
 14117                           
 14118                           ; BSR set to: 0
 14119  004BDC  0012               	return		;funcret
 14120  004BDE                     __end_of___lmul:
 14121                           	callstack 0
 14122                           
 14123 ;; *************** function _f_mount *****************
 14124 ;; Defined at:
 14125 ;;		line 794 in file "bibliotecas/tff.c"
 14126 ;; Parameters:    Size  Location     Type
 14127 ;;  drv             1    wreg     unsigned char 
 14128 ;;  fs              2   24[COMRAM] PTR struct _FATFS
 14129 ;;		 -> fs(544), 
 14130 ;; Auto vars:     Size  Location     Type
 14131 ;;  drv             1   26[COMRAM] unsigned char 
 14132 ;; Return value:  Size  Location     Type
 14133 ;;                  1    wreg      enum E3236
 14134 ;; Registers used:
 14135 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14136 ;; Tracked objects:
 14137 ;;		On entry : 3F/0
 14138 ;;		On exit  : 0/0
 14139 ;;		Unchanged: 0/0
 14140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14141 ;;      Params:         2       0       0       0       0       0       0       0       0
 14142 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14143 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14144 ;;      Totals:         3       0       0       0       0       0       0       0       0
 14145 ;;Total ram usage:        3 bytes
 14146 ;; Hardware stack levels used:    1
 14147 ;; Hardware stack levels required when called:    3
 14148 ;; This function calls:
 14149 ;;		Nothing
 14150 ;; This function is called by:
 14151 ;;		_escrita_sdcard
 14152 ;; This function uses a non-reentrant model
 14153 ;;
 14154                           
 14155                           	psect	text68
 14156  004D6C                     __ptext68:
 14157                           	callstack 0
 14158  004D6C                     _f_mount:
 14159                           	callstack 24
 14160                           
 14161                           ; BSR set to: 0
 14162                           ;incstack = 0
 14163                           ;f_mount@drv stored from wreg
 14164  004D6C  6E1B               	movwf	f_mount@drv^0,c
 14165                           
 14166                           ;tff.c: 799: if (drv) return FR_INVALID_DRIVE;
 14167  004D6E  501B               	movf	f_mount@drv^0,w,c
 14168  004D70  B4D8               	btfsc	status,2,c
 14169  004D72  D002               	goto	l7784
 14170  004D74  0E05               	movlw	5
 14171  004D76  0012               	return	
 14172  004D78                     l7784:
 14173                           
 14174                           ;tff.c: 801: if (FatFs) FatFs->fs_type = 0;
 14175  004D78  5038               	movf	_FatFs^0,w,c
 14176  004D7A  1039               	iorwf	(_FatFs+1)^0,w,c
 14177  004D7C  B4D8               	btfsc	status,2,c
 14178  004D7E  D008               	goto	l7788
 14179  004D80  EE20 F01C          	lfsr	2,28
 14180  004D84  5038               	movf	_FatFs^0,w,c
 14181  004D86  26D9               	addwf	fsr2l,f,c
 14182  004D88  5039               	movf	(_FatFs+1)^0,w,c
 14183  004D8A  22DA               	addwfc	fsr2h,f,c
 14184  004D8C  0E00               	movlw	0
 14185  004D8E  6EDF               	movwf	indf2,c
 14186  004D90                     l7788:
 14187                           
 14188                           ;tff.c: 803: FatFs = fs;
 14189  004D90  C019  F038         	movff	f_mount@fs,_FatFs
 14190  004D94  C01A  F039         	movff	f_mount@fs+1,_FatFs+1
 14191                           
 14192                           ;tff.c: 804: if (fs) fs->fs_type = 0;
 14193  004D98  5019               	movf	f_mount@fs^0,w,c
 14194  004D9A  101A               	iorwf	(f_mount@fs+1)^0,w,c
 14195  004D9C  B4D8               	btfsc	status,2,c
 14196  004D9E  D008               	goto	l7794
 14197  004DA0  EE20 F01C          	lfsr	2,28
 14198  004DA4  5019               	movf	f_mount@fs^0,w,c
 14199  004DA6  26D9               	addwf	fsr2l,f,c
 14200  004DA8  501A               	movf	(f_mount@fs+1)^0,w,c
 14201  004DAA  22DA               	addwfc	fsr2h,f,c
 14202  004DAC  0E00               	movlw	0
 14203  004DAE  6EDF               	movwf	indf2,c
 14204  004DB0                     l7794:
 14205                           
 14206                           ;tff.c: 806: return FR_OK;
 14207  004DB0  0E00               	movlw	0
 14208  004DB2  0012               	return		;funcret
 14209  004DB4                     __end_of_f_mount:
 14210                           	callstack 0
 14211                           
 14212 ;; *************** function _f_lseek *****************
 14213 ;; Defined at:
 14214 ;;		line 1140 in file "bibliotecas/tff.c"
 14215 ;; Parameters:    Size  Location     Type
 14216 ;;  fp              2   78[BANK0 ] PTR struct _FIL
 14217 ;;		 -> fil(28), 
 14218 ;;  ofs             4   80[BANK0 ] unsigned long 
 14219 ;; Auto vars:     Size  Location     Type
 14220 ;;  csize           4  105[BANK0 ] unsigned long 
 14221 ;;  ifptr           4  101[BANK0 ] unsigned long 
 14222 ;;  clust           2  109[BANK0 ] unsigned short 
 14223 ;;  res             1  100[BANK0 ] enum E155
 14224 ;; Return value:  Size  Location     Type
 14225 ;;                  1    wreg      enum E3236
 14226 ;; Registers used:
 14227 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14228 ;; Tracked objects:
 14229 ;;		On entry : 3F/0
 14230 ;;		On exit  : 3F/0
 14231 ;;		Unchanged: 0/0
 14232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14233 ;;      Params:         0       6       0       0       0       0       0       0       0
 14234 ;;      Locals:         0      11       0       0       0       0       0       0       0
 14235 ;;      Temps:          0      16       0       0       0       0       0       0       0
 14236 ;;      Totals:         0      33       0       0       0       0       0       0       0
 14237 ;;Total ram usage:       33 bytes
 14238 ;; Hardware stack levels used:    1
 14239 ;; Hardware stack levels required when called:   11
 14240 ;; This function calls:
 14241 ;;		___lldiv
 14242 ;;		_create_chain
 14243 ;;		_get_cluster
 14244 ;;		_validate
 14245 ;; This function is called by:
 14246 ;;		_escrita_sdcard
 14247 ;; This function uses a non-reentrant model
 14248 ;;
 14249                           
 14250                           	psect	text69
 14251  000AE4                     __ptext69:
 14252                           	callstack 0
 14253  000AE4                     _f_lseek:
 14254                           	callstack 16
 14255                           
 14256                           ; BSR set to: 0
 14257                           ;tff.c: 1145: FRESULT res;;tff.c: 1146: CLUST clust;;tff.c: 1147: DWORD csize, ifptr;;tf
      +                          f.c: 1150: res = validate(fp->fs, fp->id);
 14258                           
 14259                           ;incstack = 0
 14260  000AE4  EE20 F004          	lfsr	2,4
 14261  000AE8  51AE               	movf	f_lseek@fp& (0+255),w,b
 14262  000AEA  26D9               	addwf	fsr2l,f,c
 14263  000AEC  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14264  000AEE  22DA               	addwfc	fsr2h,f,c
 14265  000AF0  CFDE F01F          	movff	postinc2,validate@fs
 14266  000AF4  CFDD F020          	movff	postdec2,validate@fs+1
 14267  000AF8  C0AE  FFD9         	movff	f_lseek@fp,fsr2l
 14268  000AFC  C0AF  FFDA         	movff	f_lseek@fp+1,fsr2h
 14269  000B00  CFDE F021          	movff	postinc2,validate@id
 14270  000B04  CFDD F022          	movff	postdec2,validate@id+1
 14271  000B08  ECDA  F026         	call	_validate	;wreg free
 14272  000B0C  0100               	movlb	0	; () banked
 14273  000B0E  6FC4               	movwf	f_lseek@res& (0+255),b
 14274                           
 14275                           ; BSR set to: 0
 14276                           ;tff.c: 1151: if (res != FR_OK) return res;
 14277  000B10  51C4               	movf	f_lseek@res& (0+255),w,b
 14278  000B12  A4D8               	btfss	status,2,c
 14279  000B14  0012               	return	
 14280                           
 14281                           ; BSR set to: 0
 14282                           ;tff.c: 1152: if (fp->flag & 0x80) return FR_RW_ERROR;
 14283  000B16  EE20 F002          	lfsr	2,2
 14284  000B1A  51AE               	movf	f_lseek@fp& (0+255),w,b
 14285  000B1C  26D9               	addwf	fsr2l,f,c
 14286  000B1E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14287  000B20  22DA               	addwfc	fsr2h,f,c
 14288  000B22  BEDF               	btfsc	indf2,7,c
 14289  000B24  0012               	return	
 14290                           
 14291                           ; BSR set to: 0
 14292                           ;tff.c: 1153: if (ofs > fp->fsize;tff.c: 1155: && !(fp->flag & 0x02);tff.c: 1157: ) ofs 
      +                          = fp->fsize;
 14293  000B26  EE20 F00A          	lfsr	2,10
 14294  000B2A  51AE               	movf	f_lseek@fp& (0+255),w,b
 14295  000B2C  26D9               	addwf	fsr2l,f,c
 14296  000B2E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14297  000B30  22DA               	addwfc	fsr2h,f,c
 14298  000B32  51B0               	movf	f_lseek@ofs& (0+255),w,b
 14299  000B34  5CDE               	subwf	postinc2,w,c
 14300  000B36  51B1               	movf	(f_lseek@ofs+1)& (0+255),w,b
 14301  000B38  58DE               	subwfb	postinc2,w,c
 14302  000B3A  51B2               	movf	(f_lseek@ofs+2)& (0+255),w,b
 14303  000B3C  58DE               	subwfb	postinc2,w,c
 14304  000B3E  51B3               	movf	(f_lseek@ofs+3)& (0+255),w,b
 14305  000B40  58DE               	subwfb	postinc2,w,c
 14306  000B42  B0D8               	btfsc	status,0,c
 14307  000B44  D016               	goto	l1044
 14308                           
 14309                           ; BSR set to: 0
 14310  000B46  EE20 F002          	lfsr	2,2
 14311  000B4A  51AE               	movf	f_lseek@fp& (0+255),w,b
 14312  000B4C  26D9               	addwf	fsr2l,f,c
 14313  000B4E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14314  000B50  22DA               	addwfc	fsr2h,f,c
 14315  000B52  B2DF               	btfsc	indf2,1,c
 14316  000B54  D00E               	goto	l1044
 14317                           
 14318                           ; BSR set to: 0
 14319  000B56  EE20 F00A          	lfsr	2,10
 14320  000B5A  51AE               	movf	f_lseek@fp& (0+255),w,b
 14321  000B5C  26D9               	addwf	fsr2l,f,c
 14322  000B5E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14323  000B60  22DA               	addwfc	fsr2h,f,c
 14324  000B62  CFDE F0B0          	movff	postinc2,f_lseek@ofs
 14325  000B66  CFDE F0B1          	movff	postinc2,f_lseek@ofs+1
 14326  000B6A  CFDE F0B2          	movff	postinc2,f_lseek@ofs+2
 14327  000B6E  CFDE F0B3          	movff	postinc2,f_lseek@ofs+3
 14328  000B72                     l1044:
 14329                           
 14330                           ; BSR set to: 0
 14331                           ;tff.c: 1159: ifptr = fp->fptr;
 14332  000B72  EE20 F006          	lfsr	2,6
 14333  000B76  51AE               	movf	f_lseek@fp& (0+255),w,b
 14334  000B78  26D9               	addwf	fsr2l,f,c
 14335  000B7A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14336  000B7C  22DA               	addwfc	fsr2h,f,c
 14337  000B7E  CFDE F0C5          	movff	postinc2,f_lseek@ifptr
 14338  000B82  CFDE F0C6          	movff	postinc2,f_lseek@ifptr+1
 14339  000B86  CFDE F0C7          	movff	postinc2,f_lseek@ifptr+2
 14340  000B8A  CFDE F0C8          	movff	postinc2,f_lseek@ifptr+3
 14341                           
 14342                           ;tff.c: 1160: fp->fptr = 0; fp->csect = 255;
 14343  000B8E  EE20 F006          	lfsr	2,6
 14344  000B92  51AE               	movf	f_lseek@fp& (0+255),w,b
 14345  000B94  26D9               	addwf	fsr2l,f,c
 14346  000B96  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14347  000B98  22DA               	addwfc	fsr2h,f,c
 14348  000B9A  6ADE               	clrf	postinc2,c
 14349  000B9C  6ADE               	clrf	postinc2,c
 14350  000B9E  6ADE               	clrf	postinc2,c
 14351  000BA0  6ADD               	clrf	postdec2,c
 14352  000BA2  EE20 F003          	lfsr	2,3
 14353  000BA6  51AE               	movf	f_lseek@fp& (0+255),w,b
 14354  000BA8  26D9               	addwf	fsr2l,f,c
 14355  000BAA  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14356  000BAC  22DA               	addwfc	fsr2h,f,c
 14357  000BAE  0EFF               	movlw	255
 14358  000BB0  6EDF               	movwf	indf2,c
 14359                           
 14360                           ; BSR set to: 0
 14361                           ;tff.c: 1161: if (ofs > 0) {
 14362  000BB2  51B0               	movf	f_lseek@ofs& (0+255),w,b
 14363  000BB4  11B1               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 14364  000BB6  11B2               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 14365  000BB8  11B3               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 14366  000BBA  B4D8               	btfsc	status,2,c
 14367  000BBC  D19C               	goto	l11342
 14368                           
 14369                           ; BSR set to: 0
 14370                           ;tff.c: 1162: csize = (DWORD)fp->fs->csize * 512U;
 14371  000BBE  EE20 F004          	lfsr	2,4
 14372  000BC2  51AE               	movf	f_lseek@fp& (0+255),w,b
 14373  000BC4  26D9               	addwf	fsr2l,f,c
 14374  000BC6  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14375  000BC8  22DA               	addwfc	fsr2h,f,c
 14376  000BCA  EE10 F01D          	lfsr	1,29
 14377  000BCE  50DE               	movf	postinc2,w,c
 14378  000BD0  26E1               	addwf	fsr1l,f,c
 14379  000BD2  50DD               	movf	postdec2,w,c
 14380  000BD4  22E2               	addwfc	fsr1h,f,c
 14381  000BD6  50E7               	movf	indf1,w,c
 14382  000BD8  6FB4               	movwf	??_f_lseek& (0+255),b
 14383  000BDA  C0B4  F0B5         	movff	??_f_lseek,??_f_lseek+1
 14384  000BDE  6BB6               	clrf	(??_f_lseek+2)& (0+255),b
 14385  000BE0  6BB7               	clrf	(??_f_lseek+3)& (0+255),b
 14386  000BE2  6BB8               	clrf	(??_f_lseek+4)& (0+255),b
 14387  000BE4  0E09               	movlw	9
 14388  000BE6                     u13605:
 14389  000BE6  90D8               	bcf	status,0,c
 14390  000BE8  37B5               	rlcf	(??_f_lseek+1)& (0+255),f,b
 14391  000BEA  37B6               	rlcf	(??_f_lseek+2)& (0+255),f,b
 14392  000BEC  37B7               	rlcf	(??_f_lseek+3)& (0+255),f,b
 14393  000BEE  37B8               	rlcf	(??_f_lseek+4)& (0+255),f,b
 14394  000BF0  2EE8               	decfsz	wreg,f,c
 14395  000BF2  D7F9               	goto	u13605
 14396  000BF4  C0B5  F0C9         	movff	??_f_lseek+1,f_lseek@csize
 14397  000BF8  C0B6  F0CA         	movff	??_f_lseek+2,f_lseek@csize+1
 14398  000BFC  C0B7  F0CB         	movff	??_f_lseek+3,f_lseek@csize+2
 14399  000C00  C0B8  F0CC         	movff	??_f_lseek+4,f_lseek@csize+3
 14400                           
 14401                           ; BSR set to: 0
 14402                           ;tff.c: 1163: if (ifptr > 0 &&;tff.c: 1164: (ofs - 1) / csize >= (ifptr - 1) / csize) {
 14403  000C04  51C5               	movf	f_lseek@ifptr& (0+255),w,b
 14404  000C06  11C6               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 14405  000C08  11C7               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 14406  000C0A  11C8               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 14407  000C0C  B4D8               	btfsc	status,2,c
 14408  000C0E  D093               	goto	l11300
 14409                           
 14410                           ; BSR set to: 0
 14411  000C10  0EFF               	movlw	255
 14412  000C12  25B0               	addwf	f_lseek@ofs& (0+255),w,b
 14413  000C14  6E19               	movwf	___lldiv@dividend^0,c
 14414  000C16  0EFF               	movlw	255
 14415  000C18  21B1               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 14416  000C1A  6E1A               	movwf	(___lldiv@dividend+1)^0,c
 14417  000C1C  0EFF               	movlw	255
 14418  000C1E  21B2               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 14419  000C20  6E1B               	movwf	(___lldiv@dividend+2)^0,c
 14420  000C22  0EFF               	movlw	255
 14421  000C24  21B3               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 14422  000C26  6E1C               	movwf	(___lldiv@dividend+3)^0,c
 14423  000C28  C0C9  F01D         	movff	f_lseek@csize,___lldiv@divisor
 14424  000C2C  C0CA  F01E         	movff	f_lseek@csize+1,___lldiv@divisor+1
 14425  000C30  C0CB  F01F         	movff	f_lseek@csize+2,___lldiv@divisor+2
 14426  000C34  C0CC  F020         	movff	f_lseek@csize+3,___lldiv@divisor+3
 14427  000C38  ECB3  F023         	call	___lldiv	;wreg free
 14428  000C3C  C019  F0B4         	movff	?___lldiv,??_f_lseek
 14429  000C40  C01A  F0B5         	movff	?___lldiv+1,??_f_lseek+1
 14430  000C44  C01B  F0B6         	movff	?___lldiv+2,??_f_lseek+2
 14431  000C48  C01C  F0B7         	movff	?___lldiv+3,??_f_lseek+3
 14432  000C4C  0EFF               	movlw	255
 14433  000C4E  0100               	movlb	0	; () banked
 14434  000C50  25C5               	addwf	f_lseek@ifptr& (0+255),w,b
 14435  000C52  6E19               	movwf	___lldiv@dividend^0,c
 14436  000C54  0EFF               	movlw	255
 14437  000C56  21C6               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 14438  000C58  6E1A               	movwf	(___lldiv@dividend+1)^0,c
 14439  000C5A  0EFF               	movlw	255
 14440  000C5C  21C7               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 14441  000C5E  6E1B               	movwf	(___lldiv@dividend+2)^0,c
 14442  000C60  0EFF               	movlw	255
 14443  000C62  21C8               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 14444  000C64  6E1C               	movwf	(___lldiv@dividend+3)^0,c
 14445  000C66  C0C9  F01D         	movff	f_lseek@csize,___lldiv@divisor
 14446  000C6A  C0CA  F01E         	movff	f_lseek@csize+1,___lldiv@divisor+1
 14447  000C6E  C0CB  F01F         	movff	f_lseek@csize+2,___lldiv@divisor+2
 14448  000C72  C0CC  F020         	movff	f_lseek@csize+3,___lldiv@divisor+3
 14449  000C76  ECB3  F023         	call	___lldiv	;wreg free
 14450  000C7A  5019               	movf	?___lldiv^0,w,c
 14451  000C7C  0100               	movlb	0	; () banked
 14452  000C7E  5DB4               	subwf	??_f_lseek& (0+255),w,b
 14453  000C80  501A               	movf	(?___lldiv+1)^0,w,c
 14454  000C82  59B5               	subwfb	(??_f_lseek+1)& (0+255),w,b
 14455  000C84  501B               	movf	(?___lldiv+2)^0,w,c
 14456  000C86  59B6               	subwfb	(??_f_lseek+2)& (0+255),w,b
 14457  000C88  501C               	movf	(?___lldiv+3)^0,w,c
 14458  000C8A  59B7               	subwfb	(??_f_lseek+3)& (0+255),w,b
 14459  000C8C  A0D8               	btfss	status,0,c
 14460  000C8E  D053               	goto	l11300
 14461                           
 14462                           ; BSR set to: 0
 14463                           ;tff.c: 1165: fp->fptr = (ifptr - 1) & ~(csize - 1);
 14464  000C90  0EFF               	movlw	255
 14465  000C92  25C9               	addwf	f_lseek@csize& (0+255),w,b
 14466  000C94  6FB4               	movwf	??_f_lseek& (0+255),b
 14467  000C96  0EFF               	movlw	255
 14468  000C98  21CA               	addwfc	(f_lseek@csize+1)& (0+255),w,b
 14469  000C9A  6FB5               	movwf	(??_f_lseek+1)& (0+255),b
 14470  000C9C  0EFF               	movlw	255
 14471  000C9E  21CB               	addwfc	(f_lseek@csize+2)& (0+255),w,b
 14472  000CA0  6FB6               	movwf	(??_f_lseek+2)& (0+255),b
 14473  000CA2  0EFF               	movlw	255
 14474  000CA4  21CC               	addwfc	(f_lseek@csize+3)& (0+255),w,b
 14475  000CA6  6FB7               	movwf	(??_f_lseek+3)& (0+255),b
 14476  000CA8  1DB4               	comf	??_f_lseek& (0+255),w,b
 14477  000CAA  6FB8               	movwf	(??_f_lseek+4)& (0+255),b
 14478  000CAC  1DB5               	comf	(??_f_lseek+1)& (0+255),w,b
 14479  000CAE  6FB9               	movwf	(??_f_lseek+5)& (0+255),b
 14480  000CB0  1DB6               	comf	(??_f_lseek+2)& (0+255),w,b
 14481  000CB2  6FBA               	movwf	(??_f_lseek+6)& (0+255),b
 14482  000CB4  1DB7               	comf	(??_f_lseek+3)& (0+255),w,b
 14483  000CB6  6FBB               	movwf	(??_f_lseek+7)& (0+255),b
 14484  000CB8  0EFF               	movlw	255
 14485  000CBA  25C5               	addwf	f_lseek@ifptr& (0+255),w,b
 14486  000CBC  6FBC               	movwf	(??_f_lseek+8)& (0+255),b
 14487  000CBE  0EFF               	movlw	255
 14488  000CC0  21C6               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 14489  000CC2  6FBD               	movwf	(??_f_lseek+9)& (0+255),b
 14490  000CC4  0EFF               	movlw	255
 14491  000CC6  21C7               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 14492  000CC8  6FBE               	movwf	(??_f_lseek+10)& (0+255),b
 14493  000CCA  0EFF               	movlw	255
 14494  000CCC  21C8               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 14495  000CCE  6FBF               	movwf	(??_f_lseek+11)& (0+255),b
 14496  000CD0  51B8               	movf	(??_f_lseek+4)& (0+255),w,b
 14497  000CD2  15BC               	andwf	(??_f_lseek+8)& (0+255),w,b
 14498  000CD4  6FC0               	movwf	(??_f_lseek+12)& (0+255),b
 14499  000CD6  51B9               	movf	(??_f_lseek+5)& (0+255),w,b
 14500  000CD8  15BD               	andwf	(??_f_lseek+9)& (0+255),w,b
 14501  000CDA  6FC1               	movwf	(??_f_lseek+13)& (0+255),b
 14502  000CDC  51BA               	movf	(??_f_lseek+6)& (0+255),w,b
 14503  000CDE  15BE               	andwf	(??_f_lseek+10)& (0+255),w,b
 14504  000CE0  6FC2               	movwf	(??_f_lseek+14)& (0+255),b
 14505  000CE2  51BB               	movf	(??_f_lseek+7)& (0+255),w,b
 14506  000CE4  15BF               	andwf	(??_f_lseek+11)& (0+255),w,b
 14507  000CE6  6FC3               	movwf	(??_f_lseek+15)& (0+255),b
 14508  000CE8  EE20 F006          	lfsr	2,6
 14509  000CEC  51AE               	movf	f_lseek@fp& (0+255),w,b
 14510  000CEE  26D9               	addwf	fsr2l,f,c
 14511  000CF0  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14512  000CF2  22DA               	addwfc	fsr2h,f,c
 14513  000CF4  C0C0  FFDE         	movff	??_f_lseek+12,postinc2
 14514  000CF8  C0C1  FFDE         	movff	??_f_lseek+13,postinc2
 14515  000CFC  C0C2  FFDE         	movff	??_f_lseek+14,postinc2
 14516  000D00  C0C3  FFDE         	movff	??_f_lseek+15,postinc2
 14517                           
 14518                           ;tff.c: 1166: ofs -= fp->fptr;
 14519  000D04  EE20 F006          	lfsr	2,6
 14520  000D08  51AE               	movf	f_lseek@fp& (0+255),w,b
 14521  000D0A  26D9               	addwf	fsr2l,f,c
 14522  000D0C  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14523  000D0E  22DA               	addwfc	fsr2h,f,c
 14524  000D10  50DE               	movf	postinc2,w,c
 14525  000D12  5FB0               	subwf	f_lseek@ofs& (0+255),f,b
 14526  000D14  50DE               	movf	postinc2,w,c
 14527  000D16  5BB1               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 14528  000D18  50DE               	movf	postinc2,w,c
 14529  000D1A  5BB2               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 14530  000D1C  50DD               	movf	postdec2,w,c
 14531  000D1E  5BB3               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 14532                           
 14533                           ;tff.c: 1167: clust = fp->curr_clust;
 14534  000D20  EE20 F010          	lfsr	2,16
 14535  000D24  51AE               	movf	f_lseek@fp& (0+255),w,b
 14536  000D26  26D9               	addwf	fsr2l,f,c
 14537  000D28  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14538  000D2A  22DA               	addwfc	fsr2h,f,c
 14539  000D2C  CFDE F0CD          	movff	postinc2,f_lseek@clust
 14540  000D30  CFDD F0CE          	movff	postdec2,f_lseek@clust+1
 14541                           
 14542                           ;tff.c: 1168: } else {
 14543  000D34  D030               	goto	l11312
 14544  000D36                     l11300:
 14545                           
 14546                           ; BSR set to: 0
 14547                           ;tff.c: 1169: clust = fp->org_clust;
 14548  000D36  EE20 F00E          	lfsr	2,14
 14549  000D3A  51AE               	movf	f_lseek@fp& (0+255),w,b
 14550  000D3C  26D9               	addwf	fsr2l,f,c
 14551  000D3E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14552  000D40  22DA               	addwfc	fsr2h,f,c
 14553  000D42  CFDE F0CD          	movff	postinc2,f_lseek@clust
 14554  000D46  CFDD F0CE          	movff	postdec2,f_lseek@clust+1
 14555                           
 14556                           ; BSR set to: 0
 14557                           ;tff.c: 1171: if (clust == 0) {
 14558  000D4A  51CD               	movf	f_lseek@clust& (0+255),w,b
 14559  000D4C  11CE               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14560  000D4E  A4D8               	btfss	status,2,c
 14561  000D50  D018               	goto	l1048
 14562                           
 14563                           ; BSR set to: 0
 14564                           ;tff.c: 1172: clust = create_chain(0);
 14565  000D52  0E00               	movlw	0
 14566  000D54  6FA1               	movwf	(create_chain@clust+1)& (0+255),b
 14567  000D56  0E00               	movlw	0
 14568  000D58  6FA0               	movwf	create_chain@clust& (0+255),b
 14569  000D5A  ECDD  F017         	call	_create_chain	;wreg free
 14570  000D5E  C0A0  F0CD         	movff	?_create_chain,f_lseek@clust
 14571  000D62  C0A1  F0CE         	movff	?_create_chain+1,f_lseek@clust+1
 14572                           
 14573                           ; BSR set to: 0
 14574                           ;tff.c: 1173: if (clust == 1) goto fk_error;
 14575  000D66  05CD               	decf	f_lseek@clust& (0+255),w,b
 14576  000D68  11CE               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14577  000D6A  B4D8               	btfsc	status,2,c
 14578  000D6C  D0F7               	goto	l11350
 14579                           
 14580                           ; BSR set to: 0
 14581                           ;tff.c: 1174: fp->org_clust = clust;
 14582  000D6E  EE20 F00E          	lfsr	2,14
 14583  000D72  51AE               	movf	f_lseek@fp& (0+255),w,b
 14584  000D74  26D9               	addwf	fsr2l,f,c
 14585  000D76  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14586  000D78  22DA               	addwfc	fsr2h,f,c
 14587  000D7A  C0CD  FFDE         	movff	f_lseek@clust,postinc2
 14588  000D7E  C0CE  FFDD         	movff	f_lseek@clust+1,postdec2
 14589  000D82                     l1048:
 14590                           
 14591                           ; BSR set to: 0
 14592                           ;tff.c: 1175: };tff.c: 1177: fp->curr_clust = clust;
 14593  000D82  EE20 F010          	lfsr	2,16
 14594  000D86  51AE               	movf	f_lseek@fp& (0+255),w,b
 14595  000D88  26D9               	addwf	fsr2l,f,c
 14596  000D8A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14597  000D8C  22DA               	addwfc	fsr2h,f,c
 14598  000D8E  C0CD  FFDE         	movff	f_lseek@clust,postinc2
 14599  000D92  C0CE  FFDD         	movff	f_lseek@clust+1,postdec2
 14600  000D96                     l11312:
 14601                           
 14602                           ; BSR set to: 0
 14603                           ;tff.c: 1178: };tff.c: 1179: if (clust != 0) {
 14604  000D96  51CD               	movf	f_lseek@clust& (0+255),w,b
 14605  000D98  11CE               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14606  000D9A  A4D8               	btfss	status,2,c
 14607  000D9C  D062               	goto	l11334
 14608  000D9E  D0AB               	goto	l11342
 14609  000DA0                     l11316:
 14610                           
 14611                           ; BSR set to: 0
 14612                           ;tff.c: 1182: if (fp->flag & 0x02) {
 14613  000DA0  EE20 F002          	lfsr	2,2
 14614  000DA4  51AE               	movf	f_lseek@fp& (0+255),w,b
 14615  000DA6  26D9               	addwf	fsr2l,f,c
 14616  000DA8  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14617  000DAA  22DA               	addwfc	fsr2h,f,c
 14618  000DAC  A2DF               	btfss	indf2,1,c
 14619  000DAE  D017               	goto	l11324
 14620                           
 14621                           ; BSR set to: 0
 14622                           ;tff.c: 1183: clust = create_chain(clust);
 14623  000DB0  C0CD  F0A0         	movff	f_lseek@clust,create_chain@clust
 14624  000DB4  C0CE  F0A1         	movff	f_lseek@clust+1,create_chain@clust+1
 14625  000DB8  ECDD  F017         	call	_create_chain	;wreg free
 14626  000DBC  C0A0  F0CD         	movff	?_create_chain,f_lseek@clust
 14627  000DC0  C0A1  F0CE         	movff	?_create_chain+1,f_lseek@clust+1
 14628                           
 14629                           ; BSR set to: 0
 14630                           ;tff.c: 1184: if (clust == 0) {
 14631  000DC4  51CD               	movf	f_lseek@clust& (0+255),w,b
 14632  000DC6  11CE               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14633  000DC8  A4D8               	btfss	status,2,c
 14634  000DCA  D013               	goto	l11326
 14635                           
 14636                           ; BSR set to: 0
 14637                           ;tff.c: 1185: ofs = csize; break;
 14638  000DCC  C0C9  F0B0         	movff	f_lseek@csize,f_lseek@ofs
 14639  000DD0  C0CA  F0B1         	movff	f_lseek@csize+1,f_lseek@ofs+1
 14640  000DD4  C0CB  F0B2         	movff	f_lseek@csize+2,f_lseek@ofs+2
 14641  000DD8  C0CC  F0B3         	movff	f_lseek@csize+3,f_lseek@ofs+3
 14642  000DDC  D04C               	goto	u13700
 14643  000DDE                     l11324:
 14644                           
 14645                           ; BSR set to: 0
 14646                           ;tff.c: 1189: clust = get_cluster(clust);
 14647  000DDE  C0CD  F031         	movff	f_lseek@clust,get_cluster@clust
 14648  000DE2  C0CE  F032         	movff	f_lseek@clust+1,get_cluster@clust+1
 14649  000DE6  EC45  F014         	call	_get_cluster	;wreg free
 14650  000DEA  C031  F0CD         	movff	?_get_cluster,f_lseek@clust
 14651  000DEE  C032  F0CE         	movff	?_get_cluster+1,f_lseek@clust+1
 14652  000DF2                     l11326:
 14653                           
 14654                           ; BSR set to: 0
 14655                           ;tff.c: 1190: if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
 14656  000DF2  51CE               	movf	(f_lseek@clust+1)& (0+255),w,b
 14657  000DF4  E104               	bnz	u13680
 14658  000DF6  0E02               	movlw	2
 14659  000DF8  5DCD               	subwf	f_lseek@clust& (0+255),w,b
 14660  000DFA  A0D8               	btfss	status,0,c
 14661  000DFC  D0AF               	goto	l11350
 14662  000DFE                     u13680:
 14663                           
 14664                           ; BSR set to: 0
 14665  000DFE  EE20 F004          	lfsr	2,4
 14666  000E02  51AE               	movf	f_lseek@fp& (0+255),w,b
 14667  000E04  26D9               	addwf	fsr2l,f,c
 14668  000E06  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14669  000E08  22DA               	addwfc	fsr2h,f,c
 14670  000E0A  EE10 F016          	lfsr	1,22
 14671  000E0E  50DE               	movf	postinc2,w,c
 14672  000E10  26E1               	addwf	fsr1l,f,c
 14673  000E12  50DD               	movf	postdec2,w,c
 14674  000E14  22E2               	addwfc	fsr1h,f,c
 14675  000E16  50E6               	movf	postinc1,w,c
 14676  000E18  5DCD               	subwf	f_lseek@clust& (0+255),w,b
 14677  000E1A  50E6               	movf	postinc1,w,c
 14678  000E1C  59CE               	subwfb	(f_lseek@clust+1)& (0+255),w,b
 14679  000E1E  B0D8               	btfsc	status,0,c
 14680  000E20  D09D               	goto	l11350
 14681                           
 14682                           ; BSR set to: 0
 14683                           ;tff.c: 1191: fp->curr_clust = clust;
 14684  000E22  EE20 F010          	lfsr	2,16
 14685  000E26  51AE               	movf	f_lseek@fp& (0+255),w,b
 14686  000E28  26D9               	addwf	fsr2l,f,c
 14687  000E2A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14688  000E2C  22DA               	addwfc	fsr2h,f,c
 14689  000E2E  C0CD  FFDE         	movff	f_lseek@clust,postinc2
 14690  000E32  C0CE  FFDD         	movff	f_lseek@clust+1,postdec2
 14691                           
 14692                           ;tff.c: 1192: fp->fptr += csize;
 14693  000E36  EE20 F006          	lfsr	2,6
 14694  000E3A  51AE               	movf	f_lseek@fp& (0+255),w,b
 14695  000E3C  26D9               	addwf	fsr2l,f,c
 14696  000E3E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14697  000E40  22DA               	addwfc	fsr2h,f,c
 14698  000E42  51C9               	movf	f_lseek@csize& (0+255),w,b
 14699  000E44  26DE               	addwf	postinc2,f,c
 14700  000E46  51CA               	movf	(f_lseek@csize+1)& (0+255),w,b
 14701  000E48  22DE               	addwfc	postinc2,f,c
 14702  000E4A  51CB               	movf	(f_lseek@csize+2)& (0+255),w,b
 14703  000E4C  22DE               	addwfc	postinc2,f,c
 14704  000E4E  51CC               	movf	(f_lseek@csize+3)& (0+255),w,b
 14705  000E50  22DE               	addwfc	postinc2,f,c
 14706                           
 14707                           ; BSR set to: 0
 14708                           ;tff.c: 1193: ofs -= csize;
 14709  000E52  51C9               	movf	f_lseek@csize& (0+255),w,b
 14710  000E54  5FB0               	subwf	f_lseek@ofs& (0+255),f,b
 14711  000E56  51CA               	movf	(f_lseek@csize+1)& (0+255),w,b
 14712  000E58  5BB1               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 14713  000E5A  51CB               	movf	(f_lseek@csize+2)& (0+255),w,b
 14714  000E5C  5BB2               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 14715  000E5E  51CC               	movf	(f_lseek@csize+3)& (0+255),w,b
 14716  000E60  5BB3               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 14717  000E62                     l11334:
 14718                           
 14719                           ; BSR set to: 0
 14720  000E62  51B0               	movf	f_lseek@ofs& (0+255),w,b
 14721  000E64  5DC9               	subwf	f_lseek@csize& (0+255),w,b
 14722  000E66  51B1               	movf	(f_lseek@ofs+1)& (0+255),w,b
 14723  000E68  59CA               	subwfb	(f_lseek@csize+1)& (0+255),w,b
 14724  000E6A  51B2               	movf	(f_lseek@ofs+2)& (0+255),w,b
 14725  000E6C  59CB               	subwfb	(f_lseek@csize+2)& (0+255),w,b
 14726  000E6E  51B3               	movf	(f_lseek@ofs+3)& (0+255),w,b
 14727  000E70  59CC               	subwfb	(f_lseek@csize+3)& (0+255),w,b
 14728  000E72  A0D8               	btfss	status,0,c
 14729  000E74  D795               	goto	l11316
 14730  000E76                     u13700:
 14731                           
 14732                           ; BSR set to: 0
 14733                           ;tff.c: 1194: };tff.c: 1195: fp->fptr += ofs;
 14734  000E76  EE20 F006          	lfsr	2,6
 14735  000E7A  51AE               	movf	f_lseek@fp& (0+255),w,b
 14736  000E7C  26D9               	addwf	fsr2l,f,c
 14737  000E7E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14738  000E80  22DA               	addwfc	fsr2h,f,c
 14739  000E82  51B0               	movf	f_lseek@ofs& (0+255),w,b
 14740  000E84  26DE               	addwf	postinc2,f,c
 14741  000E86  51B1               	movf	(f_lseek@ofs+1)& (0+255),w,b
 14742  000E88  22DE               	addwfc	postinc2,f,c
 14743  000E8A  51B2               	movf	(f_lseek@ofs+2)& (0+255),w,b
 14744  000E8C  22DE               	addwfc	postinc2,f,c
 14745  000E8E  51B3               	movf	(f_lseek@ofs+3)& (0+255),w,b
 14746  000E90  22DE               	addwfc	postinc2,f,c
 14747                           
 14748                           ;tff.c: 1196: fp->csect = (BYTE)(ofs / 512U);
 14749  000E92  EE20 F003          	lfsr	2,3
 14750  000E96  51AE               	movf	f_lseek@fp& (0+255),w,b
 14751  000E98  26D9               	addwf	fsr2l,f,c
 14752  000E9A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14753  000E9C  22DA               	addwfc	fsr2h,f,c
 14754  000E9E  C0B0  F0B4         	movff	f_lseek@ofs,??_f_lseek
 14755  000EA2  C0B1  F0B5         	movff	f_lseek@ofs+1,??_f_lseek+1
 14756  000EA6  C0B2  F0B6         	movff	f_lseek@ofs+2,??_f_lseek+2
 14757  000EAA  C0B3  F0B7         	movff	f_lseek@ofs+3,??_f_lseek+3
 14758  000EAE  0E0A               	movlw	10
 14759  000EB0  D005               	goto	u13710
 14760  000EB2                     u13715:
 14761  000EB2  90D8               	bcf	status,0,c
 14762  000EB4  33B7               	rrcf	(??_f_lseek+3)& (0+255),f,b
 14763  000EB6  33B6               	rrcf	(??_f_lseek+2)& (0+255),f,b
 14764  000EB8  33B5               	rrcf	(??_f_lseek+1)& (0+255),f,b
 14765  000EBA  33B4               	rrcf	??_f_lseek& (0+255),f,b
 14766  000EBC                     u13710:
 14767  000EBC  2EE8               	decfsz	wreg,f,c
 14768  000EBE  D7F9               	goto	u13715
 14769  000EC0  51B4               	movf	??_f_lseek& (0+255),w,b
 14770  000EC2  6EDF               	movwf	indf2,c
 14771                           
 14772                           ; BSR set to: 0
 14773                           ;tff.c: 1197: if (ofs % 512U) fp->csect++;
 14774  000EC4  0EFF               	movlw	255
 14775  000EC6  15B0               	andwf	f_lseek@ofs& (0+255),w,b
 14776  000EC8  6FB4               	movwf	??_f_lseek& (0+255),b
 14777  000ECA  0E01               	movlw	1
 14778  000ECC  15B1               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 14779  000ECE  6FB5               	movwf	(??_f_lseek+1)& (0+255),b
 14780  000ED0  0E00               	movlw	0
 14781  000ED2  15B2               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 14782  000ED4  6FB6               	movwf	(??_f_lseek+2)& (0+255),b
 14783  000ED6  0E00               	movlw	0
 14784  000ED8  15B3               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 14785  000EDA  6FB7               	movwf	(??_f_lseek+3)& (0+255),b
 14786  000EDC  51B4               	movf	??_f_lseek& (0+255),w,b
 14787  000EDE  11B5               	iorwf	(??_f_lseek+1)& (0+255),w,b
 14788  000EE0  11B6               	iorwf	(??_f_lseek+2)& (0+255),w,b
 14789  000EE2  11B7               	iorwf	(??_f_lseek+3)& (0+255),w,b
 14790  000EE4  B4D8               	btfsc	status,2,c
 14791  000EE6  D007               	goto	l11342
 14792                           
 14793                           ; BSR set to: 0
 14794  000EE8  EE20 F003          	lfsr	2,3
 14795  000EEC  51AE               	movf	f_lseek@fp& (0+255),w,b
 14796  000EEE  26D9               	addwf	fsr2l,f,c
 14797  000EF0  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14798  000EF2  22DA               	addwfc	fsr2h,f,c
 14799  000EF4  2ADF               	incf	indf2,f,c
 14800  000EF6                     l11342:
 14801                           
 14802                           ; BSR set to: 0
 14803                           ;tff.c: 1198: };tff.c: 1199: };tff.c: 1202: if (fp->fptr > fp->fsize) {
 14804  000EF6  EE20 F006          	lfsr	2,6
 14805  000EFA  51AE               	movf	f_lseek@fp& (0+255),w,b
 14806  000EFC  26D9               	addwf	fsr2l,f,c
 14807  000EFE  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14808  000F00  22DA               	addwfc	fsr2h,f,c
 14809  000F02  EE10 F00A          	lfsr	1,10
 14810  000F06  51AE               	movf	f_lseek@fp& (0+255),w,b
 14811  000F08  26E1               	addwf	fsr1l,f,c
 14812  000F0A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14813  000F0C  22E2               	addwfc	fsr1h,f,c
 14814  000F0E  50DE               	movf	postinc2,w,c
 14815  000F10  5CE6               	subwf	postinc1,w,c
 14816  000F12  50DE               	movf	postinc2,w,c
 14817  000F14  58E6               	subwfb	postinc1,w,c
 14818  000F16  50DE               	movf	postinc2,w,c
 14819  000F18  58E6               	subwfb	postinc1,w,c
 14820  000F1A  50DE               	movf	postinc2,w,c
 14821  000F1C  58E6               	subwfb	postinc1,w,c
 14822  000F1E  B0D8               	btfsc	status,0,c
 14823  000F20  0012               	return	
 14824                           
 14825                           ; BSR set to: 0
 14826                           ;tff.c: 1203: fp->fsize = fp->fptr;
 14827  000F22  EE20 F006          	lfsr	2,6
 14828  000F26  51AE               	movf	f_lseek@fp& (0+255),w,b
 14829  000F28  26D9               	addwf	fsr2l,f,c
 14830  000F2A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14831  000F2C  22DA               	addwfc	fsr2h,f,c
 14832  000F2E  EE10 F00A          	lfsr	1,10
 14833  000F32  51AE               	movf	f_lseek@fp& (0+255),w,b
 14834  000F34  26E1               	addwf	fsr1l,f,c
 14835  000F36  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14836  000F38  22E2               	addwfc	fsr1h,f,c
 14837  000F3A  CFDE FFE6          	movff	postinc2,postinc1
 14838  000F3E  CFDE FFE6          	movff	postinc2,postinc1
 14839  000F42  CFDE FFE6          	movff	postinc2,postinc1
 14840  000F46  CFDE FFE6          	movff	postinc2,postinc1
 14841                           
 14842                           ; BSR set to: 0
 14843                           ;tff.c: 1204: fp->flag |= 0x20;
 14844  000F4A  EE20 F002          	lfsr	2,2
 14845  000F4E  51AE               	movf	f_lseek@fp& (0+255),w,b
 14846  000F50  26D9               	addwf	fsr2l,f,c
 14847  000F52  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14848  000F54  22DA               	addwfc	fsr2h,f,c
 14849  000F56  0E00               	movlw	0
 14850  000F58  8ADB               	bsf	plusw2,5,c
 14851  000F5A  0012               	return	
 14852  000F5C                     l11350:
 14853                           
 14854                           ; BSR set to: 0
 14855                           ;tff.c: 1211: fp->flag |= 0x80;
 14856  000F5C  EE20 F002          	lfsr	2,2
 14857  000F60  51AE               	movf	f_lseek@fp& (0+255),w,b
 14858  000F62  26D9               	addwf	fsr2l,f,c
 14859  000F64  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14860  000F66  22DA               	addwfc	fsr2h,f,c
 14861  000F68  0E00               	movlw	0
 14862  000F6A  8EDB               	bsf	plusw2,7,c
 14863                           
 14864                           ; BSR set to: 0
 14865  000F6C  0012               	return		;funcret
 14866  000F6E                     __end_of_f_lseek:
 14867                           	callstack 0
 14868                           
 14869 ;; *************** function _create_chain *****************
 14870 ;; Defined at:
 14871 ;;		line 283 in file "bibliotecas/tff.c"
 14872 ;; Parameters:    Size  Location     Type
 14873 ;;  clust           2   64[BANK0 ] unsigned short 
 14874 ;; Auto vars:     Size  Location     Type
 14875 ;;  ncl             2   76[BANK0 ] unsigned short 
 14876 ;;  scl             2   74[BANK0 ] unsigned short 
 14877 ;;  cstat           2   72[BANK0 ] unsigned short 
 14878 ;;  fs              2   70[BANK0 ] PTR struct _FATFS
 14879 ;;		 -> NULL(0), fs(544), 
 14880 ;;  mcl             2   68[BANK0 ] unsigned short 
 14881 ;; Return value:  Size  Location     Type
 14882 ;;                  2   64[BANK0 ] unsigned short 
 14883 ;; Registers used:
 14884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14885 ;; Tracked objects:
 14886 ;;		On entry : 3F/0
 14887 ;;		On exit  : 3F/0
 14888 ;;		Unchanged: 0/0
 14889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14890 ;;      Params:         0       2       0       0       0       0       0       0       0
 14891 ;;      Locals:         0      10       0       0       0       0       0       0       0
 14892 ;;      Temps:          0       2       0       0       0       0       0       0       0
 14893 ;;      Totals:         0      14       0       0       0       0       0       0       0
 14894 ;;Total ram usage:       14 bytes
 14895 ;; Hardware stack levels used:    1
 14896 ;; Hardware stack levels required when called:   10
 14897 ;; This function calls:
 14898 ;;		_get_cluster
 14899 ;;		_put_cluster
 14900 ;; This function is called by:
 14901 ;;		_reserve_direntry
 14902 ;;		_f_write
 14903 ;;		_f_lseek
 14904 ;; This function uses a non-reentrant model
 14905 ;;
 14906                           
 14907                           	psect	text70
 14908  002FBA                     __ptext70:
 14909                           	callstack 0
 14910  002FBA                     _create_chain:
 14911                           	callstack 13
 14912                           
 14913                           ; BSR set to: 0
 14914                           ;tff.c: 287: CLUST cstat, ncl, scl, mcl;;tff.c: 288: FATFS *fs = FatFs;
 14915                           
 14916                           ; BSR set to: 0
 14917                           ;incstack = 0
 14918  002FBA  C038  F0A6         	movff	_FatFs,create_chain@fs
 14919  002FBE  C039  F0A7         	movff	_FatFs+1,create_chain@fs+1
 14920                           
 14921                           ; BSR set to: 0
 14922                           ;tff.c: 291: mcl = fs->max_clust;
 14923  002FC2  EE20 F016          	lfsr	2,22
 14924  002FC6  51A6               	movf	create_chain@fs& (0+255),w,b
 14925  002FC8  26D9               	addwf	fsr2l,f,c
 14926  002FCA  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 14927  002FCC  22DA               	addwfc	fsr2h,f,c
 14928  002FCE  CFDE F0A4          	movff	postinc2,create_chain@mcl
 14929  002FD2  CFDD F0A5          	movff	postdec2,create_chain@mcl+1
 14930                           
 14931                           ; BSR set to: 0
 14932                           ;tff.c: 292: if (clust == 0) {
 14933  002FD6  51A0               	movf	create_chain@clust& (0+255),w,b
 14934  002FD8  11A1               	iorwf	(create_chain@clust+1)& (0+255),w,b
 14935  002FDA  A4D8               	btfss	status,2,c
 14936  002FDC  D01B               	goto	l10066
 14937                           
 14938                           ; BSR set to: 0
 14939                           ;tff.c: 293: scl = fs->last_clust;
 14940  002FDE  EE20 F018          	lfsr	2,24
 14941  002FE2  51A6               	movf	create_chain@fs& (0+255),w,b
 14942  002FE4  26D9               	addwf	fsr2l,f,c
 14943  002FE6  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 14944  002FE8  22DA               	addwfc	fsr2h,f,c
 14945  002FEA  CFDE F0AA          	movff	postinc2,create_chain@scl
 14946  002FEE  CFDD F0AB          	movff	postdec2,create_chain@scl+1
 14947                           
 14948                           ; BSR set to: 0
 14949                           ;tff.c: 294: if (scl < 2 || scl >= mcl) scl = 1;
 14950  002FF2  51AB               	movf	(create_chain@scl+1)& (0+255),w,b
 14951  002FF4  E104               	bnz	u11600
 14952  002FF6  0E02               	movlw	2
 14953  002FF8  5DAA               	subwf	create_chain@scl& (0+255),w,b
 14954  002FFA  A0D8               	btfss	status,0,c
 14955  002FFC  D006               	goto	u11610
 14956  002FFE                     u11600:
 14957                           
 14958                           ; BSR set to: 0
 14959  002FFE  51A4               	movf	create_chain@mcl& (0+255),w,b
 14960  003000  5DAA               	subwf	create_chain@scl& (0+255),w,b
 14961  003002  51A5               	movf	(create_chain@mcl+1)& (0+255),w,b
 14962  003004  59AB               	subwfb	(create_chain@scl+1)& (0+255),w,b
 14963  003006  A0D8               	btfss	status,0,c
 14964  003008  D029               	goto	l769
 14965  00300A                     u11610:
 14966                           
 14967                           ; BSR set to: 0
 14968  00300A  0E00               	movlw	0
 14969  00300C  6FAB               	movwf	(create_chain@scl+1)& (0+255),b
 14970  00300E  0E01               	movlw	1
 14971  003010  6FAA               	movwf	create_chain@scl& (0+255),b
 14972  003012  D024               	goto	l769
 14973  003014                     l10066:
 14974                           
 14975                           ; BSR set to: 0
 14976                           ;tff.c: 296: else {;tff.c: 297: cstat = get_cluster(clust);
 14977  003014  C0A0  F031         	movff	create_chain@clust,get_cluster@clust
 14978  003018  C0A1  F032         	movff	create_chain@clust+1,get_cluster@clust+1
 14979  00301C  EC45  F014         	call	_get_cluster	;wreg free
 14980  003020  C031  F0A8         	movff	?_get_cluster,create_chain@cstat
 14981  003024  C032  F0A9         	movff	?_get_cluster+1,create_chain@cstat+1
 14982                           
 14983                           ; BSR set to: 0
 14984                           ;tff.c: 298: if (cstat < 2) return 1;
 14985  003028  51A9               	movf	(create_chain@cstat+1)& (0+255),w,b
 14986  00302A  E109               	bnz	l10074
 14987  00302C  0E02               	movlw	2
 14988  00302E  5DA8               	subwf	create_chain@cstat& (0+255),w,b
 14989  003030  B0D8               	btfsc	status,0,c
 14990  003032  D005               	goto	l10074
 14991  003034                     u11620:
 14992                           
 14993                           ; BSR set to: 0
 14994  003034  0E00               	movlw	0
 14995  003036  6FA1               	movwf	(?_create_chain+1)& (0+255),b
 14996  003038  0E01               	movlw	1
 14997  00303A  6FA0               	movwf	?_create_chain& (0+255),b
 14998  00303C  0012               	return	
 14999  00303E                     l10074:
 15000                           
 15001                           ; BSR set to: 0
 15002                           ;tff.c: 299: if (cstat < mcl) return cstat;
 15003  00303E  51A4               	movf	create_chain@mcl& (0+255),w,b
 15004  003040  5DA8               	subwf	create_chain@cstat& (0+255),w,b
 15005  003042  51A5               	movf	(create_chain@mcl+1)& (0+255),w,b
 15006  003044  59A9               	subwfb	(create_chain@cstat+1)& (0+255),w,b
 15007  003046  B0D8               	btfsc	status,0,c
 15008  003048  D005               	goto	l772
 15009                           
 15010                           ; BSR set to: 0
 15011  00304A  C0A8  F0A0         	movff	create_chain@cstat,?_create_chain
 15012  00304E  C0A9  F0A1         	movff	create_chain@cstat+1,?_create_chain+1
 15013  003052  0012               	return	
 15014  003054                     l772:
 15015                           
 15016                           ; BSR set to: 0
 15017                           ;tff.c: 300: scl = clust;
 15018  003054  C0A0  F0AA         	movff	create_chain@clust,create_chain@scl
 15019  003058  C0A1  F0AB         	movff	create_chain@clust+1,create_chain@scl+1
 15020  00305C                     l769:
 15021                           
 15022                           ; BSR set to: 0
 15023                           ;tff.c: 301: };tff.c: 303: ncl = scl;
 15024  00305C  C0AA  F0AC         	movff	create_chain@scl,create_chain@ncl
 15025  003060  C0AB  F0AD         	movff	create_chain@scl+1,create_chain@ncl+1
 15026  003064                     l10078:
 15027                           
 15028                           ; BSR set to: 0
 15029                           ;tff.c: 305: ncl++;
 15030  003064  4BAC               	infsnz	create_chain@ncl& (0+255),f,b
 15031  003066  2BAD               	incf	(create_chain@ncl+1)& (0+255),f,b
 15032                           
 15033                           ; BSR set to: 0
 15034                           ;tff.c: 306: if (ncl >= mcl) {
 15035  003068  51A4               	movf	create_chain@mcl& (0+255),w,b
 15036  00306A  5DAC               	subwf	create_chain@ncl& (0+255),w,b
 15037  00306C  51A5               	movf	(create_chain@mcl+1)& (0+255),w,b
 15038  00306E  59AD               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 15039  003070  A0D8               	btfss	status,0,c
 15040  003072  D00F               	goto	l10090
 15041                           
 15042                           ; BSR set to: 0
 15043                           ;tff.c: 307: ncl = 2;
 15044  003074  0E00               	movlw	0
 15045  003076  6FAD               	movwf	(create_chain@ncl+1)& (0+255),b
 15046  003078  0E02               	movlw	2
 15047  00307A  6FAC               	movwf	create_chain@ncl& (0+255),b
 15048                           
 15049                           ; BSR set to: 0
 15050                           ;tff.c: 308: if (ncl > scl) return 0;
 15051  00307C  51AB               	movf	(create_chain@scl+1)& (0+255),w,b
 15052  00307E  E109               	bnz	l10090
 15053  003080  0E02               	movlw	2
 15054  003082  5DAA               	subwf	create_chain@scl& (0+255),w,b
 15055  003084  B0D8               	btfsc	status,0,c
 15056  003086  D005               	goto	l10090
 15057  003088                     u11650:
 15058                           
 15059                           ; BSR set to: 0
 15060  003088  0E00               	movlw	0
 15061  00308A  6FA1               	movwf	(?_create_chain+1)& (0+255),b
 15062  00308C  0E00               	movlw	0
 15063  00308E  6FA0               	movwf	?_create_chain& (0+255),b
 15064  003090  0012               	return	
 15065  003092                     l10090:
 15066                           
 15067                           ; BSR set to: 0
 15068                           ;tff.c: 309: };tff.c: 310: cstat = get_cluster(ncl);
 15069  003092  C0AC  F031         	movff	create_chain@ncl,get_cluster@clust
 15070  003096  C0AD  F032         	movff	create_chain@ncl+1,get_cluster@clust+1
 15071  00309A  EC45  F014         	call	_get_cluster	;wreg free
 15072  00309E  C031  F0A8         	movff	?_get_cluster,create_chain@cstat
 15073  0030A2  C032  F0A9         	movff	?_get_cluster+1,create_chain@cstat+1
 15074                           
 15075                           ; BSR set to: 0
 15076                           ;tff.c: 311: if (cstat == 0) break;
 15077  0030A6  51A8               	movf	create_chain@cstat& (0+255),w,b
 15078  0030A8  11A9               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 15079  0030AA  B4D8               	btfsc	status,2,c
 15080  0030AC  D00C               	goto	l10108
 15081                           
 15082                           ; BSR set to: 0
 15083                           ;tff.c: 312: if (cstat == 1) return 1;
 15084  0030AE  05A8               	decf	create_chain@cstat& (0+255),w,b
 15085  0030B0  11A9               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 15086  0030B2  B4D8               	btfsc	status,2,c
 15087  0030B4  D7BF               	goto	u11620
 15088                           
 15089                           ; BSR set to: 0
 15090                           ;tff.c: 313: if (ncl == scl) return 0;
 15091  0030B6  51AA               	movf	create_chain@scl& (0+255),w,b
 15092  0030B8  19AC               	xorwf	create_chain@ncl& (0+255),w,b
 15093  0030BA  E1D4               	bnz	l10078
 15094  0030BC  51AB               	movf	(create_chain@scl+1)& (0+255),w,b
 15095  0030BE  19AD               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 15096  0030C0  B4D8               	btfsc	status,2,c
 15097  0030C2  D7E2               	goto	u11650
 15098  0030C4  D7CF               	goto	l10078
 15099  0030C6                     l10108:
 15100                           
 15101                           ; BSR set to: 0
 15102                           ;tff.c: 316: if (!put_cluster(ncl, (CLUST)0x0FFFFFFF)) return 1;
 15103  0030C6  C0AC  F088         	movff	create_chain@ncl,put_cluster@clust
 15104  0030CA  C0AD  F089         	movff	create_chain@ncl+1,put_cluster@clust+1
 15105  0030CE  0EFF               	movlw	255
 15106  0030D0  6F8B               	movwf	(put_cluster@val+1)& (0+255),b
 15107  0030D2  698A               	setf	put_cluster@val& (0+255),b
 15108  0030D4  ECF9  F011         	call	_put_cluster	;wreg free
 15109  0030D8  0900               	iorlw	0
 15110  0030DA  B4D8               	btfsc	status,2,c
 15111  0030DC  D7AB               	goto	u11620
 15112                           
 15113                           ; BSR set to: 0
 15114                           ;tff.c: 317: if (clust != 0 && !put_cluster(clust, ncl)) return 1;
 15115  0030DE  51A0               	movf	create_chain@clust& (0+255),w,b
 15116  0030E0  11A1               	iorwf	(create_chain@clust+1)& (0+255),w,b
 15117  0030E2  B4D8               	btfsc	status,2,c
 15118  0030E4  D00D               	goto	l10122
 15119                           
 15120                           ; BSR set to: 0
 15121  0030E6  C0A0  F088         	movff	create_chain@clust,put_cluster@clust
 15122  0030EA  C0A1  F089         	movff	create_chain@clust+1,put_cluster@clust+1
 15123  0030EE  C0AC  F08A         	movff	create_chain@ncl,put_cluster@val
 15124  0030F2  C0AD  F08B         	movff	create_chain@ncl+1,put_cluster@val+1
 15125  0030F6  ECF9  F011         	call	_put_cluster	;wreg free
 15126  0030FA  0900               	iorlw	0
 15127  0030FC  B4D8               	btfsc	status,2,c
 15128  0030FE  D79A               	goto	u11620
 15129  003100                     l10122:
 15130                           
 15131                           ; BSR set to: 0
 15132                           ;tff.c: 319: fs->last_clust = ncl;
 15133  003100  EE20 F018          	lfsr	2,24
 15134  003104  51A6               	movf	create_chain@fs& (0+255),w,b
 15135  003106  26D9               	addwf	fsr2l,f,c
 15136  003108  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 15137  00310A  22DA               	addwfc	fsr2h,f,c
 15138  00310C  C0AC  FFDE         	movff	create_chain@ncl,postinc2
 15139  003110  C0AD  FFDD         	movff	create_chain@ncl+1,postdec2
 15140                           
 15141                           ;tff.c: 320: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 15142  003114  EE20 F01A          	lfsr	2,26
 15143  003118  51A6               	movf	create_chain@fs& (0+255),w,b
 15144  00311A  26D9               	addwf	fsr2l,f,c
 15145  00311C  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 15146  00311E  22DA               	addwfc	fsr2h,f,c
 15147  003120  28DE               	incf	postinc2,w,c
 15148  003122  E103               	bnz	u11720
 15149  003124  28DE               	incf	postinc2,w,c
 15150  003126  B4D8               	btfsc	status,2,c
 15151  003128  D009               	goto	l10126
 15152  00312A                     u11720:
 15153                           
 15154                           ; BSR set to: 0
 15155                           ;tff.c: 321: fs->free_clust--;
 15156  00312A  EE20 F01A          	lfsr	2,26
 15157  00312E  51A6               	movf	create_chain@fs& (0+255),w,b
 15158  003130  26D9               	addwf	fsr2l,f,c
 15159  003132  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 15160  003134  22DA               	addwfc	fsr2h,f,c
 15161  003136  06DE               	decf	postinc2,f,c
 15162  003138  0E00               	movlw	0
 15163  00313A  5ADD               	subwfb	postdec2,f,c
 15164  00313C                     l10126:
 15165                           
 15166                           ; BSR set to: 0
 15167                           ;tff.c: 325: };tff.c: 327: return ncl;
 15168  00313C  C0AC  F0A0         	movff	create_chain@ncl,?_create_chain
 15169  003140  C0AD  F0A1         	movff	create_chain@ncl+1,?_create_chain+1
 15170                           
 15171                           ; BSR set to: 0
 15172  003144  0012               	return		;funcret
 15173  003146                     __end_of_create_chain:
 15174                           	callstack 0
 15175                           
 15176 ;; *************** function _put_cluster *****************
 15177 ;; Defined at:
 15178 ;;		line 198 in file "bibliotecas/tff.c"
 15179 ;; Parameters:    Size  Location     Type
 15180 ;;  clust           2   40[BANK0 ] unsigned short 
 15181 ;;  val             2   42[BANK0 ] unsigned short 
 15182 ;; Auto vars:     Size  Location     Type
 15183 ;;  fatsect         4   54[BANK0 ] unsigned long 
 15184 ;;  fs              2   62[BANK0 ] PTR struct _FATFS
 15185 ;;		 -> NULL(0), fs(544), 
 15186 ;;  p               2   60[BANK0 ] PTR unsigned char 
 15187 ;;		 -> fs.win(512), NULL(0), fs(544), 
 15188 ;;  bc              2   58[BANK0 ] unsigned short 
 15189 ;; Return value:  Size  Location     Type
 15190 ;;                  1    wreg      enum E105
 15191 ;; Registers used:
 15192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15193 ;; Tracked objects:
 15194 ;;		On entry : 3F/0
 15195 ;;		On exit  : 3F/0
 15196 ;;		Unchanged: 0/0
 15197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15198 ;;      Params:         0       4       0       0       0       0       0       0       0
 15199 ;;      Locals:         0      14       0       0       0       0       0       0       0
 15200 ;;      Temps:          0       6       0       0       0       0       0       0       0
 15201 ;;      Totals:         0      24       0       0       0       0       0       0       0
 15202 ;;Total ram usage:       24 bytes
 15203 ;; Hardware stack levels used:    1
 15204 ;; Hardware stack levels required when called:    9
 15205 ;; This function calls:
 15206 ;;		___wmul
 15207 ;;		_move_window
 15208 ;; This function is called by:
 15209 ;;		_remove_chain
 15210 ;;		_create_chain
 15211 ;; This function uses a non-reentrant model
 15212 ;;
 15213                           
 15214                           	psect	text71
 15215  0023F2                     __ptext71:
 15216                           	callstack 0
 15217  0023F2                     _put_cluster:
 15218                           	callstack 13
 15219                           
 15220                           ; BSR set to: 0
 15221                           ;tff.c: 203: WORD bc;;tff.c: 204: BYTE *p;;tff.c: 205: DWORD fatsect;;tff.c: 206: FATFS 
      +                          *fs = FatFs;
 15222                           
 15223                           ; BSR set to: 0
 15224                           ;incstack = 0
 15225  0023F2  C038  F09E         	movff	_FatFs,put_cluster@fs
 15226  0023F6  C039  F09F         	movff	_FatFs+1,put_cluster@fs+1
 15227                           
 15228                           ; BSR set to: 0
 15229                           ;tff.c: 209: fatsect = fs->fatbase;
 15230  0023FA  EE20 F008          	lfsr	2,8
 15231  0023FE  519E               	movf	put_cluster@fs& (0+255),w,b
 15232  002400  26D9               	addwf	fsr2l,f,c
 15233  002402  519F               	movf	(put_cluster@fs+1)& (0+255),w,b
 15234  002404  22DA               	addwfc	fsr2h,f,c
 15235  002406  CFDE F096          	movff	postinc2,put_cluster@fatsect
 15236  00240A  CFDE F097          	movff	postinc2,put_cluster@fatsect+1
 15237  00240E  CFDE F098          	movff	postinc2,put_cluster@fatsect+2
 15238  002412  CFDE F099          	movff	postinc2,put_cluster@fatsect+3
 15239                           
 15240                           ;tff.c: 210: switch (fs->fs_type) {
 15241  002416  D108               	goto	l10008
 15242  002418                     l9956:
 15243                           
 15244                           ; BSR set to: 0
 15245                           ;tff.c: 212: bc = (WORD)clust * 3 / 2;
 15246  002418  C088  F019         	movff	put_cluster@clust,___wmul@multiplier
 15247  00241C  C089  F01A         	movff	put_cluster@clust+1,___wmul@multiplier+1
 15248  002420  0E00               	movlw	0
 15249  002422  6E1C               	movwf	(___wmul@multiplicand+1)^0,c
 15250  002424  0E03               	movlw	3
 15251  002426  6E1B               	movwf	___wmul@multiplicand^0,c
 15252  002428  ECEA  F028         	call	___wmul	;wreg free
 15253  00242C  90D8               	bcf	status,0,c
 15254  00242E  301A               	rrcf	(?___wmul+1)^0,w,c
 15255  002430  0100               	movlb	0	; () banked
 15256  002432  6F8C               	movwf	??_put_cluster& (0+255),b
 15257  002434  3019               	rrcf	?___wmul^0,w,c
 15258  002436  6F9A               	movwf	put_cluster@bc& (0+255),b
 15259  002438  C08C  F09B         	movff	??_put_cluster,put_cluster@bc+1
 15260                           
 15261                           ; BSR set to: 0
 15262                           ;tff.c: 213: if (!move_window(fatsect + bc / 512U)) return FALSE;
 15263  00243C  C09A  F08C         	movff	put_cluster@bc,??_put_cluster
 15264  002440  C09B  F08D         	movff	put_cluster@bc+1,??_put_cluster+1
 15265  002444  0E09               	movlw	9
 15266  002446  6F8E               	movwf	(??_put_cluster+2)& (0+255),b
 15267  002448                     u11455:
 15268  002448  90D8               	bcf	status,0,c
 15269  00244A  338D               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15270  00244C  338C               	rrcf	??_put_cluster& (0+255),f,b
 15271  00244E  2F8E               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15272  002450  D7FB               	goto	u11455
 15273  002452  518C               	movf	??_put_cluster& (0+255),w,b
 15274  002454  2596               	addwf	put_cluster@fatsect& (0+255),w,b
 15275  002456  6F73               	movwf	move_window@sector& (0+255),b
 15276  002458  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15277  00245A  2197               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15278  00245C  6F74               	movwf	(move_window@sector+1)& (0+255),b
 15279  00245E  0E00               	movlw	0
 15280  002460  2198               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15281  002462  6F75               	movwf	(move_window@sector+2)& (0+255),b
 15282  002464  0E00               	movlw	0
 15283  002466  2199               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15284  002468  6F76               	movwf	(move_window@sector+3)& (0+255),b
 15285  00246A  EC08  F017         	call	_move_window	;wreg free
 15286  00246E  0900               	iorlw	0
 15287  002470  A4D8               	btfss	status,2,c
 15288  002472  D002               	goto	l9964
 15289  002474                     u11460:
 15290                           
 15291                           ; BSR set to: 0
 15292  002474  0E00               	movlw	0
 15293  002476  0012               	return	
 15294  002478                     l9964:
 15295                           
 15296                           ; BSR set to: 0
 15297                           ;tff.c: 214: p = &fs->win[bc % 512U];
 15298  002478  0EFF               	movlw	255
 15299  00247A  6F8C               	movwf	??_put_cluster& (0+255),b
 15300  00247C  0E01               	movlw	1
 15301  00247E  6F8D               	movwf	(??_put_cluster+1)& (0+255),b
 15302  002480  C09A  F08E         	movff	put_cluster@bc,??_put_cluster+2
 15303  002484  C09B  F08F         	movff	put_cluster@bc+1,??_put_cluster+3
 15304  002488  518C               	movf	??_put_cluster& (0+255),w,b
 15305  00248A  178E               	andwf	(??_put_cluster+2)& (0+255),f,b
 15306  00248C  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15307  00248E  178F               	andwf	(??_put_cluster+3)& (0+255),f,b
 15308  002490  C09E  F090         	movff	put_cluster@fs,??_put_cluster+4
 15309  002494  C09F  F091         	movff	put_cluster@fs+1,??_put_cluster+5
 15310  002498  518E               	movf	(??_put_cluster+2)& (0+255),w,b
 15311  00249A  2790               	addwf	(??_put_cluster+4)& (0+255),f,b
 15312  00249C  518F               	movf	(??_put_cluster+3)& (0+255),w,b
 15313  00249E  2391               	addwfc	(??_put_cluster+5)& (0+255),f,b
 15314  0024A0  0E20               	movlw	32
 15315  0024A2  2590               	addwf	(??_put_cluster+4)& (0+255),w,b
 15316  0024A4  6F9C               	movwf	put_cluster@p& (0+255),b
 15317  0024A6  0E00               	movlw	0
 15318  0024A8  2191               	addwfc	(??_put_cluster+5)& (0+255),w,b
 15319  0024AA  6F9D               	movwf	(put_cluster@p+1)& (0+255),b
 15320                           
 15321                           ; BSR set to: 0
 15322                           ;tff.c: 215: *p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 15323  0024AC  B188               	btfsc	put_cluster@clust& (0+255),0,b
 15324  0024AE  D004               	goto	l9970
 15325                           
 15326                           ; BSR set to: 0
 15327  0024B0  C08A  F092         	movff	put_cluster@val,_put_cluster$1527
 15328  0024B4  6B93               	clrf	(_put_cluster$1527+1)& (0+255),b
 15329  0024B6  D01A               	goto	l9972
 15330  0024B8                     l9970:
 15331                           
 15332                           ; BSR set to: 0
 15333  0024B8  518A               	movf	put_cluster@val& (0+255),w,b
 15334  0024BA  6F8C               	movwf	??_put_cluster& (0+255),b
 15335  0024BC  6B8D               	clrf	(??_put_cluster+1)& (0+255),b
 15336  0024BE  3B8C               	swapf	??_put_cluster& (0+255),f,b
 15337  0024C0  3B8D               	swapf	(??_put_cluster+1)& (0+255),f,b
 15338  0024C2  0EF0               	movlw	240
 15339  0024C4  178D               	andwf	(??_put_cluster+1)& (0+255),f,b
 15340  0024C6  518C               	movf	??_put_cluster& (0+255),w,b
 15341  0024C8  0B0F               	andlw	15
 15342  0024CA  138D               	iorwf	(??_put_cluster+1)& (0+255),f,b
 15343  0024CC  0EF0               	movlw	240
 15344  0024CE  178C               	andwf	??_put_cluster& (0+255),f,b
 15345  0024D0  C09C  FFD9         	movff	put_cluster@p,fsr2l
 15346  0024D4  C09D  FFDA         	movff	put_cluster@p+1,fsr2h
 15347  0024D8  50DF               	movf	indf2,w,c
 15348  0024DA  0B0F               	andlw	15
 15349  0024DC  6F8E               	movwf	(??_put_cluster+2)& (0+255),b
 15350  0024DE  6B8F               	clrf	(??_put_cluster+3)& (0+255),b
 15351  0024E0  518C               	movf	??_put_cluster& (0+255),w,b
 15352  0024E2  118E               	iorwf	(??_put_cluster+2)& (0+255),w,b
 15353  0024E4  6F92               	movwf	_put_cluster$1527& (0+255),b
 15354  0024E6  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15355  0024E8  118F               	iorwf	(??_put_cluster+3)& (0+255),w,b
 15356  0024EA  6F93               	movwf	(_put_cluster$1527+1)& (0+255),b
 15357  0024EC                     l9972:
 15358                           
 15359                           ; BSR set to: 0
 15360  0024EC  C09C  FFD9         	movff	put_cluster@p,fsr2l
 15361  0024F0  C09D  FFDA         	movff	put_cluster@p+1,fsr2h
 15362  0024F4  C092  FFDF         	movff	_put_cluster$1527,indf2
 15363                           
 15364                           ; BSR set to: 0
 15365                           ;tff.c: 216: bc++;
 15366  0024F8  4B9A               	infsnz	put_cluster@bc& (0+255),f,b
 15367  0024FA  2B9B               	incf	(put_cluster@bc+1)& (0+255),f,b
 15368                           
 15369                           ; BSR set to: 0
 15370                           ;tff.c: 217: fs->winflag = 1;
 15371  0024FC  EE20 F01F          	lfsr	2,31
 15372  002500  519E               	movf	put_cluster@fs& (0+255),w,b
 15373  002502  26D9               	addwf	fsr2l,f,c
 15374  002504  519F               	movf	(put_cluster@fs+1)& (0+255),w,b
 15375  002506  22DA               	addwfc	fsr2h,f,c
 15376  002508  0E01               	movlw	1
 15377  00250A  6EDF               	movwf	indf2,c
 15378                           
 15379                           ; BSR set to: 0
 15380                           ;tff.c: 218: if (!move_window(fatsect + bc / 512U)) return FALSE;
 15381  00250C  C09A  F08C         	movff	put_cluster@bc,??_put_cluster
 15382  002510  C09B  F08D         	movff	put_cluster@bc+1,??_put_cluster+1
 15383  002514  0E09               	movlw	9
 15384  002516  6F8E               	movwf	(??_put_cluster+2)& (0+255),b
 15385  002518                     u11485:
 15386  002518  90D8               	bcf	status,0,c
 15387  00251A  338D               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15388  00251C  338C               	rrcf	??_put_cluster& (0+255),f,b
 15389  00251E  2F8E               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15390  002520  D7FB               	goto	u11485
 15391  002522  518C               	movf	??_put_cluster& (0+255),w,b
 15392  002524  2596               	addwf	put_cluster@fatsect& (0+255),w,b
 15393  002526  6F73               	movwf	move_window@sector& (0+255),b
 15394  002528  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15395  00252A  2197               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15396  00252C  6F74               	movwf	(move_window@sector+1)& (0+255),b
 15397  00252E  0E00               	movlw	0
 15398  002530  2198               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15399  002532  6F75               	movwf	(move_window@sector+2)& (0+255),b
 15400  002534  0E00               	movlw	0
 15401  002536  2199               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15402  002538  6F76               	movwf	(move_window@sector+3)& (0+255),b
 15403  00253A  EC08  F017         	call	_move_window	;wreg free
 15404  00253E  0900               	iorlw	0
 15405  002540  B4D8               	btfsc	status,2,c
 15406  002542  D798               	goto	u11460
 15407                           
 15408                           ; BSR set to: 0
 15409                           ;tff.c: 219: p = &fs->win[bc % 512U];
 15410  002544  0EFF               	movlw	255
 15411  002546  6F8C               	movwf	??_put_cluster& (0+255),b
 15412  002548  0E01               	movlw	1
 15413  00254A  6F8D               	movwf	(??_put_cluster+1)& (0+255),b
 15414  00254C  C09A  F08E         	movff	put_cluster@bc,??_put_cluster+2
 15415  002550  C09B  F08F         	movff	put_cluster@bc+1,??_put_cluster+3
 15416  002554  518C               	movf	??_put_cluster& (0+255),w,b
 15417  002556  178E               	andwf	(??_put_cluster+2)& (0+255),f,b
 15418  002558  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15419  00255A  178F               	andwf	(??_put_cluster+3)& (0+255),f,b
 15420  00255C  C09E  F090         	movff	put_cluster@fs,??_put_cluster+4
 15421  002560  C09F  F091         	movff	put_cluster@fs+1,??_put_cluster+5
 15422  002564  518E               	movf	(??_put_cluster+2)& (0+255),w,b
 15423  002566  2790               	addwf	(??_put_cluster+4)& (0+255),f,b
 15424  002568  518F               	movf	(??_put_cluster+3)& (0+255),w,b
 15425  00256A  2391               	addwfc	(??_put_cluster+5)& (0+255),f,b
 15426  00256C  0E20               	movlw	32
 15427  00256E  2590               	addwf	(??_put_cluster+4)& (0+255),w,b
 15428  002570  6F9C               	movwf	put_cluster@p& (0+255),b
 15429  002572  0E00               	movlw	0
 15430  002574  2191               	addwfc	(??_put_cluster+5)& (0+255),w,b
 15431  002576  6F9D               	movwf	(put_cluster@p+1)& (0+255),b
 15432                           
 15433                           ; BSR set to: 0
 15434                           ;tff.c: 220: *p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x
      +                          0F));
 15435  002578  B188               	btfsc	put_cluster@clust& (0+255),0,b
 15436  00257A  D00E               	goto	l9990
 15437                           
 15438                           ; BSR set to: 0
 15439  00257C  C08B  F08C         	movff	put_cluster@val+1,??_put_cluster
 15440  002580  0E0F               	movlw	15
 15441  002582  178C               	andwf	??_put_cluster& (0+255),f,b
 15442  002584  C09C  FFD9         	movff	put_cluster@p,fsr2l
 15443  002588  C09D  FFDA         	movff	put_cluster@p+1,fsr2h
 15444  00258C  50DF               	movf	indf2,w,c
 15445  00258E  0BF0               	andlw	240
 15446  002590  118C               	iorwf	??_put_cluster& (0+255),w,b
 15447  002592  6F8D               	movwf	(??_put_cluster+1)& (0+255),b
 15448  002594  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15449  002596  D00C               	goto	L6
 15450  002598                     l9990:
 15451                           
 15452                           ; BSR set to: 0
 15453  002598  C08A  F08C         	movff	put_cluster@val,??_put_cluster
 15454  00259C  C08B  F08D         	movff	put_cluster@val+1,??_put_cluster+1
 15455  0025A0  0E04               	movlw	4
 15456  0025A2  6F8E               	movwf	(??_put_cluster+2)& (0+255),b
 15457  0025A4                     u11515:
 15458  0025A4  90D8               	bcf	status,0,c
 15459  0025A6  338D               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15460  0025A8  338C               	rrcf	??_put_cluster& (0+255),f,b
 15461  0025AA  2F8E               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15462  0025AC  D7FB               	goto	u11515
 15463  0025AE  518C               	movf	??_put_cluster& (0+255),w,b
 15464  0025B0                     L6:
 15465  0025B0  6F94               	movwf	_put_cluster$1528& (0+255),b
 15466  0025B2  6B95               	clrf	(_put_cluster$1528+1)& (0+255),b
 15467                           
 15468                           ; BSR set to: 0
 15469  0025B4  C09C  FFD9         	movff	put_cluster@p,fsr2l
 15470  0025B8  C09D  FFDA         	movff	put_cluster@p+1,fsr2h
 15471  0025BC  C094  FFDF         	movff	_put_cluster$1528,indf2
 15472                           
 15473                           ;tff.c: 221: break;
 15474  0025C0  D041               	goto	l10010
 15475  0025C2                     l9994:
 15476                           
 15477                           ; BSR set to: 0
 15478                           ;tff.c: 224: if (!move_window(fatsect + clust / 256)) return FALSE;
 15479  0025C2  5189               	movf	(put_cluster@clust+1)& (0+255),w,b
 15480  0025C4  2596               	addwf	put_cluster@fatsect& (0+255),w,b
 15481  0025C6  6F73               	movwf	move_window@sector& (0+255),b
 15482  0025C8  0E00               	movlw	0
 15483  0025CA  2197               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15484  0025CC  6F74               	movwf	(move_window@sector+1)& (0+255),b
 15485  0025CE  0E00               	movlw	0
 15486  0025D0  2198               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15487  0025D2  6F75               	movwf	(move_window@sector+2)& (0+255),b
 15488  0025D4  0E00               	movlw	0
 15489  0025D6  2199               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15490  0025D8  6F76               	movwf	(move_window@sector+3)& (0+255),b
 15491  0025DA  EC08  F017         	call	_move_window	;wreg free
 15492  0025DE  0900               	iorlw	0
 15493  0025E0  B4D8               	btfsc	status,2,c
 15494  0025E2  D748               	goto	u11460
 15495                           
 15496                           ; BSR set to: 0
 15497                           ;tff.c: 225: *(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U])=(WORD)((WORD)val);
 15498  0025E4  0EFF               	movlw	255
 15499  0025E6  6F8C               	movwf	??_put_cluster& (0+255),b
 15500  0025E8  0E01               	movlw	1
 15501  0025EA  6F8D               	movwf	(??_put_cluster+1)& (0+255),b
 15502  0025EC  C088  F08E         	movff	put_cluster@clust,??_put_cluster+2
 15503  0025F0  C089  F08F         	movff	put_cluster@clust+1,??_put_cluster+3
 15504  0025F4  90D8               	bcf	status,0,c
 15505  0025F6  378E               	rlcf	(??_put_cluster+2)& (0+255),f,b
 15506  0025F8  378F               	rlcf	(??_put_cluster+3)& (0+255),f,b
 15507  0025FA  518C               	movf	??_put_cluster& (0+255),w,b
 15508  0025FC  178E               	andwf	(??_put_cluster+2)& (0+255),f,b
 15509  0025FE  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15510  002600  178F               	andwf	(??_put_cluster+3)& (0+255),f,b
 15511  002602  C09E  F090         	movff	put_cluster@fs,??_put_cluster+4
 15512  002606  C09F  F091         	movff	put_cluster@fs+1,??_put_cluster+5
 15513  00260A  518E               	movf	(??_put_cluster+2)& (0+255),w,b
 15514  00260C  2790               	addwf	(??_put_cluster+4)& (0+255),f,b
 15515  00260E  518F               	movf	(??_put_cluster+3)& (0+255),w,b
 15516  002610  2391               	addwfc	(??_put_cluster+5)& (0+255),f,b
 15517  002612  0E20               	movlw	32
 15518  002614  2590               	addwf	(??_put_cluster+4)& (0+255),w,b
 15519  002616  6ED9               	movwf	fsr2l,c
 15520  002618  0E00               	movlw	0
 15521  00261A  2191               	addwfc	(??_put_cluster+5)& (0+255),w,b
 15522  00261C  6EDA               	movwf	fsr2h,c
 15523  00261E  C08A  FFDE         	movff	put_cluster@val,postinc2
 15524  002622  C08B  FFDD         	movff	put_cluster@val+1,postdec2
 15525                           
 15526                           ;tff.c: 226: break;
 15527  002626  D00E               	goto	l10010
 15528  002628                     l10008:
 15529                           
 15530                           ; BSR set to: 0
 15531  002628  EE20 F01C          	lfsr	2,28
 15532  00262C  519E               	movf	put_cluster@fs& (0+255),w,b
 15533  00262E  26D9               	addwf	fsr2l,f,c
 15534  002630  519F               	movf	(put_cluster@fs+1)& (0+255),w,b
 15535  002632  22DA               	addwfc	fsr2h,f,c
 15536  002634  50DF               	movf	indf2,w,c
 15537                           
 15538                           ; Switch size 1, requested type "simple"
 15539                           ; Number of cases is 2, Range of values is 1 to 2
 15540                           ; switch strategies available:
 15541                           ; Name         Instructions Cycles
 15542                           ; simple_byte            7     4 (average)
 15543                           ;	Chosen strategy is simple_byte
 15544  002636  0A01               	xorlw	1	; case 1
 15545  002638  B4D8               	btfsc	status,2,c
 15546  00263A  D6EE               	goto	l9956
 15547  00263C  0A03               	xorlw	3	; case 2
 15548  00263E  B4D8               	btfsc	status,2,c
 15549  002640  D7C0               	goto	l9994
 15550  002642  D718               	goto	u11460
 15551  002644                     l10010:
 15552                           
 15553                           ; BSR set to: 0
 15554                           ;tff.c: 236: fs->winflag = 1;
 15555  002644  EE20 F01F          	lfsr	2,31
 15556  002648  519E               	movf	put_cluster@fs& (0+255),w,b
 15557  00264A  26D9               	addwf	fsr2l,f,c
 15558  00264C  519F               	movf	(put_cluster@fs+1)& (0+255),w,b
 15559  00264E  22DA               	addwfc	fsr2h,f,c
 15560  002650  0E01               	movlw	1
 15561  002652  6EDF               	movwf	indf2,c
 15562                           
 15563                           ; BSR set to: 0
 15564                           ;tff.c: 237: return TRUE;
 15565  002654  0E01               	movlw	1
 15566                           
 15567                           ; BSR set to: 0
 15568  002656  0012               	return		;funcret
 15569  002658                     __end_of_put_cluster:
 15570                           	callstack 0
 15571                           
 15572 ;; *************** function _get_cluster *****************
 15573 ;; Defined at:
 15574 ;;		line 155 in file "bibliotecas/tff.c"
 15575 ;; Parameters:    Size  Location     Type
 15576 ;;  clust           2   48[COMRAM] unsigned short 
 15577 ;; Auto vars:     Size  Location     Type
 15578 ;;  fatsect         4   51[BANK0 ] unsigned long 
 15579 ;;  fs              2   57[BANK0 ] PTR struct _FATFS
 15580 ;;		 -> NULL(0), fs(544), 
 15581 ;;  bc              2   55[BANK0 ] unsigned short 
 15582 ;;  wc              2   49[BANK0 ] unsigned short 
 15583 ;; Return value:  Size  Location     Type
 15584 ;;                  2   48[COMRAM] unsigned short 
 15585 ;; Registers used:
 15586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15587 ;; Tracked objects:
 15588 ;;		On entry : 3F/0
 15589 ;;		On exit  : 3F/0
 15590 ;;		Unchanged: 0/0
 15591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15592 ;;      Params:         2       0       0       0       0       0       0       0       0
 15593 ;;      Locals:         0      10       0       0       0       0       0       0       0
 15594 ;;      Temps:          0       9       0       0       0       0       0       0       0
 15595 ;;      Totals:         2      19       0       0       0       0       0       0       0
 15596 ;;Total ram usage:       21 bytes
 15597 ;; Hardware stack levels used:    1
 15598 ;; Hardware stack levels required when called:    9
 15599 ;; This function calls:
 15600 ;;		___wmul
 15601 ;;		_move_window
 15602 ;; This function is called by:
 15603 ;;		_remove_chain
 15604 ;;		_create_chain
 15605 ;;		_next_dir_entry
 15606 ;;		_f_lseek
 15607 ;;		_f_read
 15608 ;; This function uses a non-reentrant model
 15609 ;;
 15610                           
 15611                           	psect	text72
 15612  00288A                     __ptext72:
 15613                           	callstack 0
 15614  00288A                     _get_cluster:
 15615                           	callstack 13
 15616                           
 15617                           ; BSR set to: 0
 15618                           ;tff.c: 159: WORD wc, bc;;tff.c: 160: DWORD fatsect;;tff.c: 161: FATFS *fs = FatFs;
 15619                           
 15620                           ; BSR set to: 0
 15621                           ;incstack = 0
 15622  00288A  C038  F099         	movff	_FatFs,get_cluster@fs
 15623  00288E  C039  F09A         	movff	_FatFs+1,get_cluster@fs+1
 15624                           
 15625                           ;tff.c: 164: if (clust >= 2 && clust < fs->max_clust) {
 15626  002892  5032               	movf	(get_cluster@clust+1)^0,w,c
 15627  002894  E104               	bnz	u11360
 15628  002896  0E02               	movlw	2
 15629  002898  5C31               	subwf	get_cluster@clust^0,w,c
 15630  00289A  A0D8               	btfss	status,0,c
 15631  00289C  D102               	goto	l9948
 15632  00289E                     u11360:
 15633                           
 15634                           ; BSR set to: 0
 15635  00289E  EE20 F016          	lfsr	2,22
 15636  0028A2  5199               	movf	get_cluster@fs& (0+255),w,b
 15637  0028A4  26D9               	addwf	fsr2l,f,c
 15638  0028A6  519A               	movf	(get_cluster@fs+1)& (0+255),w,b
 15639  0028A8  22DA               	addwfc	fsr2h,f,c
 15640  0028AA  50DE               	movf	postinc2,w,c
 15641  0028AC  5C31               	subwf	get_cluster@clust^0,w,c
 15642  0028AE  50DE               	movf	postinc2,w,c
 15643  0028B0  5832               	subwfb	(get_cluster@clust+1)^0,w,c
 15644  0028B2  B0D8               	btfsc	status,0,c
 15645  0028B4  D0F6               	goto	l9948
 15646                           
 15647                           ; BSR set to: 0
 15648                           ;tff.c: 165: fatsect = fs->fatbase;
 15649  0028B6  EE20 F008          	lfsr	2,8
 15650  0028BA  5199               	movf	get_cluster@fs& (0+255),w,b
 15651  0028BC  26D9               	addwf	fsr2l,f,c
 15652  0028BE  519A               	movf	(get_cluster@fs+1)& (0+255),w,b
 15653  0028C0  22DA               	addwfc	fsr2h,f,c
 15654  0028C2  CFDE F093          	movff	postinc2,get_cluster@fatsect
 15655  0028C6  CFDE F094          	movff	postinc2,get_cluster@fatsect+1
 15656  0028CA  CFDE F095          	movff	postinc2,get_cluster@fatsect+2
 15657  0028CE  CFDE F096          	movff	postinc2,get_cluster@fatsect+3
 15658                           
 15659                           ;tff.c: 166: switch (fs->fs_type) {
 15660  0028D2  D0DA               	goto	l9946
 15661  0028D4                     l9912:
 15662                           
 15663                           ; BSR set to: 0
 15664                           ;tff.c: 168: bc = (WORD)clust * 3 / 2;
 15665  0028D4  C031  F019         	movff	get_cluster@clust,___wmul@multiplier
 15666  0028D8  C032  F01A         	movff	get_cluster@clust+1,___wmul@multiplier+1
 15667  0028DC  0E00               	movlw	0
 15668  0028DE  6E1C               	movwf	(___wmul@multiplicand+1)^0,c
 15669  0028E0  0E03               	movlw	3
 15670  0028E2  6E1B               	movwf	___wmul@multiplicand^0,c
 15671  0028E4  ECEA  F028         	call	___wmul	;wreg free
 15672  0028E8  90D8               	bcf	status,0,c
 15673  0028EA  301A               	rrcf	(?___wmul+1)^0,w,c
 15674  0028EC  0100               	movlb	0	; () banked
 15675  0028EE  6F88               	movwf	??_get_cluster& (0+255),b
 15676  0028F0  3019               	rrcf	?___wmul^0,w,c
 15677  0028F2  6F97               	movwf	get_cluster@bc& (0+255),b
 15678  0028F4  C088  F098         	movff	??_get_cluster,get_cluster@bc+1
 15679                           
 15680                           ; BSR set to: 0
 15681                           ;tff.c: 169: if (!move_window(fatsect + bc / 512U)) break;
 15682  0028F8  C097  F088         	movff	get_cluster@bc,??_get_cluster
 15683  0028FC  C098  F089         	movff	get_cluster@bc+1,??_get_cluster+1
 15684  002900  0E09               	movlw	9
 15685  002902  6F8A               	movwf	(??_get_cluster+2)& (0+255),b
 15686  002904                     u11385:
 15687  002904  90D8               	bcf	status,0,c
 15688  002906  3389               	rrcf	(??_get_cluster+1)& (0+255),f,b
 15689  002908  3388               	rrcf	??_get_cluster& (0+255),f,b
 15690  00290A  2F8A               	decfsz	(??_get_cluster+2)& (0+255),f,b
 15691  00290C  D7FB               	goto	u11385
 15692  00290E  5188               	movf	??_get_cluster& (0+255),w,b
 15693  002910  2593               	addwf	get_cluster@fatsect& (0+255),w,b
 15694  002912  6F73               	movwf	move_window@sector& (0+255),b
 15695  002914  5189               	movf	(??_get_cluster+1)& (0+255),w,b
 15696  002916  2194               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 15697  002918  6F74               	movwf	(move_window@sector+1)& (0+255),b
 15698  00291A  0E00               	movlw	0
 15699  00291C  2195               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 15700  00291E  6F75               	movwf	(move_window@sector+2)& (0+255),b
 15701  002920  0E00               	movlw	0
 15702  002922  2196               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 15703  002924  6F76               	movwf	(move_window@sector+3)& (0+255),b
 15704  002926  EC08  F017         	call	_move_window	;wreg free
 15705  00292A  0900               	iorlw	0
 15706  00292C  B4D8               	btfsc	status,2,c
 15707  00292E  D0B9               	goto	l9948
 15708                           
 15709                           ; BSR set to: 0
 15710                           ;tff.c: 170: wc = fs->win[bc % 512U]; bc++;
 15711  002930  0EFF               	movlw	255
 15712  002932  6F88               	movwf	??_get_cluster& (0+255),b
 15713  002934  0E01               	movlw	1
 15714  002936  6F89               	movwf	(??_get_cluster+1)& (0+255),b
 15715  002938  C097  F08A         	movff	get_cluster@bc,??_get_cluster+2
 15716  00293C  C098  F08B         	movff	get_cluster@bc+1,??_get_cluster+3
 15717  002940  5188               	movf	??_get_cluster& (0+255),w,b
 15718  002942  178A               	andwf	(??_get_cluster+2)& (0+255),f,b
 15719  002944  5189               	movf	(??_get_cluster+1)& (0+255),w,b
 15720  002946  178B               	andwf	(??_get_cluster+3)& (0+255),f,b
 15721  002948  C099  F08C         	movff	get_cluster@fs,??_get_cluster+4
 15722  00294C  C09A  F08D         	movff	get_cluster@fs+1,??_get_cluster+5
 15723  002950  518A               	movf	(??_get_cluster+2)& (0+255),w,b
 15724  002952  278C               	addwf	(??_get_cluster+4)& (0+255),f,b
 15725  002954  518B               	movf	(??_get_cluster+3)& (0+255),w,b
 15726  002956  238D               	addwfc	(??_get_cluster+5)& (0+255),f,b
 15727  002958  0E20               	movlw	32
 15728  00295A  258C               	addwf	(??_get_cluster+4)& (0+255),w,b
 15729  00295C  6ED9               	movwf	fsr2l,c
 15730  00295E  0E00               	movlw	0
 15731  002960  218D               	addwfc	(??_get_cluster+5)& (0+255),w,b
 15732  002962  6EDA               	movwf	fsr2h,c
 15733  002964  50DF               	movf	indf2,w,c
 15734  002966  6F8E               	movwf	(??_get_cluster+6)& (0+255),b
 15735  002968  518E               	movf	(??_get_cluster+6)& (0+255),w,b
 15736  00296A  6F91               	movwf	get_cluster@wc& (0+255),b
 15737  00296C  6B92               	clrf	(get_cluster@wc+1)& (0+255),b
 15738                           
 15739                           ; BSR set to: 0
 15740  00296E  4B97               	infsnz	get_cluster@bc& (0+255),f,b
 15741  002970  2B98               	incf	(get_cluster@bc+1)& (0+255),f,b
 15742                           
 15743                           ; BSR set to: 0
 15744                           ;tff.c: 171: if (!move_window(fatsect + bc / 512U)) break;
 15745  002972  C097  F088         	movff	get_cluster@bc,??_get_cluster
 15746  002976  C098  F089         	movff	get_cluster@bc+1,??_get_cluster+1
 15747  00297A  0E09               	movlw	9
 15748  00297C  6F8A               	movwf	(??_get_cluster+2)& (0+255),b
 15749  00297E                     u11405:
 15750  00297E  90D8               	bcf	status,0,c
 15751  002980  3389               	rrcf	(??_get_cluster+1)& (0+255),f,b
 15752  002982  3388               	rrcf	??_get_cluster& (0+255),f,b
 15753  002984  2F8A               	decfsz	(??_get_cluster+2)& (0+255),f,b
 15754  002986  D7FB               	goto	u11405
 15755  002988  5188               	movf	??_get_cluster& (0+255),w,b
 15756  00298A  2593               	addwf	get_cluster@fatsect& (0+255),w,b
 15757  00298C  6F73               	movwf	move_window@sector& (0+255),b
 15758  00298E  5189               	movf	(??_get_cluster+1)& (0+255),w,b
 15759  002990  2194               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 15760  002992  6F74               	movwf	(move_window@sector+1)& (0+255),b
 15761  002994  0E00               	movlw	0
 15762  002996  2195               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 15763  002998  6F75               	movwf	(move_window@sector+2)& (0+255),b
 15764  00299A  0E00               	movlw	0
 15765  00299C  2196               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 15766  00299E  6F76               	movwf	(move_window@sector+3)& (0+255),b
 15767  0029A0  EC08  F017         	call	_move_window	;wreg free
 15768  0029A4  0900               	iorlw	0
 15769  0029A6  B4D8               	btfsc	status,2,c
 15770  0029A8  D07C               	goto	l9948
 15771                           
 15772                           ; BSR set to: 0
 15773                           ;tff.c: 172: wc |= (WORD)fs->win[bc % 512U] << 8;
 15774  0029AA  0EFF               	movlw	255
 15775  0029AC  6F88               	movwf	??_get_cluster& (0+255),b
 15776  0029AE  0E01               	movlw	1
 15777  0029B0  6F89               	movwf	(??_get_cluster+1)& (0+255),b
 15778  0029B2  C097  F08A         	movff	get_cluster@bc,??_get_cluster+2
 15779  0029B6  C098  F08B         	movff	get_cluster@bc+1,??_get_cluster+3
 15780  0029BA  5188               	movf	??_get_cluster& (0+255),w,b
 15781  0029BC  178A               	andwf	(??_get_cluster+2)& (0+255),f,b
 15782  0029BE  5189               	movf	(??_get_cluster+1)& (0+255),w,b
 15783  0029C0  178B               	andwf	(??_get_cluster+3)& (0+255),f,b
 15784  0029C2  C099  F08C         	movff	get_cluster@fs,??_get_cluster+4
 15785  0029C6  C09A  F08D         	movff	get_cluster@fs+1,??_get_cluster+5
 15786  0029CA  518A               	movf	(??_get_cluster+2)& (0+255),w,b
 15787  0029CC  278C               	addwf	(??_get_cluster+4)& (0+255),f,b
 15788  0029CE  518B               	movf	(??_get_cluster+3)& (0+255),w,b
 15789  0029D0  238D               	addwfc	(??_get_cluster+5)& (0+255),f,b
 15790  0029D2  0E20               	movlw	32
 15791  0029D4  258C               	addwf	(??_get_cluster+4)& (0+255),w,b
 15792  0029D6  6ED9               	movwf	fsr2l,c
 15793  0029D8  0E00               	movlw	0
 15794  0029DA  218D               	addwfc	(??_get_cluster+5)& (0+255),w,b
 15795  0029DC  6EDA               	movwf	fsr2h,c
 15796  0029DE  50DF               	movf	indf2,w,c
 15797  0029E0  6F8E               	movwf	(??_get_cluster+6)& (0+255),b
 15798  0029E2  518E               	movf	(??_get_cluster+6)& (0+255),w,b
 15799  0029E4  6F90               	movwf	(??_get_cluster+8)& (0+255),b
 15800  0029E6  6B8F               	clrf	(??_get_cluster+7)& (0+255),b
 15801  0029E8  518F               	movf	(??_get_cluster+7)& (0+255),w,b
 15802  0029EA  1391               	iorwf	get_cluster@wc& (0+255),f,b
 15803  0029EC  5190               	movf	(??_get_cluster+8)& (0+255),w,b
 15804  0029EE  1392               	iorwf	(get_cluster@wc+1)& (0+255),f,b
 15805                           
 15806                           ; BSR set to: 0
 15807                           ;tff.c: 173: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
 15808  0029F0  B031               	btfsc	get_cluster@clust^0,0,c
 15809  0029F2  D007               	goto	l9932
 15810                           
 15811                           ; BSR set to: 0
 15812  0029F4  0EFF               	movlw	255
 15813  0029F6  1591               	andwf	get_cluster@wc& (0+255),w,b
 15814  0029F8  6E31               	movwf	?_get_cluster^0,c
 15815  0029FA  0E0F               	movlw	15
 15816  0029FC  1592               	andwf	(get_cluster@wc+1)& (0+255),w,b
 15817  0029FE  6E32               	movwf	(?_get_cluster+1)^0,c
 15818  002A00  0012               	return	
 15819  002A02                     l9932:
 15820                           
 15821                           ; BSR set to: 0
 15822  002A02  C091  F088         	movff	get_cluster@wc,??_get_cluster
 15823  002A06  C092  F089         	movff	get_cluster@wc+1,??_get_cluster+1
 15824  002A0A  0E04               	movlw	4
 15825  002A0C  6F8A               	movwf	(??_get_cluster+2)& (0+255),b
 15826  002A0E                     u11435:
 15827  002A0E  90D8               	bcf	status,0,c
 15828  002A10  3389               	rrcf	(??_get_cluster+1)& (0+255),f,b
 15829  002A12  3388               	rrcf	??_get_cluster& (0+255),f,b
 15830  002A14  2F8A               	decfsz	(??_get_cluster+2)& (0+255),f,b
 15831  002A16  D7FB               	goto	u11435
 15832  002A18  C088  F031         	movff	??_get_cluster,?_get_cluster
 15833  002A1C  C089  F032         	movff	??_get_cluster+1,?_get_cluster+1
 15834  002A20  0012               	return	
 15835  002A22                     l9936:
 15836                           
 15837                           ; BSR set to: 0
 15838                           ;tff.c: 176: if (!move_window(fatsect + clust / 256)) break;
 15839  002A22  5032               	movf	(get_cluster@clust+1)^0,w,c
 15840  002A24  2593               	addwf	get_cluster@fatsect& (0+255),w,b
 15841  002A26  6F73               	movwf	move_window@sector& (0+255),b
 15842  002A28  0E00               	movlw	0
 15843  002A2A  2194               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 15844  002A2C  6F74               	movwf	(move_window@sector+1)& (0+255),b
 15845  002A2E  0E00               	movlw	0
 15846  002A30  2195               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 15847  002A32  6F75               	movwf	(move_window@sector+2)& (0+255),b
 15848  002A34  0E00               	movlw	0
 15849  002A36  2196               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 15850  002A38  6F76               	movwf	(move_window@sector+3)& (0+255),b
 15851  002A3A  EC08  F017         	call	_move_window	;wreg free
 15852  002A3E  0900               	iorlw	0
 15853  002A40  B4D8               	btfsc	status,2,c
 15854  002A42  D02F               	goto	l9948
 15855                           
 15856                           ; BSR set to: 0
 15857                           ;tff.c: 177: return (WORD)(*(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U]));
 15858  002A44  0EFF               	movlw	255
 15859  002A46  6F88               	movwf	??_get_cluster& (0+255),b
 15860  002A48  0E01               	movlw	1
 15861  002A4A  6F89               	movwf	(??_get_cluster+1)& (0+255),b
 15862  002A4C  C031  F08A         	movff	get_cluster@clust,??_get_cluster+2
 15863  002A50  C032  F08B         	movff	get_cluster@clust+1,??_get_cluster+3
 15864  002A54  90D8               	bcf	status,0,c
 15865  002A56  378A               	rlcf	(??_get_cluster+2)& (0+255),f,b
 15866  002A58  378B               	rlcf	(??_get_cluster+3)& (0+255),f,b
 15867  002A5A  5188               	movf	??_get_cluster& (0+255),w,b
 15868  002A5C  178A               	andwf	(??_get_cluster+2)& (0+255),f,b
 15869  002A5E  5189               	movf	(??_get_cluster+1)& (0+255),w,b
 15870  002A60  178B               	andwf	(??_get_cluster+3)& (0+255),f,b
 15871  002A62  C099  F08C         	movff	get_cluster@fs,??_get_cluster+4
 15872  002A66  C09A  F08D         	movff	get_cluster@fs+1,??_get_cluster+5
 15873  002A6A  518A               	movf	(??_get_cluster+2)& (0+255),w,b
 15874  002A6C  278C               	addwf	(??_get_cluster+4)& (0+255),f,b
 15875  002A6E  518B               	movf	(??_get_cluster+3)& (0+255),w,b
 15876  002A70  238D               	addwfc	(??_get_cluster+5)& (0+255),f,b
 15877  002A72  0E20               	movlw	32
 15878  002A74  258C               	addwf	(??_get_cluster+4)& (0+255),w,b
 15879  002A76  6ED9               	movwf	fsr2l,c
 15880  002A78  0E00               	movlw	0
 15881  002A7A  218D               	addwfc	(??_get_cluster+5)& (0+255),w,b
 15882  002A7C  6EDA               	movwf	fsr2h,c
 15883  002A7E  CFDE F031          	movff	postinc2,?_get_cluster
 15884  002A82  CFDD F032          	movff	postdec2,?_get_cluster+1
 15885  002A86  0012               	return	
 15886  002A88                     l9946:
 15887                           
 15888                           ; BSR set to: 0
 15889  002A88  EE20 F01C          	lfsr	2,28
 15890  002A8C  5199               	movf	get_cluster@fs& (0+255),w,b
 15891  002A8E  26D9               	addwf	fsr2l,f,c
 15892  002A90  519A               	movf	(get_cluster@fs+1)& (0+255),w,b
 15893  002A92  22DA               	addwfc	fsr2h,f,c
 15894  002A94  50DF               	movf	indf2,w,c
 15895                           
 15896                           ; Switch size 1, requested type "simple"
 15897                           ; Number of cases is 2, Range of values is 1 to 2
 15898                           ; switch strategies available:
 15899                           ; Name         Instructions Cycles
 15900                           ; simple_byte            7     4 (average)
 15901                           ;	Chosen strategy is simple_byte
 15902  002A96  0A01               	xorlw	1	; case 1
 15903  002A98  B4D8               	btfsc	status,2,c
 15904  002A9A  D71C               	goto	l9912
 15905  002A9C  0A03               	xorlw	3	; case 2
 15906  002A9E  B4D8               	btfsc	status,2,c
 15907  002AA0  D7C0               	goto	l9936
 15908  002AA2                     l9948:
 15909                           
 15910                           ; BSR set to: 0
 15911                           ;tff.c: 184: };tff.c: 186: return 1;
 15912  002AA2  0E00               	movlw	0
 15913  002AA4  6E32               	movwf	(?_get_cluster+1)^0,c
 15914  002AA6  0E01               	movlw	1
 15915  002AA8  6E31               	movwf	?_get_cluster^0,c
 15916                           
 15917                           ; BSR set to: 0
 15918  002AAA  0012               	return		;funcret
 15919  002AAC                     __end_of_get_cluster:
 15920                           	callstack 0
 15921                           
 15922 ;; *************** function ___wmul *****************
 15923 ;; Defined at:
 15924 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\Umul16.c"
 15925 ;; Parameters:    Size  Location     Type
 15926 ;;  multiplier      2   24[COMRAM] unsigned int 
 15927 ;;  multiplicand    2   26[COMRAM] unsigned int 
 15928 ;; Auto vars:     Size  Location     Type
 15929 ;;  product         2   28[COMRAM] unsigned int 
 15930 ;; Return value:  Size  Location     Type
 15931 ;;                  2   24[COMRAM] unsigned int 
 15932 ;; Registers used:
 15933 ;;		wreg, status,2, status,0, prodl, prodh
 15934 ;; Tracked objects:
 15935 ;;		On entry : 0/0
 15936 ;;		On exit  : 0/0
 15937 ;;		Unchanged: 0/0
 15938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15939 ;;      Params:         4       0       0       0       0       0       0       0       0
 15940 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15941 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15942 ;;      Totals:         6       0       0       0       0       0       0       0       0
 15943 ;;Total ram usage:        6 bytes
 15944 ;; Hardware stack levels used:    1
 15945 ;; Hardware stack levels required when called:    3
 15946 ;; This function calls:
 15947 ;;		Nothing
 15948 ;; This function is called by:
 15949 ;;		_get_cluster
 15950 ;;		_put_cluster
 15951 ;;		_fprintf
 15952 ;;		_atoi
 15953 ;; This function uses a non-reentrant model
 15954 ;;
 15955                           
 15956                           	psect	text73
 15957  0051D4                     __ptext73:
 15958                           	callstack 0
 15959  0051D4                     ___wmul:
 15960                           	callstack 23
 15961                           
 15962                           ; BSR set to: 0
 15963                           ;incstack = 0
 15964  0051D4  5019               	movf	___wmul@multiplier^0,w,c
 15965  0051D6  021B               	mulwf	___wmul@multiplicand^0,c
 15966  0051D8  CFF3 F01D          	movff	prodl,___wmul@product
 15967  0051DC  CFF4 F01E          	movff	prodh,___wmul@product+1
 15968  0051E0  5019               	movf	___wmul@multiplier^0,w,c
 15969  0051E2  021C               	mulwf	(___wmul@multiplicand+1)^0,c
 15970  0051E4  50F3               	movf	243,w,c
 15971  0051E6  261E               	addwf	(___wmul@product+1)^0,f,c
 15972  0051E8  501A               	movf	(___wmul@multiplier+1)^0,w,c
 15973  0051EA  021B               	mulwf	___wmul@multiplicand^0,c
 15974  0051EC  50F3               	movf	243,w,c
 15975  0051EE  261E               	addwf	(___wmul@product+1)^0,f,c
 15976  0051F0  C01D  F019         	movff	___wmul@product,?___wmul
 15977  0051F4  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
 15978  0051F8  0012               	return		;funcret
 15979  0051FA                     __end_of___wmul:
 15980                           	callstack 0
 15981                           
 15982 ;; *************** function ___lldiv *****************
 15983 ;; Defined at:
 15984 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\__lldiv.c"
 15985 ;; Parameters:    Size  Location     Type
 15986 ;;  dividend        4   24[COMRAM] unsigned long 
 15987 ;;  divisor         4   28[COMRAM] unsigned long 
 15988 ;; Auto vars:     Size  Location     Type
 15989 ;;  quotient        4   32[COMRAM] unsigned long 
 15990 ;;  counter         1   36[COMRAM] unsigned char 
 15991 ;; Return value:  Size  Location     Type
 15992 ;;                  4   24[COMRAM] unsigned long 
 15993 ;; Registers used:
 15994 ;;		wreg, status,2, status,0
 15995 ;; Tracked objects:
 15996 ;;		On entry : 3D/2
 15997 ;;		On exit  : 3D/0
 15998 ;;		Unchanged: 3D/0
 15999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16000 ;;      Params:         8       0       0       0       0       0       0       0       0
 16001 ;;      Locals:         5       0       0       0       0       0       0       0       0
 16002 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16003 ;;      Totals:        13       0       0       0       0       0       0       0       0
 16004 ;;Total ram usage:       13 bytes
 16005 ;; Hardware stack levels used:    1
 16006 ;; Hardware stack levels required when called:    3
 16007 ;; This function calls:
 16008 ;;		Nothing
 16009 ;; This function is called by:
 16010 ;;		_auto_mount
 16011 ;;		_f_lseek
 16012 ;;		_fprintf
 16013 ;; This function uses a non-reentrant model
 16014 ;;
 16015                           
 16016                           	psect	text74
 16017  004766                     __ptext74:
 16018                           	callstack 0
 16019  004766                     ___lldiv:
 16020                           	callstack 23
 16021                           
 16022                           ;incstack = 0
 16023  004766  0E00               	movlw	0
 16024  004768  6E21               	movwf	___lldiv@quotient^0,c
 16025  00476A  0E00               	movlw	0
 16026  00476C  6E22               	movwf	(___lldiv@quotient+1)^0,c
 16027  00476E  0E00               	movlw	0
 16028  004770  6E23               	movwf	(___lldiv@quotient+2)^0,c
 16029  004772  0E00               	movlw	0
 16030  004774  6E24               	movwf	(___lldiv@quotient+3)^0,c
 16031  004776  501D               	movf	___lldiv@divisor^0,w,c
 16032  004778  101E               	iorwf	(___lldiv@divisor+1)^0,w,c
 16033  00477A  101F               	iorwf	(___lldiv@divisor+2)^0,w,c
 16034  00477C  1020               	iorwf	(___lldiv@divisor+3)^0,w,c
 16035  00477E  B4D8               	btfsc	status,2,c
 16036  004780  D02A               	goto	l1622
 16037  004782  0E01               	movlw	1
 16038  004784  6E25               	movwf	___lldiv@counter^0,c
 16039  004786  D006               	goto	l10628
 16040  004788                     l10626:
 16041  004788  90D8               	bcf	status,0,c
 16042  00478A  361D               	rlcf	___lldiv@divisor^0,f,c
 16043  00478C  361E               	rlcf	(___lldiv@divisor+1)^0,f,c
 16044  00478E  361F               	rlcf	(___lldiv@divisor+2)^0,f,c
 16045  004790  3620               	rlcf	(___lldiv@divisor+3)^0,f,c
 16046  004792  2A25               	incf	___lldiv@counter^0,f,c
 16047  004794                     l10628:
 16048  004794  AE20               	btfss	(___lldiv@divisor+3)^0,7,c
 16049  004796  D7F8               	goto	l10626
 16050  004798                     u12470:
 16051  004798  90D8               	bcf	status,0,c
 16052  00479A  3621               	rlcf	___lldiv@quotient^0,f,c
 16053  00479C  3622               	rlcf	(___lldiv@quotient+1)^0,f,c
 16054  00479E  3623               	rlcf	(___lldiv@quotient+2)^0,f,c
 16055  0047A0  3624               	rlcf	(___lldiv@quotient+3)^0,f,c
 16056  0047A2  501D               	movf	___lldiv@divisor^0,w,c
 16057  0047A4  5C19               	subwf	___lldiv@dividend^0,w,c
 16058  0047A6  501E               	movf	(___lldiv@divisor+1)^0,w,c
 16059  0047A8  581A               	subwfb	(___lldiv@dividend+1)^0,w,c
 16060  0047AA  501F               	movf	(___lldiv@divisor+2)^0,w,c
 16061  0047AC  581B               	subwfb	(___lldiv@dividend+2)^0,w,c
 16062  0047AE  5020               	movf	(___lldiv@divisor+3)^0,w,c
 16063  0047B0  581C               	subwfb	(___lldiv@dividend+3)^0,w,c
 16064  0047B2  A0D8               	btfss	status,0,c
 16065  0047B4  D009               	goto	l10638
 16066  0047B6  501D               	movf	___lldiv@divisor^0,w,c
 16067  0047B8  5E19               	subwf	___lldiv@dividend^0,f,c
 16068  0047BA  501E               	movf	(___lldiv@divisor+1)^0,w,c
 16069  0047BC  5A1A               	subwfb	(___lldiv@dividend+1)^0,f,c
 16070  0047BE  501F               	movf	(___lldiv@divisor+2)^0,w,c
 16071  0047C0  5A1B               	subwfb	(___lldiv@dividend+2)^0,f,c
 16072  0047C2  5020               	movf	(___lldiv@divisor+3)^0,w,c
 16073  0047C4  5A1C               	subwfb	(___lldiv@dividend+3)^0,f,c
 16074  0047C6  8021               	bsf	___lldiv@quotient^0,0,c
 16075  0047C8                     l10638:
 16076  0047C8  90D8               	bcf	status,0,c
 16077  0047CA  3220               	rrcf	(___lldiv@divisor+3)^0,f,c
 16078  0047CC  321F               	rrcf	(___lldiv@divisor+2)^0,f,c
 16079  0047CE  321E               	rrcf	(___lldiv@divisor+1)^0,f,c
 16080  0047D0  321D               	rrcf	___lldiv@divisor^0,f,c
 16081  0047D2  2E25               	decfsz	___lldiv@counter^0,f,c
 16082  0047D4  D7E1               	goto	u12470
 16083  0047D6                     l1622:
 16084  0047D6  C021  F019         	movff	___lldiv@quotient,?___lldiv
 16085  0047DA  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
 16086  0047DE  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
 16087  0047E2  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
 16088  0047E6  0012               	return		;funcret
 16089  0047E8                     __end_of___lldiv:
 16090                           	callstack 0
 16091                           
 16092 ;; *************** function _f_close *****************
 16093 ;; Defined at:
 16094 ;;		line 1116 in file "bibliotecas/tff.c"
 16095 ;; Parameters:    Size  Location     Type
 16096 ;;  fp              2   49[BANK0 ] PTR struct _FIL
 16097 ;;		 -> fil(28), 
 16098 ;; Auto vars:     Size  Location     Type
 16099 ;;  res             1   51[BANK0 ] enum E155
 16100 ;; Return value:  Size  Location     Type
 16101 ;;                  1    wreg      enum E3236
 16102 ;; Registers used:
 16103 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16104 ;; Tracked objects:
 16105 ;;		On entry : 3F/0
 16106 ;;		On exit  : 3F/0
 16107 ;;		Unchanged: 0/0
 16108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16109 ;;      Params:         0       2       0       0       0       0       0       0       0
 16110 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16111 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16112 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16113 ;;Total ram usage:        3 bytes
 16114 ;; Hardware stack levels used:    1
 16115 ;; Hardware stack levels required when called:   11
 16116 ;; This function calls:
 16117 ;;		_f_sync
 16118 ;; This function is called by:
 16119 ;;		_escrita_sdcard
 16120 ;; This function uses a non-reentrant model
 16121 ;;
 16122                           
 16123                           	psect	text75
 16124  00515A                     __ptext75:
 16125                           	callstack 0
 16126  00515A                     _f_close:
 16127                           	callstack 16
 16128                           
 16129                           ; BSR set to: 0
 16130                           ;tff.c: 1120: FRESULT res;;tff.c: 1124: res = f_sync(fp);
 16131                           
 16132                           ;incstack = 0
 16133  00515A  C091  F088         	movff	f_close@fp,f_sync@fp
 16134  00515E  C092  F089         	movff	f_close@fp+1,f_sync@fp+1
 16135  005162  ECDB  F01B         	call	_f_sync	;wreg free
 16136  005166  6F93               	movwf	f_close@res& (0+255),b
 16137                           
 16138                           ; BSR set to: 0
 16139                           ;tff.c: 1128: if (res == FR_OK) fp->fs = (0);
 16140  005168  5193               	movf	f_close@res& (0+255),w,b
 16141  00516A  A4D8               	btfss	status,2,c
 16142  00516C  0012               	return	
 16143                           
 16144                           ; BSR set to: 0
 16145  00516E  EE20 F004          	lfsr	2,4
 16146  005172  5191               	movf	f_close@fp& (0+255),w,b
 16147  005174  26D9               	addwf	fsr2l,f,c
 16148  005176  5192               	movf	(f_close@fp+1)& (0+255),w,b
 16149  005178  22DA               	addwfc	fsr2h,f,c
 16150  00517A  0E00               	movlw	0
 16151  00517C  6EDE               	movwf	postinc2,c
 16152  00517E  0E00               	movlw	0
 16153  005180  6EDD               	movwf	postdec2,c
 16154                           
 16155                           ; BSR set to: 0
 16156  005182  0012               	return		;funcret
 16157  005184                     __end_of_f_close:
 16158                           	callstack 0
 16159                           
 16160 ;; *************** function _f_sync *****************
 16161 ;; Defined at:
 16162 ;;		line 1077 in file "bibliotecas/tff.c"
 16163 ;; Parameters:    Size  Location     Type
 16164 ;;  fp              2   40[BANK0 ] PTR struct _FIL
 16165 ;;		 -> fil(28), 
 16166 ;; Auto vars:     Size  Location     Type
 16167 ;;  tim             4   42[BANK0 ] unsigned long 
 16168 ;;  dir             2   47[BANK0 ] PTR unsigned char 
 16169 ;;		 -> NULL(0), fs(544), 
 16170 ;;  res             1   46[BANK0 ] enum E155
 16171 ;; Return value:  Size  Location     Type
 16172 ;;                  1    wreg      enum E155
 16173 ;; Registers used:
 16174 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16175 ;; Tracked objects:
 16176 ;;		On entry : 3F/0
 16177 ;;		On exit  : 3F/0
 16178 ;;		Unchanged: 0/0
 16179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16180 ;;      Params:         0       2       0       0       0       0       0       0       0
 16181 ;;      Locals:         0       7       0       0       0       0       0       0       0
 16182 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16183 ;;      Totals:         0       9       0       0       0       0       0       0       0
 16184 ;;Total ram usage:        9 bytes
 16185 ;; Hardware stack levels used:    1
 16186 ;; Hardware stack levels required when called:   10
 16187 ;; This function calls:
 16188 ;;		_get_fattime
 16189 ;;		_move_window
 16190 ;;		_sync
 16191 ;;		_validate
 16192 ;; This function is called by:
 16193 ;;		_f_close
 16194 ;; This function uses a non-reentrant model
 16195 ;;
 16196                           
 16197                           	psect	text76
 16198  0037B6                     __ptext76:
 16199                           	callstack 0
 16200  0037B6                     _f_sync:
 16201                           	callstack 16
 16202                           
 16203                           ; BSR set to: 0
 16204                           ;tff.c: 1081: FRESULT res;;tff.c: 1082: DWORD tim;;tff.c: 1083: BYTE *dir;;tff.c: 1086: 
      +                          res = validate(fp->fs, fp->id);
 16205                           
 16206                           ; BSR set to: 0
 16207                           ;incstack = 0
 16208  0037B6  EE20 F004          	lfsr	2,4
 16209  0037BA  5188               	movf	f_sync@fp& (0+255),w,b
 16210  0037BC  26D9               	addwf	fsr2l,f,c
 16211  0037BE  5189               	movf	(f_sync@fp+1)& (0+255),w,b
 16212  0037C0  22DA               	addwfc	fsr2h,f,c
 16213  0037C2  CFDE F01F          	movff	postinc2,validate@fs
 16214  0037C6  CFDD F020          	movff	postdec2,validate@fs+1
 16215  0037CA  C088  FFD9         	movff	f_sync@fp,fsr2l
 16216  0037CE  C089  FFDA         	movff	f_sync@fp+1,fsr2h
 16217  0037D2  CFDE F021          	movff	postinc2,validate@id
 16218  0037D6  CFDD F022          	movff	postdec2,validate@id+1
 16219  0037DA  ECDA  F026         	call	_validate	;wreg free
 16220  0037DE  0100               	movlb	0	; () banked
 16221  0037E0  6F8E               	movwf	f_sync@res& (0+255),b
 16222                           
 16223                           ; BSR set to: 0
 16224                           ;tff.c: 1087: if (res == FR_OK) {
 16225  0037E2  518E               	movf	f_sync@res& (0+255),w,b
 16226  0037E4  A4D8               	btfss	status,2,c
 16227  0037E6  D077               	goto	l11054
 16228                           
 16229                           ; BSR set to: 0
 16230                           ;tff.c: 1088: if (fp->flag & 0x20) {
 16231  0037E8  EE20 F002          	lfsr	2,2
 16232  0037EC  5188               	movf	f_sync@fp& (0+255),w,b
 16233  0037EE  26D9               	addwf	fsr2l,f,c
 16234  0037F0  5189               	movf	(f_sync@fp+1)& (0+255),w,b
 16235  0037F2  22DA               	addwfc	fsr2h,f,c
 16236  0037F4  AADF               	btfss	indf2,5,c
 16237  0037F6  D06F               	goto	l11054
 16238                           
 16239                           ; BSR set to: 0
 16240                           ;tff.c: 1090: if (!move_window(fp->dir_sect))
 16241  0037F8  EE20 F016          	lfsr	2,22
 16242  0037FC  5188               	movf	f_sync@fp& (0+255),w,b
 16243  0037FE  26D9               	addwf	fsr2l,f,c
 16244  003800  5189               	movf	(f_sync@fp+1)& (0+255),w,b
 16245  003802  22DA               	addwfc	fsr2h,f,c
 16246  003804  CFDE F073          	movff	postinc2,move_window@sector
 16247  003808  CFDE F074          	movff	postinc2,move_window@sector+1
 16248  00380C  CFDE F075          	movff	postinc2,move_window@sector+2
 16249  003810  CFDE F076          	movff	postinc2,move_window@sector+3
 16250  003814  EC08  F017         	call	_move_window	;wreg free
 16251  003818  0900               	iorlw	0
 16252  00381A  A4D8               	btfss	status,2,c
 16253  00381C  D002               	goto	l11040
 16254                           
 16255                           ; BSR set to: 0
 16256                           ;tff.c: 1091: return FR_RW_ERROR;
 16257  00381E  0E08               	movlw	8
 16258  003820  0012               	return	
 16259  003822                     l11040:
 16260                           
 16261                           ; BSR set to: 0
 16262                           ;tff.c: 1092: dir = fp->dir_ptr;
 16263  003822  EE20 F01A          	lfsr	2,26
 16264  003826  5188               	movf	f_sync@fp& (0+255),w,b
 16265  003828  26D9               	addwf	fsr2l,f,c
 16266  00382A  5189               	movf	(f_sync@fp+1)& (0+255),w,b
 16267  00382C  22DA               	addwfc	fsr2h,f,c
 16268  00382E  CFDE F08F          	movff	postinc2,f_sync@dir
 16269  003832  CFDD F090          	movff	postdec2,f_sync@dir+1
 16270                           
 16271                           ;tff.c: 1093: dir[11] |= 0x20;
 16272  003836  EE20 F00B          	lfsr	2,11
 16273  00383A  518F               	movf	f_sync@dir& (0+255),w,b
 16274  00383C  26D9               	addwf	fsr2l,f,c
 16275  00383E  5190               	movf	(f_sync@dir+1)& (0+255),w,b
 16276  003840  22DA               	addwfc	fsr2h,f,c
 16277  003842  0E00               	movlw	0
 16278  003844  8ADB               	bsf	plusw2,5,c
 16279                           
 16280                           ; BSR set to: 0
 16281                           ;tff.c: 1094: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(fp->fsize);
 16282  003846  EE20 F00A          	lfsr	2,10
 16283  00384A  5188               	movf	f_sync@fp& (0+255),w,b
 16284  00384C  26D9               	addwf	fsr2l,f,c
 16285  00384E  5189               	movf	(f_sync@fp+1)& (0+255),w,b
 16286  003850  22DA               	addwfc	fsr2h,f,c
 16287  003852  EE10 F01C          	lfsr	1,28
 16288  003856  518F               	movf	f_sync@dir& (0+255),w,b
 16289  003858  26E1               	addwf	fsr1l,f,c
 16290  00385A  5190               	movf	(f_sync@dir+1)& (0+255),w,b
 16291  00385C  22E2               	addwfc	fsr1h,f,c
 16292  00385E  CFDE FFE6          	movff	postinc2,postinc1
 16293  003862  CFDE FFE6          	movff	postinc2,postinc1
 16294  003866  CFDE FFE6          	movff	postinc2,postinc1
 16295  00386A  CFDE FFE6          	movff	postinc2,postinc1
 16296                           
 16297                           ; BSR set to: 0
 16298                           ;tff.c: 1095: *(WORD*)(BYTE*)(&dir[26])=(WORD)(fp->org_clust);
 16299  00386E  EE20 F00E          	lfsr	2,14
 16300  003872  5188               	movf	f_sync@fp& (0+255),w,b
 16301  003874  26D9               	addwf	fsr2l,f,c
 16302  003876  5189               	movf	(f_sync@fp+1)& (0+255),w,b
 16303  003878  22DA               	addwfc	fsr2h,f,c
 16304  00387A  EE10 F01A          	lfsr	1,26
 16305  00387E  518F               	movf	f_sync@dir& (0+255),w,b
 16306  003880  26E1               	addwf	fsr1l,f,c
 16307  003882  5190               	movf	(f_sync@dir+1)& (0+255),w,b
 16308  003884  22E2               	addwfc	fsr1h,f,c
 16309  003886  CFDE FFE6          	movff	postinc2,postinc1
 16310  00388A  CFDD FFE5          	movff	postdec2,postdec1
 16311                           
 16312                           ; BSR set to: 0
 16313                           ;tff.c: 1099: tim = get_fattime();
 16314  00388E  EC02  F01A         	call	_get_fattime	;wreg free
 16315  003892  C01D  F08A         	movff	?_get_fattime,f_sync@tim
 16316  003896  C01E  F08B         	movff	?_get_fattime+1,f_sync@tim+1
 16317  00389A  C01F  F08C         	movff	?_get_fattime+2,f_sync@tim+2
 16318  00389E  C020  F08D         	movff	?_get_fattime+3,f_sync@tim+3
 16319                           
 16320                           ; BSR set to: 0
 16321                           ;tff.c: 1100: *(DWORD*)(BYTE*)(&dir[22])=(DWORD)(tim);
 16322  0038A2  EE20 F016          	lfsr	2,22
 16323  0038A6  518F               	movf	f_sync@dir& (0+255),w,b
 16324  0038A8  26D9               	addwf	fsr2l,f,c
 16325  0038AA  5190               	movf	(f_sync@dir+1)& (0+255),w,b
 16326  0038AC  22DA               	addwfc	fsr2h,f,c
 16327  0038AE  C08A  FFDE         	movff	f_sync@tim,postinc2
 16328  0038B2  C08B  FFDE         	movff	f_sync@tim+1,postinc2
 16329  0038B6  C08C  FFDE         	movff	f_sync@tim+2,postinc2
 16330  0038BA  C08D  FFDE         	movff	f_sync@tim+3,postinc2
 16331                           
 16332                           ; BSR set to: 0
 16333                           ;tff.c: 1101: fp->flag &= (BYTE)~0x20;
 16334  0038BE  EE20 F002          	lfsr	2,2
 16335  0038C2  5188               	movf	f_sync@fp& (0+255),w,b
 16336  0038C4  26D9               	addwf	fsr2l,f,c
 16337  0038C6  5189               	movf	(f_sync@fp+1)& (0+255),w,b
 16338  0038C8  22DA               	addwfc	fsr2h,f,c
 16339  0038CA  0EDF               	movlw	223
 16340  0038CC  16DF               	andwf	indf2,f,c
 16341                           
 16342                           ; BSR set to: 0
 16343                           ;tff.c: 1102: res = sync();
 16344  0038CE  EC41  F026         	call	_sync	;wreg free
 16345  0038D2  0100               	movlb	0	; () banked
 16346  0038D4  6F8E               	movwf	f_sync@res& (0+255),b
 16347  0038D6                     l11054:
 16348                           
 16349                           ; BSR set to: 0
 16350                           ;tff.c: 1103: };tff.c: 1104: };tff.c: 1105: return res;
 16351  0038D6  518E               	movf	f_sync@res& (0+255),w,b
 16352                           
 16353                           ; BSR set to: 0
 16354  0038D8  0012               	return		;funcret
 16355  0038DA                     __end_of_f_sync:
 16356                           	callstack 0
 16357                           
 16358 ;; *************** function _validate *****************
 16359 ;; Defined at:
 16360 ;;		line 767 in file "bibliotecas/tff.c"
 16361 ;; Parameters:    Size  Location     Type
 16362 ;;  fs              2   30[COMRAM] PTR const struct _FATFS
 16363 ;;		 -> NULL(0), fs(544), 
 16364 ;;  id              2   32[COMRAM] unsigned short 
 16365 ;; Auto vars:     Size  Location     Type
 16366 ;;		None
 16367 ;; Return value:  Size  Location     Type
 16368 ;;                  1    wreg      enum E155
 16369 ;; Registers used:
 16370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16371 ;; Tracked objects:
 16372 ;;		On entry : 3F/0
 16373 ;;		On exit  : 0/0
 16374 ;;		Unchanged: 0/0
 16375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16376 ;;      Params:         4       0       0       0       0       0       0       0       0
 16377 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16378 ;;      Temps:          2       0       0       0       0       0       0       0       0
 16379 ;;      Totals:         6       0       0       0       0       0       0       0       0
 16380 ;;Total ram usage:        6 bytes
 16381 ;; Hardware stack levels used:    1
 16382 ;; Hardware stack levels required when called:    5
 16383 ;; This function calls:
 16384 ;;		_disk_status
 16385 ;; This function is called by:
 16386 ;;		_f_write
 16387 ;;		_f_sync
 16388 ;;		_f_lseek
 16389 ;;		_f_read
 16390 ;; This function uses a non-reentrant model
 16391 ;;
 16392                           
 16393                           	psect	text77
 16394  004DB4                     __ptext77:
 16395                           	callstack 0
 16396  004DB4                     _validate:
 16397                           	callstack 18
 16398                           
 16399                           ; BSR set to: 0
 16400                           ;tff.c: 772: if (!fs || !fs->fs_type || fs->id != id)
 16401                           
 16402                           ; BSR set to: 0
 16403                           ;incstack = 0
 16404  004DB4  501F               	movf	validate@fs^0,w,c
 16405  004DB6  1020               	iorwf	(validate@fs+1)^0,w,c
 16406  004DB8  B4D8               	btfsc	status,2,c
 16407  004DBA  D014               	goto	u11760
 16408                           
 16409                           ; BSR set to: 0
 16410  004DBC  EE20 F01C          	lfsr	2,28
 16411  004DC0  501F               	movf	validate@fs^0,w,c
 16412  004DC2  26D9               	addwf	fsr2l,f,c
 16413  004DC4  5020               	movf	(validate@fs+1)^0,w,c
 16414  004DC6  22DA               	addwfc	fsr2h,f,c
 16415  004DC8  50DF               	movf	indf2,w,c
 16416  004DCA  B4D8               	btfsc	status,2,c
 16417  004DCC  D00B               	goto	u11760
 16418                           
 16419                           ; BSR set to: 0
 16420  004DCE  C01F  FFD9         	movff	validate@fs,fsr2l
 16421  004DD2  C020  FFDA         	movff	validate@fs+1,fsr2h
 16422  004DD6  5021               	movf	validate@id^0,w,c
 16423  004DD8  18DE               	xorwf	postinc2,w,c
 16424  004DDA  E104               	bnz	u11760
 16425  004DDC  5022               	movf	(validate@id+1)^0,w,c
 16426  004DDE  18DE               	xorwf	postinc2,w,c
 16427  004DE0  B4D8               	btfsc	status,2,c
 16428  004DE2  D002               	goto	l10152
 16429  004DE4                     u11760:
 16430                           
 16431                           ; BSR set to: 0
 16432                           ;tff.c: 773: return FR_INVALID_OBJECT;
 16433  004DE4  0E0C               	movlw	12
 16434  004DE6  0012               	return	
 16435  004DE8                     l10152:
 16436                           
 16437                           ; BSR set to: 0
 16438                           ;tff.c: 774: if (disk_status(0) & 0x01)
 16439  004DE8  0E00               	movlw	0
 16440  004DEA  EC52  F028         	call	_disk_status
 16441  004DEE  6E23               	movwf	??_validate^0,c
 16442  004DF0  A023               	btfss	??_validate^0,0,c
 16443  004DF2  D002               	goto	l10158
 16444                           
 16445                           ;tff.c: 775: return FR_NOT_READY;
 16446  004DF4  0E01               	movlw	1
 16447  004DF6  0012               	return	
 16448  004DF8                     l10158:
 16449                           
 16450                           ;tff.c: 777: return FR_OK;
 16451  004DF8  0E00               	movlw	0
 16452  004DFA  0012               	return		;funcret
 16453  004DFC                     __end_of_validate:
 16454                           	callstack 0
 16455                           
 16456 ;; *************** function _disk_status *****************
 16457 ;; Defined at:
 16458 ;;		line 27 in file "bibliotecas/diskio.c"
 16459 ;; Parameters:    Size  Location     Type
 16460 ;;  pdrv            1    wreg     unsigned char 
 16461 ;; Auto vars:     Size  Location     Type
 16462 ;;  pdrv            1   28[COMRAM] unsigned char 
 16463 ;;  result          2    0        int 
 16464 ;;  stat            1   29[COMRAM] unsigned char 
 16465 ;; Return value:  Size  Location     Type
 16466 ;;                  1    wreg      unsigned char 
 16467 ;; Registers used:
 16468 ;;		wreg, status,2, status,0, cstack
 16469 ;; Tracked objects:
 16470 ;;		On entry : 3F/0
 16471 ;;		On exit  : 0/0
 16472 ;;		Unchanged: 0/0
 16473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16474 ;;      Params:         0       0       0       0       0       0       0       0       0
 16475 ;;      Locals:         4       0       0       0       0       0       0       0       0
 16476 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16477 ;;      Totals:         4       0       0       0       0       0       0       0       0
 16478 ;;Total ram usage:        4 bytes
 16479 ;; Hardware stack levels used:    1
 16480 ;; Hardware stack levels required when called:    4
 16481 ;; This function calls:
 16482 ;;		_sdc_disk_status
 16483 ;; This function is called by:
 16484 ;;		_auto_mount
 16485 ;;		_validate
 16486 ;; This function uses a non-reentrant model
 16487 ;;
 16488                           
 16489                           	psect	text78
 16490  0050A4                     __ptext78:
 16491                           	callstack 0
 16492  0050A4                     _disk_status:
 16493                           	callstack 18
 16494                           
 16495                           ;incstack = 0
 16496                           ;disk_status@pdrv stored from wreg
 16497  0050A4  6E1D               	movwf	disk_status@pdrv^0,c
 16498                           
 16499                           ;diskio.c: 31: DSTATUS stat;;diskio.c: 32: int result;;diskio.c: 34: switch (pdrv) {
 16500  0050A6  D00A               	goto	l9862
 16501  0050A8                     l9844:
 16502                           
 16503                           ;diskio.c: 36: stat = sdc_disk_status(pdrv);
 16504  0050A8  501D               	movf	disk_status@pdrv^0,w,c
 16505  0050AA  EC05  F02A         	call	_sdc_disk_status
 16506  0050AE  6E1E               	movwf	disk_status@stat^0,c
 16507  0050B0                     l9846:
 16508                           
 16509                           ;diskio.c: 39: return stat;
 16510  0050B0  501E               	movf	disk_status@stat^0,w,c
 16511  0050B2  0012               	return	
 16512  0050B4                     l9850:
 16513  0050B4  501D               	movf	disk_status@pdrv^0,w,c
 16514  0050B6  EC05  F02A         	call	_sdc_disk_status
 16515  0050BA  D7FA               	goto	l9846
 16516  0050BC                     l9862:
 16517  0050BC  501D               	movf	disk_status@pdrv^0,w,c
 16518                           
 16519                           ; Switch size 1, requested type "simple"
 16520                           ; Number of cases is 3, Range of values is 0 to 2
 16521                           ; switch strategies available:
 16522                           ; Name         Instructions Cycles
 16523                           ; simple_byte           10     6 (average)
 16524                           ;	Chosen strategy is simple_byte
 16525  0050BE  0A00               	xorlw	0	; case 0
 16526  0050C0  B4D8               	btfsc	status,2,c
 16527  0050C2  D7F2               	goto	l9844
 16528  0050C4  0A01               	xorlw	1	; case 1
 16529  0050C6  B4D8               	btfsc	status,2,c
 16530  0050C8  D7F5               	goto	l9850
 16531  0050CA  0A03               	xorlw	3	; case 2
 16532  0050CC  B4D8               	btfsc	status,2,c
 16533  0050CE  D7F0               	goto	l9846
 16534                           
 16535                           ;diskio.c: 50: return 0x01;
 16536  0050D0  0E01               	movlw	1
 16537  0050D2  0012               	return		;funcret
 16538  0050D4                     __end_of_disk_status:
 16539                           	callstack 0
 16540                           
 16541 ;; *************** function _sdc_disk_status *****************
 16542 ;; Defined at:
 16543 ;;		line 588 in file "bibliotecas/diskio.c"
 16544 ;; Parameters:    Size  Location     Type
 16545 ;;  pdrv            1    wreg     unsigned char 
 16546 ;; Auto vars:     Size  Location     Type
 16547 ;;  pdrv            1   25[COMRAM] unsigned char 
 16548 ;;  stat            1    0        unsigned char 
 16549 ;;  cont            1    0        unsigned char 
 16550 ;;  buff            1    0        unsigned char 
 16551 ;; Return value:  Size  Location     Type
 16552 ;;                  1    wreg      unsigned char 
 16553 ;; Registers used:
 16554 ;;		wreg, status,2
 16555 ;; Tracked objects:
 16556 ;;		On entry : 0/0
 16557 ;;		On exit  : 0/0
 16558 ;;		Unchanged: 0/0
 16559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16560 ;;      Params:         0       0       0       0       0       0       0       0       0
 16561 ;;      Locals:         2       0       0       0       0       0       0       0       0
 16562 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16563 ;;      Totals:         2       0       0       0       0       0       0       0       0
 16564 ;;Total ram usage:        2 bytes
 16565 ;; Hardware stack levels used:    1
 16566 ;; Hardware stack levels required when called:    3
 16567 ;; This function calls:
 16568 ;;		Nothing
 16569 ;; This function is called by:
 16570 ;;		_disk_status
 16571 ;; This function uses a non-reentrant model
 16572 ;;
 16573                           
 16574                           	psect	text79
 16575  00540A                     __ptext79:
 16576                           	callstack 0
 16577  00540A                     _sdc_disk_status:
 16578                           	callstack 18
 16579                           
 16580                           ;incstack = 0
 16581                           ;sdc_disk_status@pdrv stored from wreg
 16582  00540A  6E1A               	movwf	sdc_disk_status@pdrv^0,c
 16583                           
 16584                           ;diskio.c: 591: unsigned char buff, cont;;diskio.c: 593: if (pdrv != 0) return 0x01;
 16585  00540C  501A               	movf	sdc_disk_status@pdrv^0,w,c
 16586  00540E  B4D8               	btfsc	status,2,c
 16587  005410  D002               	goto	l9720
 16588  005412  0E01               	movlw	1
 16589  005414  0012               	return	
 16590  005416                     l9720:
 16591                           
 16592                           ;diskio.c: 595: return FR_OK;
 16593  005416  0E00               	movlw	0
 16594  005418  0012               	return		;funcret
 16595  00541A                     __end_of_sdc_disk_status:
 16596                           	callstack 0
 16597                           
 16598 ;; *************** function _sync *****************
 16599 ;; Defined at:
 16600 ;;		line 119 in file "bibliotecas/tff.c"
 16601 ;; Parameters:    Size  Location     Type
 16602 ;;		None
 16603 ;; Auto vars:     Size  Location     Type
 16604 ;;  fs              2   48[COMRAM] PTR struct _FATFS
 16605 ;;		 -> NULL(0), fs(544), 
 16606 ;; Return value:  Size  Location     Type
 16607 ;;                  1    wreg      enum E155
 16608 ;; Registers used:
 16609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16610 ;; Tracked objects:
 16611 ;;		On entry : 3F/0
 16612 ;;		On exit  : 0/0
 16613 ;;		Unchanged: 0/0
 16614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16615 ;;      Params:         0       0       0       0       0       0       0       0       0
 16616 ;;      Locals:         2       0       0       0       0       0       0       0       0
 16617 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16618 ;;      Totals:         2       0       0       0       0       0       0       0       0
 16619 ;;Total ram usage:        2 bytes
 16620 ;; Hardware stack levels used:    1
 16621 ;; Hardware stack levels required when called:    9
 16622 ;; This function calls:
 16623 ;;		_disk_ioctl
 16624 ;;		_move_window
 16625 ;; This function is called by:
 16626 ;;		_f_sync
 16627 ;; This function uses a non-reentrant model
 16628 ;;
 16629                           
 16630                           	psect	text80
 16631  004C82                     __ptext80:
 16632                           	callstack 0
 16633  004C82                     _sync:
 16634                           	callstack 16
 16635                           
 16636                           ; BSR set to: 0
 16637                           ;tff.c: 121: FATFS *fs = FatFs;
 16638                           
 16639                           ;incstack = 0
 16640  004C82  C038  F031         	movff	_FatFs,sync@fs
 16641  004C86  C039  F032         	movff	_FatFs+1,sync@fs+1
 16642                           
 16643                           ; BSR set to: 0
 16644                           ;tff.c: 124: fs->winflag = 1;
 16645  004C8A  EE20 F01F          	lfsr	2,31
 16646  004C8E  5031               	movf	sync@fs^0,w,c
 16647  004C90  26D9               	addwf	fsr2l,f,c
 16648  004C92  5032               	movf	(sync@fs+1)^0,w,c
 16649  004C94  22DA               	addwfc	fsr2h,f,c
 16650  004C96  0E01               	movlw	1
 16651  004C98  6EDF               	movwf	indf2,c
 16652                           
 16653                           ; BSR set to: 0
 16654                           ;tff.c: 125: if (!move_window(0)) return FR_RW_ERROR;
 16655  004C9A  0E00               	movlw	0
 16656  004C9C  6F73               	movwf	move_window@sector& (0+255),b
 16657  004C9E  0E00               	movlw	0
 16658  004CA0  6F74               	movwf	(move_window@sector+1)& (0+255),b
 16659  004CA2  0E00               	movlw	0
 16660  004CA4  6F75               	movwf	(move_window@sector+2)& (0+255),b
 16661  004CA6  0E00               	movlw	0
 16662  004CA8  6F76               	movwf	(move_window@sector+3)& (0+255),b
 16663  004CAA  EC08  F017         	call	_move_window	;wreg free
 16664  004CAE  0900               	iorlw	0
 16665  004CB0  A4D8               	btfss	status,2,c
 16666  004CB2  D002               	goto	l10536
 16667  004CB4                     u12280:
 16668  004CB4  0E08               	movlw	8
 16669  004CB6  0012               	return	
 16670  004CB8                     l10536:
 16671                           
 16672                           ; BSR set to: 0
 16673                           ;tff.c: 141: if (disk_ioctl(0, 0, (0)) != RES_OK)
 16674  004CB8  0E00               	movlw	0
 16675  004CBA  6E19               	movwf	disk_ioctl@cmd^0,c
 16676  004CBC  0E00               	movlw	0
 16677  004CBE  6E1A               	movwf	disk_ioctl@buff^0,c
 16678  004CC0  0E00               	movlw	0
 16679  004CC2  6E1B               	movwf	(disk_ioctl@buff+1)^0,c
 16680  004CC4  0E00               	movlw	0
 16681  004CC6  EC85  F029         	call	_disk_ioctl
 16682  004CCA  0900               	iorlw	0
 16683  004CCC  A4D8               	btfss	status,2,c
 16684  004CCE  D7F2               	goto	u12280
 16685                           
 16686                           ;tff.c: 143: return FR_OK;
 16687  004CD0  0E00               	movlw	0
 16688  004CD2  0012               	return		;funcret
 16689  004CD4                     __end_of_sync:
 16690                           	callstack 0
 16691                           
 16692 ;; *************** function _move_window *****************
 16693 ;; Defined at:
 16694 ;;		line 77 in file "bibliotecas/tff.c"
 16695 ;; Parameters:    Size  Location     Type
 16696 ;;  sector          4   19[BANK0 ] unsigned long 
 16697 ;; Auto vars:     Size  Location     Type
 16698 ;;  n               1   33[BANK0 ] unsigned char 
 16699 ;;  wsect           4   34[BANK0 ] unsigned long 
 16700 ;;  fs              2   38[BANK0 ] PTR struct _FATFS
 16701 ;;		 -> NULL(0), fs(544), 
 16702 ;; Return value:  Size  Location     Type
 16703 ;;                  1    wreg      enum E105
 16704 ;; Registers used:
 16705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16706 ;; Tracked objects:
 16707 ;;		On entry : 3F/0
 16708 ;;		On exit  : 3F/0
 16709 ;;		Unchanged: 0/0
 16710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16711 ;;      Params:         0       4       0       0       0       0       0       0       0
 16712 ;;      Locals:         0       7       0       0       0       0       0       0       0
 16713 ;;      Temps:          0      10       0       0       0       0       0       0       0
 16714 ;;      Totals:         0      21       0       0       0       0       0       0       0
 16715 ;;Total ram usage:       21 bytes
 16716 ;; Hardware stack levels used:    1
 16717 ;; Hardware stack levels required when called:    8
 16718 ;; This function calls:
 16719 ;;		_disk_read
 16720 ;;		_disk_write
 16721 ;; This function is called by:
 16722 ;;		_sync
 16723 ;;		_get_cluster
 16724 ;;		_put_cluster
 16725 ;;		_trace_path
 16726 ;;		_reserve_direntry
 16727 ;;		_f_open
 16728 ;;		_f_write
 16729 ;;		_f_sync
 16730 ;;		_f_read
 16731 ;; This function uses a non-reentrant model
 16732 ;;
 16733                           
 16734                           	psect	text81
 16735  002E10                     __ptext81:
 16736                           	callstack 0
 16737  002E10                     _move_window:
 16738                           	callstack 15
 16739                           
 16740                           ; BSR set to: 0
 16741                           ;tff.c: 81: DWORD wsect;;tff.c: 82: FATFS *fs = FatFs;
 16742                           
 16743                           ;incstack = 0
 16744  002E10  C038  F086         	movff	_FatFs,move_window@fs
 16745  002E14  C039  F087         	movff	_FatFs+1,move_window@fs+1
 16746                           
 16747                           ; BSR set to: 0
 16748                           ;tff.c: 85: wsect = fs->winsect;
 16749  002E18  EE20 F004          	lfsr	2,4
 16750  002E1C  5186               	movf	move_window@fs& (0+255),w,b
 16751  002E1E  26D9               	addwf	fsr2l,f,c
 16752  002E20  5187               	movf	(move_window@fs+1)& (0+255),w,b
 16753  002E22  22DA               	addwfc	fsr2h,f,c
 16754  002E24  CFDE F082          	movff	postinc2,move_window@wsect
 16755  002E28  CFDE F083          	movff	postinc2,move_window@wsect+1
 16756  002E2C  CFDE F084          	movff	postinc2,move_window@wsect+2
 16757  002E30  CFDE F085          	movff	postinc2,move_window@wsect+3
 16758                           
 16759                           ; BSR set to: 0
 16760                           ;tff.c: 86: if (wsect != sector) {
 16761  002E34  5173               	movf	move_window@sector& (0+255),w,b
 16762  002E36  1982               	xorwf	move_window@wsect& (0+255),w,b
 16763  002E38  E10A               	bnz	u11250
 16764  002E3A  5174               	movf	(move_window@sector+1)& (0+255),w,b
 16765  002E3C  1983               	xorwf	(move_window@wsect+1)& (0+255),w,b
 16766  002E3E  E107               	bnz	u11250
 16767  002E40  5175               	movf	(move_window@sector+2)& (0+255),w,b
 16768  002E42  1984               	xorwf	(move_window@wsect+2)& (0+255),w,b
 16769  002E44  E104               	bnz	u11250
 16770  002E46  5176               	movf	(move_window@sector+3)& (0+255),w,b
 16771  002E48  1985               	xorwf	(move_window@wsect+3)& (0+255),w,b
 16772  002E4A  B4D8               	btfsc	status,2,c
 16773  002E4C  D0B4               	goto	l9832
 16774  002E4E                     u11250:
 16775                           
 16776                           ; BSR set to: 0
 16777                           ;tff.c: 88: BYTE n;;tff.c: 89: if (fs->winflag) {
 16778  002E4E  EE20 F01F          	lfsr	2,31
 16779  002E52  5186               	movf	move_window@fs& (0+255),w,b
 16780  002E54  26D9               	addwf	fsr2l,f,c
 16781  002E56  5187               	movf	(move_window@fs+1)& (0+255),w,b
 16782  002E58  22DA               	addwfc	fsr2h,f,c
 16783  002E5A  50DF               	movf	indf2,w,c
 16784  002E5C  B4D8               	btfsc	status,2,c
 16785  002E5E  D081               	goto	l9822
 16786                           
 16787                           ; BSR set to: 0
 16788                           ;tff.c: 90: if (disk_write(0, fs->win, wsect, 1) != RES_OK)
 16789  002E60  0E20               	movlw	32
 16790  002E62  2586               	addwf	move_window@fs& (0+255),w,b
 16791  002E64  6F68               	movwf	disk_write@buff& (0+255),b
 16792  002E66  0E00               	movlw	0
 16793  002E68  2187               	addwfc	(move_window@fs+1)& (0+255),w,b
 16794  002E6A  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 16795  002E6C  C082  F06A         	movff	move_window@wsect,disk_write@sector
 16796  002E70  C083  F06B         	movff	move_window@wsect+1,disk_write@sector+1
 16797  002E74  C084  F06C         	movff	move_window@wsect+2,disk_write@sector+2
 16798  002E78  C085  F06D         	movff	move_window@wsect+3,disk_write@sector+3
 16799  002E7C  0E01               	movlw	1
 16800  002E7E  6F6E               	movwf	disk_write@count& (0+255),b
 16801  002E80  0E00               	movlw	0
 16802  002E82  EC6A  F026         	call	_disk_write
 16803  002E86  0900               	iorlw	0
 16804  002E88  B4D8               	btfsc	status,2,c
 16805  002E8A  D002               	goto	l9806
 16806  002E8C                     u11270:
 16807                           
 16808                           ; BSR set to: 0
 16809                           ;tff.c: 91: return FALSE;
 16810  002E8C  0E00               	movlw	0
 16811  002E8E  0012               	return	
 16812  002E90                     l9806:
 16813                           
 16814                           ; BSR set to: 0
 16815                           ;tff.c: 92: fs->winflag = 0;
 16816  002E90  EE20 F01F          	lfsr	2,31
 16817  002E94  5186               	movf	move_window@fs& (0+255),w,b
 16818  002E96  26D9               	addwf	fsr2l,f,c
 16819  002E98  5187               	movf	(move_window@fs+1)& (0+255),w,b
 16820  002E9A  22DA               	addwfc	fsr2h,f,c
 16821  002E9C  0E00               	movlw	0
 16822  002E9E  6EDF               	movwf	indf2,c
 16823                           
 16824                           ;tff.c: 93: if (wsect < (fs->fatbase + fs->sects_fat)) {
 16825  002EA0  EE20 F008          	lfsr	2,8
 16826  002EA4  5186               	movf	move_window@fs& (0+255),w,b
 16827  002EA6  26D9               	addwf	fsr2l,f,c
 16828  002EA8  5187               	movf	(move_window@fs+1)& (0+255),w,b
 16829  002EAA  22DA               	addwfc	fsr2h,f,c
 16830  002EAC  CFDE F077          	movff	postinc2,??_move_window
 16831  002EB0  CFDE F078          	movff	postinc2,??_move_window+1
 16832  002EB4  CFDE F079          	movff	postinc2,??_move_window+2
 16833  002EB8  CFDE F07A          	movff	postinc2,??_move_window+3
 16834  002EBC  EE20 F014          	lfsr	2,20
 16835  002EC0  5186               	movf	move_window@fs& (0+255),w,b
 16836  002EC2  26D9               	addwf	fsr2l,f,c
 16837  002EC4  5187               	movf	(move_window@fs+1)& (0+255),w,b
 16838  002EC6  22DA               	addwfc	fsr2h,f,c
 16839  002EC8  CFDE F07B          	movff	postinc2,??_move_window+4
 16840  002ECC  CFDD F07C          	movff	postdec2,??_move_window+5
 16841  002ED0  517B               	movf	(??_move_window+4)& (0+255),w,b
 16842  002ED2  2577               	addwf	??_move_window& (0+255),w,b
 16843  002ED4  6F7D               	movwf	(??_move_window+6)& (0+255),b
 16844  002ED6  517C               	movf	(??_move_window+5)& (0+255),w,b
 16845  002ED8  2178               	addwfc	(??_move_window+1)& (0+255),w,b
 16846  002EDA  6F7E               	movwf	(??_move_window+7)& (0+255),b
 16847  002EDC  0E00               	movlw	0
 16848  002EDE  2179               	addwfc	(??_move_window+2)& (0+255),w,b
 16849  002EE0  6F7F               	movwf	(??_move_window+8)& (0+255),b
 16850  002EE2  0E00               	movlw	0
 16851  002EE4  217A               	addwfc	(??_move_window+3)& (0+255),w,b
 16852  002EE6  6F80               	movwf	(??_move_window+9)& (0+255),b
 16853  002EE8  517D               	movf	(??_move_window+6)& (0+255),w,b
 16854  002EEA  5D82               	subwf	move_window@wsect& (0+255),w,b
 16855  002EEC  517E               	movf	(??_move_window+7)& (0+255),w,b
 16856  002EEE  5983               	subwfb	(move_window@wsect+1)& (0+255),w,b
 16857  002EF0  517F               	movf	(??_move_window+8)& (0+255),w,b
 16858  002EF2  5984               	subwfb	(move_window@wsect+2)& (0+255),w,b
 16859  002EF4  5180               	movf	(??_move_window+9)& (0+255),w,b
 16860  002EF6  5985               	subwfb	(move_window@wsect+3)& (0+255),w,b
 16861  002EF8  B0D8               	btfsc	status,0,c
 16862  002EFA  D033               	goto	l9822
 16863                           
 16864                           ; BSR set to: 0
 16865                           ;tff.c: 94: for (n = fs->n_fats; n >= 2; n--) {
 16866  002EFC  EE20 F01E          	lfsr	2,30
 16867  002F00  5186               	movf	move_window@fs& (0+255),w,b
 16868  002F02  26D9               	addwf	fsr2l,f,c
 16869  002F04  5187               	movf	(move_window@fs+1)& (0+255),w,b
 16870  002F06  22DA               	addwfc	fsr2h,f,c
 16871  002F08  50DF               	movf	indf2,w,c
 16872  002F0A  6F81               	movwf	move_window@n& (0+255),b
 16873  002F0C                     l9810:
 16874                           
 16875                           ; BSR set to: 0
 16876  002F0C  0E02               	movlw	2
 16877  002F0E  6181               	cpfslt	move_window@n& (0+255),b
 16878  002F10  D001               	goto	l9814
 16879  002F12  D027               	goto	l9822
 16880  002F14                     l9814:
 16881                           
 16882                           ; BSR set to: 0
 16883                           ;tff.c: 95: wsect += fs->sects_fat;
 16884  002F14  EE20 F014          	lfsr	2,20
 16885  002F18  5186               	movf	move_window@fs& (0+255),w,b
 16886  002F1A  26D9               	addwf	fsr2l,f,c
 16887  002F1C  5187               	movf	(move_window@fs+1)& (0+255),w,b
 16888  002F1E  22DA               	addwfc	fsr2h,f,c
 16889  002F20  CFDE F077          	movff	postinc2,??_move_window
 16890  002F24  CFDD F078          	movff	postdec2,??_move_window+1
 16891  002F28  5177               	movf	??_move_window& (0+255),w,b
 16892  002F2A  2782               	addwf	move_window@wsect& (0+255),f,b
 16893  002F2C  5178               	movf	(??_move_window+1)& (0+255),w,b
 16894  002F2E  2383               	addwfc	(move_window@wsect+1)& (0+255),f,b
 16895  002F30  0E00               	movlw	0
 16896  002F32  2384               	addwfc	(move_window@wsect+2)& (0+255),f,b
 16897  002F34  0E00               	movlw	0
 16898  002F36  2385               	addwfc	(move_window@wsect+3)& (0+255),f,b
 16899                           
 16900                           ; BSR set to: 0
 16901                           ;tff.c: 96: disk_write(0, fs->win, wsect, 1);
 16902  002F38  0E20               	movlw	32
 16903  002F3A  2586               	addwf	move_window@fs& (0+255),w,b
 16904  002F3C  6F68               	movwf	disk_write@buff& (0+255),b
 16905  002F3E  0E00               	movlw	0
 16906  002F40  2187               	addwfc	(move_window@fs+1)& (0+255),w,b
 16907  002F42  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 16908  002F44  C082  F06A         	movff	move_window@wsect,disk_write@sector
 16909  002F48  C083  F06B         	movff	move_window@wsect+1,disk_write@sector+1
 16910  002F4C  C084  F06C         	movff	move_window@wsect+2,disk_write@sector+2
 16911  002F50  C085  F06D         	movff	move_window@wsect+3,disk_write@sector+3
 16912  002F54  0E01               	movlw	1
 16913  002F56  6F6E               	movwf	disk_write@count& (0+255),b
 16914  002F58  0E00               	movlw	0
 16915  002F5A  EC6A  F026         	call	_disk_write
 16916                           
 16917                           ; BSR set to: 0
 16918  002F5E  0781               	decf	move_window@n& (0+255),f,b
 16919  002F60  D7D5               	goto	l9810
 16920  002F62                     l9822:
 16921                           
 16922                           ; BSR set to: 0
 16923                           ;tff.c: 97: };tff.c: 98: };tff.c: 99: };tff.c: 101: if (sector) {
 16924  002F62  5173               	movf	move_window@sector& (0+255),w,b
 16925  002F64  1174               	iorwf	(move_window@sector+1)& (0+255),w,b
 16926  002F66  1175               	iorwf	(move_window@sector+2)& (0+255),w,b
 16927  002F68  1176               	iorwf	(move_window@sector+3)& (0+255),w,b
 16928  002F6A  B4D8               	btfsc	status,2,c
 16929  002F6C  D024               	goto	l9832
 16930                           
 16931                           ; BSR set to: 0
 16932                           ;tff.c: 102: if (disk_read(0, fs->win, sector, 1) != RES_OK)
 16933  002F6E  0E20               	movlw	32
 16934  002F70  2586               	addwf	move_window@fs& (0+255),w,b
 16935  002F72  6F68               	movwf	disk_read@buff& (0+255),b
 16936  002F74  0E00               	movlw	0
 16937  002F76  2187               	addwfc	(move_window@fs+1)& (0+255),w,b
 16938  002F78  6F69               	movwf	(disk_read@buff+1)& (0+255),b
 16939  002F7A  C073  F06A         	movff	move_window@sector,disk_read@sector
 16940  002F7E  C074  F06B         	movff	move_window@sector+1,disk_read@sector+1
 16941  002F82  C075  F06C         	movff	move_window@sector+2,disk_read@sector+2
 16942  002F86  C076  F06D         	movff	move_window@sector+3,disk_read@sector+3
 16943  002F8A  0E01               	movlw	1
 16944  002F8C  6F6E               	movwf	disk_read@count& (0+255),b
 16945  002F8E  0E00               	movlw	0
 16946  002F90  EC68  F024         	call	_disk_read
 16947  002F94  0900               	iorlw	0
 16948  002F96  A4D8               	btfss	status,2,c
 16949  002F98  D779               	goto	u11270
 16950                           
 16951                           ; BSR set to: 0
 16952                           ;tff.c: 104: fs->winsect = sector;
 16953  002F9A  EE20 F004          	lfsr	2,4
 16954  002F9E  5186               	movf	move_window@fs& (0+255),w,b
 16955  002FA0  26D9               	addwf	fsr2l,f,c
 16956  002FA2  5187               	movf	(move_window@fs+1)& (0+255),w,b
 16957  002FA4  22DA               	addwfc	fsr2h,f,c
 16958  002FA6  C073  FFDE         	movff	move_window@sector,postinc2
 16959  002FAA  C074  FFDE         	movff	move_window@sector+1,postinc2
 16960  002FAE  C075  FFDE         	movff	move_window@sector+2,postinc2
 16961  002FB2  C076  FFDE         	movff	move_window@sector+3,postinc2
 16962  002FB6                     l9832:
 16963                           
 16964                           ; BSR set to: 0
 16965                           ;tff.c: 105: };tff.c: 106: };tff.c: 107: return TRUE;
 16966  002FB6  0E01               	movlw	1
 16967                           
 16968                           ; BSR set to: 0
 16969  002FB8  0012               	return		;funcret
 16970  002FBA                     __end_of_move_window:
 16971                           	callstack 0
 16972                           
 16973 ;; *************** function _disk_write *****************
 16974 ;; Defined at:
 16975 ;;		line 150 in file "bibliotecas/diskio.c"
 16976 ;; Parameters:    Size  Location     Type
 16977 ;;  pdrv            1    wreg     unsigned char 
 16978 ;;  buff            2    8[BANK0 ] PTR const unsigned char 
 16979 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 16980 ;;  sector          4   10[BANK0 ] unsigned long 
 16981 ;;  count           1   14[BANK0 ] unsigned char 
 16982 ;; Auto vars:     Size  Location     Type
 16983 ;;  pdrv            1   15[BANK0 ] unsigned char 
 16984 ;;  result          2   16[BANK0 ] int 
 16985 ;;  res             1   18[BANK0 ] enum E25
 16986 ;; Return value:  Size  Location     Type
 16987 ;;                  1    wreg      enum E25
 16988 ;; Registers used:
 16989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16990 ;; Tracked objects:
 16991 ;;		On entry : 3F/0
 16992 ;;		On exit  : 3F/0
 16993 ;;		Unchanged: 0/0
 16994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16995 ;;      Params:         0       7       0       0       0       0       0       0       0
 16996 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16997 ;;      Temps:          1       0       0       0       0       0       0       0       0
 16998 ;;      Totals:         1      11       0       0       0       0       0       0       0
 16999 ;;Total ram usage:       12 bytes
 17000 ;; Hardware stack levels used:    1
 17001 ;; Hardware stack levels required when called:    7
 17002 ;; This function calls:
 17003 ;;		_sdc_disk_write
 17004 ;; This function is called by:
 17005 ;;		_move_window
 17006 ;;		_reserve_direntry
 17007 ;;		_f_write
 17008 ;; This function uses a non-reentrant model
 17009 ;;
 17010                           
 17011                           	psect	text82
 17012  004CD4                     __ptext82:
 17013                           	callstack 0
 17014  004CD4                     _disk_write:
 17015                           	callstack 15
 17016                           
 17017                           ; BSR set to: 0
 17018                           ;incstack = 0
 17019                           ;disk_write@pdrv stored from wreg
 17020  004CD4  6F6F               	movwf	disk_write@pdrv& (0+255),b
 17021                           
 17022                           ;diskio.c: 157: DRESULT res;;diskio.c: 158: int result;;diskio.c: 160: switch (pdrv) {
 17023  004CD6  D018               	goto	l9686
 17024  004CD8                     l9664:
 17025                           
 17026                           ; BSR set to: 0
 17027                           ;diskio.c: 163: result = sdc_disk_write(buff, sector, count);
 17028  004CD8  C068  F025         	movff	disk_write@buff,sdc_disk_write@p_buff
 17029  004CDC  C069  F026         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 17030  004CE0  C06A  F027         	movff	disk_write@sector,sdc_disk_write@sector
 17031  004CE4  C06B  F028         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 17032  004CE8  C06C  F029         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 17033  004CEC  C06D  F02A         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 17034  004CF0  C06E  F02B         	movff	disk_write@count,sdc_disk_write@count
 17035  004CF4  EC56  F015         	call	_sdc_disk_write	;wreg free
 17036  004CF8  6E30               	movwf	??_disk_write^0,c
 17037  004CFA  5030               	movf	??_disk_write^0,w,c
 17038  004CFC  6F70               	movwf	disk_write@result& (0+255),b
 17039  004CFE  6B71               	clrf	(disk_write@result+1)& (0+255),b
 17040                           
 17041                           ; BSR set to: 0
 17042                           ;diskio.c: 165: res = result;
 17043  004D00  C070  F072         	movff	disk_write@result,disk_write@res
 17044  004D04                     l9668:
 17045                           
 17046                           ; BSR set to: 0
 17047                           ;diskio.c: 168: return res;
 17048  004D04  5172               	movf	disk_write@res& (0+255),w,b
 17049  004D06  0012               	return	
 17050  004D08                     l9686:
 17051  004D08  0100               	movlb	0	; () banked
 17052  004D0A  516F               	movf	disk_write@pdrv& (0+255),w,b
 17053                           
 17054                           ; Switch size 1, requested type "simple"
 17055                           ; Number of cases is 3, Range of values is 0 to 2
 17056                           ; switch strategies available:
 17057                           ; Name         Instructions Cycles
 17058                           ; simple_byte           10     6 (average)
 17059                           ;	Chosen strategy is simple_byte
 17060  004D0C  0A00               	xorlw	0	; case 0
 17061  004D0E  B4D8               	btfsc	status,2,c
 17062  004D10  D7E3               	goto	l9664
 17063  004D12  0A01               	xorlw	1	; case 1
 17064  004D14  B4D8               	btfsc	status,2,c
 17065  004D16  D7E0               	goto	l9664
 17066  004D18  0A03               	xorlw	3	; case 2
 17067  004D1A  B4D8               	btfsc	status,2,c
 17068  004D1C  D7F3               	goto	l9668
 17069                           
 17070                           ; BSR set to: 0
 17071                           ;diskio.c: 189: return RES_PARERR;
 17072  004D1E  0E04               	movlw	4
 17073                           
 17074                           ; BSR set to: 0
 17075  004D20  0012               	return		;funcret
 17076  004D22                     __end_of_disk_write:
 17077                           	callstack 0
 17078                           
 17079 ;; *************** function _sdc_disk_write *****************
 17080 ;; Defined at:
 17081 ;;		line 509 in file "bibliotecas/diskio.c"
 17082 ;; Parameters:    Size  Location     Type
 17083 ;;  p_buff          2   36[COMRAM] PTR const unsigned char 
 17084 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 17085 ;;  sector          4   38[COMRAM] unsigned long 
 17086 ;;  count           1   42[COMRAM] unsigned char 
 17087 ;; Auto vars:     Size  Location     Type
 17088 ;;  j               2    5[BANK0 ] int 
 17089 ;;  count1          2    2[BANK0 ] int 
 17090 ;;  i               2    0        int 
 17091 ;;  buff            1    7[BANK0 ] unsigned char 
 17092 ;;  res             1    4[BANK0 ] enum E25
 17093 ;; Return value:  Size  Location     Type
 17094 ;;                  1    wreg      enum E25
 17095 ;; Registers used:
 17096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17097 ;; Tracked objects:
 17098 ;;		On entry : 0/0
 17099 ;;		On exit  : 3F/0
 17100 ;;		Unchanged: 0/0
 17101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17102 ;;      Params:         7       0       0       0       0       0       0       0       0
 17103 ;;      Locals:         0       8       0       0       0       0       0       0       0
 17104 ;;      Temps:          4       0       0       0       0       0       0       0       0
 17105 ;;      Totals:        11       8       0       0       0       0       0       0       0
 17106 ;;Total ram usage:       19 bytes
 17107 ;; Hardware stack levels used:    1
 17108 ;; Hardware stack levels required when called:    6
 17109 ;; This function calls:
 17110 ;;		_command
 17111 ;;		_dummy_clocks
 17112 ;;		_escreve_SPI
 17113 ;;		_leitura_SPI
 17114 ;;		_proceed
 17115 ;;		_response
 17116 ;; This function is called by:
 17117 ;;		_disk_write
 17118 ;; This function uses a non-reentrant model
 17119 ;;
 17120                           
 17121                           	psect	text83
 17122  002AAC                     __ptext83:
 17123                           	callstack 0
 17124  002AAC                     _sdc_disk_write:
 17125                           	callstack 15
 17126                           
 17127                           ; BSR set to: 0
 17128                           ;incstack = 0
 17129  002AAC  0E00               	movlw	0
 17130  002AAE  0100               	movlb	0	; () banked
 17131  002AB0  6F63               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 17132  002AB2  0E00               	movlw	0
 17133  002AB4  6F62               	movwf	sdc_disk_write@count1& (0+255),b
 17134                           
 17135                           ; BSR set to: 0
 17136                           ;diskio.c: 515: if(count>1)
 17137  002AB6  0E01               	movlw	1
 17138  002AB8  642B               	cpfsgt	sdc_disk_write@count^0,c
 17139  002ABA  D069               	goto	l144
 17140                           
 17141                           ; BSR set to: 0
 17142                           ;diskio.c: 516: {;diskio.c: 517: LATCbits.LATC7 = 0;
 17143  002ABC  9E8B               	bcf	139,7,c	;volatile
 17144                           
 17145                           ;diskio.c: 518: LATBbits.LATB4 = 0;
 17146  002ABE  988A               	bcf	138,4,c	;volatile
 17147                           
 17148                           ; BSR set to: 0
 17149                           ;diskio.c: 519: dummy_clocks(10);
 17150  002AC0  0E0A               	movlw	10
 17151  002AC2  ECC8  F027         	call	_dummy_clocks
 17152                           
 17153                           ;diskio.c: 520: command(0X57, count, 0XFF);
 17154  002AC6  502B               	movf	sdc_disk_write@count^0,w,c
 17155  002AC8  6E1E               	movwf	command@arg^0,c
 17156  002ACA  6A1F               	clrf	(command@arg+1)^0,c
 17157  002ACC  6A20               	clrf	(command@arg+2)^0,c
 17158  002ACE  6A21               	clrf	(command@arg+3)^0,c
 17159  002AD0  0EFF               	movlw	255
 17160  002AD2  6E22               	movwf	command@CRC^0,c
 17161  002AD4  0E57               	movlw	87
 17162  002AD6  EC6B  F025         	call	_command
 17163                           
 17164                           ;diskio.c: 521: proceed();
 17165  002ADA  EC30  F02A         	call	_proceed	;wreg free
 17166  002ADE                     l9552:
 17167                           
 17168                           ;diskio.c: 523: buff = response();
 17169  002ADE  EC2A  F02A         	call	_response	;wreg free
 17170  002AE2  0100               	movlb	0	; () banked
 17171  002AE4  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 17172                           
 17173                           ; BSR set to: 0
 17174                           ;diskio.c: 524: }while(buff!=0X00);
 17175  002AE6  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 17176  002AE8  A4D8               	btfss	status,2,c
 17177  002AEA  D7F9               	goto	l9552
 17178                           
 17179                           ; BSR set to: 0
 17180                           ;diskio.c: 526: dummy_clocks(10);
 17181  002AEC  0E0A               	movlw	10
 17182  002AEE  ECC8  F027         	call	_dummy_clocks
 17183                           
 17184                           ;diskio.c: 527: command(0X59, sector*512, 0XFF);
 17185  002AF2  C027  F02C         	movff	sdc_disk_write@sector,??_sdc_disk_write
 17186  002AF6  C028  F02D         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 17187  002AFA  C029  F02E         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 17188  002AFE  C02A  F02F         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 17189  002B02  0E09               	movlw	9
 17190  002B04                     u11005:
 17191  002B04  90D8               	bcf	status,0,c
 17192  002B06  362C               	rlcf	??_sdc_disk_write^0,f,c
 17193  002B08  362D               	rlcf	(??_sdc_disk_write+1)^0,f,c
 17194  002B0A  362E               	rlcf	(??_sdc_disk_write+2)^0,f,c
 17195  002B0C  362F               	rlcf	(??_sdc_disk_write+3)^0,f,c
 17196  002B0E  2EE8               	decfsz	wreg,f,c
 17197  002B10  D7F9               	goto	u11005
 17198  002B12  C02C  F01E         	movff	??_sdc_disk_write,command@arg
 17199  002B16  C02D  F01F         	movff	??_sdc_disk_write+1,command@arg+1
 17200  002B1A  C02E  F020         	movff	??_sdc_disk_write+2,command@arg+2
 17201  002B1E  C02F  F021         	movff	??_sdc_disk_write+3,command@arg+3
 17202  002B22  0EFF               	movlw	255
 17203  002B24  6E22               	movwf	command@CRC^0,c
 17204  002B26  0E59               	movlw	89
 17205  002B28  EC6B  F025         	call	_command
 17206                           
 17207                           ;diskio.c: 528: proceed();
 17208  002B2C  EC30  F02A         	call	_proceed	;wreg free
 17209  002B30                     l9560:
 17210                           
 17211                           ;diskio.c: 530: buff = response();
 17212  002B30  EC2A  F02A         	call	_response	;wreg free
 17213  002B34  0100               	movlb	0	; () banked
 17214  002B36  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 17215                           
 17216                           ; BSR set to: 0
 17217                           ;diskio.c: 531: }while(buff!=0X00);
 17218  002B38  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 17219  002B3A  A4D8               	btfss	status,2,c
 17220  002B3C  D7F9               	goto	l9560
 17221                           
 17222                           ; BSR set to: 0
 17223                           ;diskio.c: 533: dummy_clocks(1);
 17224  002B3E  0E01               	movlw	1
 17225  002B40  ECC8  F027         	call	_dummy_clocks
 17226                           
 17227                           ;diskio.c: 534: escreve_SPI(0XFC);
 17228  002B44  0EFC               	movlw	252
 17229  002B46  EC0D  F02A         	call	_escreve_SPI
 17230                           
 17231                           ;diskio.c: 535: for(j=0;j<512;j++)
 17232  002B4A  0E00               	movlw	0
 17233  002B4C  0100               	movlb	0	; () banked
 17234  002B4E  6F66               	movwf	(sdc_disk_write@j+1)& (0+255),b
 17235  002B50  0E00               	movlw	0
 17236  002B52  6F65               	movwf	sdc_disk_write@j& (0+255),b
 17237  002B54                     l9574:
 17238                           
 17239                           ; BSR set to: 0
 17240                           ;diskio.c: 536: {;diskio.c: 537: escreve_SPI(*p_buff);
 17241  002B54  C025  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 17242  002B58  C026  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 17243  002B5C  50DF               	movf	indf2,w,c
 17244  002B5E  EC0D  F02A         	call	_escreve_SPI
 17245                           
 17246                           ;diskio.c: 538: p_buff++;
 17247  002B62  4A25               	infsnz	sdc_disk_write@p_buff^0,f,c
 17248  002B64  2A26               	incf	(sdc_disk_write@p_buff+1)^0,f,c
 17249  002B66  0100               	movlb	0	; () banked
 17250  002B68  4B65               	infsnz	sdc_disk_write@j& (0+255),f,b
 17251  002B6A  2B66               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 17252                           
 17253                           ; BSR set to: 0
 17254  002B6C  BF66               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 17255  002B6E  D7F2               	goto	l9574
 17256  002B70  0E02               	movlw	2
 17257  002B72  5D66               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 17258  002B74  A0D8               	btfss	status,0,c
 17259  002B76  D7EE               	goto	l9574
 17260                           
 17261                           ; BSR set to: 0
 17262                           ;diskio.c: 539: };diskio.c: 540: leitura_SPI();
 17263  002B78  EC36  F02A         	call	_leitura_SPI	;wreg free
 17264                           
 17265                           ;diskio.c: 541: leitura_SPI();
 17266  002B7C  EC36  F02A         	call	_leitura_SPI	;wreg free
 17267                           
 17268                           ;diskio.c: 543: dummy_clocks(1);
 17269  002B80  0E01               	movlw	1
 17270  002B82  ECC8  F027         	call	_dummy_clocks
 17271                           
 17272                           ;diskio.c: 544: escreve_SPI(0XFD);
 17273  002B86  0EFD               	movlw	253
 17274  002B88  EC0D  F02A         	call	_escreve_SPI
 17275                           
 17276                           ;diskio.c: 546: }
 17277  002B8C  D067               	goto	u11060
 17278  002B8E                     l144:
 17279                           
 17280                           ; BSR set to: 0
 17281                           ;diskio.c: 547: else;diskio.c: 548: {;diskio.c: 549: LATCbits.LATC7 = 0;
 17282  002B8E  9E8B               	bcf	139,7,c	;volatile
 17283                           
 17284                           ;diskio.c: 550: LATBbits.LATB4 = 0;
 17285  002B90  988A               	bcf	138,4,c	;volatile
 17286                           
 17287                           ; BSR set to: 0
 17288                           ;diskio.c: 551: dummy_clocks(10);
 17289  002B92  0E0A               	movlw	10
 17290  002B94  ECC8  F027         	call	_dummy_clocks
 17291                           
 17292                           ;diskio.c: 552: command(0X58, sector*512, 0X00);
 17293  002B98  C027  F02C         	movff	sdc_disk_write@sector,??_sdc_disk_write
 17294  002B9C  C028  F02D         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 17295  002BA0  C029  F02E         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 17296  002BA4  C02A  F02F         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 17297  002BA8  0E09               	movlw	9
 17298  002BAA                     u11035:
 17299  002BAA  90D8               	bcf	status,0,c
 17300  002BAC  362C               	rlcf	??_sdc_disk_write^0,f,c
 17301  002BAE  362D               	rlcf	(??_sdc_disk_write+1)^0,f,c
 17302  002BB0  362E               	rlcf	(??_sdc_disk_write+2)^0,f,c
 17303  002BB2  362F               	rlcf	(??_sdc_disk_write+3)^0,f,c
 17304  002BB4  2EE8               	decfsz	wreg,f,c
 17305  002BB6  D7F9               	goto	u11035
 17306  002BB8  C02C  F01E         	movff	??_sdc_disk_write,command@arg
 17307  002BBC  C02D  F01F         	movff	??_sdc_disk_write+1,command@arg+1
 17308  002BC0  C02E  F020         	movff	??_sdc_disk_write+2,command@arg+2
 17309  002BC4  C02F  F021         	movff	??_sdc_disk_write+3,command@arg+3
 17310  002BC8  0E00               	movlw	0
 17311  002BCA  6E22               	movwf	command@CRC^0,c
 17312  002BCC  0E58               	movlw	88
 17313  002BCE  EC6B  F025         	call	_command
 17314                           
 17315                           ;diskio.c: 553: proceed();
 17316  002BD2  EC30  F02A         	call	_proceed	;wreg free
 17317  002BD6                     l9592:
 17318                           
 17319                           ;diskio.c: 555: buff = response();
 17320  002BD6  EC2A  F02A         	call	_response	;wreg free
 17321  002BDA  0100               	movlb	0	; () banked
 17322  002BDC  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 17323                           
 17324                           ; BSR set to: 0
 17325                           ;diskio.c: 556: }while(buff!=0X00);
 17326  002BDE  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 17327  002BE0  A4D8               	btfss	status,2,c
 17328  002BE2  D7F9               	goto	l9592
 17329                           
 17330                           ; BSR set to: 0
 17331                           ;diskio.c: 558: LATBbits.LATB4 = 0;
 17332  002BE4  988A               	bcf	138,4,c	;volatile
 17333                           
 17334                           ;diskio.c: 559: LATCbits.LATC7 = 0;
 17335  002BE6  9E8B               	bcf	139,7,c	;volatile
 17336                           
 17337                           ; BSR set to: 0
 17338                           ;diskio.c: 560: dummy_clocks(1);
 17339  002BE8  0E01               	movlw	1
 17340  002BEA  ECC8  F027         	call	_dummy_clocks
 17341                           
 17342                           ;diskio.c: 561: escreve_SPI(0XFE);
 17343  002BEE  0EFE               	movlw	254
 17344  002BF0  EC0D  F02A         	call	_escreve_SPI
 17345                           
 17346                           ;diskio.c: 562: for(j=0;j<512;j++)
 17347  002BF4  0E00               	movlw	0
 17348  002BF6  0100               	movlb	0	; () banked
 17349  002BF8  6F66               	movwf	(sdc_disk_write@j+1)& (0+255),b
 17350  002BFA  0E00               	movlw	0
 17351  002BFC  6F65               	movwf	sdc_disk_write@j& (0+255),b
 17352  002BFE                     l9606:
 17353                           
 17354                           ; BSR set to: 0
 17355                           ;diskio.c: 563: {;diskio.c: 564: escreve_SPI(*p_buff);
 17356  002BFE  C025  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 17357  002C02  C026  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 17358  002C06  50DF               	movf	indf2,w,c
 17359  002C08  EC0D  F02A         	call	_escreve_SPI
 17360                           
 17361                           ;diskio.c: 565: p_buff++;
 17362  002C0C  4A25               	infsnz	sdc_disk_write@p_buff^0,f,c
 17363  002C0E  2A26               	incf	(sdc_disk_write@p_buff+1)^0,f,c
 17364  002C10  0100               	movlb	0	; () banked
 17365  002C12  4B65               	infsnz	sdc_disk_write@j& (0+255),f,b
 17366  002C14  2B66               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 17367                           
 17368                           ; BSR set to: 0
 17369  002C16  BF66               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 17370  002C18  D7F2               	goto	l9606
 17371  002C1A  0E02               	movlw	2
 17372  002C1C  5D66               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 17373  002C1E  A0D8               	btfss	status,0,c
 17374  002C20  D7EE               	goto	l9606
 17375                           
 17376                           ; BSR set to: 0
 17377                           ;diskio.c: 566: };diskio.c: 567: leitura_SPI();
 17378  002C22  EC36  F02A         	call	_leitura_SPI	;wreg free
 17379                           
 17380                           ;diskio.c: 568: leitura_SPI();
 17381  002C26  EC36  F02A         	call	_leitura_SPI	;wreg free
 17382                           
 17383                           ;diskio.c: 570: dummy_clocks(10);
 17384  002C2A  0E0A               	movlw	10
 17385  002C2C  ECC8  F027         	call	_dummy_clocks
 17386                           
 17387                           ;diskio.c: 571: command(0X4D,0X00000000,0X00);
 17388  002C30  0E00               	movlw	0
 17389  002C32  6E1E               	movwf	command@arg^0,c
 17390  002C34  0E00               	movlw	0
 17391  002C36  6E1F               	movwf	(command@arg+1)^0,c
 17392  002C38  0E00               	movlw	0
 17393  002C3A  6E20               	movwf	(command@arg+2)^0,c
 17394  002C3C  0E00               	movlw	0
 17395  002C3E  6E21               	movwf	(command@arg+3)^0,c
 17396  002C40  0E00               	movlw	0
 17397  002C42  6E22               	movwf	command@CRC^0,c
 17398  002C44  0E4D               	movlw	77
 17399  002C46  EC6B  F025         	call	_command
 17400                           
 17401                           ;diskio.c: 572: proceed();
 17402  002C4A  EC30  F02A         	call	_proceed	;wreg free
 17403  002C4E                     l9622:
 17404                           
 17405                           ;diskio.c: 574: buff = response();
 17406  002C4E  EC2A  F02A         	call	_response	;wreg free
 17407  002C52  0100               	movlb	0	; () banked
 17408  002C54  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 17409                           
 17410                           ; BSR set to: 0
 17411                           ;diskio.c: 575: }while(buff!=0X00 );
 17412  002C56  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 17413  002C58  A4D8               	btfss	status,2,c
 17414  002C5A  D7F9               	goto	l9622
 17415  002C5C                     u11060:
 17416                           
 17417                           ;diskio.c: 576: };diskio.c: 577: return res;
 17418  002C5C  0100               	movlb	0	; () banked
 17419  002C5E  5164               	movf	sdc_disk_write@res& (0+255),w,b
 17420                           
 17421                           ; BSR set to: 0
 17422  002C60  0012               	return		;funcret
 17423  002C62                     __end_of_sdc_disk_write:
 17424                           	callstack 0
 17425                           
 17426 ;; *************** function _disk_read *****************
 17427 ;; Defined at:
 17428 ;;		line 97 in file "bibliotecas/diskio.c"
 17429 ;; Parameters:    Size  Location     Type
 17430 ;;  pdrv            1    wreg     unsigned char 
 17431 ;;  buff            2    8[BANK0 ] PTR unsigned char 
 17432 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 17433 ;;  sector          4   10[BANK0 ] unsigned long 
 17434 ;;  count           1   14[BANK0 ] unsigned char 
 17435 ;; Auto vars:     Size  Location     Type
 17436 ;;  pdrv            1   15[BANK0 ] unsigned char 
 17437 ;;  result          2   16[BANK0 ] int 
 17438 ;;  res             1   18[BANK0 ] enum E25
 17439 ;; Return value:  Size  Location     Type
 17440 ;;                  1    wreg      enum E25
 17441 ;; Registers used:
 17442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17443 ;; Tracked objects:
 17444 ;;		On entry : 3F/0
 17445 ;;		On exit  : 3F/0
 17446 ;;		Unchanged: 0/0
 17447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17448 ;;      Params:         0       7       0       0       0       0       0       0       0
 17449 ;;      Locals:         0       4       0       0       0       0       0       0       0
 17450 ;;      Temps:          1       0       0       0       0       0       0       0       0
 17451 ;;      Totals:         1      11       0       0       0       0       0       0       0
 17452 ;;Total ram usage:       12 bytes
 17453 ;; Hardware stack levels used:    1
 17454 ;; Hardware stack levels required when called:    7
 17455 ;; This function calls:
 17456 ;;		_sdc_disk_read
 17457 ;; This function is called by:
 17458 ;;		_move_window
 17459 ;;		_check_fs
 17460 ;;		_f_read
 17461 ;; This function uses a non-reentrant model
 17462 ;;
 17463                           
 17464                           	psect	text84
 17465  0048D0                     __ptext84:
 17466                           	callstack 0
 17467  0048D0                     _disk_read:
 17468                           	callstack 15
 17469                           
 17470                           ; BSR set to: 0
 17471                           ;incstack = 0
 17472                           ;disk_read@pdrv stored from wreg
 17473  0048D0  6F6F               	movwf	disk_read@pdrv& (0+255),b
 17474                           
 17475                           ;diskio.c: 104: DRESULT res;;diskio.c: 105: int result;;diskio.c: 107: switch (pdrv) {
 17476  0048D2  D029               	goto	l9656
 17477  0048D4                     l9632:
 17478                           
 17479                           ; BSR set to: 0
 17480                           ;diskio.c: 111: result = sdc_disk_read(buff, sector, count);
 17481  0048D4  C068  F025         	movff	disk_read@buff,sdc_disk_read@p_buff
 17482  0048D8  C069  F026         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 17483  0048DC  C06A  F027         	movff	disk_read@sector,sdc_disk_read@sector
 17484  0048E0  C06B  F028         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 17485  0048E4  C06C  F029         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 17486  0048E8  C06D  F02A         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 17487  0048EC  C06E  F02B         	movff	disk_read@count,sdc_disk_read@count
 17488  0048F0  EC6D  F01C         	call	_sdc_disk_read	;wreg free
 17489  0048F4  6E30               	movwf	??_disk_read^0,c
 17490  0048F6  5030               	movf	??_disk_read^0,w,c
 17491  0048F8  6F70               	movwf	disk_read@result& (0+255),b
 17492  0048FA  6B71               	clrf	(disk_read@result+1)& (0+255),b
 17493                           
 17494                           ; BSR set to: 0
 17495                           ;diskio.c: 115: res = result;
 17496  0048FC  C070  F072         	movff	disk_read@result,disk_read@res
 17497  004900                     l9636:
 17498                           
 17499                           ; BSR set to: 0
 17500                           ;diskio.c: 117: return res;
 17501  004900  5172               	movf	disk_read@res& (0+255),w,b
 17502  004902  0012               	return	
 17503  004904                     l9640:
 17504                           
 17505                           ; BSR set to: 0
 17506                           ;diskio.c: 122: result = sdc_disk_read(buff, sector, count);
 17507  004904  C068  F025         	movff	disk_read@buff,sdc_disk_read@p_buff
 17508  004908  C069  F026         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 17509  00490C  C06A  F027         	movff	disk_read@sector,sdc_disk_read@sector
 17510  004910  C06B  F028         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 17511  004914  C06C  F029         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 17512  004918  C06D  F02A         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 17513  00491C  C06E  F02B         	movff	disk_read@count,sdc_disk_read@count
 17514  004920  EC6D  F01C         	call	_sdc_disk_read	;wreg free
 17515  004924  D7E7               	goto	L10
 17516  004926                     l9656:
 17517  004926  0100               	movlb	0	; () banked
 17518  004928  516F               	movf	disk_read@pdrv& (0+255),w,b
 17519                           
 17520                           ; Switch size 1, requested type "simple"
 17521                           ; Number of cases is 3, Range of values is 0 to 2
 17522                           ; switch strategies available:
 17523                           ; Name         Instructions Cycles
 17524                           ; simple_byte           10     6 (average)
 17525                           ;	Chosen strategy is simple_byte
 17526  00492A  0A00               	xorlw	0	; case 0
 17527  00492C  B4D8               	btfsc	status,2,c
 17528  00492E  D7D2               	goto	l9632
 17529  004930  0A01               	xorlw	1	; case 1
 17530  004932  B4D8               	btfsc	status,2,c
 17531  004934  D7E7               	goto	l9640
 17532  004936  0A03               	xorlw	3	; case 2
 17533  004938  B4D8               	btfsc	status,2,c
 17534  00493A  D7E2               	goto	l9636
 17535                           
 17536                           ; BSR set to: 0
 17537                           ;diskio.c: 141: return RES_PARERR;
 17538  00493C  0E04               	movlw	4
 17539                           
 17540                           ; BSR set to: 0
 17541  00493E  0012               	return		;funcret
 17542  004940                     __end_of_disk_read:
 17543                           	callstack 0
 17544                           
 17545 ;; *************** function _sdc_disk_read *****************
 17546 ;; Defined at:
 17547 ;;		line 439 in file "bibliotecas/diskio.c"
 17548 ;; Parameters:    Size  Location     Type
 17549 ;;  p_buff          2   36[COMRAM] PTR unsigned char 
 17550 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 17551 ;;  sector          4   38[COMRAM] unsigned long 
 17552 ;;  count           1   42[COMRAM] unsigned char 
 17553 ;; Auto vars:     Size  Location     Type
 17554 ;;  start_add       4    1[BANK0 ] unsigned long 
 17555 ;;  length          2    5[BANK0 ] int 
 17556 ;;  count1          2    0        int 
 17557 ;;  i               2    0        int 
 17558 ;;  buff            1    7[BANK0 ] unsigned char 
 17559 ;;  ptr             1    0        unsigned char 
 17560 ;;  res             1    0        enum E25
 17561 ;; Return value:  Size  Location     Type
 17562 ;;                  1    wreg      enum E25
 17563 ;; Registers used:
 17564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17565 ;; Tracked objects:
 17566 ;;		On entry : 0/0
 17567 ;;		On exit  : 3F/0
 17568 ;;		Unchanged: 0/0
 17569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17570 ;;      Params:         7       0       0       0       0       0       0       0       0
 17571 ;;      Locals:         0       8       0       0       0       0       0       0       0
 17572 ;;      Temps:          4       0       0       0       0       0       0       0       0
 17573 ;;      Totals:        11       8       0       0       0       0       0       0       0
 17574 ;;Total ram usage:       19 bytes
 17575 ;; Hardware stack levels used:    1
 17576 ;; Hardware stack levels required when called:    6
 17577 ;; This function calls:
 17578 ;;		_command
 17579 ;;		_dummy_clocks
 17580 ;;		_proceed
 17581 ;;		_response
 17582 ;; This function is called by:
 17583 ;;		_disk_read
 17584 ;; This function uses a non-reentrant model
 17585 ;;
 17586                           
 17587                           	psect	text85
 17588  0038DA                     __ptext85:
 17589                           	callstack 0
 17590  0038DA                     _sdc_disk_read:
 17591                           	callstack 15
 17592                           
 17593                           ;diskio.c: 448: unsigned long int start_add;;diskio.c: 449: int length,i, count1;;diskio
      +                          .c: 450: dummy_clocks(10);
 17594                           
 17595                           ; BSR set to: 0
 17596                           ;incstack = 0
 17597  0038DA  0E0A               	movlw	10
 17598  0038DC  ECC8  F027         	call	_dummy_clocks
 17599                           
 17600                           ;diskio.c: 452: start_add = sector*512;
 17601  0038E0  C027  F02C         	movff	sdc_disk_read@sector,??_sdc_disk_read
 17602  0038E4  C028  F02D         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 17603  0038E8  C029  F02E         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 17604  0038EC  C02A  F02F         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 17605  0038F0  0E09               	movlw	9
 17606  0038F2                     u10915:
 17607  0038F2  90D8               	bcf	status,0,c
 17608  0038F4  362C               	rlcf	??_sdc_disk_read^0,f,c
 17609  0038F6  362D               	rlcf	(??_sdc_disk_read+1)^0,f,c
 17610  0038F8  362E               	rlcf	(??_sdc_disk_read+2)^0,f,c
 17611  0038FA  362F               	rlcf	(??_sdc_disk_read+3)^0,f,c
 17612  0038FC  2EE8               	decfsz	wreg,f,c
 17613  0038FE  D7F9               	goto	u10915
 17614  003900  C02C  F061         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 17615  003904  C02D  F062         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 17616  003908  C02E  F063         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 17617  00390C  C02F  F064         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 17618                           
 17619                           ;diskio.c: 455: if(sector != 1)
 17620  003910  0427               	decf	sdc_disk_read@sector^0,w,c
 17621  003912  1028               	iorwf	(sdc_disk_read@sector+1)^0,w,c
 17622  003914  1029               	iorwf	(sdc_disk_read@sector+2)^0,w,c
 17623  003916  102A               	iorwf	(sdc_disk_read@sector+3)^0,w,c
 17624  003918  B4D8               	btfsc	status,2,c
 17625  00391A  D01C               	goto	l9502
 17626                           
 17627                           ;diskio.c: 456: {;diskio.c: 457: dummy_clocks(10);
 17628  00391C  0E0A               	movlw	10
 17629  00391E  ECC8  F027         	call	_dummy_clocks
 17630                           
 17631                           ;diskio.c: 458: command(0X52,start_add ,0X00);
 17632  003922  C061  F01E         	movff	sdc_disk_read@start_add,command@arg
 17633  003926  C062  F01F         	movff	sdc_disk_read@start_add+1,command@arg+1
 17634  00392A  C063  F020         	movff	sdc_disk_read@start_add+2,command@arg+2
 17635  00392E  C064  F021         	movff	sdc_disk_read@start_add+3,command@arg+3
 17636  003932  0E00               	movlw	0
 17637  003934  6E22               	movwf	command@CRC^0,c
 17638  003936  0E52               	movlw	82
 17639  003938  EC6B  F025         	call	_command
 17640                           
 17641                           ;diskio.c: 459: proceed();
 17642  00393C  EC30  F02A         	call	_proceed	;wreg free
 17643  003940                     l9496:
 17644                           
 17645                           ;diskio.c: 461: buff = response();
 17646  003940  EC2A  F02A         	call	_response	;wreg free
 17647  003944  0100               	movlb	0	; () banked
 17648  003946  6F67               	movwf	sdc_disk_read@buff& (0+255),b
 17649                           
 17650                           ; BSR set to: 0
 17651                           ;diskio.c: 462: }while(buff!=0X00);
 17652  003948  5167               	movf	sdc_disk_read@buff& (0+255),w,b
 17653  00394A  A4D8               	btfss	status,2,c
 17654  00394C  D7F9               	goto	l9496
 17655  00394E                     u10930:
 17656                           
 17657                           ; BSR set to: 0
 17658                           ;diskio.c: 463: proceed();
 17659  00394E  EC30  F02A         	call	_proceed	;wreg free
 17660                           
 17661                           ;diskio.c: 464: }
 17662  003952  D01E               	goto	l9514
 17663  003954                     l9502:
 17664                           
 17665                           ;diskio.c: 465: else;diskio.c: 466: {;diskio.c: 467: dummy_clocks(10);
 17666  003954  0E0A               	movlw	10
 17667  003956  ECC8  F027         	call	_dummy_clocks
 17668                           
 17669                           ;diskio.c: 468: command(0X51,sector ,0X00);
 17670  00395A  C027  F01E         	movff	sdc_disk_read@sector,command@arg
 17671  00395E  C028  F01F         	movff	sdc_disk_read@sector+1,command@arg+1
 17672  003962  C029  F020         	movff	sdc_disk_read@sector+2,command@arg+2
 17673  003966  C02A  F021         	movff	sdc_disk_read@sector+3,command@arg+3
 17674  00396A  0E00               	movlw	0
 17675  00396C  6E22               	movwf	command@CRC^0,c
 17676  00396E  0E51               	movlw	81
 17677  003970  EC6B  F025         	call	_command
 17678                           
 17679                           ;diskio.c: 469: proceed();
 17680  003974  EC30  F02A         	call	_proceed	;wreg free
 17681  003978                     l9506:
 17682                           
 17683                           ;diskio.c: 471: buff = response();
 17684  003978  EC2A  F02A         	call	_response	;wreg free
 17685  00397C  0100               	movlb	0	; () banked
 17686  00397E  6F67               	movwf	sdc_disk_read@buff& (0+255),b
 17687                           
 17688                           ; BSR set to: 0
 17689                           ;diskio.c: 472: }while(buff!=0X00);
 17690  003980  5167               	movf	sdc_disk_read@buff& (0+255),w,b
 17691  003982  B4D8               	btfsc	status,2,c
 17692  003984  D7E4               	goto	u10930
 17693  003986  D7F8               	goto	l9506
 17694  003988                     l9512:
 17695                           
 17696                           ; BSR set to: 0
 17697                           ;diskio.c: 479: {;diskio.c: 480: buff = response();
 17698  003988  EC2A  F02A         	call	_response	;wreg free
 17699  00398C  0100               	movlb	0	; () banked
 17700  00398E  6F67               	movwf	sdc_disk_read@buff& (0+255),b
 17701  003990                     l9514:
 17702  003990  0EFE               	movlw	254
 17703  003992  0100               	movlb	0	; () banked
 17704  003994  1967               	xorwf	sdc_disk_read@buff& (0+255),w,b
 17705  003996  A4D8               	btfss	status,2,c
 17706  003998  D7F7               	goto	l9512
 17707                           
 17708                           ; BSR set to: 0
 17709                           ;diskio.c: 481: };diskio.c: 483: length = 0;
 17710  00399A  0E00               	movlw	0
 17711  00399C  6F66               	movwf	(sdc_disk_read@length+1)& (0+255),b
 17712  00399E  0E00               	movlw	0
 17713  0039A0  6F65               	movwf	sdc_disk_read@length& (0+255),b
 17714                           
 17715                           ;diskio.c: 484: while ( length < 512 )
 17716  0039A2  D00C               	goto	l9522
 17717  0039A4                     l9518:
 17718                           
 17719                           ; BSR set to: 0
 17720                           ;diskio.c: 485: {;diskio.c: 486: p_buff[length] = response();
 17721  0039A4  5165               	movf	sdc_disk_read@length& (0+255),w,b
 17722  0039A6  2425               	addwf	sdc_disk_read@p_buff^0,w,c
 17723  0039A8  6ED9               	movwf	fsr2l,c
 17724  0039AA  5166               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 17725  0039AC  2026               	addwfc	(sdc_disk_read@p_buff+1)^0,w,c
 17726  0039AE  6EDA               	movwf	fsr2h,c
 17727  0039B0  EC2A  F02A         	call	_response	;wreg free
 17728  0039B4  6EDF               	movwf	indf2,c
 17729                           
 17730                           ;diskio.c: 487: length++;
 17731  0039B6  0100               	movlb	0	; () banked
 17732  0039B8  4B65               	infsnz	sdc_disk_read@length& (0+255),f,b
 17733  0039BA  2B66               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 17734  0039BC                     l9522:
 17735                           
 17736                           ; BSR set to: 0
 17737  0039BC  BF66               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 17738  0039BE  D7F2               	goto	l9518
 17739  0039C0  0E02               	movlw	2
 17740  0039C2  5D66               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 17741  0039C4  A0D8               	btfss	status,0,c
 17742  0039C6  D7EE               	goto	l9518
 17743                           
 17744                           ; BSR set to: 0
 17745                           ;diskio.c: 491: dummy_clocks(10);
 17746                           
 17747                           ; BSR set to: 0
 17748  0039C8  0E0A               	movlw	10
 17749  0039CA  ECC8  F027         	call	_dummy_clocks
 17750                           
 17751                           ;diskio.c: 493: command(0X4C,0X00000000,0X00);
 17752  0039CE  0E00               	movlw	0
 17753  0039D0  6E1E               	movwf	command@arg^0,c
 17754  0039D2  0E00               	movlw	0
 17755  0039D4  6E1F               	movwf	(command@arg+1)^0,c
 17756  0039D6  0E00               	movlw	0
 17757  0039D8  6E20               	movwf	(command@arg+2)^0,c
 17758  0039DA  0E00               	movlw	0
 17759  0039DC  6E21               	movwf	(command@arg+3)^0,c
 17760  0039DE  0E00               	movlw	0
 17761  0039E0  6E22               	movwf	command@CRC^0,c
 17762  0039E2  0E4C               	movlw	76
 17763  0039E4  EC6B  F025         	call	_command
 17764                           
 17765                           ;diskio.c: 494: proceed();
 17766  0039E8  EC30  F02A         	call	_proceed	;wreg free
 17767  0039EC                     l9532:
 17768                           
 17769                           ;diskio.c: 496: buff = response();
 17770  0039EC  EC2A  F02A         	call	_response	;wreg free
 17771  0039F0  0100               	movlb	0	; () banked
 17772  0039F2  6F67               	movwf	sdc_disk_read@buff& (0+255),b
 17773                           
 17774                           ; BSR set to: 0
 17775                           ;diskio.c: 497: }while(buff!=0xFF);
 17776  0039F4  2967               	incf	sdc_disk_read@buff& (0+255),w,b
 17777  0039F6  A4D8               	btfss	status,2,c
 17778  0039F8  D7F9               	goto	l9532
 17779                           
 17780                           ; BSR set to: 0
 17781                           ;diskio.c: 500: return RES_OK;
 17782                           
 17783                           ; BSR set to: 0
 17784  0039FA  0E00               	movlw	0
 17785                           
 17786                           ; BSR set to: 0
 17787  0039FC  0012               	return		;funcret
 17788  0039FE                     __end_of_sdc_disk_read:
 17789                           	callstack 0
 17790                           
 17791 ;; *************** function _response *****************
 17792 ;; Defined at:
 17793 ;;		line 59 in file "bibliotecas/SDCard.c"
 17794 ;; Parameters:    Size  Location     Type
 17795 ;;		None
 17796 ;; Auto vars:     Size  Location     Type
 17797 ;;  buff            1   24[COMRAM] unsigned char 
 17798 ;; Return value:  Size  Location     Type
 17799 ;;                  1    wreg      unsigned char 
 17800 ;; Registers used:
 17801 ;;		wreg, status,2, cstack
 17802 ;; Tracked objects:
 17803 ;;		On entry : 0/0
 17804 ;;		On exit  : 0/0
 17805 ;;		Unchanged: 0/0
 17806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17807 ;;      Params:         0       0       0       0       0       0       0       0       0
 17808 ;;      Locals:         1       0       0       0       0       0       0       0       0
 17809 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17810 ;;      Totals:         1       0       0       0       0       0       0       0       0
 17811 ;;Total ram usage:        1 bytes
 17812 ;; Hardware stack levels used:    1
 17813 ;; Hardware stack levels required when called:    4
 17814 ;; This function calls:
 17815 ;;		_leitura_SPI
 17816 ;; This function is called by:
 17817 ;;		_sdc_reset
 17818 ;;		_sdc_disk_initialize
 17819 ;;		_sdc_disk_read
 17820 ;;		_sdc_disk_write
 17821 ;; This function uses a non-reentrant model
 17822 ;;
 17823                           
 17824                           	psect	text86
 17825  005454                     __ptext86:
 17826                           	callstack 0
 17827  005454                     _response:
 17828                           	callstack 16
 17829                           
 17830                           ;SDCard.c: 61: unsigned char buff;;SDCard.c: 62: LATBbits.LATB4 = 0;
 17831                           
 17832                           ; BSR set to: 0
 17833                           ;incstack = 0
 17834  005454  988A               	bcf	138,4,c	;volatile
 17835                           
 17836                           ;SDCard.c: 63: buff= leitura_SPI();
 17837  005456  EC36  F02A         	call	_leitura_SPI	;wreg free
 17838  00545A  6E19               	movwf	response@buff^0,c
 17839                           
 17840                           ;SDCard.c: 64: return buff;
 17841  00545C  5019               	movf	response@buff^0,w,c
 17842  00545E  0012               	return		;funcret
 17843  005460                     __end_of_response:
 17844                           	callstack 0
 17845                           
 17846 ;; *************** function _proceed *****************
 17847 ;; Defined at:
 17848 ;;		line 92 in file "bibliotecas/SDCard.c"
 17849 ;; Parameters:    Size  Location     Type
 17850 ;;		None
 17851 ;; Auto vars:     Size  Location     Type
 17852 ;;		None
 17853 ;; Return value:  Size  Location     Type
 17854 ;;                  1    wreg      void 
 17855 ;; Registers used:
 17856 ;;		wreg, cstack
 17857 ;; Tracked objects:
 17858 ;;		On entry : 0/0
 17859 ;;		On exit  : 0/0
 17860 ;;		Unchanged: 0/0
 17861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17862 ;;      Params:         0       0       0       0       0       0       0       0       0
 17863 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17864 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17865 ;;      Totals:         0       0       0       0       0       0       0       0       0
 17866 ;;Total ram usage:        0 bytes
 17867 ;; Hardware stack levels used:    1
 17868 ;; Hardware stack levels required when called:    4
 17869 ;; This function calls:
 17870 ;;		_escreve_SPI
 17871 ;; This function is called by:
 17872 ;;		_sdc_reset
 17873 ;;		_sdc_disk_initialize
 17874 ;;		_sdc_disk_read
 17875 ;;		_sdc_disk_write
 17876 ;; This function uses a non-reentrant model
 17877 ;;
 17878                           
 17879                           	psect	text87
 17880  005460                     __ptext87:
 17881                           	callstack 0
 17882  005460                     _proceed:
 17883                           	callstack 16
 17884                           
 17885                           ;SDCard.c: 94: LATBbits.LATB4 = 0;
 17886                           
 17887                           ;incstack = 0
 17888  005460  988A               	bcf	138,4,c	;volatile
 17889                           
 17890                           ;SDCard.c: 95: escreve_SPI(0xFF);
 17891  005462  0EFF               	movlw	255
 17892  005464  EC0D  F02A         	call	_escreve_SPI
 17893                           
 17894                           ;SDCard.c: 96: LATBbits.LATB4 = 1;
 17895  005468  888A               	bsf	138,4,c	;volatile
 17896  00546A  0012               	return		;funcret
 17897  00546C                     __end_of_proceed:
 17898                           	callstack 0
 17899                           
 17900 ;; *************** function _command *****************
 17901 ;; Defined at:
 17902 ;;		line 125 in file "bibliotecas/SDCard.c"
 17903 ;; Parameters:    Size  Location     Type
 17904 ;;  CMD             1    wreg     unsigned char 
 17905 ;;  arg             4   29[COMRAM] unsigned long 
 17906 ;;  CRC             1   33[COMRAM] unsigned char 
 17907 ;; Auto vars:     Size  Location     Type
 17908 ;;  CMD             1   34[COMRAM] unsigned char 
 17909 ;;  argument        1   35[COMRAM] unsigned char 
 17910 ;; Return value:  Size  Location     Type
 17911 ;;                  1    wreg      void 
 17912 ;; Registers used:
 17913 ;;		wreg, status,2, status,0, cstack
 17914 ;; Tracked objects:
 17915 ;;		On entry : 0/0
 17916 ;;		On exit  : 0/0
 17917 ;;		Unchanged: 0/0
 17918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17919 ;;      Params:         5       0       0       0       0       0       0       0       0
 17920 ;;      Locals:         2       0       0       0       0       0       0       0       0
 17921 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17922 ;;      Totals:         7       0       0       0       0       0       0       0       0
 17923 ;;Total ram usage:        7 bytes
 17924 ;; Hardware stack levels used:    1
 17925 ;; Hardware stack levels required when called:    5
 17926 ;; This function calls:
 17927 ;;		_dummy_clocks
 17928 ;;		_escreve_SPI
 17929 ;;		_wait_ready
 17930 ;; This function is called by:
 17931 ;;		_sdc_reset
 17932 ;;		_sdc_disk_initialize
 17933 ;;		_sdc_disk_read
 17934 ;;		_sdc_disk_write
 17935 ;; This function uses a non-reentrant model
 17936 ;;
 17937                           
 17938                           	psect	text88
 17939  004AD6                     __ptext88:
 17940                           	callstack 0
 17941  004AD6                     _command:
 17942                           	callstack 15
 17943                           
 17944                           ;incstack = 0
 17945                           ;command@CMD stored from wreg
 17946  004AD6  6E23               	movwf	command@CMD^0,c
 17947                           
 17948                           ;SDCard.c: 127: unsigned char argument;;SDCard.c: 129: if (wait_ready() != 0xFF)
 17949  004AD8  EC1E  F028         	call	_wait_ready	;wreg free
 17950  004ADC  0AFF               	xorlw	255
 17951  004ADE  A4D8               	btfss	status,2,c
 17952  004AE0  D004               	goto	l581
 17953  004AE2  D008               	goto	u10900
 17954  004AE4                     l9446:
 17955                           
 17956                           ;SDCard.c: 132: {;SDCard.c: 133: dummy_clocks(10);
 17957  004AE4  0E0A               	movlw	10
 17958  004AE6  ECC8  F027         	call	_dummy_clocks
 17959  004AEA                     l581:
 17960  004AEA  EC1E  F028         	call	_wait_ready	;wreg free
 17961  004AEE  0AFF               	xorlw	255
 17962  004AF0  A4D8               	btfss	status,2,c
 17963  004AF2  D7F8               	goto	l9446
 17964  004AF4                     u10900:
 17965                           
 17966                           ;SDCard.c: 134: };SDCard.c: 135: };SDCard.c: 136: escreve_SPI(0xFF);
 17967  004AF4  0EFF               	movlw	255
 17968  004AF6  EC0D  F02A         	call	_escreve_SPI
 17969                           
 17970                           ;SDCard.c: 137: escreve_SPI(CMD);
 17971  004AFA  5023               	movf	command@CMD^0,w,c
 17972  004AFC  EC0D  F02A         	call	_escreve_SPI
 17973                           
 17974                           ;SDCard.c: 138: argument = arg>>24;
 17975  004B00  C021  F024         	movff	command@arg+3,command@argument
 17976                           
 17977                           ;SDCard.c: 139: escreve_SPI(argument);
 17978  004B04  5024               	movf	command@argument^0,w,c
 17979  004B06  EC0D  F02A         	call	_escreve_SPI
 17980                           
 17981                           ;SDCard.c: 140: argument = arg>>16;
 17982  004B0A  C020  F024         	movff	command@arg+2,command@argument
 17983                           
 17984                           ;SDCard.c: 141: escreve_SPI(argument);
 17985  004B0E  5024               	movf	command@argument^0,w,c
 17986  004B10  EC0D  F02A         	call	_escreve_SPI
 17987                           
 17988                           ;SDCard.c: 142: argument = arg>>8;
 17989  004B14  C01F  F024         	movff	command@arg+1,command@argument
 17990                           
 17991                           ;SDCard.c: 143: escreve_SPI(argument);
 17992  004B18  5024               	movf	command@argument^0,w,c
 17993  004B1A  EC0D  F02A         	call	_escreve_SPI
 17994                           
 17995                           ;SDCard.c: 144: argument = arg;
 17996  004B1E  C01E  F024         	movff	command@arg,command@argument
 17997                           
 17998                           ;SDCard.c: 145: escreve_SPI(argument);
 17999  004B22  5024               	movf	command@argument^0,w,c
 18000  004B24  EC0D  F02A         	call	_escreve_SPI
 18001                           
 18002                           ;SDCard.c: 146: escreve_SPI(CRC);
 18003  004B28  5022               	movf	command@CRC^0,w,c
 18004  004B2A  EC0D  F02A         	call	_escreve_SPI
 18005  004B2E  0012               	return		;funcret
 18006  004B30                     __end_of_command:
 18007                           	callstack 0
 18008                           
 18009 ;; *************** function _wait_ready *****************
 18010 ;; Defined at:
 18011 ;;		line 105 in file "bibliotecas/SDCard.c"
 18012 ;; Parameters:    Size  Location     Type
 18013 ;;		None
 18014 ;; Auto vars:     Size  Location     Type
 18015 ;;  msg            10    0        unsigned char [10]
 18016 ;;  timeout         4   24[COMRAM] unsigned long 
 18017 ;;  res             1   28[COMRAM] unsigned char 
 18018 ;; Return value:  Size  Location     Type
 18019 ;;                  1    wreg      unsigned char 
 18020 ;; Registers used:
 18021 ;;		wreg, status,2, status,0, cstack
 18022 ;; Tracked objects:
 18023 ;;		On entry : 0/0
 18024 ;;		On exit  : 0/0
 18025 ;;		Unchanged: 0/0
 18026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18027 ;;      Params:         0       0       0       0       0       0       0       0       0
 18028 ;;      Locals:         5       0       0       0       0       0       0       0       0
 18029 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18030 ;;      Totals:         5       0       0       0       0       0       0       0       0
 18031 ;;Total ram usage:        5 bytes
 18032 ;; Hardware stack levels used:    1
 18033 ;; Hardware stack levels required when called:    4
 18034 ;; This function calls:
 18035 ;;		_leitura_SPI
 18036 ;; This function is called by:
 18037 ;;		_command
 18038 ;; This function uses a non-reentrant model
 18039 ;;
 18040                           
 18041                           	psect	text89
 18042  00503C                     __ptext89:
 18043                           	callstack 0
 18044  00503C                     _wait_ready:
 18045                           	callstack 15
 18046                           
 18047                           ;SDCard.c: 107: BYTE res;;SDCard.c: 108: DWORD timeout = 0x7FFF;
 18048                           
 18049                           ;incstack = 0
 18050  00503C  0EFF               	movlw	255
 18051  00503E  6E19               	movwf	wait_ready@timeout^0,c
 18052  005040  0E7F               	movlw	127
 18053  005042  6E1A               	movwf	(wait_ready@timeout+1)^0,c
 18054  005044  0E00               	movlw	0
 18055  005046  6E1B               	movwf	(wait_ready@timeout+2)^0,c
 18056  005048  0E00               	movlw	0
 18057  00504A  6E1C               	movwf	(wait_ready@timeout+3)^0,c
 18058  00504C                     l9432:
 18059                           
 18060                           ;SDCard.c: 112: res = leitura_SPI();
 18061  00504C  EC36  F02A         	call	_leitura_SPI	;wreg free
 18062  005050  6E1D               	movwf	wait_ready@res^0,c
 18063                           
 18064                           ;SDCard.c: 113: while ((res != 0xFF) && (--timeout));
 18065  005052  281D               	incf	wait_ready@res^0,w,c
 18066  005054  B4D8               	btfsc	status,2,c
 18067  005056  D00B               	goto	u10880
 18068  005058  0619               	decf	wait_ready@timeout^0,f,c
 18069  00505A  0E00               	movlw	0
 18070  00505C  5A1A               	subwfb	(wait_ready@timeout+1)^0,f,c
 18071  00505E  5A1B               	subwfb	(wait_ready@timeout+2)^0,f,c
 18072  005060  5A1C               	subwfb	(wait_ready@timeout+3)^0,f,c
 18073  005062  5019               	movf	wait_ready@timeout^0,w,c
 18074  005064  101A               	iorwf	(wait_ready@timeout+1)^0,w,c
 18075  005066  101B               	iorwf	(wait_ready@timeout+2)^0,w,c
 18076  005068  101C               	iorwf	(wait_ready@timeout+3)^0,w,c
 18077  00506A  A4D8               	btfss	status,2,c
 18078  00506C  D7EF               	goto	l9432
 18079  00506E                     u10880:
 18080                           
 18081                           ;SDCard.c: 115: return res;
 18082  00506E  501D               	movf	wait_ready@res^0,w,c
 18083  005070  0012               	return		;funcret
 18084  005072                     __end_of_wait_ready:
 18085                           	callstack 0
 18086                           
 18087 ;; *************** function _escreve_SPI *****************
 18088 ;; Defined at:
 18089 ;;		line 97 in file "bibliotecas/SPI.c"
 18090 ;; Parameters:    Size  Location     Type
 18091 ;;  dado            1    wreg     unsigned char 
 18092 ;; Auto vars:     Size  Location     Type
 18093 ;;  dado            1   25[COMRAM] unsigned char 
 18094 ;;  TempVar         1    0        unsigned char 
 18095 ;; Return value:  Size  Location     Type
 18096 ;;                  1    wreg      void 
 18097 ;; Registers used:
 18098 ;;		wreg
 18099 ;; Tracked objects:
 18100 ;;		On entry : 0/0
 18101 ;;		On exit  : 0/0
 18102 ;;		Unchanged: 0/0
 18103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18104 ;;      Params:         0       0       0       0       0       0       0       0       0
 18105 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18106 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18107 ;;      Totals:         2       0       0       0       0       0       0       0       0
 18108 ;;Total ram usage:        2 bytes
 18109 ;; Hardware stack levels used:    1
 18110 ;; Hardware stack levels required when called:    3
 18111 ;; This function calls:
 18112 ;;		Nothing
 18113 ;; This function is called by:
 18114 ;;		_sdc_disk_write
 18115 ;;		_proceed
 18116 ;;		_command
 18117 ;; This function uses a non-reentrant model
 18118 ;;
 18119                           
 18120                           	psect	text90
 18121  00541A                     __ptext90:
 18122                           	callstack 0
 18123  00541A                     _escreve_SPI:
 18124                           	callstack 16
 18125                           
 18126                           ;incstack = 0
 18127                           ;escreve_SPI@dado stored from wreg
 18128  00541A  6E1A               	movwf	escreve_SPI@dado^0,c
 18129  00541C  50C9               	movf	201,w,c	;volatile
 18130                           
 18131                           ;SPI.c: 101: PIR1bits.SSPIF = 0;
 18132  00541E  969E               	bcf	158,3,c	;volatile
 18133                           
 18134                           ;SPI.c: 103: SSPBUF = dado;
 18135  005420  C01A  FFC9         	movff	escreve_SPI@dado,4041	;volatile
 18136  005424                     l662:
 18137  005424  B69E               	btfsc	158,3,c	;volatile
 18138  005426  0012               	return	
 18139  005428  D7FD               	goto	l662
 18140  00542A                     __end_of_escreve_SPI:
 18141                           	callstack 0
 18142                           
 18143 ;; *************** function _dummy_clocks *****************
 18144 ;; Defined at:
 18145 ;;		line 74 in file "bibliotecas/SDCard.c"
 18146 ;; Parameters:    Size  Location     Type
 18147 ;;  n               1    wreg     unsigned char 
 18148 ;; Auto vars:     Size  Location     Type
 18149 ;;  n               1   26[COMRAM] unsigned char 
 18150 ;;  i               2   27[COMRAM] unsigned int 
 18151 ;; Return value:  Size  Location     Type
 18152 ;;                  1    wreg      void 
 18153 ;; Registers used:
 18154 ;;		wreg, status,2, status,0, cstack
 18155 ;; Tracked objects:
 18156 ;;		On entry : 0/0
 18157 ;;		On exit  : 0/0
 18158 ;;		Unchanged: 0/0
 18159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18160 ;;      Params:         0       0       0       0       0       0       0       0       0
 18161 ;;      Locals:         3       0       0       0       0       0       0       0       0
 18162 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18163 ;;      Totals:         5       0       0       0       0       0       0       0       0
 18164 ;;Total ram usage:        5 bytes
 18165 ;; Hardware stack levels used:    1
 18166 ;; Hardware stack levels required when called:    4
 18167 ;; This function calls:
 18168 ;;		_leitura_SPI
 18169 ;; This function is called by:
 18170 ;;		_sdc_disk_initialize
 18171 ;;		_sdc_disk_read
 18172 ;;		_sdc_disk_write
 18173 ;;		_command
 18174 ;; This function uses a non-reentrant model
 18175 ;;
 18176                           
 18177                           	psect	text91
 18178  004F90                     __ptext91:
 18179                           	callstack 0
 18180  004F90                     _dummy_clocks:
 18181                           	callstack 16
 18182                           
 18183                           ;incstack = 0
 18184                           ;dummy_clocks@n stored from wreg
 18185  004F90  6E1B               	movwf	dummy_clocks@n^0,c
 18186                           
 18187                           ;SDCard.c: 76: unsigned int i;;SDCard.c: 77: _delay((unsigned long)((1)*(48000000/4000.0
      +                          )));
 18188  004F92  0E10               	movlw	16
 18189  004F94  6E19               	movwf	??_dummy_clocks^0,c
 18190  004F96  0E94               	movlw	148
 18191  004F98                     u15457:
 18192  004F98  2EE8               	decfsz	wreg,f,c
 18193  004F9A  D7FE               	bra	u15457
 18194  004F9C  2E19               	decfsz	??_dummy_clocks^0,f,c
 18195  004F9E  D7FC               	bra	u15457
 18196  004FA0  D000               	nop2	
 18197                           
 18198                           ;SDCard.c: 78: for(i=0;i<n;i++)
 18199  004FA2  0E00               	movlw	0
 18200  004FA4  6E1D               	movwf	(dummy_clocks@i+1)^0,c
 18201  004FA6  0E00               	movlw	0
 18202  004FA8  6E1C               	movwf	dummy_clocks@i^0,c
 18203  004FAA  D006               	goto	l9424
 18204  004FAC                     l565:
 18205                           
 18206                           ;SDCard.c: 79: {;SDCard.c: 80: LATBbits.LATB4 = 1;
 18207  004FAC  888A               	bsf	138,4,c	;volatile
 18208                           
 18209                           ;SDCard.c: 81: leitura_SPI();
 18210  004FAE  EC36  F02A         	call	_leitura_SPI	;wreg free
 18211                           
 18212                           ;SDCard.c: 82: LATBbits.LATB4 = 0;
 18213  004FB2  988A               	bcf	138,4,c	;volatile
 18214  004FB4  4A1C               	infsnz	dummy_clocks@i^0,f,c
 18215  004FB6  2A1D               	incf	(dummy_clocks@i+1)^0,f,c
 18216  004FB8                     l9424:
 18217  004FB8  501B               	movf	dummy_clocks@n^0,w,c
 18218  004FBA  6E19               	movwf	??_dummy_clocks^0,c
 18219  004FBC  6A1A               	clrf	(??_dummy_clocks+1)^0,c
 18220  004FBE  5019               	movf	??_dummy_clocks^0,w,c
 18221  004FC0  5C1C               	subwf	dummy_clocks@i^0,w,c
 18222  004FC2  501A               	movf	(??_dummy_clocks+1)^0,w,c
 18223  004FC4  581D               	subwfb	(dummy_clocks@i+1)^0,w,c
 18224  004FC6  B0D8               	btfsc	status,0,c
 18225  004FC8  0012               	return	
 18226  004FCA  D7F0               	goto	l565
 18227  004FCC                     __end_of_dummy_clocks:
 18228                           	callstack 0
 18229                           
 18230 ;; *************** function _leitura_SPI *****************
 18231 ;; Defined at:
 18232 ;;		line 82 in file "bibliotecas/SPI.c"
 18233 ;; Parameters:    Size  Location     Type
 18234 ;;		None
 18235 ;; Auto vars:     Size  Location     Type
 18236 ;;		None
 18237 ;; Return value:  Size  Location     Type
 18238 ;;                  1    wreg      unsigned char 
 18239 ;; Registers used:
 18240 ;;		wreg, status,2
 18241 ;; Tracked objects:
 18242 ;;		On entry : 0/0
 18243 ;;		On exit  : 0/0
 18244 ;;		Unchanged: 0/0
 18245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18246 ;;      Params:         0       0       0       0       0       0       0       0       0
 18247 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18248 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18249 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18250 ;;Total ram usage:        0 bytes
 18251 ;; Hardware stack levels used:    1
 18252 ;; Hardware stack levels required when called:    3
 18253 ;; This function calls:
 18254 ;;		Nothing
 18255 ;; This function is called by:
 18256 ;;		_sdc_disk_write
 18257 ;;		_response
 18258 ;;		_dummy_clocks
 18259 ;;		_wait_ready
 18260 ;; This function uses a non-reentrant model
 18261 ;;
 18262                           
 18263                           	psect	text92
 18264  00546C                     __ptext92:
 18265                           	callstack 0
 18266  00546C                     _leitura_SPI:
 18267                           	callstack 16
 18268                           
 18269                           ;SPI.c: 84: SSPBUF = 0xFF;
 18270                           
 18271                           ;incstack = 0
 18272  00546C  68C9               	setf	201,c	;volatile
 18273                           
 18274                           ;SPI.c: 85: SSPSTATbits.BF = 0;
 18275  00546E  90C7               	bcf	199,0,c	;volatile
 18276  005470                     l656:
 18277  005470  A0C7               	btfss	199,0,c	;volatile
 18278  005472  D7FE               	goto	l656
 18279                           
 18280                           ;SPI.c: 87: return (SSPBUF);
 18281  005474  50C9               	movf	201,w,c	;volatile
 18282  005476  0012               	return		;funcret
 18283  005478                     __end_of_leitura_SPI:
 18284                           	callstack 0
 18285                           
 18286 ;; *************** function _disk_ioctl *****************
 18287 ;; Defined at:
 18288 ;;		line 198 in file "bibliotecas/diskio.c"
 18289 ;; Parameters:    Size  Location     Type
 18290 ;;  pdrv            1    wreg     unsigned char 
 18291 ;;  cmd             1   24[COMRAM] unsigned char 
 18292 ;;  buff            2   25[COMRAM] PTR void 
 18293 ;;		 -> NULL(0), 
 18294 ;; Auto vars:     Size  Location     Type
 18295 ;;  pdrv            1   27[COMRAM] unsigned char 
 18296 ;;  result          2    0        int 
 18297 ;;  res             1   28[COMRAM] enum E25
 18298 ;; Return value:  Size  Location     Type
 18299 ;;                  1    wreg      enum E25
 18300 ;; Registers used:
 18301 ;;		wreg, status,2, status,0
 18302 ;; Tracked objects:
 18303 ;;		On entry : 3F/0
 18304 ;;		On exit  : 0/0
 18305 ;;		Unchanged: 0/0
 18306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18307 ;;      Params:         3       0       0       0       0       0       0       0       0
 18308 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18309 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18310 ;;      Totals:         5       0       0       0       0       0       0       0       0
 18311 ;;Total ram usage:        5 bytes
 18312 ;; Hardware stack levels used:    1
 18313 ;; Hardware stack levels required when called:    3
 18314 ;; This function calls:
 18315 ;;		Nothing
 18316 ;; This function is called by:
 18317 ;;		_sync
 18318 ;; This function uses a non-reentrant model
 18319 ;;
 18320                           
 18321                           	psect	text93
 18322  00530A                     __ptext93:
 18323                           	callstack 0
 18324  00530A                     _disk_ioctl:
 18325                           	callstack 21
 18326                           
 18327                           ;incstack = 0
 18328                           ;disk_ioctl@pdrv stored from wreg
 18329  00530A  6E1C               	movwf	disk_ioctl@pdrv^0,c
 18330                           
 18331                           ;diskio.c: 204: DRESULT res;;diskio.c: 205: int result;;diskio.c: 207: switch (pdrv) {
 18332  00530C  D002               	goto	l10342
 18333  00530E                     l68:
 18334                           
 18335                           ;diskio.c: 212: return res;
 18336  00530E  501D               	movf	disk_ioctl@res^0,w,c
 18337  005310  0012               	return	
 18338  005312                     l10342:
 18339  005312  501C               	movf	disk_ioctl@pdrv^0,w,c
 18340                           
 18341                           ; Switch size 1, requested type "simple"
 18342                           ; Number of cases is 3, Range of values is 0 to 2
 18343                           ; switch strategies available:
 18344                           ; Name         Instructions Cycles
 18345                           ; simple_byte           10     6 (average)
 18346                           ;	Chosen strategy is simple_byte
 18347  005314  0A00               	xorlw	0	; case 0
 18348  005316  B4D8               	btfsc	status,2,c
 18349  005318  D7FA               	goto	l68
 18350  00531A  0A01               	xorlw	1	; case 1
 18351  00531C  B4D8               	btfsc	status,2,c
 18352  00531E  D7F7               	goto	l68
 18353  005320  0A03               	xorlw	3	; case 2
 18354  005322  B4D8               	btfsc	status,2,c
 18355  005324  D7F4               	goto	l68
 18356                           
 18357                           ;diskio.c: 227: return RES_PARERR;
 18358  005326  0E04               	movlw	4
 18359  005328  0012               	return		;funcret
 18360  00532A                     __end_of_disk_ioctl:
 18361                           	callstack 0
 18362                           
 18363 ;; *************** function _get_fattime *****************
 18364 ;; Defined at:
 18365 ;;		line 810 in file "bibliotecas/tff.c"
 18366 ;; Parameters:    Size  Location     Type
 18367 ;;		None
 18368 ;; Auto vars:     Size  Location     Type
 18369 ;;  f_time         10   32[COMRAM] struct .
 18370 ;; Return value:  Size  Location     Type
 18371 ;;                  4   28[COMRAM] unsigned long 
 18372 ;; Registers used:
 18373 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 18374 ;; Tracked objects:
 18375 ;;		On entry : 3F/0
 18376 ;;		On exit  : 3F/0
 18377 ;;		Unchanged: 0/0
 18378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18379 ;;      Params:         4       0       0       0       0       0       0       0       0
 18380 ;;      Locals:        10       0       0       0       0       0       0       0       0
 18381 ;;      Temps:          0      38       0       0       0       0       0       0       0
 18382 ;;      Totals:        14      38       0       0       0       0       0       0       0
 18383 ;;Total ram usage:       52 bytes
 18384 ;; Hardware stack levels used:    1
 18385 ;; Hardware stack levels required when called:    4
 18386 ;; This function calls:
 18387 ;;		_GPSDay
 18388 ;;		_GPSHour
 18389 ;;		_GPSMinute
 18390 ;;		_GPSMonth
 18391 ;;		_GPSSecond
 18392 ;;		_GPSyear
 18393 ;; This function is called by:
 18394 ;;		_f_open
 18395 ;;		_f_sync
 18396 ;; This function uses a non-reentrant model
 18397 ;;
 18398                           
 18399                           	psect	text94
 18400  003404                     __ptext94:
 18401                           	callstack 0
 18402  003404                     _get_fattime:
 18403                           	callstack 22
 18404                           
 18405                           ; BSR set to: 0
 18406                           ;tff.c: 812: fat_time f_time;;tff.c: 814: f_time.hora = GPSHour() - 3;
 18407                           
 18408                           ;incstack = 0
 18409  003404  ECFD  F028         	call	_GPSHour	;wreg free
 18410  003408  0EFD               	movlw	253
 18411  00340A  2419               	addwf	?_GPSHour^0,w,c
 18412  00340C  6E21               	movwf	get_fattime@f_time^0,c
 18413  00340E  0EFF               	movlw	255
 18414  003410  201A               	addwfc	(?_GPSHour+1)^0,w,c
 18415  003412  6E22               	movwf	(get_fattime@f_time+1)^0,c
 18416                           
 18417                           ;tff.c: 815: f_time.min = GPSMinute();
 18418  003414  EC53  F029         	call	_GPSMinute	;wreg free
 18419  003418  C019  F023         	movff	?_GPSMinute,get_fattime@f_time+2
 18420  00341C  C01A  F024         	movff	?_GPSMinute+1,get_fattime@f_time+3
 18421                           
 18422                           ;tff.c: 816: f_time.seg = GPSSecond();
 18423  003420  EC31  F029         	call	_GPSSecond	;wreg free
 18424  003424  C019  F025         	movff	?_GPSSecond,get_fattime@f_time+4
 18425  003428  C01A  F026         	movff	?_GPSSecond+1,get_fattime@f_time+5
 18426                           
 18427                           ;tff.c: 817: f_time.ano = GPSyear() + 2000;
 18428  00342C  EC20  F029         	call	_GPSyear	;wreg free
 18429  003430  0ED0               	movlw	208
 18430  003432  2419               	addwf	?_GPSyear^0,w,c
 18431  003434  6E29               	movwf	(get_fattime@f_time+8)^0,c
 18432  003436  0E07               	movlw	7
 18433  003438  201A               	addwfc	(?_GPSyear+1)^0,w,c
 18434  00343A  6E2A               	movwf	(get_fattime@f_time+9)^0,c
 18435                           
 18436                           ;tff.c: 818: f_time.mes = GPSMonth();
 18437  00343C  EC42  F029         	call	_GPSMonth	;wreg free
 18438  003440  5019               	movf	?_GPSMonth^0,w,c
 18439  003442  6E28               	movwf	(get_fattime@f_time+7)^0,c
 18440                           
 18441                           ;tff.c: 819: f_time.dia = GPSDay();
 18442  003444  EC64  F029         	call	_GPSDay	;wreg free
 18443  003448  5019               	movf	?_GPSDay^0,w,c
 18444  00344A  6E27               	movwf	(get_fattime@f_time+6)^0,c
 18445                           
 18446                           ; BSR set to: 1
 18447                           ;tff.c: 821: return (DWORD)(f_time.ano - 60) << 25 |;tff.c: 822: (DWORD)(f_time.mes) << 
      +                          21 |;tff.c: 823: (DWORD)(f_time.dia) << 16 |;tff.c: 824: (DWORD)(f_time.hora) << 11 |;tf
      +                          f.c: 825: (DWORD)(f_time.min) << 5 |;tff.c: 826: (DWORD)(f_time.seg) >> 1;
 18448  00344C  90D8               	bcf	status,0,c
 18449  00344E  3026               	rrcf	(get_fattime@f_time+5)^0,w,c
 18450  003450  0100               	movlb	0	; () banked
 18451  003452  6F61               	movwf	(??_get_fattime+1)& (0+255),b
 18452  003454  3025               	rrcf	(get_fattime@f_time+4)^0,w,c
 18453  003456  6F60               	movwf	??_get_fattime& (0+255),b
 18454  003458  5023               	movf	(get_fattime@f_time+2)^0,w,c
 18455  00345A  6F62               	movwf	(??_get_fattime+2)& (0+255),b
 18456  00345C  5024               	movf	(get_fattime@f_time+3)^0,w,c
 18457  00345E  6F63               	movwf	(??_get_fattime+3)& (0+255),b
 18458  003460  6B64               	clrf	(??_get_fattime+4)& (0+255),b
 18459  003462  6B65               	clrf	(??_get_fattime+5)& (0+255),b
 18460  003464  0E05               	movlw	5
 18461  003466                     u12405:
 18462  003466  90D8               	bcf	status,0,c
 18463  003468  3762               	rlcf	(??_get_fattime+2)& (0+255),f,b
 18464  00346A  3763               	rlcf	(??_get_fattime+3)& (0+255),f,b
 18465  00346C  3764               	rlcf	(??_get_fattime+4)& (0+255),f,b
 18466  00346E  3765               	rlcf	(??_get_fattime+5)& (0+255),f,b
 18467  003470  2EE8               	decfsz	wreg,f,c
 18468  003472  D7F9               	goto	u12405
 18469  003474  5021               	movf	get_fattime@f_time^0,w,c
 18470  003476  6F66               	movwf	(??_get_fattime+6)& (0+255),b
 18471  003478  5022               	movf	(get_fattime@f_time+1)^0,w,c
 18472  00347A  6F67               	movwf	(??_get_fattime+7)& (0+255),b
 18473  00347C  6B68               	clrf	(??_get_fattime+8)& (0+255),b
 18474  00347E  6B69               	clrf	(??_get_fattime+9)& (0+255),b
 18475  003480  0E0B               	movlw	11
 18476  003482                     u12415:
 18477  003482  90D8               	bcf	status,0,c
 18478  003484  3766               	rlcf	(??_get_fattime+6)& (0+255),f,b
 18479  003486  3767               	rlcf	(??_get_fattime+7)& (0+255),f,b
 18480  003488  3768               	rlcf	(??_get_fattime+8)& (0+255),f,b
 18481  00348A  3769               	rlcf	(??_get_fattime+9)& (0+255),f,b
 18482  00348C  2EE8               	decfsz	wreg,f,c
 18483  00348E  D7F9               	goto	u12415
 18484  003490  C027  F06A         	movff	get_fattime@f_time+6,??_get_fattime+10
 18485  003494  6B6B               	clrf	(??_get_fattime+11)& (0+255),b
 18486  003496  6B6C               	clrf	(??_get_fattime+12)& (0+255),b
 18487  003498  6B6D               	clrf	(??_get_fattime+13)& (0+255),b
 18488  00349A  C06B  F06D         	movff	??_get_fattime+11,??_get_fattime+13
 18489  00349E  C06A  F06C         	movff	??_get_fattime+10,??_get_fattime+12
 18490  0034A2  6B6B               	clrf	(??_get_fattime+11)& (0+255),b
 18491  0034A4  6B6A               	clrf	(??_get_fattime+10)& (0+255),b
 18492  0034A6  C028  F06E         	movff	get_fattime@f_time+7,??_get_fattime+14
 18493  0034AA  6B6F               	clrf	(??_get_fattime+15)& (0+255),b
 18494  0034AC  6B70               	clrf	(??_get_fattime+16)& (0+255),b
 18495  0034AE  6B71               	clrf	(??_get_fattime+17)& (0+255),b
 18496  0034B0  0E15               	movlw	21
 18497  0034B2                     u12425:
 18498  0034B2  90D8               	bcf	status,0,c
 18499  0034B4  376E               	rlcf	(??_get_fattime+14)& (0+255),f,b
 18500  0034B6  376F               	rlcf	(??_get_fattime+15)& (0+255),f,b
 18501  0034B8  3770               	rlcf	(??_get_fattime+16)& (0+255),f,b
 18502  0034BA  3771               	rlcf	(??_get_fattime+17)& (0+255),f,b
 18503  0034BC  2EE8               	decfsz	wreg,f,c
 18504  0034BE  D7F9               	goto	u12425
 18505  0034C0  0EC4               	movlw	196
 18506  0034C2  2429               	addwf	(get_fattime@f_time+8)^0,w,c
 18507  0034C4  6F72               	movwf	(??_get_fattime+18)& (0+255),b
 18508  0034C6  0EFF               	movlw	255
 18509  0034C8  202A               	addwfc	(get_fattime@f_time+9)^0,w,c
 18510  0034CA  6F73               	movwf	(??_get_fattime+19)& (0+255),b
 18511  0034CC  6B74               	clrf	(??_get_fattime+20)& (0+255),b
 18512  0034CE  6B75               	clrf	(??_get_fattime+21)& (0+255),b
 18513  0034D0  0E19               	movlw	25
 18514  0034D2                     u12435:
 18515  0034D2  90D8               	bcf	status,0,c
 18516  0034D4  3772               	rlcf	(??_get_fattime+18)& (0+255),f,b
 18517  0034D6  3773               	rlcf	(??_get_fattime+19)& (0+255),f,b
 18518  0034D8  3774               	rlcf	(??_get_fattime+20)& (0+255),f,b
 18519  0034DA  3775               	rlcf	(??_get_fattime+21)& (0+255),f,b
 18520  0034DC  2EE8               	decfsz	wreg,f,c
 18521  0034DE  D7F9               	goto	u12435
 18522  0034E0  516E               	movf	(??_get_fattime+14)& (0+255),w,b
 18523  0034E2  1172               	iorwf	(??_get_fattime+18)& (0+255),w,b
 18524  0034E4  6F76               	movwf	(??_get_fattime+22)& (0+255),b
 18525  0034E6  516F               	movf	(??_get_fattime+15)& (0+255),w,b
 18526  0034E8  1173               	iorwf	(??_get_fattime+19)& (0+255),w,b
 18527  0034EA  6F77               	movwf	(??_get_fattime+23)& (0+255),b
 18528  0034EC  5170               	movf	(??_get_fattime+16)& (0+255),w,b
 18529  0034EE  1174               	iorwf	(??_get_fattime+20)& (0+255),w,b
 18530  0034F0  6F78               	movwf	(??_get_fattime+24)& (0+255),b
 18531  0034F2  5171               	movf	(??_get_fattime+17)& (0+255),w,b
 18532  0034F4  1175               	iorwf	(??_get_fattime+21)& (0+255),w,b
 18533  0034F6  6F79               	movwf	(??_get_fattime+25)& (0+255),b
 18534  0034F8  516A               	movf	(??_get_fattime+10)& (0+255),w,b
 18535  0034FA  1176               	iorwf	(??_get_fattime+22)& (0+255),w,b
 18536  0034FC  6F7A               	movwf	(??_get_fattime+26)& (0+255),b
 18537  0034FE  516B               	movf	(??_get_fattime+11)& (0+255),w,b
 18538  003500  1177               	iorwf	(??_get_fattime+23)& (0+255),w,b
 18539  003502  6F7B               	movwf	(??_get_fattime+27)& (0+255),b
 18540  003504  516C               	movf	(??_get_fattime+12)& (0+255),w,b
 18541  003506  1178               	iorwf	(??_get_fattime+24)& (0+255),w,b
 18542  003508  6F7C               	movwf	(??_get_fattime+28)& (0+255),b
 18543  00350A  516D               	movf	(??_get_fattime+13)& (0+255),w,b
 18544  00350C  1179               	iorwf	(??_get_fattime+25)& (0+255),w,b
 18545  00350E  6F7D               	movwf	(??_get_fattime+29)& (0+255),b
 18546  003510  5166               	movf	(??_get_fattime+6)& (0+255),w,b
 18547  003512  117A               	iorwf	(??_get_fattime+26)& (0+255),w,b
 18548  003514  6F7E               	movwf	(??_get_fattime+30)& (0+255),b
 18549  003516  5167               	movf	(??_get_fattime+7)& (0+255),w,b
 18550  003518  117B               	iorwf	(??_get_fattime+27)& (0+255),w,b
 18551  00351A  6F7F               	movwf	(??_get_fattime+31)& (0+255),b
 18552  00351C  5168               	movf	(??_get_fattime+8)& (0+255),w,b
 18553  00351E  117C               	iorwf	(??_get_fattime+28)& (0+255),w,b
 18554  003520  6F80               	movwf	(??_get_fattime+32)& (0+255),b
 18555  003522  5169               	movf	(??_get_fattime+9)& (0+255),w,b
 18556  003524  117D               	iorwf	(??_get_fattime+29)& (0+255),w,b
 18557  003526  6F81               	movwf	(??_get_fattime+33)& (0+255),b
 18558  003528  5162               	movf	(??_get_fattime+2)& (0+255),w,b
 18559  00352A  117E               	iorwf	(??_get_fattime+30)& (0+255),w,b
 18560  00352C  6F82               	movwf	(??_get_fattime+34)& (0+255),b
 18561  00352E  5163               	movf	(??_get_fattime+3)& (0+255),w,b
 18562  003530  117F               	iorwf	(??_get_fattime+31)& (0+255),w,b
 18563  003532  6F83               	movwf	(??_get_fattime+35)& (0+255),b
 18564  003534  5164               	movf	(??_get_fattime+4)& (0+255),w,b
 18565  003536  1180               	iorwf	(??_get_fattime+32)& (0+255),w,b
 18566  003538  6F84               	movwf	(??_get_fattime+36)& (0+255),b
 18567  00353A  5165               	movf	(??_get_fattime+5)& (0+255),w,b
 18568  00353C  1181               	iorwf	(??_get_fattime+33)& (0+255),w,b
 18569  00353E  6F85               	movwf	(??_get_fattime+37)& (0+255),b
 18570  003540  5160               	movf	??_get_fattime& (0+255),w,b
 18571  003542  1182               	iorwf	(??_get_fattime+34)& (0+255),w,b
 18572  003544  6E1D               	movwf	?_get_fattime^0,c
 18573  003546  5161               	movf	(??_get_fattime+1)& (0+255),w,b
 18574  003548  1183               	iorwf	(??_get_fattime+35)& (0+255),w,b
 18575  00354A  6E1E               	movwf	(?_get_fattime+1)^0,c
 18576  00354C  0E00               	movlw	0
 18577  00354E  1184               	iorwf	(??_get_fattime+36)& (0+255),w,b
 18578  003550  6E1F               	movwf	(?_get_fattime+2)^0,c
 18579  003552  0E00               	movlw	0
 18580  003554  1185               	iorwf	(??_get_fattime+37)& (0+255),w,b
 18581  003556  6E20               	movwf	(?_get_fattime+3)^0,c
 18582                           
 18583                           ; BSR set to: 0
 18584  003558  0012               	return		;funcret
 18585  00355A                     __end_of_get_fattime:
 18586                           	callstack 0
 18587                           
 18588 ;; *************** function _GPSyear *****************
 18589 ;; Defined at:
 18590 ;;		line 167 in file "bibliotecas/GPS.c"
 18591 ;; Parameters:    Size  Location     Type
 18592 ;;		None
 18593 ;; Auto vars:     Size  Location     Type
 18594 ;;		None
 18595 ;; Return value:  Size  Location     Type
 18596 ;;                  2   24[COMRAM] unsigned int 
 18597 ;; Registers used:
 18598 ;;		wreg, status,2, status,0, prodl, prodh
 18599 ;; Tracked objects:
 18600 ;;		On entry : 3F/1
 18601 ;;		On exit  : 3F/1
 18602 ;;		Unchanged: 0/0
 18603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18604 ;;      Params:         2       0       0       0       0       0       0       0       0
 18605 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18606 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18607 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18608 ;;Total ram usage:        4 bytes
 18609 ;; Hardware stack levels used:    1
 18610 ;; Hardware stack levels required when called:    3
 18611 ;; This function calls:
 18612 ;;		Nothing
 18613 ;; This function is called by:
 18614 ;;		_get_fattime
 18615 ;; This function uses a non-reentrant model
 18616 ;;
 18617                           
 18618                           	psect	text95
 18619  005240                     __ptext95:
 18620                           	callstack 0
 18621  005240                     _GPSyear:
 18622                           	callstack 22
 18623                           
 18624                           ; BSR set to: 1
 18625                           ;GPS.c: 169: return ((rawDate[4] - '0') * 10 + (rawDate[5] - '0'));
 18626                           
 18627                           ; BSR set to: 0
 18628                           ;incstack = 0
 18629  005240  51E0               	movf	(_rawDate+4)& (0+255),w,b
 18630  005242  0D0A               	mullw	10
 18631  005244  CFF3 F01B          	movff	prodl,??_GPSyear
 18632  005248  CFF4 F01C          	movff	prodh,??_GPSyear+1
 18633  00524C  51E1               	movf	(_rawDate+5)& (0+255),w,b
 18634  00524E  261B               	addwf	??_GPSyear^0,f,c
 18635  005250  0E00               	movlw	0
 18636  005252  221C               	addwfc	(??_GPSyear+1)^0,f,c
 18637  005254  0EF0               	movlw	240
 18638  005256  241B               	addwf	??_GPSyear^0,w,c
 18639  005258  6E19               	movwf	?_GPSyear^0,c
 18640  00525A  0EFD               	movlw	253
 18641  00525C  201C               	addwfc	(??_GPSyear+1)^0,w,c
 18642  00525E  6E1A               	movwf	(?_GPSyear+1)^0,c
 18643                           
 18644                           ; BSR set to: 1
 18645  005260  0012               	return		;funcret
 18646  005262                     __end_of_GPSyear:
 18647                           	callstack 0
 18648                           
 18649 ;; *************** function _GPSSecond *****************
 18650 ;; Defined at:
 18651 ;;		line 146 in file "bibliotecas/GPS.c"
 18652 ;; Parameters:    Size  Location     Type
 18653 ;;		None
 18654 ;; Auto vars:     Size  Location     Type
 18655 ;;		None
 18656 ;; Return value:  Size  Location     Type
 18657 ;;                  2   24[COMRAM] unsigned int 
 18658 ;; Registers used:
 18659 ;;		wreg, status,2, status,0, prodl, prodh
 18660 ;; Tracked objects:
 18661 ;;		On entry : 3F/1
 18662 ;;		On exit  : 3F/1
 18663 ;;		Unchanged: 0/0
 18664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18665 ;;      Params:         2       0       0       0       0       0       0       0       0
 18666 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18667 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18668 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18669 ;;Total ram usage:        4 bytes
 18670 ;; Hardware stack levels used:    1
 18671 ;; Hardware stack levels required when called:    3
 18672 ;; This function calls:
 18673 ;;		Nothing
 18674 ;; This function is called by:
 18675 ;;		_get_fattime
 18676 ;; This function uses a non-reentrant model
 18677 ;;
 18678                           
 18679                           	psect	text96
 18680  005262                     __ptext96:
 18681                           	callstack 0
 18682  005262                     _GPSSecond:
 18683                           	callstack 22
 18684                           
 18685                           ; BSR set to: 1
 18686                           ;GPS.c: 148: return ((rawTime[4] - '0') * 10 + (rawTime[5] - '0'));
 18687                           
 18688                           ; BSR set to: 1
 18689                           ;incstack = 0
 18690  005262  51D5               	movf	(_rawTime+4)& (0+255),w,b
 18691  005264  0D0A               	mullw	10
 18692  005266  CFF3 F01B          	movff	prodl,??_GPSSecond
 18693  00526A  CFF4 F01C          	movff	prodh,??_GPSSecond+1
 18694  00526E  51D6               	movf	(_rawTime+5)& (0+255),w,b
 18695  005270  261B               	addwf	??_GPSSecond^0,f,c
 18696  005272  0E00               	movlw	0
 18697  005274  221C               	addwfc	(??_GPSSecond+1)^0,f,c
 18698  005276  0EF0               	movlw	240
 18699  005278  241B               	addwf	??_GPSSecond^0,w,c
 18700  00527A  6E19               	movwf	?_GPSSecond^0,c
 18701  00527C  0EFD               	movlw	253
 18702  00527E  201C               	addwfc	(??_GPSSecond+1)^0,w,c
 18703  005280  6E1A               	movwf	(?_GPSSecond+1)^0,c
 18704                           
 18705                           ; BSR set to: 1
 18706  005282  0012               	return		;funcret
 18707  005284                     __end_of_GPSSecond:
 18708                           	callstack 0
 18709                           
 18710 ;; *************** function _GPSMonth *****************
 18711 ;; Defined at:
 18712 ;;		line 163 in file "bibliotecas/GPS.c"
 18713 ;; Parameters:    Size  Location     Type
 18714 ;;		None
 18715 ;; Auto vars:     Size  Location     Type
 18716 ;;		None
 18717 ;; Return value:  Size  Location     Type
 18718 ;;                  2   24[COMRAM] unsigned int 
 18719 ;; Registers used:
 18720 ;;		wreg, status,2, status,0, prodl, prodh
 18721 ;; Tracked objects:
 18722 ;;		On entry : 3F/1
 18723 ;;		On exit  : 3F/1
 18724 ;;		Unchanged: 0/0
 18725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18726 ;;      Params:         2       0       0       0       0       0       0       0       0
 18727 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18728 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18729 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18730 ;;Total ram usage:        4 bytes
 18731 ;; Hardware stack levels used:    1
 18732 ;; Hardware stack levels required when called:    3
 18733 ;; This function calls:
 18734 ;;		Nothing
 18735 ;; This function is called by:
 18736 ;;		_get_fattime
 18737 ;; This function uses a non-reentrant model
 18738 ;;
 18739                           
 18740                           	psect	text97
 18741  005284                     __ptext97:
 18742                           	callstack 0
 18743  005284                     _GPSMonth:
 18744                           	callstack 22
 18745                           
 18746                           ; BSR set to: 1
 18747                           ;GPS.c: 165: return ((rawDate[2] - '0') * 10 + (rawDate[3] - '0'));
 18748                           
 18749                           ; BSR set to: 1
 18750                           ;incstack = 0
 18751  005284  51DE               	movf	(_rawDate+2)& (0+255),w,b
 18752  005286  0D0A               	mullw	10
 18753  005288  CFF3 F01B          	movff	prodl,??_GPSMonth
 18754  00528C  CFF4 F01C          	movff	prodh,??_GPSMonth+1
 18755  005290  51DF               	movf	(_rawDate+3)& (0+255),w,b
 18756  005292  261B               	addwf	??_GPSMonth^0,f,c
 18757  005294  0E00               	movlw	0
 18758  005296  221C               	addwfc	(??_GPSMonth+1)^0,f,c
 18759  005298  0EF0               	movlw	240
 18760  00529A  241B               	addwf	??_GPSMonth^0,w,c
 18761  00529C  6E19               	movwf	?_GPSMonth^0,c
 18762  00529E  0EFD               	movlw	253
 18763  0052A0  201C               	addwfc	(??_GPSMonth+1)^0,w,c
 18764  0052A2  6E1A               	movwf	(?_GPSMonth+1)^0,c
 18765                           
 18766                           ; BSR set to: 1
 18767  0052A4  0012               	return		;funcret
 18768  0052A6                     __end_of_GPSMonth:
 18769                           	callstack 0
 18770                           
 18771 ;; *************** function _GPSMinute *****************
 18772 ;; Defined at:
 18773 ;;		line 150 in file "bibliotecas/GPS.c"
 18774 ;; Parameters:    Size  Location     Type
 18775 ;;		None
 18776 ;; Auto vars:     Size  Location     Type
 18777 ;;		None
 18778 ;; Return value:  Size  Location     Type
 18779 ;;                  2   24[COMRAM] unsigned int 
 18780 ;; Registers used:
 18781 ;;		wreg, status,2, status,0, prodl, prodh
 18782 ;; Tracked objects:
 18783 ;;		On entry : 3F/1
 18784 ;;		On exit  : 3F/1
 18785 ;;		Unchanged: 0/0
 18786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18787 ;;      Params:         2       0       0       0       0       0       0       0       0
 18788 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18789 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18790 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18791 ;;Total ram usage:        4 bytes
 18792 ;; Hardware stack levels used:    1
 18793 ;; Hardware stack levels required when called:    3
 18794 ;; This function calls:
 18795 ;;		Nothing
 18796 ;; This function is called by:
 18797 ;;		_get_fattime
 18798 ;; This function uses a non-reentrant model
 18799 ;;
 18800                           
 18801                           	psect	text98
 18802  0052A6                     __ptext98:
 18803                           	callstack 0
 18804  0052A6                     _GPSMinute:
 18805                           	callstack 22
 18806                           
 18807                           ; BSR set to: 1
 18808                           ;GPS.c: 152: return ((rawTime[2] - '0') * 10 + (rawTime[3] - '0'));
 18809                           
 18810                           ; BSR set to: 1
 18811                           ;incstack = 0
 18812  0052A6  51D3               	movf	(_rawTime+2)& (0+255),w,b
 18813  0052A8  0D0A               	mullw	10
 18814  0052AA  CFF3 F01B          	movff	prodl,??_GPSMinute
 18815  0052AE  CFF4 F01C          	movff	prodh,??_GPSMinute+1
 18816  0052B2  51D4               	movf	(_rawTime+3)& (0+255),w,b
 18817  0052B4  261B               	addwf	??_GPSMinute^0,f,c
 18818  0052B6  0E00               	movlw	0
 18819  0052B8  221C               	addwfc	(??_GPSMinute+1)^0,f,c
 18820  0052BA  0EF0               	movlw	240
 18821  0052BC  241B               	addwf	??_GPSMinute^0,w,c
 18822  0052BE  6E19               	movwf	?_GPSMinute^0,c
 18823  0052C0  0EFD               	movlw	253
 18824  0052C2  201C               	addwfc	(??_GPSMinute+1)^0,w,c
 18825  0052C4  6E1A               	movwf	(?_GPSMinute+1)^0,c
 18826                           
 18827                           ; BSR set to: 1
 18828  0052C6  0012               	return		;funcret
 18829  0052C8                     __end_of_GPSMinute:
 18830                           	callstack 0
 18831                           
 18832 ;; *************** function _GPSHour *****************
 18833 ;; Defined at:
 18834 ;;		line 154 in file "bibliotecas/GPS.c"
 18835 ;; Parameters:    Size  Location     Type
 18836 ;;		None
 18837 ;; Auto vars:     Size  Location     Type
 18838 ;;		None
 18839 ;; Return value:  Size  Location     Type
 18840 ;;                  2   24[COMRAM] unsigned int 
 18841 ;; Registers used:
 18842 ;;		wreg, status,2, status,0, prodl, prodh
 18843 ;; Tracked objects:
 18844 ;;		On entry : 3F/0
 18845 ;;		On exit  : 3F/1
 18846 ;;		Unchanged: 0/0
 18847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18848 ;;      Params:         2       0       0       0       0       0       0       0       0
 18849 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18850 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18851 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18852 ;;Total ram usage:        4 bytes
 18853 ;; Hardware stack levels used:    1
 18854 ;; Hardware stack levels required when called:    3
 18855 ;; This function calls:
 18856 ;;		Nothing
 18857 ;; This function is called by:
 18858 ;;		_get_fattime
 18859 ;; This function uses a non-reentrant model
 18860 ;;
 18861                           
 18862                           	psect	text99
 18863  0051FA                     __ptext99:
 18864                           	callstack 0
 18865  0051FA                     _GPSHour:
 18866                           	callstack 22
 18867                           
 18868                           ; BSR set to: 0
 18869                           ;GPS.c: 156: return (((rawTime[0] - '0') * 10 + (rawTime[1] - '0')));
 18870                           
 18871                           ; BSR set to: 1
 18872                           ;incstack = 0
 18873  0051FA  0101               	movlb	1	; () banked
 18874  0051FC  51D1               	movf	_rawTime& (0+255),w,b
 18875  0051FE  0D0A               	mullw	10
 18876  005200  CFF3 F01B          	movff	prodl,??_GPSHour
 18877  005204  CFF4 F01C          	movff	prodh,??_GPSHour+1
 18878  005208  51D2               	movf	(_rawTime+1)& (0+255),w,b
 18879  00520A  261B               	addwf	??_GPSHour^0,f,c
 18880  00520C  0E00               	movlw	0
 18881  00520E  221C               	addwfc	(??_GPSHour+1)^0,f,c
 18882  005210  0EF0               	movlw	240
 18883  005212  241B               	addwf	??_GPSHour^0,w,c
 18884  005214  6E19               	movwf	?_GPSHour^0,c
 18885  005216  0EFD               	movlw	253
 18886  005218  201C               	addwfc	(??_GPSHour+1)^0,w,c
 18887  00521A  6E1A               	movwf	(?_GPSHour+1)^0,c
 18888                           
 18889                           ; BSR set to: 1
 18890  00521C  0012               	return		;funcret
 18891  00521E                     __end_of_GPSHour:
 18892                           	callstack 0
 18893                           
 18894 ;; *************** function _GPSDay *****************
 18895 ;; Defined at:
 18896 ;;		line 159 in file "bibliotecas/GPS.c"
 18897 ;; Parameters:    Size  Location     Type
 18898 ;;		None
 18899 ;; Auto vars:     Size  Location     Type
 18900 ;;		None
 18901 ;; Return value:  Size  Location     Type
 18902 ;;                  2   24[COMRAM] unsigned int 
 18903 ;; Registers used:
 18904 ;;		wreg, status,2, status,0, prodl, prodh
 18905 ;; Tracked objects:
 18906 ;;		On entry : 3F/1
 18907 ;;		On exit  : 3F/1
 18908 ;;		Unchanged: 0/0
 18909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18910 ;;      Params:         2       0       0       0       0       0       0       0       0
 18911 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18912 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18913 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18914 ;;Total ram usage:        4 bytes
 18915 ;; Hardware stack levels used:    1
 18916 ;; Hardware stack levels required when called:    3
 18917 ;; This function calls:
 18918 ;;		Nothing
 18919 ;; This function is called by:
 18920 ;;		_get_fattime
 18921 ;; This function uses a non-reentrant model
 18922 ;;
 18923                           
 18924                           	psect	text100
 18925  0052C8                     __ptext100:
 18926                           	callstack 0
 18927  0052C8                     _GPSDay:
 18928                           	callstack 22
 18929                           
 18930                           ; BSR set to: 1
 18931                           ;GPS.c: 161: return ((rawDate[0] - '0') * 10 + (rawDate[1] - '0'));
 18932                           
 18933                           ; BSR set to: 1
 18934                           ;incstack = 0
 18935  0052C8  51DC               	movf	_rawDate& (0+255),w,b
 18936  0052CA  0D0A               	mullw	10
 18937  0052CC  CFF3 F01B          	movff	prodl,??_GPSDay
 18938  0052D0  CFF4 F01C          	movff	prodh,??_GPSDay+1
 18939  0052D4  51DD               	movf	(_rawDate+1)& (0+255),w,b
 18940  0052D6  261B               	addwf	??_GPSDay^0,f,c
 18941  0052D8  0E00               	movlw	0
 18942  0052DA  221C               	addwfc	(??_GPSDay+1)^0,f,c
 18943  0052DC  0EF0               	movlw	240
 18944  0052DE  241B               	addwf	??_GPSDay^0,w,c
 18945  0052E0  6E19               	movwf	?_GPSDay^0,c
 18946  0052E2  0EFD               	movlw	253
 18947  0052E4  201C               	addwfc	(??_GPSDay+1)^0,w,c
 18948  0052E6  6E1A               	movwf	(?_GPSDay+1)^0,c
 18949                           
 18950                           ; BSR set to: 1
 18951  0052E8  0012               	return		;funcret
 18952  0052EA                     __end_of_GPSDay:
 18953                           	callstack 0
 18954                           
 18955 ;; *************** function _desliga_uart *****************
 18956 ;; Defined at:
 18957 ;;		line 219 in file "bibliotecas/uart.c"
 18958 ;; Parameters:    Size  Location     Type
 18959 ;;		None
 18960 ;; Auto vars:     Size  Location     Type
 18961 ;;		None
 18962 ;; Return value:  Size  Location     Type
 18963 ;;                  1    wreg      void 
 18964 ;; Registers used:
 18965 ;;		wreg, status,2
 18966 ;; Tracked objects:
 18967 ;;		On entry : 3F/0
 18968 ;;		On exit  : 3F/0
 18969 ;;		Unchanged: 3F/0
 18970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18971 ;;      Params:         0       0       0       0       0       0       0       0       0
 18972 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18973 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18974 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18975 ;;Total ram usage:        0 bytes
 18976 ;; Hardware stack levels used:    1
 18977 ;; Hardware stack levels required when called:    3
 18978 ;; This function calls:
 18979 ;;		Nothing
 18980 ;; This function is called by:
 18981 ;;		_escrita_sdcard
 18982 ;; This function uses a non-reentrant model
 18983 ;;
 18984                           
 18985                           	psect	text101
 18986  005446                     __ptext101:
 18987                           	callstack 0
 18988  005446                     _desliga_uart:
 18989                           	callstack 24
 18990                           
 18991                           ; BSR set to: 0
 18992                           ;uart.c: 221: TRISCbits.RC6 = 1;
 18993                           
 18994                           ; BSR set to: 1
 18995                           ;incstack = 0
 18996  005446  8C94               	bsf	148,6,c	;volatile
 18997                           
 18998                           ;uart.c: 222: TRISCbits.RC7 = 1;
 18999  005448  8E94               	bsf	148,7,c	;volatile
 19000                           
 19001                           ; BSR set to: 0
 19002                           ;uart.c: 225: TXSTA = 0x00;
 19003  00544A  0E00               	movlw	0
 19004  00544C  6EAC               	movwf	172,c	;volatile
 19005                           
 19006                           ;uart.c: 227: RCSTA = 0x00;
 19007  00544E  0E00               	movlw	0
 19008  005450  6EAB               	movwf	171,c	;volatile
 19009                           
 19010                           ; BSR set to: 0
 19011  005452  0012               	return		;funcret
 19012  005454                     __end_of_desliga_uart:
 19013                           	callstack 0
 19014                           
 19015 ;; *************** function _desliga_SPI *****************
 19016 ;; Defined at:
 19017 ;;		line 68 in file "bibliotecas/SPI.c"
 19018 ;; Parameters:    Size  Location     Type
 19019 ;;		None
 19020 ;; Auto vars:     Size  Location     Type
 19021 ;;		None
 19022 ;; Return value:  Size  Location     Type
 19023 ;;                  1    wreg      void 
 19024 ;; Registers used:
 19025 ;;		wreg, status,2
 19026 ;; Tracked objects:
 19027 ;;		On entry : 3F/0
 19028 ;;		On exit  : 3F/0
 19029 ;;		Unchanged: 3F/0
 19030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19031 ;;      Params:         0       0       0       0       0       0       0       0       0
 19032 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19033 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19034 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19035 ;;Total ram usage:        0 bytes
 19036 ;; Hardware stack levels used:    1
 19037 ;; Hardware stack levels required when called:    3
 19038 ;; This function calls:
 19039 ;;		Nothing
 19040 ;; This function is called by:
 19041 ;;		_escrita_sdcard
 19042 ;; This function uses a non-reentrant model
 19043 ;;
 19044                           
 19045                           	psect	text102
 19046  005478                     __ptext102:
 19047                           	callstack 0
 19048  005478                     _desliga_SPI:
 19049                           	callstack 24
 19050                           
 19051                           ; BSR set to: 0
 19052                           ;SPI.c: 70: SSPSTAT = 0x00;
 19053                           
 19054                           ; BSR set to: 0
 19055                           ;incstack = 0
 19056  005478  0E00               	movlw	0
 19057  00547A  6EC7               	movwf	199,c	;volatile
 19058                           
 19059                           ;SPI.c: 71: SSPCON1 = 0x00;
 19060  00547C  0E00               	movlw	0
 19061  00547E  6EC6               	movwf	198,c	;volatile
 19062                           
 19063                           ; BSR set to: 0
 19064                           ;SPI.c: 72: SSPCON1bits.SSPEN = 0;
 19065  005480  9AC6               	bcf	198,5,c	;volatile
 19066                           
 19067                           ; BSR set to: 0
 19068  005482  0012               	return		;funcret
 19069  005484                     __end_of_desliga_SPI:
 19070                           	callstack 0
 19071                           
 19072 ;; *************** function _dados_gps_to_sd *****************
 19073 ;; Defined at:
 19074 ;;		line 212 in file "bibliotecas/GPS.c"
 19075 ;; Parameters:    Size  Location     Type
 19076 ;;		None
 19077 ;; Auto vars:     Size  Location     Type
 19078 ;;		None
 19079 ;; Return value:  Size  Location     Type
 19080 ;;                  1    wreg      void 
 19081 ;; Registers used:
 19082 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 19083 ;; Tracked objects:
 19084 ;;		On entry : 0/0
 19085 ;;		On exit  : 0/0
 19086 ;;		Unchanged: 0/0
 19087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19088 ;;      Params:         0       0       0       0       0       0       0       0       0
 19089 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19090 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19091 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19092 ;;Total ram usage:        0 bytes
 19093 ;; Hardware stack levels used:    1
 19094 ;; Hardware stack levels required when called:    5
 19095 ;; This function calls:
 19096 ;;		_monta_sd
 19097 ;; This function is called by:
 19098 ;;		_main
 19099 ;; This function uses a non-reentrant model
 19100 ;;
 19101                           
 19102                           	psect	text103
 19103  004FCC                     __ptext103:
 19104                           	callstack 0
 19105  004FCC                     _dados_gps_to_sd:
 19106                           	callstack 25
 19107                           
 19108                           ;GPS.c: 214: monta_sd(0, rawTime);
 19109                           
 19110                           ; BSR set to: 0
 19111                           ;incstack = 0
 19112  004FCC  0ED1               	movlw	low _rawTime
 19113  004FCE  6E1D               	movwf	monta_sd@dado^0,c
 19114  004FD0  0E01               	movlw	high _rawTime
 19115  004FD2  6E1E               	movwf	(monta_sd@dado+1)^0,c
 19116  004FD4  0E00               	movlw	0
 19117  004FD6  EC0D  F01E         	call	_monta_sd
 19118                           
 19119                           ;GPS.c: 215: monta_sd(1, rawDate);
 19120  004FDA  0EDC               	movlw	low _rawDate
 19121  004FDC  6E1D               	movwf	monta_sd@dado^0,c
 19122  004FDE  0E01               	movlw	high _rawDate
 19123  004FE0  6E1E               	movwf	(monta_sd@dado+1)^0,c
 19124  004FE2  0E01               	movlw	1
 19125  004FE4  EC0D  F01E         	call	_monta_sd
 19126                           
 19127                           ;GPS.c: 216: monta_sd(2, rawLatitude);
 19128  004FE8  0E6B               	movlw	low _rawLatitude
 19129  004FEA  6E1D               	movwf	monta_sd@dado^0,c
 19130  004FEC  0E02               	movlw	high _rawLatitude
 19131  004FEE  6E1E               	movwf	(monta_sd@dado+1)^0,c
 19132  004FF0  0E02               	movlw	2
 19133  004FF2  EC0D  F01E         	call	_monta_sd
 19134                           
 19135                           ;GPS.c: 217: monta_sd(3, rawLongitude);
 19136  004FF6  0E5E               	movlw	low _rawLongitude
 19137  004FF8  6E1D               	movwf	monta_sd@dado^0,c
 19138  004FFA  0E02               	movlw	high _rawLongitude
 19139  004FFC  6E1E               	movwf	(monta_sd@dado+1)^0,c
 19140  004FFE  0E03               	movlw	3
 19141  005000  EC0D  F01E         	call	_monta_sd
 19142  005004  0012               	return		;funcret
 19143  005006                     __end_of_dados_gps_to_sd:
 19144                           	callstack 0
 19145                           
 19146 ;; *************** function _monta_sd *****************
 19147 ;; Defined at:
 19148 ;;		line 297 in file "bibliotecas/SDCard.c"
 19149 ;; Parameters:    Size  Location     Type
 19150 ;;  index           1    wreg     unsigned char 
 19151 ;;  dado            2   28[COMRAM] PTR unsigned char 
 19152 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 19153 ;; Auto vars:     Size  Location     Type
 19154 ;;  index           1   30[COMRAM] unsigned char 
 19155 ;;  i               1   32[COMRAM] unsigned char 
 19156 ;;  size            1   31[COMRAM] unsigned char 
 19157 ;; Return value:  Size  Location     Type
 19158 ;;                  1    wreg      void 
 19159 ;; Registers used:
 19160 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 19161 ;; Tracked objects:
 19162 ;;		On entry : 0/0
 19163 ;;		On exit  : 0/0
 19164 ;;		Unchanged: 0/0
 19165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19166 ;;      Params:         2       0       0       0       0       0       0       0       0
 19167 ;;      Locals:         3       0       0       0       0       0       0       0       0
 19168 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19169 ;;      Totals:         5       0       0       0       0       0       0       0       0
 19170 ;;Total ram usage:        5 bytes
 19171 ;; Hardware stack levels used:    1
 19172 ;; Hardware stack levels required when called:    4
 19173 ;; This function calls:
 19174 ;;		_strlen
 19175 ;; This function is called by:
 19176 ;;		_dados_gps_to_sd
 19177 ;; This function uses a non-reentrant model
 19178 ;;
 19179                           
 19180                           	psect	text104
 19181  003C1A                     __ptext104:
 19182                           	callstack 0
 19183  003C1A                     _monta_sd:
 19184                           	callstack 25
 19185                           
 19186                           ;incstack = 0
 19187                           ;monta_sd@index stored from wreg
 19188  003C1A  6E1F               	movwf	monta_sd@index^0,c
 19189                           
 19190                           ;SDCard.c: 299: unsigned char i, size;;SDCard.c: 300: size = strlen(dado);
 19191  003C1C  C01D  F019         	movff	monta_sd@dado,strlen@s
 19192  003C20  C01E  F01A         	movff	monta_sd@dado+1,strlen@s+1
 19193  003C24  ECC2  F028         	call	_strlen	;wreg free
 19194  003C28  5019               	movf	?_strlen^0,w,c
 19195  003C2A  6E20               	movwf	monta_sd@size^0,c
 19196                           
 19197                           ;SDCard.c: 301: switch(index)
 19198  003C2C  D06B               	goto	l11770
 19199  003C2E                     l11702:
 19200                           
 19201                           ;SDCard.c: 304: for(i=0; i<6;i++)
 19202  003C2E  0E00               	movlw	0
 19203  003C30  6E21               	movwf	monta_sd@i^0,c
 19204  003C32                     l11708:
 19205                           
 19206                           ;SDCard.c: 305: {;SDCard.c: 306: string_dado.hora[i] = *dado;
 19207  003C32  C01D  FFD9         	movff	monta_sd@dado,fsr2l
 19208  003C36  C01E  FFDA         	movff	monta_sd@dado+1,fsr2h
 19209  003C3A  0E07               	movlw	low (_string_dado+7)
 19210  003C3C  2421               	addwf	monta_sd@i^0,w,c
 19211  003C3E  6EE1               	movwf	fsr1l,c
 19212  003C40  6AE2               	clrf	fsr1h,c
 19213  003C42  0E02               	movlw	high (_string_dado+7)
 19214  003C44  22E2               	addwfc	fsr1h,f,c
 19215  003C46  CFDF FFE7          	movff	indf2,indf1
 19216                           
 19217                           ;SDCard.c: 307: dado++;
 19218  003C4A  4A1D               	infsnz	monta_sd@dado^0,f,c
 19219  003C4C  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 19220  003C4E  2A21               	incf	monta_sd@i^0,f,c
 19221  003C50  0E05               	movlw	5
 19222  003C52  6421               	cpfsgt	monta_sd@i^0,c
 19223  003C54  D7EE               	goto	l11708
 19224  003C56  0012               	return	
 19225  003C58                     l11716:
 19226                           
 19227                           ;SDCard.c: 312: for(i=0; i<6;i++)
 19228  003C58  0E00               	movlw	0
 19229  003C5A  6E21               	movwf	monta_sd@i^0,c
 19230  003C5C                     l11722:
 19231                           
 19232                           ;SDCard.c: 313: {;SDCard.c: 314: string_dado.data[i] = *dado;
 19233  003C5C  C01D  FFD9         	movff	monta_sd@dado,fsr2l
 19234  003C60  C01E  FFDA         	movff	monta_sd@dado+1,fsr2h
 19235  003C64  0E00               	movlw	low _string_dado
 19236  003C66  2421               	addwf	monta_sd@i^0,w,c
 19237  003C68  6EE1               	movwf	fsr1l,c
 19238  003C6A  6AE2               	clrf	fsr1h,c
 19239  003C6C  0E02               	movlw	high _string_dado
 19240  003C6E  22E2               	addwfc	fsr1h,f,c
 19241  003C70  CFDF FFE7          	movff	indf2,indf1
 19242                           
 19243                           ;SDCard.c: 315: dado++;
 19244  003C74  4A1D               	infsnz	monta_sd@dado^0,f,c
 19245  003C76  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 19246  003C78  2A21               	incf	monta_sd@i^0,f,c
 19247  003C7A  0E05               	movlw	5
 19248  003C7C  6421               	cpfsgt	monta_sd@i^0,c
 19249  003C7E  D7EE               	goto	l11722
 19250  003C80  0012               	return	
 19251  003C82                     l11730:
 19252                           
 19253                           ;SDCard.c: 326: for(i=0; i<13;i++)
 19254  003C82  0E00               	movlw	0
 19255  003C84  6E21               	movwf	monta_sd@i^0,c
 19256  003C86                     l11736:
 19257                           
 19258                           ;SDCard.c: 327: {;SDCard.c: 328: string_dado.lt[i] = *dado;
 19259  003C86  C01D  FFD9         	movff	monta_sd@dado,fsr2l
 19260  003C8A  C01E  FFDA         	movff	monta_sd@dado+1,fsr2h
 19261  003C8E  0E12               	movlw	low (_string_dado+18)
 19262  003C90  2421               	addwf	monta_sd@i^0,w,c
 19263  003C92  6EE1               	movwf	fsr1l,c
 19264  003C94  6AE2               	clrf	fsr1h,c
 19265  003C96  0E02               	movlw	high (_string_dado+18)
 19266  003C98  22E2               	addwfc	fsr1h,f,c
 19267  003C9A  CFDF FFE7          	movff	indf2,indf1
 19268                           
 19269                           ;SDCard.c: 329: dado++;
 19270  003C9E  4A1D               	infsnz	monta_sd@dado^0,f,c
 19271  003CA0  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 19272  003CA2  2A21               	incf	monta_sd@i^0,f,c
 19273  003CA4  0E0C               	movlw	12
 19274  003CA6  6421               	cpfsgt	monta_sd@i^0,c
 19275  003CA8  D7EE               	goto	l11736
 19276  003CAA  0012               	return	
 19277  003CAC                     l11744:
 19278                           
 19279                           ;SDCard.c: 335: for(i=0; i<13;i++)
 19280  003CAC  0E00               	movlw	0
 19281  003CAE  6E21               	movwf	monta_sd@i^0,c
 19282  003CB0                     l11750:
 19283                           
 19284                           ;SDCard.c: 336: {;SDCard.c: 337: string_dado.lo[i] = *dado;
 19285  003CB0  C01D  FFD9         	movff	monta_sd@dado,fsr2l
 19286  003CB4  C01E  FFDA         	movff	monta_sd@dado+1,fsr2h
 19287  003CB8  0E1F               	movlw	low (_string_dado+31)
 19288  003CBA  2421               	addwf	monta_sd@i^0,w,c
 19289  003CBC  6EE1               	movwf	fsr1l,c
 19290  003CBE  6AE2               	clrf	fsr1h,c
 19291  003CC0  0E02               	movlw	high (_string_dado+31)
 19292  003CC2  22E2               	addwfc	fsr1h,f,c
 19293  003CC4  CFDF FFE7          	movff	indf2,indf1
 19294                           
 19295                           ;SDCard.c: 338: dado++;
 19296  003CC8  4A1D               	infsnz	monta_sd@dado^0,f,c
 19297  003CCA  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 19298  003CCC  2A21               	incf	monta_sd@i^0,f,c
 19299  003CCE  0E0C               	movlw	12
 19300  003CD0  6421               	cpfsgt	monta_sd@i^0,c
 19301  003CD2  D7EE               	goto	l11750
 19302  003CD4  0012               	return	
 19303  003CD6                     l11758:
 19304                           
 19305                           ;SDCard.c: 344: for(i=0; i<size;i++)
 19306  003CD6  0E00               	movlw	0
 19307  003CD8  6E21               	movwf	monta_sd@i^0,c
 19308  003CDA  D00F               	goto	l11766
 19309  003CDC                     l11760:
 19310                           
 19311                           ;SDCard.c: 345: {;SDCard.c: 346: string_dado.lo[i] = *dado;
 19312  003CDC  C01D  FFD9         	movff	monta_sd@dado,fsr2l
 19313  003CE0  C01E  FFDA         	movff	monta_sd@dado+1,fsr2h
 19314  003CE4  0E1F               	movlw	low (_string_dado+31)
 19315  003CE6  2421               	addwf	monta_sd@i^0,w,c
 19316  003CE8  6EE1               	movwf	fsr1l,c
 19317  003CEA  6AE2               	clrf	fsr1h,c
 19318  003CEC  0E02               	movlw	high (_string_dado+31)
 19319  003CEE  22E2               	addwfc	fsr1h,f,c
 19320  003CF0  CFDF FFE7          	movff	indf2,indf1
 19321                           
 19322                           ;SDCard.c: 347: dado++;
 19323  003CF4  4A1D               	infsnz	monta_sd@dado^0,f,c
 19324  003CF6  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 19325  003CF8  2A21               	incf	monta_sd@i^0,f,c
 19326  003CFA                     l11766:
 19327  003CFA  5020               	movf	monta_sd@size^0,w,c
 19328  003CFC  5C21               	subwf	monta_sd@i^0,w,c
 19329  003CFE  B0D8               	btfsc	status,0,c
 19330  003D00  0012               	return	
 19331  003D02  D7EC               	goto	l11760
 19332  003D04                     l11770:
 19333  003D04  501F               	movf	monta_sd@index^0,w,c
 19334                           
 19335                           ; Switch size 1, requested type "simple"
 19336                           ; Number of cases is 5, Range of values is 0 to 4
 19337                           ; switch strategies available:
 19338                           ; Name         Instructions Cycles
 19339                           ; simple_byte           16     9 (average)
 19340                           ;	Chosen strategy is simple_byte
 19341  003D06  0A00               	xorlw	0	; case 0
 19342  003D08  B4D8               	btfsc	status,2,c
 19343  003D0A  D791               	goto	l11702
 19344  003D0C  0A01               	xorlw	1	; case 1
 19345  003D0E  B4D8               	btfsc	status,2,c
 19346  003D10  D7A3               	goto	l11716
 19347  003D12  0A03               	xorlw	3	; case 2
 19348  003D14  B4D8               	btfsc	status,2,c
 19349  003D16  D7B5               	goto	l11730
 19350  003D18  0A01               	xorlw	1	; case 3
 19351  003D1A  B4D8               	btfsc	status,2,c
 19352  003D1C  D7C7               	goto	l11744
 19353  003D1E  0A07               	xorlw	7	; case 4
 19354  003D20  A4D8               	btfss	status,2,c
 19355  003D22  0012               	return	
 19356  003D24  D7D8               	goto	l11758
 19357  003D26                     __end_of_monta_sd:
 19358                           	callstack 0
 19359                           
 19360 ;; *************** function _strlen *****************
 19361 ;; Defined at:
 19362 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strlen.c"
 19363 ;; Parameters:    Size  Location     Type
 19364 ;;  s               2   24[COMRAM] PTR const unsigned char 
 19365 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 19366 ;; Auto vars:     Size  Location     Type
 19367 ;;  cp              2   26[COMRAM] PTR const unsigned char 
 19368 ;;		 -> rawDate(7), rawLongitude(13), rawLatitude(13), rawTime(11), 
 19369 ;; Return value:  Size  Location     Type
 19370 ;;                  2   24[COMRAM] unsigned int 
 19371 ;; Registers used:
 19372 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19373 ;; Tracked objects:
 19374 ;;		On entry : 0/0
 19375 ;;		On exit  : 0/0
 19376 ;;		Unchanged: 0/0
 19377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19378 ;;      Params:         2       0       0       0       0       0       0       0       0
 19379 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19380 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19381 ;;      Totals:         4       0       0       0       0       0       0       0       0
 19382 ;;Total ram usage:        4 bytes
 19383 ;; Hardware stack levels used:    1
 19384 ;; Hardware stack levels required when called:    3
 19385 ;; This function calls:
 19386 ;;		Nothing
 19387 ;; This function is called by:
 19388 ;;		_monta_sd
 19389 ;; This function uses a non-reentrant model
 19390 ;;
 19391                           
 19392                           	psect	text105
 19393  005184                     __ptext105:
 19394                           	callstack 0
 19395  005184                     _strlen:
 19396                           	callstack 25
 19397                           
 19398                           ;incstack = 0
 19399  005184  C019  F01B         	movff	strlen@s,strlen@cp
 19400  005188  C01A  F01C         	movff	strlen@s+1,strlen@cp+1
 19401  00518C  D002               	goto	l11636
 19402  00518E                     l11634:
 19403  00518E  4A1B               	infsnz	strlen@cp^0,f,c
 19404  005190  2A1C               	incf	(strlen@cp+1)^0,f,c
 19405  005192                     l11636:
 19406  005192  C01B  FFD9         	movff	strlen@cp,fsr2l
 19407  005196  C01C  FFDA         	movff	strlen@cp+1,fsr2h
 19408  00519A  50DF               	movf	indf2,w,c
 19409  00519C  A4D8               	btfss	status,2,c
 19410  00519E  D7F7               	goto	l11634
 19411  0051A0  5019               	movf	strlen@s^0,w,c
 19412  0051A2  5C1B               	subwf	strlen@cp^0,w,c
 19413  0051A4  6E19               	movwf	?_strlen^0,c
 19414  0051A6  501A               	movf	(strlen@s+1)^0,w,c
 19415  0051A8  581C               	subwfb	(strlen@cp+1)^0,w,c
 19416  0051AA  6E1A               	movwf	(?_strlen+1)^0,c
 19417  0051AC  0012               	return		;funcret
 19418  0051AE                     __end_of_strlen:
 19419                           	callstack 0
 19420                           
 19421 ;; *************** function _isr *****************
 19422 ;; Defined at:
 19423 ;;		line 107 in file "main.c"
 19424 ;; Parameters:    Size  Location     Type
 19425 ;;		None
 19426 ;; Auto vars:     Size  Location     Type
 19427 ;;  cont            1   23[COMRAM] unsigned char 
 19428 ;; Return value:  Size  Location     Type
 19429 ;;                  1    wreg      void 
 19430 ;; Registers used:
 19431 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19432 ;; Tracked objects:
 19433 ;;		On entry : 0/0
 19434 ;;		On exit  : 0/0
 19435 ;;		Unchanged: 0/0
 19436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19437 ;;      Params:         0       0       0       0       0       0       0       0       0
 19438 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19439 ;;      Temps:         12       0       0       0       0       0       0       0       0
 19440 ;;      Totals:        13       0       0       0       0       0       0       0       0
 19441 ;;Total ram usage:       13 bytes
 19442 ;; Hardware stack levels used:    1
 19443 ;; Hardware stack levels required when called:    2
 19444 ;; This function calls:
 19445 ;;		_GPSRead
 19446 ;;		_recebe_dado_uart
 19447 ;;		i2_write_timer_zero
 19448 ;; This function is called by:
 19449 ;;		Interrupt level 2
 19450 ;; This function uses a non-reentrant model
 19451 ;;
 19452                           
 19453                           	psect	intcode
 19454  000008                     __pintcode:
 19455                           	callstack 0
 19456  000008                     _isr:
 19457                           	callstack 13
 19458                           
 19459                           ;incstack = 0
 19460  000008  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19461  00000A  ED47  F01B         	call	int_func,f	;refresh shadow registers
 19462                           
 19463                           	psect	intcode_body
 19464  00368E                     __pintcode_body:
 19465                           	callstack 13
 19466  00368E                     int_func:
 19467                           	callstack 13
 19468  00368E  0006               	pop		; remove dummy address from shadow register refresh
 19469  003690  CFE1 F00E          	movff	fsr1l,??_isr+2
 19470  003694  CFE2 F00F          	movff	fsr1h,??_isr+3
 19471  003698  CFD9 F010          	movff	fsr2l,??_isr+4
 19472  00369C  CFDA F011          	movff	fsr2h,??_isr+5
 19473  0036A0  CFF3 F012          	movff	prodl,??_isr+6
 19474  0036A4  CFF4 F013          	movff	prodh,??_isr+7
 19475  0036A8  CFF6 F014          	movff	tblptrl,??_isr+8
 19476  0036AC  CFF7 F015          	movff	tblptrh,??_isr+9
 19477  0036B0  CFF8 F016          	movff	tblptru,??_isr+10
 19478  0036B4  CFF5 F017          	movff	tablat,??_isr+11
 19479                           
 19480                           ;main.c: 109: unsigned char cont;;main.c: 112: if (PIE1bits.RCIE && PIR1bits.RCIF)
 19481  0036B8  BA9D               	btfsc	157,5,c	;volatile
 19482  0036BA  AA9E               	btfss	158,5,c	;volatile
 19483  0036BC  D014               	goto	i2l12304
 19484                           
 19485                           ;main.c: 113: {;main.c: 114: PIR1bits.RCIF = 0;
 19486  0036BE  9A9E               	bcf	158,5,c	;volatile
 19487                           
 19488                           ;main.c: 115: data_uart_recebe = recebe_dado_uart();
 19489  0036C0  ECFC  F029         	call	_recebe_dado_uart	;wreg free
 19490  0036C4  6E3E               	movwf	_data_uart_recebe^0,c
 19491                           
 19492                           ;main.c: 116: GPSRead(data_uart_recebe);
 19493  0036C6  503E               	movf	_data_uart_recebe^0,w,c
 19494  0036C8  EC25  F00E         	call	_GPSRead
 19495                           
 19496                           ;main.c: 117: PORTBbits.RB2 = !PORTBbits.RB2;
 19497  0036CC  B481               	btfsc	129,2,c	;volatile
 19498  0036CE  D003               	goto	i2u1524_40
 19499  0036D0  6A0C               	clrf	??_isr^0,c
 19500  0036D2  2A0C               	incf	??_isr^0,f,c
 19501  0036D4  D001               	goto	i2u1525_48
 19502  0036D6                     i2u1524_40:
 19503  0036D6  6A0C               	clrf	??_isr^0,c
 19504  0036D8                     i2u1525_48:
 19505  0036D8  460C               	rlncf	??_isr^0,f,c
 19506  0036DA  460C               	rlncf	??_isr^0,f,c
 19507  0036DC  5081               	movf	129,w,c	;volatile
 19508  0036DE  180C               	xorwf	??_isr^0,w,c
 19509  0036E0  0BFB               	andlw	-5
 19510  0036E2  180C               	xorwf	??_isr^0,w,c
 19511  0036E4  6E81               	movwf	129,c	;volatile
 19512  0036E6                     i2l12304:
 19513                           
 19514                           ;main.c: 118: };main.c: 121: unsigned char cont;;main.c: 123: if (TMR0IF && T0IF)
 19515  0036E6  B4F2               	btfsc	4082,2,c	;volatile
 19516  0036E8  A4F2               	btfss	4082,2,c	;volatile
 19517  0036EA  D04B               	goto	i2l12346
 19518                           
 19519                           ;main.c: 124: {;main.c: 125: INTCONbits.TMR0IF = 0;
 19520  0036EC  94F2               	bcf	242,2,c	;volatile
 19521                           
 19522                           ;main.c: 126: sinaliza_int_timer = 1;
 19523  0036EE  0E01               	movlw	1
 19524  0036F0  6E3D               	movwf	_sinaliza_int_timer^0,c
 19525                           
 19526                           ;main.c: 128: for(cont= 0; cont<4;cont++)
 19527  0036F2  0E00               	movlw	0
 19528  0036F4  6E18               	movwf	isr@cont^0,c
 19529  0036F6                     i2l12316:
 19530                           
 19531                           ;main.c: 129: {;main.c: 130: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 19532  0036F6  5018               	movf	isr@cont^0,w,c
 19533  0036F8  0D02               	mullw	2
 19534  0036FA  0E00               	movlw	low _tempo_tarefa
 19535  0036FC  24F3               	addwf	243,w,c
 19536  0036FE  6ED9               	movwf	fsr2l,c
 19537  003700  0E01               	movlw	high _tempo_tarefa
 19538  003702  20F4               	addwfc	prodh,w,c
 19539  003704  6EDA               	movwf	fsr2h,c
 19540  003706  50DE               	movf	postinc2,w,c
 19541  003708  10DE               	iorwf	postinc2,w,c
 19542  00370A  B4D8               	btfsc	status,2,c
 19543  00370C  D00B               	goto	i2l12320
 19544  00370E  5018               	movf	isr@cont^0,w,c
 19545  003710  0D02               	mullw	2
 19546  003712  0E00               	movlw	low _tempo_tarefa
 19547  003714  24F3               	addwf	243,w,c
 19548  003716  6ED9               	movwf	fsr2l,c
 19549  003718  0E01               	movlw	high _tempo_tarefa
 19550  00371A  20F4               	addwfc	prodh,w,c
 19551  00371C  6EDA               	movwf	fsr2h,c
 19552  00371E  06DE               	decf	postinc2,f,c
 19553  003720  0E00               	movlw	0
 19554  003722  5ADD               	subwfb	postdec2,f,c
 19555  003724                     i2l12320:
 19556  003724  2A18               	incf	isr@cont^0,f,c
 19557  003726  0E03               	movlw	3
 19558  003728  6418               	cpfsgt	isr@cont^0,c
 19559  00372A  D7E5               	goto	i2l12316
 19560                           
 19561                           ;main.c: 132: };main.c: 133: if(time_sd > 0) time_sd--;
 19562  00372C  0100               	movlb	0	; () banked
 19563  00372E  51FC               	movf	_time_sd& (0+255),w,b
 19564  003730  11FD               	iorwf	(_time_sd+1)& (0+255),w,b
 19565  003732  B4D8               	btfsc	status,2,c
 19566  003734  D003               	goto	i2l12328
 19567                           
 19568                           ; BSR set to: 0
 19569  003736  07FC               	decf	_time_sd& (0+255),f,b
 19570  003738  A0D8               	btfss	status,0,c
 19571  00373A  07FD               	decf	(_time_sd+1)& (0+255),f,b
 19572  00373C                     i2l12328:
 19573                           
 19574                           ; BSR set to: 0
 19575                           ;main.c: 134: if(time_atualizacao > 0) time_atualizacao--;
 19576  00373C  5036               	movf	_time_atualizacao^0,w,c
 19577  00373E  1037               	iorwf	(_time_atualizacao+1)^0,w,c
 19578  003740  B4D8               	btfsc	status,2,c
 19579  003742  D003               	goto	i2l12332
 19580                           
 19581                           ; BSR set to: 0
 19582  003744  0636               	decf	_time_atualizacao^0,f,c
 19583  003746  A0D8               	btfss	status,0,c
 19584  003748  0637               	decf	(_time_atualizacao+1)^0,f,c
 19585  00374A                     i2l12332:
 19586                           
 19587                           ; BSR set to: 0
 19588                           ;main.c: 135: if(time_recovery>0) time_recovery--;
 19589  00374A  51FA               	movf	_time_recovery& (0+255),w,b
 19590  00374C  11FB               	iorwf	(_time_recovery+1)& (0+255),w,b
 19591  00374E  B4D8               	btfsc	status,2,c
 19592  003750  D003               	goto	i2l12336
 19593                           
 19594                           ; BSR set to: 0
 19595  003752  07FA               	decf	_time_recovery& (0+255),f,b
 19596  003754  A0D8               	btfss	status,0,c
 19597  003756  07FB               	decf	(_time_recovery+1)& (0+255),f,b
 19598  003758                     i2l12336:
 19599                           
 19600                           ; BSR set to: 0
 19601                           ;main.c: 136: if(tarefa_em_execucao == 1)
 19602  003758  043C               	decf	_tarefa_em_execucao^0,w,c	;volatile
 19603  00375A  A4D8               	btfss	status,2,c
 19604  00375C  D00C               	goto	i2l12344
 19605                           
 19606                           ; BSR set to: 0
 19607                           ;main.c: 137: {;main.c: 138: timeout_tarefa--;
 19608  00375E  0101               	movlb	1	; () banked
 19609  003760  0718               	decf	_timeout_tarefa& (0+255),f,b
 19610  003762  A0D8               	btfss	status,0,c
 19611  003764  0719               	decf	(_timeout_tarefa+1)& (0+255),f,b
 19612                           
 19613                           ; BSR set to: 1
 19614                           ;main.c: 139: if(!timeout_tarefa)
 19615  003766  5118               	movf	_timeout_tarefa& (0+255),w,b
 19616  003768  1119               	iorwf	(_timeout_tarefa+1)& (0+255),w,b
 19617  00376A  A4D8               	btfss	status,2,c
 19618  00376C  D004               	goto	i2l12344
 19619                           
 19620                           ; BSR set to: 1
 19621                           ;main.c: 140: {;main.c: 142: PCLATH = 0;
 19622  00376E  0E00               	movlw	0
 19623  003770  6EFA               	movwf	250,c	;volatile
 19624                           
 19625                           ;main.c: 143: PCL = 0;
 19626  003772  0E00               	movlw	0
 19627  003774  6EF9               	movwf	249,c	;volatile
 19628  003776                     i2l12344:
 19629                           
 19630                           ;main.c: 144: };main.c: 145: };main.c: 149: write_timer_zero(0x45);
 19631  003776  0E00               	movlw	0
 19632  003778  6E02               	movwf	(i2write_timer_zero@timer0+1)^0,c
 19633  00377A  0E45               	movlw	69
 19634  00377C  6E01               	movwf	i2write_timer_zero@timer0^0,c
 19635  00377E  EC56  F02A         	call	i2_write_timer_zero	;wreg free
 19636  003782                     i2l12346:
 19637                           
 19638                           ;main.c: 150: };main.c: 152: if (INT0IF && INT0IE)
 19639  003782  B2F2               	btfsc	4082,1,c	;volatile
 19640  003784  A8F2               	btfss	4082,4,c	;volatile
 19641  003786  D001               	goto	i2l1368
 19642                           
 19643                           ;main.c: 153: {;main.c: 154: INT0IF = 0;
 19644  003788  92F2               	bcf	4082,1,c	;volatile
 19645  00378A                     i2l1368:
 19646  00378A  C017  FFF5         	movff	??_isr+11,tablat
 19647  00378E  C016  FFF8         	movff	??_isr+10,tblptru
 19648  003792  C015  FFF7         	movff	??_isr+9,tblptrh
 19649  003796  C014  FFF6         	movff	??_isr+8,tblptrl
 19650  00379A  C013  FFF4         	movff	??_isr+7,prodh
 19651  00379E  C012  FFF3         	movff	??_isr+6,prodl
 19652  0037A2  C011  FFDA         	movff	??_isr+5,fsr2h
 19653  0037A6  C010  FFD9         	movff	??_isr+4,fsr2l
 19654  0037AA  C00F  FFE2         	movff	??_isr+3,fsr1h
 19655  0037AE  C00E  FFE1         	movff	??_isr+2,fsr1l
 19656  0037B2  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19657  0037B4  0011               	retfie		f
 19658  0037B6                     __end_of_isr:
 19659                           	callstack 0
 19660                           
 19661 ;; *************** function i2_write_timer_zero *****************
 19662 ;; Defined at:
 19663 ;;		line 134 in file "bibliotecas/hardware.c"
 19664 ;; Parameters:    Size  Location     Type
 19665 ;;  timer0          2    0[COMRAM] unsigned int 
 19666 ;; Auto vars:     Size  Location     Type
 19667 ;;		None
 19668 ;; Return value:  Size  Location     Type
 19669 ;;                  1    wreg      void 
 19670 ;; Registers used:
 19671 ;;		None
 19672 ;; Tracked objects:
 19673 ;;		On entry : 3E/0
 19674 ;;		On exit  : 3E/0
 19675 ;;		Unchanged: 3E/0
 19676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19677 ;;      Params:         2       0       0       0       0       0       0       0       0
 19678 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19679 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19680 ;;      Totals:         2       0       0       0       0       0       0       0       0
 19681 ;;Total ram usage:        2 bytes
 19682 ;; Hardware stack levels used:    1
 19683 ;; This function calls:
 19684 ;;		Nothing
 19685 ;; This function is called by:
 19686 ;;		_isr
 19687 ;; This function uses a non-reentrant model
 19688 ;;
 19689                           
 19690                           	psect	text107
 19691  0054AC                     __ptext107:
 19692                           	callstack 0
 19693  0054AC                     i2_write_timer_zero:
 19694                           	callstack 14
 19695                           
 19696                           ;hardware.c: 142: TMR0 = timer0;
 19697                           
 19698                           ;incstack = 0
 19699  0054AC  C001  FFD6         	movff	i2write_timer_zero@timer0,4054	;volatile
 19700  0054B0  C002  FFD7         	movff	i2write_timer_zero@timer0+1,4055	;volatile
 19701  0054B4  0012               	return		;funcret
 19702  0054B6                     __end_ofi2_write_timer_zero:
 19703                           	callstack 0
 19704                           
 19705 ;; *************** function _recebe_dado_uart *****************
 19706 ;; Defined at:
 19707 ;;		line 138 in file "bibliotecas/uart.c"
 19708 ;; Parameters:    Size  Location     Type
 19709 ;;		None
 19710 ;; Auto vars:     Size  Location     Type
 19711 ;;		None
 19712 ;; Return value:  Size  Location     Type
 19713 ;;                  1    wreg      unsigned char 
 19714 ;; Registers used:
 19715 ;;		wreg, status,2
 19716 ;; Tracked objects:
 19717 ;;		On entry : 0/0
 19718 ;;		On exit  : 0/0
 19719 ;;		Unchanged: 0/0
 19720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19721 ;;      Params:         0       0       0       0       0       0       0       0       0
 19722 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19723 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19724 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19725 ;;Total ram usage:        0 bytes
 19726 ;; Hardware stack levels used:    1
 19727 ;; This function calls:
 19728 ;;		Nothing
 19729 ;; This function is called by:
 19730 ;;		_isr
 19731 ;; This function uses a non-reentrant model
 19732 ;;
 19733                           
 19734                           	psect	text108
 19735  0053F8                     __ptext108:
 19736                           	callstack 0
 19737  0053F8                     _recebe_dado_uart:
 19738                           	callstack 14
 19739                           
 19740                           ;uart.c: 140: while(RCIF==0);
 19741                           
 19742                           ;incstack = 0
 19743  0053F8  AA9E               	btfss	3998,5,c	;volatile
 19744  0053FA  D7FE               	goto	_recebe_dado_uart
 19745                           
 19746                           ;uart.c: 141: if(RCSTAbits.OERR)
 19747  0053FC  A2AB               	btfss	171,1,c	;volatile
 19748  0053FE  D003               	goto	i2l9244
 19749                           
 19750                           ;uart.c: 142: {;uart.c: 143: CREN = 0;
 19751  005400  98AB               	bcf	4011,4,c	;volatile
 19752                           
 19753                           ;uart.c: 144: __nop();
 19754  005402  F000               	nop	
 19755                           
 19756                           ;uart.c: 145: CREN=1;
 19757  005404  88AB               	bsf	4011,4,c	;volatile
 19758  005406                     i2l9244:
 19759                           
 19760                           ;uart.c: 146: };uart.c: 147: return(RCREG);
 19761  005406  50AE               	movf	174,w,c	;volatile
 19762  005408  0012               	return		;funcret
 19763  00540A                     __end_of_recebe_dado_uart:
 19764                           	callstack 0
 19765                           
 19766 ;; *************** function _GPSRead *****************
 19767 ;; Defined at:
 19768 ;;		line 43 in file "bibliotecas/GPS.c"
 19769 ;; Parameters:    Size  Location     Type
 19770 ;;  buff            1    wreg     unsigned char 
 19771 ;; Auto vars:     Size  Location     Type
 19772 ;;  buff            1    9[COMRAM] unsigned char 
 19773 ;;  c               1   10[COMRAM] unsigned char 
 19774 ;; Return value:  Size  Location     Type
 19775 ;;                  2  346[None  ] int 
 19776 ;; Registers used:
 19777 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19778 ;; Tracked objects:
 19779 ;;		On entry : 0/0
 19780 ;;		On exit  : 0/0
 19781 ;;		Unchanged: 0/0
 19782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19783 ;;      Params:         0       0       0       0       0       0       0       0       0
 19784 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19785 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19786 ;;      Totals:         2       0       0       0       0       0       0       0       0
 19787 ;;Total ram usage:        2 bytes
 19788 ;; Hardware stack levels used:    1
 19789 ;; Hardware stack levels required when called:    1
 19790 ;; This function calls:
 19791 ;;		_strcmp
 19792 ;;		_stringcpy
 19793 ;; This function is called by:
 19794 ;;		_isr
 19795 ;; This function uses a non-reentrant model
 19796 ;;
 19797                           
 19798                           	psect	text109
 19799  001C4A                     __ptext109:
 19800                           	callstack 0
 19801  001C4A                     _GPSRead:
 19802                           	callstack 13
 19803                           
 19804                           ;incstack = 0
 19805                           ;GPSRead@buff stored from wreg
 19806  001C4A  6E0A               	movwf	GPSRead@buff^0,c
 19807                           
 19808                           ;GPS.c: 45: uint8_t c = buff;
 19809  001C4C  C00A  F00B         	movff	GPSRead@buff,GPSRead@c
 19810                           
 19811                           ;GPS.c: 47: switch(c) {
 19812  001C50  D152               	goto	i2l12142
 19813  001C52                     i2l12024:
 19814                           
 19815                           ;GPS.c: 49: if(SentenceType == 1)
 19816  001C52  0444               	decf	_SentenceType^0,w,c
 19817  001C54  A4D8               	btfss	status,2,c
 19818  001C56  D005               	goto	i2l12028
 19819                           
 19820                           ;GPS.c: 50: GPRMC_ok = 1;
 19821  001C58  0E00               	movlw	0
 19822  001C5A  0101               	movlb	1	; () banked
 19823  001C5C  6F1F               	movwf	(_GPRMC_ok+1)& (0+255),b
 19824  001C5E  0E01               	movlw	1
 19825  001C60  6F1E               	movwf	_GPRMC_ok& (0+255),b
 19826  001C62                     i2l12028:
 19827                           
 19828                           ;GPS.c: 51: if(SentenceType == 2)
 19829  001C62  0E02               	movlw	2
 19830  001C64  1844               	xorwf	_SentenceType^0,w,c
 19831  001C66  A4D8               	btfss	status,2,c
 19832  001C68  D005               	goto	i2l12032
 19833                           
 19834                           ;GPS.c: 52: GPGGA_ok = 1;
 19835  001C6A  0E00               	movlw	0
 19836  001C6C  0101               	movlb	1	; () banked
 19837  001C6E  6F1D               	movwf	(_GPGGA_ok+1)& (0+255),b
 19838  001C70  0E01               	movlw	1
 19839  001C72  6F1C               	movwf	_GPGGA_ok& (0+255),b
 19840  001C74                     i2l12032:
 19841                           
 19842                           ;GPS.c: 53: if(GPRMC_ok && GPGGA_ok) {
 19843  001C74  0101               	movlb	1	; () banked
 19844  001C76  511E               	movf	_GPRMC_ok& (0+255),w,b
 19845  001C78  111F               	iorwf	(_GPRMC_ok+1)& (0+255),w,b
 19846  001C7A  B4D8               	btfsc	status,2,c
 19847  001C7C  0012               	return	
 19848                           
 19849                           ; BSR set to: 1
 19850  001C7E  511C               	movf	_GPGGA_ok& (0+255),w,b
 19851  001C80  111D               	iorwf	(_GPGGA_ok+1)& (0+255),w,b
 19852  001C82  B4D8               	btfsc	status,2,c
 19853  001C84  0012               	return	
 19854                           
 19855                           ; BSR set to: 1
 19856                           ;GPS.c: 54: GPRMC_ok = GPGGA_ok = 0;
 19857  001C86  0E00               	movlw	0
 19858  001C88  6F1D               	movwf	(_GPGGA_ok+1)& (0+255),b
 19859  001C8A  0E00               	movlw	0
 19860  001C8C  6F1C               	movwf	_GPGGA_ok& (0+255),b
 19861  001C8E  C11C  F11E         	movff	_GPGGA_ok,_GPRMC_ok
 19862  001C92  C11D  F11F         	movff	_GPGGA_ok+1,_GPRMC_ok+1
 19863  001C96  0012               	return	
 19864  001C98                     i2l12040:
 19865                           
 19866                           ;GPS.c: 60: Term = char_number = 0;
 19867  001C98  0E00               	movlw	0
 19868  001C9A  6E45               	movwf	_char_number^0,c
 19869  001C9C  C045  F043         	movff	_char_number,_Term
 19870                           
 19871                           ;GPS.c: 61: break;
 19872  001CA0  0012               	return	
 19873  001CA2                     i2l12042:
 19874                           
 19875                           ;GPS.c: 64: buffer[char_number] = '\0';
 19876  001CA2  0EBA               	movlw	low _buffer
 19877  001CA4  2445               	addwf	_char_number^0,w,c
 19878  001CA6  6ED9               	movwf	fsr2l,c
 19879  001CA8  6ADA               	clrf	fsr2h,c
 19880  001CAA  0E01               	movlw	high _buffer
 19881  001CAC  22DA               	addwfc	fsr2h,f,c
 19882  001CAE  0E00               	movlw	0
 19883  001CB0  6EDF               	movwf	indf2,c
 19884                           
 19885                           ;GPS.c: 65: if(Term == 0) {
 19886  001CB2  5043               	movf	_Term^0,w,c
 19887  001CB4  A4D8               	btfss	status,2,c
 19888  001CB6  D030               	goto	i2l12058
 19889                           
 19890                           ;GPS.c: 66: stringcpy(buffer, sentence, 0);
 19891  001CB8  0EBA               	movlw	low _buffer
 19892  001CBA  6E01               	movwf	stringcpy@str1^0,c
 19893  001CBC  0E01               	movlw	high _buffer
 19894  001CBE  6E02               	movwf	(stringcpy@str1+1)^0,c
 19895  001CC0  0EEF               	movlw	low _sentence
 19896  001CC2  6E03               	movwf	stringcpy@str2^0,c
 19897  001CC4  0E01               	movlw	high _sentence
 19898  001CC6  6E04               	movwf	(stringcpy@str2+1)^0,c
 19899  001CC8  0E00               	movlw	0
 19900  001CCA  6E06               	movwf	(stringcpy@dir+1)^0,c
 19901  001CCC  0E00               	movlw	0
 19902  001CCE  6E05               	movwf	stringcpy@dir^0,c
 19903  001CD0  ECFE  F026         	call	_stringcpy	;wreg free
 19904                           
 19905                           ;GPS.c: 67: if(strcmp(sentence, "GPRMC") == 0)
 19906  001CD4  0EEF               	movlw	low _sentence
 19907  001CD6  6E01               	movwf	strcmp@s1^0,c
 19908  001CD8  0E01               	movlw	high _sentence
 19909  001CDA  6E02               	movwf	(strcmp@s1+1)^0,c
 19910  001CDC  0E58               	movlw	low STR_5
 19911  001CDE  6E03               	movwf	strcmp@s2^0,c
 19912  001CE0  0E62               	movlw	high STR_5
 19913  001CE2  6E04               	movwf	(strcmp@s2+1)^0,c
 19914  001CE4  EC91  F026         	call	_strcmp	;wreg free
 19915  001CE8  5001               	movf	?_strcmp^0,w,c
 19916  001CEA  1002               	iorwf	(?_strcmp+1)^0,w,c
 19917  001CEC  A4D8               	btfss	status,2,c
 19918  001CEE  D002               	goto	i2l12052
 19919                           
 19920                           ;GPS.c: 68: SentenceType = 1;
 19921  001CF0  0E01               	movlw	1
 19922  001CF2  D011               	goto	L7
 19923  001CF4                     i2l12052:
 19924                           
 19925                           ;GPS.c: 69: else if(strcmp(sentence, "GPGGA") == 0)
 19926  001CF4  0EEF               	movlw	low _sentence
 19927  001CF6  6E01               	movwf	strcmp@s1^0,c
 19928  001CF8  0E01               	movlw	high _sentence
 19929  001CFA  6E02               	movwf	(strcmp@s1+1)^0,c
 19930  001CFC  0E52               	movlw	low STR_6
 19931  001CFE  6E03               	movwf	strcmp@s2^0,c
 19932  001D00  0E62               	movlw	high STR_6
 19933  001D02  6E04               	movwf	(strcmp@s2+1)^0,c
 19934  001D04  EC91  F026         	call	_strcmp	;wreg free
 19935  001D08  5001               	movf	?_strcmp^0,w,c
 19936  001D0A  1002               	iorwf	(?_strcmp+1)^0,w,c
 19937  001D0C  A4D8               	btfss	status,2,c
 19938  001D0E  D002               	goto	i2l12056
 19939                           
 19940                           ;GPS.c: 70: SentenceType = 2;
 19941  001D10  0E02               	movlw	2
 19942  001D12  D001               	goto	L7
 19943  001D14                     i2l12056:
 19944                           
 19945                           ;GPS.c: 71: else;GPS.c: 72: SentenceType = 3;
 19946  001D14  0E03               	movlw	3
 19947  001D16                     L7:
 19948  001D16  6E44               	movwf	_SentenceType^0,c
 19949  001D18                     i2l12058:
 19950                           
 19951                           ;GPS.c: 73: };GPS.c: 76: if(Term == 1 && SentenceType == 1) {
 19952  001D18  0443               	decf	_Term^0,w,c
 19953  001D1A  A4D8               	btfss	status,2,c
 19954  001D1C  D011               	goto	i2l12064
 19955  001D1E  0444               	decf	_SentenceType^0,w,c
 19956  001D20  A4D8               	btfss	status,2,c
 19957  001D22  D00E               	goto	i2l12064
 19958                           
 19959                           ;GPS.c: 77: stringcpy(buffer, rawTime, 0);
 19960  001D24  0EBA               	movlw	low _buffer
 19961  001D26  6E01               	movwf	stringcpy@str1^0,c
 19962  001D28  0E01               	movlw	high _buffer
 19963  001D2A  6E02               	movwf	(stringcpy@str1+1)^0,c
 19964  001D2C  0ED1               	movlw	low _rawTime
 19965  001D2E  6E03               	movwf	stringcpy@str2^0,c
 19966  001D30  0E01               	movlw	high _rawTime
 19967  001D32  6E04               	movwf	(stringcpy@str2+1)^0,c
 19968  001D34  0E00               	movlw	0
 19969  001D36  6E06               	movwf	(stringcpy@dir+1)^0,c
 19970  001D38  0E00               	movlw	0
 19971  001D3A  6E05               	movwf	stringcpy@dir^0,c
 19972  001D3C  ECFE  F026         	call	_stringcpy	;wreg free
 19973  001D40                     i2l12064:
 19974                           
 19975                           ;GPS.c: 78: };GPS.c: 81: if((Term == 3) && (SentenceType == 1)) {
 19976  001D40  0E03               	movlw	3
 19977  001D42  1843               	xorwf	_Term^0,w,c
 19978  001D44  A4D8               	btfss	status,2,c
 19979  001D46  D011               	goto	i2l12070
 19980  001D48  0444               	decf	_SentenceType^0,w,c
 19981  001D4A  A4D8               	btfss	status,2,c
 19982  001D4C  D00E               	goto	i2l12070
 19983                           
 19984                           ;GPS.c: 82: stringcpy(buffer, rawLatitude, 1);
 19985  001D4E  0EBA               	movlw	low _buffer
 19986  001D50  6E01               	movwf	stringcpy@str1^0,c
 19987  001D52  0E01               	movlw	high _buffer
 19988  001D54  6E02               	movwf	(stringcpy@str1+1)^0,c
 19989  001D56  0E6B               	movlw	low _rawLatitude
 19990  001D58  6E03               	movwf	stringcpy@str2^0,c
 19991  001D5A  0E02               	movlw	high _rawLatitude
 19992  001D5C  6E04               	movwf	(stringcpy@str2+1)^0,c
 19993  001D5E  0E00               	movlw	0
 19994  001D60  6E06               	movwf	(stringcpy@dir+1)^0,c
 19995  001D62  0E01               	movlw	1
 19996  001D64  6E05               	movwf	stringcpy@dir^0,c
 19997  001D66  ECFE  F026         	call	_stringcpy	;wreg free
 19998  001D6A                     i2l12070:
 19999                           
 20000                           ;GPS.c: 83: };GPS.c: 85: if((Term == 4) && (SentenceType == 1)) {
 20001  001D6A  0E04               	movlw	4
 20002  001D6C  1843               	xorwf	_Term^0,w,c
 20003  001D6E  A4D8               	btfss	status,2,c
 20004  001D70  D00D               	goto	i2l12080
 20005  001D72  0444               	decf	_SentenceType^0,w,c
 20006  001D74  A4D8               	btfss	status,2,c
 20007  001D76  D00A               	goto	i2l12080
 20008                           
 20009                           ;GPS.c: 86: if(buffer[0] == 'N')
 20010  001D78  0E4E               	movlw	78
 20011  001D7A  0101               	movlb	1	; () banked
 20012  001D7C  19BA               	xorwf	_buffer& (0+255),w,b
 20013  001D7E  A4D8               	btfss	status,2,c
 20014  001D80  D002               	goto	i2l12078
 20015                           
 20016                           ; BSR set to: 1
 20017                           ;GPS.c: 87: rawLatitude[0] = '0';
 20018  001D82  0E30               	movlw	48
 20019  001D84  D001               	goto	L8
 20020  001D86                     i2l12078:
 20021                           
 20022                           ; BSR set to: 1
 20023                           ;GPS.c: 88: else;GPS.c: 89: rawLatitude[0] = '-';
 20024  001D86  0E2D               	movlw	45
 20025  001D88                     L8:
 20026  001D88  0102               	movlb	2	; () banked
 20027  001D8A  6F6B               	movwf	_rawLatitude& (0+255),b
 20028  001D8C                     i2l12080:
 20029                           
 20030                           ;GPS.c: 90: };GPS.c: 93: if((Term == 5) && (SentenceType == 1)) {
 20031  001D8C  0E05               	movlw	5
 20032  001D8E  1843               	xorwf	_Term^0,w,c
 20033  001D90  A4D8               	btfss	status,2,c
 20034  001D92  D011               	goto	i2l12086
 20035  001D94  0444               	decf	_SentenceType^0,w,c
 20036  001D96  A4D8               	btfss	status,2,c
 20037  001D98  D00E               	goto	i2l12086
 20038                           
 20039                           ;GPS.c: 94: stringcpy(buffer, rawLongitude, 1);
 20040  001D9A  0EBA               	movlw	low _buffer
 20041  001D9C  6E01               	movwf	stringcpy@str1^0,c
 20042  001D9E  0E01               	movlw	high _buffer
 20043  001DA0  6E02               	movwf	(stringcpy@str1+1)^0,c
 20044  001DA2  0E5E               	movlw	low _rawLongitude
 20045  001DA4  6E03               	movwf	stringcpy@str2^0,c
 20046  001DA6  0E02               	movlw	high _rawLongitude
 20047  001DA8  6E04               	movwf	(stringcpy@str2+1)^0,c
 20048  001DAA  0E00               	movlw	0
 20049  001DAC  6E06               	movwf	(stringcpy@dir+1)^0,c
 20050  001DAE  0E01               	movlw	1
 20051  001DB0  6E05               	movwf	stringcpy@dir^0,c
 20052  001DB2  ECFE  F026         	call	_stringcpy	;wreg free
 20053  001DB6                     i2l12086:
 20054                           
 20055                           ;GPS.c: 95: };GPS.c: 97: if((Term == 6) && (SentenceType == 1)) {
 20056  001DB6  0E06               	movlw	6
 20057  001DB8  1843               	xorwf	_Term^0,w,c
 20058  001DBA  A4D8               	btfss	status,2,c
 20059  001DBC  D00D               	goto	i2l12096
 20060  001DBE  0444               	decf	_SentenceType^0,w,c
 20061  001DC0  A4D8               	btfss	status,2,c
 20062  001DC2  D00A               	goto	i2l12096
 20063                           
 20064                           ;GPS.c: 98: if(buffer[0] == 'E')
 20065  001DC4  0E45               	movlw	69
 20066  001DC6  0101               	movlb	1	; () banked
 20067  001DC8  19BA               	xorwf	_buffer& (0+255),w,b
 20068  001DCA  A4D8               	btfss	status,2,c
 20069  001DCC  D002               	goto	i2l12094
 20070                           
 20071                           ; BSR set to: 1
 20072                           ;GPS.c: 99: rawLongitude[0] = '0';
 20073  001DCE  0E30               	movlw	48
 20074  001DD0  D001               	goto	L9
 20075  001DD2                     i2l12094:
 20076                           
 20077                           ; BSR set to: 1
 20078                           ;GPS.c: 100: else;GPS.c: 101: rawLongitude[0] = '-';
 20079  001DD2  0E2D               	movlw	45
 20080  001DD4                     L9:
 20081  001DD4  0102               	movlb	2	; () banked
 20082  001DD6  6F5E               	movwf	_rawLongitude& (0+255),b
 20083  001DD8                     i2l12096:
 20084                           
 20085                           ;GPS.c: 102: };GPS.c: 105: if((Term == 7) && (SentenceType == 1)) {
 20086  001DD8  0E07               	movlw	7
 20087  001DDA  1843               	xorwf	_Term^0,w,c
 20088  001DDC  A4D8               	btfss	status,2,c
 20089  001DDE  D011               	goto	i2l12102
 20090  001DE0  0444               	decf	_SentenceType^0,w,c
 20091  001DE2  A4D8               	btfss	status,2,c
 20092  001DE4  D00E               	goto	i2l12102
 20093                           
 20094                           ;GPS.c: 106: stringcpy(buffer, rawSpeed, 0);
 20095  001DE6  0EBA               	movlw	low _buffer
 20096  001DE8  6E01               	movwf	stringcpy@str1^0,c
 20097  001DEA  0E01               	movlw	high _buffer
 20098  001DEC  6E02               	movwf	(stringcpy@str1+1)^0,c
 20099  001DEE  0EE9               	movlw	low _rawSpeed
 20100  001DF0  6E03               	movwf	stringcpy@str2^0,c
 20101  001DF2  0E01               	movlw	high _rawSpeed
 20102  001DF4  6E04               	movwf	(stringcpy@str2+1)^0,c
 20103  001DF6  0E00               	movlw	0
 20104  001DF8  6E06               	movwf	(stringcpy@dir+1)^0,c
 20105  001DFA  0E00               	movlw	0
 20106  001DFC  6E05               	movwf	stringcpy@dir^0,c
 20107  001DFE  ECFE  F026         	call	_stringcpy	;wreg free
 20108  001E02                     i2l12102:
 20109                           
 20110                           ;GPS.c: 107: };GPS.c: 110: if((Term == 8) && (SentenceType == 1)) {
 20111  001E02  0E08               	movlw	8
 20112  001E04  1843               	xorwf	_Term^0,w,c
 20113  001E06  A4D8               	btfss	status,2,c
 20114  001E08  D011               	goto	i2l12108
 20115  001E0A  0444               	decf	_SentenceType^0,w,c
 20116  001E0C  A4D8               	btfss	status,2,c
 20117  001E0E  D00E               	goto	i2l12108
 20118                           
 20119                           ;GPS.c: 111: stringcpy(buffer, rawCourse, 0);
 20120  001E10  0EBA               	movlw	low _buffer
 20121  001E12  6E01               	movwf	stringcpy@str1^0,c
 20122  001E14  0E01               	movlw	high _buffer
 20123  001E16  6E02               	movwf	(stringcpy@str1+1)^0,c
 20124  001E18  0EE3               	movlw	low _rawCourse
 20125  001E1A  6E03               	movwf	stringcpy@str2^0,c
 20126  001E1C  0E01               	movlw	high _rawCourse
 20127  001E1E  6E04               	movwf	(stringcpy@str2+1)^0,c
 20128  001E20  0E00               	movlw	0
 20129  001E22  6E06               	movwf	(stringcpy@dir+1)^0,c
 20130  001E24  0E00               	movlw	0
 20131  001E26  6E05               	movwf	stringcpy@dir^0,c
 20132  001E28  ECFE  F026         	call	_stringcpy	;wreg free
 20133  001E2C                     i2l12108:
 20134                           
 20135                           ;GPS.c: 112: };GPS.c: 115: if(Term == 9 && SentenceType == 1) {
 20136  001E2C  0E09               	movlw	9
 20137  001E2E  1843               	xorwf	_Term^0,w,c
 20138  001E30  A4D8               	btfss	status,2,c
 20139  001E32  D011               	goto	i2l12114
 20140  001E34  0444               	decf	_SentenceType^0,w,c
 20141  001E36  A4D8               	btfss	status,2,c
 20142  001E38  D00E               	goto	i2l12114
 20143                           
 20144                           ;GPS.c: 116: stringcpy(buffer, rawDate, 0);
 20145  001E3A  0EBA               	movlw	low _buffer
 20146  001E3C  6E01               	movwf	stringcpy@str1^0,c
 20147  001E3E  0E01               	movlw	high _buffer
 20148  001E40  6E02               	movwf	(stringcpy@str1+1)^0,c
 20149  001E42  0EDC               	movlw	low _rawDate
 20150  001E44  6E03               	movwf	stringcpy@str2^0,c
 20151  001E46  0E01               	movlw	high _rawDate
 20152  001E48  6E04               	movwf	(stringcpy@str2+1)^0,c
 20153  001E4A  0E00               	movlw	0
 20154  001E4C  6E06               	movwf	(stringcpy@dir+1)^0,c
 20155  001E4E  0E00               	movlw	0
 20156  001E50  6E05               	movwf	stringcpy@dir^0,c
 20157  001E52  ECFE  F026         	call	_stringcpy	;wreg free
 20158  001E56                     i2l12114:
 20159                           
 20160                           ;GPS.c: 117: };GPS.c: 120: if((Term == 7) && (SentenceType == 2)) {
 20161  001E56  0E07               	movlw	7
 20162  001E58  1843               	xorwf	_Term^0,w,c
 20163  001E5A  A4D8               	btfss	status,2,c
 20164  001E5C  D012               	goto	i2l12120
 20165  001E5E  0E02               	movlw	2
 20166  001E60  1844               	xorwf	_SentenceType^0,w,c
 20167  001E62  A4D8               	btfss	status,2,c
 20168  001E64  D00E               	goto	i2l12120
 20169                           
 20170                           ;GPS.c: 121: stringcpy(buffer, rawSatellites, 0);
 20171  001E66  0EBA               	movlw	low _buffer
 20172  001E68  6E01               	movwf	stringcpy@str1^0,c
 20173  001E6A  0E01               	movlw	high _buffer
 20174  001E6C  6E02               	movwf	(stringcpy@str1+1)^0,c
 20175  001E6E  0EF5               	movlw	low _rawSatellites
 20176  001E70  6E03               	movwf	stringcpy@str2^0,c
 20177  001E72  0E01               	movlw	high _rawSatellites
 20178  001E74  6E04               	movwf	(stringcpy@str2+1)^0,c
 20179  001E76  0E00               	movlw	0
 20180  001E78  6E06               	movwf	(stringcpy@dir+1)^0,c
 20181  001E7A  0E00               	movlw	0
 20182  001E7C  6E05               	movwf	stringcpy@dir^0,c
 20183  001E7E  ECFE  F026         	call	_stringcpy	;wreg free
 20184  001E82                     i2l12120:
 20185                           
 20186                           ;GPS.c: 122: };GPS.c: 125: if((Term == 9) && (SentenceType == 2)) {
 20187  001E82  0E09               	movlw	9
 20188  001E84  1843               	xorwf	_Term^0,w,c
 20189  001E86  A4D8               	btfss	status,2,c
 20190  001E88  D012               	goto	i2l12126
 20191  001E8A  0E02               	movlw	2
 20192  001E8C  1844               	xorwf	_SentenceType^0,w,c
 20193  001E8E  A4D8               	btfss	status,2,c
 20194  001E90  D00E               	goto	i2l12126
 20195                           
 20196                           ;GPS.c: 126: stringcpy(buffer, rawAltitude, 0);
 20197  001E92  0EBA               	movlw	low _buffer
 20198  001E94  6E01               	movwf	stringcpy@str1^0,c
 20199  001E96  0E01               	movlw	high _buffer
 20200  001E98  6E02               	movwf	(stringcpy@str1+1)^0,c
 20201  001E9A  0E84               	movlw	low _rawAltitude
 20202  001E9C  6E03               	movwf	stringcpy@str2^0,c
 20203  001E9E  0E02               	movlw	high _rawAltitude
 20204  001EA0  6E04               	movwf	(stringcpy@str2+1)^0,c
 20205  001EA2  0E00               	movlw	0
 20206  001EA4  6E06               	movwf	(stringcpy@dir+1)^0,c
 20207  001EA6  0E00               	movlw	0
 20208  001EA8  6E05               	movwf	stringcpy@dir^0,c
 20209  001EAA  ECFE  F026         	call	_stringcpy	;wreg free
 20210  001EAE                     i2l12126:
 20211                           
 20212                           ;GPS.c: 127: };GPS.c: 130: if((Term == 6) && (SentenceType == 2)) {
 20213  001EAE  0E06               	movlw	6
 20214  001EB0  1843               	xorwf	_Term^0,w,c
 20215  001EB2  A4D8               	btfss	status,2,c
 20216  001EB4  D012               	goto	i2l12132
 20217  001EB6  0E02               	movlw	2
 20218  001EB8  1844               	xorwf	_SentenceType^0,w,c
 20219  001EBA  A4D8               	btfss	status,2,c
 20220  001EBC  D00E               	goto	i2l12132
 20221                           
 20222                           ;GPS.c: 131: stringcpy(buffer, rawFix, 0);
 20223  001EBE  0EBA               	movlw	low _buffer
 20224  001EC0  6E01               	movwf	stringcpy@str1^0,c
 20225  001EC2  0E01               	movlw	high _buffer
 20226  001EC4  6E02               	movwf	(stringcpy@str1+1)^0,c
 20227  001EC6  0EF8               	movlw	low _rawFix
 20228  001EC8  6E03               	movwf	stringcpy@str2^0,c
 20229  001ECA  0E01               	movlw	high _rawFix
 20230  001ECC  6E04               	movwf	(stringcpy@str2+1)^0,c
 20231  001ECE  0E00               	movlw	0
 20232  001ED0  6E06               	movwf	(stringcpy@dir+1)^0,c
 20233  001ED2  0E00               	movlw	0
 20234  001ED4  6E05               	movwf	stringcpy@dir^0,c
 20235  001ED6  ECFE  F026         	call	_stringcpy	;wreg free
 20236  001EDA                     i2l12132:
 20237                           
 20238                           ;GPS.c: 133: };GPS.c: 134: Term++;
 20239  001EDA  2A43               	incf	_Term^0,f,c
 20240                           
 20241                           ;GPS.c: 135: char_number = 0;
 20242  001EDC  0E00               	movlw	0
 20243  001EDE  6E45               	movwf	_char_number^0,c
 20244                           
 20245                           ;GPS.c: 136: break;
 20246  001EE0  0012               	return	
 20247  001EE2                     i2l12136:
 20248                           
 20249                           ;GPS.c: 139: buffer[char_number++] = c;
 20250  001EE2  0EBA               	movlw	low _buffer
 20251  001EE4  2445               	addwf	_char_number^0,w,c
 20252  001EE6  6ED9               	movwf	fsr2l,c
 20253  001EE8  6ADA               	clrf	fsr2h,c
 20254  001EEA  0E01               	movlw	high _buffer
 20255  001EEC  22DA               	addwfc	fsr2h,f,c
 20256  001EEE  C00B  FFDF         	movff	GPSRead@c,indf2
 20257  001EF2  2A45               	incf	_char_number^0,f,c
 20258                           
 20259                           ;GPS.c: 140: break;
 20260  001EF4  0012               	return	
 20261  001EF6                     i2l12142:
 20262  001EF6  500B               	movf	GPSRead@c^0,w,c
 20263                           
 20264                           ; Switch size 1, requested type "simple"
 20265                           ; Number of cases is 3, Range of values is 13 to 44
 20266                           ; switch strategies available:
 20267                           ; Name         Instructions Cycles
 20268                           ; simple_byte           10     6 (average)
 20269                           ;	Chosen strategy is simple_byte
 20270  001EF8  0A0D               	xorlw	13	; case 13
 20271  001EFA  B4D8               	btfsc	status,2,c
 20272  001EFC  D6AA               	goto	i2l12024
 20273  001EFE  0A29               	xorlw	41	; case 36
 20274  001F00  B4D8               	btfsc	status,2,c
 20275  001F02  D6CA               	goto	i2l12040
 20276  001F04  0A08               	xorlw	8	; case 44
 20277  001F06  B4D8               	btfsc	status,2,c
 20278  001F08  D6CC               	goto	i2l12042
 20279  001F0A  D7EB               	goto	i2l12136
 20280  001F0C                     __end_of_GPSRead:
 20281                           	callstack 0
 20282                           
 20283 ;; *************** function _stringcpy *****************
 20284 ;; Defined at:
 20285 ;;		line 34 in file "bibliotecas/GPS.c"
 20286 ;; Parameters:    Size  Location     Type
 20287 ;;  str1            2    0[COMRAM] PTR unsigned char 
 20288 ;;		 -> buffer(12), 
 20289 ;;  str2            2    2[COMRAM] PTR unsigned char 
 20290 ;;		 -> rawFix(2), rawAltitude(7), rawSatellites(3), rawDate(7), 
 20291 ;;		 -> rawCourse(6), rawSpeed(6), rawLongitude(13), rawLatitude(13), 
 20292 ;;		 -> rawTime(11), sentence(6), 
 20293 ;;  dir             2    4[COMRAM] int 
 20294 ;; Auto vars:     Size  Location     Type
 20295 ;;  chr             1    8[COMRAM] unsigned char 
 20296 ;; Return value:  Size  Location     Type
 20297 ;;                  1    wreg      void 
 20298 ;; Registers used:
 20299 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 20300 ;; Tracked objects:
 20301 ;;		On entry : 0/0
 20302 ;;		On exit  : 0/0
 20303 ;;		Unchanged: 0/0
 20304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20305 ;;      Params:         6       0       0       0       0       0       0       0       0
 20306 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20307 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20308 ;;      Totals:         9       0       0       0       0       0       0       0       0
 20309 ;;Total ram usage:        9 bytes
 20310 ;; Hardware stack levels used:    1
 20311 ;; This function calls:
 20312 ;;		Nothing
 20313 ;; This function is called by:
 20314 ;;		_GPSRead
 20315 ;; This function uses a non-reentrant model
 20316 ;;
 20317                           
 20318                           	psect	text110
 20319  004DFC                     __ptext110:
 20320                           	callstack 0
 20321  004DFC                     _stringcpy:
 20322                           	callstack 13
 20323                           
 20324                           ;GPS.c: 36: uint8_t chr = 0;
 20325                           
 20326                           ;incstack = 0
 20327  004DFC  0E00               	movlw	0
 20328  004DFE  6E09               	movwf	stringcpy@chr^0,c
 20329  004E00                     i2l11684:
 20330                           
 20331                           ;GPS.c: 39: str2[chr + dir] = str1[chr];
 20332  004E00  5009               	movf	stringcpy@chr^0,w,c
 20333  004E02  2401               	addwf	stringcpy@str1^0,w,c
 20334  004E04  6ED9               	movwf	fsr2l,c
 20335  004E06  0E00               	movlw	0
 20336  004E08  2002               	addwfc	(stringcpy@str1+1)^0,w,c
 20337  004E0A  6EDA               	movwf	fsr2h,c
 20338  004E0C  5009               	movf	stringcpy@chr^0,w,c
 20339  004E0E  2403               	addwf	stringcpy@str2^0,w,c
 20340  004E10  6E07               	movwf	??_stringcpy^0,c
 20341  004E12  0E00               	movlw	0
 20342  004E14  2004               	addwfc	(stringcpy@str2+1)^0,w,c
 20343  004E16  6E08               	movwf	(??_stringcpy+1)^0,c
 20344  004E18  5005               	movf	stringcpy@dir^0,w,c
 20345  004E1A  2407               	addwf	??_stringcpy^0,w,c
 20346  004E1C  6EE1               	movwf	fsr1l,c
 20347  004E1E  5006               	movf	(stringcpy@dir+1)^0,w,c
 20348  004E20  2008               	addwfc	(??_stringcpy+1)^0,w,c
 20349  004E22  6EE2               	movwf	fsr1h,c
 20350  004E24  CFDF FFE7          	movff	indf2,indf1
 20351                           
 20352                           ;GPS.c: 40: } while(str1[chr++] != '\0');
 20353  004E28  2A09               	incf	stringcpy@chr^0,f,c
 20354  004E2A  0409               	decf	stringcpy@chr^0,w,c
 20355  004E2C  6E07               	movwf	??_stringcpy^0,c
 20356  004E2E  5007               	movf	??_stringcpy^0,w,c
 20357  004E30  2401               	addwf	stringcpy@str1^0,w,c
 20358  004E32  6ED9               	movwf	fsr2l,c
 20359  004E34  0E00               	movlw	0
 20360  004E36  2002               	addwfc	(stringcpy@str1+1)^0,w,c
 20361  004E38  6EDA               	movwf	fsr2h,c
 20362  004E3A  50DF               	movf	indf2,w,c
 20363  004E3C  B4D8               	btfsc	status,2,c
 20364  004E3E  0012               	return	
 20365  004E40  D7DF               	goto	i2l11684
 20366  004E42                     __end_of_stringcpy:
 20367                           	callstack 0
 20368                           
 20369 ;; *************** function _strcmp *****************
 20370 ;; Defined at:
 20371 ;;		line 33 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strcmp.c"
 20372 ;; Parameters:    Size  Location     Type
 20373 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 20374 ;;		 -> sentence(6), 
 20375 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 20376 ;;		 -> STR_6(6), STR_5(6), 
 20377 ;; Auto vars:     Size  Location     Type
 20378 ;;  r               1    6[COMRAM] char 
 20379 ;; Return value:  Size  Location     Type
 20380 ;;                  2    0[COMRAM] int 
 20381 ;; Registers used:
 20382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20383 ;; Tracked objects:
 20384 ;;		On entry : 0/0
 20385 ;;		On exit  : 0/0
 20386 ;;		Unchanged: 0/0
 20387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20388 ;;      Params:         4       0       0       0       0       0       0       0       0
 20389 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20390 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20391 ;;      Totals:         7       0       0       0       0       0       0       0       0
 20392 ;;Total ram usage:        7 bytes
 20393 ;; Hardware stack levels used:    1
 20394 ;; This function calls:
 20395 ;;		Nothing
 20396 ;; This function is called by:
 20397 ;;		_GPSRead
 20398 ;; This function uses a non-reentrant model
 20399 ;;
 20400                           
 20401                           	psect	text111
 20402  004D22                     __ptext111:
 20403                           	callstack 0
 20404  004D22                     _strcmp:
 20405                           	callstack 13
 20406                           
 20407                           ;incstack = 0
 20408  004D22  D004               	goto	i2l11692
 20409  004D24                     i2l11690:
 20410  004D24  4A01               	infsnz	strcmp@s1^0,f,c
 20411  004D26  2A02               	incf	(strcmp@s1+1)^0,f,c
 20412  004D28  4A03               	infsnz	strcmp@s2^0,f,c
 20413  004D2A  2A04               	incf	(strcmp@s2+1)^0,f,c
 20414  004D2C                     i2l11692:
 20415  004D2C  C003  FFF6         	movff	strcmp@s2,tblptrl
 20416  004D30  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 20417  004D34                     	if	0	;tblptru may be non-zero
 20418  004D34                     	endif
 20419  004D34                     	if	0	;tblptru may be non-zero
 20420  004D34                     	endif
 20421  004D34  0008               	tblrd		*
 20422  004D36  CFF5 F005          	movff	tablat,??_strcmp
 20423  004D3A  C001  FFD9         	movff	strcmp@s1,fsr2l
 20424  004D3E  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 20425  004D42  50DF               	movf	indf2,w,c
 20426  004D44  6E06               	movwf	(??_strcmp+1)^0,c
 20427  004D46  5005               	movf	??_strcmp^0,w,c
 20428  004D48  5C06               	subwf	(??_strcmp+1)^0,w,c
 20429  004D4A  6E07               	movwf	strcmp@r^0,c
 20430  004D4C  5007               	movf	strcmp@r^0,w,c
 20431  004D4E  A4D8               	btfss	status,2,c
 20432  004D50  D007               	goto	i2u1430_40
 20433  004D52  C001  FFD9         	movff	strcmp@s1,fsr2l
 20434  004D56  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 20435  004D5A  50DF               	movf	indf2,w,c
 20436  004D5C  A4D8               	btfss	status,2,c
 20437  004D5E  D7E2               	goto	i2l11690
 20438  004D60                     i2u1430_40:
 20439  004D60  5007               	movf	strcmp@r^0,w,c
 20440  004D62  6E01               	movwf	?_strcmp^0,c
 20441  004D64  6A02               	clrf	(?_strcmp+1)^0,c
 20442  004D66  BE01               	btfsc	?_strcmp^0,7,c
 20443  004D68  0602               	decf	(?_strcmp+1)^0,f,c
 20444  004D6A  0012               	return		;funcret
 20445  004D6C                     __end_of_strcmp:
 20446                           	callstack 0
 20447                           
 20448                           	psect	text112
 20449  000000                     __ptext112:
 20450                           	callstack 0
 20451                           
 20452                           	psect	rparam
 20453  0000                     
 20454                           	psect	temp
 20455  000047                     btemp:
 20456                           	callstack 0
 20457  000047                     	ds	1
 20458  0000                     int$flags	set	btemp
 20459  0000                     wtemp8	set	btemp+1
 20460  0000                     ttemp5	set	btemp+1
 20461  0000                     ttemp6	set	btemp+4
 20462  0000                     ttemp7	set	btemp+8
 20463                           
 20464                           	psect	idloc
 20465                           
 20466                           ;Config register IDLOC0 @ 0x200000
 20467                           ;	unspecified, using default values
 20468  200000                     	org	2097152
 20469  200000  FF                 	db	255
 20470                           
 20471                           ;Config register IDLOC1 @ 0x200001
 20472                           ;	unspecified, using default values
 20473  200001                     	org	2097153
 20474  200001  FF                 	db	255
 20475                           
 20476                           ;Config register IDLOC2 @ 0x200002
 20477                           ;	unspecified, using default values
 20478  200002                     	org	2097154
 20479  200002  FF                 	db	255
 20480                           
 20481                           ;Config register IDLOC3 @ 0x200003
 20482                           ;	unspecified, using default values
 20483  200003                     	org	2097155
 20484  200003  FF                 	db	255
 20485                           
 20486                           ;Config register IDLOC4 @ 0x200004
 20487                           ;	unspecified, using default values
 20488  200004                     	org	2097156
 20489  200004  FF                 	db	255
 20490                           
 20491                           ;Config register IDLOC5 @ 0x200005
 20492                           ;	unspecified, using default values
 20493  200005                     	org	2097157
 20494  200005  FF                 	db	255
 20495                           
 20496                           ;Config register IDLOC6 @ 0x200006
 20497                           ;	unspecified, using default values
 20498  200006                     	org	2097158
 20499  200006  FF                 	db	255
 20500                           
 20501                           ;Config register IDLOC7 @ 0x200007
 20502                           ;	unspecified, using default values
 20503  200007                     	org	2097159
 20504  200007  FF                 	db	255
 20505                           
 20506                           	psect	config
 20507                           
 20508                           ;Config register CONFIG1L @ 0x300000
 20509                           ;	unspecified, using default values
 20510                           ;	PLL Prescaler Selection bits
 20511                           ;	PLLDIV = 0x0, unprogrammed default
 20512                           ;	System Clock Postscaler Selection bits
 20513                           ;	CPUDIV = 0x0, unprogrammed default
 20514                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
 20515                           ;	USBDIV = 0x0, unprogrammed default
 20516  300000                     	org	3145728
 20517  300000  00                 	db	0
 20518                           
 20519                           ;Config register CONFIG1H @ 0x300001
 20520                           ;	unspecified, using default values
 20521                           ;	Oscillator Selection bits
 20522                           ;	FOSC = 0x5, unprogrammed default
 20523                           ;	Fail-Safe Clock Monitor Enable bit
 20524                           ;	FCMEN = 0x0, unprogrammed default
 20525                           ;	Internal/External Oscillator Switchover bit
 20526                           ;	IESO = 0x0, unprogrammed default
 20527  300001                     	org	3145729
 20528  300001  05                 	db	5
 20529                           
 20530                           ;Config register CONFIG2L @ 0x300002
 20531                           ;	unspecified, using default values
 20532                           ;	Power-up Timer Enable bit
 20533                           ;	PWRT = 0x1, unprogrammed default
 20534                           ;	Brown-out Reset Enable bits
 20535                           ;	BOR = 0x3, unprogrammed default
 20536                           ;	Brown-out Reset Voltage bits
 20537                           ;	BORV = 0x3, unprogrammed default
 20538                           ;	USB Voltage Regulator Enable bit
 20539                           ;	VREGEN = 0x0, unprogrammed default
 20540  300002                     	org	3145730
 20541  300002  1F                 	db	31
 20542                           
 20543                           ;Config register CONFIG2H @ 0x300003
 20544                           ;	unspecified, using default values
 20545                           ;	Watchdog Timer Enable bit
 20546                           ;	WDT = 0x1, unprogrammed default
 20547                           ;	Watchdog Timer Postscale Select bits
 20548                           ;	WDTPS = 0xF, unprogrammed default
 20549  300003                     	org	3145731
 20550  300003  1F                 	db	31
 20551                           
 20552                           ; Padding undefined space
 20553  300004                     	org	3145732
 20554  300004  FF                 	db	255
 20555                           
 20556                           ;Config register CONFIG3H @ 0x300005
 20557                           ;	unspecified, using default values
 20558                           ;	CCP2 MUX bit
 20559                           ;	CCP2MX = 0x1, unprogrammed default
 20560                           ;	PORTB A/D Enable bit
 20561                           ;	PBADEN = 0x1, unprogrammed default
 20562                           ;	Low-Power Timer 1 Oscillator Enable bit
 20563                           ;	LPT1OSC = 0x0, unprogrammed default
 20564                           ;	MCLR Pin Enable bit
 20565                           ;	MCLRE = 0x1, unprogrammed default
 20566  300005                     	org	3145733
 20567  300005  83                 	db	131
 20568                           
 20569                           ;Config register CONFIG4L @ 0x300006
 20570                           ;	unspecified, using default values
 20571                           ;	Stack Full/Underflow Reset Enable bit
 20572                           ;	STVREN = 0x1, unprogrammed default
 20573                           ;	Single-Supply ICSP Enable bit
 20574                           ;	LVP = 0x1, unprogrammed default
 20575                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
 20576                           ;	ICPRT = 0x0, unprogrammed default
 20577                           ;	Extended Instruction Set Enable bit
 20578                           ;	XINST = 0x0, unprogrammed default
 20579                           ;	Background Debugger Enable bit
 20580                           ;	DEBUG = 0x1, unprogrammed default
 20581  300006                     	org	3145734
 20582  300006  85                 	db	133
 20583                           
 20584                           ; Padding undefined space
 20585  300007                     	org	3145735
 20586  300007  FF                 	db	255
 20587                           
 20588                           ;Config register CONFIG5L @ 0x300008
 20589                           ;	unspecified, using default values
 20590                           ;	Code Protection bit
 20591                           ;	CP0 = 0x1, unprogrammed default
 20592                           ;	Code Protection bit
 20593                           ;	CP1 = 0x1, unprogrammed default
 20594                           ;	Code Protection bit
 20595                           ;	CP2 = 0x1, unprogrammed default
 20596                           ;	Code Protection bit
 20597                           ;	CP3 = 0x1, unprogrammed default
 20598  300008                     	org	3145736
 20599  300008  0F                 	db	15
 20600                           
 20601                           ;Config register CONFIG5H @ 0x300009
 20602                           ;	unspecified, using default values
 20603                           ;	Boot Block Code Protection bit
 20604                           ;	CPB = 0x1, unprogrammed default
 20605                           ;	Data EEPROM Code Protection bit
 20606                           ;	CPD = 0x1, unprogrammed default
 20607  300009                     	org	3145737
 20608  300009  C0                 	db	192
 20609                           
 20610                           ;Config register CONFIG6L @ 0x30000A
 20611                           ;	unspecified, using default values
 20612                           ;	Write Protection bit
 20613                           ;	WRT0 = 0x1, unprogrammed default
 20614                           ;	Write Protection bit
 20615                           ;	WRT1 = 0x1, unprogrammed default
 20616                           ;	Write Protection bit
 20617                           ;	WRT2 = 0x1, unprogrammed default
 20618                           ;	Write Protection bit
 20619                           ;	WRT3 = 0x1, unprogrammed default
 20620  30000A                     	org	3145738
 20621  30000A  0F                 	db	15
 20622                           
 20623                           ;Config register CONFIG6H @ 0x30000B
 20624                           ;	unspecified, using default values
 20625                           ;	Configuration Register Write Protection bit
 20626                           ;	WRTC = 0x1, unprogrammed default
 20627                           ;	Boot Block Write Protection bit
 20628                           ;	WRTB = 0x1, unprogrammed default
 20629                           ;	Data EEPROM Write Protection bit
 20630                           ;	WRTD = 0x1, unprogrammed default
 20631  30000B                     	org	3145739
 20632  30000B  E0                 	db	224
 20633                           
 20634                           ;Config register CONFIG7L @ 0x30000C
 20635                           ;	unspecified, using default values
 20636                           ;	Table Read Protection bit
 20637                           ;	EBTR0 = 0x1, unprogrammed default
 20638                           ;	Table Read Protection bit
 20639                           ;	EBTR1 = 0x1, unprogrammed default
 20640                           ;	Table Read Protection bit
 20641                           ;	EBTR2 = 0x1, unprogrammed default
 20642                           ;	Table Read Protection bit
 20643                           ;	EBTR3 = 0x1, unprogrammed default
 20644  30000C                     	org	3145740
 20645  30000C  0F                 	db	15
 20646                           
 20647                           ;Config register CONFIG7H @ 0x30000D
 20648                           ;	unspecified, using default values
 20649                           ;	Boot Block Table Read Protection bit
 20650                           ;	EBTRB = 0x1, unprogrammed default
 20651  30000D                     	org	3145741
 20652  30000D  40                 	db	64
 20653                           tosu	equ	0xFFF
 20654                           tosh	equ	0xFFE
 20655                           tosl	equ	0xFFD
 20656                           stkptr	equ	0xFFC
 20657                           pclatu	equ	0xFFB
 20658                           pclath	equ	0xFFA
 20659                           pcl	equ	0xFF9
 20660                           tblptru	equ	0xFF8
 20661                           tblptrh	equ	0xFF7
 20662                           tblptrl	equ	0xFF6
 20663                           tablat	equ	0xFF5
 20664                           prodh	equ	0xFF4
 20665                           prodl	equ	0xFF3
 20666                           indf0	equ	0xFEF
 20667                           postinc0	equ	0xFEE
 20668                           postdec0	equ	0xFED
 20669                           preinc0	equ	0xFEC
 20670                           plusw0	equ	0xFEB
 20671                           fsr0h	equ	0xFEA
 20672                           fsr0l	equ	0xFE9
 20673                           wreg	equ	0xFE8
 20674                           indf1	equ	0xFE7
 20675                           postinc1	equ	0xFE6
 20676                           postdec1	equ	0xFE5
 20677                           preinc1	equ	0xFE4
 20678                           plusw1	equ	0xFE3
 20679                           fsr1h	equ	0xFE2
 20680                           fsr1l	equ	0xFE1
 20681                           bsr	equ	0xFE0
 20682                           indf2	equ	0xFDF
 20683                           postinc2	equ	0xFDE
 20684                           postdec2	equ	0xFDD
 20685                           preinc2	equ	0xFDC
 20686                           plusw2	equ	0xFDB
 20687                           fsr2h	equ	0xFDA
 20688                           fsr2l	equ	0xFD9
 20689                           status	equ	0xFD8

Data Sizes:
    Strings     373
    Constant    126
    Data        15
    BSS         960
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     50      70
    BANK0           160    150     158
    BANK1           256      0     250
    BANK2           256     34     187
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$3491	PTR FTN()void  size(2) Largest target is 1
		 -> troca_de_tela(), verifica_fence_externo(), disparo_gravacao(), verifica_dados_operacionais(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), rawTime(BANK1[11]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), rawTime(BANK1[11]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 59
		 -> string_dado.data(BANK2[7]), string_dado(BANK2[59]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 15
		 -> temp_buff_lat(BANK1[11]), temp_buff_long(BANK2[12]), filename(BANK2[15]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 15
		 -> temp_buff_lat(BANK1[11]), temp_buff_long(BANK2[12]), filename(BANK2[15]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_6(CODE[6]), STR_5(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 6
		 -> sentence(BANK1[6]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_13(CODE[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 15
		 -> filename(BANK2[15]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 15
		 -> filename(BANK2[15]), 

    memset@p1	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memset@p	PTR unsigned char  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d1	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK0[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK0[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), STR_21(CODE[4]), 

    memcmp@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 124
		 -> poligono_ext.point_long_min(BANK1[6]), poligono_ext.fence_long_min(BANK1[6]), poligono_ext.point_lat_min(BANK1[6]), poligono_ext.fence_lat_min(BANK1[6]), 
		 -> poligono_ext.fence_lat_deg(BANK1[5]), poligono_ext.point_lat_deg(BANK1[5]), poligono_ext.fence_long_deg(BANK1[6]), poligono_ext.point_long_deg(BANK1[6]), 
		 -> poligono_ext(BANK1[124]), 

    point_buff_gps_long	PTR unsigned char  size(2) Largest target is 13
		 -> NULL(NULL[0]), rawLongitude(BANK2[13]), 

    point_buff_gps_lat	PTR unsigned char  size(2) Largest target is 13
		 -> NULL(NULL[0]), rawLatitude(BANK2[13]), 

    disparo_gravacao@fix_gps	PTR unsigned char  size(2) Largest target is 2
		 -> rawFix(BANK1[2]), 

    p_tarefas	PTR FTN()void [4] size(2) Largest target is 1
		 -> troca_de_tela(), verifica_fence_externo(), disparo_gravacao(), verifica_dados_operacionais(), 

    fprintf@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fprintf@str	PTR const unsigned char  size(2) Largest target is 35
		 -> STR_14(CODE[35]), 

    fprintf@arp	PTR void [1] size(1) Largest target is 2
		 -> ?_fprintf(BANK0[2]), 

    fputs@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fputs@str	PTR const unsigned char  size(2) Largest target is 59
		 -> fprintf@s(BANK2[16]), ?_fprintf(BANK0[2]), STR_19(CODE[16]), STR_18(CODE[27]), 
		 -> STR_17(CODE[17]), STR_16(CODE[16]), STR_15(CODE[16]), string_dado(BANK2[59]), 

    fputc@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    sp__fgets	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_readdir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_opendir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@bw	PTR unsigned int  size(1) Largest target is 2
		 -> fputc@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(1) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_write@wbuff	PTR const unsigned char  size(1) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__memcpy	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_20(CODE[13]), filename(BANK2[15]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> fs(BIGRAM[544]), 

    validate@fs	PTR const struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@path	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> f_opendir@path(COMRAM[2]), f_open@path(BANK0[2]), 

    auto_mount@p	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_20(CODE[13]), filename(BANK2[15]), 

    check_fs@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dir	PTR PTR unsigned char  size(1) Largest target is 2
		 -> f_open@dir(BANK0[2]), 

    reserve_direntry@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj	PTR struct _DIR_E size(1) Largest target is 15
		 -> f_open@dj(BANK0[14]), 

    reserve_direntry@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), 

    trace_path@dir	PTR PTR unsigned char  size(1) Largest target is 2
		 -> f_opendir@dir(COMRAM[2]), f_open@dir(BANK0[2]), 

    trace_path@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_20(CODE[13]), filename(BANK2[15]), 

    trace_path@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dj	PTR struct _DIR_E size(1) Largest target is 15
		 -> f_open@dj(BANK0[14]), 

    trace_path@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@path	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> trace_path@path(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@dirname	PTR unsigned char  size(1) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), 

    S1370_DIR_E$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj	PTR struct _DIR_E size(1) Largest target is 15
		 -> f_open@dj(BANK0[14]), 

    clust2sect@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    create_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    remove_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@p	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    get_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sync@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    FatFs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    move_window@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    monta_sd@dado	PTR unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[7]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), rawTime(BANK1[11]), 

    sp__leitura_sdcard	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK2[20]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 15
		 -> filename(BANK2[15]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 15
		 -> temp_buff_lat(BANK1[11]), temp_buff_long(BANK2[12]), filename(BANK2[15]), 

    S707_FIL$dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    S707_FIL$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__fix	PTR unsigned char  size(2) Largest target is 2
		 -> rawFix(BANK1[2]), 

    sp__Longitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLongitude(BANK2[13]), 

    sp__Latitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLatitude(BANK2[13]), 

    stringcpy@str1	PTR unsigned char  size(2) Largest target is 12
		 -> buffer(BANK1[12]), 

    stringcpy@str2	PTR unsigned char  size(2) Largest target is 13
		 -> rawFix(BANK1[2]), rawAltitude(BANK2[7]), rawSatellites(BANK1[3]), rawDate(BANK1[7]), 
		 -> rawCourse(BANK1[6]), rawSpeed(BANK1[6]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), 
		 -> rawTime(BANK1[11]), sentence(BANK1[6]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 21
		 -> STR_33(CODE[2]), STR_32(CODE[7]), STR_31(CODE[14]), STR_30(CODE[8]), 
		 -> STR_29(CODE[17]), STR_28(CODE[8]), STR_27(CODE[16]), STR_26(CODE[4]), 
		 -> STR_25(CODE[4]), STR_24(CODE[5]), STR_23(CODE[5]), mensagem_inicial@msg_dois(BANK0[17]), 
		 -> mensagem_inicial@msg_linha_um(BANK0[17]), NULL(NULL[0]), STR_12(CODE[9]), STR_11(CODE[10]), 
		 -> STR_10(CODE[10]), STR_9(CODE[14]), STR_8(CODE[21]), STR_7(CODE[15]), 
		 -> rawFix(BANK1[2]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), escreve_inteiro_lcd@texto(BANK0[7]), 
		 -> STR_4(CODE[11]), STR_3(CODE[10]), STR_2(CODE[16]), STR_1(CODE[11]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _verifica_fence_externo->_calcula_diff_graus
    _calcula_diff_minutos->_atoi
    _calcula_diff_graus->_atoi
    _atoi->___wmul
    _armazena_longitude->_strcpy
    _armazena_latitude->_strcpy
    _troca_de_tela->_escreve_inteiro_lcd
    _escreve_inteiro_lcd->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _escreve_cmd_lcd->_delay
    _strcpy->_Latitude
    _strcpy->_Longitude
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _make_dirfile->_memset
    _next_dir_entry->_get_cluster
    _clust2sect->___lmul
    _remove_chain->_get_cluster
    _auto_mount->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_command
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _check_fs->_disk_read
    _f_lseek->_get_cluster
    _create_chain->_get_cluster
    _f_sync->_sync
    _validate->_disk_status
    _disk_status->_sdc_disk_status
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_command
    _proceed->_escreve_SPI
    _command->_dummy_clocks
    _command->_wait_ready
    _get_fattime->_GPSDay
    _get_fattime->_GPSHour
    _get_fattime->_GPSMinute
    _get_fattime->_GPSMonth
    _get_fattime->_GPSSecond
    _get_fattime->_GPSyear
    _dados_gps_to_sd->_monta_sd
    _monta_sd->_strlen

Critical Paths under _isr in COMRAM

    _isr->_GPSRead
    _GPSRead->_stringcpy

Critical Paths under _main in BANK0

    _main->_escalonador
    _escalonador->_disparo_gravacao
    _troca_de_tela->_escreve_inteiro_lcd
    _escrita_sdcard->_fprintf
    _inicializa_uart->_configura_baudrate_uart
    _fprintf->_fputs
    _fputs->_fputc
    _fputc->_f_write
    _f_write->_create_chain
    _f_open->_reserve_direntry
    _trace_path->_next_dir_entry
    _reserve_direntry->_create_chain
    _next_dir_entry->_get_cluster
    _remove_chain->_put_cluster
    _auto_mount->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _check_fs->_disk_read
    _f_lseek->_create_chain
    _create_chain->_put_cluster
    _put_cluster->_move_window
    _get_cluster->_move_window
    _f_close->_f_sync
    _f_sync->_move_window
    _sync->_move_window
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _disk_read->_sdc_disk_read

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _escrita_sdcard->_fprintf

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  450028
                    _dados_gps_to_sd
                        _escalonador
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    7123
                                             30 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             27 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     148
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     148
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     2     0      2     148
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  439716
                                            147 BANK0      3     3      0
                   _disparo_gravacao *
                      _troca_de_tela *
        _verifica_dados_operacionais *
             _verifica_fence_externo *
 ---------------------------------------------------------------------------------
 (2) _verifica_fence_externo                               1     1      0    8646
                                             47 COMRAM     1     1      0
                  _armazena_latitude
                 _armazena_longitude
                 _calcula_diff_graus
               _calcula_diff_minutos
           _verifica_diferenca_graus
         _verifica_diferenca_minutos
        _verifica_plausibilidade_lat
       _verifica_plausibilidade_long
 ---------------------------------------------------------------------------------
 (3) _verifica_plausibilidade_long                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _verifica_plausibilidade_lat                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _verifica_diferenca_minutos                          10    10      0     877
                                             24 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (3) _verifica_diferenca_graus                            10    10      0     743
                                             24 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (3) _calcula_diff_minutos                                 8     8      0    2799
                                             37 COMRAM     8     8      0
                               _atoi
 ---------------------------------------------------------------------------------
 (3) _calcula_diff_graus                                  10    10      0    2929
                                             37 COMRAM    10    10      0
                               _atoi
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 7     5      2    2514
                                             30 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _armazena_longitude                                   0     0      0     649
                          _Longitude
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _armazena_latitude                                    0     0      0     649
                           _Latitude
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _verifica_dados_operacionais                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _troca_de_tela                                        2     2      0   14248
                                             47 COMRAM     2     2      0
                           _Latitude
                          _Longitude
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                                _fix
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_inteiro_lcd                                  9     7      2    7205
                                             45 COMRAM     2     0      2
                                              0 BANK0      7     7      0
              _escreve_frase_ram_lcd
                               _itoa
 ---------------------------------------------------------------------------------
 (4) _itoa                                                 6     1      5    3556
                                             39 COMRAM     6     1      5
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                 8     3      5    2843
                                             31 COMRAM     8     3      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     972
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4    1161
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             26 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _Longitude                                            2     0      2       0
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _Latitude                                             2     0      2       0
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _disparo_gravacao                                     3     3      0  416599
                                            144 BANK0      3     3      0
                     _escrita_sdcard
                                _fix
 ---------------------------------------------------------------------------------
 (3) _fix                                                  2     0      2       0
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _escrita_sdcard                                       5     5      0  416565
                        _desliga_SPI
                       _desliga_uart
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _fprintf
                     _inicializa_SPI
                    _inicializa_uart
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4     649
                                             26 COMRAM     6     2      4
                           _Latitude (ARG)
                          _Longitude (ARG)
 ---------------------------------------------------------------------------------
 (4) _strcat                                               6     2      4     323
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             38 COMRAM    12     8      4
                                              0 BANK0      2     2      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                             24 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (4) _inicializa_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _fprintf                                             56    36     20  128186
                                            122 BANK0     22     2     20
                                              0 BANK2     34    34      0
                            ___lldiv
                            ___llmod
                             ___wmul
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (5) _fputs                                                7     3      4   61783
                                            115 BANK0      7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                7     3      4   61290
                                            108 BANK0      7     3      4
                            _f_write
 ---------------------------------------------------------------------------------
 (7) _f_write                                             30    24      6   60478
                                             78 BANK0     30    24      6
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     412
                                             24 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (4) _f_open                                              44    39      5  200664
                                             96 BANK0     44    39      5
                         _auto_mount
                        _get_fattime
                             _memcpy
                             _memset
                        _move_window
                       _remove_chain
                   _reserve_direntry
                         _trace_path
 ---------------------------------------------------------------------------------
 (5) _trace_path                                          20    15      5   38428
                                             71 BANK0     20    15      5
                         _clust2sect
                       _make_dirfile
                             _memcmp
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _make_dirfile                                        11     9      2    2102
                                             32 COMRAM    11     9      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _reserve_direntry                                    18    16      2   76553
                                             78 BANK0     18    16      2
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memset
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _next_dir_entry                                      12    11      1   18602
                                             59 BANK0     12    11      1
                         _clust2sect
                        _get_cluster
 ---------------------------------------------------------------------------------
 (8) _clust2sect                                          11     7      4    1435
                                             36 COMRAM    11     7      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _remove_chain                                         8     6      2   33394
                                             64 BANK0      8     6      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (8) _memcpy                                              11     5      6     970
                                             24 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (5) _auto_mount                                          46    44      2   32813
                                             25 BANK0     46    44      2
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                             _memset
 ---------------------------------------------------------------------------------
 (7) _memset                                               8     2      6    1008
                                             24 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _disk_initialize                                      4     4      0   21374
                                             44 COMRAM     2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (7) _sdc_disk_initialize                                 13    13      0   21244
                                             43 COMRAM     1     1      0
                                              0 BANK0     12    12      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (8) _sdc_reset                                           20    20      0   10188
                                             36 COMRAM     7     7      0
                            _command
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    3537
                                             27 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             26 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    3029
                                             27 COMRAM     2     0      2
              _escreve_caractere_lcd
                                _fix (ARG)
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             26 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _check_fs                                             8     4      4    6616
                                             48 COMRAM     2     2      0
                                             19 BANK0      6     2      4
                          _disk_read
                             _memcmp
 ---------------------------------------------------------------------------------
 (6) _memcmp                                               8     2      6     701
                                             24 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (9) ___lmul                                              12     4      8     516
                                             24 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) _f_mount                                              3     1      2     290
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _f_lseek                                             33    27      6   54910
                                             78 BANK0     33    27      6
                            ___lldiv
                       _create_chain
                        _get_cluster
                           _validate
 ---------------------------------------------------------------------------------
 (8) _create_chain                                        14    12      2   34457
                                             64 BANK0     14    12      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (9) _put_cluster                                         24    20      4   16663
                                             40 BANK0     24    20      4
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (9) _get_cluster                                         21    19      2   16353
                                             48 COMRAM     2     0      2
                                             40 BANK0     19    19      0
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1392
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     901
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) _f_close                                              3     1      2   30425
                                             49 BANK0      3     1      2
                             _f_sync
 ---------------------------------------------------------------------------------
 (5) _f_sync                                               9     7      2   30002
                                             40 BANK0      9     7      2
                        _get_fattime
                        _move_window
                               _sync
                           _validate
 ---------------------------------------------------------------------------------
 (8) _validate                                             6     2      4    1178
                                             30 COMRAM     6     2      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (9) _disk_status                                          4     4      0     226
                                             26 COMRAM     4     4      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_status                                     4     4      0      34
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _sync                                                 2     2      0   14103
                                             48 COMRAM     2     2      0
                         _disk_ioctl
                        _move_window
 ---------------------------------------------------------------------------------
 (8) _move_window                                         21    17      4   13765
                                             19 BANK0     21    17      4
                          _disk_read
                         _disk_write
 ---------------------------------------------------------------------------------
 (9) _disk_write                                          12     5      7    6087
                                             47 COMRAM     1     1      0
                                              8 BANK0     11     4      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_write                                     19    12      7    4623
                                             36 COMRAM    11     4      7
                                              0 BANK0      8     8      0
                            _command
                       _dummy_clocks
                        _escreve_SPI
                        _leitura_SPI
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (9) _disk_read                                           12     5      7    5608
                                             47 COMRAM     1     1      0
                                              8 BANK0     11     4      7
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_read                                      24    17      7    4459
                                             36 COMRAM    11     4      7
                                              0 BANK0      8     8      0
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (11) _response                                            1     1      0      34
                                             24 COMRAM     1     1      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (11) _proceed                                             0     0      0      34
                        _escreve_SPI
 ---------------------------------------------------------------------------------
 (11) _command                                             7     2      5    3412
                                             29 COMRAM     7     2      5
                       _dummy_clocks
                        _escreve_SPI
                         _wait_ready
 ---------------------------------------------------------------------------------
 (12) _wait_ready                                         15    15      0      99
                                             24 COMRAM     5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _escreve_SPI                                         2     2      0      34
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) _dummy_clocks                                        5     5      0      68
                                             24 COMRAM     5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _leitura_SPI                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _disk_ioctl                                           7     4      3     304
                                             24 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (5) _get_fattime                                         52    48      4     389
                                             28 COMRAM    14    10      4
                                              0 BANK0     38    38      0
                             _GPSDay
                            _GPSHour
                          _GPSMinute
                           _GPSMonth
                          _GPSSecond
                            _GPSyear
 ---------------------------------------------------------------------------------
 (6) _GPSyear                                              4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _GPSSecond                                            4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _GPSMonth                                             4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _GPSMinute                                            4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _GPSHour                                              4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _GPSDay                                               4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _desliga_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _desliga_SPI                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dados_gps_to_sd                                      0     0      0    1310
                           _monta_sd
 ---------------------------------------------------------------------------------
 (2) _monta_sd                                             5     3      2    1310
                                             28 COMRAM     5     3      2
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     220
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _isr                                                13    13      0    3687
                                             11 COMRAM    13    13      0
                            _GPSRead
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (17) i2_write_timer_zero                                  2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (17) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _GPSRead                                             2     2      0    3509
                                              9 COMRAM     2     2      0
                             _strcmp
                          _stringcpy
 ---------------------------------------------------------------------------------
 (18) _stringcpy                                           9     3      6    2920
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (18) _strcmp                                              7     3      4     493
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dados_gps_to_sd
     _monta_sd
       _strlen
   _escalonador
     _disparo_gravacao *
       _escrita_sdcard
         _desliga_SPI
         _desliga_uart
         _f_close
           _f_sync
             _get_fattime
               _GPSDay
               _GPSHour
               _GPSMinute
               _GPSMonth
               _GPSSecond
               _GPSyear
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _sync
               _disk_ioctl
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
         _f_lseek
           ___lldiv
           _create_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
           _validate
             _disk_status
               _sdc_disk_status
         _f_mount
         _f_open
           _auto_mount
             ___lldiv
             ___lmul
             _check_fs
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcmp
             _disk_initialize
               _sdc_disk_initialize
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                   _fix (ARG)
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
                 _sdc_reset
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                     _fix (ARG)
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _disk_status
               _sdc_disk_status
             _memset
           _get_fattime
             _GPSDay
             _GPSHour
             _GPSMinute
             _GPSMonth
             _GPSSecond
             _GPSyear
           _memcpy
           _memset
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _remove_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _reserve_direntry
             _clust2sect
               ___lmul
             _create_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _memset
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
           _trace_path
             _clust2sect
               ___lmul
             _make_dirfile
               _memset
             _memcmp
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
         _fprintf
           ___lldiv
           ___llmod
           ___wmul
           _fputc
             _f_write
               _clust2sect
                 ___lmul
               _create_chain
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                 _put_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcpy
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _validate
                 _disk_status
                   _sdc_disk_status
           _fputs
             _fputc
               _f_write
                 _clust2sect
                   ___lmul
                 _create_chain
                   _get_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                   _put_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _memcpy
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                 _validate
                   _disk_status
                     _sdc_disk_status
         _inicializa_SPI
         _inicializa_uart
           _configura_baudrate_uart
             ___aldiv
         _strcat
         _strcpy
           _Latitude (ARG)
           _Longitude (ARG)
       _fix
     _troca_de_tela *
       _Latitude
       _Longitude
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
         _fix (ARG)
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
           _fix (ARG)
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       _fix
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
     _verifica_dados_operacionais *
     _verifica_fence_externo *
       _armazena_latitude
         _Latitude
         _strcpy
           _Latitude (ARG)
           _Longitude (ARG)
       _armazena_longitude
         _Longitude
         _strcpy
           _Latitude (ARG)
           _Longitude (ARG)
       _calcula_diff_graus
         _atoi
           ___wmul
           _isdigit
       _calcula_diff_minutos
         _atoi
           ___wmul
           _isdigit
       _verifica_diferenca_graus
       _verifica_diferenca_minutos
       _verifica_plausibilidade_lat
       _verifica_plausibilidade_long
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
       _fix (ARG)
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _GPSRead
     _strcmp
     _stringcpy
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     220      21       26.6%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     22      BB       9       73.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FA       7       97.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     96      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     32      46       1       74.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     299      20        0.0%
DATA                 0      0     4B9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Fri Apr 29 14:38:40 2022

                         next_dir_entry@idx 00A5                    __end_of_mensagem_inicial 485E  
                       next_dir_entry@clust 00A3                                 _SSPSTATbits 000FC7  
                          ??_init_interrupt 0019                                          l68 530E  
              __size_of_escreve_inteiro_lcd 0036                    _verifica_diferenca_graus 2C62  
                                        _fs 02BB                         ___wmul@multiplicand 001B  
                               _put_cluster 23F2                            disk_write@sector 006A  
                              ?_escalonador 0001                              create_chain@fs 00A6  
                          disk_write@result 0070                            ?_inicializa_uart 0001  
                                       l200 4590                                         l201 4598  
                                       l202 459A                                         l203 45A2  
                                       l220 497E                                         l204 45A4  
                                       l221 4986                                         l213 4952  
                                       l205 45AC                                         l222 4988  
                                       l206 45AE                                         l223 4990  
                                       l215 495C                      __size_of_troca_de_tela 032C  
                                       l144 2B8E                                         l224 4992  
                                       l232 4A82                                         l225 499A  
                                       l217 4966                                         l250 48A2  
                                       l242 486E                                         l226 499C  
                                       l218 4968                                         l251 48A4  
                                       l219 497C                                         l252 48AC  
                                       l244 4878                                         l181 534C  
                                       l253 48AE                                         l254 48B6  
                                       l246 4882                                         l183 5352  
                                       l255 48B8                                         l191 455A  
                                       l256 48C0                                         l248 488C  
                                       l257 48C2                                         l249 488E  
                                       l193 4564                                         l195 456E  
                                       l197 4578                                         l198 457A  
                                       l199 458E                                         l565 4FAC  
                                       l581 4AEA                                         l662 5424  
                                       l656 5470                                         l930 076E  
                                       l843 33E6                                         l772 3054  
                                       l846 3394                                         l960 13E0  
                                       l769 305C                                         l970 1522  
                                       l955 13B4                                         _PCL 000FF9  
                                       _PR2 000FCB                                         _fil 019E  
                          ??_init_oscilador 0019                                         _fix 54A2  
                                       _isr 0008                                disk_read@res 0072  
                                       prod 000FF3                              ??_create_chain 00A2  
                                       tosl 000FFD                                         wreg 000FE8  
                 __size_of_write_timer_zero 000A                             create_chain@mcl 00A4  
                           create_chain@ncl 00AC                             create_chain@scl 00AA  
                   ??_escreve_frase_ram_lcd 001E                                        l1130 111C  
                                      l2003 4A66             verifica_diferenca_minutos@point 0021  
                                      l1044 0B72                                        l1048 0D82  
                                      l1147 126A                                        l1416 1620  
                                      l1097 4F62                                        l2074 4C26  
                                      l2084 4F46                                        l1436 1834  
                                      l1622 47D6                                        l2272 3ED2  
                                      l2290 440C                                        l1396 4B84  
                                      ?_fix 0019                                        l7130 3384  
                                      l7134 338C                                        l7126 337C  
                                      l7118 336C                                        l7156 33C6  
                                      l7148 33AE                                        l7068 32D4  
                                      l7166 33E4                                        l7158 33C8  
                                      l7176 3400                                        l7088 333E  
                                      l8400 2E06                                        l8410 266C  
                                      l8340 2C9E                                        l8324 2C76  
                                      l8420 2688                                        l8404 2668  
                                      ?_isr 0001                                        l8334 2C92  
                                      l8350 2D2E                                        l8318 2C72  
                                      l7704 5340                                        l8336 2C96  
                                      l8424 26C6                                        l8440 2762  
                                      l8600 40FE                                        l6844 5138  
                                      l8380 2D6C                                        l8364 2D44  
                                      l8356 2D38                                        l8428 26CE  
                                      l8604 410C                                        l9502 3954  
                                      l8374 2D60                                        l8390 2DF4  
                                      l8358 2D40                                        l8454 2778  
                                      l8446 276C                                        l8438 275E  
                                      l8534 405C                                        l9424 4FB8  
                                      l9432 504C                                        l9512 3988  
                                      l6848 5148                                        l8376 2D64  
                                      l8472 27DA                                        l8464 2794  
                                      l8448 2774                                        l8632 416C  
                                      l9522 39BC                                        l9506 3978  
                                      l9514 3990                                        l8490 2878  
                                      l8482 286A                                        l8650 419C  
                                      l8618 413C                                        l8562 40BE  
                                      l9532 39EC                                        l8396 2DFE  
                                      l8468 27D2                                        l8484 286E  
                                      l8636 4170                                        l8580 40F0  
                                      l8548 408E                                        l9446 4AE4  
                                      l9518 39A4                                        l9622 2C4E  
                                      l9606 2BFE                                        l8494 2880  
                                      l8670 41AA                                        l8566 40C2  
                                      l9640 4904                                        l9632 48D4  
                                      l9560 2B30                                        l9552 2ADE  
                                      l9720 5416                                        l7784 4D78  
                                      l9810 2F0C                                        l7794 4DB0  
                                      l9730 4954                                        l9636 4900  
                                      l7788 4D90                                        l9900 4C32  
                                      l9574 2B54                                        l9814 2F14  
                                      l9806 2E90                                        l9822 2F62  
                                      l9734 495E                                        l9496 3940  
                                      l9656 4926                                        l9592 2BD6  
                                      l9664 4CD8                                        l9832 2FB6  
                                      l9912 28D4                                        l9904 4C5A  
                                      l9850 50B4                                        l9770 4884  
                                      l9762 4870                       _escreve_caractere_lcd 485E  
                                      l9668 4D04                                        l9844 50A8  
                                      l9932 2A02                                        l9686 4D08  
                                      l9846 50B0                                        l9862 50BC  
                                      l9766 487A                                        STR_1 6211  
                                      l9936 2A22                                        l9880 4A9C  
                                      STR_2 61BE                                        STR_3 6230  
                                      l9946 2A88                                        l9970 24B8  
                                      STR_4 6206                                        STR_5 6258  
                                      l9948 2AA2                                        l9972 24EC  
                                      l9964 2478                                        l9956 2418  
                                      l9884 4AAA                                        l9876 4A8E  
                                      l9892 4AB8                                        STR_6 6252  
                                      STR_7 61CE                                        l9990 2598  
                                      l9894 4AD2                                        STR_8 6147  
                                      STR_9 61EB                                        l9994 25C2  
                            timer_dois@flag 0042                                        _BRGH 007D62  
                           __end_of_GPSRead 1F0C                                        _CREN 007D5C  
                                      _T0IF 007F92                                ?_escreve_SPI 0001  
                           __end_of_GPSHour 521E                                        _LATB 000F8A  
                                      _PIE1 000F9D                                        _RCIF 007CF5  
                                      u9120 2D52                                        u9050 2C84  
                                      u6900 331A                                        u9410 4074  
                                      u9500 40EC                                        u9270 2786  
                                      u9190 267A                                        u9430 408A  
                                      u6880 330A                                        u9600 4148  
                                      u9440 409A                                        u9610 4154  
                                      u9450 40A6                                        u6887 3300  
                                      u9560 411E                                        u9480 40D6  
                                      u9650 4186                                        u9580 4134  
                                      u9590 4138                                        _TMR0 000FD6  
                                      _TMR2 000FCC                                        _SPEN 007D5F  
                                      _TXEN 007D65                                        _SYNC 007D64  
                              trace_path@dj 00A7                                trace_path@fn 00A8  
                              trace_path@ds 00B8                                trace_path@fs 00B4  
                             ?_make_dirfile 0021                             __end_of_GPSyear 5262  
                                      _Term 0043                                        _flag 0033  
                                      _atoi 3E0E                                        _main 5102  
                                      _fsid 011A                                        _itoa 5072  
                   __end_of_fence_diff_long 60BB                                        fsr1h 000FE2  
                                      fsr2h 000FDA                                        indf1 000FE7  
                                      indf2 000FDF                                        fsr1l 000FE1  
                                      fsr2l 000FD9                                        btemp 0047  
                                      _utoa 4394                                        _sync 4C82  
                             disk_ioctl@cmd 0019                               disk_read@buff 0068  
                             disk_ioctl@res 001D                               disk_read@pdrv 006F  
                                      prodh 000FF4                                        prodl 000FF3  
                                      start 000E                  __end_of_calcula_diff_graus 368E  
                   ?_verifica_fence_externo 0001                   sdc_disk_initialize@buff_i 0067  
                              ___param_bank 000000                   sdc_disk_initialize@count1 0063  
                 sdc_disk_initialize@count2 0069                                 _string_dado 0200  
                                     ??_fix 001B                                       ??_isr 000C  
                   __size_of_escrita_sdcard 0110                          __size_of_GPSMinute 0022  
                        __size_of_GPSSecond 0022            __size_of_configura_baudrate_uart 010C  
                                     l10010 2644                                       l10022 4BAC  
                                     l10008 2628                                       l10032 44E8  
                                     l10122 3100                                       l10018 4B98  
                                     l10050 4542                                       l10108 30C6  
                                     l10028 44CA                                       l10126 313C  
                                     l10310 1BD4                                       l10206 19EE  
                                     l11022 09CC                                       l10152 4DE8  
                                     l11040 3822                                       l10320 1BFC  
                                     l10240 1A96                                       l10216 1A12  
                                     l11016 09B6                                       l11008 08A8  
                                     l11200 14A8                                       l10090 3092  
                                     l10074 303E                                       l10066 3014  
                                     l10138 3FFA                                       l10410 00CC  
                                     l11300 0D36                                       l10164 4EDC  
                                     l10172 4EFC                                       l11212 1500  
                                     l11060 45E2                                       l11108 43CE  
                                     l10342 5312                                       l10158 4DF8  
                                     l11054 38D6                                       l10078 3064  
                                     l10502 51B2                                       l11150 1320  
                                     l10422 0186                                       l11134 508A  
                                     l11312 0D96                                       l10600 4762  
                                     l10328 1C38                                       l10192 19AE  
                                     l10504 51B8                                       l10520 51BC  
                                     l11232 1536                                       l10424 01A6  
                                     l11064 4628                                       l10274 1B22  
                                     l10186 1998                                       l10434 01FE  
                                     l11066 4630                                       l11410 107E  
                                     l11324 0DDE                                       l11316 0DA0  
                                     l10380 4498                                       l10284 1B4E  
                                     l10268 1B12                                       l10196 19BA  
                                     l11180 13BC                                       l11092 4A58  
                                     l11084 4A24                                       l10460 03A4  
                                     l10444 02E2                                       l10452 0336  
                                     l11076 3C00                                       l11260 50DE  
                                     l11326 0DF2                                       l11334 0E62  
                                     l11350 0F5C                                       l11342 0EF6  
                                     l10374 442A                                       l10382 44A0  
                                     l10294 1B76                                       l11086 4A30  
                                     l10462 03B2                                       l11502 12E0  
                                     l11270 4EA4                                       l11262 50E6  
                                     l10536 4CB8                                       l10800 207C  
                                     l11432 1104                                       l11416 10B2  
                                     l11272 4EAC                                       l10704 4C1C  
                                     l10720 4F3C                                       l10712 4F1C  
                                     l11520 3E10                                       l10626 4788  
                                     l10474 046C                                       l11426 10F4  
                                     l11362 0F8E                                       l10650 3EF8  
                                     l11266 4E90                                       l10714 4F24  
                                     l11098 439C                                       l11522 3E14  
                                     l10628 4794                                       l10492 0578  
                                     l11452 1164                                       l11436 1110  
                                     l11268 4E94                                       l11620 3AE8  
                                     l11612 3A48                                       l11540 3EA0  
                                     l11532 3E54                                       l11702 3C2E  
                                     l10638 47C8                                       l10734 4322  
                                     l10726 4302                                       l10558 31BE  
                                     l10574 3294                                       l10814 20DA  
                                     l11198 147C                                       l10478 04E8  
                                     l10486 051C                                       l11454 117C  
                                     l11446 1140                                       l11358 0F84  
                                     l10662 3F32                                       l12262 41BA  
                                     l10584 4718                                       l10744 4364  
                                     l10904 23C0                                       l10832 2112  
                                     l10808 20BE                                       l10496 058A  
                                     l11464 11A4                                       l11392 1026  
                                     l10664 3F3E                                       l10656 3F10  
                                     l11624 3B02                                       l11560 4570  
                                     l11552 455C                                       l11536 3E6A  
                                     l11634 518E                                       l11730 3C82  
                                     l11722 3C5C                                       l10922 0604  
                                     l10914 05AC                                       l10746 436C  
                                     l10850 2210                                       l10826 20FE  
                                     l10818 20E6                                       l10770 1FCC  
                                     l11474 11DE                                       l11378 0FE4  
                                     l10682 3F96                                       l10674 3F72  
                                     l11618 3AD8                                       l12274 4250  
                                     l11636 5192                                       l11716 3C58  
                                     l11708 3C32                                       l10588 471C  
                                     l10932 0628                                       l10916 05B2  
                                     l10852 2222                                       l11492 1278  
                                     l11468 11B0                                       l11388 1010  
                                     l11556 4566                                       l10692 4BF4  
                                     l12372 5128                                       l11750 3CB0  
                                     l10950 0658                                       l10782 1FEA  
                                     l10774 1FD0                                       l11398 1052  
                                     l10678 3F80                                       l10694 4BFC  
                                     l11670 3D28                                       l11822 1658  
                                     l12366 511A                                       l11760 3CDC  
                                     l11744 3CAC                                       l11736 3C86  
                                     l10960 0686                                       l10872 22B8  
                                     l10848 21EA                                       l11496 1296  
                                     l11488 1258                                       l11664 3684  
                                     l11648 355C                                       l11680 3E06  
                                     l11920 182E                                       l11840 16AE  
                                     l11770 3D04                                       l10946 0654  
                                     l10882 22F8                                       l10858 224A  
                                     l11666 3686                                       l11906 17E6  
                                     l11842 16B2                                       l10868 22B4  
                                     l10796 2070                                       l10788 2012  
                                     l11908 17EA                                       l11766 3CFA  
                                     l11758 3CD6                                       l10894 2386  
                                     l11678 3E04                                       l11934 1890  
                                     l10968 0690                                       l11960 1924  
                                     l10986 0726                                       l10978 0704  
                                     l11858 1716                                       l11884 1798  
                                     l11964 192A                                       l11886 179C  
                           __end_of___aldiv 3FA8                                       ?_atoi 001F  
                                     ?_main 0001                                       ?_itoa 0028  
                                     STR_10 6226                                       STR_11 621C  
                                     STR_12 623A                                       STR_20 61F9  
                                     STR_21 6275                                       STR_13 6268  
                                     STR_30 6243                                       STR_22 6279  
                                     STR_14 6109                                       STR_23 6263  
                                     STR_31 61DD                                       STR_15 619E  
                                     STR_24 625E                                       STR_32 624B  
                                     STR_16 61AE                                       STR_33 627C  
                                     STR_25 6271                                       STR_17 616D  
                                     STR_26 626D                                       STR_18 612C  
                                     STR_19 618E                                       STR_27 617E  
                                     STR_28 6243                                       STR_29 615C  
                              ?_leitura_SPI 0001                             __end_of___lldiv 47E8  
                                     ?_utoa 0020                                       ?_sync 0001  
                                     u11005 2B04                                       u12000 1C14  
                                     u12010 1C46                                       u11035 2BAA  
                                     u11060 2C5C                                       u12020 4456  
                                     u12040 4488                                       u13000 0650  
                                     _T0CON 000FD5                                       u11250 2E4E  
                                     u11330 4C52                                       u12027 444C  
                                     u11340 4C7A                                       u11405 297E  
                                     u11270 2E8C                                       u13110 09B2  
                                     u12047 447E                                       u12215 0322  
                                     u11360 289E                                       u11600 2FFE  
                                     u13120 09CA                                       u12320 31BA  
                                     u14000 12B8                                       u11337 4C48  
                                     u13105 08C0                             __end_of___llmod 4A78  
                                     u11610 300A                                       u11435 2A0E  
                                     u11515 25A4                                       u11347 4C70  
                                     u10900 4AF4                                       u11460 2474  
                                     u11620 3034                                       u12260 0524  
                                     u12405 3466                                       u13070 0722  
                                     u12350 323A                                       u12415 3482  
                                     u11455 2448                                       u13135 0A50  
                                     u12335 31CA                                       u12175 024A  
                                     u13215 3B20                                       u12280 4CB4  
                                     u11720 312A                                       u11560 4508  
                                     u12440 4F58                                       u12520 3F42  
                                     u14040 3E64                                       _T2CON 000FCA  
                                     u12425 34B2                                       u11385 2904  
                                     u13225 3B58                                       u10930 394E  
                                     u11650 3088                                       u12370 4718  
                                     u11810 19CA                                       u12610 431E  
                                     u13410 13DC                                       u13170 4602  
                                     u12435 34D2                                       u10915 38F2  
                                     u11820 19DA                                       u13340 131C  
                                     u11485 2518                                       u13245 3B9C  
                                     u12470 4798                                       u11910 1AD2  
                                     u11830 19E6                                       u12630 4352  
                                     u13190 4650                                       u14230 356A  
                                     u11831 19E4                                       u13255 3BD4  
                                     u10880 506E                                       u11760 4DE4  
                                     u12640 4378                                       u13440 1478  
                                     u13280 4A34                                       u12560 4C00  
                                     u15200 47F6                                       u12705 202E  
                                     u13177 45F8                                       u11850 1A34  
                                     u12650 4390                                       u12810 2246  
                                     u14170 45D0                                       u15210 480E  
                                     u13700 0E76                                       u12660 1FB6  
                                     u14260 3D36                                       u14420 1628  
                                     u13605 0BE6                                       u13197 4646  
                                     u14181 5010                                       u13710 0EBC  
                                     u12590 4F28                                       u14430 162E  
                                     u11960 1B9E                                       u12920 05D2  
                                     u12840 22A6                                       u13480 151E  
                                     u13800 1060                                       u12825 2266  
                                     u11890 1AC6                                       u14370 4B80  
                                     u14610 185C                                       u13715 0EB2  
                                     u12667 1FAC                                       u12940 05F8  
                                     u14620 187C                                       u12870 22F4  
                                     u14470 16BA                                       u12927 05C8  
                                     u15407 4298                                       u13680 0DFE  
                                     u13840 10F2                                       u14640 18E2  
                                     u14480 16C2                                       u15417 42B4  
                                     u13770 0FDA                                       u14650 1918  
                                     u14618 185E                                       u15427 1966  
                                     u12947 05EE                                       u14660 1932  
                                     u14628 187E                                       u15188 420E  
                                     u15437 1AD8                                       u15189 4222  
                                     u13950 1238                                       u14670 1934  
                                     u14590 1840                                       u15447 1B7C  
                                     u14648 18E4                                       u15457 4F98  
                                     u14658 191A                                       u15387 484A  
                                     u15397 427C                             __end_of___lwdiv 4C30  
                           __end_of___lwmod 4F50                            __end_of_GPSMonth 52A6  
                                     _RCREG 000FAE                                       _RCSTA 000FAB  
                                     _SPBRG 000FAF                 ?_verifica_diferenca_minutos 0001  
                                     _TRISA 000F92                                       _TRISB 000F93  
                                     _TRISC 000F94                                       _TRISD 000F95  
                                     _TRISE 000F96                             __end_of_f_close 5184  
                             trace_path@dir 00AB                                       _TXSTA 000FAC  
                                     _FatFs 0038                             __end_of_f_lseek 0F6E  
                       ___lmul@multiplicand 001D                  __size_of_config_timer_dois 000E  
                           __end_of_f_mount 4DB4                             __end_of_f_write 059C  
                __size_of_config_timer_zero 001A                               get_cluster@bc 0097  
                             get_cluster@fs 0099                               get_cluster@wc 0091  
                           __end_of_command 4B30                                       _delay 5348  
                           clust2sect@clust 0025                             __end_of_fprintf 12EC  
                                     _fputc 4F50                                       _fputs 45D6  
                           __end_of_isdigit 5348                    __size_of_escreve_cmd_lcd 008C  
                                     atoi@a 0024                                       atoi@s 001F  
                            ??_make_dirfile 0023                              disk_ioctl@buff 001A  
                                     pclath 000FFA                              disk_read@count 006E  
                                     tablat 000FF5                              disk_ioctl@pdrv 001C  
                          ?_dados_gps_to_sd 0001                             __end_of_proceed 546C  
                                     plusw1 000FE3                                       plusw2 000FDB  
                                     ttemp5 0048                                       ttemp6 004B  
                                     ttemp7 004F                                       utoa@c 0027  
                                     utoa@v 0025                                       status 000FD8  
                             _troca_de_tela 161E                                       wtemp8 0048  
                        _armazena_longitude 539C                               disk_write@res 0072  
            __end_of_verifica_fence_externo 4B88                             __initialization 4660  
                       disk_initialize@pdrv 002D                         ?_armazena_longitude 0001  
                       disk_initialize@stat 002E                                __end_of_atoi 3EDC  
                              __end_of_main 512E                                clust2sect@fs 002E  
                              __end_of_itoa 50A4                                __end_of_utoa 4428  
                              __end_of_sync 4CD4                          _inicializa_tarefas 49AA  
                           escalonador@cont 00F5                            __end_of_Latitude 54A2  
                       reserve_direntry@dir 00AF                           create_chain@clust 00A0  
                               auto_mount@p 009D                           create_chain@cstat 00A8  
                             sdc_reset@buff 002B                                      ??_atoi 0021  
                                    ??_main 0033                                      ??_itoa 002D  
                                    ??_utoa 0025                                      ??_sync 0031  
                             __activetblptr 000002                         ?_inicializa_tarefas 0001  
                      __end_of_desliga_uart 5454                                   ??_GPSRead 000A  
                                 ??_GPSHour 001B                              _next_dir_entry 3146  
                      ??_armazena_longitude 0021                        __size_of_desliga_SPI 000C  
                         get_fattime@f_time 0021                                   ??_GPSyear 001B  
                          ??_sdc_disk_write 002C                                      ?_delay 0001  
                    ?_escreve_caractere_lcd 0001                                      _ADCON1 000FC1  
                                    ?_fputc 00CC                            ___llmod@dividend 0019  
                                    ?_fputs 00D3                          auto_mount@bootsect 0095  
                                    _INT0IE 007F94                                      _INT0IF 007F91  
                             ?_dummy_clocks 0001                           __end_of_GPSMinute 52C8  
                         __end_of_GPSSecond 5284                                      i2l1368 378A  
                                    _PCLATH 000FFA                                      _INTCON 000FF2  
                                    i2l9244 5406                                      _GPSDay 52C8  
                   __size_of_inicializa_SPI 0020                              ?_troca_de_tela 0001  
                                    _TMR0IF 007F92                          auto_mount@maxclust 0091  
                  __end_of_recebe_dado_uart 540A                                      _SPPCFG 000F63  
                                    _SPPCON 000F65                                      _SSPBUF 000FC9  
                  __size_of_sdc_disk_status 0010                            __end_of_check_fs 4766  
                      ??_inicializa_tarefas 0019                           ?_disparo_gravacao 0001  
                            trace_path@dptr 00B9                              trace_path@path 00A9  
                    reserve_direntry@sector 00B4                    __size_of_disk_initialize 0026  
                __end_of_posicao_cursor_lcd 4AD6                          ??_disparo_gravacao 00F0  
                            auto_mount@path 0079                                ?_move_window 0073  
                      __end_of_create_chain 3146                                _dado_arquivo 023B  
                    __size_of_init_hardware 0016                              auto_mount@stat 00A0  
                      __size_of_get_fattime 0156                                put_cluster@p 009C  
              ?_verifica_dados_operacionais 0001                        __size_of_get_cluster 0222  
                                    ___lmul 4B88                                   ??___aldiv 0021  
                      __size_of_disk_status 0030                                      ___wmul 51D4  
                        __size_of_Longitude 000A                                   ??___lldiv 0021  
                                    _f_open 12EC                                   ??___llmod 0021  
                                 ??___lwdiv 001D                                      _f_sync 37B6  
                                 ??___lwmod 001D                                      _buffer 01BA  
                                    _estado 003F                                      _memcmp 4428  
                                    _memcpy 4ECA                            __end_of_init_lcd 42F8  
                                    _memset 512E                                   ??_f_close 0033  
                                    _rawFix 01F8                                      clear_0 469A  
                                    clear_1 46AC                                      clear_2 46B8  
                                    clear_3 46C4                                      clear_4 46D0  
                                 ??_f_lseek 00B4                                   ??_f_mount 001B  
                  configura_baudrate_uart@x 0060                                   ??_f_write 00B4  
                                    _strcat 4E86                                      _strcmp 4D22  
                       _sdc_disk_initialize 194A                                   ??_command 0023  
                               GPSRead@buff 000A                                      _strcpy 50D4  
                                    _strlen 5184                            put_cluster@clust 0088  
                                    fputc@c 00D0                          get_cluster@fatsect 0093  
                          __end_of_monta_sd 3D26                    __end_of_reserve_direntry 23F2  
                          __end_of_validate 4DFC                      __end_of_next_dir_entry 32AA  
                                 ??_fprintf 00EE                                __pdataCOMRAM 0046  
                                    fputs@n 00D8                                   ??_isdigit 0019  
                      __size_of_escalonador 00A6                            __end_of_response 5460  
                              __mediumconst 608A                             disk_read@sector 006A  
                           disk_read@result 0070                                      tblptrh 000FF7  
                                    tblptrl 000FF6                                      tblptru 000FF8  
                                 ??_proceed 001B                            _write_timer_zero 5484  
                                    sync@fs 0031                   escreve_caractere_lcd@data 001B  
                            ??_dummy_clocks 0019                         _escreve_inteiro_lcd 5006  
                           sdc_disk_write@j 0065                                  __accesstop 0060  
                   __end_of__initialization 46D6                        ?_sdc_disk_initialize 0001  
                            disk_write@buff 0068              calcula_diff_graus@temp_var_deg 002A  
                            disk_write@pdrv 006F                        __size_of_escreve_SPI 0010  
                             ___rparam_used 000001                  ??_verifica_diferenca_graus 0019  
                         ??_escreve_cmd_lcd 001B                ?_verifica_plausibilidade_lat 0001  
              __end_of_calcula_diff_minutos 3E0E                                   ?_GPSMonth 0019  
                            __pcstackCOMRAM 0001                 __end_of_endereco_cursor_lcd 49AA  
                              __pidataBANK2 542A                           ?_mensagem_inicial 0001  
                   _configura_baudrate_uart 3B0E                               __end_of_delay 5366  
                            _escrita_sdcard 39FE                               __end_of_fputc 4F90  
                             __end_of_fputs 4660                        ?_escreve_inteiro_lcd 002E  
             ??_verifica_dados_operacionais 0019                          ??_mensagem_inicial 001F  
                      __end_of_make_dirfile 3404                                ?_put_cluster 0088  
                         reserve_direntry@c 00BB                           reserve_direntry@n 00B8  
                        _tarefa_em_execucao 003C                  __end_ofi2_write_timer_zero 54B6  
                           ?_next_dir_entry 009B                      __size_of_sdc_disk_read 0124  
           configura_baudrate_uart@baudrate 0027                        reserve_direntry@dptr 00B9  
                      __size_of_leitura_SPI 000C                               _init_hardware 53D0  
                              auto_mount@fs 00A5                          __size_of_disk_read 0070  
                                   ??_delay 0019                              sdc_reset@count 0029  
                                   ??_fputc 0033                                     ??_fputs 00D7  
                           ??_troca_de_tela 0030                           __end_of_Longitude 5498  
              mensagem_inicial@msg_linha_um 0060                                  __pbssBANK0 00F6  
                                __pbssBANK1 0100                                  __pbssBANK2 0200  
            __size_of_escreve_frase_ram_lcd 0052                                     ?_GPSDay 0019  
             __end_of_escreve_frase_ram_lcd 4C82                       ??_sdc_disk_initialize 002C  
                                 ?_Latitude 0019                   escreve_inteiro_uart@F3215 02AD  
                                ??_GPSMonth 001B               ??_verifica_plausibilidade_lat 0019  
                    __end_of_escrita_sdcard 3B0E                          __size_of_sdc_reset 0090  
                        troca_de_tela@state 003B                                     ?___lmul 0019  
                         ??_sdc_disk_status 0019                               make_dirfile@a 0029  
                             make_dirfile@b 0027                               make_dirfile@c 002B  
                             make_dirfile@n 002A                               make_dirfile@t 0028  
                                   ?___wmul 0019                       mensagem_inicial@F3656 60F8  
                     mensagem_inicial@F3658 60E7                       ??_escreve_inteiro_lcd 0030  
                                   ?_f_open 00C0                                     ?_f_sync 0088  
                         ??_disk_initialize 002D                       __size_of_desliga_uart 000E  
                                   ?_memcmp 0019                                     ?_memcpy 0019  
                   calcula_diff_graus@count 002F                                     ?_memset 0019  
                            ___lmul@product 0021                     calcula_diff_graus@point 002E  
                                   ?_strcat 0019                                     ?_strcmp 0001  
                                   ?_strcpy 001B                                     ?_strlen 0019  
                        _calcula_diff_graus 355A                                     i2l12102 1E02  
                                   i2l12120 1E82                                     i2l12040 1C98  
                                   i2l12032 1C74                                     i2l12024 1C52  
                                   i2l12114 1E56                                     i2l12042 1CA2  
                                   i2l12132 1EDA                                     i2l12108 1E2C  
                                   i2l12052 1CF4                                     i2l12028 1C62  
                                   i2l12126 1EAE                                     i2l12070 1D6A  
                                   i2l12142 1EF6                                     i2l12136 1EE2  
                                   i2l12080 1D8C                                     i2l12064 1D40  
                                   i2l12056 1D14                                     i2l12320 3724  
                                   i2l12304 36E6                                     i2l12058 1D18  
                                   i2l12332 374A                                     i2l12316 36F6  
                                   i2l12094 1DD2                                     i2l12086 1DB6  
                                   i2l12078 1D86                                     i2l12096 1DD8  
                                   i2l12344 3776                                     i2l12336 3758  
                                   i2l12328 373C                                     i2l12346 3782  
                                   i2l11690 4D24                                     i2l11692 4D2C  
                                   i2l11684 4E00                                     _INTCON2 000FF1  
                                   _INTCON3 000FF0                              ?_init_hardware 0001  
                                 ?_check_fs 0073                                  _disk_ioctl 530A  
                                   _GPSRead 1C4A                                     _GPSHour 51FA  
                                _disk_write 4CD4                                     _GPSyear 5240  
                            remove_chain@fs 00A6                         ?_calcula_diff_graus 0001  
      __size_of_verifica_dados_operacionais 0002                                     _SSPCON1 000FC6  
                  __size_of_inicializa_uart 0022                                     _SSPSTAT 000FC7  
                                _clust2sect 3FA8                              _inicializa_SPI 52EA  
                           trace_path@clust 00B6                             __size_of_GPSDay 0022  
                                ??_Latitude 001B                               ?_remove_chain 00A0  
                     __size_of_create_chain 018C                                   ?_init_lcd 0001  
                        __size_of_stringcpy 0046                   calcula_diff_minutos@count 002D  
                             _sdc_disk_read 38DA                   calcula_diff_minutos@point 002C  
                              _desliga_uart 5446                                  _auto_mount 059C  
                                   __Hparam 0000                   ??_configura_baudrate_uart 002B  
  verifica_diferenca_graus@point_index_long 001F                                     __Lparam 0000  
                                 ?_monta_sd 001D                                   ?_validate 001F  
                           ?_escrita_sdcard 0001                           __end_of_disk_read 4940  
                             put_cluster@bc 009A                                   ?_response 0001  
   verifica_diferenca_graus@point_index_lat 001E                               put_cluster@fs 009E  
                      ??_calcula_diff_graus 0026                                     ___aldiv 3EDC  
                                f_close@res 0093                             __size_of___lmul 0056  
                                   ___lldiv 4766                             __size_of___wmul 0026  
                                   ___llmod 4A12                        __size_of_move_window 01AA  
                                check_fs@fs 0077                                     ___lwdiv 4BDE  
                                   ___lwmod 4F0E                             __size_of_f_open 0332  
                           __size_of_f_sync 0124                        __end_of_dummy_clocks 4FCC  
                                   _f_close 515A                                     __pcinit 4660  
                           __size_of_memcmp 0092                             __size_of_memcpy 0044  
                           __size_of_memset 002C                                     _f_lseek 0AE4  
                                _init_ports 5366                                     __ramtop 0800  
                                   _f_mount 4D6C                                     __ptext0 5102  
                                   __ptext1 47E8                                     __ptext2 425A  
                                   __ptext3 53D0                                     __ptext4 5366  
                                   __ptext5 54B6                                     __ptext6 53E6  
                                   __ptext7 5382                                     __ptext8 5484  
                                   __ptext9 5438                                     _f_write 0012  
                                   _command 4AD6                                   _T0CONbits 000FD5  
                       auto_mount@totalsect 0099                             __size_of_strcat 0044  
                           __size_of_strcmp 004A                             __size_of_strcpy 002E  
                           __size_of_strlen 002A                 endereco_cursor_lcd@endereco 001B  
                                   _fprintf 0F6E                                __size_of_fix 000A  
                                   _rawDate 01DC                                     _isdigit 532A  
                              __size_of_isr 37AE        __size_of_verifica_plausibilidade_lat 00AA  
                   ??_escreve_caractere_lcd 001B                                  ??_check_fs 0031  
                                   _rawTime 01D1                            ___aldiv@dividend 0019  
                      _calcula_diff_minutos 3D26                                stringcpy@chr 0009  
                              stringcpy@dir 0005                                     _time_sd 00FC  
                              _create_chain 2FBA                                     _proceed 5460  
                   __size_of_init_interrupt 0012                          _point_buff_gps_lat 00F8  
                         __end_of_sdc_reset 454A                      __end_of_inicializa_SPI 530A  
                                f_lseek@ofs 00B0                              __pintcode_body 368E  
                                f_lseek@res 00C4                        end_of_initialization 46D6  
      __end_of_verifica_plausibilidade_long 410A       __size_of_verifica_plausibilidade_long 00B0  
              _verifica_plausibilidade_long 405A                                  f_open@mode 00C4  
                                f_open@path 00C2                              ??_remove_chain 00A2  
                                   isr@cont 0018                                     memcmp@n 001D  
                                   memcpy@d 0020                                     memcpy@n 001D  
                                   memcpy@s 0022                     __size_of_init_oscilador 0008  
                                   fputc@bw 00D1                                     itoa@buf 0028  
                                   memset@c 001B                                     itoa@val 0029  
                                   memset@n 001D                                     memset@p 001F  
                             __Lmediumconst 608A                                  ??_init_lcd 001C  
                                   int_func 368E                           ?_recebe_dado_uart 0001  
          __end_of_verifica_diferenca_graus 2E10                             disk_status@pdrv 001D  
                           disk_status@stat 001E                              ?_sdc_disk_read 0025  
                                 i2u1430_40 4D60                                   i2u1524_40 36D6  
                                 i2u1525_48 36D8                                   _GPSMinute 52A6  
                                 _GPSSecond 5262                      write_timer_zero@timer0 0019  
                           ___lldiv@divisor 001D                               _rawSatellites 01F5  
                                f_mount@drv 001B                          ??_recebe_dado_uart 0001  
                           ___lldiv@counter 0025                                  ??_monta_sd 001F  
                                ??_validate 0023                       __size_of_make_dirfile 015A  
                  __size_of_dados_gps_to_sd 003A                              _fence_diff_lat 60BB  
                                ??_response 0019                                   _RCSTAbits 000FAB  
                  __end_of_write_timer_zero 548E                            ___aldiv@quotient 0023  
                                   postdec1 000FE5                                     postdec2 000FDD  
                                   postinc0 000FEE                                     postinc1 000FE6  
                                   postinc2 000FDE                                     utoa@buf 0020  
                                   utoa@val 0021                                  _wait_ready 503C  
                                   strcmp@r 0007                                     strlen@s 0019  
                                 _PORTBbits 000F81                   __size_of_disparo_gravacao 0044  
                                 _PORTDbits 000F83                                   _PORTEbits 000F84  
                           ??_init_hardware 001B                                  _trace_path 1F0C  
                        _posicao_cursor_lcd 4A78                           __end_of_stringcpy 4E42  
                             ??_desliga_SPI 0019                        __size_of_put_cluster 0266  
                     ?_calcula_diff_minutos 0001             __end_of_configura_baudrate_uart 3C1A  
                               ?_disk_ioctl 0019                           ?_reserve_direntry 00AE  
                                f_write@btw 00B1                                  f_write@res 00C0  
                                 _TRISBbits 000F93                                 ?_disk_write 0068  
                                 _TRISCbits 000F94                                   _TRISDbits 000F95  
                          next_dir_entry@dj 009B                             _escreve_cmd_lcd 454A  
                        ??_reserve_direntry 00B0                 __size_of_armazena_longitude 001A  
                       ?_posicao_cursor_lcd 001C                             ?_inicializa_SPI 0001  
                           disk_write@count 006E                                 ?_clust2sect 0025  
                          _put_cluster$1527 0092                            _put_cluster$1528 0094  
                                command@CMD 0023                                  command@CRC 0022  
                                command@arg 001E                                _make_dirfile 32AA  
             ?_verifica_plausibilidade_long 0001                              __end_of_GPSDay 52EA  
                             ??_get_fattime 0060                           ??_inicializa_uart 0033  
               __size_of_inicializa_tarefas 0068                                  ?_GPSMinute 0019  
                                ?_GPSSecond 0019                               ??_get_cluster 0088  
                    __end_of_fence_diff_lat 60E7                               ??_disk_status 001B  
                               ?_auto_mount 0079                           _make_dirfile$1637 0025  
                           command@argument 0024                        ??_posicao_cursor_lcd 001D  
                         __size_of_GPSMonth 0022                              __end_of___lmul 4BDE  
                            _temp_buff_long 0278                            ??_next_dir_entry 009C  
                            __end_of___wmul 51FA                              __end_of_f_open 161E  
                             __pidataCOMRAM 54C0                               ??_escalonador 00F3  
                               ?_init_ports 0001                              __end_of_f_sync 38DA  
                         _armazena_latitude 53B6                              __end_of_memcmp 44BA  
                            __end_of_memcpy 4F0E                              __end_of_memset 515A  
                        ?_armazena_latitude 0001                              __end_of_strcat 4ECA  
                            __end_of_strcmp 4D6C                              __end_of_strcpy 5102  
                            __end_of_strlen 51AE                            _time_atualizacao 0036  
                       start_initialization 4660                                 __end_of_fix 54AC  
                               __end_of_isr 37B6                   __size_of_mensagem_inicial 0076  
                        reserve_direntry@dj 00AE                         ??_armazena_latitude 0021  
                        reserve_direntry@fs 00BE                         __end_of_desliga_SPI 5484  
                             ??_escreve_SPI 0019                    ??_verifica_fence_externo 0030  
                                  ??_GPSDay 001B                             _sdc_disk_status 540A  
                           ??_sdc_disk_read 002C                           auto_mount@fatsize 00A1  
                        i2_write_timer_zero 54AC                             ___llmod@divisor 001D  
                                 _Longitude 548E                             _disk_initialize 51AE  
                           ___llmod@counter 0021                           __size_of_Latitude 000A  
                     reserve_direntry@clust 00BC                     __size_of_sdc_disk_write 01B6  
                          _data_uart_recebe 003E                           wait_ready@timeout 0019  
                     __size_of_dummy_clocks 003C                               auto_mount@fmt 009F  
                       __size_of_disk_ioctl 0020       verifica_diferenca_minutos@select_data 001D  
                       ?i2_write_timer_zero 0001                         __size_of_disk_write 004E  
                                  ??___lmul 0021                                  fprintf@fil 00DA  
                                fprintf@arp 02A7                                    ??___wmul 001D  
                                fprintf@res 029B                                  fprintf@val 02A3  
                                fprintf@str 00DC                         __end_of_get_fattime 355A  
                                  ??_f_open 00C5                   __end_of_armazena_latitude 53D0  
                                  ??_f_sync 0033                                 ?_wait_ready 0001  
                               __pdataBANK2 02AD                         __end_of_get_cluster 2AAC  
                                  ??_memcmp 001F                         __end_of_disk_status 50D4  
                                  ??_memcpy 001F                         __size_of_clust2sect 00B2  
                                  ??_memset 001F                      sdc_disk_read@start_add 0061  
                      __end_of_remove_chain 4394                           ??_dados_gps_to_sd 0022  
                   sdc_disk_initialize@buff 006B                               ??_leitura_SPI 0019  
                   __end_of_escreve_cmd_lcd 45D6                                    ??_strcat 001D  
                                  ??_strcmp 0005                                    ??_strcpy 001F  
                                  ??_strlen 001B                     sdc_disk_initialize@stat 0062  
                               ?_trace_path 00A7                      ??_calcula_diff_minutos 0026  
         __size_of_verifica_diferenca_graus 01AE                                _fprintf$2130 029D  
              __size_of_endereco_cursor_lcd 006A                   ?_verifica_diferenca_graus 0001  
                               __pbssBIGRAM 02BB                               monta_sd@index 001F  
                               __pbssCOMRAM 0033                             _trace_path$1684 00B0  
                           _trace_path$1686 00B2                ??_verifica_diferenca_minutos 0019  
                                  ?_GPSRead 0001                                    ?_GPSHour 0019  
                             __pcstackBANK0 0060                               __pcstackBANK2 028B  
                            _init_interrupt 53E6                         __size_of_auto_mount 0548  
                      ??i2_write_timer_zero 0003                         __end_of_escalonador 425A  
               __end_of_sdc_disk_initialize 1C4A                                    ?_GPSyear 0019  
                         __size_of_check_fs 0082                                _isdigit$3129 001A  
                              check_fs@sect 0073                                 _char_number 0045  
                              _dummy_clocks 4F90                              _init_oscilador 54B6  
                     __end_of_troca_de_tela 194A                                    GPSRead@c 000B  
                          ??_escrita_sdcard 0033                         __size_of_init_ports 001C  
                                ?_Longitude 0019                       _escreve_frase_ram_lcd 4C30  
                               ??_GPSMinute 001B                                 ??_GPSSecond 001B  
                                 _data_buff 0120                                   _data_hoje 0041  
               __end_of_escreve_inteiro_lcd 503C                         __end_of_escreve_SPI 542A  
                         __size_of_init_lcd 009E                            ___lwdiv@dividend 0019  
                         delay@contador_int 001A                           delay@contador_ext 0019  
            ??_verifica_plausibilidade_long 0019         __end_of_verifica_dados_operacionais 54C0  
               _verifica_dados_operacionais 54BE                                   __pintcode 0008  
                             __pmediumconst 608A                                    ?___aldiv 0019  
                                 __ptext100 52C8                                   __ptext101 5446  
                                 __ptext110 4DFC                                   __ptext102 5478  
                                 __ptext111 4D22                                   __ptext103 4FCC  
                                 __ptext112 0000                                   __ptext104 3C1A  
                                 __ptext105 5184                                   __ptext107 54AC  
                                 __ptext108 53F8                                   __ptext109 1C4A  
                         __size_of_monta_sd 010C                                    ?___lldiv 0019  
                                  ?___llmod 0019                           __size_of_validate 0048  
                                  ?___lwdiv 0019                                    ?___lwmod 0019  
       __size_of_verifica_diferenca_minutos 0232                           __size_of_response 000C  
                                  ?_f_close 0091                                   _disk_read 48D0  
       verifica_diferenca_graus@select_data 001D                          _sinaliza_int_timer 003D  
                                  ?_f_lseek 00AE                                    ?_f_mount 0019  
                          _disparo_gravacao 4E42                                    ?_f_write 00AE  
                                  ?_command 001E                      __end_of_init_interrupt 53F8  
                                  ?_fprintf 00DA                                    ?_isdigit 0001  
                               _desliga_SPI 5478                         sdc_disk_read@p_buff 0025  
                   troca_de_tela@last_state 003A                         sdc_disk_read@length 0065  
                       sdc_disk_read@sector 0027                     __end_of_sdc_disk_status 541A  
            __size_of_escreve_caractere_lcd 0072               __end_of_escreve_caractere_lcd 48D0  
                                  ?_proceed 0001                                   f_close@fp 0091  
                       __end_of_leitura_SPI 5478                            ___lwdiv@quotient 001E  
                            __size_of_delay 001E                     __end_of_disk_initialize 51D4  
                    __end_of_init_oscilador 54BE                              __size_of_fputc 0040  
                            __size_of_fputs 008A                         make_dirfile@dirname 0022  
                                validate@id 0021                                  validate@fs 001F  
                                 _p_tarefas 0110                                   _rawCourse 01E3  
           __size_of_verifica_fence_externo 0058                            make_dirfile@path 0021  
                                  _GPGGA_ok 011C                                   _sdc_reset 44BA  
                       __size_of_wait_ready 0036                             ___aldiv@divisor 001D  
             verifica_diferenca_graus@point 0021                             ___aldiv@counter 0021  
                            ___wmul@product 001D                                    _LATBbits 000F8A  
                                 f_lseek@fp 00AE                                    _LATCbits 000F8B  
       __end_of_verifica_plausibilidade_lat 41B4                 _verifica_plausibilidade_lat 410A  
                                  _GPRMC_ok 011E                                   f_open@dir 00DC  
                                 f_open@res 00DB                                    _PIE1bits 000F9D  
                               _get_fattime 3404                                _rawLongitude 025E  
                       __size_of_trace_path 0278                                 _get_cluster 288A  
                                  _GPSMonth 5284                                 _disk_status 50A4  
                             ??_move_window 0077                                   f_mount@fs 0019  
                                  _PIR1bits 000F9E                               move_window@fs 0086  
               __size_of_calcula_diff_graus 0134                           ?_write_timer_zero 0019  
                           remove_chain@nxt 00A4                  __size_of_armazena_latitude 001A  
                                 f_sync@dir 008F                                   f_sync@res 008E  
                                 f_sync@tim 008A                    posicao_cursor_lcd@coluna 001C  
                                ?_disk_read 0068                          ??_write_timer_zero 001B  
                                 f_write@cc 00C6                  posicao_cursor_lcd@endereco 001E  
                                 f_write@bw 00B3                                   f_write@fp 00AE  
                 __size_of_recebe_dado_uart 0012                                 _escalonador 41B4  
                         ___wmul@multiplier 0019                            ?_escreve_cmd_lcd 0001  
               escreve_frase_ram_lcd@buffer 001C                            ??_inicializa_SPI 0019  
                           ?_init_interrupt 0001                                ??_disk_ioctl 001C  
               verifica_diferenca_minutos@i 0022                 verifica_diferenca_minutos@j 0020  
                              ??_disk_write 0030                                f_lseek@clust 00CD  
                           _inicializa_uart 521E                                f_lseek@csize 00C9  
                              f_lseek@ifptr 00C5                                   _stringcpy 4DFC  
                          __size_of_GPSRead 02C2                            _mensagem_inicial 47E8  
                          __size_of_GPSHour 0024                               _temp_buff_lat 01C6  
                           ?_init_oscilador 0001                                ??_clust2sect 0029  
                          __size_of_GPSyear 0022                           ___lmul@multiplier 0019  
                                 copy_data0 4674                                 _escreve_SPI 541A  
                                ?_sdc_reset 0001                         sdc_reset@count_nosd 0027  
                                  _Latitude 5498                    ?_configura_baudrate_uart 0027  
                    ?_escreve_frase_ram_lcd 001C                                 ??_Longitude 001B  
                          auto_mount@chk_wp 007A                           move_window@sector 0073  
                            _sdc_disk_write 2AAC                   __size_of_reserve_direntry 026E  
                  escreve_inteiro_lcd@F3223 02B4                                ??_auto_mount 007B  
                                  __Hrparam 0000                                   memcpy@tmp 001F  
                                  __Lrparam 0000                                   fprintf@cc 02A8  
                        __end_of_disk_ioctl 532A                       __size_of_remove_chain 009C  
                            put_cluster@val 008A                            get_cluster@clust 0031  
                        __end_of_disk_write 4D22                                _SentenceType 0044  
                          __size_of___aldiv 00CC                      sdc_disk_initialize@ocr 0068  
                              monta_sd@dado 001D                      _verifica_fence_externo 4B30  
                          __size_of___lldiv 0082                            __size_of___llmod 0066  
                             ??_put_cluster 008C                            __size_of___lwdiv 0052  
                              monta_sd@size 0020                            __size_of___lwmod 0042  
                              ??_init_ports 0019                         __end_of_move_window 2FBA  
                        __end_of_clust2sect 405A                    escreve_inteiro_lcd@valor 002E  
                          __size_of_f_close 002A                    escreve_inteiro_lcd@texto 0060  
                          __size_of_f_lseek 048A                            __size_of_f_mount 0048  
                               _leitura_SPI 546C                            __size_of_f_write 058A  
        __end_of_verifica_diferenca_minutos 288A                  _verifica_diferenca_minutos 2658  
                          __size_of_command 005A                  __end_of_armazena_longitude 53B6  
                     __end_of_init_hardware 53E6                                    _check_fs 46E4  
                                strcat@from 001B                            __size_of_fprintf 037E  
                          __size_of_isdigit 001E                             ___lwdiv@divisor 001B  
                          ?_sdc_disk_status 0001                                  ?_stringcpy 0001  
                             _time_recovery 00FA                             ___lwdiv@counter 001D  
                        __end_of_auto_mount 0AE4                                    __ptext10 49AA  
                                  __ptext11 41B4                                    __ptext20 3D26  
                                  __ptext12 161E                                    __ptext21 355A  
                                  __ptext13 4E42                                    __ptext30 4BDE  
                                  __ptext22 3E0E                                    __ptext14 54BE  
                                  __ptext31 454A                                    __ptext23 532A  
                                  __ptext15 4B30                                    __ptext40 3EDC  
                                  __ptext32 548E                                    __ptext24 539C  
                                  __ptext16 405A                                    __ptext41 52EA  
                                  __ptext33 5498                                    __ptext25 53B6  
                                  __ptext17 410A                                    __ptext50 2184  
                                  __ptext42 0F6E                                    __ptext34 54A2  
                                  __ptext26 5006                                    __ptext18 2658  
                                  __ptext51 3146                                    __ptext43 45D6  
                                  __ptext35 39FE                                    __ptext27 5072  
                                  __ptext19 2C62                                    __ptext60 4A78  
                                  __ptext52 3FA8                                    __ptext44 4F50  
                                  __ptext36 50D4                                    __ptext28 4394  
                                  __ptext61 4940                                    __ptext53 42F8  
                                  __ptext45 0012                                    __ptext37 4E86  
                                  __ptext29 4F0E                                    __ptext70 2FBA  
                                  __ptext62 4C30                                    __ptext54 4ECA  
                                  __ptext46 4A12                                    __ptext38 521E  
                                  __ptext71 23F2                                    __ptext63 485E  
                                  __ptext55 059C                                    __ptext47 12EC  
                                  __ptext39 3B0E                                    __ptext80 4C82  
                                  __ptext72 288A                                    __ptext64 5348  
                                  __ptext56 512E                                    __ptext48 1F0C  
                                  __ptext81 2E10                                    __ptext73 51D4  
                                  __ptext65 46E4                                    __ptext57 51AE  
                                  __ptext49 32AA                                    __ptext90 541A  
                                  __ptext82 4CD4                                    __ptext74 4766  
                                  __ptext66 4428                                    __ptext58 194A  
                                  __ptext91 4F90                                    __ptext83 2AAC  
                                  __ptext75 515A                                    __ptext67 4B88  
                                  __ptext59 44BA                                    __ptext92 546C  
                                  __ptext84 48D0                                    __ptext76 37B6  
                                  __ptext68 4D6C                                    __ptext93 530A  
                                  __ptext85 38DA                                    __ptext77 4DB4  
                                  __ptext69 0AE4                                    __ptext94 3404  
                                  __ptext86 5454                                    __ptext78 50A4  
                                  __ptext95 5240                                    __ptext87 5460  
                                  __ptext79 540A                                    __ptext96 5262  
                                  __ptext88 4AD6                                    __ptext97 5284  
                                  __ptext89 503C                                    __ptext98 52A6  
                                  __ptext99 51FA                            __size_of_proceed 000C  
                                  _filename 024F                                 _rawAltitude 0284  
                          ?_disk_initialize 0001                              _timeout_tarefa 0118  
                        sdc_disk_read@count 002B                                  strcpy@from 001D  
                       escrita_sdcard@f_fix 0040                  __end_of_inicializa_tarefas 4A12  
                  i2write_timer_zero@timer0 0001                      __end_of_sdc_disk_write 2C62  
                                 monta_sd@i 0021                                 _rawLatitude 026B  
                                  _init_lcd 425A                               __size_of_atoi 00CE  
                             __size_of_main 002C                                _remove_chain 42F8  
                             __size_of_itoa 0032                               __size_of_utoa 0094  
                             __size_of_sync 0052                         _endereco_cursor_lcd 4940  
                        __end_of_init_ports 5382                                    _rawSpeed 01E9  
                             dummy_clocks@i 001C                                    f_open@dj 00DE  
                             dummy_clocks@n 001B                                    f_open@fn 00C9  
                                  f_open@fp 00C0                                    f_open@dw 00D7  
                                  f_open@rs 00D5                             _dados_gps_to_sd 4FCC  
                                  _monta_sd 3C1A                                    _validate 4DB4  
                                  _sentence 01EF                                move_window@n 0081  
                             stringcpy@str1 0001                               stringcpy@str2 0003  
                                  _response 5454                                    f_sync@fp 0088  
                       _point_buff_gps_long 00F6                 __size_of_posicao_cursor_lcd 005E  
                                  int$flags 0047                     posicao_cursor_lcd@linha 001D  
                                  atoi@sign 0023                                ??_wait_ready 0019  
                               ??_disk_read 0030                     __end_of_inicializa_uart 5240  
                              ??_trace_path 00AC                   verifica_diferenca_graus@i 0022  
                 verifica_diferenca_graus@j 0020                        ?_endereco_cursor_lcd 0001  
                        put_cluster@fatsect 0096                                  _INTCONbits 000FF2  
                                  memcmp@s1 0019                                    memcmp@s2 001B  
                          move_window@wsect 0082                                    memcpy@d1 0019  
                                  memcpy@s1 001B                         __end_of_put_cluster 2658  
                                  fprintf@c 02AC                                    fprintf@f 02A1  
                                  fprintf@i 02AA                                    fprintf@r 02A2  
                                  fprintf@s 028B                                    fprintf@w 029F  
                                  fputc@chr 00CC                                    itoa@base 002B  
                                  fputc@fil 00CE                                    isdigit@c 001B  
                                  memset@p1 0019                           _config_timer_dois 5438  
                              _tempo_backup 0108                                    fputs@fil 00D5  
                                  fputs@str 00D3                           _config_timer_zero 5382  
                              _poligono_ext 0122                               wait_ready@res 001D  
                                  intlevel2 0000                          ?_config_timer_dois 0001  
                  mensagem_inicial@msg_dois 0071                                 ??_sdc_reset 0025  
                        ?_config_timer_zero 0001                                _tempo_tarefa 0100  
                           ?_sdc_disk_write 0025                            ___lwmod@dividend 0019  
                        __end_of_wait_ready 5072                    __end_of_disparo_gravacao 4E86  
                          ___lldiv@dividend 0019                           sdc_disk_read@buff 0067  
                     __end_of_sdc_disk_read 39FE                         sdc_disk_status@pdrv 001A  
                             ?_desliga_uart 0001                         ??_config_timer_dois 0019  
                                _OSCCONbits 000FD3                          __end_of_trace_path 2184  
                       ??_config_timer_zero 001B                                 _move_window 2E10  
                           _fence_diff_long 608B                        sdc_disk_write@count1 0062  
verifica_diferenca_minutos@point_index_long 001F                        sdc_disk_write@p_buff 0025  
                          _recebe_dado_uart 53F8                                    utoa@base 0023  
                      sdc_disk_write@sector 0027                       ??_endereco_cursor_lcd 001B  
                              response@buff 0019                                    strcat@cp 001D  
                                  strcat@to 0019                                    strcmp@s1 0001  
                                  strcmp@s2 0003                                ?_desliga_SPI 0001  
                          ___lldiv@quotient 0021                             ___lwmod@divisor 001B  
                                  strcpy@cp 001F                                    strlen@cp 001B  
                                  strcpy@to 001B                             ___lwmod@counter 001D  
                         remove_chain@clust 00A0               __size_of_calcula_diff_minutos 00E8  
                 __end_of_config_timer_dois 5446                                ___aldiv@sign 0022  
                             ?_create_chain 00A0                   __end_of_config_timer_zero 539C  
                               ??_stringcpy 0007                 __size_ofi2_write_timer_zero 000A  
                               _SSPCON1bits 000FC6                     __size_of_next_dir_entry 0164  
                    escreve_cmd_lcd@comando 001B   verifica_diferenca_minutos@point_index_lat 001E  
                       sdc_disk_write@count 002B               sdc_disk_initialize@crc_number 0065  
                   __end_of_dados_gps_to_sd 5006                          sdc_disk_write@buff 0067  
              __size_of_sdc_disk_initialize 0300                                f_write@clust 00C8  
                            ??_desliga_uart 0019                          leitura_sdcard@size 0046  
                              f_write@wbuff 00C1                                ?_get_fattime 001D  
                          _reserve_direntry 2184                     disparo_gravacao@fix_gps 00F1  
                               f_write@buff 00B0                           sdc_disk_write@res 0064  
                              ?_get_cluster 0031                                 f_write@sect 00C2  
                               f_write@wcnt 00CA                                ?_disk_status 0001  
             __end_ofmensagem_inicial@F3656 6109               __end_ofmensagem_inicial@F3658 60F8  
                           escreve_SPI@dado 001A  
