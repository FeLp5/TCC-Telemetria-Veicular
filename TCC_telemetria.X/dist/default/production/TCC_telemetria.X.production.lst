

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Wed May 04 16:25:27 2022

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=3
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=3
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=3
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=3
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=3
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=3
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=3
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=2
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=2
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=2
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1,group=3
   130                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   131                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   132                           	psect	text110,global,reloc=2,class=CODE,delta=1
   133                           	psect	text111,global,reloc=2,class=CODE,delta=1
   134                           	psect	text112,global,reloc=2,class=CODE,delta=1
   135                           	psect	text113,global,reloc=2,class=CODE,delta=1
   136                           	psect	text114,global,reloc=2,class=CODE,delta=1,group=3
   137                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1,group=3
   139                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   140                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   141                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   142                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   143  0000                     
   144                           ; Version 2.30
   145                           ; Generated 26/08/2020 GMT
   146                           ; 
   147                           ; Copyright © 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   148                           ; All rights reserved.
   149                           ; 
   150                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   151                           ; 
   152                           ; Redistribution and use in source and binary forms, with or without modification, are
   153                           ; permitted provided that the following conditions are met:
   154                           ; 
   155                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   156                           ;        conditions and the following disclaimer.
   157                           ; 
   158                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   159                           ;        of conditions and the following disclaimer in the documentation and/or other
   160                           ;        materials provided with the distribution. Publication is not required when
   161                           ;        this file is used in an embedded application.
   162                           ; 
   163                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   164                           ;        software without specific prior written permission.
   165                           ; 
   166                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   167                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   168                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   169                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   170                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   171                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   172                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   173                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   174                           ; 
   175                           ; 
   176                           ; Code-generator required, PIC18F4550 Definitions
   177                           ; 
   178                           ; SFR Addresses
   179  0000                     
   180                           	psect	idataCOMRAM
   181  005500                     __pidataCOMRAM:
   182                           	callstack 0
   183                           
   184                           ;initializer for leitura_sdcard@size
   185  005500  58                 	db	88
   186                           
   187                           	psect	idataBANK1
   188  0054F2                     __pidataBANK1:
   189                           	callstack 0
   190                           
   191                           ;initializer for escreve_inteiro_lcd@F3223
   192  0054F2  30                 	db	48
   193  0054F3  30                 	db	48
   194  0054F4  30                 	db	48
   195  0054F5  30                 	db	48
   196  0054F6  30                 	db	48
   197  0054F7  30                 	db	48
   198  0054F8  00                 	db	0
   199                           
   200                           	psect	idataBANK2
   201  0054F9                     __pidataBANK2:
   202                           	callstack 0
   203                           
   204                           ;initializer for escreve_inteiro_uart@F3215
   205  0054F9  30                 	db	48
   206  0054FA  30                 	db	48
   207  0054FB  30                 	db	48
   208  0054FC  30                 	db	48
   209  0054FD  30                 	db	48
   210  0054FE  30                 	db	48
   211  0054FF  00                 	db	0
   212                           
   213                           	psect	mediumconst
   214  00608A                     __pmediumconst:
   215                           	callstack 0
   216  00608A  00                 	db	0
   217  00608B                     _fence_diff_long:
   218                           	callstack 0
   219  00608B  2D                 	db	45
   220  00608C  30                 	db	48
   221  00608D  34                 	db	52
   222  00608E  36                 	db	54
   223  00608F  33                 	db	51
   224  006090  32                 	db	50
   225  006091  2E                 	db	46
   226  006092  32                 	db	50
   227  006093  33                 	db	51
   228  006094  33                 	db	51
   229  006095  31                 	db	49
   230  006096  38                 	db	56
   231  006097  2D                 	db	45
   232  006098  30                 	db	48
   233  006099  34                 	db	52
   234  00609A  36                 	db	54
   235  00609B  33                 	db	51
   236  00609C  31                 	db	49
   237  00609D  2E                 	db	46
   238  00609E  37                 	db	55
   239  00609F  35                 	db	53
   240  0060A0  39                 	db	57
   241  0060A1  30                 	db	48
   242  0060A2  37                 	db	55
   243  0060A3  2D                 	db	45
   244  0060A4  30                 	db	48
   245  0060A5  34                 	db	52
   246  0060A6  36                 	db	54
   247  0060A7  33                 	db	51
   248  0060A8  31                 	db	49
   249  0060A9  2E                 	db	46
   250  0060AA  37                 	db	55
   251  0060AB  35                 	db	53
   252  0060AC  39                 	db	57
   253  0060AD  30                 	db	48
   254  0060AE  37                 	db	55
   255  0060AF  2D                 	db	45
   256  0060B0  30                 	db	48
   257  0060B1  34                 	db	52
   258  0060B2  36                 	db	54
   259  0060B3  33                 	db	51
   260  0060B4  32                 	db	50
   261  0060B5  2E                 	db	46
   262  0060B6  32                 	db	50
   263  0060B7  33                 	db	51
   264  0060B8  33                 	db	51
   265  0060B9  31                 	db	49
   266  0060BA  38                 	db	56
   267  0060BB                     __end_of_fence_diff_long:
   268                           	callstack 0
   269  0060BB                     _fence_diff_lat:
   270                           	callstack 0
   271  0060BB  2D                 	db	45
   272  0060BC  32                 	db	50
   273  0060BD  33                 	db	51
   274  0060BE  33                 	db	51
   275  0060BF  39                 	db	57
   276  0060C0  2E                 	db	46
   277  0060C1  34                 	db	52
   278  0060C2  39                 	db	57
   279  0060C3  35                 	db	53
   280  0060C4  37                 	db	55
   281  0060C5  39                 	db	57
   282  0060C6  2D                 	db	45
   283  0060C7  32                 	db	50
   284  0060C8  33                 	db	51
   285  0060C9  33                 	db	51
   286  0060CA  39                 	db	57
   287  0060CB  2E                 	db	46
   288  0060CC  34                 	db	52
   289  0060CD  39                 	db	57
   290  0060CE  35                 	db	53
   291  0060CF  37                 	db	55
   292  0060D0  39                 	db	57
   293  0060D1  2D                 	db	45
   294  0060D2  32                 	db	50
   295  0060D3  33                 	db	51
   296  0060D4  33                 	db	51
   297  0060D5  39                 	db	57
   298  0060D6  2E                 	db	46
   299  0060D7  39                 	db	57
   300  0060D8  32                 	db	50
   301  0060D9  32                 	db	50
   302  0060DA  33                 	db	51
   303  0060DB  37                 	db	55
   304  0060DC  2D                 	db	45
   305  0060DD  32                 	db	50
   306  0060DE  33                 	db	51
   307  0060DF  33                 	db	51
   308  0060E0  39                 	db	57
   309  0060E1  2E                 	db	46
   310  0060E2  39                 	db	57
   311  0060E3  32                 	db	50
   312  0060E4  32                 	db	50
   313  0060E5  33                 	db	51
   314  0060E6  37                 	db	55
   315  0060E7                     __end_of_fence_diff_lat:
   316                           	callstack 0
   317  0060E7                     mensagem_inicial@F3668:
   318                           	callstack 0
   319  0060E7  54                 	db	84
   320  0060E8  43                 	db	67
   321  0060E9  43                 	db	67
   322  0060EA  2D                 	db	45
   323  0060EB  2D                 	db	45
   324  0060EC  54                 	db	84
   325  0060ED  45                 	db	69
   326  0060EE  4C                 	db	76
   327  0060EF  45                 	db	69
   328  0060F0  4D                 	db	77
   329  0060F1  54                 	db	84
   330  0060F2  52                 	db	82
   331  0060F3  49                 	db	73
   332  0060F4  41                 	db	65
   333  0060F5  00                 	db	0
   334  0060F6  00                 	db	0
   335  0060F7  00                 	db	0
   336  0060F8                     __end_ofmensagem_inicial@F3668:
   337                           	callstack 0
   338  0060F8                     mensagem_inicial@F3666:
   339                           	callstack 0
   340  0060F8  46                 	db	70
   341  0060F9  41                 	db	65
   342  0060FA  54                 	db	84
   343  0060FB  45                 	db	69
   344  0060FC  43                 	db	67
   345  0060FD  20                 	db	32
   346  0060FE  53                 	db	83
   347  0060FF  54                 	db	84
   348  006100  20                 	db	32
   349  006101  41                 	db	65
   350  006102  4E                 	db	78
   351  006103  44                 	db	68
   352  006104  52                 	db	82
   353  006105  45                 	db	69
   354  006106  00                 	db	0
   355  006107  00                 	db	0
   356  006108  00                 	db	0
   357  006109                     __end_ofmensagem_inicial@F3666:
   358                           	callstack 0
   359  0000                     _TMR0	set	4054
   360  0000                     _PORTEbits	set	3972
   361  0000                     _PCL	set	4089
   362  0000                     _PCLATH	set	4090
   363  0000                     _PIE1bits	set	3997
   364  0000                     _RCSTA	set	4011
   365  0000                     _TXSTA	set	4012
   366  0000                     _RCREG	set	4014
   367  0000                     _RCSTAbits	set	4011
   368  0000                     _SPBRG	set	4015
   369  0000                     _PIR1bits	set	3998
   370  0000                     _SSPBUF	set	4041
   371  0000                     _SSPCON1bits	set	4038
   372  0000                     _SSPSTATbits	set	4039
   373  0000                     _SSPCON1	set	4038
   374  0000                     _SSPSTAT	set	4039
   375  0000                     _TRISCbits	set	3988
   376  0000                     _TRISBbits	set	3987
   377  0000                     _PORTBbits	set	3969
   378  0000                     _PR2	set	4043
   379  0000                     _TMR2	set	4044
   380  0000                     _T2CON	set	4042
   381  0000                     _OSCCONbits	set	4051
   382  0000                     _TRISE	set	3990
   383  0000                     _TRISC	set	3988
   384  0000                     _TRISA	set	3986
   385  0000                     _TRISD	set	3989
   386  0000                     _LATB	set	3978
   387  0000                     _TRISB	set	3987
   388  0000                     _ADCON1	set	4033
   389  0000                     _T0CONbits	set	4053
   390  0000                     _INTCONbits	set	4082
   391  0000                     _PIE1	set	3997
   392  0000                     _INTCON3	set	4080
   393  0000                     _INTCON2	set	4081
   394  0000                     _INTCON	set	4082
   395  0000                     _SPPCFG	set	3939
   396  0000                     _SPPCON	set	3941
   397  0000                     _T0CON	set	4053
   398  0000                     _PORTDbits	set	3971
   399  0000                     _TRISDbits	set	3989
   400  0000                     _LATBbits	set	3978
   401  0000                     _LATCbits	set	3979
   402  0000                     _INT0IE	set	32660
   403  0000                     _INT0IF	set	32657
   404  0000                     _T0IF	set	32658
   405  0000                     _TMR0IF	set	32658
   406  0000                     _RCIF	set	31989
   407  0000                     _TXEN	set	32101
   408  0000                     _CREN	set	32092
   409  0000                     _SPEN	set	32095
   410  0000                     _SYNC	set	32100
   411  0000                     _BRGH	set	32098
   412  006109                     STR_16:
   413  006109  0A                 	db	10
   414  00610A  76                 	db	118	;'v'
   415  00610B  25                 	db	37
   416  00610C  73                 	db	115	;'s'
   417  00610D  3B                 	db	59	;';'
   418  00610E  6C                 	db	108	;'l'
   419  00610F  74                 	db	116	;'t'
   420  006110  25                 	db	37
   421  006111  73                 	db	115	;'s'
   422  006112  3B                 	db	59	;';'
   423  006113  6C                 	db	108	;'l'
   424  006114  6F                 	db	111	;'o'
   425  006115  25                 	db	37
   426  006116  73                 	db	115	;'s'
   427  006117  3B                 	db	59	;';'
   428  006118  72                 	db	114	;'r'
   429  006119  25                 	db	37
   430  00611A  73                 	db	115	;'s'
   431  00611B  3B                 	db	59	;';'
   432  00611C  63                 	db	99	;'c'
   433  00611D  25                 	db	37
   434  00611E  73                 	db	115	;'s'
   435  00611F  3B                 	db	59	;';'
   436  006120  6B                 	db	107	;'k'
   437  006121  25                 	db	37
   438  006122  73                 	db	115	;'s'
   439  006123  3B                 	db	59	;';'
   440  006124  68                 	db	104	;'h'
   441  006125  25                 	db	37
   442  006126  73                 	db	115	;'s'
   443  006127  3B                 	db	59	;';'
   444  006128  64                 	db	100	;'d'
   445  006129  25                 	db	37
   446  00612A  73                 	db	115	;'s'
   447  00612B  3B                 	db	59	;';'
   448  00612C  66                 	db	102	;'f'
   449  00612D  25                 	db	37
   450  00612E  73                 	db	115	;'s'
   451  00612F  00                 	db	0
   452  006130                     STR_20:
   453  006130  73                 	db	115	;'s'
   454  006131  74                 	db	116	;'t'
   455  006132  72                 	db	114	;'r'
   456  006133  69                 	db	105	;'i'
   457  006134  6E                 	db	110	;'n'
   458  006135  67                 	db	103	;'g'
   459  006136  5F                 	db	95	;'_'
   460  006137  64                 	db	100	;'d'
   461  006138  61                 	db	97	;'a'
   462  006139  64                 	db	100	;'d'
   463  00613A  6F                 	db	111	;'o'
   464  00613B  2E                 	db	46
   465  00613C  6F                 	db	111	;'o'
   466  00613D  64                 	db	100	;'d'
   467  00613E  6F                 	db	111	;'o'
   468  00613F  6D                 	db	109	;'m'
   469  006140  65                 	db	101	;'e'
   470  006141  74                 	db	116	;'t'
   471  006142  72                 	db	114	;'r'
   472  006143  6F                 	db	111	;'o'
   473  006144  5F                 	db	95	;'_'
   474  006145  74                 	db	116	;'t'
   475  006146  6F                 	db	111	;'o'
   476  006147  74                 	db	116	;'t'
   477  006148  61                 	db	97	;'a'
   478  006149  6C                 	db	108	;'l'
   479  00614A  00                 	db	0
   480  00614B  6F                 	db	111	;'o'
   481  00614C  20                 	db	32
   482  00614D  53                 	db	83	;'S'
   483  00614E  69                 	db	105	;'i'
   484  00614F  73                 	db	115	;'s'
   485  006150  74                 	db	116	;'t'
   486  006151  65                 	db	101	;'e'
   487  006152  6D                 	db	109	;'m'
   488  006153  61                 	db	97	;'a'
   489  006154  20                 	db	32
   490  006155  64                 	db	100	;'d'
   491  006156  65                 	db	101	;'e'
   492  006157  20                 	db	32
   493  006158  61                 	db	97	;'a'
   494  006159  72                 	db	114	;'r'
   495  00615A  71                 	db	113	;'q'
   496  00615B  75                 	db	117	;'u'
   497  00615C  69                 	db	105	;'i'
   498  00615D  76                 	db	118	;'v'
   499  00615E  6F                 	db	111	;'o'
   500  00615F  00                 	db	0
   501  006160                     STR_31:
   502  006160  42                 	db	66	;'B'
   503  006161  31                 	db	49	;'1'
   504  006162  3A                 	db	58	;':'
   505  006163  52                 	db	82	;'R'
   506  006164  50                 	db	80	;'P'
   507  006165  4D                 	db	77	;'M'
   508  006166  20                 	db	32
   509  006167  20                 	db	32
   510  006168  42                 	db	66	;'B'
   511  006169  32                 	db	50	;'2'
   512  00616A  3A                 	db	58	;':'
   513  00616B  46                 	db	70	;'F'
   514  00616C  45                 	db	69	;'E'
   515  00616D  4E                 	db	78	;'N'
   516  00616E  43                 	db	67	;'C'
   517  00616F  45                 	db	69	;'E'
   518  006170  00                 	db	0
   519  006171                     STR_19:
   520  006171  73                 	db	115	;'s'
   521  006172  74                 	db	116	;'t'
   522  006173  72                 	db	114	;'r'
   523  006174  69                 	db	105	;'i'
   524  006175  6E                 	db	110	;'n'
   525  006176  67                 	db	103	;'g'
   526  006177  5F                 	db	95	;'_'
   527  006178  64                 	db	100	;'d'
   528  006179  61                 	db	97	;'a'
   529  00617A  64                 	db	100	;'d'
   530  00617B  6F                 	db	111	;'o'
   531  00617C  2E                 	db	46
   532  00617D  63                 	db	99	;'c'
   533  00617E  6F                 	db	111	;'o'
   534  00617F  6D                 	db	109	;'m'
   535  006180  62                 	db	98	;'b'
   536  006181  00                 	db	0
   537  006182                     STR_21:
   538  006182  73                 	db	115	;'s'
   539  006183  74                 	db	116	;'t'
   540  006184  72                 	db	114	;'r'
   541  006185  69                 	db	105	;'i'
   542  006186  6E                 	db	110	;'n'
   543  006187  67                 	db	103	;'g'
   544  006188  5F                 	db	95	;'_'
   545  006189  64                 	db	100	;'d'
   546  00618A  61                 	db	97	;'a'
   547  00618B  64                 	db	100	;'d'
   548  00618C  6F                 	db	111	;'o'
   549  00618D  2E                 	db	46
   550  00618E  64                 	db	100	;'d'
   551  00618F  74                 	db	116	;'t'
   552  006190  63                 	db	99	;'c'
   553  006191  00                 	db	0
   554  006192                     STR_17:
   555  006192  73                 	db	115	;'s'
   556  006193  74                 	db	116	;'t'
   557  006194  72                 	db	114	;'r'
   558  006195  69                 	db	105	;'i'
   559  006196  6E                 	db	110	;'n'
   560  006197  67                 	db	103	;'g'
   561  006198  5F                 	db	95	;'_'
   562  006199  64                 	db	100	;'d'
   563  00619A  61                 	db	97	;'a'
   564  00619B  64                 	db	100	;'d'
   565  00619C  6F                 	db	111	;'o'
   566  00619D  2E                 	db	46
   567  00619E  76                 	db	118	;'v'
   568  00619F  65                 	db	101	;'e'
   569  0061A0  6C                 	db	108	;'l'
   570  0061A1  00                 	db	0
   571  0061A2                     STR_18:
   572  0061A2  73                 	db	115	;'s'
   573  0061A3  74                 	db	116	;'t'
   574  0061A4  72                 	db	114	;'r'
   575  0061A5  69                 	db	105	;'i'
   576  0061A6  6E                 	db	110	;'n'
   577  0061A7  67                 	db	103	;'g'
   578  0061A8  5F                 	db	95	;'_'
   579  0061A9  64                 	db	100	;'d'
   580  0061AA  61                 	db	97	;'a'
   581  0061AB  64                 	db	100	;'d'
   582  0061AC  6F                 	db	111	;'o'
   583  0061AD  2E                 	db	46
   584  0061AE  72                 	db	114	;'r'
   585  0061AF  70                 	db	112	;'p'
   586  0061B0  6D                 	db	109	;'m'
   587  0061B1  00                 	db	0
   588  0061B2                     STR_2:
   589  0061B2  49                 	db	73	;'I'
   590  0061B3  6E                 	db	110	;'n'
   591  0061B4  73                 	db	115	;'s'
   592  0061B5  69                 	db	105	;'i'
   593  0061B6  72                 	db	114	;'r'
   594  0061B7  61                 	db	97	;'a'
   595  0061B8  20                 	db	32
   596  0061B9  6F                 	db	111	;'o'
   597  0061BA  20                 	db	32
   598  0061BB  43                 	db	67	;'C'
   599  0061BC  61                 	db	97	;'a'
   600  0061BD  72                 	db	114	;'r'
   601  0061BE  74                 	db	116	;'t'
   602  0061BF  61                 	db	97	;'a'
   603  0061C0  6F                 	db	111	;'o'
   604  0061C1  00                 	db	0
   605  0061C2  45                 	db	69	;'E'
   606  0061C3  72                 	db	114	;'r'
   607  0061C4  72                 	db	114	;'r'
   608  0061C5  6F                 	db	111	;'o'
   609  0061C6  20                 	db	32
   610  0061C7  61                 	db	97	;'a'
   611  0061C8  6F                 	db	111	;'o'
   612  0061C9  20                 	db	32
   613  0061CA  6D                 	db	109	;'m'
   614  0061CB  6F                 	db	111	;'o'
   615  0061CC  6E                 	db	110	;'n'
   616  0061CD  74                 	db	116	;'t'
   617  0061CE  61                 	db	97	;'a'
   618  0061CF  72                 	db	114	;'r'
   619  0061D0  00                 	db	0
   620  0061D1                     STR_32:
   621  0061D1  52                 	db	82	;'R'
   622  0061D2  45                 	db	69	;'E'
   623  0061D3  47                 	db	71	;'G'
   624  0061D4  49                 	db	73	;'I'
   625  0061D5  41                 	db	65	;'A'
   626  0061D6  4F                 	db	79	;'O'
   627  0061D7  20                 	db	32
   628  0061D8  4E                 	db	78	;'N'
   629  0061D9  45                 	db	69	;'E'
   630  0061DA  47                 	db	71	;'G'
   631  0061DB  41                 	db	65	;'A'
   632  0061DC  44                 	db	68	;'D'
   633  0061DD  41                 	db	65	;'A'
   634  0061DE  00                 	db	0
   635  0061DF  45                 	db	69	;'E'
   636  0061E0  72                 	db	114	;'r'
   637  0061E1  72                 	db	114	;'r'
   638  0061E2  6F                 	db	111	;'o'
   639  0061E3  20                 	db	32
   640  0061E4  61                 	db	97	;'a'
   641  0061E5  6F                 	db	111	;'o'
   642  0061E6  20                 	db	32
   643  0061E7  63                 	db	99	;'c'
   644  0061E8  72                 	db	114	;'r'
   645  0061E9  69                 	db	105	;'i'
   646  0061EA  61                 	db	97	;'a'
   647  0061EB  72                 	db	114	;'r'
   648  0061EC  00                 	db	0
   649  0061ED  65                 	db	101	;'e'
   650  0061EE  78                 	db	120	;'x'
   651  0061EF  74                 	db	116	;'t'
   652  0061F0  66                 	db	102	;'f'
   653  0061F1  65                 	db	101	;'e'
   654  0061F2  6E                 	db	110	;'n'
   655  0061F3  63                 	db	99	;'c'
   656  0061F4  65                 	db	101	;'e'
   657  0061F5  2E                 	db	46
   658  0061F6  74                 	db	116	;'t'
   659  0061F7  78                 	db	120	;'x'
   660  0061F8  74                 	db	116	;'t'
   661  0061F9  00                 	db	0
   662  0061FA                     STR_4:
   663  0061FA  4D                 	db	77	;'M'
   664  0061FB  4D                 	db	77	;'M'
   665  0061FC  43                 	db	67	;'C'
   666  0061FD  20                 	db	32
   667  0061FE  56                 	db	86	;'V'
   668  0061FF  65                 	db	101	;'e'
   669  006200  72                 	db	114	;'r'
   670  006201  2E                 	db	46
   671  006202  20                 	db	32
   672  006203  33                 	db	51	;'3'
   673  006204  00                 	db	0
   674  006205                     STR_1:
   675  006205  53                 	db	83	;'S'
   676  006206  65                 	db	101	;'e'
   677  006207  6D                 	db	109	;'m'
   678  006208  20                 	db	32
   679  006209  43                 	db	67	;'C'
   680  00620A  61                 	db	97	;'a'
   681  00620B  72                 	db	114	;'r'
   682  00620C  74                 	db	116	;'t'
   683  00620D  61                 	db	97	;'a'
   684  00620E  6F                 	db	111	;'o'
   685  00620F  00                 	db	0
   686  006210  56                 	db	86	;'V'
   687  006211  65                 	db	101	;'e'
   688  006212  72                 	db	114	;'r'
   689  006213  69                 	db	105	;'i'
   690  006214  66                 	db	102	;'f'
   691  006215  69                 	db	105	;'i'
   692  006216  71                 	db	113	;'q'
   693  006217  75                 	db	117	;'u'
   694  006218  65                 	db	101	;'e'
   695  006219  00                 	db	0
   696  00621A  6F                 	db	111	;'o'
   697  00621B  20                 	db	32
   698  00621C  61                 	db	97	;'a'
   699  00621D  72                 	db	114	;'r'
   700  00621E  71                 	db	113	;'q'
   701  00621F  75                 	db	117	;'u'
   702  006220  69                 	db	105	;'i'
   703  006221  76                 	db	118	;'v'
   704  006222  6F                 	db	111	;'o'
   705  006223  00                 	db	0
   706  006224                     STR_3:
   707  006224  53                 	db	83	;'S'
   708  006225  44                 	db	68	;'D'
   709  006226  20                 	db	32
   710  006227  56                 	db	86	;'V'
   711  006228  45                 	db	69	;'E'
   712  006229  52                 	db	82	;'R'
   713  00622A  2E                 	db	46
   714  00622B  20                 	db	32
   715  00622C  31                 	db	49	;'1'
   716  00622D  00                 	db	0
   717  00622E  6F                 	db	111	;'o'
   718  00622F  20                 	db	32
   719  006230  63                 	db	99	;'c'
   720  006231  61                 	db	97	;'a'
   721  006232  72                 	db	114	;'r'
   722  006233  74                 	db	116	;'t'
   723  006234  61                 	db	97	;'a'
   724  006235  6F                 	db	111	;'o'
   725  006236  00                 	db	0
   726  006237                     STR_33:
   727  006237  4C                 	db	76	;'L'
   728  006238  4F                 	db	79	;'O'
   729  006239  2D                 	db	45
   730  00623A  4C                 	db	76	;'L'
   731  00623B  54                 	db	84	;'T'
   732  00623C  3A                 	db	58	;':'
   733  00623D  00                 	db	0
   734  00623E                     STR_26:
   735  00623E  44                 	db	68	;'D'
   736  00623F  45                 	db	69	;'E'
   737  006240  4E                 	db	78	;'N'
   738  006241  54                 	db	84	;'T'
   739  006242  52                 	db	82	;'R'
   740  006243  4F                 	db	79	;'O'
   741  006244  00                 	db	0
   742  006245                     STR_13:
   743  006245  74                 	db	116	;'t'
   744  006246  65                 	db	101	;'e'
   745  006247  73                 	db	115	;'s'
   746  006248  74                 	db	116	;'t'
   747  006249  65                 	db	101	;'e'
   748  00624A  00                 	db	0
   749  00624B                     STR_6:
   750  00624B  47                 	db	71	;'G'
   751  00624C  50                 	db	80	;'P'
   752  00624D  47                 	db	71	;'G'
   753  00624E  47                 	db	71	;'G'
   754  00624F  41                 	db	65	;'A'
   755  006250  00                 	db	0
   756  006251                     STR_5:
   757  006251  47                 	db	71	;'G'
   758  006252  50                 	db	80	;'P'
   759  006253  52                 	db	82	;'R'
   760  006254  4D                 	db	77	;'M'
   761  006255  43                 	db	67	;'C'
   762  006256  00                 	db	0
   763  006257                     STR_28:
   764  006257  56                 	db	86	;'V'
   765  006258  45                 	db	69	;'E'
   766  006259  4C                 	db	76	;'L'
   767  00625A  3A                 	db	58	;':'
   768  00625B  00                 	db	0
   769  00625C                     STR_27:
   770  00625C  52                 	db	82	;'R'
   771  00625D  50                 	db	80	;'P'
   772  00625E  4D                 	db	77	;'M'
   773  00625F  3A                 	db	58	;':'
   774  006260  00                 	db	0
   775  006261                     STR_25:
   776  006261  46                 	db	70	;'F'
   777  006262  4F                 	db	79	;'O'
   778  006263  52                 	db	82	;'R'
   779  006264  41                 	db	65	;'A'
   780  006265  00                 	db	0
   781  006266                     STR_15:
   782  006266  2E                 	db	46
   783  006267  74                 	db	116	;'t'
   784  006268  6C                 	db	108	;'l'
   785  006269  6D                 	db	109	;'m'
   786  00626A  00                 	db	0
   787  00626B                     STR_30:
   788  00626B  6C                 	db	108	;'l'
   789  00626C  6F                 	db	111	;'o'
   790  00626D  3A                 	db	58	;':'
   791  00626E  00                 	db	0
   792  00626F                     STR_29:
   793  00626F  6C                 	db	108	;'l'
   794  006270  74                 	db	116	;'t'
   795  006271  3A                 	db	58	;':'
   796  006272  00                 	db	0
   797  006273                     STR_23:
   798  006273  46                 	db	70	;'F'
   799  006274  41                 	db	65	;'A'
   800  006275  54                 	db	84	;'T'
   801  006276  00                 	db	0
   802  006277  0D                 	db	13
   803  006278  0A                 	db	10
   804  006279  00                 	db	0
   805  00627A                     STR_14:
   806  00627A  32                 	db	50	;'2'
   807  00627B  33                 	db	51	;'3'
   808  00627C  00                 	db	0
   809  00627D                     STR_34:
   810  00627D  2D                 	db	45
   811  00627E  00                 	db	0
   812  00627F  00                 	db	0	; dummy byte at the end
   813  0000                     
   814                           ; #config settings
   815                           
   816                           	psect	cinit
   817  0040B8                     __pcinit:
   818                           	callstack 0
   819  0040B8                     start_initialization:
   820                           	callstack 0
   821  0040B8                     __initialization:
   822                           	callstack 0
   823                           
   824                           ; Initialize objects allocated to BANK2 (7 bytes)
   825                           ; load TBLPTR registers with __pidataBANK2
   826  0040B8  0EF9               	movlw	low __pidataBANK2
   827  0040BA  6EF6               	movwf	tblptrl,c
   828  0040BC  0E54               	movlw	high __pidataBANK2
   829  0040BE  6EF7               	movwf	tblptrh,c
   830  0040C0  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   831  0040C2  6EF8               	movwf	tblptru,c
   832  0040C4  EE02  F0C6         	lfsr	0,__pdataBANK2
   833  0040C8  EE10 F007          	lfsr	1,7
   834  0040CC                     copy_data0:
   835  0040CC  0009               	tblrd		*+
   836  0040CE  CFF5 FFEE          	movff	tablat,postinc0
   837  0040D2  50E5               	movf	postdec1,w,c
   838  0040D4  50E1               	movf	fsr1l,w,c
   839  0040D6  E1FA               	bnz	copy_data0
   840                           
   841                           ; Initialize objects allocated to BANK1 (7 bytes)
   842                           ; load TBLPTR registers with __pidataBANK1
   843  0040D8  0EF2               	movlw	low __pidataBANK1
   844  0040DA  6EF6               	movwf	tblptrl,c
   845  0040DC  0E54               	movlw	high __pidataBANK1
   846  0040DE  6EF7               	movwf	tblptrh,c
   847  0040E0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   848  0040E2  6EF8               	movwf	tblptru,c
   849  0040E4  EE01  F0F6         	lfsr	0,__pdataBANK1
   850  0040E8  EE10 F007          	lfsr	1,7
   851  0040EC                     copy_data1:
   852  0040EC  0009               	tblrd		*+
   853  0040EE  CFF5 FFEE          	movff	tablat,postinc0
   854  0040F2  50E5               	movf	postdec1,w,c
   855  0040F4  50E1               	movf	fsr1l,w,c
   856  0040F6  E1FA               	bnz	copy_data1
   857                           
   858                           ; Initialize objects allocated to COMRAM (1 bytes)
   859                           ; load TBLPTR registers with __pidataCOMRAM
   860  0040F8  0E00               	movlw	low __pidataCOMRAM
   861  0040FA  6EF6               	movwf	tblptrl,c
   862  0040FC  0E55               	movlw	high __pidataCOMRAM
   863  0040FE  6EF7               	movwf	tblptrh,c
   864  004100  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   865  004102  6EF8               	movwf	tblptru,c
   866  004104  0009               	tblrd		*+	;fetch initializer
   867  004106  CFF5 F046          	movff	tablat,__pdataCOMRAM
   868                           
   869                           ; Clear objects allocated to BIGRAM (544 bytes)
   870  00410A  EE02  F0CD         	lfsr	0,__pbssBIGRAM
   871  00410E  EE12 F020          	lfsr	1,544
   872  004112                     clear_0:
   873  004112  6AEE               	clrf	postinc0,c
   874  004114  50E5               	movf	postdec1,w,c
   875  004116  50E1               	movf	fsr1l,w,c
   876  004118  E1FC               	bnz	clear_0
   877  00411A  50E2               	movf	fsr1h,w,c
   878  00411C  E1FA               	bnz	clear_0
   879                           
   880                           ; Clear objects allocated to BANK2 (164 bytes)
   881  00411E  EE02  F000         	lfsr	0,__pbssBANK2
   882  004122  0EA4               	movlw	164
   883  004124                     clear_1:
   884  004124  6AEE               	clrf	postinc0,c
   885  004126  06E8               	decf	wreg,f,c
   886  004128  E1FD               	bnz	clear_1
   887                           
   888                           ; Clear objects allocated to BANK1 (246 bytes)
   889  00412A  EE01  F000         	lfsr	0,__pbssBANK1
   890  00412E  0EF6               	movlw	246
   891  004130                     clear_2:
   892  004130  6AEE               	clrf	postinc0,c
   893  004132  06E8               	decf	wreg,f,c
   894  004134  E1FD               	bnz	clear_2
   895                           
   896                           ; Clear objects allocated to BANK0 (6 bytes)
   897  004136  0100               	movlb	0
   898  004138  6BFC               	clrf	(__pbssBANK0+5)& (0+255),b
   899  00413A  6BFB               	clrf	(__pbssBANK0+4)& (0+255),b
   900  00413C  6BFA               	clrf	(__pbssBANK0+3)& (0+255),b
   901  00413E  6BF9               	clrf	(__pbssBANK0+2)& (0+255),b
   902  004140  6BF8               	clrf	(__pbssBANK0+1)& (0+255),b
   903  004142  6BF7               	clrf	__pbssBANK0& (0+255),b
   904                           
   905                           ; Clear objects allocated to COMRAM (20 bytes)
   906  004144  EE00  F032         	lfsr	0,__pbssCOMRAM
   907  004148  0E14               	movlw	20
   908  00414A                     clear_3:
   909  00414A  6AEE               	clrf	postinc0,c
   910  00414C  06E8               	decf	wreg,f,c
   911  00414E  E1FD               	bnz	clear_3
   912  004150                     end_of_initialization:
   913                           	callstack 0
   914  004150                     __end_of__initialization:
   915                           	callstack 0
   916  004150  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   917  004152  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   918  004154  0E00               	movlw	low (__Lmediumconst shr (0+16))
   919  004156  6EF8               	movwf	tblptru,c
   920  004158  0100               	movlb	0
   921  00415A  EF8A  F028         	goto	_main	;jump to C main() function
   922                           
   923                           	psect	bssCOMRAM
   924  000032                     __pbssCOMRAM:
   925                           	callstack 0
   926  000032                     _fence_flag:
   927                           	callstack 0
   928  000032                     	ds	3
   929  000035                     _time_atualizacao:
   930                           	callstack 0
   931  000035                     	ds	2
   932  000037                     _time_sd:
   933                           	callstack 0
   934  000037                     	ds	2
   935  000039                     _FatFs:
   936                           	callstack 0
   937  000039                     	ds	2
   938  00003B                     troca_de_tela@last_state:
   939                           	callstack 0
   940  00003B                     	ds	1
   941  00003C                     troca_de_tela@state:
   942                           	callstack 0
   943  00003C                     	ds	1
   944  00003D                     _tarefa_em_execucao:
   945                           	callstack 0
   946  00003D                     	ds	1
   947  00003E                     _sinaliza_int_timer:
   948                           	callstack 0
   949  00003E                     	ds	1
   950  00003F                     _data_uart_recebe:
   951                           	callstack 0
   952  00003F                     	ds	1
   953  000040                     escrita_sdcard@f_fix:
   954                           	callstack 0
   955  000040                     	ds	1
   956  000041                     _data_hoje:
   957                           	callstack 0
   958  000041                     	ds	1
   959  000042                     	ds	1
   960  000043                     _Term:
   961                           	callstack 0
   962  000043                     	ds	1
   963  000044                     _SentenceType:
   964                           	callstack 0
   965  000044                     	ds	1
   966  000045                     _char_number:
   967                           	callstack 0
   968  000045                     	ds	1
   969                           
   970                           	psect	dataCOMRAM
   971  000046                     __pdataCOMRAM:
   972                           	callstack 0
   973  000046                     	ds	1
   974                           
   975                           	psect	bssBANK0
   976  0000F7                     __pbssBANK0:
   977                           	callstack 0
   978  0000F7                     _point_buff_gps_long:
   979                           	callstack 0
   980  0000F7                     	ds	2
   981  0000F9                     _point_buff_gps_lat:
   982                           	callstack 0
   983  0000F9                     	ds	2
   984  0000FB                     _flag_anomalia:
   985                           	callstack 0
   986  0000FB                     	ds	1
   987  0000FC                     _estado:
   988                           	callstack 0
   989  0000FC                     	ds	1
   990                           
   991                           	psect	bssBANK1
   992  000100                     __pbssBANK1:
   993                           	callstack 0
   994  000100                     _tempo_tarefa:
   995                           	callstack 0
   996  000100                     	ds	8
   997  000108                     _tempo_backup:
   998                           	callstack 0
   999  000108                     	ds	8
  1000  000110                     _p_tarefas:
  1001                           	callstack 0
  1002  000110                     	ds	8
  1003  000118                     _rawCourse:
  1004                           	callstack 0
  1005  000118                     	ds	6
  1006  00011E                     _rawSpeed:
  1007                           	callstack 0
  1008  00011E                     	ds	6
  1009  000124                     _gps_flag:
  1010                           	callstack 0
  1011  000124                     	ds	5
  1012  000129                     _rawSatellites:
  1013                           	callstack 0
  1014  000129                     	ds	3
  1015  00012C                     _time_recovery:
  1016                           	callstack 0
  1017  00012C                     	ds	2
  1018  00012E                     _timeout_tarefa:
  1019                           	callstack 0
  1020  00012E                     	ds	2
  1021  000130                     _fsid:
  1022                           	callstack 0
  1023  000130                     	ds	2
  1024  000132                     _GPGGA_ok:
  1025                           	callstack 0
  1026  000132                     	ds	2
  1027  000134                     _GPRMC_ok:
  1028                           	callstack 0
  1029  000134                     	ds	2
  1030  000136                     _data_buff:
  1031                           	callstack 0
  1032  000136                     	ds	2
  1033  000138                     _poligono_ext:
  1034                           	callstack 0
  1035  000138                     	ds	124
  1036  0001B4                     _fil:
  1037                           	callstack 0
  1038  0001B4                     	ds	28
  1039  0001D0                     _buffer:
  1040                           	callstack 0
  1041  0001D0                     	ds	12
  1042  0001DC                     _rawTime:
  1043                           	callstack 0
  1044  0001DC                     	ds	11
  1045  0001E7                     _rawDate:
  1046                           	callstack 0
  1047  0001E7                     	ds	7
  1048  0001EE                     _sentence:
  1049                           	callstack 0
  1050  0001EE                     	ds	6
  1051  0001F4                     _rawFix:
  1052                           	callstack 0
  1053  0001F4                     	ds	2
  1054                           
  1055                           	psect	dataBANK1
  1056  0001F6                     __pdataBANK1:
  1057                           	callstack 0
  1058  0001F6                     escreve_inteiro_lcd@F3223:
  1059                           	callstack 0
  1060  0001F6                     	ds	7
  1061                           
  1062                           	psect	bssBANK2
  1063  000200                     __pbssBANK2:
  1064                           	callstack 0
  1065  000200                     _rawAltitude:
  1066                           	callstack 0
  1067  000200                     	ds	7
  1068  000207                     _string_dado:
  1069                           	callstack 0
  1070  000207                     	ds	73
  1071  000250                     _dado_arquivo:
  1072                           	callstack 0
  1073  000250                     	ds	20
  1074  000264                     _filename:
  1075                           	callstack 0
  1076  000264                     	ds	15
  1077  000273                     _rawLongitude:
  1078                           	callstack 0
  1079  000273                     	ds	13
  1080  000280                     _rawLatitude:
  1081                           	callstack 0
  1082  000280                     	ds	13
  1083  00028D                     _temp_buff_long:
  1084                           	callstack 0
  1085  00028D                     	ds	12
  1086  000299                     _temp_buff_lat:
  1087                           	callstack 0
  1088  000299                     	ds	11
  1089                           
  1090                           	psect	dataBANK2
  1091  0002C6                     __pdataBANK2:
  1092                           	callstack 0
  1093  0002C6                     	ds	7
  1094                           
  1095                           	psect	bssBIGRAM
  1096  0002CD                     __pbssBIGRAM:
  1097                           	callstack 0
  1098  0002CD                     _fs:
  1099                           	callstack 0
  1100  0002CD                     	ds	544
  1101                           
  1102                           	psect	cstackBANK2
  1103  0002A4                     __pcstackBANK2:
  1104                           	callstack 0
  1105  0002A4                     fprintf@s:
  1106                           	callstack 0
  1107                           
  1108                           ; 16 bytes @ 0x0
  1109  0002A4                     	ds	16
  1110  0002B4                     fprintf@res:
  1111                           	callstack 0
  1112                           
  1113                           ; 2 bytes @ 0x10
  1114  0002B4                     	ds	2
  1115  0002B6                     _fprintf$2143:
  1116                           	callstack 0
  1117                           
  1118                           ; 2 bytes @ 0x12
  1119  0002B6                     	ds	2
  1120  0002B8                     fprintf@w:
  1121                           	callstack 0
  1122                           
  1123                           ; 2 bytes @ 0x14
  1124  0002B8                     	ds	2
  1125  0002BA                     fprintf@f:
  1126                           	callstack 0
  1127                           
  1128                           ; 1 bytes @ 0x16
  1129  0002BA                     	ds	1
  1130  0002BB                     fprintf@r:
  1131                           	callstack 0
  1132                           
  1133                           ; 1 bytes @ 0x17
  1134  0002BB                     	ds	1
  1135  0002BC                     fprintf@val:
  1136                           	callstack 0
  1137                           
  1138                           ; 4 bytes @ 0x18
  1139  0002BC                     	ds	4
  1140  0002C0                     fprintf@arp:
  1141                           	callstack 0
  1142                           
  1143                           ; 1 bytes @ 0x1C
  1144  0002C0                     	ds	1
  1145  0002C1                     fprintf@cc:
  1146                           	callstack 0
  1147                           
  1148                           ; 2 bytes @ 0x1D
  1149  0002C1                     	ds	2
  1150  0002C3                     fprintf@i:
  1151                           	callstack 0
  1152                           
  1153                           ; 2 bytes @ 0x1F
  1154  0002C3                     	ds	2
  1155  0002C5                     fprintf@c:
  1156                           	callstack 0
  1157                           
  1158                           ; 1 bytes @ 0x21
  1159  0002C5                     	ds	1
  1160                           
  1161                           	psect	cstackBANK0
  1162  000060                     __pcstackBANK0:
  1163                           	callstack 0
  1164  000060                     ??_get_fattime:
  1165  000060                     ??_configura_baudrate_uart:
  1166  000060                     escreve_inteiro_lcd@texto:
  1167                           	callstack 0
  1168  000060                     diff_calc@fence:
  1169                           	callstack 0
  1170  000060                     mensagem_inicial@msg_linha_um:
  1171                           	callstack 0
  1172                           
  1173                           ; 17 bytes @ 0x0
  1174  000060                     	ds	1
  1175  000061                     sdc_disk_read@start_add:
  1176                           	callstack 0
  1177                           
  1178                           ; 4 bytes @ 0x1
  1179  000061                     	ds	1
  1180  000062                     sdc_disk_initialize@stat:
  1181                           	callstack 0
  1182  000062                     sdc_disk_write@count1:
  1183                           	callstack 0
  1184                           
  1185                           ; 2 bytes @ 0x2
  1186  000062                     	ds	1
  1187  000063                     sdc_disk_initialize@count1:
  1188                           	callstack 0
  1189                           
  1190                           ; 2 bytes @ 0x3
  1191  000063                     	ds	1
  1192  000064                     sdc_disk_write@res:
  1193                           	callstack 0
  1194                           
  1195                           ; 1 bytes @ 0x4
  1196  000064                     	ds	1
  1197  000065                     sdc_disk_initialize@crc_number:
  1198                           	callstack 0
  1199  000065                     sdc_disk_read@length:
  1200                           	callstack 0
  1201  000065                     sdc_disk_write@j:
  1202                           	callstack 0
  1203                           
  1204                           ; 2 bytes @ 0x5
  1205  000065                     	ds	2
  1206  000067                     sdc_disk_initialize@buff_i:
  1207                           	callstack 0
  1208  000067                     sdc_disk_read@buff:
  1209                           	callstack 0
  1210  000067                     sdc_disk_write@buff:
  1211                           	callstack 0
  1212                           
  1213                           ; 1 bytes @ 0x7
  1214  000067                     	ds	1
  1215  000068                     sdc_disk_initialize@ocr:
  1216                           	callstack 0
  1217  000068                     disk_read@buff:
  1218                           	callstack 0
  1219  000068                     disk_write@buff:
  1220                           	callstack 0
  1221                           
  1222                           ; 2 bytes @ 0x8
  1223  000068                     	ds	1
  1224  000069                     sdc_disk_initialize@count2:
  1225                           	callstack 0
  1226                           
  1227                           ; 2 bytes @ 0x9
  1228  000069                     	ds	1
  1229  00006A                     disk_read@sector:
  1230                           	callstack 0
  1231  00006A                     disk_write@sector:
  1232                           	callstack 0
  1233                           
  1234                           ; 4 bytes @ 0xA
  1235  00006A                     	ds	1
  1236  00006B                     sdc_disk_initialize@buff:
  1237                           	callstack 0
  1238                           
  1239                           ; 1 bytes @ 0xB
  1240  00006B                     	ds	1
  1241  00006C                     diff_calc@point:
  1242                           	callstack 0
  1243                           
  1244                           ; 12 bytes @ 0xC
  1245  00006C                     	ds	2
  1246  00006E                     disk_read@count:
  1247                           	callstack 0
  1248  00006E                     disk_write@count:
  1249                           	callstack 0
  1250                           
  1251                           ; 1 bytes @ 0xE
  1252  00006E                     	ds	1
  1253  00006F                     disk_read@pdrv:
  1254                           	callstack 0
  1255  00006F                     disk_write@pdrv:
  1256                           	callstack 0
  1257                           
  1258                           ; 1 bytes @ 0xF
  1259  00006F                     	ds	1
  1260  000070                     disk_read@result:
  1261                           	callstack 0
  1262  000070                     disk_write@result:
  1263                           	callstack 0
  1264                           
  1265                           ; 2 bytes @ 0x10
  1266  000070                     	ds	1
  1267  000071                     mensagem_inicial@msg_dois:
  1268                           	callstack 0
  1269                           
  1270                           ; 17 bytes @ 0x11
  1271  000071                     	ds	1
  1272  000072                     disk_read@res:
  1273                           	callstack 0
  1274  000072                     disk_write@res:
  1275                           	callstack 0
  1276                           
  1277                           ; 1 bytes @ 0x12
  1278  000072                     	ds	1
  1279  000073                     move_window@sector:
  1280                           	callstack 0
  1281  000073                     check_fs@sect:
  1282                           	callstack 0
  1283                           
  1284                           ; 4 bytes @ 0x13
  1285  000073                     	ds	4
  1286  000077                     ??_move_window:
  1287  000077                     
  1288                           ; 1 bytes @ 0x17
  1289  000077                     	ds	2
  1290  000079                     check_fs@fs:
  1291                           	callstack 0
  1292                           
  1293                           ; 2 bytes @ 0x19
  1294  000079                     	ds	2
  1295  00007B                     auto_mount@path:
  1296                           	callstack 0
  1297                           
  1298                           ; 1 bytes @ 0x1B
  1299  00007B                     	ds	1
  1300  00007C                     auto_mount@chk_wp:
  1301                           	callstack 0
  1302                           
  1303                           ; 1 bytes @ 0x1C
  1304  00007C                     	ds	1
  1305  00007D                     ??_auto_mount:
  1306                           
  1307                           ; 1 bytes @ 0x1D
  1308  00007D                     	ds	4
  1309  000081                     move_window@n:
  1310                           	callstack 0
  1311                           
  1312                           ; 1 bytes @ 0x21
  1313  000081                     	ds	1
  1314  000082                     move_window@wsect:
  1315                           	callstack 0
  1316                           
  1317                           ; 4 bytes @ 0x22
  1318  000082                     	ds	4
  1319  000086                     move_window@fs:
  1320                           	callstack 0
  1321                           
  1322                           ; 2 bytes @ 0x26
  1323  000086                     	ds	2
  1324  000088                     ?_get_cluster:
  1325                           	callstack 0
  1326  000088                     sync@fs:
  1327                           	callstack 0
  1328  000088                     get_cluster@clust:
  1329                           	callstack 0
  1330  000088                     put_cluster@clust:
  1331                           	callstack 0
  1332                           
  1333                           ; 2 bytes @ 0x28
  1334  000088                     	ds	2
  1335  00008A                     ??_get_cluster:
  1336  00008A                     put_cluster@val:
  1337                           	callstack 0
  1338  00008A                     f_sync@fp:
  1339                           	callstack 0
  1340                           
  1341                           ; 2 bytes @ 0x2A
  1342  00008A                     	ds	2
  1343  00008C                     ??_put_cluster:
  1344  00008C                     f_sync@tim:
  1345                           	callstack 0
  1346                           
  1347                           ; 4 bytes @ 0x2C
  1348  00008C                     	ds	4
  1349  000090                     f_sync@res:
  1350                           	callstack 0
  1351                           
  1352                           ; 1 bytes @ 0x30
  1353  000090                     	ds	1
  1354  000091                     f_sync@dir:
  1355                           	callstack 0
  1356                           
  1357                           ; 2 bytes @ 0x31
  1358  000091                     	ds	1
  1359  000092                     _put_cluster$1540:
  1360                           	callstack 0
  1361                           
  1362                           ; 2 bytes @ 0x32
  1363  000092                     	ds	1
  1364  000093                     get_cluster@wc:
  1365                           	callstack 0
  1366  000093                     f_close@fp:
  1367                           	callstack 0
  1368  000093                     auto_mount@maxclust:
  1369                           	callstack 0
  1370                           
  1371                           ; 4 bytes @ 0x33
  1372  000093                     	ds	1
  1373  000094                     _put_cluster$1541:
  1374                           	callstack 0
  1375                           
  1376                           ; 2 bytes @ 0x34
  1377  000094                     	ds	1
  1378  000095                     get_cluster@fatsect:
  1379                           	callstack 0
  1380                           
  1381                           ; 4 bytes @ 0x35
  1382  000095                     	ds	1
  1383  000096                     put_cluster@fatsect:
  1384                           	callstack 0
  1385                           
  1386                           ; 4 bytes @ 0x36
  1387  000096                     	ds	1
  1388  000097                     auto_mount@bootsect:
  1389                           	callstack 0
  1390                           
  1391                           ; 4 bytes @ 0x37
  1392  000097                     	ds	2
  1393  000099                     get_cluster@bc:
  1394                           	callstack 0
  1395                           
  1396                           ; 2 bytes @ 0x39
  1397  000099                     	ds	1
  1398  00009A                     put_cluster@bc:
  1399                           	callstack 0
  1400                           
  1401                           ; 2 bytes @ 0x3A
  1402  00009A                     	ds	1
  1403  00009B                     get_cluster@fs:
  1404                           	callstack 0
  1405  00009B                     auto_mount@totalsect:
  1406                           	callstack 0
  1407                           
  1408                           ; 4 bytes @ 0x3B
  1409  00009B                     	ds	1
  1410  00009C                     put_cluster@p:
  1411                           	callstack 0
  1412                           
  1413                           ; 2 bytes @ 0x3C
  1414  00009C                     	ds	1
  1415  00009D                     ??_next_dir_entry:
  1416                           
  1417                           ; 1 bytes @ 0x3D
  1418  00009D                     	ds	1
  1419  00009E                     put_cluster@fs:
  1420                           	callstack 0
  1421                           
  1422                           ; 2 bytes @ 0x3E
  1423  00009E                     	ds	1
  1424  00009F                     auto_mount@p:
  1425                           	callstack 0
  1426                           
  1427                           ; 2 bytes @ 0x3F
  1428  00009F                     	ds	1
  1429  0000A0                     ?_create_chain:
  1430                           	callstack 0
  1431  0000A0                     remove_chain@clust:
  1432                           	callstack 0
  1433  0000A0                     create_chain@clust:
  1434                           	callstack 0
  1435                           
  1436                           ; 2 bytes @ 0x40
  1437  0000A0                     	ds	1
  1438  0000A1                     auto_mount@fmt:
  1439                           	callstack 0
  1440                           
  1441                           ; 1 bytes @ 0x41
  1442  0000A1                     	ds	1
  1443  0000A2                     auto_mount@stat:
  1444                           	callstack 0
  1445                           
  1446                           ; 1 bytes @ 0x42
  1447  0000A2                     	ds	1
  1448  0000A3                     auto_mount@fatsize:
  1449                           	callstack 0
  1450                           
  1451                           ; 4 bytes @ 0x43
  1452  0000A3                     	ds	1
  1453  0000A4                     remove_chain@nxt:
  1454                           	callstack 0
  1455  0000A4                     create_chain@mcl:
  1456                           	callstack 0
  1457  0000A4                     next_dir_entry@clust:
  1458                           	callstack 0
  1459                           
  1460                           ; 2 bytes @ 0x44
  1461  0000A4                     	ds	2
  1462  0000A6                     remove_chain@fs:
  1463                           	callstack 0
  1464  0000A6                     create_chain@fs:
  1465                           	callstack 0
  1466  0000A6                     next_dir_entry@idx:
  1467                           	callstack 0
  1468                           
  1469                           ; 2 bytes @ 0x46
  1470  0000A6                     	ds	1
  1471  0000A7                     auto_mount@fs:
  1472                           	callstack 0
  1473                           
  1474                           ; 2 bytes @ 0x47
  1475  0000A7                     	ds	1
  1476  0000A8                     trace_path@dj:
  1477                           	callstack 0
  1478  0000A8                     create_chain@cstat:
  1479                           	callstack 0
  1480                           
  1481                           ; 2 bytes @ 0x48
  1482  0000A8                     	ds	1
  1483  0000A9                     trace_path@fn:
  1484                           	callstack 0
  1485                           
  1486                           ; 1 bytes @ 0x49
  1487  0000A9                     	ds	1
  1488  0000AA                     create_chain@scl:
  1489                           	callstack 0
  1490  0000AA                     trace_path@path:
  1491                           	callstack 0
  1492                           
  1493                           ; 2 bytes @ 0x4A
  1494  0000AA                     	ds	2
  1495  0000AC                     trace_path@dir:
  1496                           	callstack 0
  1497  0000AC                     create_chain@ncl:
  1498                           	callstack 0
  1499                           
  1500                           ; 2 bytes @ 0x4C
  1501  0000AC                     	ds	1
  1502  0000AD                     ??_trace_path:
  1503                           
  1504                           ; 1 bytes @ 0x4D
  1505  0000AD                     	ds	1
  1506  0000AE                     reserve_direntry@dj:
  1507                           	callstack 0
  1508  0000AE                     f_write@fp:
  1509                           	callstack 0
  1510  0000AE                     f_lseek@fp:
  1511                           	callstack 0
  1512                           
  1513                           ; 2 bytes @ 0x4E
  1514  0000AE                     	ds	1
  1515  0000AF                     reserve_direntry@dir:
  1516                           	callstack 0
  1517                           
  1518                           ; 1 bytes @ 0x4F
  1519  0000AF                     	ds	1
  1520  0000B0                     ??_reserve_direntry:
  1521  0000B0                     f_write@buff:
  1522                           	callstack 0
  1523  0000B0                     f_lseek@ofs:
  1524                           	callstack 0
  1525                           
  1526                           ; 4 bytes @ 0x50
  1527  0000B0                     	ds	1
  1528  0000B1                     _trace_path$1697:
  1529                           	callstack 0
  1530  0000B1                     f_write@btw:
  1531                           	callstack 0
  1532                           
  1533                           ; 2 bytes @ 0x51
  1534  0000B1                     	ds	2
  1535  0000B3                     f_write@bw:
  1536                           	callstack 0
  1537  0000B3                     _trace_path$1699:
  1538                           	callstack 0
  1539                           
  1540                           ; 2 bytes @ 0x53
  1541  0000B3                     	ds	1
  1542  0000B4                     ??_f_lseek:
  1543  0000B4                     ??_f_write:
  1544  0000B4                     reserve_direntry@sector:
  1545                           	callstack 0
  1546                           
  1547                           ; 4 bytes @ 0x54
  1548  0000B4                     	ds	1
  1549  0000B5                     trace_path@fs:
  1550                           	callstack 0
  1551                           
  1552                           ; 2 bytes @ 0x55
  1553  0000B5                     	ds	2
  1554  0000B7                     trace_path@clust:
  1555                           	callstack 0
  1556                           
  1557                           ; 2 bytes @ 0x57
  1558  0000B7                     	ds	1
  1559  0000B8                     reserve_direntry@n:
  1560                           	callstack 0
  1561                           
  1562                           ; 1 bytes @ 0x58
  1563  0000B8                     	ds	1
  1564  0000B9                     trace_path@ds:
  1565                           	callstack 0
  1566  0000B9                     reserve_direntry@dptr:
  1567                           	callstack 0
  1568                           
  1569                           ; 2 bytes @ 0x59
  1570  0000B9                     	ds	1
  1571  0000BA                     trace_path@dptr:
  1572                           	callstack 0
  1573                           
  1574                           ; 2 bytes @ 0x5A
  1575  0000BA                     	ds	1
  1576  0000BB                     reserve_direntry@c:
  1577                           	callstack 0
  1578                           
  1579                           ; 1 bytes @ 0x5B
  1580  0000BB                     	ds	1
  1581  0000BC                     reserve_direntry@clust:
  1582                           	callstack 0
  1583                           
  1584                           ; 2 bytes @ 0x5C
  1585  0000BC                     	ds	2
  1586  0000BE                     reserve_direntry@fs:
  1587                           	callstack 0
  1588                           
  1589                           ; 2 bytes @ 0x5E
  1590  0000BE                     	ds	2
  1591  0000C0                     f_write@res:
  1592                           	callstack 0
  1593  0000C0                     f_open@fp:
  1594                           	callstack 0
  1595                           
  1596                           ; 2 bytes @ 0x60
  1597  0000C0                     	ds	1
  1598  0000C1                     f_write@wbuff:
  1599                           	callstack 0
  1600                           
  1601                           ; 1 bytes @ 0x61
  1602  0000C1                     	ds	1
  1603  0000C2                     f_open@path:
  1604                           	callstack 0
  1605  0000C2                     f_write@sect:
  1606                           	callstack 0
  1607                           
  1608                           ; 4 bytes @ 0x62
  1609  0000C2                     	ds	2
  1610  0000C4                     f_open@mode:
  1611                           	callstack 0
  1612  0000C4                     f_lseek@res:
  1613                           	callstack 0
  1614                           
  1615                           ; 1 bytes @ 0x64
  1616  0000C4                     	ds	1
  1617  0000C5                     ??_f_open:
  1618  0000C5                     f_lseek@ifptr:
  1619                           	callstack 0
  1620                           
  1621                           ; 4 bytes @ 0x65
  1622  0000C5                     	ds	1
  1623  0000C6                     f_write@cc:
  1624                           	callstack 0
  1625                           
  1626                           ; 2 bytes @ 0x66
  1627  0000C6                     	ds	2
  1628  0000C8                     f_write@clust:
  1629                           	callstack 0
  1630                           
  1631                           ; 2 bytes @ 0x68
  1632  0000C8                     	ds	1
  1633  0000C9                     f_lseek@csize:
  1634                           	callstack 0
  1635  0000C9                     f_open@fn:
  1636                           	callstack 0
  1637                           
  1638                           ; 12 bytes @ 0x69
  1639  0000C9                     	ds	1
  1640  0000CA                     f_write@wcnt:
  1641                           	callstack 0
  1642                           
  1643                           ; 2 bytes @ 0x6A
  1644  0000CA                     	ds	2
  1645  0000CC                     ?_fputc:
  1646                           	callstack 0
  1647  0000CC                     fputc@chr:
  1648                           	callstack 0
  1649                           
  1650                           ; 2 bytes @ 0x6C
  1651  0000CC                     	ds	1
  1652  0000CD                     f_lseek@clust:
  1653                           	callstack 0
  1654                           
  1655                           ; 2 bytes @ 0x6D
  1656  0000CD                     	ds	1
  1657  0000CE                     fputc@fil:
  1658                           	callstack 0
  1659                           
  1660                           ; 2 bytes @ 0x6E
  1661  0000CE                     	ds	2
  1662  0000D0                     fputc@c:
  1663                           	callstack 0
  1664                           
  1665                           ; 1 bytes @ 0x70
  1666  0000D0                     	ds	1
  1667  0000D1                     fputc@bw:
  1668                           	callstack 0
  1669                           
  1670                           ; 2 bytes @ 0x71
  1671  0000D1                     	ds	2
  1672  0000D3                     ?_fputs:
  1673                           	callstack 0
  1674  0000D3                     fputs@str:
  1675                           	callstack 0
  1676                           
  1677                           ; 2 bytes @ 0x73
  1678  0000D3                     	ds	2
  1679  0000D5                     f_open@rs:
  1680                           	callstack 0
  1681  0000D5                     fputs@fil:
  1682                           	callstack 0
  1683                           
  1684                           ; 2 bytes @ 0x75
  1685  0000D5                     	ds	2
  1686  0000D7                     fputs@n:
  1687                           	callstack 0
  1688  0000D7                     f_open@dw:
  1689                           	callstack 0
  1690                           
  1691                           ; 4 bytes @ 0x77
  1692  0000D7                     	ds	2
  1693  0000D9                     ?_fprintf:
  1694                           	callstack 0
  1695  0000D9                     fprintf@fil:
  1696                           	callstack 0
  1697                           
  1698                           ; 2 bytes @ 0x79
  1699  0000D9                     	ds	2
  1700  0000DB                     f_open@res:
  1701                           	callstack 0
  1702  0000DB                     fprintf@str:
  1703                           	callstack 0
  1704                           
  1705                           ; 2 bytes @ 0x7B
  1706  0000DB                     	ds	1
  1707  0000DC                     f_open@dir:
  1708                           	callstack 0
  1709                           
  1710                           ; 2 bytes @ 0x7C
  1711  0000DC                     	ds	2
  1712  0000DE                     f_open@dj:
  1713                           	callstack 0
  1714                           
  1715                           ; 14 bytes @ 0x7E
  1716  0000DE                     	ds	17
  1717  0000EF                     ??_fprintf:
  1718                           
  1719                           ; 1 bytes @ 0x8F
  1720  0000EF                     	ds	2
  1721  0000F1                     
  1722                           ; 1 bytes @ 0x91
  1723  0000F1                     	ds	1
  1724  0000F2                     disparo_gravacao@fix_gps:
  1725                           	callstack 0
  1726                           
  1727                           ; 2 bytes @ 0x92
  1728  0000F2                     	ds	2
  1729  0000F4                     
  1730                           ; 1 bytes @ 0x94
  1731  0000F4                     	ds	2
  1732  0000F6                     escalonador@cont:
  1733                           	callstack 0
  1734                           
  1735                           ; 1 bytes @ 0x96
  1736  0000F6                     	ds	1
  1737                           
  1738                           	psect	cstackCOMRAM
  1739  000001                     __pcstackCOMRAM:
  1740                           	callstack 0
  1741  000001                     ?_strcmp:
  1742                           	callstack 0
  1743  000001                     stringcpy@str1:
  1744                           	callstack 0
  1745  000001                     strcmp@s1:
  1746                           	callstack 0
  1747  000001                     i2write_timer_zero@timer0:
  1748                           	callstack 0
  1749                           
  1750                           ; 2 bytes @ 0x0
  1751  000001                     	ds	2
  1752  000003                     stringcpy@str2:
  1753                           	callstack 0
  1754  000003                     strcmp@s2:
  1755                           	callstack 0
  1756                           
  1757                           ; 2 bytes @ 0x2
  1758  000003                     	ds	2
  1759  000005                     ??_strcmp:
  1760  000005                     stringcpy@dir:
  1761                           	callstack 0
  1762                           
  1763                           ; 2 bytes @ 0x4
  1764  000005                     	ds	2
  1765  000007                     ??_stringcpy:
  1766  000007                     strcmp@r:
  1767                           	callstack 0
  1768                           
  1769                           ; 1 bytes @ 0x6
  1770  000007                     	ds	2
  1771  000009                     stringcpy@chr:
  1772                           	callstack 0
  1773                           
  1774                           ; 1 bytes @ 0x8
  1775  000009                     	ds	1
  1776  00000A                     GPSRead@buff:
  1777                           	callstack 0
  1778                           
  1779                           ; 1 bytes @ 0x9
  1780  00000A                     	ds	1
  1781  00000B                     GPSRead@c:
  1782                           	callstack 0
  1783                           
  1784                           ; 1 bytes @ 0xA
  1785  00000B                     	ds	1
  1786  00000C                     ??_isr:
  1787                           
  1788                           ; 1 bytes @ 0xB
  1789  00000C                     	ds	12
  1790  000018                     isr@cont:
  1791                           	callstack 0
  1792                           
  1793                           ; 1 bytes @ 0x17
  1794  000018                     	ds	1
  1795  000019                     ??_dummy_clocks:
  1796  000019                     ??_verifica_diferenca_graus:
  1797  000019                     ??_verifica_diferenca_minutos:
  1798  000019                     ??_isdigit:
  1799  000019                     ?_Latitude:
  1800                           	callstack 0
  1801  000019                     ?_Longitude:
  1802                           	callstack 0
  1803  000019                     ?_fix:
  1804                           	callstack 0
  1805  000019                     ?_strlen:
  1806                           	callstack 0
  1807  000019                     ?_memcmp:
  1808                           	callstack 0
  1809  000019                     ?_GPSSecond:
  1810                           	callstack 0
  1811  000019                     ?_GPSMinute:
  1812                           	callstack 0
  1813  000019                     ?_GPSHour:
  1814                           	callstack 0
  1815  000019                     ?_GPSDay:
  1816                           	callstack 0
  1817  000019                     ?_GPSMonth:
  1818                           	callstack 0
  1819  000019                     ?_GPSyear:
  1820                           	callstack 0
  1821  000019                     ?___wmul:
  1822                           	callstack 0
  1823  000019                     ?___lwdiv:
  1824                           	callstack 0
  1825  000019                     ?___lwmod:
  1826                           	callstack 0
  1827  000019                     ?___lmul:
  1828                           	callstack 0
  1829  000019                     ?___lldiv:
  1830                           	callstack 0
  1831  000019                     ?___aldiv:
  1832                           	callstack 0
  1833  000019                     ?___llmod:
  1834                           	callstack 0
  1835  000019                     disk_ioctl@cmd:
  1836                           	callstack 0
  1837  000019                     delay@contador_ext:
  1838                           	callstack 0
  1839  000019                     response@buff:
  1840                           	callstack 0
  1841  000019                     write_timer_zero@timer0:
  1842                           	callstack 0
  1843  000019                     f_mount@fs:
  1844                           	callstack 0
  1845  000019                     ___wmul@multiplier:
  1846                           	callstack 0
  1847  000019                     ___lwdiv@dividend:
  1848                           	callstack 0
  1849  000019                     ___lwmod@dividend:
  1850                           	callstack 0
  1851  000019                     memcmp@s1:
  1852                           	callstack 0
  1853  000019                     memcpy@d1:
  1854                           	callstack 0
  1855  000019                     memset@p1:
  1856                           	callstack 0
  1857  000019                     strcat@to:
  1858                           	callstack 0
  1859  000019                     strlen@s:
  1860                           	callstack 0
  1861  000019                     wait_ready@timeout:
  1862                           	callstack 0
  1863  000019                     ___lmul@multiplier:
  1864                           	callstack 0
  1865  000019                     ___lldiv@dividend:
  1866                           	callstack 0
  1867  000019                     ___aldiv@dividend:
  1868                           	callstack 0
  1869  000019                     ___llmod@dividend:
  1870                           	callstack 0
  1871                           
  1872                           ; 4 bytes @ 0x18
  1873  000019                     	ds	1
  1874  00001A                     sdc_disk_status@pdrv:
  1875                           	callstack 0
  1876  00001A                     delay@contador_int:
  1877                           	callstack 0
  1878  00001A                     escreve_SPI@dado:
  1879                           	callstack 0
  1880  00001A                     _isdigit$3166:
  1881                           	callstack 0
  1882  00001A                     disk_ioctl@buff:
  1883                           	callstack 0
  1884                           
  1885                           ; 2 bytes @ 0x19
  1886  00001A                     	ds	1
  1887  00001B                     ??_GPSSecond:
  1888  00001B                     ??_GPSMinute:
  1889  00001B                     ??_GPSHour:
  1890  00001B                     ??_GPSDay:
  1891  00001B                     ??_GPSMonth:
  1892  00001B                     ??_GPSyear:
  1893  00001B                     escreve_cmd_lcd@comando:
  1894                           	callstack 0
  1895  00001B                     endereco_cursor_lcd@endereco:
  1896                           	callstack 0
  1897  00001B                     escreve_caractere_lcd@data:
  1898                           	callstack 0
  1899  00001B                     dummy_clocks@n:
  1900                           	callstack 0
  1901  00001B                     f_mount@drv:
  1902                           	callstack 0
  1903  00001B                     isdigit@c:
  1904                           	callstack 0
  1905  00001B                     ___wmul@multiplicand:
  1906                           	callstack 0
  1907  00001B                     ___lwdiv@divisor:
  1908                           	callstack 0
  1909  00001B                     ___lwmod@divisor:
  1910                           	callstack 0
  1911  00001B                     memcmp@s2:
  1912                           	callstack 0
  1913  00001B                     memcpy@s1:
  1914                           	callstack 0
  1915  00001B                     memset@c:
  1916                           	callstack 0
  1917  00001B                     strcat@from:
  1918                           	callstack 0
  1919  00001B                     strcpy@to:
  1920                           	callstack 0
  1921  00001B                     strlen@cp:
  1922                           	callstack 0
  1923                           
  1924                           ; 2 bytes @ 0x1A
  1925  00001B                     	ds	1
  1926  00001C                     ??_init_lcd:
  1927  00001C                     disk_ioctl@pdrv:
  1928                           	callstack 0
  1929  00001C                     posicao_cursor_lcd@coluna:
  1930                           	callstack 0
  1931  00001C                     escreve_frase_ram_lcd@buffer:
  1932                           	callstack 0
  1933  00001C                     dummy_clocks@i:
  1934                           	callstack 0
  1935                           
  1936                           ; 2 bytes @ 0x1B
  1937  00001C                     	ds	1
  1938  00001D                     ?_get_fattime:
  1939                           	callstack 0
  1940  00001D                     disk_status@pdrv:
  1941                           	callstack 0
  1942  00001D                     disk_ioctl@res:
  1943                           	callstack 0
  1944  00001D                     posicao_cursor_lcd@linha:
  1945                           	callstack 0
  1946  00001D                     wait_ready@res:
  1947                           	callstack 0
  1948  00001D                     verifica_diferenca_graus@select_data:
  1949                           	callstack 0
  1950  00001D                     verifica_diferenca_minutos@select_data:
  1951                           	callstack 0
  1952  00001D                     ___lwdiv@counter:
  1953                           	callstack 0
  1954  00001D                     ___lwmod@counter:
  1955                           	callstack 0
  1956  00001D                     monta_sd@dado:
  1957                           	callstack 0
  1958  00001D                     ___wmul@product:
  1959                           	callstack 0
  1960  00001D                     memcmp@n:
  1961                           	callstack 0
  1962  00001D                     memcpy@n:
  1963                           	callstack 0
  1964  00001D                     memset@n:
  1965                           	callstack 0
  1966  00001D                     strcat@cp:
  1967                           	callstack 0
  1968  00001D                     strcpy@from:
  1969                           	callstack 0
  1970  00001D                     ___lmul@multiplicand:
  1971                           	callstack 0
  1972  00001D                     ___lldiv@divisor:
  1973                           	callstack 0
  1974  00001D                     ___aldiv@divisor:
  1975                           	callstack 0
  1976  00001D                     ___llmod@divisor:
  1977                           	callstack 0
  1978                           
  1979                           ; 4 bytes @ 0x1C
  1980  00001D                     	ds	1
  1981  00001E                     disk_status@stat:
  1982                           	callstack 0
  1983  00001E                     posicao_cursor_lcd@endereco:
  1984                           	callstack 0
  1985  00001E                     verifica_diferenca_graus@point_index_lat:
  1986                           	callstack 0
  1987  00001E                     verifica_diferenca_minutos@point_index_lat:
  1988                           	callstack 0
  1989  00001E                     ___lwdiv@quotient:
  1990                           	callstack 0
  1991  00001E                     command@arg:
  1992                           	callstack 0
  1993                           
  1994                           ; 4 bytes @ 0x1D
  1995  00001E                     	ds	1
  1996  00001F                     ??_memcmp:
  1997  00001F                     ??_mensagem_inicial:
  1998  00001F                     ?_atoi:
  1999                           	callstack 0
  2000  00001F                     monta_sd@index:
  2001                           	callstack 0
  2002  00001F                     verifica_diferenca_graus@point_index_long:
  2003                           	callstack 0
  2004  00001F                     verifica_diferenca_minutos@point_index_long:
  2005                           	callstack 0
  2006  00001F                     atoi@s:
  2007                           	callstack 0
  2008  00001F                     memcpy@tmp:
  2009                           	callstack 0
  2010  00001F                     validate@fs:
  2011                           	callstack 0
  2012  00001F                     memset@p:
  2013                           	callstack 0
  2014  00001F                     strcpy@cp:
  2015                           	callstack 0
  2016                           
  2017                           ; 2 bytes @ 0x1E
  2018  00001F                     	ds	1
  2019  000020                     monta_sd@size:
  2020                           	callstack 0
  2021  000020                     verifica_diferenca_graus@j:
  2022                           	callstack 0
  2023  000020                     verifica_diferenca_minutos@j:
  2024                           	callstack 0
  2025  000020                     utoa@buf:
  2026                           	callstack 0
  2027  000020                     memcpy@d:
  2028                           	callstack 0
  2029                           
  2030                           ; 2 bytes @ 0x1F
  2031  000020                     	ds	1
  2032  000021                     ??_atoi:
  2033  000021                     monta_sd@i:
  2034                           	callstack 0
  2035  000021                     make_dirfile@path:
  2036                           	callstack 0
  2037  000021                     verifica_diferenca_graus@point:
  2038                           	callstack 0
  2039  000021                     verifica_diferenca_minutos@point:
  2040                           	callstack 0
  2041  000021                     ___aldiv@counter:
  2042                           	callstack 0
  2043  000021                     ___llmod@counter:
  2044                           	callstack 0
  2045  000021                     validate@id:
  2046                           	callstack 0
  2047  000021                     utoa@val:
  2048                           	callstack 0
  2049  000021                     ___lmul@product:
  2050                           	callstack 0
  2051  000021                     ___lldiv@quotient:
  2052                           	callstack 0
  2053  000021                     get_fattime@f_time:
  2054                           	callstack 0
  2055                           
  2056                           ; 10 bytes @ 0x20
  2057  000021                     	ds	1
  2058  000022                     command@CRC:
  2059                           	callstack 0
  2060  000022                     make_dirfile@dirname:
  2061                           	callstack 0
  2062  000022                     verifica_diferenca_graus@i:
  2063                           	callstack 0
  2064  000022                     verifica_diferenca_minutos@i:
  2065                           	callstack 0
  2066  000022                     ___aldiv@sign:
  2067                           	callstack 0
  2068  000022                     memcpy@s:
  2069                           	callstack 0
  2070                           
  2071                           ; 2 bytes @ 0x21
  2072  000022                     	ds	1
  2073  000023                     ??_make_dirfile:
  2074  000023                     ??_validate:
  2075  000023                     command@CMD:
  2076                           	callstack 0
  2077  000023                     atoi@sign:
  2078                           	callstack 0
  2079  000023                     utoa@base:
  2080                           	callstack 0
  2081  000023                     ___aldiv@quotient:
  2082                           	callstack 0
  2083                           
  2084                           ; 4 bytes @ 0x22
  2085  000023                     	ds	1
  2086  000024                     command@argument:
  2087                           	callstack 0
  2088  000024                     atoi@a:
  2089                           	callstack 0
  2090                           
  2091                           ; 2 bytes @ 0x23
  2092  000024                     	ds	1
  2093  000025                     ?_clust2sect:
  2094                           	callstack 0
  2095  000025                     ___lldiv@counter:
  2096                           	callstack 0
  2097  000025                     sdc_disk_read@p_buff:
  2098                           	callstack 0
  2099  000025                     sdc_disk_write@p_buff:
  2100                           	callstack 0
  2101  000025                     clust2sect@clust:
  2102                           	callstack 0
  2103  000025                     _make_dirfile$1650:
  2104                           	callstack 0
  2105  000025                     utoa@v:
  2106                           	callstack 0
  2107                           
  2108                           ; 2 bytes @ 0x24
  2109  000025                     	ds	1
  2110  000026                     ?_diff_calc:
  2111                           	callstack 0
  2112  000026                     diff_calc@p_buff_fence:
  2113                           	callstack 0
  2114                           
  2115                           ; 2 bytes @ 0x25
  2116  000026                     	ds	1
  2117  000027                     make_dirfile@b:
  2118                           	callstack 0
  2119  000027                     utoa@c:
  2120                           	callstack 0
  2121  000027                     sdc_reset@count_nosd:
  2122                           	callstack 0
  2123  000027                     sdc_disk_read@sector:
  2124                           	callstack 0
  2125  000027                     sdc_disk_write@sector:
  2126                           	callstack 0
  2127  000027                     configura_baudrate_uart@baudrate:
  2128                           	callstack 0
  2129                           
  2130                           ; 4 bytes @ 0x26
  2131  000027                     	ds	1
  2132  000028                     make_dirfile@t:
  2133                           	callstack 0
  2134  000028                     itoa@buf:
  2135                           	callstack 0
  2136  000028                     diff_calc@p_buff_point:
  2137                           	callstack 0
  2138                           
  2139                           ; 2 bytes @ 0x27
  2140  000028                     	ds	1
  2141  000029                     ??_clust2sect:
  2142  000029                     make_dirfile@a:
  2143                           	callstack 0
  2144  000029                     sdc_reset@count:
  2145                           	callstack 0
  2146  000029                     itoa@val:
  2147                           	callstack 0
  2148                           
  2149                           ; 2 bytes @ 0x28
  2150  000029                     	ds	1
  2151  00002A                     ??_diff_calc:
  2152  00002A                     make_dirfile@n:
  2153                           	callstack 0
  2154                           
  2155                           ; 1 bytes @ 0x29
  2156  00002A                     	ds	1
  2157  00002B                     sdc_reset@buff:
  2158                           	callstack 0
  2159  00002B                     sdc_disk_read@count:
  2160                           	callstack 0
  2161  00002B                     sdc_disk_write@count:
  2162                           	callstack 0
  2163  00002B                     make_dirfile@c:
  2164                           	callstack 0
  2165  00002B                     configura_baudrate_uart@x:
  2166                           	callstack 0
  2167  00002B                     itoa@base:
  2168                           	callstack 0
  2169                           
  2170                           ; 2 bytes @ 0x2A
  2171  00002B                     	ds	1
  2172  00002C                     ??_sdc_disk_initialize:
  2173  00002C                     ??_sdc_disk_read:
  2174  00002C                     ??_sdc_disk_write:
  2175  00002C                     calcula_diff_graus@select_data:
  2176                           	callstack 0
  2177  00002C                     calcula_diff_minutos@select_data:
  2178                           	callstack 0
  2179                           
  2180                           ; 1 bytes @ 0x2B
  2181  00002C                     	ds	1
  2182  00002D                     disk_initialize@pdrv:
  2183                           	callstack 0
  2184  00002D                     recebe_dados_gps@flag_gps:
  2185                           	callstack 0
  2186  00002D                     calcula_diff_graus@point:
  2187                           	callstack 0
  2188  00002D                     calcula_diff_minutos@point:
  2189                           	callstack 0
  2190                           
  2191                           ; 1 bytes @ 0x2C
  2192  00002D                     	ds	1
  2193  00002E                     disk_initialize@stat:
  2194                           	callstack 0
  2195  00002E                     calcula_diff_graus@count:
  2196                           	callstack 0
  2197  00002E                     calcula_diff_minutos@count:
  2198                           	callstack 0
  2199  00002E                     escreve_inteiro_lcd@valor:
  2200                           	callstack 0
  2201  00002E                     clust2sect@fs:
  2202                           	callstack 0
  2203                           
  2204                           ; 2 bytes @ 0x2D
  2205  00002E                     	ds	1
  2206  00002F                     ??_verifica_fence_externo:
  2207                           
  2208                           ; 1 bytes @ 0x2E
  2209  00002F                     	ds	1
  2210  000030                     ??_troca_de_tela:
  2211  000030                     ??_disk_read:
  2212  000030                     ??_disk_write:
  2213  000030                     
  2214                           ; 1 bytes @ 0x2F
  2215  000030                     	ds	1
  2216  000031                     ??_fputs:
  2217  000031                     next_dir_entry@dj:
  2218                           	callstack 0
  2219  000031                     f_close@res:
  2220                           	callstack 0
  2221                           
  2222                           ; 1 bytes @ 0x30
  2223  000031                     	ds	1
  2224  000032                     
  2225                           ; 1 bytes @ 0x31
  2226 ;;
  2227 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2228 ;;
  2229 ;; *************** function _main *****************
  2230 ;; Defined at:
  2231 ;;		line 225 in file "main.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;		None
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;		None
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  1    wreg      void 
  2238 ;; Registers used:
  2239 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2245 ;;      Params:         0       0       0       0       0       0       0       0       0
  2246 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2247 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2248 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2249 ;;Total ram usage:        0 bytes
  2250 ;; Hardware stack levels required when called:   18
  2251 ;; This function calls:
  2252 ;;		_dados_gps_to_sd
  2253 ;;		_escalonador
  2254 ;;		_inicializa_tarefas
  2255 ;;		_inicializa_uart
  2256 ;;		_init_hardware
  2257 ;;		_init_lcd
  2258 ;;		_mensagem_inicial
  2259 ;; This function is called by:
  2260 ;;		Startup code after reset
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text0
  2265  005114                     __ptext0:
  2266                           	callstack 0
  2267  005114                     _main:
  2268                           	callstack 13
  2269                           
  2270                           ;main.c: 227: init_hardware();
  2271                           
  2272                           ;incstack = 0
  2273  005114  EC02  F02A         	call	_init_hardware	;wreg free
  2274                           
  2275                           ;main.c: 228: T0CONbits.TMR0ON = 0;
  2276  005118  9ED5               	bcf	213,7,c	;volatile
  2277                           
  2278                           ;main.c: 229: init_lcd();
  2279  00511A  EC02  F021         	call	_init_lcd	;wreg free
  2280                           
  2281                           ;main.c: 230: mensagem_inicial();
  2282  00511E  ECC9  F023         	call	_mensagem_inicial	;wreg free
  2283                           
  2284                           ;main.c: 231: inicializa_tarefas();
  2285  005122  ECDD  F024         	call	_inicializa_tarefas	;wreg free
  2286                           
  2287                           ; BSR set to: 1
  2288                           ;main.c: 232: inicializa_uart();
  2289  005126  EC29  F029         	call	_inicializa_uart	;wreg free
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;main.c: 236: T0CONbits.TMR0ON = 1;
  2293  00512A  8ED5               	bsf	213,7,c	;volatile
  2294  00512C                     l12375:
  2295                           
  2296                           ;main.c: 238: {;main.c: 240: if ((sinaliza_int_timer == 1) && (4))
  2297  00512C  043E               	decf	_sinaliza_int_timer^0,w,c
  2298  00512E  A4D8               	btfss	status,2,c
  2299  005130  D004               	goto	l12381
  2300                           
  2301                           ;main.c: 241: {;main.c: 242: sinaliza_int_timer = 0;
  2302  005132  0E00               	movlw	0
  2303  005134  6E3E               	movwf	_sinaliza_int_timer^0,c
  2304                           
  2305                           ;main.c: 243: escalonador();
  2306  005136  ECAF  F020         	call	_escalonador	;wreg free
  2307  00513A                     l12381:
  2308                           
  2309                           ;main.c: 244: };main.c: 245: dados_gps_to_sd();
  2310  00513A  ECC0  F025         	call	_dados_gps_to_sd	;wreg free
  2311  00513E  D7F6               	goto	l12375
  2312  005140                     __end_of_main:
  2313                           	callstack 0
  2314                           
  2315 ;; *************** function _mensagem_inicial *****************
  2316 ;; Defined at:
  2317 ;;		line 256 in file "main.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;		None
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  msg_dois       17   17[BANK0 ] const unsigned char [17]
  2322 ;;  msg_linha_um   17    0[BANK0 ] const unsigned char [17]
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  1    wreg      void 
  2325 ;; Registers used:
  2326 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2332 ;;      Params:         0       0       0       0       0       0       0       0       0
  2333 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2334 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2335 ;;      Totals:         2      34       0       0       0       0       0       0       0
  2336 ;;Total ram usage:       36 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    6
  2339 ;; This function calls:
  2340 ;;		_escreve_cmd_lcd
  2341 ;;		_escreve_frase_ram_lcd
  2342 ;;		_posicao_cursor_lcd
  2343 ;; This function is called by:
  2344 ;;		_main
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           	psect	text1
  2349  004792                     __ptext1:
  2350                           	callstack 0
  2351  004792                     _mensagem_inicial:
  2352                           	callstack 24
  2353                           
  2354                           ;main.c: 258: const unsigned char msg_linha_um[17] = "FATEC ST ANDRE";
  2355                           
  2356                           ;incstack = 0
  2357  004792  0EF8               	movlw	low mensagem_inicial@F3666
  2358  004794  6EF6               	movwf	tblptrl,c
  2359  004796                     	if	1	;There is more than 1 active tblptr byte
  2360  004796  0E60               	movlw	high mensagem_inicial@F3666
  2361  004798  6EF7               	movwf	tblptrh,c
  2362  00479A                     	endif
  2363  00479A                     	if	0	;There are less than 3 active tblptr bytes
  2364  00479A                     	endif
  2365  00479A  EE20  F060         	lfsr	2,mensagem_inicial@msg_linha_um
  2366  00479E  0E10               	movlw	16
  2367  0047A0                     u15180:
  2368  0047A0  0009               	tblrd		*+
  2369  0047A2  CFF5 FFDE          	movff	tablat,postinc2
  2370  0047A6  06E8               	decf	wreg,f,c
  2371  0047A8  E2FB               	bc	u15180
  2372                           
  2373                           ;main.c: 259: const unsigned char msg_dois[17] = "TCC--TELEMTRIA";
  2374  0047AA  0EE7               	movlw	low mensagem_inicial@F3668
  2375  0047AC  6EF6               	movwf	tblptrl,c
  2376  0047AE                     	if	1	;There is more than 1 active tblptr byte
  2377  0047AE  0E60               	movlw	high mensagem_inicial@F3668
  2378  0047B0  6EF7               	movwf	tblptrh,c
  2379  0047B2                     	endif
  2380  0047B2                     	if	0	;There are less than 3 active tblptr bytes
  2381  0047B2                     	endif
  2382  0047B2  EE20  F071         	lfsr	2,mensagem_inicial@msg_dois
  2383  0047B6  0E10               	movlw	16
  2384  0047B8                     u15190:
  2385  0047B8  0009               	tblrd		*+
  2386  0047BA  CFF5 FFDE          	movff	tablat,postinc2
  2387  0047BE  06E8               	decf	wreg,f,c
  2388  0047C0  E2FB               	bc	u15190
  2389                           
  2390                           ;main.c: 261: posicao_cursor_lcd(1,0);
  2391  0047C2  0E00               	movlw	0
  2392  0047C4  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  2393  0047C6  0E01               	movlw	1
  2394  0047C8  EC0D  F025         	call	_posicao_cursor_lcd
  2395                           
  2396                           ;main.c: 262: escreve_frase_ram_lcd(msg_linha_um);
  2397  0047CC  0E60               	movlw	low mensagem_inicial@msg_linha_um
  2398  0047CE  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  2399  0047D0  6A1D               	clrf	(escreve_frase_ram_lcd@buffer+1)^0,c
  2400  0047D2  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
  2401                           
  2402                           ;main.c: 264: posicao_cursor_lcd(2,0);
  2403  0047D6  0E00               	movlw	0
  2404  0047D8  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  2405  0047DA  0E02               	movlw	2
  2406  0047DC  EC0D  F025         	call	_posicao_cursor_lcd
  2407                           
  2408                           ;main.c: 265: escreve_frase_ram_lcd(msg_dois);
  2409  0047E0  0E71               	movlw	low mensagem_inicial@msg_dois
  2410  0047E2  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  2411  0047E4  6A1D               	clrf	(escreve_frase_ram_lcd@buffer+1)^0,c
  2412  0047E6  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
  2413                           
  2414                           ;main.c: 266: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2415  0047EA  0E3D               	movlw	61
  2416  0047EC  6E20               	movwf	(??_mensagem_inicial+1)^0,c
  2417  0047EE  0EE1               	movlw	225
  2418  0047F0  6E1F               	movwf	??_mensagem_inicial^0,c
  2419  0047F2  0E40               	movlw	64
  2420  0047F4                     u15357:
  2421  0047F4  2EE8               	decfsz	wreg,f,c
  2422  0047F6  D7FE               	bra	u15357
  2423  0047F8  2E1F               	decfsz	??_mensagem_inicial^0,f,c
  2424  0047FA  D7FC               	bra	u15357
  2425  0047FC  2E20               	decfsz	(??_mensagem_inicial+1)^0,f,c
  2426  0047FE  D7FA               	bra	u15357
  2427                           
  2428                           ;main.c: 267: escreve_cmd_lcd(0b00000001);
  2429  004800  0E01               	movlw	1
  2430  004802  EC7A  F022         	call	_escreve_cmd_lcd
  2431  004806  0012               	return		;funcret
  2432  004808                     __end_of_mensagem_inicial:
  2433                           	callstack 0
  2434                           
  2435 ;; *************** function _init_lcd *****************
  2436 ;; Defined at:
  2437 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;		None
  2440 ;; Auto vars:     Size  Location     Type
  2441 ;;		None
  2442 ;; Return value:  Size  Location     Type
  2443 ;;                  1    wreg      void 
  2444 ;; Registers used:
  2445 ;;		wreg, status,2, status,0, cstack
  2446 ;; Tracked objects:
  2447 ;;		On entry : 0/0
  2448 ;;		On exit  : 0/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2451 ;;      Params:         0       0       0       0       0       0       0       0       0
  2452 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2453 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2454 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2455 ;;Total ram usage:        1 bytes
  2456 ;; Hardware stack levels used:    1
  2457 ;; Hardware stack levels required when called:    5
  2458 ;; This function calls:
  2459 ;;		_delay
  2460 ;;		_escreve_cmd_lcd
  2461 ;; This function is called by:
  2462 ;;		_main
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           	psect	text2
  2467  004204                     __ptext2:
  2468                           	callstack 0
  2469  004204                     _init_lcd:
  2470                           	callstack 25
  2471                           
  2472                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2473                           
  2474                           ;incstack = 0
  2475  004204  9495               	bcf	149,2,c	;volatile
  2476                           
  2477                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2478  004206  9295               	bcf	149,1,c	;volatile
  2479                           
  2480                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2481  004208  9095               	bcf	149,0,c	;volatile
  2482                           
  2483                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2484  00420A  9895               	bcf	149,4,c	;volatile
  2485                           
  2486                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2487  00420C  9A95               	bcf	149,5,c	;volatile
  2488                           
  2489                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2490  00420E  9C95               	bcf	149,6,c	;volatile
  2491                           
  2492                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2493  004210  9E95               	bcf	149,7,c	;volatile
  2494                           
  2495                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2496  004212  9483               	bcf	131,2,c	;volatile
  2497                           
  2498                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2499  004214  9283               	bcf	131,1,c	;volatile
  2500                           
  2501                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2502  004216  9083               	bcf	131,0,c	;volatile
  2503                           
  2504                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2505  004218  9E83               	bcf	131,7,c	;volatile
  2506                           
  2507                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2508  00421A  9C83               	bcf	131,6,c	;volatile
  2509                           
  2510                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2511  00421C  8A83               	bsf	131,5,c	;volatile
  2512                           
  2513                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2514  00421E  8883               	bsf	131,4,c	;volatile
  2515                           
  2516                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2517  004220  0EEA               	movlw	234
  2518  004222  6E1C               	movwf	??_init_lcd^0,c
  2519  004224  0EC3               	movlw	195
  2520  004226                     u15367:
  2521  004226  2EE8               	decfsz	wreg,f,c
  2522  004228  D7FE               	bra	u15367
  2523  00422A  2E1C               	decfsz	??_init_lcd^0,f,c
  2524  00422C  D7FC               	bra	u15367
  2525  00422E  F000               	nop	
  2526                           
  2527                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2528  004230  8083               	bsf	131,0,c	;volatile
  2529                           
  2530                           ;display_lcd.c: 108: delay();
  2531  004232  ECBE  F029         	call	_delay	;wreg free
  2532                           
  2533                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2534  004236  9083               	bcf	131,0,c	;volatile
  2535                           
  2536                           ;display_lcd.c: 110: delay();
  2537  004238  ECBE  F029         	call	_delay	;wreg free
  2538                           
  2539                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2540  00423C  0E4E               	movlw	78
  2541  00423E  6E1C               	movwf	??_init_lcd^0,c
  2542  004240  0EEB               	movlw	235
  2543  004242                     u15377:
  2544  004242  2EE8               	decfsz	wreg,f,c
  2545  004244  D7FE               	bra	u15377
  2546  004246  2E1C               	decfsz	??_init_lcd^0,f,c
  2547  004248  D7FC               	bra	u15377
  2548  00424A  F000               	nop	
  2549                           
  2550                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2551  00424C  8083               	bsf	131,0,c	;volatile
  2552                           
  2553                           ;display_lcd.c: 119: delay();
  2554  00424E  ECBE  F029         	call	_delay	;wreg free
  2555                           
  2556                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2557  004252  9083               	bcf	131,0,c	;volatile
  2558                           
  2559                           ;display_lcd.c: 121: delay();
  2560  004254  ECBE  F029         	call	_delay	;wreg free
  2561                           
  2562                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2563  004258  0E4E               	movlw	78
  2564  00425A  6E1C               	movwf	??_init_lcd^0,c
  2565  00425C  0EEB               	movlw	235
  2566  00425E                     u15387:
  2567  00425E  2EE8               	decfsz	wreg,f,c
  2568  004260  D7FE               	bra	u15387
  2569  004262  2E1C               	decfsz	??_init_lcd^0,f,c
  2570  004264  D7FC               	bra	u15387
  2571  004266  F000               	nop	
  2572                           
  2573                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2574  004268  8083               	bsf	131,0,c	;volatile
  2575                           
  2576                           ;display_lcd.c: 130: delay();
  2577  00426A  ECBE  F029         	call	_delay	;wreg free
  2578                           
  2579                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2580  00426E  9083               	bcf	131,0,c	;volatile
  2581                           
  2582                           ;display_lcd.c: 132: delay();
  2583  004270  ECBE  F029         	call	_delay	;wreg free
  2584                           
  2585                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2586  004274  9E83               	bcf	131,7,c	;volatile
  2587                           
  2588                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2589  004276  9C83               	bcf	131,6,c	;volatile
  2590                           
  2591                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2592  004278  8A83               	bsf	131,5,c	;volatile
  2593                           
  2594                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2595  00427A  9883               	bcf	131,4,c	;volatile
  2596                           
  2597                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2598  00427C  8083               	bsf	131,0,c	;volatile
  2599                           
  2600                           ;display_lcd.c: 143: delay();
  2601  00427E  ECBE  F029         	call	_delay	;wreg free
  2602                           
  2603                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2604  004282  9083               	bcf	131,0,c	;volatile
  2605                           
  2606                           ;display_lcd.c: 145: delay();
  2607  004284  ECBE  F029         	call	_delay	;wreg free
  2608                           
  2609                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2610  004288  0E28               	movlw	40
  2611  00428A  EC7A  F022         	call	_escreve_cmd_lcd
  2612                           
  2613                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2614  00428E  0E06               	movlw	6
  2615  004290  EC7A  F022         	call	_escreve_cmd_lcd
  2616                           
  2617                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2618  004294  0E0E               	movlw	14
  2619  004296  EC7A  F022         	call	_escreve_cmd_lcd
  2620                           
  2621                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2622  00429A  0E01               	movlw	1
  2623  00429C  EC7A  F022         	call	_escreve_cmd_lcd
  2624  0042A0  0012               	return		;funcret
  2625  0042A2                     __end_of_init_lcd:
  2626                           	callstack 0
  2627                           
  2628 ;; *************** function _init_hardware *****************
  2629 ;; Defined at:
  2630 ;;		line 52 in file "bibliotecas/hardware.c"
  2631 ;; Parameters:    Size  Location     Type
  2632 ;;		None
  2633 ;; Auto vars:     Size  Location     Type
  2634 ;;		None
  2635 ;; Return value:  Size  Location     Type
  2636 ;;                  1    wreg      void 
  2637 ;; Registers used:
  2638 ;;		wreg, status,2, cstack
  2639 ;; Tracked objects:
  2640 ;;		On entry : 0/0
  2641 ;;		On exit  : 0/0
  2642 ;;		Unchanged: 0/0
  2643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2644 ;;      Params:         0       0       0       0       0       0       0       0       0
  2645 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2646 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2647 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2648 ;;Total ram usage:        0 bytes
  2649 ;; Hardware stack levels used:    1
  2650 ;; Hardware stack levels required when called:    5
  2651 ;; This function calls:
  2652 ;;		_config_timer_dois
  2653 ;;		_config_timer_zero
  2654 ;;		_init_interrupt
  2655 ;;		_init_oscilador
  2656 ;;		_init_ports
  2657 ;; This function is called by:
  2658 ;;		_main
  2659 ;; This function uses a non-reentrant model
  2660 ;;
  2661                           
  2662                           	psect	text3
  2663  005404                     __ptext3:
  2664                           	callstack 0
  2665  005404                     _init_hardware:
  2666                           	callstack 25
  2667                           
  2668                           ;hardware.c: 55: init_oscilador();
  2669                           
  2670                           ;incstack = 0
  2671  005404  EC75  F02A         	call	_init_oscilador	;wreg free
  2672                           
  2673                           ;hardware.c: 58: init_ports();
  2674  005408  ECCD  F029         	call	_init_ports	;wreg free
  2675                           
  2676                           ;hardware.c: 61: config_timer_zero();
  2677  00540C  ECDB  F029         	call	_config_timer_zero	;wreg free
  2678                           
  2679                           ;hardware.c: 64: config_timer_dois();
  2680  005410  EC2F  F02A         	call	_config_timer_dois	;wreg free
  2681                           
  2682                           ;hardware.c: 67: init_interrupt();
  2683  005414  EC0D  F02A         	call	_init_interrupt	;wreg free
  2684  005418  0012               	return		;funcret
  2685  00541A                     __end_of_init_hardware:
  2686                           	callstack 0
  2687                           
  2688 ;; *************** function _init_ports *****************
  2689 ;; Defined at:
  2690 ;;		line 151 in file "bibliotecas/hardware.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;		None
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;		None
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      void 
  2697 ;; Registers used:
  2698 ;;		wreg, status,2
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2704 ;;      Params:         0       0       0       0       0       0       0       0       0
  2705 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2706 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2707 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2708 ;;Total ram usage:        0 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    3
  2711 ;; This function calls:
  2712 ;;		Nothing
  2713 ;; This function is called by:
  2714 ;;		_init_hardware
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text4
  2719  00539A                     __ptext4:
  2720                           	callstack 0
  2721  00539A                     _init_ports:
  2722                           	callstack 26
  2723                           
  2724                           ;hardware.c: 153: ADCON1 = 0X0F;
  2725                           
  2726                           ;incstack = 0
  2727  00539A  0E0F               	movlw	15
  2728  00539C  6EC1               	movwf	193,c	;volatile
  2729                           
  2730                           ;hardware.c: 154: TRISB = 0b00000001;
  2731  00539E  0E01               	movlw	1
  2732  0053A0  6E93               	movwf	147,c	;volatile
  2733                           
  2734                           ;hardware.c: 155: LATB = 0xFF;
  2735  0053A2  688A               	setf	138,c	;volatile
  2736                           
  2737                           ;hardware.c: 156: TRISD = 0x00;
  2738  0053A4  0E00               	movlw	0
  2739  0053A6  6E95               	movwf	149,c	;volatile
  2740                           
  2741                           ;hardware.c: 157: TRISA = 0b00000111;
  2742  0053A8  0E07               	movlw	7
  2743  0053AA  6E92               	movwf	146,c	;volatile
  2744                           
  2745                           ;hardware.c: 158: TRISC = 0x01111111;
  2746  0053AC  0E11               	movlw	17
  2747  0053AE  6E94               	movwf	148,c	;volatile
  2748                           
  2749                           ;hardware.c: 159: TRISE = 0b00000011;
  2750  0053B0  0E03               	movlw	3
  2751  0053B2  6E96               	movwf	150,c	;volatile
  2752  0053B4  0012               	return		;funcret
  2753  0053B6                     __end_of_init_ports:
  2754                           	callstack 0
  2755                           
  2756 ;; *************** function _init_oscilador *****************
  2757 ;; Defined at:
  2758 ;;		line 169 in file "bibliotecas/hardware.c"
  2759 ;; Parameters:    Size  Location     Type
  2760 ;;		None
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;		None
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  1    wreg      void 
  2765 ;; Registers used:
  2766 ;;		None
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2772 ;;      Params:         0       0       0       0       0       0       0       0       0
  2773 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2774 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2775 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2776 ;;Total ram usage:        0 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; Hardware stack levels required when called:    3
  2779 ;; This function calls:
  2780 ;;		Nothing
  2781 ;; This function is called by:
  2782 ;;		_init_hardware
  2783 ;; This function uses a non-reentrant model
  2784 ;;
  2785                           
  2786                           	psect	text5
  2787  0054EA                     __ptext5:
  2788                           	callstack 0
  2789  0054EA                     _init_oscilador:
  2790                           	callstack 26
  2791                           
  2792                           ;hardware.c: 172: OSCCONbits.IRCF0 = 1;
  2793                           
  2794                           ;incstack = 0
  2795  0054EA  88D3               	bsf	211,4,c	;volatile
  2796                           
  2797                           ;hardware.c: 173: OSCCONbits.IRCF1 = 1;
  2798  0054EC  8AD3               	bsf	211,5,c	;volatile
  2799                           
  2800                           ;hardware.c: 174: OSCCONbits.IRCF2 = 1;
  2801  0054EE  8CD3               	bsf	211,6,c	;volatile
  2802  0054F0  0012               	return		;funcret
  2803  0054F2                     __end_of_init_oscilador:
  2804                           	callstack 0
  2805                           
  2806 ;; *************** function _init_interrupt *****************
  2807 ;; Defined at:
  2808 ;;		line 94 in file "bibliotecas/hardware.c"
  2809 ;; Parameters:    Size  Location     Type
  2810 ;;		None
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;		None
  2813 ;; Return value:  Size  Location     Type
  2814 ;;                  1    wreg      void 
  2815 ;; Registers used:
  2816 ;;		wreg, status,2
  2817 ;; Tracked objects:
  2818 ;;		On entry : 0/0
  2819 ;;		On exit  : 0/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2822 ;;      Params:         0       0       0       0       0       0       0       0       0
  2823 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2824 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2825 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2826 ;;Total ram usage:        0 bytes
  2827 ;; Hardware stack levels used:    1
  2828 ;; Hardware stack levels required when called:    3
  2829 ;; This function calls:
  2830 ;;		Nothing
  2831 ;; This function is called by:
  2832 ;;		_init_hardware
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           	psect	text6
  2837  00541A                     __ptext6:
  2838                           	callstack 0
  2839  00541A                     _init_interrupt:
  2840                           	callstack 26
  2841                           
  2842                           ;hardware.c: 96: INTCON = 0b10110000;
  2843                           
  2844                           ;incstack = 0
  2845  00541A  0EB0               	movlw	176
  2846  00541C  6EF2               	movwf	242,c	;volatile
  2847                           
  2848                           ;hardware.c: 97: INTCON2 = 0b00000000;
  2849  00541E  0E00               	movlw	0
  2850  005420  6EF1               	movwf	241,c	;volatile
  2851                           
  2852                           ;hardware.c: 98: INTCON3 = 0b00000000;
  2853  005422  0E00               	movlw	0
  2854  005424  6EF0               	movwf	240,c	;volatile
  2855                           
  2856                           ;hardware.c: 100: PIE1 = 0b00101000;
  2857  005426  0E28               	movlw	40
  2858  005428  6E9D               	movwf	157,c	;volatile
  2859  00542A  0012               	return		;funcret
  2860  00542C                     __end_of_init_interrupt:
  2861                           	callstack 0
  2862                           
  2863 ;; *************** function _config_timer_zero *****************
  2864 ;; Defined at:
  2865 ;;		line 79 in file "bibliotecas/hardware.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      void 
  2872 ;; Registers used:
  2873 ;;		wreg, status,2, cstack
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2879 ;;      Params:         0       0       0       0       0       0       0       0       0
  2880 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2881 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2882 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2883 ;;Total ram usage:        0 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    4
  2886 ;; This function calls:
  2887 ;;		_write_timer_zero
  2888 ;; This function is called by:
  2889 ;;		_init_hardware
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           	psect	text7
  2894  0053B6                     __ptext7:
  2895                           	callstack 0
  2896  0053B6                     _config_timer_zero:
  2897                           	callstack 25
  2898                           
  2899                           ;hardware.c: 81: T0CON = 0b11000101;
  2900                           
  2901                           ;incstack = 0
  2902  0053B6  0EC5               	movlw	197
  2903  0053B8  6ED5               	movwf	213,c	;volatile
  2904                           
  2905                           ;hardware.c: 82: SPPCON = 0b00000000;
  2906  0053BA  0E00               	movlw	0
  2907  0053BC  6E65               	movwf	101,c	;volatile
  2908                           
  2909                           ;hardware.c: 83: SPPCFG = 0b00000000;
  2910  0053BE  0E00               	movlw	0
  2911  0053C0  6E63               	movwf	99,c	;volatile
  2912                           
  2913                           ;hardware.c: 84: write_timer_zero(0x45);
  2914  0053C2  0E00               	movlw	0
  2915  0053C4  6E1A               	movwf	(write_timer_zero@timer0+1)^0,c
  2916  0053C6  0E45               	movlw	69
  2917  0053C8  6E19               	movwf	write_timer_zero@timer0^0,c
  2918  0053CA  EC5C  F02A         	call	_write_timer_zero	;wreg free
  2919  0053CE  0012               	return		;funcret
  2920  0053D0                     __end_of_config_timer_zero:
  2921                           	callstack 0
  2922                           
  2923 ;; *************** function _write_timer_zero *****************
  2924 ;; Defined at:
  2925 ;;		line 134 in file "bibliotecas/hardware.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;  timer0          2   24[COMRAM] unsigned int 
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;		None
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      void 
  2932 ;; Registers used:
  2933 ;;		None
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2939 ;;      Params:         2       0       0       0       0       0       0       0       0
  2940 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2941 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2942 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2943 ;;Total ram usage:        2 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; Hardware stack levels required when called:    3
  2946 ;; This function calls:
  2947 ;;		Nothing
  2948 ;; This function is called by:
  2949 ;;		_config_timer_zero
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           	psect	text8
  2954  0054B8                     __ptext8:
  2955                           	callstack 0
  2956  0054B8                     _write_timer_zero:
  2957                           	callstack 25
  2958                           
  2959                           ;hardware.c: 142: TMR0 = timer0;
  2960                           
  2961                           ;incstack = 0
  2962  0054B8  C019  FFD6         	movff	write_timer_zero@timer0,4054	;volatile
  2963  0054BC  C01A  FFD7         	movff	write_timer_zero@timer0+1,4055	;volatile
  2964  0054C0  0012               	return		;funcret
  2965  0054C2                     __end_of_write_timer_zero:
  2966                           	callstack 0
  2967                           
  2968 ;; *************** function _config_timer_dois *****************
  2969 ;; Defined at:
  2970 ;;		line 198 in file "bibliotecas/hardware.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;		None
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;		None
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  1    wreg      void 
  2977 ;; Registers used:
  2978 ;;		wreg, status,2
  2979 ;; Tracked objects:
  2980 ;;		On entry : 0/0
  2981 ;;		On exit  : 0/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2984 ;;      Params:         0       0       0       0       0       0       0       0       0
  2985 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2986 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2987 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2988 ;;Total ram usage:        0 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:    3
  2991 ;; This function calls:
  2992 ;;		Nothing
  2993 ;; This function is called by:
  2994 ;;		_init_hardware
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text9
  2999  00545E                     __ptext9:
  3000                           	callstack 0
  3001  00545E                     _config_timer_dois:
  3002                           	callstack 26
  3003                           
  3004                           ;hardware.c: 200: T2CON = 0b00000100;
  3005                           
  3006                           ;incstack = 0
  3007  00545E  0E04               	movlw	4
  3008  005460  6ECA               	movwf	202,c	;volatile
  3009                           
  3010                           ;hardware.c: 201: TMR2 = 0;
  3011  005462  0E00               	movlw	0
  3012  005464  6ECC               	movwf	204,c	;volatile
  3013                           
  3014                           ;hardware.c: 202: PR2 = 0x01;
  3015  005466  0E01               	movlw	1
  3016  005468  6ECB               	movwf	203,c	;volatile
  3017  00546A  0012               	return		;funcret
  3018  00546C                     __end_of_config_timer_dois:
  3019                           	callstack 0
  3020                           
  3021 ;; *************** function _inicializa_tarefas *****************
  3022 ;; Defined at:
  3023 ;;		line 172 in file "main.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;		None
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;		None
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  1    wreg      void 
  3030 ;; Registers used:
  3031 ;;		wreg, status,2, status,0
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 3F/1
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3037 ;;      Params:         0       0       0       0       0       0       0       0       0
  3038 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3039 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3040 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3041 ;;Total ram usage:        0 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    3
  3044 ;; This function calls:
  3045 ;;		Nothing
  3046 ;; This function is called by:
  3047 ;;		_main
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           	psect	text10
  3052  0049BA                     __ptext10:
  3053                           	callstack 0
  3054  0049BA                     _inicializa_tarefas:
  3055                           	callstack 27
  3056                           
  3057                           ;main.c: 175: p_tarefas[0] = verifica_dados_operacionais;
  3058                           
  3059                           ;incstack = 0
  3060  0049BA  0E6C               	movlw	low _verifica_dados_operacionais
  3061  0049BC  0101               	movlb	1	; () banked
  3062  0049BE  6F10               	movwf	_p_tarefas& (0+255),b
  3063  0049C0  0E54               	movlw	high _verifica_dados_operacionais
  3064  0049C2  6F11               	movwf	(_p_tarefas+1)& (0+255),b
  3065                           
  3066                           ;main.c: 176: p_tarefas[1] = disparo_gravacao;
  3067  0049C4  0E8A               	movlw	low _disparo_gravacao
  3068  0049C6  6F12               	movwf	(_p_tarefas+2)& (0+255),b
  3069  0049C8  0E4F               	movlw	high _disparo_gravacao
  3070  0049CA  6F13               	movwf	(_p_tarefas+3)& (0+255),b
  3071                           
  3072                           ;main.c: 178: p_tarefas[2] = troca_de_tela;
  3073  0049CC  0E1E               	movlw	low _troca_de_tela
  3074  0049CE  6F14               	movwf	(_p_tarefas+4)& (0+255),b
  3075  0049D0  0E19               	movlw	high _troca_de_tela
  3076  0049D2  6F15               	movwf	(_p_tarefas+5)& (0+255),b
  3077                           
  3078                           ; BSR set to: 1
  3079                           ;main.c: 182: tempo_backup[0] = 100;
  3080  0049D4  0E00               	movlw	0
  3081  0049D6  6F09               	movwf	(_tempo_backup+1)& (0+255),b
  3082  0049D8  0E64               	movlw	100
  3083  0049DA  6F08               	movwf	_tempo_backup& (0+255),b
  3084                           
  3085                           ; BSR set to: 1
  3086                           ;main.c: 183: tempo_backup[1] = 100;
  3087  0049DC  0E00               	movlw	0
  3088  0049DE  6F0B               	movwf	(_tempo_backup+3)& (0+255),b
  3089  0049E0  0E64               	movlw	100
  3090  0049E2  6F0A               	movwf	(_tempo_backup+2)& (0+255),b
  3091                           
  3092                           ; BSR set to: 1
  3093                           ;main.c: 184: tempo_backup[2] = 100;
  3094  0049E4  0E00               	movlw	0
  3095  0049E6  6F0D               	movwf	(_tempo_backup+5)& (0+255),b
  3096  0049E8  0E64               	movlw	100
  3097  0049EA  6F0C               	movwf	(_tempo_backup+4)& (0+255),b
  3098                           
  3099                           ; BSR set to: 1
  3100                           ;main.c: 185: tempo_backup[3] = 1000;
  3101  0049EC  0E03               	movlw	3
  3102  0049EE  6F0F               	movwf	(_tempo_backup+7)& (0+255),b
  3103  0049F0  0EE8               	movlw	232
  3104  0049F2  6F0E               	movwf	(_tempo_backup+6)& (0+255),b
  3105                           
  3106                           ; BSR set to: 1
  3107                           ;main.c: 188: tempo_tarefa[0] = 100;
  3108  0049F4  0E00               	movlw	0
  3109  0049F6  6F01               	movwf	(_tempo_tarefa+1)& (0+255),b
  3110  0049F8  0E64               	movlw	100
  3111  0049FA  6F00               	movwf	_tempo_tarefa& (0+255),b
  3112                           
  3113                           ; BSR set to: 1
  3114                           ;main.c: 189: tempo_tarefa[1] = 100;
  3115  0049FC  0E00               	movlw	0
  3116  0049FE  6F03               	movwf	(_tempo_tarefa+3)& (0+255),b
  3117  004A00  0E64               	movlw	100
  3118  004A02  6F02               	movwf	(_tempo_tarefa+2)& (0+255),b
  3119                           
  3120                           ; BSR set to: 1
  3121                           ;main.c: 190: tempo_tarefa[2] = 100;
  3122  004A04  0E00               	movlw	0
  3123  004A06  6F05               	movwf	(_tempo_tarefa+5)& (0+255),b
  3124  004A08  0E64               	movlw	100
  3125  004A0A  6F04               	movwf	(_tempo_tarefa+4)& (0+255),b
  3126                           
  3127                           ; BSR set to: 1
  3128                           ;main.c: 191: tempo_tarefa[3] = 1000;
  3129  004A0C  0E03               	movlw	3
  3130  004A0E  6F07               	movwf	(_tempo_tarefa+7)& (0+255),b
  3131  004A10  0EE8               	movlw	232
  3132  004A12  6F06               	movwf	(_tempo_tarefa+6)& (0+255),b
  3133                           
  3134                           ; BSR set to: 1
  3135                           ;main.c: 193: tarefa_em_execucao = 0;
  3136  004A14  0E00               	movlw	0
  3137  004A16  6E3D               	movwf	_tarefa_em_execucao^0,c	;volatile
  3138                           
  3139                           ; BSR set to: 1
  3140  004A18  0012               	return		;funcret
  3141  004A1A                     __end_of_inicializa_tarefas:
  3142                           	callstack 0
  3143                           
  3144 ;; *************** function _escalonador *****************
  3145 ;; Defined at:
  3146 ;;		line 204 in file "main.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;		None
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  cont            1  150[BANK0 ] unsigned char 
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  1    wreg      void 
  3153 ;; Registers used:
  3154 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 3F/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3160 ;;      Params:         0       0       0       0       0       0       0       0       0
  3161 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3162 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3163 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3164 ;;Total ram usage:        3 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; Hardware stack levels required when called:   17
  3167 ;; This function calls:
  3168 ;;		_disparo_gravacao
  3169 ;;		_troca_de_tela
  3170 ;;		_verifica_dados_operacionais
  3171 ;; This function is called by:
  3172 ;;		_main
  3173 ;; This function uses a non-reentrant model
  3174 ;;
  3175                           
  3176                           	psect	text11
  3177  00415E                     __ptext11:
  3178                           	callstack 0
  3179  00415E                     _escalonador:
  3180                           	callstack 13
  3181                           
  3182                           ;main.c: 206: unsigned char cont;;main.c: 207: for(cont = 0; cont<4;cont++)
  3183                           
  3184                           ; BSR set to: 1
  3185                           ;incstack = 0
  3186  00415E  0E00               	movlw	0
  3187  004160  0100               	movlb	0	; () banked
  3188  004162  6FF6               	movwf	escalonador@cont& (0+255),b
  3189  004164                     l12275:
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;main.c: 208: {;main.c: 209: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3193  004164  51F6               	movf	escalonador@cont& (0+255),w,b
  3194  004166  0D02               	mullw	2
  3195  004168  0E10               	movlw	low _p_tarefas
  3196  00416A  24F3               	addwf	243,w,c
  3197  00416C  6ED9               	movwf	fsr2l,c
  3198  00416E  0E01               	movlw	high _p_tarefas
  3199  004170  20F4               	addwfc	prodh,w,c
  3200  004172  6EDA               	movwf	fsr2h,c
  3201  004174  50DE               	movf	postinc2,w,c
  3202  004176  10DE               	iorwf	postinc2,w,c
  3203  004178  B4D8               	btfsc	status,2,c
  3204  00417A  D03F               	goto	l12287
  3205                           
  3206                           ; BSR set to: 0
  3207  00417C  51F6               	movf	escalonador@cont& (0+255),w,b
  3208  00417E  0D02               	mullw	2
  3209  004180  0E00               	movlw	low _tempo_tarefa
  3210  004182  24F3               	addwf	243,w,c
  3211  004184  6ED9               	movwf	fsr2l,c
  3212  004186  0E01               	movlw	high _tempo_tarefa
  3213  004188  20F4               	addwfc	prodh,w,c
  3214  00418A  6EDA               	movwf	fsr2h,c
  3215  00418C  50DE               	movf	postinc2,w,c
  3216  00418E  10DE               	iorwf	postinc2,w,c
  3217  004190  A4D8               	btfss	status,2,c
  3218  004192  D033               	goto	l12287
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;main.c: 210: {;main.c: 211: tarefa_em_execucao = 1;
  3222  004194  0E01               	movlw	1
  3223  004196  6E3D               	movwf	_tarefa_em_execucao^0,c	;volatile
  3224                           
  3225                           ;main.c: 212: timeout_tarefa = 10000;
  3226  004198  0E27               	movlw	39
  3227  00419A  0101               	movlb	1	; () banked
  3228  00419C  6F2F               	movwf	(_timeout_tarefa+1)& (0+255),b
  3229  00419E  0E10               	movlw	16
  3230  0041A0  6F2E               	movwf	_timeout_tarefa& (0+255),b
  3231                           
  3232                           ; BSR set to: 1
  3233                           ;main.c: 213: p_tarefas[cont]();
  3234  0041A2  0100               	movlb	0	; () banked
  3235  0041A4  51F6               	movf	escalonador@cont& (0+255),w,b
  3236  0041A6  0D02               	mullw	2
  3237  0041A8  0E10               	movlw	low _p_tarefas
  3238  0041AA  24F3               	addwf	243,w,c
  3239  0041AC  6ED9               	movwf	fsr2l,c
  3240  0041AE  0E01               	movlw	high _p_tarefas
  3241  0041B0  20F4               	addwfc	prodh,w,c
  3242  0041B2  6EDA               	movwf	fsr2h,c
  3243  0041B4  D801               	call	u15168
  3244  0041B6  D00A               	goto	u15169
  3245  0041B8                     u15168:
  3246  0041B8  0005               	push	
  3247  0041BA  6EFA               	movwf	pclath,c
  3248  0041BC  50DE               	movf	postinc2,w,c
  3249  0041BE  6EFD               	movwf	tosl,c
  3250  0041C0  50DE               	movf	postinc2,w,c
  3251  0041C2  6EFE               	movwf	tosh,c
  3252  0041C4  50F8               	movf	tblptru,w,c
  3253  0041C6  6EFF               	movwf	tosu,c
  3254  0041C8  50FA               	movf	pclath,w,c
  3255  0041CA  0012               	return		;indir
  3256  0041CC                     u15169:
  3257                           
  3258                           ;main.c: 214: tarefa_em_execucao = 0;
  3259  0041CC  0E00               	movlw	0
  3260  0041CE  6E3D               	movwf	_tarefa_em_execucao^0,c	;volatile
  3261                           
  3262                           ;main.c: 215: tempo_tarefa[cont] = tempo_backup[cont];
  3263  0041D0  0100               	movlb	0	; () banked
  3264  0041D2  51F6               	movf	escalonador@cont& (0+255),w,b
  3265  0041D4  0D02               	mullw	2
  3266  0041D6  0E08               	movlw	low _tempo_backup
  3267  0041D8  24F3               	addwf	243,w,c
  3268  0041DA  6ED9               	movwf	fsr2l,c
  3269  0041DC  0E01               	movlw	high _tempo_backup
  3270  0041DE  20F4               	addwfc	prodh,w,c
  3271  0041E0  6EDA               	movwf	fsr2h,c
  3272  0041E2  51F6               	movf	escalonador@cont& (0+255),w,b
  3273  0041E4  0D02               	mullw	2
  3274  0041E6  0E00               	movlw	low _tempo_tarefa
  3275  0041E8  24F3               	addwf	243,w,c
  3276  0041EA  6EE1               	movwf	fsr1l,c
  3277  0041EC  0E01               	movlw	high _tempo_tarefa
  3278  0041EE  20F4               	addwfc	prodh,w,c
  3279  0041F0  6EE2               	movwf	fsr1h,c
  3280  0041F2  CFDE FFE6          	movff	postinc2,postinc1
  3281  0041F6  CFDD FFE5          	movff	postdec2,postdec1
  3282  0041FA                     l12287:
  3283                           
  3284                           ; BSR set to: 0
  3285  0041FA  2BF6               	incf	escalonador@cont& (0+255),f,b
  3286                           
  3287                           ; BSR set to: 0
  3288  0041FC  0E03               	movlw	3
  3289  0041FE  65F6               	cpfsgt	escalonador@cont& (0+255),b
  3290  004200  D7B1               	goto	l12275
  3291  004202  0012               	return	
  3292  004204                     __end_of_escalonador:
  3293                           	callstack 0
  3294                           
  3295 ;; *************** function _troca_de_tela *****************
  3296 ;; Defined at:
  3297 ;;		line 393 in file "main.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;		None
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;		None
  3302 ;; Return value:  Size  Location     Type
  3303 ;;                  1    wreg      void 
  3304 ;; Registers used:
  3305 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3306 ;; Tracked objects:
  3307 ;;		On entry : 3F/0
  3308 ;;		On exit  : 0/0
  3309 ;;		Unchanged: 0/0
  3310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3311 ;;      Params:         0       0       0       0       0       0       0       0       0
  3312 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3313 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3314 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3315 ;;Total ram usage:        1 bytes
  3316 ;; Hardware stack levels used:    1
  3317 ;; Hardware stack levels required when called:    7
  3318 ;; This function calls:
  3319 ;;		_Latitude
  3320 ;;		_Longitude
  3321 ;;		_escreve_cmd_lcd
  3322 ;;		_escreve_frase_ram_lcd
  3323 ;;		_escreve_inteiro_lcd
  3324 ;;		_fix
  3325 ;;		_posicao_cursor_lcd
  3326 ;; This function is called by:
  3327 ;;		_inicializa_tarefas
  3328 ;;		_escalonador
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           	psect	text12
  3333  00191E                     __ptext12:
  3334                           	callstack 0
  3335  00191E                     _troca_de_tela:
  3336                           	callstack 22
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;main.c: 396: static unsigned char state = 0;;main.c: 397: static unsigned char last_sta
      +                          te = 0;;;main.c: 400: switch(fence_flag[2].point)
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;incstack = 0
  3343  00191E  D153               	goto	l11999
  3344  001920                     l1438:
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;main.c: 404: if(!PORTEbits.RE0 && !fence_flag[2].point || (state == 1 ))
  3348  001920  B084               	btfsc	132,0,c	;volatile
  3349  001922  D002               	goto	u14530
  3350                           
  3351                           ; BSR set to: 0
  3352  001924  A034               	btfss	(_fence_flag+2)^0,0,c
  3353  001926  D003               	goto	u14540
  3354  001928                     u14530:
  3355                           
  3356                           ; BSR set to: 0
  3357  001928  043C               	decf	troca_de_tela@state^0,w,c
  3358  00192A  A4D8               	btfss	status,2,c
  3359  00192C  D042               	goto	l11901
  3360  00192E                     u14540:
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;main.c: 405: {;main.c: 407: if(!time_atualizacao)
  3364  00192E  5035               	movf	_time_atualizacao^0,w,c
  3365  001930  1036               	iorwf	(_time_atualizacao+1)^0,w,c
  3366  001932  A4D8               	btfss	status,2,c
  3367  001934  D011               	goto	l11881
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;main.c: 408: {;main.c: 409: posicao_cursor_lcd(2,6);
  3371  001936  0E06               	movlw	6
  3372  001938  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3373  00193A  0E02               	movlw	2
  3374  00193C  EC0D  F025         	call	_posicao_cursor_lcd
  3375                           
  3376                           ;main.c: 410: escreve_frase_ram_lcd(fix());
  3377  001940  EC6B  F02A         	call	_fix	;wreg free
  3378  001944  C019  F01C         	movff	?_fix,escreve_frase_ram_lcd@buffer
  3379  001948  C01A  F01D         	movff	?_fix+1,escreve_frase_ram_lcd@buffer+1
  3380  00194C  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3381                           
  3382                           ;main.c: 411: time_atualizacao = 10000;
  3383  001950  0E27               	movlw	39
  3384  001952  6E36               	movwf	(_time_atualizacao+1)^0,c
  3385  001954  0E10               	movlw	16
  3386  001956  6E35               	movwf	_time_atualizacao^0,c
  3387  001958                     l11881:
  3388                           
  3389                           ;main.c: 412: };main.c: 414: if(last_state != 1)
  3390  001958  043B               	decf	troca_de_tela@last_state^0,w,c
  3391  00195A  B4D8               	btfsc	status,2,c
  3392  00195C  D028               	goto	l11899
  3393                           
  3394                           ;main.c: 415: {;main.c: 416: state = 1;
  3395  00195E  0E01               	movlw	1
  3396  001960  6E3C               	movwf	troca_de_tela@state^0,c
  3397                           
  3398                           ;main.c: 417: escreve_cmd_lcd(0b00000001);
  3399  001962  0E01               	movlw	1
  3400  001964  EC7A  F022         	call	_escreve_cmd_lcd
  3401                           
  3402                           ;main.c: 418: posicao_cursor_lcd(1,0);
  3403  001968  0E00               	movlw	0
  3404  00196A  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3405  00196C  0E01               	movlw	1
  3406  00196E  EC0D  F025         	call	_posicao_cursor_lcd
  3407                           
  3408                           ;main.c: 419: escreve_frase_ram_lcd("RPM:");
  3409  001972  0E5C               	movlw	low STR_27
  3410  001974  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3411  001976  0E62               	movlw	high STR_27
  3412  001978  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3413  00197A  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3414                           
  3415                           ;main.c: 420: posicao_cursor_lcd(2,0);
  3416  00197E  0E00               	movlw	0
  3417  001980  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3418  001982  0E02               	movlw	2
  3419  001984  EC0D  F025         	call	_posicao_cursor_lcd
  3420                           
  3421                           ;main.c: 421: escreve_frase_ram_lcd("VEL:");
  3422  001988  0E57               	movlw	low STR_28
  3423  00198A  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3424  00198C  0E62               	movlw	high STR_28
  3425  00198E  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3426  001990  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3427                           
  3428                           ;main.c: 422: posicao_cursor_lcd(2,6);
  3429  001994  0E06               	movlw	6
  3430  001996  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3431  001998  0E02               	movlw	2
  3432  00199A  EC0D  F025         	call	_posicao_cursor_lcd
  3433                           
  3434                           ;main.c: 423: escreve_frase_ram_lcd(fix());
  3435  00199E  EC6B  F02A         	call	_fix	;wreg free
  3436  0019A2  C019  F01C         	movff	?_fix,escreve_frase_ram_lcd@buffer
  3437  0019A6  C01A  F01D         	movff	?_fix+1,escreve_frase_ram_lcd@buffer+1
  3438  0019AA  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3439  0019AE                     l11899:
  3440                           
  3441                           ;main.c: 424: };main.c: 425: last_state = 1;
  3442  0019AE  0E01               	movlw	1
  3443  0019B0  6E3B               	movwf	troca_de_tela@last_state^0,c
  3444  0019B2                     l11901:
  3445                           
  3446                           ;main.c: 427: };main.c: 430: if(!PORTEbits.RE1 && !fence_flag[2].point || (state == 2))
  3447  0019B2  B284               	btfsc	132,1,c	;volatile
  3448  0019B4  D002               	goto	u14580
  3449  0019B6  A034               	btfss	(_fence_flag+2)^0,0,c
  3450  0019B8  D004               	goto	u14590
  3451  0019BA                     u14580:
  3452  0019BA  0E02               	movlw	2
  3453  0019BC  183C               	xorwf	troca_de_tela@state^0,w,c
  3454  0019BE  A4D8               	btfss	status,2,c
  3455  0019C0  D06D               	goto	l11945
  3456  0019C2                     u14590:
  3457                           
  3458                           ;main.c: 431: {;main.c: 432: if(!time_atualizacao)
  3459  0019C2  5035               	movf	_time_atualizacao^0,w,c
  3460  0019C4  1036               	iorwf	(_time_atualizacao+1)^0,w,c
  3461  0019C6  A4D8               	btfss	status,2,c
  3462  0019C8  D026               	goto	l11917
  3463                           
  3464                           ;main.c: 433: {;main.c: 434: point_buff_gps_lat = Latitude();
  3465  0019CA  EC66  F02A         	call	_Latitude	;wreg free
  3466  0019CE  C019  F0F9         	movff	?_Latitude,_point_buff_gps_lat
  3467  0019D2  C01A  F0FA         	movff	?_Latitude+1,_point_buff_gps_lat+1
  3468                           
  3469                           ;main.c: 435: point_buff_gps_long = Longitude();
  3470  0019D6  EC61  F02A         	call	_Longitude	;wreg free
  3471  0019DA  C019  F0F7         	movff	?_Longitude,_point_buff_gps_long
  3472  0019DE  C01A  F0F8         	movff	?_Longitude+1,_point_buff_gps_long+1
  3473                           
  3474                           ;main.c: 436: posicao_cursor_lcd(1,4);
  3475  0019E2  0E04               	movlw	4
  3476  0019E4  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3477  0019E6  0E01               	movlw	1
  3478  0019E8  EC0D  F025         	call	_posicao_cursor_lcd
  3479                           
  3480                           ;main.c: 437: escreve_frase_ram_lcd(point_buff_gps_lat);
  3481  0019EC  C0F9  F01C         	movff	_point_buff_gps_lat,escreve_frase_ram_lcd@buffer
  3482  0019F0  C0FA  F01D         	movff	_point_buff_gps_lat+1,escreve_frase_ram_lcd@buffer+1
  3483  0019F4  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3484                           
  3485                           ;main.c: 438: posicao_cursor_lcd(2,4);
  3486  0019F8  0E04               	movlw	4
  3487  0019FA  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3488  0019FC  0E02               	movlw	2
  3489  0019FE  EC0D  F025         	call	_posicao_cursor_lcd
  3490                           
  3491                           ;main.c: 439: escreve_frase_ram_lcd(point_buff_gps_long);
  3492  001A02  C0F7  F01C         	movff	_point_buff_gps_long,escreve_frase_ram_lcd@buffer
  3493  001A06  C0F8  F01D         	movff	_point_buff_gps_long+1,escreve_frase_ram_lcd@buffer+1
  3494  001A0A  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3495                           
  3496                           ;main.c: 440: time_atualizacao = 2000;
  3497  001A0E  0E07               	movlw	7
  3498  001A10  6E36               	movwf	(_time_atualizacao+1)^0,c
  3499  001A12  0ED0               	movlw	208
  3500  001A14  6E35               	movwf	_time_atualizacao^0,c
  3501  001A16                     l11917:
  3502                           
  3503                           ;main.c: 441: };main.c: 444: if(last_state != 2)
  3504  001A16  0E02               	movlw	2
  3505  001A18  183B               	xorwf	troca_de_tela@last_state^0,w,c
  3506  001A1A  B4D8               	btfsc	status,2,c
  3507  001A1C  D03D               	goto	l11943
  3508                           
  3509                           ;main.c: 445: {;main.c: 446: state = 2;
  3510  001A1E  0E02               	movlw	2
  3511  001A20  6E3C               	movwf	troca_de_tela@state^0,c
  3512                           
  3513                           ;main.c: 447: escreve_cmd_lcd(0b00000001);
  3514  001A22  0E01               	movlw	1
  3515  001A24  EC7A  F022         	call	_escreve_cmd_lcd
  3516                           
  3517                           ;main.c: 448: point_buff_gps_lat = Latitude();
  3518  001A28  EC66  F02A         	call	_Latitude	;wreg free
  3519  001A2C  C019  F0F9         	movff	?_Latitude,_point_buff_gps_lat
  3520  001A30  C01A  F0FA         	movff	?_Latitude+1,_point_buff_gps_lat+1
  3521                           
  3522                           ;main.c: 449: point_buff_gps_long = Longitude();
  3523  001A34  EC61  F02A         	call	_Longitude	;wreg free
  3524  001A38  C019  F0F7         	movff	?_Longitude,_point_buff_gps_long
  3525  001A3C  C01A  F0F8         	movff	?_Longitude+1,_point_buff_gps_long+1
  3526                           
  3527                           ;main.c: 450: posicao_cursor_lcd(1,0);
  3528  001A40  0E00               	movlw	0
  3529  001A42  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3530  001A44  0E01               	movlw	1
  3531  001A46  EC0D  F025         	call	_posicao_cursor_lcd
  3532                           
  3533                           ;main.c: 451: escreve_frase_ram_lcd("lt:");
  3534  001A4A  0E6F               	movlw	low STR_29
  3535  001A4C  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3536  001A4E  0E62               	movlw	high STR_29
  3537  001A50  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3538  001A52  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3539                           
  3540                           ;main.c: 452: posicao_cursor_lcd(1,4);
  3541  001A56  0E04               	movlw	4
  3542  001A58  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3543  001A5A  0E01               	movlw	1
  3544  001A5C  EC0D  F025         	call	_posicao_cursor_lcd
  3545                           
  3546                           ;main.c: 453: escreve_frase_ram_lcd(point_buff_gps_lat);
  3547  001A60  C0F9  F01C         	movff	_point_buff_gps_lat,escreve_frase_ram_lcd@buffer
  3548  001A64  C0FA  F01D         	movff	_point_buff_gps_lat+1,escreve_frase_ram_lcd@buffer+1
  3549  001A68  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3550                           
  3551                           ;main.c: 454: posicao_cursor_lcd(2,0);
  3552  001A6C  0E00               	movlw	0
  3553  001A6E  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3554  001A70  0E02               	movlw	2
  3555  001A72  EC0D  F025         	call	_posicao_cursor_lcd
  3556                           
  3557                           ;main.c: 455: escreve_frase_ram_lcd("lo:");
  3558  001A76  0E6B               	movlw	low STR_30
  3559  001A78  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3560  001A7A  0E62               	movlw	high STR_30
  3561  001A7C  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3562  001A7E  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3563                           
  3564                           ;main.c: 456: posicao_cursor_lcd(2,4);
  3565  001A82  0E04               	movlw	4
  3566  001A84  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3567  001A86  0E02               	movlw	2
  3568  001A88  EC0D  F025         	call	_posicao_cursor_lcd
  3569                           
  3570                           ;main.c: 457: escreve_frase_ram_lcd(point_buff_gps_long);
  3571  001A8C  C0F7  F01C         	movff	_point_buff_gps_long,escreve_frase_ram_lcd@buffer
  3572  001A90  C0F8  F01D         	movff	_point_buff_gps_long+1,escreve_frase_ram_lcd@buffer+1
  3573  001A94  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3574  001A98                     l11943:
  3575                           
  3576                           ;main.c: 458: };main.c: 459: last_state = 2;
  3577  001A98  0E02               	movlw	2
  3578  001A9A  6E3B               	movwf	troca_de_tela@last_state^0,c
  3579  001A9C                     l11945:
  3580                           
  3581                           ;main.c: 460: };main.c: 475: if(!state && !fence_flag[2].point)
  3582  001A9C  503C               	movf	troca_de_tela@state^0,w,c
  3583  001A9E  A4D8               	btfss	status,2,c
  3584  001AA0  0012               	return	
  3585  001AA2  B034               	btfsc	(_fence_flag+2)^0,0,c
  3586  001AA4  0012               	return	
  3587                           
  3588                           ;main.c: 476: {;main.c: 477: if(last_state != 4)
  3589  001AA6  0E04               	movlw	4
  3590  001AA8  183B               	xorwf	troca_de_tela@last_state^0,w,c
  3591  001AAA  B4D8               	btfsc	status,2,c
  3592  001AAC  D00E               	goto	l11955
  3593                           
  3594                           ;main.c: 478: {;main.c: 479: escreve_cmd_lcd(0b00000001);
  3595  001AAE  0E01               	movlw	1
  3596  001AB0  EC7A  F022         	call	_escreve_cmd_lcd
  3597                           
  3598                           ;main.c: 480: posicao_cursor_lcd(1,0);
  3599  001AB4  0E00               	movlw	0
  3600  001AB6  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3601  001AB8  0E01               	movlw	1
  3602  001ABA  EC0D  F025         	call	_posicao_cursor_lcd
  3603                           
  3604                           ;main.c: 481: escreve_frase_ram_lcd("B1:RPM  B2:FENCE");
  3605  001ABE  0E60               	movlw	low STR_31
  3606  001AC0  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3607  001AC2  0E61               	movlw	high STR_31
  3608  001AC4  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3609  001AC6  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3610  001ACA                     l11955:
  3611                           
  3612                           ;main.c: 483: };main.c: 484: last_state = 4;
  3613  001ACA  0E04               	movlw	4
  3614  001ACC  6E3B               	movwf	troca_de_tela@last_state^0,c
  3615  001ACE  0012               	return	
  3616  001AD0                     l1456:
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;main.c: 489: if(fence_flag[2].point || state == 3)
  3620  001AD0  B034               	btfsc	(_fence_flag+2)^0,0,c
  3621  001AD2  D004               	goto	u14660
  3622                           
  3623                           ; BSR set to: 0
  3624  001AD4  0E03               	movlw	3
  3625  001AD6  183C               	xorwf	troca_de_tela@state^0,w,c
  3626  001AD8  A4D8               	btfss	status,2,c
  3627  001ADA  0012               	return	
  3628  001ADC                     u14660:
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;main.c: 490: {;main.c: 492: if(!time_atualizacao)
  3632  001ADC  5035               	movf	_time_atualizacao^0,w,c
  3633  001ADE  1036               	iorwf	(_time_atualizacao+1)^0,w,c
  3634  001AE0  A4D8               	btfss	status,2,c
  3635  001AE2  D024               	goto	l11969
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;main.c: 493: {;main.c: 494: posicao_cursor_lcd(2,7);
  3639  001AE4  0E07               	movlw	7
  3640  001AE6  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3641  001AE8  0E02               	movlw	2
  3642  001AEA  EC0D  F025         	call	_posicao_cursor_lcd
  3643                           
  3644                           ;main.c: 495: escreve_inteiro_lcd(fence_flag[0].point);
  3645  001AEE  A032               	btfss	_fence_flag^0,0,c
  3646  001AF0  D003               	goto	u14680
  3647  001AF2  6A30               	clrf	??_troca_de_tela^0,c
  3648  001AF4  2A30               	incf	??_troca_de_tela^0,f,c
  3649  001AF6  D001               	goto	u14688
  3650  001AF8                     u14680:
  3651  001AF8  6A30               	clrf	??_troca_de_tela^0,c
  3652  001AFA                     u14688:
  3653  001AFA  5030               	movf	??_troca_de_tela^0,w,c
  3654  001AFC  6E2E               	movwf	escreve_inteiro_lcd@valor^0,c
  3655  001AFE  6A2F               	clrf	(escreve_inteiro_lcd@valor+1)^0,c
  3656  001B00  EC23  F028         	call	_escreve_inteiro_lcd	;wreg free
  3657                           
  3658                           ;main.c: 496: posicao_cursor_lcd(2,9);
  3659  001B04  0E09               	movlw	9
  3660  001B06  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3661  001B08  0E02               	movlw	2
  3662  001B0A  EC0D  F025         	call	_posicao_cursor_lcd
  3663                           
  3664                           ;main.c: 497: escreve_inteiro_lcd(fence_flag[1].point);
  3665  001B0E  A033               	btfss	(_fence_flag+1)^0,0,c
  3666  001B10  D003               	goto	u14690
  3667  001B12  6A30               	clrf	??_troca_de_tela^0,c
  3668  001B14  2A30               	incf	??_troca_de_tela^0,f,c
  3669  001B16  D001               	goto	u14698
  3670  001B18                     u14690:
  3671  001B18  6A30               	clrf	??_troca_de_tela^0,c
  3672  001B1A                     u14698:
  3673  001B1A  5030               	movf	??_troca_de_tela^0,w,c
  3674  001B1C  6E2E               	movwf	escreve_inteiro_lcd@valor^0,c
  3675  001B1E  6A2F               	clrf	(escreve_inteiro_lcd@valor+1)^0,c
  3676  001B20  EC23  F028         	call	_escreve_inteiro_lcd	;wreg free
  3677                           
  3678                           ;main.c: 498: time_atualizacao = 10000;
  3679  001B24  0E27               	movlw	39
  3680  001B26  6E36               	movwf	(_time_atualizacao+1)^0,c
  3681  001B28  0E10               	movlw	16
  3682  001B2A  6E35               	movwf	_time_atualizacao^0,c
  3683  001B2C                     l11969:
  3684                           
  3685                           ;main.c: 499: };main.c: 501: if(last_state != 3)
  3686  001B2C  0E03               	movlw	3
  3687  001B2E  183B               	xorwf	troca_de_tela@last_state^0,w,c
  3688  001B30  B4D8               	btfsc	status,2,c
  3689  001B32  D046               	goto	l11995
  3690                           
  3691                           ;main.c: 502: {;main.c: 503: state = 3;
  3692  001B34  0E03               	movlw	3
  3693  001B36  6E3C               	movwf	troca_de_tela@state^0,c
  3694                           
  3695                           ;main.c: 504: escreve_cmd_lcd(0b00000001);
  3696  001B38  0E01               	movlw	1
  3697  001B3A  EC7A  F022         	call	_escreve_cmd_lcd
  3698                           
  3699                           ;main.c: 505: posicao_cursor_lcd(1,0);
  3700  001B3E  0E00               	movlw	0
  3701  001B40  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3702  001B42  0E01               	movlw	1
  3703  001B44  EC0D  F025         	call	_posicao_cursor_lcd
  3704                           
  3705                           ;main.c: 506: escreve_frase_ram_lcd("REGIAO NEGADA");
  3706  001B48  0ED1               	movlw	low STR_32
  3707  001B4A  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3708  001B4C  0E61               	movlw	high STR_32
  3709  001B4E  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3710  001B50  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3711                           
  3712                           ;main.c: 507: posicao_cursor_lcd(2,0);
  3713  001B54  0E00               	movlw	0
  3714  001B56  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3715  001B58  0E02               	movlw	2
  3716  001B5A  EC0D  F025         	call	_posicao_cursor_lcd
  3717                           
  3718                           ;main.c: 508: escreve_frase_ram_lcd("LO-LT:");
  3719  001B5E  0E37               	movlw	low STR_33
  3720  001B60  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3721  001B62  0E62               	movlw	high STR_33
  3722  001B64  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3723  001B66  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3724                           
  3725                           ;main.c: 509: posicao_cursor_lcd(2,7);
  3726  001B6A  0E07               	movlw	7
  3727  001B6C  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3728  001B6E  0E02               	movlw	2
  3729  001B70  EC0D  F025         	call	_posicao_cursor_lcd
  3730                           
  3731                           ;main.c: 510: escreve_inteiro_lcd(fence_flag[0].point);
  3732  001B74  A032               	btfss	_fence_flag^0,0,c
  3733  001B76  D003               	goto	u14710
  3734  001B78  6A30               	clrf	??_troca_de_tela^0,c
  3735  001B7A  2A30               	incf	??_troca_de_tela^0,f,c
  3736  001B7C  D001               	goto	u14718
  3737  001B7E                     u14710:
  3738  001B7E  6A30               	clrf	??_troca_de_tela^0,c
  3739  001B80                     u14718:
  3740  001B80  5030               	movf	??_troca_de_tela^0,w,c
  3741  001B82  6E2E               	movwf	escreve_inteiro_lcd@valor^0,c
  3742  001B84  6A2F               	clrf	(escreve_inteiro_lcd@valor+1)^0,c
  3743  001B86  EC23  F028         	call	_escreve_inteiro_lcd	;wreg free
  3744                           
  3745                           ;main.c: 511: posicao_cursor_lcd(2,8);
  3746  001B8A  0E08               	movlw	8
  3747  001B8C  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3748  001B8E  0E02               	movlw	2
  3749  001B90  EC0D  F025         	call	_posicao_cursor_lcd
  3750                           
  3751                           ;main.c: 512: escreve_frase_ram_lcd("-");
  3752  001B94  0E7D               	movlw	low STR_34
  3753  001B96  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3754  001B98  0E62               	movlw	high STR_34
  3755  001B9A  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3756  001B9C  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
  3757                           
  3758                           ;main.c: 513: posicao_cursor_lcd(2,9);
  3759  001BA0  0E09               	movlw	9
  3760  001BA2  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3761  001BA4  0E02               	movlw	2
  3762  001BA6  EC0D  F025         	call	_posicao_cursor_lcd
  3763                           
  3764                           ;main.c: 514: escreve_inteiro_lcd(fence_flag[1].point);
  3765  001BAA  A033               	btfss	(_fence_flag+1)^0,0,c
  3766  001BAC  D003               	goto	u14720
  3767  001BAE  6A30               	clrf	??_troca_de_tela^0,c
  3768  001BB0  2A30               	incf	??_troca_de_tela^0,f,c
  3769  001BB2  D001               	goto	u14728
  3770  001BB4                     u14720:
  3771  001BB4  6A30               	clrf	??_troca_de_tela^0,c
  3772  001BB6                     u14728:
  3773  001BB6  5030               	movf	??_troca_de_tela^0,w,c
  3774  001BB8  6E2E               	movwf	escreve_inteiro_lcd@valor^0,c
  3775  001BBA  6A2F               	clrf	(escreve_inteiro_lcd@valor+1)^0,c
  3776  001BBC  EC23  F028         	call	_escreve_inteiro_lcd	;wreg free
  3777  001BC0                     l11995:
  3778                           
  3779                           ;main.c: 515: };main.c: 516: last_state = 3;
  3780  001BC0  0E03               	movlw	3
  3781  001BC2  6E3B               	movwf	troca_de_tela@last_state^0,c
  3782  001BC4  0012               	return	
  3783  001BC6                     l11999:
  3784                           
  3785                           ; BSR set to: 0
  3786  001BC6  A034               	btfss	(_fence_flag+2)^0,0,c
  3787  001BC8  D002               	goto	u14730
  3788  001BCA  0E01               	movlw	1
  3789  001BCC  D001               	goto	u14736
  3790  001BCE                     u14730:
  3791  001BCE  0E00               	movlw	0
  3792  001BD0                     u14736:
  3793                           
  3794                           ; Switch size 1, requested type "simple"
  3795                           ; Number of cases is 1, Range of values is 0 to 0
  3796                           ; switch strategies available:
  3797                           ; Name         Instructions Cycles
  3798                           ; simple_byte            4     3 (average)
  3799                           ;	Chosen strategy is simple_byte
  3800  001BD0  0A00               	xorlw	0	; case 0
  3801  001BD2  B4D8               	btfsc	status,2,c
  3802  001BD4  D6A5               	goto	l1438
  3803  001BD6  D77C               	goto	l1456
  3804  001BD8                     __end_of_troca_de_tela:
  3805                           	callstack 0
  3806                           
  3807 ;; *************** function _disparo_gravacao *****************
  3808 ;; Defined at:
  3809 ;;		line 354 in file "main.c"
  3810 ;; Parameters:    Size  Location     Type
  3811 ;;		None
  3812 ;; Auto vars:     Size  Location     Type
  3813 ;;  fix_gps         2  146[BANK0 ] PTR unsigned char 
  3814 ;;		 -> rawFix(2), 
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  1    wreg      void 
  3817 ;; Registers used:
  3818 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3819 ;; Tracked objects:
  3820 ;;		On entry : 3F/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3824 ;;      Params:         0       0       0       0       0       0       0       0       0
  3825 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3826 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3827 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3828 ;;Total ram usage:        3 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; Hardware stack levels required when called:   16
  3831 ;; This function calls:
  3832 ;;		_escrita_sdcard
  3833 ;;		_fix
  3834 ;;		_recebe_dados_gps
  3835 ;;		_verifica_fence_externo
  3836 ;; This function is called by:
  3837 ;;		_inicializa_tarefas
  3838 ;;		_escalonador
  3839 ;; This function uses a non-reentrant model
  3840 ;;
  3841                           
  3842                           	psect	text13
  3843  004F8A                     __ptext13:
  3844                           	callstack 0
  3845  004F8A                     _disparo_gravacao:
  3846                           	callstack 13
  3847                           
  3848                           ; BSR set to: 0
  3849                           ;main.c: 356: unsigned char *fix_gps;;main.c: 359: fix_gps = fix();
  3850                           
  3851                           ;incstack = 0
  3852  004F8A  EC6B  F02A         	call	_fix	;wreg free
  3853  004F8E  C019  F0F2         	movff	?_fix,disparo_gravacao@fix_gps
  3854  004F92  C01A  F0F3         	movff	?_fix+1,disparo_gravacao@fix_gps+1
  3855                           
  3856                           ;main.c: 360: if(!time_sd)
  3857  004F96  5037               	movf	_time_sd^0,w,c
  3858  004F98  1038               	iorwf	(_time_sd+1)^0,w,c
  3859  004F9A  A4D8               	btfss	status,2,c
  3860  004F9C  0012               	return	
  3861                           
  3862                           ;main.c: 361: {;main.c: 362: recebe_dados_gps();
  3863  004F9E  ECCB  F028         	call	_recebe_dados_gps	;wreg free
  3864                           
  3865                           ;main.c: 363: if(fix_gps[0] == '1')
  3866  004FA2  C0F2  FFD9         	movff	disparo_gravacao@fix_gps,fsr2l
  3867  004FA6  C0F3  FFDA         	movff	disparo_gravacao@fix_gps+1,fsr2h
  3868  004FAA  0E31               	movlw	49
  3869  004FAC  18DE               	xorwf	postinc2,w,c
  3870  004FAE  A4D8               	btfss	status,2,c
  3871  004FB0  D005               	goto	l11863
  3872                           
  3873                           ;main.c: 364: {;main.c: 365: verifica_fence_externo();
  3874  004FB2  EC05  F023         	call	_verifica_fence_externo	;wreg free
  3875                           
  3876                           ;main.c: 366: escrita_sdcard();
  3877  004FB6  ECF3  F01A         	call	_escrita_sdcard	;wreg free
  3878                           
  3879                           ;main.c: 367: }
  3880  004FBA  D002               	goto	l11865
  3881  004FBC                     l11863:
  3882                           
  3883                           ;main.c: 368: else;main.c: 369: {;main.c: 370: verifica_fence_externo();
  3884  004FBC  EC05  F023         	call	_verifica_fence_externo	;wreg free
  3885  004FC0                     l11865:
  3886                           
  3887                           ;main.c: 371: };main.c: 374: time_sd = 1000;
  3888  004FC0  0E03               	movlw	3
  3889  004FC2  6E38               	movwf	(_time_sd+1)^0,c
  3890  004FC4  0EE8               	movlw	232
  3891  004FC6  6E37               	movwf	_time_sd^0,c
  3892  004FC8  0012               	return		;funcret
  3893  004FCA                     __end_of_disparo_gravacao:
  3894                           	callstack 0
  3895                           
  3896 ;; *************** function _verifica_dados_operacionais *****************
  3897 ;; Defined at:
  3898 ;;		line 324 in file "main.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;		None
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;  rpm             4    0        unsigned char [4]
  3903 ;; Return value:  Size  Location     Type
  3904 ;;                  1    wreg      void 
  3905 ;; Registers used:
  3906 ;;		wreg, status,2, status,0
  3907 ;; Tracked objects:
  3908 ;;		On entry : 3F/0
  3909 ;;		On exit  : 3F/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3912 ;;      Params:         0       0       0       0       0       0       0       0       0
  3913 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3914 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3915 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3916 ;;Total ram usage:        0 bytes
  3917 ;; Hardware stack levels used:    1
  3918 ;; Hardware stack levels required when called:    3
  3919 ;; This function calls:
  3920 ;;		Nothing
  3921 ;; This function is called by:
  3922 ;;		_inicializa_tarefas
  3923 ;;		_escalonador
  3924 ;; This function uses a non-reentrant model
  3925 ;;
  3926                           
  3927                           	psect	text14
  3928  00546C                     __ptext14:
  3929                           	callstack 0
  3930  00546C                     _verifica_dados_operacionais:
  3931                           	callstack 26
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;main.c: 326: unsigned char rpm[4];;main.c: 330: if(!time_sd)
  3935                           
  3936                           ;incstack = 0
  3937  00546C  5037               	movf	_time_sd^0,w,c
  3938  00546E  1038               	iorwf	(_time_sd+1)^0,w,c
  3939  005470  A4D8               	btfss	status,2,c
  3940  005472  0012               	return	
  3941                           
  3942                           ; BSR set to: 0
  3943                           ;main.c: 331: {;main.c: 333: flag_anomalia = 0;
  3944  005474  0E00               	movlw	0
  3945  005476  6FFB               	movwf	_flag_anomalia& (0+255),b
  3946                           
  3947                           ; BSR set to: 0
  3948  005478  0012               	return		;funcret
  3949  00547A                     __end_of_verifica_dados_operacionais:
  3950                           	callstack 0
  3951                           
  3952 ;; *************** function _escreve_inteiro_lcd *****************
  3953 ;; Defined at:
  3954 ;;		line 376 in file "bibliotecas/display_lcd.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;  valor           2   45[COMRAM] int 
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;  texto           7    0[BANK0 ] unsigned char [7]
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      void 
  3961 ;; Registers used:
  3962 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3968 ;;      Params:         2       0       0       0       0       0       0       0       0
  3969 ;;      Locals:         0       7       0       0       0       0       0       0       0
  3970 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3971 ;;      Totals:         2       7       0       0       0       0       0       0       0
  3972 ;;Total ram usage:        9 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    6
  3975 ;; This function calls:
  3976 ;;		_escreve_frase_ram_lcd
  3977 ;;		_itoa
  3978 ;; This function is called by:
  3979 ;;		_troca_de_tela
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983                           	psect	text15
  3984  005046                     __ptext15:
  3985                           	callstack 0
  3986  005046                     _escreve_inteiro_lcd:
  3987                           	callstack 22
  3988                           
  3989                           ;display_lcd.c: 378: char texto[7] = "000000";
  3990                           
  3991                           ; BSR set to: 0
  3992                           ;incstack = 0
  3993  005046  EE21  F0F6         	lfsr	2,escreve_inteiro_lcd@F3223
  3994  00504A  EE10  F060         	lfsr	1,escreve_inteiro_lcd@texto
  3995  00504E  0E06               	movlw	6
  3996  005050                     u14411:
  3997  005050  CFDB FFE3          	movff	plusw2,plusw1
  3998  005054  06E8               	decf	wreg,f,c
  3999  005056  E2FC               	bc	u14411
  4000                           
  4001                           ;display_lcd.c: 379: itoa(texto,valor, 10);
  4002  005058  0E60               	movlw	low escreve_inteiro_lcd@texto
  4003  00505A  6E28               	movwf	itoa@buf^0,c
  4004  00505C  C02E  F029         	movff	escreve_inteiro_lcd@valor,itoa@val
  4005  005060  C02F  F02A         	movff	escreve_inteiro_lcd@valor+1,itoa@val+1
  4006  005064  0E00               	movlw	0
  4007  005066  6E2C               	movwf	(itoa@base+1)^0,c
  4008  005068  0E0A               	movlw	10
  4009  00506A  6E2B               	movwf	itoa@base^0,c
  4010  00506C  EC59  F028         	call	_itoa	;wreg free
  4011                           
  4012                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
  4013  005070  0E60               	movlw	low escreve_inteiro_lcd@texto
  4014  005072  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  4015  005074  6A1D               	clrf	(escreve_frase_ram_lcd@buffer+1)^0,c
  4016  005076  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
  4017  00507A  0012               	return		;funcret
  4018  00507C                     __end_of_escreve_inteiro_lcd:
  4019                           	callstack 0
  4020                           
  4021 ;; *************** function _itoa *****************
  4022 ;; Defined at:
  4023 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\itoa.c"
  4024 ;; Parameters:    Size  Location     Type
  4025 ;;  buf             1   39[COMRAM] PTR unsigned char 
  4026 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  4027 ;;  val             2   40[COMRAM] int 
  4028 ;;  base            2   42[COMRAM] int 
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;  cp              1    0        PTR unsigned char 
  4031 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  1    wreg      PTR unsigned char 
  4034 ;; Registers used:
  4035 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4041 ;;      Params:         5       0       0       0       0       0       0       0       0
  4042 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4043 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4044 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4045 ;;Total ram usage:        6 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    5
  4048 ;; This function calls:
  4049 ;;		_utoa
  4050 ;; This function is called by:
  4051 ;;		_escreve_inteiro_lcd
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           	psect	text16
  4056  0050B2                     __ptext16:
  4057                           	callstack 0
  4058  0050B2                     _itoa:
  4059                           	callstack 22
  4060                           
  4061                           ;incstack = 0
  4062  0050B2  AE2A               	btfss	(itoa@val+1)^0,7,c
  4063  0050B4  D00A               	goto	l11261
  4064  0050B6  5028               	movf	itoa@buf^0,w,c
  4065  0050B8  6ED9               	movwf	fsr2l,c
  4066  0050BA  6ADA               	clrf	fsr2h,c
  4067  0050BC  0E2D               	movlw	45
  4068  0050BE  6EDF               	movwf	indf2,c
  4069  0050C0  2A28               	incf	itoa@buf^0,f,c
  4070  0050C2  6C29               	negf	itoa@val^0,c
  4071  0050C4  1E2A               	comf	(itoa@val+1)^0,f,c
  4072  0050C6  B0D8               	btfsc	status,0,c
  4073  0050C8  2A2A               	incf	(itoa@val+1)^0,f,c
  4074  0050CA                     l11261:
  4075  0050CA  C028  F020         	movff	itoa@buf,utoa@buf
  4076  0050CE  C029  F021         	movff	itoa@val,utoa@val
  4077  0050D2  C02A  F022         	movff	itoa@val+1,utoa@val+1
  4078  0050D6  C02B  F023         	movff	itoa@base,utoa@base
  4079  0050DA  C02C  F024         	movff	itoa@base+1,utoa@base+1
  4080  0050DE  EC9F  F021         	call	_utoa	;wreg free
  4081  0050E2  0012               	return		;funcret
  4082  0050E4                     __end_of_itoa:
  4083                           	callstack 0
  4084                           
  4085 ;; *************** function _utoa *****************
  4086 ;; Defined at:
  4087 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\itoa.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;  buf             1   31[COMRAM] PTR unsigned char 
  4090 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  4091 ;;  val             2   32[COMRAM] unsigned int 
  4092 ;;  base            2   34[COMRAM] int 
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;  v               2   36[COMRAM] unsigned int 
  4095 ;;  c               1   38[COMRAM] unsigned char 
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  1    wreg      PTR unsigned char 
  4098 ;; Registers used:
  4099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4105 ;;      Params:         5       0       0       0       0       0       0       0       0
  4106 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4107 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4108 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4109 ;;Total ram usage:        8 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; Hardware stack levels required when called:    4
  4112 ;; This function calls:
  4113 ;;		___lwdiv
  4114 ;;		___lwmod
  4115 ;; This function is called by:
  4116 ;;		_itoa
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           	psect	text17
  4121  00433E                     __ptext17:
  4122                           	callstack 0
  4123  00433E                     _utoa:
  4124                           	callstack 22
  4125                           
  4126                           ;incstack = 0
  4127  00433E  C021  F025         	movff	utoa@val,utoa@v
  4128  004342  C022  F026         	movff	utoa@val+1,utoa@v+1
  4129  004346                     l11225:
  4130  004346  C025  F019         	movff	utoa@v,___lwdiv@dividend
  4131  00434A  C026  F01A         	movff	utoa@v+1,___lwdiv@dividend+1
  4132  00434E  C023  F01B         	movff	utoa@base,___lwdiv@divisor
  4133  004352  C024  F01C         	movff	utoa@base+1,___lwdiv@divisor+1
  4134  004356  ECEB  F025         	call	___lwdiv	;wreg free
  4135  00435A  C019  F025         	movff	?___lwdiv,utoa@v
  4136  00435E  C01A  F026         	movff	?___lwdiv+1,utoa@v+1
  4137  004362  2A20               	incf	utoa@buf^0,f,c
  4138  004364  5025               	movf	utoa@v^0,w,c
  4139  004366  1026               	iorwf	(utoa@v+1)^0,w,c
  4140  004368  A4D8               	btfss	status,2,c
  4141  00436A  D7ED               	goto	l11225
  4142  00436C  5020               	movf	utoa@buf^0,w,c
  4143  00436E  6ED9               	movwf	fsr2l,c
  4144  004370  6ADA               	clrf	fsr2h,c
  4145  004372  0E00               	movlw	0
  4146  004374  6EDF               	movwf	indf2,c
  4147  004376  0620               	decf	utoa@buf^0,f,c
  4148  004378                     l11235:
  4149  004378  C021  F019         	movff	utoa@val,___lwmod@dividend
  4150  00437C  C022  F01A         	movff	utoa@val+1,___lwmod@dividend+1
  4151  004380  C023  F01B         	movff	utoa@base,___lwmod@divisor
  4152  004384  C024  F01C         	movff	utoa@base+1,___lwmod@divisor+1
  4153  004388  EC83  F027         	call	___lwmod	;wreg free
  4154  00438C  5019               	movf	?___lwmod^0,w,c
  4155  00438E  6E27               	movwf	utoa@c^0,c
  4156  004390  C021  F019         	movff	utoa@val,___lwdiv@dividend
  4157  004394  C022  F01A         	movff	utoa@val+1,___lwdiv@dividend+1
  4158  004398  C023  F01B         	movff	utoa@base,___lwdiv@divisor
  4159  00439C  C024  F01C         	movff	utoa@base+1,___lwdiv@divisor+1
  4160  0043A0  ECEB  F025         	call	___lwdiv	;wreg free
  4161  0043A4  C019  F021         	movff	?___lwdiv,utoa@val
  4162  0043A8  C01A  F022         	movff	?___lwdiv+1,utoa@val+1
  4163  0043AC  0E09               	movlw	9
  4164  0043AE  6427               	cpfsgt	utoa@c^0,c
  4165  0043B0  D002               	goto	l2341
  4166  0043B2  0E07               	movlw	7
  4167  0043B4  2627               	addwf	utoa@c^0,f,c
  4168  0043B6                     l2341:
  4169  0043B6  0E30               	movlw	48
  4170  0043B8  2627               	addwf	utoa@c^0,f,c
  4171  0043BA  5020               	movf	utoa@buf^0,w,c
  4172  0043BC  6ED9               	movwf	fsr2l,c
  4173  0043BE  6ADA               	clrf	fsr2h,c
  4174  0043C0  C027  FFDF         	movff	utoa@c,indf2
  4175  0043C4  0620               	decf	utoa@buf^0,f,c
  4176  0043C6  5021               	movf	utoa@val^0,w,c
  4177  0043C8  1022               	iorwf	(utoa@val+1)^0,w,c
  4178  0043CA  A4D8               	btfss	status,2,c
  4179  0043CC  D7D5               	goto	l11235
  4180                           
  4181                           ;	Return value of _utoa is never used
  4182  0043CE  2A20               	incf	utoa@buf^0,f,c
  4183  0043D0  0012               	return		;funcret
  4184  0043D2                     __end_of_utoa:
  4185                           	callstack 0
  4186                           
  4187 ;; *************** function ___lwmod *****************
  4188 ;; Defined at:
  4189 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\lwmod.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;  dividend        2   24[COMRAM] unsigned int 
  4192 ;;  divisor         2   26[COMRAM] unsigned int 
  4193 ;; Auto vars:     Size  Location     Type
  4194 ;;  counter         1   28[COMRAM] unsigned char 
  4195 ;; Return value:  Size  Location     Type
  4196 ;;                  2   24[COMRAM] unsigned int 
  4197 ;; Registers used:
  4198 ;;		wreg, status,2, status,0
  4199 ;; Tracked objects:
  4200 ;;		On entry : 0/0
  4201 ;;		On exit  : 0/0
  4202 ;;		Unchanged: 0/0
  4203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4204 ;;      Params:         4       0       0       0       0       0       0       0       0
  4205 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4206 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4207 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4208 ;;Total ram usage:        5 bytes
  4209 ;; Hardware stack levels used:    1
  4210 ;; Hardware stack levels required when called:    3
  4211 ;; This function calls:
  4212 ;;		Nothing
  4213 ;; This function is called by:
  4214 ;;		_utoa
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           	psect	text18
  4219  004F06                     __ptext18:
  4220                           	callstack 0
  4221  004F06                     ___lwmod:
  4222                           	callstack 22
  4223                           
  4224                           ;incstack = 0
  4225  004F06  501B               	movf	___lwmod@divisor^0,w,c
  4226  004F08  101C               	iorwf	(___lwmod@divisor+1)^0,w,c
  4227  004F0A  B4D8               	btfsc	status,2,c
  4228  004F0C  D018               	goto	l2135
  4229  004F0E  0E01               	movlw	1
  4230  004F10  6E1D               	movwf	___lwmod@counter^0,c
  4231  004F12  D004               	goto	l10835
  4232  004F14                     l10833:
  4233  004F14  90D8               	bcf	status,0,c
  4234  004F16  361B               	rlcf	___lwmod@divisor^0,f,c
  4235  004F18  361C               	rlcf	(___lwmod@divisor+1)^0,f,c
  4236  004F1A  2A1D               	incf	___lwmod@counter^0,f,c
  4237  004F1C                     l10835:
  4238  004F1C  AE1C               	btfss	(___lwmod@divisor+1)^0,7,c
  4239  004F1E  D7FA               	goto	l10833
  4240  004F20                     u12770:
  4241  004F20  501B               	movf	___lwmod@divisor^0,w,c
  4242  004F22  5C19               	subwf	___lwmod@dividend^0,w,c
  4243  004F24  501C               	movf	(___lwmod@divisor+1)^0,w,c
  4244  004F26  581A               	subwfb	(___lwmod@dividend+1)^0,w,c
  4245  004F28  A0D8               	btfss	status,0,c
  4246  004F2A  D004               	goto	l10841
  4247  004F2C  501B               	movf	___lwmod@divisor^0,w,c
  4248  004F2E  5E19               	subwf	___lwmod@dividend^0,f,c
  4249  004F30  501C               	movf	(___lwmod@divisor+1)^0,w,c
  4250  004F32  5A1A               	subwfb	(___lwmod@dividend+1)^0,f,c
  4251  004F34                     l10841:
  4252  004F34  90D8               	bcf	status,0,c
  4253  004F36  321C               	rrcf	(___lwmod@divisor+1)^0,f,c
  4254  004F38  321B               	rrcf	___lwmod@divisor^0,f,c
  4255  004F3A  2E1D               	decfsz	___lwmod@counter^0,f,c
  4256  004F3C  D7F1               	goto	u12770
  4257  004F3E                     l2135:
  4258  004F3E  C019  F019         	movff	___lwmod@dividend,?___lwmod
  4259  004F42  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  4260  004F46  0012               	return		;funcret
  4261  004F48                     __end_of___lwmod:
  4262                           	callstack 0
  4263                           
  4264 ;; *************** function ___lwdiv *****************
  4265 ;; Defined at:
  4266 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;  dividend        2   24[COMRAM] unsigned int 
  4269 ;;  divisor         2   26[COMRAM] unsigned int 
  4270 ;; Auto vars:     Size  Location     Type
  4271 ;;  quotient        2   29[COMRAM] unsigned int 
  4272 ;;  counter         1   28[COMRAM] unsigned char 
  4273 ;; Return value:  Size  Location     Type
  4274 ;;                  2   24[COMRAM] unsigned int 
  4275 ;; Registers used:
  4276 ;;		wreg, status,2, status,0
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4282 ;;      Params:         4       0       0       0       0       0       0       0       0
  4283 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4284 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4285 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4286 ;;Total ram usage:        7 bytes
  4287 ;; Hardware stack levels used:    1
  4288 ;; Hardware stack levels required when called:    3
  4289 ;; This function calls:
  4290 ;;		Nothing
  4291 ;; This function is called by:
  4292 ;;		_utoa
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296                           	psect	text19
  4297  004BD6                     __ptext19:
  4298                           	callstack 0
  4299  004BD6                     ___lwdiv:
  4300                           	callstack 22
  4301                           
  4302                           ;incstack = 0
  4303  004BD6  0E00               	movlw	0
  4304  004BD8  6E1F               	movwf	(___lwdiv@quotient+1)^0,c
  4305  004BDA  0E00               	movlw	0
  4306  004BDC  6E1E               	movwf	___lwdiv@quotient^0,c
  4307  004BDE  501B               	movf	___lwdiv@divisor^0,w,c
  4308  004BE0  101C               	iorwf	(___lwdiv@divisor+1)^0,w,c
  4309  004BE2  B4D8               	btfsc	status,2,c
  4310  004BE4  D01C               	goto	l2125
  4311  004BE6  0E01               	movlw	1
  4312  004BE8  6E1D               	movwf	___lwdiv@counter^0,c
  4313  004BEA  D004               	goto	l10815
  4314  004BEC                     l10813:
  4315  004BEC  90D8               	bcf	status,0,c
  4316  004BEE  361B               	rlcf	___lwdiv@divisor^0,f,c
  4317  004BF0  361C               	rlcf	(___lwdiv@divisor+1)^0,f,c
  4318  004BF2  2A1D               	incf	___lwdiv@counter^0,f,c
  4319  004BF4                     l10815:
  4320  004BF4  AE1C               	btfss	(___lwdiv@divisor+1)^0,7,c
  4321  004BF6  D7FA               	goto	l10813
  4322  004BF8                     u12740:
  4323  004BF8  90D8               	bcf	status,0,c
  4324  004BFA  361E               	rlcf	___lwdiv@quotient^0,f,c
  4325  004BFC  361F               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4326  004BFE  501B               	movf	___lwdiv@divisor^0,w,c
  4327  004C00  5C19               	subwf	___lwdiv@dividend^0,w,c
  4328  004C02  501C               	movf	(___lwdiv@divisor+1)^0,w,c
  4329  004C04  581A               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4330  004C06  A0D8               	btfss	status,0,c
  4331  004C08  D005               	goto	l10825
  4332  004C0A  501B               	movf	___lwdiv@divisor^0,w,c
  4333  004C0C  5E19               	subwf	___lwdiv@dividend^0,f,c
  4334  004C0E  501C               	movf	(___lwdiv@divisor+1)^0,w,c
  4335  004C10  5A1A               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4336  004C12  801E               	bsf	___lwdiv@quotient^0,0,c
  4337  004C14                     l10825:
  4338  004C14  90D8               	bcf	status,0,c
  4339  004C16  321C               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4340  004C18  321B               	rrcf	___lwdiv@divisor^0,f,c
  4341  004C1A  2E1D               	decfsz	___lwdiv@counter^0,f,c
  4342  004C1C  D7ED               	goto	u12740
  4343  004C1E                     l2125:
  4344  004C1E  C01E  F019         	movff	___lwdiv@quotient,?___lwdiv
  4345  004C22  C01F  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4346  004C26  0012               	return		;funcret
  4347  004C28                     __end_of___lwdiv:
  4348                           	callstack 0
  4349                           
  4350 ;; *************** function _escreve_cmd_lcd *****************
  4351 ;; Defined at:
  4352 ;;		line 162 in file "bibliotecas/display_lcd.c"
  4353 ;; Parameters:    Size  Location     Type
  4354 ;;  comando         1    wreg     unsigned char 
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;  comando         1   26[COMRAM] unsigned char 
  4357 ;; Return value:  Size  Location     Type
  4358 ;;                  1    wreg      void 
  4359 ;; Registers used:
  4360 ;;		wreg, status,2, status,0, cstack
  4361 ;; Tracked objects:
  4362 ;;		On entry : 0/0
  4363 ;;		On exit  : 0/0
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4366 ;;      Params:         0       0       0       0       0       0       0       0       0
  4367 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4368 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4369 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4370 ;;Total ram usage:        1 bytes
  4371 ;; Hardware stack levels used:    1
  4372 ;; Hardware stack levels required when called:    4
  4373 ;; This function calls:
  4374 ;;		_delay
  4375 ;; This function is called by:
  4376 ;;		_init_lcd
  4377 ;;		_mensagem_inicial
  4378 ;;		_troca_de_tela
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           	psect	text20
  4383  0044F4                     __ptext20:
  4384                           	callstack 0
  4385  0044F4                     _escreve_cmd_lcd:
  4386                           	callstack 25
  4387                           
  4388                           ;incstack = 0
  4389                           ;escreve_cmd_lcd@comando stored from wreg
  4390  0044F4  6E1B               	movwf	escreve_cmd_lcd@comando^0,c
  4391                           
  4392                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
  4393  0044F6  9483               	bcf	131,2,c	;volatile
  4394                           
  4395                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
  4396  0044F8  9283               	bcf	131,1,c	;volatile
  4397                           
  4398                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
  4399  0044FA  9083               	bcf	131,0,c	;volatile
  4400                           
  4401                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
  4402  0044FC  A81B               	btfss	escreve_cmd_lcd@comando^0,4,c
  4403  0044FE  D002               	goto	l191
  4404  004500  8883               	bsf	131,4,c	;volatile
  4405  004502  D001               	goto	l11709
  4406  004504                     l191:
  4407                           
  4408                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
  4409  004504  9883               	bcf	131,4,c	;volatile
  4410  004506                     l11709:
  4411                           
  4412                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
  4413  004506  AA1B               	btfss	escreve_cmd_lcd@comando^0,5,c
  4414  004508  D002               	goto	l193
  4415  00450A  8A83               	bsf	131,5,c	;volatile
  4416  00450C  D001               	goto	l11713
  4417  00450E                     l193:
  4418                           
  4419                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
  4420  00450E  9A83               	bcf	131,5,c	;volatile
  4421  004510                     l11713:
  4422                           
  4423                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
  4424  004510  AC1B               	btfss	escreve_cmd_lcd@comando^0,6,c
  4425  004512  D002               	goto	l195
  4426  004514  8C83               	bsf	131,6,c	;volatile
  4427  004516  D001               	goto	l11717
  4428  004518                     l195:
  4429                           
  4430                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
  4431  004518  9C83               	bcf	131,6,c	;volatile
  4432  00451A                     l11717:
  4433                           
  4434                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
  4435  00451A  AE1B               	btfss	escreve_cmd_lcd@comando^0,7,c
  4436  00451C  D002               	goto	l197
  4437  00451E  8E83               	bsf	131,7,c	;volatile
  4438  004520  D001               	goto	l198
  4439  004522                     l197:
  4440                           
  4441                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
  4442  004522  9E83               	bcf	131,7,c	;volatile
  4443  004524                     l198:
  4444                           
  4445                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
  4446  004524  8083               	bsf	131,0,c	;volatile
  4447                           
  4448                           ;display_lcd.c: 181: delay();
  4449  004526  ECBE  F029         	call	_delay	;wreg free
  4450                           
  4451                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
  4452  00452A  9083               	bcf	131,0,c	;volatile
  4453                           
  4454                           ;display_lcd.c: 183: delay();
  4455  00452C  ECBE  F029         	call	_delay	;wreg free
  4456                           
  4457                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
  4458  004530  A01B               	btfss	escreve_cmd_lcd@comando^0,0,c
  4459  004532  D002               	goto	l199
  4460  004534  8883               	bsf	131,4,c	;volatile
  4461  004536  D001               	goto	l200
  4462  004538                     l199:
  4463                           
  4464                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
  4465  004538  9883               	bcf	131,4,c	;volatile
  4466  00453A                     l200:
  4467                           
  4468                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
  4469  00453A  A21B               	btfss	escreve_cmd_lcd@comando^0,1,c
  4470  00453C  D002               	goto	l201
  4471  00453E  8A83               	bsf	131,5,c	;volatile
  4472  004540  D001               	goto	l202
  4473  004542                     l201:
  4474                           
  4475                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
  4476  004542  9A83               	bcf	131,5,c	;volatile
  4477  004544                     l202:
  4478                           
  4479                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
  4480  004544  A41B               	btfss	escreve_cmd_lcd@comando^0,2,c
  4481  004546  D002               	goto	l203
  4482  004548  8C83               	bsf	131,6,c	;volatile
  4483  00454A  D001               	goto	l204
  4484  00454C                     l203:
  4485                           
  4486                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
  4487  00454C  9C83               	bcf	131,6,c	;volatile
  4488  00454E                     l204:
  4489                           
  4490                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
  4491  00454E  A61B               	btfss	escreve_cmd_lcd@comando^0,3,c
  4492  004550  D002               	goto	l205
  4493  004552  8E83               	bsf	131,7,c	;volatile
  4494  004554  D001               	goto	l206
  4495  004556                     l205:
  4496                           
  4497                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
  4498  004556  9E83               	bcf	131,7,c	;volatile
  4499  004558                     l206:
  4500                           
  4501                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
  4502  004558  8083               	bsf	131,0,c	;volatile
  4503                           
  4504                           ;display_lcd.c: 197: delay();
  4505  00455A  ECBE  F029         	call	_delay	;wreg free
  4506                           
  4507                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
  4508  00455E  9083               	bcf	131,0,c	;volatile
  4509                           
  4510                           ;display_lcd.c: 199: delay();
  4511  004560  ECBE  F029         	call	_delay	;wreg free
  4512                           
  4513                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
  4514  004564  041B               	decf	escreve_cmd_lcd@comando^0,w,c
  4515  004566  B4D8               	btfsc	status,2,c
  4516  004568  D008               	goto	u14400
  4517  00456A  0E02               	movlw	2
  4518  00456C  181B               	xorwf	escreve_cmd_lcd@comando^0,w,c
  4519  00456E  B4D8               	btfsc	status,2,c
  4520  004570  D004               	goto	u14400
  4521  004572  0E03               	movlw	3
  4522  004574  181B               	xorwf	escreve_cmd_lcd@comando^0,w,c
  4523  004576  A4D8               	btfss	status,2,c
  4524  004578  0012               	return	
  4525  00457A                     u14400:
  4526                           
  4527                           ;display_lcd.c: 205: { delay(); }
  4528  00457A  ECBE  F029         	call	_delay	;wreg free
  4529  00457E  0012               	return		;funcret
  4530  004580                     __end_of_escreve_cmd_lcd:
  4531                           	callstack 0
  4532                           
  4533 ;; *************** function _verifica_fence_externo *****************
  4534 ;; Defined at:
  4535 ;;		line 279 in file "main.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;		None
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;		None
  4540 ;; Return value:  Size  Location     Type
  4541 ;;                  1    wreg      void 
  4542 ;; Registers used:
  4543 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4549 ;;      Params:         0       0       0       0       0       0       0       0       0
  4550 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4551 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4552 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4553 ;;Total ram usage:        1 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; Hardware stack levels required when called:    7
  4556 ;; This function calls:
  4557 ;;		_armazena_latitude
  4558 ;;		_armazena_longitude
  4559 ;;		_calcula_diff_graus
  4560 ;;		_calcula_diff_minutos
  4561 ;;		_monta_sd
  4562 ;;		_verifica_diferenca_graus
  4563 ;;		_verifica_diferenca_minutos
  4564 ;;		_verifica_plausibilidade_lat
  4565 ;;		_verifica_plausibilidade_long
  4566 ;; This function is called by:
  4567 ;;		_disparo_gravacao
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           	psect	text21
  4572  00460A                     __ptext21:
  4573                           	callstack 0
  4574  00460A                     _verifica_fence_externo:
  4575                           	callstack 21
  4576                           
  4577                           ;main.c: 281: armazena_latitude();
  4578                           
  4579                           ;incstack = 0
  4580  00460A  ECF5  F029         	call	_armazena_latitude	;wreg free
  4581                           
  4582                           ;main.c: 282: armazena_longitude();
  4583  00460E  ECE8  F029         	call	_armazena_longitude	;wreg free
  4584                           
  4585                           ;main.c: 284: verifica_diferenca_graus(0);
  4586  004612  0E00               	movlw	0
  4587  004614  EC74  F016         	call	_verifica_diferenca_graus
  4588                           
  4589                           ;main.c: 285: calcula_diff_graus(0);
  4590  004618  0E00               	movlw	0
  4591  00461A  ECBA  F01D         	call	_calcula_diff_graus
  4592                           
  4593                           ;main.c: 287: verifica_diferenca_graus(1);
  4594  00461E  0E01               	movlw	1
  4595  004620  EC74  F016         	call	_verifica_diferenca_graus
  4596                           
  4597                           ;main.c: 288: calcula_diff_graus(1);
  4598  004624  0E01               	movlw	1
  4599  004626  ECBA  F01D         	call	_calcula_diff_graus
  4600                           
  4601                           ;main.c: 291: verifica_diferenca_minutos(0);
  4602  00462A  0E00               	movlw	0
  4603  00462C  ECBB  F014         	call	_verifica_diferenca_minutos
  4604                           
  4605                           ;main.c: 292: calcula_diff_minutos(0);
  4606  004630  0E00               	movlw	0
  4607  004632  EC26  F01E         	call	_calcula_diff_minutos
  4608                           
  4609                           ;main.c: 294: verifica_diferenca_minutos(1);
  4610  004636  0E01               	movlw	1
  4611  004638  ECBB  F014         	call	_verifica_diferenca_minutos
  4612                           
  4613                           ;main.c: 295: calcula_diff_minutos(1);
  4614  00463C  0E01               	movlw	1
  4615  00463E  EC26  F01E         	call	_calcula_diff_minutos
  4616                           
  4617                           ;main.c: 298: fence_flag[0].point = verifica_plausibilidade_long();
  4618  004642  ECAC  F01F         	call	_verifica_plausibilidade_long	;wreg free
  4619  004646  6E2F               	movwf	??_verifica_fence_externo^0,c
  4620  004648  5032               	movf	_fence_flag^0,w,c
  4621  00464A  182F               	xorwf	??_verifica_fence_externo^0,w,c
  4622  00464C  0BFE               	andlw	-2
  4623  00464E  182F               	xorwf	??_verifica_fence_externo^0,w,c
  4624  004650  6E32               	movwf	_fence_flag^0,c
  4625                           
  4626                           ; BSR set to: 1
  4627                           ;main.c: 299: fence_flag[1].point = verifica_plausibilidade_lat();
  4628  004652  EC04  F020         	call	_verifica_plausibilidade_lat	;wreg free
  4629  004656  6E2F               	movwf	??_verifica_fence_externo^0,c
  4630  004658  5033               	movf	(_fence_flag+1)^0,w,c
  4631  00465A  182F               	xorwf	??_verifica_fence_externo^0,w,c
  4632  00465C  0BFE               	andlw	-2
  4633  00465E  182F               	xorwf	??_verifica_fence_externo^0,w,c
  4634  004660  6E33               	movwf	(_fence_flag+1)^0,c
  4635                           
  4636                           ; BSR set to: 1
  4637                           ;main.c: 301: if(fence_flag[0].point || fence_flag[1].point)
  4638  004662  B032               	btfsc	_fence_flag^0,0,c
  4639  004664  D002               	goto	u14450
  4640                           
  4641                           ; BSR set to: 1
  4642  004666  A033               	btfss	(_fence_flag+1)^0,0,c
  4643  004668  D009               	goto	l1416
  4644  00466A                     u14450:
  4645                           
  4646                           ; BSR set to: 1
  4647                           ;main.c: 302: {;main.c: 303: fence_flag[2].point = 1;
  4648  00466A  8034               	bsf	(_fence_flag+2)^0,0,c
  4649                           
  4650                           ; BSR set to: 1
  4651                           ;main.c: 304: monta_sd(4, "FORA");
  4652  00466C  0E61               	movlw	low STR_25
  4653  00466E  6E1D               	movwf	monta_sd@dado^0,c
  4654  004670  0E62               	movlw	high STR_25
  4655  004672  6E1E               	movwf	(monta_sd@dado+1)^0,c
  4656  004674  0E04               	movlw	4
  4657  004676  ECB8  F013         	call	_monta_sd
  4658                           
  4659                           ;main.c: 305: }
  4660  00467A  0012               	return	
  4661  00467C                     l1416:
  4662                           
  4663                           ; BSR set to: 1
  4664                           ;main.c: 306: else;main.c: 307: {;main.c: 308: fence_flag[2].point = 0;
  4665  00467C  9034               	bcf	(_fence_flag+2)^0,0,c
  4666                           
  4667                           ; BSR set to: 1
  4668                           ;main.c: 309: monta_sd(4, "DENTRO");
  4669  00467E  0E3E               	movlw	low STR_26
  4670  004680  6E1D               	movwf	monta_sd@dado^0,c
  4671  004682  0E62               	movlw	high STR_26
  4672  004684  6E1E               	movwf	(monta_sd@dado+1)^0,c
  4673  004686  0E04               	movlw	4
  4674  004688  ECB8  F013         	call	_monta_sd
  4675  00468C  0012               	return		;funcret
  4676  00468E                     __end_of_verifica_fence_externo:
  4677                           	callstack 0
  4678                           
  4679 ;; *************** function _verifica_plausibilidade_long *****************
  4680 ;; Defined at:
  4681 ;;		line 358 in file "bibliotecas/fence.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;		None
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;		None
  4686 ;; Return value:  Size  Location     Type
  4687 ;;                  1    wreg      unsigned char 
  4688 ;; Registers used:
  4689 ;;		wreg, status,2, status,0
  4690 ;; Tracked objects:
  4691 ;;		On entry : 0/0
  4692 ;;		On exit  : 3F/1
  4693 ;;		Unchanged: 0/0
  4694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4695 ;;      Params:         0       0       0       0       0       0       0       0       0
  4696 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4697 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4698 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4699 ;;Total ram usage:        0 bytes
  4700 ;; Hardware stack levels used:    1
  4701 ;; Hardware stack levels required when called:    3
  4702 ;; This function calls:
  4703 ;;		Nothing
  4704 ;; This function is called by:
  4705 ;;		_verifica_fence_externo
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           	psect	text22
  4710  003F58                     __ptext22:
  4711                           	callstack 0
  4712  003F58                     _verifica_plausibilidade_long:
  4713                           	callstack 24
  4714                           
  4715                           ;fence.c: 360: switch(temp_buff_long[0])
  4716                           
  4717                           ;incstack = 0
  4718  003F58  D051               	goto	l8737
  4719  003F5A                     l8671:
  4720                           
  4721                           ; BSR set to: 2
  4722                           ;fence.c: 363: if(;fence.c: 364: ((poligono_ext[0].diff_long_min >= 0 &&;fence.c: 365: p
      +                          oligono_ext[1].diff_long_min <= 0) &&;fence.c: 367: (poligono_ext[0].diff_long_deg >= 0 
      +                          &&;fence.c: 368: poligono_ext[1].diff_long_deg <= 0)))
  4723  003F5A  0101               	movlb	1	; () banked
  4724  003F5C  BF75               	btfsc	(_poligono_ext+61)& (0+255),7,b
  4725  003F5E  D016               	goto	l8685
  4726                           
  4727                           ; BSR set to: 1
  4728  003F60  BFB3               	btfsc	(_poligono_ext+123)& (0+255),7,b
  4729  003F62  D007               	goto	u9590
  4730  003F64  51B3               	movf	(_poligono_ext+123)& (0+255),w,b
  4731  003F66  11B2               	iorwf	(_poligono_ext+122)& (0+255),w,b
  4732  003F68  11B1               	iorwf	(_poligono_ext+121)& (0+255),w,b
  4733  003F6A  E110               	bnz	l8685
  4734  003F6C  05B0               	decf	(_poligono_ext+120)& (0+255),w,b
  4735  003F6E  B0D8               	btfsc	status,0,c
  4736  003F70  D00D               	goto	l8685
  4737  003F72                     u9590:
  4738                           
  4739                           ; BSR set to: 1
  4740  003F72  BF55               	btfsc	(_poligono_ext+29)& (0+255),7,b
  4741  003F74  D00B               	goto	l8685
  4742                           
  4743                           ; BSR set to: 1
  4744  003F76  BF93               	btfsc	(_poligono_ext+91)& (0+255),7,b
  4745  003F78  D007               	goto	u9610
  4746  003F7A  5193               	movf	(_poligono_ext+91)& (0+255),w,b
  4747  003F7C  1192               	iorwf	(_poligono_ext+90)& (0+255),w,b
  4748  003F7E  1191               	iorwf	(_poligono_ext+89)& (0+255),w,b
  4749  003F80  E105               	bnz	l8685
  4750  003F82  0590               	decf	(_poligono_ext+88)& (0+255),w,b
  4751  003F84  B0D8               	btfsc	status,0,c
  4752  003F86  D002               	goto	l8685
  4753  003F88                     u9610:
  4754                           
  4755                           ; BSR set to: 1
  4756                           ;fence.c: 369: {;fence.c: 370: return 0;
  4757  003F88  0E00               	movlw	0
  4758  003F8A  0012               	return	
  4759  003F8C                     l8685:
  4760                           
  4761                           ; BSR set to: 1
  4762                           ;fence.c: 372: else if((poligono_ext[0].diff_long_min == 0 ||;fence.c: 373: poligono_ext
      +                          [1].diff_long_min == 0 ) &&;fence.c: 376: (poligono_ext[0].diff_long_deg == 0 ||;fence.c
      +                          : 377: poligono_ext[1].diff_long_deg == 0))
  4763  003F8C  5172               	movf	(_poligono_ext+58)& (0+255),w,b
  4764  003F8E  1173               	iorwf	(_poligono_ext+59)& (0+255),w,b
  4765  003F90  1174               	iorwf	(_poligono_ext+60)& (0+255),w,b
  4766  003F92  1175               	iorwf	(_poligono_ext+61)& (0+255),w,b
  4767  003F94  B4D8               	btfsc	status,2,c
  4768  003F96  D006               	goto	u9630
  4769  003F98                     u9620:
  4770                           
  4771                           ; BSR set to: 1
  4772  003F98  51B0               	movf	(_poligono_ext+120)& (0+255),w,b
  4773  003F9A  11B1               	iorwf	(_poligono_ext+121)& (0+255),w,b
  4774  003F9C  11B2               	iorwf	(_poligono_ext+122)& (0+255),w,b
  4775  003F9E  11B3               	iorwf	(_poligono_ext+123)& (0+255),w,b
  4776  003FA0  A4D8               	btfss	status,2,c
  4777  003FA2  D00C               	goto	l8699
  4778  003FA4                     u9630:
  4779                           
  4780                           ; BSR set to: 1
  4781  003FA4  5152               	movf	(_poligono_ext+26)& (0+255),w,b
  4782  003FA6  1153               	iorwf	(_poligono_ext+27)& (0+255),w,b
  4783  003FA8  1154               	iorwf	(_poligono_ext+28)& (0+255),w,b
  4784  003FAA  1155               	iorwf	(_poligono_ext+29)& (0+255),w,b
  4785  003FAC  B4D8               	btfsc	status,2,c
  4786  003FAE  D7EC               	goto	u9610
  4787                           
  4788                           ; BSR set to: 1
  4789  003FB0  5190               	movf	(_poligono_ext+88)& (0+255),w,b
  4790  003FB2  1191               	iorwf	(_poligono_ext+89)& (0+255),w,b
  4791  003FB4  1192               	iorwf	(_poligono_ext+90)& (0+255),w,b
  4792  003FB6  1193               	iorwf	(_poligono_ext+91)& (0+255),w,b
  4793  003FB8  B4D8               	btfsc	status,2,c
  4794  003FBA  D7E6               	goto	u9610
  4795  003FBC                     l8699:
  4796                           
  4797                           ; BSR set to: 1
  4798                           ;fence.c: 381: else;fence.c: 382: {;fence.c: 383: return 1;
  4799  003FBC  0E01               	movlw	1
  4800  003FBE  0012               	return	
  4801  003FC0                     l8703:
  4802                           
  4803                           ; BSR set to: 2
  4804                           ;fence.c: 388: if(;fence.c: 389: (poligono_ext[0].diff_long_min <= 0 &&;fence.c: 390: po
      +                          ligono_ext[1].diff_long_min >= 0 ) &&;fence.c: 391: (poligono_ext[0].diff_lat_deg <= 0 &
      +                          &;fence.c: 392: poligono_ext[1].diff_lat_deg >= 0))
  4805  003FC0  0101               	movlb	1	; () banked
  4806  003FC2  BF75               	btfsc	(_poligono_ext+61)& (0+255),7,b
  4807  003FC4  D007               	goto	u9660
  4808  003FC6  5175               	movf	(_poligono_ext+61)& (0+255),w,b
  4809  003FC8  1174               	iorwf	(_poligono_ext+60)& (0+255),w,b
  4810  003FCA  1173               	iorwf	(_poligono_ext+59)& (0+255),w,b
  4811  003FCC  E110               	bnz	l8717
  4812  003FCE  0572               	decf	(_poligono_ext+58)& (0+255),w,b
  4813  003FD0  B0D8               	btfsc	status,0,c
  4814  003FD2  D00D               	goto	l8717
  4815  003FD4                     u9660:
  4816                           
  4817                           ; BSR set to: 1
  4818  003FD4  BFB3               	btfsc	(_poligono_ext+123)& (0+255),7,b
  4819  003FD6  D00B               	goto	l8717
  4820                           
  4821                           ; BSR set to: 1
  4822  003FD8  BF51               	btfsc	(_poligono_ext+25)& (0+255),7,b
  4823  003FDA  D007               	goto	u9680
  4824  003FDC  5151               	movf	(_poligono_ext+25)& (0+255),w,b
  4825  003FDE  1150               	iorwf	(_poligono_ext+24)& (0+255),w,b
  4826  003FE0  114F               	iorwf	(_poligono_ext+23)& (0+255),w,b
  4827  003FE2  E105               	bnz	l8717
  4828  003FE4  054E               	decf	(_poligono_ext+22)& (0+255),w,b
  4829  003FE6  B0D8               	btfsc	status,0,c
  4830  003FE8  D002               	goto	l8717
  4831  003FEA                     u9680:
  4832                           
  4833                           ; BSR set to: 1
  4834  003FEA  AF8F               	btfss	(_poligono_ext+87)& (0+255),7,b
  4835  003FEC  D7CD               	goto	u9610
  4836  003FEE                     l8717:
  4837                           
  4838                           ; BSR set to: 1
  4839                           ;fence.c: 396: else if((poligono_ext[0].diff_long_min == 0 ||;fence.c: 397: poligono_ext
      +                          [1].diff_long_min == 0) &&;fence.c: 398: (poligono_ext[0].diff_long_deg == 0 ||;fence.c:
      +                           399: poligono_ext[1].diff_long_deg == 0))
  4840  003FEE  5172               	movf	(_poligono_ext+58)& (0+255),w,b
  4841  003FF0  1173               	iorwf	(_poligono_ext+59)& (0+255),w,b
  4842  003FF2  1174               	iorwf	(_poligono_ext+60)& (0+255),w,b
  4843  003FF4  1175               	iorwf	(_poligono_ext+61)& (0+255),w,b
  4844  003FF6  A4D8               	btfss	status,2,c
  4845  003FF8  D7CF               	goto	u9620
  4846                           
  4847                           ; BSR set to: 1
  4848  003FFA  D7D4               	goto	u9630
  4849  003FFC                     l8737:
  4850  003FFC  0102               	movlb	2	; () banked
  4851  003FFE  518D               	movf	_temp_buff_long& (0+255),w,b
  4852                           
  4853                           ; Switch size 1, requested type "simple"
  4854                           ; Number of cases is 1, Range of values is 45 to 45
  4855                           ; switch strategies available:
  4856                           ; Name         Instructions Cycles
  4857                           ; simple_byte            4     3 (average)
  4858                           ;	Chosen strategy is simple_byte
  4859  004000  0A2D               	xorlw	45	; case 45
  4860  004002  B4D8               	btfsc	status,2,c
  4861  004004  D7AA               	goto	l8671
  4862  004006  D7DC               	goto	l8703
  4863  004008                     __end_of_verifica_plausibilidade_long:
  4864                           	callstack 0
  4865                           
  4866 ;; *************** function _verifica_plausibilidade_lat *****************
  4867 ;; Defined at:
  4868 ;;		line 420 in file "bibliotecas/fence.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;		None
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;		None
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      unsigned char 
  4875 ;; Registers used:
  4876 ;;		wreg, status,2, status,0
  4877 ;; Tracked objects:
  4878 ;;		On entry : 3F/1
  4879 ;;		On exit  : 3F/1
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4882 ;;      Params:         0       0       0       0       0       0       0       0       0
  4883 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4884 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4885 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4886 ;;Total ram usage:        0 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; Hardware stack levels required when called:    3
  4889 ;; This function calls:
  4890 ;;		Nothing
  4891 ;; This function is called by:
  4892 ;;		_verifica_fence_externo
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           	psect	text23
  4897  004008                     __ptext23:
  4898                           	callstack 0
  4899  004008                     _verifica_plausibilidade_lat:
  4900                           	callstack 24
  4901                           
  4902                           ; BSR set to: 1
  4903                           ;fence.c: 422: switch(temp_buff_lat[0])
  4904                           
  4905                           ; BSR set to: 1
  4906                           ;incstack = 0
  4907  004008  D051               	goto	l8807
  4908  00400A                     l8741:
  4909                           
  4910                           ; BSR set to: 2
  4911                           ;fence.c: 425: if(;fence.c: 426: (poligono_ext[0].diff_lat_min <= 0 &&;fence.c: 427: pol
      +                          igono_ext[1].diff_lat_min >= 0) &&;fence.c: 429: (poligono_ext[0].diff_lat_deg <= 0 &&;f
      +                          ence.c: 430: poligono_ext[1].diff_lat_deg >= 0))
  4912  00400A  0101               	movlb	1	; () banked
  4913  00400C  BF71               	btfsc	(_poligono_ext+57)& (0+255),7,b
  4914  00400E  D007               	goto	u9740
  4915  004010  5171               	movf	(_poligono_ext+57)& (0+255),w,b
  4916  004012  1170               	iorwf	(_poligono_ext+56)& (0+255),w,b
  4917  004014  116F               	iorwf	(_poligono_ext+55)& (0+255),w,b
  4918  004016  E112               	bnz	l8755
  4919  004018  056E               	decf	(_poligono_ext+54)& (0+255),w,b
  4920  00401A  B0D8               	btfsc	status,0,c
  4921  00401C  D00F               	goto	l8755
  4922  00401E                     u9740:
  4923                           
  4924                           ; BSR set to: 1
  4925  00401E  BFAF               	btfsc	(_poligono_ext+119)& (0+255),7,b
  4926  004020  D00D               	goto	l8755
  4927                           
  4928                           ; BSR set to: 1
  4929  004022  BF51               	btfsc	(_poligono_ext+25)& (0+255),7,b
  4930  004024  D007               	goto	u9760
  4931  004026  5151               	movf	(_poligono_ext+25)& (0+255),w,b
  4932  004028  1150               	iorwf	(_poligono_ext+24)& (0+255),w,b
  4933  00402A  114F               	iorwf	(_poligono_ext+23)& (0+255),w,b
  4934  00402C  E107               	bnz	l8755
  4935  00402E  054E               	decf	(_poligono_ext+22)& (0+255),w,b
  4936  004030  B0D8               	btfsc	status,0,c
  4937  004032  D004               	goto	l8755
  4938  004034                     u9760:
  4939                           
  4940                           ; BSR set to: 1
  4941  004034  BF8F               	btfsc	(_poligono_ext+87)& (0+255),7,b
  4942  004036  D002               	goto	l8755
  4943  004038                     u9770:
  4944                           
  4945                           ; BSR set to: 1
  4946                           ;fence.c: 431: {;fence.c: 433: return 0;
  4947  004038  0E00               	movlw	0
  4948  00403A  0012               	return	
  4949  00403C                     l8755:
  4950                           
  4951                           ; BSR set to: 1
  4952                           ;fence.c: 435: else if(;fence.c: 436: (poligono_ext[0].diff_lat_min == 0 ||;fence.c: 437
      +                          : poligono_ext[1].diff_lat_min == 0) &&;fence.c: 438: (poligono_ext[0].diff_lat_deg == 0
      +                           ||;fence.c: 439: poligono_ext[1].diff_lat_deg == 0))
  4953  00403C  516E               	movf	(_poligono_ext+54)& (0+255),w,b
  4954  00403E  116F               	iorwf	(_poligono_ext+55)& (0+255),w,b
  4955  004040  1170               	iorwf	(_poligono_ext+56)& (0+255),w,b
  4956  004042  1171               	iorwf	(_poligono_ext+57)& (0+255),w,b
  4957  004044  B4D8               	btfsc	status,2,c
  4958  004046  D006               	goto	u9790
  4959  004048                     u9780:
  4960                           
  4961                           ; BSR set to: 1
  4962  004048  51AC               	movf	(_poligono_ext+116)& (0+255),w,b
  4963  00404A  11AD               	iorwf	(_poligono_ext+117)& (0+255),w,b
  4964  00404C  11AE               	iorwf	(_poligono_ext+118)& (0+255),w,b
  4965  00404E  11AF               	iorwf	(_poligono_ext+119)& (0+255),w,b
  4966  004050  A4D8               	btfss	status,2,c
  4967  004052  D00C               	goto	l8769
  4968  004054                     u9790:
  4969                           
  4970                           ; BSR set to: 1
  4971  004054  514E               	movf	(_poligono_ext+22)& (0+255),w,b
  4972  004056  114F               	iorwf	(_poligono_ext+23)& (0+255),w,b
  4973  004058  1150               	iorwf	(_poligono_ext+24)& (0+255),w,b
  4974  00405A  1151               	iorwf	(_poligono_ext+25)& (0+255),w,b
  4975  00405C  B4D8               	btfsc	status,2,c
  4976  00405E  D7EC               	goto	u9770
  4977                           
  4978                           ; BSR set to: 1
  4979  004060  518C               	movf	(_poligono_ext+84)& (0+255),w,b
  4980  004062  118D               	iorwf	(_poligono_ext+85)& (0+255),w,b
  4981  004064  118E               	iorwf	(_poligono_ext+86)& (0+255),w,b
  4982  004066  118F               	iorwf	(_poligono_ext+87)& (0+255),w,b
  4983  004068  B4D8               	btfsc	status,2,c
  4984  00406A  D7E6               	goto	u9770
  4985  00406C                     l8769:
  4986                           
  4987                           ; BSR set to: 1
  4988                           ;fence.c: 444: else;fence.c: 445: {;fence.c: 446: return 1;
  4989  00406C  0E01               	movlw	1
  4990  00406E  0012               	return	
  4991  004070                     l8773:
  4992                           
  4993                           ; BSR set to: 2
  4994                           ;fence.c: 451: if((poligono_ext[0].diff_lat_min >= 0 &&;fence.c: 452: poligono_ext[1].di
      +                          ff_lat_min <= 0 ) &&;fence.c: 455: (poligono_ext[0].diff_lat_deg >= 0 &&;fence.c: 456: p
      +                          oligono_ext[1].diff_lat_deg <= 0);fence.c: 457: )
  4995  004070  0101               	movlb	1	; () banked
  4996  004072  BF71               	btfsc	(_poligono_ext+57)& (0+255),7,b
  4997  004074  D014               	goto	l8787
  4998                           
  4999                           ; BSR set to: 1
  5000  004076  BFAF               	btfsc	(_poligono_ext+119)& (0+255),7,b
  5001  004078  D007               	goto	u9830
  5002  00407A  51AF               	movf	(_poligono_ext+119)& (0+255),w,b
  5003  00407C  11AE               	iorwf	(_poligono_ext+118)& (0+255),w,b
  5004  00407E  11AD               	iorwf	(_poligono_ext+117)& (0+255),w,b
  5005  004080  E10E               	bnz	l8787
  5006  004082  05AC               	decf	(_poligono_ext+116)& (0+255),w,b
  5007  004084  B0D8               	btfsc	status,0,c
  5008  004086  D00B               	goto	l8787
  5009  004088                     u9830:
  5010                           
  5011                           ; BSR set to: 1
  5012  004088  BF51               	btfsc	(_poligono_ext+25)& (0+255),7,b
  5013  00408A  D009               	goto	l8787
  5014                           
  5015                           ; BSR set to: 1
  5016  00408C  BF8F               	btfsc	(_poligono_ext+87)& (0+255),7,b
  5017  00408E  D7D4               	goto	u9770
  5018  004090  518F               	movf	(_poligono_ext+87)& (0+255),w,b
  5019  004092  118E               	iorwf	(_poligono_ext+86)& (0+255),w,b
  5020  004094  118D               	iorwf	(_poligono_ext+85)& (0+255),w,b
  5021  004096  E103               	bnz	l8787
  5022  004098  058C               	decf	(_poligono_ext+84)& (0+255),w,b
  5023  00409A  A0D8               	btfss	status,0,c
  5024  00409C  D7CD               	goto	u9770
  5025  00409E                     l8787:
  5026                           
  5027                           ; BSR set to: 1
  5028                           ;fence.c: 461: else if((poligono_ext[0].diff_lat_min == 0 ||;fence.c: 462: poligono_ext[
      +                          1].diff_lat_min == 0) &&;fence.c: 464: (poligono_ext[0].diff_lat_deg == 0 ||;fence.c: 46
      +                          5: poligono_ext[1].diff_lat_deg == 0))
  5029  00409E  516E               	movf	(_poligono_ext+54)& (0+255),w,b
  5030  0040A0  116F               	iorwf	(_poligono_ext+55)& (0+255),w,b
  5031  0040A2  1170               	iorwf	(_poligono_ext+56)& (0+255),w,b
  5032  0040A4  1171               	iorwf	(_poligono_ext+57)& (0+255),w,b
  5033  0040A6  A4D8               	btfss	status,2,c
  5034  0040A8  D7CF               	goto	u9780
  5035                           
  5036                           ; BSR set to: 1
  5037  0040AA  D7D4               	goto	u9790
  5038  0040AC                     l8807:
  5039                           
  5040                           ; BSR set to: 1
  5041  0040AC  0102               	movlb	2	; () banked
  5042  0040AE  5199               	movf	_temp_buff_lat& (0+255),w,b
  5043                           
  5044                           ; Switch size 1, requested type "simple"
  5045                           ; Number of cases is 1, Range of values is 45 to 45
  5046                           ; switch strategies available:
  5047                           ; Name         Instructions Cycles
  5048                           ; simple_byte            4     3 (average)
  5049                           ;	Chosen strategy is simple_byte
  5050  0040B0  0A2D               	xorlw	45	; case 45
  5051  0040B2  B4D8               	btfsc	status,2,c
  5052  0040B4  D7AA               	goto	l8741
  5053  0040B6  D7DC               	goto	l8773
  5054  0040B8                     __end_of_verifica_plausibilidade_lat:
  5055                           	callstack 0
  5056                           
  5057 ;; *************** function _verifica_diferenca_minutos *****************
  5058 ;; Defined at:
  5059 ;;		line 228 in file "bibliotecas/fence.c"
  5060 ;; Parameters:    Size  Location     Type
  5061 ;;  select_data     1    wreg     unsigned char 
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;  select_data     1   28[COMRAM] unsigned char 
  5064 ;;  i               1   33[COMRAM] unsigned char 
  5065 ;;  point           1   32[COMRAM] unsigned char 
  5066 ;;  j               1   31[COMRAM] unsigned char 
  5067 ;;  point_index_    1   30[COMRAM] unsigned char 
  5068 ;;  point_index_    1   29[COMRAM] unsigned char 
  5069 ;; Return value:  Size  Location     Type
  5070 ;;                  1    wreg      void 
  5071 ;; Registers used:
  5072 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5073 ;; Tracked objects:
  5074 ;;		On entry : 0/0
  5075 ;;		On exit  : 0/0
  5076 ;;		Unchanged: 0/0
  5077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5078 ;;      Params:         0       0       0       0       0       0       0       0       0
  5079 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5080 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5081 ;;      Totals:        10       0       0       0       0       0       0       0       0
  5082 ;;Total ram usage:       10 bytes
  5083 ;; Hardware stack levels used:    1
  5084 ;; Hardware stack levels required when called:    3
  5085 ;; This function calls:
  5086 ;;		Nothing
  5087 ;; This function is called by:
  5088 ;;		_verifica_fence_externo
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092                           	psect	text24
  5093  002976                     __ptext24:
  5094                           	callstack 0
  5095  002976                     _verifica_diferenca_minutos:
  5096                           	callstack 24
  5097                           
  5098                           ; BSR set to: 1
  5099                           ;incstack = 0
  5100                           ;verifica_diferenca_minutos@select_data stored from wreg
  5101  002976  6E1D               	movwf	verifica_diferenca_minutos@select_data^0,c
  5102                           
  5103                           ;fence.c: 230: unsigned char point, point_index_lat ,point_index_long;;fence.c: 231: uns
      +                          igned char i, j;;fence.c: 233: point_index_lat = 0;
  5104  002978  0E00               	movlw	0
  5105  00297A  6E1E               	movwf	verifica_diferenca_minutos@point_index_lat^0,c
  5106                           
  5107                           ;fence.c: 234: point_index_long = 0;
  5108  00297C  0E00               	movlw	0
  5109  00297E  6E1F               	movwf	verifica_diferenca_minutos@point_index_long^0,c
  5110                           
  5111                           ;fence.c: 235: point = 0;
  5112  002980  0E00               	movlw	0
  5113  002982  6E21               	movwf	verifica_diferenca_minutos@point^0,c
  5114                           
  5115                           ;fence.c: 236: switch(select_data)
  5116  002984  D0CE               	goto	l8637
  5117  002986                     l8555:
  5118                           
  5119                           ;fence.c: 240: {;fence.c: 241: for(i=6; i<11; i++)
  5120  002986  0E06               	movlw	6
  5121  002988  6E22               	movwf	verifica_diferenca_minutos@i^0,c
  5122  00298A                     l8561:
  5123                           
  5124                           ;fence.c: 242: {;fence.c: 243: if(point == 0 || point == 2)
  5125  00298A  5021               	movf	verifica_diferenca_minutos@point^0,w,c
  5126  00298C  B4D8               	btfsc	status,2,c
  5127  00298E  D004               	goto	u9390
  5128  002990  0E02               	movlw	2
  5129  002992  1821               	xorwf	verifica_diferenca_minutos@point^0,w,c
  5130  002994  A4D8               	btfss	status,2,c
  5131  002996  D059               	goto	u9430
  5132  002998                     u9390:
  5133                           
  5134                           ;fence.c: 244: {;fence.c: 245: if(point == 2 && !point_index_lat)
  5135  002998  0E02               	movlw	2
  5136  00299A  1821               	xorwf	verifica_diferenca_minutos@point^0,w,c
  5137  00299C  A4D8               	btfss	status,2,c
  5138  00299E  D003               	goto	l8571
  5139  0029A0  501E               	movf	verifica_diferenca_minutos@point_index_lat^0,w,c
  5140  0029A2  B4D8               	btfsc	status,2,c
  5141                           
  5142                           ;fence.c: 246: {;fence.c: 247: point_index_lat++;
  5143  0029A4  2A1E               	incf	verifica_diferenca_minutos@point_index_lat^0,f,c
  5144  0029A6                     l8571:
  5145                           
  5146                           ;fence.c: 248: };fence.c: 251: for(j= 0; i < 11; j++)
  5147  0029A6  0E00               	movlw	0
  5148  0029A8  6E20               	movwf	verifica_diferenca_minutos@j^0,c
  5149  0029AA                     l8573:
  5150  0029AA  0E0A               	movlw	10
  5151  0029AC  6422               	cpfsgt	verifica_diferenca_minutos@i^0,c
  5152  0029AE  D001               	goto	l8577
  5153  0029B0  D048               	goto	l8587
  5154  0029B2                     l8577:
  5155                           
  5156                           ;fence.c: 252: {;fence.c: 253: poligono_ext[point_index_lat].fence_lat_min[j] = fence_di
      +                          ff_lat[point][i];
  5157  0029B2  5021               	movf	verifica_diferenca_minutos@point^0,w,c
  5158  0029B4  0D0B               	mullw	11
  5159  0029B6  0EBB               	movlw	low _fence_diff_lat
  5160  0029B8  6E19               	movwf	??_verifica_diferenca_minutos^0,c
  5161  0029BA  0E60               	movlw	high _fence_diff_lat
  5162  0029BC  6E1A               	movwf	(??_verifica_diferenca_minutos+1)^0,c
  5163  0029BE  50F3               	movf	243,w,c
  5164  0029C0  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  5165  0029C2  50F4               	movf	244,w,c
  5166  0029C4  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  5167  0029C6  5022               	movf	verifica_diferenca_minutos@i^0,w,c
  5168  0029C8  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  5169  0029CA  0E00               	movlw	0
  5170  0029CC  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  5171  0029CE  C019  FFF6         	movff	??_verifica_diferenca_minutos,tblptrl
  5172  0029D2  C01A  FFF7         	movff	??_verifica_diferenca_minutos+1,tblptrh
  5173  0029D6                     	if	0	;tblptru may be non-zero
  5174  0029D6                     	endif
  5175  0029D6                     	if	0	;tblptru may be non-zero
  5176  0029D6                     	endif
  5177  0029D6  501E               	movf	verifica_diferenca_minutos@point_index_lat^0,w,c
  5178  0029D8  0D3E               	mullw	62
  5179  0029DA  0E38               	movlw	low _poligono_ext
  5180  0029DC  6E1B               	movwf	(??_verifica_diferenca_minutos+2)^0,c
  5181  0029DE  0E01               	movlw	high _poligono_ext
  5182  0029E0  6E1C               	movwf	(??_verifica_diferenca_minutos+3)^0,c
  5183  0029E2  0E1E               	movlw	30
  5184  0029E4  261B               	addwf	(??_verifica_diferenca_minutos+2)^0,f,c
  5185  0029E6  0E00               	movlw	0
  5186  0029E8  221C               	addwfc	(??_verifica_diferenca_minutos+3)^0,f,c
  5187  0029EA  50F3               	movf	243,w,c
  5188  0029EC  261B               	addwf	(??_verifica_diferenca_minutos+2)^0,f,c
  5189  0029EE  50F4               	movf	244,w,c
  5190  0029F0  221C               	addwfc	(??_verifica_diferenca_minutos+3)^0,f,c
  5191  0029F2  5020               	movf	verifica_diferenca_minutos@j^0,w,c
  5192  0029F4  241B               	addwf	(??_verifica_diferenca_minutos+2)^0,w,c
  5193  0029F6  6ED9               	movwf	fsr2l,c
  5194  0029F8  0E00               	movlw	0
  5195  0029FA  201C               	addwfc	(??_verifica_diferenca_minutos+3)^0,w,c
  5196  0029FC  6EDA               	movwf	fsr2h,c
  5197  0029FE  0008               	tblrd		*
  5198  002A00  CFF5 FFDF          	movff	tablat,indf2
  5199                           
  5200                           ;fence.c: 254: poligono_ext[point_index_lat].point_lat_min[j] = temp_buff_lat[i];
  5201  002A04  0E99               	movlw	low _temp_buff_lat
  5202  002A06  2422               	addwf	verifica_diferenca_minutos@i^0,w,c
  5203  002A08  6ED9               	movwf	fsr2l,c
  5204  002A0A  6ADA               	clrf	fsr2h,c
  5205  002A0C  0E02               	movlw	high _temp_buff_lat
  5206  002A0E  22DA               	addwfc	fsr2h,f,c
  5207  002A10  501E               	movf	verifica_diferenca_minutos@point_index_lat^0,w,c
  5208  002A12  0D3E               	mullw	62
  5209  002A14  0E38               	movlw	low _poligono_ext
  5210  002A16  6E19               	movwf	??_verifica_diferenca_minutos^0,c
  5211  002A18  0E01               	movlw	high _poligono_ext
  5212  002A1A  6E1A               	movwf	(??_verifica_diferenca_minutos+1)^0,c
  5213  002A1C  0E2A               	movlw	42
  5214  002A1E  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  5215  002A20  0E00               	movlw	0
  5216  002A22  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  5217  002A24  50F3               	movf	243,w,c
  5218  002A26  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  5219  002A28  50F4               	movf	244,w,c
  5220  002A2A  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  5221  002A2C  5020               	movf	verifica_diferenca_minutos@j^0,w,c
  5222  002A2E  2419               	addwf	??_verifica_diferenca_minutos^0,w,c
  5223  002A30  6EE1               	movwf	fsr1l,c
  5224  002A32  0E00               	movlw	0
  5225  002A34  201A               	addwfc	(??_verifica_diferenca_minutos+1)^0,w,c
  5226  002A36  6EE2               	movwf	fsr1h,c
  5227  002A38  CFDF FFE7          	movff	indf2,indf1
  5228                           
  5229                           ;fence.c: 255: i++;
  5230  002A3C  2A22               	incf	verifica_diferenca_minutos@i^0,f,c
  5231  002A3E  2A20               	incf	verifica_diferenca_minutos@j^0,f,c
  5232  002A40  D7B4               	goto	l8573
  5233  002A42                     l8587:
  5234  002A42  2A22               	incf	verifica_diferenca_minutos@i^0,f,c
  5235  002A44  0E0A               	movlw	10
  5236  002A46  6422               	cpfsgt	verifica_diferenca_minutos@i^0,c
  5237  002A48  D7A0               	goto	l8561
  5238  002A4A                     u9430:
  5239                           
  5240                           ;fence.c: 265: };fence.c: 266: };fence.c: 267: point++;
  5241  002A4A  2A21               	incf	verifica_diferenca_minutos@point^0,f,c
  5242  002A4C                     l8593:
  5243  002A4C  0E03               	movlw	3
  5244  002A4E  6421               	cpfsgt	verifica_diferenca_minutos@point^0,c
  5245  002A50  D79A               	goto	l8555
  5246  002A52  0012               	return	
  5247  002A54                     l8595:
  5248                           
  5249                           ;fence.c: 273: {;fence.c: 274: for(i=7; i<12; i++)
  5250  002A54  0E07               	movlw	7
  5251  002A56  6E22               	movwf	verifica_diferenca_minutos@i^0,c
  5252  002A58                     l8601:
  5253                           
  5254                           ;fence.c: 275: {;fence.c: 276: if(point == 0 || point == 2)
  5255  002A58  5021               	movf	verifica_diferenca_minutos@point^0,w,c
  5256  002A5A  B4D8               	btfsc	status,2,c
  5257  002A5C  D004               	goto	u9460
  5258  002A5E  0E02               	movlw	2
  5259  002A60  1821               	xorwf	verifica_diferenca_minutos@point^0,w,c
  5260  002A62  A4D8               	btfss	status,2,c
  5261  002A64  D059               	goto	u9500
  5262  002A66                     u9460:
  5263                           
  5264                           ;fence.c: 277: {;fence.c: 278: if(point == 2 && !point_index_long)
  5265  002A66  0E02               	movlw	2
  5266  002A68  1821               	xorwf	verifica_diferenca_minutos@point^0,w,c
  5267  002A6A  A4D8               	btfss	status,2,c
  5268  002A6C  D003               	goto	l8611
  5269  002A6E  501F               	movf	verifica_diferenca_minutos@point_index_long^0,w,c
  5270  002A70  B4D8               	btfsc	status,2,c
  5271                           
  5272                           ;fence.c: 279: {;fence.c: 280: point_index_long++;
  5273  002A72  2A1F               	incf	verifica_diferenca_minutos@point_index_long^0,f,c
  5274  002A74                     l8611:
  5275                           
  5276                           ;fence.c: 281: };fence.c: 286: for(j= 0; i < 12; j++)
  5277  002A74  0E00               	movlw	0
  5278  002A76  6E20               	movwf	verifica_diferenca_minutos@j^0,c
  5279  002A78                     l8613:
  5280  002A78  0E0B               	movlw	11
  5281  002A7A  6422               	cpfsgt	verifica_diferenca_minutos@i^0,c
  5282  002A7C  D001               	goto	l8617
  5283  002A7E  D048               	goto	l8627
  5284  002A80                     l8617:
  5285                           
  5286                           ;fence.c: 287: {;fence.c: 288: poligono_ext[point_index_long].fence_long_min[j] = fence_
      +                          diff_long[point][i];
  5287  002A80  5021               	movf	verifica_diferenca_minutos@point^0,w,c
  5288  002A82  0D0C               	mullw	12
  5289  002A84  0E8B               	movlw	low _fence_diff_long
  5290  002A86  6E19               	movwf	??_verifica_diferenca_minutos^0,c
  5291  002A88  0E60               	movlw	high _fence_diff_long
  5292  002A8A  6E1A               	movwf	(??_verifica_diferenca_minutos+1)^0,c
  5293  002A8C  50F3               	movf	243,w,c
  5294  002A8E  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  5295  002A90  50F4               	movf	244,w,c
  5296  002A92  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  5297  002A94  5022               	movf	verifica_diferenca_minutos@i^0,w,c
  5298  002A96  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  5299  002A98  0E00               	movlw	0
  5300  002A9A  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  5301  002A9C  C019  FFF6         	movff	??_verifica_diferenca_minutos,tblptrl
  5302  002AA0  C01A  FFF7         	movff	??_verifica_diferenca_minutos+1,tblptrh
  5303  002AA4                     	if	0	;tblptru may be non-zero
  5304  002AA4                     	endif
  5305  002AA4                     	if	0	;tblptru may be non-zero
  5306  002AA4                     	endif
  5307  002AA4  501F               	movf	verifica_diferenca_minutos@point_index_long^0,w,c
  5308  002AA6  0D3E               	mullw	62
  5309  002AA8  0E38               	movlw	low _poligono_ext
  5310  002AAA  6E1B               	movwf	(??_verifica_diferenca_minutos+2)^0,c
  5311  002AAC  0E01               	movlw	high _poligono_ext
  5312  002AAE  6E1C               	movwf	(??_verifica_diferenca_minutos+3)^0,c
  5313  002AB0  0E24               	movlw	36
  5314  002AB2  261B               	addwf	(??_verifica_diferenca_minutos+2)^0,f,c
  5315  002AB4  0E00               	movlw	0
  5316  002AB6  221C               	addwfc	(??_verifica_diferenca_minutos+3)^0,f,c
  5317  002AB8  50F3               	movf	243,w,c
  5318  002ABA  261B               	addwf	(??_verifica_diferenca_minutos+2)^0,f,c
  5319  002ABC  50F4               	movf	244,w,c
  5320  002ABE  221C               	addwfc	(??_verifica_diferenca_minutos+3)^0,f,c
  5321  002AC0  5020               	movf	verifica_diferenca_minutos@j^0,w,c
  5322  002AC2  241B               	addwf	(??_verifica_diferenca_minutos+2)^0,w,c
  5323  002AC4  6ED9               	movwf	fsr2l,c
  5324  002AC6  0E00               	movlw	0
  5325  002AC8  201C               	addwfc	(??_verifica_diferenca_minutos+3)^0,w,c
  5326  002ACA  6EDA               	movwf	fsr2h,c
  5327  002ACC  0008               	tblrd		*
  5328  002ACE  CFF5 FFDF          	movff	tablat,indf2
  5329                           
  5330                           ;fence.c: 289: poligono_ext[point_index_long].point_long_min[j] = temp_buff_long[i];
  5331  002AD2  0E8D               	movlw	low _temp_buff_long
  5332  002AD4  2422               	addwf	verifica_diferenca_minutos@i^0,w,c
  5333  002AD6  6ED9               	movwf	fsr2l,c
  5334  002AD8  6ADA               	clrf	fsr2h,c
  5335  002ADA  0E02               	movlw	high _temp_buff_long
  5336  002ADC  22DA               	addwfc	fsr2h,f,c
  5337  002ADE  501F               	movf	verifica_diferenca_minutos@point_index_long^0,w,c
  5338  002AE0  0D3E               	mullw	62
  5339  002AE2  0E38               	movlw	low _poligono_ext
  5340  002AE4  6E19               	movwf	??_verifica_diferenca_minutos^0,c
  5341  002AE6  0E01               	movlw	high _poligono_ext
  5342  002AE8  6E1A               	movwf	(??_verifica_diferenca_minutos+1)^0,c
  5343  002AEA  0E30               	movlw	48
  5344  002AEC  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  5345  002AEE  0E00               	movlw	0
  5346  002AF0  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  5347  002AF2  50F3               	movf	243,w,c
  5348  002AF4  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  5349  002AF6  50F4               	movf	244,w,c
  5350  002AF8  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  5351  002AFA  5020               	movf	verifica_diferenca_minutos@j^0,w,c
  5352  002AFC  2419               	addwf	??_verifica_diferenca_minutos^0,w,c
  5353  002AFE  6EE1               	movwf	fsr1l,c
  5354  002B00  0E00               	movlw	0
  5355  002B02  201A               	addwfc	(??_verifica_diferenca_minutos+1)^0,w,c
  5356  002B04  6EE2               	movwf	fsr1h,c
  5357  002B06  CFDF FFE7          	movff	indf2,indf1
  5358                           
  5359                           ;fence.c: 290: i++;
  5360  002B0A  2A22               	incf	verifica_diferenca_minutos@i^0,f,c
  5361  002B0C  2A20               	incf	verifica_diferenca_minutos@j^0,f,c
  5362  002B0E  D7B4               	goto	l8613
  5363  002B10                     l8627:
  5364  002B10  2A22               	incf	verifica_diferenca_minutos@i^0,f,c
  5365  002B12  0E0B               	movlw	11
  5366  002B14  6422               	cpfsgt	verifica_diferenca_minutos@i^0,c
  5367  002B16  D7A0               	goto	l8601
  5368  002B18                     u9500:
  5369                           
  5370                           ;fence.c: 298: };fence.c: 300: };fence.c: 301: point++;
  5371  002B18  2A21               	incf	verifica_diferenca_minutos@point^0,f,c
  5372  002B1A                     l8633:
  5373  002B1A  0E03               	movlw	3
  5374  002B1C  6421               	cpfsgt	verifica_diferenca_minutos@point^0,c
  5375  002B1E  D79A               	goto	l8595
  5376  002B20  0012               	return	
  5377  002B22                     l8637:
  5378  002B22  501D               	movf	verifica_diferenca_minutos@select_data^0,w,c
  5379                           
  5380                           ; Switch size 1, requested type "simple"
  5381                           ; Number of cases is 2, Range of values is 0 to 1
  5382                           ; switch strategies available:
  5383                           ; Name         Instructions Cycles
  5384                           ; simple_byte            7     4 (average)
  5385                           ;	Chosen strategy is simple_byte
  5386  002B24  0A00               	xorlw	0	; case 0
  5387  002B26  B4D8               	btfsc	status,2,c
  5388  002B28  D7F8               	goto	l8633
  5389  002B2A  0A01               	xorlw	1	; case 1
  5390  002B2C  A4D8               	btfss	status,2,c
  5391  002B2E  0012               	return	
  5392  002B30  D78D               	goto	l8593
  5393  002B32                     __end_of_verifica_diferenca_minutos:
  5394                           	callstack 0
  5395                           
  5396 ;; *************** function _verifica_diferenca_graus *****************
  5397 ;; Defined at:
  5398 ;;		line 80 in file "bibliotecas/fence.c"
  5399 ;; Parameters:    Size  Location     Type
  5400 ;;  select_data     1    wreg     unsigned char 
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;  select_data     1   28[COMRAM] unsigned char 
  5403 ;;  i               1   33[COMRAM] unsigned char 
  5404 ;;  point           1   32[COMRAM] unsigned char 
  5405 ;;  j               1   31[COMRAM] unsigned char 
  5406 ;;  point_index_    1   30[COMRAM] unsigned char 
  5407 ;;  point_index_    1   29[COMRAM] unsigned char 
  5408 ;; Return value:  Size  Location     Type
  5409 ;;                  1    wreg      void 
  5410 ;; Registers used:
  5411 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5412 ;; Tracked objects:
  5413 ;;		On entry : 0/0
  5414 ;;		On exit  : 0/0
  5415 ;;		Unchanged: 0/0
  5416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5417 ;;      Params:         0       0       0       0       0       0       0       0       0
  5418 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5419 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5420 ;;      Totals:        10       0       0       0       0       0       0       0       0
  5421 ;;Total ram usage:       10 bytes
  5422 ;; Hardware stack levels used:    1
  5423 ;; Hardware stack levels required when called:    3
  5424 ;; This function calls:
  5425 ;;		Nothing
  5426 ;; This function is called by:
  5427 ;;		_verifica_fence_externo
  5428 ;; This function uses a non-reentrant model
  5429 ;;
  5430                           
  5431                           	psect	text25
  5432  002CE8                     __ptext25:
  5433                           	callstack 0
  5434  002CE8                     _verifica_diferenca_graus:
  5435                           	callstack 24
  5436                           
  5437                           ;incstack = 0
  5438                           ;verifica_diferenca_graus@select_data stored from wreg
  5439  002CE8  6E1D               	movwf	verifica_diferenca_graus@select_data^0,c
  5440                           
  5441                           ;fence.c: 83: unsigned char point, point_index_lat ,point_index_long;;fence.c: 84: unsig
      +                          ned char i, j;;fence.c: 85: point = 0;
  5442  002CEA  0E00               	movlw	0
  5443  002CEC  6E21               	movwf	verifica_diferenca_graus@point^0,c
  5444                           
  5445                           ;fence.c: 86: point_index_long = 0;
  5446  002CEE  0E00               	movlw	0
  5447  002CF0  6E1F               	movwf	verifica_diferenca_graus@point_index_long^0,c
  5448                           
  5449                           ;fence.c: 87: point_index_lat = 0;
  5450  002CF2  0E00               	movlw	0
  5451  002CF4  6E1E               	movwf	verifica_diferenca_graus@point_index_lat^0,c
  5452                           
  5453                           ;fence.c: 89: switch(select_data)
  5454  002CF6  D0CA               	goto	l8521
  5455  002CF8                     l8439:
  5456                           
  5457                           ;fence.c: 93: {;fence.c: 94: for(i=1; i<5; i++)
  5458  002CF8  0E01               	movlw	1
  5459  002CFA  6E22               	movwf	verifica_diferenca_graus@i^0,c
  5460  002CFC                     l8445:
  5461                           
  5462                           ;fence.c: 95: {;fence.c: 96: if(point == 0 || point == 2)
  5463  002CFC  5021               	movf	verifica_diferenca_graus@point^0,w,c
  5464  002CFE  B4D8               	btfsc	status,2,c
  5465  002D00  D004               	goto	u9190
  5466  002D02  0E02               	movlw	2
  5467  002D04  1821               	xorwf	verifica_diferenca_graus@point^0,w,c
  5468  002D06  A4D8               	btfss	status,2,c
  5469  002D08  D055               	goto	u9230
  5470  002D0A                     u9190:
  5471                           
  5472                           ;fence.c: 97: {;fence.c: 99: if(point == 2 && !point_index_lat)
  5473  002D0A  0E02               	movlw	2
  5474  002D0C  1821               	xorwf	verifica_diferenca_graus@point^0,w,c
  5475  002D0E  A4D8               	btfss	status,2,c
  5476  002D10  D003               	goto	l8455
  5477  002D12  501E               	movf	verifica_diferenca_graus@point_index_lat^0,w,c
  5478  002D14  B4D8               	btfsc	status,2,c
  5479                           
  5480                           ;fence.c: 100: {;fence.c: 101: point_index_lat++;
  5481  002D16  2A1E               	incf	verifica_diferenca_graus@point_index_lat^0,f,c
  5482  002D18                     l8455:
  5483                           
  5484                           ;fence.c: 102: };fence.c: 105: for(j= 0; i < 5; j++)
  5485  002D18  0E00               	movlw	0
  5486  002D1A  6E20               	movwf	verifica_diferenca_graus@j^0,c
  5487  002D1C                     l8457:
  5488  002D1C  0E04               	movlw	4
  5489  002D1E  6422               	cpfsgt	verifica_diferenca_graus@i^0,c
  5490  002D20  D001               	goto	l8461
  5491  002D22  D044               	goto	l8471
  5492  002D24                     l8461:
  5493                           
  5494                           ;fence.c: 106: {;fence.c: 107: poligono_ext[point_index_lat].point_lat_deg[j] = temp_buf
      +                          f_lat[i];
  5495  002D24  0E99               	movlw	low _temp_buff_lat
  5496  002D26  2422               	addwf	verifica_diferenca_graus@i^0,w,c
  5497  002D28  6ED9               	movwf	fsr2l,c
  5498  002D2A  6ADA               	clrf	fsr2h,c
  5499  002D2C  0E02               	movlw	high _temp_buff_lat
  5500  002D2E  22DA               	addwfc	fsr2h,f,c
  5501  002D30  501E               	movf	verifica_diferenca_graus@point_index_lat^0,w,c
  5502  002D32  0D3E               	mullw	62
  5503  002D34  0E38               	movlw	low _poligono_ext
  5504  002D36  6E19               	movwf	??_verifica_diferenca_graus^0,c
  5505  002D38  0E01               	movlw	high _poligono_ext
  5506  002D3A  6E1A               	movwf	(??_verifica_diferenca_graus+1)^0,c
  5507  002D3C  0E0B               	movlw	11
  5508  002D3E  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  5509  002D40  0E00               	movlw	0
  5510  002D42  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  5511  002D44  50F3               	movf	243,w,c
  5512  002D46  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  5513  002D48  50F4               	movf	244,w,c
  5514  002D4A  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  5515  002D4C  5020               	movf	verifica_diferenca_graus@j^0,w,c
  5516  002D4E  2419               	addwf	??_verifica_diferenca_graus^0,w,c
  5517  002D50  6EE1               	movwf	fsr1l,c
  5518  002D52  0E00               	movlw	0
  5519  002D54  201A               	addwfc	(??_verifica_diferenca_graus+1)^0,w,c
  5520  002D56  6EE2               	movwf	fsr1h,c
  5521  002D58  CFDF FFE7          	movff	indf2,indf1
  5522                           
  5523                           ;fence.c: 108: poligono_ext[point_index_lat].fence_lat_deg[j] = fence_diff_lat[point][i]
      +                          ;
  5524  002D5C  5021               	movf	verifica_diferenca_graus@point^0,w,c
  5525  002D5E  0D0B               	mullw	11
  5526  002D60  0EBB               	movlw	low _fence_diff_lat
  5527  002D62  6E19               	movwf	??_verifica_diferenca_graus^0,c
  5528  002D64  0E60               	movlw	high _fence_diff_lat
  5529  002D66  6E1A               	movwf	(??_verifica_diferenca_graus+1)^0,c
  5530  002D68  50F3               	movf	243,w,c
  5531  002D6A  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  5532  002D6C  50F4               	movf	244,w,c
  5533  002D6E  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  5534  002D70  5022               	movf	verifica_diferenca_graus@i^0,w,c
  5535  002D72  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  5536  002D74  0E00               	movlw	0
  5537  002D76  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  5538  002D78  C019  FFF6         	movff	??_verifica_diferenca_graus,tblptrl
  5539  002D7C  C01A  FFF7         	movff	??_verifica_diferenca_graus+1,tblptrh
  5540  002D80                     	if	0	;tblptru may be non-zero
  5541  002D80                     	endif
  5542  002D80                     	if	0	;tblptru may be non-zero
  5543  002D80                     	endif
  5544  002D80  501E               	movf	verifica_diferenca_graus@point_index_lat^0,w,c
  5545  002D82  0D3E               	mullw	62
  5546  002D84  0E38               	movlw	low _poligono_ext
  5547  002D86  6E1B               	movwf	(??_verifica_diferenca_graus+2)^0,c
  5548  002D88  0E01               	movlw	high _poligono_ext
  5549  002D8A  6E1C               	movwf	(??_verifica_diferenca_graus+3)^0,c
  5550  002D8C  50F3               	movf	243,w,c
  5551  002D8E  261B               	addwf	(??_verifica_diferenca_graus+2)^0,f,c
  5552  002D90  50F4               	movf	244,w,c
  5553  002D92  221C               	addwfc	(??_verifica_diferenca_graus+3)^0,f,c
  5554  002D94  5020               	movf	verifica_diferenca_graus@j^0,w,c
  5555  002D96  241B               	addwf	(??_verifica_diferenca_graus+2)^0,w,c
  5556  002D98  6ED9               	movwf	fsr2l,c
  5557  002D9A  0E00               	movlw	0
  5558  002D9C  201C               	addwfc	(??_verifica_diferenca_graus+3)^0,w,c
  5559  002D9E  6EDA               	movwf	fsr2h,c
  5560  002DA0  0008               	tblrd		*
  5561  002DA2  CFF5 FFDF          	movff	tablat,indf2
  5562                           
  5563                           ;fence.c: 109: i++;
  5564  002DA6  2A22               	incf	verifica_diferenca_graus@i^0,f,c
  5565  002DA8  2A20               	incf	verifica_diferenca_graus@j^0,f,c
  5566  002DAA  D7B8               	goto	l8457
  5567  002DAC                     l8471:
  5568  002DAC  2A22               	incf	verifica_diferenca_graus@i^0,f,c
  5569  002DAE  0E04               	movlw	4
  5570  002DB0  6422               	cpfsgt	verifica_diferenca_graus@i^0,c
  5571  002DB2  D7A4               	goto	l8445
  5572  002DB4                     u9230:
  5573                           
  5574                           ;fence.c: 116: };fence.c: 117: };fence.c: 118: point++;
  5575  002DB4  2A21               	incf	verifica_diferenca_graus@point^0,f,c
  5576  002DB6                     l8477:
  5577  002DB6  0E03               	movlw	3
  5578  002DB8  6421               	cpfsgt	verifica_diferenca_graus@point^0,c
  5579  002DBA  D79E               	goto	l8439
  5580  002DBC  0012               	return	
  5581  002DBE                     l8479:
  5582                           
  5583                           ;fence.c: 124: {;fence.c: 125: for(i=1; i<6; i++)
  5584  002DBE  0E01               	movlw	1
  5585  002DC0  6E22               	movwf	verifica_diferenca_graus@i^0,c
  5586  002DC2                     l8485:
  5587                           
  5588                           ;fence.c: 126: {;fence.c: 127: if(point == 0 || point == 2)
  5589  002DC2  5021               	movf	verifica_diferenca_graus@point^0,w,c
  5590  002DC4  B4D8               	btfsc	status,2,c
  5591  002DC6  D004               	goto	u9260
  5592  002DC8  0E02               	movlw	2
  5593  002DCA  1821               	xorwf	verifica_diferenca_graus@point^0,w,c
  5594  002DCC  A4D8               	btfss	status,2,c
  5595  002DCE  D059               	goto	u9300
  5596  002DD0                     u9260:
  5597                           
  5598                           ;fence.c: 128: {;fence.c: 129: if(point == 2 && !point_index_long)
  5599  002DD0  0E02               	movlw	2
  5600  002DD2  1821               	xorwf	verifica_diferenca_graus@point^0,w,c
  5601  002DD4  A4D8               	btfss	status,2,c
  5602  002DD6  D003               	goto	l8495
  5603  002DD8  501F               	movf	verifica_diferenca_graus@point_index_long^0,w,c
  5604  002DDA  B4D8               	btfsc	status,2,c
  5605                           
  5606                           ;fence.c: 130: {;fence.c: 131: point_index_long++;
  5607  002DDC  2A1F               	incf	verifica_diferenca_graus@point_index_long^0,f,c
  5608  002DDE                     l8495:
  5609                           
  5610                           ;fence.c: 132: };fence.c: 133: for(j= 0; i < 6; j++)
  5611  002DDE  0E00               	movlw	0
  5612  002DE0  6E20               	movwf	verifica_diferenca_graus@j^0,c
  5613  002DE2                     l8497:
  5614  002DE2  0E05               	movlw	5
  5615  002DE4  6422               	cpfsgt	verifica_diferenca_graus@i^0,c
  5616  002DE6  D001               	goto	l8501
  5617  002DE8  D048               	goto	l8511
  5618  002DEA                     l8501:
  5619                           
  5620                           ;fence.c: 134: {;fence.c: 135: poligono_ext[point_index_long].point_long_deg[j] = temp_b
      +                          uff_long[i];
  5621  002DEA  0E8D               	movlw	low _temp_buff_long
  5622  002DEC  2422               	addwf	verifica_diferenca_graus@i^0,w,c
  5623  002DEE  6ED9               	movwf	fsr2l,c
  5624  002DF0  6ADA               	clrf	fsr2h,c
  5625  002DF2  0E02               	movlw	high _temp_buff_long
  5626  002DF4  22DA               	addwfc	fsr2h,f,c
  5627  002DF6  501F               	movf	verifica_diferenca_graus@point_index_long^0,w,c
  5628  002DF8  0D3E               	mullw	62
  5629  002DFA  0E38               	movlw	low _poligono_ext
  5630  002DFC  6E19               	movwf	??_verifica_diferenca_graus^0,c
  5631  002DFE  0E01               	movlw	high _poligono_ext
  5632  002E00  6E1A               	movwf	(??_verifica_diferenca_graus+1)^0,c
  5633  002E02  0E10               	movlw	16
  5634  002E04  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  5635  002E06  0E00               	movlw	0
  5636  002E08  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  5637  002E0A  50F3               	movf	243,w,c
  5638  002E0C  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  5639  002E0E  50F4               	movf	244,w,c
  5640  002E10  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  5641  002E12  5020               	movf	verifica_diferenca_graus@j^0,w,c
  5642  002E14  2419               	addwf	??_verifica_diferenca_graus^0,w,c
  5643  002E16  6EE1               	movwf	fsr1l,c
  5644  002E18  0E00               	movlw	0
  5645  002E1A  201A               	addwfc	(??_verifica_diferenca_graus+1)^0,w,c
  5646  002E1C  6EE2               	movwf	fsr1h,c
  5647  002E1E  CFDF FFE7          	movff	indf2,indf1
  5648                           
  5649                           ;fence.c: 136: poligono_ext[point_index_long].fence_long_deg[j] = fence_diff_long[point]
      +                          [i];
  5650  002E22  5021               	movf	verifica_diferenca_graus@point^0,w,c
  5651  002E24  0D0C               	mullw	12
  5652  002E26  0E8B               	movlw	low _fence_diff_long
  5653  002E28  6E19               	movwf	??_verifica_diferenca_graus^0,c
  5654  002E2A  0E60               	movlw	high _fence_diff_long
  5655  002E2C  6E1A               	movwf	(??_verifica_diferenca_graus+1)^0,c
  5656  002E2E  50F3               	movf	243,w,c
  5657  002E30  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  5658  002E32  50F4               	movf	244,w,c
  5659  002E34  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  5660  002E36  5022               	movf	verifica_diferenca_graus@i^0,w,c
  5661  002E38  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  5662  002E3A  0E00               	movlw	0
  5663  002E3C  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  5664  002E3E  C019  FFF6         	movff	??_verifica_diferenca_graus,tblptrl
  5665  002E42  C01A  FFF7         	movff	??_verifica_diferenca_graus+1,tblptrh
  5666  002E46                     	if	0	;tblptru may be non-zero
  5667  002E46                     	endif
  5668  002E46                     	if	0	;tblptru may be non-zero
  5669  002E46                     	endif
  5670  002E46  501F               	movf	verifica_diferenca_graus@point_index_long^0,w,c
  5671  002E48  0D3E               	mullw	62
  5672  002E4A  0E38               	movlw	low _poligono_ext
  5673  002E4C  6E1B               	movwf	(??_verifica_diferenca_graus+2)^0,c
  5674  002E4E  0E01               	movlw	high _poligono_ext
  5675  002E50  6E1C               	movwf	(??_verifica_diferenca_graus+3)^0,c
  5676  002E52  0E05               	movlw	5
  5677  002E54  261B               	addwf	(??_verifica_diferenca_graus+2)^0,f,c
  5678  002E56  0E00               	movlw	0
  5679  002E58  221C               	addwfc	(??_verifica_diferenca_graus+3)^0,f,c
  5680  002E5A  50F3               	movf	243,w,c
  5681  002E5C  261B               	addwf	(??_verifica_diferenca_graus+2)^0,f,c
  5682  002E5E  50F4               	movf	244,w,c
  5683  002E60  221C               	addwfc	(??_verifica_diferenca_graus+3)^0,f,c
  5684  002E62  5020               	movf	verifica_diferenca_graus@j^0,w,c
  5685  002E64  241B               	addwf	(??_verifica_diferenca_graus+2)^0,w,c
  5686  002E66  6ED9               	movwf	fsr2l,c
  5687  002E68  0E00               	movlw	0
  5688  002E6A  201C               	addwfc	(??_verifica_diferenca_graus+3)^0,w,c
  5689  002E6C  6EDA               	movwf	fsr2h,c
  5690  002E6E  0008               	tblrd		*
  5691  002E70  CFF5 FFDF          	movff	tablat,indf2
  5692                           
  5693                           ;fence.c: 138: i++;
  5694  002E74  2A22               	incf	verifica_diferenca_graus@i^0,f,c
  5695  002E76  2A20               	incf	verifica_diferenca_graus@j^0,f,c
  5696  002E78  D7B4               	goto	l8497
  5697  002E7A                     l8511:
  5698  002E7A  2A22               	incf	verifica_diferenca_graus@i^0,f,c
  5699  002E7C  0E05               	movlw	5
  5700  002E7E  6422               	cpfsgt	verifica_diferenca_graus@i^0,c
  5701  002E80  D7A0               	goto	l8485
  5702  002E82                     u9300:
  5703                           
  5704                           ;fence.c: 145: };fence.c: 147: };fence.c: 149: point++;
  5705  002E82  2A21               	incf	verifica_diferenca_graus@point^0,f,c
  5706  002E84                     l8517:
  5707  002E84  0E03               	movlw	3
  5708  002E86  6421               	cpfsgt	verifica_diferenca_graus@point^0,c
  5709  002E88  D79A               	goto	l8479
  5710  002E8A  0012               	return	
  5711  002E8C                     l8521:
  5712  002E8C  501D               	movf	verifica_diferenca_graus@select_data^0,w,c
  5713                           
  5714                           ; Switch size 1, requested type "simple"
  5715                           ; Number of cases is 2, Range of values is 0 to 1
  5716                           ; switch strategies available:
  5717                           ; Name         Instructions Cycles
  5718                           ; simple_byte            7     4 (average)
  5719                           ;	Chosen strategy is simple_byte
  5720  002E8E  0A00               	xorlw	0	; case 0
  5721  002E90  B4D8               	btfsc	status,2,c
  5722  002E92  D7F8               	goto	l8517
  5723  002E94  0A01               	xorlw	1	; case 1
  5724  002E96  A4D8               	btfss	status,2,c
  5725  002E98  0012               	return	
  5726  002E9A  D78D               	goto	l8477
  5727  002E9C                     __end_of_verifica_diferenca_graus:
  5728                           	callstack 0
  5729                           
  5730 ;; *************** function _calcula_diff_minutos *****************
  5731 ;; Defined at:
  5732 ;;		line 314 in file "bibliotecas/fence.c"
  5733 ;; Parameters:    Size  Location     Type
  5734 ;;  select_data     1    wreg     unsigned char 
  5735 ;; Auto vars:     Size  Location     Type
  5736 ;;  select_data     1   43[COMRAM] unsigned char 
  5737 ;;  count           1   45[COMRAM] unsigned char 
  5738 ;;  point           1   44[COMRAM] unsigned char 
  5739 ;; Return value:  Size  Location     Type
  5740 ;;                  1    wreg      void 
  5741 ;; Registers used:
  5742 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5743 ;; Tracked objects:
  5744 ;;		On entry : 0/0
  5745 ;;		On exit  : 0/0
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5748 ;;      Params:         0       0       0       0       0       0       0       0       0
  5749 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5750 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5751 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5752 ;;Total ram usage:        3 bytes
  5753 ;; Hardware stack levels used:    1
  5754 ;; Hardware stack levels required when called:    6
  5755 ;; This function calls:
  5756 ;;		_diff_calc
  5757 ;; This function is called by:
  5758 ;;		_verifica_fence_externo
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           
  5762                           	psect	text26
  5763  003C4C                     __ptext26:
  5764                           	callstack 0
  5765  003C4C                     _calcula_diff_minutos:
  5766                           	callstack 21
  5767                           
  5768                           ;incstack = 0
  5769                           ;calcula_diff_minutos@select_data stored from wreg
  5770  003C4C  6E2C               	movwf	calcula_diff_minutos@select_data^0,c
  5771                           
  5772                           ;fence.c: 316: unsigned char point, count;;fence.c: 319: switch(select_data)
  5773  003C4E  D05E               	goto	l11701
  5774  003C50                     l11675:
  5775                           
  5776                           ;fence.c: 323: {;fence.c: 324: if(point == 0 || point == 2)
  5777  003C50  502D               	movf	calcula_diff_minutos@point^0,w,c
  5778  003C52  B4D8               	btfsc	status,2,c
  5779  003C54  D004               	goto	u14250
  5780  003C56  0E02               	movlw	2
  5781  003C58  182D               	xorwf	calcula_diff_minutos@point^0,w,c
  5782  003C5A  A4D8               	btfss	status,2,c
  5783  003C5C  D023               	goto	l11683
  5784  003C5E                     u14250:
  5785                           
  5786                           ;fence.c: 325: {;fence.c: 326: poligono_ext[count].diff_lat_min = diff_calc(poligono_ext
      +                          [count].fence_lat_min, poligono_ext[count].point_lat_min );
  5787  003C5E  502E               	movf	calcula_diff_minutos@count^0,w,c
  5788  003C60  0D3E               	mullw	62
  5789  003C62  0E56               	movlw	low (_poligono_ext+30)
  5790  003C64  24F3               	addwf	243,w,c
  5791  003C66  6E26               	movwf	diff_calc@p_buff_fence^0,c
  5792  003C68  0E01               	movlw	high (_poligono_ext+30)
  5793  003C6A  20F4               	addwfc	prodh,w,c
  5794  003C6C  6E27               	movwf	(diff_calc@p_buff_fence+1)^0,c
  5795  003C6E  502E               	movf	calcula_diff_minutos@count^0,w,c
  5796  003C70  0D3E               	mullw	62
  5797  003C72  0E62               	movlw	low (_poligono_ext+42)
  5798  003C74  24F3               	addwf	243,w,c
  5799  003C76  6E28               	movwf	diff_calc@p_buff_point^0,c
  5800  003C78  0E01               	movlw	high (_poligono_ext+42)
  5801  003C7A  20F4               	addwfc	prodh,w,c
  5802  003C7C  6E29               	movwf	(diff_calc@p_buff_point+1)^0,c
  5803  003C7E  EC69  F025         	call	_diff_calc	;wreg free
  5804  003C82  502E               	movf	calcula_diff_minutos@count^0,w,c
  5805  003C84  0D3E               	mullw	62
  5806  003C86  0E6E               	movlw	low (_poligono_ext+54)
  5807  003C88  24F3               	addwf	243,w,c
  5808  003C8A  6ED9               	movwf	fsr2l,c
  5809  003C8C  0E01               	movlw	high (_poligono_ext+54)
  5810  003C8E  20F4               	addwfc	prodh,w,c
  5811  003C90  6EDA               	movwf	fsr2h,c
  5812  003C92  C026  FFDE         	movff	?_diff_calc,postinc2
  5813  003C96  C027  FFDE         	movff	?_diff_calc+1,postinc2
  5814  003C9A  C028  FFDE         	movff	?_diff_calc+2,postinc2
  5815  003C9E  C029  FFDE         	movff	?_diff_calc+3,postinc2
  5816                           
  5817                           ;fence.c: 328: count++;
  5818  003CA2  2A2E               	incf	calcula_diff_minutos@count^0,f,c
  5819  003CA4                     l11683:
  5820                           
  5821                           ;fence.c: 329: };fence.c: 330: point++;
  5822  003CA4  2A2D               	incf	calcula_diff_minutos@point^0,f,c
  5823  003CA6                     l11685:
  5824  003CA6  0E03               	movlw	3
  5825  003CA8  642D               	cpfsgt	calcula_diff_minutos@point^0,c
  5826  003CAA  D7D2               	goto	l11675
  5827  003CAC  0012               	return	
  5828  003CAE                     l11687:
  5829                           
  5830                           ;fence.c: 336: {;fence.c: 337: if(point == 0 || point == 2)
  5831  003CAE  502D               	movf	calcula_diff_minutos@point^0,w,c
  5832  003CB0  B4D8               	btfsc	status,2,c
  5833  003CB2  D004               	goto	u14280
  5834  003CB4  0E02               	movlw	2
  5835  003CB6  182D               	xorwf	calcula_diff_minutos@point^0,w,c
  5836  003CB8  A4D8               	btfss	status,2,c
  5837  003CBA  D023               	goto	l11695
  5838  003CBC                     u14280:
  5839                           
  5840                           ;fence.c: 338: {;fence.c: 339: poligono_ext[count].diff_long_min =diff_calc(poligono_ext
      +                          [count].fence_long_min, poligono_ext[count].point_long_min );
  5841  003CBC  502E               	movf	calcula_diff_minutos@count^0,w,c
  5842  003CBE  0D3E               	mullw	62
  5843  003CC0  0E5C               	movlw	low (_poligono_ext+36)
  5844  003CC2  24F3               	addwf	243,w,c
  5845  003CC4  6E26               	movwf	diff_calc@p_buff_fence^0,c
  5846  003CC6  0E01               	movlw	high (_poligono_ext+36)
  5847  003CC8  20F4               	addwfc	prodh,w,c
  5848  003CCA  6E27               	movwf	(diff_calc@p_buff_fence+1)^0,c
  5849  003CCC  502E               	movf	calcula_diff_minutos@count^0,w,c
  5850  003CCE  0D3E               	mullw	62
  5851  003CD0  0E68               	movlw	low (_poligono_ext+48)
  5852  003CD2  24F3               	addwf	243,w,c
  5853  003CD4  6E28               	movwf	diff_calc@p_buff_point^0,c
  5854  003CD6  0E01               	movlw	high (_poligono_ext+48)
  5855  003CD8  20F4               	addwfc	prodh,w,c
  5856  003CDA  6E29               	movwf	(diff_calc@p_buff_point+1)^0,c
  5857  003CDC  EC69  F025         	call	_diff_calc	;wreg free
  5858  003CE0  502E               	movf	calcula_diff_minutos@count^0,w,c
  5859  003CE2  0D3E               	mullw	62
  5860  003CE4  0E72               	movlw	low (_poligono_ext+58)
  5861  003CE6  24F3               	addwf	243,w,c
  5862  003CE8  6ED9               	movwf	fsr2l,c
  5863  003CEA  0E01               	movlw	high (_poligono_ext+58)
  5864  003CEC  20F4               	addwfc	prodh,w,c
  5865  003CEE  6EDA               	movwf	fsr2h,c
  5866  003CF0  C026  FFDE         	movff	?_diff_calc,postinc2
  5867  003CF4  C027  FFDE         	movff	?_diff_calc+1,postinc2
  5868  003CF8  C028  FFDE         	movff	?_diff_calc+2,postinc2
  5869  003CFC  C029  FFDE         	movff	?_diff_calc+3,postinc2
  5870                           
  5871                           ;fence.c: 341: count++;
  5872  003D00  2A2E               	incf	calcula_diff_minutos@count^0,f,c
  5873  003D02                     l11695:
  5874                           
  5875                           ;fence.c: 342: };fence.c: 343: point++;
  5876  003D02  2A2D               	incf	calcula_diff_minutos@point^0,f,c
  5877  003D04                     l11697:
  5878  003D04  0E03               	movlw	3
  5879  003D06  642D               	cpfsgt	calcula_diff_minutos@point^0,c
  5880  003D08  D7D2               	goto	l11687
  5881  003D0A  0012               	return	
  5882  003D0C                     l11701:
  5883  003D0C  502C               	movf	calcula_diff_minutos@select_data^0,w,c
  5884                           
  5885                           ; Switch size 1, requested type "simple"
  5886                           ; Number of cases is 2, Range of values is 0 to 1
  5887                           ; switch strategies available:
  5888                           ; Name         Instructions Cycles
  5889                           ; simple_byte            7     4 (average)
  5890                           ;	Chosen strategy is simple_byte
  5891  003D0E  0A00               	xorlw	0	; case 0
  5892  003D10  B4D8               	btfsc	status,2,c
  5893  003D12  D7F8               	goto	l11697
  5894  003D14  0A01               	xorlw	1	; case 1
  5895  003D16  A4D8               	btfss	status,2,c
  5896  003D18  0012               	return	
  5897  003D1A  D7C5               	goto	l11685
  5898  003D1C                     __end_of_calcula_diff_minutos:
  5899                           	callstack 0
  5900                           
  5901 ;; *************** function _calcula_diff_graus *****************
  5902 ;; Defined at:
  5903 ;;		line 166 in file "bibliotecas/fence.c"
  5904 ;; Parameters:    Size  Location     Type
  5905 ;;  select_data     1    wreg     unsigned char 
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  select_data     1   43[COMRAM] unsigned char 
  5908 ;;  count           1   45[COMRAM] unsigned char 
  5909 ;;  point           1   44[COMRAM] unsigned char 
  5910 ;; Return value:  Size  Location     Type
  5911 ;;                  1    wreg      void 
  5912 ;; Registers used:
  5913 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5914 ;; Tracked objects:
  5915 ;;		On entry : 0/0
  5916 ;;		On exit  : 0/0
  5917 ;;		Unchanged: 0/0
  5918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5919 ;;      Params:         0       0       0       0       0       0       0       0       0
  5920 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5921 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5922 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5923 ;;Total ram usage:        3 bytes
  5924 ;; Hardware stack levels used:    1
  5925 ;; Hardware stack levels required when called:    6
  5926 ;; This function calls:
  5927 ;;		_diff_calc
  5928 ;; This function is called by:
  5929 ;;		_verifica_fence_externo
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           	psect	text27
  5934  003B74                     __ptext27:
  5935                           	callstack 0
  5936  003B74                     _calcula_diff_graus:
  5937                           	callstack 21
  5938                           
  5939                           ;incstack = 0
  5940                           ;calcula_diff_graus@select_data stored from wreg
  5941  003B74  6E2C               	movwf	calcula_diff_graus@select_data^0,c
  5942                           
  5943                           ;fence.c: 168: unsigned char point, count;;fence.c: 171: point = 0;
  5944  003B76  0E00               	movlw	0
  5945  003B78  6E2D               	movwf	calcula_diff_graus@point^0,c
  5946                           
  5947                           ;fence.c: 172: count = 0;
  5948  003B7A  0E00               	movlw	0
  5949  003B7C  6E2E               	movwf	calcula_diff_graus@count^0,c
  5950                           
  5951                           ;fence.c: 174: switch(select_data)
  5952  003B7E  D05E               	goto	l11671
  5953  003B80                     l11645:
  5954                           
  5955                           ;fence.c: 178: {;fence.c: 179: if(point == 0 || point == 2)
  5956  003B80  502D               	movf	calcula_diff_graus@point^0,w,c
  5957  003B82  B4D8               	btfsc	status,2,c
  5958  003B84  D004               	goto	u14190
  5959  003B86  0E02               	movlw	2
  5960  003B88  182D               	xorwf	calcula_diff_graus@point^0,w,c
  5961  003B8A  A4D8               	btfss	status,2,c
  5962  003B8C  D023               	goto	l11653
  5963  003B8E                     u14190:
  5964                           
  5965                           ;fence.c: 180: {;fence.c: 184: poligono_ext[count].diff_lat_deg = diff_calc(poligono_ext
      +                          [count].fence_lat_deg, poligono_ext[count].point_lat_deg);
  5966  003B8E  502E               	movf	calcula_diff_graus@count^0,w,c
  5967  003B90  0D3E               	mullw	62
  5968  003B92  0E38               	movlw	low _poligono_ext
  5969  003B94  24F3               	addwf	243,w,c
  5970  003B96  6E26               	movwf	diff_calc@p_buff_fence^0,c
  5971  003B98  0E01               	movlw	high _poligono_ext
  5972  003B9A  20F4               	addwfc	prodh,w,c
  5973  003B9C  6E27               	movwf	(diff_calc@p_buff_fence+1)^0,c
  5974  003B9E  502E               	movf	calcula_diff_graus@count^0,w,c
  5975  003BA0  0D3E               	mullw	62
  5976  003BA2  0E43               	movlw	low (_poligono_ext+11)
  5977  003BA4  24F3               	addwf	243,w,c
  5978  003BA6  6E28               	movwf	diff_calc@p_buff_point^0,c
  5979  003BA8  0E01               	movlw	high (_poligono_ext+11)
  5980  003BAA  20F4               	addwfc	prodh,w,c
  5981  003BAC  6E29               	movwf	(diff_calc@p_buff_point+1)^0,c
  5982  003BAE  EC69  F025         	call	_diff_calc	;wreg free
  5983  003BB2  502E               	movf	calcula_diff_graus@count^0,w,c
  5984  003BB4  0D3E               	mullw	62
  5985  003BB6  0E4E               	movlw	low (_poligono_ext+22)
  5986  003BB8  24F3               	addwf	243,w,c
  5987  003BBA  6ED9               	movwf	fsr2l,c
  5988  003BBC  0E01               	movlw	high (_poligono_ext+22)
  5989  003BBE  20F4               	addwfc	prodh,w,c
  5990  003BC0  6EDA               	movwf	fsr2h,c
  5991  003BC2  C026  FFDE         	movff	?_diff_calc,postinc2
  5992  003BC6  C027  FFDE         	movff	?_diff_calc+1,postinc2
  5993  003BCA  C028  FFDE         	movff	?_diff_calc+2,postinc2
  5994  003BCE  C029  FFDE         	movff	?_diff_calc+3,postinc2
  5995                           
  5996                           ;fence.c: 189: count++;
  5997  003BD2  2A2E               	incf	calcula_diff_graus@count^0,f,c
  5998  003BD4                     l11653:
  5999                           
  6000                           ;fence.c: 190: };fence.c: 191: point++;
  6001  003BD4  2A2D               	incf	calcula_diff_graus@point^0,f,c
  6002  003BD6                     l11655:
  6003  003BD6  0E03               	movlw	3
  6004  003BD8  642D               	cpfsgt	calcula_diff_graus@point^0,c
  6005  003BDA  D7D2               	goto	l11645
  6006  003BDC  0012               	return	
  6007  003BDE                     l11657:
  6008                           
  6009                           ;fence.c: 199: {;fence.c: 200: if(point == 0 || point == 2)
  6010  003BDE  502D               	movf	calcula_diff_graus@point^0,w,c
  6011  003BE0  B4D8               	btfsc	status,2,c
  6012  003BE2  D004               	goto	u14220
  6013  003BE4  0E02               	movlw	2
  6014  003BE6  182D               	xorwf	calcula_diff_graus@point^0,w,c
  6015  003BE8  A4D8               	btfss	status,2,c
  6016  003BEA  D023               	goto	l11665
  6017  003BEC                     u14220:
  6018                           
  6019                           ;fence.c: 201: {;fence.c: 202: poligono_ext[count].diff_long_deg = diff_calc(poligono_ex
      +                          t[count].fence_long_deg, poligono_ext[count].point_long_deg);
  6020  003BEC  502E               	movf	calcula_diff_graus@count^0,w,c
  6021  003BEE  0D3E               	mullw	62
  6022  003BF0  0E3D               	movlw	low (_poligono_ext+5)
  6023  003BF2  24F3               	addwf	243,w,c
  6024  003BF4  6E26               	movwf	diff_calc@p_buff_fence^0,c
  6025  003BF6  0E01               	movlw	high (_poligono_ext+5)
  6026  003BF8  20F4               	addwfc	prodh,w,c
  6027  003BFA  6E27               	movwf	(diff_calc@p_buff_fence+1)^0,c
  6028  003BFC  502E               	movf	calcula_diff_graus@count^0,w,c
  6029  003BFE  0D3E               	mullw	62
  6030  003C00  0E48               	movlw	low (_poligono_ext+16)
  6031  003C02  24F3               	addwf	243,w,c
  6032  003C04  6E28               	movwf	diff_calc@p_buff_point^0,c
  6033  003C06  0E01               	movlw	high (_poligono_ext+16)
  6034  003C08  20F4               	addwfc	prodh,w,c
  6035  003C0A  6E29               	movwf	(diff_calc@p_buff_point+1)^0,c
  6036  003C0C  EC69  F025         	call	_diff_calc	;wreg free
  6037  003C10  502E               	movf	calcula_diff_graus@count^0,w,c
  6038  003C12  0D3E               	mullw	62
  6039  003C14  0E52               	movlw	low (_poligono_ext+26)
  6040  003C16  24F3               	addwf	243,w,c
  6041  003C18  6ED9               	movwf	fsr2l,c
  6042  003C1A  0E01               	movlw	high (_poligono_ext+26)
  6043  003C1C  20F4               	addwfc	prodh,w,c
  6044  003C1E  6EDA               	movwf	fsr2h,c
  6045  003C20  C026  FFDE         	movff	?_diff_calc,postinc2
  6046  003C24  C027  FFDE         	movff	?_diff_calc+1,postinc2
  6047  003C28  C028  FFDE         	movff	?_diff_calc+2,postinc2
  6048  003C2C  C029  FFDE         	movff	?_diff_calc+3,postinc2
  6049                           
  6050                           ;fence.c: 207: count++;
  6051  003C30  2A2E               	incf	calcula_diff_graus@count^0,f,c
  6052  003C32                     l11665:
  6053                           
  6054                           ;fence.c: 208: };fence.c: 209: point++;
  6055  003C32  2A2D               	incf	calcula_diff_graus@point^0,f,c
  6056  003C34                     l11667:
  6057  003C34  0E03               	movlw	3
  6058  003C36  642D               	cpfsgt	calcula_diff_graus@point^0,c
  6059  003C38  D7D2               	goto	l11657
  6060  003C3A  0012               	return	
  6061  003C3C                     l11671:
  6062  003C3C  502C               	movf	calcula_diff_graus@select_data^0,w,c
  6063                           
  6064                           ; Switch size 1, requested type "simple"
  6065                           ; Number of cases is 2, Range of values is 0 to 1
  6066                           ; switch strategies available:
  6067                           ; Name         Instructions Cycles
  6068                           ; simple_byte            7     4 (average)
  6069                           ;	Chosen strategy is simple_byte
  6070  003C3E  0A00               	xorlw	0	; case 0
  6071  003C40  B4D8               	btfsc	status,2,c
  6072  003C42  D7F8               	goto	l11667
  6073  003C44  0A01               	xorlw	1	; case 1
  6074  003C46  A4D8               	btfss	status,2,c
  6075  003C48  0012               	return	
  6076  003C4A  D7C5               	goto	l11655
  6077  003C4C                     __end_of_calcula_diff_graus:
  6078                           	callstack 0
  6079                           
  6080 ;; *************** function _diff_calc *****************
  6081 ;; Defined at:
  6082 ;;		line 483 in file "bibliotecas/fence.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;  p_buff_fence    2   37[COMRAM] PTR unsigned char 
  6085 ;;		 -> poligono_ext(124), 
  6086 ;;  p_buff_point    2   39[COMRAM] PTR unsigned char 
  6087 ;;		 -> poligono_ext(124), 
  6088 ;; Auto vars:     Size  Location     Type
  6089 ;;  point          12   12[BANK0 ] unsigned char [12]
  6090 ;;  fence          12    0[BANK0 ] unsigned char [12]
  6091 ;; Return value:  Size  Location     Type
  6092 ;;                  4   37[COMRAM] long 
  6093 ;; Registers used:
  6094 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6095 ;; Tracked objects:
  6096 ;;		On entry : 0/0
  6097 ;;		On exit  : 0/0
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6100 ;;      Params:         4       0       0       0       0       0       0       0       0
  6101 ;;      Locals:         0      24       0       0       0       0       0       0       0
  6102 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6103 ;;      Totals:         6      24       0       0       0       0       0       0       0
  6104 ;;Total ram usage:       30 bytes
  6105 ;; Hardware stack levels used:    1
  6106 ;; Hardware stack levels required when called:    5
  6107 ;; This function calls:
  6108 ;;		_atoi
  6109 ;;		_strcpy
  6110 ;; This function is called by:
  6111 ;;		_calcula_diff_graus
  6112 ;;		_calcula_diff_minutos
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           	psect	text28
  6117  004AD2                     __ptext28:
  6118                           	callstack 0
  6119  004AD2                     _diff_calc:
  6120                           	callstack 21
  6121                           
  6122                           ;fence.c: 485: unsigned char fence[12];;fence.c: 486: unsigned char point[12];;fence.c: 
      +                          488: strcpy(fence, p_buff_fence);
  6123                           
  6124                           ;incstack = 0
  6125  004AD2  0E60               	movlw	low diff_calc@fence
  6126  004AD4  6E1B               	movwf	strcpy@to^0,c
  6127  004AD6  6A1C               	clrf	(strcpy@to+1)^0,c
  6128  004AD8  C026  F01D         	movff	diff_calc@p_buff_fence,strcpy@from
  6129  004ADC  C027  F01E         	movff	diff_calc@p_buff_fence+1,strcpy@from+1
  6130  004AE0  EC1D  F027         	call	_strcpy	;wreg free
  6131                           
  6132                           ;fence.c: 489: strcpy(point, p_buff_point);
  6133  004AE4  0E6C               	movlw	low diff_calc@point
  6134  004AE6  6E1B               	movwf	strcpy@to^0,c
  6135  004AE8  6A1C               	clrf	(strcpy@to+1)^0,c
  6136  004AEA  C028  F01D         	movff	diff_calc@p_buff_point,strcpy@from
  6137  004AEE  C029  F01E         	movff	diff_calc@p_buff_point+1,strcpy@from+1
  6138  004AF2  EC1D  F027         	call	_strcpy	;wreg free
  6139                           
  6140                           ;fence.c: 490: return ((atoi(fence))-(atoi(point)));
  6141  004AF6  0E60               	movlw	low diff_calc@fence
  6142  004AF8  6E1F               	movwf	atoi@s^0,c
  6143  004AFA  ECF4  F01E         	call	_atoi	;wreg free
  6144  004AFE  C01F  F02A         	movff	?_atoi,??_diff_calc
  6145  004B02  C020  F02B         	movff	?_atoi+1,??_diff_calc+1
  6146  004B06  0E6C               	movlw	low diff_calc@point
  6147  004B08  6E1F               	movwf	atoi@s^0,c
  6148  004B0A  ECF4  F01E         	call	_atoi	;wreg free
  6149  004B0E  501F               	movf	?_atoi^0,w,c
  6150  004B10  5E2A               	subwf	??_diff_calc^0,f,c
  6151  004B12  5020               	movf	(?_atoi+1)^0,w,c
  6152  004B14  5A2B               	subwfb	(??_diff_calc+1)^0,f,c
  6153  004B16  C02A  F026         	movff	??_diff_calc,?_diff_calc
  6154  004B1A  C02B  F027         	movff	??_diff_calc+1,?_diff_calc+1
  6155  004B1E  0E00               	movlw	0
  6156  004B20  BE27               	btfsc	(?_diff_calc+1)^0,7,c
  6157  004B22  0EFF               	movlw	-1
  6158  004B24  6E28               	movwf	(?_diff_calc+2)^0,c
  6159  004B26  6E29               	movwf	(?_diff_calc+3)^0,c
  6160  004B28  0012               	return		;funcret
  6161  004B2A                     __end_of_diff_calc:
  6162                           	callstack 0
  6163                           
  6164 ;; *************** function _atoi *****************
  6165 ;; Defined at:
  6166 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\atoi.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;  s               1   30[COMRAM] PTR const unsigned char 
  6169 ;;		 -> diff_calc@point(12), diff_calc@fence(12), 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  a               2   35[COMRAM] int 
  6172 ;;  sign            1   34[COMRAM] unsigned char 
  6173 ;; Return value:  Size  Location     Type
  6174 ;;                  2   30[COMRAM] int 
  6175 ;; Registers used:
  6176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6177 ;; Tracked objects:
  6178 ;;		On entry : 0/0
  6179 ;;		On exit  : 0/0
  6180 ;;		Unchanged: 0/0
  6181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6182 ;;      Params:         2       0       0       0       0       0       0       0       0
  6183 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6184 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6185 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6186 ;;Total ram usage:        7 bytes
  6187 ;; Hardware stack levels used:    1
  6188 ;; Hardware stack levels required when called:    4
  6189 ;; This function calls:
  6190 ;;		___wmul
  6191 ;;		_isdigit
  6192 ;; This function is called by:
  6193 ;;		_diff_calc
  6194 ;; This function uses a non-reentrant model
  6195 ;;
  6196                           
  6197                           	psect	text29
  6198  003DE8                     __ptext29:
  6199                           	callstack 0
  6200  003DE8                     _atoi:
  6201                           	callstack 21
  6202                           
  6203                           ;incstack = 0
  6204  003DE8  D001               	goto	l10761
  6205  003DEA                     l10759:
  6206  003DEA  2A1F               	incf	atoi@s^0,f,c
  6207  003DEC                     l10761:
  6208  003DEC  501F               	movf	atoi@s^0,w,c
  6209  003DEE  6ED9               	movwf	fsr2l,c
  6210  003DF0  6ADA               	clrf	fsr2h,c
  6211  003DF2  0E20               	movlw	32
  6212  003DF4  18DE               	xorwf	postinc2,w,c
  6213  003DF6  B4D8               	btfsc	status,2,c
  6214  003DF8  D7F8               	goto	l10759
  6215  003DFA  501F               	movf	atoi@s^0,w,c
  6216  003DFC  6ED9               	movwf	fsr2l,c
  6217  003DFE  6ADA               	clrf	fsr2h,c
  6218  003E00  0E09               	movlw	9
  6219  003E02  18DE               	xorwf	postinc2,w,c
  6220  003E04  B4D8               	btfsc	status,2,c
  6221  003E06  D7F1               	goto	l10759
  6222  003E08  0E00               	movlw	0
  6223  003E0A  6E25               	movwf	(atoi@a+1)^0,c
  6224  003E0C  0E00               	movlw	0
  6225  003E0E  6E24               	movwf	atoi@a^0,c
  6226  003E10  0E00               	movlw	0
  6227  003E12  6E23               	movwf	atoi@sign^0,c
  6228  003E14  501F               	movf	atoi@s^0,w,c
  6229  003E16  6ED9               	movwf	fsr2l,c
  6230  003E18  6ADA               	clrf	fsr2h,c
  6231  003E1A  0E2D               	movlw	45
  6232  003E1C  18DE               	xorwf	postinc2,w,c
  6233  003E1E  A4D8               	btfss	status,2,c
  6234  003E20  D002               	goto	l10771
  6235  003E22  2A23               	incf	atoi@sign^0,f,c
  6236  003E24  D007               	goto	u12670
  6237  003E26                     l10771:
  6238  003E26  501F               	movf	atoi@s^0,w,c
  6239  003E28  6ED9               	movwf	fsr2l,c
  6240  003E2A  6ADA               	clrf	fsr2h,c
  6241  003E2C  0E2B               	movlw	43
  6242  003E2E  18DE               	xorwf	postinc2,w,c
  6243  003E30  A4D8               	btfss	status,2,c
  6244  003E32  D01C               	goto	l10779
  6245  003E34                     u12670:
  6246  003E34  2A1F               	incf	atoi@s^0,f,c
  6247  003E36  D01A               	goto	l10779
  6248  003E38                     l10775:
  6249  003E38  C024  F019         	movff	atoi@a,___wmul@multiplier
  6250  003E3C  C025  F01A         	movff	atoi@a+1,___wmul@multiplier+1
  6251  003E40  0E00               	movlw	0
  6252  003E42  6E1C               	movwf	(___wmul@multiplicand+1)^0,c
  6253  003E44  0E0A               	movlw	10
  6254  003E46  6E1B               	movwf	___wmul@multiplicand^0,c
  6255  003E48  ECF2  F028         	call	___wmul	;wreg free
  6256  003E4C  501F               	movf	atoi@s^0,w,c
  6257  003E4E  6ED9               	movwf	fsr2l,c
  6258  003E50  6ADA               	clrf	fsr2h,c
  6259  003E52  50DF               	movf	indf2,w,c
  6260  003E54  6E21               	movwf	??_atoi^0,c
  6261  003E56  5021               	movf	??_atoi^0,w,c
  6262  003E58  2619               	addwf	?___wmul^0,f,c
  6263  003E5A  0E00               	movlw	0
  6264  003E5C  221A               	addwfc	(?___wmul+1)^0,f,c
  6265  003E5E  0ED0               	movlw	208
  6266  003E60  2419               	addwf	?___wmul^0,w,c
  6267  003E62  6E24               	movwf	atoi@a^0,c
  6268  003E64  0EFF               	movlw	255
  6269  003E66  201A               	addwfc	(?___wmul+1)^0,w,c
  6270  003E68  6E25               	movwf	(atoi@a+1)^0,c
  6271  003E6A  D7E4               	goto	u12670
  6272  003E6C                     l10779:
  6273  003E6C  501F               	movf	atoi@s^0,w,c
  6274  003E6E  6ED9               	movwf	fsr2l,c
  6275  003E70  6ADA               	clrf	fsr2h,c
  6276  003E72  50DF               	movf	indf2,w,c
  6277  003E74  ECAF  F029         	call	_isdigit
  6278  003E78  B0D8               	btfsc	status,0,c
  6279  003E7A  D7DE               	goto	l10775
  6280  003E7C  5023               	movf	atoi@sign^0,w,c
  6281  003E7E  B4D8               	btfsc	status,2,c
  6282  003E80  D00D               	goto	l2323
  6283  003E82  C024  F021         	movff	atoi@a,??_atoi
  6284  003E86  C025  F022         	movff	atoi@a+1,??_atoi+1
  6285  003E8A  1E21               	comf	??_atoi^0,f,c
  6286  003E8C  1E22               	comf	(??_atoi+1)^0,f,c
  6287  003E8E  4A21               	infsnz	??_atoi^0,f,c
  6288  003E90  2A22               	incf	(??_atoi+1)^0,f,c
  6289  003E92  C021  F01F         	movff	??_atoi,?_atoi
  6290  003E96  C022  F020         	movff	??_atoi+1,?_atoi+1
  6291  003E9A  0012               	return	
  6292  003E9C                     l2323:
  6293  003E9C  C024  F01F         	movff	atoi@a,?_atoi
  6294  003EA0  C025  F020         	movff	atoi@a+1,?_atoi+1
  6295  003EA4  0012               	return		;funcret
  6296  003EA6                     __end_of_atoi:
  6297                           	callstack 0
  6298                           
  6299 ;; *************** function _isdigit *****************
  6300 ;; Defined at:
  6301 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\isdigit.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;  c               1    wreg     unsigned char 
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;  c               1   26[COMRAM] unsigned char 
  6306 ;; Return value:  Size  Location     Type
  6307 ;;		None               void
  6308 ;; Registers used:
  6309 ;;		wreg, status,2, status,0
  6310 ;; Tracked objects:
  6311 ;;		On entry : 0/0
  6312 ;;		On exit  : 0/0
  6313 ;;		Unchanged: 0/0
  6314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6315 ;;      Params:         0       0       0       0       0       0       0       0       0
  6316 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6317 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6318 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6319 ;;Total ram usage:        3 bytes
  6320 ;; Hardware stack levels used:    1
  6321 ;; Hardware stack levels required when called:    3
  6322 ;; This function calls:
  6323 ;;		Nothing
  6324 ;; This function is called by:
  6325 ;;		_atoi
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           	psect	text30
  6330  00535E                     __ptext30:
  6331                           	callstack 0
  6332  00535E                     _isdigit:
  6333                           	callstack 21
  6334                           
  6335                           ;incstack = 0
  6336                           ;isdigit@c stored from wreg
  6337  00535E  6E1B               	movwf	isdigit@c^0,c
  6338  005360  0E00               	movlw	0
  6339  005362  6E1A               	movwf	_isdigit$3166^0,c
  6340  005364  0E3A               	movlw	58
  6341  005366  601B               	cpfslt	isdigit@c^0,c
  6342  005368  D005               	goto	l10627
  6343  00536A  0E2F               	movlw	47
  6344  00536C  641B               	cpfsgt	isdigit@c^0,c
  6345  00536E  D002               	goto	l10627
  6346  005370  0E01               	movlw	1
  6347  005372  6E1A               	movwf	_isdigit$3166^0,c
  6348  005374                     l10627:
  6349  005374  C01A  F019         	movff	_isdigit$3166,??_isdigit
  6350  005378  3019               	rrcf	??_isdigit^0,w,c
  6351  00537A  0012               	return		;funcret
  6352  00537C                     __end_of_isdigit:
  6353                           	callstack 0
  6354                           
  6355 ;; *************** function _armazena_longitude *****************
  6356 ;; Defined at:
  6357 ;;		line 56 in file "bibliotecas/fence.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;		None
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;		None
  6362 ;; Return value:  Size  Location     Type
  6363 ;;                  1    wreg      void 
  6364 ;; Registers used:
  6365 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6371 ;;      Params:         0       0       0       0       0       0       0       0       0
  6372 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6373 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6374 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6375 ;;Total ram usage:        0 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; Hardware stack levels required when called:    4
  6378 ;; This function calls:
  6379 ;;		_Longitude
  6380 ;;		_strcpy
  6381 ;; This function is called by:
  6382 ;;		_verifica_fence_externo
  6383 ;; This function uses a non-reentrant model
  6384 ;;
  6385                           
  6386                           	psect	text31
  6387  0053D0                     __ptext31:
  6388                           	callstack 0
  6389  0053D0                     _armazena_longitude:
  6390                           	callstack 23
  6391                           
  6392                           ;fence.c: 58: strcpy(temp_buff_long, Longitude());
  6393                           
  6394                           ;incstack = 0
  6395  0053D0  0E8D               	movlw	low _temp_buff_long
  6396  0053D2  6E1B               	movwf	strcpy@to^0,c
  6397  0053D4  0E02               	movlw	high _temp_buff_long
  6398  0053D6  6E1C               	movwf	(strcpy@to+1)^0,c
  6399  0053D8  EC61  F02A         	call	_Longitude	;wreg free
  6400  0053DC  C019  F01D         	movff	?_Longitude,strcpy@from
  6401  0053E0  C01A  F01E         	movff	?_Longitude+1,strcpy@from+1
  6402  0053E4  EC1D  F027         	call	_strcpy	;wreg free
  6403  0053E8  0012               	return		;funcret
  6404  0053EA                     __end_of_armazena_longitude:
  6405                           	callstack 0
  6406                           
  6407 ;; *************** function _Longitude *****************
  6408 ;; Defined at:
  6409 ;;		line 190 in file "bibliotecas/GPS.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;		None
  6412 ;; Auto vars:     Size  Location     Type
  6413 ;;		None
  6414 ;; Return value:  Size  Location     Type
  6415 ;;                  2   24[COMRAM] PTR unsigned char 
  6416 ;; Registers used:
  6417 ;;		wreg, status,2, status,0
  6418 ;; Tracked objects:
  6419 ;;		On entry : 0/0
  6420 ;;		On exit  : 0/0
  6421 ;;		Unchanged: 0/0
  6422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6423 ;;      Params:         2       0       0       0       0       0       0       0       0
  6424 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6425 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6426 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6427 ;;Total ram usage:        2 bytes
  6428 ;; Hardware stack levels used:    1
  6429 ;; Hardware stack levels required when called:    3
  6430 ;; This function calls:
  6431 ;;		Nothing
  6432 ;; This function is called by:
  6433 ;;		_troca_de_tela
  6434 ;;		_armazena_longitude
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           	psect	text32
  6439  0054C2                     __ptext32:
  6440                           	callstack 0
  6441  0054C2                     _Longitude:
  6442                           	callstack 25
  6443                           
  6444                           ;GPS.c: 193: return rawLongitude;
  6445                           
  6446                           ;incstack = 0
  6447  0054C2  0E73               	movlw	low _rawLongitude
  6448  0054C4  6E19               	movwf	?_Longitude^0,c
  6449  0054C6  0E02               	movlw	high _rawLongitude
  6450  0054C8  6E1A               	movwf	(?_Longitude+1)^0,c
  6451  0054CA  0012               	return		;funcret
  6452  0054CC                     __end_of_Longitude:
  6453                           	callstack 0
  6454                           
  6455 ;; *************** function _armazena_latitude *****************
  6456 ;; Defined at:
  6457 ;;		line 68 in file "bibliotecas/fence.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;		None
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;		None
  6462 ;; Return value:  Size  Location     Type
  6463 ;;                  1    wreg      void 
  6464 ;; Registers used:
  6465 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6471 ;;      Params:         0       0       0       0       0       0       0       0       0
  6472 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6473 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6474 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6475 ;;Total ram usage:        0 bytes
  6476 ;; Hardware stack levels used:    1
  6477 ;; Hardware stack levels required when called:    4
  6478 ;; This function calls:
  6479 ;;		_Latitude
  6480 ;;		_strcpy
  6481 ;; This function is called by:
  6482 ;;		_verifica_fence_externo
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486                           	psect	text33
  6487  0053EA                     __ptext33:
  6488                           	callstack 0
  6489  0053EA                     _armazena_latitude:
  6490                           	callstack 23
  6491                           
  6492                           ;fence.c: 70: strcpy(temp_buff_lat, Latitude());
  6493                           
  6494                           ;incstack = 0
  6495  0053EA  0E99               	movlw	low _temp_buff_lat
  6496  0053EC  6E1B               	movwf	strcpy@to^0,c
  6497  0053EE  0E02               	movlw	high _temp_buff_lat
  6498  0053F0  6E1C               	movwf	(strcpy@to+1)^0,c
  6499  0053F2  EC66  F02A         	call	_Latitude	;wreg free
  6500  0053F6  C019  F01D         	movff	?_Latitude,strcpy@from
  6501  0053FA  C01A  F01E         	movff	?_Latitude+1,strcpy@from+1
  6502  0053FE  EC1D  F027         	call	_strcpy	;wreg free
  6503  005402  0012               	return		;funcret
  6504  005404                     __end_of_armazena_latitude:
  6505                           	callstack 0
  6506                           
  6507 ;; *************** function _Latitude *****************
  6508 ;; Defined at:
  6509 ;;		line 184 in file "bibliotecas/GPS.c"
  6510 ;; Parameters:    Size  Location     Type
  6511 ;;		None
  6512 ;; Auto vars:     Size  Location     Type
  6513 ;;		None
  6514 ;; Return value:  Size  Location     Type
  6515 ;;                  2   24[COMRAM] PTR unsigned char 
  6516 ;; Registers used:
  6517 ;;		wreg, status,2, status,0
  6518 ;; Tracked objects:
  6519 ;;		On entry : 0/0
  6520 ;;		On exit  : 0/0
  6521 ;;		Unchanged: 0/0
  6522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6523 ;;      Params:         2       0       0       0       0       0       0       0       0
  6524 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6525 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6526 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6527 ;;Total ram usage:        2 bytes
  6528 ;; Hardware stack levels used:    1
  6529 ;; Hardware stack levels required when called:    3
  6530 ;; This function calls:
  6531 ;;		Nothing
  6532 ;; This function is called by:
  6533 ;;		_troca_de_tela
  6534 ;;		_armazena_latitude
  6535 ;; This function uses a non-reentrant model
  6536 ;;
  6537                           
  6538                           	psect	text34
  6539  0054CC                     __ptext34:
  6540                           	callstack 0
  6541  0054CC                     _Latitude:
  6542                           	callstack 25
  6543                           
  6544                           ;GPS.c: 187: return rawLatitude;
  6545                           
  6546                           ;incstack = 0
  6547  0054CC  0E80               	movlw	low _rawLatitude
  6548  0054CE  6E19               	movwf	?_Latitude^0,c
  6549  0054D0  0E02               	movlw	high _rawLatitude
  6550  0054D2  6E1A               	movwf	(?_Latitude+1)^0,c
  6551  0054D4  0012               	return		;funcret
  6552  0054D6                     __end_of_Latitude:
  6553                           	callstack 0
  6554                           
  6555 ;; *************** function _recebe_dados_gps *****************
  6556 ;; Defined at:
  6557 ;;		line 525 in file "main.c"
  6558 ;; Parameters:    Size  Location     Type
  6559 ;;		None
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;  flag_gps        1   44[COMRAM] unsigned char 
  6562 ;; Return value:  Size  Location     Type
  6563 ;;                  1    wreg      void 
  6564 ;; Registers used:
  6565 ;;		wreg, status,2, status,0, cstack
  6566 ;; Tracked objects:
  6567 ;;		On entry : 0/0
  6568 ;;		On exit  : 0/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6571 ;;      Params:         0       0       0       0       0       0       0       0       0
  6572 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6573 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6574 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6575 ;;Total ram usage:        1 bytes
  6576 ;; Hardware stack levels used:    1
  6577 ;; Hardware stack levels required when called:    6
  6578 ;; This function calls:
  6579 ;;		_desliga_SPI
  6580 ;;		_desliga_uart
  6581 ;;		_inicializa_SPI
  6582 ;;		_inicializa_uart
  6583 ;;		_verifica_recep_gps
  6584 ;; This function is called by:
  6585 ;;		_disparo_gravacao
  6586 ;; This function uses a non-reentrant model
  6587 ;;
  6588                           
  6589                           	psect	text35
  6590  005196                     __ptext35:
  6591                           	callstack 0
  6592  005196                     _recebe_dados_gps:
  6593                           	callstack 22
  6594                           
  6595                           ;main.c: 527: unsigned char flag_gps = 0;
  6596                           
  6597                           ;incstack = 0
  6598  005196  0E00               	movlw	0
  6599  005198  6E2D               	movwf	recebe_dados_gps@flag_gps^0,c
  6600                           
  6601                           ;main.c: 528: PORTBbits.RB3 = 1;
  6602  00519A  8681               	bsf	129,3,c	;volatile
  6603                           
  6604                           ;main.c: 529: desliga_SPI();
  6605  00519C  EC56  F02A         	call	_desliga_SPI	;wreg free
  6606                           
  6607                           ;main.c: 530: inicializa_uart();
  6608  0051A0  EC29  F029         	call	_inicializa_uart	;wreg free
  6609                           
  6610                           ;main.c: 533: while(!flag_gps)
  6611  0051A4  D003               	goto	l11827
  6612  0051A6                     l11825:
  6613                           
  6614                           ;main.c: 534: {;main.c: 535: flag_gps = verifica_recep_gps();
  6615  0051A6  EC05  F029         	call	_verifica_recep_gps	;wreg free
  6616  0051AA  6E2D               	movwf	recebe_dados_gps@flag_gps^0,c
  6617  0051AC                     l11827:
  6618  0051AC  502D               	movf	recebe_dados_gps@flag_gps^0,w,c
  6619  0051AE  B4D8               	btfsc	status,2,c
  6620  0051B0  D7FA               	goto	l11825
  6621                           
  6622                           ;main.c: 536: };main.c: 539: desliga_uart();
  6623  0051B2  EC3D  F02A         	call	_desliga_uart	;wreg free
  6624                           
  6625                           ;main.c: 540: inicializa_SPI();
  6626  0051B6  EC8F  F029         	call	_inicializa_SPI	;wreg free
  6627                           
  6628                           ;main.c: 541: PORTBbits.RB3 = 0;
  6629  0051BA  9681               	bcf	129,3,c	;volatile
  6630  0051BC  0012               	return		;funcret
  6631  0051BE                     __end_of_recebe_dados_gps:
  6632                           	callstack 0
  6633                           
  6634 ;; *************** function _verifica_recep_gps *****************
  6635 ;; Defined at:
  6636 ;;		line 235 in file "bibliotecas/GPS.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;		None
  6639 ;; Auto vars:     Size  Location     Type
  6640 ;;		None
  6641 ;; Return value:  Size  Location     Type
  6642 ;;                  1    wreg      unsigned char 
  6643 ;; Registers used:
  6644 ;;		wreg
  6645 ;; Tracked objects:
  6646 ;;		On entry : 0/0
  6647 ;;		On exit  : 3F/1
  6648 ;;		Unchanged: 0/0
  6649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6650 ;;      Params:         0       0       0       0       0       0       0       0       0
  6651 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6652 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6653 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6654 ;;Total ram usage:        0 bytes
  6655 ;; Hardware stack levels used:    1
  6656 ;; Hardware stack levels required when called:    3
  6657 ;; This function calls:
  6658 ;;		Nothing
  6659 ;; This function is called by:
  6660 ;;		_recebe_dados_gps
  6661 ;; This function uses a non-reentrant model
  6662 ;;
  6663                           
  6664                           	psect	text36
  6665  00520A                     __ptext36:
  6666                           	callstack 0
  6667  00520A                     _verifica_recep_gps:
  6668                           	callstack 24
  6669                           
  6670                           ;GPS.c: 238: if(gps_flag[0].flag && gps_flag[1].flag && gps_flag[2].flag && gps_flag[3].
      +                          flag && gps_flag[4].flag)
  6671                           
  6672                           ;incstack = 0
  6673  00520A  0101               	movlb	1	; () banked
  6674  00520C  B124               	btfsc	_gps_flag& (0+255),0,b
  6675                           
  6676                           ; BSR set to: 1
  6677  00520E  A125               	btfss	(_gps_flag+1)& (0+255),0,b
  6678  005210  D00C               	goto	l8011
  6679                           
  6680                           ; BSR set to: 1
  6681  005212  B126               	btfsc	(_gps_flag+2)& (0+255),0,b
  6682                           
  6683                           ; BSR set to: 1
  6684  005214  A127               	btfss	(_gps_flag+3)& (0+255),0,b
  6685  005216  D009               	goto	l8011
  6686                           
  6687                           ; BSR set to: 1
  6688  005218  A128               	btfss	(_gps_flag+4)& (0+255),0,b
  6689  00521A  D007               	goto	l8011
  6690                           
  6691                           ; BSR set to: 1
  6692                           ;GPS.c: 239: {;GPS.c: 240: gps_flag[0].flag = 0;
  6693  00521C  9124               	bcf	_gps_flag& (0+255),0,b
  6694                           
  6695                           ;GPS.c: 241: gps_flag[1].flag = 0;
  6696  00521E  9125               	bcf	(_gps_flag+1)& (0+255),0,b
  6697                           
  6698                           ;GPS.c: 242: gps_flag[2].flag = 0;
  6699  005220  9126               	bcf	(_gps_flag+2)& (0+255),0,b
  6700                           
  6701                           ;GPS.c: 243: gps_flag[3].flag = 0;
  6702  005222  9127               	bcf	(_gps_flag+3)& (0+255),0,b
  6703                           
  6704                           ;GPS.c: 244: gps_flag[4].flag = 0;
  6705  005224  9128               	bcf	(_gps_flag+4)& (0+255),0,b
  6706                           
  6707                           ; BSR set to: 1
  6708                           ;GPS.c: 245: return 1;
  6709  005226  0E01               	movlw	1
  6710  005228  0012               	return	
  6711  00522A                     l8011:
  6712                           
  6713                           ; BSR set to: 1
  6714                           ;GPS.c: 247: else;GPS.c: 248: {;GPS.c: 250: return 0;
  6715  00522A  0E00               	movlw	0
  6716                           
  6717                           ; BSR set to: 1
  6718  00522C  0012               	return		;funcret
  6719  00522E                     __end_of_verifica_recep_gps:
  6720                           	callstack 0
  6721                           
  6722 ;; *************** function _inicializa_uart *****************
  6723 ;; Defined at:
  6724 ;;		line 206 in file "bibliotecas/uart.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;		None
  6727 ;; Auto vars:     Size  Location     Type
  6728 ;;		None
  6729 ;; Return value:  Size  Location     Type
  6730 ;;                  1    wreg      void 
  6731 ;; Registers used:
  6732 ;;		wreg, status,2, status,0, cstack
  6733 ;; Tracked objects:
  6734 ;;		On entry : 0/1
  6735 ;;		On exit  : 3F/0
  6736 ;;		Unchanged: 0/0
  6737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6738 ;;      Params:         0       0       0       0       0       0       0       0       0
  6739 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6740 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6741 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6742 ;;Total ram usage:        0 bytes
  6743 ;; Hardware stack levels used:    1
  6744 ;; Hardware stack levels required when called:    5
  6745 ;; This function calls:
  6746 ;;		_configura_baudrate_uart
  6747 ;; This function is called by:
  6748 ;;		_main
  6749 ;;		_recebe_dados_gps
  6750 ;; This function uses a non-reentrant model
  6751 ;;
  6752                           
  6753                           	psect	text37
  6754  005252                     __ptext37:
  6755                           	callstack 0
  6756  005252                     _inicializa_uart:
  6757                           	callstack 25
  6758                           
  6759                           ;uart.c: 208: TRISCbits.RC6 = 0;
  6760                           
  6761                           ; BSR set to: 1
  6762                           ;incstack = 0
  6763  005252  9C94               	bcf	148,6,c	;volatile
  6764                           
  6765                           ;uart.c: 209: TRISCbits.RC7 = 0;
  6766  005254  9E94               	bcf	148,7,c	;volatile
  6767                           
  6768                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  6769  005256  0E80               	movlw	128
  6770  005258  6E27               	movwf	configura_baudrate_uart@baudrate^0,c
  6771  00525A  0E25               	movlw	37
  6772  00525C  6E28               	movwf	(configura_baudrate_uart@baudrate+1)^0,c
  6773  00525E  0E00               	movlw	0
  6774  005260  6E29               	movwf	(configura_baudrate_uart@baudrate+2)^0,c
  6775  005262  0E00               	movlw	0
  6776  005264  6E2A               	movwf	(configura_baudrate_uart@baudrate+3)^0,c
  6777  005266  EC35  F01D         	call	_configura_baudrate_uart	;wreg free
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;uart.c: 213: TXSTA = 0x20;
  6781  00526A  0E20               	movlw	32
  6782  00526C  6EAC               	movwf	172,c	;volatile
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;uart.c: 214: RCSTA = 0x90;
  6786  00526E  0E90               	movlw	144
  6787  005270  6EAB               	movwf	171,c	;volatile
  6788                           
  6789                           ; BSR set to: 0
  6790  005272  0012               	return		;funcret
  6791  005274                     __end_of_inicializa_uart:
  6792                           	callstack 0
  6793                           
  6794 ;; *************** function _configura_baudrate_uart *****************
  6795 ;; Defined at:
  6796 ;;		line 50 in file "bibliotecas/uart.c"
  6797 ;; Parameters:    Size  Location     Type
  6798 ;;  baudrate        4   38[COMRAM] const long 
  6799 ;; Auto vars:     Size  Location     Type
  6800 ;;  x               2   42[COMRAM] unsigned int 
  6801 ;; Return value:  Size  Location     Type
  6802 ;;                  1    wreg      unsigned char 
  6803 ;; Registers used:
  6804 ;;		wreg, status,2, status,0, cstack
  6805 ;; Tracked objects:
  6806 ;;		On entry : 0/1
  6807 ;;		On exit  : 3F/0
  6808 ;;		Unchanged: 0/0
  6809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6810 ;;      Params:         4       0       0       0       0       0       0       0       0
  6811 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6812 ;;      Temps:          0       8       0       0       0       0       0       0       0
  6813 ;;      Totals:         6       8       0       0       0       0       0       0       0
  6814 ;;Total ram usage:       14 bytes
  6815 ;; Hardware stack levels used:    1
  6816 ;; Hardware stack levels required when called:    4
  6817 ;; This function calls:
  6818 ;;		___aldiv
  6819 ;; This function is called by:
  6820 ;;		_inicializa_uart
  6821 ;; This function uses a non-reentrant model
  6822 ;;
  6823                           
  6824                           	psect	text38
  6825  003A6A                     __ptext38:
  6826                           	callstack 0
  6827  003A6A                     _configura_baudrate_uart:
  6828                           	callstack 25
  6829                           
  6830                           ;uart.c: 52: unsigned int x;;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  6831                           
  6832                           ; BSR set to: 0
  6833                           ;incstack = 0
  6834  003A6A  C027  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  6835  003A6E  C028  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  6836  003A72  C029  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  6837  003A76  C02A  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  6838  003A7A  0E06               	movlw	6
  6839  003A7C                     u13395:
  6840  003A7C  90D8               	bcf	status,0,c
  6841  003A7E  0100               	movlb	0	; () banked
  6842  003A80  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  6843  003A82  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  6844  003A84  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  6845  003A86  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  6846  003A88  2EE8               	decfsz	wreg,f,c
  6847  003A8A  D7F8               	goto	u13395
  6848  003A8C  5160               	movf	??_configura_baudrate_uart& (0+255),w,b
  6849  003A8E  0800               	sublw	0
  6850  003A90  6E19               	movwf	___aldiv@dividend^0,c
  6851  003A92  0E6C               	movlw	108
  6852  003A94  5561               	subfwb	(??_configura_baudrate_uart+1)& (0+255),w,b
  6853  003A96  6E1A               	movwf	(___aldiv@dividend+1)^0,c
  6854  003A98  0EDC               	movlw	220
  6855  003A9A  5562               	subfwb	(??_configura_baudrate_uart+2)& (0+255),w,b
  6856  003A9C  6E1B               	movwf	(___aldiv@dividend+2)^0,c
  6857  003A9E  0E02               	movlw	2
  6858  003AA0  5563               	subfwb	(??_configura_baudrate_uart+3)& (0+255),w,b
  6859  003AA2  6E1C               	movwf	(___aldiv@dividend+3)^0,c
  6860  003AA4  C027  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  6861  003AA8  C028  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  6862  003AAC  C029  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  6863  003AB0  C02A  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  6864  003AB4  0E06               	movlw	6
  6865  003AB6                     u13405:
  6866  003AB6  90D8               	bcf	status,0,c
  6867  003AB8  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  6868  003ABA  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  6869  003ABC  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  6870  003ABE  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  6871  003AC0  2EE8               	decfsz	wreg,f,c
  6872  003AC2  D7F9               	goto	u13405
  6873  003AC4  C064  F01D         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  6874  003AC8  C065  F01E         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  6875  003ACC  C066  F01F         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  6876  003AD0  C067  F020         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  6877  003AD4  EC8E  F01E         	call	___aldiv	;wreg free
  6878  003AD8  C019  F02B         	movff	?___aldiv,configura_baudrate_uart@x
  6879  003ADC  C01A  F02C         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;uart.c: 55: if(x > 255)
  6883  003AE0  042C               	decf	(configura_baudrate_uart@x+1)^0,w,c
  6884  003AE2  A0D8               	btfss	status,0,c
  6885  003AE4  D03B               	goto	l11197
  6886                           
  6887                           ; BSR set to: 0
  6888                           ;uart.c: 56: {;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  6889  003AE6  C027  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  6890  003AEA  C028  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  6891  003AEE  C029  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  6892  003AF2  C02A  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  6893  003AF6  0E04               	movlw	4
  6894  003AF8                     u13425:
  6895  003AF8  90D8               	bcf	status,0,c
  6896  003AFA  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  6897  003AFC  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  6898  003AFE  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  6899  003B00  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  6900  003B02  2EE8               	decfsz	wreg,f,c
  6901  003B04  D7F9               	goto	u13425
  6902  003B06  5160               	movf	??_configura_baudrate_uart& (0+255),w,b
  6903  003B08  0800               	sublw	0
  6904  003B0A  6E19               	movwf	___aldiv@dividend^0,c
  6905  003B0C  0E6C               	movlw	108
  6906  003B0E  5561               	subfwb	(??_configura_baudrate_uart+1)& (0+255),w,b
  6907  003B10  6E1A               	movwf	(___aldiv@dividend+1)^0,c
  6908  003B12  0EDC               	movlw	220
  6909  003B14  5562               	subfwb	(??_configura_baudrate_uart+2)& (0+255),w,b
  6910  003B16  6E1B               	movwf	(___aldiv@dividend+2)^0,c
  6911  003B18  0E02               	movlw	2
  6912  003B1A  5563               	subfwb	(??_configura_baudrate_uart+3)& (0+255),w,b
  6913  003B1C  6E1C               	movwf	(___aldiv@dividend+3)^0,c
  6914  003B1E  C027  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  6915  003B22  C028  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  6916  003B26  C029  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  6917  003B2A  C02A  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  6918  003B2E  0E04               	movlw	4
  6919  003B30                     u13435:
  6920  003B30  90D8               	bcf	status,0,c
  6921  003B32  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  6922  003B34  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  6923  003B36  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  6924  003B38  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  6925  003B3A  2EE8               	decfsz	wreg,f,c
  6926  003B3C  D7F9               	goto	u13435
  6927  003B3E  C064  F01D         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  6928  003B42  C065  F01E         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  6929  003B46  C066  F01F         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  6930  003B4A  C067  F020         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  6931  003B4E  EC8E  F01E         	call	___aldiv	;wreg free
  6932  003B52  C019  F02B         	movff	?___aldiv,configura_baudrate_uart@x
  6933  003B56  C01A  F02C         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;uart.c: 58: BRGH = 1;
  6937  003B5A  84AC               	bsf	4012,2,c	;volatile
  6938  003B5C                     l11197:
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;uart.c: 59: };uart.c: 60: if(x < 256)
  6942  003B5C  042C               	decf	(configura_baudrate_uart@x+1)^0,w,c
  6943  003B5E  B0D8               	btfsc	status,0,c
  6944  003B60  0012               	return	
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;uart.c: 61: {;uart.c: 62: SPBRG = x;
  6948  003B62  C02B  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  6949                           
  6950                           ;uart.c: 63: SYNC = 0;
  6951  003B66  98AC               	bcf	4012,4,c	;volatile
  6952                           
  6953                           ;uart.c: 64: SPEN = 1;
  6954  003B68  8EAB               	bsf	4011,7,c	;volatile
  6955                           
  6956                           ;uart.c: 65: TRISCbits.RC7 = 1;
  6957  003B6A  8E94               	bsf	148,7,c	;volatile
  6958                           
  6959                           ;uart.c: 66: TRISCbits.RC6 = 0;
  6960  003B6C  9C94               	bcf	148,6,c	;volatile
  6961                           
  6962                           ;uart.c: 67: CREN = 1;
  6963  003B6E  88AB               	bsf	4011,4,c	;volatile
  6964                           
  6965                           ;uart.c: 68: TXEN = 1;
  6966  003B70  8AAC               	bsf	4012,5,c	;volatile
  6967                           
  6968                           ; BSR set to: 0
  6969                           
  6970                           ;uart.c: 70: return (1);;	Return value of _configura_baudrate_uart is never used
  6971  003B72  0012               	return		;funcret
  6972  003B74                     __end_of_configura_baudrate_uart:
  6973                           	callstack 0
  6974                           
  6975 ;; *************** function ___aldiv *****************
  6976 ;; Defined at:
  6977 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\aldiv.c"
  6978 ;; Parameters:    Size  Location     Type
  6979 ;;  dividend        4   24[COMRAM] long 
  6980 ;;  divisor         4   28[COMRAM] long 
  6981 ;; Auto vars:     Size  Location     Type
  6982 ;;  quotient        4   34[COMRAM] long 
  6983 ;;  sign            1   33[COMRAM] unsigned char 
  6984 ;;  counter         1   32[COMRAM] unsigned char 
  6985 ;; Return value:  Size  Location     Type
  6986 ;;                  4   24[COMRAM] long 
  6987 ;; Registers used:
  6988 ;;		wreg, status,2, status,0
  6989 ;; Tracked objects:
  6990 ;;		On entry : 3F/0
  6991 ;;		On exit  : 3F/0
  6992 ;;		Unchanged: 3F/0
  6993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6994 ;;      Params:         8       0       0       0       0       0       0       0       0
  6995 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6996 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6997 ;;      Totals:        14       0       0       0       0       0       0       0       0
  6998 ;;Total ram usage:       14 bytes
  6999 ;; Hardware stack levels used:    1
  7000 ;; Hardware stack levels required when called:    3
  7001 ;; This function calls:
  7002 ;;		Nothing
  7003 ;; This function is called by:
  7004 ;;		_configura_baudrate_uart
  7005 ;; This function uses a non-reentrant model
  7006 ;;
  7007                           
  7008                           	psect	text39
  7009  003D1C                     __ptext39:
  7010                           	callstack 0
  7011  003D1C                     ___aldiv:
  7012                           	callstack 25
  7013                           
  7014                           ; BSR set to: 0
  7015                           
  7016                           ; BSR set to: 0
  7017                           ;incstack = 0
  7018  003D1C  0E00               	movlw	0
  7019  003D1E  6E22               	movwf	___aldiv@sign^0,c
  7020                           
  7021                           ; BSR set to: 0
  7022  003D20  AE20               	btfss	(___aldiv@divisor+3)^0,7,c
  7023  003D22  D00A               	goto	l7381
  7024                           
  7025                           ; BSR set to: 0
  7026  003D24  1E20               	comf	(___aldiv@divisor+3)^0,f,c
  7027  003D26  1E1F               	comf	(___aldiv@divisor+2)^0,f,c
  7028  003D28  1E1E               	comf	(___aldiv@divisor+1)^0,f,c
  7029  003D2A  6C1D               	negf	___aldiv@divisor^0,c
  7030  003D2C  0E00               	movlw	0
  7031  003D2E  221E               	addwfc	(___aldiv@divisor+1)^0,f,c
  7032  003D30  221F               	addwfc	(___aldiv@divisor+2)^0,f,c
  7033  003D32  2220               	addwfc	(___aldiv@divisor+3)^0,f,c
  7034                           
  7035                           ; BSR set to: 0
  7036  003D34  0E01               	movlw	1
  7037  003D36  6E22               	movwf	___aldiv@sign^0,c
  7038  003D38                     l7381:
  7039                           
  7040                           ; BSR set to: 0
  7041  003D38  AE1C               	btfss	(___aldiv@dividend+3)^0,7,c
  7042  003D3A  D00A               	goto	l7387
  7043                           
  7044                           ; BSR set to: 0
  7045  003D3C  1E1C               	comf	(___aldiv@dividend+3)^0,f,c
  7046  003D3E  1E1B               	comf	(___aldiv@dividend+2)^0,f,c
  7047  003D40  1E1A               	comf	(___aldiv@dividend+1)^0,f,c
  7048  003D42  6C19               	negf	___aldiv@dividend^0,c
  7049  003D44  0E00               	movlw	0
  7050  003D46  221A               	addwfc	(___aldiv@dividend+1)^0,f,c
  7051  003D48  221B               	addwfc	(___aldiv@dividend+2)^0,f,c
  7052  003D4A  221C               	addwfc	(___aldiv@dividend+3)^0,f,c
  7053                           
  7054                           ; BSR set to: 0
  7055  003D4C  0E01               	movlw	1
  7056  003D4E  1A22               	xorwf	___aldiv@sign^0,f,c
  7057  003D50                     l7387:
  7058                           
  7059                           ; BSR set to: 0
  7060  003D50  0E00               	movlw	0
  7061  003D52  6E23               	movwf	___aldiv@quotient^0,c
  7062  003D54  0E00               	movlw	0
  7063  003D56  6E24               	movwf	(___aldiv@quotient+1)^0,c
  7064  003D58  0E00               	movlw	0
  7065  003D5A  6E25               	movwf	(___aldiv@quotient+2)^0,c
  7066  003D5C  0E00               	movlw	0
  7067  003D5E  6E26               	movwf	(___aldiv@quotient+3)^0,c
  7068                           
  7069                           ; BSR set to: 0
  7070  003D60  501D               	movf	___aldiv@divisor^0,w,c
  7071  003D62  101E               	iorwf	(___aldiv@divisor+1)^0,w,c
  7072  003D64  101F               	iorwf	(___aldiv@divisor+2)^0,w,c
  7073  003D66  1020               	iorwf	(___aldiv@divisor+3)^0,w,c
  7074  003D68  B4D8               	btfsc	status,2,c
  7075  003D6A  D02A               	goto	l7409
  7076                           
  7077                           ; BSR set to: 0
  7078  003D6C  0E01               	movlw	1
  7079  003D6E  6E21               	movwf	___aldiv@counter^0,c
  7080  003D70  D006               	goto	l7395
  7081  003D72                     l7393:
  7082                           
  7083                           ; BSR set to: 0
  7084  003D72  90D8               	bcf	status,0,c
  7085  003D74  361D               	rlcf	___aldiv@divisor^0,f,c
  7086  003D76  361E               	rlcf	(___aldiv@divisor+1)^0,f,c
  7087  003D78  361F               	rlcf	(___aldiv@divisor+2)^0,f,c
  7088  003D7A  3620               	rlcf	(___aldiv@divisor+3)^0,f,c
  7089  003D7C  2A21               	incf	___aldiv@counter^0,f,c
  7090  003D7E                     l7395:
  7091                           
  7092                           ; BSR set to: 0
  7093  003D7E  AE20               	btfss	(___aldiv@divisor+3)^0,7,c
  7094  003D80  D7F8               	goto	l7393
  7095  003D82                     u7460:
  7096                           
  7097                           ; BSR set to: 0
  7098  003D82  90D8               	bcf	status,0,c
  7099  003D84  3623               	rlcf	___aldiv@quotient^0,f,c
  7100  003D86  3624               	rlcf	(___aldiv@quotient+1)^0,f,c
  7101  003D88  3625               	rlcf	(___aldiv@quotient+2)^0,f,c
  7102  003D8A  3626               	rlcf	(___aldiv@quotient+3)^0,f,c
  7103                           
  7104                           ; BSR set to: 0
  7105  003D8C  501D               	movf	___aldiv@divisor^0,w,c
  7106  003D8E  5C19               	subwf	___aldiv@dividend^0,w,c
  7107  003D90  501E               	movf	(___aldiv@divisor+1)^0,w,c
  7108  003D92  581A               	subwfb	(___aldiv@dividend+1)^0,w,c
  7109  003D94  501F               	movf	(___aldiv@divisor+2)^0,w,c
  7110  003D96  581B               	subwfb	(___aldiv@dividend+2)^0,w,c
  7111  003D98  5020               	movf	(___aldiv@divisor+3)^0,w,c
  7112  003D9A  581C               	subwfb	(___aldiv@dividend+3)^0,w,c
  7113  003D9C  A0D8               	btfss	status,0,c
  7114  003D9E  D009               	goto	l7405
  7115                           
  7116                           ; BSR set to: 0
  7117  003DA0  501D               	movf	___aldiv@divisor^0,w,c
  7118  003DA2  5E19               	subwf	___aldiv@dividend^0,f,c
  7119  003DA4  501E               	movf	(___aldiv@divisor+1)^0,w,c
  7120  003DA6  5A1A               	subwfb	(___aldiv@dividend+1)^0,f,c
  7121  003DA8  501F               	movf	(___aldiv@divisor+2)^0,w,c
  7122  003DAA  5A1B               	subwfb	(___aldiv@dividend+2)^0,f,c
  7123  003DAC  5020               	movf	(___aldiv@divisor+3)^0,w,c
  7124  003DAE  5A1C               	subwfb	(___aldiv@dividend+3)^0,f,c
  7125                           
  7126                           ; BSR set to: 0
  7127  003DB0  8023               	bsf	___aldiv@quotient^0,0,c
  7128  003DB2                     l7405:
  7129                           
  7130                           ; BSR set to: 0
  7131  003DB2  90D8               	bcf	status,0,c
  7132  003DB4  3220               	rrcf	(___aldiv@divisor+3)^0,f,c
  7133  003DB6  321F               	rrcf	(___aldiv@divisor+2)^0,f,c
  7134  003DB8  321E               	rrcf	(___aldiv@divisor+1)^0,f,c
  7135  003DBA  321D               	rrcf	___aldiv@divisor^0,f,c
  7136                           
  7137                           ; BSR set to: 0
  7138  003DBC  2E21               	decfsz	___aldiv@counter^0,f,c
  7139  003DBE  D7E1               	goto	u7460
  7140  003DC0                     l7409:
  7141                           
  7142                           ; BSR set to: 0
  7143  003DC0  5022               	movf	___aldiv@sign^0,w,c
  7144  003DC2  B4D8               	btfsc	status,2,c
  7145  003DC4  D008               	goto	l7413
  7146                           
  7147                           ; BSR set to: 0
  7148  003DC6  1E26               	comf	(___aldiv@quotient+3)^0,f,c
  7149  003DC8  1E25               	comf	(___aldiv@quotient+2)^0,f,c
  7150  003DCA  1E24               	comf	(___aldiv@quotient+1)^0,f,c
  7151  003DCC  6C23               	negf	___aldiv@quotient^0,c
  7152  003DCE  0E00               	movlw	0
  7153  003DD0  2224               	addwfc	(___aldiv@quotient+1)^0,f,c
  7154  003DD2  2225               	addwfc	(___aldiv@quotient+2)^0,f,c
  7155  003DD4  2226               	addwfc	(___aldiv@quotient+3)^0,f,c
  7156  003DD6                     l7413:
  7157                           
  7158                           ; BSR set to: 0
  7159  003DD6  C023  F019         	movff	___aldiv@quotient,?___aldiv
  7160  003DDA  C024  F01A         	movff	___aldiv@quotient+1,?___aldiv+1
  7161  003DDE  C025  F01B         	movff	___aldiv@quotient+2,?___aldiv+2
  7162  003DE2  C026  F01C         	movff	___aldiv@quotient+3,?___aldiv+3
  7163                           
  7164                           ; BSR set to: 0
  7165  003DE6  0012               	return		;funcret
  7166  003DE8                     __end_of___aldiv:
  7167                           	callstack 0
  7168                           
  7169 ;; *************** function _desliga_uart *****************
  7170 ;; Defined at:
  7171 ;;		line 219 in file "bibliotecas/uart.c"
  7172 ;; Parameters:    Size  Location     Type
  7173 ;;		None
  7174 ;; Auto vars:     Size  Location     Type
  7175 ;;		None
  7176 ;; Return value:  Size  Location     Type
  7177 ;;                  1    wreg      void 
  7178 ;; Registers used:
  7179 ;;		wreg, status,2
  7180 ;; Tracked objects:
  7181 ;;		On entry : 3E/0
  7182 ;;		On exit  : 3E/0
  7183 ;;		Unchanged: 3E/0
  7184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7185 ;;      Params:         0       0       0       0       0       0       0       0       0
  7186 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7188 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7189 ;;Total ram usage:        0 bytes
  7190 ;; Hardware stack levels used:    1
  7191 ;; Hardware stack levels required when called:    3
  7192 ;; This function calls:
  7193 ;;		Nothing
  7194 ;; This function is called by:
  7195 ;;		_recebe_dados_gps
  7196 ;; This function uses a non-reentrant model
  7197 ;;
  7198                           
  7199                           	psect	text40
  7200  00547A                     __ptext40:
  7201                           	callstack 0
  7202  00547A                     _desliga_uart:
  7203                           	callstack 24
  7204                           
  7205                           ;uart.c: 221: TRISCbits.RC6 = 1;
  7206                           
  7207                           ; BSR set to: 0
  7208                           ;incstack = 0
  7209  00547A  8C94               	bsf	148,6,c	;volatile
  7210                           
  7211                           ;uart.c: 222: TRISCbits.RC7 = 1;
  7212  00547C  8E94               	bsf	148,7,c	;volatile
  7213                           
  7214                           ;uart.c: 225: TXSTA = 0x00;
  7215  00547E  0E00               	movlw	0
  7216  005480  6EAC               	movwf	172,c	;volatile
  7217                           
  7218                           ;uart.c: 227: RCSTA = 0x00;
  7219  005482  0E00               	movlw	0
  7220  005484  6EAB               	movwf	171,c	;volatile
  7221  005486  0012               	return		;funcret
  7222  005488                     __end_of_desliga_uart:
  7223                           	callstack 0
  7224                           
  7225 ;; *************** function _fix *****************
  7226 ;; Defined at:
  7227 ;;		line 196 in file "bibliotecas/GPS.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;		None
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;		None
  7232 ;; Return value:  Size  Location     Type
  7233 ;;                  2   24[COMRAM] PTR unsigned char 
  7234 ;; Registers used:
  7235 ;;		wreg, status,2, status,0
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7241 ;;      Params:         2       0       0       0       0       0       0       0       0
  7242 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7243 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7244 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7245 ;;Total ram usage:        2 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:    3
  7248 ;; This function calls:
  7249 ;;		Nothing
  7250 ;; This function is called by:
  7251 ;;		_disparo_gravacao
  7252 ;;		_troca_de_tela
  7253 ;; This function uses a non-reentrant model
  7254 ;;
  7255                           
  7256                           	psect	text41
  7257  0054D6                     __ptext41:
  7258                           	callstack 0
  7259  0054D6                     _fix:
  7260                           	callstack 25
  7261                           
  7262                           ;GPS.c: 198: return rawFix;
  7263                           
  7264                           ;incstack = 0
  7265  0054D6  0EF4               	movlw	low _rawFix
  7266  0054D8  6E19               	movwf	?_fix^0,c
  7267  0054DA  0E01               	movlw	high _rawFix
  7268  0054DC  6E1A               	movwf	(?_fix+1)^0,c
  7269  0054DE  0012               	return		;funcret
  7270  0054E0                     __end_of_fix:
  7271                           	callstack 0
  7272                           
  7273 ;; *************** function _escrita_sdcard *****************
  7274 ;; Defined at:
  7275 ;;		line 206 in file "bibliotecas/SDCard.c"
  7276 ;; Parameters:    Size  Location     Type
  7277 ;;		None
  7278 ;; Auto vars:     Size  Location     Type
  7279 ;;  fix_gps         3    0        PTR unsigned char 
  7280 ;;  bw              2    0        unsigned short 
  7281 ;; Return value:  Size  Location     Type
  7282 ;;                  1    wreg      void 
  7283 ;; Registers used:
  7284 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7290 ;;      Params:         0       0       0       0       0       0       0       0       0
  7291 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7292 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7293 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7294 ;;Total ram usage:        0 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:   15
  7297 ;; This function calls:
  7298 ;;		_desliga_SPI
  7299 ;;		_f_close
  7300 ;;		_f_lseek
  7301 ;;		_f_mount
  7302 ;;		_f_open
  7303 ;;		_fprintf
  7304 ;;		_inicializa_SPI
  7305 ;;		_strcat
  7306 ;;		_strcpy
  7307 ;; This function is called by:
  7308 ;;		_disparo_gravacao
  7309 ;; This function uses a non-reentrant model
  7310 ;;
  7311                           
  7312                           	psect	text42
  7313  0035E6                     __ptext42:
  7314                           	callstack 0
  7315  0035E6                     _escrita_sdcard:
  7316                           	callstack 13
  7317                           
  7318                           ;SDCard.c: 208: unsigned char *fix_gps;;SDCard.c: 209: static unsigned char f_fix = 0;;S
      +                          DCard.c: 210: WORD bw;;SDCard.c: 211: PORTBbits.RB3 = 0;
  7319                           
  7320                           ;incstack = 0
  7321  0035E6  9681               	bcf	129,3,c	;volatile
  7322                           
  7323                           ;SDCard.c: 213: inicializa_SPI();
  7324  0035E8  EC8F  F029         	call	_inicializa_SPI	;wreg free
  7325                           
  7326                           ;SDCard.c: 214: f_mount(0,&fs);
  7327  0035EC  0ECD               	movlw	low _fs
  7328  0035EE  6E19               	movwf	f_mount@fs^0,c
  7329  0035F0  0E02               	movlw	high _fs
  7330  0035F2  6E1A               	movwf	(f_mount@fs+1)^0,c
  7331  0035F4  0E00               	movlw	0
  7332  0035F6  ECB2  F026         	call	_f_mount
  7333                           
  7334                           ;SDCard.c: 216: if(!f_fix)
  7335  0035FA  5040               	movf	escrita_sdcard@f_fix^0,w,c
  7336  0035FC  A4D8               	btfss	status,2,c
  7337  0035FE  D020               	goto	l11769
  7338                           
  7339                           ;SDCard.c: 217: {;SDCard.c: 219: strcpy(filename, "teste");
  7340  003600  0E64               	movlw	low _filename
  7341  003602  6E1B               	movwf	strcpy@to^0,c
  7342  003604  0E02               	movlw	high _filename
  7343  003606  6E1C               	movwf	(strcpy@to+1)^0,c
  7344  003608  0E45               	movlw	low STR_13
  7345  00360A  6E1D               	movwf	strcpy@from^0,c
  7346  00360C  0E62               	movlw	high STR_13
  7347  00360E  6E1E               	movwf	(strcpy@from+1)^0,c
  7348  003610  EC1D  F027         	call	_strcpy	;wreg free
  7349                           
  7350                           ;SDCard.c: 220: strcat(filename, "23");
  7351  003614  0E64               	movlw	low _filename
  7352  003616  6E19               	movwf	strcat@to^0,c
  7353  003618  0E02               	movlw	high _filename
  7354  00361A  6E1A               	movwf	(strcat@to+1)^0,c
  7355  00361C  0E7A               	movlw	low STR_14
  7356  00361E  6E1B               	movwf	strcat@from^0,c
  7357  003620  0E62               	movlw	high STR_14
  7358  003622  6E1C               	movwf	(strcat@from+1)^0,c
  7359  003624  EC3F  F027         	call	_strcat	;wreg free
  7360                           
  7361                           ;SDCard.c: 222: strcat(filename, ".tlm");
  7362  003628  0E64               	movlw	low _filename
  7363  00362A  6E19               	movwf	strcat@to^0,c
  7364  00362C  0E02               	movlw	high _filename
  7365  00362E  6E1A               	movwf	(strcat@to+1)^0,c
  7366  003630  0E66               	movlw	low STR_15
  7367  003632  6E1B               	movwf	strcat@from^0,c
  7368  003634  0E62               	movlw	high STR_15
  7369  003636  6E1C               	movwf	(strcat@from+1)^0,c
  7370  003638  EC3F  F027         	call	_strcat	;wreg free
  7371                           
  7372                           ;SDCard.c: 223: f_fix = 1;
  7373  00363C  0E01               	movlw	1
  7374  00363E  6E40               	movwf	escrita_sdcard@f_fix^0,c
  7375  003640                     l11769:
  7376                           
  7377                           ;SDCard.c: 224: };SDCard.c: 226: if (f_open(&fil, filename, 0x02 ) == FR_OK)
  7378  003640  0EB4               	movlw	low _fil
  7379  003642  0100               	movlb	0	; () banked
  7380  003644  6FC0               	movwf	f_open@fp& (0+255),b
  7381  003646  0E01               	movlw	high _fil
  7382  003648  6FC1               	movwf	(f_open@fp+1)& (0+255),b
  7383  00364A  0E64               	movlw	low _filename
  7384  00364C  6FC2               	movwf	f_open@path& (0+255),b
  7385  00364E  0E02               	movlw	high _filename
  7386  003650  6FC3               	movwf	(f_open@path+1)& (0+255),b
  7387  003652  0E02               	movlw	2
  7388  003654  6FC4               	movwf	f_open@mode& (0+255),b
  7389  003656  EC76  F009         	call	_f_open	;wreg free
  7390  00365A  0900               	iorlw	0
  7391  00365C  A4D8               	btfss	status,2,c
  7392  00365E  D044               	goto	l11777
  7393                           
  7394                           ; BSR set to: 0
  7395                           ;SDCard.c: 227: {;SDCard.c: 229: f_lseek(&fil, ((&fil)->fsize));
  7396  003660  0EB4               	movlw	low _fil
  7397  003662  6FAE               	movwf	f_lseek@fp& (0+255),b
  7398  003664  0E01               	movlw	high _fil
  7399  003666  6FAF               	movwf	(f_lseek@fp+1)& (0+255),b
  7400  003668  C1BE  F0B0         	movff	_fil+10,f_lseek@ofs
  7401  00366C  C1BF  F0B1         	movff	_fil+11,f_lseek@ofs+1
  7402  003670  C1C0  F0B2         	movff	_fil+12,f_lseek@ofs+2
  7403  003674  C1C1  F0B3         	movff	_fil+13,f_lseek@ofs+3
  7404  003678  EC72  F005         	call	_f_lseek	;wreg free
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;SDCard.c: 230: fprintf(&fil, "\nv%s;lt%s;lo%s;r%s;c%s;k%s;h%s;d%s;f%s", "string_dado.ve
      +                          l", string_dado.lt, string_dado.lo, "string_dado.rpm", "string_dado.comb", "string_dado.
      +                          odometro_total", string_dado.hora, "string_dado.dtc", string_dado.fence);
  7408  00367C  0EB4               	movlw	low _fil
  7409  00367E  6FD9               	movwf	fprintf@fil& (0+255),b
  7410  003680  0E01               	movlw	high _fil
  7411  003682  6FDA               	movwf	(fprintf@fil+1)& (0+255),b
  7412  003684  0E09               	movlw	low STR_16
  7413  003686  6FDB               	movwf	fprintf@str& (0+255),b
  7414  003688  0E61               	movlw	high STR_16
  7415  00368A  6FDC               	movwf	(fprintf@str+1)& (0+255),b
  7416  00368C  0E92               	movlw	low STR_17
  7417  00368E  6FDD               	movwf	(?_fprintf+4)& (0+255),b
  7418  003690  0E61               	movlw	high STR_17
  7419  003692  6FDE               	movwf	(?_fprintf+5)& (0+255),b
  7420  003694  0E21               	movlw	low (_string_dado+26)
  7421  003696  6FDF               	movwf	(?_fprintf+6)& (0+255),b
  7422  003698  0E02               	movlw	high (_string_dado+26)
  7423  00369A  6FE0               	movwf	(?_fprintf+7)& (0+255),b
  7424  00369C  0E2E               	movlw	low (_string_dado+39)
  7425  00369E  6FE1               	movwf	(?_fprintf+8)& (0+255),b
  7426  0036A0  0E02               	movlw	high (_string_dado+39)
  7427  0036A2  6FE2               	movwf	(?_fprintf+9)& (0+255),b
  7428  0036A4  0EA2               	movlw	low STR_18
  7429  0036A6  6FE3               	movwf	(?_fprintf+10)& (0+255),b
  7430  0036A8  0E61               	movlw	high STR_18
  7431  0036AA  6FE4               	movwf	(?_fprintf+11)& (0+255),b
  7432  0036AC  0E71               	movlw	low STR_19
  7433  0036AE  6FE5               	movwf	(?_fprintf+12)& (0+255),b
  7434  0036B0  0E61               	movlw	high STR_19
  7435  0036B2  6FE6               	movwf	(?_fprintf+13)& (0+255),b
  7436  0036B4  0E30               	movlw	low STR_20
  7437  0036B6  6FE7               	movwf	(?_fprintf+14)& (0+255),b
  7438  0036B8  0E61               	movlw	high STR_20
  7439  0036BA  6FE8               	movwf	(?_fprintf+15)& (0+255),b
  7440  0036BC  0E0E               	movlw	low (_string_dado+7)
  7441  0036BE  6FE9               	movwf	(?_fprintf+16)& (0+255),b
  7442  0036C0  0E02               	movlw	high (_string_dado+7)
  7443  0036C2  6FEA               	movwf	(?_fprintf+17)& (0+255),b
  7444  0036C4  0E82               	movlw	low STR_21
  7445  0036C6  6FEB               	movwf	(?_fprintf+18)& (0+255),b
  7446  0036C8  0E61               	movlw	high STR_21
  7447  0036CA  6FEC               	movwf	(?_fprintf+19)& (0+255),b
  7448  0036CC  0E4A               	movlw	low (_string_dado+67)
  7449  0036CE  6FED               	movwf	(?_fprintf+20)& (0+255),b
  7450  0036D0  0E02               	movlw	high (_string_dado+67)
  7451  0036D2  6FEE               	movwf	(?_fprintf+21)& (0+255),b
  7452  0036D4  ECB7  F007         	call	_fprintf	;wreg free
  7453  0036D8                     l11775:
  7454                           
  7455                           ;SDCard.c: 233: f_close(&fil);
  7456  0036D8  0EB4               	movlw	low _fil
  7457  0036DA  0100               	movlb	0	; () banked
  7458  0036DC  6F93               	movwf	f_close@fp& (0+255),b
  7459  0036DE  0E01               	movlw	high _fil
  7460  0036E0  6F94               	movwf	(f_close@fp+1)& (0+255),b
  7461  0036E2  ECB6  F028         	call	_f_close	;wreg free
  7462                           
  7463                           ;SDCard.c: 234: }
  7464  0036E6  D00D               	goto	l11781
  7465  0036E8                     l11777:
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;SDCard.c: 235: else;SDCard.c: 236: {;SDCard.c: 237: f_open(&fil, filename, 0x08 );
  7469  0036E8  0EB4               	movlw	low _fil
  7470  0036EA  6FC0               	movwf	f_open@fp& (0+255),b
  7471  0036EC  0E01               	movlw	high _fil
  7472  0036EE  6FC1               	movwf	(f_open@fp+1)& (0+255),b
  7473  0036F0  0E64               	movlw	low _filename
  7474  0036F2  6FC2               	movwf	f_open@path& (0+255),b
  7475  0036F4  0E02               	movlw	high _filename
  7476  0036F6  6FC3               	movwf	(f_open@path+1)& (0+255),b
  7477  0036F8  0E08               	movlw	8
  7478  0036FA  6FC4               	movwf	f_open@mode& (0+255),b
  7479  0036FC  EC76  F009         	call	_f_open	;wreg free
  7480  003700  D7EB               	goto	l11775
  7481  003702                     l11781:
  7482                           
  7483                           ; BSR set to: 0
  7484                           ;SDCard.c: 240: };SDCard.c: 242: PORTBbits.RB3 = 1;
  7485  003702  8681               	bsf	129,3,c	;volatile
  7486                           
  7487                           ; BSR set to: 0
  7488                           ;SDCard.c: 243: desliga_SPI();
  7489  003704  EC56  F02A         	call	_desliga_SPI	;wreg free
  7490  003708  0012               	return		;funcret
  7491  00370A                     __end_of_escrita_sdcard:
  7492                           	callstack 0
  7493                           
  7494 ;; *************** function _strcpy *****************
  7495 ;; Defined at:
  7496 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strcpy.c"
  7497 ;; Parameters:    Size  Location     Type
  7498 ;;  to              2   26[COMRAM] PTR unsigned char 
  7499 ;;		 -> diff_calc@point(12), diff_calc@fence(12), temp_buff_lat(11), temp_buff_long(12), 
  7500 ;;		 -> filename(15), 
  7501 ;;  from            2   28[COMRAM] PTR const unsigned char 
  7502 ;;		 -> poligono_ext(124), STR_13(6), rawLongitude(13), rawLatitude(13), 
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;  cp              2   30[COMRAM] PTR unsigned char 
  7505 ;;		 -> diff_calc@point(12), diff_calc@fence(12), temp_buff_lat(11), temp_buff_long(12), 
  7506 ;;		 -> filename(15), 
  7507 ;; Return value:  Size  Location     Type
  7508 ;;                  2   26[COMRAM] PTR unsigned char 
  7509 ;; Registers used:
  7510 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7511 ;; Tracked objects:
  7512 ;;		On entry : 0/0
  7513 ;;		On exit  : 0/0
  7514 ;;		Unchanged: 0/0
  7515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7516 ;;      Params:         4       0       0       0       0       0       0       0       0
  7517 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7518 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7519 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7520 ;;Total ram usage:        6 bytes
  7521 ;; Hardware stack levels used:    1
  7522 ;; Hardware stack levels required when called:    3
  7523 ;; This function calls:
  7524 ;;		Nothing
  7525 ;; This function is called by:
  7526 ;;		_escrita_sdcard
  7527 ;;		_armazena_longitude
  7528 ;;		_armazena_latitude
  7529 ;;		_diff_calc
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           	psect	text43
  7534  004E3A                     __ptext43:
  7535                           	callstack 0
  7536  004E3A                     _strcpy:
  7537                           	callstack 22
  7538                           
  7539                           ;incstack = 0
  7540  004E3A  C01B  F01F         	movff	strcpy@to,strcpy@cp
  7541  004E3E  C01C  F020         	movff	strcpy@to+1,strcpy@cp+1
  7542  004E42  D004               	goto	l10661
  7543  004E44                     l10659:
  7544  004E44  4A1F               	infsnz	strcpy@cp^0,f,c
  7545  004E46  2A20               	incf	(strcpy@cp+1)^0,f,c
  7546  004E48  4A1D               	infsnz	strcpy@from^0,f,c
  7547  004E4A  2A1E               	incf	(strcpy@from+1)^0,f,c
  7548  004E4C                     l10661:
  7549  004E4C  C01D  FFF6         	movff	strcpy@from,tblptrl
  7550  004E50  C01E  FFF7         	movff	strcpy@from+1,tblptrh
  7551  004E54  6AF8               	clrf	tblptru,c
  7552  004E56  C01F  FFD9         	movff	strcpy@cp,fsr2l
  7553  004E5A  C020  FFDA         	movff	strcpy@cp+1,fsr2h
  7554  004E5E  0E07               	movlw	(high __ramtop+-1)
  7555  004E60  64F7               	cpfsgt	tblptrh,c
  7556  004E62  D003               	bra	u12447
  7557  004E64  0008               	tblrd		*
  7558  004E66  50F5               	movf	tablat,w,c
  7559  004E68  D005               	bra	u12440
  7560  004E6A                     u12447:
  7561  004E6A  CFF6 FFE1          	movff	tblptrl,fsr1l
  7562  004E6E  CFF7 FFE2          	movff	tblptrh,fsr1h
  7563  004E72  50E7               	movf	indf1,w,c
  7564  004E74                     u12440:
  7565  004E74  6EDF               	movwf	indf2,c
  7566  004E76  50DF               	movf	indf2,w,c
  7567  004E78  B4D8               	btfsc	status,2,c
  7568  004E7A  0012               	return	
  7569  004E7C  D7E3               	goto	l10659
  7570  004E7E                     __end_of_strcpy:
  7571                           	callstack 0
  7572                           
  7573 ;; *************** function _strcat *****************
  7574 ;; Defined at:
  7575 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strcat.c"
  7576 ;; Parameters:    Size  Location     Type
  7577 ;;  to              2   24[COMRAM] PTR unsigned char 
  7578 ;;		 -> filename(15), 
  7579 ;;  from            2   26[COMRAM] PTR const unsigned char 
  7580 ;;		 -> STR_15(5), STR_14(3), 
  7581 ;; Auto vars:     Size  Location     Type
  7582 ;;  cp              2   28[COMRAM] PTR unsigned char 
  7583 ;;		 -> filename(15), 
  7584 ;; Return value:  Size  Location     Type
  7585 ;;                  2   24[COMRAM] PTR unsigned char 
  7586 ;; Registers used:
  7587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7588 ;; Tracked objects:
  7589 ;;		On entry : 0/0
  7590 ;;		On exit  : 0/0
  7591 ;;		Unchanged: 0/0
  7592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7593 ;;      Params:         4       0       0       0       0       0       0       0       0
  7594 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7595 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7596 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7597 ;;Total ram usage:        6 bytes
  7598 ;; Hardware stack levels used:    1
  7599 ;; Hardware stack levels required when called:    3
  7600 ;; This function calls:
  7601 ;;		Nothing
  7602 ;; This function is called by:
  7603 ;;		_escrita_sdcard
  7604 ;; This function uses a non-reentrant model
  7605 ;;
  7606                           
  7607                           	psect	text44
  7608  004E7E                     __ptext44:
  7609                           	callstack 0
  7610  004E7E                     _strcat:
  7611                           	callstack 24
  7612                           
  7613                           ;incstack = 0
  7614  004E7E  C019  F01D         	movff	strcat@to,strcat@cp
  7615  004E82  C01A  F01E         	movff	strcat@to+1,strcat@cp+1
  7616  004E86  D002               	goto	l11389
  7617  004E88                     l11387:
  7618  004E88  4A1D               	infsnz	strcat@cp^0,f,c
  7619  004E8A  2A1E               	incf	(strcat@cp+1)^0,f,c
  7620  004E8C                     l11389:
  7621  004E8C  C01D  FFD9         	movff	strcat@cp,fsr2l
  7622  004E90  C01E  FFDA         	movff	strcat@cp+1,fsr2h
  7623  004E94  50DF               	movf	indf2,w,c
  7624  004E96  B4D8               	btfsc	status,2,c
  7625  004E98  D005               	goto	l11393
  7626  004E9A  D7F6               	goto	l11387
  7627  004E9C                     l11391:
  7628  004E9C  4A1D               	infsnz	strcat@cp^0,f,c
  7629  004E9E  2A1E               	incf	(strcat@cp+1)^0,f,c
  7630  004EA0  4A1B               	infsnz	strcat@from^0,f,c
  7631  004EA2  2A1C               	incf	(strcat@from+1)^0,f,c
  7632  004EA4                     l11393:
  7633  004EA4  C01B  FFF6         	movff	strcat@from,tblptrl
  7634  004EA8  C01C  FFF7         	movff	strcat@from+1,tblptrh
  7635  004EAC                     	if	0	;tblptru may be non-zero
  7636  004EAC                     	endif
  7637  004EAC                     	if	0	;tblptru may be non-zero
  7638  004EAC                     	endif
  7639  004EAC  C01D  FFD9         	movff	strcat@cp,fsr2l
  7640  004EB0  C01E  FFDA         	movff	strcat@cp+1,fsr2h
  7641  004EB4  0008               	tblrd		*
  7642  004EB6  CFF5 FFDF          	movff	tablat,indf2
  7643  004EBA  50DF               	movf	indf2,w,c
  7644  004EBC  B4D8               	btfsc	status,2,c
  7645  004EBE  0012               	return	
  7646  004EC0  D7ED               	goto	l11391
  7647  004EC2                     __end_of_strcat:
  7648                           	callstack 0
  7649                           
  7650 ;; *************** function _inicializa_SPI *****************
  7651 ;; Defined at:
  7652 ;;		line 48 in file "bibliotecas/SPI.c"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;		None
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;		None
  7657 ;; Return value:  Size  Location     Type
  7658 ;;                  1    wreg      void 
  7659 ;; Registers used:
  7660 ;;		wreg, status,2, status,0
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7666 ;;      Params:         0       0       0       0       0       0       0       0       0
  7667 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7668 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7669 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7670 ;;Total ram usage:        0 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; Hardware stack levels required when called:    3
  7673 ;; This function calls:
  7674 ;;		Nothing
  7675 ;; This function is called by:
  7676 ;;		_escrita_sdcard
  7677 ;;		_recebe_dados_gps
  7678 ;; This function uses a non-reentrant model
  7679 ;;
  7680                           
  7681                           	psect	text45
  7682  00531E                     __ptext45:
  7683                           	callstack 0
  7684  00531E                     _inicializa_SPI:
  7685                           	callstack 24
  7686                           
  7687                           ;SPI.c: 50: TRISBbits.RB1 = 0;
  7688                           
  7689                           ;incstack = 0
  7690  00531E  9293               	bcf	147,1,c	;volatile
  7691                           
  7692                           ;SPI.c: 51: TRISBbits.RB5 = 0;
  7693  005320  9A93               	bcf	147,5,c	;volatile
  7694                           
  7695                           ;SPI.c: 52: TRISBbits.RB0 = 1;
  7696  005322  8093               	bsf	147,0,c	;volatile
  7697                           
  7698                           ;SPI.c: 53: TRISCbits.RC7 = 0;
  7699  005324  9E94               	bcf	148,7,c	;volatile
  7700                           
  7701                           ;SPI.c: 55: LATBbits.LATB5 = 1;
  7702  005326  8A8A               	bsf	138,5,c	;volatile
  7703                           
  7704                           ;SPI.c: 56: SSPSTAT &= 0x3F;
  7705  005328  0E3F               	movlw	63
  7706  00532A  16C7               	andwf	199,f,c	;volatile
  7707                           
  7708                           ;SPI.c: 57: SSPCON1 = 0x00;
  7709  00532C  0E00               	movlw	0
  7710  00532E  6EC6               	movwf	198,c	;volatile
  7711                           
  7712                           ;SPI.c: 59: SSPSTATbits.SMP = 0;
  7713  005330  9EC7               	bcf	199,7,c	;volatile
  7714                           
  7715                           ;SPI.c: 60: SSPSTATbits.CKE = 1;
  7716  005332  8CC7               	bsf	199,6,c	;volatile
  7717                           
  7718                           ;SPI.c: 61: SSPCON1bits.CKP = 0;
  7719  005334  98C6               	bcf	198,4,c	;volatile
  7720                           
  7721                           ;SPI.c: 63: SSPCON1 = 0b00000011;
  7722  005336  0E03               	movlw	3
  7723  005338  6EC6               	movwf	198,c	;volatile
  7724                           
  7725                           ;SPI.c: 65: SSPCON1bits.SSPEN = 1;
  7726  00533A  8AC6               	bsf	198,5,c	;volatile
  7727  00533C  0012               	return		;funcret
  7728  00533E                     __end_of_inicializa_SPI:
  7729                           	callstack 0
  7730                           
  7731 ;; *************** function _fprintf *****************
  7732 ;; Defined at:
  7733 ;;		line 1816 in file "bibliotecas/tff.c"
  7734 ;; Parameters:    Size  Location     Type
  7735 ;;  fil             2  121[BANK0 ] PTR struct _FIL
  7736 ;;		 -> fil(28), 
  7737 ;;  str             2  123[BANK0 ] PTR const unsigned char 
  7738 ;;		 -> STR_16(39), 
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;  s              16    0[BANK2 ] unsigned char [16]
  7741 ;;  val             4   24[BANK2 ] unsigned long 
  7742 ;;  i               2   31[BANK2 ] int 
  7743 ;;  cc              2   29[BANK2 ] int 
  7744 ;;  w               2   20[BANK2 ] int 
  7745 ;;  res             2   16[BANK2 ] int 
  7746 ;;  c               1   33[BANK2 ] unsigned char 
  7747 ;;  arp             1   28[BANK2 ] PTR void [1]
  7748 ;;		 -> ?_fprintf(2), 
  7749 ;;  r               1   23[BANK2 ] unsigned char 
  7750 ;;  f               1   22[BANK2 ] unsigned char 
  7751 ;; Return value:  Size  Location     Type
  7752 ;;                  2  121[BANK0 ] int 
  7753 ;; Registers used:
  7754 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7755 ;; Tracked objects:
  7756 ;;		On entry : 3F/0
  7757 ;;		On exit  : 3F/2
  7758 ;;		Unchanged: 0/0
  7759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7760 ;;      Params:         0      22       0       0       0       0       0       0       0
  7761 ;;      Locals:         0       0       0      34       0       0       0       0       0
  7762 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7763 ;;      Totals:         0      24       0      34       0       0       0       0       0
  7764 ;;Total ram usage:       58 bytes
  7765 ;; Hardware stack levels used:    1
  7766 ;; Hardware stack levels required when called:   14
  7767 ;; This function calls:
  7768 ;;		___lldiv
  7769 ;;		___llmod
  7770 ;;		___wmul
  7771 ;;		_fputc
  7772 ;;		_fputs
  7773 ;; This function is called by:
  7774 ;;		_escrita_sdcard
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           	psect	text46
  7779  000F6E                     __ptext46:
  7780                           	callstack 0
  7781  000F6E                     _fprintf:
  7782                           	callstack 13
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;tff.c: 1822: va_list arp;;tff.c: 1823: UCHAR c, f, r;;tff.c: 1824: ULONG val;;tff.c: 18
      +                          25: char s[16];;tff.c: 1826: int i, w, res, cc;;tff.c: 1829: *arp = __va_start();
  7786                           
  7787                           ;incstack = 0
  7788  000F6E  0EDD               	movlw	low (?_fprintf+4)
  7789  000F70  0102               	movlb	2	; () banked
  7790  000F72  6FC0               	movwf	fprintf@arp& (0+255),b
  7791                           
  7792                           ; BSR set to: 2
  7793                           ;tff.c: 1831: for (cc = res = 0; cc != -1; res += cc) {
  7794  000F74  0E00               	movlw	0
  7795  000F76  6FB5               	movwf	(fprintf@res+1)& (0+255),b
  7796  000F78  0E00               	movlw	0
  7797  000F7A  6FB4               	movwf	fprintf@res& (0+255),b
  7798  000F7C  C2B4  F2C1         	movff	fprintf@res,fprintf@cc
  7799  000F80  C2B5  F2C2         	movff	fprintf@res+1,fprintf@cc+1
  7800  000F84                     l11479:
  7801                           
  7802                           ; BSR set to: 2
  7803  000F84  29C1               	incf	fprintf@cc& (0+255),w,b
  7804  000F86  E103               	bnz	l11483
  7805  000F88  29C2               	incf	(fprintf@cc+1)& (0+255),w,b
  7806  000F8A  B4D8               	btfsc	status,2,c
  7807  000F8C  0012               	return	
  7808  000F8E                     l11483:
  7809                           
  7810                           ; BSR set to: 2
  7811                           ;tff.c: 1832: c = *str++;
  7812  000F8E  C0DB  FFF6         	movff	fprintf@str,tblptrl
  7813  000F92  C0DC  FFF7         	movff	fprintf@str+1,tblptrh
  7814  000F96                     	if	0	;tblptru may be non-zero
  7815  000F96                     	endif
  7816  000F96                     	if	0	;tblptru may be non-zero
  7817  000F96                     	endif
  7818  000F96  0008               	tblrd		*
  7819  000F98  CFF5 F2C5          	movff	tablat,fprintf@c
  7820                           
  7821                           ; BSR set to: 2
  7822  000F9C  0100               	movlb	0	; () banked
  7823  000F9E  4BDB               	infsnz	fprintf@str& (0+255),f,b
  7824  000FA0  2BDC               	incf	(fprintf@str+1)& (0+255),f,b
  7825                           
  7826                           ; BSR set to: 0
  7827                           ;tff.c: 1833: if (c == 0) break;
  7828  000FA2  0102               	movlb	2	; () banked
  7829  000FA4  51C5               	movf	fprintf@c& (0+255),w,b
  7830  000FA6  B4D8               	btfsc	status,2,c
  7831  000FA8  0012               	return	
  7832                           
  7833                           ; BSR set to: 2
  7834                           ;tff.c: 1834: if (c != '%') {
  7835  000FAA  0E25               	movlw	37
  7836  000FAC  19C5               	xorwf	fprintf@c& (0+255),w,b
  7837  000FAE  B4D8               	btfsc	status,2,c
  7838  000FB0  D019               	goto	l11499
  7839                           
  7840                           ; BSR set to: 2
  7841                           ;tff.c: 1835: cc = fputc(c, fil);
  7842  000FB2  C2C5  F0CC         	movff	fprintf@c,fputc@chr
  7843  000FB6  0100               	movlb	0	; () banked
  7844  000FB8  6BCD               	clrf	(fputc@chr+1)& (0+255),b
  7845  000FBA  C0D9  F0CE         	movff	fprintf@fil,fputc@fil
  7846  000FBE  C0DA  F0CF         	movff	fprintf@fil+1,fputc@fil+1
  7847  000FC2  ECE5  F027         	call	_fputc	;wreg free
  7848  000FC6  C0CC  F2C1         	movff	?_fputc,fprintf@cc
  7849  000FCA  C0CD  F2C2         	movff	?_fputc+1,fprintf@cc+1
  7850                           
  7851                           ; BSR set to: 0
  7852                           ;tff.c: 1836: if (cc != -1) cc = 1;
  7853  000FCE  0102               	movlb	2	; () banked
  7854  000FD0  29C1               	incf	fprintf@cc& (0+255),w,b
  7855  000FD2  E103               	bnz	u13940
  7856  000FD4  29C2               	incf	(fprintf@cc+1)& (0+255),w,b
  7857  000FD6  B4D8               	btfsc	status,2,c
  7858  000FD8  D183               	goto	l11623
  7859  000FDA                     u13940:
  7860                           
  7861                           ; BSR set to: 2
  7862  000FDA  0E00               	movlw	0
  7863  000FDC  6FC2               	movwf	(fprintf@cc+1)& (0+255),b
  7864  000FDE  0E01               	movlw	1
  7865  000FE0  6FC1               	movwf	fprintf@cc& (0+255),b
  7866  000FE2  D17E               	goto	l11623
  7867  000FE4                     l11499:
  7868                           
  7869                           ; BSR set to: 2
  7870                           ;tff.c: 1838: };tff.c: 1839: w = f = 0;
  7871  000FE4  0E00               	movlw	0
  7872  000FE6  6FBA               	movwf	fprintf@f& (0+255),b
  7873  000FE8  C2BA  F2B8         	movff	fprintf@f,fprintf@w
  7874  000FEC  6BB9               	clrf	(fprintf@w+1)& (0+255),b
  7875                           
  7876                           ; BSR set to: 2
  7877                           ;tff.c: 1840: c = *str++;
  7878  000FEE  C0DB  FFF6         	movff	fprintf@str,tblptrl
  7879  000FF2  C0DC  FFF7         	movff	fprintf@str+1,tblptrh
  7880  000FF6                     	if	0	;tblptru may be non-zero
  7881  000FF6                     	endif
  7882  000FF6                     	if	0	;tblptru may be non-zero
  7883  000FF6                     	endif
  7884  000FF6  0008               	tblrd		*
  7885  000FF8  CFF5 F2C5          	movff	tablat,fprintf@c
  7886                           
  7887                           ; BSR set to: 2
  7888  000FFC  0100               	movlb	0	; () banked
  7889  000FFE  4BDB               	infsnz	fprintf@str& (0+255),f,b
  7890  001000  2BDC               	incf	(fprintf@str+1)& (0+255),f,b
  7891                           
  7892                           ; BSR set to: 0
  7893                           ;tff.c: 1841: if (c == '0') {
  7894  001002  0E30               	movlw	48
  7895  001004  0102               	movlb	2	; () banked
  7896  001006  19C5               	xorwf	fprintf@c& (0+255),w,b
  7897  001008  A4D8               	btfss	status,2,c
  7898  00100A  D023               	goto	l11519
  7899                           
  7900                           ; BSR set to: 2
  7901                           ;tff.c: 1842: f = 1; c = *str++;
  7902  00100C  0E01               	movlw	1
  7903  00100E  6FBA               	movwf	fprintf@f& (0+255),b
  7904  001010                     l11509:
  7905                           
  7906                           ; BSR set to: 2
  7907  001010  C0DB  FFF6         	movff	fprintf@str,tblptrl
  7908  001014  C0DC  FFF7         	movff	fprintf@str+1,tblptrh
  7909  001018                     	if	0	;tblptru may be non-zero
  7910  001018                     	endif
  7911  001018                     	if	0	;tblptru may be non-zero
  7912  001018                     	endif
  7913  001018  0008               	tblrd		*
  7914  00101A  CFF5 F2C5          	movff	tablat,fprintf@c
  7915                           
  7916                           ; BSR set to: 2
  7917  00101E  0100               	movlb	0	; () banked
  7918  001020  4BDB               	infsnz	fprintf@str& (0+255),f,b
  7919  001022  2BDC               	incf	(fprintf@str+1)& (0+255),f,b
  7920  001024  D016               	goto	l11519
  7921  001026                     l11513:
  7922                           
  7923                           ; BSR set to: 2
  7924                           ;tff.c: 1845: w = w * 10 + (c - '0');
  7925  001026  C2B8  F019         	movff	fprintf@w,___wmul@multiplier
  7926  00102A  C2B9  F01A         	movff	fprintf@w+1,___wmul@multiplier+1
  7927  00102E  0E00               	movlw	0
  7928  001030  6E1C               	movwf	(___wmul@multiplicand+1)^0,c
  7929  001032  0E0A               	movlw	10
  7930  001034  6E1B               	movwf	___wmul@multiplicand^0,c
  7931  001036  ECF2  F028         	call	___wmul	;wreg free
  7932  00103A  0102               	movlb	2	; () banked
  7933  00103C  51C5               	movf	fprintf@c& (0+255),w,b
  7934  00103E  2619               	addwf	?___wmul^0,f,c
  7935  001040  0E00               	movlw	0
  7936  001042  221A               	addwfc	(?___wmul+1)^0,f,c
  7937  001044  0ED0               	movlw	208
  7938  001046  2419               	addwf	?___wmul^0,w,c
  7939  001048  6FB8               	movwf	fprintf@w& (0+255),b
  7940  00104A  0EFF               	movlw	255
  7941  00104C  201A               	addwfc	(?___wmul+1)^0,w,c
  7942  00104E  6FB9               	movwf	(fprintf@w+1)& (0+255),b
  7943  001050  D7DF               	goto	l11509
  7944  001052                     l11519:
  7945  001052  0E2F               	movlw	47
  7946  001054  0102               	movlb	2	; () banked
  7947  001056  65C5               	cpfsgt	fprintf@c& (0+255),b
  7948  001058  D003               	goto	u13970
  7949                           
  7950                           ; BSR set to: 2
  7951  00105A  0E39               	movlw	57
  7952  00105C  65C5               	cpfsgt	fprintf@c& (0+255),b
  7953  00105E  D7E3               	goto	l11513
  7954  001060                     u13970:
  7955                           
  7956                           ; BSR set to: 2
  7957                           ;tff.c: 1847: };tff.c: 1848: if (c == 'l') {
  7958  001060  0E6C               	movlw	108
  7959  001062  19C5               	xorwf	fprintf@c& (0+255),w,b
  7960  001064  A4D8               	btfss	status,2,c
  7961  001066  D00B               	goto	l11531
  7962                           
  7963                           ; BSR set to: 2
  7964                           ;tff.c: 1849: f |= 2; c = *str++;
  7965  001068  83BA               	bsf	fprintf@f& (0+255),1,b
  7966                           
  7967                           ; BSR set to: 2
  7968  00106A  C0DB  FFF6         	movff	fprintf@str,tblptrl
  7969  00106E  C0DC  FFF7         	movff	fprintf@str+1,tblptrh
  7970  001072                     	if	0	;tblptru may be non-zero
  7971  001072                     	endif
  7972  001072                     	if	0	;tblptru may be non-zero
  7973  001072                     	endif
  7974  001072  0008               	tblrd		*
  7975  001074  CFF5 F2C5          	movff	tablat,fprintf@c
  7976                           
  7977                           ; BSR set to: 2
  7978  001078  0100               	movlb	0	; () banked
  7979  00107A  4BDB               	infsnz	fprintf@str& (0+255),f,b
  7980  00107C  2BDC               	incf	(fprintf@str+1)& (0+255),f,b
  7981  00107E                     l11531:
  7982                           
  7983                           ;tff.c: 1850: };tff.c: 1851: if (c == 's') {
  7984  00107E  0E73               	movlw	115
  7985  001080  0102               	movlb	2	; () banked
  7986  001082  19C5               	xorwf	fprintf@c& (0+255),w,b
  7987  001084  A4D8               	btfss	status,2,c
  7988  001086  D015               	goto	l11537
  7989                           
  7990                           ; BSR set to: 2
  7991                           ;tff.c: 1852: cc = fputs((*(char* *)__va_arg((*(char* **)arp), (char*)0)), fil);
  7992  001088  51C0               	movf	fprintf@arp& (0+255),w,b
  7993  00108A  6ED9               	movwf	fsr2l,c
  7994  00108C  6ADA               	clrf	fsr2h,c
  7995  00108E  CFDE F0D3          	movff	postinc2,fputs@str
  7996  001092  CFDD F0D4          	movff	postdec2,fputs@str+1
  7997  001096  C0D9  F0D5         	movff	fprintf@fil,fputs@fil
  7998  00109A  C0DA  F0D6         	movff	fprintf@fil+1,fputs@fil+1
  7999  00109E  ECC0  F022         	call	_fputs	;wreg free
  8000  0010A2  C0D3  F2C1         	movff	?_fputs,fprintf@cc
  8001  0010A6  C0D4  F2C2         	movff	?_fputs+1,fprintf@cc+1
  8002  0010AA  0E02               	movlw	2
  8003  0010AC  0102               	movlb	2	; () banked
  8004  0010AE  27C0               	addwf	fprintf@arp& (0+255),f,b
  8005                           
  8006                           ;tff.c: 1853: continue;
  8007  0010B0  D117               	goto	l11623
  8008  0010B2                     l11537:
  8009                           
  8010                           ; BSR set to: 2
  8011                           ;tff.c: 1854: };tff.c: 1855: if (c == 'c') {
  8012  0010B2  0E63               	movlw	99
  8013  0010B4  19C5               	xorwf	fprintf@c& (0+255),w,b
  8014  0010B6  A4D8               	btfss	status,2,c
  8015  0010B8  D01D               	goto	l11547
  8016                           
  8017                           ; BSR set to: 2
  8018                           ;tff.c: 1856: cc = fputc((*(char *)__va_arg((*(char **)arp), (char)0)), fil);
  8019  0010BA  51C0               	movf	fprintf@arp& (0+255),w,b
  8020  0010BC  6ED9               	movwf	fsr2l,c
  8021  0010BE  6ADA               	clrf	fsr2h,c
  8022  0010C0  50DF               	movf	indf2,w,c
  8023  0010C2  0100               	movlb	0	; () banked
  8024  0010C4  6FEF               	movwf	??_fprintf& (0+255),b
  8025  0010C6  51EF               	movf	??_fprintf& (0+255),w,b
  8026  0010C8  6FCC               	movwf	fputc@chr& (0+255),b
  8027  0010CA  6BCD               	clrf	(fputc@chr+1)& (0+255),b
  8028  0010CC  C0D9  F0CE         	movff	fprintf@fil,fputc@fil
  8029  0010D0  C0DA  F0CF         	movff	fprintf@fil+1,fputc@fil+1
  8030  0010D4  ECE5  F027         	call	_fputc	;wreg free
  8031  0010D8  C0CC  F2C1         	movff	?_fputc,fprintf@cc
  8032  0010DC  C0CD  F2C2         	movff	?_fputc+1,fprintf@cc+1
  8033                           
  8034                           ; BSR set to: 0
  8035  0010E0  0E02               	movlw	2
  8036  0010E2  0102               	movlb	2	; () banked
  8037  0010E4  27C0               	addwf	fprintf@arp& (0+255),f,b
  8038                           
  8039                           ; BSR set to: 2
  8040                           ;tff.c: 1857: if (cc != -1) cc = 1;
  8041  0010E6  29C1               	incf	fprintf@cc& (0+255),w,b
  8042  0010E8  E104               	bnz	u14010
  8043  0010EA  29C2               	incf	(fprintf@cc+1)& (0+255),w,b
  8044  0010EC  A4D8               	btfss	status,2,c
  8045  0010EE  D775               	goto	u13940
  8046  0010F0  D0F7               	goto	l11623
  8047  0010F2                     u14010:
  8048  0010F2  D773               	goto	u13940
  8049  0010F4                     l11547:
  8050                           
  8051                           ; BSR set to: 2
  8052                           ;tff.c: 1859: };tff.c: 1860: r = 0;
  8053  0010F4  0E00               	movlw	0
  8054  0010F6  6FBB               	movwf	fprintf@r& (0+255),b
  8055                           
  8056                           ; BSR set to: 2
  8057                           ;tff.c: 1861: if (c == 'd') r = 10;
  8058  0010F8  0E64               	movlw	100
  8059  0010FA  19C5               	xorwf	fprintf@c& (0+255),w,b
  8060  0010FC  A4D8               	btfss	status,2,c
  8061  0010FE  D002               	goto	l11553
  8062                           
  8063                           ; BSR set to: 2
  8064  001100  0E0A               	movlw	10
  8065  001102  6FBB               	movwf	fprintf@r& (0+255),b
  8066  001104                     l11553:
  8067                           
  8068                           ; BSR set to: 2
  8069                           ;tff.c: 1862: if (c == 'u') r = 10;
  8070  001104  0E75               	movlw	117
  8071  001106  19C5               	xorwf	fprintf@c& (0+255),w,b
  8072  001108  A4D8               	btfss	status,2,c
  8073  00110A  D002               	goto	l11557
  8074                           
  8075                           ; BSR set to: 2
  8076  00110C  0E0A               	movlw	10
  8077  00110E  6FBB               	movwf	fprintf@r& (0+255),b
  8078  001110                     l11557:
  8079                           
  8080                           ; BSR set to: 2
  8081                           ;tff.c: 1863: if (c == 'X') r = 16;
  8082  001110  0E58               	movlw	88
  8083  001112  19C5               	xorwf	fprintf@c& (0+255),w,b
  8084  001114  A4D8               	btfss	status,2,c
  8085  001116  D002               	goto	l1139
  8086                           
  8087                           ; BSR set to: 2
  8088  001118  0E10               	movlw	16
  8089  00111A  6FBB               	movwf	fprintf@r& (0+255),b
  8090  00111C                     l1139:
  8091                           
  8092                           ; BSR set to: 2
  8093                           ;tff.c: 1864: if (r == 0) break;
  8094  00111C  51BB               	movf	fprintf@r& (0+255),w,b
  8095  00111E  B4D8               	btfsc	status,2,c
  8096  001120  0012               	return	
  8097                           
  8098                           ; BSR set to: 2
  8099                           ;tff.c: 1865: if (f & 2) {
  8100  001122  A3BA               	btfss	fprintf@f& (0+255),1,b
  8101  001124  D00D               	goto	l11567
  8102                           
  8103                           ; BSR set to: 2
  8104                           ;tff.c: 1866: val = (ULONG)(*(long *)__va_arg((*(long **)arp), (long)0));
  8105  001126  51C0               	movf	fprintf@arp& (0+255),w,b
  8106  001128  6ED9               	movwf	fsr2l,c
  8107  00112A  6ADA               	clrf	fsr2h,c
  8108  00112C  CFDE F2BC          	movff	postinc2,fprintf@val
  8109  001130  CFDE F2BD          	movff	postinc2,fprintf@val+1
  8110  001134  CFDE F2BE          	movff	postinc2,fprintf@val+2
  8111  001138  CFDE F2BF          	movff	postinc2,fprintf@val+3
  8112                           
  8113                           ; BSR set to: 2
  8114  00113C  0E04               	movlw	4
  8115  00113E  D01F               	goto	L1
  8116  001140                     l11567:
  8117                           
  8118                           ; BSR set to: 2
  8119                           ;tff.c: 1868: val = (c == 'd') ? (ULONG)(long)(*(int *)__va_arg((*(int **)arp), (int)0))
      +                           : (ULONG)(*(unsigned int *)__va_arg((*(unsigned int **)arp), (unsigned int)0));
  8120  001140  0E64               	movlw	100
  8121  001142  19C5               	xorwf	fprintf@c& (0+255),w,b
  8122  001144  B4D8               	btfsc	status,2,c
  8123  001146  D00E               	goto	l11573
  8124                           
  8125                           ; BSR set to: 2
  8126  001148  51C0               	movf	fprintf@arp& (0+255),w,b
  8127  00114A  6ED9               	movwf	fsr2l,c
  8128  00114C  6ADA               	clrf	fsr2h,c
  8129  00114E  CFDE F0EF          	movff	postinc2,??_fprintf
  8130  001152  CFDD F0F0          	movff	postdec2,??_fprintf+1
  8131  001156  C0EF  F2BC         	movff	??_fprintf,fprintf@val
  8132  00115A  C0F0  F2BD         	movff	??_fprintf+1,fprintf@val+1
  8133  00115E  6BBE               	clrf	(fprintf@val+2)& (0+255),b
  8134  001160  6BBF               	clrf	(fprintf@val+3)& (0+255),b
  8135  001162  D00C               	goto	l11575
  8136  001164                     l11573:
  8137                           
  8138                           ; BSR set to: 2
  8139  001164  51C0               	movf	fprintf@arp& (0+255),w,b
  8140  001166  6ED9               	movwf	fsr2l,c
  8141  001168  6ADA               	clrf	fsr2h,c
  8142  00116A  CFDE F2BC          	movff	postinc2,fprintf@val
  8143  00116E  CFDD F2BD          	movff	postdec2,fprintf@val+1
  8144  001172  0E00               	movlw	0
  8145  001174  BFBD               	btfsc	(fprintf@val+1)& (0+255),7,b
  8146  001176  0EFF               	movlw	-1
  8147  001178  6FBE               	movwf	(fprintf@val+2)& (0+255),b
  8148  00117A  6FBF               	movwf	(fprintf@val+3)& (0+255),b
  8149  00117C                     l11575:
  8150                           
  8151                           ; BSR set to: 2
  8152  00117C  0E02               	movlw	2
  8153  00117E                     L1:
  8154  00117E  27C0               	addwf	fprintf@arp& (0+255),f,b
  8155                           
  8156                           ; BSR set to: 2
  8157                           ;tff.c: 1869: };tff.c: 1871: if (c == 'd') {
  8158  001180  0E64               	movlw	100
  8159  001182  19C5               	xorwf	fprintf@c& (0+255),w,b
  8160  001184  A4D8               	btfss	status,2,c
  8161  001186  D00E               	goto	l11585
  8162                           
  8163                           ; BSR set to: 2
  8164                           ;tff.c: 1872: if (val >= 0x80000000) {
  8165  001188  0E80               	movlw	128
  8166  00118A  5DBF               	subwf	(fprintf@val+3)& (0+255),w,b
  8167  00118C  A0D8               	btfss	status,0,c
  8168  00118E  D00A               	goto	l11585
  8169                           
  8170                           ; BSR set to: 2
  8171                           ;tff.c: 1873: val = 0 - val;
  8172  001190  6DBC               	negf	fprintf@val& (0+255),b
  8173  001192  1FBD               	comf	(fprintf@val+1)& (0+255),f,b
  8174  001194  B0D8               	btfsc	status,0,c
  8175  001196  2BBD               	incf	(fprintf@val+1)& (0+255),f,b
  8176  001198  1FBE               	comf	(fprintf@val+2)& (0+255),f,b
  8177  00119A  B0D8               	btfsc	status,0,c
  8178  00119C  2BBE               	incf	(fprintf@val+2)& (0+255),f,b
  8179  00119E  0E00               	movlw	0
  8180  0011A0  57BF               	subfwb	(fprintf@val+3)& (0+255),f,b
  8181                           
  8182                           ; BSR set to: 2
  8183                           ;tff.c: 1874: f |= 4;
  8184  0011A2  85BA               	bsf	fprintf@f& (0+255),2,b
  8185  0011A4                     l11585:
  8186                           
  8187                           ; BSR set to: 2
  8188                           ;tff.c: 1875: };tff.c: 1876: };tff.c: 1877: i = sizeof(s) - 1; s[i] = 0;
  8189  0011A4  0E00               	movlw	0
  8190  0011A6  6FC4               	movwf	(fprintf@i+1)& (0+255),b
  8191  0011A8  0E0F               	movlw	15
  8192  0011AA  6FC3               	movwf	fprintf@i& (0+255),b
  8193                           
  8194                           ; BSR set to: 2
  8195  0011AC  0E00               	movlw	0
  8196  0011AE  6FB3               	movwf	(fprintf@s+15)& (0+255),b
  8197  0011B0                     l11589:
  8198                           
  8199                           ; BSR set to: 2
  8200                           ;tff.c: 1879: c = (UCHAR)(val % r + '0');
  8201  0011B0  C2BC  F019         	movff	fprintf@val,___llmod@dividend
  8202  0011B4  C2BD  F01A         	movff	fprintf@val+1,___llmod@dividend+1
  8203  0011B8  C2BE  F01B         	movff	fprintf@val+2,___llmod@dividend+2
  8204  0011BC  C2BF  F01C         	movff	fprintf@val+3,___llmod@dividend+3
  8205  0011C0  51BB               	movf	fprintf@r& (0+255),w,b
  8206  0011C2  6E1D               	movwf	___llmod@divisor^0,c
  8207  0011C4  6A1E               	clrf	(___llmod@divisor+1)^0,c
  8208  0011C6  6A1F               	clrf	(___llmod@divisor+2)^0,c
  8209  0011C8  6A20               	clrf	(___llmod@divisor+3)^0,c
  8210  0011CA  ECAA  F024         	call	___llmod	;wreg free
  8211  0011CE  5019               	movf	?___llmod^0,w,c
  8212  0011D0  0F30               	addlw	48
  8213  0011D2  6FC5               	movwf	fprintf@c& (0+255),b
  8214                           
  8215                           ; BSR set to: 2
  8216                           ;tff.c: 1880: if (c > '9') c += 7;
  8217  0011D4  0E39               	movlw	57
  8218  0011D6  65C5               	cpfsgt	fprintf@c& (0+255),b
  8219  0011D8  D002               	goto	l11595
  8220                           
  8221                           ; BSR set to: 2
  8222  0011DA  0E07               	movlw	7
  8223  0011DC  27C5               	addwf	fprintf@c& (0+255),f,b
  8224  0011DE                     l11595:
  8225                           
  8226                           ; BSR set to: 2
  8227                           ;tff.c: 1881: s[--i] = c;
  8228  0011DE  07C3               	decf	fprintf@i& (0+255),f,b
  8229  0011E0  A0D8               	btfss	status,0,c
  8230  0011E2  07C4               	decf	(fprintf@i+1)& (0+255),f,b
  8231  0011E4  0EA4               	movlw	low fprintf@s
  8232  0011E6  25C3               	addwf	fprintf@i& (0+255),w,b
  8233  0011E8  6ED9               	movwf	fsr2l,c
  8234  0011EA  0E02               	movlw	high fprintf@s
  8235  0011EC  21C4               	addwfc	(fprintf@i+1)& (0+255),w,b
  8236  0011EE  6EDA               	movwf	fsr2h,c
  8237  0011F0  C2C5  FFDF         	movff	fprintf@c,indf2
  8238                           
  8239                           ; BSR set to: 2
  8240                           ;tff.c: 1882: val /= r;
  8241  0011F4  C2BC  F019         	movff	fprintf@val,___lldiv@dividend
  8242  0011F8  C2BD  F01A         	movff	fprintf@val+1,___lldiv@dividend+1
  8243  0011FC  C2BE  F01B         	movff	fprintf@val+2,___lldiv@dividend+2
  8244  001200  C2BF  F01C         	movff	fprintf@val+3,___lldiv@dividend+3
  8245  001204  51BB               	movf	fprintf@r& (0+255),w,b
  8246  001206  6E1D               	movwf	___lldiv@divisor^0,c
  8247  001208  6A1E               	clrf	(___lldiv@divisor+1)^0,c
  8248  00120A  6A1F               	clrf	(___lldiv@divisor+2)^0,c
  8249  00120C  6A20               	clrf	(___lldiv@divisor+3)^0,c
  8250  00120E  EC88  F023         	call	___lldiv	;wreg free
  8251  001212  C019  F2BC         	movff	?___lldiv,fprintf@val
  8252  001216  C01A  F2BD         	movff	?___lldiv+1,fprintf@val+1
  8253  00121A  C01B  F2BE         	movff	?___lldiv+2,fprintf@val+2
  8254  00121E  C01C  F2BF         	movff	?___lldiv+3,fprintf@val+3
  8255                           
  8256                           ;tff.c: 1883: } while (i && val);
  8257  001222  0102               	movlb	2	; () banked
  8258  001224  51C3               	movf	fprintf@i& (0+255),w,b
  8259  001226  11C4               	iorwf	(fprintf@i+1)& (0+255),w,b
  8260  001228  B4D8               	btfsc	status,2,c
  8261  00122A  D006               	goto	u14120
  8262                           
  8263                           ; BSR set to: 2
  8264  00122C  51BC               	movf	fprintf@val& (0+255),w,b
  8265  00122E  11BD               	iorwf	(fprintf@val+1)& (0+255),w,b
  8266  001230  11BE               	iorwf	(fprintf@val+2)& (0+255),w,b
  8267  001232  11BF               	iorwf	(fprintf@val+3)& (0+255),w,b
  8268  001234  A4D8               	btfss	status,2,c
  8269  001236  D7BC               	goto	l11589
  8270  001238                     u14120:
  8271                           
  8272                           ; BSR set to: 2
  8273                           ;tff.c: 1884: if (i && (f & 4)) s[--i] = '-';
  8274  001238  51C3               	movf	fprintf@i& (0+255),w,b
  8275  00123A  11C4               	iorwf	(fprintf@i+1)& (0+255),w,b
  8276  00123C  A4D8               	btfss	status,2,c
  8277                           
  8278                           ; BSR set to: 2
  8279  00123E  A5BA               	btfss	fprintf@f& (0+255),2,b
  8280  001240  D00B               	goto	l11609
  8281                           
  8282                           ; BSR set to: 2
  8283  001242  07C3               	decf	fprintf@i& (0+255),f,b
  8284  001244  A0D8               	btfss	status,0,c
  8285  001246  07C4               	decf	(fprintf@i+1)& (0+255),f,b
  8286  001248  0EA4               	movlw	low fprintf@s
  8287  00124A  25C3               	addwf	fprintf@i& (0+255),w,b
  8288  00124C  6ED9               	movwf	fsr2l,c
  8289  00124E  0E02               	movlw	high fprintf@s
  8290  001250  21C4               	addwfc	(fprintf@i+1)& (0+255),w,b
  8291  001252  6EDA               	movwf	fsr2h,c
  8292  001254  0E2D               	movlw	45
  8293  001256  6EDF               	movwf	indf2,c
  8294  001258                     l11609:
  8295                           
  8296                           ; BSR set to: 2
  8297                           ;tff.c: 1885: w = sizeof(s) - 1 - w;
  8298  001258  51B8               	movf	fprintf@w& (0+255),w,b
  8299  00125A  080F               	sublw	15
  8300  00125C  6FB8               	movwf	fprintf@w& (0+255),b
  8301  00125E  51B9               	movf	(fprintf@w+1)& (0+255),w,b
  8302  001260  A0D8               	btfss	status,0,c
  8303  001262  2AE8               	incf	wreg,f,c
  8304  001264  0800               	sublw	0
  8305  001266  6FB9               	movwf	(fprintf@w+1)& (0+255),b
  8306                           
  8307                           ;tff.c: 1886: while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
  8308  001268  D016               	goto	l11617
  8309  00126A                     l1156:
  8310                           
  8311                           ; BSR set to: 0
  8312  00126A  0102               	movlb	2	; () banked
  8313  00126C  B1BA               	btfsc	fprintf@f& (0+255),0,b
  8314  00126E  D004               	goto	l11613
  8315                           
  8316                           ; BSR set to: 2
  8317  001270  0E00               	movlw	0
  8318  001272  6FB7               	movwf	(_fprintf$2143+1)& (0+255),b
  8319  001274  0E20               	movlw	32
  8320  001276  D003               	goto	L2
  8321  001278                     l11613:
  8322                           
  8323                           ; BSR set to: 2
  8324  001278  0E00               	movlw	0
  8325  00127A  6FB7               	movwf	(_fprintf$2143+1)& (0+255),b
  8326  00127C  0E30               	movlw	48
  8327  00127E                     L2:
  8328  00127E  6FB6               	movwf	_fprintf$2143& (0+255),b
  8329                           
  8330                           ; BSR set to: 2
  8331  001280  07C3               	decf	fprintf@i& (0+255),f,b
  8332  001282  A0D8               	btfss	status,0,c
  8333  001284  07C4               	decf	(fprintf@i+1)& (0+255),f,b
  8334  001286  0EA4               	movlw	low fprintf@s
  8335  001288  25C3               	addwf	fprintf@i& (0+255),w,b
  8336  00128A  6ED9               	movwf	fsr2l,c
  8337  00128C  0E02               	movlw	high fprintf@s
  8338  00128E  21C4               	addwfc	(fprintf@i+1)& (0+255),w,b
  8339  001290  6EDA               	movwf	fsr2h,c
  8340  001292  C2B6  FFDF         	movff	_fprintf$2143,indf2
  8341  001296                     l11617:
  8342                           
  8343                           ; BSR set to: 2
  8344  001296  51C3               	movf	fprintf@i& (0+255),w,b
  8345  001298  11C4               	iorwf	(fprintf@i+1)& (0+255),w,b
  8346  00129A  B4D8               	btfsc	status,2,c
  8347  00129C  D00D               	goto	u14170
  8348                           
  8349                           ; BSR set to: 2
  8350  00129E  51C3               	movf	fprintf@i& (0+255),w,b
  8351  0012A0  5DB8               	subwf	fprintf@w& (0+255),w,b
  8352  0012A2  51B9               	movf	(fprintf@w+1)& (0+255),w,b
  8353  0012A4  0A80               	xorlw	128
  8354  0012A6  0100               	movlb	0	; () banked
  8355  0012A8  6FEF               	movwf	??_fprintf& (0+255),b
  8356  0012AA  0102               	movlb	2	; () banked
  8357  0012AC  51C4               	movf	(fprintf@i+1)& (0+255),w,b
  8358  0012AE  0A80               	xorlw	128
  8359  0012B0  0100               	movlb	0	; () banked
  8360  0012B2  59EF               	subwfb	??_fprintf& (0+255),w,b
  8361  0012B4  A0D8               	btfss	status,0,c
  8362  0012B6  D7D9               	goto	l1156
  8363  0012B8                     u14170:
  8364                           
  8365                           ;tff.c: 1887: cc = fputs(&s[i], fil);
  8366  0012B8  0EA4               	movlw	low fprintf@s
  8367  0012BA  0102               	movlb	2	; () banked
  8368  0012BC  25C3               	addwf	fprintf@i& (0+255),w,b
  8369  0012BE  0100               	movlb	0	; () banked
  8370  0012C0  6FD3               	movwf	fputs@str& (0+255),b
  8371  0012C2  0E02               	movlw	high fprintf@s
  8372  0012C4  0102               	movlb	2	; () banked
  8373  0012C6  21C4               	addwfc	(fprintf@i+1)& (0+255),w,b
  8374  0012C8  0100               	movlb	0	; () banked
  8375  0012CA  6FD4               	movwf	(fputs@str+1)& (0+255),b
  8376  0012CC  C0D9  F0D5         	movff	fprintf@fil,fputs@fil
  8377  0012D0  C0DA  F0D6         	movff	fprintf@fil+1,fputs@fil+1
  8378  0012D4  ECC0  F022         	call	_fputs	;wreg free
  8379  0012D8  C0D3  F2C1         	movff	?_fputs,fprintf@cc
  8380  0012DC  C0D4  F2C2         	movff	?_fputs+1,fprintf@cc+1
  8381  0012E0                     l11623:
  8382  0012E0  0102               	movlb	2	; () banked
  8383  0012E2  51C1               	movf	fprintf@cc& (0+255),w,b
  8384  0012E4  27B4               	addwf	fprintf@res& (0+255),f,b
  8385  0012E6  51C2               	movf	(fprintf@cc+1)& (0+255),w,b
  8386  0012E8  23B5               	addwfc	(fprintf@res+1)& (0+255),f,b
  8387  0012EA  D64C               	goto	l11479
  8388  0012EC                     __end_of_fprintf:
  8389                           	callstack 0
  8390                           
  8391 ;; *************** function _fputs *****************
  8392 ;; Defined at:
  8393 ;;		line 1796 in file "bibliotecas/tff.c"
  8394 ;; Parameters:    Size  Location     Type
  8395 ;;  str             2  115[BANK0 ] PTR const unsigned char 
  8396 ;;		 -> fprintf@s(16), ?_fprintf(2), STR_21(16), STR_20(27), 
  8397 ;;		 -> STR_19(17), STR_18(16), STR_17(16), string_dado(73), 
  8398 ;;  fil             2  117[BANK0 ] PTR struct _FIL
  8399 ;;		 -> fil(28), 
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;  n               2  119[BANK0 ] int 
  8402 ;; Return value:  Size  Location     Type
  8403 ;;                  2  115[BANK0 ] int 
  8404 ;; Registers used:
  8405 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8406 ;; Tracked objects:
  8407 ;;		On entry : 3D/2
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8411 ;;      Params:         0       4       0       0       0       0       0       0       0
  8412 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8413 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8414 ;;      Totals:         1       6       0       0       0       0       0       0       0
  8415 ;;Total ram usage:        7 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:   13
  8418 ;; This function calls:
  8419 ;;		_fputc
  8420 ;; This function is called by:
  8421 ;;		_fprintf
  8422 ;; This function uses a non-reentrant model
  8423 ;;
  8424                           
  8425                           	psect	text47
  8426  004580                     __ptext47:
  8427                           	callstack 0
  8428  004580                     _fputs:
  8429                           	callstack 13
  8430                           
  8431                           ;tff.c: 1801: int n;;tff.c: 1804: for (n = 0; *str; str++, n++) {
  8432                           
  8433                           ; BSR set to: 2
  8434                           ;incstack = 0
  8435  004580  0E00               	movlw	0
  8436  004582  0100               	movlb	0	; () banked
  8437  004584  6FD8               	movwf	(fputs@n+1)& (0+255),b
  8438  004586  0E00               	movlw	0
  8439  004588  6FD7               	movwf	fputs@n& (0+255),b
  8440  00458A  D027               	goto	l11187
  8441  00458C                     l11181:
  8442                           
  8443                           ;tff.c: 1805: if (fputc(*str, fil) == -1) return -1;
  8444  00458C  C0D3  FFF6         	movff	fputs@str,tblptrl
  8445  004590  C0D4  FFF7         	movff	fputs@str+1,tblptrh
  8446  004594  6AF8               	clrf	tblptru,c
  8447  004596  0E07               	movlw	(high __ramtop+-1)
  8448  004598  64F7               	cpfsgt	tblptrh,c
  8449  00459A  D003               	bra	u13357
  8450  00459C  0008               	tblrd		*
  8451  00459E  50F5               	movf	tablat,w,c
  8452  0045A0  D005               	bra	u13350
  8453  0045A2                     u13357:
  8454  0045A2  CFF6 FFE1          	movff	tblptrl,fsr1l
  8455  0045A6  CFF7 FFE2          	movff	tblptrh,fsr1h
  8456  0045AA  50E7               	movf	indf1,w,c
  8457  0045AC                     u13350:
  8458  0045AC  6E31               	movwf	??_fputs^0,c
  8459  0045AE  5031               	movf	??_fputs^0,w,c
  8460  0045B0  0100               	movlb	0	; () banked
  8461  0045B2  6FCC               	movwf	fputc@chr& (0+255),b
  8462  0045B4  6BCD               	clrf	(fputc@chr+1)& (0+255),b
  8463  0045B6  C0D5  F0CE         	movff	fputs@fil,fputc@fil
  8464  0045BA  C0D6  F0CF         	movff	fputs@fil+1,fputc@fil+1
  8465  0045BE  ECE5  F027         	call	_fputc	;wreg free
  8466  0045C2  29CC               	incf	?_fputc& (0+255),w,b
  8467  0045C4  E106               	bnz	l11185
  8468  0045C6  29CD               	incf	(?_fputc+1)& (0+255),w,b
  8469  0045C8  A4D8               	btfss	status,2,c
  8470  0045CA  D003               	goto	l11185
  8471                           
  8472                           ; BSR set to: 0
  8473  0045CC  69D3               	setf	?_fputs& (0+255),b
  8474  0045CE  69D4               	setf	(?_fputs+1)& (0+255),b
  8475  0045D0  0012               	return	
  8476  0045D2                     l11185:
  8477                           
  8478                           ; BSR set to: 0
  8479  0045D2  4BD3               	infsnz	fputs@str& (0+255),f,b
  8480  0045D4  2BD4               	incf	(fputs@str+1)& (0+255),f,b
  8481  0045D6  4BD7               	infsnz	fputs@n& (0+255),f,b
  8482  0045D8  2BD8               	incf	(fputs@n+1)& (0+255),f,b
  8483  0045DA                     l11187:
  8484                           
  8485                           ; BSR set to: 0
  8486  0045DA  C0D3  FFF6         	movff	fputs@str,tblptrl
  8487  0045DE  C0D4  FFF7         	movff	fputs@str+1,tblptrh
  8488  0045E2  6AF8               	clrf	tblptru,c
  8489  0045E4  0E07               	movlw	(high __ramtop+-1)
  8490  0045E6  64F7               	cpfsgt	tblptrh,c
  8491  0045E8  D003               	bra	u13377
  8492  0045EA  0008               	tblrd		*
  8493  0045EC  50F5               	movf	tablat,w,c
  8494  0045EE  D005               	bra	u13370
  8495  0045F0                     u13377:
  8496  0045F0  CFF6 FFE1          	movff	tblptrl,fsr1l
  8497  0045F4  CFF7 FFE2          	movff	tblptrh,fsr1h
  8498  0045F8  50E7               	movf	indf1,w,c
  8499  0045FA                     u13370:
  8500  0045FA  0900               	iorlw	0
  8501  0045FC  A4D8               	btfss	status,2,c
  8502  0045FE  D7C6               	goto	l11181
  8503                           
  8504                           ;tff.c: 1806: };tff.c: 1807: return n;
  8505  004600  C0D7  F0D3         	movff	fputs@n,?_fputs
  8506  004604  C0D8  F0D4         	movff	fputs@n+1,?_fputs+1
  8507  004608  0012               	return		;funcret
  8508  00460A                     __end_of_fputs:
  8509                           	callstack 0
  8510                           
  8511 ;; *************** function _fputc *****************
  8512 ;; Defined at:
  8513 ;;		line 1769 in file "bibliotecas/tff.c"
  8514 ;; Parameters:    Size  Location     Type
  8515 ;;  chr             2  108[BANK0 ] int 
  8516 ;;  fil             2  110[BANK0 ] PTR struct _FIL
  8517 ;;		 -> fil(28), 
  8518 ;; Auto vars:     Size  Location     Type
  8519 ;;  bw              2  113[BANK0 ] unsigned int 
  8520 ;;  c               1  112[BANK0 ] unsigned char 
  8521 ;; Return value:  Size  Location     Type
  8522 ;;                  2  108[BANK0 ] int 
  8523 ;; Registers used:
  8524 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8525 ;; Tracked objects:
  8526 ;;		On entry : 3F/0
  8527 ;;		On exit  : 3F/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8530 ;;      Params:         0       4       0       0       0       0       0       0       0
  8531 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8532 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8533 ;;      Totals:         0       7       0       0       0       0       0       0       0
  8534 ;;Total ram usage:        7 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; Hardware stack levels required when called:   12
  8537 ;; This function calls:
  8538 ;;		_f_write
  8539 ;; This function is called by:
  8540 ;;		_fputs
  8541 ;;		_fprintf
  8542 ;; This function uses a non-reentrant model
  8543 ;;
  8544                           
  8545                           	psect	text48
  8546  004FCA                     __ptext48:
  8547                           	callstack 0
  8548  004FCA                     _fputc:
  8549                           	callstack 13
  8550                           
  8551                           ; BSR set to: 0
  8552                           ;tff.c: 1774: UINT bw;;tff.c: 1775: char c;;tff.c: 1781: if (!fil) {
  8553                           
  8554                           ;incstack = 0
  8555  004FCA  51CE               	movf	fputc@fil& (0+255),w,b
  8556  004FCC  11CF               	iorwf	(fputc@fil+1)& (0+255),w,b
  8557  004FCE  A4D8               	btfss	status,2,c
  8558  004FD0  D005               	goto	l1106
  8559  004FD2                     u12620:
  8560                           
  8561                           ; BSR set to: 0
  8562                           ;tff.c: 1783: return chr;
  8563  004FD2  C0CC  F0CC         	movff	fputc@chr,?_fputc
  8564  004FD6  C0CD  F0CD         	movff	fputc@chr+1,?_fputc+1
  8565  004FDA  0012               	return	
  8566  004FDC                     l1106:
  8567                           
  8568                           ; BSR set to: 0
  8569                           ;tff.c: 1784: };tff.c: 1785: c = (char)chr;
  8570  004FDC  C0CC  F0D0         	movff	fputc@chr,fputc@c
  8571                           
  8572                           ; BSR set to: 0
  8573                           ;tff.c: 1786: f_write(fil, &c, 1, &bw);
  8574  004FE0  C0CE  F0AE         	movff	fputc@fil,f_write@fp
  8575  004FE4  C0CF  F0AF         	movff	fputc@fil+1,f_write@fp+1
  8576  004FE8  0ED0               	movlw	low fputc@c
  8577  004FEA  6FB0               	movwf	f_write@buff& (0+255),b
  8578  004FEC  0E00               	movlw	0
  8579  004FEE  6FB2               	movwf	(f_write@btw+1)& (0+255),b
  8580  004FF0  0E01               	movlw	1
  8581  004FF2  6FB1               	movwf	f_write@btw& (0+255),b
  8582  004FF4  0ED1               	movlw	low fputc@bw
  8583  004FF6  6FB3               	movwf	f_write@bw& (0+255),b
  8584  004FF8  EC09  F000         	call	_f_write	;wreg free
  8585                           
  8586                           ; BSR set to: 0
  8587                           ;tff.c: 1787: return bw ? chr : -1;
  8588  004FFC  51D1               	movf	fputc@bw& (0+255),w,b
  8589  004FFE  11D2               	iorwf	(fputc@bw+1)& (0+255),w,b
  8590  005000  A4D8               	btfss	status,2,c
  8591  005002  D7E7               	goto	u12620
  8592                           
  8593                           ; BSR set to: 0
  8594  005004  69CC               	setf	?_fputc& (0+255),b
  8595  005006  69CD               	setf	(?_fputc+1)& (0+255),b
  8596                           
  8597                           ; BSR set to: 0
  8598  005008  0012               	return		;funcret
  8599  00500A                     __end_of_fputc:
  8600                           	callstack 0
  8601                           
  8602 ;; *************** function _f_write *****************
  8603 ;; Defined at:
  8604 ;;		line 999 in file "bibliotecas/tff.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;  fp              2   78[BANK0 ] PTR struct _FIL
  8607 ;;		 -> fil(28), 
  8608 ;;  buff            1   80[BANK0 ] PTR const void 
  8609 ;;		 -> fputc@c(1), 
  8610 ;;  btw             2   81[BANK0 ] unsigned int 
  8611 ;;  bw              1   83[BANK0 ] PTR unsigned int 
  8612 ;;		 -> fputc@bw(2), 
  8613 ;; Auto vars:     Size  Location     Type
  8614 ;;  sect            4   98[BANK0 ] unsigned long 
  8615 ;;  wcnt            2  106[BANK0 ] unsigned int 
  8616 ;;  clust           2  104[BANK0 ] unsigned short 
  8617 ;;  cc              2  102[BANK0 ] unsigned int 
  8618 ;;  wbuff           1   97[BANK0 ] PTR const unsigned char 
  8619 ;;		 -> fputc@c(1), 
  8620 ;;  res             1   96[BANK0 ] enum E155
  8621 ;; Return value:  Size  Location     Type
  8622 ;;                  1    wreg      enum E155
  8623 ;; Registers used:
  8624 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8625 ;; Tracked objects:
  8626 ;;		On entry : 3F/0
  8627 ;;		On exit  : 3F/0
  8628 ;;		Unchanged: 0/0
  8629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8630 ;;      Params:         0       6       0       0       0       0       0       0       0
  8631 ;;      Locals:         0      12       0       0       0       0       0       0       0
  8632 ;;      Temps:          0      12       0       0       0       0       0       0       0
  8633 ;;      Totals:         0      30       0       0       0       0       0       0       0
  8634 ;;Total ram usage:       30 bytes
  8635 ;; Hardware stack levels used:    1
  8636 ;; Hardware stack levels required when called:   11
  8637 ;; This function calls:
  8638 ;;		_clust2sect
  8639 ;;		_create_chain
  8640 ;;		_disk_write
  8641 ;;		_memcpy
  8642 ;;		_move_window
  8643 ;;		_validate
  8644 ;; This function is called by:
  8645 ;;		_fputc
  8646 ;; This function uses a non-reentrant model
  8647 ;;
  8648                           
  8649                           	psect	text49
  8650  000012                     __ptext49:
  8651                           	callstack 0
  8652  000012                     _f_write:
  8653                           	callstack 13
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;tff.c: 1006: FRESULT res;;tff.c: 1007: DWORD sect;;tff.c: 1008: UINT wcnt, cc;;tff.c: 1
      +                          009: CLUST clust;;tff.c: 1010: const BYTE *wbuff = buff;
  8657                           
  8658                           ; BSR set to: 0
  8659                           ;incstack = 0
  8660  000012  C0B0  F0C1         	movff	f_write@buff,f_write@wbuff
  8661                           
  8662                           ; BSR set to: 0
  8663                           ;tff.c: 1013: *bw = 0;
  8664  000016  51B3               	movf	f_write@bw& (0+255),w,b
  8665  000018  6ED9               	movwf	fsr2l,c
  8666  00001A  6ADA               	clrf	fsr2h,c
  8667  00001C  0E00               	movlw	0
  8668  00001E  6EDE               	movwf	postinc2,c
  8669  000020  0E00               	movlw	0
  8670  000022  6EDD               	movwf	postdec2,c
  8671                           
  8672                           ; BSR set to: 0
  8673                           ;tff.c: 1014: res = validate(fp->fs, fp->id);
  8674  000024  EE20 F004          	lfsr	2,4
  8675  000028  51AE               	movf	f_write@fp& (0+255),w,b
  8676  00002A  26D9               	addwf	fsr2l,f,c
  8677  00002C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8678  00002E  22DA               	addwfc	fsr2h,f,c
  8679  000030  CFDE F01F          	movff	postinc2,validate@fs
  8680  000034  CFDD F020          	movff	postdec2,validate@fs+1
  8681  000038  C0AE  FFD9         	movff	f_write@fp,fsr2l
  8682  00003C  C0AF  FFDA         	movff	f_write@fp+1,fsr2h
  8683  000040  CFDE F021          	movff	postinc2,validate@id
  8684  000044  CFDD F022          	movff	postdec2,validate@id+1
  8685  000048  ECD6  F026         	call	_validate	;wreg free
  8686  00004C  0100               	movlb	0	; () banked
  8687  00004E  6FC0               	movwf	f_write@res& (0+255),b
  8688                           
  8689                           ; BSR set to: 0
  8690                           ;tff.c: 1015: if (res != FR_OK) return res;
  8691  000050  51C0               	movf	f_write@res& (0+255),w,b
  8692  000052  A4D8               	btfss	status,2,c
  8693  000054  0012               	return	
  8694                           
  8695                           ; BSR set to: 0
  8696                           ;tff.c: 1016: if (fp->flag & 0x80) return FR_RW_ERROR;
  8697  000056  EE20 F002          	lfsr	2,2
  8698  00005A  51AE               	movf	f_write@fp& (0+255),w,b
  8699  00005C  26D9               	addwf	fsr2l,f,c
  8700  00005E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8701  000060  22DA               	addwfc	fsr2h,f,c
  8702  000062  BEDF               	btfsc	indf2,7,c
  8703  000064  0012               	return	
  8704                           
  8705                           ; BSR set to: 0
  8706                           ;tff.c: 1017: if (!(fp->flag & 0x02)) return FR_DENIED;
  8707  000066  EE20 F002          	lfsr	2,2
  8708  00006A  51AE               	movf	f_write@fp& (0+255),w,b
  8709  00006C  26D9               	addwf	fsr2l,f,c
  8710  00006E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8711  000070  22DA               	addwfc	fsr2h,f,c
  8712  000072  A2DF               	btfss	indf2,1,c
  8713  000074  0012               	return	
  8714                           
  8715                           ; BSR set to: 0
  8716                           ;tff.c: 1018: if (fp->fsize + btw < fp->fsize) return FR_OK;
  8717  000076  EE20 F00A          	lfsr	2,10
  8718  00007A  51AE               	movf	f_write@fp& (0+255),w,b
  8719  00007C  26D9               	addwf	fsr2l,f,c
  8720  00007E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8721  000080  22DA               	addwfc	fsr2h,f,c
  8722  000082  EE10 F00A          	lfsr	1,10
  8723  000086  51AE               	movf	f_write@fp& (0+255),w,b
  8724  000088  26E1               	addwf	fsr1l,f,c
  8725  00008A  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8726  00008C  22E2               	addwfc	fsr1h,f,c
  8727  00008E  CFE6 F0B8          	movff	postinc1,??_f_write+4
  8728  000092  CFE6 F0B9          	movff	postinc1,??_f_write+5
  8729  000096  CFE6 F0BA          	movff	postinc1,??_f_write+6
  8730  00009A  CFE6 F0BB          	movff	postinc1,??_f_write+7
  8731  00009E  51B1               	movf	f_write@btw& (0+255),w,b
  8732  0000A0  25B8               	addwf	(??_f_write+4)& (0+255),w,b
  8733  0000A2  6FBC               	movwf	(??_f_write+8)& (0+255),b
  8734  0000A4  51B2               	movf	(f_write@btw+1)& (0+255),w,b
  8735  0000A6  21B9               	addwfc	(??_f_write+5)& (0+255),w,b
  8736  0000A8  6FBD               	movwf	(??_f_write+9)& (0+255),b
  8737  0000AA  0E00               	movlw	0
  8738  0000AC  21BA               	addwfc	(??_f_write+6)& (0+255),w,b
  8739  0000AE  6FBE               	movwf	(??_f_write+10)& (0+255),b
  8740  0000B0  0E00               	movlw	0
  8741  0000B2  21BB               	addwfc	(??_f_write+7)& (0+255),w,b
  8742  0000B4  6FBF               	movwf	(??_f_write+11)& (0+255),b
  8743  0000B6  50DE               	movf	postinc2,w,c
  8744  0000B8  5DBC               	subwf	(??_f_write+8)& (0+255),w,b
  8745  0000BA  50DE               	movf	postinc2,w,c
  8746  0000BC  59BD               	subwfb	(??_f_write+9)& (0+255),w,b
  8747  0000BE  50DE               	movf	postinc2,w,c
  8748  0000C0  59BE               	subwfb	(??_f_write+10)& (0+255),w,b
  8749  0000C2  50DE               	movf	postinc2,w,c
  8750  0000C4  59BF               	subwfb	(??_f_write+11)& (0+255),w,b
  8751  0000C6  A0D8               	btfss	status,0,c
  8752  0000C8  0012               	return	
  8753  0000CA  D228               	goto	l10605
  8754  0000CC                     l10529:
  8755                           
  8756                           ; BSR set to: 0
  8757                           ;tff.c: 1022: if ((fp->fptr % 512U) == 0) {
  8758  0000CC  EE20 F006          	lfsr	2,6
  8759  0000D0  51AE               	movf	f_write@fp& (0+255),w,b
  8760  0000D2  26D9               	addwf	fsr2l,f,c
  8761  0000D4  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8762  0000D6  22DA               	addwfc	fsr2h,f,c
  8763  0000D8  0EFF               	movlw	255
  8764  0000DA  14DE               	andwf	postinc2,w,c
  8765  0000DC  6FB4               	movwf	??_f_write& (0+255),b
  8766  0000DE  0E01               	movlw	1
  8767  0000E0  14DE               	andwf	postinc2,w,c
  8768  0000E2  6FB5               	movwf	(??_f_write+1)& (0+255),b
  8769  0000E4  0E00               	movlw	0
  8770  0000E6  14DE               	andwf	postinc2,w,c
  8771  0000E8  6FB6               	movwf	(??_f_write+2)& (0+255),b
  8772  0000EA  0E00               	movlw	0
  8773  0000EC  14DE               	andwf	postinc2,w,c
  8774  0000EE  6FB7               	movwf	(??_f_write+3)& (0+255),b
  8775  0000F0  51B4               	movf	??_f_write& (0+255),w,b
  8776  0000F2  11B5               	iorwf	(??_f_write+1)& (0+255),w,b
  8777  0000F4  11B6               	iorwf	(??_f_write+2)& (0+255),w,b
  8778  0000F6  11B7               	iorwf	(??_f_write+3)& (0+255),w,b
  8779  0000F8  A4D8               	btfss	status,2,c
  8780  0000FA  D15B               	goto	l10581
  8781                           
  8782                           ; BSR set to: 0
  8783                           ;tff.c: 1023: if (fp->csect >= fp->fs->csize) {
  8784  0000FC  EE20 F004          	lfsr	2,4
  8785  000100  51AE               	movf	f_write@fp& (0+255),w,b
  8786  000102  26D9               	addwf	fsr2l,f,c
  8787  000104  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8788  000106  22DA               	addwfc	fsr2h,f,c
  8789  000108  EE10 F01D          	lfsr	1,29
  8790  00010C  50DE               	movf	postinc2,w,c
  8791  00010E  26E1               	addwf	fsr1l,f,c
  8792  000110  50DD               	movf	postdec2,w,c
  8793  000112  22E2               	addwfc	fsr1h,f,c
  8794  000114  EE20 F003          	lfsr	2,3
  8795  000118  51AE               	movf	f_write@fp& (0+255),w,b
  8796  00011A  26D9               	addwf	fsr2l,f,c
  8797  00011C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8798  00011E  22DA               	addwfc	fsr2h,f,c
  8799  000120  50E6               	movf	postinc1,w,c
  8800  000122  5CDE               	subwf	postinc2,w,c
  8801  000124  A0D8               	btfss	status,0,c
  8802  000126  D06B               	goto	l10553
  8803                           
  8804                           ; BSR set to: 0
  8805                           ;tff.c: 1024: if (fp->fptr == 0) {
  8806  000128  EE20 F006          	lfsr	2,6
  8807  00012C  51AE               	movf	f_write@fp& (0+255),w,b
  8808  00012E  26D9               	addwf	fsr2l,f,c
  8809  000130  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8810  000132  22DA               	addwfc	fsr2h,f,c
  8811  000134  50DE               	movf	postinc2,w,c
  8812  000136  10DE               	iorwf	postinc2,w,c
  8813  000138  10DE               	iorwf	postinc2,w,c
  8814  00013A  10DE               	iorwf	postinc2,w,c
  8815  00013C  A4D8               	btfss	status,2,c
  8816  00013E  D023               	goto	l10541
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;tff.c: 1025: clust = fp->org_clust;
  8820  000140  EE20 F00E          	lfsr	2,14
  8821  000144  51AE               	movf	f_write@fp& (0+255),w,b
  8822  000146  26D9               	addwf	fsr2l,f,c
  8823  000148  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8824  00014A  22DA               	addwfc	fsr2h,f,c
  8825  00014C  CFDE F0C8          	movff	postinc2,f_write@clust
  8826  000150  CFDD F0C9          	movff	postdec2,f_write@clust+1
  8827                           
  8828                           ; BSR set to: 0
  8829                           ;tff.c: 1026: if (clust == 0)
  8830  000154  51C8               	movf	f_write@clust& (0+255),w,b
  8831  000156  11C9               	iorwf	(f_write@clust+1)& (0+255),w,b
  8832  000158  A4D8               	btfss	status,2,c
  8833  00015A  D025               	goto	l10543
  8834                           
  8835                           ; BSR set to: 0
  8836                           ;tff.c: 1027: fp->org_clust = clust = create_chain(0);
  8837  00015C  0E00               	movlw	0
  8838  00015E  6FA1               	movwf	(create_chain@clust+1)& (0+255),b
  8839  000160  0E00               	movlw	0
  8840  000162  6FA0               	movwf	create_chain@clust& (0+255),b
  8841  000164  EC23  F018         	call	_create_chain	;wreg free
  8842  000168  C0A0  F0C8         	movff	?_create_chain,f_write@clust
  8843  00016C  C0A1  F0C9         	movff	?_create_chain+1,f_write@clust+1
  8844  000170  EE20 F00E          	lfsr	2,14
  8845  000174  51AE               	movf	f_write@fp& (0+255),w,b
  8846  000176  26D9               	addwf	fsr2l,f,c
  8847  000178  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8848  00017A  22DA               	addwfc	fsr2h,f,c
  8849  00017C  C0C8  FFDE         	movff	f_write@clust,postinc2
  8850  000180  C0C9  FFDD         	movff	f_write@clust+1,postdec2
  8851  000184  D010               	goto	l10543
  8852  000186                     l10541:
  8853                           
  8854                           ; BSR set to: 0
  8855                           ;tff.c: 1029: clust = create_chain(fp->curr_clust);
  8856  000186  EE20 F010          	lfsr	2,16
  8857  00018A  51AE               	movf	f_write@fp& (0+255),w,b
  8858  00018C  26D9               	addwf	fsr2l,f,c
  8859  00018E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8860  000190  22DA               	addwfc	fsr2h,f,c
  8861  000192  CFDE F0A0          	movff	postinc2,create_chain@clust
  8862  000196  CFDD F0A1          	movff	postdec2,create_chain@clust+1
  8863  00019A  EC23  F018         	call	_create_chain	;wreg free
  8864  00019E  C0A0  F0C8         	movff	?_create_chain,f_write@clust
  8865  0001A2  C0A1  F0C9         	movff	?_create_chain+1,f_write@clust+1
  8866  0001A6                     l10543:
  8867                           
  8868                           ; BSR set to: 0
  8869                           ;tff.c: 1030: };tff.c: 1031: if (clust == 0) break;
  8870  0001A6  51C8               	movf	f_write@clust& (0+255),w,b
  8871  0001A8  11C9               	iorwf	(f_write@clust+1)& (0+255),w,b
  8872  0001AA  B4D8               	btfsc	status,2,c
  8873  0001AC  D1BB               	goto	u12400
  8874                           
  8875                           ; BSR set to: 0
  8876                           ;tff.c: 1032: if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
  8877  0001AE  05C8               	decf	f_write@clust& (0+255),w,b
  8878  0001B0  11C9               	iorwf	(f_write@clust+1)& (0+255),w,b
  8879  0001B2  B4D8               	btfsc	status,2,c
  8880  0001B4  D1EA               	goto	l10615
  8881                           
  8882                           ; BSR set to: 0
  8883  0001B6  EE20 F004          	lfsr	2,4
  8884  0001BA  51AE               	movf	f_write@fp& (0+255),w,b
  8885  0001BC  26D9               	addwf	fsr2l,f,c
  8886  0001BE  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8887  0001C0  22DA               	addwfc	fsr2h,f,c
  8888  0001C2  EE10 F016          	lfsr	1,22
  8889  0001C6  50DE               	movf	postinc2,w,c
  8890  0001C8  26E1               	addwf	fsr1l,f,c
  8891  0001CA  50DD               	movf	postdec2,w,c
  8892  0001CC  22E2               	addwfc	fsr1h,f,c
  8893  0001CE  50E6               	movf	postinc1,w,c
  8894  0001D0  5DC8               	subwf	f_write@clust& (0+255),w,b
  8895  0001D2  50E6               	movf	postinc1,w,c
  8896  0001D4  59C9               	subwfb	(f_write@clust+1)& (0+255),w,b
  8897  0001D6  B0D8               	btfsc	status,0,c
  8898  0001D8  D1D8               	goto	l10615
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;tff.c: 1033: fp->curr_clust = clust;
  8902  0001DA  EE20 F010          	lfsr	2,16
  8903  0001DE  51AE               	movf	f_write@fp& (0+255),w,b
  8904  0001E0  26D9               	addwf	fsr2l,f,c
  8905  0001E2  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8906  0001E4  22DA               	addwfc	fsr2h,f,c
  8907  0001E6  C0C8  FFDE         	movff	f_write@clust,postinc2
  8908  0001EA  C0C9  FFDD         	movff	f_write@clust+1,postdec2
  8909                           
  8910                           ;tff.c: 1034: fp->csect = 0;
  8911  0001EE  EE20 F003          	lfsr	2,3
  8912  0001F2  51AE               	movf	f_write@fp& (0+255),w,b
  8913  0001F4  26D9               	addwf	fsr2l,f,c
  8914  0001F6  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8915  0001F8  22DA               	addwfc	fsr2h,f,c
  8916  0001FA  0E00               	movlw	0
  8917  0001FC  6EDF               	movwf	indf2,c
  8918  0001FE                     l10553:
  8919                           
  8920                           ; BSR set to: 0
  8921                           ;tff.c: 1035: };tff.c: 1036: sect = clust2sect(fp->curr_clust) + fp->csect;
  8922  0001FE  EE20 F010          	lfsr	2,16
  8923  000202  51AE               	movf	f_write@fp& (0+255),w,b
  8924  000204  26D9               	addwf	fsr2l,f,c
  8925  000206  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8926  000208  22DA               	addwfc	fsr2h,f,c
  8927  00020A  CFDE F025          	movff	postinc2,clust2sect@clust
  8928  00020E  CFDD F026          	movff	postdec2,clust2sect@clust+1
  8929  000212  EC53  F01F         	call	_clust2sect	;wreg free
  8930  000216  EE20 F003          	lfsr	2,3
  8931  00021A  51AE               	movf	f_write@fp& (0+255),w,b
  8932  00021C  26D9               	addwf	fsr2l,f,c
  8933  00021E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8934  000220  22DA               	addwfc	fsr2h,f,c
  8935  000222  50DF               	movf	indf2,w,c
  8936  000224  6FB4               	movwf	??_f_write& (0+255),b
  8937  000226  51B4               	movf	??_f_write& (0+255),w,b
  8938  000228  2425               	addwf	?_clust2sect^0,w,c
  8939  00022A  6FC2               	movwf	f_write@sect& (0+255),b
  8940  00022C  0E00               	movlw	0
  8941  00022E  2026               	addwfc	(?_clust2sect+1)^0,w,c
  8942  000230  6FC3               	movwf	(f_write@sect+1)& (0+255),b
  8943  000232  0E00               	movlw	0
  8944  000234  2027               	addwfc	(?_clust2sect+2)^0,w,c
  8945  000236  6FC4               	movwf	(f_write@sect+2)& (0+255),b
  8946  000238  0E00               	movlw	0
  8947  00023A  2028               	addwfc	(?_clust2sect+3)^0,w,c
  8948  00023C  6FC5               	movwf	(f_write@sect+3)& (0+255),b
  8949                           
  8950                           ; BSR set to: 0
  8951                           ;tff.c: 1037: cc = btw / 512U;
  8952  00023E  C0B1  F0B4         	movff	f_write@btw,??_f_write
  8953  000242  C0B2  F0B5         	movff	f_write@btw+1,??_f_write+1
  8954  000246  0E09               	movlw	9
  8955  000248  6FB6               	movwf	(??_f_write+2)& (0+255),b
  8956  00024A                     u12315:
  8957  00024A  90D8               	bcf	status,0,c
  8958  00024C  33B5               	rrcf	(??_f_write+1)& (0+255),f,b
  8959  00024E  33B4               	rrcf	??_f_write& (0+255),f,b
  8960  000250  2FB6               	decfsz	(??_f_write+2)& (0+255),f,b
  8961  000252  D7FB               	goto	u12315
  8962  000254  C0B4  F0C6         	movff	??_f_write,f_write@cc
  8963  000258  C0B5  F0C7         	movff	??_f_write+1,f_write@cc+1
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;tff.c: 1038: if (cc) {
  8967  00025C  51C6               	movf	f_write@cc& (0+255),w,b
  8968  00025E  11C7               	iorwf	(f_write@cc+1)& (0+255),w,b
  8969  000260  B4D8               	btfsc	status,2,c
  8970  000262  D069               	goto	l10571
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;tff.c: 1039: if (fp->csect + cc > fp->fs->csize)
  8974  000264  EE20 F003          	lfsr	2,3
  8975  000268  51AE               	movf	f_write@fp& (0+255),w,b
  8976  00026A  26D9               	addwf	fsr2l,f,c
  8977  00026C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8978  00026E  22DA               	addwfc	fsr2h,f,c
  8979  000270  50DF               	movf	indf2,w,c
  8980  000272  6FB4               	movwf	??_f_write& (0+255),b
  8981  000274  51B4               	movf	??_f_write& (0+255),w,b
  8982  000276  25C6               	addwf	f_write@cc& (0+255),w,b
  8983  000278  6FB5               	movwf	(??_f_write+1)& (0+255),b
  8984  00027A  0E00               	movlw	0
  8985  00027C  21C7               	addwfc	(f_write@cc+1)& (0+255),w,b
  8986  00027E  6FB6               	movwf	(??_f_write+2)& (0+255),b
  8987  000280  EE20 F004          	lfsr	2,4
  8988  000284  51AE               	movf	f_write@fp& (0+255),w,b
  8989  000286  26D9               	addwf	fsr2l,f,c
  8990  000288  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8991  00028A  22DA               	addwfc	fsr2h,f,c
  8992  00028C  EE10 F01D          	lfsr	1,29
  8993  000290  50DE               	movf	postinc2,w,c
  8994  000292  26E1               	addwf	fsr1l,f,c
  8995  000294  50DD               	movf	postdec2,w,c
  8996  000296  22E2               	addwfc	fsr1h,f,c
  8997  000298  50E7               	movf	indf1,w,c
  8998  00029A  6FB7               	movwf	(??_f_write+3)& (0+255),b
  8999  00029C  6BB8               	clrf	(??_f_write+4)& (0+255),b
  9000  00029E  51B5               	movf	(??_f_write+1)& (0+255),w,b
  9001  0002A0  5DB7               	subwf	(??_f_write+3)& (0+255),w,b
  9002  0002A2  51B6               	movf	(??_f_write+2)& (0+255),w,b
  9003  0002A4  59B8               	subwfb	(??_f_write+4)& (0+255),w,b
  9004  0002A6  B0D8               	btfsc	status,0,c
  9005  0002A8  D01C               	goto	l10563
  9006                           
  9007                           ; BSR set to: 0
  9008                           ;tff.c: 1040: cc = fp->fs->csize - fp->csect;
  9009  0002AA  EE20 F004          	lfsr	2,4
  9010  0002AE  51AE               	movf	f_write@fp& (0+255),w,b
  9011  0002B0  26D9               	addwf	fsr2l,f,c
  9012  0002B2  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9013  0002B4  22DA               	addwfc	fsr2h,f,c
  9014  0002B6  EE10 F01D          	lfsr	1,29
  9015  0002BA  50DE               	movf	postinc2,w,c
  9016  0002BC  26E1               	addwf	fsr1l,f,c
  9017  0002BE  50DD               	movf	postdec2,w,c
  9018  0002C0  22E2               	addwfc	fsr1h,f,c
  9019  0002C2  50E7               	movf	indf1,w,c
  9020  0002C4  6FB4               	movwf	??_f_write& (0+255),b
  9021  0002C6  EE20 F003          	lfsr	2,3
  9022  0002CA  51AE               	movf	f_write@fp& (0+255),w,b
  9023  0002CC  26D9               	addwf	fsr2l,f,c
  9024  0002CE  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9025  0002D0  22DA               	addwfc	fsr2h,f,c
  9026  0002D2  50DF               	movf	indf2,w,c
  9027  0002D4  6FB5               	movwf	(??_f_write+1)& (0+255),b
  9028  0002D6  51B5               	movf	(??_f_write+1)& (0+255),w,b
  9029  0002D8  5DB4               	subwf	??_f_write& (0+255),w,b
  9030  0002DA  6FC6               	movwf	f_write@cc& (0+255),b
  9031  0002DC  6BC7               	clrf	(f_write@cc+1)& (0+255),b
  9032  0002DE  A0D8               	btfss	status,0,c
  9033  0002E0  07C7               	decf	(f_write@cc+1)& (0+255),f,b
  9034  0002E2                     l10563:
  9035                           
  9036                           ; BSR set to: 0
  9037                           ;tff.c: 1041: if (disk_write(0, wbuff, sect, (BYTE)cc) != RES_OK)
  9038  0002E2  C0C1  F068         	movff	f_write@wbuff,disk_write@buff
  9039  0002E6  6B69               	clrf	(disk_write@buff+1)& (0+255),b
  9040  0002E8  C0C2  F06A         	movff	f_write@sect,disk_write@sector
  9041  0002EC  C0C3  F06B         	movff	f_write@sect+1,disk_write@sector+1
  9042  0002F0  C0C4  F06C         	movff	f_write@sect+2,disk_write@sector+2
  9043  0002F4  C0C5  F06D         	movff	f_write@sect+3,disk_write@sector+3
  9044  0002F8  C0C6  F06E         	movff	f_write@cc,disk_write@count
  9045  0002FC  0E00               	movlw	0
  9046  0002FE  EC66  F026         	call	_disk_write
  9047  000302  0900               	iorlw	0
  9048  000304  A4D8               	btfss	status,2,c
  9049  000306  D141               	goto	l10615
  9050                           
  9051                           ; BSR set to: 0
  9052                           ;tff.c: 1043: fp->csect += (BYTE)cc;
  9053  000308  EE20 F003          	lfsr	2,3
  9054  00030C  51AE               	movf	f_write@fp& (0+255),w,b
  9055  00030E  26D9               	addwf	fsr2l,f,c
  9056  000310  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9057  000312  22DA               	addwfc	fsr2h,f,c
  9058  000314  51C6               	movf	f_write@cc& (0+255),w,b
  9059  000316  26DF               	addwf	indf2,f,c
  9060                           
  9061                           ; BSR set to: 0
  9062                           ;tff.c: 1044: wcnt = 512U * cc;
  9063  000318  C0C6  F0B4         	movff	f_write@cc,??_f_write
  9064  00031C  C0C7  F0B5         	movff	f_write@cc+1,??_f_write+1
  9065  000320  0E09               	movlw	9
  9066  000322                     u12355:
  9067  000322  90D8               	bcf	status,0,c
  9068  000324  37B4               	rlcf	??_f_write& (0+255),f,b
  9069  000326  37B5               	rlcf	(??_f_write+1)& (0+255),f,b
  9070  000328  2EE8               	decfsz	wreg,f,c
  9071  00032A  D7FB               	goto	u12355
  9072  00032C  C0B4  F0CA         	movff	??_f_write,f_write@wcnt
  9073  000330  C0B5  F0CB         	movff	??_f_write+1,f_write@wcnt+1
  9074                           
  9075                           ;tff.c: 1045: continue;
  9076  000334  D0D9               	goto	l10597
  9077  000336                     l10571:
  9078                           
  9079                           ; BSR set to: 0
  9080                           ;tff.c: 1046: };tff.c: 1047: if (fp->fptr >= fp->fsize) {
  9081  000336  EE20 F00A          	lfsr	2,10
  9082  00033A  51AE               	movf	f_write@fp& (0+255),w,b
  9083  00033C  26D9               	addwf	fsr2l,f,c
  9084  00033E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9085  000340  22DA               	addwfc	fsr2h,f,c
  9086  000342  EE10 F006          	lfsr	1,6
  9087  000346  51AE               	movf	f_write@fp& (0+255),w,b
  9088  000348  26E1               	addwf	fsr1l,f,c
  9089  00034A  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9090  00034C  22E2               	addwfc	fsr1h,f,c
  9091  00034E  50DE               	movf	postinc2,w,c
  9092  000350  5CE6               	subwf	postinc1,w,c
  9093  000352  50DE               	movf	postinc2,w,c
  9094  000354  58E6               	subwfb	postinc1,w,c
  9095  000356  50DE               	movf	postinc2,w,c
  9096  000358  58E6               	subwfb	postinc1,w,c
  9097  00035A  50DE               	movf	postinc2,w,c
  9098  00035C  58E6               	subwfb	postinc1,w,c
  9099  00035E  A0D8               	btfss	status,0,c
  9100  000360  D021               	goto	l10579
  9101                           
  9102                           ; BSR set to: 0
  9103                           ;tff.c: 1048: if (!move_window(0)) goto fw_error;
  9104  000362  0E00               	movlw	0
  9105  000364  6F73               	movwf	move_window@sector& (0+255),b
  9106  000366  0E00               	movlw	0
  9107  000368  6F74               	movwf	(move_window@sector+1)& (0+255),b
  9108  00036A  0E00               	movlw	0
  9109  00036C  6F75               	movwf	(move_window@sector+2)& (0+255),b
  9110  00036E  0E00               	movlw	0
  9111  000370  6F76               	movwf	(move_window@sector+3)& (0+255),b
  9112  000372  EC4E  F017         	call	_move_window	;wreg free
  9113  000376  0900               	iorlw	0
  9114  000378  B4D8               	btfsc	status,2,c
  9115  00037A  D107               	goto	l10615
  9116                           
  9117                           ; BSR set to: 0
  9118                           ;tff.c: 1049: fp->fs->winsect = sect;
  9119  00037C  EE20 F004          	lfsr	2,4
  9120  000380  51AE               	movf	f_write@fp& (0+255),w,b
  9121  000382  26D9               	addwf	fsr2l,f,c
  9122  000384  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9123  000386  22DA               	addwfc	fsr2h,f,c
  9124  000388  EE10 F004          	lfsr	1,4
  9125  00038C  50DE               	movf	postinc2,w,c
  9126  00038E  26E1               	addwf	fsr1l,f,c
  9127  000390  50DD               	movf	postdec2,w,c
  9128  000392  22E2               	addwfc	fsr1h,f,c
  9129  000394  C0C2  FFE6         	movff	f_write@sect,postinc1
  9130  000398  C0C3  FFE6         	movff	f_write@sect+1,postinc1
  9131  00039C  C0C4  FFE6         	movff	f_write@sect+2,postinc1
  9132  0003A0  C0C5  FFE6         	movff	f_write@sect+3,postinc1
  9133  0003A4                     l10579:
  9134                           
  9135                           ; BSR set to: 0
  9136                           ;tff.c: 1050: };tff.c: 1051: fp->csect++;
  9137  0003A4  EE20 F003          	lfsr	2,3
  9138  0003A8  51AE               	movf	f_write@fp& (0+255),w,b
  9139  0003AA  26D9               	addwf	fsr2l,f,c
  9140  0003AC  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9141  0003AE  22DA               	addwfc	fsr2h,f,c
  9142  0003B0  2ADF               	incf	indf2,f,c
  9143  0003B2                     l10581:
  9144                           
  9145                           ; BSR set to: 0
  9146                           ;tff.c: 1052: };tff.c: 1053: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
  9147  0003B2  EE20 F010          	lfsr	2,16
  9148  0003B6  51AE               	movf	f_write@fp& (0+255),w,b
  9149  0003B8  26D9               	addwf	fsr2l,f,c
  9150  0003BA  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9151  0003BC  22DA               	addwfc	fsr2h,f,c
  9152  0003BE  CFDE F025          	movff	postinc2,clust2sect@clust
  9153  0003C2  CFDD F026          	movff	postdec2,clust2sect@clust+1
  9154  0003C6  EC53  F01F         	call	_clust2sect	;wreg free
  9155  0003CA  EE20 F003          	lfsr	2,3
  9156  0003CE  51AE               	movf	f_write@fp& (0+255),w,b
  9157  0003D0  26D9               	addwf	fsr2l,f,c
  9158  0003D2  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9159  0003D4  22DA               	addwfc	fsr2h,f,c
  9160  0003D6  50DF               	movf	indf2,w,c
  9161  0003D8  6FB4               	movwf	??_f_write& (0+255),b
  9162  0003DA  51B4               	movf	??_f_write& (0+255),w,b
  9163  0003DC  2425               	addwf	?_clust2sect^0,w,c
  9164  0003DE  6FB5               	movwf	(??_f_write+1)& (0+255),b
  9165  0003E0  0E00               	movlw	0
  9166  0003E2  2026               	addwfc	(?_clust2sect+1)^0,w,c
  9167  0003E4  6FB6               	movwf	(??_f_write+2)& (0+255),b
  9168  0003E6  0E00               	movlw	0
  9169  0003E8  2027               	addwfc	(?_clust2sect+2)^0,w,c
  9170  0003EA  6FB7               	movwf	(??_f_write+3)& (0+255),b
  9171  0003EC  0E00               	movlw	0
  9172  0003EE  2028               	addwfc	(?_clust2sect+3)^0,w,c
  9173  0003F0  6FB8               	movwf	(??_f_write+4)& (0+255),b
  9174  0003F2  0EFF               	movlw	255
  9175  0003F4  25B5               	addwf	(??_f_write+1)& (0+255),w,b
  9176  0003F6  6FC2               	movwf	f_write@sect& (0+255),b
  9177  0003F8  0EFF               	movlw	255
  9178  0003FA  21B6               	addwfc	(??_f_write+2)& (0+255),w,b
  9179  0003FC  6FC3               	movwf	(f_write@sect+1)& (0+255),b
  9180  0003FE  0EFF               	movlw	255
  9181  000400  21B7               	addwfc	(??_f_write+3)& (0+255),w,b
  9182  000402  6FC4               	movwf	(f_write@sect+2)& (0+255),b
  9183  000404  0EFF               	movlw	255
  9184  000406  21B8               	addwfc	(??_f_write+4)& (0+255),w,b
  9185  000408  6FC5               	movwf	(f_write@sect+3)& (0+255),b
  9186                           
  9187                           ; BSR set to: 0
  9188                           ;tff.c: 1054: if (!move_window(sect)) goto fw_error;
  9189  00040A  C0C2  F073         	movff	f_write@sect,move_window@sector
  9190  00040E  C0C3  F074         	movff	f_write@sect+1,move_window@sector+1
  9191  000412  C0C4  F075         	movff	f_write@sect+2,move_window@sector+2
  9192  000416  C0C5  F076         	movff	f_write@sect+3,move_window@sector+3
  9193  00041A  EC4E  F017         	call	_move_window	;wreg free
  9194  00041E  0900               	iorlw	0
  9195  000420  B4D8               	btfsc	status,2,c
  9196  000422  D0B3               	goto	l10615
  9197                           
  9198                           ; BSR set to: 0
  9199                           ;tff.c: 1055: wcnt = 512U - (fp->fptr % 512U);
  9200  000424  0EFF               	movlw	255
  9201  000426  6FB4               	movwf	??_f_write& (0+255),b
  9202  000428  0E01               	movlw	1
  9203  00042A  6FB5               	movwf	(??_f_write+1)& (0+255),b
  9204  00042C  EE20 F006          	lfsr	2,6
  9205  000430  51AE               	movf	f_write@fp& (0+255),w,b
  9206  000432  26D9               	addwf	fsr2l,f,c
  9207  000434  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9208  000436  22DA               	addwfc	fsr2h,f,c
  9209  000438  CFDE F0B6          	movff	postinc2,??_f_write+2
  9210  00043C  CFDD F0B7          	movff	postdec2,??_f_write+3
  9211  000440  51B4               	movf	??_f_write& (0+255),w,b
  9212  000442  17B6               	andwf	(??_f_write+2)& (0+255),f,b
  9213  000444  51B5               	movf	(??_f_write+1)& (0+255),w,b
  9214  000446  17B7               	andwf	(??_f_write+3)& (0+255),f,b
  9215  000448  51B6               	movf	(??_f_write+2)& (0+255),w,b
  9216  00044A  0800               	sublw	0
  9217  00044C  6FCA               	movwf	f_write@wcnt& (0+255),b
  9218  00044E  51B7               	movf	(??_f_write+3)& (0+255),w,b
  9219  000450  A0D8               	btfss	status,0,c
  9220  000452  2AE8               	incf	wreg,f,c
  9221  000454  0802               	sublw	2
  9222  000456  6FCB               	movwf	(f_write@wcnt+1)& (0+255),b
  9223                           
  9224                           ; BSR set to: 0
  9225                           ;tff.c: 1056: if (wcnt > btw) wcnt = btw;
  9226  000458  51CA               	movf	f_write@wcnt& (0+255),w,b
  9227  00045A  5DB1               	subwf	f_write@btw& (0+255),w,b
  9228  00045C  51CB               	movf	(f_write@wcnt+1)& (0+255),w,b
  9229  00045E  59B2               	subwfb	(f_write@btw+1)& (0+255),w,b
  9230  000460  B0D8               	btfsc	status,0,c
  9231  000462  D004               	goto	l10593
  9232                           
  9233                           ; BSR set to: 0
  9234  000464  C0B1  F0CA         	movff	f_write@btw,f_write@wcnt
  9235  000468  C0B2  F0CB         	movff	f_write@btw+1,f_write@wcnt+1
  9236  00046C                     l10593:
  9237                           
  9238                           ; BSR set to: 0
  9239                           ;tff.c: 1057: memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
  9240  00046C  0EFF               	movlw	255
  9241  00046E  6FB4               	movwf	??_f_write& (0+255),b
  9242  000470  0E01               	movlw	1
  9243  000472  6FB5               	movwf	(??_f_write+1)& (0+255),b
  9244  000474  EE20 F006          	lfsr	2,6
  9245  000478  51AE               	movf	f_write@fp& (0+255),w,b
  9246  00047A  26D9               	addwf	fsr2l,f,c
  9247  00047C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9248  00047E  22DA               	addwfc	fsr2h,f,c
  9249  000480  CFDE F0B6          	movff	postinc2,??_f_write+2
  9250  000484  CFDD F0B7          	movff	postdec2,??_f_write+3
  9251  000488  51B4               	movf	??_f_write& (0+255),w,b
  9252  00048A  17B6               	andwf	(??_f_write+2)& (0+255),f,b
  9253  00048C  51B5               	movf	(??_f_write+1)& (0+255),w,b
  9254  00048E  17B7               	andwf	(??_f_write+3)& (0+255),f,b
  9255  000490  EE20 F004          	lfsr	2,4
  9256  000494  51AE               	movf	f_write@fp& (0+255),w,b
  9257  000496  26D9               	addwf	fsr2l,f,c
  9258  000498  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9259  00049A  22DA               	addwfc	fsr2h,f,c
  9260  00049C  CFDE F0B8          	movff	postinc2,??_f_write+4
  9261  0004A0  CFDD F0B9          	movff	postdec2,??_f_write+5
  9262  0004A4  51B6               	movf	(??_f_write+2)& (0+255),w,b
  9263  0004A6  27B8               	addwf	(??_f_write+4)& (0+255),f,b
  9264  0004A8  51B7               	movf	(??_f_write+3)& (0+255),w,b
  9265  0004AA  23B9               	addwfc	(??_f_write+5)& (0+255),f,b
  9266  0004AC  0E20               	movlw	32
  9267  0004AE  25B8               	addwf	(??_f_write+4)& (0+255),w,b
  9268  0004B0  6E19               	movwf	memcpy@d1^0,c
  9269  0004B2  0E00               	movlw	0
  9270  0004B4  21B9               	addwfc	(??_f_write+5)& (0+255),w,b
  9271  0004B6  6E1A               	movwf	(memcpy@d1+1)^0,c
  9272  0004B8  C0C1  F01B         	movff	f_write@wbuff,memcpy@s1
  9273  0004BC  6A1C               	clrf	(memcpy@s1+1)^0,c
  9274  0004BE  C0CA  F01D         	movff	f_write@wcnt,memcpy@n
  9275  0004C2  C0CB  F01E         	movff	f_write@wcnt+1,memcpy@n+1
  9276  0004C6  EC61  F027         	call	_memcpy	;wreg free
  9277                           
  9278                           ;tff.c: 1058: fp->fs->winflag = 1;
  9279  0004CA  0100               	movlb	0	; () banked
  9280  0004CC  EE20 F004          	lfsr	2,4
  9281  0004D0  51AE               	movf	f_write@fp& (0+255),w,b
  9282  0004D2  26D9               	addwf	fsr2l,f,c
  9283  0004D4  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9284  0004D6  22DA               	addwfc	fsr2h,f,c
  9285  0004D8  EE10 F01F          	lfsr	1,31
  9286  0004DC  50DE               	movf	postinc2,w,c
  9287  0004DE  26E1               	addwf	fsr1l,f,c
  9288  0004E0  50DD               	movf	postdec2,w,c
  9289  0004E2  22E2               	addwfc	fsr1h,f,c
  9290  0004E4  0E01               	movlw	1
  9291  0004E6  6EE7               	movwf	indf1,c
  9292  0004E8                     l10597:
  9293                           
  9294                           ; BSR set to: 0
  9295  0004E8  51CA               	movf	f_write@wcnt& (0+255),w,b
  9296  0004EA  27C1               	addwf	f_write@wbuff& (0+255),f,b
  9297                           
  9298                           ; BSR set to: 0
  9299  0004EC  EE20 F006          	lfsr	2,6
  9300  0004F0  51AE               	movf	f_write@fp& (0+255),w,b
  9301  0004F2  26D9               	addwf	fsr2l,f,c
  9302  0004F4  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9303  0004F6  22DA               	addwfc	fsr2h,f,c
  9304  0004F8  51CA               	movf	f_write@wcnt& (0+255),w,b
  9305  0004FA  26DE               	addwf	postinc2,f,c
  9306  0004FC  51CB               	movf	(f_write@wcnt+1)& (0+255),w,b
  9307  0004FE  22DE               	addwfc	postinc2,f,c
  9308  000500  0E00               	movlw	0
  9309  000502  22DE               	addwfc	postinc2,f,c
  9310  000504  22DE               	addwfc	postinc2,f,c
  9311                           
  9312                           ; BSR set to: 0
  9313  000506  51B3               	movf	f_write@bw& (0+255),w,b
  9314  000508  6ED9               	movwf	fsr2l,c
  9315  00050A  6ADA               	clrf	fsr2h,c
  9316  00050C  51CA               	movf	f_write@wcnt& (0+255),w,b
  9317  00050E  26DE               	addwf	postinc2,f,c
  9318  000510  51CB               	movf	(f_write@wcnt+1)& (0+255),w,b
  9319  000512  22DD               	addwfc	postdec2,f,c
  9320                           
  9321                           ; BSR set to: 0
  9322  000514  51CA               	movf	f_write@wcnt& (0+255),w,b
  9323  000516  5FB1               	subwf	f_write@btw& (0+255),f,b
  9324  000518  51CB               	movf	(f_write@wcnt+1)& (0+255),w,b
  9325  00051A  5BB2               	subwfb	(f_write@btw+1)& (0+255),f,b
  9326  00051C                     l10605:
  9327                           
  9328                           ; BSR set to: 0
  9329  00051C  51B1               	movf	f_write@btw& (0+255),w,b
  9330  00051E  11B2               	iorwf	(f_write@btw+1)& (0+255),w,b
  9331  000520  A4D8               	btfss	status,2,c
  9332  000522  D5D4               	goto	l10529
  9333  000524                     u12400:
  9334                           
  9335                           ; BSR set to: 0
  9336                           ;tff.c: 1059: };tff.c: 1061: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  9337  000524  EE20 F006          	lfsr	2,6
  9338  000528  51AE               	movf	f_write@fp& (0+255),w,b
  9339  00052A  26D9               	addwf	fsr2l,f,c
  9340  00052C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9341  00052E  22DA               	addwfc	fsr2h,f,c
  9342  000530  EE10 F00A          	lfsr	1,10
  9343  000534  51AE               	movf	f_write@fp& (0+255),w,b
  9344  000536  26E1               	addwf	fsr1l,f,c
  9345  000538  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9346  00053A  22E2               	addwfc	fsr1h,f,c
  9347  00053C  50DE               	movf	postinc2,w,c
  9348  00053E  5CE6               	subwf	postinc1,w,c
  9349  000540  50DE               	movf	postinc2,w,c
  9350  000542  58E6               	subwfb	postinc1,w,c
  9351  000544  50DE               	movf	postinc2,w,c
  9352  000546  58E6               	subwfb	postinc1,w,c
  9353  000548  50DE               	movf	postinc2,w,c
  9354  00054A  58E6               	subwfb	postinc1,w,c
  9355  00054C  B0D8               	btfsc	status,0,c
  9356  00054E  D014               	goto	l10611
  9357                           
  9358                           ; BSR set to: 0
  9359  000550  EE20 F006          	lfsr	2,6
  9360  000554  51AE               	movf	f_write@fp& (0+255),w,b
  9361  000556  26D9               	addwf	fsr2l,f,c
  9362  000558  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9363  00055A  22DA               	addwfc	fsr2h,f,c
  9364  00055C  EE10 F00A          	lfsr	1,10
  9365  000560  51AE               	movf	f_write@fp& (0+255),w,b
  9366  000562  26E1               	addwf	fsr1l,f,c
  9367  000564  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9368  000566  22E2               	addwfc	fsr1h,f,c
  9369  000568  CFDE FFE6          	movff	postinc2,postinc1
  9370  00056C  CFDE FFE6          	movff	postinc2,postinc1
  9371  000570  CFDE FFE6          	movff	postinc2,postinc1
  9372  000574  CFDE FFE6          	movff	postinc2,postinc1
  9373  000578                     l10611:
  9374                           
  9375                           ; BSR set to: 0
  9376                           ;tff.c: 1062: fp->flag |= 0x20;
  9377  000578  EE20 F002          	lfsr	2,2
  9378  00057C  51AE               	movf	f_write@fp& (0+255),w,b
  9379  00057E  26D9               	addwf	fsr2l,f,c
  9380  000580  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9381  000582  22DA               	addwfc	fsr2h,f,c
  9382  000584  0E00               	movlw	0
  9383  000586  8ADB               	bsf	plusw2,5,c
  9384  000588  0012               	return	
  9385  00058A                     l10615:
  9386                           
  9387                           ; BSR set to: 0
  9388                           ;tff.c: 1066: fp->flag |= 0x80;
  9389  00058A  EE20 F002          	lfsr	2,2
  9390  00058E  51AE               	movf	f_write@fp& (0+255),w,b
  9391  000590  26D9               	addwf	fsr2l,f,c
  9392  000592  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9393  000594  22DA               	addwfc	fsr2h,f,c
  9394  000596  0E00               	movlw	0
  9395  000598  8EDB               	bsf	plusw2,7,c
  9396                           
  9397                           ; BSR set to: 0
  9398  00059A  0012               	return		;funcret
  9399  00059C                     __end_of_f_write:
  9400                           	callstack 0
  9401                           
  9402 ;; *************** function ___llmod *****************
  9403 ;; Defined at:
  9404 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\llmod.c"
  9405 ;; Parameters:    Size  Location     Type
  9406 ;;  dividend        4   24[COMRAM] unsigned long 
  9407 ;;  divisor         4   28[COMRAM] unsigned long 
  9408 ;; Auto vars:     Size  Location     Type
  9409 ;;  counter         1   32[COMRAM] unsigned char 
  9410 ;; Return value:  Size  Location     Type
  9411 ;;                  4   24[COMRAM] unsigned long 
  9412 ;; Registers used:
  9413 ;;		wreg, status,2, status,0
  9414 ;; Tracked objects:
  9415 ;;		On entry : 3F/2
  9416 ;;		On exit  : 3F/2
  9417 ;;		Unchanged: 3F/0
  9418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9419 ;;      Params:         8       0       0       0       0       0       0       0       0
  9420 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9421 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9422 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9423 ;;Total ram usage:        9 bytes
  9424 ;; Hardware stack levels used:    1
  9425 ;; Hardware stack levels required when called:    3
  9426 ;; This function calls:
  9427 ;;		Nothing
  9428 ;; This function is called by:
  9429 ;;		_fprintf
  9430 ;; This function uses a non-reentrant model
  9431 ;;
  9432                           
  9433                           	psect	text50
  9434  004954                     __ptext50:
  9435                           	callstack 0
  9436  004954                     ___llmod:
  9437                           	callstack 23
  9438                           
  9439                           ; BSR set to: 2
  9440                           
  9441                           ; BSR set to: 0
  9442                           ;incstack = 0
  9443  004954  501D               	movf	___llmod@divisor^0,w,c
  9444  004956  101E               	iorwf	(___llmod@divisor+1)^0,w,c
  9445  004958  101F               	iorwf	(___llmod@divisor+2)^0,w,c
  9446  00495A  1020               	iorwf	(___llmod@divisor+3)^0,w,c
  9447  00495C  B4D8               	btfsc	status,2,c
  9448  00495E  D024               	goto	l2054
  9449                           
  9450                           ; BSR set to: 2
  9451  004960  0E01               	movlw	1
  9452  004962  6E21               	movwf	___llmod@counter^0,c
  9453  004964  D006               	goto	l11213
  9454  004966                     l11211:
  9455                           
  9456                           ; BSR set to: 2
  9457  004966  90D8               	bcf	status,0,c
  9458  004968  361D               	rlcf	___llmod@divisor^0,f,c
  9459  00496A  361E               	rlcf	(___llmod@divisor+1)^0,f,c
  9460  00496C  361F               	rlcf	(___llmod@divisor+2)^0,f,c
  9461  00496E  3620               	rlcf	(___llmod@divisor+3)^0,f,c
  9462  004970  2A21               	incf	___llmod@counter^0,f,c
  9463  004972                     l11213:
  9464                           
  9465                           ; BSR set to: 2
  9466  004972  AE20               	btfss	(___llmod@divisor+3)^0,7,c
  9467  004974  D7F8               	goto	l11211
  9468  004976                     u13460:
  9469                           
  9470                           ; BSR set to: 2
  9471  004976  501D               	movf	___llmod@divisor^0,w,c
  9472  004978  5C19               	subwf	___llmod@dividend^0,w,c
  9473  00497A  501E               	movf	(___llmod@divisor+1)^0,w,c
  9474  00497C  581A               	subwfb	(___llmod@dividend+1)^0,w,c
  9475  00497E  501F               	movf	(___llmod@divisor+2)^0,w,c
  9476  004980  581B               	subwfb	(___llmod@dividend+2)^0,w,c
  9477  004982  5020               	movf	(___llmod@divisor+3)^0,w,c
  9478  004984  581C               	subwfb	(___llmod@dividend+3)^0,w,c
  9479  004986  A0D8               	btfss	status,0,c
  9480  004988  D008               	goto	l11219
  9481                           
  9482                           ; BSR set to: 2
  9483  00498A  501D               	movf	___llmod@divisor^0,w,c
  9484  00498C  5E19               	subwf	___llmod@dividend^0,f,c
  9485  00498E  501E               	movf	(___llmod@divisor+1)^0,w,c
  9486  004990  5A1A               	subwfb	(___llmod@dividend+1)^0,f,c
  9487  004992  501F               	movf	(___llmod@divisor+2)^0,w,c
  9488  004994  5A1B               	subwfb	(___llmod@dividend+2)^0,f,c
  9489  004996  5020               	movf	(___llmod@divisor+3)^0,w,c
  9490  004998  5A1C               	subwfb	(___llmod@dividend+3)^0,f,c
  9491  00499A                     l11219:
  9492                           
  9493                           ; BSR set to: 2
  9494  00499A  90D8               	bcf	status,0,c
  9495  00499C  3220               	rrcf	(___llmod@divisor+3)^0,f,c
  9496  00499E  321F               	rrcf	(___llmod@divisor+2)^0,f,c
  9497  0049A0  321E               	rrcf	(___llmod@divisor+1)^0,f,c
  9498  0049A2  321D               	rrcf	___llmod@divisor^0,f,c
  9499                           
  9500                           ; BSR set to: 2
  9501  0049A4  2E21               	decfsz	___llmod@counter^0,f,c
  9502  0049A6  D7E7               	goto	u13460
  9503  0049A8                     l2054:
  9504                           
  9505                           ; BSR set to: 2
  9506  0049A8  C019  F019         	movff	___llmod@dividend,?___llmod
  9507  0049AC  C01A  F01A         	movff	___llmod@dividend+1,?___llmod+1
  9508  0049B0  C01B  F01B         	movff	___llmod@dividend+2,?___llmod+2
  9509  0049B4  C01C  F01C         	movff	___llmod@dividend+3,?___llmod+3
  9510                           
  9511                           ; BSR set to: 2
  9512  0049B8  0012               	return		;funcret
  9513  0049BA                     __end_of___llmod:
  9514                           	callstack 0
  9515                           
  9516 ;; *************** function _f_open *****************
  9517 ;; Defined at:
  9518 ;;		line 833 in file "bibliotecas/tff.c"
  9519 ;; Parameters:    Size  Location     Type
  9520 ;;  fp              2   96[BANK0 ] PTR struct _FIL
  9521 ;;		 -> fil(28), 
  9522 ;;  path            2   98[BANK0 ] PTR const unsigned char 
  9523 ;;		 -> STR_22(13), filename(15), 
  9524 ;;  mode            1  100[BANK0 ] unsigned char 
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;  dw              4  119[BANK0 ] unsigned long 
  9527 ;;  rs              2  117[BANK0 ] unsigned short 
  9528 ;;  dj             14  126[BANK0 ] struct _DIR_E
  9529 ;;  fn             12  105[BANK0 ] unsigned char [12]
  9530 ;;  dir             2  124[BANK0 ] PTR unsigned char 
  9531 ;;		 -> NULL(0), fs(544), 
  9532 ;;  res             1  123[BANK0 ] enum E155
  9533 ;; Return value:  Size  Location     Type
  9534 ;;                  1    wreg      enum E3239
  9535 ;; Registers used:
  9536 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9537 ;; Tracked objects:
  9538 ;;		On entry : 3F/0
  9539 ;;		On exit  : 3F/0
  9540 ;;		Unchanged: 0/0
  9541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9542 ;;      Params:         0       5       0       0       0       0       0       0       0
  9543 ;;      Locals:         0      35       0       0       0       0       0       0       0
  9544 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9545 ;;      Totals:         0      44       0       0       0       0       0       0       0
  9546 ;;Total ram usage:       44 bytes
  9547 ;; Hardware stack levels used:    1
  9548 ;; Hardware stack levels required when called:   12
  9549 ;; This function calls:
  9550 ;;		_auto_mount
  9551 ;;		_get_fattime
  9552 ;;		_memcpy
  9553 ;;		_memset
  9554 ;;		_move_window
  9555 ;;		_remove_chain
  9556 ;;		_reserve_direntry
  9557 ;;		_trace_path
  9558 ;; This function is called by:
  9559 ;;		_escrita_sdcard
  9560 ;; This function uses a non-reentrant model
  9561 ;;
  9562                           
  9563                           	psect	text51
  9564  0012EC                     __ptext51:
  9565                           	callstack 0
  9566  0012EC                     _f_open:
  9567                           	callstack 15
  9568                           
  9569                           ; BSR set to: 0
  9570                           ;tff.c: 839: FRESULT res;;tff.c: 840: DIR_E dj;;tff.c: 841: BYTE *dir;;tff.c: 842: char 
      +                          fn[8+3+1];;tff.c: 845: fp->fs = (0);
  9571                           
  9572                           ; BSR set to: 2
  9573                           ;incstack = 0
  9574  0012EC  EE20 F004          	lfsr	2,4
  9575  0012F0  51C0               	movf	f_open@fp& (0+255),w,b
  9576  0012F2  26D9               	addwf	fsr2l,f,c
  9577  0012F4  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9578  0012F6  22DA               	addwfc	fsr2h,f,c
  9579  0012F8  0E00               	movlw	0
  9580  0012FA  6EDE               	movwf	postinc2,c
  9581  0012FC  0E00               	movlw	0
  9582  0012FE  6EDD               	movwf	postdec2,c
  9583                           
  9584                           ; BSR set to: 0
  9585                           ;tff.c: 847: mode &= (0x01|0x02|0x08|0x10|0x04);
  9586  001300  0E1F               	movlw	31
  9587  001302  17C4               	andwf	f_open@mode& (0+255),f,b
  9588                           
  9589                           ; BSR set to: 0
  9590                           ;tff.c: 848: res = auto_mount(&path, (BYTE)(mode & (0x02|0x08|0x10|0x04)));
  9591  001304  0EC2               	movlw	low f_open@path
  9592  001306  6F7B               	movwf	auto_mount@path& (0+255),b
  9593  001308  51C4               	movf	f_open@mode& (0+255),w,b
  9594  00130A  0B1E               	andlw	30
  9595  00130C  6F7C               	movwf	auto_mount@chk_wp& (0+255),b
  9596  00130E  ECCE  F002         	call	_auto_mount	;wreg free
  9597  001312  0100               	movlb	0	; () banked
  9598  001314  6FDB               	movwf	f_open@res& (0+255),b
  9599                           
  9600                           ; BSR set to: 0
  9601                           ;tff.c: 853: if (res != FR_OK) return res;
  9602  001316  51DB               	movf	f_open@res& (0+255),w,b
  9603  001318  B4D8               	btfsc	status,2,c
  9604  00131A  D002               	goto	l11277
  9605  00131C                     u13520:
  9606                           
  9607                           ; BSR set to: 0
  9608  00131C  51DB               	movf	f_open@res& (0+255),w,b
  9609  00131E  0012               	return	
  9610  001320                     l11277:
  9611                           
  9612                           ; BSR set to: 0
  9613                           ;tff.c: 854: res = trace_path(&dj, fn, path, &dir);
  9614  001320  0EDE               	movlw	low f_open@dj
  9615  001322  6FA8               	movwf	trace_path@dj& (0+255),b
  9616  001324  0EC9               	movlw	low f_open@fn
  9617  001326  6FA9               	movwf	trace_path@fn& (0+255),b
  9618  001328  C0C2  F0AA         	movff	f_open@path,trace_path@path
  9619  00132C  C0C3  F0AB         	movff	f_open@path+1,trace_path@path+1
  9620  001330  0EDC               	movlw	low f_open@dir
  9621  001332  6FAC               	movwf	trace_path@dir& (0+255),b
  9622  001334  ECEC  F00D         	call	_trace_path	;wreg free
  9623  001338  6FDB               	movwf	f_open@res& (0+255),b
  9624                           
  9625                           ; BSR set to: 0
  9626                           ;tff.c: 858: if (mode & (0x08|0x10|0x04)) {
  9627  00133A  C0C4  F0C5         	movff	f_open@mode,??_f_open
  9628  00133E  0E1C               	movlw	28
  9629  001340  17C5               	andwf	??_f_open& (0+255),f,b
  9630  001342  B4D8               	btfsc	status,2,c
  9631  001344  D0DD               	goto	l11339
  9632                           
  9633                           ; BSR set to: 0
  9634                           ;tff.c: 859: CLUST rs;;tff.c: 860: DWORD dw;;tff.c: 861: if (res != FR_OK) {
  9635  001346  51DB               	movf	f_open@res& (0+255),w,b
  9636  001348  B4D8               	btfsc	status,2,c
  9637  00134A  D034               	goto	l964
  9638                           
  9639                           ; BSR set to: 0
  9640                           ;tff.c: 862: if (res != FR_NO_FILE) return res;
  9641  00134C  0E02               	movlw	2
  9642  00134E  19DB               	xorwf	f_open@res& (0+255),w,b
  9643  001350  A4D8               	btfss	status,2,c
  9644  001352  D7E4               	goto	u13520
  9645                           
  9646                           ; BSR set to: 0
  9647                           ;tff.c: 863: res = reserve_direntry(&dj, &dir);
  9648  001354  0EDE               	movlw	low f_open@dj
  9649  001356  6FAE               	movwf	reserve_direntry@dj& (0+255),b
  9650  001358  0EDC               	movlw	low f_open@dir
  9651  00135A  6FAF               	movwf	reserve_direntry@dir& (0+255),b
  9652  00135C  EC28  F00F         	call	_reserve_direntry	;wreg free
  9653  001360  6FDB               	movwf	f_open@res& (0+255),b
  9654                           
  9655                           ; BSR set to: 0
  9656                           ;tff.c: 864: if (res != FR_OK) return res;
  9657  001362  51DB               	movf	f_open@res& (0+255),w,b
  9658  001364  A4D8               	btfss	status,2,c
  9659  001366  D7DA               	goto	u13520
  9660                           
  9661                           ; BSR set to: 0
  9662                           ;tff.c: 865: memset(dir, 0, 32);
  9663  001368  C0DC  F019         	movff	f_open@dir,memset@p1
  9664  00136C  C0DD  F01A         	movff	f_open@dir+1,memset@p1+1
  9665  001370  0E00               	movlw	0
  9666  001372  6E1C               	movwf	(memset@c+1)^0,c
  9667  001374  0E00               	movlw	0
  9668  001376  6E1B               	movwf	memset@c^0,c
  9669  001378  0E00               	movlw	0
  9670  00137A  6E1E               	movwf	(memset@n+1)^0,c
  9671  00137C  0E20               	movlw	32
  9672  00137E  6E1D               	movwf	memset@n^0,c
  9673  001380  ECA0  F028         	call	_memset	;wreg free
  9674                           
  9675                           ;tff.c: 866: memcpy(&dir[0], fn, 8+3);
  9676  001384  C0DC  F019         	movff	f_open@dir,memcpy@d1
  9677  001388  C0DD  F01A         	movff	f_open@dir+1,memcpy@d1+1
  9678  00138C  0EC9               	movlw	low f_open@fn
  9679  00138E  6E1B               	movwf	memcpy@s1^0,c
  9680  001390  6A1C               	clrf	(memcpy@s1+1)^0,c
  9681  001392  0E00               	movlw	0
  9682  001394  6E1E               	movwf	(memcpy@n+1)^0,c
  9683  001396  0E0B               	movlw	11
  9684  001398  6E1D               	movwf	memcpy@n^0,c
  9685  00139A  EC61  F027         	call	_memcpy	;wreg free
  9686                           
  9687                           ;tff.c: 867: dir[12] = fn[11];
  9688  00139E  0100               	movlb	0	; () banked
  9689  0013A0  EE20 F00C          	lfsr	2,12
  9690  0013A4  51DC               	movf	f_open@dir& (0+255),w,b
  9691  0013A6  26D9               	addwf	fsr2l,f,c
  9692  0013A8  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9693  0013AA  22DA               	addwfc	fsr2h,f,c
  9694  0013AC  C0D4  FFDF         	movff	f_open@fn+11,indf2
  9695                           
  9696                           ; BSR set to: 0
  9697                           ;tff.c: 868: mode |= 0x08;
  9698  0013B0  87C4               	bsf	f_open@mode& (0+255),3,b
  9699                           
  9700                           ;tff.c: 869: }
  9701  0013B2  D07A               	goto	l11327
  9702  0013B4                     l964:
  9703                           
  9704                           ; BSR set to: 0
  9705                           ;tff.c: 870: else {;tff.c: 871: if (mode & 0x04)
  9706  0013B4  A5C4               	btfss	f_open@mode& (0+255),2,b
  9707  0013B6  D002               	goto	l11307
  9708                           
  9709                           ; BSR set to: 0
  9710                           ;tff.c: 872: return FR_EXIST;
  9711  0013B8  0E07               	movlw	7
  9712  0013BA  0012               	return	
  9713  0013BC                     l11307:
  9714                           
  9715                           ; BSR set to: 0
  9716                           ;tff.c: 873: if (!dir || (dir[11] & (0x01|0x10)))
  9717  0013BC  51DC               	movf	f_open@dir& (0+255),w,b
  9718  0013BE  11DD               	iorwf	(f_open@dir+1)& (0+255),w,b
  9719  0013C0  B4D8               	btfsc	status,2,c
  9720  0013C2  D00C               	goto	u13590
  9721                           
  9722                           ; BSR set to: 0
  9723  0013C4  EE20 F00B          	lfsr	2,11
  9724  0013C8  51DC               	movf	f_open@dir& (0+255),w,b
  9725  0013CA  26D9               	addwf	fsr2l,f,c
  9726  0013CC  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9727  0013CE  22DA               	addwfc	fsr2h,f,c
  9728  0013D0  50DF               	movf	indf2,w,c
  9729  0013D2  6FC5               	movwf	??_f_open& (0+255),b
  9730  0013D4  0E11               	movlw	17
  9731  0013D6  17C5               	andwf	??_f_open& (0+255),f,b
  9732  0013D8  B4D8               	btfsc	status,2,c
  9733  0013DA  D002               	goto	l969
  9734  0013DC                     u13590:
  9735                           
  9736                           ; BSR set to: 0
  9737                           ;tff.c: 874: return FR_DENIED;
  9738  0013DC  0E06               	movlw	6
  9739  0013DE  0012               	return	
  9740  0013E0                     l969:
  9741                           
  9742                           ; BSR set to: 0
  9743                           ;tff.c: 875: if (mode & 0x08) {
  9744  0013E0  A7C4               	btfss	f_open@mode& (0+255),3,b
  9745  0013E2  D062               	goto	l11327
  9746                           
  9747                           ; BSR set to: 0
  9748                           ;tff.c: 880: rs = (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  9749  0013E4  EE20 F01A          	lfsr	2,26
  9750  0013E8  51DC               	movf	f_open@dir& (0+255),w,b
  9751  0013EA  26D9               	addwf	fsr2l,f,c
  9752  0013EC  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9753  0013EE  22DA               	addwfc	fsr2h,f,c
  9754  0013F0  CFDE F0D5          	movff	postinc2,f_open@rs
  9755  0013F4  CFDD F0D6          	movff	postdec2,f_open@rs+1
  9756                           
  9757                           ;tff.c: 882: *(WORD*)(BYTE*)(&dir[26])=(WORD)(0);
  9758  0013F8  EE20 F01A          	lfsr	2,26
  9759  0013FC  51DC               	movf	f_open@dir& (0+255),w,b
  9760  0013FE  26D9               	addwf	fsr2l,f,c
  9761  001400  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9762  001402  22DA               	addwfc	fsr2h,f,c
  9763  001404  0E00               	movlw	0
  9764  001406  6EDE               	movwf	postinc2,c
  9765  001408  0E00               	movlw	0
  9766  00140A  6EDD               	movwf	postdec2,c
  9767                           
  9768                           ;tff.c: 883: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(0);
  9769  00140C  EE20 F01C          	lfsr	2,28
  9770  001410  51DC               	movf	f_open@dir& (0+255),w,b
  9771  001412  26D9               	addwf	fsr2l,f,c
  9772  001414  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9773  001416  22DA               	addwfc	fsr2h,f,c
  9774  001418  6ADE               	clrf	postinc2,c
  9775  00141A  6ADE               	clrf	postinc2,c
  9776  00141C  6ADE               	clrf	postinc2,c
  9777  00141E  6ADD               	clrf	postdec2,c
  9778                           
  9779                           ;tff.c: 884: dj.fs->winflag = 1;
  9780  001420  EE20 F01F          	lfsr	2,31
  9781  001424  51E2               	movf	(f_open@dj+4)& (0+255),w,b
  9782  001426  26D9               	addwf	fsr2l,f,c
  9783  001428  51E3               	movf	(f_open@dj+5)& (0+255),w,b
  9784  00142A  22DA               	addwfc	fsr2h,f,c
  9785  00142C  0E01               	movlw	1
  9786  00142E  6EDF               	movwf	indf2,c
  9787                           
  9788                           ;tff.c: 885: dw = dj.fs->winsect;
  9789  001430  EE20 F004          	lfsr	2,4
  9790  001434  51E2               	movf	(f_open@dj+4)& (0+255),w,b
  9791  001436  26D9               	addwf	fsr2l,f,c
  9792  001438  51E3               	movf	(f_open@dj+5)& (0+255),w,b
  9793  00143A  22DA               	addwfc	fsr2h,f,c
  9794  00143C  CFDE F0D7          	movff	postinc2,f_open@dw
  9795  001440  CFDE F0D8          	movff	postinc2,f_open@dw+1
  9796  001444  CFDE F0D9          	movff	postinc2,f_open@dw+2
  9797  001448  CFDE F0DA          	movff	postinc2,f_open@dw+3
  9798                           
  9799                           ; BSR set to: 0
  9800                           ;tff.c: 886: if (!remove_chain(rs) || !move_window(dw))
  9801  00144C  C0D5  F0A0         	movff	f_open@rs,remove_chain@clust
  9802  001450  C0D6  F0A1         	movff	f_open@rs+1,remove_chain@clust+1
  9803  001454  EC51  F021         	call	_remove_chain	;wreg free
  9804  001458  0900               	iorlw	0
  9805  00145A  B4D8               	btfsc	status,2,c
  9806  00145C  D00D               	goto	u13620
  9807                           
  9808                           ; BSR set to: 0
  9809  00145E  C0D7  F073         	movff	f_open@dw,move_window@sector
  9810  001462  C0D8  F074         	movff	f_open@dw+1,move_window@sector+1
  9811  001466  C0D9  F075         	movff	f_open@dw+2,move_window@sector+2
  9812  00146A  C0DA  F076         	movff	f_open@dw+3,move_window@sector+3
  9813  00146E  EC4E  F017         	call	_move_window	;wreg free
  9814  001472  0900               	iorlw	0
  9815  001474  A4D8               	btfss	status,2,c
  9816  001476  D002               	goto	l11325
  9817  001478                     u13620:
  9818                           
  9819                           ; BSR set to: 0
  9820                           ;tff.c: 887: return FR_RW_ERROR;
  9821  001478  0E08               	movlw	8
  9822  00147A  0012               	return	
  9823  00147C                     l11325:
  9824                           
  9825                           ; BSR set to: 0
  9826                           ;tff.c: 888: dj.fs->last_clust = rs - 1;
  9827  00147C  0EFF               	movlw	255
  9828  00147E  6FC5               	movwf	??_f_open& (0+255),b
  9829  001480  0EFF               	movlw	255
  9830  001482  6FC6               	movwf	(??_f_open+1)& (0+255),b
  9831  001484  C0D5  F0C7         	movff	f_open@rs,??_f_open+2
  9832  001488  C0D6  F0C8         	movff	f_open@rs+1,??_f_open+3
  9833  00148C  51C5               	movf	??_f_open& (0+255),w,b
  9834  00148E  27C7               	addwf	(??_f_open+2)& (0+255),f,b
  9835  001490  51C6               	movf	(??_f_open+1)& (0+255),w,b
  9836  001492  23C8               	addwfc	(??_f_open+3)& (0+255),f,b
  9837  001494  EE20 F018          	lfsr	2,24
  9838  001498  51E2               	movf	(f_open@dj+4)& (0+255),w,b
  9839  00149A  26D9               	addwf	fsr2l,f,c
  9840  00149C  51E3               	movf	(f_open@dj+5)& (0+255),w,b
  9841  00149E  22DA               	addwfc	fsr2h,f,c
  9842  0014A0  C0C7  FFDE         	movff	??_f_open+2,postinc2
  9843  0014A4  C0C8  FFDD         	movff	??_f_open+3,postdec2
  9844  0014A8                     l11327:
  9845                           
  9846                           ; BSR set to: 0
  9847                           ;tff.c: 889: };tff.c: 890: };tff.c: 891: if (mode & 0x08) {
  9848  0014A8  A7C4               	btfss	f_open@mode& (0+255),3,b
  9849  0014AA  D045               	goto	l11359
  9850                           
  9851                           ; BSR set to: 0
  9852                           ;tff.c: 892: dir[11] = 0;
  9853  0014AC  EE20 F00B          	lfsr	2,11
  9854  0014B0  51DC               	movf	f_open@dir& (0+255),w,b
  9855  0014B2  26D9               	addwf	fsr2l,f,c
  9856  0014B4  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9857  0014B6  22DA               	addwfc	fsr2h,f,c
  9858  0014B8  0E00               	movlw	0
  9859  0014BA  6EDF               	movwf	indf2,c
  9860                           
  9861                           ; BSR set to: 0
  9862                           ;tff.c: 893: dw = get_fattime();
  9863  0014BC  EC48  F01A         	call	_get_fattime	;wreg free
  9864  0014C0  C01D  F0D7         	movff	?_get_fattime,f_open@dw
  9865  0014C4  C01E  F0D8         	movff	?_get_fattime+1,f_open@dw+1
  9866  0014C8  C01F  F0D9         	movff	?_get_fattime+2,f_open@dw+2
  9867  0014CC  C020  F0DA         	movff	?_get_fattime+3,f_open@dw+3
  9868                           
  9869                           ; BSR set to: 0
  9870                           ;tff.c: 894: *(DWORD*)(BYTE*)(&dir[14])=(DWORD)(dw);
  9871  0014D0  EE20 F00E          	lfsr	2,14
  9872  0014D4  51DC               	movf	f_open@dir& (0+255),w,b
  9873  0014D6  26D9               	addwf	fsr2l,f,c
  9874  0014D8  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9875  0014DA  22DA               	addwfc	fsr2h,f,c
  9876  0014DC  C0D7  FFDE         	movff	f_open@dw,postinc2
  9877  0014E0  C0D8  FFDE         	movff	f_open@dw+1,postinc2
  9878  0014E4  C0D9  FFDE         	movff	f_open@dw+2,postinc2
  9879  0014E8  C0DA  FFDE         	movff	f_open@dw+3,postinc2
  9880                           
  9881                           ; BSR set to: 0
  9882                           ;tff.c: 895: dj.fs->winflag = 1;
  9883  0014EC  EE20 F01F          	lfsr	2,31
  9884  0014F0  51E2               	movf	(f_open@dj+4)& (0+255),w,b
  9885  0014F2  26D9               	addwf	fsr2l,f,c
  9886  0014F4  51E3               	movf	(f_open@dj+5)& (0+255),w,b
  9887  0014F6  22DA               	addwfc	fsr2h,f,c
  9888  0014F8  0E01               	movlw	1
  9889  0014FA  6EDF               	movwf	indf2,c
  9890                           
  9891                           ; BSR set to: 0
  9892                           ;tff.c: 896: mode |= 0x20;
  9893  0014FC  8BC4               	bsf	f_open@mode& (0+255),5,b
  9894  0014FE  D01B               	goto	l11359
  9895  001500                     l11339:
  9896                           
  9897                           ; BSR set to: 0
  9898                           ;tff.c: 900: else {;tff.c: 902: if (res != FR_OK) return res;
  9899  001500  51DB               	movf	f_open@res& (0+255),w,b
  9900  001502  A4D8               	btfss	status,2,c
  9901  001504  D70B               	goto	u13520
  9902                           
  9903                           ; BSR set to: 0
  9904                           ;tff.c: 903: if (!dir || (dir[11] & 0x10))
  9905  001506  51DC               	movf	f_open@dir& (0+255),w,b
  9906  001508  11DD               	iorwf	(f_open@dir+1)& (0+255),w,b
  9907  00150A  B4D8               	btfsc	status,2,c
  9908  00150C  D008               	goto	u13660
  9909                           
  9910                           ; BSR set to: 0
  9911  00150E  EE20 F00B          	lfsr	2,11
  9912  001512  51DC               	movf	f_open@dir& (0+255),w,b
  9913  001514  26D9               	addwf	fsr2l,f,c
  9914  001516  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9915  001518  22DA               	addwfc	fsr2h,f,c
  9916  00151A  A8DF               	btfss	indf2,4,c
  9917  00151C  D002               	goto	l979
  9918  00151E                     u13660:
  9919                           
  9920                           ; BSR set to: 0
  9921                           ;tff.c: 904: return FR_NO_FILE;
  9922  00151E  0E02               	movlw	2
  9923  001520  0012               	return	
  9924  001522                     l979:
  9925                           
  9926                           ; BSR set to: 0
  9927                           ;tff.c: 906: if ((mode & 0x02) && (dir[11] & 0x01))
  9928  001522  A3C4               	btfss	f_open@mode& (0+255),1,b
  9929  001524  D008               	goto	l11359
  9930                           
  9931                           ; BSR set to: 0
  9932  001526  EE20 F00B          	lfsr	2,11
  9933  00152A  51DC               	movf	f_open@dir& (0+255),w,b
  9934  00152C  26D9               	addwf	fsr2l,f,c
  9935  00152E  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9936  001530  22DA               	addwfc	fsr2h,f,c
  9937  001532  B0DF               	btfsc	indf2,0,c
  9938  001534  D753               	goto	u13590
  9939  001536                     l11359:
  9940                           
  9941                           ; BSR set to: 0
  9942                           ;tff.c: 908: };tff.c: 909: fp->dir_sect = dj.fs->winsect;
  9943  001536  EE20 F004          	lfsr	2,4
  9944  00153A  51E2               	movf	(f_open@dj+4)& (0+255),w,b
  9945  00153C  26D9               	addwf	fsr2l,f,c
  9946  00153E  51E3               	movf	(f_open@dj+5)& (0+255),w,b
  9947  001540  22DA               	addwfc	fsr2h,f,c
  9948  001542  EE10 F016          	lfsr	1,22
  9949  001546  51C0               	movf	f_open@fp& (0+255),w,b
  9950  001548  26E1               	addwf	fsr1l,f,c
  9951  00154A  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9952  00154C  22E2               	addwfc	fsr1h,f,c
  9953  00154E  CFDE FFE6          	movff	postinc2,postinc1
  9954  001552  CFDE FFE6          	movff	postinc2,postinc1
  9955  001556  CFDE FFE6          	movff	postinc2,postinc1
  9956  00155A  CFDE FFE6          	movff	postinc2,postinc1
  9957                           
  9958                           ; BSR set to: 0
  9959                           ;tff.c: 910: fp->dir_ptr = dir;
  9960  00155E  EE20 F01A          	lfsr	2,26
  9961  001562  51C0               	movf	f_open@fp& (0+255),w,b
  9962  001564  26D9               	addwf	fsr2l,f,c
  9963  001566  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9964  001568  22DA               	addwfc	fsr2h,f,c
  9965  00156A  C0DC  FFDE         	movff	f_open@dir,postinc2
  9966  00156E  C0DD  FFDD         	movff	f_open@dir+1,postdec2
  9967                           
  9968                           ; BSR set to: 0
  9969                           ;tff.c: 912: fp->flag = mode;
  9970  001572  EE20 F002          	lfsr	2,2
  9971  001576  51C0               	movf	f_open@fp& (0+255),w,b
  9972  001578  26D9               	addwf	fsr2l,f,c
  9973  00157A  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9974  00157C  22DA               	addwfc	fsr2h,f,c
  9975  00157E  C0C4  FFDF         	movff	f_open@mode,indf2
  9976                           
  9977                           ;tff.c: 913: fp->org_clust =;tff.c: 917: (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  9978  001582  EE20 F01A          	lfsr	2,26
  9979  001586  51DC               	movf	f_open@dir& (0+255),w,b
  9980  001588  26D9               	addwf	fsr2l,f,c
  9981  00158A  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9982  00158C  22DA               	addwfc	fsr2h,f,c
  9983  00158E  EE10 F00E          	lfsr	1,14
  9984  001592  51C0               	movf	f_open@fp& (0+255),w,b
  9985  001594  26E1               	addwf	fsr1l,f,c
  9986  001596  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9987  001598  22E2               	addwfc	fsr1h,f,c
  9988  00159A  CFDE FFE6          	movff	postinc2,postinc1
  9989  00159E  CFDD FFE5          	movff	postdec2,postdec1
  9990                           
  9991                           ;tff.c: 918: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(&dir[28]));
  9992  0015A2  EE20 F01C          	lfsr	2,28
  9993  0015A6  51DC               	movf	f_open@dir& (0+255),w,b
  9994  0015A8  26D9               	addwf	fsr2l,f,c
  9995  0015AA  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9996  0015AC  22DA               	addwfc	fsr2h,f,c
  9997  0015AE  EE10 F00A          	lfsr	1,10
  9998  0015B2  51C0               	movf	f_open@fp& (0+255),w,b
  9999  0015B4  26E1               	addwf	fsr1l,f,c
 10000  0015B6  51C1               	movf	(f_open@fp+1)& (0+255),w,b
 10001  0015B8  22E2               	addwfc	fsr1h,f,c
 10002  0015BA  CFDE FFE6          	movff	postinc2,postinc1
 10003  0015BE  CFDE FFE6          	movff	postinc2,postinc1
 10004  0015C2  CFDE FFE6          	movff	postinc2,postinc1
 10005  0015C6  CFDE FFE6          	movff	postinc2,postinc1
 10006                           
 10007                           ; BSR set to: 0
 10008                           ;tff.c: 919: fp->fptr = 0; fp->csect = 255;
 10009  0015CA  EE20 F006          	lfsr	2,6
 10010  0015CE  51C0               	movf	f_open@fp& (0+255),w,b
 10011  0015D0  26D9               	addwf	fsr2l,f,c
 10012  0015D2  51C1               	movf	(f_open@fp+1)& (0+255),w,b
 10013  0015D4  22DA               	addwfc	fsr2h,f,c
 10014  0015D6  6ADE               	clrf	postinc2,c
 10015  0015D8  6ADE               	clrf	postinc2,c
 10016  0015DA  6ADE               	clrf	postinc2,c
 10017  0015DC  6ADD               	clrf	postdec2,c
 10018                           
 10019                           ; BSR set to: 0
 10020  0015DE  EE20 F003          	lfsr	2,3
 10021  0015E2  51C0               	movf	f_open@fp& (0+255),w,b
 10022  0015E4  26D9               	addwf	fsr2l,f,c
 10023  0015E6  51C1               	movf	(f_open@fp+1)& (0+255),w,b
 10024  0015E8  22DA               	addwfc	fsr2h,f,c
 10025  0015EA  0EFF               	movlw	255
 10026  0015EC  6EDF               	movwf	indf2,c
 10027                           
 10028                           ; BSR set to: 0
 10029                           ;tff.c: 920: fp->fs = dj.fs; fp->id = dj.fs->id;
 10030  0015EE  EE20 F004          	lfsr	2,4
 10031  0015F2  51C0               	movf	f_open@fp& (0+255),w,b
 10032  0015F4  26D9               	addwf	fsr2l,f,c
 10033  0015F6  51C1               	movf	(f_open@fp+1)& (0+255),w,b
 10034  0015F8  22DA               	addwfc	fsr2h,f,c
 10035  0015FA  C0E2  FFDE         	movff	f_open@dj+4,postinc2
 10036  0015FE  C0E3  FFDD         	movff	f_open@dj+5,postdec2
 10037                           
 10038                           ; BSR set to: 0
 10039  001602  C0E2  FFD9         	movff	f_open@dj+4,fsr2l
 10040  001606  C0E3  FFDA         	movff	f_open@dj+5,fsr2h
 10041  00160A  C0C0  FFE1         	movff	f_open@fp,fsr1l
 10042  00160E  C0C1  FFE2         	movff	f_open@fp+1,fsr1h
 10043  001612  CFDE FFE6          	movff	postinc2,postinc1
 10044  001616  CFDD FFE5          	movff	postdec2,postdec1
 10045                           
 10046                           ; BSR set to: 0
 10047                           ;tff.c: 922: return FR_OK;
 10048  00161A  0E00               	movlw	0
 10049                           
 10050                           ; BSR set to: 0
 10051  00161C  0012               	return		;funcret
 10052  00161E                     __end_of_f_open:
 10053                           	callstack 0
 10054                           
 10055 ;; *************** function _trace_path *****************
 10056 ;; Defined at:
 10057 ;;		line 502 in file "bibliotecas/tff.c"
 10058 ;; Parameters:    Size  Location     Type
 10059 ;;  dj              1   72[BANK0 ] PTR struct _DIR_E
 10060 ;;		 -> f_open@dj(14), 
 10061 ;;  fn              1   73[BANK0 ] PTR unsigned char 
 10062 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
 10063 ;;  path            2   74[BANK0 ] PTR const unsigned char 
 10064 ;;		 -> STR_22(13), filename(15), 
 10065 ;;  dir             1   76[BANK0 ] PTR PTR unsigned char 
 10066 ;;		 -> f_opendir@dir(2), f_open@dir(2), 
 10067 ;; Auto vars:     Size  Location     Type
 10068 ;;  dptr            2   90[BANK0 ] PTR unsigned char 
 10069 ;;		 -> fs.win(512), NULL(0), fs(544), 
 10070 ;;  clust           2   87[BANK0 ] unsigned short 
 10071 ;;  fs              2   85[BANK0 ] PTR struct _FATFS
 10072 ;;		 -> NULL(0), fs(544), 
 10073 ;;  ds              1   89[BANK0 ] unsigned char 
 10074 ;; Return value:  Size  Location     Type
 10075 ;;                  1    wreg      enum E155
 10076 ;; Registers used:
 10077 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10078 ;; Tracked objects:
 10079 ;;		On entry : 3F/0
 10080 ;;		On exit  : 3F/0
 10081 ;;		Unchanged: 0/0
 10082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10083 ;;      Params:         0       5       0       0       0       0       0       0       0
 10084 ;;      Locals:         0      11       0       0       0       0       0       0       0
 10085 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10086 ;;      Totals:         0      20       0       0       0       0       0       0       0
 10087 ;;Total ram usage:       20 bytes
 10088 ;; Hardware stack levels used:    1
 10089 ;; Hardware stack levels required when called:   11
 10090 ;; This function calls:
 10091 ;;		_clust2sect
 10092 ;;		_make_dirfile
 10093 ;;		_memcmp
 10094 ;;		_move_window
 10095 ;;		_next_dir_entry
 10096 ;; This function is called by:
 10097 ;;		_f_open
 10098 ;; This function uses a non-reentrant model
 10099 ;;
 10100                           
 10101                           	psect	text52
 10102  001BD8                     __ptext52:
 10103                           	callstack 0
 10104  001BD8                     _trace_path:
 10105                           	callstack 15
 10106                           
 10107                           ; BSR set to: 0
 10108                           ;tff.c: 512: FATFS *fs = FatFs;
 10109                           
 10110                           ; BSR set to: 0
 10111                           ;incstack = 0
 10112  001BD8  C039  F0B5         	movff	_FatFs,trace_path@fs
 10113  001BDC  C03A  F0B6         	movff	_FatFs+1,trace_path@fs+1
 10114                           
 10115                           ; BSR set to: 0
 10116                           ;tff.c: 515: dj->fs = fs;
 10117  001BE0  51A8               	movf	trace_path@dj& (0+255),w,b
 10118  001BE2  6ED9               	movwf	fsr2l,c
 10119  001BE4  6ADA               	clrf	fsr2h,c
 10120  001BE6  0E04               	movlw	4
 10121  001BE8  26D9               	addwf	fsr2l,f,c
 10122  001BEA  C0B5  FFDE         	movff	trace_path@fs,postinc2
 10123  001BEE  C0B6  FFDD         	movff	trace_path@fs+1,postdec2
 10124                           
 10125                           ; BSR set to: 0
 10126                           ;tff.c: 516: clust = fs->dirbase;
 10127  001BF2  EE20 F00C          	lfsr	2,12
 10128  001BF6  51B5               	movf	trace_path@fs& (0+255),w,b
 10129  001BF8  26D9               	addwf	fsr2l,f,c
 10130  001BFA  51B6               	movf	(trace_path@fs+1)& (0+255),w,b
 10131  001BFC  22DA               	addwfc	fsr2h,f,c
 10132  001BFE  CFDE F0B7          	movff	postinc2,trace_path@clust
 10133  001C02  CFDD F0B8          	movff	postdec2,trace_path@clust+1
 10134                           
 10135                           ; BSR set to: 0
 10136                           ;tff.c: 523: {;tff.c: 524: dj->clust = dj->sclust = 0;
 10137  001C06  51A8               	movf	trace_path@dj& (0+255),w,b
 10138  001C08  6ED9               	movwf	fsr2l,c
 10139  001C0A  6ADA               	clrf	fsr2h,c
 10140  001C0C  0E06               	movlw	6
 10141  001C0E  26D9               	addwf	fsr2l,f,c
 10142  001C10  0E00               	movlw	0
 10143  001C12  6EDE               	movwf	postinc2,c
 10144  001C14  0E00               	movlw	0
 10145  001C16  6EDD               	movwf	postdec2,c
 10146  001C18  51A8               	movf	trace_path@dj& (0+255),w,b
 10147  001C1A  6EE1               	movwf	fsr1l,c
 10148  001C1C  6AE2               	clrf	fsr1h,c
 10149  001C1E  0E08               	movlw	8
 10150  001C20  26E1               	addwf	fsr1l,f,c
 10151  001C22  CFDE FFE6          	movff	postinc2,postinc1
 10152  001C26  CFDD FFE5          	movff	postdec2,postdec1
 10153                           
 10154                           ; BSR set to: 0
 10155                           ;tff.c: 525: dj->sect = clust;
 10156  001C2A  51B7               	movf	trace_path@clust& (0+255),w,b
 10157  001C2C  6FAD               	movwf	??_trace_path& (0+255),b
 10158  001C2E  51B8               	movf	(trace_path@clust+1)& (0+255),w,b
 10159  001C30  6FAE               	movwf	(??_trace_path+1)& (0+255),b
 10160  001C32  6BAF               	clrf	(??_trace_path+2)& (0+255),b
 10161  001C34  6BB0               	clrf	(??_trace_path+3)& (0+255),b
 10162  001C36  51A8               	movf	trace_path@dj& (0+255),w,b
 10163  001C38  6ED9               	movwf	fsr2l,c
 10164  001C3A  6ADA               	clrf	fsr2h,c
 10165  001C3C  0E0A               	movlw	10
 10166  001C3E  26D9               	addwf	fsr2l,f,c
 10167  001C40  C0AD  FFDE         	movff	??_trace_path,postinc2
 10168  001C44  C0AE  FFDE         	movff	??_trace_path+1,postinc2
 10169  001C48  C0AF  FFDE         	movff	??_trace_path+2,postinc2
 10170  001C4C  C0B0  FFDE         	movff	??_trace_path+3,postinc2
 10171                           
 10172                           ; BSR set to: 0
 10173                           ;tff.c: 526: };tff.c: 527: dj->index = 0;
 10174  001C50  51A8               	movf	trace_path@dj& (0+255),w,b
 10175  001C52  6ED9               	movwf	fsr2l,c
 10176  001C54  6ADA               	clrf	fsr2h,c
 10177  001C56  0E02               	movlw	2
 10178  001C58  26D9               	addwf	fsr2l,f,c
 10179  001C5A  0E00               	movlw	0
 10180  001C5C  6EDE               	movwf	postinc2,c
 10181  001C5E  0E00               	movlw	0
 10182  001C60  6EDD               	movwf	postdec2,c
 10183                           
 10184                           ; BSR set to: 0
 10185                           ;tff.c: 529: if (*path == '\0') {
 10186  001C62  C0AA  FFF6         	movff	trace_path@path,tblptrl
 10187  001C66  C0AB  FFF7         	movff	trace_path@path+1,tblptrh
 10188  001C6A  6AF8               	clrf	tblptru,c
 10189  001C6C  0E07               	movlw	(high __ramtop+-1)
 10190  001C6E  64F7               	cpfsgt	tblptrh,c
 10191  001C70  D003               	bra	u12847
 10192  001C72  0008               	tblrd		*
 10193  001C74  50F5               	movf	tablat,w,c
 10194  001C76  D005               	bra	u12840
 10195  001C78                     u12847:
 10196  001C78  CFF6 FFE1          	movff	tblptrl,fsr1l
 10197  001C7C  CFF7 FFE2          	movff	tblptrh,fsr1h
 10198  001C80  50E7               	movf	indf1,w,c
 10199  001C82                     u12840:
 10200  001C82  0900               	iorlw	0
 10201  001C84  A4D8               	btfss	status,2,c
 10202  001C86  D00A               	goto	l10895
 10203                           
 10204                           ;tff.c: 530: *dir = (0); return FR_OK;
 10205  001C88  0100               	movlb	0	; () banked
 10206  001C8A  51AC               	movf	trace_path@dir& (0+255),w,b
 10207  001C8C  6ED9               	movwf	fsr2l,c
 10208  001C8E  6ADA               	clrf	fsr2h,c
 10209  001C90  0E00               	movlw	0
 10210  001C92  6EDE               	movwf	postinc2,c
 10211  001C94  0E00               	movlw	0
 10212  001C96  6EDD               	movwf	postdec2,c
 10213  001C98                     l10891:
 10214                           
 10215                           ; BSR set to: 0
 10216  001C98  0E00               	movlw	0
 10217  001C9A  0012               	return	
 10218  001C9C                     l10895:
 10219                           
 10220                           ;tff.c: 534: ds = make_dirfile(&path, fn);
 10221  001C9C  0EAA               	movlw	low trace_path@path
 10222  001C9E  6E21               	movwf	make_dirfile@path^0,c
 10223  001CA0  C0A9  F022         	movff	trace_path@fn,make_dirfile@dirname
 10224  001CA4  EC9B  F019         	call	_make_dirfile	;wreg free
 10225  001CA8  0100               	movlb	0	; () banked
 10226  001CAA  6FB9               	movwf	trace_path@ds& (0+255),b
 10227                           
 10228                           ; BSR set to: 0
 10229                           ;tff.c: 535: if (ds == 1) return FR_INVALID_NAME;
 10230  001CAC  05B9               	decf	trace_path@ds& (0+255),w,b
 10231  001CAE  A4D8               	btfss	status,2,c
 10232  001CB0  D002               	goto	l10903
 10233                           
 10234                           ; BSR set to: 0
 10235  001CB2  0E04               	movlw	4
 10236  001CB4  0012               	return	
 10237  001CB6                     l10903:
 10238                           
 10239                           ; BSR set to: 0
 10240                           ;tff.c: 537: if (!move_window(dj->sect)) return FR_RW_ERROR;
 10241  001CB6  51A8               	movf	trace_path@dj& (0+255),w,b
 10242  001CB8  6ED9               	movwf	fsr2l,c
 10243  001CBA  6ADA               	clrf	fsr2h,c
 10244  001CBC  0E0A               	movlw	10
 10245  001CBE  26D9               	addwf	fsr2l,f,c
 10246  001CC0  CFDE F073          	movff	postinc2,move_window@sector
 10247  001CC4  CFDE F074          	movff	postinc2,move_window@sector+1
 10248  001CC8  CFDE F075          	movff	postinc2,move_window@sector+2
 10249  001CCC  CFDE F076          	movff	postinc2,move_window@sector+3
 10250  001CD0  EC4E  F017         	call	_move_window	;wreg free
 10251  001CD4  0900               	iorlw	0
 10252  001CD6  A4D8               	btfss	status,2,c
 10253  001CD8  D002               	goto	l10909
 10254                           
 10255                           ; BSR set to: 0
 10256  001CDA  0E08               	movlw	8
 10257  001CDC  0012               	return	
 10258  001CDE                     l10909:
 10259                           
 10260                           ; BSR set to: 0
 10261                           ;tff.c: 538: dptr = &fs->win[(dj->index & 15) * 32];
 10262  001CDE  51A8               	movf	trace_path@dj& (0+255),w,b
 10263  001CE0  6ED9               	movwf	fsr2l,c
 10264  001CE2  6ADA               	clrf	fsr2h,c
 10265  001CE4  0E02               	movlw	2
 10266  001CE6  26D9               	addwf	fsr2l,f,c
 10267  001CE8  CFDE F0AD          	movff	postinc2,??_trace_path
 10268  001CEC  CFDD F0AE          	movff	postdec2,??_trace_path+1
 10269  001CF0  0E0F               	movlw	15
 10270  001CF2  17AD               	andwf	??_trace_path& (0+255),f,b
 10271  001CF4  0E00               	movlw	0
 10272  001CF6  17AE               	andwf	(??_trace_path+1)& (0+255),f,b
 10273  001CF8  0E05               	movlw	5
 10274  001CFA                     u12885:
 10275  001CFA  90D8               	bcf	status,0,c
 10276  001CFC  37AD               	rlcf	??_trace_path& (0+255),f,b
 10277  001CFE  37AE               	rlcf	(??_trace_path+1)& (0+255),f,b
 10278  001D00  2EE8               	decfsz	wreg,f,c
 10279  001D02  D7FB               	goto	u12885
 10280  001D04  C0B5  F0AF         	movff	trace_path@fs,??_trace_path+2
 10281  001D08  C0B6  F0B0         	movff	trace_path@fs+1,??_trace_path+3
 10282  001D0C  51AD               	movf	??_trace_path& (0+255),w,b
 10283  001D0E  27AF               	addwf	(??_trace_path+2)& (0+255),f,b
 10284  001D10  51AE               	movf	(??_trace_path+1)& (0+255),w,b
 10285  001D12  23B0               	addwfc	(??_trace_path+3)& (0+255),f,b
 10286  001D14  0E20               	movlw	32
 10287  001D16  25AF               	addwf	(??_trace_path+2)& (0+255),w,b
 10288  001D18  6FBA               	movwf	trace_path@dptr& (0+255),b
 10289  001D1A  0E00               	movlw	0
 10290  001D1C  21B0               	addwfc	(??_trace_path+3)& (0+255),w,b
 10291  001D1E  6FBB               	movwf	(trace_path@dptr+1)& (0+255),b
 10292                           
 10293                           ; BSR set to: 0
 10294                           ;tff.c: 539: if (dptr[0] == 0)
 10295  001D20  C0BA  FFD9         	movff	trace_path@dptr,fsr2l
 10296  001D24  C0BB  FFDA         	movff	trace_path@dptr+1,fsr2h
 10297  001D28  50DF               	movf	indf2,w,c
 10298  001D2A  A4D8               	btfss	status,2,c
 10299  001D2C  D00D               	goto	l10921
 10300                           
 10301                           ; BSR set to: 0
 10302                           ;tff.c: 540: return !ds ? FR_NO_FILE : FR_NO_PATH;
 10303  001D2E  51B9               	movf	trace_path@ds& (0+255),w,b
 10304  001D30  B4D8               	btfsc	status,2,c
 10305  001D32  D004               	goto	l10917
 10306                           
 10307                           ; BSR set to: 0
 10308  001D34  0E00               	movlw	0
 10309  001D36  6FB2               	movwf	(_trace_path$1697+1)& (0+255),b
 10310  001D38  0E03               	movlw	3
 10311  001D3A  D003               	goto	L3
 10312  001D3C                     l10917:
 10313                           
 10314                           ; BSR set to: 0
 10315  001D3C  0E00               	movlw	0
 10316  001D3E  6FB2               	movwf	(_trace_path$1697+1)& (0+255),b
 10317  001D40  0E02               	movlw	2
 10318  001D42                     L3:
 10319  001D42  6FB1               	movwf	_trace_path$1697& (0+255),b
 10320                           
 10321                           ; BSR set to: 0
 10322  001D44  51B1               	movf	_trace_path$1697& (0+255),w,b
 10323  001D46  0012               	return	
 10324  001D48                     l10921:
 10325                           
 10326                           ; BSR set to: 0
 10327                           ;tff.c: 541: if (dptr[0] != 0xE5;tff.c: 542: && !(dptr[11] & 0x08);tff.c: 543: && !memcm
      +                          p(&dptr[0], fn, 8+3) ) break;
 10328  001D48  C0BA  FFD9         	movff	trace_path@dptr,fsr2l
 10329  001D4C  C0BB  FFDA         	movff	trace_path@dptr+1,fsr2h
 10330  001D50  0EE5               	movlw	229
 10331  001D52  18DE               	xorwf	postinc2,w,c
 10332  001D54  B4D8               	btfsc	status,2,c
 10333  001D56  D019               	goto	l10929
 10334                           
 10335                           ; BSR set to: 0
 10336  001D58  EE20 F00B          	lfsr	2,11
 10337  001D5C  51BA               	movf	trace_path@dptr& (0+255),w,b
 10338  001D5E  26D9               	addwf	fsr2l,f,c
 10339  001D60  51BB               	movf	(trace_path@dptr+1)& (0+255),w,b
 10340  001D62  22DA               	addwfc	fsr2h,f,c
 10341  001D64  B6DF               	btfsc	indf2,3,c
 10342  001D66  D011               	goto	l10929
 10343                           
 10344                           ; BSR set to: 0
 10345  001D68  C0BA  F019         	movff	trace_path@dptr,memcmp@s1
 10346  001D6C  C0BB  F01A         	movff	trace_path@dptr+1,memcmp@s1+1
 10347  001D70  C0A9  F01B         	movff	trace_path@fn,memcmp@s2
 10348  001D74  6A1C               	clrf	(memcmp@s2+1)^0,c
 10349  001D76  0E00               	movlw	0
 10350  001D78  6E1E               	movwf	(memcmp@n+1)^0,c
 10351  001D7A  0E0B               	movlw	11
 10352  001D7C  6E1D               	movwf	memcmp@n^0,c
 10353  001D7E  ECE9  F021         	call	_memcmp	;wreg free
 10354  001D82  5019               	movf	?_memcmp^0,w,c
 10355  001D84  101A               	iorwf	(?_memcmp+1)^0,w,c
 10356  001D86  B4D8               	btfsc	status,2,c
 10357  001D88  D014               	goto	l10939
 10358  001D8A                     l10929:
 10359                           
 10360                           ;tff.c: 544: if (!next_dir_entry(dj))
 10361  001D8A  C0A8  F031         	movff	trace_path@dj,next_dir_entry@dj
 10362  001D8E  ECE9  F018         	call	_next_dir_entry	;wreg free
 10363  001D92  0900               	iorlw	0
 10364  001D94  A4D8               	btfss	status,2,c
 10365  001D96  D78F               	goto	l10903
 10366                           
 10367                           ; BSR set to: 0
 10368                           ;tff.c: 545: return !ds ? FR_NO_FILE : FR_NO_PATH;
 10369  001D98  51B9               	movf	trace_path@ds& (0+255),w,b
 10370  001D9A  B4D8               	btfsc	status,2,c
 10371  001D9C  D004               	goto	l10935
 10372                           
 10373                           ; BSR set to: 0
 10374  001D9E  0E00               	movlw	0
 10375  001DA0  6FB4               	movwf	(_trace_path$1699+1)& (0+255),b
 10376  001DA2  0E03               	movlw	3
 10377  001DA4  D003               	goto	L4
 10378  001DA6                     l10935:
 10379                           
 10380                           ; BSR set to: 0
 10381  001DA6  0E00               	movlw	0
 10382  001DA8  6FB4               	movwf	(_trace_path$1699+1)& (0+255),b
 10383  001DAA  0E02               	movlw	2
 10384  001DAC                     L4:
 10385  001DAC  6FB3               	movwf	_trace_path$1699& (0+255),b
 10386                           
 10387                           ; BSR set to: 0
 10388  001DAE  51B3               	movf	_trace_path$1699& (0+255),w,b
 10389  001DB0  0012               	return	
 10390  001DB2                     l10939:
 10391                           
 10392                           ;tff.c: 547: if (!ds) { *dir = dptr; return FR_OK; }
 10393  001DB2  0100               	movlb	0	; () banked
 10394  001DB4  51B9               	movf	trace_path@ds& (0+255),w,b
 10395  001DB6  A4D8               	btfss	status,2,c
 10396  001DB8  D008               	goto	l10947
 10397                           
 10398                           ; BSR set to: 0
 10399  001DBA  51AC               	movf	trace_path@dir& (0+255),w,b
 10400  001DBC  6ED9               	movwf	fsr2l,c
 10401  001DBE  6ADA               	clrf	fsr2h,c
 10402  001DC0  C0BA  FFDE         	movff	trace_path@dptr,postinc2
 10403  001DC4  C0BB  FFDD         	movff	trace_path@dptr+1,postdec2
 10404  001DC8  D767               	goto	l10891
 10405  001DCA                     l10947:
 10406                           
 10407                           ; BSR set to: 0
 10408                           ;tff.c: 548: if (!(dptr[11] & 0x10)) return FR_NO_PATH;
 10409  001DCA  EE20 F00B          	lfsr	2,11
 10410  001DCE  51BA               	movf	trace_path@dptr& (0+255),w,b
 10411  001DD0  26D9               	addwf	fsr2l,f,c
 10412  001DD2  51BB               	movf	(trace_path@dptr+1)& (0+255),w,b
 10413  001DD4  22DA               	addwfc	fsr2h,f,c
 10414  001DD6  B8DF               	btfsc	indf2,4,c
 10415  001DD8  D002               	goto	l10953
 10416                           
 10417                           ; BSR set to: 0
 10418  001DDA  0E03               	movlw	3
 10419  001DDC  0012               	return	
 10420  001DDE                     l10953:
 10421                           
 10422                           ; BSR set to: 0
 10423                           ;tff.c: 549: clust =;tff.c: 553: (WORD)(*(WORD*)(BYTE*)(&dptr[26]));
 10424  001DDE  EE20 F01A          	lfsr	2,26
 10425  001DE2  51BA               	movf	trace_path@dptr& (0+255),w,b
 10426  001DE4  26D9               	addwf	fsr2l,f,c
 10427  001DE6  51BB               	movf	(trace_path@dptr+1)& (0+255),w,b
 10428  001DE8  22DA               	addwfc	fsr2h,f,c
 10429  001DEA  CFDE F0B7          	movff	postinc2,trace_path@clust
 10430  001DEE  CFDD F0B8          	movff	postdec2,trace_path@clust+1
 10431                           
 10432                           ; BSR set to: 0
 10433                           ;tff.c: 554: dj->clust = dj->sclust = clust;
 10434  001DF2  51A8               	movf	trace_path@dj& (0+255),w,b
 10435  001DF4  6ED9               	movwf	fsr2l,c
 10436  001DF6  6ADA               	clrf	fsr2h,c
 10437  001DF8  0E06               	movlw	6
 10438  001DFA  26D9               	addwf	fsr2l,f,c
 10439  001DFC  C0B7  FFDE         	movff	trace_path@clust,postinc2
 10440  001E00  C0B8  FFDD         	movff	trace_path@clust+1,postdec2
 10441  001E04  51A8               	movf	trace_path@dj& (0+255),w,b
 10442  001E06  6EE1               	movwf	fsr1l,c
 10443  001E08  6AE2               	clrf	fsr1h,c
 10444  001E0A  0E08               	movlw	8
 10445  001E0C  26E1               	addwf	fsr1l,f,c
 10446  001E0E  CFDE FFE6          	movff	postinc2,postinc1
 10447  001E12  CFDD FFE5          	movff	postdec2,postdec1
 10448                           
 10449                           ; BSR set to: 0
 10450                           ;tff.c: 555: dj->sect = clust2sect(clust);
 10451  001E16  C0B7  F025         	movff	trace_path@clust,clust2sect@clust
 10452  001E1A  C0B8  F026         	movff	trace_path@clust+1,clust2sect@clust+1
 10453  001E1E  EC53  F01F         	call	_clust2sect	;wreg free
 10454  001E22  51A8               	movf	trace_path@dj& (0+255),w,b
 10455  001E24  6ED9               	movwf	fsr2l,c
 10456  001E26  6ADA               	clrf	fsr2h,c
 10457  001E28  0E0A               	movlw	10
 10458  001E2A  26D9               	addwf	fsr2l,f,c
 10459  001E2C  C025  FFDE         	movff	?_clust2sect,postinc2
 10460  001E30  C026  FFDE         	movff	?_clust2sect+1,postinc2
 10461  001E34  C027  FFDE         	movff	?_clust2sect+2,postinc2
 10462  001E38  C028  FFDE         	movff	?_clust2sect+3,postinc2
 10463                           
 10464                           ; BSR set to: 0
 10465                           ;tff.c: 556: dj->index = 2;
 10466  001E3C  51A8               	movf	trace_path@dj& (0+255),w,b
 10467  001E3E  6ED9               	movwf	fsr2l,c
 10468  001E40  6ADA               	clrf	fsr2h,c
 10469  001E42  0E02               	movlw	2
 10470  001E44  26D9               	addwf	fsr2l,f,c
 10471  001E46  0E02               	movlw	2
 10472  001E48  6EDE               	movwf	postinc2,c
 10473  001E4A  0E00               	movlw	0
 10474  001E4C  6EDD               	movwf	postdec2,c
 10475                           
 10476                           ;tff.c: 557: }
 10477  001E4E  D726               	goto	l10895
 10478  001E50                     __end_of_trace_path:
 10479                           	callstack 0
 10480                           
 10481 ;; *************** function _make_dirfile *****************
 10482 ;; Defined at:
 10483 ;;		line 439 in file "bibliotecas/tff.c"
 10484 ;; Parameters:    Size  Location     Type
 10485 ;;  path            1   32[COMRAM] PTR PTR const unsigned c
 10486 ;;		 -> trace_path@path(2), 
 10487 ;;  dirname         1   33[COMRAM] PTR unsigned char 
 10488 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
 10489 ;; Auto vars:     Size  Location     Type
 10490 ;;  c               1   42[COMRAM] unsigned char 
 10491 ;;  n               1   41[COMRAM] unsigned char 
 10492 ;;  a               1   40[COMRAM] unsigned char 
 10493 ;;  t               1   39[COMRAM] unsigned char 
 10494 ;;  b               1   38[COMRAM] unsigned char 
 10495 ;; Return value:  Size  Location     Type
 10496 ;;                  1    wreg      unsigned char 
 10497 ;; Registers used:
 10498 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10499 ;; Tracked objects:
 10500 ;;		On entry : 0/0
 10501 ;;		On exit  : 0/0
 10502 ;;		Unchanged: 0/0
 10503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10504 ;;      Params:         2       0       0       0       0       0       0       0       0
 10505 ;;      Locals:         7       0       0       0       0       0       0       0       0
 10506 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10507 ;;      Totals:        11       0       0       0       0       0       0       0       0
 10508 ;;Total ram usage:       11 bytes
 10509 ;; Hardware stack levels used:    1
 10510 ;; Hardware stack levels required when called:    4
 10511 ;; This function calls:
 10512 ;;		_memset
 10513 ;; This function is called by:
 10514 ;;		_trace_path
 10515 ;; This function uses a non-reentrant model
 10516 ;;
 10517                           
 10518                           	psect	text53
 10519  003336                     __ptext53:
 10520                           	callstack 0
 10521  003336                     _make_dirfile:
 10522                           	callstack 21
 10523                           
 10524                           ;tff.c: 444: BYTE n, t, c, a, b;;tff.c: 447: memset(dirname, ' ', 8+3);
 10525                           
 10526                           ; BSR set to: 0
 10527                           ;incstack = 0
 10528  003336  C022  F019         	movff	make_dirfile@dirname,memset@p1
 10529  00333A  6A1A               	clrf	(memset@p1+1)^0,c
 10530  00333C  0E00               	movlw	0
 10531  00333E  6E1C               	movwf	(memset@c+1)^0,c
 10532  003340  0E20               	movlw	32
 10533  003342  6E1B               	movwf	memset@c^0,c
 10534  003344  0E00               	movlw	0
 10535  003346  6E1E               	movwf	(memset@n+1)^0,c
 10536  003348  0E0B               	movlw	11
 10537  00334A  6E1D               	movwf	memset@n^0,c
 10538  00334C  ECA0  F028         	call	_memset	;wreg free
 10539                           
 10540                           ;tff.c: 448: a = 0; b = 0x18;
 10541  003350  0E00               	movlw	0
 10542  003352  6E29               	movwf	make_dirfile@a^0,c
 10543  003354  0E18               	movlw	24
 10544  003356  6E27               	movwf	make_dirfile@b^0,c
 10545                           
 10546                           ;tff.c: 449: n = 0; t = 8;
 10547  003358  0E00               	movlw	0
 10548  00335A  6E2A               	movwf	make_dirfile@n^0,c
 10549  00335C  0E08               	movlw	8
 10550  00335E  6E28               	movwf	make_dirfile@t^0,c
 10551  003360                     l7171:
 10552                           
 10553                           ;tff.c: 451: c = *(*path)++;
 10554  003360  5021               	movf	make_dirfile@path^0,w,c
 10555  003362  6ED9               	movwf	fsr2l,c
 10556  003364  6ADA               	clrf	fsr2h,c
 10557  003366  CFDF F023          	movff	indf2,??_make_dirfile
 10558  00336A  0E01               	movlw	1
 10559  00336C  26DE               	addwf	postinc2,f,c
 10560  00336E  CFDF F024          	movff	indf2,??_make_dirfile+1
 10561  003372  0E00               	movlw	0
 10562  003374  22DD               	addwfc	postdec2,f,c
 10563  003376  C023  FFF6         	movff	??_make_dirfile,tblptrl
 10564  00337A  C024  FFF7         	movff	??_make_dirfile+1,tblptrh
 10565  00337E  6AF8               	clrf	tblptru,c
 10566  003380  0E07               	movlw	(high __ramtop+-1)
 10567  003382  64F7               	cpfsgt	tblptrh,c
 10568  003384  D003               	bra	u6997
 10569  003386  0008               	tblrd		*
 10570  003388  50F5               	movf	tablat,w,c
 10571  00338A  D005               	bra	u6990
 10572  00338C                     u6997:
 10573  00338C  CFF6 FFE1          	movff	tblptrl,fsr1l
 10574  003390  CFF7 FFE2          	movff	tblptrh,fsr1h
 10575  003394  50E7               	movf	indf1,w,c
 10576  003396                     u6990:
 10577  003396  6E2B               	movwf	make_dirfile@c^0,c
 10578                           
 10579                           ;tff.c: 452: if (c == '\0' || c == '/') {
 10580  003398  502B               	movf	make_dirfile@c^0,w,c
 10581  00339A  B4D8               	btfsc	status,2,c
 10582  00339C  D004               	goto	u7010
 10583  00339E  0E2F               	movlw	47
 10584  0033A0  182B               	xorwf	make_dirfile@c^0,w,c
 10585  0033A2  A4D8               	btfss	status,2,c
 10586  0033A4  D012               	goto	l7191
 10587  0033A6                     u7010:
 10588                           
 10589                           ;tff.c: 453: if (n == 0) break;
 10590  0033A6  502A               	movf	make_dirfile@n^0,w,c
 10591  0033A8  B4D8               	btfsc	status,2,c
 10592  0033AA  D070               	goto	l7279
 10593  0033AC  5029               	movf	make_dirfile@a^0,w,c
 10594  0033AE  1427               	andwf	make_dirfile@b^0,w,c
 10595  0033B0  6E23               	movwf	??_make_dirfile^0,c
 10596  0033B2  5023               	movf	??_make_dirfile^0,w,c
 10597  0033B4  6E25               	movwf	_make_dirfile$1650^0,c
 10598  0033B6  6A26               	clrf	(_make_dirfile$1650+1)^0,c
 10599  0033B8  5022               	movf	make_dirfile@dirname^0,w,c
 10600  0033BA  6ED9               	movwf	fsr2l,c
 10601  0033BC  6ADA               	clrf	fsr2h,c
 10602  0033BE  0E0B               	movlw	11
 10603  0033C0  26D9               	addwf	fsr2l,f,c
 10604  0033C2  C025  FFDF         	movff	_make_dirfile$1650,indf2
 10605                           
 10606                           ;tff.c: 455: return c;
 10607  0033C6  502B               	movf	make_dirfile@c^0,w,c
 10608  0033C8  0012               	return	
 10609  0033CA                     l7191:
 10610                           
 10611                           ;tff.c: 456: };tff.c: 457: if (c <= ' ' || c == 0x7F) break;
 10612  0033CA  0E20               	movlw	32
 10613  0033CC  642B               	cpfsgt	make_dirfile@c^0,c
 10614  0033CE  D05E               	goto	l7279
 10615  0033D0  0E7F               	movlw	127
 10616  0033D2  182B               	xorwf	make_dirfile@c^0,w,c
 10617  0033D4  B4D8               	btfsc	status,2,c
 10618  0033D6  D05A               	goto	l7279
 10619                           
 10620                           ;tff.c: 458: if (c == '.') {
 10621  0033D8  0E2E               	movlw	46
 10622  0033DA  182B               	xorwf	make_dirfile@c^0,w,c
 10623  0033DC  A4D8               	btfss	status,2,c
 10624  0033DE  D00C               	goto	l7221
 10625                           
 10626                           ;tff.c: 459: if (!(a & 1) && n >= 1 && n <= 8) {
 10627  0033E0  B029               	btfsc	make_dirfile@a^0,0,c
 10628  0033E2  D054               	goto	l7279
 10629  0033E4  502A               	movf	make_dirfile@n^0,w,c
 10630  0033E6  B4D8               	btfsc	status,2,c
 10631  0033E8  D051               	goto	l7279
 10632  0033EA  0E09               	movlw	9
 10633  0033EC  602A               	cpfslt	make_dirfile@n^0,c
 10634  0033EE  D04E               	goto	l7279
 10635                           
 10636                           ;tff.c: 460: n = 8; t = 11; continue;
 10637  0033F0  0E08               	movlw	8
 10638  0033F2  6E2A               	movwf	make_dirfile@n^0,c
 10639  0033F4  0E0B               	movlw	11
 10640  0033F6  D7B3               	goto	L5
 10641  0033F8                     l7221:
 10642                           
 10643                           ;tff.c: 470: };tff.c: 471: if (c == '"') break;
 10644  0033F8  0E22               	movlw	34
 10645  0033FA  182B               	xorwf	make_dirfile@c^0,w,c
 10646  0033FC  B4D8               	btfsc	status,2,c
 10647  0033FE  D046               	goto	l7279
 10648                           
 10649                           ;tff.c: 472: if (c <= ')') goto md_l1;
 10650  003400  0E2A               	movlw	42
 10651  003402  602B               	cpfslt	make_dirfile@c^0,c
 10652  003404  D001               	goto	l7229
 10653  003406  D035               	goto	l852
 10654  003408                     l7229:
 10655                           
 10656                           ;tff.c: 473: if (c <= ',') break;
 10657  003408  0E2D               	movlw	45
 10658  00340A  602B               	cpfslt	make_dirfile@c^0,c
 10659  00340C  D001               	goto	l7233
 10660  00340E  D03E               	goto	l7279
 10661  003410                     l7233:
 10662                           
 10663                           ;tff.c: 474: if (c <= '9') goto md_l1;
 10664  003410  0E3A               	movlw	58
 10665  003412  602B               	cpfslt	make_dirfile@c^0,c
 10666  003414  D001               	goto	l7237
 10667  003416  D02D               	goto	l852
 10668  003418                     l7237:
 10669                           
 10670                           ;tff.c: 475: if (c <= '?') break;
 10671  003418  0E40               	movlw	64
 10672  00341A  602B               	cpfslt	make_dirfile@c^0,c
 10673  00341C  D001               	goto	l855
 10674  00341E  D036               	goto	l7279
 10675  003420                     l855:
 10676                           
 10677                           ;tff.c: 476: if (!(a & 1)) {
 10678  003420  B029               	btfsc	make_dirfile@a^0,0,c
 10679  003422  D027               	goto	l852
 10680                           
 10681                           ;tff.c: 477: if (c == '|') break;
 10682  003424  0E7C               	movlw	124
 10683  003426  182B               	xorwf	make_dirfile@c^0,w,c
 10684  003428  B4D8               	btfsc	status,2,c
 10685  00342A  D030               	goto	l7279
 10686                           
 10687                           ;tff.c: 478: if (c >= '[' && c <= ']') break;
 10688  00342C  0E5A               	movlw	90
 10689  00342E  642B               	cpfsgt	make_dirfile@c^0,c
 10690  003430  D004               	goto	l7251
 10691  003432  0E5E               	movlw	94
 10692  003434  602B               	cpfslt	make_dirfile@c^0,c
 10693  003436  D001               	goto	l7251
 10694  003438  D029               	goto	l7279
 10695  00343A                     l7251:
 10696  00343A  0E40               	movlw	64
 10697  00343C  642B               	cpfsgt	make_dirfile@c^0,c
 10698  00343E  D00A               	goto	l7261
 10699  003440  0E5B               	movlw	91
 10700  003442  602B               	cpfslt	make_dirfile@c^0,c
 10701  003444  D007               	goto	l7261
 10702                           
 10703                           ;tff.c: 480: (t == 8) ? (b &= 0xF7) : (b &= 0xEF);
 10704  003446  0E08               	movlw	8
 10705  003448  1828               	xorwf	make_dirfile@t^0,w,c
 10706  00344A  A4D8               	btfss	status,2,c
 10707  00344C  D002               	goto	l7259
 10708  00344E  9627               	bcf	make_dirfile@b^0,3,c
 10709  003450  D001               	goto	l7261
 10710  003452                     l7259:
 10711  003452  9827               	bcf	make_dirfile@b^0,4,c
 10712  003454                     l7261:
 10713                           
 10714                           ;tff.c: 481: if (c >= 'a' && c <= 'z') {
 10715  003454  0E60               	movlw	96
 10716  003456  642B               	cpfsgt	make_dirfile@c^0,c
 10717  003458  D00C               	goto	l852
 10718  00345A  0E7B               	movlw	123
 10719  00345C  602B               	cpfslt	make_dirfile@c^0,c
 10720  00345E  D009               	goto	l852
 10721                           
 10722                           ;tff.c: 483: if (1) (t == 8) ? (a |= 0x08) : (a |= 0x10);
 10723  003460  0E20               	movlw	32
 10724  003462  5E2B               	subwf	make_dirfile@c^0,f,c
 10725  003464  0E08               	movlw	8
 10726  003466  1828               	xorwf	make_dirfile@t^0,w,c
 10727  003468  A4D8               	btfss	status,2,c
 10728  00346A  D002               	goto	l7269
 10729  00346C  8629               	bsf	make_dirfile@a^0,3,c
 10730  00346E  D001               	goto	l852
 10731  003470                     l7269:
 10732  003470  8829               	bsf	make_dirfile@a^0,4,c
 10733  003472                     l852:
 10734                           
 10735                           ;tff.c: 487: a &= 0xFE;
 10736  003472  9029               	bcf	make_dirfile@a^0,0,c
 10737                           
 10738                           ;tff.c: 489: if (n >= t) break;
 10739  003474  5028               	movf	make_dirfile@t^0,w,c
 10740  003476  5C2A               	subwf	make_dirfile@n^0,w,c
 10741  003478  B0D8               	btfsc	status,0,c
 10742  00347A  D008               	goto	l7279
 10743                           
 10744                           ;tff.c: 490: dirname[n++] = c;
 10745  00347C  5022               	movf	make_dirfile@dirname^0,w,c
 10746  00347E  242A               	addwf	make_dirfile@n^0,w,c
 10747  003480  6ED9               	movwf	fsr2l,c
 10748  003482  6ADA               	clrf	fsr2h,c
 10749  003484  C02B  FFDF         	movff	make_dirfile@c,indf2
 10750  003488  2A2A               	incf	make_dirfile@n^0,f,c
 10751  00348A  D76A               	goto	l7171
 10752  00348C                     l7279:
 10753                           
 10754                           ;tff.c: 492: return 1;
 10755  00348C  0E01               	movlw	1
 10756  00348E  0012               	return		;funcret
 10757  003490                     __end_of_make_dirfile:
 10758                           	callstack 0
 10759                           
 10760 ;; *************** function _reserve_direntry *****************
 10761 ;; Defined at:
 10762 ;;		line 568 in file "bibliotecas/tff.c"
 10763 ;; Parameters:    Size  Location     Type
 10764 ;;  dj              1   78[BANK0 ] PTR struct _DIR_E
 10765 ;;		 -> f_open@dj(14), 
 10766 ;;  dir             1   79[BANK0 ] PTR PTR unsigned char 
 10767 ;;		 -> f_open@dir(2), 
 10768 ;; Auto vars:     Size  Location     Type
 10769 ;;  sector          4   84[BANK0 ] unsigned long 
 10770 ;;  fs              2   94[BANK0 ] PTR struct _FATFS
 10771 ;;		 -> NULL(0), fs(544), 
 10772 ;;  clust           2   92[BANK0 ] unsigned short 
 10773 ;;  dptr            2   89[BANK0 ] PTR unsigned char 
 10774 ;;		 -> fs.win(512), NULL(0), fs(544), 
 10775 ;;  c               1   91[BANK0 ] unsigned char 
 10776 ;;  n               1   88[BANK0 ] unsigned char 
 10777 ;; Return value:  Size  Location     Type
 10778 ;;                  1    wreg      enum E155
 10779 ;; Registers used:
 10780 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10781 ;; Tracked objects:
 10782 ;;		On entry : 3F/0
 10783 ;;		On exit  : 3F/0
 10784 ;;		Unchanged: 0/0
 10785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10786 ;;      Params:         0       2       0       0       0       0       0       0       0
 10787 ;;      Locals:         0      12       0       0       0       0       0       0       0
 10788 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10789 ;;      Totals:         0      18       0       0       0       0       0       0       0
 10790 ;;Total ram usage:       18 bytes
 10791 ;; Hardware stack levels used:    1
 10792 ;; Hardware stack levels required when called:   11
 10793 ;; This function calls:
 10794 ;;		_clust2sect
 10795 ;;		_create_chain
 10796 ;;		_disk_write
 10797 ;;		_memset
 10798 ;;		_move_window
 10799 ;;		_next_dir_entry
 10800 ;; This function is called by:
 10801 ;;		_f_open
 10802 ;; This function uses a non-reentrant model
 10803 ;;
 10804                           
 10805                           	psect	text54
 10806  001E50                     __ptext54:
 10807                           	callstack 0
 10808  001E50                     _reserve_direntry:
 10809                           	callstack 15
 10810                           
 10811                           ; BSR set to: 0
 10812                           ;tff.c: 573: CLUST clust;;tff.c: 574: DWORD sector;;tff.c: 575: BYTE c, n, *dptr;;tff.c:
      +                           576: FATFS *fs = dj->fs;
 10813                           
 10814                           ;incstack = 0
 10815  001E50  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10816  001E52  6ED9               	movwf	fsr2l,c
 10817  001E54  6ADA               	clrf	fsr2h,c
 10818  001E56  0E04               	movlw	4
 10819  001E58  26D9               	addwf	fsr2l,f,c
 10820  001E5A  CFDE F0BE          	movff	postinc2,reserve_direntry@fs
 10821  001E5E  CFDD F0BF          	movff	postdec2,reserve_direntry@fs+1
 10822                           
 10823                           ;tff.c: 580: clust = dj->sclust;
 10824  001E62  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10825  001E64  6ED9               	movwf	fsr2l,c
 10826  001E66  6ADA               	clrf	fsr2h,c
 10827  001E68  0E06               	movlw	6
 10828  001E6A  26D9               	addwf	fsr2l,f,c
 10829  001E6C  CFDE F0BC          	movff	postinc2,reserve_direntry@clust
 10830  001E70  CFDD F0BD          	movff	postdec2,reserve_direntry@clust+1
 10831                           
 10832                           ; BSR set to: 0
 10833                           ;tff.c: 581: if (clust != 0) {
 10834  001E74  51BC               	movf	reserve_direntry@clust& (0+255),w,b
 10835  001E76  11BD               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 10836  001E78  B4D8               	btfsc	status,2,c
 10837  001E7A  D01D               	goto	l10969
 10838                           
 10839                           ; BSR set to: 0
 10840                           ;tff.c: 582: dj->clust = clust;
 10841  001E7C  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10842  001E7E  6ED9               	movwf	fsr2l,c
 10843  001E80  6ADA               	clrf	fsr2h,c
 10844  001E82  0E08               	movlw	8
 10845  001E84  26D9               	addwf	fsr2l,f,c
 10846  001E86  C0BC  FFDE         	movff	reserve_direntry@clust,postinc2
 10847  001E8A  C0BD  FFDD         	movff	reserve_direntry@clust+1,postdec2
 10848                           
 10849                           ; BSR set to: 0
 10850                           ;tff.c: 583: dj->sect = clust2sect(clust);
 10851  001E8E  C0BC  F025         	movff	reserve_direntry@clust,clust2sect@clust
 10852  001E92  C0BD  F026         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 10853  001E96  EC53  F01F         	call	_clust2sect	;wreg free
 10854  001E9A  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10855  001E9C  6ED9               	movwf	fsr2l,c
 10856  001E9E  6ADA               	clrf	fsr2h,c
 10857  001EA0  0E0A               	movlw	10
 10858  001EA2  26D9               	addwf	fsr2l,f,c
 10859  001EA4  C025  FFDE         	movff	?_clust2sect,postinc2
 10860  001EA8  C026  FFDE         	movff	?_clust2sect+1,postinc2
 10861  001EAC  C027  FFDE         	movff	?_clust2sect+2,postinc2
 10862  001EB0  C028  FFDE         	movff	?_clust2sect+3,postinc2
 10863                           
 10864                           ;tff.c: 584: } else {
 10865  001EB4  D013               	goto	l10971
 10866  001EB6                     l10969:
 10867                           
 10868                           ; BSR set to: 0
 10869                           ;tff.c: 585: dj->sect = fs->dirbase;
 10870  001EB6  EE20 F00C          	lfsr	2,12
 10871  001EBA  51BE               	movf	reserve_direntry@fs& (0+255),w,b
 10872  001EBC  26D9               	addwf	fsr2l,f,c
 10873  001EBE  51BF               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 10874  001EC0  22DA               	addwfc	fsr2h,f,c
 10875  001EC2  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10876  001EC4  6EE1               	movwf	fsr1l,c
 10877  001EC6  6AE2               	clrf	fsr1h,c
 10878  001EC8  0E0A               	movlw	10
 10879  001ECA  26E1               	addwf	fsr1l,f,c
 10880  001ECC  CFDE FFE6          	movff	postinc2,postinc1
 10881  001ED0  CFDE FFE6          	movff	postinc2,postinc1
 10882  001ED4  CFDE FFE6          	movff	postinc2,postinc1
 10883  001ED8  CFDE FFE6          	movff	postinc2,postinc1
 10884  001EDC                     l10971:
 10885                           
 10886                           ; BSR set to: 0
 10887                           ;tff.c: 586: };tff.c: 587: dj->index = 0;
 10888  001EDC  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10889  001EDE  6ED9               	movwf	fsr2l,c
 10890  001EE0  6ADA               	clrf	fsr2h,c
 10891  001EE2  0E02               	movlw	2
 10892  001EE4  26D9               	addwf	fsr2l,f,c
 10893  001EE6  0E00               	movlw	0
 10894  001EE8  6EDE               	movwf	postinc2,c
 10895  001EEA  0E00               	movlw	0
 10896  001EEC  6EDD               	movwf	postdec2,c
 10897  001EEE                     l10973:
 10898                           
 10899                           ; BSR set to: 0
 10900                           ;tff.c: 590: if (!move_window(dj->sect)) return FR_RW_ERROR;
 10901  001EEE  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10902  001EF0  6ED9               	movwf	fsr2l,c
 10903  001EF2  6ADA               	clrf	fsr2h,c
 10904  001EF4  0E0A               	movlw	10
 10905  001EF6  26D9               	addwf	fsr2l,f,c
 10906  001EF8  CFDE F073          	movff	postinc2,move_window@sector
 10907  001EFC  CFDE F074          	movff	postinc2,move_window@sector+1
 10908  001F00  CFDE F075          	movff	postinc2,move_window@sector+2
 10909  001F04  CFDE F076          	movff	postinc2,move_window@sector+3
 10910  001F08  EC4E  F017         	call	_move_window	;wreg free
 10911  001F0C  0900               	iorlw	0
 10912  001F0E  A4D8               	btfss	status,2,c
 10913  001F10  D002               	goto	l10979
 10914  001F12                     u12990:
 10915                           
 10916                           ; BSR set to: 0
 10917  001F12  0E08               	movlw	8
 10918  001F14  0012               	return	
 10919  001F16                     l10979:
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;tff.c: 591: dptr = &fs->win[(dj->index & 15) * 32];
 10923  001F16  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10924  001F18  6ED9               	movwf	fsr2l,c
 10925  001F1A  6ADA               	clrf	fsr2h,c
 10926  001F1C  0E02               	movlw	2
 10927  001F1E  26D9               	addwf	fsr2l,f,c
 10928  001F20  CFDE F0B0          	movff	postinc2,??_reserve_direntry
 10929  001F24  CFDD F0B1          	movff	postdec2,??_reserve_direntry+1
 10930  001F28  0E0F               	movlw	15
 10931  001F2A  17B0               	andwf	??_reserve_direntry& (0+255),f,b
 10932  001F2C  0E00               	movlw	0
 10933  001F2E  17B1               	andwf	(??_reserve_direntry+1)& (0+255),f,b
 10934  001F30  0E05               	movlw	5
 10935  001F32                     u13005:
 10936  001F32  90D8               	bcf	status,0,c
 10937  001F34  37B0               	rlcf	??_reserve_direntry& (0+255),f,b
 10938  001F36  37B1               	rlcf	(??_reserve_direntry+1)& (0+255),f,b
 10939  001F38  2EE8               	decfsz	wreg,f,c
 10940  001F3A  D7FB               	goto	u13005
 10941  001F3C  C0BE  F0B2         	movff	reserve_direntry@fs,??_reserve_direntry+2
 10942  001F40  C0BF  F0B3         	movff	reserve_direntry@fs+1,??_reserve_direntry+3
 10943  001F44  51B0               	movf	??_reserve_direntry& (0+255),w,b
 10944  001F46  27B2               	addwf	(??_reserve_direntry+2)& (0+255),f,b
 10945  001F48  51B1               	movf	(??_reserve_direntry+1)& (0+255),w,b
 10946  001F4A  23B3               	addwfc	(??_reserve_direntry+3)& (0+255),f,b
 10947  001F4C  0E20               	movlw	32
 10948  001F4E  25B2               	addwf	(??_reserve_direntry+2)& (0+255),w,b
 10949  001F50  6FB9               	movwf	reserve_direntry@dptr& (0+255),b
 10950  001F52  0E00               	movlw	0
 10951  001F54  21B3               	addwfc	(??_reserve_direntry+3)& (0+255),w,b
 10952  001F56  6FBA               	movwf	(reserve_direntry@dptr+1)& (0+255),b
 10953                           
 10954                           ; BSR set to: 0
 10955                           ;tff.c: 592: c = dptr[0];
 10956  001F58  C0B9  FFD9         	movff	reserve_direntry@dptr,fsr2l
 10957  001F5C  C0BA  FFDA         	movff	reserve_direntry@dptr+1,fsr2h
 10958  001F60  50DF               	movf	indf2,w,c
 10959  001F62  6FBB               	movwf	reserve_direntry@c& (0+255),b
 10960                           
 10961                           ; BSR set to: 0
 10962                           ;tff.c: 593: if (c == 0 || c == 0xE5) {
 10963  001F64  51BB               	movf	reserve_direntry@c& (0+255),w,b
 10964  001F66  B4D8               	btfsc	status,2,c
 10965  001F68  D004               	goto	u13020
 10966                           
 10967                           ; BSR set to: 0
 10968  001F6A  0EE5               	movlw	229
 10969  001F6C  19BB               	xorwf	reserve_direntry@c& (0+255),w,b
 10970  001F6E  A4D8               	btfss	status,2,c
 10971  001F70  D009               	goto	l10993
 10972  001F72                     u13020:
 10973                           
 10974                           ; BSR set to: 0
 10975                           ;tff.c: 594: *dir = dptr; return FR_OK;
 10976  001F72  51AF               	movf	reserve_direntry@dir& (0+255),w,b
 10977  001F74  6ED9               	movwf	fsr2l,c
 10978  001F76  6ADA               	clrf	fsr2h,c
 10979  001F78  C0B9  FFDE         	movff	reserve_direntry@dptr,postinc2
 10980  001F7C  C0BA  FFDD         	movff	reserve_direntry@dptr+1,postdec2
 10981  001F80                     l10989:
 10982                           
 10983                           ; BSR set to: 0
 10984  001F80  0E00               	movlw	0
 10985  001F82  0012               	return	
 10986  001F84                     l10993:
 10987                           
 10988                           ; BSR set to: 0
 10989                           ;tff.c: 595: };tff.c: 596: } while (next_dir_entry(dj));
 10990  001F84  C0AE  F031         	movff	reserve_direntry@dj,next_dir_entry@dj
 10991  001F88  ECE9  F018         	call	_next_dir_entry	;wreg free
 10992  001F8C  0900               	iorlw	0
 10993  001F8E  A4D8               	btfss	status,2,c
 10994  001F90  D7AE               	goto	l10973
 10995                           
 10996                           ; BSR set to: 0
 10997                           ;tff.c: 600: if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
 10998  001F92  51BC               	movf	reserve_direntry@clust& (0+255),w,b
 10999  001F94  11BD               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 11000  001F96  B4D8               	btfsc	status,2,c
 11001  001F98  D013               	goto	u13050
 11002                           
 11003                           ; BSR set to: 0
 11004  001F9A  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 11005  001F9C  6ED9               	movwf	fsr2l,c
 11006  001F9E  6ADA               	clrf	fsr2h,c
 11007  001FA0  0E08               	movlw	8
 11008  001FA2  26D9               	addwf	fsr2l,f,c
 11009  001FA4  CFDE F0A0          	movff	postinc2,create_chain@clust
 11010  001FA8  CFDD F0A1          	movff	postdec2,create_chain@clust+1
 11011  001FAC  EC23  F018         	call	_create_chain	;wreg free
 11012  001FB0  C0A0  F0BC         	movff	?_create_chain,reserve_direntry@clust
 11013  001FB4  C0A1  F0BD         	movff	?_create_chain+1,reserve_direntry@clust+1
 11014  001FB8  51BC               	movf	reserve_direntry@clust& (0+255),w,b
 11015  001FBA  11BD               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 11016  001FBC  A4D8               	btfss	status,2,c
 11017  001FBE  D002               	goto	l11003
 11018  001FC0                     u13050:
 11019                           
 11020                           ; BSR set to: 0
 11021  001FC0  0E06               	movlw	6
 11022  001FC2  0012               	return	
 11023  001FC4                     l11003:
 11024                           
 11025                           ; BSR set to: 0
 11026                           ;tff.c: 601: if (clust == 1 || !move_window(0)) return FR_RW_ERROR;
 11027  001FC4  05BC               	decf	reserve_direntry@clust& (0+255),w,b
 11028  001FC6  11BD               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 11029  001FC8  B4D8               	btfsc	status,2,c
 11030  001FCA  D7A3               	goto	u12990
 11031                           
 11032                           ; BSR set to: 0
 11033  001FCC  0E00               	movlw	0
 11034  001FCE  6F73               	movwf	move_window@sector& (0+255),b
 11035  001FD0  0E00               	movlw	0
 11036  001FD2  6F74               	movwf	(move_window@sector+1)& (0+255),b
 11037  001FD4  0E00               	movlw	0
 11038  001FD6  6F75               	movwf	(move_window@sector+2)& (0+255),b
 11039  001FD8  0E00               	movlw	0
 11040  001FDA  6F76               	movwf	(move_window@sector+3)& (0+255),b
 11041  001FDC  EC4E  F017         	call	_move_window	;wreg free
 11042  001FE0  0900               	iorlw	0
 11043  001FE2  B4D8               	btfsc	status,2,c
 11044  001FE4  D796               	goto	u12990
 11045                           
 11046                           ; BSR set to: 0
 11047                           ;tff.c: 603: fs->winsect = sector = clust2sect(clust);
 11048  001FE6  C0BC  F025         	movff	reserve_direntry@clust,clust2sect@clust
 11049  001FEA  C0BD  F026         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 11050  001FEE  EC53  F01F         	call	_clust2sect	;wreg free
 11051  001FF2  C025  F0B4         	movff	?_clust2sect,reserve_direntry@sector
 11052  001FF6  C026  F0B5         	movff	?_clust2sect+1,reserve_direntry@sector+1
 11053  001FFA  C027  F0B6         	movff	?_clust2sect+2,reserve_direntry@sector+2
 11054  001FFE  C028  F0B7         	movff	?_clust2sect+3,reserve_direntry@sector+3
 11055  002002  EE20 F004          	lfsr	2,4
 11056  002006  51BE               	movf	reserve_direntry@fs& (0+255),w,b
 11057  002008  26D9               	addwf	fsr2l,f,c
 11058  00200A  51BF               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 11059  00200C  22DA               	addwfc	fsr2h,f,c
 11060  00200E  C0B4  FFDE         	movff	reserve_direntry@sector,postinc2
 11061  002012  C0B5  FFDE         	movff	reserve_direntry@sector+1,postinc2
 11062  002016  C0B6  FFDE         	movff	reserve_direntry@sector+2,postinc2
 11063  00201A  C0B7  FFDE         	movff	reserve_direntry@sector+3,postinc2
 11064                           
 11065                           ;tff.c: 604: memset(fs->win, 0, 512U);
 11066  00201E  0E20               	movlw	32
 11067  002020  25BE               	addwf	reserve_direntry@fs& (0+255),w,b
 11068  002022  6E19               	movwf	memset@p1^0,c
 11069  002024  0E00               	movlw	0
 11070  002026  21BF               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 11071  002028  6E1A               	movwf	(memset@p1+1)^0,c
 11072  00202A  0E00               	movlw	0
 11073  00202C  6E1C               	movwf	(memset@c+1)^0,c
 11074  00202E  0E00               	movlw	0
 11075  002030  6E1B               	movwf	memset@c^0,c
 11076  002032  0E02               	movlw	2
 11077  002034  6E1E               	movwf	(memset@n+1)^0,c
 11078  002036  0E00               	movlw	0
 11079  002038  6E1D               	movwf	memset@n^0,c
 11080  00203A  ECA0  F028         	call	_memset	;wreg free
 11081                           
 11082                           ;tff.c: 605: for (n = fs->csize; n; n--) {
 11083  00203E  0100               	movlb	0	; () banked
 11084  002040  EE20 F01D          	lfsr	2,29
 11085  002044  51BE               	movf	reserve_direntry@fs& (0+255),w,b
 11086  002046  26D9               	addwf	fsr2l,f,c
 11087  002048  51BF               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 11088  00204A  22DA               	addwfc	fsr2h,f,c
 11089  00204C  50DF               	movf	indf2,w,c
 11090  00204E  6FB8               	movwf	reserve_direntry@n& (0+255),b
 11091  002050  D01D               	goto	l11025
 11092  002052                     l11015:
 11093                           
 11094                           ; BSR set to: 0
 11095                           ;tff.c: 606: if (disk_write(0, fs->win, sector, 1) != RES_OK)
 11096  002052  0E20               	movlw	32
 11097  002054  25BE               	addwf	reserve_direntry@fs& (0+255),w,b
 11098  002056  6F68               	movwf	disk_write@buff& (0+255),b
 11099  002058  0E00               	movlw	0
 11100  00205A  21BF               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 11101  00205C  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 11102  00205E  C0B4  F06A         	movff	reserve_direntry@sector,disk_write@sector
 11103  002062  C0B5  F06B         	movff	reserve_direntry@sector+1,disk_write@sector+1
 11104  002066  C0B6  F06C         	movff	reserve_direntry@sector+2,disk_write@sector+2
 11105  00206A  C0B7  F06D         	movff	reserve_direntry@sector+3,disk_write@sector+3
 11106  00206E  0E01               	movlw	1
 11107  002070  6F6E               	movwf	disk_write@count& (0+255),b
 11108  002072  0E00               	movlw	0
 11109  002074  EC66  F026         	call	_disk_write
 11110  002078  0900               	iorlw	0
 11111  00207A  A4D8               	btfss	status,2,c
 11112  00207C  D74A               	goto	u12990
 11113                           
 11114                           ; BSR set to: 0
 11115                           ;tff.c: 608: sector++;
 11116  00207E  0E01               	movlw	1
 11117  002080  27B4               	addwf	reserve_direntry@sector& (0+255),f,b
 11118  002082  0E00               	movlw	0
 11119  002084  23B5               	addwfc	(reserve_direntry@sector+1)& (0+255),f,b
 11120  002086  23B6               	addwfc	(reserve_direntry@sector+2)& (0+255),f,b
 11121  002088  23B7               	addwfc	(reserve_direntry@sector+3)& (0+255),f,b
 11122                           
 11123                           ; BSR set to: 0
 11124  00208A  07B8               	decf	reserve_direntry@n& (0+255),f,b
 11125  00208C                     l11025:
 11126                           
 11127                           ; BSR set to: 0
 11128  00208C  51B8               	movf	reserve_direntry@n& (0+255),w,b
 11129  00208E  A4D8               	btfss	status,2,c
 11130  002090  D7E0               	goto	l11015
 11131                           
 11132                           ; BSR set to: 0
 11133                           ;tff.c: 609: };tff.c: 610: fs->winflag = 1;
 11134  002092  EE20 F01F          	lfsr	2,31
 11135  002096  51BE               	movf	reserve_direntry@fs& (0+255),w,b
 11136  002098  26D9               	addwf	fsr2l,f,c
 11137  00209A  51BF               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 11138  00209C  22DA               	addwfc	fsr2h,f,c
 11139  00209E  0E01               	movlw	1
 11140  0020A0  6EDF               	movwf	indf2,c
 11141                           
 11142                           ;tff.c: 611: *dir = fs->win;
 11143  0020A2  0E20               	movlw	32
 11144  0020A4  25BE               	addwf	reserve_direntry@fs& (0+255),w,b
 11145  0020A6  6FB0               	movwf	??_reserve_direntry& (0+255),b
 11146  0020A8  0E00               	movlw	0
 11147  0020AA  21BF               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 11148  0020AC  6FB1               	movwf	(??_reserve_direntry+1)& (0+255),b
 11149  0020AE  51AF               	movf	reserve_direntry@dir& (0+255),w,b
 11150  0020B0  6ED9               	movwf	fsr2l,c
 11151  0020B2  6ADA               	clrf	fsr2h,c
 11152  0020B4  C0B0  FFDE         	movff	??_reserve_direntry,postinc2
 11153  0020B8  C0B1  FFDD         	movff	??_reserve_direntry+1,postdec2
 11154  0020BC  D761               	goto	l10989
 11155  0020BE                     __end_of_reserve_direntry:
 11156                           	callstack 0
 11157                           
 11158 ;; *************** function _next_dir_entry *****************
 11159 ;; Defined at:
 11160 ;;		line 359 in file "bibliotecas/tff.c"
 11161 ;; Parameters:    Size  Location     Type
 11162 ;;  dj              1   48[COMRAM] PTR struct _DIR_E
 11163 ;;		 -> f_open@dj(14), 
 11164 ;; Auto vars:     Size  Location     Type
 11165 ;;  idx             2   70[BANK0 ] unsigned short 
 11166 ;;  clust           2   68[BANK0 ] unsigned short 
 11167 ;; Return value:  Size  Location     Type
 11168 ;;                  1    wreg      enum E105
 11169 ;; Registers used:
 11170 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11171 ;; Tracked objects:
 11172 ;;		On entry : 0/0
 11173 ;;		On exit  : 3F/0
 11174 ;;		Unchanged: 0/0
 11175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11176 ;;      Params:         1       0       0       0       0       0       0       0       0
 11177 ;;      Locals:         0       4       0       0       0       0       0       0       0
 11178 ;;      Temps:          0       7       0       0       0       0       0       0       0
 11179 ;;      Totals:         1      11       0       0       0       0       0       0       0
 11180 ;;Total ram usage:       12 bytes
 11181 ;; Hardware stack levels used:    1
 11182 ;; Hardware stack levels required when called:   10
 11183 ;; This function calls:
 11184 ;;		_clust2sect
 11185 ;;		_get_cluster
 11186 ;; This function is called by:
 11187 ;;		_trace_path
 11188 ;;		_reserve_direntry
 11189 ;; This function uses a non-reentrant model
 11190 ;;
 11191                           
 11192                           	psect	text55
 11193  0031D2                     __ptext55:
 11194                           	callstack 0
 11195  0031D2                     _next_dir_entry:
 11196                           	callstack 15
 11197                           
 11198                           ;tff.c: 363: CLUST clust;;tff.c: 364: WORD idx;;tff.c: 367: idx = dj->index + 1;
 11199                           
 11200                           ; BSR set to: 0
 11201                           ;incstack = 0
 11202  0031D2  5031               	movf	next_dir_entry@dj^0,w,c
 11203  0031D4  6ED9               	movwf	fsr2l,c
 11204  0031D6  6ADA               	clrf	fsr2h,c
 11205  0031D8  0E02               	movlw	2
 11206  0031DA  26D9               	addwf	fsr2l,f,c
 11207  0031DC  CFDE F09D          	movff	postinc2,??_next_dir_entry
 11208  0031E0  CFDD F09E          	movff	postdec2,??_next_dir_entry+1
 11209  0031E4  0E01               	movlw	1
 11210  0031E6  0100               	movlb	0	; () banked
 11211  0031E8  259D               	addwf	??_next_dir_entry& (0+255),w,b
 11212  0031EA  6FA6               	movwf	next_dir_entry@idx& (0+255),b
 11213  0031EC  0E00               	movlw	0
 11214  0031EE  219E               	addwfc	(??_next_dir_entry+1)& (0+255),w,b
 11215  0031F0  6FA7               	movwf	(next_dir_entry@idx+1)& (0+255),b
 11216                           
 11217                           ; BSR set to: 0
 11218                           ;tff.c: 368: if ((idx & 15) == 0) {
 11219  0031F2  C0A6  F09D         	movff	next_dir_entry@idx,??_next_dir_entry
 11220  0031F6  0E0F               	movlw	15
 11221  0031F8  179D               	andwf	??_next_dir_entry& (0+255),f,b
 11222  0031FA  A4D8               	btfss	status,2,c
 11223  0031FC  D091               	goto	l10711
 11224                           
 11225                           ; BSR set to: 0
 11226                           ;tff.c: 369: dj->sect++;
 11227  0031FE  5031               	movf	next_dir_entry@dj^0,w,c
 11228  003200  6ED9               	movwf	fsr2l,c
 11229  003202  6ADA               	clrf	fsr2h,c
 11230  003204  0E0A               	movlw	10
 11231  003206  26D9               	addwf	fsr2l,f,c
 11232  003208  2ADE               	incf	postinc2,f,c
 11233  00320A  0E00               	movlw	0
 11234  00320C  22DE               	addwfc	postinc2,f,c
 11235  00320E  22DE               	addwfc	postinc2,f,c
 11236  003210  22DE               	addwfc	postinc2,f,c
 11237                           
 11238                           ;tff.c: 370: if (dj->clust == 0) {
 11239  003212  5031               	movf	next_dir_entry@dj^0,w,c
 11240  003214  6ED9               	movwf	fsr2l,c
 11241  003216  6ADA               	clrf	fsr2h,c
 11242  003218  0E08               	movlw	8
 11243  00321A  26D9               	addwf	fsr2l,f,c
 11244  00321C  50DE               	movf	postinc2,w,c
 11245  00321E  10DE               	iorwf	postinc2,w,c
 11246  003220  A4D8               	btfss	status,2,c
 11247  003222  D013               	goto	l10695
 11248                           
 11249                           ; BSR set to: 0
 11250                           ;tff.c: 371: if (idx >= dj->fs->n_rootdir) return FALSE;
 11251  003224  5031               	movf	next_dir_entry@dj^0,w,c
 11252  003226  6ED9               	movwf	fsr2l,c
 11253  003228  6ADA               	clrf	fsr2h,c
 11254  00322A  0E04               	movlw	4
 11255  00322C  26D9               	addwf	fsr2l,f,c
 11256  00322E  EE10 F002          	lfsr	1,2
 11257  003232  50DE               	movf	postinc2,w,c
 11258  003234  26E1               	addwf	fsr1l,f,c
 11259  003236  50DD               	movf	postdec2,w,c
 11260  003238  22E2               	addwfc	fsr1h,f,c
 11261  00323A  50E6               	movf	postinc1,w,c
 11262  00323C  5DA6               	subwf	next_dir_entry@idx& (0+255),w,b
 11263  00323E  50E6               	movf	postinc1,w,c
 11264  003240  59A7               	subwfb	(next_dir_entry@idx+1)& (0+255),w,b
 11265  003242  A0D8               	btfss	status,0,c
 11266  003244  D06D               	goto	l10711
 11267  003246                     u12500:
 11268                           
 11269                           ; BSR set to: 0
 11270  003246  0E00               	movlw	0
 11271  003248  0012               	return	
 11272  00324A                     l10695:
 11273                           
 11274                           ; BSR set to: 0
 11275                           ;tff.c: 373: if (((idx / 16) & (dj->fs->csize - 1)) == 0) {
 11276  00324A  C0A6  F09D         	movff	next_dir_entry@idx,??_next_dir_entry
 11277  00324E  C0A7  F09E         	movff	next_dir_entry@idx+1,??_next_dir_entry+1
 11278  003252  0E04               	movlw	4
 11279  003254  6F9F               	movwf	(??_next_dir_entry+2)& (0+255),b
 11280  003256                     u12515:
 11281  003256  90D8               	bcf	status,0,c
 11282  003258  339E               	rrcf	(??_next_dir_entry+1)& (0+255),f,b
 11283  00325A  339D               	rrcf	??_next_dir_entry& (0+255),f,b
 11284  00325C  2F9F               	decfsz	(??_next_dir_entry+2)& (0+255),f,b
 11285  00325E  D7FB               	goto	u12515
 11286  003260  0EFF               	movlw	255
 11287  003262  6FA0               	movwf	(??_next_dir_entry+3)& (0+255),b
 11288  003264  0EFF               	movlw	255
 11289  003266  6FA1               	movwf	(??_next_dir_entry+4)& (0+255),b
 11290  003268  5031               	movf	next_dir_entry@dj^0,w,c
 11291  00326A  6ED9               	movwf	fsr2l,c
 11292  00326C  6ADA               	clrf	fsr2h,c
 11293  00326E  0E04               	movlw	4
 11294  003270  26D9               	addwf	fsr2l,f,c
 11295  003272  EE10 F01D          	lfsr	1,29
 11296  003276  50DE               	movf	postinc2,w,c
 11297  003278  26E1               	addwf	fsr1l,f,c
 11298  00327A  50DD               	movf	postdec2,w,c
 11299  00327C  22E2               	addwfc	fsr1h,f,c
 11300  00327E  50E7               	movf	indf1,w,c
 11301  003280  6FA2               	movwf	(??_next_dir_entry+5)& (0+255),b
 11302  003282  6BA3               	clrf	(??_next_dir_entry+6)& (0+255),b
 11303  003284  51A0               	movf	(??_next_dir_entry+3)& (0+255),w,b
 11304  003286  27A2               	addwf	(??_next_dir_entry+5)& (0+255),f,b
 11305  003288  51A1               	movf	(??_next_dir_entry+4)& (0+255),w,b
 11306  00328A  23A3               	addwfc	(??_next_dir_entry+6)& (0+255),f,b
 11307  00328C  519D               	movf	??_next_dir_entry& (0+255),w,b
 11308  00328E  17A2               	andwf	(??_next_dir_entry+5)& (0+255),f,b
 11309  003290  519E               	movf	(??_next_dir_entry+1)& (0+255),w,b
 11310  003292  17A3               	andwf	(??_next_dir_entry+6)& (0+255),f,b
 11311  003294  51A2               	movf	(??_next_dir_entry+5)& (0+255),w,b
 11312  003296  11A3               	iorwf	(??_next_dir_entry+6)& (0+255),w,b
 11313  003298  A4D8               	btfss	status,2,c
 11314  00329A  D042               	goto	l10711
 11315                           
 11316                           ; BSR set to: 0
 11317                           ;tff.c: 374: clust = get_cluster(dj->clust);
 11318  00329C  5031               	movf	next_dir_entry@dj^0,w,c
 11319  00329E  6ED9               	movwf	fsr2l,c
 11320  0032A0  6ADA               	clrf	fsr2h,c
 11321  0032A2  0E08               	movlw	8
 11322  0032A4  26D9               	addwf	fsr2l,f,c
 11323  0032A6  CFDE F088          	movff	postinc2,get_cluster@clust
 11324  0032AA  CFDD F089          	movff	postdec2,get_cluster@clust+1
 11325  0032AE  ECA7  F012         	call	_get_cluster	;wreg free
 11326  0032B2  C088  F0A4         	movff	?_get_cluster,next_dir_entry@clust
 11327  0032B6  C089  F0A5         	movff	?_get_cluster+1,next_dir_entry@clust+1
 11328                           
 11329                           ; BSR set to: 0
 11330                           ;tff.c: 375: if (clust < 2 || clust >= dj->fs->max_clust)
 11331  0032BA  51A5               	movf	(next_dir_entry@clust+1)& (0+255),w,b
 11332  0032BC  E104               	bnz	u12530
 11333  0032BE  0E02               	movlw	2
 11334  0032C0  5DA4               	subwf	next_dir_entry@clust& (0+255),w,b
 11335  0032C2  A0D8               	btfss	status,0,c
 11336  0032C4  D7C0               	goto	u12500
 11337  0032C6                     u12530:
 11338                           
 11339                           ; BSR set to: 0
 11340  0032C6  5031               	movf	next_dir_entry@dj^0,w,c
 11341  0032C8  6ED9               	movwf	fsr2l,c
 11342  0032CA  6ADA               	clrf	fsr2h,c
 11343  0032CC  0E04               	movlw	4
 11344  0032CE  26D9               	addwf	fsr2l,f,c
 11345  0032D0  EE10 F016          	lfsr	1,22
 11346  0032D4  50DE               	movf	postinc2,w,c
 11347  0032D6  26E1               	addwf	fsr1l,f,c
 11348  0032D8  50DD               	movf	postdec2,w,c
 11349  0032DA  22E2               	addwfc	fsr1h,f,c
 11350  0032DC  50E6               	movf	postinc1,w,c
 11351  0032DE  5DA4               	subwf	next_dir_entry@clust& (0+255),w,b
 11352  0032E0  50E6               	movf	postinc1,w,c
 11353  0032E2  59A5               	subwfb	(next_dir_entry@clust+1)& (0+255),w,b
 11354  0032E4  B0D8               	btfsc	status,0,c
 11355  0032E6  D7AF               	goto	u12500
 11356                           
 11357                           ; BSR set to: 0
 11358                           ;tff.c: 377: dj->clust = clust;
 11359  0032E8  5031               	movf	next_dir_entry@dj^0,w,c
 11360  0032EA  6ED9               	movwf	fsr2l,c
 11361  0032EC  6ADA               	clrf	fsr2h,c
 11362  0032EE  0E08               	movlw	8
 11363  0032F0  26D9               	addwf	fsr2l,f,c
 11364  0032F2  C0A4  FFDE         	movff	next_dir_entry@clust,postinc2
 11365  0032F6  C0A5  FFDD         	movff	next_dir_entry@clust+1,postdec2
 11366                           
 11367                           ; BSR set to: 0
 11368                           ;tff.c: 378: dj->sect = clust2sect(clust);
 11369  0032FA  C0A4  F025         	movff	next_dir_entry@clust,clust2sect@clust
 11370  0032FE  C0A5  F026         	movff	next_dir_entry@clust+1,clust2sect@clust+1
 11371  003302  EC53  F01F         	call	_clust2sect	;wreg free
 11372  003306  5031               	movf	next_dir_entry@dj^0,w,c
 11373  003308  6ED9               	movwf	fsr2l,c
 11374  00330A  6ADA               	clrf	fsr2h,c
 11375  00330C  0E0A               	movlw	10
 11376  00330E  26D9               	addwf	fsr2l,f,c
 11377  003310  C025  FFDE         	movff	?_clust2sect,postinc2
 11378  003314  C026  FFDE         	movff	?_clust2sect+1,postinc2
 11379  003318  C027  FFDE         	movff	?_clust2sect+2,postinc2
 11380  00331C  C028  FFDE         	movff	?_clust2sect+3,postinc2
 11381  003320                     l10711:
 11382                           
 11383                           ; BSR set to: 0
 11384                           ;tff.c: 379: };tff.c: 380: };tff.c: 381: };tff.c: 382: dj->index = idx;
 11385  003320  5031               	movf	next_dir_entry@dj^0,w,c
 11386  003322  6ED9               	movwf	fsr2l,c
 11387  003324  6ADA               	clrf	fsr2h,c
 11388  003326  0E02               	movlw	2
 11389  003328  26D9               	addwf	fsr2l,f,c
 11390  00332A  C0A6  FFDE         	movff	next_dir_entry@idx,postinc2
 11391  00332E  C0A7  FFDD         	movff	next_dir_entry@idx+1,postdec2
 11392                           
 11393                           ; BSR set to: 0
 11394                           ;tff.c: 383: return TRUE;
 11395  003332  0E01               	movlw	1
 11396                           
 11397                           ; BSR set to: 0
 11398  003334  0012               	return		;funcret
 11399  003336                     __end_of_next_dir_entry:
 11400                           	callstack 0
 11401                           
 11402 ;; *************** function _clust2sect *****************
 11403 ;; Defined at:
 11404 ;;		line 339 in file "bibliotecas/tff.c"
 11405 ;; Parameters:    Size  Location     Type
 11406 ;;  clust           2   36[COMRAM] unsigned short 
 11407 ;; Auto vars:     Size  Location     Type
 11408 ;;  fs              2   45[COMRAM] PTR struct _FATFS
 11409 ;;		 -> NULL(0), fs(544), 
 11410 ;; Return value:  Size  Location     Type
 11411 ;;                  4   36[COMRAM] unsigned long 
 11412 ;; Registers used:
 11413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11414 ;; Tracked objects:
 11415 ;;		On entry : 3F/0
 11416 ;;		On exit  : 3F/0
 11417 ;;		Unchanged: 3F/0
 11418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11419 ;;      Params:         4       0       0       0       0       0       0       0       0
 11420 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11421 ;;      Temps:          5       0       0       0       0       0       0       0       0
 11422 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11423 ;;Total ram usage:       11 bytes
 11424 ;; Hardware stack levels used:    1
 11425 ;; Hardware stack levels required when called:    4
 11426 ;; This function calls:
 11427 ;;		___lmul
 11428 ;; This function is called by:
 11429 ;;		_next_dir_entry
 11430 ;;		_trace_path
 11431 ;;		_reserve_direntry
 11432 ;;		_f_write
 11433 ;;		_f_read
 11434 ;; This function uses a non-reentrant model
 11435 ;;
 11436                           
 11437                           	psect	text56
 11438  003EA6                     __ptext56:
 11439                           	callstack 0
 11440  003EA6                     _clust2sect:
 11441                           	callstack 19
 11442                           
 11443                           ; BSR set to: 0
 11444                           ;tff.c: 343: FATFS *fs = FatFs;
 11445                           
 11446                           ; BSR set to: 0
 11447                           ;incstack = 0
 11448  003EA6  C039  F02E         	movff	_FatFs,clust2sect@fs
 11449  003EAA  C03A  F02F         	movff	_FatFs+1,clust2sect@fs+1
 11450                           
 11451                           ;tff.c: 346: clust -= 2;
 11452  003EAE  0E02               	movlw	2
 11453  003EB0  5E25               	subwf	clust2sect@clust^0,f,c
 11454  003EB2  0E00               	movlw	0
 11455  003EB4  5A26               	subwfb	(clust2sect@clust+1)^0,f,c
 11456                           
 11457                           ; BSR set to: 0
 11458                           ;tff.c: 347: if (clust >= (fs->max_clust - 2)) return 0;
 11459  003EB6  0EFE               	movlw	254
 11460  003EB8  6E29               	movwf	??_clust2sect^0,c
 11461  003EBA  0EFF               	movlw	255
 11462  003EBC  6E2A               	movwf	(??_clust2sect+1)^0,c
 11463  003EBE  EE20 F016          	lfsr	2,22
 11464  003EC2  502E               	movf	clust2sect@fs^0,w,c
 11465  003EC4  26D9               	addwf	fsr2l,f,c
 11466  003EC6  502F               	movf	(clust2sect@fs+1)^0,w,c
 11467  003EC8  22DA               	addwfc	fsr2h,f,c
 11468  003ECA  CFDE F02B          	movff	postinc2,??_clust2sect+2
 11469  003ECE  CFDD F02C          	movff	postdec2,??_clust2sect+3
 11470  003ED2  5029               	movf	??_clust2sect^0,w,c
 11471  003ED4  262B               	addwf	(??_clust2sect+2)^0,f,c
 11472  003ED6  502A               	movf	(??_clust2sect+1)^0,w,c
 11473  003ED8  222C               	addwfc	(??_clust2sect+3)^0,f,c
 11474  003EDA  502B               	movf	(??_clust2sect+2)^0,w,c
 11475  003EDC  5C25               	subwf	clust2sect@clust^0,w,c
 11476  003EDE  502C               	movf	(??_clust2sect+3)^0,w,c
 11477  003EE0  5826               	subwfb	(clust2sect@clust+1)^0,w,c
 11478  003EE2  A0D8               	btfss	status,0,c
 11479  003EE4  D009               	goto	l10257
 11480                           
 11481                           ; BSR set to: 0
 11482  003EE6  0E00               	movlw	0
 11483  003EE8  6E25               	movwf	?_clust2sect^0,c
 11484  003EEA  0E00               	movlw	0
 11485  003EEC  6E26               	movwf	(?_clust2sect+1)^0,c
 11486  003EEE  0E00               	movlw	0
 11487  003EF0  6E27               	movwf	(?_clust2sect+2)^0,c
 11488  003EF2  0E00               	movlw	0
 11489  003EF4  6E28               	movwf	(?_clust2sect+3)^0,c
 11490  003EF6  0012               	return	
 11491  003EF8                     l10257:
 11492                           
 11493                           ; BSR set to: 0
 11494                           ;tff.c: 348: return (DWORD)clust * fs->csize + fs->database;
 11495  003EF8  EE20 F010          	lfsr	2,16
 11496  003EFC  502E               	movf	clust2sect@fs^0,w,c
 11497  003EFE  26D9               	addwf	fsr2l,f,c
 11498  003F00  502F               	movf	(clust2sect@fs+1)^0,w,c
 11499  003F02  22DA               	addwfc	fsr2h,f,c
 11500  003F04  CFDE F029          	movff	postinc2,??_clust2sect
 11501  003F08  CFDE F02A          	movff	postinc2,??_clust2sect+1
 11502  003F0C  CFDE F02B          	movff	postinc2,??_clust2sect+2
 11503  003F10  CFDE F02C          	movff	postinc2,??_clust2sect+3
 11504  003F14  C025  F019         	movff	clust2sect@clust,___lmul@multiplier
 11505  003F18  C026  F01A         	movff	clust2sect@clust+1,___lmul@multiplier+1
 11506  003F1C  6A1B               	clrf	(___lmul@multiplier+2)^0,c
 11507  003F1E  6A1C               	clrf	(___lmul@multiplier+3)^0,c
 11508  003F20  EE20 F01D          	lfsr	2,29
 11509  003F24  502E               	movf	clust2sect@fs^0,w,c
 11510  003F26  26D9               	addwf	fsr2l,f,c
 11511  003F28  502F               	movf	(clust2sect@fs+1)^0,w,c
 11512  003F2A  22DA               	addwfc	fsr2h,f,c
 11513  003F2C  50DF               	movf	indf2,w,c
 11514  003F2E  6E2D               	movwf	(??_clust2sect+4)^0,c
 11515  003F30  502D               	movf	(??_clust2sect+4)^0,w,c
 11516  003F32  6E1D               	movwf	___lmul@multiplicand^0,c
 11517  003F34  6A1E               	clrf	(___lmul@multiplicand+1)^0,c
 11518  003F36  6A1F               	clrf	(___lmul@multiplicand+2)^0,c
 11519  003F38  6A20               	clrf	(___lmul@multiplicand+3)^0,c
 11520  003F3A  EC95  F025         	call	___lmul	;wreg free
 11521  003F3E  5029               	movf	??_clust2sect^0,w,c
 11522  003F40  2419               	addwf	?___lmul^0,w,c
 11523  003F42  6E25               	movwf	?_clust2sect^0,c
 11524  003F44  502A               	movf	(??_clust2sect+1)^0,w,c
 11525  003F46  201A               	addwfc	(?___lmul+1)^0,w,c
 11526  003F48  6E26               	movwf	(?_clust2sect+1)^0,c
 11527  003F4A  502B               	movf	(??_clust2sect+2)^0,w,c
 11528  003F4C  201B               	addwfc	(?___lmul+2)^0,w,c
 11529  003F4E  6E27               	movwf	(?_clust2sect+2)^0,c
 11530  003F50  502C               	movf	(??_clust2sect+3)^0,w,c
 11531  003F52  201C               	addwfc	(?___lmul+3)^0,w,c
 11532  003F54  6E28               	movwf	(?_clust2sect+3)^0,c
 11533                           
 11534                           ; BSR set to: 0
 11535  003F56  0012               	return		;funcret
 11536  003F58                     __end_of_clust2sect:
 11537                           	callstack 0
 11538                           
 11539 ;; *************** function _remove_chain *****************
 11540 ;; Defined at:
 11541 ;;		line 250 in file "bibliotecas/tff.c"
 11542 ;; Parameters:    Size  Location     Type
 11543 ;;  clust           2   64[BANK0 ] unsigned short 
 11544 ;; Auto vars:     Size  Location     Type
 11545 ;;  fs              2   70[BANK0 ] PTR struct _FATFS
 11546 ;;		 -> NULL(0), fs(544), 
 11547 ;;  nxt             2   68[BANK0 ] unsigned short 
 11548 ;; Return value:  Size  Location     Type
 11549 ;;                  1    wreg      enum E105
 11550 ;; Registers used:
 11551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11552 ;; Tracked objects:
 11553 ;;		On entry : 3F/0
 11554 ;;		On exit  : 3F/0
 11555 ;;		Unchanged: 0/0
 11556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11557 ;;      Params:         0       2       0       0       0       0       0       0       0
 11558 ;;      Locals:         0       4       0       0       0       0       0       0       0
 11559 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11560 ;;      Totals:         0       8       0       0       0       0       0       0       0
 11561 ;;Total ram usage:        8 bytes
 11562 ;; Hardware stack levels used:    1
 11563 ;; Hardware stack levels required when called:   10
 11564 ;; This function calls:
 11565 ;;		_get_cluster
 11566 ;;		_put_cluster
 11567 ;; This function is called by:
 11568 ;;		_f_open
 11569 ;; This function uses a non-reentrant model
 11570 ;;
 11571                           
 11572                           	psect	text57
 11573  0042A2                     __ptext57:
 11574                           	callstack 0
 11575  0042A2                     _remove_chain:
 11576                           	callstack 16
 11577                           
 11578                           ; BSR set to: 0
 11579                           ;tff.c: 254: CLUST nxt;;tff.c: 255: FATFS *fs = FatFs;
 11580                           
 11581                           ; BSR set to: 0
 11582                           ;incstack = 0
 11583  0042A2  C039  F0A6         	movff	_FatFs,remove_chain@fs
 11584  0042A6  C03A  F0A7         	movff	_FatFs+1,remove_chain@fs+1
 11585                           
 11586                           ;tff.c: 258: while (clust >= 2 && clust < fs->max_clust) {
 11587  0042AA  D035               	goto	l10867
 11588  0042AC                     l10847:
 11589                           
 11590                           ; BSR set to: 0
 11591                           ;tff.c: 259: nxt = get_cluster(clust);
 11592  0042AC  C0A0  F088         	movff	remove_chain@clust,get_cluster@clust
 11593  0042B0  C0A1  F089         	movff	remove_chain@clust+1,get_cluster@clust+1
 11594  0042B4  ECA7  F012         	call	_get_cluster	;wreg free
 11595  0042B8  C088  F0A4         	movff	?_get_cluster,remove_chain@nxt
 11596  0042BC  C089  F0A5         	movff	?_get_cluster+1,remove_chain@nxt+1
 11597                           
 11598                           ; BSR set to: 0
 11599                           ;tff.c: 260: if (nxt == 1) return FALSE;
 11600  0042C0  05A4               	decf	remove_chain@nxt& (0+255),w,b
 11601  0042C2  11A5               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
 11602  0042C4  A4D8               	btfss	status,2,c
 11603  0042C6  D002               	goto	l10855
 11604  0042C8                     u12790:
 11605                           
 11606                           ; BSR set to: 0
 11607  0042C8  0E00               	movlw	0
 11608  0042CA  0012               	return	
 11609  0042CC                     l10855:
 11610                           
 11611                           ; BSR set to: 0
 11612                           ;tff.c: 261: if (!put_cluster(clust, 0)) return FALSE;
 11613  0042CC  C0A0  F088         	movff	remove_chain@clust,put_cluster@clust
 11614  0042D0  C0A1  F089         	movff	remove_chain@clust+1,put_cluster@clust+1
 11615  0042D4  0E00               	movlw	0
 11616  0042D6  6F8B               	movwf	(put_cluster@val+1)& (0+255),b
 11617  0042D8  0E00               	movlw	0
 11618  0042DA  6F8A               	movwf	put_cluster@val& (0+255),b
 11619  0042DC  EC5F  F010         	call	_put_cluster	;wreg free
 11620  0042E0  0900               	iorlw	0
 11621  0042E2  B4D8               	btfsc	status,2,c
 11622  0042E4  D7F1               	goto	u12790
 11623                           
 11624                           ; BSR set to: 0
 11625                           ;tff.c: 262: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 11626  0042E6  EE20 F01A          	lfsr	2,26
 11627  0042EA  51A6               	movf	remove_chain@fs& (0+255),w,b
 11628  0042EC  26D9               	addwf	fsr2l,f,c
 11629  0042EE  51A7               	movf	(remove_chain@fs+1)& (0+255),w,b
 11630  0042F0  22DA               	addwfc	fsr2h,f,c
 11631  0042F2  28DE               	incf	postinc2,w,c
 11632  0042F4  E103               	bnz	u12810
 11633  0042F6  28DE               	incf	postinc2,w,c
 11634  0042F8  B4D8               	btfsc	status,2,c
 11635  0042FA  D009               	goto	l10865
 11636  0042FC                     u12810:
 11637                           
 11638                           ; BSR set to: 0
 11639                           ;tff.c: 263: fs->free_clust++;
 11640  0042FC  EE20 F01A          	lfsr	2,26
 11641  004300  51A6               	movf	remove_chain@fs& (0+255),w,b
 11642  004302  26D9               	addwf	fsr2l,f,c
 11643  004304  51A7               	movf	(remove_chain@fs+1)& (0+255),w,b
 11644  004306  22DA               	addwfc	fsr2h,f,c
 11645  004308  2ADE               	incf	postinc2,f,c
 11646  00430A  0E00               	movlw	0
 11647  00430C  22DD               	addwfc	postdec2,f,c
 11648  00430E                     l10865:
 11649                           
 11650                           ; BSR set to: 0
 11651                           ;tff.c: 267: };tff.c: 268: clust = nxt;
 11652  00430E  C0A4  F0A0         	movff	remove_chain@nxt,remove_chain@clust
 11653  004312  C0A5  F0A1         	movff	remove_chain@nxt+1,remove_chain@clust+1
 11654  004316                     l10867:
 11655                           
 11656                           ; BSR set to: 0
 11657  004316  51A1               	movf	(remove_chain@clust+1)& (0+255),w,b
 11658  004318  E104               	bnz	u12820
 11659  00431A  0E02               	movlw	2
 11660  00431C  5DA0               	subwf	remove_chain@clust& (0+255),w,b
 11661  00431E  A0D8               	btfss	status,0,c
 11662  004320  D00C               	goto	u12830
 11663  004322                     u12820:
 11664                           
 11665                           ; BSR set to: 0
 11666  004322  EE20 F016          	lfsr	2,22
 11667  004326  51A6               	movf	remove_chain@fs& (0+255),w,b
 11668  004328  26D9               	addwf	fsr2l,f,c
 11669  00432A  51A7               	movf	(remove_chain@fs+1)& (0+255),w,b
 11670  00432C  22DA               	addwfc	fsr2h,f,c
 11671  00432E  50DE               	movf	postinc2,w,c
 11672  004330  5DA0               	subwf	remove_chain@clust& (0+255),w,b
 11673  004332  50DE               	movf	postinc2,w,c
 11674  004334  59A1               	subwfb	(remove_chain@clust+1)& (0+255),w,b
 11675  004336  A0D8               	btfss	status,0,c
 11676  004338  D7B9               	goto	l10847
 11677  00433A                     u12830:
 11678                           
 11679                           ; BSR set to: 0
 11680                           ;tff.c: 269: };tff.c: 270: return TRUE;
 11681  00433A  0E01               	movlw	1
 11682                           
 11683                           ; BSR set to: 0
 11684  00433C  0012               	return		;funcret
 11685  00433E                     __end_of_remove_chain:
 11686                           	callstack 0
 11687                           
 11688 ;; *************** function _memcpy *****************
 11689 ;; Defined at:
 11690 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\memcpy.c"
 11691 ;; Parameters:    Size  Location     Type
 11692 ;;  d1              2   24[COMRAM] PTR void 
 11693 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 11694 ;;  s1              2   26[COMRAM] PTR const void 
 11695 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 11696 ;;		 -> fs(544), 
 11697 ;;  n               2   28[COMRAM] unsigned int 
 11698 ;; Auto vars:     Size  Location     Type
 11699 ;;  s               2   33[COMRAM] PTR const unsigned char 
 11700 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 11701 ;;		 -> fs(544), 
 11702 ;;  d               2   31[COMRAM] PTR unsigned char 
 11703 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 11704 ;;  tmp             1   30[COMRAM] unsigned char 
 11705 ;; Return value:  Size  Location     Type
 11706 ;;                  2   24[COMRAM] PTR void 
 11707 ;; Registers used:
 11708 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11709 ;; Tracked objects:
 11710 ;;		On entry : 0/0
 11711 ;;		On exit  : 0/0
 11712 ;;		Unchanged: 0/0
 11713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11714 ;;      Params:         6       0       0       0       0       0       0       0       0
 11715 ;;      Locals:         5       0       0       0       0       0       0       0       0
 11716 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11717 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11718 ;;Total ram usage:       11 bytes
 11719 ;; Hardware stack levels used:    1
 11720 ;; Hardware stack levels required when called:    3
 11721 ;; This function calls:
 11722 ;;		Nothing
 11723 ;; This function is called by:
 11724 ;;		_f_open
 11725 ;;		_f_write
 11726 ;;		_f_read
 11727 ;; This function uses a non-reentrant model
 11728 ;;
 11729                           
 11730                           	psect	text58
 11731  004EC2                     __ptext58:
 11732                           	callstack 0
 11733  004EC2                     _memcpy:
 11734                           	callstack 20
 11735                           
 11736                           ; BSR set to: 0
 11737                           ;incstack = 0
 11738  004EC2  C01B  F022         	movff	memcpy@s1,memcpy@s
 11739  004EC6  C01C  F023         	movff	memcpy@s1+1,memcpy@s+1
 11740  004ECA  C019  F020         	movff	memcpy@d1,memcpy@d
 11741  004ECE  C01A  F021         	movff	memcpy@d1+1,memcpy@d+1
 11742  004ED2  D010               	goto	l10291
 11743  004ED4                     l10283:
 11744  004ED4  C022  FFD9         	movff	memcpy@s,fsr2l
 11745  004ED8  C023  FFDA         	movff	memcpy@s+1,fsr2h
 11746  004EDC  50DF               	movf	indf2,w,c
 11747  004EDE  6E1F               	movwf	memcpy@tmp^0,c
 11748  004EE0  4A22               	infsnz	memcpy@s^0,f,c
 11749  004EE2  2A23               	incf	(memcpy@s+1)^0,f,c
 11750  004EE4  C020  FFD9         	movff	memcpy@d,fsr2l
 11751  004EE8  C021  FFDA         	movff	memcpy@d+1,fsr2h
 11752  004EEC  C01F  FFDF         	movff	memcpy@tmp,indf2
 11753  004EF0  4A20               	infsnz	memcpy@d^0,f,c
 11754  004EF2  2A21               	incf	(memcpy@d+1)^0,f,c
 11755  004EF4                     l10291:
 11756  004EF4  061D               	decf	memcpy@n^0,f,c
 11757  004EF6  A0D8               	btfss	status,0,c
 11758  004EF8  061E               	decf	(memcpy@n+1)^0,f,c
 11759  004EFA  281D               	incf	memcpy@n^0,w,c
 11760  004EFC  E1EB               	bnz	l10283
 11761  004EFE  281E               	incf	(memcpy@n+1)^0,w,c
 11762  004F00  B4D8               	btfsc	status,2,c
 11763  004F02  0012               	return	
 11764  004F04  D7E7               	goto	l10283
 11765  004F06                     __end_of_memcpy:
 11766                           	callstack 0
 11767                           
 11768 ;; *************** function _auto_mount *****************
 11769 ;; Defined at:
 11770 ;;		line 652 in file "bibliotecas/tff.c"
 11771 ;; Parameters:    Size  Location     Type
 11772 ;;  path            1   27[BANK0 ] PTR PTR const unsigned c
 11773 ;;		 -> f_opendir@path(2), f_open@path(2), 
 11774 ;;  chk_wp          1   28[BANK0 ] unsigned char 
 11775 ;; Auto vars:     Size  Location     Type
 11776 ;;  fatsize         4   67[BANK0 ] unsigned long 
 11777 ;;  totalsect       4   59[BANK0 ] unsigned long 
 11778 ;;  bootsect        4   55[BANK0 ] unsigned long 
 11779 ;;  maxclust        4   51[BANK0 ] unsigned long 
 11780 ;;  fs              2   71[BANK0 ] PTR struct _FATFS
 11781 ;;		 -> NULL(0), fs(544), 
 11782 ;;  p               2   63[BANK0 ] PTR const unsigned char 
 11783 ;;		 -> STR_22(13), filename(15), 
 11784 ;;  stat            1   66[BANK0 ] unsigned char 
 11785 ;;  fmt             1   65[BANK0 ] unsigned char 
 11786 ;; Return value:  Size  Location     Type
 11787 ;;                  1    wreg      enum E155
 11788 ;; Registers used:
 11789 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11790 ;; Tracked objects:
 11791 ;;		On entry : 3F/0
 11792 ;;		On exit  : 3E/0
 11793 ;;		Unchanged: 0/0
 11794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11795 ;;      Params:         0       2       0       0       0       0       0       0       0
 11796 ;;      Locals:         0      22       0       0       0       0       0       0       0
 11797 ;;      Temps:          0      22       0       0       0       0       0       0       0
 11798 ;;      Totals:         0      46       0       0       0       0       0       0       0
 11799 ;;Total ram usage:       46 bytes
 11800 ;; Hardware stack levels used:    1
 11801 ;; Hardware stack levels required when called:    9
 11802 ;; This function calls:
 11803 ;;		___lldiv
 11804 ;;		___lmul
 11805 ;;		_check_fs
 11806 ;;		_disk_initialize
 11807 ;;		_disk_status
 11808 ;;		_memset
 11809 ;; This function is called by:
 11810 ;;		_f_open
 11811 ;; This function uses a non-reentrant model
 11812 ;;
 11813                           
 11814                           	psect	text59
 11815  00059C                     __ptext59:
 11816                           	callstack 0
 11817  00059C                     _auto_mount:
 11818                           	callstack 17
 11819                           
 11820                           ; BSR set to: 0
 11821                           ;tff.c: 657: BYTE fmt;;tff.c: 658: DSTATUS stat;;tff.c: 659: DWORD bootsect, fatsize, to
      +                          talsect, maxclust;;tff.c: 660: const char *p = *path;
 11822                           
 11823                           ;incstack = 0
 11824  00059C  517B               	movf	auto_mount@path& (0+255),w,b
 11825  00059E  6ED9               	movwf	fsr2l,c
 11826  0005A0  6ADA               	clrf	fsr2h,c
 11827  0005A2  CFDE F09F          	movff	postinc2,auto_mount@p
 11828  0005A6  CFDD F0A0          	movff	postdec2,auto_mount@p+1
 11829                           
 11830                           ;tff.c: 661: FATFS *fs;;tff.c: 664: while (*p == ' ') p++;
 11831  0005AA  D003               	goto	l11037
 11832  0005AC                     l11035:
 11833  0005AC  0100               	movlb	0	; () banked
 11834  0005AE  4B9F               	infsnz	auto_mount@p& (0+255),f,b
 11835  0005B0  2BA0               	incf	(auto_mount@p+1)& (0+255),f,b
 11836  0005B2                     l11037:
 11837                           
 11838                           ; BSR set to: 0
 11839  0005B2  C09F  FFF6         	movff	auto_mount@p,tblptrl
 11840  0005B6  C0A0  FFF7         	movff	auto_mount@p+1,tblptrh
 11841  0005BA  6AF8               	clrf	tblptru,c
 11842  0005BC  0E07               	movlw	(high __ramtop+-1)
 11843  0005BE  64F7               	cpfsgt	tblptrh,c
 11844  0005C0  D003               	bra	u13107
 11845  0005C2  0008               	tblrd		*
 11846  0005C4  50F5               	movf	tablat,w,c
 11847  0005C6  D005               	bra	u13100
 11848  0005C8                     u13107:
 11849  0005C8  CFF6 FFE1          	movff	tblptrl,fsr1l
 11850  0005CC  CFF7 FFE2          	movff	tblptrh,fsr1h
 11851  0005D0  50E7               	movf	indf1,w,c
 11852  0005D2                     u13100:
 11853  0005D2  0A20               	xorlw	32
 11854  0005D4  B4D8               	btfsc	status,2,c
 11855  0005D6  D7EA               	goto	l11035
 11856                           
 11857                           ;tff.c: 665: if (*p == '/') p++;
 11858  0005D8  C09F  FFF6         	movff	auto_mount@p,tblptrl
 11859  0005DC  C0A0  FFF7         	movff	auto_mount@p+1,tblptrh
 11860  0005E0  6AF8               	clrf	tblptru,c
 11861  0005E2  0E07               	movlw	(high __ramtop+-1)
 11862  0005E4  64F7               	cpfsgt	tblptrh,c
 11863  0005E6  D003               	bra	u13127
 11864  0005E8  0008               	tblrd		*
 11865  0005EA  50F5               	movf	tablat,w,c
 11866  0005EC  D005               	bra	u13120
 11867  0005EE                     u13127:
 11868  0005EE  CFF6 FFE1          	movff	tblptrl,fsr1l
 11869  0005F2  CFF7 FFE2          	movff	tblptrh,fsr1h
 11870  0005F6  50E7               	movf	indf1,w,c
 11871  0005F8                     u13120:
 11872  0005F8  0A2F               	xorlw	47
 11873  0005FA  A4D8               	btfss	status,2,c
 11874  0005FC  D003               	goto	l11043
 11875  0005FE  0100               	movlb	0	; () banked
 11876  000600  4B9F               	infsnz	auto_mount@p& (0+255),f,b
 11877  000602  2BA0               	incf	(auto_mount@p+1)& (0+255),f,b
 11878  000604                     l11043:
 11879                           
 11880                           ;tff.c: 666: *path = p;
 11881  000604  0100               	movlb	0	; () banked
 11882  000606  517B               	movf	auto_mount@path& (0+255),w,b
 11883  000608  6ED9               	movwf	fsr2l,c
 11884  00060A  6ADA               	clrf	fsr2h,c
 11885  00060C  C09F  FFDE         	movff	auto_mount@p,postinc2
 11886  000610  C0A0  FFDD         	movff	auto_mount@p+1,postdec2
 11887                           
 11888                           ; BSR set to: 0
 11889                           ;tff.c: 669: fs = FatFs;
 11890  000614  C039  F0A7         	movff	_FatFs,auto_mount@fs
 11891  000618  C03A  F0A8         	movff	_FatFs+1,auto_mount@fs+1
 11892                           
 11893                           ; BSR set to: 0
 11894                           ;tff.c: 670: if (!fs) return FR_NOT_ENABLED;
 11895  00061C  51A7               	movf	auto_mount@fs& (0+255),w,b
 11896  00061E  11A8               	iorwf	(auto_mount@fs+1)& (0+255),w,b
 11897  000620  A4D8               	btfss	status,2,c
 11898  000622  D002               	goto	l11053
 11899                           
 11900                           ; BSR set to: 0
 11901  000624  0E0A               	movlw	10
 11902  000626  0012               	return	
 11903  000628                     l11053:
 11904                           
 11905                           ; BSR set to: 0
 11906                           ;tff.c: 672: if (fs->fs_type) {
 11907  000628  EE20 F01C          	lfsr	2,28
 11908  00062C  51A7               	movf	auto_mount@fs& (0+255),w,b
 11909  00062E  26D9               	addwf	fsr2l,f,c
 11910  000630  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11911  000632  22DA               	addwfc	fsr2h,f,c
 11912  000634  50DF               	movf	indf2,w,c
 11913  000636  B4D8               	btfsc	status,2,c
 11914  000638  D00F               	goto	l11071
 11915                           
 11916                           ; BSR set to: 0
 11917                           ;tff.c: 673: stat = disk_status(0);
 11918  00063A  0E00               	movlw	0
 11919  00063C  EC72  F028         	call	_disk_status
 11920  000640  0100               	movlb	0	; () banked
 11921  000642  6FA2               	movwf	auto_mount@stat& (0+255),b
 11922                           
 11923                           ; BSR set to: 0
 11924                           ;tff.c: 674: if (!(stat & 0x01)) {
 11925  000644  B1A2               	btfsc	auto_mount@stat& (0+255),0,b
 11926  000646  D008               	goto	l11071
 11927                           
 11928                           ; BSR set to: 0
 11929                           ;tff.c: 676: if (chk_wp && (stat & 0x04))
 11930  000648  517C               	movf	auto_mount@chk_wp& (0+255),w,b
 11931  00064A  A4D8               	btfss	status,2,c
 11932                           
 11933                           ; BSR set to: 0
 11934  00064C  A5A2               	btfss	auto_mount@stat& (0+255),2,b
 11935  00064E  D002               	goto	l11067
 11936  000650                     u13180:
 11937                           
 11938                           ; BSR set to: 0
 11939                           ;tff.c: 677: return FR_WRITE_PROTECTED;
 11940  000650  0E09               	movlw	9
 11941  000652  0012               	return	
 11942  000654                     l11067:
 11943                           
 11944                           ; BSR set to: 0
 11945                           ;tff.c: 679: return FR_OK;
 11946  000654  0E00               	movlw	0
 11947  000656  0012               	return	
 11948  000658                     l11071:
 11949                           
 11950                           ; BSR set to: 0
 11951                           ;tff.c: 680: };tff.c: 681: };tff.c: 685: memset(fs, 0, sizeof(FATFS));
 11952  000658  C0A7  F019         	movff	auto_mount@fs,memset@p1
 11953  00065C  C0A8  F01A         	movff	auto_mount@fs+1,memset@p1+1
 11954  000660  0E00               	movlw	0
 11955  000662  6E1C               	movwf	(memset@c+1)^0,c
 11956  000664  0E00               	movlw	0
 11957  000666  6E1B               	movwf	memset@c^0,c
 11958  000668  0E02               	movlw	2
 11959  00066A  6E1E               	movwf	(memset@n+1)^0,c
 11960  00066C  0E20               	movlw	32
 11961  00066E  6E1D               	movwf	memset@n^0,c
 11962  000670  ECA0  F028         	call	_memset	;wreg free
 11963                           
 11964                           ;tff.c: 686: stat = disk_initialize(0);
 11965  000674  0E00               	movlw	0
 11966  000676  ECDF  F028         	call	_disk_initialize
 11967  00067A  0100               	movlb	0	; () banked
 11968  00067C  6FA2               	movwf	auto_mount@stat& (0+255),b
 11969                           
 11970                           ; BSR set to: 0
 11971                           ;tff.c: 687: if (stat & 0x01)
 11972  00067E  A1A2               	btfss	auto_mount@stat& (0+255),0,b
 11973  000680  D002               	goto	l11081
 11974                           
 11975                           ; BSR set to: 0
 11976                           ;tff.c: 688: return FR_NOT_READY;
 11977  000682  0E01               	movlw	1
 11978  000684  0012               	return	
 11979  000686                     l11081:
 11980                           
 11981                           ; BSR set to: 0
 11982                           ;tff.c: 690: if (chk_wp && (stat & 0x04))
 11983  000686  517C               	movf	auto_mount@chk_wp& (0+255),w,b
 11984  000688  B4D8               	btfsc	status,2,c
 11985  00068A  D002               	goto	l11089
 11986                           
 11987                           ; BSR set to: 0
 11988  00068C  B5A2               	btfsc	auto_mount@stat& (0+255),2,b
 11989  00068E  D7E0               	goto	u13180
 11990  000690                     l11089:
 11991                           
 11992                           ; BSR set to: 0
 11993                           ;tff.c: 695: fmt = check_fs(bootsect = 0);
 11994  000690  0E00               	movlw	0
 11995  000692  6F97               	movwf	auto_mount@bootsect& (0+255),b
 11996  000694  0E00               	movlw	0
 11997  000696  6F98               	movwf	(auto_mount@bootsect+1)& (0+255),b
 11998  000698  0E00               	movlw	0
 11999  00069A  6F99               	movwf	(auto_mount@bootsect+2)& (0+255),b
 12000  00069C  0E00               	movlw	0
 12001  00069E  6F9A               	movwf	(auto_mount@bootsect+3)& (0+255),b
 12002  0006A0  C097  F073         	movff	auto_mount@bootsect,check_fs@sect
 12003  0006A4  C098  F074         	movff	auto_mount@bootsect+1,check_fs@sect+1
 12004  0006A8  C099  F075         	movff	auto_mount@bootsect+2,check_fs@sect+2
 12005  0006AC  C09A  F076         	movff	auto_mount@bootsect+3,check_fs@sect+3
 12006  0006B0  EC47  F023         	call	_check_fs	;wreg free
 12007  0006B4  0100               	movlb	0	; () banked
 12008  0006B6  6FA1               	movwf	auto_mount@fmt& (0+255),b
 12009                           
 12010                           ; BSR set to: 0
 12011                           ;tff.c: 697: if (fmt == 1) {
 12012  0006B8  05A1               	decf	auto_mount@fmt& (0+255),w,b
 12013  0006BA  A4D8               	btfss	status,2,c
 12014  0006BC  D023               	goto	l11099
 12015                           
 12016                           ; BSR set to: 0
 12017                           ;tff.c: 699: if (fs->win[446+4]) {
 12018  0006BE  EE21 F0E2          	lfsr	2,482
 12019  0006C2  51A7               	movf	auto_mount@fs& (0+255),w,b
 12020  0006C4  26D9               	addwf	fsr2l,f,c
 12021  0006C6  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12022  0006C8  22DA               	addwfc	fsr2h,f,c
 12023  0006CA  50DF               	movf	indf2,w,c
 12024  0006CC  B4D8               	btfsc	status,2,c
 12025  0006CE  D01A               	goto	l11099
 12026                           
 12027                           ; BSR set to: 0
 12028                           ;tff.c: 700: bootsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[446+8]));
 12029  0006D0  EE21 F0E6          	lfsr	2,486
 12030  0006D4  51A7               	movf	auto_mount@fs& (0+255),w,b
 12031  0006D6  26D9               	addwf	fsr2l,f,c
 12032  0006D8  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12033  0006DA  22DA               	addwfc	fsr2h,f,c
 12034  0006DC  CFDE F097          	movff	postinc2,auto_mount@bootsect
 12035  0006E0  CFDE F098          	movff	postinc2,auto_mount@bootsect+1
 12036  0006E4  CFDE F099          	movff	postinc2,auto_mount@bootsect+2
 12037  0006E8  CFDE F09A          	movff	postinc2,auto_mount@bootsect+3
 12038                           
 12039                           ; BSR set to: 0
 12040                           ;tff.c: 701: fmt = check_fs(bootsect);
 12041  0006EC  C097  F073         	movff	auto_mount@bootsect,check_fs@sect
 12042  0006F0  C098  F074         	movff	auto_mount@bootsect+1,check_fs@sect+1
 12043  0006F4  C099  F075         	movff	auto_mount@bootsect+2,check_fs@sect+2
 12044  0006F8  C09A  F076         	movff	auto_mount@bootsect+3,check_fs@sect+3
 12045  0006FC  EC47  F023         	call	_check_fs	;wreg free
 12046  000700  0100               	movlb	0	; () banked
 12047  000702  6FA1               	movwf	auto_mount@fmt& (0+255),b
 12048  000704                     l11099:
 12049                           
 12050                           ; BSR set to: 0
 12051                           ;tff.c: 702: };tff.c: 703: };tff.c: 704: if (fmt || (WORD)(*(WORD*)(BYTE*)(&fs->win[11])
      +                          ) != 512U)
 12052  000704  51A1               	movf	auto_mount@fmt& (0+255),w,b
 12053  000706  A4D8               	btfss	status,2,c
 12054  000708  D00C               	goto	u13250
 12055                           
 12056                           ; BSR set to: 0
 12057  00070A  EE20 F02B          	lfsr	2,43
 12058  00070E  51A7               	movf	auto_mount@fs& (0+255),w,b
 12059  000710  26D9               	addwf	fsr2l,f,c
 12060  000712  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12061  000714  22DA               	addwfc	fsr2h,f,c
 12062  000716  50DE               	movf	postinc2,w,c
 12063  000718  E104               	bnz	u13250
 12064  00071A  0E02               	movlw	2
 12065  00071C  18DE               	xorwf	postinc2,w,c
 12066  00071E  B4D8               	btfsc	status,2,c
 12067  000720  D002               	goto	l11107
 12068  000722                     u13250:
 12069                           
 12070                           ; BSR set to: 0
 12071                           ;tff.c: 705: return FR_NO_FILESYSTEM;
 12072  000722  0E0B               	movlw	11
 12073  000724  0012               	return	
 12074  000726                     l11107:
 12075                           
 12076                           ; BSR set to: 0
 12077                           ;tff.c: 708: fatsize = (WORD)(*(WORD*)(BYTE*)(&fs->win[22]));
 12078  000726  EE20 F036          	lfsr	2,54
 12079  00072A  51A7               	movf	auto_mount@fs& (0+255),w,b
 12080  00072C  26D9               	addwf	fsr2l,f,c
 12081  00072E  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12082  000730  22DA               	addwfc	fsr2h,f,c
 12083  000732  CFDE F07D          	movff	postinc2,??_auto_mount
 12084  000736  CFDD F07E          	movff	postdec2,??_auto_mount+1
 12085  00073A  C07D  F0A3         	movff	??_auto_mount,auto_mount@fatsize
 12086  00073E  C07E  F0A4         	movff	??_auto_mount+1,auto_mount@fatsize+1
 12087  000742  6BA5               	clrf	(auto_mount@fatsize+2)& (0+255),b
 12088  000744  6BA6               	clrf	(auto_mount@fatsize+3)& (0+255),b
 12089                           
 12090                           ; BSR set to: 0
 12091                           ;tff.c: 709: if (!fatsize) fatsize = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[36]));
 12092  000746  51A3               	movf	auto_mount@fatsize& (0+255),w,b
 12093  000748  11A4               	iorwf	(auto_mount@fatsize+1)& (0+255),w,b
 12094  00074A  11A5               	iorwf	(auto_mount@fatsize+2)& (0+255),w,b
 12095  00074C  11A6               	iorwf	(auto_mount@fatsize+3)& (0+255),w,b
 12096  00074E  A4D8               	btfss	status,2,c
 12097  000750  D00E               	goto	l939
 12098                           
 12099                           ; BSR set to: 0
 12100  000752  EE20 F044          	lfsr	2,68
 12101  000756  51A7               	movf	auto_mount@fs& (0+255),w,b
 12102  000758  26D9               	addwf	fsr2l,f,c
 12103  00075A  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12104  00075C  22DA               	addwfc	fsr2h,f,c
 12105  00075E  CFDE F0A3          	movff	postinc2,auto_mount@fatsize
 12106  000762  CFDE F0A4          	movff	postinc2,auto_mount@fatsize+1
 12107  000766  CFDE F0A5          	movff	postinc2,auto_mount@fatsize+2
 12108  00076A  CFDE F0A6          	movff	postinc2,auto_mount@fatsize+3
 12109  00076E                     l939:
 12110                           
 12111                           ; BSR set to: 0
 12112                           ;tff.c: 710: fs->sects_fat = (CLUST)fatsize;
 12113  00076E  EE20 F014          	lfsr	2,20
 12114  000772  51A7               	movf	auto_mount@fs& (0+255),w,b
 12115  000774  26D9               	addwf	fsr2l,f,c
 12116  000776  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12117  000778  22DA               	addwfc	fsr2h,f,c
 12118  00077A  C0A3  FFDE         	movff	auto_mount@fatsize,postinc2
 12119  00077E  C0A4  FFDD         	movff	auto_mount@fatsize+1,postdec2
 12120                           
 12121                           ; BSR set to: 0
 12122                           ;tff.c: 711: fs->n_fats = fs->win[16];
 12123  000782  EE20 F030          	lfsr	2,48
 12124  000786  51A7               	movf	auto_mount@fs& (0+255),w,b
 12125  000788  26D9               	addwf	fsr2l,f,c
 12126  00078A  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12127  00078C  22DA               	addwfc	fsr2h,f,c
 12128  00078E  EE10 F01E          	lfsr	1,30
 12129  000792  51A7               	movf	auto_mount@fs& (0+255),w,b
 12130  000794  26E1               	addwf	fsr1l,f,c
 12131  000796  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12132  000798  22E2               	addwfc	fsr1h,f,c
 12133  00079A  CFDF FFE7          	movff	indf2,indf1
 12134                           
 12135                           ; BSR set to: 0
 12136                           ;tff.c: 712: fatsize *= fs->n_fats;
 12137  00079E  C0A3  F019         	movff	auto_mount@fatsize,___lmul@multiplier
 12138  0007A2  C0A4  F01A         	movff	auto_mount@fatsize+1,___lmul@multiplier+1
 12139  0007A6  C0A5  F01B         	movff	auto_mount@fatsize+2,___lmul@multiplier+2
 12140  0007AA  C0A6  F01C         	movff	auto_mount@fatsize+3,___lmul@multiplier+3
 12141  0007AE  EE20 F01E          	lfsr	2,30
 12142  0007B2  51A7               	movf	auto_mount@fs& (0+255),w,b
 12143  0007B4  26D9               	addwf	fsr2l,f,c
 12144  0007B6  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12145  0007B8  22DA               	addwfc	fsr2h,f,c
 12146  0007BA  50DF               	movf	indf2,w,c
 12147  0007BC  6F7D               	movwf	??_auto_mount& (0+255),b
 12148  0007BE  517D               	movf	??_auto_mount& (0+255),w,b
 12149  0007C0  6E1D               	movwf	___lmul@multiplicand^0,c
 12150  0007C2  6A1E               	clrf	(___lmul@multiplicand+1)^0,c
 12151  0007C4  6A1F               	clrf	(___lmul@multiplicand+2)^0,c
 12152  0007C6  6A20               	clrf	(___lmul@multiplicand+3)^0,c
 12153  0007C8  EC95  F025         	call	___lmul	;wreg free
 12154  0007CC  C019  F0A3         	movff	?___lmul,auto_mount@fatsize
 12155  0007D0  C01A  F0A4         	movff	?___lmul+1,auto_mount@fatsize+1
 12156  0007D4  C01B  F0A5         	movff	?___lmul+2,auto_mount@fatsize+2
 12157  0007D8  C01C  F0A6         	movff	?___lmul+3,auto_mount@fatsize+3
 12158                           
 12159                           ; BSR set to: 0
 12160                           ;tff.c: 713: fs->fatbase = bootsect + (WORD)(*(WORD*)(BYTE*)(&fs->win[14]));
 12161  0007DC  EE20 F02E          	lfsr	2,46
 12162  0007E0  51A7               	movf	auto_mount@fs& (0+255),w,b
 12163  0007E2  26D9               	addwf	fsr2l,f,c
 12164  0007E4  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12165  0007E6  22DA               	addwfc	fsr2h,f,c
 12166  0007E8  CFDE F07D          	movff	postinc2,??_auto_mount
 12167  0007EC  CFDD F07E          	movff	postdec2,??_auto_mount+1
 12168  0007F0  517D               	movf	??_auto_mount& (0+255),w,b
 12169  0007F2  2597               	addwf	auto_mount@bootsect& (0+255),w,b
 12170  0007F4  6F7F               	movwf	(??_auto_mount+2)& (0+255),b
 12171  0007F6  517E               	movf	(??_auto_mount+1)& (0+255),w,b
 12172  0007F8  2198               	addwfc	(auto_mount@bootsect+1)& (0+255),w,b
 12173  0007FA  6F80               	movwf	(??_auto_mount+3)& (0+255),b
 12174  0007FC  0E00               	movlw	0
 12175  0007FE  2199               	addwfc	(auto_mount@bootsect+2)& (0+255),w,b
 12176  000800  6F81               	movwf	(??_auto_mount+4)& (0+255),b
 12177  000802  0E00               	movlw	0
 12178  000804  219A               	addwfc	(auto_mount@bootsect+3)& (0+255),w,b
 12179  000806  6F82               	movwf	(??_auto_mount+5)& (0+255),b
 12180  000808  EE20 F008          	lfsr	2,8
 12181  00080C  51A7               	movf	auto_mount@fs& (0+255),w,b
 12182  00080E  26D9               	addwf	fsr2l,f,c
 12183  000810  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12184  000812  22DA               	addwfc	fsr2h,f,c
 12185  000814  C07F  FFDE         	movff	??_auto_mount+2,postinc2
 12186  000818  C080  FFDE         	movff	??_auto_mount+3,postinc2
 12187  00081C  C081  FFDE         	movff	??_auto_mount+4,postinc2
 12188  000820  C082  FFDE         	movff	??_auto_mount+5,postinc2
 12189                           
 12190                           ; BSR set to: 0
 12191                           ;tff.c: 714: fs->csize = fs->win[13];
 12192  000824  EE20 F02D          	lfsr	2,45
 12193  000828  51A7               	movf	auto_mount@fs& (0+255),w,b
 12194  00082A  26D9               	addwf	fsr2l,f,c
 12195  00082C  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12196  00082E  22DA               	addwfc	fsr2h,f,c
 12197  000830  EE10 F01D          	lfsr	1,29
 12198  000834  51A7               	movf	auto_mount@fs& (0+255),w,b
 12199  000836  26E1               	addwf	fsr1l,f,c
 12200  000838  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12201  00083A  22E2               	addwfc	fsr1h,f,c
 12202  00083C  CFDF FFE7          	movff	indf2,indf1
 12203                           
 12204                           ; BSR set to: 0
 12205                           ;tff.c: 715: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(&fs->win[17]));
 12206  000840  EE20 F031          	lfsr	2,49
 12207  000844  51A7               	movf	auto_mount@fs& (0+255),w,b
 12208  000846  26D9               	addwf	fsr2l,f,c
 12209  000848  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12210  00084A  22DA               	addwfc	fsr2h,f,c
 12211  00084C  EE10 F002          	lfsr	1,2
 12212  000850  51A7               	movf	auto_mount@fs& (0+255),w,b
 12213  000852  26E1               	addwf	fsr1l,f,c
 12214  000854  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12215  000856  22E2               	addwfc	fsr1h,f,c
 12216  000858  CFDE FFE6          	movff	postinc2,postinc1
 12217  00085C  CFDD FFE5          	movff	postdec2,postdec1
 12218                           
 12219                           ; BSR set to: 0
 12220                           ;tff.c: 716: totalsect = (WORD)(*(WORD*)(BYTE*)(&fs->win[19]));
 12221  000860  EE20 F033          	lfsr	2,51
 12222  000864  51A7               	movf	auto_mount@fs& (0+255),w,b
 12223  000866  26D9               	addwf	fsr2l,f,c
 12224  000868  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12225  00086A  22DA               	addwfc	fsr2h,f,c
 12226  00086C  CFDE F07D          	movff	postinc2,??_auto_mount
 12227  000870  CFDD F07E          	movff	postdec2,??_auto_mount+1
 12228  000874  C07D  F09B         	movff	??_auto_mount,auto_mount@totalsect
 12229  000878  C07E  F09C         	movff	??_auto_mount+1,auto_mount@totalsect+1
 12230  00087C  6B9D               	clrf	(auto_mount@totalsect+2)& (0+255),b
 12231  00087E  6B9E               	clrf	(auto_mount@totalsect+3)& (0+255),b
 12232                           
 12233                           ; BSR set to: 0
 12234                           ;tff.c: 717: if (!totalsect) totalsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[32]));
 12235  000880  519B               	movf	auto_mount@totalsect& (0+255),w,b
 12236  000882  119C               	iorwf	(auto_mount@totalsect+1)& (0+255),w,b
 12237  000884  119D               	iorwf	(auto_mount@totalsect+2)& (0+255),w,b
 12238  000886  119E               	iorwf	(auto_mount@totalsect+3)& (0+255),w,b
 12239  000888  A4D8               	btfss	status,2,c
 12240  00088A  D00E               	goto	l11129
 12241                           
 12242                           ; BSR set to: 0
 12243  00088C  EE20 F040          	lfsr	2,64
 12244  000890  51A7               	movf	auto_mount@fs& (0+255),w,b
 12245  000892  26D9               	addwf	fsr2l,f,c
 12246  000894  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12247  000896  22DA               	addwfc	fsr2h,f,c
 12248  000898  CFDE F09B          	movff	postinc2,auto_mount@totalsect
 12249  00089C  CFDE F09C          	movff	postinc2,auto_mount@totalsect+1
 12250  0008A0  CFDE F09D          	movff	postinc2,auto_mount@totalsect+2
 12251  0008A4  CFDE F09E          	movff	postinc2,auto_mount@totalsect+3
 12252  0008A8                     l11129:
 12253                           
 12254                           ; BSR set to: 0
 12255                           ;tff.c: 718: fs->max_clust = maxclust = (totalsect;tff.c: 719: - (WORD)(*(WORD*)(BYTE*)(
      +                          &fs->win[14])) - fatsize - fs->n_rootdir / 16;tff.c: 720: ) / fs->csize + 2;
 12256  0008A8  EE20 F002          	lfsr	2,2
 12257  0008AC  51A7               	movf	auto_mount@fs& (0+255),w,b
 12258  0008AE  26D9               	addwf	fsr2l,f,c
 12259  0008B0  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12260  0008B2  22DA               	addwfc	fsr2h,f,c
 12261  0008B4  CFDE F07D          	movff	postinc2,??_auto_mount
 12262  0008B8  CFDD F07E          	movff	postdec2,??_auto_mount+1
 12263  0008BC  0E04               	movlw	4
 12264  0008BE  6F7F               	movwf	(??_auto_mount+2)& (0+255),b
 12265  0008C0                     u13285:
 12266  0008C0  90D8               	bcf	status,0,c
 12267  0008C2  337E               	rrcf	(??_auto_mount+1)& (0+255),f,b
 12268  0008C4  337D               	rrcf	??_auto_mount& (0+255),f,b
 12269  0008C6  2F7F               	decfsz	(??_auto_mount+2)& (0+255),f,b
 12270  0008C8  D7FB               	goto	u13285
 12271  0008CA  517D               	movf	??_auto_mount& (0+255),w,b
 12272  0008CC  6F80               	movwf	(??_auto_mount+3)& (0+255),b
 12273  0008CE  517E               	movf	(??_auto_mount+1)& (0+255),w,b
 12274  0008D0  6F81               	movwf	(??_auto_mount+4)& (0+255),b
 12275  0008D2  6B82               	clrf	(??_auto_mount+5)& (0+255),b
 12276  0008D4  6B83               	clrf	(??_auto_mount+6)& (0+255),b
 12277  0008D6  EE20 F02E          	lfsr	2,46
 12278  0008DA  51A7               	movf	auto_mount@fs& (0+255),w,b
 12279  0008DC  26D9               	addwf	fsr2l,f,c
 12280  0008DE  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12281  0008E0  22DA               	addwfc	fsr2h,f,c
 12282  0008E2  CFDE F084          	movff	postinc2,??_auto_mount+7
 12283  0008E6  CFDD F085          	movff	postdec2,??_auto_mount+8
 12284  0008EA  5184               	movf	(??_auto_mount+7)& (0+255),w,b
 12285  0008EC  6F86               	movwf	(??_auto_mount+9)& (0+255),b
 12286  0008EE  5185               	movf	(??_auto_mount+8)& (0+255),w,b
 12287  0008F0  6F87               	movwf	(??_auto_mount+10)& (0+255),b
 12288  0008F2  6B88               	clrf	(??_auto_mount+11)& (0+255),b
 12289  0008F4  6B89               	clrf	(??_auto_mount+12)& (0+255),b
 12290  0008F6  1F86               	comf	(??_auto_mount+9)& (0+255),f,b
 12291  0008F8  1F87               	comf	(??_auto_mount+10)& (0+255),f,b
 12292  0008FA  1F88               	comf	(??_auto_mount+11)& (0+255),f,b
 12293  0008FC  1F89               	comf	(??_auto_mount+12)& (0+255),f,b
 12294  0008FE  2B86               	incf	(??_auto_mount+9)& (0+255),f,b
 12295  000900  0E00               	movlw	0
 12296  000902  2387               	addwfc	(??_auto_mount+10)& (0+255),f,b
 12297  000904  2388               	addwfc	(??_auto_mount+11)& (0+255),f,b
 12298  000906  2389               	addwfc	(??_auto_mount+12)& (0+255),f,b
 12299  000908  51A3               	movf	auto_mount@fatsize& (0+255),w,b
 12300  00090A  5D86               	subwf	(??_auto_mount+9)& (0+255),w,b
 12301  00090C  6F8A               	movwf	(??_auto_mount+13)& (0+255),b
 12302  00090E  51A4               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 12303  000910  5987               	subwfb	(??_auto_mount+10)& (0+255),w,b
 12304  000912  6F8B               	movwf	(??_auto_mount+14)& (0+255),b
 12305  000914  51A5               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 12306  000916  5988               	subwfb	(??_auto_mount+11)& (0+255),w,b
 12307  000918  6F8C               	movwf	(??_auto_mount+15)& (0+255),b
 12308  00091A  51A6               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 12309  00091C  5989               	subwfb	(??_auto_mount+12)& (0+255),w,b
 12310  00091E  6F8D               	movwf	(??_auto_mount+16)& (0+255),b
 12311  000920  5180               	movf	(??_auto_mount+3)& (0+255),w,b
 12312  000922  5D8A               	subwf	(??_auto_mount+13)& (0+255),w,b
 12313  000924  6F8E               	movwf	(??_auto_mount+17)& (0+255),b
 12314  000926  5181               	movf	(??_auto_mount+4)& (0+255),w,b
 12315  000928  598B               	subwfb	(??_auto_mount+14)& (0+255),w,b
 12316  00092A  6F8F               	movwf	(??_auto_mount+18)& (0+255),b
 12317  00092C  5182               	movf	(??_auto_mount+5)& (0+255),w,b
 12318  00092E  598C               	subwfb	(??_auto_mount+15)& (0+255),w,b
 12319  000930  6F90               	movwf	(??_auto_mount+19)& (0+255),b
 12320  000932  5183               	movf	(??_auto_mount+6)& (0+255),w,b
 12321  000934  598D               	subwfb	(??_auto_mount+16)& (0+255),w,b
 12322  000936  6F91               	movwf	(??_auto_mount+20)& (0+255),b
 12323  000938  519B               	movf	auto_mount@totalsect& (0+255),w,b
 12324  00093A  258E               	addwf	(??_auto_mount+17)& (0+255),w,b
 12325  00093C  6E19               	movwf	___lldiv@dividend^0,c
 12326  00093E  519C               	movf	(auto_mount@totalsect+1)& (0+255),w,b
 12327  000940  218F               	addwfc	(??_auto_mount+18)& (0+255),w,b
 12328  000942  6E1A               	movwf	(___lldiv@dividend+1)^0,c
 12329  000944  519D               	movf	(auto_mount@totalsect+2)& (0+255),w,b
 12330  000946  2190               	addwfc	(??_auto_mount+19)& (0+255),w,b
 12331  000948  6E1B               	movwf	(___lldiv@dividend+2)^0,c
 12332  00094A  519E               	movf	(auto_mount@totalsect+3)& (0+255),w,b
 12333  00094C  2191               	addwfc	(??_auto_mount+20)& (0+255),w,b
 12334  00094E  6E1C               	movwf	(___lldiv@dividend+3)^0,c
 12335  000950  EE20 F01D          	lfsr	2,29
 12336  000954  51A7               	movf	auto_mount@fs& (0+255),w,b
 12337  000956  26D9               	addwf	fsr2l,f,c
 12338  000958  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12339  00095A  22DA               	addwfc	fsr2h,f,c
 12340  00095C  50DF               	movf	indf2,w,c
 12341  00095E  6F92               	movwf	(??_auto_mount+21)& (0+255),b
 12342  000960  5192               	movf	(??_auto_mount+21)& (0+255),w,b
 12343  000962  6E1D               	movwf	___lldiv@divisor^0,c
 12344  000964  6A1E               	clrf	(___lldiv@divisor+1)^0,c
 12345  000966  6A1F               	clrf	(___lldiv@divisor+2)^0,c
 12346  000968  6A20               	clrf	(___lldiv@divisor+3)^0,c
 12347  00096A  EC88  F023         	call	___lldiv	;wreg free
 12348  00096E  0E02               	movlw	2
 12349  000970  2419               	addwf	?___lldiv^0,w,c
 12350  000972  0100               	movlb	0	; () banked
 12351  000974  6F93               	movwf	auto_mount@maxclust& (0+255),b
 12352  000976  0E00               	movlw	0
 12353  000978  201A               	addwfc	(?___lldiv+1)^0,w,c
 12354  00097A  6F94               	movwf	(auto_mount@maxclust+1)& (0+255),b
 12355  00097C  0E00               	movlw	0
 12356  00097E  201B               	addwfc	(?___lldiv+2)^0,w,c
 12357  000980  6F95               	movwf	(auto_mount@maxclust+2)& (0+255),b
 12358  000982  0E00               	movlw	0
 12359  000984  201C               	addwfc	(?___lldiv+3)^0,w,c
 12360  000986  6F96               	movwf	(auto_mount@maxclust+3)& (0+255),b
 12361  000988  EE20 F016          	lfsr	2,22
 12362  00098C  51A7               	movf	auto_mount@fs& (0+255),w,b
 12363  00098E  26D9               	addwf	fsr2l,f,c
 12364  000990  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12365  000992  22DA               	addwfc	fsr2h,f,c
 12366  000994  C093  FFDE         	movff	auto_mount@maxclust,postinc2
 12367  000998  C094  FFDD         	movff	auto_mount@maxclust+1,postdec2
 12368                           
 12369                           ; BSR set to: 0
 12370                           ;tff.c: 722: fmt = 1;
 12371  00099C  0E01               	movlw	1
 12372  00099E  6FA1               	movwf	auto_mount@fmt& (0+255),b
 12373                           
 12374                           ; BSR set to: 0
 12375                           ;tff.c: 723: if (maxclust >= 0xFF7) fmt = 2;
 12376  0009A0  5196               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 12377  0009A2  1195               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 12378  0009A4  E106               	bnz	u13290
 12379  0009A6  0EF7               	movlw	247
 12380  0009A8  5D93               	subwf	auto_mount@maxclust& (0+255),w,b
 12381  0009AA  0E0F               	movlw	15
 12382  0009AC  5994               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 12383  0009AE  A0D8               	btfss	status,0,c
 12384  0009B0  D002               	goto	l11137
 12385  0009B2                     u13290:
 12386                           
 12387                           ; BSR set to: 0
 12388  0009B2  0E02               	movlw	2
 12389  0009B4  6FA1               	movwf	auto_mount@fmt& (0+255),b
 12390  0009B6                     l11137:
 12391                           
 12392                           ; BSR set to: 0
 12393                           ;tff.c: 724: if (maxclust >= 0xFFF7)
 12394  0009B6  5196               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 12395  0009B8  1195               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 12396  0009BA  E107               	bnz	u13300
 12397  0009BC  0EF7               	movlw	247
 12398  0009BE  5D93               	subwf	auto_mount@maxclust& (0+255),w,b
 12399  0009C0  0EFF               	movlw	255
 12400  0009C2  5994               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 12401  0009C4  B0D8               	btfsc	status,0,c
 12402  0009C6  D6AD               	goto	u13250
 12403  0009C8  D001               	goto	l11143
 12404  0009CA                     u13300:
 12405  0009CA  D6AB               	goto	u13250
 12406  0009CC                     l11143:
 12407                           
 12408                           ; BSR set to: 0
 12409                           ;tff.c: 733: fs->dirbase = fs->fatbase + fatsize;
 12410  0009CC  EE20 F008          	lfsr	2,8
 12411  0009D0  51A7               	movf	auto_mount@fs& (0+255),w,b
 12412  0009D2  26D9               	addwf	fsr2l,f,c
 12413  0009D4  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12414  0009D6  22DA               	addwfc	fsr2h,f,c
 12415  0009D8  CFDE F07D          	movff	postinc2,??_auto_mount
 12416  0009DC  CFDE F07E          	movff	postinc2,??_auto_mount+1
 12417  0009E0  CFDE F07F          	movff	postinc2,??_auto_mount+2
 12418  0009E4  CFDE F080          	movff	postinc2,??_auto_mount+3
 12419  0009E8  51A3               	movf	auto_mount@fatsize& (0+255),w,b
 12420  0009EA  257D               	addwf	??_auto_mount& (0+255),w,b
 12421  0009EC  6F81               	movwf	(??_auto_mount+4)& (0+255),b
 12422  0009EE  51A4               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 12423  0009F0  217E               	addwfc	(??_auto_mount+1)& (0+255),w,b
 12424  0009F2  6F82               	movwf	(??_auto_mount+5)& (0+255),b
 12425  0009F4  51A5               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 12426  0009F6  217F               	addwfc	(??_auto_mount+2)& (0+255),w,b
 12427  0009F8  6F83               	movwf	(??_auto_mount+6)& (0+255),b
 12428  0009FA  51A6               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 12429  0009FC  2180               	addwfc	(??_auto_mount+3)& (0+255),w,b
 12430  0009FE  6F84               	movwf	(??_auto_mount+7)& (0+255),b
 12431  000A00  EE20 F00C          	lfsr	2,12
 12432  000A04  51A7               	movf	auto_mount@fs& (0+255),w,b
 12433  000A06  26D9               	addwf	fsr2l,f,c
 12434  000A08  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12435  000A0A  22DA               	addwfc	fsr2h,f,c
 12436  000A0C  C081  FFDE         	movff	??_auto_mount+4,postinc2
 12437  000A10  C082  FFDE         	movff	??_auto_mount+5,postinc2
 12438  000A14  C083  FFDE         	movff	??_auto_mount+6,postinc2
 12439  000A18  C084  FFDE         	movff	??_auto_mount+7,postinc2
 12440                           
 12441                           ;tff.c: 734: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;
 12442  000A1C  EE20 F008          	lfsr	2,8
 12443  000A20  51A7               	movf	auto_mount@fs& (0+255),w,b
 12444  000A22  26D9               	addwf	fsr2l,f,c
 12445  000A24  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12446  000A26  22DA               	addwfc	fsr2h,f,c
 12447  000A28  CFDE F07D          	movff	postinc2,??_auto_mount
 12448  000A2C  CFDE F07E          	movff	postinc2,??_auto_mount+1
 12449  000A30  CFDE F07F          	movff	postinc2,??_auto_mount+2
 12450  000A34  CFDE F080          	movff	postinc2,??_auto_mount+3
 12451  000A38  EE20 F002          	lfsr	2,2
 12452  000A3C  51A7               	movf	auto_mount@fs& (0+255),w,b
 12453  000A3E  26D9               	addwf	fsr2l,f,c
 12454  000A40  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12455  000A42  22DA               	addwfc	fsr2h,f,c
 12456  000A44  CFDE F081          	movff	postinc2,??_auto_mount+4
 12457  000A48  CFDD F082          	movff	postdec2,??_auto_mount+5
 12458  000A4C  0E04               	movlw	4
 12459  000A4E  6F83               	movwf	(??_auto_mount+6)& (0+255),b
 12460  000A50                     u13315:
 12461  000A50  90D8               	bcf	status,0,c
 12462  000A52  3382               	rrcf	(??_auto_mount+5)& (0+255),f,b
 12463  000A54  3381               	rrcf	(??_auto_mount+4)& (0+255),f,b
 12464  000A56  2F83               	decfsz	(??_auto_mount+6)& (0+255),f,b
 12465  000A58  D7FB               	goto	u13315
 12466  000A5A  5181               	movf	(??_auto_mount+4)& (0+255),w,b
 12467  000A5C  257D               	addwf	??_auto_mount& (0+255),w,b
 12468  000A5E  6F84               	movwf	(??_auto_mount+7)& (0+255),b
 12469  000A60  5182               	movf	(??_auto_mount+5)& (0+255),w,b
 12470  000A62  217E               	addwfc	(??_auto_mount+1)& (0+255),w,b
 12471  000A64  6F85               	movwf	(??_auto_mount+8)& (0+255),b
 12472  000A66  0E00               	movlw	0
 12473  000A68  217F               	addwfc	(??_auto_mount+2)& (0+255),w,b
 12474  000A6A  6F86               	movwf	(??_auto_mount+9)& (0+255),b
 12475  000A6C  0E00               	movlw	0
 12476  000A6E  2180               	addwfc	(??_auto_mount+3)& (0+255),w,b
 12477  000A70  6F87               	movwf	(??_auto_mount+10)& (0+255),b
 12478  000A72  51A3               	movf	auto_mount@fatsize& (0+255),w,b
 12479  000A74  2584               	addwf	(??_auto_mount+7)& (0+255),w,b
 12480  000A76  6F88               	movwf	(??_auto_mount+11)& (0+255),b
 12481  000A78  51A4               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 12482  000A7A  2185               	addwfc	(??_auto_mount+8)& (0+255),w,b
 12483  000A7C  6F89               	movwf	(??_auto_mount+12)& (0+255),b
 12484  000A7E  51A5               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 12485  000A80  2186               	addwfc	(??_auto_mount+9)& (0+255),w,b
 12486  000A82  6F8A               	movwf	(??_auto_mount+13)& (0+255),b
 12487  000A84  51A6               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 12488  000A86  2187               	addwfc	(??_auto_mount+10)& (0+255),w,b
 12489  000A88  6F8B               	movwf	(??_auto_mount+14)& (0+255),b
 12490  000A8A  EE20 F010          	lfsr	2,16
 12491  000A8E  51A7               	movf	auto_mount@fs& (0+255),w,b
 12492  000A90  26D9               	addwf	fsr2l,f,c
 12493  000A92  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12494  000A94  22DA               	addwfc	fsr2h,f,c
 12495  000A96  C088  FFDE         	movff	??_auto_mount+11,postinc2
 12496  000A9A  C089  FFDE         	movff	??_auto_mount+12,postinc2
 12497  000A9E  C08A  FFDE         	movff	??_auto_mount+13,postinc2
 12498  000AA2  C08B  FFDE         	movff	??_auto_mount+14,postinc2
 12499                           
 12500                           ;tff.c: 738: fs->free_clust = (CLUST)0xFFFFFFFF;
 12501  000AA6  EE20 F01A          	lfsr	2,26
 12502  000AAA  51A7               	movf	auto_mount@fs& (0+255),w,b
 12503  000AAC  26D9               	addwf	fsr2l,f,c
 12504  000AAE  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12505  000AB0  22DA               	addwfc	fsr2h,f,c
 12506  000AB2  0EFF               	movlw	255
 12507  000AB4  6EDE               	movwf	postinc2,c
 12508  000AB6  0EFF               	movlw	255
 12509  000AB8  6EDD               	movwf	postdec2,c
 12510                           
 12511                           ;tff.c: 754: fs->fs_type = fmt;
 12512  000ABA  EE20 F01C          	lfsr	2,28
 12513  000ABE  51A7               	movf	auto_mount@fs& (0+255),w,b
 12514  000AC0  26D9               	addwf	fsr2l,f,c
 12515  000AC2  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 12516  000AC4  22DA               	addwfc	fsr2h,f,c
 12517  000AC6  C0A1  FFDF         	movff	auto_mount@fmt,indf2
 12518                           
 12519                           ; BSR set to: 0
 12520                           ;tff.c: 755: fs->id = ++fsid;
 12521  000ACA  0101               	movlb	1	; () banked
 12522  000ACC  4B30               	infsnz	_fsid& (0+255),f,b
 12523  000ACE  2B31               	incf	(_fsid+1)& (0+255),f,b
 12524  000AD0  C0A7  FFD9         	movff	auto_mount@fs,fsr2l
 12525  000AD4  C0A8  FFDA         	movff	auto_mount@fs+1,fsr2h
 12526  000AD8  C130  FFDE         	movff	_fsid,postinc2
 12527  000ADC  C131  FFDD         	movff	_fsid+1,postdec2
 12528                           
 12529                           ;tff.c: 756: return FR_OK;
 12530  000AE0  0E00               	movlw	0
 12531  000AE2  0012               	return		;funcret
 12532  000AE4                     __end_of_auto_mount:
 12533                           	callstack 0
 12534                           
 12535 ;; *************** function _memset *****************
 12536 ;; Defined at:
 12537 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\memset.c"
 12538 ;; Parameters:    Size  Location     Type
 12539 ;;  p1              2   24[COMRAM] PTR void 
 12540 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 12541 ;;  c               2   26[COMRAM] int 
 12542 ;;  n               2   28[COMRAM] unsigned int 
 12543 ;; Auto vars:     Size  Location     Type
 12544 ;;  p               2   30[COMRAM] PTR unsigned char 
 12545 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 12546 ;; Return value:  Size  Location     Type
 12547 ;;                  2   24[COMRAM] PTR void 
 12548 ;; Registers used:
 12549 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12550 ;; Tracked objects:
 12551 ;;		On entry : 0/0
 12552 ;;		On exit  : 0/0
 12553 ;;		Unchanged: 0/0
 12554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12555 ;;      Params:         6       0       0       0       0       0       0       0       0
 12556 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12557 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12558 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12559 ;;Total ram usage:        8 bytes
 12560 ;; Hardware stack levels used:    1
 12561 ;; Hardware stack levels required when called:    3
 12562 ;; This function calls:
 12563 ;;		Nothing
 12564 ;; This function is called by:
 12565 ;;		_make_dirfile
 12566 ;;		_reserve_direntry
 12567 ;;		_auto_mount
 12568 ;;		_f_open
 12569 ;; This function uses a non-reentrant model
 12570 ;;
 12571                           
 12572                           	psect	text60
 12573  005140                     __ptext60:
 12574                           	callstack 0
 12575  005140                     _memset:
 12576                           	callstack 21
 12577                           
 12578                           ;incstack = 0
 12579  005140  C019  F01F         	movff	memset@p1,memset@p
 12580  005144  C01A  F020         	movff	memset@p1+1,memset@p+1
 12581  005148  D008               	goto	l6933
 12582  00514A                     l6929:
 12583  00514A  C01F  FFD9         	movff	memset@p,fsr2l
 12584  00514E  C020  FFDA         	movff	memset@p+1,fsr2h
 12585  005152  C01B  FFDF         	movff	memset@c,indf2
 12586  005156  4A1F               	infsnz	memset@p^0,f,c
 12587  005158  2A20               	incf	(memset@p+1)^0,f,c
 12588  00515A                     l6933:
 12589  00515A  061D               	decf	memset@n^0,f,c
 12590  00515C  A0D8               	btfss	status,0,c
 12591  00515E  061E               	decf	(memset@n+1)^0,f,c
 12592  005160  281D               	incf	memset@n^0,w,c
 12593  005162  E1F3               	bnz	l6929
 12594  005164  281E               	incf	(memset@n+1)^0,w,c
 12595  005166  B4D8               	btfsc	status,2,c
 12596  005168  0012               	return	
 12597  00516A  D7EF               	goto	l6929
 12598  00516C                     __end_of_memset:
 12599                           	callstack 0
 12600                           
 12601 ;; *************** function _disk_initialize *****************
 12602 ;; Defined at:
 12603 ;;		line 59 in file "bibliotecas/diskio.c"
 12604 ;; Parameters:    Size  Location     Type
 12605 ;;  pdrv            1    wreg     unsigned char 
 12606 ;; Auto vars:     Size  Location     Type
 12607 ;;  pdrv            1   44[COMRAM] unsigned char 
 12608 ;;  result          2    0        int 
 12609 ;;  stat            1   45[COMRAM] unsigned char 
 12610 ;; Return value:  Size  Location     Type
 12611 ;;                  1    wreg      unsigned char 
 12612 ;; Registers used:
 12613 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12614 ;; Tracked objects:
 12615 ;;		On entry : 0/0
 12616 ;;		On exit  : 0/0
 12617 ;;		Unchanged: 0/0
 12618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12619 ;;      Params:         0       0       0       0       0       0       0       0       0
 12620 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12621 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12622 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12623 ;;Total ram usage:        2 bytes
 12624 ;; Hardware stack levels used:    1
 12625 ;; Hardware stack levels required when called:    8
 12626 ;; This function calls:
 12627 ;;		_sdc_disk_initialize
 12628 ;; This function is called by:
 12629 ;;		_auto_mount
 12630 ;; This function uses a non-reentrant model
 12631 ;;
 12632                           
 12633                           	psect	text61
 12634  0051BE                     __ptext61:
 12635                           	callstack 0
 12636  0051BE                     _disk_initialize:
 12637                           	callstack 17
 12638                           
 12639                           ;incstack = 0
 12640                           ;disk_initialize@pdrv stored from wreg
 12641  0051BE  6E2D               	movwf	disk_initialize@pdrv^0,c
 12642                           
 12643                           ;diskio.c: 63: DSTATUS stat;;diskio.c: 64: int result;;diskio.c: 66: switch (pdrv) {
 12644  0051C0  D005               	goto	l10651
 12645  0051C2                     l10633:
 12646                           
 12647                           ;diskio.c: 68: stat = sdc_disk_initialize();
 12648  0051C2  EC0F  F00B         	call	_sdc_disk_initialize	;wreg free
 12649  0051C6  6E2E               	movwf	disk_initialize@stat^0,c
 12650  0051C8                     l10635:
 12651                           
 12652                           ;diskio.c: 72: return stat;
 12653  0051C8  502E               	movf	disk_initialize@stat^0,w,c
 12654  0051CA  0012               	return	
 12655  0051CC                     l10651:
 12656  0051CC  502D               	movf	disk_initialize@pdrv^0,w,c
 12657                           
 12658                           ; Switch size 1, requested type "simple"
 12659                           ; Number of cases is 3, Range of values is 0 to 2
 12660                           ; switch strategies available:
 12661                           ; Name         Instructions Cycles
 12662                           ; simple_byte           10     6 (average)
 12663                           ;	Chosen strategy is simple_byte
 12664  0051CE  0A00               	xorlw	0	; case 0
 12665  0051D0  B4D8               	btfsc	status,2,c
 12666  0051D2  D7F7               	goto	l10633
 12667  0051D4  0A01               	xorlw	1	; case 1
 12668  0051D6  B4D8               	btfsc	status,2,c
 12669  0051D8  D7F4               	goto	l10633
 12670  0051DA  0A03               	xorlw	3	; case 2
 12671  0051DC  B4D8               	btfsc	status,2,c
 12672  0051DE  D7F4               	goto	l10635
 12673                           
 12674                           ;diskio.c: 88: return 0x01;
 12675  0051E0  0E01               	movlw	1
 12676  0051E2  0012               	return		;funcret
 12677  0051E4                     __end_of_disk_initialize:
 12678                           	callstack 0
 12679                           
 12680 ;; *************** function _sdc_disk_initialize *****************
 12681 ;; Defined at:
 12682 ;;		line 275 in file "bibliotecas/diskio.c"
 12683 ;; Parameters:    Size  Location     Type
 12684 ;;		None
 12685 ;; Auto vars:     Size  Location     Type
 12686 ;;  count2          2    9[BANK0 ] int 
 12687 ;;  crc_number      2    5[BANK0 ] int 
 12688 ;;  count1          2    3[BANK0 ] int 
 12689 ;;  i               2    0        int 
 12690 ;;  buff            1   11[BANK0 ] unsigned char 
 12691 ;;  ocr             1    8[BANK0 ] unsigned char 
 12692 ;;  buff_i          1    7[BANK0 ] unsigned char 
 12693 ;;  stat            1    2[BANK0 ] unsigned char 
 12694 ;; Return value:  Size  Location     Type
 12695 ;;                  1    wreg      unsigned char 
 12696 ;; Registers used:
 12697 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12698 ;; Tracked objects:
 12699 ;;		On entry : 0/0
 12700 ;;		On exit  : 3F/0
 12701 ;;		Unchanged: 0/0
 12702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12703 ;;      Params:         0       0       0       0       0       0       0       0       0
 12704 ;;      Locals:         0      12       0       0       0       0       0       0       0
 12705 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12706 ;;      Totals:         1      12       0       0       0       0       0       0       0
 12707 ;;Total ram usage:       13 bytes
 12708 ;; Hardware stack levels used:    1
 12709 ;; Hardware stack levels required when called:    7
 12710 ;; This function calls:
 12711 ;;		_command
 12712 ;;		_dummy_clocks
 12713 ;;		_escreve_frase_ram_lcd
 12714 ;;		_posicao_cursor_lcd
 12715 ;;		_proceed
 12716 ;;		_response
 12717 ;;		_sdc_reset
 12718 ;; This function is called by:
 12719 ;;		_disk_initialize
 12720 ;; This function uses a non-reentrant model
 12721 ;;
 12722                           
 12723                           	psect	text62
 12724  00161E                     __ptext62:
 12725                           	callstack 0
 12726  00161E                     _sdc_disk_initialize:
 12727                           	callstack 17
 12728                           
 12729                           ;incstack = 0
 12730  00161E  0E00               	movlw	0
 12731  001620  0100               	movlb	0	; () banked
 12732  001622  6F64               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 12733  001624  0E00               	movlw	0
 12734  001626  6F63               	movwf	sdc_disk_initialize@count1& (0+255),b
 12735  001628  0E00               	movlw	0
 12736  00162A  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12737  00162C  0E00               	movlw	0
 12738  00162E  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 12739                           
 12740                           ;diskio.c: 280: BYTE buff = 0;
 12741  001630  0E00               	movlw	0
 12742  001632  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12743                           
 12744                           ; BSR set to: 0
 12745                           ;diskio.c: 281: BYTE buff_i;;diskio.c: 282: int crc_number;;diskio.c: 283: _delay((unsig
      +                          ned long)((1)*(48000000/4000.0)));
 12746  001634  0E10               	movlw	16
 12747  001636  6E2C               	movwf	??_sdc_disk_initialize^0,c
 12748  001638  0E94               	movlw	148
 12749  00163A                     u15397:
 12750  00163A  2EE8               	decfsz	wreg,f,c
 12751  00163C  D7FE               	bra	u15397
 12752  00163E  2E2C               	decfsz	??_sdc_disk_initialize^0,f,c
 12753  001640  D7FC               	bra	u15397
 12754  001642  D000               	nop2	
 12755                           
 12756                           ;diskio.c: 284: dummy_clocks(100);
 12757  001644  0E64               	movlw	100
 12758  001646  EC05  F028         	call	_dummy_clocks
 12759                           
 12760                           ;diskio.c: 287: sdc_reset();
 12761  00164A  EC32  F022         	call	_sdc_reset	;wreg free
 12762                           
 12763                           ;diskio.c: 288: command(0X48, 0x000001AA, 0x87);
 12764  00164E  0EAA               	movlw	170
 12765  001650  6E1E               	movwf	command@arg^0,c
 12766  001652  0E01               	movlw	1
 12767  001654  6E1F               	movwf	(command@arg+1)^0,c
 12768  001656  0E00               	movlw	0
 12769  001658  6E20               	movwf	(command@arg+2)^0,c
 12770  00165A  0E00               	movlw	0
 12771  00165C  6E21               	movwf	(command@arg+3)^0,c
 12772  00165E  0E87               	movlw	135
 12773  001660  6E22               	movwf	command@CRC^0,c
 12774  001662  0E48               	movlw	72
 12775  001664  EC3C  F025         	call	_command
 12776                           
 12777                           ;diskio.c: 289: proceed();
 12778  001668  EC4A  F02A         	call	_proceed	;wreg free
 12779  00166C                     l10305:
 12780                           
 12781                           ;diskio.c: 291: buff_i = response();
 12782  00166C  EC44  F02A         	call	_response	;wreg free
 12783  001670  0100               	movlb	0	; () banked
 12784  001672  6F67               	movwf	sdc_disk_initialize@buff_i& (0+255),b
 12785                           
 12786                           ; BSR set to: 0
 12787                           ;diskio.c: 292: if(buff_i == 1)
 12788  001674  0567               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
 12789  001676  A4D8               	btfss	status,2,c
 12790  001678  D004               	goto	l10311
 12791                           
 12792                           ; BSR set to: 0
 12793                           ;diskio.c: 293: {;diskio.c: 294: crc_number = buff_i<<8;
 12794  00167A  5167               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 12795  00167C  6F66               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
 12796  00167E  6B65               	clrf	sdc_disk_initialize@crc_number& (0+255),b
 12797                           
 12798                           ;diskio.c: 295: }
 12799  001680  D006               	goto	l10315
 12800  001682                     l10311:
 12801                           
 12802                           ; BSR set to: 0
 12803                           ;diskio.c: 296: else if(buff_i==0xAA)
 12804  001682  0EAA               	movlw	170
 12805  001684  1967               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
 12806  001686  A4D8               	btfss	status,2,c
 12807  001688  D002               	goto	l10315
 12808                           
 12809                           ; BSR set to: 0
 12810                           ;diskio.c: 297: {;diskio.c: 298: crc_number |= buff_i;
 12811  00168A  5167               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 12812  00168C  1365               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
 12813  00168E                     l10315:
 12814                           
 12815                           ; BSR set to: 0
 12816                           ;diskio.c: 299: };diskio.c: 300: count1++;
 12817  00168E  4B63               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
 12818  001690  2B64               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
 12819                           
 12820                           ; BSR set to: 0
 12821                           ;diskio.c: 301: }while(crc_number != 0x1AA && count1<1000);
 12822  001692  0EAA               	movlw	170
 12823  001694  1965               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 12824  001696  E103               	bnz	u11950
 12825  001698  0566               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 12826  00169A  B4D8               	btfsc	status,2,c
 12827  00169C  D008               	goto	u11960
 12828  00169E                     u11950:
 12829                           
 12830                           ; BSR set to: 0
 12831  00169E  BF64               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
 12832  0016A0  D7E5               	goto	l10305
 12833  0016A2  0EE8               	movlw	232
 12834  0016A4  5D63               	subwf	sdc_disk_initialize@count1& (0+255),w,b
 12835  0016A6  0E03               	movlw	3
 12836  0016A8  5964               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
 12837  0016AA  A0D8               	btfss	status,0,c
 12838  0016AC  D7DF               	goto	l10305
 12839  0016AE                     u11960:
 12840                           
 12841                           ; BSR set to: 0
 12842                           ;diskio.c: 306: if (crc_number == 0x1AA)
 12843  0016AE  0EAA               	movlw	170
 12844  0016B0  1965               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 12845  0016B2  E102               	bnz	u11971
 12846  0016B4  0566               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 12847  0016B6  A4D8               	btfss	status,2,c
 12848  0016B8                     u11971:
 12849  0016B8  D09E               	goto	l10393
 12850  0016BA                     u11970:
 12851                           
 12852                           ; BSR set to: 0
 12853                           ;diskio.c: 310: count2 = 0;
 12854                           
 12855                           ; BSR set to: 0
 12856                           ;diskio.c: 309: do{
 12857  0016BA  0E00               	movlw	0
 12858  0016BC  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12859  0016BE  0E00               	movlw	0
 12860  0016C0  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 12861  0016C2                     
 12862                           ; BSR set to: 0
 12863                           ;diskio.c: 319: dummy_clocks(10);
 12864                           
 12865                           ; BSR set to: 0
 12866  0016C2  0E0A               	movlw	10
 12867  0016C4  EC05  F028         	call	_dummy_clocks
 12868                           
 12869                           ;diskio.c: 320: command(0X77, 0X00000000, 0X00);
 12870  0016C8  0E00               	movlw	0
 12871  0016CA  6E1E               	movwf	command@arg^0,c
 12872  0016CC  0E00               	movlw	0
 12873  0016CE  6E1F               	movwf	(command@arg+1)^0,c
 12874  0016D0  0E00               	movlw	0
 12875  0016D2  6E20               	movwf	(command@arg+2)^0,c
 12876  0016D4  0E00               	movlw	0
 12877  0016D6  6E21               	movwf	(command@arg+3)^0,c
 12878  0016D8  0E00               	movlw	0
 12879  0016DA  6E22               	movwf	command@CRC^0,c
 12880  0016DC  0E77               	movlw	119
 12881  0016DE  EC3C  F025         	call	_command
 12882                           
 12883                           ;diskio.c: 323: proceed();
 12884  0016E2  EC4A  F02A         	call	_proceed	;wreg free
 12885  0016E6                     l10335:
 12886                           
 12887                           ;diskio.c: 325: buff = response();
 12888  0016E6  EC44  F02A         	call	_response	;wreg free
 12889  0016EA  0100               	movlb	0	; () banked
 12890  0016EC  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12891                           
 12892                           ; BSR set to: 0
 12893                           ;diskio.c: 326: count2++;
 12894  0016EE  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12895  0016F0  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12896                           
 12897                           ;diskio.c: 327: }while((buff!=0X01)&&(count2<10));
 12898  0016F2  056B               	decf	sdc_disk_initialize@buff& (0+255),w,b
 12899  0016F4  B4D8               	btfsc	status,2,c
 12900  0016F6  D008               	goto	u11990
 12901                           
 12902                           ; BSR set to: 0
 12903  0016F8  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12904  0016FA  D7F5               	goto	l10335
 12905  0016FC  516A               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12906  0016FE  E104               	bnz	u11990
 12907  001700  0E0A               	movlw	10
 12908  001702  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12909  001704  A0D8               	btfss	status,0,c
 12910  001706  D7EF               	goto	l10335
 12911  001708                     u11990:
 12912                           
 12913                           ; BSR set to: 0
 12914                           ;diskio.c: 328: count2 = 0;
 12915  001708  0E00               	movlw	0
 12916  00170A  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12917  00170C  0E00               	movlw	0
 12918  00170E  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 12919                           
 12920                           ; BSR set to: 0
 12921                           ;diskio.c: 332: dummy_clocks(10);
 12922  001710  0E0A               	movlw	10
 12923  001712  EC05  F028         	call	_dummy_clocks
 12924                           
 12925                           ;diskio.c: 333: command(0X69, 0X40000000 , 0x00);
 12926  001716  0E00               	movlw	0
 12927  001718  6E1E               	movwf	command@arg^0,c
 12928  00171A  0E00               	movlw	0
 12929  00171C  6E1F               	movwf	(command@arg+1)^0,c
 12930  00171E  0E00               	movlw	0
 12931  001720  6E20               	movwf	(command@arg+2)^0,c
 12932  001722  0E40               	movlw	64
 12933  001724  6E21               	movwf	(command@arg+3)^0,c
 12934  001726  0E00               	movlw	0
 12935  001728  6E22               	movwf	command@CRC^0,c
 12936  00172A  0E69               	movlw	105
 12937  00172C  EC3C  F025         	call	_command
 12938                           
 12939                           ;diskio.c: 334: proceed();
 12940  001730  EC4A  F02A         	call	_proceed	;wreg free
 12941                           
 12942                           ;diskio.c: 335: buff = response();
 12943  001734  EC44  F02A         	call	_response	;wreg free
 12944  001738  0100               	movlb	0	; () banked
 12945  00173A  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12946                           
 12947                           ; BSR set to: 0
 12948                           ;diskio.c: 336: count2++;
 12949  00173C  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12950  00173E  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12951                           
 12952                           ; BSR set to: 0
 12953                           ;diskio.c: 337: }while(buff!=0X00);
 12954  001740  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12955  001742  A4D8               	btfss	status,2,c
 12956  001744  D7BE               	goto	l10325
 12957                           
 12958                           ; BSR set to: 0
 12959                           ;diskio.c: 342: dummy_clocks(10);
 12960                           
 12961                           ; BSR set to: 0
 12962  001746  0E0A               	movlw	10
 12963  001748  EC05  F028         	call	_dummy_clocks
 12964                           
 12965                           ;diskio.c: 343: command(0X7A, 0X00000000, 0XFF);
 12966  00174C  0E00               	movlw	0
 12967  00174E  6E1E               	movwf	command@arg^0,c
 12968  001750  0E00               	movlw	0
 12969  001752  6E1F               	movwf	(command@arg+1)^0,c
 12970  001754  0E00               	movlw	0
 12971  001756  6E20               	movwf	(command@arg+2)^0,c
 12972  001758  0E00               	movlw	0
 12973  00175A  6E21               	movwf	(command@arg+3)^0,c
 12974  00175C  0EFF               	movlw	255
 12975  00175E  6E22               	movwf	command@CRC^0,c
 12976  001760  0E7A               	movlw	122
 12977  001762  EC3C  F025         	call	_command
 12978                           
 12979                           ;diskio.c: 344: proceed();
 12980  001766  EC4A  F02A         	call	_proceed	;wreg free
 12981  00176A                     l10359:
 12982                           
 12983                           ;diskio.c: 346: buff = response();
 12984  00176A  EC44  F02A         	call	_response	;wreg free
 12985  00176E  0100               	movlb	0	; () banked
 12986  001770  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12987                           
 12988                           ; BSR set to: 0
 12989                           ;diskio.c: 347: ocr = (buff << 1) & 0b10000000;
 12990  001772  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12991  001774  256B               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 12992  001776  0B80               	andlw	128
 12993  001778  6F68               	movwf	sdc_disk_initialize@ocr& (0+255),b
 12994                           
 12995                           ; BSR set to: 0
 12996                           ;diskio.c: 348: count2++;
 12997  00177A  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12998  00177C  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12999                           
 13000                           ; BSR set to: 0
 13001                           ;diskio.c: 349: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 13002  00177E  5168               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 13003  001780  B4D8               	btfsc	status,2,c
 13004  001782  D00B               	goto	u12030
 13005                           
 13006                           ; BSR set to: 0
 13007  001784  0568               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 13008  001786  B4D8               	btfsc	status,2,c
 13009  001788  D008               	goto	u12030
 13010                           
 13011                           ; BSR set to: 0
 13012  00178A  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 13013  00178C  D7EE               	goto	l10359
 13014  00178E  516A               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 13015  001790  E104               	bnz	u12030
 13016  001792  0E0A               	movlw	10
 13017  001794  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 13018  001796  A0D8               	btfss	status,0,c
 13019  001798  D7E8               	goto	l10359
 13020  00179A                     u12030:
 13021                           
 13022                           ; BSR set to: 0
 13023                           ;diskio.c: 350: }while(ocr != 0X00 && ocr !=0x01);
 13024  00179A  5168               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 13025  00179C  B4D8               	btfsc	status,2,c
 13026  00179E  D003               	goto	u12050
 13027                           
 13028                           ; BSR set to: 0
 13029  0017A0  0568               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 13030  0017A2  A4D8               	btfss	status,2,c
 13031  0017A4  D78A               	goto	u11970
 13032  0017A6                     u12050:
 13033                           
 13034                           ; BSR set to: 0
 13035                           ;diskio.c: 355: _delay((unsigned long)((1)*(48000000/4000.0)));
 13036                           
 13037                           ; BSR set to: 0
 13038  0017A6  0E10               	movlw	16
 13039  0017A8  6E2C               	movwf	??_sdc_disk_initialize^0,c
 13040  0017AA  0E94               	movlw	148
 13041  0017AC                     u15407:
 13042  0017AC  2EE8               	decfsz	wreg,f,c
 13043  0017AE  D7FE               	bra	u15407
 13044  0017B0  2E2C               	decfsz	??_sdc_disk_initialize^0,f,c
 13045  0017B2  D7FC               	bra	u15407
 13046  0017B4  D000               	nop2	
 13047                           
 13048                           ;diskio.c: 356: stat = 0X00;
 13049  0017B6  0E00               	movlw	0
 13050  0017B8  0100               	movlb	0	; () banked
 13051  0017BA  6F62               	movwf	sdc_disk_initialize@stat& (0+255),b
 13052                           
 13053                           ; BSR set to: 0
 13054                           ;diskio.c: 358: if(!ocr)
 13055  0017BC  5168               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 13056  0017BE  A4D8               	btfss	status,2,c
 13057  0017C0  D0AC               	goto	u12150
 13058                           
 13059                           ; BSR set to: 0
 13060                           ;diskio.c: 359: {;diskio.c: 361: dummy_clocks(10);
 13061  0017C2  0E0A               	movlw	10
 13062  0017C4  EC05  F028         	call	_dummy_clocks
 13063                           
 13064                           ;diskio.c: 362: command(0x50, 0x00000200,0XFF);
 13065  0017C8  0E00               	movlw	0
 13066  0017CA  6E1E               	movwf	command@arg^0,c
 13067  0017CC  0E02               	movlw	2
 13068  0017CE  6E1F               	movwf	(command@arg+1)^0,c
 13069  0017D0  0E00               	movlw	0
 13070  0017D2  6E20               	movwf	(command@arg+2)^0,c
 13071  0017D4  0E00               	movlw	0
 13072  0017D6  6E21               	movwf	(command@arg+3)^0,c
 13073  0017D8  0EFF               	movlw	255
 13074  0017DA  6E22               	movwf	command@CRC^0,c
 13075  0017DC  0E50               	movlw	80
 13076  0017DE  EC3C  F025         	call	_command
 13077                           
 13078                           ;diskio.c: 363: proceed();
 13079  0017E2  EC4A  F02A         	call	_proceed	;wreg free
 13080  0017E6                     
 13081                           ;diskio.c: 367: buff = response();
 13082  0017E6  EC44  F02A         	call	_response	;wreg free
 13083  0017EA  0100               	movlb	0	; () banked
 13084  0017EC  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 13085                           
 13086                           ; BSR set to: 0
 13087                           ;diskio.c: 368: }while(buff!=0X00);
 13088  0017EE  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 13089  0017F0  B4D8               	btfsc	status,2,c
 13090  0017F2  D093               	goto	u12150
 13091  0017F4  D7F8               	goto	l10387
 13092  0017F6                     l10393:
 13093                           
 13094                           ; BSR set to: 0
 13095                           ;diskio.c: 373: else;diskio.c: 374: {;diskio.c: 376: count2 = 0;
 13096  0017F6  0E00               	movlw	0
 13097  0017F8  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 13098  0017FA  0E00               	movlw	0
 13099  0017FC  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 13100                           
 13101                           ; BSR set to: 0
 13102                           ;diskio.c: 378: dummy_clocks(1);
 13103                           
 13104                           ; BSR set to: 0
 13105  0017FE  0E01               	movlw	1
 13106  001800  EC05  F028         	call	_dummy_clocks
 13107                           
 13108                           ;diskio.c: 379: command(0X69, 0X00000000, 0XFF);
 13109  001804  0E00               	movlw	0
 13110  001806  6E1E               	movwf	command@arg^0,c
 13111  001808  0E00               	movlw	0
 13112  00180A  6E1F               	movwf	(command@arg+1)^0,c
 13113  00180C  0E00               	movlw	0
 13114  00180E  6E20               	movwf	(command@arg+2)^0,c
 13115  001810  0E00               	movlw	0
 13116  001812  6E21               	movwf	(command@arg+3)^0,c
 13117  001814  0EFF               	movlw	255
 13118  001816  6E22               	movwf	command@CRC^0,c
 13119  001818  0E69               	movlw	105
 13120  00181A  EC3C  F025         	call	_command
 13121                           
 13122                           ;diskio.c: 380: proceed();
 13123  00181E  EC4A  F02A         	call	_proceed	;wreg free
 13124  001822                     l10403:
 13125                           
 13126                           ;diskio.c: 382: buff = response();
 13127  001822  EC44  F02A         	call	_response	;wreg free
 13128  001826  0100               	movlb	0	; () banked
 13129  001828  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 13130                           
 13131                           ; BSR set to: 0
 13132                           ;diskio.c: 383: count2++;
 13133  00182A  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 13134  00182C  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 13135                           
 13136                           ; BSR set to: 0
 13137                           ;diskio.c: 384: if(buff==0x00)
 13138  00182E  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 13139  001830  A4D8               	btfss	status,2,c
 13140  001832  D00B               	goto	l10413
 13141                           
 13142                           ; BSR set to: 0
 13143                           ;diskio.c: 385: {;diskio.c: 386: posicao_cursor_lcd(1,0);
 13144  001834  0E00               	movlw	0
 13145  001836  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
 13146  001838  0E01               	movlw	1
 13147  00183A  EC0D  F025         	call	_posicao_cursor_lcd
 13148                           
 13149                           ;diskio.c: 387: escreve_frase_ram_lcd("SD VER. 1");
 13150  00183E  0E24               	movlw	low STR_3
 13151  001840  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
 13152  001842  0E62               	movlw	high STR_3
 13153  001844  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 13154  001846  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
 13155  00184A                     l10413:
 13156                           
 13157                           ;diskio.c: 388: };diskio.c: 389: _delay((unsigned long)((1)*(48000000/4000.0)));
 13158  00184A  0E10               	movlw	16
 13159  00184C  6E2C               	movwf	??_sdc_disk_initialize^0,c
 13160  00184E  0E94               	movlw	148
 13161  001850                     u15417:
 13162  001850  2EE8               	decfsz	wreg,f,c
 13163  001852  D7FE               	bra	u15417
 13164  001854  2E2C               	decfsz	??_sdc_disk_initialize^0,f,c
 13165  001856  D7FC               	bra	u15417
 13166  001858  D000               	nop2	
 13167                           
 13168                           ;diskio.c: 390: }while(buff!=0X00 && count2<10000);
 13169  00185A  0100               	movlb	0	; () banked
 13170  00185C  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 13171  00185E  B4D8               	btfsc	status,2,c
 13172  001860  D008               	goto	u12100
 13173                           
 13174                           ; BSR set to: 0
 13175  001862  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 13176  001864  D7DE               	goto	l10403
 13177  001866  0E10               	movlw	16
 13178  001868  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 13179  00186A  0E27               	movlw	39
 13180  00186C  596A               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 13181  00186E  A0D8               	btfss	status,0,c
 13182  001870  D7D8               	goto	l10403
 13183  001872                     u12100:
 13184                           
 13185                           ; BSR set to: 0
 13186                           ;diskio.c: 393: if(count2==10)
 13187                           
 13188                           ; BSR set to: 0
 13189  001872  0E0A               	movlw	10
 13190  001874  1969               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 13191  001876  116A               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 13192  001878  A4D8               	btfss	status,2,c
 13193  00187A  D036               	goto	u12140
 13194                           
 13195                           ; BSR set to: 0
 13196                           ;diskio.c: 394: {;diskio.c: 395: count2 = 0;
 13197  00187C  0E00               	movlw	0
 13198  00187E  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 13199  001880  0E00               	movlw	0
 13200  001882  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 13201                           
 13202                           ; BSR set to: 0
 13203                           ;diskio.c: 396: dummy_clocks(10);
 13204  001884  0E0A               	movlw	10
 13205  001886  EC05  F028         	call	_dummy_clocks
 13206                           
 13207                           ;diskio.c: 397: command(0X41, 0X00000000, 0XFF);
 13208  00188A  0E00               	movlw	0
 13209  00188C  6E1E               	movwf	command@arg^0,c
 13210  00188E  0E00               	movlw	0
 13211  001890  6E1F               	movwf	(command@arg+1)^0,c
 13212  001892  0E00               	movlw	0
 13213  001894  6E20               	movwf	(command@arg+2)^0,c
 13214  001896  0E00               	movlw	0
 13215  001898  6E21               	movwf	(command@arg+3)^0,c
 13216  00189A  0EFF               	movlw	255
 13217  00189C  6E22               	movwf	command@CRC^0,c
 13218  00189E  0E41               	movlw	65
 13219  0018A0  EC3C  F025         	call	_command
 13220                           
 13221                           ;diskio.c: 398: proceed();
 13222  0018A4  EC4A  F02A         	call	_proceed	;wreg free
 13223  0018A8                     l10429:
 13224                           
 13225                           ;diskio.c: 400: buff = response();
 13226  0018A8  EC44  F02A         	call	_response	;wreg free
 13227  0018AC  0100               	movlb	0	; () banked
 13228  0018AE  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 13229                           
 13230                           ; BSR set to: 0
 13231                           ;diskio.c: 401: count2++;
 13232  0018B0  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 13233  0018B2  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 13234                           
 13235                           ; BSR set to: 0
 13236                           ;diskio.c: 402: if(buff==0x00)
 13237  0018B4  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 13238  0018B6  A4D8               	btfss	status,2,c
 13239  0018B8  D00B               	goto	l10439
 13240                           
 13241                           ; BSR set to: 0
 13242                           ;diskio.c: 403: {;diskio.c: 404: posicao_cursor_lcd(1,0);
 13243  0018BA  0E00               	movlw	0
 13244  0018BC  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
 13245  0018BE  0E01               	movlw	1
 13246  0018C0  EC0D  F025         	call	_posicao_cursor_lcd
 13247                           
 13248                           ;diskio.c: 405: escreve_frase_ram_lcd("MMC Ver. 3");
 13249  0018C4  0EFA               	movlw	low STR_4
 13250  0018C6  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
 13251  0018C8  0E61               	movlw	high STR_4
 13252  0018CA  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 13253  0018CC  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
 13254  0018D0                     l10439:
 13255                           
 13256                           ;diskio.c: 406: };diskio.c: 408: }while(buff!=0X00 && count2<10000);
 13257  0018D0  0100               	movlb	0	; () banked
 13258  0018D2  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 13259  0018D4  B4D8               	btfsc	status,2,c
 13260  0018D6  D008               	goto	u12140
 13261                           
 13262                           ; BSR set to: 0
 13263  0018D8  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 13264  0018DA  D7E6               	goto	l10429
 13265  0018DC  0E10               	movlw	16
 13266  0018DE  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 13267  0018E0  0E27               	movlw	39
 13268  0018E2  596A               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 13269  0018E4  A0D8               	btfss	status,0,c
 13270  0018E6  D7E0               	goto	l10429
 13271  0018E8                     u12140:
 13272                           
 13273                           ; BSR set to: 0
 13274                           ;diskio.c: 409: };diskio.c: 412: dummy_clocks(10);
 13275  0018E8  0E0A               	movlw	10
 13276  0018EA  EC05  F028         	call	_dummy_clocks
 13277                           
 13278                           ;diskio.c: 413: command(0X50,0X00000200,0XFF);
 13279  0018EE  0E00               	movlw	0
 13280  0018F0  6E1E               	movwf	command@arg^0,c
 13281  0018F2  0E02               	movlw	2
 13282  0018F4  6E1F               	movwf	(command@arg+1)^0,c
 13283  0018F6  0E00               	movlw	0
 13284  0018F8  6E20               	movwf	(command@arg+2)^0,c
 13285  0018FA  0E00               	movlw	0
 13286  0018FC  6E21               	movwf	(command@arg+3)^0,c
 13287  0018FE  0EFF               	movlw	255
 13288  001900  6E22               	movwf	command@CRC^0,c
 13289  001902  0E50               	movlw	80
 13290  001904  EC3C  F025         	call	_command
 13291                           
 13292                           ;diskio.c: 414: proceed();
 13293  001908  EC4A  F02A         	call	_proceed	;wreg free
 13294  00190C                     
 13295                           ;diskio.c: 418: buff = response();
 13296  00190C  EC44  F02A         	call	_response	;wreg free
 13297  001910  0100               	movlb	0	; () banked
 13298  001912  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 13299                           
 13300                           ; BSR set to: 0
 13301                           ;diskio.c: 419: }while(buff!=0X00);
 13302  001914  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 13303  001916  A4D8               	btfss	status,2,c
 13304  001918  D7F9               	goto	l10447
 13305  00191A                     u12150:
 13306                           
 13307                           ; BSR set to: 0
 13308                           ;diskio.c: 421: };diskio.c: 425: return stat;
 13309  00191A  5162               	movf	sdc_disk_initialize@stat& (0+255),w,b
 13310                           
 13311                           ; BSR set to: 0
 13312  00191C  0012               	return		;funcret
 13313  00191E                     __end_of_sdc_disk_initialize:
 13314                           	callstack 0
 13315                           
 13316 ;; *************** function _sdc_reset *****************
 13317 ;; Defined at:
 13318 ;;		line 238 in file "bibliotecas/diskio.c"
 13319 ;; Parameters:    Size  Location     Type
 13320 ;;		None
 13321 ;; Auto vars:     Size  Location     Type
 13322 ;;  teste          10    0        unsigned char [10]
 13323 ;;  count           2   40[COMRAM] int 
 13324 ;;  count_nosd      2   38[COMRAM] int 
 13325 ;;  i               2    0        int 
 13326 ;;  receive         2    0        unsigned int 
 13327 ;;  buff            1   42[COMRAM] unsigned char 
 13328 ;;  stat            1    0        unsigned char 
 13329 ;; Return value:  Size  Location     Type
 13330 ;;                  1    wreg      void 
 13331 ;; Registers used:
 13332 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13333 ;; Tracked objects:
 13334 ;;		On entry : 0/0
 13335 ;;		On exit  : 0/0
 13336 ;;		Unchanged: 0/0
 13337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13338 ;;      Params:         0       0       0       0       0       0       0       0       0
 13339 ;;      Locals:         7       0       0       0       0       0       0       0       0
 13340 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13341 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13342 ;;Total ram usage:        7 bytes
 13343 ;; Hardware stack levels used:    1
 13344 ;; Hardware stack levels required when called:    6
 13345 ;; This function calls:
 13346 ;;		_command
 13347 ;;		_escreve_frase_ram_lcd
 13348 ;;		_posicao_cursor_lcd
 13349 ;;		_proceed
 13350 ;;		_response
 13351 ;; This function is called by:
 13352 ;;		_sdc_disk_initialize
 13353 ;; This function uses a non-reentrant model
 13354 ;;
 13355                           
 13356                           	psect	text63
 13357  004464                     __ptext63:
 13358                           	callstack 0
 13359  004464                     _sdc_reset:
 13360                           	callstack 17
 13361                           
 13362                           ; BSR set to: 0
 13363                           ;incstack = 0
 13364  004464  0E00               	movlw	0
 13365  004466  6E2A               	movwf	(sdc_reset@count+1)^0,c
 13366  004468  0E00               	movlw	0
 13367  00446A  6E29               	movwf	sdc_reset@count^0,c
 13368  00446C  0E00               	movlw	0
 13369  00446E  6E28               	movwf	(sdc_reset@count_nosd+1)^0,c
 13370  004470  0E00               	movlw	0
 13371  004472  6E27               	movwf	sdc_reset@count_nosd^0,c
 13372  004474                     l10147:
 13373                           
 13374                           ;diskio.c: 248: command(0x40, 0X00000000, 0X95);
 13375  004474  0E00               	movlw	0
 13376  004476  6E1E               	movwf	command@arg^0,c
 13377  004478  0E00               	movlw	0
 13378  00447A  6E1F               	movwf	(command@arg+1)^0,c
 13379  00447C  0E00               	movlw	0
 13380  00447E  6E20               	movwf	(command@arg+2)^0,c
 13381  004480  0E00               	movlw	0
 13382  004482  6E21               	movwf	(command@arg+3)^0,c
 13383  004484  0E95               	movlw	149
 13384  004486  6E22               	movwf	command@CRC^0,c
 13385  004488  0E40               	movlw	64
 13386  00448A  EC3C  F025         	call	_command
 13387                           
 13388                           ;diskio.c: 249: proceed();
 13389  00448E  EC4A  F02A         	call	_proceed	;wreg free
 13390  004492                     l10151:
 13391                           
 13392                           ;diskio.c: 251: buff = response();
 13393  004492  EC44  F02A         	call	_response	;wreg free
 13394  004496  6E2B               	movwf	sdc_reset@buff^0,c
 13395                           
 13396                           ;diskio.c: 252: count++;
 13397  004498  4A29               	infsnz	sdc_reset@count^0,f,c
 13398  00449A  2A2A               	incf	(sdc_reset@count+1)^0,f,c
 13399                           
 13400                           ;diskio.c: 253: }while(buff!=0X01 && count<10);
 13401  00449C  042B               	decf	sdc_reset@buff^0,w,c
 13402  00449E  B4D8               	btfsc	status,2,c
 13403  0044A0  D008               	goto	u11700
 13404  0044A2  BE2A               	btfsc	(sdc_reset@count+1)^0,7,c
 13405  0044A4  D7F6               	goto	l10151
 13406  0044A6  502A               	movf	(sdc_reset@count+1)^0,w,c
 13407  0044A8  E104               	bnz	u11700
 13408  0044AA  0E0A               	movlw	10
 13409  0044AC  5C29               	subwf	sdc_reset@count^0,w,c
 13410  0044AE  A0D8               	btfss	status,0,c
 13411  0044B0  D7F0               	goto	l10151
 13412  0044B2                     u11700:
 13413                           
 13414                           ;diskio.c: 254: count = 0;
 13415  0044B2  0E00               	movlw	0
 13416  0044B4  6E2A               	movwf	(sdc_reset@count+1)^0,c
 13417  0044B6  0E00               	movlw	0
 13418  0044B8  6E29               	movwf	sdc_reset@count^0,c
 13419                           
 13420                           ;diskio.c: 255: if(buff != 0x01)
 13421  0044BA  042B               	decf	sdc_reset@buff^0,w,c
 13422  0044BC  B4D8               	btfsc	status,2,c
 13423  0044BE  D016               	goto	l10169
 13424                           
 13425                           ;diskio.c: 256: {;diskio.c: 257: posicao_cursor_lcd(1,0);
 13426  0044C0  0E00               	movlw	0
 13427  0044C2  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
 13428  0044C4  0E01               	movlw	1
 13429  0044C6  EC0D  F025         	call	_posicao_cursor_lcd
 13430                           
 13431                           ;diskio.c: 258: escreve_frase_ram_lcd("Sem Cartao");
 13432  0044CA  0E05               	movlw	low STR_1
 13433  0044CC  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
 13434  0044CE  0E62               	movlw	high STR_1
 13435  0044D0  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 13436  0044D2  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
 13437                           
 13438                           ;diskio.c: 259: posicao_cursor_lcd(2,0);
 13439  0044D6  0E00               	movlw	0
 13440  0044D8  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
 13441  0044DA  0E02               	movlw	2
 13442  0044DC  EC0D  F025         	call	_posicao_cursor_lcd
 13443                           
 13444                           ;diskio.c: 260: escreve_frase_ram_lcd("Insira o Cartao");
 13445  0044E0  0EB2               	movlw	low STR_2
 13446  0044E2  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
 13447  0044E4  0E61               	movlw	high STR_2
 13448  0044E6  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 13449  0044E8  EC14  F026         	call	_escreve_frase_ram_lcd	;wreg free
 13450  0044EC                     l10169:
 13451                           
 13452                           ;diskio.c: 261: };diskio.c: 263: }while(buff!=0X01);
 13453  0044EC  042B               	decf	sdc_reset@buff^0,w,c
 13454  0044EE  B4D8               	btfsc	status,2,c
 13455  0044F0  0012               	return	
 13456  0044F2  D7C0               	goto	l10147
 13457  0044F4                     __end_of_sdc_reset:
 13458                           	callstack 0
 13459                           
 13460 ;; *************** function _posicao_cursor_lcd *****************
 13461 ;; Defined at:
 13462 ;;		line 271 in file "bibliotecas/display_lcd.c"
 13463 ;; Parameters:    Size  Location     Type
 13464 ;;  linha           1    wreg     unsigned char 
 13465 ;;  coluna          1   27[COMRAM] unsigned char 
 13466 ;; Auto vars:     Size  Location     Type
 13467 ;;  linha           1   28[COMRAM] unsigned char 
 13468 ;;  endereco        1   29[COMRAM] unsigned char 
 13469 ;; Return value:  Size  Location     Type
 13470 ;;                  1    wreg      void 
 13471 ;; Registers used:
 13472 ;;		wreg, status,2, status,0, cstack
 13473 ;; Tracked objects:
 13474 ;;		On entry : 0/0
 13475 ;;		On exit  : 0/0
 13476 ;;		Unchanged: 0/0
 13477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13478 ;;      Params:         1       0       0       0       0       0       0       0       0
 13479 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13480 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13481 ;;      Totals:         3       0       0       0       0       0       0       0       0
 13482 ;;Total ram usage:        3 bytes
 13483 ;; Hardware stack levels used:    1
 13484 ;; Hardware stack levels required when called:    5
 13485 ;; This function calls:
 13486 ;;		_endereco_cursor_lcd
 13487 ;; This function is called by:
 13488 ;;		_sdc_reset
 13489 ;;		_sdc_disk_initialize
 13490 ;;		_mensagem_inicial
 13491 ;;		_troca_de_tela
 13492 ;; This function uses a non-reentrant model
 13493 ;;
 13494                           
 13495                           	psect	text64
 13496  004A1A                     __ptext64:
 13497                           	callstack 0
 13498  004A1A                     _posicao_cursor_lcd:
 13499                           	callstack 24
 13500                           
 13501                           ;incstack = 0
 13502                           ;posicao_cursor_lcd@linha stored from wreg
 13503  004A1A  6E1D               	movwf	posicao_cursor_lcd@linha^0,c
 13504                           
 13505                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 13506  004A1C  0E11               	movlw	17
 13507  004A1E  601C               	cpfslt	posicao_cursor_lcd@coluna^0,c
 13508  004A20  0012               	return	
 13509  004A22  D01B               	goto	l10011
 13510  004A24                     l232:
 13511                           
 13512                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 13513  004A24  C01C  F01E         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 13514                           
 13515                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 13516  004A28  501E               	movf	posicao_cursor_lcd@endereco^0,w,c
 13517  004A2A  EC75  F024         	call	_endereco_cursor_lcd
 13518                           
 13519                           ;display_lcd.c: 284: break;
 13520  004A2E  D022               	goto	l10013
 13521  004A30                     l9995:
 13522                           
 13523                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 13524  004A30  501C               	movf	posicao_cursor_lcd@coluna^0,w,c
 13525  004A32  0F40               	addlw	64
 13526  004A34  6E1E               	movwf	posicao_cursor_lcd@endereco^0,c
 13527                           
 13528                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 13529  004A36  501E               	movf	posicao_cursor_lcd@endereco^0,w,c
 13530  004A38  EC75  F024         	call	_endereco_cursor_lcd
 13531                           
 13532                           ;display_lcd.c: 289: break;
 13533  004A3C  D01B               	goto	l10013
 13534  004A3E                     l9999:
 13535                           
 13536                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 13537  004A3E  501C               	movf	posicao_cursor_lcd@coluna^0,w,c
 13538  004A40  0F14               	addlw	20
 13539  004A42  6E1E               	movwf	posicao_cursor_lcd@endereco^0,c
 13540                           
 13541                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 13542  004A44  501E               	movf	posicao_cursor_lcd@endereco^0,w,c
 13543  004A46  EC75  F024         	call	_endereco_cursor_lcd
 13544                           
 13545                           ;display_lcd.c: 294: break;
 13546  004A4A  D014               	goto	l10013
 13547  004A4C                     l10003:
 13548                           
 13549                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 13550  004A4C  501C               	movf	posicao_cursor_lcd@coluna^0,w,c
 13551  004A4E  0F54               	addlw	84
 13552  004A50  6E1E               	movwf	posicao_cursor_lcd@endereco^0,c
 13553                           
 13554                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 13555  004A52  501E               	movf	posicao_cursor_lcd@endereco^0,w,c
 13556  004A54  EC75  F024         	call	_endereco_cursor_lcd
 13557                           
 13558                           ;display_lcd.c: 303: break;
 13559                           
 13560                           ;display_lcd.c: 299: break;
 13561  004A58  D00D               	goto	l10013
 13562  004A5A                     l10011:
 13563  004A5A  501D               	movf	posicao_cursor_lcd@linha^0,w,c
 13564                           
 13565                           ; Switch size 1, requested type "simple"
 13566                           ; Number of cases is 4, Range of values is 1 to 4
 13567                           ; switch strategies available:
 13568                           ; Name         Instructions Cycles
 13569                           ; simple_byte           13     7 (average)
 13570                           ;	Chosen strategy is simple_byte
 13571  004A5C  0A01               	xorlw	1	; case 1
 13572  004A5E  B4D8               	btfsc	status,2,c
 13573  004A60  D7E1               	goto	l232
 13574  004A62  0A03               	xorlw	3	; case 2
 13575  004A64  B4D8               	btfsc	status,2,c
 13576  004A66  D7E4               	goto	l9995
 13577  004A68  0A01               	xorlw	1	; case 3
 13578  004A6A  B4D8               	btfsc	status,2,c
 13579  004A6C  D7E8               	goto	l9999
 13580  004A6E  0A07               	xorlw	7	; case 4
 13581  004A70  B4D8               	btfsc	status,2,c
 13582  004A72  D7EC               	goto	l10003
 13583  004A74                     l10013:
 13584                           
 13585                           ;display_lcd.c: 306: coluna++;
 13586  004A74  2A1C               	incf	posicao_cursor_lcd@coluna^0,f,c
 13587                           
 13588                           ;display_lcd.c: 307: }
 13589  004A76  0012               	return	
 13590  004A78                     __end_of_posicao_cursor_lcd:
 13591                           	callstack 0
 13592                           
 13593 ;; *************** function _endereco_cursor_lcd *****************
 13594 ;; Defined at:
 13595 ;;		line 218 in file "bibliotecas/display_lcd.c"
 13596 ;; Parameters:    Size  Location     Type
 13597 ;;  endereco        1    wreg     unsigned char 
 13598 ;; Auto vars:     Size  Location     Type
 13599 ;;  endereco        1   26[COMRAM] unsigned char 
 13600 ;; Return value:  Size  Location     Type
 13601 ;;                  1    wreg      void 
 13602 ;; Registers used:
 13603 ;;		wreg, status,2, status,0, cstack
 13604 ;; Tracked objects:
 13605 ;;		On entry : 0/0
 13606 ;;		On exit  : 0/0
 13607 ;;		Unchanged: 0/0
 13608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13609 ;;      Params:         0       0       0       0       0       0       0       0       0
 13610 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13611 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13612 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13613 ;;Total ram usage:        1 bytes
 13614 ;; Hardware stack levels used:    1
 13615 ;; Hardware stack levels required when called:    4
 13616 ;; This function calls:
 13617 ;;		_delay
 13618 ;; This function is called by:
 13619 ;;		_posicao_cursor_lcd
 13620 ;; This function uses a non-reentrant model
 13621 ;;
 13622                           
 13623                           	psect	text65
 13624  0048EA                     __ptext65:
 13625                           	callstack 0
 13626  0048EA                     _endereco_cursor_lcd:
 13627                           	callstack 24
 13628                           
 13629                           ;incstack = 0
 13630                           ;endereco_cursor_lcd@endereco stored from wreg
 13631  0048EA  6E1B               	movwf	endereco_cursor_lcd@endereco^0,c
 13632                           
 13633                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 13634  0048EC  9483               	bcf	131,2,c	;volatile
 13635                           
 13636                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 13637  0048EE  9283               	bcf	131,1,c	;volatile
 13638                           
 13639                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 13640  0048F0  9083               	bcf	131,0,c	;volatile
 13641                           
 13642                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 13643  0048F2  8E83               	bsf	131,7,c	;volatile
 13644                           
 13645                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 13646  0048F4  A81B               	btfss	endereco_cursor_lcd@endereco^0,4,c
 13647  0048F6  D002               	goto	l213
 13648  0048F8  8883               	bsf	131,4,c	;volatile
 13649  0048FA  D001               	goto	l9849
 13650  0048FC                     l213:
 13651                           
 13652                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 13653  0048FC  9883               	bcf	131,4,c	;volatile
 13654  0048FE                     l9849:
 13655                           
 13656                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 13657  0048FE  AA1B               	btfss	endereco_cursor_lcd@endereco^0,5,c
 13658  004900  D002               	goto	l215
 13659  004902  8A83               	bsf	131,5,c	;volatile
 13660  004904  D001               	goto	l9853
 13661  004906                     l215:
 13662                           
 13663                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 13664  004906  9A83               	bcf	131,5,c	;volatile
 13665  004908                     l9853:
 13666                           
 13667                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 13668  004908  AC1B               	btfss	endereco_cursor_lcd@endereco^0,6,c
 13669  00490A  D002               	goto	l217
 13670  00490C  8C83               	bsf	131,6,c	;volatile
 13671  00490E  D001               	goto	l218
 13672  004910                     l217:
 13673                           
 13674                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 13675  004910  9C83               	bcf	131,6,c	;volatile
 13676  004912                     l218:
 13677                           
 13678                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 13679  004912  8083               	bsf	131,0,c	;volatile
 13680                           
 13681                           ;display_lcd.c: 236: delay();
 13682  004914  ECBE  F029         	call	_delay	;wreg free
 13683                           
 13684                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 13685  004918  9083               	bcf	131,0,c	;volatile
 13686                           
 13687                           ;display_lcd.c: 238: delay();
 13688  00491A  ECBE  F029         	call	_delay	;wreg free
 13689                           
 13690                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 13691  00491E  A01B               	btfss	endereco_cursor_lcd@endereco^0,0,c
 13692  004920  D002               	goto	l219
 13693  004922  8883               	bsf	131,4,c	;volatile
 13694  004924  D001               	goto	l220
 13695  004926                     l219:
 13696                           
 13697                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 13698  004926  9883               	bcf	131,4,c	;volatile
 13699  004928                     l220:
 13700                           
 13701                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 13702  004928  A21B               	btfss	endereco_cursor_lcd@endereco^0,1,c
 13703  00492A  D002               	goto	l221
 13704  00492C  8A83               	bsf	131,5,c	;volatile
 13705  00492E  D001               	goto	l222
 13706  004930                     l221:
 13707                           
 13708                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 13709  004930  9A83               	bcf	131,5,c	;volatile
 13710  004932                     l222:
 13711                           
 13712                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 13713  004932  A41B               	btfss	endereco_cursor_lcd@endereco^0,2,c
 13714  004934  D002               	goto	l223
 13715  004936  8C83               	bsf	131,6,c	;volatile
 13716  004938  D001               	goto	l224
 13717  00493A                     l223:
 13718                           
 13719                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 13720  00493A  9C83               	bcf	131,6,c	;volatile
 13721  00493C                     l224:
 13722                           
 13723                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 13724  00493C  A61B               	btfss	endereco_cursor_lcd@endereco^0,3,c
 13725  00493E  D002               	goto	l225
 13726  004940  8E83               	bsf	131,7,c	;volatile
 13727  004942  D001               	goto	l226
 13728  004944                     l225:
 13729                           
 13730                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 13731  004944  9E83               	bcf	131,7,c	;volatile
 13732  004946                     l226:
 13733                           
 13734                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 13735  004946  8083               	bsf	131,0,c	;volatile
 13736                           
 13737                           ;display_lcd.c: 252: delay();
 13738  004948  ECBE  F029         	call	_delay	;wreg free
 13739                           
 13740                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 13741  00494C  9083               	bcf	131,0,c	;volatile
 13742                           
 13743                           ;display_lcd.c: 254: delay();
 13744  00494E  ECBE  F029         	call	_delay	;wreg free
 13745  004952  0012               	return		;funcret
 13746  004954                     __end_of_endereco_cursor_lcd:
 13747                           	callstack 0
 13748                           
 13749 ;; *************** function _escreve_frase_ram_lcd *****************
 13750 ;; Defined at:
 13751 ;;		line 445 in file "bibliotecas/display_lcd.c"
 13752 ;; Parameters:    Size  Location     Type
 13753 ;;  buffer          2   27[COMRAM] PTR unsigned char 
 13754 ;;		 -> STR_34(2), STR_33(7), STR_32(14), STR_31(17), 
 13755 ;;		 -> STR_30(4), STR_29(4), STR_28(5), STR_27(5), 
 13756 ;;		 -> mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), NULL(0), STR_12(9), 
 13757 ;;		 -> STR_11(10), STR_10(10), STR_9(14), STR_8(21), 
 13758 ;;		 -> STR_7(15), rawFix(2), rawLongitude(13), rawLatitude(13), 
 13759 ;;		 -> escreve_inteiro_lcd@texto(7), STR_4(11), STR_3(10), STR_2(16), 
 13760 ;;		 -> STR_1(11), 
 13761 ;; Auto vars:     Size  Location     Type
 13762 ;;		None
 13763 ;; Return value:  Size  Location     Type
 13764 ;;                  1    wreg      void 
 13765 ;; Registers used:
 13766 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13767 ;; Tracked objects:
 13768 ;;		On entry : 0/0
 13769 ;;		On exit  : 0/0
 13770 ;;		Unchanged: 0/0
 13771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13772 ;;      Params:         2       0       0       0       0       0       0       0       0
 13773 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13774 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13775 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13776 ;;Total ram usage:        2 bytes
 13777 ;; Hardware stack levels used:    1
 13778 ;; Hardware stack levels required when called:    5
 13779 ;; This function calls:
 13780 ;;		_escreve_caractere_lcd
 13781 ;; This function is called by:
 13782 ;;		_sdc_reset
 13783 ;;		_sdc_disk_initialize
 13784 ;;		_escreve_inteiro_lcd
 13785 ;;		_mensagem_inicial
 13786 ;;		_troca_de_tela
 13787 ;; This function uses a non-reentrant model
 13788 ;;
 13789                           
 13790                           	psect	text66
 13791  004C28                     __ptext66:
 13792                           	callstack 0
 13793  004C28                     _escreve_frase_ram_lcd:
 13794                           	callstack 24
 13795                           
 13796                           ;display_lcd.c: 447: while(*buffer)
 13797                           
 13798                           ;incstack = 0
 13799  004C28  D014               	goto	l10023
 13800  004C2A                     l10019:
 13801                           
 13802                           ;display_lcd.c: 448: {;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 13803  004C2A  C01C  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 13804  004C2E  C01D  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 13805  004C32  6AF8               	clrf	tblptru,c
 13806  004C34  0E07               	movlw	(high __ramtop+-1)
 13807  004C36  64F7               	cpfsgt	tblptrh,c
 13808  004C38  D003               	bra	u11477
 13809  004C3A  0008               	tblrd		*
 13810  004C3C  50F5               	movf	tablat,w,c
 13811  004C3E  D005               	bra	u11470
 13812  004C40                     u11477:
 13813  004C40  CFF6 FFE1          	movff	tblptrl,fsr1l
 13814  004C44  CFF7 FFE2          	movff	tblptrh,fsr1h
 13815  004C48  50E7               	movf	indf1,w,c
 13816  004C4A                     u11470:
 13817  004C4A  EC04  F024         	call	_escreve_caractere_lcd
 13818                           
 13819                           ;display_lcd.c: 450: buffer++;
 13820  004C4E  4A1C               	infsnz	escreve_frase_ram_lcd@buffer^0,f,c
 13821  004C50  2A1D               	incf	(escreve_frase_ram_lcd@buffer+1)^0,f,c
 13822  004C52                     l10023:
 13823  004C52  C01C  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 13824  004C56  C01D  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 13825  004C5A  6AF8               	clrf	tblptru,c
 13826  004C5C  0E07               	movlw	(high __ramtop+-1)
 13827  004C5E  64F7               	cpfsgt	tblptrh,c
 13828  004C60  D003               	bra	u11487
 13829  004C62  0008               	tblrd		*
 13830  004C64  50F5               	movf	tablat,w,c
 13831  004C66  D005               	bra	u11480
 13832  004C68                     u11487:
 13833  004C68  CFF6 FFE1          	movff	tblptrl,fsr1l
 13834  004C6C  CFF7 FFE2          	movff	tblptrh,fsr1h
 13835  004C70  50E7               	movf	indf1,w,c
 13836  004C72                     u11480:
 13837  004C72  0900               	iorlw	0
 13838  004C74  B4D8               	btfsc	status,2,c
 13839  004C76  0012               	return	
 13840  004C78  D7D8               	goto	l10019
 13841  004C7A                     __end_of_escreve_frase_ram_lcd:
 13842                           	callstack 0
 13843                           
 13844 ;; *************** function _escreve_caractere_lcd *****************
 13845 ;; Defined at:
 13846 ;;		line 323 in file "bibliotecas/display_lcd.c"
 13847 ;; Parameters:    Size  Location     Type
 13848 ;;  data            1    wreg     unsigned char 
 13849 ;; Auto vars:     Size  Location     Type
 13850 ;;  data            1   26[COMRAM] unsigned char 
 13851 ;; Return value:  Size  Location     Type
 13852 ;;                  1    wreg      void 
 13853 ;; Registers used:
 13854 ;;		wreg, status,2, status,0, cstack
 13855 ;; Tracked objects:
 13856 ;;		On entry : 0/0
 13857 ;;		On exit  : 0/0
 13858 ;;		Unchanged: 0/0
 13859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13860 ;;      Params:         0       0       0       0       0       0       0       0       0
 13861 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13862 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13863 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13864 ;;Total ram usage:        1 bytes
 13865 ;; Hardware stack levels used:    1
 13866 ;; Hardware stack levels required when called:    4
 13867 ;; This function calls:
 13868 ;;		_delay
 13869 ;; This function is called by:
 13870 ;;		_escreve_frase_ram_lcd
 13871 ;; This function uses a non-reentrant model
 13872 ;;
 13873                           
 13874                           	psect	text67
 13875  004808                     __ptext67:
 13876                           	callstack 0
 13877  004808                     _escreve_caractere_lcd:
 13878                           	callstack 24
 13879                           
 13880                           ;incstack = 0
 13881                           ;escreve_caractere_lcd@data stored from wreg
 13882  004808  6E1B               	movwf	escreve_caractere_lcd@data^0,c
 13883                           
 13884                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 13885  00480A  9483               	bcf	131,2,c	;volatile
 13886                           
 13887                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 13888  00480C  8283               	bsf	131,1,c	;volatile
 13889                           
 13890                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 13891  00480E  9083               	bcf	131,0,c	;volatile
 13892                           
 13893                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 13894  004810  A81B               	btfss	escreve_caractere_lcd@data^0,4,c
 13895  004812  D002               	goto	l242
 13896  004814  8883               	bsf	131,4,c	;volatile
 13897  004816  D001               	goto	l9881
 13898  004818                     l242:
 13899                           
 13900                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 13901  004818  9883               	bcf	131,4,c	;volatile
 13902  00481A                     l9881:
 13903                           
 13904                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 13905  00481A  AA1B               	btfss	escreve_caractere_lcd@data^0,5,c
 13906  00481C  D002               	goto	l244
 13907  00481E  8A83               	bsf	131,5,c	;volatile
 13908  004820  D001               	goto	l9885
 13909  004822                     l244:
 13910                           
 13911                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 13912  004822  9A83               	bcf	131,5,c	;volatile
 13913  004824                     l9885:
 13914                           
 13915                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 13916  004824  AC1B               	btfss	escreve_caractere_lcd@data^0,6,c
 13917  004826  D002               	goto	l246
 13918  004828  8C83               	bsf	131,6,c	;volatile
 13919  00482A  D001               	goto	l9889
 13920  00482C                     l246:
 13921                           
 13922                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 13923  00482C  9C83               	bcf	131,6,c	;volatile
 13924  00482E                     l9889:
 13925                           
 13926                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 13927  00482E  AE1B               	btfss	escreve_caractere_lcd@data^0,7,c
 13928  004830  D002               	goto	l248
 13929  004832  8E83               	bsf	131,7,c	;volatile
 13930  004834  D001               	goto	l249
 13931  004836                     l248:
 13932                           
 13933                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 13934  004836  9E83               	bcf	131,7,c	;volatile
 13935  004838                     l249:
 13936                           
 13937                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 13938  004838  8083               	bsf	131,0,c	;volatile
 13939                           
 13940                           ;display_lcd.c: 342: delay();
 13941  00483A  ECBE  F029         	call	_delay	;wreg free
 13942                           
 13943                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 13944  00483E  9083               	bcf	131,0,c	;volatile
 13945                           
 13946                           ;display_lcd.c: 344: delay();
 13947  004840  ECBE  F029         	call	_delay	;wreg free
 13948                           
 13949                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 13950  004844  A01B               	btfss	escreve_caractere_lcd@data^0,0,c
 13951  004846  D002               	goto	l250
 13952  004848  8883               	bsf	131,4,c	;volatile
 13953  00484A  D001               	goto	l251
 13954  00484C                     l250:
 13955                           
 13956                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 13957  00484C  9883               	bcf	131,4,c	;volatile
 13958  00484E                     l251:
 13959                           
 13960                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 13961  00484E  A21B               	btfss	escreve_caractere_lcd@data^0,1,c
 13962  004850  D002               	goto	l252
 13963  004852  8A83               	bsf	131,5,c	;volatile
 13964  004854  D001               	goto	l253
 13965  004856                     l252:
 13966                           
 13967                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 13968  004856  9A83               	bcf	131,5,c	;volatile
 13969  004858                     l253:
 13970                           
 13971                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 13972  004858  A41B               	btfss	escreve_caractere_lcd@data^0,2,c
 13973  00485A  D002               	goto	l254
 13974  00485C  8C83               	bsf	131,6,c	;volatile
 13975  00485E  D001               	goto	l255
 13976  004860                     l254:
 13977                           
 13978                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 13979  004860  9C83               	bcf	131,6,c	;volatile
 13980  004862                     l255:
 13981                           
 13982                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 13983  004862  A61B               	btfss	escreve_caractere_lcd@data^0,3,c
 13984  004864  D002               	goto	l256
 13985  004866  8E83               	bsf	131,7,c	;volatile
 13986  004868  D001               	goto	l257
 13987  00486A                     l256:
 13988                           
 13989                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 13990  00486A  9E83               	bcf	131,7,c	;volatile
 13991  00486C                     l257:
 13992                           
 13993                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 13994  00486C  8083               	bsf	131,0,c	;volatile
 13995                           
 13996                           ;display_lcd.c: 359: delay();
 13997  00486E  ECBE  F029         	call	_delay	;wreg free
 13998                           
 13999                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 14000  004872  9083               	bcf	131,0,c	;volatile
 14001                           
 14002                           ;display_lcd.c: 361: delay();
 14003  004874  ECBE  F029         	call	_delay	;wreg free
 14004  004878  0012               	return		;funcret
 14005  00487A                     __end_of_escreve_caractere_lcd:
 14006                           	callstack 0
 14007                           
 14008 ;; *************** function _delay *****************
 14009 ;; Defined at:
 14010 ;;		line 45 in file "bibliotecas/display_lcd.c"
 14011 ;; Parameters:    Size  Location     Type
 14012 ;;		None
 14013 ;; Auto vars:     Size  Location     Type
 14014 ;;  contador_int    1   25[COMRAM] unsigned char 
 14015 ;;  contador_ext    1   24[COMRAM] unsigned char 
 14016 ;; Return value:  Size  Location     Type
 14017 ;;                  1    wreg      void 
 14018 ;; Registers used:
 14019 ;;		wreg, status,2, status,0
 14020 ;; Tracked objects:
 14021 ;;		On entry : 0/0
 14022 ;;		On exit  : 0/0
 14023 ;;		Unchanged: 0/0
 14024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14025 ;;      Params:         0       0       0       0       0       0       0       0       0
 14026 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14027 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14028 ;;      Totals:         2       0       0       0       0       0       0       0       0
 14029 ;;Total ram usage:        2 bytes
 14030 ;; Hardware stack levels used:    1
 14031 ;; Hardware stack levels required when called:    3
 14032 ;; This function calls:
 14033 ;;		Nothing
 14034 ;; This function is called by:
 14035 ;;		_init_lcd
 14036 ;;		_escreve_cmd_lcd
 14037 ;;		_endereco_cursor_lcd
 14038 ;;		_escreve_caractere_lcd
 14039 ;; This function uses a non-reentrant model
 14040 ;;
 14041                           
 14042                           	psect	text68
 14043  00537C                     __ptext68:
 14044                           	callstack 0
 14045  00537C                     _delay:
 14046                           	callstack 24
 14047                           
 14048                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;;display_lcd.c: 49: for(con
      +                          tador_ext = 0; contador_ext<100; contador_ext++)
 14049                           
 14050                           ;incstack = 0
 14051  00537C  0E00               	movlw	0
 14052  00537E  6E19               	movwf	delay@contador_ext^0,c
 14053  005380                     l181:
 14054                           
 14055                           ;display_lcd.c: 50: {;display_lcd.c: 51: __nop();
 14056  005380  F000               	nop	
 14057                           
 14058                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 14059  005382  0E00               	movlw	0
 14060  005384  6E1A               	movwf	delay@contador_int^0,c
 14061  005386                     l183:
 14062                           
 14063                           ;display_lcd.c: 53: {;display_lcd.c: 54: __nop();
 14064  005386  F000               	nop	
 14065  005388  2A1A               	incf	delay@contador_int^0,f,c
 14066  00538A  0E31               	movlw	49
 14067  00538C  641A               	cpfsgt	delay@contador_int^0,c
 14068  00538E  D7FB               	goto	l183
 14069  005390  2A19               	incf	delay@contador_ext^0,f,c
 14070  005392  0E63               	movlw	99
 14071  005394  6419               	cpfsgt	delay@contador_ext^0,c
 14072  005396  D7F4               	goto	l181
 14073  005398  0012               	return	
 14074  00539A                     __end_of_delay:
 14075                           	callstack 0
 14076                           
 14077 ;; *************** function _check_fs *****************
 14078 ;; Defined at:
 14079 ;;		line 624 in file "bibliotecas/tff.c"
 14080 ;; Parameters:    Size  Location     Type
 14081 ;;  sect            4   19[BANK0 ] unsigned long 
 14082 ;; Auto vars:     Size  Location     Type
 14083 ;;  fs              2   25[BANK0 ] PTR struct _FATFS
 14084 ;;		 -> NULL(0), fs(544), 
 14085 ;; Return value:  Size  Location     Type
 14086 ;;                  1    wreg      unsigned char 
 14087 ;; Registers used:
 14088 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14089 ;; Tracked objects:
 14090 ;;		On entry : 3F/0
 14091 ;;		On exit  : 0/0
 14092 ;;		Unchanged: 0/0
 14093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14094 ;;      Params:         0       4       0       0       0       0       0       0       0
 14095 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14096 ;;      Temps:          0       2       0       0       0       0       0       0       0
 14097 ;;      Totals:         0       8       0       0       0       0       0       0       0
 14098 ;;Total ram usage:        8 bytes
 14099 ;; Hardware stack levels used:    1
 14100 ;; Hardware stack levels required when called:    8
 14101 ;; This function calls:
 14102 ;;		_disk_read
 14103 ;;		_memcmp
 14104 ;; This function is called by:
 14105 ;;		_auto_mount
 14106 ;; This function uses a non-reentrant model
 14107 ;;
 14108                           
 14109                           	psect	text69
 14110  00468E                     __ptext69:
 14111                           	callstack 0
 14112  00468E                     _check_fs:
 14113                           	callstack 17
 14114                           
 14115                           ; BSR set to: 0
 14116                           ;tff.c: 628: FATFS *fs = FatFs;
 14117                           
 14118                           ;incstack = 0
 14119  00468E  C039  F079         	movff	_FatFs,check_fs@fs
 14120  004692  C03A  F07A         	movff	_FatFs+1,check_fs@fs+1
 14121                           
 14122                           ; BSR set to: 0
 14123                           ;tff.c: 630: if (disk_read(0, fs->win, sect, 1) != RES_OK)
 14124  004696  0E20               	movlw	32
 14125  004698  2579               	addwf	check_fs@fs& (0+255),w,b
 14126  00469A  6F68               	movwf	disk_read@buff& (0+255),b
 14127  00469C  0E00               	movlw	0
 14128  00469E  217A               	addwfc	(check_fs@fs+1)& (0+255),w,b
 14129  0046A0  6F69               	movwf	(disk_read@buff+1)& (0+255),b
 14130  0046A2  C073  F06A         	movff	check_fs@sect,disk_read@sector
 14131  0046A6  C074  F06B         	movff	check_fs@sect+1,disk_read@sector+1
 14132  0046AA  C075  F06C         	movff	check_fs@sect+2,disk_read@sector+2
 14133  0046AE  C076  F06D         	movff	check_fs@sect+3,disk_read@sector+3
 14134  0046B2  0E01               	movlw	1
 14135  0046B4  6F6E               	movwf	disk_read@count& (0+255),b
 14136  0046B6  0E00               	movlw	0
 14137  0046B8  EC3D  F024         	call	_disk_read
 14138  0046BC  0900               	iorlw	0
 14139  0046BE  B4D8               	btfsc	status,2,c
 14140  0046C0  D002               	goto	l10725
 14141  0046C2                     u12550:
 14142  0046C2                     l10721:
 14143                           
 14144                           ; BSR set to: 0
 14145                           ;tff.c: 631: return 2;
 14146  0046C2  0E02               	movlw	2
 14147  0046C4  0012               	return	
 14148  0046C6                     l10725:
 14149                           
 14150                           ; BSR set to: 0
 14151                           ;tff.c: 632: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 14152  0046C6  EE22 F01E          	lfsr	2,542
 14153  0046CA  5179               	movf	check_fs@fs& (0+255),w,b
 14154  0046CC  26D9               	addwf	fsr2l,f,c
 14155  0046CE  517A               	movf	(check_fs@fs+1)& (0+255),w,b
 14156  0046D0  22DA               	addwfc	fsr2h,f,c
 14157  0046D2  0E55               	movlw	85
 14158  0046D4  18DE               	xorwf	postinc2,w,c
 14159  0046D6  E1F5               	bnz	l10721
 14160  0046D8  0EAA               	movlw	170
 14161  0046DA  18DE               	xorwf	postinc2,w,c
 14162  0046DC  A4D8               	btfss	status,2,c
 14163  0046DE  D7F1               	goto	u12550
 14164                           
 14165                           ; BSR set to: 0
 14166                           ;tff.c: 635: if (!memcmp(&fs->win[54], "FAT", 3))
 14167  0046E0  0E56               	movlw	86
 14168  0046E2  2579               	addwf	check_fs@fs& (0+255),w,b
 14169  0046E4  6E19               	movwf	memcmp@s1^0,c
 14170  0046E6  0E00               	movlw	0
 14171  0046E8  217A               	addwfc	(check_fs@fs+1)& (0+255),w,b
 14172  0046EA  6E1A               	movwf	(memcmp@s1+1)^0,c
 14173  0046EC  0E73               	movlw	low STR_23
 14174  0046EE  6E1B               	movwf	memcmp@s2^0,c
 14175  0046F0  0E62               	movlw	high STR_23
 14176  0046F2  6E1C               	movwf	(memcmp@s2+1)^0,c
 14177  0046F4  0E00               	movlw	0
 14178  0046F6  6E1E               	movwf	(memcmp@n+1)^0,c
 14179  0046F8  0E03               	movlw	3
 14180  0046FA  6E1D               	movwf	memcmp@n^0,c
 14181  0046FC  ECE9  F021         	call	_memcmp	;wreg free
 14182  004700  5019               	movf	?_memcmp^0,w,c
 14183  004702  101A               	iorwf	(?_memcmp+1)^0,w,c
 14184  004704  A4D8               	btfss	status,2,c
 14185  004706  D002               	goto	l10737
 14186                           
 14187                           ;tff.c: 636: return 0;
 14188  004708  0E00               	movlw	0
 14189  00470A  0012               	return	
 14190  00470C                     l10737:
 14191                           
 14192                           ;tff.c: 641: return 1;
 14193  00470C  0E01               	movlw	1
 14194  00470E  0012               	return		;funcret
 14195  004710                     __end_of_check_fs:
 14196                           	callstack 0
 14197                           
 14198 ;; *************** function _memcmp *****************
 14199 ;; Defined at:
 14200 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\memcmp.c"
 14201 ;; Parameters:    Size  Location     Type
 14202 ;;  s1              2   24[COMRAM] PTR const void 
 14203 ;;		 -> fs.win(512), NULL(0), fs(544), 
 14204 ;;  s2              2   26[COMRAM] PTR const void 
 14205 ;;		 -> f_opendir@fn(12), f_open@fn(12), STR_23(4), 
 14206 ;;  n               2   28[COMRAM] unsigned int 
 14207 ;; Auto vars:     Size  Location     Type
 14208 ;;		None
 14209 ;; Return value:  Size  Location     Type
 14210 ;;                  2   24[COMRAM] int 
 14211 ;; Registers used:
 14212 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 14213 ;; Tracked objects:
 14214 ;;		On entry : 3F/0
 14215 ;;		On exit  : 0/0
 14216 ;;		Unchanged: 0/0
 14217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14218 ;;      Params:         6       0       0       0       0       0       0       0       0
 14219 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14220 ;;      Temps:          2       0       0       0       0       0       0       0       0
 14221 ;;      Totals:         8       0       0       0       0       0       0       0       0
 14222 ;;Total ram usage:        8 bytes
 14223 ;; Hardware stack levels used:    1
 14224 ;; Hardware stack levels required when called:    3
 14225 ;; This function calls:
 14226 ;;		Nothing
 14227 ;; This function is called by:
 14228 ;;		_trace_path
 14229 ;;		_check_fs
 14230 ;; This function uses a non-reentrant model
 14231 ;;
 14232                           
 14233                           	psect	text70
 14234  0043D2                     __ptext70:
 14235                           	callstack 0
 14236  0043D2                     _memcmp:
 14237                           	callstack 22
 14238                           
 14239                           ; BSR set to: 0
 14240                           
 14241                           ;incstack = 0
 14242  0043D2  D03B               	goto	l10501
 14243  0043D4                     l10493:
 14244  0043D4  C019  FFD9         	movff	memcmp@s1,fsr2l
 14245  0043D8  C01A  FFDA         	movff	memcmp@s1+1,fsr2h
 14246  0043DC  50DF               	movf	indf2,w,c
 14247  0043DE  6E1F               	movwf	??_memcmp^0,c
 14248  0043E0  C01B  FFF6         	movff	memcmp@s2,tblptrl
 14249  0043E4  C01C  FFF7         	movff	memcmp@s2+1,tblptrh
 14250  0043E8  6AF8               	clrf	tblptru,c
 14251  0043EA  0E07               	movlw	(high __ramtop+-1)
 14252  0043EC  64F7               	cpfsgt	tblptrh,c
 14253  0043EE  D003               	bra	u12167
 14254  0043F0  0008               	tblrd		*
 14255  0043F2  50F5               	movf	tablat,w,c
 14256  0043F4  D005               	bra	u12160
 14257  0043F6                     u12167:
 14258  0043F6  CFF6 FFE1          	movff	tblptrl,fsr1l
 14259  0043FA  CFF7 FFE2          	movff	tblptrh,fsr1h
 14260  0043FE  50E7               	movf	indf1,w,c
 14261  004400                     u12160:
 14262  004400  181F               	xorwf	??_memcmp^0,w,c
 14263  004402  B4D8               	btfsc	status,2,c
 14264  004404  D01E               	goto	l10499
 14265  004406  C019  FFD9         	movff	memcmp@s1,fsr2l
 14266  00440A  C01A  FFDA         	movff	memcmp@s1+1,fsr2h
 14267  00440E  50DF               	movf	indf2,w,c
 14268  004410  6E1F               	movwf	??_memcmp^0,c
 14269  004412  C01B  FFF6         	movff	memcmp@s2,tblptrl
 14270  004416  C01C  FFF7         	movff	memcmp@s2+1,tblptrh
 14271  00441A  6AF8               	clrf	tblptru,c
 14272  00441C  0E07               	movlw	(high __ramtop+-1)
 14273  00441E  64F7               	cpfsgt	tblptrh,c
 14274  004420  D003               	bra	u12187
 14275  004422  0008               	tblrd		*
 14276  004424  50F5               	movf	tablat,w,c
 14277  004426  D005               	bra	u12180
 14278  004428                     u12187:
 14279  004428  CFF6 FFE1          	movff	tblptrl,fsr1l
 14280  00442C  CFF7 FFE2          	movff	tblptrh,fsr1h
 14281  004430  50E7               	movf	indf1,w,c
 14282  004432                     u12180:
 14283  004432  6E20               	movwf	(??_memcmp+1)^0,c
 14284  004434  5020               	movf	(??_memcmp+1)^0,w,c
 14285  004436  5C1F               	subwf	??_memcmp^0,w,c
 14286  004438  6E19               	movwf	?_memcmp^0,c
 14287  00443A  6A1A               	clrf	(?_memcmp+1)^0,c
 14288  00443C  A0D8               	btfss	status,0,c
 14289  00443E  061A               	decf	(?_memcmp+1)^0,f,c
 14290  004440  0012               	return	
 14291  004442                     l10499:
 14292  004442  4A19               	infsnz	memcmp@s1^0,f,c
 14293  004444  2A1A               	incf	(memcmp@s1+1)^0,f,c
 14294  004446  4A1B               	infsnz	memcmp@s2^0,f,c
 14295  004448  2A1C               	incf	(memcmp@s2+1)^0,f,c
 14296  00444A                     l10501:
 14297  00444A  061D               	decf	memcmp@n^0,f,c
 14298  00444C  A0D8               	btfss	status,0,c
 14299  00444E  061E               	decf	(memcmp@n+1)^0,f,c
 14300  004450  281D               	incf	memcmp@n^0,w,c
 14301  004452  E1C0               	bnz	l10493
 14302  004454  281E               	incf	(memcmp@n+1)^0,w,c
 14303  004456  A4D8               	btfss	status,2,c
 14304  004458  D7BD               	goto	l10493
 14305  00445A  0E00               	movlw	0
 14306  00445C  6E1A               	movwf	(?_memcmp+1)^0,c
 14307  00445E  0E00               	movlw	0
 14308  004460  6E19               	movwf	?_memcmp^0,c
 14309  004462  0012               	return		;funcret
 14310  004464                     __end_of_memcmp:
 14311                           	callstack 0
 14312                           
 14313 ;; *************** function ___lmul *****************
 14314 ;; Defined at:
 14315 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\Umul32.c"
 14316 ;; Parameters:    Size  Location     Type
 14317 ;;  multiplier      4   24[COMRAM] unsigned long 
 14318 ;;  multiplicand    4   28[COMRAM] unsigned long 
 14319 ;; Auto vars:     Size  Location     Type
 14320 ;;  product         4   32[COMRAM] unsigned long 
 14321 ;; Return value:  Size  Location     Type
 14322 ;;                  4   24[COMRAM] unsigned long 
 14323 ;; Registers used:
 14324 ;;		wreg, status,2, status,0
 14325 ;; Tracked objects:
 14326 ;;		On entry : 3F/0
 14327 ;;		On exit  : 3F/0
 14328 ;;		Unchanged: 3F/0
 14329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14330 ;;      Params:         8       0       0       0       0       0       0       0       0
 14331 ;;      Locals:         4       0       0       0       0       0       0       0       0
 14332 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14333 ;;      Totals:        12       0       0       0       0       0       0       0       0
 14334 ;;Total ram usage:       12 bytes
 14335 ;; Hardware stack levels used:    1
 14336 ;; Hardware stack levels required when called:    3
 14337 ;; This function calls:
 14338 ;;		Nothing
 14339 ;; This function is called by:
 14340 ;;		_clust2sect
 14341 ;;		_auto_mount
 14342 ;; This function uses a non-reentrant model
 14343 ;;
 14344                           
 14345                           	psect	text71
 14346  004B2A                     __ptext71:
 14347                           	callstack 0
 14348  004B2A                     ___lmul:
 14349                           	callstack 19
 14350                           
 14351                           ; BSR set to: 0
 14352                           
 14353                           ;incstack = 0
 14354  004B2A  0E00               	movlw	0
 14355  004B2C  6E21               	movwf	___lmul@product^0,c
 14356  004B2E  0E00               	movlw	0
 14357  004B30  6E22               	movwf	(___lmul@product+1)^0,c
 14358  004B32  0E00               	movlw	0
 14359  004B34  6E23               	movwf	(___lmul@product+2)^0,c
 14360  004B36  0E00               	movlw	0
 14361  004B38  6E24               	movwf	(___lmul@product+3)^0,c
 14362  004B3A                     l10137:
 14363                           
 14364                           ; BSR set to: 0
 14365  004B3A  A019               	btfss	___lmul@multiplier^0,0,c
 14366  004B3C  D008               	goto	l10141
 14367                           
 14368                           ; BSR set to: 0
 14369  004B3E  501D               	movf	___lmul@multiplicand^0,w,c
 14370  004B40  2621               	addwf	___lmul@product^0,f,c
 14371  004B42  501E               	movf	(___lmul@multiplicand+1)^0,w,c
 14372  004B44  2222               	addwfc	(___lmul@product+1)^0,f,c
 14373  004B46  501F               	movf	(___lmul@multiplicand+2)^0,w,c
 14374  004B48  2223               	addwfc	(___lmul@product+2)^0,f,c
 14375  004B4A  5020               	movf	(___lmul@multiplicand+3)^0,w,c
 14376  004B4C  2224               	addwfc	(___lmul@product+3)^0,f,c
 14377  004B4E                     l10141:
 14378                           
 14379                           ; BSR set to: 0
 14380  004B4E  90D8               	bcf	status,0,c
 14381  004B50  361D               	rlcf	___lmul@multiplicand^0,f,c
 14382  004B52  361E               	rlcf	(___lmul@multiplicand+1)^0,f,c
 14383  004B54  361F               	rlcf	(___lmul@multiplicand+2)^0,f,c
 14384  004B56  3620               	rlcf	(___lmul@multiplicand+3)^0,f,c
 14385                           
 14386                           ; BSR set to: 0
 14387  004B58  90D8               	bcf	status,0,c
 14388  004B5A  321C               	rrcf	(___lmul@multiplier+3)^0,f,c
 14389  004B5C  321B               	rrcf	(___lmul@multiplier+2)^0,f,c
 14390  004B5E  321A               	rrcf	(___lmul@multiplier+1)^0,f,c
 14391  004B60  3219               	rrcf	___lmul@multiplier^0,f,c
 14392  004B62  5019               	movf	___lmul@multiplier^0,w,c
 14393  004B64  101A               	iorwf	(___lmul@multiplier+1)^0,w,c
 14394  004B66  101B               	iorwf	(___lmul@multiplier+2)^0,w,c
 14395  004B68  101C               	iorwf	(___lmul@multiplier+3)^0,w,c
 14396  004B6A  A4D8               	btfss	status,2,c
 14397  004B6C  D7E6               	goto	l10137
 14398                           
 14399                           ; BSR set to: 0
 14400  004B6E  C021  F019         	movff	___lmul@product,?___lmul
 14401  004B72  C022  F01A         	movff	___lmul@product+1,?___lmul+1
 14402  004B76  C023  F01B         	movff	___lmul@product+2,?___lmul+2
 14403  004B7A  C024  F01C         	movff	___lmul@product+3,?___lmul+3
 14404                           
 14405                           ; BSR set to: 0
 14406  004B7E  0012               	return		;funcret
 14407  004B80                     __end_of___lmul:
 14408                           	callstack 0
 14409                           
 14410 ;; *************** function _f_mount *****************
 14411 ;; Defined at:
 14412 ;;		line 794 in file "bibliotecas/tff.c"
 14413 ;; Parameters:    Size  Location     Type
 14414 ;;  drv             1    wreg     unsigned char 
 14415 ;;  fs              2   24[COMRAM] PTR struct _FATFS
 14416 ;;		 -> fs(544), 
 14417 ;; Auto vars:     Size  Location     Type
 14418 ;;  drv             1   26[COMRAM] unsigned char 
 14419 ;; Return value:  Size  Location     Type
 14420 ;;                  1    wreg      enum E3239
 14421 ;; Registers used:
 14422 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14423 ;; Tracked objects:
 14424 ;;		On entry : 0/0
 14425 ;;		On exit  : 0/0
 14426 ;;		Unchanged: 0/0
 14427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14428 ;;      Params:         2       0       0       0       0       0       0       0       0
 14429 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14430 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14431 ;;      Totals:         3       0       0       0       0       0       0       0       0
 14432 ;;Total ram usage:        3 bytes
 14433 ;; Hardware stack levels used:    1
 14434 ;; Hardware stack levels required when called:    3
 14435 ;; This function calls:
 14436 ;;		Nothing
 14437 ;; This function is called by:
 14438 ;;		_escrita_sdcard
 14439 ;; This function uses a non-reentrant model
 14440 ;;
 14441                           
 14442                           	psect	text72
 14443  004D64                     __ptext72:
 14444                           	callstack 0
 14445  004D64                     _f_mount:
 14446                           	callstack 24
 14447                           
 14448                           ; BSR set to: 0
 14449                           ;incstack = 0
 14450                           ;f_mount@drv stored from wreg
 14451  004D64  6E1B               	movwf	f_mount@drv^0,c
 14452                           
 14453                           ;tff.c: 799: if (drv) return FR_INVALID_DRIVE;
 14454  004D66  501B               	movf	f_mount@drv^0,w,c
 14455  004D68  B4D8               	btfsc	status,2,c
 14456  004D6A  D002               	goto	l8041
 14457  004D6C  0E05               	movlw	5
 14458  004D6E  0012               	return	
 14459  004D70                     l8041:
 14460                           
 14461                           ;tff.c: 801: if (FatFs) FatFs->fs_type = 0;
 14462  004D70  5039               	movf	_FatFs^0,w,c
 14463  004D72  103A               	iorwf	(_FatFs+1)^0,w,c
 14464  004D74  B4D8               	btfsc	status,2,c
 14465  004D76  D008               	goto	l8045
 14466  004D78  EE20 F01C          	lfsr	2,28
 14467  004D7C  5039               	movf	_FatFs^0,w,c
 14468  004D7E  26D9               	addwf	fsr2l,f,c
 14469  004D80  503A               	movf	(_FatFs+1)^0,w,c
 14470  004D82  22DA               	addwfc	fsr2h,f,c
 14471  004D84  0E00               	movlw	0
 14472  004D86  6EDF               	movwf	indf2,c
 14473  004D88                     l8045:
 14474                           
 14475                           ;tff.c: 803: FatFs = fs;
 14476  004D88  C019  F039         	movff	f_mount@fs,_FatFs
 14477  004D8C  C01A  F03A         	movff	f_mount@fs+1,_FatFs+1
 14478                           
 14479                           ;tff.c: 804: if (fs) fs->fs_type = 0;
 14480  004D90  5019               	movf	f_mount@fs^0,w,c
 14481  004D92  101A               	iorwf	(f_mount@fs+1)^0,w,c
 14482  004D94  B4D8               	btfsc	status,2,c
 14483  004D96  D008               	goto	l8051
 14484  004D98  EE20 F01C          	lfsr	2,28
 14485  004D9C  5019               	movf	f_mount@fs^0,w,c
 14486  004D9E  26D9               	addwf	fsr2l,f,c
 14487  004DA0  501A               	movf	(f_mount@fs+1)^0,w,c
 14488  004DA2  22DA               	addwfc	fsr2h,f,c
 14489  004DA4  0E00               	movlw	0
 14490  004DA6  6EDF               	movwf	indf2,c
 14491  004DA8                     l8051:
 14492                           
 14493                           ;tff.c: 806: return FR_OK;
 14494  004DA8  0E00               	movlw	0
 14495  004DAA  0012               	return		;funcret
 14496  004DAC                     __end_of_f_mount:
 14497                           	callstack 0
 14498                           
 14499 ;; *************** function _f_lseek *****************
 14500 ;; Defined at:
 14501 ;;		line 1140 in file "bibliotecas/tff.c"
 14502 ;; Parameters:    Size  Location     Type
 14503 ;;  fp              2   78[BANK0 ] PTR struct _FIL
 14504 ;;		 -> fil(28), 
 14505 ;;  ofs             4   80[BANK0 ] unsigned long 
 14506 ;; Auto vars:     Size  Location     Type
 14507 ;;  csize           4  105[BANK0 ] unsigned long 
 14508 ;;  ifptr           4  101[BANK0 ] unsigned long 
 14509 ;;  clust           2  109[BANK0 ] unsigned short 
 14510 ;;  res             1  100[BANK0 ] enum E155
 14511 ;; Return value:  Size  Location     Type
 14512 ;;                  1    wreg      enum E3239
 14513 ;; Registers used:
 14514 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14515 ;; Tracked objects:
 14516 ;;		On entry : 3F/0
 14517 ;;		On exit  : 3F/0
 14518 ;;		Unchanged: 0/0
 14519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14520 ;;      Params:         0       6       0       0       0       0       0       0       0
 14521 ;;      Locals:         0      11       0       0       0       0       0       0       0
 14522 ;;      Temps:          0      16       0       0       0       0       0       0       0
 14523 ;;      Totals:         0      33       0       0       0       0       0       0       0
 14524 ;;Total ram usage:       33 bytes
 14525 ;; Hardware stack levels used:    1
 14526 ;; Hardware stack levels required when called:   11
 14527 ;; This function calls:
 14528 ;;		___lldiv
 14529 ;;		_create_chain
 14530 ;;		_get_cluster
 14531 ;;		_validate
 14532 ;; This function is called by:
 14533 ;;		_escrita_sdcard
 14534 ;; This function uses a non-reentrant model
 14535 ;;
 14536                           
 14537                           	psect	text73
 14538  000AE4                     __ptext73:
 14539                           	callstack 0
 14540  000AE4                     _f_lseek:
 14541                           	callstack 16
 14542                           
 14543                           ; BSR set to: 0
 14544                           ;tff.c: 1145: FRESULT res;;tff.c: 1146: CLUST clust;;tff.c: 1147: DWORD csize, ifptr;;tf
      +                          f.c: 1150: res = validate(fp->fs, fp->id);
 14545                           
 14546                           ;incstack = 0
 14547  000AE4  EE20 F004          	lfsr	2,4
 14548  000AE8  51AE               	movf	f_lseek@fp& (0+255),w,b
 14549  000AEA  26D9               	addwf	fsr2l,f,c
 14550  000AEC  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14551  000AEE  22DA               	addwfc	fsr2h,f,c
 14552  000AF0  CFDE F01F          	movff	postinc2,validate@fs
 14553  000AF4  CFDD F020          	movff	postdec2,validate@fs+1
 14554  000AF8  C0AE  FFD9         	movff	f_lseek@fp,fsr2l
 14555  000AFC  C0AF  FFDA         	movff	f_lseek@fp+1,fsr2h
 14556  000B00  CFDE F021          	movff	postinc2,validate@id
 14557  000B04  CFDD F022          	movff	postdec2,validate@id+1
 14558  000B08  ECD6  F026         	call	_validate	;wreg free
 14559  000B0C  0100               	movlb	0	; () banked
 14560  000B0E  6FC4               	movwf	f_lseek@res& (0+255),b
 14561                           
 14562                           ; BSR set to: 0
 14563                           ;tff.c: 1151: if (res != FR_OK) return res;
 14564  000B10  51C4               	movf	f_lseek@res& (0+255),w,b
 14565  000B12  A4D8               	btfss	status,2,c
 14566  000B14  0012               	return	
 14567                           
 14568                           ; BSR set to: 0
 14569                           ;tff.c: 1152: if (fp->flag & 0x80) return FR_RW_ERROR;
 14570  000B16  EE20 F002          	lfsr	2,2
 14571  000B1A  51AE               	movf	f_lseek@fp& (0+255),w,b
 14572  000B1C  26D9               	addwf	fsr2l,f,c
 14573  000B1E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14574  000B20  22DA               	addwfc	fsr2h,f,c
 14575  000B22  BEDF               	btfsc	indf2,7,c
 14576  000B24  0012               	return	
 14577                           
 14578                           ; BSR set to: 0
 14579                           ;tff.c: 1153: if (ofs > fp->fsize;tff.c: 1155: && !(fp->flag & 0x02);tff.c: 1157: ) ofs 
      +                          = fp->fsize;
 14580  000B26  EE20 F00A          	lfsr	2,10
 14581  000B2A  51AE               	movf	f_lseek@fp& (0+255),w,b
 14582  000B2C  26D9               	addwf	fsr2l,f,c
 14583  000B2E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14584  000B30  22DA               	addwfc	fsr2h,f,c
 14585  000B32  51B0               	movf	f_lseek@ofs& (0+255),w,b
 14586  000B34  5CDE               	subwf	postinc2,w,c
 14587  000B36  51B1               	movf	(f_lseek@ofs+1)& (0+255),w,b
 14588  000B38  58DE               	subwfb	postinc2,w,c
 14589  000B3A  51B2               	movf	(f_lseek@ofs+2)& (0+255),w,b
 14590  000B3C  58DE               	subwfb	postinc2,w,c
 14591  000B3E  51B3               	movf	(f_lseek@ofs+3)& (0+255),w,b
 14592  000B40  58DE               	subwfb	postinc2,w,c
 14593  000B42  B0D8               	btfsc	status,0,c
 14594  000B44  D016               	goto	l1053
 14595                           
 14596                           ; BSR set to: 0
 14597  000B46  EE20 F002          	lfsr	2,2
 14598  000B4A  51AE               	movf	f_lseek@fp& (0+255),w,b
 14599  000B4C  26D9               	addwf	fsr2l,f,c
 14600  000B4E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14601  000B50  22DA               	addwfc	fsr2h,f,c
 14602  000B52  B2DF               	btfsc	indf2,1,c
 14603  000B54  D00E               	goto	l1053
 14604                           
 14605                           ; BSR set to: 0
 14606  000B56  EE20 F00A          	lfsr	2,10
 14607  000B5A  51AE               	movf	f_lseek@fp& (0+255),w,b
 14608  000B5C  26D9               	addwf	fsr2l,f,c
 14609  000B5E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14610  000B60  22DA               	addwfc	fsr2h,f,c
 14611  000B62  CFDE F0B0          	movff	postinc2,f_lseek@ofs
 14612  000B66  CFDE F0B1          	movff	postinc2,f_lseek@ofs+1
 14613  000B6A  CFDE F0B2          	movff	postinc2,f_lseek@ofs+2
 14614  000B6E  CFDE F0B3          	movff	postinc2,f_lseek@ofs+3
 14615  000B72                     l1053:
 14616                           
 14617                           ; BSR set to: 0
 14618                           ;tff.c: 1159: ifptr = fp->fptr;
 14619  000B72  EE20 F006          	lfsr	2,6
 14620  000B76  51AE               	movf	f_lseek@fp& (0+255),w,b
 14621  000B78  26D9               	addwf	fsr2l,f,c
 14622  000B7A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14623  000B7C  22DA               	addwfc	fsr2h,f,c
 14624  000B7E  CFDE F0C5          	movff	postinc2,f_lseek@ifptr
 14625  000B82  CFDE F0C6          	movff	postinc2,f_lseek@ifptr+1
 14626  000B86  CFDE F0C7          	movff	postinc2,f_lseek@ifptr+2
 14627  000B8A  CFDE F0C8          	movff	postinc2,f_lseek@ifptr+3
 14628                           
 14629                           ;tff.c: 1160: fp->fptr = 0; fp->csect = 255;
 14630  000B8E  EE20 F006          	lfsr	2,6
 14631  000B92  51AE               	movf	f_lseek@fp& (0+255),w,b
 14632  000B94  26D9               	addwf	fsr2l,f,c
 14633  000B96  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14634  000B98  22DA               	addwfc	fsr2h,f,c
 14635  000B9A  6ADE               	clrf	postinc2,c
 14636  000B9C  6ADE               	clrf	postinc2,c
 14637  000B9E  6ADE               	clrf	postinc2,c
 14638  000BA0  6ADD               	clrf	postdec2,c
 14639  000BA2  EE20 F003          	lfsr	2,3
 14640  000BA6  51AE               	movf	f_lseek@fp& (0+255),w,b
 14641  000BA8  26D9               	addwf	fsr2l,f,c
 14642  000BAA  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14643  000BAC  22DA               	addwfc	fsr2h,f,c
 14644  000BAE  0EFF               	movlw	255
 14645  000BB0  6EDF               	movwf	indf2,c
 14646                           
 14647                           ; BSR set to: 0
 14648                           ;tff.c: 1161: if (ofs > 0) {
 14649  000BB2  51B0               	movf	f_lseek@ofs& (0+255),w,b
 14650  000BB4  11B1               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 14651  000BB6  11B2               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 14652  000BB8  11B3               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 14653  000BBA  B4D8               	btfsc	status,2,c
 14654  000BBC  D19C               	goto	l11463
 14655                           
 14656                           ; BSR set to: 0
 14657                           ;tff.c: 1162: csize = (DWORD)fp->fs->csize * 512U;
 14658  000BBE  EE20 F004          	lfsr	2,4
 14659  000BC2  51AE               	movf	f_lseek@fp& (0+255),w,b
 14660  000BC4  26D9               	addwf	fsr2l,f,c
 14661  000BC6  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14662  000BC8  22DA               	addwfc	fsr2h,f,c
 14663  000BCA  EE10 F01D          	lfsr	1,29
 14664  000BCE  50DE               	movf	postinc2,w,c
 14665  000BD0  26E1               	addwf	fsr1l,f,c
 14666  000BD2  50DD               	movf	postdec2,w,c
 14667  000BD4  22E2               	addwfc	fsr1h,f,c
 14668  000BD6  50E7               	movf	indf1,w,c
 14669  000BD8  6FB4               	movwf	??_f_lseek& (0+255),b
 14670  000BDA  C0B4  F0B5         	movff	??_f_lseek,??_f_lseek+1
 14671  000BDE  6BB6               	clrf	(??_f_lseek+2)& (0+255),b
 14672  000BE0  6BB7               	clrf	(??_f_lseek+3)& (0+255),b
 14673  000BE2  6BB8               	clrf	(??_f_lseek+4)& (0+255),b
 14674  000BE4  0E09               	movlw	9
 14675  000BE6                     u13775:
 14676  000BE6  90D8               	bcf	status,0,c
 14677  000BE8  37B5               	rlcf	(??_f_lseek+1)& (0+255),f,b
 14678  000BEA  37B6               	rlcf	(??_f_lseek+2)& (0+255),f,b
 14679  000BEC  37B7               	rlcf	(??_f_lseek+3)& (0+255),f,b
 14680  000BEE  37B8               	rlcf	(??_f_lseek+4)& (0+255),f,b
 14681  000BF0  2EE8               	decfsz	wreg,f,c
 14682  000BF2  D7F9               	goto	u13775
 14683  000BF4  C0B5  F0C9         	movff	??_f_lseek+1,f_lseek@csize
 14684  000BF8  C0B6  F0CA         	movff	??_f_lseek+2,f_lseek@csize+1
 14685  000BFC  C0B7  F0CB         	movff	??_f_lseek+3,f_lseek@csize+2
 14686  000C00  C0B8  F0CC         	movff	??_f_lseek+4,f_lseek@csize+3
 14687                           
 14688                           ; BSR set to: 0
 14689                           ;tff.c: 1163: if (ifptr > 0 &&;tff.c: 1164: (ofs - 1) / csize >= (ifptr - 1) / csize) {
 14690  000C04  51C5               	movf	f_lseek@ifptr& (0+255),w,b
 14691  000C06  11C6               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 14692  000C08  11C7               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 14693  000C0A  11C8               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 14694  000C0C  B4D8               	btfsc	status,2,c
 14695  000C0E  D093               	goto	l11421
 14696                           
 14697                           ; BSR set to: 0
 14698  000C10  0EFF               	movlw	255
 14699  000C12  25B0               	addwf	f_lseek@ofs& (0+255),w,b
 14700  000C14  6E19               	movwf	___lldiv@dividend^0,c
 14701  000C16  0EFF               	movlw	255
 14702  000C18  21B1               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 14703  000C1A  6E1A               	movwf	(___lldiv@dividend+1)^0,c
 14704  000C1C  0EFF               	movlw	255
 14705  000C1E  21B2               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 14706  000C20  6E1B               	movwf	(___lldiv@dividend+2)^0,c
 14707  000C22  0EFF               	movlw	255
 14708  000C24  21B3               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 14709  000C26  6E1C               	movwf	(___lldiv@dividend+3)^0,c
 14710  000C28  C0C9  F01D         	movff	f_lseek@csize,___lldiv@divisor
 14711  000C2C  C0CA  F01E         	movff	f_lseek@csize+1,___lldiv@divisor+1
 14712  000C30  C0CB  F01F         	movff	f_lseek@csize+2,___lldiv@divisor+2
 14713  000C34  C0CC  F020         	movff	f_lseek@csize+3,___lldiv@divisor+3
 14714  000C38  EC88  F023         	call	___lldiv	;wreg free
 14715  000C3C  C019  F0B4         	movff	?___lldiv,??_f_lseek
 14716  000C40  C01A  F0B5         	movff	?___lldiv+1,??_f_lseek+1
 14717  000C44  C01B  F0B6         	movff	?___lldiv+2,??_f_lseek+2
 14718  000C48  C01C  F0B7         	movff	?___lldiv+3,??_f_lseek+3
 14719  000C4C  0EFF               	movlw	255
 14720  000C4E  0100               	movlb	0	; () banked
 14721  000C50  25C5               	addwf	f_lseek@ifptr& (0+255),w,b
 14722  000C52  6E19               	movwf	___lldiv@dividend^0,c
 14723  000C54  0EFF               	movlw	255
 14724  000C56  21C6               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 14725  000C58  6E1A               	movwf	(___lldiv@dividend+1)^0,c
 14726  000C5A  0EFF               	movlw	255
 14727  000C5C  21C7               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 14728  000C5E  6E1B               	movwf	(___lldiv@dividend+2)^0,c
 14729  000C60  0EFF               	movlw	255
 14730  000C62  21C8               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 14731  000C64  6E1C               	movwf	(___lldiv@dividend+3)^0,c
 14732  000C66  C0C9  F01D         	movff	f_lseek@csize,___lldiv@divisor
 14733  000C6A  C0CA  F01E         	movff	f_lseek@csize+1,___lldiv@divisor+1
 14734  000C6E  C0CB  F01F         	movff	f_lseek@csize+2,___lldiv@divisor+2
 14735  000C72  C0CC  F020         	movff	f_lseek@csize+3,___lldiv@divisor+3
 14736  000C76  EC88  F023         	call	___lldiv	;wreg free
 14737  000C7A  5019               	movf	?___lldiv^0,w,c
 14738  000C7C  0100               	movlb	0	; () banked
 14739  000C7E  5DB4               	subwf	??_f_lseek& (0+255),w,b
 14740  000C80  501A               	movf	(?___lldiv+1)^0,w,c
 14741  000C82  59B5               	subwfb	(??_f_lseek+1)& (0+255),w,b
 14742  000C84  501B               	movf	(?___lldiv+2)^0,w,c
 14743  000C86  59B6               	subwfb	(??_f_lseek+2)& (0+255),w,b
 14744  000C88  501C               	movf	(?___lldiv+3)^0,w,c
 14745  000C8A  59B7               	subwfb	(??_f_lseek+3)& (0+255),w,b
 14746  000C8C  A0D8               	btfss	status,0,c
 14747  000C8E  D053               	goto	l11421
 14748                           
 14749                           ; BSR set to: 0
 14750                           ;tff.c: 1165: fp->fptr = (ifptr - 1) & ~(csize - 1);
 14751  000C90  0EFF               	movlw	255
 14752  000C92  25C9               	addwf	f_lseek@csize& (0+255),w,b
 14753  000C94  6FB4               	movwf	??_f_lseek& (0+255),b
 14754  000C96  0EFF               	movlw	255
 14755  000C98  21CA               	addwfc	(f_lseek@csize+1)& (0+255),w,b
 14756  000C9A  6FB5               	movwf	(??_f_lseek+1)& (0+255),b
 14757  000C9C  0EFF               	movlw	255
 14758  000C9E  21CB               	addwfc	(f_lseek@csize+2)& (0+255),w,b
 14759  000CA0  6FB6               	movwf	(??_f_lseek+2)& (0+255),b
 14760  000CA2  0EFF               	movlw	255
 14761  000CA4  21CC               	addwfc	(f_lseek@csize+3)& (0+255),w,b
 14762  000CA6  6FB7               	movwf	(??_f_lseek+3)& (0+255),b
 14763  000CA8  1DB4               	comf	??_f_lseek& (0+255),w,b
 14764  000CAA  6FB8               	movwf	(??_f_lseek+4)& (0+255),b
 14765  000CAC  1DB5               	comf	(??_f_lseek+1)& (0+255),w,b
 14766  000CAE  6FB9               	movwf	(??_f_lseek+5)& (0+255),b
 14767  000CB0  1DB6               	comf	(??_f_lseek+2)& (0+255),w,b
 14768  000CB2  6FBA               	movwf	(??_f_lseek+6)& (0+255),b
 14769  000CB4  1DB7               	comf	(??_f_lseek+3)& (0+255),w,b
 14770  000CB6  6FBB               	movwf	(??_f_lseek+7)& (0+255),b
 14771  000CB8  0EFF               	movlw	255
 14772  000CBA  25C5               	addwf	f_lseek@ifptr& (0+255),w,b
 14773  000CBC  6FBC               	movwf	(??_f_lseek+8)& (0+255),b
 14774  000CBE  0EFF               	movlw	255
 14775  000CC0  21C6               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 14776  000CC2  6FBD               	movwf	(??_f_lseek+9)& (0+255),b
 14777  000CC4  0EFF               	movlw	255
 14778  000CC6  21C7               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 14779  000CC8  6FBE               	movwf	(??_f_lseek+10)& (0+255),b
 14780  000CCA  0EFF               	movlw	255
 14781  000CCC  21C8               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 14782  000CCE  6FBF               	movwf	(??_f_lseek+11)& (0+255),b
 14783  000CD0  51B8               	movf	(??_f_lseek+4)& (0+255),w,b
 14784  000CD2  15BC               	andwf	(??_f_lseek+8)& (0+255),w,b
 14785  000CD4  6FC0               	movwf	(??_f_lseek+12)& (0+255),b
 14786  000CD6  51B9               	movf	(??_f_lseek+5)& (0+255),w,b
 14787  000CD8  15BD               	andwf	(??_f_lseek+9)& (0+255),w,b
 14788  000CDA  6FC1               	movwf	(??_f_lseek+13)& (0+255),b
 14789  000CDC  51BA               	movf	(??_f_lseek+6)& (0+255),w,b
 14790  000CDE  15BE               	andwf	(??_f_lseek+10)& (0+255),w,b
 14791  000CE0  6FC2               	movwf	(??_f_lseek+14)& (0+255),b
 14792  000CE2  51BB               	movf	(??_f_lseek+7)& (0+255),w,b
 14793  000CE4  15BF               	andwf	(??_f_lseek+11)& (0+255),w,b
 14794  000CE6  6FC3               	movwf	(??_f_lseek+15)& (0+255),b
 14795  000CE8  EE20 F006          	lfsr	2,6
 14796  000CEC  51AE               	movf	f_lseek@fp& (0+255),w,b
 14797  000CEE  26D9               	addwf	fsr2l,f,c
 14798  000CF0  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14799  000CF2  22DA               	addwfc	fsr2h,f,c
 14800  000CF4  C0C0  FFDE         	movff	??_f_lseek+12,postinc2
 14801  000CF8  C0C1  FFDE         	movff	??_f_lseek+13,postinc2
 14802  000CFC  C0C2  FFDE         	movff	??_f_lseek+14,postinc2
 14803  000D00  C0C3  FFDE         	movff	??_f_lseek+15,postinc2
 14804                           
 14805                           ;tff.c: 1166: ofs -= fp->fptr;
 14806  000D04  EE20 F006          	lfsr	2,6
 14807  000D08  51AE               	movf	f_lseek@fp& (0+255),w,b
 14808  000D0A  26D9               	addwf	fsr2l,f,c
 14809  000D0C  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14810  000D0E  22DA               	addwfc	fsr2h,f,c
 14811  000D10  50DE               	movf	postinc2,w,c
 14812  000D12  5FB0               	subwf	f_lseek@ofs& (0+255),f,b
 14813  000D14  50DE               	movf	postinc2,w,c
 14814  000D16  5BB1               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 14815  000D18  50DE               	movf	postinc2,w,c
 14816  000D1A  5BB2               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 14817  000D1C  50DD               	movf	postdec2,w,c
 14818  000D1E  5BB3               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 14819                           
 14820                           ;tff.c: 1167: clust = fp->curr_clust;
 14821  000D20  EE20 F010          	lfsr	2,16
 14822  000D24  51AE               	movf	f_lseek@fp& (0+255),w,b
 14823  000D26  26D9               	addwf	fsr2l,f,c
 14824  000D28  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14825  000D2A  22DA               	addwfc	fsr2h,f,c
 14826  000D2C  CFDE F0CD          	movff	postinc2,f_lseek@clust
 14827  000D30  CFDD F0CE          	movff	postdec2,f_lseek@clust+1
 14828                           
 14829                           ;tff.c: 1168: } else {
 14830  000D34  D030               	goto	l11433
 14831  000D36                     l11421:
 14832                           
 14833                           ; BSR set to: 0
 14834                           ;tff.c: 1169: clust = fp->org_clust;
 14835  000D36  EE20 F00E          	lfsr	2,14
 14836  000D3A  51AE               	movf	f_lseek@fp& (0+255),w,b
 14837  000D3C  26D9               	addwf	fsr2l,f,c
 14838  000D3E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14839  000D40  22DA               	addwfc	fsr2h,f,c
 14840  000D42  CFDE F0CD          	movff	postinc2,f_lseek@clust
 14841  000D46  CFDD F0CE          	movff	postdec2,f_lseek@clust+1
 14842                           
 14843                           ; BSR set to: 0
 14844                           ;tff.c: 1171: if (clust == 0) {
 14845  000D4A  51CD               	movf	f_lseek@clust& (0+255),w,b
 14846  000D4C  11CE               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14847  000D4E  A4D8               	btfss	status,2,c
 14848  000D50  D018               	goto	l1057
 14849                           
 14850                           ; BSR set to: 0
 14851                           ;tff.c: 1172: clust = create_chain(0);
 14852  000D52  0E00               	movlw	0
 14853  000D54  6FA1               	movwf	(create_chain@clust+1)& (0+255),b
 14854  000D56  0E00               	movlw	0
 14855  000D58  6FA0               	movwf	create_chain@clust& (0+255),b
 14856  000D5A  EC23  F018         	call	_create_chain	;wreg free
 14857  000D5E  C0A0  F0CD         	movff	?_create_chain,f_lseek@clust
 14858  000D62  C0A1  F0CE         	movff	?_create_chain+1,f_lseek@clust+1
 14859                           
 14860                           ; BSR set to: 0
 14861                           ;tff.c: 1173: if (clust == 1) goto fk_error;
 14862  000D66  05CD               	decf	f_lseek@clust& (0+255),w,b
 14863  000D68  11CE               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14864  000D6A  B4D8               	btfsc	status,2,c
 14865  000D6C  D0F7               	goto	l11471
 14866                           
 14867                           ; BSR set to: 0
 14868                           ;tff.c: 1174: fp->org_clust = clust;
 14869  000D6E  EE20 F00E          	lfsr	2,14
 14870  000D72  51AE               	movf	f_lseek@fp& (0+255),w,b
 14871  000D74  26D9               	addwf	fsr2l,f,c
 14872  000D76  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14873  000D78  22DA               	addwfc	fsr2h,f,c
 14874  000D7A  C0CD  FFDE         	movff	f_lseek@clust,postinc2
 14875  000D7E  C0CE  FFDD         	movff	f_lseek@clust+1,postdec2
 14876  000D82                     l1057:
 14877                           
 14878                           ; BSR set to: 0
 14879                           ;tff.c: 1175: };tff.c: 1177: fp->curr_clust = clust;
 14880  000D82  EE20 F010          	lfsr	2,16
 14881  000D86  51AE               	movf	f_lseek@fp& (0+255),w,b
 14882  000D88  26D9               	addwf	fsr2l,f,c
 14883  000D8A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14884  000D8C  22DA               	addwfc	fsr2h,f,c
 14885  000D8E  C0CD  FFDE         	movff	f_lseek@clust,postinc2
 14886  000D92  C0CE  FFDD         	movff	f_lseek@clust+1,postdec2
 14887  000D96                     l11433:
 14888                           
 14889                           ; BSR set to: 0
 14890                           ;tff.c: 1178: };tff.c: 1179: if (clust != 0) {
 14891  000D96  51CD               	movf	f_lseek@clust& (0+255),w,b
 14892  000D98  11CE               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14893  000D9A  A4D8               	btfss	status,2,c
 14894  000D9C  D062               	goto	l11455
 14895  000D9E  D0AB               	goto	l11463
 14896  000DA0                     l11437:
 14897                           
 14898                           ; BSR set to: 0
 14899                           ;tff.c: 1182: if (fp->flag & 0x02) {
 14900  000DA0  EE20 F002          	lfsr	2,2
 14901  000DA4  51AE               	movf	f_lseek@fp& (0+255),w,b
 14902  000DA6  26D9               	addwf	fsr2l,f,c
 14903  000DA8  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14904  000DAA  22DA               	addwfc	fsr2h,f,c
 14905  000DAC  A2DF               	btfss	indf2,1,c
 14906  000DAE  D017               	goto	l11445
 14907                           
 14908                           ; BSR set to: 0
 14909                           ;tff.c: 1183: clust = create_chain(clust);
 14910  000DB0  C0CD  F0A0         	movff	f_lseek@clust,create_chain@clust
 14911  000DB4  C0CE  F0A1         	movff	f_lseek@clust+1,create_chain@clust+1
 14912  000DB8  EC23  F018         	call	_create_chain	;wreg free
 14913  000DBC  C0A0  F0CD         	movff	?_create_chain,f_lseek@clust
 14914  000DC0  C0A1  F0CE         	movff	?_create_chain+1,f_lseek@clust+1
 14915                           
 14916                           ; BSR set to: 0
 14917                           ;tff.c: 1184: if (clust == 0) {
 14918  000DC4  51CD               	movf	f_lseek@clust& (0+255),w,b
 14919  000DC6  11CE               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14920  000DC8  A4D8               	btfss	status,2,c
 14921  000DCA  D013               	goto	l11447
 14922                           
 14923                           ; BSR set to: 0
 14924                           ;tff.c: 1185: ofs = csize; break;
 14925  000DCC  C0C9  F0B0         	movff	f_lseek@csize,f_lseek@ofs
 14926  000DD0  C0CA  F0B1         	movff	f_lseek@csize+1,f_lseek@ofs+1
 14927  000DD4  C0CB  F0B2         	movff	f_lseek@csize+2,f_lseek@ofs+2
 14928  000DD8  C0CC  F0B3         	movff	f_lseek@csize+3,f_lseek@ofs+3
 14929  000DDC  D04C               	goto	u13870
 14930  000DDE                     l11445:
 14931                           
 14932                           ; BSR set to: 0
 14933                           ;tff.c: 1189: clust = get_cluster(clust);
 14934  000DDE  C0CD  F088         	movff	f_lseek@clust,get_cluster@clust
 14935  000DE2  C0CE  F089         	movff	f_lseek@clust+1,get_cluster@clust+1
 14936  000DE6  ECA7  F012         	call	_get_cluster	;wreg free
 14937  000DEA  C088  F0CD         	movff	?_get_cluster,f_lseek@clust
 14938  000DEE  C089  F0CE         	movff	?_get_cluster+1,f_lseek@clust+1
 14939  000DF2                     l11447:
 14940                           
 14941                           ; BSR set to: 0
 14942                           ;tff.c: 1190: if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
 14943  000DF2  51CE               	movf	(f_lseek@clust+1)& (0+255),w,b
 14944  000DF4  E104               	bnz	u13850
 14945  000DF6  0E02               	movlw	2
 14946  000DF8  5DCD               	subwf	f_lseek@clust& (0+255),w,b
 14947  000DFA  A0D8               	btfss	status,0,c
 14948  000DFC  D0AF               	goto	l11471
 14949  000DFE                     u13850:
 14950                           
 14951                           ; BSR set to: 0
 14952  000DFE  EE20 F004          	lfsr	2,4
 14953  000E02  51AE               	movf	f_lseek@fp& (0+255),w,b
 14954  000E04  26D9               	addwf	fsr2l,f,c
 14955  000E06  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14956  000E08  22DA               	addwfc	fsr2h,f,c
 14957  000E0A  EE10 F016          	lfsr	1,22
 14958  000E0E  50DE               	movf	postinc2,w,c
 14959  000E10  26E1               	addwf	fsr1l,f,c
 14960  000E12  50DD               	movf	postdec2,w,c
 14961  000E14  22E2               	addwfc	fsr1h,f,c
 14962  000E16  50E6               	movf	postinc1,w,c
 14963  000E18  5DCD               	subwf	f_lseek@clust& (0+255),w,b
 14964  000E1A  50E6               	movf	postinc1,w,c
 14965  000E1C  59CE               	subwfb	(f_lseek@clust+1)& (0+255),w,b
 14966  000E1E  B0D8               	btfsc	status,0,c
 14967  000E20  D09D               	goto	l11471
 14968                           
 14969                           ; BSR set to: 0
 14970                           ;tff.c: 1191: fp->curr_clust = clust;
 14971  000E22  EE20 F010          	lfsr	2,16
 14972  000E26  51AE               	movf	f_lseek@fp& (0+255),w,b
 14973  000E28  26D9               	addwf	fsr2l,f,c
 14974  000E2A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14975  000E2C  22DA               	addwfc	fsr2h,f,c
 14976  000E2E  C0CD  FFDE         	movff	f_lseek@clust,postinc2
 14977  000E32  C0CE  FFDD         	movff	f_lseek@clust+1,postdec2
 14978                           
 14979                           ;tff.c: 1192: fp->fptr += csize;
 14980  000E36  EE20 F006          	lfsr	2,6
 14981  000E3A  51AE               	movf	f_lseek@fp& (0+255),w,b
 14982  000E3C  26D9               	addwf	fsr2l,f,c
 14983  000E3E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14984  000E40  22DA               	addwfc	fsr2h,f,c
 14985  000E42  51C9               	movf	f_lseek@csize& (0+255),w,b
 14986  000E44  26DE               	addwf	postinc2,f,c
 14987  000E46  51CA               	movf	(f_lseek@csize+1)& (0+255),w,b
 14988  000E48  22DE               	addwfc	postinc2,f,c
 14989  000E4A  51CB               	movf	(f_lseek@csize+2)& (0+255),w,b
 14990  000E4C  22DE               	addwfc	postinc2,f,c
 14991  000E4E  51CC               	movf	(f_lseek@csize+3)& (0+255),w,b
 14992  000E50  22DE               	addwfc	postinc2,f,c
 14993                           
 14994                           ; BSR set to: 0
 14995                           ;tff.c: 1193: ofs -= csize;
 14996  000E52  51C9               	movf	f_lseek@csize& (0+255),w,b
 14997  000E54  5FB0               	subwf	f_lseek@ofs& (0+255),f,b
 14998  000E56  51CA               	movf	(f_lseek@csize+1)& (0+255),w,b
 14999  000E58  5BB1               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 15000  000E5A  51CB               	movf	(f_lseek@csize+2)& (0+255),w,b
 15001  000E5C  5BB2               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 15002  000E5E  51CC               	movf	(f_lseek@csize+3)& (0+255),w,b
 15003  000E60  5BB3               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 15004  000E62                     l11455:
 15005                           
 15006                           ; BSR set to: 0
 15007  000E62  51B0               	movf	f_lseek@ofs& (0+255),w,b
 15008  000E64  5DC9               	subwf	f_lseek@csize& (0+255),w,b
 15009  000E66  51B1               	movf	(f_lseek@ofs+1)& (0+255),w,b
 15010  000E68  59CA               	subwfb	(f_lseek@csize+1)& (0+255),w,b
 15011  000E6A  51B2               	movf	(f_lseek@ofs+2)& (0+255),w,b
 15012  000E6C  59CB               	subwfb	(f_lseek@csize+2)& (0+255),w,b
 15013  000E6E  51B3               	movf	(f_lseek@ofs+3)& (0+255),w,b
 15014  000E70  59CC               	subwfb	(f_lseek@csize+3)& (0+255),w,b
 15015  000E72  A0D8               	btfss	status,0,c
 15016  000E74  D795               	goto	l11437
 15017  000E76                     u13870:
 15018                           
 15019                           ; BSR set to: 0
 15020                           ;tff.c: 1194: };tff.c: 1195: fp->fptr += ofs;
 15021  000E76  EE20 F006          	lfsr	2,6
 15022  000E7A  51AE               	movf	f_lseek@fp& (0+255),w,b
 15023  000E7C  26D9               	addwf	fsr2l,f,c
 15024  000E7E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15025  000E80  22DA               	addwfc	fsr2h,f,c
 15026  000E82  51B0               	movf	f_lseek@ofs& (0+255),w,b
 15027  000E84  26DE               	addwf	postinc2,f,c
 15028  000E86  51B1               	movf	(f_lseek@ofs+1)& (0+255),w,b
 15029  000E88  22DE               	addwfc	postinc2,f,c
 15030  000E8A  51B2               	movf	(f_lseek@ofs+2)& (0+255),w,b
 15031  000E8C  22DE               	addwfc	postinc2,f,c
 15032  000E8E  51B3               	movf	(f_lseek@ofs+3)& (0+255),w,b
 15033  000E90  22DE               	addwfc	postinc2,f,c
 15034                           
 15035                           ;tff.c: 1196: fp->csect = (BYTE)(ofs / 512U);
 15036  000E92  EE20 F003          	lfsr	2,3
 15037  000E96  51AE               	movf	f_lseek@fp& (0+255),w,b
 15038  000E98  26D9               	addwf	fsr2l,f,c
 15039  000E9A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15040  000E9C  22DA               	addwfc	fsr2h,f,c
 15041  000E9E  C0B0  F0B4         	movff	f_lseek@ofs,??_f_lseek
 15042  000EA2  C0B1  F0B5         	movff	f_lseek@ofs+1,??_f_lseek+1
 15043  000EA6  C0B2  F0B6         	movff	f_lseek@ofs+2,??_f_lseek+2
 15044  000EAA  C0B3  F0B7         	movff	f_lseek@ofs+3,??_f_lseek+3
 15045  000EAE  0E0A               	movlw	10
 15046  000EB0  D005               	goto	u13880
 15047  000EB2                     u13885:
 15048  000EB2  90D8               	bcf	status,0,c
 15049  000EB4  33B7               	rrcf	(??_f_lseek+3)& (0+255),f,b
 15050  000EB6  33B6               	rrcf	(??_f_lseek+2)& (0+255),f,b
 15051  000EB8  33B5               	rrcf	(??_f_lseek+1)& (0+255),f,b
 15052  000EBA  33B4               	rrcf	??_f_lseek& (0+255),f,b
 15053  000EBC                     u13880:
 15054  000EBC  2EE8               	decfsz	wreg,f,c
 15055  000EBE  D7F9               	goto	u13885
 15056  000EC0  51B4               	movf	??_f_lseek& (0+255),w,b
 15057  000EC2  6EDF               	movwf	indf2,c
 15058                           
 15059                           ; BSR set to: 0
 15060                           ;tff.c: 1197: if (ofs % 512U) fp->csect++;
 15061  000EC4  0EFF               	movlw	255
 15062  000EC6  15B0               	andwf	f_lseek@ofs& (0+255),w,b
 15063  000EC8  6FB4               	movwf	??_f_lseek& (0+255),b
 15064  000ECA  0E01               	movlw	1
 15065  000ECC  15B1               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 15066  000ECE  6FB5               	movwf	(??_f_lseek+1)& (0+255),b
 15067  000ED0  0E00               	movlw	0
 15068  000ED2  15B2               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 15069  000ED4  6FB6               	movwf	(??_f_lseek+2)& (0+255),b
 15070  000ED6  0E00               	movlw	0
 15071  000ED8  15B3               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 15072  000EDA  6FB7               	movwf	(??_f_lseek+3)& (0+255),b
 15073  000EDC  51B4               	movf	??_f_lseek& (0+255),w,b
 15074  000EDE  11B5               	iorwf	(??_f_lseek+1)& (0+255),w,b
 15075  000EE0  11B6               	iorwf	(??_f_lseek+2)& (0+255),w,b
 15076  000EE2  11B7               	iorwf	(??_f_lseek+3)& (0+255),w,b
 15077  000EE4  B4D8               	btfsc	status,2,c
 15078  000EE6  D007               	goto	l11463
 15079                           
 15080                           ; BSR set to: 0
 15081  000EE8  EE20 F003          	lfsr	2,3
 15082  000EEC  51AE               	movf	f_lseek@fp& (0+255),w,b
 15083  000EEE  26D9               	addwf	fsr2l,f,c
 15084  000EF0  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15085  000EF2  22DA               	addwfc	fsr2h,f,c
 15086  000EF4  2ADF               	incf	indf2,f,c
 15087  000EF6                     l11463:
 15088                           
 15089                           ; BSR set to: 0
 15090                           ;tff.c: 1198: };tff.c: 1199: };tff.c: 1202: if (fp->fptr > fp->fsize) {
 15091  000EF6  EE20 F006          	lfsr	2,6
 15092  000EFA  51AE               	movf	f_lseek@fp& (0+255),w,b
 15093  000EFC  26D9               	addwf	fsr2l,f,c
 15094  000EFE  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15095  000F00  22DA               	addwfc	fsr2h,f,c
 15096  000F02  EE10 F00A          	lfsr	1,10
 15097  000F06  51AE               	movf	f_lseek@fp& (0+255),w,b
 15098  000F08  26E1               	addwf	fsr1l,f,c
 15099  000F0A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15100  000F0C  22E2               	addwfc	fsr1h,f,c
 15101  000F0E  50DE               	movf	postinc2,w,c
 15102  000F10  5CE6               	subwf	postinc1,w,c
 15103  000F12  50DE               	movf	postinc2,w,c
 15104  000F14  58E6               	subwfb	postinc1,w,c
 15105  000F16  50DE               	movf	postinc2,w,c
 15106  000F18  58E6               	subwfb	postinc1,w,c
 15107  000F1A  50DE               	movf	postinc2,w,c
 15108  000F1C  58E6               	subwfb	postinc1,w,c
 15109  000F1E  B0D8               	btfsc	status,0,c
 15110  000F20  0012               	return	
 15111                           
 15112                           ; BSR set to: 0
 15113                           ;tff.c: 1203: fp->fsize = fp->fptr;
 15114  000F22  EE20 F006          	lfsr	2,6
 15115  000F26  51AE               	movf	f_lseek@fp& (0+255),w,b
 15116  000F28  26D9               	addwf	fsr2l,f,c
 15117  000F2A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15118  000F2C  22DA               	addwfc	fsr2h,f,c
 15119  000F2E  EE10 F00A          	lfsr	1,10
 15120  000F32  51AE               	movf	f_lseek@fp& (0+255),w,b
 15121  000F34  26E1               	addwf	fsr1l,f,c
 15122  000F36  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15123  000F38  22E2               	addwfc	fsr1h,f,c
 15124  000F3A  CFDE FFE6          	movff	postinc2,postinc1
 15125  000F3E  CFDE FFE6          	movff	postinc2,postinc1
 15126  000F42  CFDE FFE6          	movff	postinc2,postinc1
 15127  000F46  CFDE FFE6          	movff	postinc2,postinc1
 15128                           
 15129                           ; BSR set to: 0
 15130                           ;tff.c: 1204: fp->flag |= 0x20;
 15131  000F4A  EE20 F002          	lfsr	2,2
 15132  000F4E  51AE               	movf	f_lseek@fp& (0+255),w,b
 15133  000F50  26D9               	addwf	fsr2l,f,c
 15134  000F52  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15135  000F54  22DA               	addwfc	fsr2h,f,c
 15136  000F56  0E00               	movlw	0
 15137  000F58  8ADB               	bsf	plusw2,5,c
 15138  000F5A  0012               	return	
 15139  000F5C                     l11471:
 15140                           
 15141                           ; BSR set to: 0
 15142                           ;tff.c: 1211: fp->flag |= 0x80;
 15143  000F5C  EE20 F002          	lfsr	2,2
 15144  000F60  51AE               	movf	f_lseek@fp& (0+255),w,b
 15145  000F62  26D9               	addwf	fsr2l,f,c
 15146  000F64  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15147  000F66  22DA               	addwfc	fsr2h,f,c
 15148  000F68  0E00               	movlw	0
 15149  000F6A  8EDB               	bsf	plusw2,7,c
 15150                           
 15151                           ; BSR set to: 0
 15152  000F6C  0012               	return		;funcret
 15153  000F6E                     __end_of_f_lseek:
 15154                           	callstack 0
 15155                           
 15156 ;; *************** function _create_chain *****************
 15157 ;; Defined at:
 15158 ;;		line 283 in file "bibliotecas/tff.c"
 15159 ;; Parameters:    Size  Location     Type
 15160 ;;  clust           2   64[BANK0 ] unsigned short 
 15161 ;; Auto vars:     Size  Location     Type
 15162 ;;  ncl             2   76[BANK0 ] unsigned short 
 15163 ;;  scl             2   74[BANK0 ] unsigned short 
 15164 ;;  cstat           2   72[BANK0 ] unsigned short 
 15165 ;;  fs              2   70[BANK0 ] PTR struct _FATFS
 15166 ;;		 -> NULL(0), fs(544), 
 15167 ;;  mcl             2   68[BANK0 ] unsigned short 
 15168 ;; Return value:  Size  Location     Type
 15169 ;;                  2   64[BANK0 ] unsigned short 
 15170 ;; Registers used:
 15171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15172 ;; Tracked objects:
 15173 ;;		On entry : 3F/0
 15174 ;;		On exit  : 3F/0
 15175 ;;		Unchanged: 0/0
 15176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15177 ;;      Params:         0       2       0       0       0       0       0       0       0
 15178 ;;      Locals:         0      10       0       0       0       0       0       0       0
 15179 ;;      Temps:          0       2       0       0       0       0       0       0       0
 15180 ;;      Totals:         0      14       0       0       0       0       0       0       0
 15181 ;;Total ram usage:       14 bytes
 15182 ;; Hardware stack levels used:    1
 15183 ;; Hardware stack levels required when called:   10
 15184 ;; This function calls:
 15185 ;;		_get_cluster
 15186 ;;		_put_cluster
 15187 ;; This function is called by:
 15188 ;;		_reserve_direntry
 15189 ;;		_f_write
 15190 ;;		_f_lseek
 15191 ;; This function uses a non-reentrant model
 15192 ;;
 15193                           
 15194                           	psect	text74
 15195  003046                     __ptext74:
 15196                           	callstack 0
 15197  003046                     _create_chain:
 15198                           	callstack 13
 15199                           
 15200                           ; BSR set to: 0
 15201                           ;tff.c: 287: CLUST cstat, ncl, scl, mcl;;tff.c: 288: FATFS *fs = FatFs;
 15202                           
 15203                           ; BSR set to: 0
 15204                           ;incstack = 0
 15205  003046  C039  F0A6         	movff	_FatFs,create_chain@fs
 15206  00304A  C03A  F0A7         	movff	_FatFs+1,create_chain@fs+1
 15207                           
 15208                           ; BSR set to: 0
 15209                           ;tff.c: 291: mcl = fs->max_clust;
 15210  00304E  EE20 F016          	lfsr	2,22
 15211  003052  51A6               	movf	create_chain@fs& (0+255),w,b
 15212  003054  26D9               	addwf	fsr2l,f,c
 15213  003056  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 15214  003058  22DA               	addwfc	fsr2h,f,c
 15215  00305A  CFDE F0A4          	movff	postinc2,create_chain@mcl
 15216  00305E  CFDD F0A5          	movff	postdec2,create_chain@mcl+1
 15217                           
 15218                           ; BSR set to: 0
 15219                           ;tff.c: 292: if (clust == 0) {
 15220  003062  51A0               	movf	create_chain@clust& (0+255),w,b
 15221  003064  11A1               	iorwf	(create_chain@clust+1)& (0+255),w,b
 15222  003066  A4D8               	btfss	status,2,c
 15223  003068  D01B               	goto	l10185
 15224                           
 15225                           ; BSR set to: 0
 15226                           ;tff.c: 293: scl = fs->last_clust;
 15227  00306A  EE20 F018          	lfsr	2,24
 15228  00306E  51A6               	movf	create_chain@fs& (0+255),w,b
 15229  003070  26D9               	addwf	fsr2l,f,c
 15230  003072  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 15231  003074  22DA               	addwfc	fsr2h,f,c
 15232  003076  CFDE F0AA          	movff	postinc2,create_chain@scl
 15233  00307A  CFDD F0AB          	movff	postdec2,create_chain@scl+1
 15234                           
 15235                           ; BSR set to: 0
 15236                           ;tff.c: 294: if (scl < 2 || scl >= mcl) scl = 1;
 15237  00307E  51AB               	movf	(create_chain@scl+1)& (0+255),w,b
 15238  003080  E104               	bnz	u11740
 15239  003082  0E02               	movlw	2
 15240  003084  5DAA               	subwf	create_chain@scl& (0+255),w,b
 15241  003086  A0D8               	btfss	status,0,c
 15242  003088  D006               	goto	u11750
 15243  00308A                     u11740:
 15244                           
 15245                           ; BSR set to: 0
 15246  00308A  51A4               	movf	create_chain@mcl& (0+255),w,b
 15247  00308C  5DAA               	subwf	create_chain@scl& (0+255),w,b
 15248  00308E  51A5               	movf	(create_chain@mcl+1)& (0+255),w,b
 15249  003090  59AB               	subwfb	(create_chain@scl+1)& (0+255),w,b
 15250  003092  A0D8               	btfss	status,0,c
 15251  003094  D029               	goto	l778
 15252  003096                     u11750:
 15253                           
 15254                           ; BSR set to: 0
 15255  003096  0E00               	movlw	0
 15256  003098  6FAB               	movwf	(create_chain@scl+1)& (0+255),b
 15257  00309A  0E01               	movlw	1
 15258  00309C  6FAA               	movwf	create_chain@scl& (0+255),b
 15259  00309E  D024               	goto	l778
 15260  0030A0                     l10185:
 15261                           
 15262                           ; BSR set to: 0
 15263                           ;tff.c: 296: else {;tff.c: 297: cstat = get_cluster(clust);
 15264  0030A0  C0A0  F088         	movff	create_chain@clust,get_cluster@clust
 15265  0030A4  C0A1  F089         	movff	create_chain@clust+1,get_cluster@clust+1
 15266  0030A8  ECA7  F012         	call	_get_cluster	;wreg free
 15267  0030AC  C088  F0A8         	movff	?_get_cluster,create_chain@cstat
 15268  0030B0  C089  F0A9         	movff	?_get_cluster+1,create_chain@cstat+1
 15269                           
 15270                           ; BSR set to: 0
 15271                           ;tff.c: 298: if (cstat < 2) return 1;
 15272  0030B4  51A9               	movf	(create_chain@cstat+1)& (0+255),w,b
 15273  0030B6  E109               	bnz	l10193
 15274  0030B8  0E02               	movlw	2
 15275  0030BA  5DA8               	subwf	create_chain@cstat& (0+255),w,b
 15276  0030BC  B0D8               	btfsc	status,0,c
 15277  0030BE  D005               	goto	l10193
 15278  0030C0                     u11760:
 15279                           
 15280                           ; BSR set to: 0
 15281  0030C0  0E00               	movlw	0
 15282  0030C2  6FA1               	movwf	(?_create_chain+1)& (0+255),b
 15283  0030C4  0E01               	movlw	1
 15284  0030C6  6FA0               	movwf	?_create_chain& (0+255),b
 15285  0030C8  0012               	return	
 15286  0030CA                     l10193:
 15287                           
 15288                           ; BSR set to: 0
 15289                           ;tff.c: 299: if (cstat < mcl) return cstat;
 15290  0030CA  51A4               	movf	create_chain@mcl& (0+255),w,b
 15291  0030CC  5DA8               	subwf	create_chain@cstat& (0+255),w,b
 15292  0030CE  51A5               	movf	(create_chain@mcl+1)& (0+255),w,b
 15293  0030D0  59A9               	subwfb	(create_chain@cstat+1)& (0+255),w,b
 15294  0030D2  B0D8               	btfsc	status,0,c
 15295  0030D4  D005               	goto	l781
 15296                           
 15297                           ; BSR set to: 0
 15298  0030D6  C0A8  F0A0         	movff	create_chain@cstat,?_create_chain
 15299  0030DA  C0A9  F0A1         	movff	create_chain@cstat+1,?_create_chain+1
 15300  0030DE  0012               	return	
 15301  0030E0                     l781:
 15302                           
 15303                           ; BSR set to: 0
 15304                           ;tff.c: 300: scl = clust;
 15305  0030E0  C0A0  F0AA         	movff	create_chain@clust,create_chain@scl
 15306  0030E4  C0A1  F0AB         	movff	create_chain@clust+1,create_chain@scl+1
 15307  0030E8                     l778:
 15308                           
 15309                           ; BSR set to: 0
 15310                           ;tff.c: 301: };tff.c: 303: ncl = scl;
 15311  0030E8  C0AA  F0AC         	movff	create_chain@scl,create_chain@ncl
 15312  0030EC  C0AB  F0AD         	movff	create_chain@scl+1,create_chain@ncl+1
 15313  0030F0                     l10197:
 15314                           
 15315                           ; BSR set to: 0
 15316                           ;tff.c: 305: ncl++;
 15317  0030F0  4BAC               	infsnz	create_chain@ncl& (0+255),f,b
 15318  0030F2  2BAD               	incf	(create_chain@ncl+1)& (0+255),f,b
 15319                           
 15320                           ; BSR set to: 0
 15321                           ;tff.c: 306: if (ncl >= mcl) {
 15322  0030F4  51A4               	movf	create_chain@mcl& (0+255),w,b
 15323  0030F6  5DAC               	subwf	create_chain@ncl& (0+255),w,b
 15324  0030F8  51A5               	movf	(create_chain@mcl+1)& (0+255),w,b
 15325  0030FA  59AD               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 15326  0030FC  A0D8               	btfss	status,0,c
 15327  0030FE  D00F               	goto	l10209
 15328                           
 15329                           ; BSR set to: 0
 15330                           ;tff.c: 307: ncl = 2;
 15331  003100  0E00               	movlw	0
 15332  003102  6FAD               	movwf	(create_chain@ncl+1)& (0+255),b
 15333  003104  0E02               	movlw	2
 15334  003106  6FAC               	movwf	create_chain@ncl& (0+255),b
 15335                           
 15336                           ; BSR set to: 0
 15337                           ;tff.c: 308: if (ncl > scl) return 0;
 15338  003108  51AB               	movf	(create_chain@scl+1)& (0+255),w,b
 15339  00310A  E109               	bnz	l10209
 15340  00310C  0E02               	movlw	2
 15341  00310E  5DAA               	subwf	create_chain@scl& (0+255),w,b
 15342  003110  B0D8               	btfsc	status,0,c
 15343  003112  D005               	goto	l10209
 15344  003114                     u11790:
 15345                           
 15346                           ; BSR set to: 0
 15347  003114  0E00               	movlw	0
 15348  003116  6FA1               	movwf	(?_create_chain+1)& (0+255),b
 15349  003118  0E00               	movlw	0
 15350  00311A  6FA0               	movwf	?_create_chain& (0+255),b
 15351  00311C  0012               	return	
 15352  00311E                     l10209:
 15353                           
 15354                           ; BSR set to: 0
 15355                           ;tff.c: 309: };tff.c: 310: cstat = get_cluster(ncl);
 15356  00311E  C0AC  F088         	movff	create_chain@ncl,get_cluster@clust
 15357  003122  C0AD  F089         	movff	create_chain@ncl+1,get_cluster@clust+1
 15358  003126  ECA7  F012         	call	_get_cluster	;wreg free
 15359  00312A  C088  F0A8         	movff	?_get_cluster,create_chain@cstat
 15360  00312E  C089  F0A9         	movff	?_get_cluster+1,create_chain@cstat+1
 15361                           
 15362                           ; BSR set to: 0
 15363                           ;tff.c: 311: if (cstat == 0) break;
 15364  003132  51A8               	movf	create_chain@cstat& (0+255),w,b
 15365  003134  11A9               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 15366  003136  B4D8               	btfsc	status,2,c
 15367  003138  D00C               	goto	l10227
 15368                           
 15369                           ; BSR set to: 0
 15370                           ;tff.c: 312: if (cstat == 1) return 1;
 15371  00313A  05A8               	decf	create_chain@cstat& (0+255),w,b
 15372  00313C  11A9               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 15373  00313E  B4D8               	btfsc	status,2,c
 15374  003140  D7BF               	goto	u11760
 15375                           
 15376                           ; BSR set to: 0
 15377                           ;tff.c: 313: if (ncl == scl) return 0;
 15378  003142  51AA               	movf	create_chain@scl& (0+255),w,b
 15379  003144  19AC               	xorwf	create_chain@ncl& (0+255),w,b
 15380  003146  E1D4               	bnz	l10197
 15381  003148  51AB               	movf	(create_chain@scl+1)& (0+255),w,b
 15382  00314A  19AD               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 15383  00314C  B4D8               	btfsc	status,2,c
 15384  00314E  D7E2               	goto	u11790
 15385  003150  D7CF               	goto	l10197
 15386  003152                     l10227:
 15387                           
 15388                           ; BSR set to: 0
 15389                           ;tff.c: 316: if (!put_cluster(ncl, (CLUST)0x0FFFFFFF)) return 1;
 15390  003152  C0AC  F088         	movff	create_chain@ncl,put_cluster@clust
 15391  003156  C0AD  F089         	movff	create_chain@ncl+1,put_cluster@clust+1
 15392  00315A  0EFF               	movlw	255
 15393  00315C  6F8B               	movwf	(put_cluster@val+1)& (0+255),b
 15394  00315E  698A               	setf	put_cluster@val& (0+255),b
 15395  003160  EC5F  F010         	call	_put_cluster	;wreg free
 15396  003164  0900               	iorlw	0
 15397  003166  B4D8               	btfsc	status,2,c
 15398  003168  D7AB               	goto	u11760
 15399                           
 15400                           ; BSR set to: 0
 15401                           ;tff.c: 317: if (clust != 0 && !put_cluster(clust, ncl)) return 1;
 15402  00316A  51A0               	movf	create_chain@clust& (0+255),w,b
 15403  00316C  11A1               	iorwf	(create_chain@clust+1)& (0+255),w,b
 15404  00316E  B4D8               	btfsc	status,2,c
 15405  003170  D00D               	goto	l10241
 15406                           
 15407                           ; BSR set to: 0
 15408  003172  C0A0  F088         	movff	create_chain@clust,put_cluster@clust
 15409  003176  C0A1  F089         	movff	create_chain@clust+1,put_cluster@clust+1
 15410  00317A  C0AC  F08A         	movff	create_chain@ncl,put_cluster@val
 15411  00317E  C0AD  F08B         	movff	create_chain@ncl+1,put_cluster@val+1
 15412  003182  EC5F  F010         	call	_put_cluster	;wreg free
 15413  003186  0900               	iorlw	0
 15414  003188  B4D8               	btfsc	status,2,c
 15415  00318A  D79A               	goto	u11760
 15416  00318C                     l10241:
 15417                           
 15418                           ; BSR set to: 0
 15419                           ;tff.c: 319: fs->last_clust = ncl;
 15420  00318C  EE20 F018          	lfsr	2,24
 15421  003190  51A6               	movf	create_chain@fs& (0+255),w,b
 15422  003192  26D9               	addwf	fsr2l,f,c
 15423  003194  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 15424  003196  22DA               	addwfc	fsr2h,f,c
 15425  003198  C0AC  FFDE         	movff	create_chain@ncl,postinc2
 15426  00319C  C0AD  FFDD         	movff	create_chain@ncl+1,postdec2
 15427                           
 15428                           ;tff.c: 320: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 15429  0031A0  EE20 F01A          	lfsr	2,26
 15430  0031A4  51A6               	movf	create_chain@fs& (0+255),w,b
 15431  0031A6  26D9               	addwf	fsr2l,f,c
 15432  0031A8  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 15433  0031AA  22DA               	addwfc	fsr2h,f,c
 15434  0031AC  28DE               	incf	postinc2,w,c
 15435  0031AE  E103               	bnz	u11860
 15436  0031B0  28DE               	incf	postinc2,w,c
 15437  0031B2  B4D8               	btfsc	status,2,c
 15438  0031B4  D009               	goto	l10245
 15439  0031B6                     u11860:
 15440                           
 15441                           ; BSR set to: 0
 15442                           ;tff.c: 321: fs->free_clust--;
 15443  0031B6  EE20 F01A          	lfsr	2,26
 15444  0031BA  51A6               	movf	create_chain@fs& (0+255),w,b
 15445  0031BC  26D9               	addwf	fsr2l,f,c
 15446  0031BE  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 15447  0031C0  22DA               	addwfc	fsr2h,f,c
 15448  0031C2  06DE               	decf	postinc2,f,c
 15449  0031C4  0E00               	movlw	0
 15450  0031C6  5ADD               	subwfb	postdec2,f,c
 15451  0031C8                     l10245:
 15452                           
 15453                           ; BSR set to: 0
 15454                           ;tff.c: 325: };tff.c: 327: return ncl;
 15455  0031C8  C0AC  F0A0         	movff	create_chain@ncl,?_create_chain
 15456  0031CC  C0AD  F0A1         	movff	create_chain@ncl+1,?_create_chain+1
 15457                           
 15458                           ; BSR set to: 0
 15459  0031D0  0012               	return		;funcret
 15460  0031D2                     __end_of_create_chain:
 15461                           	callstack 0
 15462                           
 15463 ;; *************** function _put_cluster *****************
 15464 ;; Defined at:
 15465 ;;		line 198 in file "bibliotecas/tff.c"
 15466 ;; Parameters:    Size  Location     Type
 15467 ;;  clust           2   40[BANK0 ] unsigned short 
 15468 ;;  val             2   42[BANK0 ] unsigned short 
 15469 ;; Auto vars:     Size  Location     Type
 15470 ;;  fatsect         4   54[BANK0 ] unsigned long 
 15471 ;;  fs              2   62[BANK0 ] PTR struct _FATFS
 15472 ;;		 -> NULL(0), fs(544), 
 15473 ;;  p               2   60[BANK0 ] PTR unsigned char 
 15474 ;;		 -> fs.win(512), NULL(0), fs(544), 
 15475 ;;  bc              2   58[BANK0 ] unsigned short 
 15476 ;; Return value:  Size  Location     Type
 15477 ;;                  1    wreg      enum E105
 15478 ;; Registers used:
 15479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15480 ;; Tracked objects:
 15481 ;;		On entry : 3F/0
 15482 ;;		On exit  : 3F/0
 15483 ;;		Unchanged: 0/0
 15484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15485 ;;      Params:         0       4       0       0       0       0       0       0       0
 15486 ;;      Locals:         0      14       0       0       0       0       0       0       0
 15487 ;;      Temps:          0       6       0       0       0       0       0       0       0
 15488 ;;      Totals:         0      24       0       0       0       0       0       0       0
 15489 ;;Total ram usage:       24 bytes
 15490 ;; Hardware stack levels used:    1
 15491 ;; Hardware stack levels required when called:    9
 15492 ;; This function calls:
 15493 ;;		___wmul
 15494 ;;		_move_window
 15495 ;; This function is called by:
 15496 ;;		_remove_chain
 15497 ;;		_create_chain
 15498 ;; This function uses a non-reentrant model
 15499 ;;
 15500                           
 15501                           	psect	text75
 15502  0020BE                     __ptext75:
 15503                           	callstack 0
 15504  0020BE                     _put_cluster:
 15505                           	callstack 13
 15506                           
 15507                           ; BSR set to: 0
 15508                           ;tff.c: 203: WORD bc;;tff.c: 204: BYTE *p;;tff.c: 205: DWORD fatsect;;tff.c: 206: FATFS 
      +                          *fs = FatFs;
 15509                           
 15510                           ; BSR set to: 0
 15511                           ;incstack = 0
 15512  0020BE  C039  F09E         	movff	_FatFs,put_cluster@fs
 15513  0020C2  C03A  F09F         	movff	_FatFs+1,put_cluster@fs+1
 15514                           
 15515                           ; BSR set to: 0
 15516                           ;tff.c: 209: fatsect = fs->fatbase;
 15517  0020C6  EE20 F008          	lfsr	2,8
 15518  0020CA  519E               	movf	put_cluster@fs& (0+255),w,b
 15519  0020CC  26D9               	addwf	fsr2l,f,c
 15520  0020CE  519F               	movf	(put_cluster@fs+1)& (0+255),w,b
 15521  0020D0  22DA               	addwfc	fsr2h,f,c
 15522  0020D2  CFDE F096          	movff	postinc2,put_cluster@fatsect
 15523  0020D6  CFDE F097          	movff	postinc2,put_cluster@fatsect+1
 15524  0020DA  CFDE F098          	movff	postinc2,put_cluster@fatsect+2
 15525  0020DE  CFDE F099          	movff	postinc2,put_cluster@fatsect+3
 15526                           
 15527                           ;tff.c: 210: switch (fs->fs_type) {
 15528  0020E2  D108               	goto	l10127
 15529  0020E4                     l10075:
 15530                           
 15531                           ; BSR set to: 0
 15532                           ;tff.c: 212: bc = (WORD)clust * 3 / 2;
 15533  0020E4  C088  F019         	movff	put_cluster@clust,___wmul@multiplier
 15534  0020E8  C089  F01A         	movff	put_cluster@clust+1,___wmul@multiplier+1
 15535  0020EC  0E00               	movlw	0
 15536  0020EE  6E1C               	movwf	(___wmul@multiplicand+1)^0,c
 15537  0020F0  0E03               	movlw	3
 15538  0020F2  6E1B               	movwf	___wmul@multiplicand^0,c
 15539  0020F4  ECF2  F028         	call	___wmul	;wreg free
 15540  0020F8  90D8               	bcf	status,0,c
 15541  0020FA  301A               	rrcf	(?___wmul+1)^0,w,c
 15542  0020FC  0100               	movlb	0	; () banked
 15543  0020FE  6F8C               	movwf	??_put_cluster& (0+255),b
 15544  002100  3019               	rrcf	?___wmul^0,w,c
 15545  002102  6F9A               	movwf	put_cluster@bc& (0+255),b
 15546  002104  C08C  F09B         	movff	??_put_cluster,put_cluster@bc+1
 15547                           
 15548                           ; BSR set to: 0
 15549                           ;tff.c: 213: if (!move_window(fatsect + bc / 512U)) return FALSE;
 15550  002108  C09A  F08C         	movff	put_cluster@bc,??_put_cluster
 15551  00210C  C09B  F08D         	movff	put_cluster@bc+1,??_put_cluster+1
 15552  002110  0E09               	movlw	9
 15553  002112  6F8E               	movwf	(??_put_cluster+2)& (0+255),b
 15554  002114                     u11595:
 15555  002114  90D8               	bcf	status,0,c
 15556  002116  338D               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15557  002118  338C               	rrcf	??_put_cluster& (0+255),f,b
 15558  00211A  2F8E               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15559  00211C  D7FB               	goto	u11595
 15560  00211E  518C               	movf	??_put_cluster& (0+255),w,b
 15561  002120  2596               	addwf	put_cluster@fatsect& (0+255),w,b
 15562  002122  6F73               	movwf	move_window@sector& (0+255),b
 15563  002124  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15564  002126  2197               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15565  002128  6F74               	movwf	(move_window@sector+1)& (0+255),b
 15566  00212A  0E00               	movlw	0
 15567  00212C  2198               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15568  00212E  6F75               	movwf	(move_window@sector+2)& (0+255),b
 15569  002130  0E00               	movlw	0
 15570  002132  2199               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15571  002134  6F76               	movwf	(move_window@sector+3)& (0+255),b
 15572  002136  EC4E  F017         	call	_move_window	;wreg free
 15573  00213A  0900               	iorlw	0
 15574  00213C  A4D8               	btfss	status,2,c
 15575  00213E  D002               	goto	l10083
 15576  002140                     u11600:
 15577                           
 15578                           ; BSR set to: 0
 15579  002140  0E00               	movlw	0
 15580  002142  0012               	return	
 15581  002144                     l10083:
 15582                           
 15583                           ; BSR set to: 0
 15584                           ;tff.c: 214: p = &fs->win[bc % 512U];
 15585  002144  0EFF               	movlw	255
 15586  002146  6F8C               	movwf	??_put_cluster& (0+255),b
 15587  002148  0E01               	movlw	1
 15588  00214A  6F8D               	movwf	(??_put_cluster+1)& (0+255),b
 15589  00214C  C09A  F08E         	movff	put_cluster@bc,??_put_cluster+2
 15590  002150  C09B  F08F         	movff	put_cluster@bc+1,??_put_cluster+3
 15591  002154  518C               	movf	??_put_cluster& (0+255),w,b
 15592  002156  178E               	andwf	(??_put_cluster+2)& (0+255),f,b
 15593  002158  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15594  00215A  178F               	andwf	(??_put_cluster+3)& (0+255),f,b
 15595  00215C  C09E  F090         	movff	put_cluster@fs,??_put_cluster+4
 15596  002160  C09F  F091         	movff	put_cluster@fs+1,??_put_cluster+5
 15597  002164  518E               	movf	(??_put_cluster+2)& (0+255),w,b
 15598  002166  2790               	addwf	(??_put_cluster+4)& (0+255),f,b
 15599  002168  518F               	movf	(??_put_cluster+3)& (0+255),w,b
 15600  00216A  2391               	addwfc	(??_put_cluster+5)& (0+255),f,b
 15601  00216C  0E20               	movlw	32
 15602  00216E  2590               	addwf	(??_put_cluster+4)& (0+255),w,b
 15603  002170  6F9C               	movwf	put_cluster@p& (0+255),b
 15604  002172  0E00               	movlw	0
 15605  002174  2191               	addwfc	(??_put_cluster+5)& (0+255),w,b
 15606  002176  6F9D               	movwf	(put_cluster@p+1)& (0+255),b
 15607                           
 15608                           ; BSR set to: 0
 15609                           ;tff.c: 215: *p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 15610  002178  B188               	btfsc	put_cluster@clust& (0+255),0,b
 15611  00217A  D004               	goto	l10089
 15612                           
 15613                           ; BSR set to: 0
 15614  00217C  C08A  F092         	movff	put_cluster@val,_put_cluster$1540
 15615  002180  6B93               	clrf	(_put_cluster$1540+1)& (0+255),b
 15616  002182  D01A               	goto	l10091
 15617  002184                     l10089:
 15618                           
 15619                           ; BSR set to: 0
 15620  002184  518A               	movf	put_cluster@val& (0+255),w,b
 15621  002186  6F8C               	movwf	??_put_cluster& (0+255),b
 15622  002188  6B8D               	clrf	(??_put_cluster+1)& (0+255),b
 15623  00218A  3B8C               	swapf	??_put_cluster& (0+255),f,b
 15624  00218C  3B8D               	swapf	(??_put_cluster+1)& (0+255),f,b
 15625  00218E  0EF0               	movlw	240
 15626  002190  178D               	andwf	(??_put_cluster+1)& (0+255),f,b
 15627  002192  518C               	movf	??_put_cluster& (0+255),w,b
 15628  002194  0B0F               	andlw	15
 15629  002196  138D               	iorwf	(??_put_cluster+1)& (0+255),f,b
 15630  002198  0EF0               	movlw	240
 15631  00219A  178C               	andwf	??_put_cluster& (0+255),f,b
 15632  00219C  C09C  FFD9         	movff	put_cluster@p,fsr2l
 15633  0021A0  C09D  FFDA         	movff	put_cluster@p+1,fsr2h
 15634  0021A4  50DF               	movf	indf2,w,c
 15635  0021A6  0B0F               	andlw	15
 15636  0021A8  6F8E               	movwf	(??_put_cluster+2)& (0+255),b
 15637  0021AA  6B8F               	clrf	(??_put_cluster+3)& (0+255),b
 15638  0021AC  518C               	movf	??_put_cluster& (0+255),w,b
 15639  0021AE  118E               	iorwf	(??_put_cluster+2)& (0+255),w,b
 15640  0021B0  6F92               	movwf	_put_cluster$1540& (0+255),b
 15641  0021B2  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15642  0021B4  118F               	iorwf	(??_put_cluster+3)& (0+255),w,b
 15643  0021B6  6F93               	movwf	(_put_cluster$1540+1)& (0+255),b
 15644  0021B8                     l10091:
 15645                           
 15646                           ; BSR set to: 0
 15647  0021B8  C09C  FFD9         	movff	put_cluster@p,fsr2l
 15648  0021BC  C09D  FFDA         	movff	put_cluster@p+1,fsr2h
 15649  0021C0  C092  FFDF         	movff	_put_cluster$1540,indf2
 15650                           
 15651                           ; BSR set to: 0
 15652                           ;tff.c: 216: bc++;
 15653  0021C4  4B9A               	infsnz	put_cluster@bc& (0+255),f,b
 15654  0021C6  2B9B               	incf	(put_cluster@bc+1)& (0+255),f,b
 15655                           
 15656                           ; BSR set to: 0
 15657                           ;tff.c: 217: fs->winflag = 1;
 15658  0021C8  EE20 F01F          	lfsr	2,31
 15659  0021CC  519E               	movf	put_cluster@fs& (0+255),w,b
 15660  0021CE  26D9               	addwf	fsr2l,f,c
 15661  0021D0  519F               	movf	(put_cluster@fs+1)& (0+255),w,b
 15662  0021D2  22DA               	addwfc	fsr2h,f,c
 15663  0021D4  0E01               	movlw	1
 15664  0021D6  6EDF               	movwf	indf2,c
 15665                           
 15666                           ; BSR set to: 0
 15667                           ;tff.c: 218: if (!move_window(fatsect + bc / 512U)) return FALSE;
 15668  0021D8  C09A  F08C         	movff	put_cluster@bc,??_put_cluster
 15669  0021DC  C09B  F08D         	movff	put_cluster@bc+1,??_put_cluster+1
 15670  0021E0  0E09               	movlw	9
 15671  0021E2  6F8E               	movwf	(??_put_cluster+2)& (0+255),b
 15672  0021E4                     u11625:
 15673  0021E4  90D8               	bcf	status,0,c
 15674  0021E6  338D               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15675  0021E8  338C               	rrcf	??_put_cluster& (0+255),f,b
 15676  0021EA  2F8E               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15677  0021EC  D7FB               	goto	u11625
 15678  0021EE  518C               	movf	??_put_cluster& (0+255),w,b
 15679  0021F0  2596               	addwf	put_cluster@fatsect& (0+255),w,b
 15680  0021F2  6F73               	movwf	move_window@sector& (0+255),b
 15681  0021F4  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15682  0021F6  2197               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15683  0021F8  6F74               	movwf	(move_window@sector+1)& (0+255),b
 15684  0021FA  0E00               	movlw	0
 15685  0021FC  2198               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15686  0021FE  6F75               	movwf	(move_window@sector+2)& (0+255),b
 15687  002200  0E00               	movlw	0
 15688  002202  2199               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15689  002204  6F76               	movwf	(move_window@sector+3)& (0+255),b
 15690  002206  EC4E  F017         	call	_move_window	;wreg free
 15691  00220A  0900               	iorlw	0
 15692  00220C  B4D8               	btfsc	status,2,c
 15693  00220E  D798               	goto	u11600
 15694                           
 15695                           ; BSR set to: 0
 15696                           ;tff.c: 219: p = &fs->win[bc % 512U];
 15697  002210  0EFF               	movlw	255
 15698  002212  6F8C               	movwf	??_put_cluster& (0+255),b
 15699  002214  0E01               	movlw	1
 15700  002216  6F8D               	movwf	(??_put_cluster+1)& (0+255),b
 15701  002218  C09A  F08E         	movff	put_cluster@bc,??_put_cluster+2
 15702  00221C  C09B  F08F         	movff	put_cluster@bc+1,??_put_cluster+3
 15703  002220  518C               	movf	??_put_cluster& (0+255),w,b
 15704  002222  178E               	andwf	(??_put_cluster+2)& (0+255),f,b
 15705  002224  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15706  002226  178F               	andwf	(??_put_cluster+3)& (0+255),f,b
 15707  002228  C09E  F090         	movff	put_cluster@fs,??_put_cluster+4
 15708  00222C  C09F  F091         	movff	put_cluster@fs+1,??_put_cluster+5
 15709  002230  518E               	movf	(??_put_cluster+2)& (0+255),w,b
 15710  002232  2790               	addwf	(??_put_cluster+4)& (0+255),f,b
 15711  002234  518F               	movf	(??_put_cluster+3)& (0+255),w,b
 15712  002236  2391               	addwfc	(??_put_cluster+5)& (0+255),f,b
 15713  002238  0E20               	movlw	32
 15714  00223A  2590               	addwf	(??_put_cluster+4)& (0+255),w,b
 15715  00223C  6F9C               	movwf	put_cluster@p& (0+255),b
 15716  00223E  0E00               	movlw	0
 15717  002240  2191               	addwfc	(??_put_cluster+5)& (0+255),w,b
 15718  002242  6F9D               	movwf	(put_cluster@p+1)& (0+255),b
 15719                           
 15720                           ; BSR set to: 0
 15721                           ;tff.c: 220: *p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x
      +                          0F));
 15722  002244  B188               	btfsc	put_cluster@clust& (0+255),0,b
 15723  002246  D00E               	goto	l10109
 15724                           
 15725                           ; BSR set to: 0
 15726  002248  C08B  F08C         	movff	put_cluster@val+1,??_put_cluster
 15727  00224C  0E0F               	movlw	15
 15728  00224E  178C               	andwf	??_put_cluster& (0+255),f,b
 15729  002250  C09C  FFD9         	movff	put_cluster@p,fsr2l
 15730  002254  C09D  FFDA         	movff	put_cluster@p+1,fsr2h
 15731  002258  50DF               	movf	indf2,w,c
 15732  00225A  0BF0               	andlw	240
 15733  00225C  118C               	iorwf	??_put_cluster& (0+255),w,b
 15734  00225E  6F8D               	movwf	(??_put_cluster+1)& (0+255),b
 15735  002260  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15736  002262  D00C               	goto	L6
 15737  002264                     l10109:
 15738                           
 15739                           ; BSR set to: 0
 15740  002264  C08A  F08C         	movff	put_cluster@val,??_put_cluster
 15741  002268  C08B  F08D         	movff	put_cluster@val+1,??_put_cluster+1
 15742  00226C  0E04               	movlw	4
 15743  00226E  6F8E               	movwf	(??_put_cluster+2)& (0+255),b
 15744  002270                     u11655:
 15745  002270  90D8               	bcf	status,0,c
 15746  002272  338D               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15747  002274  338C               	rrcf	??_put_cluster& (0+255),f,b
 15748  002276  2F8E               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15749  002278  D7FB               	goto	u11655
 15750  00227A  518C               	movf	??_put_cluster& (0+255),w,b
 15751  00227C                     L6:
 15752  00227C  6F94               	movwf	_put_cluster$1541& (0+255),b
 15753  00227E  6B95               	clrf	(_put_cluster$1541+1)& (0+255),b
 15754                           
 15755                           ; BSR set to: 0
 15756  002280  C09C  FFD9         	movff	put_cluster@p,fsr2l
 15757  002284  C09D  FFDA         	movff	put_cluster@p+1,fsr2h
 15758  002288  C094  FFDF         	movff	_put_cluster$1541,indf2
 15759                           
 15760                           ;tff.c: 221: break;
 15761  00228C  D041               	goto	l10129
 15762  00228E                     l10113:
 15763                           
 15764                           ; BSR set to: 0
 15765                           ;tff.c: 224: if (!move_window(fatsect + clust / 256)) return FALSE;
 15766  00228E  5189               	movf	(put_cluster@clust+1)& (0+255),w,b
 15767  002290  2596               	addwf	put_cluster@fatsect& (0+255),w,b
 15768  002292  6F73               	movwf	move_window@sector& (0+255),b
 15769  002294  0E00               	movlw	0
 15770  002296  2197               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15771  002298  6F74               	movwf	(move_window@sector+1)& (0+255),b
 15772  00229A  0E00               	movlw	0
 15773  00229C  2198               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15774  00229E  6F75               	movwf	(move_window@sector+2)& (0+255),b
 15775  0022A0  0E00               	movlw	0
 15776  0022A2  2199               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15777  0022A4  6F76               	movwf	(move_window@sector+3)& (0+255),b
 15778  0022A6  EC4E  F017         	call	_move_window	;wreg free
 15779  0022AA  0900               	iorlw	0
 15780  0022AC  B4D8               	btfsc	status,2,c
 15781  0022AE  D748               	goto	u11600
 15782                           
 15783                           ; BSR set to: 0
 15784                           ;tff.c: 225: *(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U])=(WORD)((WORD)val);
 15785  0022B0  0EFF               	movlw	255
 15786  0022B2  6F8C               	movwf	??_put_cluster& (0+255),b
 15787  0022B4  0E01               	movlw	1
 15788  0022B6  6F8D               	movwf	(??_put_cluster+1)& (0+255),b
 15789  0022B8  C088  F08E         	movff	put_cluster@clust,??_put_cluster+2
 15790  0022BC  C089  F08F         	movff	put_cluster@clust+1,??_put_cluster+3
 15791  0022C0  90D8               	bcf	status,0,c
 15792  0022C2  378E               	rlcf	(??_put_cluster+2)& (0+255),f,b
 15793  0022C4  378F               	rlcf	(??_put_cluster+3)& (0+255),f,b
 15794  0022C6  518C               	movf	??_put_cluster& (0+255),w,b
 15795  0022C8  178E               	andwf	(??_put_cluster+2)& (0+255),f,b
 15796  0022CA  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15797  0022CC  178F               	andwf	(??_put_cluster+3)& (0+255),f,b
 15798  0022CE  C09E  F090         	movff	put_cluster@fs,??_put_cluster+4
 15799  0022D2  C09F  F091         	movff	put_cluster@fs+1,??_put_cluster+5
 15800  0022D6  518E               	movf	(??_put_cluster+2)& (0+255),w,b
 15801  0022D8  2790               	addwf	(??_put_cluster+4)& (0+255),f,b
 15802  0022DA  518F               	movf	(??_put_cluster+3)& (0+255),w,b
 15803  0022DC  2391               	addwfc	(??_put_cluster+5)& (0+255),f,b
 15804  0022DE  0E20               	movlw	32
 15805  0022E0  2590               	addwf	(??_put_cluster+4)& (0+255),w,b
 15806  0022E2  6ED9               	movwf	fsr2l,c
 15807  0022E4  0E00               	movlw	0
 15808  0022E6  2191               	addwfc	(??_put_cluster+5)& (0+255),w,b
 15809  0022E8  6EDA               	movwf	fsr2h,c
 15810  0022EA  C08A  FFDE         	movff	put_cluster@val,postinc2
 15811  0022EE  C08B  FFDD         	movff	put_cluster@val+1,postdec2
 15812                           
 15813                           ;tff.c: 226: break;
 15814  0022F2  D00E               	goto	l10129
 15815  0022F4                     l10127:
 15816                           
 15817                           ; BSR set to: 0
 15818  0022F4  EE20 F01C          	lfsr	2,28
 15819  0022F8  519E               	movf	put_cluster@fs& (0+255),w,b
 15820  0022FA  26D9               	addwf	fsr2l,f,c
 15821  0022FC  519F               	movf	(put_cluster@fs+1)& (0+255),w,b
 15822  0022FE  22DA               	addwfc	fsr2h,f,c
 15823  002300  50DF               	movf	indf2,w,c
 15824                           
 15825                           ; Switch size 1, requested type "simple"
 15826                           ; Number of cases is 2, Range of values is 1 to 2
 15827                           ; switch strategies available:
 15828                           ; Name         Instructions Cycles
 15829                           ; simple_byte            7     4 (average)
 15830                           ;	Chosen strategy is simple_byte
 15831  002302  0A01               	xorlw	1	; case 1
 15832  002304  B4D8               	btfsc	status,2,c
 15833  002306  D6EE               	goto	l10075
 15834  002308  0A03               	xorlw	3	; case 2
 15835  00230A  B4D8               	btfsc	status,2,c
 15836  00230C  D7C0               	goto	l10113
 15837  00230E  D718               	goto	u11600
 15838  002310                     l10129:
 15839                           
 15840                           ; BSR set to: 0
 15841                           ;tff.c: 236: fs->winflag = 1;
 15842  002310  EE20 F01F          	lfsr	2,31
 15843  002314  519E               	movf	put_cluster@fs& (0+255),w,b
 15844  002316  26D9               	addwf	fsr2l,f,c
 15845  002318  519F               	movf	(put_cluster@fs+1)& (0+255),w,b
 15846  00231A  22DA               	addwfc	fsr2h,f,c
 15847  00231C  0E01               	movlw	1
 15848  00231E  6EDF               	movwf	indf2,c
 15849                           
 15850                           ; BSR set to: 0
 15851                           ;tff.c: 237: return TRUE;
 15852  002320  0E01               	movlw	1
 15853                           
 15854                           ; BSR set to: 0
 15855  002322  0012               	return		;funcret
 15856  002324                     __end_of_put_cluster:
 15857                           	callstack 0
 15858                           
 15859 ;; *************** function _get_cluster *****************
 15860 ;; Defined at:
 15861 ;;		line 155 in file "bibliotecas/tff.c"
 15862 ;; Parameters:    Size  Location     Type
 15863 ;;  clust           2   40[BANK0 ] unsigned short 
 15864 ;; Auto vars:     Size  Location     Type
 15865 ;;  fatsect         4   53[BANK0 ] unsigned long 
 15866 ;;  fs              2   59[BANK0 ] PTR struct _FATFS
 15867 ;;		 -> NULL(0), fs(544), 
 15868 ;;  bc              2   57[BANK0 ] unsigned short 
 15869 ;;  wc              2   51[BANK0 ] unsigned short 
 15870 ;; Return value:  Size  Location     Type
 15871 ;;                  2   40[BANK0 ] unsigned short 
 15872 ;; Registers used:
 15873 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15874 ;; Tracked objects:
 15875 ;;		On entry : 3F/0
 15876 ;;		On exit  : 3F/0
 15877 ;;		Unchanged: 0/0
 15878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15879 ;;      Params:         0       2       0       0       0       0       0       0       0
 15880 ;;      Locals:         0      10       0       0       0       0       0       0       0
 15881 ;;      Temps:          0       9       0       0       0       0       0       0       0
 15882 ;;      Totals:         0      21       0       0       0       0       0       0       0
 15883 ;;Total ram usage:       21 bytes
 15884 ;; Hardware stack levels used:    1
 15885 ;; Hardware stack levels required when called:    9
 15886 ;; This function calls:
 15887 ;;		___wmul
 15888 ;;		_move_window
 15889 ;; This function is called by:
 15890 ;;		_remove_chain
 15891 ;;		_create_chain
 15892 ;;		_next_dir_entry
 15893 ;;		_f_lseek
 15894 ;;		_f_read
 15895 ;; This function uses a non-reentrant model
 15896 ;;
 15897                           
 15898                           	psect	text76
 15899  00254E                     __ptext76:
 15900                           	callstack 0
 15901  00254E                     _get_cluster:
 15902                           	callstack 13
 15903                           
 15904                           ; BSR set to: 0
 15905                           ;tff.c: 159: WORD wc, bc;;tff.c: 160: DWORD fatsect;;tff.c: 161: FATFS *fs = FatFs;
 15906                           
 15907                           ; BSR set to: 0
 15908                           ;incstack = 0
 15909  00254E  C039  F09B         	movff	_FatFs,get_cluster@fs
 15910  002552  C03A  F09C         	movff	_FatFs+1,get_cluster@fs+1
 15911                           
 15912                           ;tff.c: 164: if (clust >= 2 && clust < fs->max_clust) {
 15913  002556  5189               	movf	(get_cluster@clust+1)& (0+255),w,b
 15914  002558  E104               	bnz	u11500
 15915  00255A  0E02               	movlw	2
 15916  00255C  5D88               	subwf	get_cluster@clust& (0+255),w,b
 15917  00255E  A0D8               	btfss	status,0,c
 15918  002560  D102               	goto	l10067
 15919  002562                     u11500:
 15920                           
 15921                           ; BSR set to: 0
 15922  002562  EE20 F016          	lfsr	2,22
 15923  002566  519B               	movf	get_cluster@fs& (0+255),w,b
 15924  002568  26D9               	addwf	fsr2l,f,c
 15925  00256A  519C               	movf	(get_cluster@fs+1)& (0+255),w,b
 15926  00256C  22DA               	addwfc	fsr2h,f,c
 15927  00256E  50DE               	movf	postinc2,w,c
 15928  002570  5D88               	subwf	get_cluster@clust& (0+255),w,b
 15929  002572  50DE               	movf	postinc2,w,c
 15930  002574  5989               	subwfb	(get_cluster@clust+1)& (0+255),w,b
 15931  002576  B0D8               	btfsc	status,0,c
 15932  002578  D0F6               	goto	l10067
 15933                           
 15934                           ; BSR set to: 0
 15935                           ;tff.c: 165: fatsect = fs->fatbase;
 15936  00257A  EE20 F008          	lfsr	2,8
 15937  00257E  519B               	movf	get_cluster@fs& (0+255),w,b
 15938  002580  26D9               	addwf	fsr2l,f,c
 15939  002582  519C               	movf	(get_cluster@fs+1)& (0+255),w,b
 15940  002584  22DA               	addwfc	fsr2h,f,c
 15941  002586  CFDE F095          	movff	postinc2,get_cluster@fatsect
 15942  00258A  CFDE F096          	movff	postinc2,get_cluster@fatsect+1
 15943  00258E  CFDE F097          	movff	postinc2,get_cluster@fatsect+2
 15944  002592  CFDE F098          	movff	postinc2,get_cluster@fatsect+3
 15945                           
 15946                           ;tff.c: 166: switch (fs->fs_type) {
 15947  002596  D0DA               	goto	l10065
 15948  002598                     l10031:
 15949                           
 15950                           ; BSR set to: 0
 15951                           ;tff.c: 168: bc = (WORD)clust * 3 / 2;
 15952  002598  C088  F019         	movff	get_cluster@clust,___wmul@multiplier
 15953  00259C  C089  F01A         	movff	get_cluster@clust+1,___wmul@multiplier+1
 15954  0025A0  0E00               	movlw	0
 15955  0025A2  6E1C               	movwf	(___wmul@multiplicand+1)^0,c
 15956  0025A4  0E03               	movlw	3
 15957  0025A6  6E1B               	movwf	___wmul@multiplicand^0,c
 15958  0025A8  ECF2  F028         	call	___wmul	;wreg free
 15959  0025AC  90D8               	bcf	status,0,c
 15960  0025AE  301A               	rrcf	(?___wmul+1)^0,w,c
 15961  0025B0  0100               	movlb	0	; () banked
 15962  0025B2  6F8A               	movwf	??_get_cluster& (0+255),b
 15963  0025B4  3019               	rrcf	?___wmul^0,w,c
 15964  0025B6  6F99               	movwf	get_cluster@bc& (0+255),b
 15965  0025B8  C08A  F09A         	movff	??_get_cluster,get_cluster@bc+1
 15966                           
 15967                           ; BSR set to: 0
 15968                           ;tff.c: 169: if (!move_window(fatsect + bc / 512U)) break;
 15969  0025BC  C099  F08A         	movff	get_cluster@bc,??_get_cluster
 15970  0025C0  C09A  F08B         	movff	get_cluster@bc+1,??_get_cluster+1
 15971  0025C4  0E09               	movlw	9
 15972  0025C6  6F8C               	movwf	(??_get_cluster+2)& (0+255),b
 15973  0025C8                     u11525:
 15974  0025C8  90D8               	bcf	status,0,c
 15975  0025CA  338B               	rrcf	(??_get_cluster+1)& (0+255),f,b
 15976  0025CC  338A               	rrcf	??_get_cluster& (0+255),f,b
 15977  0025CE  2F8C               	decfsz	(??_get_cluster+2)& (0+255),f,b
 15978  0025D0  D7FB               	goto	u11525
 15979  0025D2  518A               	movf	??_get_cluster& (0+255),w,b
 15980  0025D4  2595               	addwf	get_cluster@fatsect& (0+255),w,b
 15981  0025D6  6F73               	movwf	move_window@sector& (0+255),b
 15982  0025D8  518B               	movf	(??_get_cluster+1)& (0+255),w,b
 15983  0025DA  2196               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 15984  0025DC  6F74               	movwf	(move_window@sector+1)& (0+255),b
 15985  0025DE  0E00               	movlw	0
 15986  0025E0  2197               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 15987  0025E2  6F75               	movwf	(move_window@sector+2)& (0+255),b
 15988  0025E4  0E00               	movlw	0
 15989  0025E6  2198               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 15990  0025E8  6F76               	movwf	(move_window@sector+3)& (0+255),b
 15991  0025EA  EC4E  F017         	call	_move_window	;wreg free
 15992  0025EE  0900               	iorlw	0
 15993  0025F0  B4D8               	btfsc	status,2,c
 15994  0025F2  D0B9               	goto	l10067
 15995                           
 15996                           ; BSR set to: 0
 15997                           ;tff.c: 170: wc = fs->win[bc % 512U]; bc++;
 15998  0025F4  0EFF               	movlw	255
 15999  0025F6  6F8A               	movwf	??_get_cluster& (0+255),b
 16000  0025F8  0E01               	movlw	1
 16001  0025FA  6F8B               	movwf	(??_get_cluster+1)& (0+255),b
 16002  0025FC  C099  F08C         	movff	get_cluster@bc,??_get_cluster+2
 16003  002600  C09A  F08D         	movff	get_cluster@bc+1,??_get_cluster+3
 16004  002604  518A               	movf	??_get_cluster& (0+255),w,b
 16005  002606  178C               	andwf	(??_get_cluster+2)& (0+255),f,b
 16006  002608  518B               	movf	(??_get_cluster+1)& (0+255),w,b
 16007  00260A  178D               	andwf	(??_get_cluster+3)& (0+255),f,b
 16008  00260C  C09B  F08E         	movff	get_cluster@fs,??_get_cluster+4
 16009  002610  C09C  F08F         	movff	get_cluster@fs+1,??_get_cluster+5
 16010  002614  518C               	movf	(??_get_cluster+2)& (0+255),w,b
 16011  002616  278E               	addwf	(??_get_cluster+4)& (0+255),f,b
 16012  002618  518D               	movf	(??_get_cluster+3)& (0+255),w,b
 16013  00261A  238F               	addwfc	(??_get_cluster+5)& (0+255),f,b
 16014  00261C  0E20               	movlw	32
 16015  00261E  258E               	addwf	(??_get_cluster+4)& (0+255),w,b
 16016  002620  6ED9               	movwf	fsr2l,c
 16017  002622  0E00               	movlw	0
 16018  002624  218F               	addwfc	(??_get_cluster+5)& (0+255),w,b
 16019  002626  6EDA               	movwf	fsr2h,c
 16020  002628  50DF               	movf	indf2,w,c
 16021  00262A  6F90               	movwf	(??_get_cluster+6)& (0+255),b
 16022  00262C  5190               	movf	(??_get_cluster+6)& (0+255),w,b
 16023  00262E  6F93               	movwf	get_cluster@wc& (0+255),b
 16024  002630  6B94               	clrf	(get_cluster@wc+1)& (0+255),b
 16025                           
 16026                           ; BSR set to: 0
 16027  002632  4B99               	infsnz	get_cluster@bc& (0+255),f,b
 16028  002634  2B9A               	incf	(get_cluster@bc+1)& (0+255),f,b
 16029                           
 16030                           ; BSR set to: 0
 16031                           ;tff.c: 171: if (!move_window(fatsect + bc / 512U)) break;
 16032  002636  C099  F08A         	movff	get_cluster@bc,??_get_cluster
 16033  00263A  C09A  F08B         	movff	get_cluster@bc+1,??_get_cluster+1
 16034  00263E  0E09               	movlw	9
 16035  002640  6F8C               	movwf	(??_get_cluster+2)& (0+255),b
 16036  002642                     u11545:
 16037  002642  90D8               	bcf	status,0,c
 16038  002644  338B               	rrcf	(??_get_cluster+1)& (0+255),f,b
 16039  002646  338A               	rrcf	??_get_cluster& (0+255),f,b
 16040  002648  2F8C               	decfsz	(??_get_cluster+2)& (0+255),f,b
 16041  00264A  D7FB               	goto	u11545
 16042  00264C  518A               	movf	??_get_cluster& (0+255),w,b
 16043  00264E  2595               	addwf	get_cluster@fatsect& (0+255),w,b
 16044  002650  6F73               	movwf	move_window@sector& (0+255),b
 16045  002652  518B               	movf	(??_get_cluster+1)& (0+255),w,b
 16046  002654  2196               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 16047  002656  6F74               	movwf	(move_window@sector+1)& (0+255),b
 16048  002658  0E00               	movlw	0
 16049  00265A  2197               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 16050  00265C  6F75               	movwf	(move_window@sector+2)& (0+255),b
 16051  00265E  0E00               	movlw	0
 16052  002660  2198               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 16053  002662  6F76               	movwf	(move_window@sector+3)& (0+255),b
 16054  002664  EC4E  F017         	call	_move_window	;wreg free
 16055  002668  0900               	iorlw	0
 16056  00266A  B4D8               	btfsc	status,2,c
 16057  00266C  D07C               	goto	l10067
 16058                           
 16059                           ; BSR set to: 0
 16060                           ;tff.c: 172: wc |= (WORD)fs->win[bc % 512U] << 8;
 16061  00266E  0EFF               	movlw	255
 16062  002670  6F8A               	movwf	??_get_cluster& (0+255),b
 16063  002672  0E01               	movlw	1
 16064  002674  6F8B               	movwf	(??_get_cluster+1)& (0+255),b
 16065  002676  C099  F08C         	movff	get_cluster@bc,??_get_cluster+2
 16066  00267A  C09A  F08D         	movff	get_cluster@bc+1,??_get_cluster+3
 16067  00267E  518A               	movf	??_get_cluster& (0+255),w,b
 16068  002680  178C               	andwf	(??_get_cluster+2)& (0+255),f,b
 16069  002682  518B               	movf	(??_get_cluster+1)& (0+255),w,b
 16070  002684  178D               	andwf	(??_get_cluster+3)& (0+255),f,b
 16071  002686  C09B  F08E         	movff	get_cluster@fs,??_get_cluster+4
 16072  00268A  C09C  F08F         	movff	get_cluster@fs+1,??_get_cluster+5
 16073  00268E  518C               	movf	(??_get_cluster+2)& (0+255),w,b
 16074  002690  278E               	addwf	(??_get_cluster+4)& (0+255),f,b
 16075  002692  518D               	movf	(??_get_cluster+3)& (0+255),w,b
 16076  002694  238F               	addwfc	(??_get_cluster+5)& (0+255),f,b
 16077  002696  0E20               	movlw	32
 16078  002698  258E               	addwf	(??_get_cluster+4)& (0+255),w,b
 16079  00269A  6ED9               	movwf	fsr2l,c
 16080  00269C  0E00               	movlw	0
 16081  00269E  218F               	addwfc	(??_get_cluster+5)& (0+255),w,b
 16082  0026A0  6EDA               	movwf	fsr2h,c
 16083  0026A2  50DF               	movf	indf2,w,c
 16084  0026A4  6F90               	movwf	(??_get_cluster+6)& (0+255),b
 16085  0026A6  5190               	movf	(??_get_cluster+6)& (0+255),w,b
 16086  0026A8  6F92               	movwf	(??_get_cluster+8)& (0+255),b
 16087  0026AA  6B91               	clrf	(??_get_cluster+7)& (0+255),b
 16088  0026AC  5191               	movf	(??_get_cluster+7)& (0+255),w,b
 16089  0026AE  1393               	iorwf	get_cluster@wc& (0+255),f,b
 16090  0026B0  5192               	movf	(??_get_cluster+8)& (0+255),w,b
 16091  0026B2  1394               	iorwf	(get_cluster@wc+1)& (0+255),f,b
 16092                           
 16093                           ; BSR set to: 0
 16094                           ;tff.c: 173: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
 16095  0026B4  B188               	btfsc	get_cluster@clust& (0+255),0,b
 16096  0026B6  D007               	goto	l10051
 16097                           
 16098                           ; BSR set to: 0
 16099  0026B8  0EFF               	movlw	255
 16100  0026BA  1593               	andwf	get_cluster@wc& (0+255),w,b
 16101  0026BC  6F88               	movwf	?_get_cluster& (0+255),b
 16102  0026BE  0E0F               	movlw	15
 16103  0026C0  1594               	andwf	(get_cluster@wc+1)& (0+255),w,b
 16104  0026C2  6F89               	movwf	(?_get_cluster+1)& (0+255),b
 16105  0026C4  0012               	return	
 16106  0026C6                     l10051:
 16107                           
 16108                           ; BSR set to: 0
 16109  0026C6  C093  F08A         	movff	get_cluster@wc,??_get_cluster
 16110  0026CA  C094  F08B         	movff	get_cluster@wc+1,??_get_cluster+1
 16111  0026CE  0E04               	movlw	4
 16112  0026D0  6F8C               	movwf	(??_get_cluster+2)& (0+255),b
 16113  0026D2                     u11575:
 16114  0026D2  90D8               	bcf	status,0,c
 16115  0026D4  338B               	rrcf	(??_get_cluster+1)& (0+255),f,b
 16116  0026D6  338A               	rrcf	??_get_cluster& (0+255),f,b
 16117  0026D8  2F8C               	decfsz	(??_get_cluster+2)& (0+255),f,b
 16118  0026DA  D7FB               	goto	u11575
 16119  0026DC  C08A  F088         	movff	??_get_cluster,?_get_cluster
 16120  0026E0  C08B  F089         	movff	??_get_cluster+1,?_get_cluster+1
 16121  0026E4  0012               	return	
 16122  0026E6                     l10055:
 16123                           
 16124                           ; BSR set to: 0
 16125                           ;tff.c: 176: if (!move_window(fatsect + clust / 256)) break;
 16126  0026E6  5189               	movf	(get_cluster@clust+1)& (0+255),w,b
 16127  0026E8  2595               	addwf	get_cluster@fatsect& (0+255),w,b
 16128  0026EA  6F73               	movwf	move_window@sector& (0+255),b
 16129  0026EC  0E00               	movlw	0
 16130  0026EE  2196               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 16131  0026F0  6F74               	movwf	(move_window@sector+1)& (0+255),b
 16132  0026F2  0E00               	movlw	0
 16133  0026F4  2197               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 16134  0026F6  6F75               	movwf	(move_window@sector+2)& (0+255),b
 16135  0026F8  0E00               	movlw	0
 16136  0026FA  2198               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 16137  0026FC  6F76               	movwf	(move_window@sector+3)& (0+255),b
 16138  0026FE  EC4E  F017         	call	_move_window	;wreg free
 16139  002702  0900               	iorlw	0
 16140  002704  B4D8               	btfsc	status,2,c
 16141  002706  D02F               	goto	l10067
 16142                           
 16143                           ; BSR set to: 0
 16144                           ;tff.c: 177: return (WORD)(*(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U]));
 16145  002708  0EFF               	movlw	255
 16146  00270A  6F8A               	movwf	??_get_cluster& (0+255),b
 16147  00270C  0E01               	movlw	1
 16148  00270E  6F8B               	movwf	(??_get_cluster+1)& (0+255),b
 16149  002710  C088  F08C         	movff	get_cluster@clust,??_get_cluster+2
 16150  002714  C089  F08D         	movff	get_cluster@clust+1,??_get_cluster+3
 16151  002718  90D8               	bcf	status,0,c
 16152  00271A  378C               	rlcf	(??_get_cluster+2)& (0+255),f,b
 16153  00271C  378D               	rlcf	(??_get_cluster+3)& (0+255),f,b
 16154  00271E  518A               	movf	??_get_cluster& (0+255),w,b
 16155  002720  178C               	andwf	(??_get_cluster+2)& (0+255),f,b
 16156  002722  518B               	movf	(??_get_cluster+1)& (0+255),w,b
 16157  002724  178D               	andwf	(??_get_cluster+3)& (0+255),f,b
 16158  002726  C09B  F08E         	movff	get_cluster@fs,??_get_cluster+4
 16159  00272A  C09C  F08F         	movff	get_cluster@fs+1,??_get_cluster+5
 16160  00272E  518C               	movf	(??_get_cluster+2)& (0+255),w,b
 16161  002730  278E               	addwf	(??_get_cluster+4)& (0+255),f,b
 16162  002732  518D               	movf	(??_get_cluster+3)& (0+255),w,b
 16163  002734  238F               	addwfc	(??_get_cluster+5)& (0+255),f,b
 16164  002736  0E20               	movlw	32
 16165  002738  258E               	addwf	(??_get_cluster+4)& (0+255),w,b
 16166  00273A  6ED9               	movwf	fsr2l,c
 16167  00273C  0E00               	movlw	0
 16168  00273E  218F               	addwfc	(??_get_cluster+5)& (0+255),w,b
 16169  002740  6EDA               	movwf	fsr2h,c
 16170  002742  CFDE F088          	movff	postinc2,?_get_cluster
 16171  002746  CFDD F089          	movff	postdec2,?_get_cluster+1
 16172  00274A  0012               	return	
 16173  00274C                     l10065:
 16174                           
 16175                           ; BSR set to: 0
 16176  00274C  EE20 F01C          	lfsr	2,28
 16177  002750  519B               	movf	get_cluster@fs& (0+255),w,b
 16178  002752  26D9               	addwf	fsr2l,f,c
 16179  002754  519C               	movf	(get_cluster@fs+1)& (0+255),w,b
 16180  002756  22DA               	addwfc	fsr2h,f,c
 16181  002758  50DF               	movf	indf2,w,c
 16182                           
 16183                           ; Switch size 1, requested type "simple"
 16184                           ; Number of cases is 2, Range of values is 1 to 2
 16185                           ; switch strategies available:
 16186                           ; Name         Instructions Cycles
 16187                           ; simple_byte            7     4 (average)
 16188                           ;	Chosen strategy is simple_byte
 16189  00275A  0A01               	xorlw	1	; case 1
 16190  00275C  B4D8               	btfsc	status,2,c
 16191  00275E  D71C               	goto	l10031
 16192  002760  0A03               	xorlw	3	; case 2
 16193  002762  B4D8               	btfsc	status,2,c
 16194  002764  D7C0               	goto	l10055
 16195  002766                     l10067:
 16196                           
 16197                           ; BSR set to: 0
 16198                           ;tff.c: 184: };tff.c: 186: return 1;
 16199  002766  0E00               	movlw	0
 16200  002768  6F89               	movwf	(?_get_cluster+1)& (0+255),b
 16201  00276A  0E01               	movlw	1
 16202  00276C  6F88               	movwf	?_get_cluster& (0+255),b
 16203                           
 16204                           ; BSR set to: 0
 16205  00276E  0012               	return		;funcret
 16206  002770                     __end_of_get_cluster:
 16207                           	callstack 0
 16208                           
 16209 ;; *************** function ___wmul *****************
 16210 ;; Defined at:
 16211 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\Umul16.c"
 16212 ;; Parameters:    Size  Location     Type
 16213 ;;  multiplier      2   24[COMRAM] unsigned int 
 16214 ;;  multiplicand    2   26[COMRAM] unsigned int 
 16215 ;; Auto vars:     Size  Location     Type
 16216 ;;  product         2   28[COMRAM] unsigned int 
 16217 ;; Return value:  Size  Location     Type
 16218 ;;                  2   24[COMRAM] unsigned int 
 16219 ;; Registers used:
 16220 ;;		wreg, status,2, status,0, prodl, prodh
 16221 ;; Tracked objects:
 16222 ;;		On entry : 0/0
 16223 ;;		On exit  : 0/0
 16224 ;;		Unchanged: 0/0
 16225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16226 ;;      Params:         4       0       0       0       0       0       0       0       0
 16227 ;;      Locals:         2       0       0       0       0       0       0       0       0
 16228 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16229 ;;      Totals:         6       0       0       0       0       0       0       0       0
 16230 ;;Total ram usage:        6 bytes
 16231 ;; Hardware stack levels used:    1
 16232 ;; Hardware stack levels required when called:    3
 16233 ;; This function calls:
 16234 ;;		Nothing
 16235 ;; This function is called by:
 16236 ;;		_get_cluster
 16237 ;;		_put_cluster
 16238 ;;		_fprintf
 16239 ;;		_atoi
 16240 ;; This function uses a non-reentrant model
 16241 ;;
 16242                           
 16243                           	psect	text77
 16244  0051E4                     __ptext77:
 16245                           	callstack 0
 16246  0051E4                     ___wmul:
 16247                           	callstack 21
 16248                           
 16249                           ; BSR set to: 0
 16250                           ;incstack = 0
 16251  0051E4  5019               	movf	___wmul@multiplier^0,w,c
 16252  0051E6  021B               	mulwf	___wmul@multiplicand^0,c
 16253  0051E8  CFF3 F01D          	movff	prodl,___wmul@product
 16254  0051EC  CFF4 F01E          	movff	prodh,___wmul@product+1
 16255  0051F0  5019               	movf	___wmul@multiplier^0,w,c
 16256  0051F2  021C               	mulwf	(___wmul@multiplicand+1)^0,c
 16257  0051F4  50F3               	movf	243,w,c
 16258  0051F6  261E               	addwf	(___wmul@product+1)^0,f,c
 16259  0051F8  501A               	movf	(___wmul@multiplier+1)^0,w,c
 16260  0051FA  021B               	mulwf	___wmul@multiplicand^0,c
 16261  0051FC  50F3               	movf	243,w,c
 16262  0051FE  261E               	addwf	(___wmul@product+1)^0,f,c
 16263  005200  C01D  F019         	movff	___wmul@product,?___wmul
 16264  005204  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
 16265  005208  0012               	return		;funcret
 16266  00520A                     __end_of___wmul:
 16267                           	callstack 0
 16268                           
 16269 ;; *************** function ___lldiv *****************
 16270 ;; Defined at:
 16271 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\__lldiv.c"
 16272 ;; Parameters:    Size  Location     Type
 16273 ;;  dividend        4   24[COMRAM] unsigned long 
 16274 ;;  divisor         4   28[COMRAM] unsigned long 
 16275 ;; Auto vars:     Size  Location     Type
 16276 ;;  quotient        4   32[COMRAM] unsigned long 
 16277 ;;  counter         1   36[COMRAM] unsigned char 
 16278 ;; Return value:  Size  Location     Type
 16279 ;;                  4   24[COMRAM] unsigned long 
 16280 ;; Registers used:
 16281 ;;		wreg, status,2, status,0
 16282 ;; Tracked objects:
 16283 ;;		On entry : 3D/2
 16284 ;;		On exit  : 3D/0
 16285 ;;		Unchanged: 3D/0
 16286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16287 ;;      Params:         8       0       0       0       0       0       0       0       0
 16288 ;;      Locals:         5       0       0       0       0       0       0       0       0
 16289 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16290 ;;      Totals:        13       0       0       0       0       0       0       0       0
 16291 ;;Total ram usage:       13 bytes
 16292 ;; Hardware stack levels used:    1
 16293 ;; Hardware stack levels required when called:    3
 16294 ;; This function calls:
 16295 ;;		Nothing
 16296 ;; This function is called by:
 16297 ;;		_auto_mount
 16298 ;;		_f_lseek
 16299 ;;		_fprintf
 16300 ;; This function uses a non-reentrant model
 16301 ;;
 16302                           
 16303                           	psect	text78
 16304  004710                     __ptext78:
 16305                           	callstack 0
 16306  004710                     ___lldiv:
 16307                           	callstack 23
 16308                           
 16309                           ;incstack = 0
 16310  004710  0E00               	movlw	0
 16311  004712  6E21               	movwf	___lldiv@quotient^0,c
 16312  004714  0E00               	movlw	0
 16313  004716  6E22               	movwf	(___lldiv@quotient+1)^0,c
 16314  004718  0E00               	movlw	0
 16315  00471A  6E23               	movwf	(___lldiv@quotient+2)^0,c
 16316  00471C  0E00               	movlw	0
 16317  00471E  6E24               	movwf	(___lldiv@quotient+3)^0,c
 16318  004720  501D               	movf	___lldiv@divisor^0,w,c
 16319  004722  101E               	iorwf	(___lldiv@divisor+1)^0,w,c
 16320  004724  101F               	iorwf	(___lldiv@divisor+2)^0,w,c
 16321  004726  1020               	iorwf	(___lldiv@divisor+3)^0,w,c
 16322  004728  B4D8               	btfsc	status,2,c
 16323  00472A  D02A               	goto	l1673
 16324  00472C  0E01               	movlw	1
 16325  00472E  6E25               	movwf	___lldiv@counter^0,c
 16326  004730  D006               	goto	l10793
 16327  004732                     l10791:
 16328  004732  90D8               	bcf	status,0,c
 16329  004734  361D               	rlcf	___lldiv@divisor^0,f,c
 16330  004736  361E               	rlcf	(___lldiv@divisor+1)^0,f,c
 16331  004738  361F               	rlcf	(___lldiv@divisor+2)^0,f,c
 16332  00473A  3620               	rlcf	(___lldiv@divisor+3)^0,f,c
 16333  00473C  2A25               	incf	___lldiv@counter^0,f,c
 16334  00473E                     l10793:
 16335  00473E  AE20               	btfss	(___lldiv@divisor+3)^0,7,c
 16336  004740  D7F8               	goto	l10791
 16337  004742                     u12710:
 16338  004742  90D8               	bcf	status,0,c
 16339  004744  3621               	rlcf	___lldiv@quotient^0,f,c
 16340  004746  3622               	rlcf	(___lldiv@quotient+1)^0,f,c
 16341  004748  3623               	rlcf	(___lldiv@quotient+2)^0,f,c
 16342  00474A  3624               	rlcf	(___lldiv@quotient+3)^0,f,c
 16343  00474C  501D               	movf	___lldiv@divisor^0,w,c
 16344  00474E  5C19               	subwf	___lldiv@dividend^0,w,c
 16345  004750  501E               	movf	(___lldiv@divisor+1)^0,w,c
 16346  004752  581A               	subwfb	(___lldiv@dividend+1)^0,w,c
 16347  004754  501F               	movf	(___lldiv@divisor+2)^0,w,c
 16348  004756  581B               	subwfb	(___lldiv@dividend+2)^0,w,c
 16349  004758  5020               	movf	(___lldiv@divisor+3)^0,w,c
 16350  00475A  581C               	subwfb	(___lldiv@dividend+3)^0,w,c
 16351  00475C  A0D8               	btfss	status,0,c
 16352  00475E  D009               	goto	l10803
 16353  004760  501D               	movf	___lldiv@divisor^0,w,c
 16354  004762  5E19               	subwf	___lldiv@dividend^0,f,c
 16355  004764  501E               	movf	(___lldiv@divisor+1)^0,w,c
 16356  004766  5A1A               	subwfb	(___lldiv@dividend+1)^0,f,c
 16357  004768  501F               	movf	(___lldiv@divisor+2)^0,w,c
 16358  00476A  5A1B               	subwfb	(___lldiv@dividend+2)^0,f,c
 16359  00476C  5020               	movf	(___lldiv@divisor+3)^0,w,c
 16360  00476E  5A1C               	subwfb	(___lldiv@dividend+3)^0,f,c
 16361  004770  8021               	bsf	___lldiv@quotient^0,0,c
 16362  004772                     l10803:
 16363  004772  90D8               	bcf	status,0,c
 16364  004774  3220               	rrcf	(___lldiv@divisor+3)^0,f,c
 16365  004776  321F               	rrcf	(___lldiv@divisor+2)^0,f,c
 16366  004778  321E               	rrcf	(___lldiv@divisor+1)^0,f,c
 16367  00477A  321D               	rrcf	___lldiv@divisor^0,f,c
 16368  00477C  2E25               	decfsz	___lldiv@counter^0,f,c
 16369  00477E  D7E1               	goto	u12710
 16370  004780                     l1673:
 16371  004780  C021  F019         	movff	___lldiv@quotient,?___lldiv
 16372  004784  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
 16373  004788  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
 16374  00478C  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
 16375  004790  0012               	return		;funcret
 16376  004792                     __end_of___lldiv:
 16377                           	callstack 0
 16378                           
 16379 ;; *************** function _f_close *****************
 16380 ;; Defined at:
 16381 ;;		line 1116 in file "bibliotecas/tff.c"
 16382 ;; Parameters:    Size  Location     Type
 16383 ;;  fp              2   51[BANK0 ] PTR struct _FIL
 16384 ;;		 -> fil(28), 
 16385 ;; Auto vars:     Size  Location     Type
 16386 ;;  res             1   48[COMRAM] enum E155
 16387 ;; Return value:  Size  Location     Type
 16388 ;;                  1    wreg      enum E3239
 16389 ;; Registers used:
 16390 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16391 ;; Tracked objects:
 16392 ;;		On entry : 3F/0
 16393 ;;		On exit  : 3F/0
 16394 ;;		Unchanged: 0/0
 16395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16396 ;;      Params:         0       2       0       0       0       0       0       0       0
 16397 ;;      Locals:         1       0       0       0       0       0       0       0       0
 16398 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16399 ;;      Totals:         1       2       0       0       0       0       0       0       0
 16400 ;;Total ram usage:        3 bytes
 16401 ;; Hardware stack levels used:    1
 16402 ;; Hardware stack levels required when called:   11
 16403 ;; This function calls:
 16404 ;;		_f_sync
 16405 ;; This function is called by:
 16406 ;;		_escrita_sdcard
 16407 ;; This function uses a non-reentrant model
 16408 ;;
 16409                           
 16410                           	psect	text79
 16411  00516C                     __ptext79:
 16412                           	callstack 0
 16413  00516C                     _f_close:
 16414                           	callstack 16
 16415                           
 16416                           ; BSR set to: 0
 16417                           ;tff.c: 1120: FRESULT res;;tff.c: 1124: res = f_sync(fp);
 16418                           
 16419                           ;incstack = 0
 16420  00516C  C093  F08A         	movff	f_close@fp,f_sync@fp
 16421  005170  C094  F08B         	movff	f_close@fp+1,f_sync@fp+1
 16422  005174  EC85  F01B         	call	_f_sync	;wreg free
 16423  005178  6E31               	movwf	f_close@res^0,c
 16424                           
 16425                           ; BSR set to: 0
 16426                           ;tff.c: 1128: if (res == FR_OK) fp->fs = (0);
 16427  00517A  5031               	movf	f_close@res^0,w,c
 16428  00517C  A4D8               	btfss	status,2,c
 16429  00517E  0012               	return	
 16430                           
 16431                           ; BSR set to: 0
 16432  005180  EE20 F004          	lfsr	2,4
 16433  005184  5193               	movf	f_close@fp& (0+255),w,b
 16434  005186  26D9               	addwf	fsr2l,f,c
 16435  005188  5194               	movf	(f_close@fp+1)& (0+255),w,b
 16436  00518A  22DA               	addwfc	fsr2h,f,c
 16437  00518C  0E00               	movlw	0
 16438  00518E  6EDE               	movwf	postinc2,c
 16439  005190  0E00               	movlw	0
 16440  005192  6EDD               	movwf	postdec2,c
 16441                           
 16442                           ; BSR set to: 0
 16443  005194  0012               	return		;funcret
 16444  005196                     __end_of_f_close:
 16445                           	callstack 0
 16446                           
 16447 ;; *************** function _f_sync *****************
 16448 ;; Defined at:
 16449 ;;		line 1077 in file "bibliotecas/tff.c"
 16450 ;; Parameters:    Size  Location     Type
 16451 ;;  fp              2   42[BANK0 ] PTR struct _FIL
 16452 ;;		 -> fil(28), 
 16453 ;; Auto vars:     Size  Location     Type
 16454 ;;  tim             4   44[BANK0 ] unsigned long 
 16455 ;;  dir             2   49[BANK0 ] PTR unsigned char 
 16456 ;;		 -> NULL(0), fs(544), 
 16457 ;;  res             1   48[BANK0 ] enum E155
 16458 ;; Return value:  Size  Location     Type
 16459 ;;                  1    wreg      enum E155
 16460 ;; Registers used:
 16461 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16462 ;; Tracked objects:
 16463 ;;		On entry : 3F/0
 16464 ;;		On exit  : 3F/0
 16465 ;;		Unchanged: 0/0
 16466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16467 ;;      Params:         0       2       0       0       0       0       0       0       0
 16468 ;;      Locals:         0       7       0       0       0       0       0       0       0
 16469 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16470 ;;      Totals:         0       9       0       0       0       0       0       0       0
 16471 ;;Total ram usage:        9 bytes
 16472 ;; Hardware stack levels used:    1
 16473 ;; Hardware stack levels required when called:   10
 16474 ;; This function calls:
 16475 ;;		_get_fattime
 16476 ;;		_move_window
 16477 ;;		_sync
 16478 ;;		_validate
 16479 ;; This function is called by:
 16480 ;;		_f_close
 16481 ;; This function uses a non-reentrant model
 16482 ;;
 16483                           
 16484                           	psect	text80
 16485  00370A                     __ptext80:
 16486                           	callstack 0
 16487  00370A                     _f_sync:
 16488                           	callstack 16
 16489                           
 16490                           ; BSR set to: 0
 16491                           ;tff.c: 1081: FRESULT res;;tff.c: 1082: DWORD tim;;tff.c: 1083: BYTE *dir;;tff.c: 1086: 
      +                          res = validate(fp->fs, fp->id);
 16492                           
 16493                           ; BSR set to: 0
 16494                           ;incstack = 0
 16495  00370A  EE20 F004          	lfsr	2,4
 16496  00370E  518A               	movf	f_sync@fp& (0+255),w,b
 16497  003710  26D9               	addwf	fsr2l,f,c
 16498  003712  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 16499  003714  22DA               	addwfc	fsr2h,f,c
 16500  003716  CFDE F01F          	movff	postinc2,validate@fs
 16501  00371A  CFDD F020          	movff	postdec2,validate@fs+1
 16502  00371E  C08A  FFD9         	movff	f_sync@fp,fsr2l
 16503  003722  C08B  FFDA         	movff	f_sync@fp+1,fsr2h
 16504  003726  CFDE F021          	movff	postinc2,validate@id
 16505  00372A  CFDD F022          	movff	postdec2,validate@id+1
 16506  00372E  ECD6  F026         	call	_validate	;wreg free
 16507  003732  0100               	movlb	0	; () banked
 16508  003734  6F90               	movwf	f_sync@res& (0+255),b
 16509                           
 16510                           ; BSR set to: 0
 16511                           ;tff.c: 1087: if (res == FR_OK) {
 16512  003736  5190               	movf	f_sync@res& (0+255),w,b
 16513  003738  A4D8               	btfss	status,2,c
 16514  00373A  D077               	goto	l11175
 16515                           
 16516                           ; BSR set to: 0
 16517                           ;tff.c: 1088: if (fp->flag & 0x20) {
 16518  00373C  EE20 F002          	lfsr	2,2
 16519  003740  518A               	movf	f_sync@fp& (0+255),w,b
 16520  003742  26D9               	addwf	fsr2l,f,c
 16521  003744  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 16522  003746  22DA               	addwfc	fsr2h,f,c
 16523  003748  AADF               	btfss	indf2,5,c
 16524  00374A  D06F               	goto	l11175
 16525                           
 16526                           ; BSR set to: 0
 16527                           ;tff.c: 1090: if (!move_window(fp->dir_sect))
 16528  00374C  EE20 F016          	lfsr	2,22
 16529  003750  518A               	movf	f_sync@fp& (0+255),w,b
 16530  003752  26D9               	addwf	fsr2l,f,c
 16531  003754  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 16532  003756  22DA               	addwfc	fsr2h,f,c
 16533  003758  CFDE F073          	movff	postinc2,move_window@sector
 16534  00375C  CFDE F074          	movff	postinc2,move_window@sector+1
 16535  003760  CFDE F075          	movff	postinc2,move_window@sector+2
 16536  003764  CFDE F076          	movff	postinc2,move_window@sector+3
 16537  003768  EC4E  F017         	call	_move_window	;wreg free
 16538  00376C  0900               	iorlw	0
 16539  00376E  A4D8               	btfss	status,2,c
 16540  003770  D002               	goto	l11161
 16541                           
 16542                           ; BSR set to: 0
 16543                           ;tff.c: 1091: return FR_RW_ERROR;
 16544  003772  0E08               	movlw	8
 16545  003774  0012               	return	
 16546  003776                     l11161:
 16547                           
 16548                           ; BSR set to: 0
 16549                           ;tff.c: 1092: dir = fp->dir_ptr;
 16550  003776  EE20 F01A          	lfsr	2,26
 16551  00377A  518A               	movf	f_sync@fp& (0+255),w,b
 16552  00377C  26D9               	addwf	fsr2l,f,c
 16553  00377E  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 16554  003780  22DA               	addwfc	fsr2h,f,c
 16555  003782  CFDE F091          	movff	postinc2,f_sync@dir
 16556  003786  CFDD F092          	movff	postdec2,f_sync@dir+1
 16557                           
 16558                           ;tff.c: 1093: dir[11] |= 0x20;
 16559  00378A  EE20 F00B          	lfsr	2,11
 16560  00378E  5191               	movf	f_sync@dir& (0+255),w,b
 16561  003790  26D9               	addwf	fsr2l,f,c
 16562  003792  5192               	movf	(f_sync@dir+1)& (0+255),w,b
 16563  003794  22DA               	addwfc	fsr2h,f,c
 16564  003796  0E00               	movlw	0
 16565  003798  8ADB               	bsf	plusw2,5,c
 16566                           
 16567                           ; BSR set to: 0
 16568                           ;tff.c: 1094: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(fp->fsize);
 16569  00379A  EE20 F00A          	lfsr	2,10
 16570  00379E  518A               	movf	f_sync@fp& (0+255),w,b
 16571  0037A0  26D9               	addwf	fsr2l,f,c
 16572  0037A2  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 16573  0037A4  22DA               	addwfc	fsr2h,f,c
 16574  0037A6  EE10 F01C          	lfsr	1,28
 16575  0037AA  5191               	movf	f_sync@dir& (0+255),w,b
 16576  0037AC  26E1               	addwf	fsr1l,f,c
 16577  0037AE  5192               	movf	(f_sync@dir+1)& (0+255),w,b
 16578  0037B0  22E2               	addwfc	fsr1h,f,c
 16579  0037B2  CFDE FFE6          	movff	postinc2,postinc1
 16580  0037B6  CFDE FFE6          	movff	postinc2,postinc1
 16581  0037BA  CFDE FFE6          	movff	postinc2,postinc1
 16582  0037BE  CFDE FFE6          	movff	postinc2,postinc1
 16583                           
 16584                           ; BSR set to: 0
 16585                           ;tff.c: 1095: *(WORD*)(BYTE*)(&dir[26])=(WORD)(fp->org_clust);
 16586  0037C2  EE20 F00E          	lfsr	2,14
 16587  0037C6  518A               	movf	f_sync@fp& (0+255),w,b
 16588  0037C8  26D9               	addwf	fsr2l,f,c
 16589  0037CA  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 16590  0037CC  22DA               	addwfc	fsr2h,f,c
 16591  0037CE  EE10 F01A          	lfsr	1,26
 16592  0037D2  5191               	movf	f_sync@dir& (0+255),w,b
 16593  0037D4  26E1               	addwf	fsr1l,f,c
 16594  0037D6  5192               	movf	(f_sync@dir+1)& (0+255),w,b
 16595  0037D8  22E2               	addwfc	fsr1h,f,c
 16596  0037DA  CFDE FFE6          	movff	postinc2,postinc1
 16597  0037DE  CFDD FFE5          	movff	postdec2,postdec1
 16598                           
 16599                           ; BSR set to: 0
 16600                           ;tff.c: 1099: tim = get_fattime();
 16601  0037E2  EC48  F01A         	call	_get_fattime	;wreg free
 16602  0037E6  C01D  F08C         	movff	?_get_fattime,f_sync@tim
 16603  0037EA  C01E  F08D         	movff	?_get_fattime+1,f_sync@tim+1
 16604  0037EE  C01F  F08E         	movff	?_get_fattime+2,f_sync@tim+2
 16605  0037F2  C020  F08F         	movff	?_get_fattime+3,f_sync@tim+3
 16606                           
 16607                           ; BSR set to: 0
 16608                           ;tff.c: 1100: *(DWORD*)(BYTE*)(&dir[22])=(DWORD)(tim);
 16609  0037F6  EE20 F016          	lfsr	2,22
 16610  0037FA  5191               	movf	f_sync@dir& (0+255),w,b
 16611  0037FC  26D9               	addwf	fsr2l,f,c
 16612  0037FE  5192               	movf	(f_sync@dir+1)& (0+255),w,b
 16613  003800  22DA               	addwfc	fsr2h,f,c
 16614  003802  C08C  FFDE         	movff	f_sync@tim,postinc2
 16615  003806  C08D  FFDE         	movff	f_sync@tim+1,postinc2
 16616  00380A  C08E  FFDE         	movff	f_sync@tim+2,postinc2
 16617  00380E  C08F  FFDE         	movff	f_sync@tim+3,postinc2
 16618                           
 16619                           ; BSR set to: 0
 16620                           ;tff.c: 1101: fp->flag &= (BYTE)~0x20;
 16621  003812  EE20 F002          	lfsr	2,2
 16622  003816  518A               	movf	f_sync@fp& (0+255),w,b
 16623  003818  26D9               	addwf	fsr2l,f,c
 16624  00381A  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 16625  00381C  22DA               	addwfc	fsr2h,f,c
 16626  00381E  0EDF               	movlw	223
 16627  003820  16DF               	andwf	indf2,f,c
 16628                           
 16629                           ; BSR set to: 0
 16630                           ;tff.c: 1102: res = sync();
 16631  003822  EC3D  F026         	call	_sync	;wreg free
 16632  003826  0100               	movlb	0	; () banked
 16633  003828  6F90               	movwf	f_sync@res& (0+255),b
 16634  00382A                     l11175:
 16635                           
 16636                           ; BSR set to: 0
 16637                           ;tff.c: 1103: };tff.c: 1104: };tff.c: 1105: return res;
 16638  00382A  5190               	movf	f_sync@res& (0+255),w,b
 16639                           
 16640                           ; BSR set to: 0
 16641  00382C  0012               	return		;funcret
 16642  00382E                     __end_of_f_sync:
 16643                           	callstack 0
 16644                           
 16645 ;; *************** function _validate *****************
 16646 ;; Defined at:
 16647 ;;		line 767 in file "bibliotecas/tff.c"
 16648 ;; Parameters:    Size  Location     Type
 16649 ;;  fs              2   30[COMRAM] PTR const struct _FATFS
 16650 ;;		 -> NULL(0), fs(544), 
 16651 ;;  id              2   32[COMRAM] unsigned short 
 16652 ;; Auto vars:     Size  Location     Type
 16653 ;;		None
 16654 ;; Return value:  Size  Location     Type
 16655 ;;                  1    wreg      enum E155
 16656 ;; Registers used:
 16657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16658 ;; Tracked objects:
 16659 ;;		On entry : 3F/0
 16660 ;;		On exit  : 0/0
 16661 ;;		Unchanged: 0/0
 16662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16663 ;;      Params:         4       0       0       0       0       0       0       0       0
 16664 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16665 ;;      Temps:          2       0       0       0       0       0       0       0       0
 16666 ;;      Totals:         6       0       0       0       0       0       0       0       0
 16667 ;;Total ram usage:        6 bytes
 16668 ;; Hardware stack levels used:    1
 16669 ;; Hardware stack levels required when called:    5
 16670 ;; This function calls:
 16671 ;;		_disk_status
 16672 ;; This function is called by:
 16673 ;;		_f_write
 16674 ;;		_f_sync
 16675 ;;		_f_lseek
 16676 ;;		_f_read
 16677 ;; This function uses a non-reentrant model
 16678 ;;
 16679                           
 16680                           	psect	text81
 16681  004DAC                     __ptext81:
 16682                           	callstack 0
 16683  004DAC                     _validate:
 16684                           	callstack 18
 16685                           
 16686                           ; BSR set to: 0
 16687                           ;tff.c: 772: if (!fs || !fs->fs_type || fs->id != id)
 16688                           
 16689                           ; BSR set to: 0
 16690                           ;incstack = 0
 16691  004DAC  501F               	movf	validate@fs^0,w,c
 16692  004DAE  1020               	iorwf	(validate@fs+1)^0,w,c
 16693  004DB0  B4D8               	btfsc	status,2,c
 16694  004DB2  D014               	goto	u11900
 16695                           
 16696                           ; BSR set to: 0
 16697  004DB4  EE20 F01C          	lfsr	2,28
 16698  004DB8  501F               	movf	validate@fs^0,w,c
 16699  004DBA  26D9               	addwf	fsr2l,f,c
 16700  004DBC  5020               	movf	(validate@fs+1)^0,w,c
 16701  004DBE  22DA               	addwfc	fsr2h,f,c
 16702  004DC0  50DF               	movf	indf2,w,c
 16703  004DC2  B4D8               	btfsc	status,2,c
 16704  004DC4  D00B               	goto	u11900
 16705                           
 16706                           ; BSR set to: 0
 16707  004DC6  C01F  FFD9         	movff	validate@fs,fsr2l
 16708  004DCA  C020  FFDA         	movff	validate@fs+1,fsr2h
 16709  004DCE  5021               	movf	validate@id^0,w,c
 16710  004DD0  18DE               	xorwf	postinc2,w,c
 16711  004DD2  E104               	bnz	u11900
 16712  004DD4  5022               	movf	(validate@id+1)^0,w,c
 16713  004DD6  18DE               	xorwf	postinc2,w,c
 16714  004DD8  B4D8               	btfsc	status,2,c
 16715  004DDA  D002               	goto	l10271
 16716  004DDC                     u11900:
 16717                           
 16718                           ; BSR set to: 0
 16719                           ;tff.c: 773: return FR_INVALID_OBJECT;
 16720  004DDC  0E0C               	movlw	12
 16721  004DDE  0012               	return	
 16722  004DE0                     l10271:
 16723                           
 16724                           ; BSR set to: 0
 16725                           ;tff.c: 774: if (disk_status(0) & 0x01)
 16726  004DE0  0E00               	movlw	0
 16727  004DE2  EC72  F028         	call	_disk_status
 16728  004DE6  6E23               	movwf	??_validate^0,c
 16729  004DE8  A023               	btfss	??_validate^0,0,c
 16730  004DEA  D002               	goto	l10277
 16731                           
 16732                           ;tff.c: 775: return FR_NOT_READY;
 16733  004DEC  0E01               	movlw	1
 16734  004DEE  0012               	return	
 16735  004DF0                     l10277:
 16736                           
 16737                           ;tff.c: 777: return FR_OK;
 16738  004DF0  0E00               	movlw	0
 16739  004DF2  0012               	return		;funcret
 16740  004DF4                     __end_of_validate:
 16741                           	callstack 0
 16742                           
 16743 ;; *************** function _disk_status *****************
 16744 ;; Defined at:
 16745 ;;		line 27 in file "bibliotecas/diskio.c"
 16746 ;; Parameters:    Size  Location     Type
 16747 ;;  pdrv            1    wreg     unsigned char 
 16748 ;; Auto vars:     Size  Location     Type
 16749 ;;  pdrv            1   28[COMRAM] unsigned char 
 16750 ;;  result          2    0        int 
 16751 ;;  stat            1   29[COMRAM] unsigned char 
 16752 ;; Return value:  Size  Location     Type
 16753 ;;                  1    wreg      unsigned char 
 16754 ;; Registers used:
 16755 ;;		wreg, status,2, status,0, cstack
 16756 ;; Tracked objects:
 16757 ;;		On entry : 3F/0
 16758 ;;		On exit  : 0/0
 16759 ;;		Unchanged: 0/0
 16760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16761 ;;      Params:         0       0       0       0       0       0       0       0       0
 16762 ;;      Locals:         4       0       0       0       0       0       0       0       0
 16763 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16764 ;;      Totals:         4       0       0       0       0       0       0       0       0
 16765 ;;Total ram usage:        4 bytes
 16766 ;; Hardware stack levels used:    1
 16767 ;; Hardware stack levels required when called:    4
 16768 ;; This function calls:
 16769 ;;		_sdc_disk_status
 16770 ;; This function is called by:
 16771 ;;		_auto_mount
 16772 ;;		_validate
 16773 ;; This function uses a non-reentrant model
 16774 ;;
 16775                           
 16776                           	psect	text82
 16777  0050E4                     __ptext82:
 16778                           	callstack 0
 16779  0050E4                     _disk_status:
 16780                           	callstack 18
 16781                           
 16782                           ;incstack = 0
 16783                           ;disk_status@pdrv stored from wreg
 16784  0050E4  6E1D               	movwf	disk_status@pdrv^0,c
 16785                           
 16786                           ;diskio.c: 31: DSTATUS stat;;diskio.c: 32: int result;;diskio.c: 34: switch (pdrv) {
 16787  0050E6  D00A               	goto	l9981
 16788  0050E8                     l9963:
 16789                           
 16790                           ;diskio.c: 36: stat = sdc_disk_status(pdrv);
 16791  0050E8  501D               	movf	disk_status@pdrv^0,w,c
 16792  0050EA  EC1F  F02A         	call	_sdc_disk_status
 16793  0050EE  6E1E               	movwf	disk_status@stat^0,c
 16794  0050F0                     l9965:
 16795                           
 16796                           ;diskio.c: 39: return stat;
 16797  0050F0  501E               	movf	disk_status@stat^0,w,c
 16798  0050F2  0012               	return	
 16799  0050F4                     l9969:
 16800  0050F4  501D               	movf	disk_status@pdrv^0,w,c
 16801  0050F6  EC1F  F02A         	call	_sdc_disk_status
 16802  0050FA  D7FA               	goto	l9965
 16803  0050FC                     l9981:
 16804  0050FC  501D               	movf	disk_status@pdrv^0,w,c
 16805                           
 16806                           ; Switch size 1, requested type "simple"
 16807                           ; Number of cases is 3, Range of values is 0 to 2
 16808                           ; switch strategies available:
 16809                           ; Name         Instructions Cycles
 16810                           ; simple_byte           10     6 (average)
 16811                           ;	Chosen strategy is simple_byte
 16812  0050FE  0A00               	xorlw	0	; case 0
 16813  005100  B4D8               	btfsc	status,2,c
 16814  005102  D7F2               	goto	l9963
 16815  005104  0A01               	xorlw	1	; case 1
 16816  005106  B4D8               	btfsc	status,2,c
 16817  005108  D7F5               	goto	l9969
 16818  00510A  0A03               	xorlw	3	; case 2
 16819  00510C  B4D8               	btfsc	status,2,c
 16820  00510E  D7F0               	goto	l9965
 16821                           
 16822                           ;diskio.c: 50: return 0x01;
 16823  005110  0E01               	movlw	1
 16824  005112  0012               	return		;funcret
 16825  005114                     __end_of_disk_status:
 16826                           	callstack 0
 16827                           
 16828 ;; *************** function _sdc_disk_status *****************
 16829 ;; Defined at:
 16830 ;;		line 588 in file "bibliotecas/diskio.c"
 16831 ;; Parameters:    Size  Location     Type
 16832 ;;  pdrv            1    wreg     unsigned char 
 16833 ;; Auto vars:     Size  Location     Type
 16834 ;;  pdrv            1   25[COMRAM] unsigned char 
 16835 ;;  stat            1    0        unsigned char 
 16836 ;;  cont            1    0        unsigned char 
 16837 ;;  buff            1    0        unsigned char 
 16838 ;; Return value:  Size  Location     Type
 16839 ;;                  1    wreg      unsigned char 
 16840 ;; Registers used:
 16841 ;;		wreg, status,2
 16842 ;; Tracked objects:
 16843 ;;		On entry : 0/0
 16844 ;;		On exit  : 0/0
 16845 ;;		Unchanged: 0/0
 16846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16847 ;;      Params:         0       0       0       0       0       0       0       0       0
 16848 ;;      Locals:         2       0       0       0       0       0       0       0       0
 16849 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16850 ;;      Totals:         2       0       0       0       0       0       0       0       0
 16851 ;;Total ram usage:        2 bytes
 16852 ;; Hardware stack levels used:    1
 16853 ;; Hardware stack levels required when called:    3
 16854 ;; This function calls:
 16855 ;;		Nothing
 16856 ;; This function is called by:
 16857 ;;		_disk_status
 16858 ;; This function uses a non-reentrant model
 16859 ;;
 16860                           
 16861                           	psect	text83
 16862  00543E                     __ptext83:
 16863                           	callstack 0
 16864  00543E                     _sdc_disk_status:
 16865                           	callstack 18
 16866                           
 16867                           ;incstack = 0
 16868                           ;sdc_disk_status@pdrv stored from wreg
 16869  00543E  6E1A               	movwf	sdc_disk_status@pdrv^0,c
 16870                           
 16871                           ;diskio.c: 591: unsigned char buff, cont;;diskio.c: 593: if (pdrv != 0) return 0x01;
 16872  005440  501A               	movf	sdc_disk_status@pdrv^0,w,c
 16873  005442  B4D8               	btfsc	status,2,c
 16874  005444  D002               	goto	l9839
 16875  005446  0E01               	movlw	1
 16876  005448  0012               	return	
 16877  00544A                     l9839:
 16878                           
 16879                           ;diskio.c: 595: return FR_OK;
 16880  00544A  0E00               	movlw	0
 16881  00544C  0012               	return		;funcret
 16882  00544E                     __end_of_sdc_disk_status:
 16883                           	callstack 0
 16884                           
 16885 ;; *************** function _sync *****************
 16886 ;; Defined at:
 16887 ;;		line 119 in file "bibliotecas/tff.c"
 16888 ;; Parameters:    Size  Location     Type
 16889 ;;		None
 16890 ;; Auto vars:     Size  Location     Type
 16891 ;;  fs              2   40[BANK0 ] PTR struct _FATFS
 16892 ;;		 -> NULL(0), fs(544), 
 16893 ;; Return value:  Size  Location     Type
 16894 ;;                  1    wreg      enum E155
 16895 ;; Registers used:
 16896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16897 ;; Tracked objects:
 16898 ;;		On entry : 3F/0
 16899 ;;		On exit  : 0/0
 16900 ;;		Unchanged: 0/0
 16901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16902 ;;      Params:         0       0       0       0       0       0       0       0       0
 16903 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16904 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16905 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16906 ;;Total ram usage:        2 bytes
 16907 ;; Hardware stack levels used:    1
 16908 ;; Hardware stack levels required when called:    9
 16909 ;; This function calls:
 16910 ;;		_disk_ioctl
 16911 ;;		_move_window
 16912 ;; This function is called by:
 16913 ;;		_f_sync
 16914 ;; This function uses a non-reentrant model
 16915 ;;
 16916                           
 16917                           	psect	text84
 16918  004C7A                     __ptext84:
 16919                           	callstack 0
 16920  004C7A                     _sync:
 16921                           	callstack 16
 16922                           
 16923                           ; BSR set to: 0
 16924                           ;tff.c: 121: FATFS *fs = FatFs;
 16925                           
 16926                           ;incstack = 0
 16927  004C7A  C039  F088         	movff	_FatFs,sync@fs
 16928  004C7E  C03A  F089         	movff	_FatFs+1,sync@fs+1
 16929                           
 16930                           ; BSR set to: 0
 16931                           ;tff.c: 124: fs->winflag = 1;
 16932  004C82  EE20 F01F          	lfsr	2,31
 16933  004C86  5188               	movf	sync@fs& (0+255),w,b
 16934  004C88  26D9               	addwf	fsr2l,f,c
 16935  004C8A  5189               	movf	(sync@fs+1)& (0+255),w,b
 16936  004C8C  22DA               	addwfc	fsr2h,f,c
 16937  004C8E  0E01               	movlw	1
 16938  004C90  6EDF               	movwf	indf2,c
 16939                           
 16940                           ; BSR set to: 0
 16941                           ;tff.c: 125: if (!move_window(0)) return FR_RW_ERROR;
 16942  004C92  0E00               	movlw	0
 16943  004C94  6F73               	movwf	move_window@sector& (0+255),b
 16944  004C96  0E00               	movlw	0
 16945  004C98  6F74               	movwf	(move_window@sector+1)& (0+255),b
 16946  004C9A  0E00               	movlw	0
 16947  004C9C  6F75               	movwf	(move_window@sector+2)& (0+255),b
 16948  004C9E  0E00               	movlw	0
 16949  004CA0  6F76               	movwf	(move_window@sector+3)& (0+255),b
 16950  004CA2  EC4E  F017         	call	_move_window	;wreg free
 16951  004CA6  0900               	iorlw	0
 16952  004CA8  A4D8               	btfss	status,2,c
 16953  004CAA  D002               	goto	l10673
 16954  004CAC                     u12460:
 16955  004CAC  0E08               	movlw	8
 16956  004CAE  0012               	return	
 16957  004CB0                     l10673:
 16958                           
 16959                           ; BSR set to: 0
 16960                           ;tff.c: 141: if (disk_ioctl(0, 0, (0)) != RES_OK)
 16961  004CB0  0E00               	movlw	0
 16962  004CB2  6E19               	movwf	disk_ioctl@cmd^0,c
 16963  004CB4  0E00               	movlw	0
 16964  004CB6  6E1A               	movwf	disk_ioctl@buff^0,c
 16965  004CB8  0E00               	movlw	0
 16966  004CBA  6E1B               	movwf	(disk_ioctl@buff+1)^0,c
 16967  004CBC  0E00               	movlw	0
 16968  004CBE  EC9F  F029         	call	_disk_ioctl
 16969  004CC2  0900               	iorlw	0
 16970  004CC4  A4D8               	btfss	status,2,c
 16971  004CC6  D7F2               	goto	u12460
 16972                           
 16973                           ;tff.c: 143: return FR_OK;
 16974  004CC8  0E00               	movlw	0
 16975  004CCA  0012               	return		;funcret
 16976  004CCC                     __end_of_sync:
 16977                           	callstack 0
 16978                           
 16979 ;; *************** function _move_window *****************
 16980 ;; Defined at:
 16981 ;;		line 77 in file "bibliotecas/tff.c"
 16982 ;; Parameters:    Size  Location     Type
 16983 ;;  sector          4   19[BANK0 ] unsigned long 
 16984 ;; Auto vars:     Size  Location     Type
 16985 ;;  n               1   33[BANK0 ] unsigned char 
 16986 ;;  wsect           4   34[BANK0 ] unsigned long 
 16987 ;;  fs              2   38[BANK0 ] PTR struct _FATFS
 16988 ;;		 -> NULL(0), fs(544), 
 16989 ;; Return value:  Size  Location     Type
 16990 ;;                  1    wreg      enum E105
 16991 ;; Registers used:
 16992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16993 ;; Tracked objects:
 16994 ;;		On entry : 3F/0
 16995 ;;		On exit  : 3F/0
 16996 ;;		Unchanged: 0/0
 16997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16998 ;;      Params:         0       4       0       0       0       0       0       0       0
 16999 ;;      Locals:         0       7       0       0       0       0       0       0       0
 17000 ;;      Temps:          0      10       0       0       0       0       0       0       0
 17001 ;;      Totals:         0      21       0       0       0       0       0       0       0
 17002 ;;Total ram usage:       21 bytes
 17003 ;; Hardware stack levels used:    1
 17004 ;; Hardware stack levels required when called:    8
 17005 ;; This function calls:
 17006 ;;		_disk_read
 17007 ;;		_disk_write
 17008 ;; This function is called by:
 17009 ;;		_sync
 17010 ;;		_get_cluster
 17011 ;;		_put_cluster
 17012 ;;		_trace_path
 17013 ;;		_reserve_direntry
 17014 ;;		_f_open
 17015 ;;		_f_write
 17016 ;;		_f_sync
 17017 ;;		_f_read
 17018 ;; This function uses a non-reentrant model
 17019 ;;
 17020                           
 17021                           	psect	text85
 17022  002E9C                     __ptext85:
 17023                           	callstack 0
 17024  002E9C                     _move_window:
 17025                           	callstack 15
 17026                           
 17027                           ; BSR set to: 0
 17028                           ;tff.c: 81: DWORD wsect;;tff.c: 82: FATFS *fs = FatFs;
 17029                           
 17030                           ;incstack = 0
 17031  002E9C  C039  F086         	movff	_FatFs,move_window@fs
 17032  002EA0  C03A  F087         	movff	_FatFs+1,move_window@fs+1
 17033                           
 17034                           ; BSR set to: 0
 17035                           ;tff.c: 85: wsect = fs->winsect;
 17036  002EA4  EE20 F004          	lfsr	2,4
 17037  002EA8  5186               	movf	move_window@fs& (0+255),w,b
 17038  002EAA  26D9               	addwf	fsr2l,f,c
 17039  002EAC  5187               	movf	(move_window@fs+1)& (0+255),w,b
 17040  002EAE  22DA               	addwfc	fsr2h,f,c
 17041  002EB0  CFDE F082          	movff	postinc2,move_window@wsect
 17042  002EB4  CFDE F083          	movff	postinc2,move_window@wsect+1
 17043  002EB8  CFDE F084          	movff	postinc2,move_window@wsect+2
 17044  002EBC  CFDE F085          	movff	postinc2,move_window@wsect+3
 17045                           
 17046                           ; BSR set to: 0
 17047                           ;tff.c: 86: if (wsect != sector) {
 17048  002EC0  5173               	movf	move_window@sector& (0+255),w,b
 17049  002EC2  1982               	xorwf	move_window@wsect& (0+255),w,b
 17050  002EC4  E10A               	bnz	u11390
 17051  002EC6  5174               	movf	(move_window@sector+1)& (0+255),w,b
 17052  002EC8  1983               	xorwf	(move_window@wsect+1)& (0+255),w,b
 17053  002ECA  E107               	bnz	u11390
 17054  002ECC  5175               	movf	(move_window@sector+2)& (0+255),w,b
 17055  002ECE  1984               	xorwf	(move_window@wsect+2)& (0+255),w,b
 17056  002ED0  E104               	bnz	u11390
 17057  002ED2  5176               	movf	(move_window@sector+3)& (0+255),w,b
 17058  002ED4  1985               	xorwf	(move_window@wsect+3)& (0+255),w,b
 17059  002ED6  B4D8               	btfsc	status,2,c
 17060  002ED8  D0B4               	goto	l9951
 17061  002EDA                     u11390:
 17062                           
 17063                           ; BSR set to: 0
 17064                           ;tff.c: 88: BYTE n;;tff.c: 89: if (fs->winflag) {
 17065  002EDA  EE20 F01F          	lfsr	2,31
 17066  002EDE  5186               	movf	move_window@fs& (0+255),w,b
 17067  002EE0  26D9               	addwf	fsr2l,f,c
 17068  002EE2  5187               	movf	(move_window@fs+1)& (0+255),w,b
 17069  002EE4  22DA               	addwfc	fsr2h,f,c
 17070  002EE6  50DF               	movf	indf2,w,c
 17071  002EE8  B4D8               	btfsc	status,2,c
 17072  002EEA  D081               	goto	l9941
 17073                           
 17074                           ; BSR set to: 0
 17075                           ;tff.c: 90: if (disk_write(0, fs->win, wsect, 1) != RES_OK)
 17076  002EEC  0E20               	movlw	32
 17077  002EEE  2586               	addwf	move_window@fs& (0+255),w,b
 17078  002EF0  6F68               	movwf	disk_write@buff& (0+255),b
 17079  002EF2  0E00               	movlw	0
 17080  002EF4  2187               	addwfc	(move_window@fs+1)& (0+255),w,b
 17081  002EF6  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 17082  002EF8  C082  F06A         	movff	move_window@wsect,disk_write@sector
 17083  002EFC  C083  F06B         	movff	move_window@wsect+1,disk_write@sector+1
 17084  002F00  C084  F06C         	movff	move_window@wsect+2,disk_write@sector+2
 17085  002F04  C085  F06D         	movff	move_window@wsect+3,disk_write@sector+3
 17086  002F08  0E01               	movlw	1
 17087  002F0A  6F6E               	movwf	disk_write@count& (0+255),b
 17088  002F0C  0E00               	movlw	0
 17089  002F0E  EC66  F026         	call	_disk_write
 17090  002F12  0900               	iorlw	0
 17091  002F14  B4D8               	btfsc	status,2,c
 17092  002F16  D002               	goto	l9925
 17093  002F18                     u11410:
 17094                           
 17095                           ; BSR set to: 0
 17096                           ;tff.c: 91: return FALSE;
 17097  002F18  0E00               	movlw	0
 17098  002F1A  0012               	return	
 17099  002F1C                     l9925:
 17100                           
 17101                           ; BSR set to: 0
 17102                           ;tff.c: 92: fs->winflag = 0;
 17103  002F1C  EE20 F01F          	lfsr	2,31
 17104  002F20  5186               	movf	move_window@fs& (0+255),w,b
 17105  002F22  26D9               	addwf	fsr2l,f,c
 17106  002F24  5187               	movf	(move_window@fs+1)& (0+255),w,b
 17107  002F26  22DA               	addwfc	fsr2h,f,c
 17108  002F28  0E00               	movlw	0
 17109  002F2A  6EDF               	movwf	indf2,c
 17110                           
 17111                           ;tff.c: 93: if (wsect < (fs->fatbase + fs->sects_fat)) {
 17112  002F2C  EE20 F008          	lfsr	2,8
 17113  002F30  5186               	movf	move_window@fs& (0+255),w,b
 17114  002F32  26D9               	addwf	fsr2l,f,c
 17115  002F34  5187               	movf	(move_window@fs+1)& (0+255),w,b
 17116  002F36  22DA               	addwfc	fsr2h,f,c
 17117  002F38  CFDE F077          	movff	postinc2,??_move_window
 17118  002F3C  CFDE F078          	movff	postinc2,??_move_window+1
 17119  002F40  CFDE F079          	movff	postinc2,??_move_window+2
 17120  002F44  CFDE F07A          	movff	postinc2,??_move_window+3
 17121  002F48  EE20 F014          	lfsr	2,20
 17122  002F4C  5186               	movf	move_window@fs& (0+255),w,b
 17123  002F4E  26D9               	addwf	fsr2l,f,c
 17124  002F50  5187               	movf	(move_window@fs+1)& (0+255),w,b
 17125  002F52  22DA               	addwfc	fsr2h,f,c
 17126  002F54  CFDE F07B          	movff	postinc2,??_move_window+4
 17127  002F58  CFDD F07C          	movff	postdec2,??_move_window+5
 17128  002F5C  517B               	movf	(??_move_window+4)& (0+255),w,b
 17129  002F5E  2577               	addwf	??_move_window& (0+255),w,b
 17130  002F60  6F7D               	movwf	(??_move_window+6)& (0+255),b
 17131  002F62  517C               	movf	(??_move_window+5)& (0+255),w,b
 17132  002F64  2178               	addwfc	(??_move_window+1)& (0+255),w,b
 17133  002F66  6F7E               	movwf	(??_move_window+7)& (0+255),b
 17134  002F68  0E00               	movlw	0
 17135  002F6A  2179               	addwfc	(??_move_window+2)& (0+255),w,b
 17136  002F6C  6F7F               	movwf	(??_move_window+8)& (0+255),b
 17137  002F6E  0E00               	movlw	0
 17138  002F70  217A               	addwfc	(??_move_window+3)& (0+255),w,b
 17139  002F72  6F80               	movwf	(??_move_window+9)& (0+255),b
 17140  002F74  517D               	movf	(??_move_window+6)& (0+255),w,b
 17141  002F76  5D82               	subwf	move_window@wsect& (0+255),w,b
 17142  002F78  517E               	movf	(??_move_window+7)& (0+255),w,b
 17143  002F7A  5983               	subwfb	(move_window@wsect+1)& (0+255),w,b
 17144  002F7C  517F               	movf	(??_move_window+8)& (0+255),w,b
 17145  002F7E  5984               	subwfb	(move_window@wsect+2)& (0+255),w,b
 17146  002F80  5180               	movf	(??_move_window+9)& (0+255),w,b
 17147  002F82  5985               	subwfb	(move_window@wsect+3)& (0+255),w,b
 17148  002F84  B0D8               	btfsc	status,0,c
 17149  002F86  D033               	goto	l9941
 17150                           
 17151                           ; BSR set to: 0
 17152                           ;tff.c: 94: for (n = fs->n_fats; n >= 2; n--) {
 17153  002F88  EE20 F01E          	lfsr	2,30
 17154  002F8C  5186               	movf	move_window@fs& (0+255),w,b
 17155  002F8E  26D9               	addwf	fsr2l,f,c
 17156  002F90  5187               	movf	(move_window@fs+1)& (0+255),w,b
 17157  002F92  22DA               	addwfc	fsr2h,f,c
 17158  002F94  50DF               	movf	indf2,w,c
 17159  002F96  6F81               	movwf	move_window@n& (0+255),b
 17160  002F98                     l9929:
 17161                           
 17162                           ; BSR set to: 0
 17163  002F98  0E02               	movlw	2
 17164  002F9A  6181               	cpfslt	move_window@n& (0+255),b
 17165  002F9C  D001               	goto	l9933
 17166  002F9E  D027               	goto	l9941
 17167  002FA0                     l9933:
 17168                           
 17169                           ; BSR set to: 0
 17170                           ;tff.c: 95: wsect += fs->sects_fat;
 17171  002FA0  EE20 F014          	lfsr	2,20
 17172  002FA4  5186               	movf	move_window@fs& (0+255),w,b
 17173  002FA6  26D9               	addwf	fsr2l,f,c
 17174  002FA8  5187               	movf	(move_window@fs+1)& (0+255),w,b
 17175  002FAA  22DA               	addwfc	fsr2h,f,c
 17176  002FAC  CFDE F077          	movff	postinc2,??_move_window
 17177  002FB0  CFDD F078          	movff	postdec2,??_move_window+1
 17178  002FB4  5177               	movf	??_move_window& (0+255),w,b
 17179  002FB6  2782               	addwf	move_window@wsect& (0+255),f,b
 17180  002FB8  5178               	movf	(??_move_window+1)& (0+255),w,b
 17181  002FBA  2383               	addwfc	(move_window@wsect+1)& (0+255),f,b
 17182  002FBC  0E00               	movlw	0
 17183  002FBE  2384               	addwfc	(move_window@wsect+2)& (0+255),f,b
 17184  002FC0  0E00               	movlw	0
 17185  002FC2  2385               	addwfc	(move_window@wsect+3)& (0+255),f,b
 17186                           
 17187                           ; BSR set to: 0
 17188                           ;tff.c: 96: disk_write(0, fs->win, wsect, 1);
 17189  002FC4  0E20               	movlw	32
 17190  002FC6  2586               	addwf	move_window@fs& (0+255),w,b
 17191  002FC8  6F68               	movwf	disk_write@buff& (0+255),b
 17192  002FCA  0E00               	movlw	0
 17193  002FCC  2187               	addwfc	(move_window@fs+1)& (0+255),w,b
 17194  002FCE  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 17195  002FD0  C082  F06A         	movff	move_window@wsect,disk_write@sector
 17196  002FD4  C083  F06B         	movff	move_window@wsect+1,disk_write@sector+1
 17197  002FD8  C084  F06C         	movff	move_window@wsect+2,disk_write@sector+2
 17198  002FDC  C085  F06D         	movff	move_window@wsect+3,disk_write@sector+3
 17199  002FE0  0E01               	movlw	1
 17200  002FE2  6F6E               	movwf	disk_write@count& (0+255),b
 17201  002FE4  0E00               	movlw	0
 17202  002FE6  EC66  F026         	call	_disk_write
 17203                           
 17204                           ; BSR set to: 0
 17205  002FEA  0781               	decf	move_window@n& (0+255),f,b
 17206  002FEC  D7D5               	goto	l9929
 17207  002FEE                     l9941:
 17208                           
 17209                           ; BSR set to: 0
 17210                           ;tff.c: 97: };tff.c: 98: };tff.c: 99: };tff.c: 101: if (sector) {
 17211  002FEE  5173               	movf	move_window@sector& (0+255),w,b
 17212  002FF0  1174               	iorwf	(move_window@sector+1)& (0+255),w,b
 17213  002FF2  1175               	iorwf	(move_window@sector+2)& (0+255),w,b
 17214  002FF4  1176               	iorwf	(move_window@sector+3)& (0+255),w,b
 17215  002FF6  B4D8               	btfsc	status,2,c
 17216  002FF8  D024               	goto	l9951
 17217                           
 17218                           ; BSR set to: 0
 17219                           ;tff.c: 102: if (disk_read(0, fs->win, sector, 1) != RES_OK)
 17220  002FFA  0E20               	movlw	32
 17221  002FFC  2586               	addwf	move_window@fs& (0+255),w,b
 17222  002FFE  6F68               	movwf	disk_read@buff& (0+255),b
 17223  003000  0E00               	movlw	0
 17224  003002  2187               	addwfc	(move_window@fs+1)& (0+255),w,b
 17225  003004  6F69               	movwf	(disk_read@buff+1)& (0+255),b
 17226  003006  C073  F06A         	movff	move_window@sector,disk_read@sector
 17227  00300A  C074  F06B         	movff	move_window@sector+1,disk_read@sector+1
 17228  00300E  C075  F06C         	movff	move_window@sector+2,disk_read@sector+2
 17229  003012  C076  F06D         	movff	move_window@sector+3,disk_read@sector+3
 17230  003016  0E01               	movlw	1
 17231  003018  6F6E               	movwf	disk_read@count& (0+255),b
 17232  00301A  0E00               	movlw	0
 17233  00301C  EC3D  F024         	call	_disk_read
 17234  003020  0900               	iorlw	0
 17235  003022  A4D8               	btfss	status,2,c
 17236  003024  D779               	goto	u11410
 17237                           
 17238                           ; BSR set to: 0
 17239                           ;tff.c: 104: fs->winsect = sector;
 17240  003026  EE20 F004          	lfsr	2,4
 17241  00302A  5186               	movf	move_window@fs& (0+255),w,b
 17242  00302C  26D9               	addwf	fsr2l,f,c
 17243  00302E  5187               	movf	(move_window@fs+1)& (0+255),w,b
 17244  003030  22DA               	addwfc	fsr2h,f,c
 17245  003032  C073  FFDE         	movff	move_window@sector,postinc2
 17246  003036  C074  FFDE         	movff	move_window@sector+1,postinc2
 17247  00303A  C075  FFDE         	movff	move_window@sector+2,postinc2
 17248  00303E  C076  FFDE         	movff	move_window@sector+3,postinc2
 17249  003042                     l9951:
 17250                           
 17251                           ; BSR set to: 0
 17252                           ;tff.c: 105: };tff.c: 106: };tff.c: 107: return TRUE;
 17253  003042  0E01               	movlw	1
 17254                           
 17255                           ; BSR set to: 0
 17256  003044  0012               	return		;funcret
 17257  003046                     __end_of_move_window:
 17258                           	callstack 0
 17259                           
 17260 ;; *************** function _disk_write *****************
 17261 ;; Defined at:
 17262 ;;		line 150 in file "bibliotecas/diskio.c"
 17263 ;; Parameters:    Size  Location     Type
 17264 ;;  pdrv            1    wreg     unsigned char 
 17265 ;;  buff            2    8[BANK0 ] PTR const unsigned char 
 17266 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 17267 ;;  sector          4   10[BANK0 ] unsigned long 
 17268 ;;  count           1   14[BANK0 ] unsigned char 
 17269 ;; Auto vars:     Size  Location     Type
 17270 ;;  pdrv            1   15[BANK0 ] unsigned char 
 17271 ;;  result          2   16[BANK0 ] int 
 17272 ;;  res             1   18[BANK0 ] enum E25
 17273 ;; Return value:  Size  Location     Type
 17274 ;;                  1    wreg      enum E25
 17275 ;; Registers used:
 17276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17277 ;; Tracked objects:
 17278 ;;		On entry : 3F/0
 17279 ;;		On exit  : 3F/0
 17280 ;;		Unchanged: 0/0
 17281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17282 ;;      Params:         0       7       0       0       0       0       0       0       0
 17283 ;;      Locals:         0       4       0       0       0       0       0       0       0
 17284 ;;      Temps:          1       0       0       0       0       0       0       0       0
 17285 ;;      Totals:         1      11       0       0       0       0       0       0       0
 17286 ;;Total ram usage:       12 bytes
 17287 ;; Hardware stack levels used:    1
 17288 ;; Hardware stack levels required when called:    7
 17289 ;; This function calls:
 17290 ;;		_sdc_disk_write
 17291 ;; This function is called by:
 17292 ;;		_move_window
 17293 ;;		_reserve_direntry
 17294 ;;		_f_write
 17295 ;; This function uses a non-reentrant model
 17296 ;;
 17297                           
 17298                           	psect	text86
 17299  004CCC                     __ptext86:
 17300                           	callstack 0
 17301  004CCC                     _disk_write:
 17302                           	callstack 15
 17303                           
 17304                           ; BSR set to: 0
 17305                           ;incstack = 0
 17306                           ;disk_write@pdrv stored from wreg
 17307  004CCC  6F6F               	movwf	disk_write@pdrv& (0+255),b
 17308                           
 17309                           ;diskio.c: 157: DRESULT res;;diskio.c: 158: int result;;diskio.c: 160: switch (pdrv) {
 17310  004CCE  D018               	goto	l9805
 17311  004CD0                     l9783:
 17312                           
 17313                           ; BSR set to: 0
 17314                           ;diskio.c: 163: result = sdc_disk_write(buff, sector, count);
 17315  004CD0  C068  F025         	movff	disk_write@buff,sdc_disk_write@p_buff
 17316  004CD4  C069  F026         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 17317  004CD8  C06A  F027         	movff	disk_write@sector,sdc_disk_write@sector
 17318  004CDC  C06B  F028         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 17319  004CE0  C06C  F029         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 17320  004CE4  C06D  F02A         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 17321  004CE8  C06E  F02B         	movff	disk_write@count,sdc_disk_write@count
 17322  004CEC  EC99  F015         	call	_sdc_disk_write	;wreg free
 17323  004CF0  6E30               	movwf	??_disk_write^0,c
 17324  004CF2  5030               	movf	??_disk_write^0,w,c
 17325  004CF4  6F70               	movwf	disk_write@result& (0+255),b
 17326  004CF6  6B71               	clrf	(disk_write@result+1)& (0+255),b
 17327                           
 17328                           ; BSR set to: 0
 17329                           ;diskio.c: 165: res = result;
 17330  004CF8  C070  F072         	movff	disk_write@result,disk_write@res
 17331  004CFC                     l9787:
 17332                           
 17333                           ; BSR set to: 0
 17334                           ;diskio.c: 168: return res;
 17335  004CFC  5172               	movf	disk_write@res& (0+255),w,b
 17336  004CFE  0012               	return	
 17337  004D00                     l9805:
 17338  004D00  0100               	movlb	0	; () banked
 17339  004D02  516F               	movf	disk_write@pdrv& (0+255),w,b
 17340                           
 17341                           ; Switch size 1, requested type "simple"
 17342                           ; Number of cases is 3, Range of values is 0 to 2
 17343                           ; switch strategies available:
 17344                           ; Name         Instructions Cycles
 17345                           ; simple_byte           10     6 (average)
 17346                           ;	Chosen strategy is simple_byte
 17347  004D04  0A00               	xorlw	0	; case 0
 17348  004D06  B4D8               	btfsc	status,2,c
 17349  004D08  D7E3               	goto	l9783
 17350  004D0A  0A01               	xorlw	1	; case 1
 17351  004D0C  B4D8               	btfsc	status,2,c
 17352  004D0E  D7E0               	goto	l9783
 17353  004D10  0A03               	xorlw	3	; case 2
 17354  004D12  B4D8               	btfsc	status,2,c
 17355  004D14  D7F3               	goto	l9787
 17356                           
 17357                           ; BSR set to: 0
 17358                           ;diskio.c: 189: return RES_PARERR;
 17359  004D16  0E04               	movlw	4
 17360                           
 17361                           ; BSR set to: 0
 17362  004D18  0012               	return		;funcret
 17363  004D1A                     __end_of_disk_write:
 17364                           	callstack 0
 17365                           
 17366 ;; *************** function _sdc_disk_write *****************
 17367 ;; Defined at:
 17368 ;;		line 509 in file "bibliotecas/diskio.c"
 17369 ;; Parameters:    Size  Location     Type
 17370 ;;  p_buff          2   36[COMRAM] PTR const unsigned char 
 17371 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 17372 ;;  sector          4   38[COMRAM] unsigned long 
 17373 ;;  count           1   42[COMRAM] unsigned char 
 17374 ;; Auto vars:     Size  Location     Type
 17375 ;;  j               2    5[BANK0 ] int 
 17376 ;;  count1          2    2[BANK0 ] int 
 17377 ;;  i               2    0        int 
 17378 ;;  buff            1    7[BANK0 ] unsigned char 
 17379 ;;  res             1    4[BANK0 ] enum E25
 17380 ;; Return value:  Size  Location     Type
 17381 ;;                  1    wreg      enum E25
 17382 ;; Registers used:
 17383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17384 ;; Tracked objects:
 17385 ;;		On entry : 0/0
 17386 ;;		On exit  : 3F/0
 17387 ;;		Unchanged: 0/0
 17388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17389 ;;      Params:         7       0       0       0       0       0       0       0       0
 17390 ;;      Locals:         0       8       0       0       0       0       0       0       0
 17391 ;;      Temps:          4       0       0       0       0       0       0       0       0
 17392 ;;      Totals:        11       8       0       0       0       0       0       0       0
 17393 ;;Total ram usage:       19 bytes
 17394 ;; Hardware stack levels used:    1
 17395 ;; Hardware stack levels required when called:    6
 17396 ;; This function calls:
 17397 ;;		_command
 17398 ;;		_dummy_clocks
 17399 ;;		_escreve_SPI
 17400 ;;		_leitura_SPI
 17401 ;;		_proceed
 17402 ;;		_response
 17403 ;; This function is called by:
 17404 ;;		_disk_write
 17405 ;; This function uses a non-reentrant model
 17406 ;;
 17407                           
 17408                           	psect	text87
 17409  002B32                     __ptext87:
 17410                           	callstack 0
 17411  002B32                     _sdc_disk_write:
 17412                           	callstack 15
 17413                           
 17414                           ; BSR set to: 0
 17415                           ;incstack = 0
 17416  002B32  0E00               	movlw	0
 17417  002B34  0100               	movlb	0	; () banked
 17418  002B36  6F63               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 17419  002B38  0E00               	movlw	0
 17420  002B3A  6F62               	movwf	sdc_disk_write@count1& (0+255),b
 17421                           
 17422                           ; BSR set to: 0
 17423                           ;diskio.c: 515: if(count>1)
 17424  002B3C  0E01               	movlw	1
 17425  002B3E  642B               	cpfsgt	sdc_disk_write@count^0,c
 17426  002B40  D069               	goto	l144
 17427                           
 17428                           ; BSR set to: 0
 17429                           ;diskio.c: 516: {;diskio.c: 517: LATCbits.LATC7 = 0;
 17430  002B42  9E8B               	bcf	139,7,c	;volatile
 17431                           
 17432                           ;diskio.c: 518: LATBbits.LATB5 = 0;
 17433  002B44  9A8A               	bcf	138,5,c	;volatile
 17434                           
 17435                           ; BSR set to: 0
 17436                           ;diskio.c: 519: dummy_clocks(10);
 17437  002B46  0E0A               	movlw	10
 17438  002B48  EC05  F028         	call	_dummy_clocks
 17439                           
 17440                           ;diskio.c: 520: command(0X57, count, 0XFF);
 17441  002B4C  502B               	movf	sdc_disk_write@count^0,w,c
 17442  002B4E  6E1E               	movwf	command@arg^0,c
 17443  002B50  6A1F               	clrf	(command@arg+1)^0,c
 17444  002B52  6A20               	clrf	(command@arg+2)^0,c
 17445  002B54  6A21               	clrf	(command@arg+3)^0,c
 17446  002B56  0EFF               	movlw	255
 17447  002B58  6E22               	movwf	command@CRC^0,c
 17448  002B5A  0E57               	movlw	87
 17449  002B5C  EC3C  F025         	call	_command
 17450                           
 17451                           ;diskio.c: 521: proceed();
 17452  002B60  EC4A  F02A         	call	_proceed	;wreg free
 17453  002B64                     l9671:
 17454                           
 17455                           ;diskio.c: 523: buff = response();
 17456  002B64  EC44  F02A         	call	_response	;wreg free
 17457  002B68  0100               	movlb	0	; () banked
 17458  002B6A  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 17459                           
 17460                           ; BSR set to: 0
 17461                           ;diskio.c: 524: }while(buff!=0X00);
 17462  002B6C  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 17463  002B6E  A4D8               	btfss	status,2,c
 17464  002B70  D7F9               	goto	l9671
 17465                           
 17466                           ; BSR set to: 0
 17467                           ;diskio.c: 526: dummy_clocks(10);
 17468  002B72  0E0A               	movlw	10
 17469  002B74  EC05  F028         	call	_dummy_clocks
 17470                           
 17471                           ;diskio.c: 527: command(0X59, sector*512, 0XFF);
 17472  002B78  C027  F02C         	movff	sdc_disk_write@sector,??_sdc_disk_write
 17473  002B7C  C028  F02D         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 17474  002B80  C029  F02E         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 17475  002B84  C02A  F02F         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 17476  002B88  0E09               	movlw	9
 17477  002B8A                     u11145:
 17478  002B8A  90D8               	bcf	status,0,c
 17479  002B8C  362C               	rlcf	??_sdc_disk_write^0,f,c
 17480  002B8E  362D               	rlcf	(??_sdc_disk_write+1)^0,f,c
 17481  002B90  362E               	rlcf	(??_sdc_disk_write+2)^0,f,c
 17482  002B92  362F               	rlcf	(??_sdc_disk_write+3)^0,f,c
 17483  002B94  2EE8               	decfsz	wreg,f,c
 17484  002B96  D7F9               	goto	u11145
 17485  002B98  C02C  F01E         	movff	??_sdc_disk_write,command@arg
 17486  002B9C  C02D  F01F         	movff	??_sdc_disk_write+1,command@arg+1
 17487  002BA0  C02E  F020         	movff	??_sdc_disk_write+2,command@arg+2
 17488  002BA4  C02F  F021         	movff	??_sdc_disk_write+3,command@arg+3
 17489  002BA8  0EFF               	movlw	255
 17490  002BAA  6E22               	movwf	command@CRC^0,c
 17491  002BAC  0E59               	movlw	89
 17492  002BAE  EC3C  F025         	call	_command
 17493                           
 17494                           ;diskio.c: 528: proceed();
 17495  002BB2  EC4A  F02A         	call	_proceed	;wreg free
 17496  002BB6                     l9679:
 17497                           
 17498                           ;diskio.c: 530: buff = response();
 17499  002BB6  EC44  F02A         	call	_response	;wreg free
 17500  002BBA  0100               	movlb	0	; () banked
 17501  002BBC  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 17502                           
 17503                           ; BSR set to: 0
 17504                           ;diskio.c: 531: }while(buff!=0X00);
 17505  002BBE  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 17506  002BC0  A4D8               	btfss	status,2,c
 17507  002BC2  D7F9               	goto	l9679
 17508                           
 17509                           ; BSR set to: 0
 17510                           ;diskio.c: 533: dummy_clocks(1);
 17511  002BC4  0E01               	movlw	1
 17512  002BC6  EC05  F028         	call	_dummy_clocks
 17513                           
 17514                           ;diskio.c: 534: escreve_SPI(0XFC);
 17515  002BCA  0EFC               	movlw	252
 17516  002BCC  EC27  F02A         	call	_escreve_SPI
 17517                           
 17518                           ;diskio.c: 535: for(j=0;j<512;j++)
 17519  002BD0  0E00               	movlw	0
 17520  002BD2  0100               	movlb	0	; () banked
 17521  002BD4  6F66               	movwf	(sdc_disk_write@j+1)& (0+255),b
 17522  002BD6  0E00               	movlw	0
 17523  002BD8  6F65               	movwf	sdc_disk_write@j& (0+255),b
 17524  002BDA                     l9693:
 17525                           
 17526                           ; BSR set to: 0
 17527                           ;diskio.c: 536: {;diskio.c: 537: escreve_SPI(*p_buff);
 17528  002BDA  C025  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 17529  002BDE  C026  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 17530  002BE2  50DF               	movf	indf2,w,c
 17531  002BE4  EC27  F02A         	call	_escreve_SPI
 17532                           
 17533                           ;diskio.c: 538: p_buff++;
 17534  002BE8  4A25               	infsnz	sdc_disk_write@p_buff^0,f,c
 17535  002BEA  2A26               	incf	(sdc_disk_write@p_buff+1)^0,f,c
 17536  002BEC  0100               	movlb	0	; () banked
 17537  002BEE  4B65               	infsnz	sdc_disk_write@j& (0+255),f,b
 17538  002BF0  2B66               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 17539                           
 17540                           ; BSR set to: 0
 17541  002BF2  BF66               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 17542  002BF4  D7F2               	goto	l9693
 17543  002BF6  0E02               	movlw	2
 17544  002BF8  5D66               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 17545  002BFA  A0D8               	btfss	status,0,c
 17546  002BFC  D7EE               	goto	l9693
 17547                           
 17548                           ; BSR set to: 0
 17549                           ;diskio.c: 539: };diskio.c: 540: leitura_SPI();
 17550  002BFE  EC50  F02A         	call	_leitura_SPI	;wreg free
 17551                           
 17552                           ;diskio.c: 541: leitura_SPI();
 17553  002C02  EC50  F02A         	call	_leitura_SPI	;wreg free
 17554                           
 17555                           ;diskio.c: 543: dummy_clocks(1);
 17556  002C06  0E01               	movlw	1
 17557  002C08  EC05  F028         	call	_dummy_clocks
 17558                           
 17559                           ;diskio.c: 544: escreve_SPI(0XFD);
 17560  002C0C  0EFD               	movlw	253
 17561  002C0E  EC27  F02A         	call	_escreve_SPI
 17562                           
 17563                           ;diskio.c: 546: }
 17564  002C12  D067               	goto	u11200
 17565  002C14                     l144:
 17566                           
 17567                           ; BSR set to: 0
 17568                           ;diskio.c: 547: else;diskio.c: 548: {;diskio.c: 549: LATCbits.LATC7 = 0;
 17569  002C14  9E8B               	bcf	139,7,c	;volatile
 17570                           
 17571                           ;diskio.c: 550: LATBbits.LATB5 = 0;
 17572  002C16  9A8A               	bcf	138,5,c	;volatile
 17573                           
 17574                           ; BSR set to: 0
 17575                           ;diskio.c: 551: dummy_clocks(10);
 17576  002C18  0E0A               	movlw	10
 17577  002C1A  EC05  F028         	call	_dummy_clocks
 17578                           
 17579                           ;diskio.c: 552: command(0X58, sector*512, 0X00);
 17580  002C1E  C027  F02C         	movff	sdc_disk_write@sector,??_sdc_disk_write
 17581  002C22  C028  F02D         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 17582  002C26  C029  F02E         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 17583  002C2A  C02A  F02F         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 17584  002C2E  0E09               	movlw	9
 17585  002C30                     u11175:
 17586  002C30  90D8               	bcf	status,0,c
 17587  002C32  362C               	rlcf	??_sdc_disk_write^0,f,c
 17588  002C34  362D               	rlcf	(??_sdc_disk_write+1)^0,f,c
 17589  002C36  362E               	rlcf	(??_sdc_disk_write+2)^0,f,c
 17590  002C38  362F               	rlcf	(??_sdc_disk_write+3)^0,f,c
 17591  002C3A  2EE8               	decfsz	wreg,f,c
 17592  002C3C  D7F9               	goto	u11175
 17593  002C3E  C02C  F01E         	movff	??_sdc_disk_write,command@arg
 17594  002C42  C02D  F01F         	movff	??_sdc_disk_write+1,command@arg+1
 17595  002C46  C02E  F020         	movff	??_sdc_disk_write+2,command@arg+2
 17596  002C4A  C02F  F021         	movff	??_sdc_disk_write+3,command@arg+3
 17597  002C4E  0E00               	movlw	0
 17598  002C50  6E22               	movwf	command@CRC^0,c
 17599  002C52  0E58               	movlw	88
 17600  002C54  EC3C  F025         	call	_command
 17601                           
 17602                           ;diskio.c: 553: proceed();
 17603  002C58  EC4A  F02A         	call	_proceed	;wreg free
 17604  002C5C                     l9711:
 17605                           
 17606                           ;diskio.c: 555: buff = response();
 17607  002C5C  EC44  F02A         	call	_response	;wreg free
 17608  002C60  0100               	movlb	0	; () banked
 17609  002C62  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 17610                           
 17611                           ; BSR set to: 0
 17612                           ;diskio.c: 556: }while(buff!=0X00);
 17613  002C64  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 17614  002C66  A4D8               	btfss	status,2,c
 17615  002C68  D7F9               	goto	l9711
 17616                           
 17617                           ; BSR set to: 0
 17618                           ;diskio.c: 558: LATBbits.LATB5 = 0;
 17619  002C6A  9A8A               	bcf	138,5,c	;volatile
 17620                           
 17621                           ;diskio.c: 559: LATCbits.LATC7 = 0;
 17622  002C6C  9E8B               	bcf	139,7,c	;volatile
 17623                           
 17624                           ; BSR set to: 0
 17625                           ;diskio.c: 560: dummy_clocks(1);
 17626  002C6E  0E01               	movlw	1
 17627  002C70  EC05  F028         	call	_dummy_clocks
 17628                           
 17629                           ;diskio.c: 561: escreve_SPI(0XFE);
 17630  002C74  0EFE               	movlw	254
 17631  002C76  EC27  F02A         	call	_escreve_SPI
 17632                           
 17633                           ;diskio.c: 562: for(j=0;j<512;j++)
 17634  002C7A  0E00               	movlw	0
 17635  002C7C  0100               	movlb	0	; () banked
 17636  002C7E  6F66               	movwf	(sdc_disk_write@j+1)& (0+255),b
 17637  002C80  0E00               	movlw	0
 17638  002C82  6F65               	movwf	sdc_disk_write@j& (0+255),b
 17639  002C84                     l9725:
 17640                           
 17641                           ; BSR set to: 0
 17642                           ;diskio.c: 563: {;diskio.c: 564: escreve_SPI(*p_buff);
 17643  002C84  C025  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 17644  002C88  C026  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 17645  002C8C  50DF               	movf	indf2,w,c
 17646  002C8E  EC27  F02A         	call	_escreve_SPI
 17647                           
 17648                           ;diskio.c: 565: p_buff++;
 17649  002C92  4A25               	infsnz	sdc_disk_write@p_buff^0,f,c
 17650  002C94  2A26               	incf	(sdc_disk_write@p_buff+1)^0,f,c
 17651  002C96  0100               	movlb	0	; () banked
 17652  002C98  4B65               	infsnz	sdc_disk_write@j& (0+255),f,b
 17653  002C9A  2B66               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 17654                           
 17655                           ; BSR set to: 0
 17656  002C9C  BF66               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 17657  002C9E  D7F2               	goto	l9725
 17658  002CA0  0E02               	movlw	2
 17659  002CA2  5D66               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 17660  002CA4  A0D8               	btfss	status,0,c
 17661  002CA6  D7EE               	goto	l9725
 17662                           
 17663                           ; BSR set to: 0
 17664                           ;diskio.c: 566: };diskio.c: 567: leitura_SPI();
 17665  002CA8  EC50  F02A         	call	_leitura_SPI	;wreg free
 17666                           
 17667                           ;diskio.c: 568: leitura_SPI();
 17668  002CAC  EC50  F02A         	call	_leitura_SPI	;wreg free
 17669                           
 17670                           ;diskio.c: 570: dummy_clocks(10);
 17671  002CB0  0E0A               	movlw	10
 17672  002CB2  EC05  F028         	call	_dummy_clocks
 17673                           
 17674                           ;diskio.c: 571: command(0X4D,0X00000000,0X00);
 17675  002CB6  0E00               	movlw	0
 17676  002CB8  6E1E               	movwf	command@arg^0,c
 17677  002CBA  0E00               	movlw	0
 17678  002CBC  6E1F               	movwf	(command@arg+1)^0,c
 17679  002CBE  0E00               	movlw	0
 17680  002CC0  6E20               	movwf	(command@arg+2)^0,c
 17681  002CC2  0E00               	movlw	0
 17682  002CC4  6E21               	movwf	(command@arg+3)^0,c
 17683  002CC6  0E00               	movlw	0
 17684  002CC8  6E22               	movwf	command@CRC^0,c
 17685  002CCA  0E4D               	movlw	77
 17686  002CCC  EC3C  F025         	call	_command
 17687                           
 17688                           ;diskio.c: 572: proceed();
 17689  002CD0  EC4A  F02A         	call	_proceed	;wreg free
 17690  002CD4                     l9741:
 17691                           
 17692                           ;diskio.c: 574: buff = response();
 17693  002CD4  EC44  F02A         	call	_response	;wreg free
 17694  002CD8  0100               	movlb	0	; () banked
 17695  002CDA  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 17696                           
 17697                           ; BSR set to: 0
 17698                           ;diskio.c: 575: }while(buff!=0X00 );
 17699  002CDC  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 17700  002CDE  A4D8               	btfss	status,2,c
 17701  002CE0  D7F9               	goto	l9741
 17702  002CE2                     u11200:
 17703                           
 17704                           ;diskio.c: 576: };diskio.c: 577: return res;
 17705  002CE2  0100               	movlb	0	; () banked
 17706  002CE4  5164               	movf	sdc_disk_write@res& (0+255),w,b
 17707                           
 17708                           ; BSR set to: 0
 17709  002CE6  0012               	return		;funcret
 17710  002CE8                     __end_of_sdc_disk_write:
 17711                           	callstack 0
 17712                           
 17713 ;; *************** function _disk_read *****************
 17714 ;; Defined at:
 17715 ;;		line 97 in file "bibliotecas/diskio.c"
 17716 ;; Parameters:    Size  Location     Type
 17717 ;;  pdrv            1    wreg     unsigned char 
 17718 ;;  buff            2    8[BANK0 ] PTR unsigned char 
 17719 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 17720 ;;  sector          4   10[BANK0 ] unsigned long 
 17721 ;;  count           1   14[BANK0 ] unsigned char 
 17722 ;; Auto vars:     Size  Location     Type
 17723 ;;  pdrv            1   15[BANK0 ] unsigned char 
 17724 ;;  result          2   16[BANK0 ] int 
 17725 ;;  res             1   18[BANK0 ] enum E25
 17726 ;; Return value:  Size  Location     Type
 17727 ;;                  1    wreg      enum E25
 17728 ;; Registers used:
 17729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17730 ;; Tracked objects:
 17731 ;;		On entry : 3F/0
 17732 ;;		On exit  : 3F/0
 17733 ;;		Unchanged: 0/0
 17734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17735 ;;      Params:         0       7       0       0       0       0       0       0       0
 17736 ;;      Locals:         0       4       0       0       0       0       0       0       0
 17737 ;;      Temps:          1       0       0       0       0       0       0       0       0
 17738 ;;      Totals:         1      11       0       0       0       0       0       0       0
 17739 ;;Total ram usage:       12 bytes
 17740 ;; Hardware stack levels used:    1
 17741 ;; Hardware stack levels required when called:    7
 17742 ;; This function calls:
 17743 ;;		_sdc_disk_read
 17744 ;; This function is called by:
 17745 ;;		_move_window
 17746 ;;		_check_fs
 17747 ;;		_f_read
 17748 ;; This function uses a non-reentrant model
 17749 ;;
 17750                           
 17751                           	psect	text88
 17752  00487A                     __ptext88:
 17753                           	callstack 0
 17754  00487A                     _disk_read:
 17755                           	callstack 15
 17756                           
 17757                           ; BSR set to: 0
 17758                           ;incstack = 0
 17759                           ;disk_read@pdrv stored from wreg
 17760  00487A  6F6F               	movwf	disk_read@pdrv& (0+255),b
 17761                           
 17762                           ;diskio.c: 104: DRESULT res;;diskio.c: 105: int result;;diskio.c: 107: switch (pdrv) {
 17763  00487C  D029               	goto	l9775
 17764  00487E                     l9751:
 17765                           
 17766                           ; BSR set to: 0
 17767                           ;diskio.c: 111: result = sdc_disk_read(buff, sector, count);
 17768  00487E  C068  F025         	movff	disk_read@buff,sdc_disk_read@p_buff
 17769  004882  C069  F026         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 17770  004886  C06A  F027         	movff	disk_read@sector,sdc_disk_read@sector
 17771  00488A  C06B  F028         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 17772  00488E  C06C  F029         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 17773  004892  C06D  F02A         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 17774  004896  C06E  F02B         	movff	disk_read@count,sdc_disk_read@count
 17775  00489A  EC17  F01C         	call	_sdc_disk_read	;wreg free
 17776  00489E  6E30               	movwf	??_disk_read^0,c
 17777  0048A0  5030               	movf	??_disk_read^0,w,c
 17778  0048A2  6F70               	movwf	disk_read@result& (0+255),b
 17779  0048A4  6B71               	clrf	(disk_read@result+1)& (0+255),b
 17780                           
 17781                           ; BSR set to: 0
 17782                           ;diskio.c: 115: res = result;
 17783  0048A6  C070  F072         	movff	disk_read@result,disk_read@res
 17784  0048AA                     l9755:
 17785                           
 17786                           ; BSR set to: 0
 17787                           ;diskio.c: 117: return res;
 17788  0048AA  5172               	movf	disk_read@res& (0+255),w,b
 17789  0048AC  0012               	return	
 17790  0048AE                     l9759:
 17791                           
 17792                           ; BSR set to: 0
 17793                           ;diskio.c: 122: result = sdc_disk_read(buff, sector, count);
 17794  0048AE  C068  F025         	movff	disk_read@buff,sdc_disk_read@p_buff
 17795  0048B2  C069  F026         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 17796  0048B6  C06A  F027         	movff	disk_read@sector,sdc_disk_read@sector
 17797  0048BA  C06B  F028         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 17798  0048BE  C06C  F029         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 17799  0048C2  C06D  F02A         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 17800  0048C6  C06E  F02B         	movff	disk_read@count,sdc_disk_read@count
 17801  0048CA  EC17  F01C         	call	_sdc_disk_read	;wreg free
 17802  0048CE  D7E7               	goto	L10
 17803  0048D0                     l9775:
 17804  0048D0  0100               	movlb	0	; () banked
 17805  0048D2  516F               	movf	disk_read@pdrv& (0+255),w,b
 17806                           
 17807                           ; Switch size 1, requested type "simple"
 17808                           ; Number of cases is 3, Range of values is 0 to 2
 17809                           ; switch strategies available:
 17810                           ; Name         Instructions Cycles
 17811                           ; simple_byte           10     6 (average)
 17812                           ;	Chosen strategy is simple_byte
 17813  0048D4  0A00               	xorlw	0	; case 0
 17814  0048D6  B4D8               	btfsc	status,2,c
 17815  0048D8  D7D2               	goto	l9751
 17816  0048DA  0A01               	xorlw	1	; case 1
 17817  0048DC  B4D8               	btfsc	status,2,c
 17818  0048DE  D7E7               	goto	l9759
 17819  0048E0  0A03               	xorlw	3	; case 2
 17820  0048E2  B4D8               	btfsc	status,2,c
 17821  0048E4  D7E2               	goto	l9755
 17822                           
 17823                           ; BSR set to: 0
 17824                           ;diskio.c: 141: return RES_PARERR;
 17825  0048E6  0E04               	movlw	4
 17826                           
 17827                           ; BSR set to: 0
 17828  0048E8  0012               	return		;funcret
 17829  0048EA                     __end_of_disk_read:
 17830                           	callstack 0
 17831                           
 17832 ;; *************** function _sdc_disk_read *****************
 17833 ;; Defined at:
 17834 ;;		line 439 in file "bibliotecas/diskio.c"
 17835 ;; Parameters:    Size  Location     Type
 17836 ;;  p_buff          2   36[COMRAM] PTR unsigned char 
 17837 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 17838 ;;  sector          4   38[COMRAM] unsigned long 
 17839 ;;  count           1   42[COMRAM] unsigned char 
 17840 ;; Auto vars:     Size  Location     Type
 17841 ;;  start_add       4    1[BANK0 ] unsigned long 
 17842 ;;  length          2    5[BANK0 ] int 
 17843 ;;  count1          2    0        int 
 17844 ;;  i               2    0        int 
 17845 ;;  buff            1    7[BANK0 ] unsigned char 
 17846 ;;  ptr             1    0        unsigned char 
 17847 ;;  res             1    0        enum E25
 17848 ;; Return value:  Size  Location     Type
 17849 ;;                  1    wreg      enum E25
 17850 ;; Registers used:
 17851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17852 ;; Tracked objects:
 17853 ;;		On entry : 0/0
 17854 ;;		On exit  : 3F/0
 17855 ;;		Unchanged: 0/0
 17856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17857 ;;      Params:         7       0       0       0       0       0       0       0       0
 17858 ;;      Locals:         0       8       0       0       0       0       0       0       0
 17859 ;;      Temps:          4       0       0       0       0       0       0       0       0
 17860 ;;      Totals:        11       8       0       0       0       0       0       0       0
 17861 ;;Total ram usage:       19 bytes
 17862 ;; Hardware stack levels used:    1
 17863 ;; Hardware stack levels required when called:    6
 17864 ;; This function calls:
 17865 ;;		_command
 17866 ;;		_dummy_clocks
 17867 ;;		_proceed
 17868 ;;		_response
 17869 ;; This function is called by:
 17870 ;;		_disk_read
 17871 ;; This function uses a non-reentrant model
 17872 ;;
 17873                           
 17874                           	psect	text89
 17875  00382E                     __ptext89:
 17876                           	callstack 0
 17877  00382E                     _sdc_disk_read:
 17878                           	callstack 15
 17879                           
 17880                           ;diskio.c: 448: unsigned long int start_add;;diskio.c: 449: int length,i, count1;;diskio
      +                          .c: 450: dummy_clocks(10);
 17881                           
 17882                           ; BSR set to: 0
 17883                           ;incstack = 0
 17884  00382E  0E0A               	movlw	10
 17885  003830  EC05  F028         	call	_dummy_clocks
 17886                           
 17887                           ;diskio.c: 452: start_add = sector*512;
 17888  003834  C027  F02C         	movff	sdc_disk_read@sector,??_sdc_disk_read
 17889  003838  C028  F02D         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 17890  00383C  C029  F02E         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 17891  003840  C02A  F02F         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 17892  003844  0E09               	movlw	9
 17893  003846                     u11055:
 17894  003846  90D8               	bcf	status,0,c
 17895  003848  362C               	rlcf	??_sdc_disk_read^0,f,c
 17896  00384A  362D               	rlcf	(??_sdc_disk_read+1)^0,f,c
 17897  00384C  362E               	rlcf	(??_sdc_disk_read+2)^0,f,c
 17898  00384E  362F               	rlcf	(??_sdc_disk_read+3)^0,f,c
 17899  003850  2EE8               	decfsz	wreg,f,c
 17900  003852  D7F9               	goto	u11055
 17901  003854  C02C  F061         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 17902  003858  C02D  F062         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 17903  00385C  C02E  F063         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 17904  003860  C02F  F064         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 17905                           
 17906                           ;diskio.c: 455: if(sector != 1)
 17907  003864  0427               	decf	sdc_disk_read@sector^0,w,c
 17908  003866  1028               	iorwf	(sdc_disk_read@sector+1)^0,w,c
 17909  003868  1029               	iorwf	(sdc_disk_read@sector+2)^0,w,c
 17910  00386A  102A               	iorwf	(sdc_disk_read@sector+3)^0,w,c
 17911  00386C  B4D8               	btfsc	status,2,c
 17912  00386E  D01C               	goto	l9621
 17913                           
 17914                           ;diskio.c: 456: {;diskio.c: 457: dummy_clocks(10);
 17915  003870  0E0A               	movlw	10
 17916  003872  EC05  F028         	call	_dummy_clocks
 17917                           
 17918                           ;diskio.c: 458: command(0X52,start_add ,0X00);
 17919  003876  C061  F01E         	movff	sdc_disk_read@start_add,command@arg
 17920  00387A  C062  F01F         	movff	sdc_disk_read@start_add+1,command@arg+1
 17921  00387E  C063  F020         	movff	sdc_disk_read@start_add+2,command@arg+2
 17922  003882  C064  F021         	movff	sdc_disk_read@start_add+3,command@arg+3
 17923  003886  0E00               	movlw	0
 17924  003888  6E22               	movwf	command@CRC^0,c
 17925  00388A  0E52               	movlw	82
 17926  00388C  EC3C  F025         	call	_command
 17927                           
 17928                           ;diskio.c: 459: proceed();
 17929  003890  EC4A  F02A         	call	_proceed	;wreg free
 17930  003894                     l9615:
 17931                           
 17932                           ;diskio.c: 461: buff = response();
 17933  003894  EC44  F02A         	call	_response	;wreg free
 17934  003898  0100               	movlb	0	; () banked
 17935  00389A  6F67               	movwf	sdc_disk_read@buff& (0+255),b
 17936                           
 17937                           ; BSR set to: 0
 17938                           ;diskio.c: 462: }while(buff!=0X00);
 17939  00389C  5167               	movf	sdc_disk_read@buff& (0+255),w,b
 17940  00389E  A4D8               	btfss	status,2,c
 17941  0038A0  D7F9               	goto	l9615
 17942  0038A2                     u11070:
 17943                           
 17944                           ; BSR set to: 0
 17945                           ;diskio.c: 463: proceed();
 17946  0038A2  EC4A  F02A         	call	_proceed	;wreg free
 17947                           
 17948                           ;diskio.c: 464: }
 17949  0038A6  D01E               	goto	l9633
 17950  0038A8                     l9621:
 17951                           
 17952                           ;diskio.c: 465: else;diskio.c: 466: {;diskio.c: 467: dummy_clocks(10);
 17953  0038A8  0E0A               	movlw	10
 17954  0038AA  EC05  F028         	call	_dummy_clocks
 17955                           
 17956                           ;diskio.c: 468: command(0X51,sector ,0X00);
 17957  0038AE  C027  F01E         	movff	sdc_disk_read@sector,command@arg
 17958  0038B2  C028  F01F         	movff	sdc_disk_read@sector+1,command@arg+1
 17959  0038B6  C029  F020         	movff	sdc_disk_read@sector+2,command@arg+2
 17960  0038BA  C02A  F021         	movff	sdc_disk_read@sector+3,command@arg+3
 17961  0038BE  0E00               	movlw	0
 17962  0038C0  6E22               	movwf	command@CRC^0,c
 17963  0038C2  0E51               	movlw	81
 17964  0038C4  EC3C  F025         	call	_command
 17965                           
 17966                           ;diskio.c: 469: proceed();
 17967  0038C8  EC4A  F02A         	call	_proceed	;wreg free
 17968  0038CC                     l9625:
 17969                           
 17970                           ;diskio.c: 471: buff = response();
 17971  0038CC  EC44  F02A         	call	_response	;wreg free
 17972  0038D0  0100               	movlb	0	; () banked
 17973  0038D2  6F67               	movwf	sdc_disk_read@buff& (0+255),b
 17974                           
 17975                           ; BSR set to: 0
 17976                           ;diskio.c: 472: }while(buff!=0X00);
 17977  0038D4  5167               	movf	sdc_disk_read@buff& (0+255),w,b
 17978  0038D6  B4D8               	btfsc	status,2,c
 17979  0038D8  D7E4               	goto	u11070
 17980  0038DA  D7F8               	goto	l9625
 17981  0038DC                     l9631:
 17982                           
 17983                           ; BSR set to: 0
 17984                           ;diskio.c: 479: {;diskio.c: 480: buff = response();
 17985  0038DC  EC44  F02A         	call	_response	;wreg free
 17986  0038E0  0100               	movlb	0	; () banked
 17987  0038E2  6F67               	movwf	sdc_disk_read@buff& (0+255),b
 17988  0038E4                     l9633:
 17989  0038E4  0EFE               	movlw	254
 17990  0038E6  0100               	movlb	0	; () banked
 17991  0038E8  1967               	xorwf	sdc_disk_read@buff& (0+255),w,b
 17992  0038EA  A4D8               	btfss	status,2,c
 17993  0038EC  D7F7               	goto	l9631
 17994                           
 17995                           ; BSR set to: 0
 17996                           ;diskio.c: 481: };diskio.c: 483: length = 0;
 17997  0038EE  0E00               	movlw	0
 17998  0038F0  6F66               	movwf	(sdc_disk_read@length+1)& (0+255),b
 17999  0038F2  0E00               	movlw	0
 18000  0038F4  6F65               	movwf	sdc_disk_read@length& (0+255),b
 18001                           
 18002                           ;diskio.c: 484: while ( length < 512 )
 18003  0038F6  D00C               	goto	l9641
 18004  0038F8                     l9637:
 18005                           
 18006                           ; BSR set to: 0
 18007                           ;diskio.c: 485: {;diskio.c: 486: p_buff[length] = response();
 18008  0038F8  5165               	movf	sdc_disk_read@length& (0+255),w,b
 18009  0038FA  2425               	addwf	sdc_disk_read@p_buff^0,w,c
 18010  0038FC  6ED9               	movwf	fsr2l,c
 18011  0038FE  5166               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 18012  003900  2026               	addwfc	(sdc_disk_read@p_buff+1)^0,w,c
 18013  003902  6EDA               	movwf	fsr2h,c
 18014  003904  EC44  F02A         	call	_response	;wreg free
 18015  003908  6EDF               	movwf	indf2,c
 18016                           
 18017                           ;diskio.c: 487: length++;
 18018  00390A  0100               	movlb	0	; () banked
 18019  00390C  4B65               	infsnz	sdc_disk_read@length& (0+255),f,b
 18020  00390E  2B66               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 18021  003910                     l9641:
 18022                           
 18023                           ; BSR set to: 0
 18024  003910  BF66               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 18025  003912  D7F2               	goto	l9637
 18026  003914  0E02               	movlw	2
 18027  003916  5D66               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 18028  003918  A0D8               	btfss	status,0,c
 18029  00391A  D7EE               	goto	l9637
 18030                           
 18031                           ; BSR set to: 0
 18032                           ;diskio.c: 491: dummy_clocks(10);
 18033                           
 18034                           ; BSR set to: 0
 18035  00391C  0E0A               	movlw	10
 18036  00391E  EC05  F028         	call	_dummy_clocks
 18037                           
 18038                           ;diskio.c: 493: command(0X4C,0X00000000,0X00);
 18039  003922  0E00               	movlw	0
 18040  003924  6E1E               	movwf	command@arg^0,c
 18041  003926  0E00               	movlw	0
 18042  003928  6E1F               	movwf	(command@arg+1)^0,c
 18043  00392A  0E00               	movlw	0
 18044  00392C  6E20               	movwf	(command@arg+2)^0,c
 18045  00392E  0E00               	movlw	0
 18046  003930  6E21               	movwf	(command@arg+3)^0,c
 18047  003932  0E00               	movlw	0
 18048  003934  6E22               	movwf	command@CRC^0,c
 18049  003936  0E4C               	movlw	76
 18050  003938  EC3C  F025         	call	_command
 18051                           
 18052                           ;diskio.c: 494: proceed();
 18053  00393C  EC4A  F02A         	call	_proceed	;wreg free
 18054  003940                     l9651:
 18055                           
 18056                           ;diskio.c: 496: buff = response();
 18057  003940  EC44  F02A         	call	_response	;wreg free
 18058  003944  0100               	movlb	0	; () banked
 18059  003946  6F67               	movwf	sdc_disk_read@buff& (0+255),b
 18060                           
 18061                           ; BSR set to: 0
 18062                           ;diskio.c: 497: }while(buff!=0xFF);
 18063  003948  2967               	incf	sdc_disk_read@buff& (0+255),w,b
 18064  00394A  A4D8               	btfss	status,2,c
 18065  00394C  D7F9               	goto	l9651
 18066                           
 18067                           ; BSR set to: 0
 18068                           ;diskio.c: 500: return RES_OK;
 18069                           
 18070                           ; BSR set to: 0
 18071  00394E  0E00               	movlw	0
 18072                           
 18073                           ; BSR set to: 0
 18074  003950  0012               	return		;funcret
 18075  003952                     __end_of_sdc_disk_read:
 18076                           	callstack 0
 18077                           
 18078 ;; *************** function _response *****************
 18079 ;; Defined at:
 18080 ;;		line 59 in file "bibliotecas/SDCard.c"
 18081 ;; Parameters:    Size  Location     Type
 18082 ;;		None
 18083 ;; Auto vars:     Size  Location     Type
 18084 ;;  buff            1   24[COMRAM] unsigned char 
 18085 ;; Return value:  Size  Location     Type
 18086 ;;                  1    wreg      unsigned char 
 18087 ;; Registers used:
 18088 ;;		wreg, status,2, cstack
 18089 ;; Tracked objects:
 18090 ;;		On entry : 0/0
 18091 ;;		On exit  : 0/0
 18092 ;;		Unchanged: 0/0
 18093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18094 ;;      Params:         0       0       0       0       0       0       0       0       0
 18095 ;;      Locals:         1       0       0       0       0       0       0       0       0
 18096 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18097 ;;      Totals:         1       0       0       0       0       0       0       0       0
 18098 ;;Total ram usage:        1 bytes
 18099 ;; Hardware stack levels used:    1
 18100 ;; Hardware stack levels required when called:    4
 18101 ;; This function calls:
 18102 ;;		_leitura_SPI
 18103 ;; This function is called by:
 18104 ;;		_sdc_reset
 18105 ;;		_sdc_disk_initialize
 18106 ;;		_sdc_disk_read
 18107 ;;		_sdc_disk_write
 18108 ;; This function uses a non-reentrant model
 18109 ;;
 18110                           
 18111                           	psect	text90
 18112  005488                     __ptext90:
 18113                           	callstack 0
 18114  005488                     _response:
 18115                           	callstack 16
 18116                           
 18117                           ;SDCard.c: 61: unsigned char buff;;SDCard.c: 62: LATBbits.LATB5 = 0;
 18118                           
 18119                           ; BSR set to: 0
 18120                           ;incstack = 0
 18121  005488  9A8A               	bcf	138,5,c	;volatile
 18122                           
 18123                           ;SDCard.c: 63: buff= leitura_SPI();
 18124  00548A  EC50  F02A         	call	_leitura_SPI	;wreg free
 18125  00548E  6E19               	movwf	response@buff^0,c
 18126                           
 18127                           ;SDCard.c: 64: return buff;
 18128  005490  5019               	movf	response@buff^0,w,c
 18129  005492  0012               	return		;funcret
 18130  005494                     __end_of_response:
 18131                           	callstack 0
 18132                           
 18133 ;; *************** function _proceed *****************
 18134 ;; Defined at:
 18135 ;;		line 92 in file "bibliotecas/SDCard.c"
 18136 ;; Parameters:    Size  Location     Type
 18137 ;;		None
 18138 ;; Auto vars:     Size  Location     Type
 18139 ;;		None
 18140 ;; Return value:  Size  Location     Type
 18141 ;;                  1    wreg      void 
 18142 ;; Registers used:
 18143 ;;		wreg, cstack
 18144 ;; Tracked objects:
 18145 ;;		On entry : 0/0
 18146 ;;		On exit  : 0/0
 18147 ;;		Unchanged: 0/0
 18148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18149 ;;      Params:         0       0       0       0       0       0       0       0       0
 18150 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18151 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18152 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18153 ;;Total ram usage:        0 bytes
 18154 ;; Hardware stack levels used:    1
 18155 ;; Hardware stack levels required when called:    4
 18156 ;; This function calls:
 18157 ;;		_escreve_SPI
 18158 ;; This function is called by:
 18159 ;;		_sdc_reset
 18160 ;;		_sdc_disk_initialize
 18161 ;;		_sdc_disk_read
 18162 ;;		_sdc_disk_write
 18163 ;; This function uses a non-reentrant model
 18164 ;;
 18165                           
 18166                           	psect	text91
 18167  005494                     __ptext91:
 18168                           	callstack 0
 18169  005494                     _proceed:
 18170                           	callstack 16
 18171                           
 18172                           ;SDCard.c: 94: LATBbits.LATB5 = 0;
 18173                           
 18174                           ;incstack = 0
 18175  005494  9A8A               	bcf	138,5,c	;volatile
 18176                           
 18177                           ;SDCard.c: 95: escreve_SPI(0xFF);
 18178  005496  0EFF               	movlw	255
 18179  005498  EC27  F02A         	call	_escreve_SPI
 18180                           
 18181                           ;SDCard.c: 96: LATBbits.LATB5 = 1;
 18182  00549C  8A8A               	bsf	138,5,c	;volatile
 18183  00549E  0012               	return		;funcret
 18184  0054A0                     __end_of_proceed:
 18185                           	callstack 0
 18186                           
 18187 ;; *************** function _command *****************
 18188 ;; Defined at:
 18189 ;;		line 125 in file "bibliotecas/SDCard.c"
 18190 ;; Parameters:    Size  Location     Type
 18191 ;;  CMD             1    wreg     unsigned char 
 18192 ;;  arg             4   29[COMRAM] unsigned long 
 18193 ;;  CRC             1   33[COMRAM] unsigned char 
 18194 ;; Auto vars:     Size  Location     Type
 18195 ;;  CMD             1   34[COMRAM] unsigned char 
 18196 ;;  argument        1   35[COMRAM] unsigned char 
 18197 ;; Return value:  Size  Location     Type
 18198 ;;                  1    wreg      void 
 18199 ;; Registers used:
 18200 ;;		wreg, status,2, status,0, cstack
 18201 ;; Tracked objects:
 18202 ;;		On entry : 0/0
 18203 ;;		On exit  : 0/0
 18204 ;;		Unchanged: 0/0
 18205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18206 ;;      Params:         5       0       0       0       0       0       0       0       0
 18207 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18208 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18209 ;;      Totals:         7       0       0       0       0       0       0       0       0
 18210 ;;Total ram usage:        7 bytes
 18211 ;; Hardware stack levels used:    1
 18212 ;; Hardware stack levels required when called:    5
 18213 ;; This function calls:
 18214 ;;		_dummy_clocks
 18215 ;;		_escreve_SPI
 18216 ;;		_wait_ready
 18217 ;; This function is called by:
 18218 ;;		_sdc_reset
 18219 ;;		_sdc_disk_initialize
 18220 ;;		_sdc_disk_read
 18221 ;;		_sdc_disk_write
 18222 ;; This function uses a non-reentrant model
 18223 ;;
 18224                           
 18225                           	psect	text92
 18226  004A78                     __ptext92:
 18227                           	callstack 0
 18228  004A78                     _command:
 18229                           	callstack 15
 18230                           
 18231                           ;incstack = 0
 18232                           ;command@CMD stored from wreg
 18233  004A78  6E23               	movwf	command@CMD^0,c
 18234                           
 18235                           ;SDCard.c: 127: unsigned char argument;;SDCard.c: 129: if (wait_ready() != 0xFF)
 18236  004A7A  EC3E  F028         	call	_wait_ready	;wreg free
 18237  004A7E  0AFF               	xorlw	255
 18238  004A80  A4D8               	btfss	status,2,c
 18239  004A82  D004               	goto	l584
 18240  004A84  D008               	goto	u11040
 18241  004A86                     l9565:
 18242                           
 18243                           ;SDCard.c: 132: {;SDCard.c: 133: dummy_clocks(10);
 18244  004A86  0E0A               	movlw	10
 18245  004A88  EC05  F028         	call	_dummy_clocks
 18246  004A8C                     l584:
 18247  004A8C  EC3E  F028         	call	_wait_ready	;wreg free
 18248  004A90  0AFF               	xorlw	255
 18249  004A92  A4D8               	btfss	status,2,c
 18250  004A94  D7F8               	goto	l9565
 18251  004A96                     u11040:
 18252                           
 18253                           ;SDCard.c: 134: };SDCard.c: 135: };SDCard.c: 136: escreve_SPI(0xFF);
 18254  004A96  0EFF               	movlw	255
 18255  004A98  EC27  F02A         	call	_escreve_SPI
 18256                           
 18257                           ;SDCard.c: 137: escreve_SPI(CMD);
 18258  004A9C  5023               	movf	command@CMD^0,w,c
 18259  004A9E  EC27  F02A         	call	_escreve_SPI
 18260                           
 18261                           ;SDCard.c: 138: argument = arg>>24;
 18262  004AA2  C021  F024         	movff	command@arg+3,command@argument
 18263                           
 18264                           ;SDCard.c: 139: escreve_SPI(argument);
 18265  004AA6  5024               	movf	command@argument^0,w,c
 18266  004AA8  EC27  F02A         	call	_escreve_SPI
 18267                           
 18268                           ;SDCard.c: 140: argument = arg>>16;
 18269  004AAC  C020  F024         	movff	command@arg+2,command@argument
 18270                           
 18271                           ;SDCard.c: 141: escreve_SPI(argument);
 18272  004AB0  5024               	movf	command@argument^0,w,c
 18273  004AB2  EC27  F02A         	call	_escreve_SPI
 18274                           
 18275                           ;SDCard.c: 142: argument = arg>>8;
 18276  004AB6  C01F  F024         	movff	command@arg+1,command@argument
 18277                           
 18278                           ;SDCard.c: 143: escreve_SPI(argument);
 18279  004ABA  5024               	movf	command@argument^0,w,c
 18280  004ABC  EC27  F02A         	call	_escreve_SPI
 18281                           
 18282                           ;SDCard.c: 144: argument = arg;
 18283  004AC0  C01E  F024         	movff	command@arg,command@argument
 18284                           
 18285                           ;SDCard.c: 145: escreve_SPI(argument);
 18286  004AC4  5024               	movf	command@argument^0,w,c
 18287  004AC6  EC27  F02A         	call	_escreve_SPI
 18288                           
 18289                           ;SDCard.c: 146: escreve_SPI(CRC);
 18290  004ACA  5022               	movf	command@CRC^0,w,c
 18291  004ACC  EC27  F02A         	call	_escreve_SPI
 18292  004AD0  0012               	return		;funcret
 18293  004AD2                     __end_of_command:
 18294                           	callstack 0
 18295                           
 18296 ;; *************** function _wait_ready *****************
 18297 ;; Defined at:
 18298 ;;		line 105 in file "bibliotecas/SDCard.c"
 18299 ;; Parameters:    Size  Location     Type
 18300 ;;		None
 18301 ;; Auto vars:     Size  Location     Type
 18302 ;;  msg            10    0        unsigned char [10]
 18303 ;;  timeout         4   24[COMRAM] unsigned long 
 18304 ;;  res             1   28[COMRAM] unsigned char 
 18305 ;; Return value:  Size  Location     Type
 18306 ;;                  1    wreg      unsigned char 
 18307 ;; Registers used:
 18308 ;;		wreg, status,2, status,0, cstack
 18309 ;; Tracked objects:
 18310 ;;		On entry : 0/0
 18311 ;;		On exit  : 0/0
 18312 ;;		Unchanged: 0/0
 18313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18314 ;;      Params:         0       0       0       0       0       0       0       0       0
 18315 ;;      Locals:         5       0       0       0       0       0       0       0       0
 18316 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18317 ;;      Totals:         5       0       0       0       0       0       0       0       0
 18318 ;;Total ram usage:        5 bytes
 18319 ;; Hardware stack levels used:    1
 18320 ;; Hardware stack levels required when called:    4
 18321 ;; This function calls:
 18322 ;;		_leitura_SPI
 18323 ;; This function is called by:
 18324 ;;		_command
 18325 ;; This function uses a non-reentrant model
 18326 ;;
 18327                           
 18328                           	psect	text93
 18329  00507C                     __ptext93:
 18330                           	callstack 0
 18331  00507C                     _wait_ready:
 18332                           	callstack 15
 18333                           
 18334                           ;SDCard.c: 107: BYTE res;;SDCard.c: 108: DWORD timeout = 0x7FFF;
 18335                           
 18336                           ;incstack = 0
 18337  00507C  0EFF               	movlw	255
 18338  00507E  6E19               	movwf	wait_ready@timeout^0,c
 18339  005080  0E7F               	movlw	127
 18340  005082  6E1A               	movwf	(wait_ready@timeout+1)^0,c
 18341  005084  0E00               	movlw	0
 18342  005086  6E1B               	movwf	(wait_ready@timeout+2)^0,c
 18343  005088  0E00               	movlw	0
 18344  00508A  6E1C               	movwf	(wait_ready@timeout+3)^0,c
 18345  00508C                     l9551:
 18346                           
 18347                           ;SDCard.c: 112: res = leitura_SPI();
 18348  00508C  EC50  F02A         	call	_leitura_SPI	;wreg free
 18349  005090  6E1D               	movwf	wait_ready@res^0,c
 18350                           
 18351                           ;SDCard.c: 113: while ((res != 0xFF) && (--timeout));
 18352  005092  281D               	incf	wait_ready@res^0,w,c
 18353  005094  B4D8               	btfsc	status,2,c
 18354  005096  D00B               	goto	u11020
 18355  005098  0619               	decf	wait_ready@timeout^0,f,c
 18356  00509A  0E00               	movlw	0
 18357  00509C  5A1A               	subwfb	(wait_ready@timeout+1)^0,f,c
 18358  00509E  5A1B               	subwfb	(wait_ready@timeout+2)^0,f,c
 18359  0050A0  5A1C               	subwfb	(wait_ready@timeout+3)^0,f,c
 18360  0050A2  5019               	movf	wait_ready@timeout^0,w,c
 18361  0050A4  101A               	iorwf	(wait_ready@timeout+1)^0,w,c
 18362  0050A6  101B               	iorwf	(wait_ready@timeout+2)^0,w,c
 18363  0050A8  101C               	iorwf	(wait_ready@timeout+3)^0,w,c
 18364  0050AA  A4D8               	btfss	status,2,c
 18365  0050AC  D7EF               	goto	l9551
 18366  0050AE                     u11020:
 18367                           
 18368                           ;SDCard.c: 115: return res;
 18369  0050AE  501D               	movf	wait_ready@res^0,w,c
 18370  0050B0  0012               	return		;funcret
 18371  0050B2                     __end_of_wait_ready:
 18372                           	callstack 0
 18373                           
 18374 ;; *************** function _escreve_SPI *****************
 18375 ;; Defined at:
 18376 ;;		line 97 in file "bibliotecas/SPI.c"
 18377 ;; Parameters:    Size  Location     Type
 18378 ;;  dado            1    wreg     unsigned char 
 18379 ;; Auto vars:     Size  Location     Type
 18380 ;;  dado            1   25[COMRAM] unsigned char 
 18381 ;;  TempVar         1    0        unsigned char 
 18382 ;; Return value:  Size  Location     Type
 18383 ;;                  1    wreg      void 
 18384 ;; Registers used:
 18385 ;;		wreg
 18386 ;; Tracked objects:
 18387 ;;		On entry : 0/0
 18388 ;;		On exit  : 0/0
 18389 ;;		Unchanged: 0/0
 18390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18391 ;;      Params:         0       0       0       0       0       0       0       0       0
 18392 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18393 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18394 ;;      Totals:         2       0       0       0       0       0       0       0       0
 18395 ;;Total ram usage:        2 bytes
 18396 ;; Hardware stack levels used:    1
 18397 ;; Hardware stack levels required when called:    3
 18398 ;; This function calls:
 18399 ;;		Nothing
 18400 ;; This function is called by:
 18401 ;;		_sdc_disk_write
 18402 ;;		_proceed
 18403 ;;		_command
 18404 ;; This function uses a non-reentrant model
 18405 ;;
 18406                           
 18407                           	psect	text94
 18408  00544E                     __ptext94:
 18409                           	callstack 0
 18410  00544E                     _escreve_SPI:
 18411                           	callstack 16
 18412                           
 18413                           ;incstack = 0
 18414                           ;escreve_SPI@dado stored from wreg
 18415  00544E  6E1A               	movwf	escreve_SPI@dado^0,c
 18416  005450  50C9               	movf	201,w,c	;volatile
 18417                           
 18418                           ;SPI.c: 101: PIR1bits.SSPIF = 0;
 18419  005452  969E               	bcf	158,3,c	;volatile
 18420                           
 18421                           ;SPI.c: 103: SSPBUF = dado;
 18422  005454  C01A  FFC9         	movff	escreve_SPI@dado,4041	;volatile
 18423  005458                     l671:
 18424  005458  B69E               	btfsc	158,3,c	;volatile
 18425  00545A  0012               	return	
 18426  00545C  D7FD               	goto	l671
 18427  00545E                     __end_of_escreve_SPI:
 18428                           	callstack 0
 18429                           
 18430 ;; *************** function _dummy_clocks *****************
 18431 ;; Defined at:
 18432 ;;		line 74 in file "bibliotecas/SDCard.c"
 18433 ;; Parameters:    Size  Location     Type
 18434 ;;  n               1    wreg     unsigned char 
 18435 ;; Auto vars:     Size  Location     Type
 18436 ;;  n               1   26[COMRAM] unsigned char 
 18437 ;;  i               2   27[COMRAM] unsigned int 
 18438 ;; Return value:  Size  Location     Type
 18439 ;;                  1    wreg      void 
 18440 ;; Registers used:
 18441 ;;		wreg, status,2, status,0, cstack
 18442 ;; Tracked objects:
 18443 ;;		On entry : 0/0
 18444 ;;		On exit  : 0/0
 18445 ;;		Unchanged: 0/0
 18446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18447 ;;      Params:         0       0       0       0       0       0       0       0       0
 18448 ;;      Locals:         3       0       0       0       0       0       0       0       0
 18449 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18450 ;;      Totals:         5       0       0       0       0       0       0       0       0
 18451 ;;Total ram usage:        5 bytes
 18452 ;; Hardware stack levels used:    1
 18453 ;; Hardware stack levels required when called:    4
 18454 ;; This function calls:
 18455 ;;		_leitura_SPI
 18456 ;; This function is called by:
 18457 ;;		_sdc_disk_initialize
 18458 ;;		_sdc_disk_read
 18459 ;;		_sdc_disk_write
 18460 ;;		_command
 18461 ;; This function uses a non-reentrant model
 18462 ;;
 18463                           
 18464                           	psect	text95
 18465  00500A                     __ptext95:
 18466                           	callstack 0
 18467  00500A                     _dummy_clocks:
 18468                           	callstack 16
 18469                           
 18470                           ;incstack = 0
 18471                           ;dummy_clocks@n stored from wreg
 18472  00500A  6E1B               	movwf	dummy_clocks@n^0,c
 18473                           
 18474                           ;SDCard.c: 76: unsigned int i;;SDCard.c: 77: _delay((unsigned long)((1)*(48000000/4000.0
      +                          )));
 18475  00500C  0E10               	movlw	16
 18476  00500E  6E19               	movwf	??_dummy_clocks^0,c
 18477  005010  0E94               	movlw	148
 18478  005012                     u15427:
 18479  005012  2EE8               	decfsz	wreg,f,c
 18480  005014  D7FE               	bra	u15427
 18481  005016  2E19               	decfsz	??_dummy_clocks^0,f,c
 18482  005018  D7FC               	bra	u15427
 18483  00501A  D000               	nop2	
 18484                           
 18485                           ;SDCard.c: 78: for(i=0;i<n;i++)
 18486  00501C  0E00               	movlw	0
 18487  00501E  6E1D               	movwf	(dummy_clocks@i+1)^0,c
 18488  005020  0E00               	movlw	0
 18489  005022  6E1C               	movwf	dummy_clocks@i^0,c
 18490  005024  D006               	goto	l9543
 18491  005026                     l568:
 18492                           
 18493                           ;SDCard.c: 79: {;SDCard.c: 80: LATBbits.LATB5 = 1;
 18494  005026  8A8A               	bsf	138,5,c	;volatile
 18495                           
 18496                           ;SDCard.c: 81: leitura_SPI();
 18497  005028  EC50  F02A         	call	_leitura_SPI	;wreg free
 18498                           
 18499                           ;SDCard.c: 82: LATBbits.LATB5 = 0;
 18500  00502C  9A8A               	bcf	138,5,c	;volatile
 18501  00502E  4A1C               	infsnz	dummy_clocks@i^0,f,c
 18502  005030  2A1D               	incf	(dummy_clocks@i+1)^0,f,c
 18503  005032                     l9543:
 18504  005032  501B               	movf	dummy_clocks@n^0,w,c
 18505  005034  6E19               	movwf	??_dummy_clocks^0,c
 18506  005036  6A1A               	clrf	(??_dummy_clocks+1)^0,c
 18507  005038  5019               	movf	??_dummy_clocks^0,w,c
 18508  00503A  5C1C               	subwf	dummy_clocks@i^0,w,c
 18509  00503C  501A               	movf	(??_dummy_clocks+1)^0,w,c
 18510  00503E  581D               	subwfb	(dummy_clocks@i+1)^0,w,c
 18511  005040  B0D8               	btfsc	status,0,c
 18512  005042  0012               	return	
 18513  005044  D7F0               	goto	l568
 18514  005046                     __end_of_dummy_clocks:
 18515                           	callstack 0
 18516                           
 18517 ;; *************** function _leitura_SPI *****************
 18518 ;; Defined at:
 18519 ;;		line 82 in file "bibliotecas/SPI.c"
 18520 ;; Parameters:    Size  Location     Type
 18521 ;;		None
 18522 ;; Auto vars:     Size  Location     Type
 18523 ;;		None
 18524 ;; Return value:  Size  Location     Type
 18525 ;;                  1    wreg      unsigned char 
 18526 ;; Registers used:
 18527 ;;		wreg, status,2
 18528 ;; Tracked objects:
 18529 ;;		On entry : 0/0
 18530 ;;		On exit  : 0/0
 18531 ;;		Unchanged: 0/0
 18532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18533 ;;      Params:         0       0       0       0       0       0       0       0       0
 18534 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18535 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18536 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18537 ;;Total ram usage:        0 bytes
 18538 ;; Hardware stack levels used:    1
 18539 ;; Hardware stack levels required when called:    3
 18540 ;; This function calls:
 18541 ;;		Nothing
 18542 ;; This function is called by:
 18543 ;;		_sdc_disk_write
 18544 ;;		_response
 18545 ;;		_dummy_clocks
 18546 ;;		_wait_ready
 18547 ;; This function uses a non-reentrant model
 18548 ;;
 18549                           
 18550                           	psect	text96
 18551  0054A0                     __ptext96:
 18552                           	callstack 0
 18553  0054A0                     _leitura_SPI:
 18554                           	callstack 16
 18555                           
 18556                           ;SPI.c: 84: SSPBUF = 0xFF;
 18557                           
 18558                           ;incstack = 0
 18559  0054A0  68C9               	setf	201,c	;volatile
 18560                           
 18561                           ;SPI.c: 85: SSPSTATbits.BF = 0;
 18562  0054A2  90C7               	bcf	199,0,c	;volatile
 18563  0054A4                     l665:
 18564  0054A4  A0C7               	btfss	199,0,c	;volatile
 18565  0054A6  D7FE               	goto	l665
 18566                           
 18567                           ;SPI.c: 87: return (SSPBUF);
 18568  0054A8  50C9               	movf	201,w,c	;volatile
 18569  0054AA  0012               	return		;funcret
 18570  0054AC                     __end_of_leitura_SPI:
 18571                           	callstack 0
 18572                           
 18573 ;; *************** function _disk_ioctl *****************
 18574 ;; Defined at:
 18575 ;;		line 198 in file "bibliotecas/diskio.c"
 18576 ;; Parameters:    Size  Location     Type
 18577 ;;  pdrv            1    wreg     unsigned char 
 18578 ;;  cmd             1   24[COMRAM] unsigned char 
 18579 ;;  buff            2   25[COMRAM] PTR void 
 18580 ;;		 -> NULL(0), 
 18581 ;; Auto vars:     Size  Location     Type
 18582 ;;  pdrv            1   27[COMRAM] unsigned char 
 18583 ;;  result          2    0        int 
 18584 ;;  res             1   28[COMRAM] enum E25
 18585 ;; Return value:  Size  Location     Type
 18586 ;;                  1    wreg      enum E25
 18587 ;; Registers used:
 18588 ;;		wreg, status,2, status,0
 18589 ;; Tracked objects:
 18590 ;;		On entry : 3F/0
 18591 ;;		On exit  : 0/0
 18592 ;;		Unchanged: 0/0
 18593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18594 ;;      Params:         3       0       0       0       0       0       0       0       0
 18595 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18596 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18597 ;;      Totals:         5       0       0       0       0       0       0       0       0
 18598 ;;Total ram usage:        5 bytes
 18599 ;; Hardware stack levels used:    1
 18600 ;; Hardware stack levels required when called:    3
 18601 ;; This function calls:
 18602 ;;		Nothing
 18603 ;; This function is called by:
 18604 ;;		_sync
 18605 ;; This function uses a non-reentrant model
 18606 ;;
 18607                           
 18608                           	psect	text97
 18609  00533E                     __ptext97:
 18610                           	callstack 0
 18611  00533E                     _disk_ioctl:
 18612                           	callstack 21
 18613                           
 18614                           ;incstack = 0
 18615                           ;disk_ioctl@pdrv stored from wreg
 18616  00533E  6E1C               	movwf	disk_ioctl@pdrv^0,c
 18617                           
 18618                           ;diskio.c: 204: DRESULT res;;diskio.c: 205: int result;;diskio.c: 207: switch (pdrv) {
 18619  005340  D002               	goto	l10461
 18620  005342                     l68:
 18621                           
 18622                           ;diskio.c: 212: return res;
 18623  005342  501D               	movf	disk_ioctl@res^0,w,c
 18624  005344  0012               	return	
 18625  005346                     l10461:
 18626  005346  501C               	movf	disk_ioctl@pdrv^0,w,c
 18627                           
 18628                           ; Switch size 1, requested type "simple"
 18629                           ; Number of cases is 3, Range of values is 0 to 2
 18630                           ; switch strategies available:
 18631                           ; Name         Instructions Cycles
 18632                           ; simple_byte           10     6 (average)
 18633                           ;	Chosen strategy is simple_byte
 18634  005348  0A00               	xorlw	0	; case 0
 18635  00534A  B4D8               	btfsc	status,2,c
 18636  00534C  D7FA               	goto	l68
 18637  00534E  0A01               	xorlw	1	; case 1
 18638  005350  B4D8               	btfsc	status,2,c
 18639  005352  D7F7               	goto	l68
 18640  005354  0A03               	xorlw	3	; case 2
 18641  005356  B4D8               	btfsc	status,2,c
 18642  005358  D7F4               	goto	l68
 18643                           
 18644                           ;diskio.c: 227: return RES_PARERR;
 18645  00535A  0E04               	movlw	4
 18646  00535C  0012               	return		;funcret
 18647  00535E                     __end_of_disk_ioctl:
 18648                           	callstack 0
 18649                           
 18650 ;; *************** function _get_fattime *****************
 18651 ;; Defined at:
 18652 ;;		line 810 in file "bibliotecas/tff.c"
 18653 ;; Parameters:    Size  Location     Type
 18654 ;;		None
 18655 ;; Auto vars:     Size  Location     Type
 18656 ;;  f_time         10   32[COMRAM] struct .
 18657 ;; Return value:  Size  Location     Type
 18658 ;;                  4   28[COMRAM] unsigned long 
 18659 ;; Registers used:
 18660 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 18661 ;; Tracked objects:
 18662 ;;		On entry : 3F/0
 18663 ;;		On exit  : 3F/0
 18664 ;;		Unchanged: 0/0
 18665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18666 ;;      Params:         4       0       0       0       0       0       0       0       0
 18667 ;;      Locals:        10       0       0       0       0       0       0       0       0
 18668 ;;      Temps:          0      38       0       0       0       0       0       0       0
 18669 ;;      Totals:        14      38       0       0       0       0       0       0       0
 18670 ;;Total ram usage:       52 bytes
 18671 ;; Hardware stack levels used:    1
 18672 ;; Hardware stack levels required when called:    4
 18673 ;; This function calls:
 18674 ;;		_GPSDay
 18675 ;;		_GPSHour
 18676 ;;		_GPSMinute
 18677 ;;		_GPSMonth
 18678 ;;		_GPSSecond
 18679 ;;		_GPSyear
 18680 ;; This function is called by:
 18681 ;;		_f_open
 18682 ;;		_f_sync
 18683 ;; This function uses a non-reentrant model
 18684 ;;
 18685                           
 18686                           	psect	text98
 18687  003490                     __ptext98:
 18688                           	callstack 0
 18689  003490                     _get_fattime:
 18690                           	callstack 22
 18691                           
 18692                           ; BSR set to: 0
 18693                           ;tff.c: 812: fat_time f_time;;tff.c: 814: f_time.hora = GPSHour() - 3;
 18694                           
 18695                           ;incstack = 0
 18696  003490  EC17  F029         	call	_GPSHour	;wreg free
 18697  003494  0EFD               	movlw	253
 18698  003496  2419               	addwf	?_GPSHour^0,w,c
 18699  003498  6E21               	movwf	get_fattime@f_time^0,c
 18700  00349A  0EFF               	movlw	255
 18701  00349C  201A               	addwfc	(?_GPSHour+1)^0,w,c
 18702  00349E  6E22               	movwf	(get_fattime@f_time+1)^0,c
 18703                           
 18704                           ;tff.c: 815: f_time.min = GPSMinute();
 18705  0034A0  EC6D  F029         	call	_GPSMinute	;wreg free
 18706  0034A4  C019  F023         	movff	?_GPSMinute,get_fattime@f_time+2
 18707  0034A8  C01A  F024         	movff	?_GPSMinute+1,get_fattime@f_time+3
 18708                           
 18709                           ;tff.c: 816: f_time.seg = GPSSecond();
 18710  0034AC  EC4B  F029         	call	_GPSSecond	;wreg free
 18711  0034B0  C019  F025         	movff	?_GPSSecond,get_fattime@f_time+4
 18712  0034B4  C01A  F026         	movff	?_GPSSecond+1,get_fattime@f_time+5
 18713                           
 18714                           ;tff.c: 817: f_time.ano = GPSyear() + 2000;
 18715  0034B8  EC3A  F029         	call	_GPSyear	;wreg free
 18716  0034BC  0ED0               	movlw	208
 18717  0034BE  2419               	addwf	?_GPSyear^0,w,c
 18718  0034C0  6E29               	movwf	(get_fattime@f_time+8)^0,c
 18719  0034C2  0E07               	movlw	7
 18720  0034C4  201A               	addwfc	(?_GPSyear+1)^0,w,c
 18721  0034C6  6E2A               	movwf	(get_fattime@f_time+9)^0,c
 18722                           
 18723                           ;tff.c: 818: f_time.mes = GPSMonth();
 18724  0034C8  EC5C  F029         	call	_GPSMonth	;wreg free
 18725  0034CC  5019               	movf	?_GPSMonth^0,w,c
 18726  0034CE  6E28               	movwf	(get_fattime@f_time+7)^0,c
 18727                           
 18728                           ;tff.c: 819: f_time.dia = GPSDay();
 18729  0034D0  EC7E  F029         	call	_GPSDay	;wreg free
 18730  0034D4  5019               	movf	?_GPSDay^0,w,c
 18731  0034D6  6E27               	movwf	(get_fattime@f_time+6)^0,c
 18732                           
 18733                           ; BSR set to: 1
 18734                           ;tff.c: 821: return (DWORD)(f_time.ano - 60) << 25 |;tff.c: 822: (DWORD)(f_time.mes) << 
      +                          21 |;tff.c: 823: (DWORD)(f_time.dia) << 16 |;tff.c: 824: (DWORD)(f_time.hora) << 11 |;tf
      +                          f.c: 825: (DWORD)(f_time.min) << 5 |;tff.c: 826: (DWORD)(f_time.seg) >> 1;
 18735  0034D8  90D8               	bcf	status,0,c
 18736  0034DA  3026               	rrcf	(get_fattime@f_time+5)^0,w,c
 18737  0034DC  0100               	movlb	0	; () banked
 18738  0034DE  6F61               	movwf	(??_get_fattime+1)& (0+255),b
 18739  0034E0  3025               	rrcf	(get_fattime@f_time+4)^0,w,c
 18740  0034E2  6F60               	movwf	??_get_fattime& (0+255),b
 18741  0034E4  5023               	movf	(get_fattime@f_time+2)^0,w,c
 18742  0034E6  6F62               	movwf	(??_get_fattime+2)& (0+255),b
 18743  0034E8  5024               	movf	(get_fattime@f_time+3)^0,w,c
 18744  0034EA  6F63               	movwf	(??_get_fattime+3)& (0+255),b
 18745  0034EC  6B64               	clrf	(??_get_fattime+4)& (0+255),b
 18746  0034EE  6B65               	clrf	(??_get_fattime+5)& (0+255),b
 18747  0034F0  0E05               	movlw	5
 18748  0034F2                     u12585:
 18749  0034F2  90D8               	bcf	status,0,c
 18750  0034F4  3762               	rlcf	(??_get_fattime+2)& (0+255),f,b
 18751  0034F6  3763               	rlcf	(??_get_fattime+3)& (0+255),f,b
 18752  0034F8  3764               	rlcf	(??_get_fattime+4)& (0+255),f,b
 18753  0034FA  3765               	rlcf	(??_get_fattime+5)& (0+255),f,b
 18754  0034FC  2EE8               	decfsz	wreg,f,c
 18755  0034FE  D7F9               	goto	u12585
 18756  003500  5021               	movf	get_fattime@f_time^0,w,c
 18757  003502  6F66               	movwf	(??_get_fattime+6)& (0+255),b
 18758  003504  5022               	movf	(get_fattime@f_time+1)^0,w,c
 18759  003506  6F67               	movwf	(??_get_fattime+7)& (0+255),b
 18760  003508  6B68               	clrf	(??_get_fattime+8)& (0+255),b
 18761  00350A  6B69               	clrf	(??_get_fattime+9)& (0+255),b
 18762  00350C  0E0B               	movlw	11
 18763  00350E                     u12595:
 18764  00350E  90D8               	bcf	status,0,c
 18765  003510  3766               	rlcf	(??_get_fattime+6)& (0+255),f,b
 18766  003512  3767               	rlcf	(??_get_fattime+7)& (0+255),f,b
 18767  003514  3768               	rlcf	(??_get_fattime+8)& (0+255),f,b
 18768  003516  3769               	rlcf	(??_get_fattime+9)& (0+255),f,b
 18769  003518  2EE8               	decfsz	wreg,f,c
 18770  00351A  D7F9               	goto	u12595
 18771  00351C  C027  F06A         	movff	get_fattime@f_time+6,??_get_fattime+10
 18772  003520  6B6B               	clrf	(??_get_fattime+11)& (0+255),b
 18773  003522  6B6C               	clrf	(??_get_fattime+12)& (0+255),b
 18774  003524  6B6D               	clrf	(??_get_fattime+13)& (0+255),b
 18775  003526  C06B  F06D         	movff	??_get_fattime+11,??_get_fattime+13
 18776  00352A  C06A  F06C         	movff	??_get_fattime+10,??_get_fattime+12
 18777  00352E  6B6B               	clrf	(??_get_fattime+11)& (0+255),b
 18778  003530  6B6A               	clrf	(??_get_fattime+10)& (0+255),b
 18779  003532  C028  F06E         	movff	get_fattime@f_time+7,??_get_fattime+14
 18780  003536  6B6F               	clrf	(??_get_fattime+15)& (0+255),b
 18781  003538  6B70               	clrf	(??_get_fattime+16)& (0+255),b
 18782  00353A  6B71               	clrf	(??_get_fattime+17)& (0+255),b
 18783  00353C  0E15               	movlw	21
 18784  00353E                     u12605:
 18785  00353E  90D8               	bcf	status,0,c
 18786  003540  376E               	rlcf	(??_get_fattime+14)& (0+255),f,b
 18787  003542  376F               	rlcf	(??_get_fattime+15)& (0+255),f,b
 18788  003544  3770               	rlcf	(??_get_fattime+16)& (0+255),f,b
 18789  003546  3771               	rlcf	(??_get_fattime+17)& (0+255),f,b
 18790  003548  2EE8               	decfsz	wreg,f,c
 18791  00354A  D7F9               	goto	u12605
 18792  00354C  0EC4               	movlw	196
 18793  00354E  2429               	addwf	(get_fattime@f_time+8)^0,w,c
 18794  003550  6F72               	movwf	(??_get_fattime+18)& (0+255),b
 18795  003552  0EFF               	movlw	255
 18796  003554  202A               	addwfc	(get_fattime@f_time+9)^0,w,c
 18797  003556  6F73               	movwf	(??_get_fattime+19)& (0+255),b
 18798  003558  6B74               	clrf	(??_get_fattime+20)& (0+255),b
 18799  00355A  6B75               	clrf	(??_get_fattime+21)& (0+255),b
 18800  00355C  0E19               	movlw	25
 18801  00355E                     u12615:
 18802  00355E  90D8               	bcf	status,0,c
 18803  003560  3772               	rlcf	(??_get_fattime+18)& (0+255),f,b
 18804  003562  3773               	rlcf	(??_get_fattime+19)& (0+255),f,b
 18805  003564  3774               	rlcf	(??_get_fattime+20)& (0+255),f,b
 18806  003566  3775               	rlcf	(??_get_fattime+21)& (0+255),f,b
 18807  003568  2EE8               	decfsz	wreg,f,c
 18808  00356A  D7F9               	goto	u12615
 18809  00356C  516E               	movf	(??_get_fattime+14)& (0+255),w,b
 18810  00356E  1172               	iorwf	(??_get_fattime+18)& (0+255),w,b
 18811  003570  6F76               	movwf	(??_get_fattime+22)& (0+255),b
 18812  003572  516F               	movf	(??_get_fattime+15)& (0+255),w,b
 18813  003574  1173               	iorwf	(??_get_fattime+19)& (0+255),w,b
 18814  003576  6F77               	movwf	(??_get_fattime+23)& (0+255),b
 18815  003578  5170               	movf	(??_get_fattime+16)& (0+255),w,b
 18816  00357A  1174               	iorwf	(??_get_fattime+20)& (0+255),w,b
 18817  00357C  6F78               	movwf	(??_get_fattime+24)& (0+255),b
 18818  00357E  5171               	movf	(??_get_fattime+17)& (0+255),w,b
 18819  003580  1175               	iorwf	(??_get_fattime+21)& (0+255),w,b
 18820  003582  6F79               	movwf	(??_get_fattime+25)& (0+255),b
 18821  003584  516A               	movf	(??_get_fattime+10)& (0+255),w,b
 18822  003586  1176               	iorwf	(??_get_fattime+22)& (0+255),w,b
 18823  003588  6F7A               	movwf	(??_get_fattime+26)& (0+255),b
 18824  00358A  516B               	movf	(??_get_fattime+11)& (0+255),w,b
 18825  00358C  1177               	iorwf	(??_get_fattime+23)& (0+255),w,b
 18826  00358E  6F7B               	movwf	(??_get_fattime+27)& (0+255),b
 18827  003590  516C               	movf	(??_get_fattime+12)& (0+255),w,b
 18828  003592  1178               	iorwf	(??_get_fattime+24)& (0+255),w,b
 18829  003594  6F7C               	movwf	(??_get_fattime+28)& (0+255),b
 18830  003596  516D               	movf	(??_get_fattime+13)& (0+255),w,b
 18831  003598  1179               	iorwf	(??_get_fattime+25)& (0+255),w,b
 18832  00359A  6F7D               	movwf	(??_get_fattime+29)& (0+255),b
 18833  00359C  5166               	movf	(??_get_fattime+6)& (0+255),w,b
 18834  00359E  117A               	iorwf	(??_get_fattime+26)& (0+255),w,b
 18835  0035A0  6F7E               	movwf	(??_get_fattime+30)& (0+255),b
 18836  0035A2  5167               	movf	(??_get_fattime+7)& (0+255),w,b
 18837  0035A4  117B               	iorwf	(??_get_fattime+27)& (0+255),w,b
 18838  0035A6  6F7F               	movwf	(??_get_fattime+31)& (0+255),b
 18839  0035A8  5168               	movf	(??_get_fattime+8)& (0+255),w,b
 18840  0035AA  117C               	iorwf	(??_get_fattime+28)& (0+255),w,b
 18841  0035AC  6F80               	movwf	(??_get_fattime+32)& (0+255),b
 18842  0035AE  5169               	movf	(??_get_fattime+9)& (0+255),w,b
 18843  0035B0  117D               	iorwf	(??_get_fattime+29)& (0+255),w,b
 18844  0035B2  6F81               	movwf	(??_get_fattime+33)& (0+255),b
 18845  0035B4  5162               	movf	(??_get_fattime+2)& (0+255),w,b
 18846  0035B6  117E               	iorwf	(??_get_fattime+30)& (0+255),w,b
 18847  0035B8  6F82               	movwf	(??_get_fattime+34)& (0+255),b
 18848  0035BA  5163               	movf	(??_get_fattime+3)& (0+255),w,b
 18849  0035BC  117F               	iorwf	(??_get_fattime+31)& (0+255),w,b
 18850  0035BE  6F83               	movwf	(??_get_fattime+35)& (0+255),b
 18851  0035C0  5164               	movf	(??_get_fattime+4)& (0+255),w,b
 18852  0035C2  1180               	iorwf	(??_get_fattime+32)& (0+255),w,b
 18853  0035C4  6F84               	movwf	(??_get_fattime+36)& (0+255),b
 18854  0035C6  5165               	movf	(??_get_fattime+5)& (0+255),w,b
 18855  0035C8  1181               	iorwf	(??_get_fattime+33)& (0+255),w,b
 18856  0035CA  6F85               	movwf	(??_get_fattime+37)& (0+255),b
 18857  0035CC  5160               	movf	??_get_fattime& (0+255),w,b
 18858  0035CE  1182               	iorwf	(??_get_fattime+34)& (0+255),w,b
 18859  0035D0  6E1D               	movwf	?_get_fattime^0,c
 18860  0035D2  5161               	movf	(??_get_fattime+1)& (0+255),w,b
 18861  0035D4  1183               	iorwf	(??_get_fattime+35)& (0+255),w,b
 18862  0035D6  6E1E               	movwf	(?_get_fattime+1)^0,c
 18863  0035D8  0E00               	movlw	0
 18864  0035DA  1184               	iorwf	(??_get_fattime+36)& (0+255),w,b
 18865  0035DC  6E1F               	movwf	(?_get_fattime+2)^0,c
 18866  0035DE  0E00               	movlw	0
 18867  0035E0  1185               	iorwf	(??_get_fattime+37)& (0+255),w,b
 18868  0035E2  6E20               	movwf	(?_get_fattime+3)^0,c
 18869                           
 18870                           ; BSR set to: 0
 18871  0035E4  0012               	return		;funcret
 18872  0035E6                     __end_of_get_fattime:
 18873                           	callstack 0
 18874                           
 18875 ;; *************** function _GPSyear *****************
 18876 ;; Defined at:
 18877 ;;		line 178 in file "bibliotecas/GPS.c"
 18878 ;; Parameters:    Size  Location     Type
 18879 ;;		None
 18880 ;; Auto vars:     Size  Location     Type
 18881 ;;		None
 18882 ;; Return value:  Size  Location     Type
 18883 ;;                  2   24[COMRAM] unsigned int 
 18884 ;; Registers used:
 18885 ;;		wreg, status,2, status,0, prodl, prodh
 18886 ;; Tracked objects:
 18887 ;;		On entry : 3F/1
 18888 ;;		On exit  : 3F/1
 18889 ;;		Unchanged: 0/0
 18890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18891 ;;      Params:         2       0       0       0       0       0       0       0       0
 18892 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18893 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18894 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18895 ;;Total ram usage:        4 bytes
 18896 ;; Hardware stack levels used:    1
 18897 ;; Hardware stack levels required when called:    3
 18898 ;; This function calls:
 18899 ;;		Nothing
 18900 ;; This function is called by:
 18901 ;;		_get_fattime
 18902 ;; This function uses a non-reentrant model
 18903 ;;
 18904                           
 18905                           	psect	text99
 18906  005274                     __ptext99:
 18907                           	callstack 0
 18908  005274                     _GPSyear:
 18909                           	callstack 22
 18910                           
 18911                           ; BSR set to: 1
 18912                           ;GPS.c: 180: return ((rawDate[4] - '0') * 10 + (rawDate[5] - '0'));
 18913                           
 18914                           ; BSR set to: 0
 18915                           ;incstack = 0
 18916  005274  51EB               	movf	(_rawDate+4)& (0+255),w,b
 18917  005276  0D0A               	mullw	10
 18918  005278  CFF3 F01B          	movff	prodl,??_GPSyear
 18919  00527C  CFF4 F01C          	movff	prodh,??_GPSyear+1
 18920  005280  51EC               	movf	(_rawDate+5)& (0+255),w,b
 18921  005282  261B               	addwf	??_GPSyear^0,f,c
 18922  005284  0E00               	movlw	0
 18923  005286  221C               	addwfc	(??_GPSyear+1)^0,f,c
 18924  005288  0EF0               	movlw	240
 18925  00528A  241B               	addwf	??_GPSyear^0,w,c
 18926  00528C  6E19               	movwf	?_GPSyear^0,c
 18927  00528E  0EFD               	movlw	253
 18928  005290  201C               	addwfc	(??_GPSyear+1)^0,w,c
 18929  005292  6E1A               	movwf	(?_GPSyear+1)^0,c
 18930                           
 18931                           ; BSR set to: 1
 18932  005294  0012               	return		;funcret
 18933  005296                     __end_of_GPSyear:
 18934                           	callstack 0
 18935                           
 18936 ;; *************** function _GPSSecond *****************
 18937 ;; Defined at:
 18938 ;;		line 157 in file "bibliotecas/GPS.c"
 18939 ;; Parameters:    Size  Location     Type
 18940 ;;		None
 18941 ;; Auto vars:     Size  Location     Type
 18942 ;;		None
 18943 ;; Return value:  Size  Location     Type
 18944 ;;                  2   24[COMRAM] unsigned int 
 18945 ;; Registers used:
 18946 ;;		wreg, status,2, status,0, prodl, prodh
 18947 ;; Tracked objects:
 18948 ;;		On entry : 3F/1
 18949 ;;		On exit  : 3F/1
 18950 ;;		Unchanged: 0/0
 18951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18952 ;;      Params:         2       0       0       0       0       0       0       0       0
 18953 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18954 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18955 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18956 ;;Total ram usage:        4 bytes
 18957 ;; Hardware stack levels used:    1
 18958 ;; Hardware stack levels required when called:    3
 18959 ;; This function calls:
 18960 ;;		Nothing
 18961 ;; This function is called by:
 18962 ;;		_get_fattime
 18963 ;; This function uses a non-reentrant model
 18964 ;;
 18965                           
 18966                           	psect	text100
 18967  005296                     __ptext100:
 18968                           	callstack 0
 18969  005296                     _GPSSecond:
 18970                           	callstack 22
 18971                           
 18972                           ; BSR set to: 1
 18973                           ;GPS.c: 159: return ((rawTime[4] - '0') * 10 + (rawTime[5] - '0'));
 18974                           
 18975                           ; BSR set to: 1
 18976                           ;incstack = 0
 18977  005296  51E0               	movf	(_rawTime+4)& (0+255),w,b
 18978  005298  0D0A               	mullw	10
 18979  00529A  CFF3 F01B          	movff	prodl,??_GPSSecond
 18980  00529E  CFF4 F01C          	movff	prodh,??_GPSSecond+1
 18981  0052A2  51E1               	movf	(_rawTime+5)& (0+255),w,b
 18982  0052A4  261B               	addwf	??_GPSSecond^0,f,c
 18983  0052A6  0E00               	movlw	0
 18984  0052A8  221C               	addwfc	(??_GPSSecond+1)^0,f,c
 18985  0052AA  0EF0               	movlw	240
 18986  0052AC  241B               	addwf	??_GPSSecond^0,w,c
 18987  0052AE  6E19               	movwf	?_GPSSecond^0,c
 18988  0052B0  0EFD               	movlw	253
 18989  0052B2  201C               	addwfc	(??_GPSSecond+1)^0,w,c
 18990  0052B4  6E1A               	movwf	(?_GPSSecond+1)^0,c
 18991                           
 18992                           ; BSR set to: 1
 18993  0052B6  0012               	return		;funcret
 18994  0052B8                     __end_of_GPSSecond:
 18995                           	callstack 0
 18996                           
 18997 ;; *************** function _GPSMonth *****************
 18998 ;; Defined at:
 18999 ;;		line 174 in file "bibliotecas/GPS.c"
 19000 ;; Parameters:    Size  Location     Type
 19001 ;;		None
 19002 ;; Auto vars:     Size  Location     Type
 19003 ;;		None
 19004 ;; Return value:  Size  Location     Type
 19005 ;;                  2   24[COMRAM] unsigned int 
 19006 ;; Registers used:
 19007 ;;		wreg, status,2, status,0, prodl, prodh
 19008 ;; Tracked objects:
 19009 ;;		On entry : 3F/1
 19010 ;;		On exit  : 3F/1
 19011 ;;		Unchanged: 0/0
 19012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19013 ;;      Params:         2       0       0       0       0       0       0       0       0
 19014 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19015 ;;      Temps:          2       0       0       0       0       0       0       0       0
 19016 ;;      Totals:         4       0       0       0       0       0       0       0       0
 19017 ;;Total ram usage:        4 bytes
 19018 ;; Hardware stack levels used:    1
 19019 ;; Hardware stack levels required when called:    3
 19020 ;; This function calls:
 19021 ;;		Nothing
 19022 ;; This function is called by:
 19023 ;;		_get_fattime
 19024 ;; This function uses a non-reentrant model
 19025 ;;
 19026                           
 19027                           	psect	text101
 19028  0052B8                     __ptext101:
 19029                           	callstack 0
 19030  0052B8                     _GPSMonth:
 19031                           	callstack 22
 19032                           
 19033                           ; BSR set to: 1
 19034                           ;GPS.c: 176: return ((rawDate[2] - '0') * 10 + (rawDate[3] - '0'));
 19035                           
 19036                           ; BSR set to: 1
 19037                           ;incstack = 0
 19038  0052B8  51E9               	movf	(_rawDate+2)& (0+255),w,b
 19039  0052BA  0D0A               	mullw	10
 19040  0052BC  CFF3 F01B          	movff	prodl,??_GPSMonth
 19041  0052C0  CFF4 F01C          	movff	prodh,??_GPSMonth+1
 19042  0052C4  51EA               	movf	(_rawDate+3)& (0+255),w,b
 19043  0052C6  261B               	addwf	??_GPSMonth^0,f,c
 19044  0052C8  0E00               	movlw	0
 19045  0052CA  221C               	addwfc	(??_GPSMonth+1)^0,f,c
 19046  0052CC  0EF0               	movlw	240
 19047  0052CE  241B               	addwf	??_GPSMonth^0,w,c
 19048  0052D0  6E19               	movwf	?_GPSMonth^0,c
 19049  0052D2  0EFD               	movlw	253
 19050  0052D4  201C               	addwfc	(??_GPSMonth+1)^0,w,c
 19051  0052D6  6E1A               	movwf	(?_GPSMonth+1)^0,c
 19052                           
 19053                           ; BSR set to: 1
 19054  0052D8  0012               	return		;funcret
 19055  0052DA                     __end_of_GPSMonth:
 19056                           	callstack 0
 19057                           
 19058 ;; *************** function _GPSMinute *****************
 19059 ;; Defined at:
 19060 ;;		line 161 in file "bibliotecas/GPS.c"
 19061 ;; Parameters:    Size  Location     Type
 19062 ;;		None
 19063 ;; Auto vars:     Size  Location     Type
 19064 ;;		None
 19065 ;; Return value:  Size  Location     Type
 19066 ;;                  2   24[COMRAM] unsigned int 
 19067 ;; Registers used:
 19068 ;;		wreg, status,2, status,0, prodl, prodh
 19069 ;; Tracked objects:
 19070 ;;		On entry : 3F/1
 19071 ;;		On exit  : 3F/1
 19072 ;;		Unchanged: 0/0
 19073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19074 ;;      Params:         2       0       0       0       0       0       0       0       0
 19075 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19076 ;;      Temps:          2       0       0       0       0       0       0       0       0
 19077 ;;      Totals:         4       0       0       0       0       0       0       0       0
 19078 ;;Total ram usage:        4 bytes
 19079 ;; Hardware stack levels used:    1
 19080 ;; Hardware stack levels required when called:    3
 19081 ;; This function calls:
 19082 ;;		Nothing
 19083 ;; This function is called by:
 19084 ;;		_get_fattime
 19085 ;; This function uses a non-reentrant model
 19086 ;;
 19087                           
 19088                           	psect	text102
 19089  0052DA                     __ptext102:
 19090                           	callstack 0
 19091  0052DA                     _GPSMinute:
 19092                           	callstack 22
 19093                           
 19094                           ; BSR set to: 1
 19095                           ;GPS.c: 163: return ((rawTime[2] - '0') * 10 + (rawTime[3] - '0'));
 19096                           
 19097                           ; BSR set to: 1
 19098                           ;incstack = 0
 19099  0052DA  51DE               	movf	(_rawTime+2)& (0+255),w,b
 19100  0052DC  0D0A               	mullw	10
 19101  0052DE  CFF3 F01B          	movff	prodl,??_GPSMinute
 19102  0052E2  CFF4 F01C          	movff	prodh,??_GPSMinute+1
 19103  0052E6  51DF               	movf	(_rawTime+3)& (0+255),w,b
 19104  0052E8  261B               	addwf	??_GPSMinute^0,f,c
 19105  0052EA  0E00               	movlw	0
 19106  0052EC  221C               	addwfc	(??_GPSMinute+1)^0,f,c
 19107  0052EE  0EF0               	movlw	240
 19108  0052F0  241B               	addwf	??_GPSMinute^0,w,c
 19109  0052F2  6E19               	movwf	?_GPSMinute^0,c
 19110  0052F4  0EFD               	movlw	253
 19111  0052F6  201C               	addwfc	(??_GPSMinute+1)^0,w,c
 19112  0052F8  6E1A               	movwf	(?_GPSMinute+1)^0,c
 19113                           
 19114                           ; BSR set to: 1
 19115  0052FA  0012               	return		;funcret
 19116  0052FC                     __end_of_GPSMinute:
 19117                           	callstack 0
 19118                           
 19119 ;; *************** function _GPSHour *****************
 19120 ;; Defined at:
 19121 ;;		line 165 in file "bibliotecas/GPS.c"
 19122 ;; Parameters:    Size  Location     Type
 19123 ;;		None
 19124 ;; Auto vars:     Size  Location     Type
 19125 ;;		None
 19126 ;; Return value:  Size  Location     Type
 19127 ;;                  2   24[COMRAM] unsigned int 
 19128 ;; Registers used:
 19129 ;;		wreg, status,2, status,0, prodl, prodh
 19130 ;; Tracked objects:
 19131 ;;		On entry : 3F/0
 19132 ;;		On exit  : 3F/1
 19133 ;;		Unchanged: 0/0
 19134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19135 ;;      Params:         2       0       0       0       0       0       0       0       0
 19136 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19137 ;;      Temps:          2       0       0       0       0       0       0       0       0
 19138 ;;      Totals:         4       0       0       0       0       0       0       0       0
 19139 ;;Total ram usage:        4 bytes
 19140 ;; Hardware stack levels used:    1
 19141 ;; Hardware stack levels required when called:    3
 19142 ;; This function calls:
 19143 ;;		Nothing
 19144 ;; This function is called by:
 19145 ;;		_get_fattime
 19146 ;; This function uses a non-reentrant model
 19147 ;;
 19148                           
 19149                           	psect	text103
 19150  00522E                     __ptext103:
 19151                           	callstack 0
 19152  00522E                     _GPSHour:
 19153                           	callstack 22
 19154                           
 19155                           ; BSR set to: 0
 19156                           ;GPS.c: 167: return (((rawTime[0] - '0') * 10 + (rawTime[1] - '0')));
 19157                           
 19158                           ; BSR set to: 1
 19159                           ;incstack = 0
 19160  00522E  0101               	movlb	1	; () banked
 19161  005230  51DC               	movf	_rawTime& (0+255),w,b
 19162  005232  0D0A               	mullw	10
 19163  005234  CFF3 F01B          	movff	prodl,??_GPSHour
 19164  005238  CFF4 F01C          	movff	prodh,??_GPSHour+1
 19165  00523C  51DD               	movf	(_rawTime+1)& (0+255),w,b
 19166  00523E  261B               	addwf	??_GPSHour^0,f,c
 19167  005240  0E00               	movlw	0
 19168  005242  221C               	addwfc	(??_GPSHour+1)^0,f,c
 19169  005244  0EF0               	movlw	240
 19170  005246  241B               	addwf	??_GPSHour^0,w,c
 19171  005248  6E19               	movwf	?_GPSHour^0,c
 19172  00524A  0EFD               	movlw	253
 19173  00524C  201C               	addwfc	(??_GPSHour+1)^0,w,c
 19174  00524E  6E1A               	movwf	(?_GPSHour+1)^0,c
 19175                           
 19176                           ; BSR set to: 1
 19177  005250  0012               	return		;funcret
 19178  005252                     __end_of_GPSHour:
 19179                           	callstack 0
 19180                           
 19181 ;; *************** function _GPSDay *****************
 19182 ;; Defined at:
 19183 ;;		line 170 in file "bibliotecas/GPS.c"
 19184 ;; Parameters:    Size  Location     Type
 19185 ;;		None
 19186 ;; Auto vars:     Size  Location     Type
 19187 ;;		None
 19188 ;; Return value:  Size  Location     Type
 19189 ;;                  2   24[COMRAM] unsigned int 
 19190 ;; Registers used:
 19191 ;;		wreg, status,2, status,0, prodl, prodh
 19192 ;; Tracked objects:
 19193 ;;		On entry : 3F/1
 19194 ;;		On exit  : 3F/1
 19195 ;;		Unchanged: 0/0
 19196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19197 ;;      Params:         2       0       0       0       0       0       0       0       0
 19198 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19199 ;;      Temps:          2       0       0       0       0       0       0       0       0
 19200 ;;      Totals:         4       0       0       0       0       0       0       0       0
 19201 ;;Total ram usage:        4 bytes
 19202 ;; Hardware stack levels used:    1
 19203 ;; Hardware stack levels required when called:    3
 19204 ;; This function calls:
 19205 ;;		Nothing
 19206 ;; This function is called by:
 19207 ;;		_get_fattime
 19208 ;; This function uses a non-reentrant model
 19209 ;;
 19210                           
 19211                           	psect	text104
 19212  0052FC                     __ptext104:
 19213                           	callstack 0
 19214  0052FC                     _GPSDay:
 19215                           	callstack 22
 19216                           
 19217                           ; BSR set to: 1
 19218                           ;GPS.c: 172: return ((rawDate[0] - '0') * 10 + (rawDate[1] - '0'));
 19219                           
 19220                           ; BSR set to: 1
 19221                           ;incstack = 0
 19222  0052FC  51E7               	movf	_rawDate& (0+255),w,b
 19223  0052FE  0D0A               	mullw	10
 19224  005300  CFF3 F01B          	movff	prodl,??_GPSDay
 19225  005304  CFF4 F01C          	movff	prodh,??_GPSDay+1
 19226  005308  51E8               	movf	(_rawDate+1)& (0+255),w,b
 19227  00530A  261B               	addwf	??_GPSDay^0,f,c
 19228  00530C  0E00               	movlw	0
 19229  00530E  221C               	addwfc	(??_GPSDay+1)^0,f,c
 19230  005310  0EF0               	movlw	240
 19231  005312  241B               	addwf	??_GPSDay^0,w,c
 19232  005314  6E19               	movwf	?_GPSDay^0,c
 19233  005316  0EFD               	movlw	253
 19234  005318  201C               	addwfc	(??_GPSDay+1)^0,w,c
 19235  00531A  6E1A               	movwf	(?_GPSDay+1)^0,c
 19236                           
 19237                           ; BSR set to: 1
 19238  00531C  0012               	return		;funcret
 19239  00531E                     __end_of_GPSDay:
 19240                           	callstack 0
 19241                           
 19242 ;; *************** function _desliga_SPI *****************
 19243 ;; Defined at:
 19244 ;;		line 68 in file "bibliotecas/SPI.c"
 19245 ;; Parameters:    Size  Location     Type
 19246 ;;		None
 19247 ;; Auto vars:     Size  Location     Type
 19248 ;;		None
 19249 ;; Return value:  Size  Location     Type
 19250 ;;                  1    wreg      void 
 19251 ;; Registers used:
 19252 ;;		wreg, status,2
 19253 ;; Tracked objects:
 19254 ;;		On entry : 0/0
 19255 ;;		On exit  : 0/0
 19256 ;;		Unchanged: 0/0
 19257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19258 ;;      Params:         0       0       0       0       0       0       0       0       0
 19259 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19260 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19261 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19262 ;;Total ram usage:        0 bytes
 19263 ;; Hardware stack levels used:    1
 19264 ;; Hardware stack levels required when called:    3
 19265 ;; This function calls:
 19266 ;;		Nothing
 19267 ;; This function is called by:
 19268 ;;		_escrita_sdcard
 19269 ;;		_recebe_dados_gps
 19270 ;; This function uses a non-reentrant model
 19271 ;;
 19272                           
 19273                           	psect	text105
 19274  0054AC                     __ptext105:
 19275                           	callstack 0
 19276  0054AC                     _desliga_SPI:
 19277                           	callstack 24
 19278                           
 19279                           ;SPI.c: 70: SSPSTAT = 0x00;
 19280                           
 19281                           ; BSR set to: 1
 19282                           ;incstack = 0
 19283  0054AC  0E00               	movlw	0
 19284  0054AE  6EC7               	movwf	199,c	;volatile
 19285                           
 19286                           ;SPI.c: 71: SSPCON1 = 0x00;
 19287  0054B0  0E00               	movlw	0
 19288  0054B2  6EC6               	movwf	198,c	;volatile
 19289                           
 19290                           ;SPI.c: 72: SSPCON1bits.SSPEN = 0;
 19291  0054B4  9AC6               	bcf	198,5,c	;volatile
 19292  0054B6  0012               	return		;funcret
 19293  0054B8                     __end_of_desliga_SPI:
 19294                           	callstack 0
 19295                           
 19296 ;; *************** function _dados_gps_to_sd *****************
 19297 ;; Defined at:
 19298 ;;		line 223 in file "bibliotecas/GPS.c"
 19299 ;; Parameters:    Size  Location     Type
 19300 ;;		None
 19301 ;; Auto vars:     Size  Location     Type
 19302 ;;		None
 19303 ;; Return value:  Size  Location     Type
 19304 ;;                  1    wreg      void 
 19305 ;; Registers used:
 19306 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19307 ;; Tracked objects:
 19308 ;;		On entry : 0/0
 19309 ;;		On exit  : 0/0
 19310 ;;		Unchanged: 0/0
 19311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19312 ;;      Params:         0       0       0       0       0       0       0       0       0
 19313 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19314 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19315 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19316 ;;Total ram usage:        0 bytes
 19317 ;; Hardware stack levels used:    1
 19318 ;; Hardware stack levels required when called:    5
 19319 ;; This function calls:
 19320 ;;		_monta_sd
 19321 ;; This function is called by:
 19322 ;;		_main
 19323 ;; This function uses a non-reentrant model
 19324 ;;
 19325                           
 19326                           	psect	text106
 19327  004B80                     __ptext106:
 19328                           	callstack 0
 19329  004B80                     _dados_gps_to_sd:
 19330                           	callstack 25
 19331                           
 19332                           ;GPS.c: 225: monta_sd(0, rawTime);
 19333                           
 19334                           ;incstack = 0
 19335  004B80  0EDC               	movlw	low _rawTime
 19336  004B82  6E1D               	movwf	monta_sd@dado^0,c
 19337  004B84  0E01               	movlw	high _rawTime
 19338  004B86  6E1E               	movwf	(monta_sd@dado+1)^0,c
 19339  004B88  0E00               	movlw	0
 19340  004B8A  ECB8  F013         	call	_monta_sd
 19341                           
 19342                           ;GPS.c: 226: monta_sd(1, rawDate);
 19343  004B8E  0EE7               	movlw	low _rawDate
 19344  004B90  6E1D               	movwf	monta_sd@dado^0,c
 19345  004B92  0E01               	movlw	high _rawDate
 19346  004B94  6E1E               	movwf	(monta_sd@dado+1)^0,c
 19347  004B96  0E01               	movlw	1
 19348  004B98  ECB8  F013         	call	_monta_sd
 19349                           
 19350                           ;GPS.c: 227: monta_sd(2, rawLatitude);
 19351  004B9C  0E80               	movlw	low _rawLatitude
 19352  004B9E  6E1D               	movwf	monta_sd@dado^0,c
 19353  004BA0  0E02               	movlw	high _rawLatitude
 19354  004BA2  6E1E               	movwf	(monta_sd@dado+1)^0,c
 19355  004BA4  0E02               	movlw	2
 19356  004BA6  ECB8  F013         	call	_monta_sd
 19357                           
 19358                           ;GPS.c: 228: monta_sd(3, rawLongitude);
 19359  004BAA  0E73               	movlw	low _rawLongitude
 19360  004BAC  6E1D               	movwf	monta_sd@dado^0,c
 19361  004BAE  0E02               	movlw	high _rawLongitude
 19362  004BB0  6E1E               	movwf	(monta_sd@dado+1)^0,c
 19363  004BB2  0E03               	movlw	3
 19364  004BB4  ECB8  F013         	call	_monta_sd
 19365                           
 19366                           ;GPS.c: 229: monta_sd(5, rawTime);
 19367  004BB8  0EDC               	movlw	low _rawTime
 19368  004BBA  6E1D               	movwf	monta_sd@dado^0,c
 19369  004BBC  0E01               	movlw	high _rawTime
 19370  004BBE  6E1E               	movwf	(monta_sd@dado+1)^0,c
 19371  004BC0  0E05               	movlw	5
 19372  004BC2  ECB8  F013         	call	_monta_sd
 19373                           
 19374                           ;GPS.c: 230: monta_sd(6, rawDate);
 19375  004BC6  0EE7               	movlw	low _rawDate
 19376  004BC8  6E1D               	movwf	monta_sd@dado^0,c
 19377  004BCA  0E01               	movlw	high _rawDate
 19378  004BCC  6E1E               	movwf	(monta_sd@dado+1)^0,c
 19379  004BCE  0E06               	movlw	6
 19380  004BD0  ECB8  F013         	call	_monta_sd
 19381  004BD4  0012               	return		;funcret
 19382  004BD6                     __end_of_dados_gps_to_sd:
 19383                           	callstack 0
 19384                           
 19385 ;; *************** function _monta_sd *****************
 19386 ;; Defined at:
 19387 ;;		line 298 in file "bibliotecas/SDCard.c"
 19388 ;; Parameters:    Size  Location     Type
 19389 ;;  index           1    wreg     unsigned char 
 19390 ;;  dado            2   28[COMRAM] PTR unsigned char 
 19391 ;;		 -> STR_26(7), STR_25(5), rawDate(7), rawLongitude(13), 
 19392 ;;		 -> rawLatitude(13), rawTime(11), 
 19393 ;; Auto vars:     Size  Location     Type
 19394 ;;  index           1   30[COMRAM] unsigned char 
 19395 ;;  i               1   32[COMRAM] unsigned char 
 19396 ;;  size            1   31[COMRAM] unsigned char 
 19397 ;; Return value:  Size  Location     Type
 19398 ;;                  1    wreg      void 
 19399 ;; Registers used:
 19400 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19401 ;; Tracked objects:
 19402 ;;		On entry : 0/1
 19403 ;;		On exit  : 0/0
 19404 ;;		Unchanged: 0/0
 19405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19406 ;;      Params:         2       0       0       0       0       0       0       0       0
 19407 ;;      Locals:         3       0       0       0       0       0       0       0       0
 19408 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19409 ;;      Totals:         5       0       0       0       0       0       0       0       0
 19410 ;;Total ram usage:        5 bytes
 19411 ;; Hardware stack levels used:    1
 19412 ;; Hardware stack levels required when called:    4
 19413 ;; This function calls:
 19414 ;;		_strlen
 19415 ;; This function is called by:
 19416 ;;		_dados_gps_to_sd
 19417 ;;		_verifica_fence_externo
 19418 ;; This function uses a non-reentrant model
 19419 ;;
 19420                           
 19421                           	psect	text107
 19422  002770                     __ptext107:
 19423                           	callstack 0
 19424  002770                     _monta_sd:
 19425                           	callstack 23
 19426                           
 19427                           ;incstack = 0
 19428                           ;monta_sd@index stored from wreg
 19429  002770  6E1F               	movwf	monta_sd@index^0,c
 19430                           
 19431                           ;SDCard.c: 300: unsigned char i, size;;SDCard.c: 301: size = strlen(dado);
 19432  002772  C01D  F019         	movff	monta_sd@dado,strlen@s
 19433  002776  C01E  F01A         	movff	monta_sd@dado+1,strlen@s+1
 19434  00277A  ECA4  F027         	call	_strlen	;wreg free
 19435  00277E  5019               	movf	?_strlen^0,w,c
 19436  002780  6E20               	movwf	monta_sd@size^0,c
 19437                           
 19438                           ;SDCard.c: 302: switch(index)
 19439  002782  D0E2               	goto	l7991
 19440  002784                     l7895:
 19441                           
 19442                           ;SDCard.c: 305: for(i=0; i<6;i++)
 19443  002784  0E00               	movlw	0
 19444  002786  6E21               	movwf	monta_sd@i^0,c
 19445  002788                     l7901:
 19446                           
 19447                           ;SDCard.c: 306: {;SDCard.c: 307: string_dado.hora[i] = *dado;
 19448  002788  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 19449  00278C  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 19450  002790  6AF8               	clrf	tblptru,c
 19451  002792  0E0E               	movlw	low (_string_dado+7)
 19452  002794  2421               	addwf	monta_sd@i^0,w,c
 19453  002796  6ED9               	movwf	fsr2l,c
 19454  002798  6ADA               	clrf	fsr2h,c
 19455  00279A  0E02               	movlw	high (_string_dado+7)
 19456  00279C  22DA               	addwfc	fsr2h,f,c
 19457  00279E  0E07               	movlw	(high __ramtop+-1)
 19458  0027A0  64F7               	cpfsgt	tblptrh,c
 19459  0027A2  D003               	bra	u8307
 19460  0027A4  0008               	tblrd		*
 19461  0027A6  50F5               	movf	tablat,w,c
 19462  0027A8  D005               	bra	u8300
 19463  0027AA                     u8307:
 19464  0027AA  CFF6 FFE1          	movff	tblptrl,fsr1l
 19465  0027AE  CFF7 FFE2          	movff	tblptrh,fsr1h
 19466  0027B2  50E7               	movf	indf1,w,c
 19467  0027B4                     u8300:
 19468  0027B4  6EDF               	movwf	indf2,c
 19469                           
 19470                           ;SDCard.c: 308: dado++;
 19471  0027B6  4A1D               	infsnz	monta_sd@dado^0,f,c
 19472  0027B8  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 19473  0027BA  2A21               	incf	monta_sd@i^0,f,c
 19474  0027BC  0E05               	movlw	5
 19475  0027BE  6421               	cpfsgt	monta_sd@i^0,c
 19476  0027C0  D7E3               	goto	l7901
 19477  0027C2  0012               	return	
 19478  0027C4                     l7909:
 19479                           
 19480                           ;SDCard.c: 313: for(i=0; i<6;i++)
 19481  0027C4  0E00               	movlw	0
 19482  0027C6  6E21               	movwf	monta_sd@i^0,c
 19483  0027C8                     l7915:
 19484                           
 19485                           ;SDCard.c: 314: {;SDCard.c: 315: string_dado.data[i] = *dado;
 19486  0027C8  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 19487  0027CC  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 19488  0027D0  6AF8               	clrf	tblptru,c
 19489  0027D2  0E07               	movlw	low _string_dado
 19490  0027D4  2421               	addwf	monta_sd@i^0,w,c
 19491  0027D6  6ED9               	movwf	fsr2l,c
 19492  0027D8  6ADA               	clrf	fsr2h,c
 19493  0027DA  0E02               	movlw	high _string_dado
 19494  0027DC  22DA               	addwfc	fsr2h,f,c
 19495  0027DE  0E07               	movlw	(high __ramtop+-1)
 19496  0027E0  64F7               	cpfsgt	tblptrh,c
 19497  0027E2  D003               	bra	u8327
 19498  0027E4  0008               	tblrd		*
 19499  0027E6  50F5               	movf	tablat,w,c
 19500  0027E8  D005               	bra	u8320
 19501  0027EA                     u8327:
 19502  0027EA  CFF6 FFE1          	movff	tblptrl,fsr1l
 19503  0027EE  CFF7 FFE2          	movff	tblptrh,fsr1h
 19504  0027F2  50E7               	movf	indf1,w,c
 19505  0027F4                     u8320:
 19506  0027F4  6EDF               	movwf	indf2,c
 19507                           
 19508                           ;SDCard.c: 316: dado++;
 19509  0027F6  4A1D               	infsnz	monta_sd@dado^0,f,c
 19510  0027F8  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 19511  0027FA  2A21               	incf	monta_sd@i^0,f,c
 19512  0027FC  0E05               	movlw	5
 19513  0027FE  6421               	cpfsgt	monta_sd@i^0,c
 19514  002800  D7E3               	goto	l7915
 19515  002802  0012               	return	
 19516  002804                     l7923:
 19517                           
 19518                           ;SDCard.c: 321: for(i=0; i<13;i++)
 19519  002804  0E00               	movlw	0
 19520  002806  6E21               	movwf	monta_sd@i^0,c
 19521  002808                     l7929:
 19522                           
 19523                           ;SDCard.c: 322: {;SDCard.c: 323: string_dado.lt[i] = *dado;
 19524  002808  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 19525  00280C  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 19526  002810  6AF8               	clrf	tblptru,c
 19527  002812  0E21               	movlw	low (_string_dado+26)
 19528  002814  2421               	addwf	monta_sd@i^0,w,c
 19529  002816  6ED9               	movwf	fsr2l,c
 19530  002818  6ADA               	clrf	fsr2h,c
 19531  00281A  0E02               	movlw	high (_string_dado+26)
 19532  00281C  22DA               	addwfc	fsr2h,f,c
 19533  00281E  0E07               	movlw	(high __ramtop+-1)
 19534  002820  64F7               	cpfsgt	tblptrh,c
 19535  002822  D003               	bra	u8347
 19536  002824  0008               	tblrd		*
 19537  002826  50F5               	movf	tablat,w,c
 19538  002828  D005               	bra	u8340
 19539  00282A                     u8347:
 19540  00282A  CFF6 FFE1          	movff	tblptrl,fsr1l
 19541  00282E  CFF7 FFE2          	movff	tblptrh,fsr1h
 19542  002832  50E7               	movf	indf1,w,c
 19543  002834                     u8340:
 19544  002834  6EDF               	movwf	indf2,c
 19545                           
 19546                           ;SDCard.c: 324: dado++;
 19547  002836  4A1D               	infsnz	monta_sd@dado^0,f,c
 19548  002838  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 19549  00283A  2A21               	incf	monta_sd@i^0,f,c
 19550  00283C  0E0C               	movlw	12
 19551  00283E  6421               	cpfsgt	monta_sd@i^0,c
 19552  002840  D7E3               	goto	l7929
 19553  002842  0012               	return	
 19554  002844                     l7937:
 19555                           
 19556                           ;SDCard.c: 329: for(i=0; i<13;i++)
 19557  002844  0E00               	movlw	0
 19558  002846  6E21               	movwf	monta_sd@i^0,c
 19559  002848                     l7943:
 19560                           
 19561                           ;SDCard.c: 330: {;SDCard.c: 331: string_dado.lo[i] = *dado;
 19562  002848  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 19563  00284C  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 19564  002850  6AF8               	clrf	tblptru,c
 19565  002852  0E2E               	movlw	low (_string_dado+39)
 19566  002854  2421               	addwf	monta_sd@i^0,w,c
 19567  002856  6ED9               	movwf	fsr2l,c
 19568  002858  6ADA               	clrf	fsr2h,c
 19569  00285A  0E02               	movlw	high (_string_dado+39)
 19570  00285C  22DA               	addwfc	fsr2h,f,c
 19571  00285E  0E07               	movlw	(high __ramtop+-1)
 19572  002860  64F7               	cpfsgt	tblptrh,c
 19573  002862  D003               	bra	u8367
 19574  002864  0008               	tblrd		*
 19575  002866  50F5               	movf	tablat,w,c
 19576  002868  D005               	bra	u8360
 19577  00286A                     u8367:
 19578  00286A  CFF6 FFE1          	movff	tblptrl,fsr1l
 19579  00286E  CFF7 FFE2          	movff	tblptrh,fsr1h
 19580  002872  50E7               	movf	indf1,w,c
 19581  002874                     u8360:
 19582  002874  6EDF               	movwf	indf2,c
 19583                           
 19584                           ;SDCard.c: 332: dado++;
 19585  002876  4A1D               	infsnz	monta_sd@dado^0,f,c
 19586  002878  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 19587  00287A  2A21               	incf	monta_sd@i^0,f,c
 19588  00287C  0E0C               	movlw	12
 19589  00287E  6421               	cpfsgt	monta_sd@i^0,c
 19590  002880  D7E3               	goto	l7943
 19591  002882  0012               	return	
 19592  002884                     l7951:
 19593                           
 19594                           ;SDCard.c: 337: for(i=0; i<size;i++)
 19595  002884  0E00               	movlw	0
 19596  002886  6E21               	movwf	monta_sd@i^0,c
 19597  002888  D01A               	goto	l7959
 19598  00288A                     l7953:
 19599                           
 19600                           ;SDCard.c: 338: {;SDCard.c: 339: string_dado.fence[i] = *dado;
 19601  00288A  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 19602  00288E  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 19603  002892  6AF8               	clrf	tblptru,c
 19604  002894  0E4A               	movlw	low (_string_dado+67)
 19605  002896  2421               	addwf	monta_sd@i^0,w,c
 19606  002898  6ED9               	movwf	fsr2l,c
 19607  00289A  6ADA               	clrf	fsr2h,c
 19608  00289C  0E02               	movlw	high (_string_dado+67)
 19609  00289E  22DA               	addwfc	fsr2h,f,c
 19610  0028A0  0E07               	movlw	(high __ramtop+-1)
 19611  0028A2  64F7               	cpfsgt	tblptrh,c
 19612  0028A4  D003               	bra	u8387
 19613  0028A6  0008               	tblrd		*
 19614  0028A8  50F5               	movf	tablat,w,c
 19615  0028AA  D005               	bra	u8380
 19616  0028AC                     u8387:
 19617  0028AC  CFF6 FFE1          	movff	tblptrl,fsr1l
 19618  0028B0  CFF7 FFE2          	movff	tblptrh,fsr1h
 19619  0028B4  50E7               	movf	indf1,w,c
 19620  0028B6                     u8380:
 19621  0028B6  6EDF               	movwf	indf2,c
 19622                           
 19623                           ;SDCard.c: 340: dado++;
 19624  0028B8  4A1D               	infsnz	monta_sd@dado^0,f,c
 19625  0028BA  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 19626  0028BC  2A21               	incf	monta_sd@i^0,f,c
 19627  0028BE                     l7959:
 19628  0028BE  5020               	movf	monta_sd@size^0,w,c
 19629  0028C0  5C21               	subwf	monta_sd@i^0,w,c
 19630  0028C2  B0D8               	btfsc	status,0,c
 19631  0028C4  0012               	return	
 19632  0028C6  D7E1               	goto	l7953
 19633  0028C8                     l7961:
 19634                           
 19635                           ;SDCard.c: 345: for(i=0; i<4;i++)
 19636  0028C8  0E00               	movlw	0
 19637  0028CA  6E21               	movwf	monta_sd@i^0,c
 19638  0028CC                     l7967:
 19639                           
 19640                           ;SDCard.c: 346: {;SDCard.c: 347: string_dado.hora_name[i] = *dado;
 19641  0028CC  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 19642  0028D0  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 19643  0028D4  6AF8               	clrf	tblptru,c
 19644  0028D6  0E1D               	movlw	low (_string_dado+22)
 19645  0028D8  2421               	addwf	monta_sd@i^0,w,c
 19646  0028DA  6ED9               	movwf	fsr2l,c
 19647  0028DC  6ADA               	clrf	fsr2h,c
 19648  0028DE  0E02               	movlw	high (_string_dado+22)
 19649  0028E0  22DA               	addwfc	fsr2h,f,c
 19650  0028E2  0E07               	movlw	(high __ramtop+-1)
 19651  0028E4  64F7               	cpfsgt	tblptrh,c
 19652  0028E6  D003               	bra	u8407
 19653  0028E8  0008               	tblrd		*
 19654  0028EA  50F5               	movf	tablat,w,c
 19655  0028EC  D005               	bra	u8400
 19656  0028EE                     u8407:
 19657  0028EE  CFF6 FFE1          	movff	tblptrl,fsr1l
 19658  0028F2  CFF7 FFE2          	movff	tblptrh,fsr1h
 19659  0028F6  50E7               	movf	indf1,w,c
 19660  0028F8                     u8400:
 19661  0028F8  6EDF               	movwf	indf2,c
 19662                           
 19663                           ;SDCard.c: 348: dado++;
 19664  0028FA  4A1D               	infsnz	monta_sd@dado^0,f,c
 19665  0028FC  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 19666  0028FE  2A21               	incf	monta_sd@i^0,f,c
 19667  002900  0E03               	movlw	3
 19668  002902  6421               	cpfsgt	monta_sd@i^0,c
 19669  002904  D7E3               	goto	l7967
 19670  002906  0012               	return	
 19671  002908                     l7975:
 19672                           
 19673                           ;SDCard.c: 354: for(i=0; i<4;i++)
 19674  002908  0E00               	movlw	0
 19675  00290A  6E21               	movwf	monta_sd@i^0,c
 19676  00290C                     l7981:
 19677                           
 19678                           ;SDCard.c: 355: {;SDCard.c: 356: string_dado.data_name[i] = *dado;
 19679  00290C  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 19680  002910  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 19681  002914  6AF8               	clrf	tblptru,c
 19682  002916  0E19               	movlw	low (_string_dado+18)
 19683  002918  2421               	addwf	monta_sd@i^0,w,c
 19684  00291A  6ED9               	movwf	fsr2l,c
 19685  00291C  6ADA               	clrf	fsr2h,c
 19686  00291E  0E02               	movlw	high (_string_dado+18)
 19687  002920  22DA               	addwfc	fsr2h,f,c
 19688  002922  0E07               	movlw	(high __ramtop+-1)
 19689  002924  64F7               	cpfsgt	tblptrh,c
 19690  002926  D003               	bra	u8427
 19691  002928  0008               	tblrd		*
 19692  00292A  50F5               	movf	tablat,w,c
 19693  00292C  D005               	bra	u8420
 19694  00292E                     u8427:
 19695  00292E  CFF6 FFE1          	movff	tblptrl,fsr1l
 19696  002932  CFF7 FFE2          	movff	tblptrh,fsr1h
 19697  002936  50E7               	movf	indf1,w,c
 19698  002938                     u8420:
 19699  002938  6EDF               	movwf	indf2,c
 19700                           
 19701                           ;SDCard.c: 357: dado++;
 19702  00293A  4A1D               	infsnz	monta_sd@dado^0,f,c
 19703  00293C  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 19704  00293E  2A21               	incf	monta_sd@i^0,f,c
 19705  002940  0E03               	movlw	3
 19706  002942  6421               	cpfsgt	monta_sd@i^0,c
 19707  002944  D7E3               	goto	l7981
 19708  002946  0012               	return	
 19709  002948                     l7991:
 19710  002948  501F               	movf	monta_sd@index^0,w,c
 19711                           
 19712                           ; Switch size 1, requested type "simple"
 19713                           ; Number of cases is 7, Range of values is 0 to 6
 19714                           ; switch strategies available:
 19715                           ; Name         Instructions Cycles
 19716                           ; simple_byte           22    12 (average)
 19717                           ;	Chosen strategy is simple_byte
 19718  00294A  0A00               	xorlw	0	; case 0
 19719  00294C  B4D8               	btfsc	status,2,c
 19720  00294E  D71A               	goto	l7895
 19721  002950  0A01               	xorlw	1	; case 1
 19722  002952  B4D8               	btfsc	status,2,c
 19723  002954  D737               	goto	l7909
 19724  002956  0A03               	xorlw	3	; case 2
 19725  002958  B4D8               	btfsc	status,2,c
 19726  00295A  D754               	goto	l7923
 19727  00295C  0A01               	xorlw	1	; case 3
 19728  00295E  B4D8               	btfsc	status,2,c
 19729  002960  D771               	goto	l7937
 19730  002962  0A07               	xorlw	7	; case 4
 19731  002964  B4D8               	btfsc	status,2,c
 19732  002966  D78E               	goto	l7951
 19733  002968  0A01               	xorlw	1	; case 5
 19734  00296A  B4D8               	btfsc	status,2,c
 19735  00296C  D7AD               	goto	l7961
 19736  00296E  0A03               	xorlw	3	; case 6
 19737  002970  A4D8               	btfss	status,2,c
 19738  002972  0012               	return	
 19739  002974  D7C9               	goto	l7975
 19740  002976                     __end_of_monta_sd:
 19741                           	callstack 0
 19742                           
 19743 ;; *************** function _strlen *****************
 19744 ;; Defined at:
 19745 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strlen.c"
 19746 ;; Parameters:    Size  Location     Type
 19747 ;;  s               2   24[COMRAM] PTR const unsigned char 
 19748 ;;		 -> STR_26(7), STR_25(5), rawDate(7), rawLongitude(13), 
 19749 ;;		 -> rawLatitude(13), rawTime(11), 
 19750 ;; Auto vars:     Size  Location     Type
 19751 ;;  cp              2   26[COMRAM] PTR const unsigned char 
 19752 ;;		 -> STR_26(7), STR_25(5), rawDate(7), rawLongitude(13), 
 19753 ;;		 -> rawLatitude(13), rawTime(11), 
 19754 ;; Return value:  Size  Location     Type
 19755 ;;                  2   24[COMRAM] unsigned int 
 19756 ;; Registers used:
 19757 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
 19758 ;; Tracked objects:
 19759 ;;		On entry : 0/1
 19760 ;;		On exit  : 0/0
 19761 ;;		Unchanged: 0/0
 19762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19763 ;;      Params:         2       0       0       0       0       0       0       0       0
 19764 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19765 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19766 ;;      Totals:         4       0       0       0       0       0       0       0       0
 19767 ;;Total ram usage:        4 bytes
 19768 ;; Hardware stack levels used:    1
 19769 ;; Hardware stack levels required when called:    3
 19770 ;; This function calls:
 19771 ;;		Nothing
 19772 ;; This function is called by:
 19773 ;;		_monta_sd
 19774 ;; This function uses a non-reentrant model
 19775 ;;
 19776                           
 19777                           	psect	text108
 19778  004F48                     __ptext108:
 19779                           	callstack 0
 19780  004F48                     _strlen:
 19781                           	callstack 23
 19782                           
 19783                           ;incstack = 0
 19784  004F48  C019  F01B         	movff	strlen@s,strlen@cp
 19785  004F4C  C01A  F01C         	movff	strlen@s+1,strlen@cp+1
 19786  004F50  D002               	goto	l7467
 19787  004F52                     l7465:
 19788  004F52  4A1B               	infsnz	strlen@cp^0,f,c
 19789  004F54  2A1C               	incf	(strlen@cp+1)^0,f,c
 19790  004F56                     l7467:
 19791  004F56  C01B  FFF6         	movff	strlen@cp,tblptrl
 19792  004F5A  C01C  FFF7         	movff	strlen@cp+1,tblptrh
 19793  004F5E  6AF8               	clrf	tblptru,c
 19794  004F60  0E07               	movlw	(high __ramtop+-1)
 19795  004F62  64F7               	cpfsgt	tblptrh,c
 19796  004F64  D003               	bra	u7557
 19797  004F66  0008               	tblrd		*
 19798  004F68  50F5               	movf	tablat,w,c
 19799  004F6A  D005               	bra	u7550
 19800  004F6C                     u7557:
 19801  004F6C  CFF6 FFE1          	movff	tblptrl,fsr1l
 19802  004F70  CFF7 FFE2          	movff	tblptrh,fsr1h
 19803  004F74  50E7               	movf	indf1,w,c
 19804  004F76                     u7550:
 19805  004F76  0900               	iorlw	0
 19806  004F78  A4D8               	btfss	status,2,c
 19807  004F7A  D7EB               	goto	l7465
 19808  004F7C  5019               	movf	strlen@s^0,w,c
 19809  004F7E  5C1B               	subwf	strlen@cp^0,w,c
 19810  004F80  6E19               	movwf	?_strlen^0,c
 19811  004F82  501A               	movf	(strlen@s+1)^0,w,c
 19812  004F84  581C               	subwfb	(strlen@cp+1)^0,w,c
 19813  004F86  6E1A               	movwf	(?_strlen+1)^0,c
 19814  004F88  0012               	return		;funcret
 19815  004F8A                     __end_of_strlen:
 19816                           	callstack 0
 19817                           
 19818 ;; *************** function _isr *****************
 19819 ;; Defined at:
 19820 ;;		line 110 in file "main.c"
 19821 ;; Parameters:    Size  Location     Type
 19822 ;;		None
 19823 ;; Auto vars:     Size  Location     Type
 19824 ;;  cont            1   23[COMRAM] unsigned char 
 19825 ;; Return value:  Size  Location     Type
 19826 ;;                  1    wreg      void 
 19827 ;; Registers used:
 19828 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19829 ;; Tracked objects:
 19830 ;;		On entry : 0/0
 19831 ;;		On exit  : 0/0
 19832 ;;		Unchanged: 0/0
 19833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19834 ;;      Params:         0       0       0       0       0       0       0       0       0
 19835 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19836 ;;      Temps:         12       0       0       0       0       0       0       0       0
 19837 ;;      Totals:        13       0       0       0       0       0       0       0       0
 19838 ;;Total ram usage:       13 bytes
 19839 ;; Hardware stack levels used:    1
 19840 ;; Hardware stack levels required when called:    2
 19841 ;; This function calls:
 19842 ;;		_GPSRead
 19843 ;;		_recebe_dado_uart
 19844 ;;		i2_write_timer_zero
 19845 ;; This function is called by:
 19846 ;;		Interrupt level 2
 19847 ;; This function uses a non-reentrant model
 19848 ;;
 19849                           
 19850                           	psect	intcode
 19851  000008                     __pintcode:
 19852                           	callstack 0
 19853  000008                     _isr:
 19854                           	callstack 13
 19855                           
 19856                           ;incstack = 0
 19857  000008  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19858  00000A  EDA9  F01C         	call	int_func,f	;refresh shadow registers
 19859                           
 19860                           	psect	intcode_body
 19861  003952                     __pintcode_body:
 19862                           	callstack 13
 19863  003952                     int_func:
 19864                           	callstack 13
 19865  003952  0006               	pop		; remove dummy address from shadow register refresh
 19866  003954  CFE1 F00E          	movff	fsr1l,??_isr+2
 19867  003958  CFE2 F00F          	movff	fsr1h,??_isr+3
 19868  00395C  CFD9 F010          	movff	fsr2l,??_isr+4
 19869  003960  CFDA F011          	movff	fsr2h,??_isr+5
 19870  003964  CFF3 F012          	movff	prodl,??_isr+6
 19871  003968  CFF4 F013          	movff	prodh,??_isr+7
 19872  00396C  CFF6 F014          	movff	tblptrl,??_isr+8
 19873  003970  CFF7 F015          	movff	tblptrh,??_isr+9
 19874  003974  CFF8 F016          	movff	tblptru,??_isr+10
 19875  003978  CFF5 F017          	movff	tablat,??_isr+11
 19876                           
 19877                           ;main.c: 112: unsigned char cont;;main.c: 115: if (PIE1bits.RCIE && PIR1bits.RCIF)
 19878  00397C  BA9D               	btfsc	157,5,c	;volatile
 19879  00397E  AA9E               	btfss	158,5,c	;volatile
 19880  003980  D014               	goto	i2l12317
 19881                           
 19882                           ;main.c: 116: {;main.c: 117: PIR1bits.RCIF = 0;
 19883  003982  9A9E               	bcf	158,5,c	;volatile
 19884                           
 19885                           ;main.c: 118: data_uart_recebe = recebe_dado_uart();
 19886  003984  EC16  F02A         	call	_recebe_dado_uart	;wreg free
 19887  003988  6E3F               	movwf	_data_uart_recebe^0,c
 19888                           
 19889                           ;main.c: 119: GPSRead(data_uart_recebe);
 19890  00398A  503F               	movf	_data_uart_recebe^0,w,c
 19891  00398C  EC92  F011         	call	_GPSRead
 19892                           
 19893                           ;main.c: 121: PORTBbits.RB2 = !PORTBbits.RB2;
 19894  003990  B481               	btfsc	129,2,c	;volatile
 19895  003992  D003               	goto	i2u1522_40
 19896  003994  6A0C               	clrf	??_isr^0,c
 19897  003996  2A0C               	incf	??_isr^0,f,c
 19898  003998  D001               	goto	i2u1523_48
 19899  00399A                     i2u1522_40:
 19900  00399A  6A0C               	clrf	??_isr^0,c
 19901  00399C                     i2u1523_48:
 19902  00399C  460C               	rlncf	??_isr^0,f,c
 19903  00399E  460C               	rlncf	??_isr^0,f,c
 19904  0039A0  5081               	movf	129,w,c	;volatile
 19905  0039A2  180C               	xorwf	??_isr^0,w,c
 19906  0039A4  0BFB               	andlw	-5
 19907  0039A6  180C               	xorwf	??_isr^0,w,c
 19908  0039A8  6E81               	movwf	129,c	;volatile
 19909  0039AA                     i2l12317:
 19910                           
 19911                           ;main.c: 122: };main.c: 125: unsigned char cont;;main.c: 127: if (TMR0IF && T0IF)
 19912  0039AA  B4F2               	btfsc	4082,2,c	;volatile
 19913  0039AC  A4F2               	btfss	4082,2,c	;volatile
 19914  0039AE  D043               	goto	i2l12355
 19915                           
 19916                           ;main.c: 128: {;main.c: 129: INTCONbits.TMR0IF = 0;
 19917  0039B0  94F2               	bcf	242,2,c	;volatile
 19918                           
 19919                           ;main.c: 130: sinaliza_int_timer = 1;
 19920  0039B2  0E01               	movlw	1
 19921  0039B4  6E3E               	movwf	_sinaliza_int_timer^0,c
 19922                           
 19923                           ;main.c: 132: for(cont= 0; cont<4;cont++)
 19924  0039B6  0E00               	movlw	0
 19925  0039B8  6E18               	movwf	isr@cont^0,c
 19926  0039BA                     i2l12329:
 19927                           
 19928                           ;main.c: 133: {;main.c: 134: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 19929  0039BA  5018               	movf	isr@cont^0,w,c
 19930  0039BC  0D02               	mullw	2
 19931  0039BE  0E00               	movlw	low _tempo_tarefa
 19932  0039C0  24F3               	addwf	243,w,c
 19933  0039C2  6ED9               	movwf	fsr2l,c
 19934  0039C4  0E01               	movlw	high _tempo_tarefa
 19935  0039C6  20F4               	addwfc	prodh,w,c
 19936  0039C8  6EDA               	movwf	fsr2h,c
 19937  0039CA  50DE               	movf	postinc2,w,c
 19938  0039CC  10DE               	iorwf	postinc2,w,c
 19939  0039CE  B4D8               	btfsc	status,2,c
 19940  0039D0  D00B               	goto	i2l12333
 19941  0039D2  5018               	movf	isr@cont^0,w,c
 19942  0039D4  0D02               	mullw	2
 19943  0039D6  0E00               	movlw	low _tempo_tarefa
 19944  0039D8  24F3               	addwf	243,w,c
 19945  0039DA  6ED9               	movwf	fsr2l,c
 19946  0039DC  0E01               	movlw	high _tempo_tarefa
 19947  0039DE  20F4               	addwfc	prodh,w,c
 19948  0039E0  6EDA               	movwf	fsr2h,c
 19949  0039E2  06DE               	decf	postinc2,f,c
 19950  0039E4  0E00               	movlw	0
 19951  0039E6  5ADD               	subwfb	postdec2,f,c
 19952  0039E8                     i2l12333:
 19953  0039E8  2A18               	incf	isr@cont^0,f,c
 19954  0039EA  0E03               	movlw	3
 19955  0039EC  6418               	cpfsgt	isr@cont^0,c
 19956  0039EE  D7E5               	goto	i2l12329
 19957                           
 19958                           ;main.c: 136: };main.c: 137: if(time_sd > 0) time_sd--;
 19959  0039F0  5037               	movf	_time_sd^0,w,c
 19960  0039F2  1038               	iorwf	(_time_sd+1)^0,w,c
 19961  0039F4  B4D8               	btfsc	status,2,c
 19962  0039F6  D003               	goto	i2l12341
 19963  0039F8  0637               	decf	_time_sd^0,f,c
 19964  0039FA  A0D8               	btfss	status,0,c
 19965  0039FC  0638               	decf	(_time_sd+1)^0,f,c
 19966  0039FE                     i2l12341:
 19967                           
 19968                           ;main.c: 138: if(time_atualizacao > 0) time_atualizacao--;
 19969  0039FE  5035               	movf	_time_atualizacao^0,w,c
 19970  003A00  1036               	iorwf	(_time_atualizacao+1)^0,w,c
 19971  003A02  B4D8               	btfsc	status,2,c
 19972  003A04  D003               	goto	i2l12345
 19973  003A06  0635               	decf	_time_atualizacao^0,f,c
 19974  003A08  A0D8               	btfss	status,0,c
 19975  003A0A  0636               	decf	(_time_atualizacao+1)^0,f,c
 19976  003A0C                     i2l12345:
 19977                           
 19978                           ;main.c: 140: if(tarefa_em_execucao == 1)
 19979  003A0C  043D               	decf	_tarefa_em_execucao^0,w,c	;volatile
 19980  003A0E  A4D8               	btfss	status,2,c
 19981  003A10  D00C               	goto	i2l12353
 19982                           
 19983                           ;main.c: 141: {;main.c: 142: timeout_tarefa--;
 19984  003A12  0101               	movlb	1	; () banked
 19985  003A14  072E               	decf	_timeout_tarefa& (0+255),f,b
 19986  003A16  A0D8               	btfss	status,0,c
 19987  003A18  072F               	decf	(_timeout_tarefa+1)& (0+255),f,b
 19988                           
 19989                           ; BSR set to: 1
 19990                           ;main.c: 143: if(!timeout_tarefa)
 19991  003A1A  512E               	movf	_timeout_tarefa& (0+255),w,b
 19992  003A1C  112F               	iorwf	(_timeout_tarefa+1)& (0+255),w,b
 19993  003A1E  A4D8               	btfss	status,2,c
 19994  003A20  D004               	goto	i2l12353
 19995                           
 19996                           ; BSR set to: 1
 19997                           ;main.c: 144: {;main.c: 146: PCLATH = 0;
 19998  003A22  0E00               	movlw	0
 19999  003A24  6EFA               	movwf	250,c	;volatile
 20000                           
 20001                           ;main.c: 147: PCL = 0;
 20002  003A26  0E00               	movlw	0
 20003  003A28  6EF9               	movwf	249,c	;volatile
 20004  003A2A                     i2l12353:
 20005                           
 20006                           ;main.c: 148: };main.c: 149: };main.c: 153: write_timer_zero(0x45);
 20007  003A2A  0E00               	movlw	0
 20008  003A2C  6E02               	movwf	(i2write_timer_zero@timer0+1)^0,c
 20009  003A2E  0E45               	movlw	69
 20010  003A30  6E01               	movwf	i2write_timer_zero@timer0^0,c
 20011  003A32  EC70  F02A         	call	i2_write_timer_zero	;wreg free
 20012  003A36                     i2l12355:
 20013                           
 20014                           ;main.c: 154: };main.c: 156: if (INT0IF && INT0IE)
 20015  003A36  B2F2               	btfsc	4082,1,c	;volatile
 20016  003A38  A8F2               	btfss	4082,4,c	;volatile
 20017  003A3A  D001               	goto	i2l1388
 20018                           
 20019                           ;main.c: 157: {;main.c: 158: INT0IF = 0;
 20020  003A3C  92F2               	bcf	4082,1,c	;volatile
 20021  003A3E                     i2l1388:
 20022  003A3E  C017  FFF5         	movff	??_isr+11,tablat
 20023  003A42  C016  FFF8         	movff	??_isr+10,tblptru
 20024  003A46  C015  FFF7         	movff	??_isr+9,tblptrh
 20025  003A4A  C014  FFF6         	movff	??_isr+8,tblptrl
 20026  003A4E  C013  FFF4         	movff	??_isr+7,prodh
 20027  003A52  C012  FFF3         	movff	??_isr+6,prodl
 20028  003A56  C011  FFDA         	movff	??_isr+5,fsr2h
 20029  003A5A  C010  FFD9         	movff	??_isr+4,fsr2l
 20030  003A5E  C00F  FFE2         	movff	??_isr+3,fsr1h
 20031  003A62  C00E  FFE1         	movff	??_isr+2,fsr1l
 20032  003A66  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20033  003A68  0011               	retfie		f
 20034  003A6A                     __end_of_isr:
 20035                           	callstack 0
 20036                           
 20037 ;; *************** function i2_write_timer_zero *****************
 20038 ;; Defined at:
 20039 ;;		line 134 in file "bibliotecas/hardware.c"
 20040 ;; Parameters:    Size  Location     Type
 20041 ;;  timer0          2    0[COMRAM] unsigned int 
 20042 ;; Auto vars:     Size  Location     Type
 20043 ;;		None
 20044 ;; Return value:  Size  Location     Type
 20045 ;;                  1    wreg      void 
 20046 ;; Registers used:
 20047 ;;		None
 20048 ;; Tracked objects:
 20049 ;;		On entry : 0/0
 20050 ;;		On exit  : 0/0
 20051 ;;		Unchanged: 0/0
 20052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20053 ;;      Params:         2       0       0       0       0       0       0       0       0
 20054 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20055 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20056 ;;      Totals:         2       0       0       0       0       0       0       0       0
 20057 ;;Total ram usage:        2 bytes
 20058 ;; Hardware stack levels used:    1
 20059 ;; This function calls:
 20060 ;;		Nothing
 20061 ;; This function is called by:
 20062 ;;		_isr
 20063 ;; This function uses a non-reentrant model
 20064 ;;
 20065                           
 20066                           	psect	text110
 20067  0054E0                     __ptext110:
 20068                           	callstack 0
 20069  0054E0                     i2_write_timer_zero:
 20070                           	callstack 14
 20071                           
 20072                           ;hardware.c: 142: TMR0 = timer0;
 20073                           
 20074                           ;incstack = 0
 20075  0054E0  C001  FFD6         	movff	i2write_timer_zero@timer0,4054	;volatile
 20076  0054E4  C002  FFD7         	movff	i2write_timer_zero@timer0+1,4055	;volatile
 20077  0054E8  0012               	return		;funcret
 20078  0054EA                     __end_ofi2_write_timer_zero:
 20079                           	callstack 0
 20080                           
 20081 ;; *************** function _recebe_dado_uart *****************
 20082 ;; Defined at:
 20083 ;;		line 138 in file "bibliotecas/uart.c"
 20084 ;; Parameters:    Size  Location     Type
 20085 ;;		None
 20086 ;; Auto vars:     Size  Location     Type
 20087 ;;		None
 20088 ;; Return value:  Size  Location     Type
 20089 ;;                  1    wreg      unsigned char 
 20090 ;; Registers used:
 20091 ;;		wreg, status,2
 20092 ;; Tracked objects:
 20093 ;;		On entry : 0/0
 20094 ;;		On exit  : 0/0
 20095 ;;		Unchanged: 0/0
 20096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20097 ;;      Params:         0       0       0       0       0       0       0       0       0
 20098 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20099 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20100 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20101 ;;Total ram usage:        0 bytes
 20102 ;; Hardware stack levels used:    1
 20103 ;; This function calls:
 20104 ;;		Nothing
 20105 ;; This function is called by:
 20106 ;;		_isr
 20107 ;; This function uses a non-reentrant model
 20108 ;;
 20109                           
 20110                           	psect	text111
 20111  00542C                     __ptext111:
 20112                           	callstack 0
 20113  00542C                     _recebe_dado_uart:
 20114                           	callstack 14
 20115                           
 20116                           ;uart.c: 140: while(RCIF==0);
 20117                           
 20118                           ;incstack = 0
 20119  00542C  AA9E               	btfss	3998,5,c	;volatile
 20120  00542E  D7FE               	goto	_recebe_dado_uart
 20121                           
 20122                           ;uart.c: 141: if(RCSTAbits.OERR)
 20123  005430  A2AB               	btfss	171,1,c	;volatile
 20124  005432  D003               	goto	i2l9387
 20125                           
 20126                           ;uart.c: 142: {;uart.c: 143: CREN = 0;
 20127  005434  98AB               	bcf	4011,4,c	;volatile
 20128                           
 20129                           ;uart.c: 144: __nop();
 20130  005436  F000               	nop	
 20131                           
 20132                           ;uart.c: 145: CREN=1;
 20133  005438  88AB               	bsf	4011,4,c	;volatile
 20134  00543A                     i2l9387:
 20135                           
 20136                           ;uart.c: 146: };uart.c: 147: return(RCREG);
 20137  00543A  50AE               	movf	174,w,c	;volatile
 20138  00543C  0012               	return		;funcret
 20139  00543E                     __end_of_recebe_dado_uart:
 20140                           	callstack 0
 20141                           
 20142 ;; *************** function _GPSRead *****************
 20143 ;; Defined at:
 20144 ;;		line 49 in file "bibliotecas/GPS.c"
 20145 ;; Parameters:    Size  Location     Type
 20146 ;;  buff            1    wreg     unsigned char 
 20147 ;; Auto vars:     Size  Location     Type
 20148 ;;  buff            1    9[COMRAM] unsigned char 
 20149 ;;  c               1   10[COMRAM] unsigned char 
 20150 ;; Return value:  Size  Location     Type
 20151 ;;                  2  348[None  ] int 
 20152 ;; Registers used:
 20153 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20154 ;; Tracked objects:
 20155 ;;		On entry : 0/0
 20156 ;;		On exit  : 0/0
 20157 ;;		Unchanged: 0/0
 20158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20159 ;;      Params:         0       0       0       0       0       0       0       0       0
 20160 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20161 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20162 ;;      Totals:         2       0       0       0       0       0       0       0       0
 20163 ;;Total ram usage:        2 bytes
 20164 ;; Hardware stack levels used:    1
 20165 ;; Hardware stack levels required when called:    1
 20166 ;; This function calls:
 20167 ;;		_strcmp
 20168 ;;		_stringcpy
 20169 ;; This function is called by:
 20170 ;;		_isr
 20171 ;; This function uses a non-reentrant model
 20172 ;;
 20173                           
 20174                           	psect	text112
 20175  002324                     __ptext112:
 20176                           	callstack 0
 20177  002324                     _GPSRead:
 20178                           	callstack 13
 20179                           
 20180                           ;incstack = 0
 20181                           ;GPSRead@buff stored from wreg
 20182  002324  6E0A               	movwf	GPSRead@buff^0,c
 20183                           
 20184                           ;GPS.c: 51: uint8_t c = buff;
 20185  002326  C00A  F00B         	movff	GPSRead@buff,GPSRead@c
 20186                           
 20187                           ;GPS.c: 53: switch(c) {
 20188  00232A  D106               	goto	i2l12159
 20189  00232C                     i2l12055:
 20190                           
 20191                           ;GPS.c: 55: if(SentenceType == 1)
 20192  00232C  0444               	decf	_SentenceType^0,w,c
 20193  00232E  A4D8               	btfss	status,2,c
 20194  002330  D005               	goto	i2l12059
 20195                           
 20196                           ;GPS.c: 56: GPRMC_ok = 1;
 20197  002332  0E00               	movlw	0
 20198  002334  0101               	movlb	1	; () banked
 20199  002336  6F35               	movwf	(_GPRMC_ok+1)& (0+255),b
 20200  002338  0E01               	movlw	1
 20201  00233A  6F34               	movwf	_GPRMC_ok& (0+255),b
 20202  00233C                     i2l12059:
 20203                           
 20204                           ;GPS.c: 57: if(SentenceType == 2)
 20205  00233C  0E02               	movlw	2
 20206  00233E  1844               	xorwf	_SentenceType^0,w,c
 20207  002340  A4D8               	btfss	status,2,c
 20208  002342  D005               	goto	i2l12063
 20209                           
 20210                           ;GPS.c: 58: GPGGA_ok = 1;
 20211  002344  0E00               	movlw	0
 20212  002346  0101               	movlb	1	; () banked
 20213  002348  6F33               	movwf	(_GPGGA_ok+1)& (0+255),b
 20214  00234A  0E01               	movlw	1
 20215  00234C  6F32               	movwf	_GPGGA_ok& (0+255),b
 20216  00234E                     i2l12063:
 20217                           
 20218                           ;GPS.c: 59: if(GPRMC_ok && GPGGA_ok) {
 20219  00234E  0101               	movlb	1	; () banked
 20220  002350  5134               	movf	_GPRMC_ok& (0+255),w,b
 20221  002352  1135               	iorwf	(_GPRMC_ok+1)& (0+255),w,b
 20222  002354  B4D8               	btfsc	status,2,c
 20223  002356  0012               	return	
 20224                           
 20225                           ; BSR set to: 1
 20226  002358  5132               	movf	_GPGGA_ok& (0+255),w,b
 20227  00235A  1133               	iorwf	(_GPGGA_ok+1)& (0+255),w,b
 20228  00235C  B4D8               	btfsc	status,2,c
 20229  00235E  0012               	return	
 20230                           
 20231                           ; BSR set to: 1
 20232                           ;GPS.c: 60: GPRMC_ok = GPGGA_ok = 0;
 20233  002360  0E00               	movlw	0
 20234  002362  6F33               	movwf	(_GPGGA_ok+1)& (0+255),b
 20235  002364  0E00               	movlw	0
 20236  002366  6F32               	movwf	_GPGGA_ok& (0+255),b
 20237  002368  C132  F134         	movff	_GPGGA_ok,_GPRMC_ok
 20238  00236C  C133  F135         	movff	_GPGGA_ok+1,_GPRMC_ok+1
 20239  002370  0012               	return	
 20240  002372                     i2l12071:
 20241                           
 20242                           ;GPS.c: 66: Term = char_number = 0;
 20243  002372  0E00               	movlw	0
 20244  002374  6E45               	movwf	_char_number^0,c
 20245  002376  C045  F043         	movff	_char_number,_Term
 20246                           
 20247                           ;GPS.c: 67: break;
 20248  00237A  0012               	return	
 20249  00237C                     i2l12073:
 20250                           
 20251                           ;GPS.c: 70: buffer[char_number] = '\0';
 20252  00237C  0ED0               	movlw	low _buffer
 20253  00237E  2445               	addwf	_char_number^0,w,c
 20254  002380  6ED9               	movwf	fsr2l,c
 20255  002382  6ADA               	clrf	fsr2h,c
 20256  002384  0E01               	movlw	high _buffer
 20257  002386  22DA               	addwfc	fsr2h,f,c
 20258  002388  0E00               	movlw	0
 20259  00238A  6EDF               	movwf	indf2,c
 20260                           
 20261                           ;GPS.c: 71: if(Term == 0) {
 20262  00238C  5043               	movf	_Term^0,w,c
 20263  00238E  A4D8               	btfss	status,2,c
 20264  002390  D030               	goto	i2l12089
 20265                           
 20266                           ;GPS.c: 72: stringcpy(buffer, sentence, 0);
 20267  002392  0ED0               	movlw	low _buffer
 20268  002394  6E01               	movwf	stringcpy@str1^0,c
 20269  002396  0E01               	movlw	high _buffer
 20270  002398  6E02               	movwf	(stringcpy@str1+1)^0,c
 20271  00239A  0EEE               	movlw	low _sentence
 20272  00239C  6E03               	movwf	stringcpy@str2^0,c
 20273  00239E  0E01               	movlw	high _sentence
 20274  0023A0  6E04               	movwf	(stringcpy@str2+1)^0,c
 20275  0023A2  0E00               	movlw	0
 20276  0023A4  6E06               	movwf	(stringcpy@dir+1)^0,c
 20277  0023A6  0E00               	movlw	0
 20278  0023A8  6E05               	movwf	stringcpy@dir^0,c
 20279  0023AA  ECFA  F026         	call	_stringcpy	;wreg free
 20280                           
 20281                           ;GPS.c: 73: if(strcmp(sentence, "GPRMC") == 0)
 20282  0023AE  0EEE               	movlw	low _sentence
 20283  0023B0  6E01               	movwf	strcmp@s1^0,c
 20284  0023B2  0E01               	movlw	high _sentence
 20285  0023B4  6E02               	movwf	(strcmp@s1+1)^0,c
 20286  0023B6  0E51               	movlw	low STR_5
 20287  0023B8  6E03               	movwf	strcmp@s2^0,c
 20288  0023BA  0E62               	movlw	high STR_5
 20289  0023BC  6E04               	movwf	(strcmp@s2+1)^0,c
 20290  0023BE  EC8D  F026         	call	_strcmp	;wreg free
 20291  0023C2  5001               	movf	?_strcmp^0,w,c
 20292  0023C4  1002               	iorwf	(?_strcmp+1)^0,w,c
 20293  0023C6  A4D8               	btfss	status,2,c
 20294  0023C8  D002               	goto	i2l12083
 20295                           
 20296                           ;GPS.c: 74: SentenceType = 1;
 20297  0023CA  0E01               	movlw	1
 20298  0023CC  D011               	goto	L7
 20299  0023CE                     i2l12083:
 20300                           
 20301                           ;GPS.c: 75: else if(strcmp(sentence, "GPGGA") == 0)
 20302  0023CE  0EEE               	movlw	low _sentence
 20303  0023D0  6E01               	movwf	strcmp@s1^0,c
 20304  0023D2  0E01               	movlw	high _sentence
 20305  0023D4  6E02               	movwf	(strcmp@s1+1)^0,c
 20306  0023D6  0E4B               	movlw	low STR_6
 20307  0023D8  6E03               	movwf	strcmp@s2^0,c
 20308  0023DA  0E62               	movlw	high STR_6
 20309  0023DC  6E04               	movwf	(strcmp@s2+1)^0,c
 20310  0023DE  EC8D  F026         	call	_strcmp	;wreg free
 20311  0023E2  5001               	movf	?_strcmp^0,w,c
 20312  0023E4  1002               	iorwf	(?_strcmp+1)^0,w,c
 20313  0023E6  A4D8               	btfss	status,2,c
 20314  0023E8  D002               	goto	i2l12087
 20315                           
 20316                           ;GPS.c: 76: SentenceType = 2;
 20317  0023EA  0E02               	movlw	2
 20318  0023EC  D001               	goto	L7
 20319  0023EE                     i2l12087:
 20320                           
 20321                           ;GPS.c: 77: else;GPS.c: 78: SentenceType = 3;
 20322  0023EE  0E03               	movlw	3
 20323  0023F0                     L7:
 20324  0023F0  6E44               	movwf	_SentenceType^0,c
 20325  0023F2                     i2l12089:
 20326                           
 20327                           ;GPS.c: 79: };GPS.c: 82: if(Term == 1 && SentenceType == 1) {
 20328  0023F2  0443               	decf	_Term^0,w,c
 20329  0023F4  A4D8               	btfss	status,2,c
 20330  0023F6  D013               	goto	i2l12097
 20331  0023F8  0444               	decf	_SentenceType^0,w,c
 20332  0023FA  A4D8               	btfss	status,2,c
 20333  0023FC  D010               	goto	i2l12097
 20334                           
 20335                           ;GPS.c: 83: stringcpy(buffer, rawTime, 0);
 20336  0023FE  0ED0               	movlw	low _buffer
 20337  002400  6E01               	movwf	stringcpy@str1^0,c
 20338  002402  0E01               	movlw	high _buffer
 20339  002404  6E02               	movwf	(stringcpy@str1+1)^0,c
 20340  002406  0EDC               	movlw	low _rawTime
 20341  002408  6E03               	movwf	stringcpy@str2^0,c
 20342  00240A  0E01               	movlw	high _rawTime
 20343  00240C  6E04               	movwf	(stringcpy@str2+1)^0,c
 20344  00240E  0E00               	movlw	0
 20345  002410  6E06               	movwf	(stringcpy@dir+1)^0,c
 20346  002412  0E00               	movlw	0
 20347  002414  6E05               	movwf	stringcpy@dir^0,c
 20348  002416  ECFA  F026         	call	_stringcpy	;wreg free
 20349                           
 20350                           ;GPS.c: 84: gps_flag[0].flag = 1;
 20351  00241A  0101               	movlb	1	; () banked
 20352  00241C  8124               	bsf	_gps_flag& (0+255),0,b
 20353  00241E                     i2l12097:
 20354                           
 20355                           ;GPS.c: 85: };GPS.c: 88: if((Term == 3) && (SentenceType == 1)) {
 20356  00241E  0E03               	movlw	3
 20357  002420  1843               	xorwf	_Term^0,w,c
 20358  002422  A4D8               	btfss	status,2,c
 20359  002424  D013               	goto	i2l12105
 20360  002426  0444               	decf	_SentenceType^0,w,c
 20361  002428  A4D8               	btfss	status,2,c
 20362  00242A  D010               	goto	i2l12105
 20363                           
 20364                           ;GPS.c: 89: stringcpy(buffer, rawLatitude, 1);
 20365  00242C  0ED0               	movlw	low _buffer
 20366  00242E  6E01               	movwf	stringcpy@str1^0,c
 20367  002430  0E01               	movlw	high _buffer
 20368  002432  6E02               	movwf	(stringcpy@str1+1)^0,c
 20369  002434  0E80               	movlw	low _rawLatitude
 20370  002436  6E03               	movwf	stringcpy@str2^0,c
 20371  002438  0E02               	movlw	high _rawLatitude
 20372  00243A  6E04               	movwf	(stringcpy@str2+1)^0,c
 20373  00243C  0E00               	movlw	0
 20374  00243E  6E06               	movwf	(stringcpy@dir+1)^0,c
 20375  002440  0E01               	movlw	1
 20376  002442  6E05               	movwf	stringcpy@dir^0,c
 20377  002444  ECFA  F026         	call	_stringcpy	;wreg free
 20378                           
 20379                           ;GPS.c: 90: gps_flag[1].flag = 1;
 20380  002448  0101               	movlb	1	; () banked
 20381  00244A  8125               	bsf	(_gps_flag+1)& (0+255),0,b
 20382  00244C                     i2l12105:
 20383                           
 20384                           ;GPS.c: 91: };GPS.c: 93: if((Term == 4) && (SentenceType == 1)) {
 20385  00244C  0E04               	movlw	4
 20386  00244E  1843               	xorwf	_Term^0,w,c
 20387  002450  A4D8               	btfss	status,2,c
 20388  002452  D00D               	goto	i2l12115
 20389  002454  0444               	decf	_SentenceType^0,w,c
 20390  002456  A4D8               	btfss	status,2,c
 20391  002458  D00A               	goto	i2l12115
 20392                           
 20393                           ;GPS.c: 94: if(buffer[0] == 'N')
 20394  00245A  0E4E               	movlw	78
 20395  00245C  0101               	movlb	1	; () banked
 20396  00245E  19D0               	xorwf	_buffer& (0+255),w,b
 20397  002460  A4D8               	btfss	status,2,c
 20398  002462  D002               	goto	i2l12113
 20399                           
 20400                           ; BSR set to: 1
 20401                           ;GPS.c: 95: rawLatitude[0] = '0';
 20402  002464  0E30               	movlw	48
 20403  002466  D001               	goto	L8
 20404  002468                     i2l12113:
 20405                           
 20406                           ; BSR set to: 1
 20407                           ;GPS.c: 96: else;GPS.c: 97: rawLatitude[0] = '-';
 20408  002468  0E2D               	movlw	45
 20409  00246A                     L8:
 20410  00246A  0102               	movlb	2	; () banked
 20411  00246C  6F80               	movwf	_rawLatitude& (0+255),b
 20412  00246E                     i2l12115:
 20413                           
 20414                           ;GPS.c: 98: };GPS.c: 101: if((Term == 5) && (SentenceType == 1)) {
 20415  00246E  0E05               	movlw	5
 20416  002470  1843               	xorwf	_Term^0,w,c
 20417  002472  A4D8               	btfss	status,2,c
 20418  002474  D013               	goto	i2l12123
 20419  002476  0444               	decf	_SentenceType^0,w,c
 20420  002478  A4D8               	btfss	status,2,c
 20421  00247A  D010               	goto	i2l12123
 20422                           
 20423                           ;GPS.c: 102: stringcpy(buffer, rawLongitude, 1);
 20424  00247C  0ED0               	movlw	low _buffer
 20425  00247E  6E01               	movwf	stringcpy@str1^0,c
 20426  002480  0E01               	movlw	high _buffer
 20427  002482  6E02               	movwf	(stringcpy@str1+1)^0,c
 20428  002484  0E73               	movlw	low _rawLongitude
 20429  002486  6E03               	movwf	stringcpy@str2^0,c
 20430  002488  0E02               	movlw	high _rawLongitude
 20431  00248A  6E04               	movwf	(stringcpy@str2+1)^0,c
 20432  00248C  0E00               	movlw	0
 20433  00248E  6E06               	movwf	(stringcpy@dir+1)^0,c
 20434  002490  0E01               	movlw	1
 20435  002492  6E05               	movwf	stringcpy@dir^0,c
 20436  002494  ECFA  F026         	call	_stringcpy	;wreg free
 20437                           
 20438                           ;GPS.c: 103: gps_flag[2].flag = 1;
 20439  002498  0101               	movlb	1	; () banked
 20440  00249A  8126               	bsf	(_gps_flag+2)& (0+255),0,b
 20441  00249C                     i2l12123:
 20442                           
 20443                           ;GPS.c: 104: };GPS.c: 106: if((Term == 6) && (SentenceType == 1)) {
 20444  00249C  0E06               	movlw	6
 20445  00249E  1843               	xorwf	_Term^0,w,c
 20446  0024A0  A4D8               	btfss	status,2,c
 20447  0024A2  D00D               	goto	i2l12133
 20448  0024A4  0444               	decf	_SentenceType^0,w,c
 20449  0024A6  A4D8               	btfss	status,2,c
 20450  0024A8  D00A               	goto	i2l12133
 20451                           
 20452                           ;GPS.c: 107: if(buffer[0] == 'E')
 20453  0024AA  0E45               	movlw	69
 20454  0024AC  0101               	movlb	1	; () banked
 20455  0024AE  19D0               	xorwf	_buffer& (0+255),w,b
 20456  0024B0  A4D8               	btfss	status,2,c
 20457  0024B2  D002               	goto	i2l12131
 20458                           
 20459                           ; BSR set to: 1
 20460                           ;GPS.c: 108: rawLongitude[0] = '0';
 20461  0024B4  0E30               	movlw	48
 20462  0024B6  D001               	goto	L9
 20463  0024B8                     i2l12131:
 20464                           
 20465                           ; BSR set to: 1
 20466                           ;GPS.c: 109: else;GPS.c: 110: rawLongitude[0] = '-';
 20467  0024B8  0E2D               	movlw	45
 20468  0024BA                     L9:
 20469  0024BA  0102               	movlb	2	; () banked
 20470  0024BC  6F73               	movwf	_rawLongitude& (0+255),b
 20471  0024BE                     i2l12133:
 20472                           
 20473                           ;GPS.c: 111: };GPS.c: 124: if(Term == 9 && SentenceType == 1) {
 20474  0024BE  0E09               	movlw	9
 20475  0024C0  1843               	xorwf	_Term^0,w,c
 20476  0024C2  A4D8               	btfss	status,2,c
 20477  0024C4  D013               	goto	i2l12141
 20478  0024C6  0444               	decf	_SentenceType^0,w,c
 20479  0024C8  A4D8               	btfss	status,2,c
 20480  0024CA  D010               	goto	i2l12141
 20481                           
 20482                           ;GPS.c: 125: gps_flag[3].flag = 1;
 20483  0024CC  0101               	movlb	1	; () banked
 20484  0024CE  8127               	bsf	(_gps_flag+3)& (0+255),0,b
 20485                           
 20486                           ; BSR set to: 1
 20487                           ;GPS.c: 126: stringcpy(buffer, rawDate, 0);
 20488  0024D0  0ED0               	movlw	low _buffer
 20489  0024D2  6E01               	movwf	stringcpy@str1^0,c
 20490  0024D4  0E01               	movlw	high _buffer
 20491  0024D6  6E02               	movwf	(stringcpy@str1+1)^0,c
 20492  0024D8  0EE7               	movlw	low _rawDate
 20493  0024DA  6E03               	movwf	stringcpy@str2^0,c
 20494  0024DC  0E01               	movlw	high _rawDate
 20495  0024DE  6E04               	movwf	(stringcpy@str2+1)^0,c
 20496  0024E0  0E00               	movlw	0
 20497  0024E2  6E06               	movwf	(stringcpy@dir+1)^0,c
 20498  0024E4  0E00               	movlw	0
 20499  0024E6  6E05               	movwf	stringcpy@dir^0,c
 20500  0024E8  ECFA  F026         	call	_stringcpy	;wreg free
 20501  0024EC                     i2l12141:
 20502                           
 20503                           ;GPS.c: 127: };GPS.c: 140: if((Term == 6) && (SentenceType == 2)) {
 20504  0024EC  0E06               	movlw	6
 20505  0024EE  1843               	xorwf	_Term^0,w,c
 20506  0024F0  A4D8               	btfss	status,2,c
 20507  0024F2  D014               	goto	i2l12149
 20508  0024F4  0E02               	movlw	2
 20509  0024F6  1844               	xorwf	_SentenceType^0,w,c
 20510  0024F8  A4D8               	btfss	status,2,c
 20511  0024FA  D010               	goto	i2l12149
 20512                           
 20513                           ;GPS.c: 141: stringcpy(buffer, rawFix, 0);
 20514  0024FC  0ED0               	movlw	low _buffer
 20515  0024FE  6E01               	movwf	stringcpy@str1^0,c
 20516  002500  0E01               	movlw	high _buffer
 20517  002502  6E02               	movwf	(stringcpy@str1+1)^0,c
 20518  002504  0EF4               	movlw	low _rawFix
 20519  002506  6E03               	movwf	stringcpy@str2^0,c
 20520  002508  0E01               	movlw	high _rawFix
 20521  00250A  6E04               	movwf	(stringcpy@str2+1)^0,c
 20522  00250C  0E00               	movlw	0
 20523  00250E  6E06               	movwf	(stringcpy@dir+1)^0,c
 20524  002510  0E00               	movlw	0
 20525  002512  6E05               	movwf	stringcpy@dir^0,c
 20526  002514  ECFA  F026         	call	_stringcpy	;wreg free
 20527                           
 20528                           ;GPS.c: 142: gps_flag[4].flag = 1;
 20529  002518  0101               	movlb	1	; () banked
 20530  00251A  8128               	bsf	(_gps_flag+4)& (0+255),0,b
 20531  00251C                     i2l12149:
 20532                           
 20533                           ;GPS.c: 144: };GPS.c: 145: Term++;
 20534  00251C  2A43               	incf	_Term^0,f,c
 20535                           
 20536                           ;GPS.c: 146: char_number = 0;
 20537  00251E  0E00               	movlw	0
 20538  002520  6E45               	movwf	_char_number^0,c
 20539                           
 20540                           ;GPS.c: 147: break;
 20541  002522  0012               	return	
 20542  002524                     i2l12153:
 20543                           
 20544                           ;GPS.c: 150: buffer[char_number++] = c;
 20545  002524  0ED0               	movlw	low _buffer
 20546  002526  2445               	addwf	_char_number^0,w,c
 20547  002528  6ED9               	movwf	fsr2l,c
 20548  00252A  6ADA               	clrf	fsr2h,c
 20549  00252C  0E01               	movlw	high _buffer
 20550  00252E  22DA               	addwfc	fsr2h,f,c
 20551  002530  C00B  FFDF         	movff	GPSRead@c,indf2
 20552  002534  2A45               	incf	_char_number^0,f,c
 20553                           
 20554                           ;GPS.c: 151: break;
 20555  002536  0012               	return	
 20556  002538                     i2l12159:
 20557  002538  500B               	movf	GPSRead@c^0,w,c
 20558                           
 20559                           ; Switch size 1, requested type "simple"
 20560                           ; Number of cases is 3, Range of values is 13 to 44
 20561                           ; switch strategies available:
 20562                           ; Name         Instructions Cycles
 20563                           ; simple_byte           10     6 (average)
 20564                           ;	Chosen strategy is simple_byte
 20565  00253A  0A0D               	xorlw	13	; case 13
 20566  00253C  B4D8               	btfsc	status,2,c
 20567  00253E  D6F6               	goto	i2l12055
 20568  002540  0A29               	xorlw	41	; case 36
 20569  002542  B4D8               	btfsc	status,2,c
 20570  002544  D716               	goto	i2l12071
 20571  002546  0A08               	xorlw	8	; case 44
 20572  002548  B4D8               	btfsc	status,2,c
 20573  00254A  D718               	goto	i2l12073
 20574  00254C  D7EB               	goto	i2l12153
 20575  00254E                     __end_of_GPSRead:
 20576                           	callstack 0
 20577                           
 20578 ;; *************** function _stringcpy *****************
 20579 ;; Defined at:
 20580 ;;		line 40 in file "bibliotecas/GPS.c"
 20581 ;; Parameters:    Size  Location     Type
 20582 ;;  str1            2    0[COMRAM] PTR unsigned char 
 20583 ;;		 -> buffer(12), 
 20584 ;;  str2            2    2[COMRAM] PTR unsigned char 
 20585 ;;		 -> rawFix(2), rawDate(7), rawLongitude(13), rawLatitude(13), 
 20586 ;;		 -> rawTime(11), sentence(6), 
 20587 ;;  dir             2    4[COMRAM] int 
 20588 ;; Auto vars:     Size  Location     Type
 20589 ;;  chr             1    8[COMRAM] unsigned char 
 20590 ;; Return value:  Size  Location     Type
 20591 ;;                  1    wreg      void 
 20592 ;; Registers used:
 20593 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 20594 ;; Tracked objects:
 20595 ;;		On entry : 0/0
 20596 ;;		On exit  : 0/0
 20597 ;;		Unchanged: 0/0
 20598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20599 ;;      Params:         6       0       0       0       0       0       0       0       0
 20600 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20601 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20602 ;;      Totals:         9       0       0       0       0       0       0       0       0
 20603 ;;Total ram usage:        9 bytes
 20604 ;; Hardware stack levels used:    1
 20605 ;; This function calls:
 20606 ;;		Nothing
 20607 ;; This function is called by:
 20608 ;;		_GPSRead
 20609 ;; This function uses a non-reentrant model
 20610 ;;
 20611                           
 20612                           	psect	text113
 20613  004DF4                     __ptext113:
 20614                           	callstack 0
 20615  004DF4                     _stringcpy:
 20616                           	callstack 13
 20617                           
 20618                           ;GPS.c: 42: uint8_t chr = 0;
 20619                           
 20620                           ;incstack = 0
 20621  004DF4  0E00               	movlw	0
 20622  004DF6  6E09               	movwf	stringcpy@chr^0,c
 20623  004DF8                     i2l11837:
 20624                           
 20625                           ;GPS.c: 45: str2[chr + dir] = str1[chr];
 20626  004DF8  5009               	movf	stringcpy@chr^0,w,c
 20627  004DFA  2401               	addwf	stringcpy@str1^0,w,c
 20628  004DFC  6ED9               	movwf	fsr2l,c
 20629  004DFE  0E00               	movlw	0
 20630  004E00  2002               	addwfc	(stringcpy@str1+1)^0,w,c
 20631  004E02  6EDA               	movwf	fsr2h,c
 20632  004E04  5009               	movf	stringcpy@chr^0,w,c
 20633  004E06  2403               	addwf	stringcpy@str2^0,w,c
 20634  004E08  6E07               	movwf	??_stringcpy^0,c
 20635  004E0A  0E00               	movlw	0
 20636  004E0C  2004               	addwfc	(stringcpy@str2+1)^0,w,c
 20637  004E0E  6E08               	movwf	(??_stringcpy+1)^0,c
 20638  004E10  5005               	movf	stringcpy@dir^0,w,c
 20639  004E12  2407               	addwf	??_stringcpy^0,w,c
 20640  004E14  6EE1               	movwf	fsr1l,c
 20641  004E16  5006               	movf	(stringcpy@dir+1)^0,w,c
 20642  004E18  2008               	addwfc	(??_stringcpy+1)^0,w,c
 20643  004E1A  6EE2               	movwf	fsr1h,c
 20644  004E1C  CFDF FFE7          	movff	indf2,indf1
 20645                           
 20646                           ;GPS.c: 46: } while(str1[chr++] != '\0');
 20647  004E20  2A09               	incf	stringcpy@chr^0,f,c
 20648  004E22  0409               	decf	stringcpy@chr^0,w,c
 20649  004E24  6E07               	movwf	??_stringcpy^0,c
 20650  004E26  5007               	movf	??_stringcpy^0,w,c
 20651  004E28  2401               	addwf	stringcpy@str1^0,w,c
 20652  004E2A  6ED9               	movwf	fsr2l,c
 20653  004E2C  0E00               	movlw	0
 20654  004E2E  2002               	addwfc	(stringcpy@str1+1)^0,w,c
 20655  004E30  6EDA               	movwf	fsr2h,c
 20656  004E32  50DF               	movf	indf2,w,c
 20657  004E34  B4D8               	btfsc	status,2,c
 20658  004E36  0012               	return	
 20659  004E38  D7DF               	goto	i2l11837
 20660  004E3A                     __end_of_stringcpy:
 20661                           	callstack 0
 20662                           
 20663 ;; *************** function _strcmp *****************
 20664 ;; Defined at:
 20665 ;;		line 33 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strcmp.c"
 20666 ;; Parameters:    Size  Location     Type
 20667 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 20668 ;;		 -> sentence(6), 
 20669 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 20670 ;;		 -> STR_6(6), STR_5(6), 
 20671 ;; Auto vars:     Size  Location     Type
 20672 ;;  r               1    6[COMRAM] char 
 20673 ;; Return value:  Size  Location     Type
 20674 ;;                  2    0[COMRAM] int 
 20675 ;; Registers used:
 20676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20677 ;; Tracked objects:
 20678 ;;		On entry : 0/0
 20679 ;;		On exit  : 0/0
 20680 ;;		Unchanged: 0/0
 20681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20682 ;;      Params:         4       0       0       0       0       0       0       0       0
 20683 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20684 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20685 ;;      Totals:         7       0       0       0       0       0       0       0       0
 20686 ;;Total ram usage:        7 bytes
 20687 ;; Hardware stack levels used:    1
 20688 ;; This function calls:
 20689 ;;		Nothing
 20690 ;; This function is called by:
 20691 ;;		_GPSRead
 20692 ;; This function uses a non-reentrant model
 20693 ;;
 20694                           
 20695                           	psect	text114
 20696  004D1A                     __ptext114:
 20697                           	callstack 0
 20698  004D1A                     _strcmp:
 20699                           	callstack 13
 20700                           
 20701                           ;incstack = 0
 20702  004D1A  D004               	goto	i2l11845
 20703  004D1C                     i2l11843:
 20704  004D1C  4A01               	infsnz	strcmp@s1^0,f,c
 20705  004D1E  2A02               	incf	(strcmp@s1+1)^0,f,c
 20706  004D20  4A03               	infsnz	strcmp@s2^0,f,c
 20707  004D22  2A04               	incf	(strcmp@s2+1)^0,f,c
 20708  004D24                     i2l11845:
 20709  004D24  C003  FFF6         	movff	strcmp@s2,tblptrl
 20710  004D28  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 20711  004D2C                     	if	0	;tblptru may be non-zero
 20712  004D2C                     	endif
 20713  004D2C                     	if	0	;tblptru may be non-zero
 20714  004D2C                     	endif
 20715  004D2C  0008               	tblrd		*
 20716  004D2E  CFF5 F005          	movff	tablat,??_strcmp
 20717  004D32  C001  FFD9         	movff	strcmp@s1,fsr2l
 20718  004D36  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 20719  004D3A  50DF               	movf	indf2,w,c
 20720  004D3C  6E06               	movwf	(??_strcmp+1)^0,c
 20721  004D3E  5005               	movf	??_strcmp^0,w,c
 20722  004D40  5C06               	subwf	(??_strcmp+1)^0,w,c
 20723  004D42  6E07               	movwf	strcmp@r^0,c
 20724  004D44  5007               	movf	strcmp@r^0,w,c
 20725  004D46  A4D8               	btfss	status,2,c
 20726  004D48  D007               	goto	i2u1449_40
 20727  004D4A  C001  FFD9         	movff	strcmp@s1,fsr2l
 20728  004D4E  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 20729  004D52  50DF               	movf	indf2,w,c
 20730  004D54  A4D8               	btfss	status,2,c
 20731  004D56  D7E2               	goto	i2l11843
 20732  004D58                     i2u1449_40:
 20733  004D58  5007               	movf	strcmp@r^0,w,c
 20734  004D5A  6E01               	movwf	?_strcmp^0,c
 20735  004D5C  6A02               	clrf	(?_strcmp+1)^0,c
 20736  004D5E  BE01               	btfsc	?_strcmp^0,7,c
 20737  004D60  0602               	decf	(?_strcmp+1)^0,f,c
 20738  004D62  0012               	return		;funcret
 20739  004D64                     __end_of_strcmp:
 20740                           	callstack 0
 20741                           
 20742                           	psect	text115
 20743  000000                     __ptext115:
 20744                           	callstack 0
 20745                           
 20746                           	psect	rparam
 20747  0000                     
 20748                           	psect	temp
 20749  000047                     btemp:
 20750                           	callstack 0
 20751  000047                     	ds	1
 20752  0000                     int$flags	set	btemp
 20753  0000                     wtemp8	set	btemp+1
 20754  0000                     ttemp5	set	btemp+1
 20755  0000                     ttemp6	set	btemp+4
 20756  0000                     ttemp7	set	btemp+8
 20757                           
 20758                           	psect	idloc
 20759                           
 20760                           ;Config register IDLOC0 @ 0x200000
 20761                           ;	unspecified, using default values
 20762  200000                     	org	2097152
 20763  200000  FF                 	db	255
 20764                           
 20765                           ;Config register IDLOC1 @ 0x200001
 20766                           ;	unspecified, using default values
 20767  200001                     	org	2097153
 20768  200001  FF                 	db	255
 20769                           
 20770                           ;Config register IDLOC2 @ 0x200002
 20771                           ;	unspecified, using default values
 20772  200002                     	org	2097154
 20773  200002  FF                 	db	255
 20774                           
 20775                           ;Config register IDLOC3 @ 0x200003
 20776                           ;	unspecified, using default values
 20777  200003                     	org	2097155
 20778  200003  FF                 	db	255
 20779                           
 20780                           ;Config register IDLOC4 @ 0x200004
 20781                           ;	unspecified, using default values
 20782  200004                     	org	2097156
 20783  200004  FF                 	db	255
 20784                           
 20785                           ;Config register IDLOC5 @ 0x200005
 20786                           ;	unspecified, using default values
 20787  200005                     	org	2097157
 20788  200005  FF                 	db	255
 20789                           
 20790                           ;Config register IDLOC6 @ 0x200006
 20791                           ;	unspecified, using default values
 20792  200006                     	org	2097158
 20793  200006  FF                 	db	255
 20794                           
 20795                           ;Config register IDLOC7 @ 0x200007
 20796                           ;	unspecified, using default values
 20797  200007                     	org	2097159
 20798  200007  FF                 	db	255
 20799                           
 20800                           	psect	config
 20801                           
 20802                           ;Config register CONFIG1L @ 0x300000
 20803                           ;	unspecified, using default values
 20804                           ;	PLL Prescaler Selection bits
 20805                           ;	PLLDIV = 0x0, unprogrammed default
 20806                           ;	System Clock Postscaler Selection bits
 20807                           ;	CPUDIV = 0x0, unprogrammed default
 20808                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
 20809                           ;	USBDIV = 0x0, unprogrammed default
 20810  300000                     	org	3145728
 20811  300000  00                 	db	0
 20812                           
 20813                           ;Config register CONFIG1H @ 0x300001
 20814                           ;	unspecified, using default values
 20815                           ;	Oscillator Selection bits
 20816                           ;	FOSC = 0x5, unprogrammed default
 20817                           ;	Fail-Safe Clock Monitor Enable bit
 20818                           ;	FCMEN = 0x0, unprogrammed default
 20819                           ;	Internal/External Oscillator Switchover bit
 20820                           ;	IESO = 0x0, unprogrammed default
 20821  300001                     	org	3145729
 20822  300001  05                 	db	5
 20823                           
 20824                           ;Config register CONFIG2L @ 0x300002
 20825                           ;	unspecified, using default values
 20826                           ;	Power-up Timer Enable bit
 20827                           ;	PWRT = 0x1, unprogrammed default
 20828                           ;	Brown-out Reset Enable bits
 20829                           ;	BOR = 0x3, unprogrammed default
 20830                           ;	Brown-out Reset Voltage bits
 20831                           ;	BORV = 0x3, unprogrammed default
 20832                           ;	USB Voltage Regulator Enable bit
 20833                           ;	VREGEN = 0x0, unprogrammed default
 20834  300002                     	org	3145730
 20835  300002  1F                 	db	31
 20836                           
 20837                           ;Config register CONFIG2H @ 0x300003
 20838                           ;	unspecified, using default values
 20839                           ;	Watchdog Timer Enable bit
 20840                           ;	WDT = 0x1, unprogrammed default
 20841                           ;	Watchdog Timer Postscale Select bits
 20842                           ;	WDTPS = 0xF, unprogrammed default
 20843  300003                     	org	3145731
 20844  300003  1F                 	db	31
 20845                           
 20846                           ; Padding undefined space
 20847  300004                     	org	3145732
 20848  300004  FF                 	db	255
 20849                           
 20850                           ;Config register CONFIG3H @ 0x300005
 20851                           ;	unspecified, using default values
 20852                           ;	CCP2 MUX bit
 20853                           ;	CCP2MX = 0x1, unprogrammed default
 20854                           ;	PORTB A/D Enable bit
 20855                           ;	PBADEN = 0x1, unprogrammed default
 20856                           ;	Low-Power Timer 1 Oscillator Enable bit
 20857                           ;	LPT1OSC = 0x0, unprogrammed default
 20858                           ;	MCLR Pin Enable bit
 20859                           ;	MCLRE = 0x1, unprogrammed default
 20860  300005                     	org	3145733
 20861  300005  83                 	db	131
 20862                           
 20863                           ;Config register CONFIG4L @ 0x300006
 20864                           ;	unspecified, using default values
 20865                           ;	Stack Full/Underflow Reset Enable bit
 20866                           ;	STVREN = 0x1, unprogrammed default
 20867                           ;	Single-Supply ICSP Enable bit
 20868                           ;	LVP = 0x1, unprogrammed default
 20869                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
 20870                           ;	ICPRT = 0x0, unprogrammed default
 20871                           ;	Extended Instruction Set Enable bit
 20872                           ;	XINST = 0x0, unprogrammed default
 20873                           ;	Background Debugger Enable bit
 20874                           ;	DEBUG = 0x1, unprogrammed default
 20875  300006                     	org	3145734
 20876  300006  85                 	db	133
 20877                           
 20878                           ; Padding undefined space
 20879  300007                     	org	3145735
 20880  300007  FF                 	db	255
 20881                           
 20882                           ;Config register CONFIG5L @ 0x300008
 20883                           ;	unspecified, using default values
 20884                           ;	Code Protection bit
 20885                           ;	CP0 = 0x1, unprogrammed default
 20886                           ;	Code Protection bit
 20887                           ;	CP1 = 0x1, unprogrammed default
 20888                           ;	Code Protection bit
 20889                           ;	CP2 = 0x1, unprogrammed default
 20890                           ;	Code Protection bit
 20891                           ;	CP3 = 0x1, unprogrammed default
 20892  300008                     	org	3145736
 20893  300008  0F                 	db	15
 20894                           
 20895                           ;Config register CONFIG5H @ 0x300009
 20896                           ;	unspecified, using default values
 20897                           ;	Boot Block Code Protection bit
 20898                           ;	CPB = 0x1, unprogrammed default
 20899                           ;	Data EEPROM Code Protection bit
 20900                           ;	CPD = 0x1, unprogrammed default
 20901  300009                     	org	3145737
 20902  300009  C0                 	db	192
 20903                           
 20904                           ;Config register CONFIG6L @ 0x30000A
 20905                           ;	unspecified, using default values
 20906                           ;	Write Protection bit
 20907                           ;	WRT0 = 0x1, unprogrammed default
 20908                           ;	Write Protection bit
 20909                           ;	WRT1 = 0x1, unprogrammed default
 20910                           ;	Write Protection bit
 20911                           ;	WRT2 = 0x1, unprogrammed default
 20912                           ;	Write Protection bit
 20913                           ;	WRT3 = 0x1, unprogrammed default
 20914  30000A                     	org	3145738
 20915  30000A  0F                 	db	15
 20916                           
 20917                           ;Config register CONFIG6H @ 0x30000B
 20918                           ;	unspecified, using default values
 20919                           ;	Configuration Register Write Protection bit
 20920                           ;	WRTC = 0x1, unprogrammed default
 20921                           ;	Boot Block Write Protection bit
 20922                           ;	WRTB = 0x1, unprogrammed default
 20923                           ;	Data EEPROM Write Protection bit
 20924                           ;	WRTD = 0x1, unprogrammed default
 20925  30000B                     	org	3145739
 20926  30000B  E0                 	db	224
 20927                           
 20928                           ;Config register CONFIG7L @ 0x30000C
 20929                           ;	unspecified, using default values
 20930                           ;	Table Read Protection bit
 20931                           ;	EBTR0 = 0x1, unprogrammed default
 20932                           ;	Table Read Protection bit
 20933                           ;	EBTR1 = 0x1, unprogrammed default
 20934                           ;	Table Read Protection bit
 20935                           ;	EBTR2 = 0x1, unprogrammed default
 20936                           ;	Table Read Protection bit
 20937                           ;	EBTR3 = 0x1, unprogrammed default
 20938  30000C                     	org	3145740
 20939  30000C  0F                 	db	15
 20940                           
 20941                           ;Config register CONFIG7H @ 0x30000D
 20942                           ;	unspecified, using default values
 20943                           ;	Boot Block Table Read Protection bit
 20944                           ;	EBTRB = 0x1, unprogrammed default
 20945  30000D                     	org	3145741
 20946  30000D  40                 	db	64
 20947                           tosu	equ	0xFFF
 20948                           tosh	equ	0xFFE
 20949                           tosl	equ	0xFFD
 20950                           stkptr	equ	0xFFC
 20951                           pclatu	equ	0xFFB
 20952                           pclath	equ	0xFFA
 20953                           pcl	equ	0xFF9
 20954                           tblptru	equ	0xFF8
 20955                           tblptrh	equ	0xFF7
 20956                           tblptrl	equ	0xFF6
 20957                           tablat	equ	0xFF5
 20958                           prodh	equ	0xFF4
 20959                           prodl	equ	0xFF3
 20960                           indf0	equ	0xFEF
 20961                           postinc0	equ	0xFEE
 20962                           postdec0	equ	0xFED
 20963                           preinc0	equ	0xFEC
 20964                           plusw0	equ	0xFEB
 20965                           fsr0h	equ	0xFEA
 20966                           fsr0l	equ	0xFE9
 20967                           wreg	equ	0xFE8
 20968                           indf1	equ	0xFE7
 20969                           postinc1	equ	0xFE6
 20970                           postdec1	equ	0xFE5
 20971                           preinc1	equ	0xFE4
 20972                           plusw1	equ	0xFE3
 20973                           fsr1h	equ	0xFE2
 20974                           fsr1l	equ	0xFE1
 20975                           bsr	equ	0xFE0
 20976                           indf2	equ	0xFDF
 20977                           postinc2	equ	0xFDE
 20978                           postdec2	equ	0xFDD
 20979                           preinc2	equ	0xFDC
 20980                           plusw2	equ	0xFDB
 20981                           fsr2h	equ	0xFDA
 20982                           fsr2l	equ	0xFD9
 20983                           status	equ	0xFD8

Data Sizes:
    Strings     374
    Constant    126
    Data        15
    BSS         980
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      70
    BANK0           160    151     157
    BANK1           256      0     253
    BANK2           256     34     205
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$3532	PTR FTN()void  size(2) Largest target is 1
		 -> troca_de_tela(), disparo_gravacao(), verifica_dados_operacionais(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_26(CODE[7]), STR_25(CODE[5]), rawDate(BANK1[7]), rawLongitude(BANK2[13]), 
		 -> rawLatitude(BANK2[13]), rawTime(BANK1[11]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_26(CODE[7]), STR_25(CODE[5]), rawDate(BANK1[7]), rawLongitude(BANK2[13]), 
		 -> rawLatitude(BANK2[13]), rawTime(BANK1[11]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 124
		 -> poligono_ext(BANK1[124]), STR_13(CODE[6]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 15
		 -> diff_calc@point(BANK0[12]), diff_calc@fence(BANK0[12]), temp_buff_lat(BANK2[11]), temp_buff_long(BANK2[12]), 
		 -> filename(BANK2[15]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 15
		 -> diff_calc@point(BANK0[12]), diff_calc@fence(BANK0[12]), temp_buff_lat(BANK2[11]), temp_buff_long(BANK2[12]), 
		 -> filename(BANK2[15]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_6(CODE[6]), STR_5(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 6
		 -> sentence(BANK1[6]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_15(CODE[5]), STR_14(CODE[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 15
		 -> filename(BANK2[15]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 15
		 -> filename(BANK2[15]), 

    memset@p1	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memset@p	PTR unsigned char  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d1	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK0[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK0[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), STR_23(CODE[4]), 

    memcmp@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 12
		 -> diff_calc@point(BANK0[12]), diff_calc@fence(BANK0[12]), 

    diff_calc@p_buff_point	PTR unsigned char  size(2) Largest target is 124
		 -> poligono_ext(BANK1[124]), 

    diff_calc@p_buff_fence	PTR unsigned char  size(2) Largest target is 124
		 -> poligono_ext(BANK1[124]), 

    point_buff_gps_long	PTR unsigned char  size(2) Largest target is 13
		 -> NULL(NULL[0]), rawLongitude(BANK2[13]), 

    point_buff_gps_lat	PTR unsigned char  size(2) Largest target is 13
		 -> NULL(NULL[0]), rawLatitude(BANK2[13]), 

    disparo_gravacao@fix_gps	PTR unsigned char  size(2) Largest target is 2
		 -> rawFix(BANK1[2]), 

    p_tarefas	PTR FTN()void [4] size(2) Largest target is 1
		 -> troca_de_tela(), disparo_gravacao(), verifica_dados_operacionais(), 

    fprintf@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fprintf@str	PTR const unsigned char  size(2) Largest target is 39
		 -> STR_16(CODE[39]), 

    fprintf@arp	PTR void [1] size(1) Largest target is 2
		 -> ?_fprintf(BANK0[2]), 

    fputs@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fputs@str	PTR const unsigned char  size(2) Largest target is 73
		 -> fprintf@s(BANK2[16]), ?_fprintf(BANK0[2]), STR_21(CODE[16]), STR_20(CODE[27]), 
		 -> STR_19(CODE[17]), STR_18(CODE[16]), STR_17(CODE[16]), string_dado(BANK2[73]), 

    fputc@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    sp__fgets	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_readdir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_opendir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@bw	PTR unsigned int  size(1) Largest target is 2
		 -> fputc@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(1) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_write@wbuff	PTR const unsigned char  size(1) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__memcpy	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_22(CODE[13]), filename(BANK2[15]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> fs(BIGRAM[544]), 

    validate@fs	PTR const struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@path	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> f_opendir@path(COMRAM[2]), f_open@path(BANK0[2]), 

    auto_mount@p	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_22(CODE[13]), filename(BANK2[15]), 

    check_fs@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dir	PTR PTR unsigned char  size(1) Largest target is 2
		 -> f_open@dir(BANK0[2]), 

    reserve_direntry@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj	PTR struct _DIR_E size(1) Largest target is 15
		 -> f_open@dj(BANK0[14]), 

    reserve_direntry@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), 

    trace_path@dir	PTR PTR unsigned char  size(1) Largest target is 2
		 -> f_opendir@dir(COMRAM[2]), f_open@dir(BANK0[2]), 

    trace_path@path	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_22(CODE[13]), filename(BANK2[15]), 

    trace_path@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dj	PTR struct _DIR_E size(1) Largest target is 15
		 -> f_open@dj(BANK0[14]), 

    trace_path@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@path	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> trace_path@path(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@dirname	PTR unsigned char  size(1) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), 

    S1383_DIR_E$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj	PTR struct _DIR_E size(1) Largest target is 15
		 -> f_open@dj(BANK0[14]), 

    clust2sect@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    create_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    remove_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@p	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    get_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sync@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    FatFs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    move_window@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    monta_sd@dado	PTR unsigned char  size(2) Largest target is 13
		 -> STR_26(CODE[7]), STR_25(CODE[5]), rawDate(BANK1[7]), rawLongitude(BANK2[13]), 
		 -> rawLatitude(BANK2[13]), rawTime(BANK1[11]), 

    sp__leitura_sdcard	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK2[20]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 15
		 -> filename(BANK2[15]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 15
		 -> diff_calc@point(BANK0[12]), diff_calc@fence(BANK0[12]), temp_buff_lat(BANK2[11]), temp_buff_long(BANK2[12]), 
		 -> filename(BANK2[15]), 

    S712_FIL$dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    S712_FIL$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__fix	PTR unsigned char  size(2) Largest target is 2
		 -> rawFix(BANK1[2]), 

    sp__Longitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLongitude(BANK2[13]), 

    sp__Latitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLatitude(BANK2[13]), 

    stringcpy@str1	PTR unsigned char  size(2) Largest target is 12
		 -> buffer(BANK1[12]), 

    stringcpy@str2	PTR unsigned char  size(2) Largest target is 13
		 -> rawFix(BANK1[2]), rawDate(BANK1[7]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), 
		 -> rawTime(BANK1[11]), sentence(BANK1[6]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 21
		 -> STR_34(CODE[2]), STR_33(CODE[7]), STR_32(CODE[14]), STR_31(CODE[17]), 
		 -> STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[5]), STR_27(CODE[5]), 
		 -> mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), NULL(NULL[0]), STR_12(CODE[9]), 
		 -> STR_11(CODE[10]), STR_10(CODE[10]), STR_9(CODE[14]), STR_8(CODE[21]), 
		 -> STR_7(CODE[15]), rawFix(BANK1[2]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), 
		 -> escreve_inteiro_lcd@texto(BANK0[7]), STR_4(CODE[11]), STR_3(CODE[10]), STR_2(CODE[16]), 
		 -> STR_1(CODE[11]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _troca_de_tela->_escreve_inteiro_lcd
    _escreve_inteiro_lcd->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _escreve_cmd_lcd->_delay
    _verifica_fence_externo->_calcula_diff_graus
    _verifica_fence_externo->_calcula_diff_minutos
    _calcula_diff_minutos->_diff_calc
    _calcula_diff_graus->_diff_calc
    _diff_calc->_atoi
    _atoi->___wmul
    _armazena_longitude->_strcpy
    _armazena_latitude->_strcpy
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _escrita_sdcard->_f_close
    _strcpy->_Latitude
    _strcpy->_Longitude
    _fprintf->_fputs
    _f_write->_disk_write
    _trace_path->_next_dir_entry
    _make_dirfile->_memset
    _reserve_direntry->_next_dir_entry
    _clust2sect->___lmul
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_command
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _check_fs->_disk_read
    _validate->_disk_status
    _disk_status->_sdc_disk_status
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_command
    _proceed->_escreve_SPI
    _command->_dummy_clocks
    _command->_wait_ready
    _get_fattime->_GPSDay
    _get_fattime->_GPSHour
    _get_fattime->_GPSMinute
    _get_fattime->_GPSMonth
    _get_fattime->_GPSSecond
    _get_fattime->_GPSyear
    _dados_gps_to_sd->_monta_sd
    _monta_sd->_strlen

Critical Paths under _isr in COMRAM

    _isr->_GPSRead
    _GPSRead->_stringcpy

Critical Paths under _main in BANK0

    _main->_escalonador
    _escalonador->_disparo_gravacao
    _troca_de_tela->_escreve_inteiro_lcd
    _calcula_diff_minutos->_diff_calc
    _calcula_diff_graus->_diff_calc
    _inicializa_uart->_configura_baudrate_uart
    _escrita_sdcard->_fprintf
    _fprintf->_fputs
    _fputs->_fputc
    _fputc->_f_write
    _f_write->_create_chain
    _f_open->_reserve_direntry
    _trace_path->_next_dir_entry
    _reserve_direntry->_create_chain
    _next_dir_entry->_get_cluster
    _remove_chain->_put_cluster
    _auto_mount->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _check_fs->_disk_read
    _f_lseek->_create_chain
    _create_chain->_put_cluster
    _put_cluster->_move_window
    _get_cluster->_move_window
    _f_close->_f_sync
    _f_sync->_sync
    _sync->_move_window
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _disk_read->_sdc_disk_read

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _escrita_sdcard->_fprintf

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  451245
                    _dados_gps_to_sd
                        _escalonador
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    6583
                                             30 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             27 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     148
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     148
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     2     0      2     148
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  441528
                                            148 BANK0      3     3      0
                   _disparo_gravacao *
                      _troca_de_tela *
        _verifica_dados_operacionais *
 ---------------------------------------------------------------------------------
 (2) _verifica_dados_operacionais                          4     4      0       0
 ---------------------------------------------------------------------------------
 (2) _troca_de_tela                                        1     1      0   13438
                                             47 COMRAM     1     1      0
                           _Latitude
                          _Longitude
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                                _fix
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_inteiro_lcd                                  9     7      2    6935
                                             45 COMRAM     2     0      2
                                              0 BANK0      7     7      0
              _escreve_frase_ram_lcd
                               _itoa
 ---------------------------------------------------------------------------------
 (4) _itoa                                                 6     1      5    3556
                                             39 COMRAM     6     1      5
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                 8     3      5    2843
                                             31 COMRAM     8     3      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     972
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4    1161
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             26 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _disparo_gravacao                                     3     3      0  427867
                                            145 BANK0      3     3      0
                     _escrita_sdcard
                                _fix
                   _recebe_dados_gps
             _verifica_fence_externo
 ---------------------------------------------------------------------------------
 (3) _verifica_fence_externo                               1     1      0   13512
                                             46 COMRAM     1     1      0
                  _armazena_latitude
                 _armazena_longitude
                 _calcula_diff_graus
               _calcula_diff_minutos
                           _monta_sd
           _verifica_diferenca_graus
         _verifica_diferenca_minutos
        _verifica_plausibilidade_lat
       _verifica_plausibilidade_long
 ---------------------------------------------------------------------------------
 (4) _verifica_plausibilidade_long                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _verifica_plausibilidade_lat                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _verifica_diferenca_minutos                          10    10      0     743
                                             24 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (4) _verifica_diferenca_graus                            10    10      0     743
                                             24 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (4) _calcula_diff_minutos                                 3     3      0    4273
                                             43 COMRAM     3     3      0
                          _diff_calc
 ---------------------------------------------------------------------------------
 (4) _calcula_diff_graus                                   3     3      0    4279
                                             43 COMRAM     3     3      0
                          _diff_calc
 ---------------------------------------------------------------------------------
 (5) _diff_calc                                           30    26      4    3858
                                             37 COMRAM     6     2      4
                                              0 BANK0     24    24      0
                               _atoi
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _atoi                                                 7     5      2    1895
                                             30 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              3     3      0      99
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _armazena_longitude                                   0     0      0    1009
                          _Longitude
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _Longitude                                            2     0      2       0
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _armazena_latitude                                    0     0      0    1009
                           _Latitude
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _Latitude                                             2     0      2       0
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _recebe_dados_gps                                     1     1      0     954
                                             44 COMRAM     1     1      0
                        _desliga_SPI
                       _desliga_uart
                     _inicializa_SPI
                    _inicializa_uart
                 _verifica_recep_gps
 ---------------------------------------------------------------------------------
 (4) _verifica_recep_gps                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0     917
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4     917
                                             38 COMRAM     6     2      4
                                              0 BANK0      8     8      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     604
                                             24 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (4) _desliga_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fix                                                  2     0      2       0
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _escrita_sdcard                                       5     5      0  413367
                        _desliga_SPI
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _fprintf
                     _inicializa_SPI
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               6     2      4    1009
                                             26 COMRAM     6     2      4
                           _Latitude (ARG)
                          _Longitude (ARG)
 ---------------------------------------------------------------------------------
 (4) _strcat                                               6     2      4     503
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _inicializa_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _fprintf                                             58    36     22  127636
                                            121 BANK0     24     2     22
                                              0 BANK2     34    34      0
                            ___lldiv
                            ___llmod
                             ___wmul
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (5) _fputs                                                7     3      4   61563
                                             48 COMRAM     1     1      0
                                            115 BANK0      6     2      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                7     3      4   61070
                                            108 BANK0      7     3      4
                            _f_write
 ---------------------------------------------------------------------------------
 (7) _f_write                                             30    24      6   60258
                                             78 BANK0     30    24      6
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     412
                                             24 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (4) _f_open                                              44    39      5  198924
                                             96 BANK0     44    39      5
                         _auto_mount
                        _get_fattime
                             _memcpy
                             _memset
                        _move_window
                       _remove_chain
                   _reserve_direntry
                         _trace_path
 ---------------------------------------------------------------------------------
 (5) _trace_path                                          20    15      5   38318
                                             72 BANK0     20    15      5
                         _clust2sect
                       _make_dirfile
                             _memcmp
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _make_dirfile                                        11     9      2    2102
                                             32 COMRAM    11     9      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _reserve_direntry                                    18    16      2   76223
                                             78 BANK0     18    16      2
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memset
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _next_dir_entry                                      12    11      1   18492
                                             48 COMRAM     1     0      1
                                             61 BANK0     11    11      0
                         _clust2sect
                        _get_cluster
 ---------------------------------------------------------------------------------
 (8) _clust2sect                                          11     7      4    1435
                                             36 COMRAM    11     7      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _remove_chain                                         8     6      2   33174
                                             64 BANK0      8     6      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (8) _memcpy                                              11     5      6     970
                                             24 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (5) _auto_mount                                          46    44      2   31733
                                             27 BANK0     46    44      2
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                             _memset
 ---------------------------------------------------------------------------------
 (7) _memset                                               8     2      6    1008
                                             24 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _disk_initialize                                      4     4      0   20294
                                             44 COMRAM     2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (7) _sdc_disk_initialize                                 13    13      0   20164
                                             43 COMRAM     1     1      0
                                              0 BANK0     12    12      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (8) _sdc_reset                                           20    20      0    9648
                                             36 COMRAM     7     7      0
                            _command
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    3267
                                             27 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             26 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2759
                                             27 COMRAM     2     0      2
              _escreve_caractere_lcd
                                _fix (ARG)
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             26 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _check_fs                                             8     4      4    6616
                                             19 BANK0      8     4      4
                          _disk_read
                             _memcmp
 ---------------------------------------------------------------------------------
 (6) _memcmp                                               8     2      6     701
                                             24 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (9) ___lmul                                              12     4      8     516
                                             24 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) _f_mount                                              3     1      2     290
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _f_lseek                                             33    27      6   54580
                                             78 BANK0     33    27      6
                            ___lldiv
                       _create_chain
                        _get_cluster
                           _validate
 ---------------------------------------------------------------------------------
 (8) _create_chain                                        14    12      2   34237
                                             64 BANK0     14    12      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (9) _put_cluster                                         24    20      4   16553
                                             40 BANK0     24    20      4
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (9) _get_cluster                                         21    19      2   16243
                                             40 BANK0     21    19      2
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1282
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     901
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) _f_close                                              3     1      2   30425
                                             48 COMRAM     1     1      0
                                             51 BANK0      2     0      2
                             _f_sync
 ---------------------------------------------------------------------------------
 (5) _f_sync                                               9     7      2   30002
                                             42 BANK0      9     7      2
                        _get_fattime
                        _move_window
                               _sync
                           _validate
 ---------------------------------------------------------------------------------
 (8) _validate                                             6     2      4    1178
                                             30 COMRAM     6     2      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (9) _disk_status                                          4     4      0     226
                                             26 COMRAM     4     4      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_status                                     4     4      0      34
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _sync                                                 2     2      0   14103
                                             40 BANK0      2     2      0
                         _disk_ioctl
                        _move_window
 ---------------------------------------------------------------------------------
 (8) _move_window                                         21    17      4   13765
                                             19 BANK0     21    17      4
                          _disk_read
                         _disk_write
 ---------------------------------------------------------------------------------
 (9) _disk_write                                          12     5      7    6087
                                             47 COMRAM     1     1      0
                                              8 BANK0     11     4      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_write                                     19    12      7    4623
                                             36 COMRAM    11     4      7
                                              0 BANK0      8     8      0
                            _command
                       _dummy_clocks
                        _escreve_SPI
                        _leitura_SPI
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (9) _disk_read                                           12     5      7    5608
                                             47 COMRAM     1     1      0
                                              8 BANK0     11     4      7
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_read                                      24    17      7    4459
                                             36 COMRAM    11     4      7
                                              0 BANK0      8     8      0
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (11) _response                                            1     1      0      34
                                             24 COMRAM     1     1      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (11) _proceed                                             0     0      0      34
                        _escreve_SPI
 ---------------------------------------------------------------------------------
 (11) _command                                             7     2      5    3412
                                             29 COMRAM     7     2      5
                       _dummy_clocks
                        _escreve_SPI
                         _wait_ready
 ---------------------------------------------------------------------------------
 (12) _wait_ready                                         15    15      0      99
                                             24 COMRAM     5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _escreve_SPI                                         2     2      0      34
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) _dummy_clocks                                        5     5      0      68
                                             24 COMRAM     5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _leitura_SPI                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _disk_ioctl                                           7     4      3     304
                                             24 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (5) _get_fattime                                         52    48      4     389
                                             28 COMRAM    14    10      4
                                              0 BANK0     38    38      0
                             _GPSDay
                            _GPSHour
                          _GPSMinute
                           _GPSMonth
                          _GPSSecond
                            _GPSyear
 ---------------------------------------------------------------------------------
 (6) _GPSyear                                              4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _GPSSecond                                            4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _GPSMonth                                             4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _GPSMinute                                            4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _GPSHour                                              4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _GPSDay                                               4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _desliga_SPI                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dados_gps_to_sd                                      0     0      0    1456
                           _monta_sd
 ---------------------------------------------------------------------------------
 (4) _monta_sd                                             5     3      2    1456
                                             28 COMRAM     5     3      2
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               4     2      2     166
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _isr                                                13    13      0    2607
                                             11 COMRAM    13    13      0
                            _GPSRead
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (17) i2_write_timer_zero                                  2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (17) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _GPSRead                                             2     2      0    2429
                                              9 COMRAM     2     2      0
                             _strcmp
                          _stringcpy
 ---------------------------------------------------------------------------------
 (18) _stringcpy                                           9     3      6    1840
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (18) _strcmp                                              7     3      4     493
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dados_gps_to_sd
     _monta_sd
       _strlen
   _escalonador
     _disparo_gravacao *
       _escrita_sdcard
         _desliga_SPI
         _f_close
           _f_sync
             _get_fattime
               _GPSDay
               _GPSHour
               _GPSMinute
               _GPSMonth
               _GPSSecond
               _GPSyear
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _sync
               _disk_ioctl
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
         _f_lseek
           ___lldiv
           _create_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
           _validate
             _disk_status
               _sdc_disk_status
         _f_mount
         _f_open
           _auto_mount
             ___lldiv
             ___lmul
             _check_fs
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcmp
             _disk_initialize
               _sdc_disk_initialize
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                   _fix (ARG)
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
                 _sdc_reset
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                     _fix (ARG)
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _disk_status
               _sdc_disk_status
             _memset
           _get_fattime
             _GPSDay
             _GPSHour
             _GPSMinute
             _GPSMonth
             _GPSSecond
             _GPSyear
           _memcpy
           _memset
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _remove_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _reserve_direntry
             _clust2sect
               ___lmul
             _create_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _memset
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
           _trace_path
             _clust2sect
               ___lmul
             _make_dirfile
               _memset
             _memcmp
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
         _fprintf
           ___lldiv
           ___llmod
           ___wmul
           _fputc
             _f_write
               _clust2sect
                 ___lmul
               _create_chain
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                 _put_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcpy
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _validate
                 _disk_status
                   _sdc_disk_status
           _fputs
             _fputc
               _f_write
                 _clust2sect
                   ___lmul
                 _create_chain
                   _get_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                   _put_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _memcpy
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                 _validate
                   _disk_status
                     _sdc_disk_status
         _inicializa_SPI
         _strcat
         _strcpy
           _Latitude (ARG)
           _Longitude (ARG)
       _fix
       _recebe_dados_gps
         _desliga_SPI
         _desliga_uart
         _inicializa_SPI
         _inicializa_uart
           _configura_baudrate_uart
             ___aldiv
         _verifica_recep_gps
       _verifica_fence_externo
         _armazena_latitude
           _Latitude
           _strcpy
             _Latitude (ARG)
             _Longitude (ARG)
         _armazena_longitude
           _Longitude
           _strcpy
             _Latitude (ARG)
             _Longitude (ARG)
         _calcula_diff_graus
           _diff_calc
             _atoi
               ___wmul
               _isdigit
             _strcpy
               _Latitude (ARG)
               _Longitude (ARG)
         _calcula_diff_minutos
           _diff_calc
             _atoi
               ___wmul
               _isdigit
             _strcpy
               _Latitude (ARG)
               _Longitude (ARG)
         _monta_sd
           _strlen
         _verifica_diferenca_graus
         _verifica_diferenca_minutos
         _verifica_plausibilidade_lat
         _verifica_plausibilidade_long
     _troca_de_tela *
       _Latitude
       _Longitude
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
         _fix (ARG)
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
           _fix (ARG)
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       _fix
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
     _verifica_dados_operacionais *
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
       _fix (ARG)
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _GPSRead
     _strcmp
     _stringcpy
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     220      21       26.6%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     22      CD       9       80.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FD       7       98.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     97      9D       5       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     31      46       1       74.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2AD      20        0.0%
DATA                 0      0     4CD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Wed May 04 16:25:27 2022

                         next_dir_entry@idx 00A6                    __end_of_mensagem_inicial 4808  
                       next_dir_entry@clust 00A4                                 _SSPSTATbits 000FC7  
                          ??_init_interrupt 0019                                          l68 5342  
              __size_of_escreve_inteiro_lcd 0036                    _verifica_diferenca_graus 2CE8  
                                        _fs 02CD                         ___wmul@multiplicand 001B  
                               _put_cluster 20BE                            disk_write@sector 006A  
                              ?_escalonador 0001                              create_chain@fs 00A6  
                          disk_write@result 0070                            ?_inicializa_uart 0001  
                                       l200 453A                                         l201 4542  
                                       l202 4544                                         l203 454C  
                                       l220 4928                                         l204 454E  
                                       l221 4930                                         l213 48FC  
                                       l205 4556                                         l222 4932  
                                       l206 4558                                         l223 493A  
                                       l215 4906                      __size_of_troca_de_tela 02BA  
                                       l144 2C14                                         l224 493C  
                                       l232 4A24                                         l225 4944  
                                       l217 4910                                         l250 484C  
                                       l242 4818                                         l226 4946  
                                       l218 4912                                         l251 484E  
                                       l219 4926                                         l252 4856  
                                       l244 4822                                         l181 5380  
                                       l253 4858                                         l254 4860  
                                       l246 482C                                         l183 5386  
                                       l255 4862                                         l191 4504  
                                       l256 486A                                         l248 4836  
                                       l257 486C                                         l249 4838  
                                       l193 450E                                         l195 4518  
                                       l197 4522                                         l198 4524  
                                       l199 4538                                         l671 5458  
                                       l568 5026                                         l584 4A8C  
                                       l665 54A4                                         l852 3472  
                                       l781 30E0                                         l855 3420  
                                       l778 30E8                                         l939 076E  
                                       l964 13B4                                         l969 13E0  
                                       l979 1522                                         _PCL 000FF9  
                                       _PR2 000FCB                                         _fil 01B4  
                          ??_init_oscilador 0019                                         _fix 54D6  
                                       _isr 0008                                disk_read@res 0072  
                                       prod 000FF3                              ??_create_chain 00A2  
                                       tosl 000FFD                                         wreg 000FE8  
                 __size_of_write_timer_zero 000A                             create_chain@mcl 00A4  
                           create_chain@ncl 00AC                             create_chain@scl 00AA  
                   ??_escreve_frase_ram_lcd 001E                                        l1106 4FDC  
           verifica_diferenca_minutos@point 0021                                        l1053 0B72  
                                      l1057 0D82                                        l1139 111C  
                                      l1156 126A                                        l2125 4C1E  
                                      l2054 49A8                                        l2135 4F3E  
                                      l1416 467C                                        l2323 3E9C  
                                      l2341 43B6                                        l1438 1920  
                                      l1456 1AD0                                        l1673 4780  
                                      ?_fix 0019                                        l8011 522A  
                                      l7221 33F8                                        l8041 4D70  
                                      l7233 3410                                        l8051 4DA8  
                                      l7251 343A                                        l7171 3360  
                                      l8045 4D88                                        l7261 3454  
                                      l7237 3418                                        l7229 3408  
                                      l7413 3DD6                                        l7405 3DB2  
                                      l7191 33CA                                        l7409 3DC0  
                                      l7259 3452                                        ?_isr 0001  
                                      l7269 3470                                        l7381 3D38  
                                      l8501 2DEA                                        l7279 348C  
                                      l8511 2E7A                                        l7465 4F52  
                                      l7393 3D72                                        l8521 2E8C  
                                      l8601 2A58                                        l7467 4F56  
                                      l7395 3D7E                                        l7387 3D50  
                                      l8611 2A74                                        l7901 2788  
                                      l6933 515A                                        l8517 2E84  
                                      l8461 2D24                                        l8445 2CFC  
                                      l8613 2A78                                        l8471 2DAC  
                                      l8455 2D18                                        l8439 2CF8  
                                      l8703 3FC0                                        l6929 514A  
                                      l8457 2D1C                                        l8633 2B1A  
                                      l8617 2A80                                        l8561 298A  
                                      l7923 2804                                        l7915 27C8  
                                      l8627 2B10                                        l8571 29A6  
                                      l8555 2986                                        l7909 27C4  
                                      l9621 38A8                                        l8485 2DC2  
                                      l8477 2DB6                                        l8573 29AA  
                                      l8637 2B22                                        l8741 400A  
                                      l8717 3FEE                                        l7951 2884  
                                      l7943 2848                                        l9543 5032  
                                      l9551 508C                                        l9631 38DC  
                                      l9615 3894                                        l9711 2C5C  
                                      l8495 2DDE                                        l8479 2DBE  
                                      l8807 40AC                                        l8671 3F5A  
                                      l7961 28C8                                        l7953 288A  
                                      l7937 2844                                        l7929 2808  
                                      l9641 3910                                        l9625 38CC  
                                      l9633 38E4                                        l8497 2DE2  
                                      l8593 2A4C                                        l8577 29B2  
                                      l8737 3FFC                                        l9651 3940  
                                      l8595 2A54                                        l8587 2A42  
                                      l8755 403C                                        l7981 290C  
                                      l9565 4A86                                        l9637 38F8  
                                      l9741 2CD4                                        l9725 2C84  
                                      l9805 4D00                                        l8773 4070  
                                      l8685 3F8C                                        l7975 2908  
                                      l7967 28CC                                        l7959 28BE  
                                      l7895 2784                                        l7991 2948  
                                      l9751 487E                                        l9671 2B64  
                                      l8769 406C                       _escreve_caractere_lcd 4808  
                                      l9755 48AA                                        l8787 409E  
                                      l8699 3FBC                                        l9693 2BDA  
                                      l9933 2FA0                                        l9925 2F1C  
                                      l9941 2FEE                                        l9853 4908  
                                      l9759 48AE                                        l9775 48D0  
                                      l9679 2BB6                                        l9783 4CD0  
                                      l9951 3042                                        l9839 544A  
                                      STR_1 6205                                        STR_2 61B2  
                                      l9929 2F98                                        l9881 481A  
                                      l9849 48FE                                        STR_3 6224  
                                      STR_4 61FA                                        l9787 4CFC  
                                      l9963 50E8                                        STR_5 6251  
                                      STR_6 624B                                        l9965 50F0  
                                      l9981 50FC                                        l9885 4824  
                                      STR_7 61C2                                        STR_8 614B  
                                      STR_9 61DF                                        l9969 50F4  
                                      l9889 482E                                        l9995 4A30  
                                      l9999 4A3E                              timer_dois@flag 0042  
                                      _BRGH 007D62                             __end_of_GPSRead 254E  
                                      _CREN 007D5C                                        _T0IF 007F92  
                              ?_escreve_SPI 0001                             __end_of_GPSHour 5252  
                                      _LATB 000F8A                                        _PIE1 000F9D  
                                      u7010 33A6                                        _RCIF 007CF5  
                                      u8300 27B4                                        u8400 28F8  
                                      u8320 27F4                                        u8307 27AA  
                                      u8420 2938                                        u8340 2834  
                                      u7460 3D82                                        u9300 2E82  
                                      u7550 4F76                                        u9230 2DB4  
                                      u8407 28EE                                        u8327 27EA  
                                      u8360 2874                                        u8427 292E  
                                      u8347 282A                                        u8380 28B6  
                                      u9260 2DD0                                        u9500 2B18  
                                      u7557 4F6C                                        u9190 2D0A  
                                      u9430 2A4A                                        u8367 286A  
                                      u9610 3F88                                        u8387 28AC  
                                      u9460 2A66                                        u9620 3F98  
                                      u6990 3396                                        u9390 2998  
                                      u9630 3FA4                                        u9740 401E  
                                      u9660 3FD4                                        u6997 338C  
                                      u9830 4088                                        u9590 3F72  
                                      u9760 4034                                        u9680 3FEA  
                                      u9770 4038                                        u9780 4048  
                                      u9790 4054                                        _TMR0 000FD6  
                                      _TMR2 000FCC                                        _SPEN 007D5F  
                                      _TXEN 007D65                                        _SYNC 007D64  
                              trace_path@dj 00A8                                trace_path@fn 00A9  
                              trace_path@ds 00B9                                trace_path@fs 00B5  
                             ?_make_dirfile 0021                             __end_of_GPSyear 5296  
                                      _Term 0043                                        _atoi 3DE8  
                                      _main 5114                                        _fsid 0130  
                                      _itoa 50B2                     __end_of_fence_diff_long 60BB  
                                      fsr1h 000FE2                                        fsr2h 000FDA  
                                      indf1 000FE7                                        indf2 000FDF  
                                      fsr1l 000FE1                                        fsr2l 000FD9  
                                      btemp 0047                                        _utoa 433E  
                                      _sync 4C7A                               disk_ioctl@cmd 0019  
                             disk_read@buff 0068                               disk_ioctl@res 001D  
                             disk_read@pdrv 006F                                        prodh 000FF4  
                                      prodl 000FF3                                        start 000E  
                __end_of_calcula_diff_graus 3C4C                     ?_verifica_fence_externo 0001  
                 sdc_disk_initialize@buff_i 0067                                ___param_bank 000000  
                 sdc_disk_initialize@count1 0063                   sdc_disk_initialize@count2 0069  
                               _string_dado 0207                                       ??_fix 001B  
                                     ??_isr 000C                     __size_of_escrita_sdcard 0124  
                        __size_of_GPSMinute 0022                          __size_of_GPSSecond 0022  
          __size_of_configura_baudrate_uart 010A                                       l10003 4A4C  
                                     l10011 4A5A                                       l10013 4A74  
                                     l10031 2598                                       l10023 4C52  
                                     l10113 228E                                       l10051 26C6  
                                     l10019 4C2A                                       l11003 1FC4  
                                     l10109 2264                                       l10141 4B4E  
                                     l10055 26E6                                       l10127 22F4  
                                     l10151 4492                                       l10311 1682  
                                     l11015 2052                                       l10065 274C  
                                     l10129 2310                                       l10241 318C  
                                     l10209 311E                                       l10137 4B3A  
                                     l10305 166C                                       l11025 208C  
                                     l10067 2766                                       l10091 21B8  
                                     l10083 2144                                       l10075 20E4  
                                     l10227 3152                                       l10147 4474  
                                     l10403 1822                                       l10315 168E  
                                     l11107 0726                                       l11043 0604  
                                     l11035 05AC                                       l11211 4966  
             calcula_diff_graus@select_data 002C                                       l10245 31C8  
                                     l10501 444A                                       l10413 184A  
                                     l10325 16C2                                       l11053 0628  
                                     l11037 05B2                                       l11213 4972  
                                     l10271 4DE0                                       l10335 16E6  
                                     l11143 09CC                                       l11071 0658  
                                     l11161 3776                                       l10089 2184  
                                     l10193 30CA                                       l10185 30A0  
                                     l10169 44EC                                       l11137 09B6  
                                     l11129 08A8                                       l11081 0686  
                                     l10257 3EF8                                       l11225 4346  
                                     l11067 0654                                       l10283 4ED4  
                                     l10291 4EF4                                       l11307 13BC  
                                     l11219 499A                                       l10611 0578  
                                     l11235 4378                                       l10461 5346  
                                     l10277 4DF0                                       l10197 30F0  
                                     l11421 0D36                                       l10429 18A8  
                                     l11325 147C                                       l10541 0186  
                                     l10605 051C                                       l11181 458C  
                                     l11261 50CA                                       l11175 382A  
                                     l10447 190C                                       l10439 18D0  
                                     l10359 176A                                       l10711 3320  
                                     l11327 14A8                                       l10615 058A  
                                     l10543 01A6                                       l11433 0D96  
                                     l10721 46C2                                       l10393 17F6  
                                     l10633 51C2                                       l11089 0690  
                                     l10553 01FE                                       l10529 00CC  
                                     l11185 45D2                                       l11513 1026  
                                     l10803 4772                                       l10387 17E6  
                                     l10635 51C8                                       l10651 51CC  
                                     l11099 0704                                       l11339 1500  
                                     l10563 02E2                                       l10571 0336  
                                     l11187 45DA                                       l11531 107E  
                                     l10627 5374                                       l11445 0DDE  
                                     l11437 0DA0                                       l10493 43D4  
                                     l10725 46C6                                       l11277 1320  
                                     l10581 03B2                                       l11613 1278  
                                     l11509 1010                                       l10661 4E4C  
                                     l11197 3B5C                                       l11701 3D0C  
                                     l10813 4BEC                                       l11447 0DF2  
                                     l11455 0E62                                       l11471 0F5C  
                                     l11463 0EF6                                       l10903 1CB6  
                                     l11359 1536                                       l11519 1052  
                                     l11623 12E0                                       l11391 4E9C  
                                     l10815 4BF4                                       l10673 4CB0  
                                     l10737 470C                                       l10921 1D48  
                                     l10593 046C                                       l11617 1296  
                                     l11609 1258                                       l11553 1104  
                                     l11537 10B2                                       l11393 4EA4  
                                     l10761 3DEC                                       l11713 4510  
                                     l10825 4C14                                       l10841 4F34  
                                     l10833 4F14                                       l10499 4442  
                                     l10579 03A4                                       l11547 10F4  
                                     l11483 0F8E                                       l11387 4E88  
                                     l10659 4E44                                       l10771 3E26  
                                     l10835 4F1C                                       l12275 4164  
                                     l10917 1D3C                                       l10909 1CDE  
                                     l10597 04E8                                       l11573 1164  
                                     l11557 1110                                       l11389 4E8C  
                                     l11653 3BD4                                       l11645 3B80  
                                     l11717 451A                                       l11709 4506  
                                     l11901 19B2                                       l12381 513A  
                                     l10791 4732                                       l10855 42CC  
                                     l10847 42AC                                       l10695 324A  
                                     l10935 1DA6                                       l11575 117C  
                                     l11567 1140                                       l11479 0F84  
                                     l10775 3E38                                       l10759 3DEA  
                                     l11655 3BD6                                       l11671 3C3C  
                                     l12287 41FA                                       l12375 512C  
                                     l10793 473E                                       l10865 430E  
                                     l10953 1DDE                                       l10929 1D8A  
                                     l11585 11A4                                       l11825 51A6  
                                     l11665 3C32                                       l11657 3BDE  
                                     l10867 4316                                       l10971 1EDC  
                                     l10947 1DCA                                       l10939 1DB2  
                                     l10891 1C98                                       l11595 11DE  
                                     l11499 0FE4                                       l11827 51AC  
                                     l10779 3E6C                                       l11667 3C34  
                                     l11683 3CA4                                       l11675 3C50  
                                     l10973 1EEE                                       l11589 11B0  
                                     l11781 3702                                       l11685 3CA6  
                                     l11917 1A16                                       l10895 1C9C  
                                     l11775 36D8                                       l11695 3D02  
                                     l11687 3CAE                                       l11863 4FBC  
                                     l11943 1A98                                       l10993 1F84  
                                     l10969 1EB6                                       l11777 36E8  
                                     l11769 3640                                       l11697 3D04  
                                     l11865 4FC0                                       l11945 1A9C  
                                     l11881 1958                                       l10979 1F16  
                                     l11955 1ACA                                       l10989 1F80  
                                     l11969 1B2C                                       l11995 1BC0  
                                     l11899 19AE                                       l11999 1BC6  
                           __end_of___aldiv 3DE8                                       ?_atoi 001F  
                                     ?_main 0001                                       ?_itoa 0028  
                                     STR_10 621A                                       STR_11 6210  
                                     STR_12 622E                                       STR_20 6130  
                                     STR_13 6245                                       STR_21 6182  
                                     STR_14 627A                                       STR_30 626B  
                                     STR_22 61ED                                       STR_23 6273  
                                     STR_15 6266                                       STR_31 6160  
                                     STR_24 6277                                       STR_32 61D1  
                                     STR_16 6109                                       STR_25 6261  
                                     STR_33 6237                                       STR_17 6192  
                                     STR_34 627D                                       STR_26 623E  
                                     STR_18 61A2                                       STR_27 625C  
                                     STR_19 6171                                       STR_28 6257  
                                     STR_29 626F                                ?_leitura_SPI 0001  
                           __end_of___lldiv 4792                                       ?_utoa 0020  
                                     ?_sync 0001                                       u11020 50AE  
                                     u11040 4A96                                       u11200 2CE2  
                                     u12100 1872                                       u11070 38A2  
                                     u12030 179A                                       u11055 3846  
                                     _T0CON 000FD5                                       u11145 2B8A  
                                     u11410 2F18                                       u12050 17A6  
                                     u11500 2562                                       u12140 18E8  
                                     u13100 05D2                                       u13020 1F72  
                                     u13005 1F32                                       u12150 191A  
                                     u11175 2C30                                       u11600 2140  
                                     u12160 4400                                       u13120 05F8  
                                     u12400 0524                             __end_of___llmod 49BA  
                                     u13050 1FC0                                       u14010 10F2  
                                     u13107 05C8                                       u12315 024A  
                                     u12180 4432                                       u11700 44B2  
                                     u13300 09CA                                       u12500 3246  
                                     u11525 25C8                                       u11390 2EDA  
                                     u11470 4C4A                                       u12167 43F6  
                                     u13127 05EE                                       u11480 4C72  
                                     u14120 1238                                       u12440 4E74  
                                     _T2CON 000FCA                                       u11545 2642  
                                     u11625 21E4                                       u13250 0722  
                                     u12530 32C6                                       u12187 4428  
                                     u13315 0A50                                       u12515 3256  
                                     u12355 0322                                       u12460 4CAC  
                                     u11900 4DDC                                       u11740 308A  
                                     u13180 0650                                       u12620 4FD2  
                                     u14220 3BEC                                       u12605 353E  
                                     u11477 4C40                                       u13405 3AB6  
                                     u12710 4742                                       u11750 3096  
                                     u12550 46C2                                       u13350 45AC  
                                     u12615 355E                                       u11575 26D2  
                                     u11655 2270                                       u11487 4C68  
                                     u12447 4E6A                                       u11760 30C0  
                                     u13520 131C                                       u14400 457A  
                                     u13425 3AF8                                       u13290 09B2  
                                     u12810 42FC                                       u13370 45FA  
                                     u14170 12B8                                       u14250 3C5E  
                                     u11595 2114                                       u13435 3B30  
                                     u14411 5050                                       u11860 31B6  
                                     u12820 4322                                       u13620 1478  
                                     u13460 4976                                       u12740 4BF8  
                                     u13285 08C0                                       u13357 45A2  
                                     u11790 3114                                       u11950 169E  
                                     u12830 433A                                       u12670 3E34  
                                     u14190 3B8E                                       u11960 16AE  
                                     u12840 1C82                                       u14280 3CBC  
                                     u12585 34F2                                       u13377 45F0  
                                     u11970 16BA                                       u14450 466A  
                                     u12770 4F20                                       u14530 1928  
                                     u12595 350E                                       u11971 16B8  
                                     u13395 3A7C                                       u13660 151E  
                                     u14540 192E                                       u15180 47A0  
                                     u11990 1708                                       u12790 42C8  
                                     u13590 13DC                                       u14710 1B7E  
                                     u15190 47B8                                       u15407 17AC  
                                     u12847 1C78                                       u14720 1BB4  
                                     u15168 41B8                                       u15417 1850  
                                     u15169 41CC                                       u13850 0DFE  
                                     u14730 1BCE                                       u15427 5012  
                                     u13940 0FDA                                       u14660 1ADC  
                                     u14580 19BA                                       u12885 1CFA  
                                     u15357 47F4                                       u13870 0E76  
                                     u12990 1F12                                       u14718 1B80  
                                     u14590 19C2                                       u13775 0BE6  
                                     u15367 4226                                       u13880 0EBC  
                                     u14736 1BD0                                       u14728 1BB6  
                                     u14680 1AF8                                       u15377 4242  
                                     u13970 1060                                       u14690 1B18  
                                     u15387 425E                                       u13885 0EB2  
                                     u15397 163A                                       u14688 1AFA  
                                     u14698 1B1A                             __end_of___lwdiv 4C28  
                           __end_of___lwmod 4F48                            __end_of_GPSMonth 52DA  
                                     _RCREG 000FAE                                       _RCSTA 000FAB  
                                     _SPBRG 000FAF                 ?_verifica_diferenca_minutos 0001  
                                     _TRISA 000F92                                       _TRISB 000F93  
                                     _TRISC 000F94                                       _TRISD 000F95  
                                     _TRISE 000F96                             __end_of_f_close 5196  
                             trace_path@dir 00AC                                       _TXSTA 000FAC  
                                     _FatFs 0039                             __end_of_f_lseek 0F6E  
                       ___lmul@multiplicand 001D                  __size_of_config_timer_dois 000E  
                           __end_of_f_mount 4DAC                             __end_of_f_write 059C  
                __size_of_config_timer_zero 001A                               get_cluster@bc 0099  
                             get_cluster@fs 009B                               get_cluster@wc 0093  
                           __end_of_command 4AD2                                       _delay 537C  
                           clust2sect@clust 0025                             __end_of_fprintf 12EC  
                                     _fputc 4FCA                                       _fputs 4580  
                           __end_of_isdigit 537C                    __size_of_escreve_cmd_lcd 008C  
                                     atoi@a 0024                                       atoi@s 001F  
                            ??_make_dirfile 0023                              disk_ioctl@buff 001A  
                                     pclath 000FFA                              disk_read@count 006E  
                                     tablat 000FF5                              disk_ioctl@pdrv 001C  
                          ?_dados_gps_to_sd 0001                             __end_of_proceed 54A0  
                                     plusw1 000FE3                                       plusw2 000FDB  
                  recebe_dados_gps@flag_gps 002D                                       ttemp5 0048  
                                     ttemp6 004B                                       ttemp7 004F  
                                     utoa@c 0027                                       utoa@v 0025  
                                     status 000FD8                               _troca_de_tela 191E  
                                     wtemp8 0048                          _armazena_longitude 53D0  
                             disk_write@res 0072              __end_of_verifica_fence_externo 468E  
                           __initialization 40B8                         disk_initialize@pdrv 002D  
                       ?_armazena_longitude 0001                         disk_initialize@stat 002E  
                              __end_of_atoi 3EA6                                __end_of_main 5140  
                              clust2sect@fs 002E                                __end_of_itoa 50E4  
                              __end_of_utoa 43D2                                __end_of_sync 4CCC  
                        _inicializa_tarefas 49BA                             escalonador@cont 00F6  
                          __end_of_Latitude 54D6                         reserve_direntry@dir 00AF  
                         create_chain@clust 00A0                                 auto_mount@p 009F  
                         create_chain@cstat 00A8                               sdc_reset@buff 002B  
                                    ??_atoi 0021                                      ??_main 0032  
                                    ??_itoa 002D                                      ??_utoa 0025  
                                    ??_sync 0031                               __activetblptr 000002  
                       ?_inicializa_tarefas 0001                        __end_of_desliga_uart 5488  
                                 ??_GPSRead 000A                                   ??_GPSHour 001B  
                            _next_dir_entry 31D2                        ??_armazena_longitude 0021  
                      __size_of_desliga_SPI 000C                           get_fattime@f_time 0021  
                                 ??_GPSyear 001B                            ??_sdc_disk_write 002C  
                                    ?_delay 0001                      ?_escreve_caractere_lcd 0001  
                                    _ADCON1 000FC1                                      ?_fputc 00CC  
                          ___llmod@dividend 0019                                      ?_fputs 00D3  
                        auto_mount@bootsect 0097                                      _INT0IE 007F94  
                                    _INT0IF 007F91                               ?_dummy_clocks 0001  
                         __end_of_GPSMinute 52FC                           __end_of_GPSSecond 52B8  
                                    i2l1388 3A3E                                      _PCLATH 000FFA  
                                    _INTCON 000FF2                                      i2l9387 543A  
                                    _GPSDay 52FC                     __size_of_inicializa_SPI 0020  
                            ?_troca_de_tela 0001                                      _TMR0IF 007F92  
                        auto_mount@maxclust 0093                    __end_of_recebe_dado_uart 543E  
                                    _SPPCFG 000F63                                      _SPPCON 000F65  
                                    _SSPBUF 000FC9                    __end_of_recebe_dados_gps 51BE  
                  __size_of_sdc_disk_status 0010                            __end_of_check_fs 4710  
                      ??_inicializa_tarefas 0019                           ?_disparo_gravacao 0001  
                            trace_path@dptr 00BA                              trace_path@path 00AA  
                    reserve_direntry@sector 00B4                    __size_of_disk_initialize 0026  
                __end_of_posicao_cursor_lcd 4A78                          ??_disparo_gravacao 00F1  
                            auto_mount@path 007B                                ?_move_window 0073  
                      __end_of_create_chain 31D2                                _dado_arquivo 0250  
                    __size_of_init_hardware 0016                              auto_mount@stat 00A2  
                      __size_of_get_fattime 0156                                put_cluster@p 009C  
              ?_verifica_dados_operacionais 0001                        __size_of_get_cluster 0222  
                                    ___lmul 4B2A                                   ??___aldiv 0021  
                      __size_of_disk_status 0030                                      ___wmul 51E4  
                        __size_of_Longitude 000A                                   ??___lldiv 0021  
                                    _f_open 12EC                                   ??___llmod 0021  
                                 ??___lwdiv 001D                                      _f_sync 370A  
                                 ??___lwmod 001D                                      _buffer 01D0  
                                    _estado 00FC                                      _memcmp 43D2  
                                    _memcpy 4EC2                            __end_of_init_lcd 42A2  
                                    _memset 5140                                   ??_f_close 0031  
                                    _rawFix 01F4                                      clear_0 4112  
                                    clear_1 4124                                      clear_2 4130  
                                    clear_3 414A                                   ??_f_lseek 00B4  
                                 ??_f_mount 001B                    configura_baudrate_uart@x 002B  
                                 ??_f_write 00B4                                      _strcat 4E7E  
                                    _strcmp 4D1A                         _sdc_disk_initialize 161E  
                                 ??_command 0023                                 GPSRead@buff 000A  
                                    _strcpy 4E3A                                      _strlen 4F48  
                          put_cluster@clust 0088                                      fputc@c 00D0  
                        get_cluster@fatsect 0095                            __end_of_monta_sd 2976  
                  __end_of_reserve_direntry 20BE                            __end_of_validate 4DF4  
                    __end_of_next_dir_entry 3336                                   ??_fprintf 00EF  
                              __pdataCOMRAM 0046                                      fputs@n 00D7  
                                 ??_isdigit 0019                        __size_of_escalonador 00A6  
                          __end_of_response 5494                                __mediumconst 608A  
                           disk_read@sector 006A                             disk_read@result 0070  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                                   ??_proceed 001B  
                          _write_timer_zero 54B8                                      sync@fs 0088  
                 escreve_caractere_lcd@data 001B                              ??_dummy_clocks 0019  
                       _escreve_inteiro_lcd 5046                             sdc_disk_write@j 0065  
                                __accesstop 0060                     __end_of__initialization 4150  
                      ?_sdc_disk_initialize 0001                              disk_write@buff 0068  
                            disk_write@pdrv 006F                        __size_of_escreve_SPI 0010  
                             ___rparam_used 000001                  ??_verifica_diferenca_graus 0019  
                         ??_escreve_cmd_lcd 001B                ?_verifica_plausibilidade_lat 0001  
              __end_of_calcula_diff_minutos 3D1C                                   ?_GPSMonth 0019  
                            __pcstackCOMRAM 0001                 __end_of_endereco_cursor_lcd 4954  
                              __pidataBANK1 54F2                                __pidataBANK2 54F9  
                         ?_mensagem_inicial 0001                     _configura_baudrate_uart 3A6A  
                             __end_of_delay 539A                              _escrita_sdcard 35E6  
                             __end_of_fputc 500A                               __end_of_fputs 460A  
                      ?_escreve_inteiro_lcd 002E               ??_verifica_dados_operacionais 0019  
                        ??_mensagem_inicial 001F                          __size_of_diff_calc 0058  
                      __end_of_make_dirfile 3490                                ?_put_cluster 0088  
                         reserve_direntry@c 00BB                           reserve_direntry@n 00B8  
                        _tarefa_em_execucao 003D                  __end_ofi2_write_timer_zero 54EA  
                           ?_next_dir_entry 0031                      __size_of_sdc_disk_read 0124  
           configura_baudrate_uart@baudrate 0027                        reserve_direntry@dptr 00B9  
                      __size_of_leitura_SPI 000C                               _init_hardware 5404  
                              auto_mount@fs 00A7                          __size_of_disk_read 0070  
                __end_of_verifica_recep_gps 522E                                     ??_delay 0019  
                            sdc_reset@count 0029                                     ??_fputc 0031  
                                   ??_fputs 0031                             ??_troca_de_tela 0030  
                         __end_of_Longitude 54CC                mensagem_inicial@msg_linha_um 0060  
                                __pbssBANK0 00F7                                  __pbssBANK1 0100  
                                __pbssBANK2 0200              __size_of_escreve_frase_ram_lcd 0052  
                                   ?_GPSDay 0019               __end_of_escreve_frase_ram_lcd 4C7A  
                     ??_sdc_disk_initialize 002C                                   ?_Latitude 0019  
                 escreve_inteiro_uart@F3215 02C6                                  ??_GPSMonth 001B  
             ??_verifica_plausibilidade_lat 0019                      __end_of_escrita_sdcard 370A  
                        __size_of_sdc_reset 0090                          troca_de_tela@state 003C  
                                   ?___lmul 0019                           ??_sdc_disk_status 0019  
                             make_dirfile@a 0029                               make_dirfile@b 0027  
                             make_dirfile@c 002B                               make_dirfile@n 002A  
                             make_dirfile@t 0028                                     ?___wmul 0019  
                     mensagem_inicial@F3666 60F8                       mensagem_inicial@F3668 60E7  
                     ??_escreve_inteiro_lcd 0030                                     ?_f_open 00C0  
                                _fence_flag 0032                                     ?_f_sync 008A  
                         ??_disk_initialize 002D                       __size_of_desliga_uart 000E  
                                   ?_memcmp 0019                                     ?_memcpy 0019  
                   calcula_diff_graus@count 002E                                     ?_memset 0019  
                            ___lmul@product 0021                     calcula_diff_graus@point 002D  
                                   ?_strcat 0019                                     ?_strcmp 0001  
                                   ?_strcpy 001B                                     ?_strlen 0019  
                        _calcula_diff_graus 3B74                                     i2l12113 2468  
                                   i2l12105 244C                                     i2l12131 24B8  
                                   i2l12123 249C                                     i2l12115 246E  
                                   i2l12141 24EC                                     i2l12133 24BE  
                                   i2l12071 2372                                     i2l12063 234E  
                                   i2l12055 232C                                     i2l12153 2524  
                                   i2l12073 237C                                     i2l12083 23CE  
                                   i2l12059 233C                                     i2l12149 251C  
                                   i2l12341 39FE                                     i2l12333 39E8  
                                   i2l12317 39AA                                     i2l12087 23EE  
                                   i2l12159 2538                                     i2l12097 241E  
                                   i2l12089 23F2                                     i2l12353 3A2A  
                                   i2l12345 3A0C                                     i2l12329 39BA  
                                   i2l12355 3A36                                     i2l11843 4D1C  
                                   i2l11845 4D24                                     i2l11837 4DF8  
                                   _INTCON2 000FF1                                     _INTCON3 000FF0  
                            ?_init_hardware 0001                                   ?_check_fs 0073  
                                _disk_ioctl 533E                                     _GPSRead 2324  
                                   _GPSHour 522E                                  _disk_write 4CCC  
                                   _GPSyear 5274                              remove_chain@fs 00A6  
                       ?_calcula_diff_graus 0001        __size_of_verifica_dados_operacionais 000E  
                                   _SSPCON1 000FC6                    __size_of_inicializa_uart 0022  
                                   _SSPSTAT 000FC7                                  _clust2sect 3EA6  
                            _inicializa_SPI 531E                             trace_path@clust 00B7  
                         __end_of_diff_calc 4B2A                             __size_of_GPSDay 0022  
                                ??_Latitude 001B                               ?_remove_chain 00A0  
                     __size_of_create_chain 018C                                   ?_init_lcd 0001  
                        __size_of_stringcpy 0046                   calcula_diff_minutos@count 002E  
                             _sdc_disk_read 382E                   calcula_diff_minutos@point 002D  
                              _desliga_uart 547A                                  _auto_mount 059C  
                                   __Hparam 0000                   ??_configura_baudrate_uart 0060  
  verifica_diferenca_graus@point_index_long 001F                                     __Lparam 0000  
                                 ?_monta_sd 001D                                   ?_validate 001F  
                           ?_escrita_sdcard 0001                           __end_of_disk_read 48EA  
                             put_cluster@bc 009A                                   ?_response 0001  
   verifica_diferenca_graus@point_index_lat 001E                               put_cluster@fs 009E  
                      ??_calcula_diff_graus 002C                                     ___aldiv 3D1C  
                                f_close@res 0031                             __size_of___lmul 0056  
                                   ___lldiv 4710                             __size_of___wmul 0026  
                                   ___llmod 4954                        __size_of_move_window 01AA  
                                check_fs@fs 0079                                     ___lwdiv 4BD6  
                                   ___lwmod 4F06                             __size_of_f_open 0332  
                           __size_of_f_sync 0124                        __end_of_dummy_clocks 5046  
                                   _f_close 516C                                     __pcinit 40B8  
                           __size_of_memcmp 0092                             __size_of_memcpy 0044  
                           __size_of_memset 002C                                     _f_lseek 0AE4  
                                _init_ports 539A                                     __ramtop 0800  
                                   _f_mount 4D64                                     __ptext0 5114  
                                   __ptext1 4792                                     __ptext2 4204  
                                   __ptext3 5404                                     __ptext4 539A  
                                   __ptext5 54EA                                     __ptext6 541A  
                                   __ptext7 53B6                                     __ptext8 54B8  
                                   __ptext9 545E                                     _f_write 0012  
                                   _command 4A78                                   _T0CONbits 000FD5  
                       auto_mount@totalsect 009B                             __size_of_strcat 0044  
                           __size_of_strcmp 004A                             __size_of_strcpy 0044  
                           __size_of_strlen 0042                 endereco_cursor_lcd@endereco 001B  
                                   _fprintf 0F6E                                __size_of_fix 000A  
                                   _rawDate 01E7                                     _isdigit 535E  
                              __size_of_isr 3A62        __size_of_verifica_plausibilidade_lat 00B0  
                   ??_escreve_caractere_lcd 001B                                  ??_check_fs 0077  
                                   _rawTime 01DC                            ___aldiv@dividend 0019  
                      _calcula_diff_minutos 3C4C                                stringcpy@chr 0009  
                              stringcpy@dir 0005                                     _time_sd 0037  
                              _create_chain 3046                                     _proceed 5494  
                   __size_of_init_interrupt 0012                          _point_buff_gps_lat 00F9  
                         __end_of_sdc_reset 44F4             calcula_diff_minutos@select_data 002C  
                    __end_of_inicializa_SPI 533E                                  f_lseek@ofs 00B0  
                            __pintcode_body 3952                                  f_lseek@res 00C4  
                      end_of_initialization 4150        __end_of_verifica_plausibilidade_long 4008  
     __size_of_verifica_plausibilidade_long 00B0                _verifica_plausibilidade_long 3F58  
                                f_open@mode 00C4                                  f_open@path 00C2  
                            ??_remove_chain 00A2                                     isr@cont 0018  
                                   memcmp@n 001D                                     memcpy@d 0020  
                                   memcpy@n 001D                                     memcpy@s 0022  
                   __size_of_init_oscilador 0008                                     fputc@bw 00D1  
                                   itoa@buf 0028                                     memset@c 001B  
                                   itoa@val 0029                                     memset@n 001D  
                                   memset@p 001F                               __Lmediumconst 608A  
                                ??_init_lcd 001C                                     int_func 3952  
                         ?_recebe_dado_uart 0001            __end_of_verifica_diferenca_graus 2E9C  
                           disk_status@pdrv 001D                             disk_status@stat 001E  
                            ?_sdc_disk_read 0025                           ?_recebe_dados_gps 0001  
                                 i2u1522_40 399A                                   i2u1523_48 399C  
                                 i2u1449_40 4D58                                   _GPSMinute 52DA  
                                 _GPSSecond 5296                      write_timer_zero@timer0 0019  
                           ___lldiv@divisor 001D                               _rawSatellites 0129  
                                f_mount@drv 001B                          ??_recebe_dado_uart 0001  
                           ___lldiv@counter 0025                                  ??_monta_sd 001F  
                        ??_recebe_dados_gps 002D                                  ??_validate 0023  
                     __size_of_make_dirfile 015A                    __size_of_dados_gps_to_sd 0056  
                            _fence_diff_lat 60BB                                  ??_response 0019  
                                 _RCSTAbits 000FAB                    __end_of_write_timer_zero 54C2  
                          ___aldiv@quotient 0023                                     postdec1 000FE5  
                                   postdec2 000FDD                                     postinc0 000FEE  
                                   postinc1 000FE6                                     postinc2 000FDE  
                                   utoa@buf 0020                                     utoa@val 0021  
                                _wait_ready 507C                                     strcmp@r 0007  
                                   strlen@s 0019                                   _PORTBbits 000F81  
                 __size_of_disparo_gravacao 0040                                   _PORTDbits 000F83  
                                 _PORTEbits 000F84                             ??_init_hardware 001B  
                                _trace_path 1BD8                          _posicao_cursor_lcd 4A1A  
                         __end_of_stringcpy 4E3A                               ??_desliga_SPI 0019  
                      __size_of_put_cluster 0266                       ?_calcula_diff_minutos 0001  
           __end_of_configura_baudrate_uart 3B74                                 ?_disk_ioctl 0019  
                         ?_reserve_direntry 00AE                                  f_write@btw 00B1  
                                f_write@res 00C0                                   _TRISBbits 000F93  
                               ?_disk_write 0068                                   _TRISCbits 000F94  
                                 _TRISDbits 000F95                            next_dir_entry@dj 0031  
                           _escreve_cmd_lcd 44F4                          ??_reserve_direntry 00B0  
               __size_of_armazena_longitude 001A                         ?_posicao_cursor_lcd 001C  
                           ?_inicializa_SPI 0001                             disk_write@count 006E  
                               ?_clust2sect 0025                            _put_cluster$1540 0092  
                          _put_cluster$1541 0094                                  command@CMD 0023  
                                command@CRC 0022                                  command@arg 001E  
                              _make_dirfile 3336               ?_verifica_plausibilidade_long 0001  
                            __end_of_GPSDay 531E                               ??_get_fattime 0060  
                         ??_inicializa_uart 002D                 __size_of_inicializa_tarefas 0060  
                                ?_GPSMinute 0019                                  ?_GPSSecond 0019  
                             ??_get_cluster 008A                      __end_of_fence_diff_lat 60E7  
                             ??_disk_status 001B                                 ?_auto_mount 007B  
                         _make_dirfile$1650 0025                             command@argument 0024  
                      ??_posicao_cursor_lcd 001D                           __size_of_GPSMonth 0022  
                            __end_of___lmul 4B80                              _temp_buff_long 028D  
                          ??_next_dir_entry 009D                              __end_of___wmul 520A  
                            __end_of_f_open 161E                               __pidataCOMRAM 5500  
                             ??_escalonador 00F4                                 ?_init_ports 0001  
                            __end_of_f_sync 382E                           _armazena_latitude 53EA  
                            __end_of_memcmp 4464                              __end_of_memcpy 4F06  
                            __end_of_memset 516C                          ?_armazena_latitude 0001  
                            __end_of_strcat 4EC2                              __end_of_strcmp 4D64  
                            __end_of_strcpy 4E7E                              __end_of_strlen 4F8A  
                          _time_atualizacao 0035                         start_initialization 40B8  
                               __end_of_fix 54E0                                 __end_of_isr 3A6A  
                 __size_of_mensagem_inicial 0076                          reserve_direntry@dj 00AE  
                       ??_armazena_latitude 0021                          reserve_direntry@fs 00BE  
                       __end_of_desliga_SPI 54B8                               ??_escreve_SPI 0019  
                  ??_verifica_fence_externo 002F                                    ??_GPSDay 001B  
                           _sdc_disk_status 543E                             ??_sdc_disk_read 002C  
                         auto_mount@fatsize 00A3                          i2_write_timer_zero 54E0  
                           ___llmod@divisor 001D                                   _Longitude 54C2  
                           _disk_initialize 51BE                             ___llmod@counter 0021  
                        _verifica_recep_gps 520A                           __size_of_Latitude 000A  
                     reserve_direntry@clust 00BC                     __size_of_sdc_disk_write 01B6  
                          _data_uart_recebe 003F                           wait_ready@timeout 0019  
                     __size_of_dummy_clocks 003C                               auto_mount@fmt 00A1  
                       __size_of_disk_ioctl 0020       verifica_diferenca_minutos@select_data 001D  
                       ?i2_write_timer_zero 0001                         __size_of_disk_write 004E  
                                  ??___lmul 0021                                  fprintf@fil 00D9  
                                fprintf@arp 02C0                                    ??___wmul 001D  
                                fprintf@res 02B4                                  fprintf@val 02BC  
                                fprintf@str 00DB                         __end_of_get_fattime 35E6  
                                  ??_f_open 00C5                   __end_of_armazena_latitude 5404  
                       ?_verifica_recep_gps 0001                                    ??_f_sync 0031  
                               ?_wait_ready 0001                                 __pdataBANK1 01F6  
                               __pdataBANK2 02C6                         __end_of_get_cluster 2770  
                                  ??_memcmp 001F                         __end_of_disk_status 5114  
                                  ??_memcpy 001F                         __size_of_clust2sect 00B2  
                                  ??_memset 001F                      sdc_disk_read@start_add 0061  
                      __end_of_remove_chain 433E                           ??_dados_gps_to_sd 0022  
                   sdc_disk_initialize@buff 006B                               ??_leitura_SPI 0019  
                   __end_of_escreve_cmd_lcd 4580                                    ??_strcat 001D  
                                  ??_strcmp 0005                                    ??_strcpy 001F  
                                  ??_strlen 001B                     sdc_disk_initialize@stat 0062  
                               ?_trace_path 00A8                      ??_calcula_diff_minutos 002C  
         __size_of_verifica_diferenca_graus 01B4                                _fprintf$2143 02B6  
              __size_of_endereco_cursor_lcd 006A                   ?_verifica_diferenca_graus 0001  
                               __pbssBIGRAM 02CD                               monta_sd@index 001F  
                               __pbssCOMRAM 0032                             _trace_path$1697 00B1  
                           _trace_path$1699 00B3                ??_verifica_diferenca_minutos 0019  
                                  ?_GPSRead 0001                                    ?_GPSHour 0019  
                             __pcstackBANK0 0060                               __pcstackBANK2 02A4  
                            _init_interrupt 541A                         __size_of_auto_mount 0548  
                      ??i2_write_timer_zero 0003                         __end_of_escalonador 4204  
               __end_of_sdc_disk_initialize 191E                                    ?_GPSyear 0019  
                         __size_of_check_fs 0082                                _isdigit$3166 001A  
                     diff_calc@p_buff_fence 0026                                check_fs@sect 0073  
                               _char_number 0045                        ??_verifica_recep_gps 0019  
                     diff_calc@p_buff_point 0028                                _dummy_clocks 500A  
                            _init_oscilador 54EA                       __end_of_troca_de_tela 1BD8  
                                  GPSRead@c 000B                            ??_escrita_sdcard 0032  
                       __size_of_init_ports 001C                                  ?_Longitude 0019  
                     _escreve_frase_ram_lcd 4C28                                 ??_GPSMinute 001B  
                               ??_GPSSecond 001B                                   _data_buff 0136  
                                 _data_hoje 0041                 __end_of_escreve_inteiro_lcd 507C  
                       __end_of_escreve_SPI 545E                           __size_of_init_lcd 009E  
                                 _diff_calc 4AD2                            ___lwdiv@dividend 0019  
                         delay@contador_int 001A                           delay@contador_ext 0019  
            ??_verifica_plausibilidade_long 0019         __end_of_verifica_dados_operacionais 547A  
               _verifica_dados_operacionais 546C                                   __pintcode 0008  
                             __pmediumconst 608A                                    ?___aldiv 0019  
                                 __ptext100 5296                                   __ptext101 52B8  
                                 __ptext110 54E0                                   __ptext102 52DA  
                                 __ptext111 542C                                   __ptext103 522E  
                                 __ptext112 2324                                   __ptext104 52FC  
                                 __ptext113 4DF4                                   __ptext105 54AC  
                                 __ptext114 4D1A                                   __ptext106 4B80  
                                 __ptext115 0000                                   __ptext107 2770  
                                 __ptext108 4F48                           __size_of_monta_sd 0206  
                                  ?___lldiv 0019                                    ?___llmod 0019  
                         __size_of_validate 0048                                    ?___lwdiv 0019  
                                  ?___lwmod 0019         __size_of_verifica_diferenca_minutos 01BC  
                         __size_of_response 000C                                    ?_f_close 0093  
                                 _disk_read 487A         verifica_diferenca_graus@select_data 001D  
                        _sinaliza_int_timer 003E                                    ?_f_lseek 00AE  
                                  ?_f_mount 0019                            _disparo_gravacao 4F8A  
                                  ?_f_write 00AE                                    ?_command 001E  
                    __end_of_init_interrupt 542C                                    ?_fprintf 00D9  
                                  ?_isdigit 0001                                 _desliga_SPI 54AC  
                       sdc_disk_read@p_buff 0025                     troca_de_tela@last_state 003B  
                       sdc_disk_read@length 0065                         sdc_disk_read@sector 0027  
                   __end_of_sdc_disk_status 544E              __size_of_escreve_caractere_lcd 0072  
             __end_of_escreve_caractere_lcd 487A                                    ?_proceed 0001  
                                 f_close@fp 0093                         __end_of_leitura_SPI 54AC  
                          ___lwdiv@quotient 001E                              __size_of_delay 001E  
                   __end_of_disk_initialize 51E4                      __end_of_init_oscilador 54F2  
                            __size_of_fputc 0040                              __size_of_fputs 008A  
                       make_dirfile@dirname 0022                                  validate@id 0021  
                                validate@fs 001F                                   _p_tarefas 0110  
                                 _rawCourse 0118             __size_of_verifica_fence_externo 0084  
                          make_dirfile@path 0021                                    _GPGGA_ok 0132  
                                 _sdc_reset 4464                         __size_of_wait_ready 0036  
                           ___aldiv@divisor 001D               verifica_diferenca_graus@point 0021  
                           ___aldiv@counter 0021                              ___wmul@product 001D  
                                  _LATBbits 000F8A                                   f_lseek@fp 00AE  
                                  _LATCbits 000F8B         __end_of_verifica_plausibilidade_lat 40B8  
               _verifica_plausibilidade_lat 4008                                    _GPRMC_ok 0134  
                                 f_open@dir 00DC                                   f_open@res 00DB  
                                  _PIE1bits 000F9D                                 _get_fattime 3490  
                              _rawLongitude 0273                         __size_of_trace_path 0278  
                               _get_cluster 254E                                  ?_diff_calc 0026  
                                  _GPSMonth 52B8                                 _disk_status 50E4  
                             ??_move_window 0077                                   f_mount@fs 0019  
                                  _PIR1bits 000F9E                               move_window@fs 0086  
               __size_of_calcula_diff_graus 00D8                           ?_write_timer_zero 0019  
                           remove_chain@nxt 00A4                  __size_of_armazena_latitude 001A  
                                 f_sync@dir 0091                                   f_sync@res 0090  
                                 f_sync@tim 008C                    posicao_cursor_lcd@coluna 001C  
                                ?_disk_read 0068                          ??_write_timer_zero 001B  
                                 f_write@cc 00C6                  posicao_cursor_lcd@endereco 001E  
                                 f_write@bw 00B3                                   f_write@fp 00AE  
                 __size_of_recebe_dado_uart 0012                                 _escalonador 415E  
                         ___wmul@multiplier 0019                   __size_of_recebe_dados_gps 0028  
                          ?_escreve_cmd_lcd 0001                 escreve_frase_ram_lcd@buffer 001C  
                          ??_inicializa_SPI 0019                             ?_init_interrupt 0001  
                              ??_disk_ioctl 001C                 verifica_diferenca_minutos@i 0022  
               verifica_diferenca_minutos@j 0020                                ??_disk_write 0030  
                              f_lseek@clust 00CD                             _inicializa_uart 5252  
                              f_lseek@csize 00C9                                f_lseek@ifptr 00C5  
                                 _stringcpy 4DF4                            __size_of_GPSRead 022A  
                          _mensagem_inicial 4792                            __size_of_GPSHour 0024  
                             _temp_buff_lat 0299                             ?_init_oscilador 0001  
                              ??_clust2sect 0029                            __size_of_GPSyear 0022  
                         ___lmul@multiplier 0019                                   copy_data0 40CC  
                                 copy_data1 40EC                                 _escreve_SPI 544E  
                             _flag_anomalia 00FB                                  ?_sdc_reset 0001  
                       sdc_reset@count_nosd 0027                                    _Latitude 54CC  
                  ?_configura_baudrate_uart 0027                      ?_escreve_frase_ram_lcd 001C  
                               ??_Longitude 001B                            auto_mount@chk_wp 007C  
                         move_window@sector 0073                              _sdc_disk_write 2B32  
                 __size_of_reserve_direntry 026E                    escreve_inteiro_lcd@F3223 01F6  
                              ??_auto_mount 007D                                    __Hrparam 0000  
                                 memcpy@tmp 001F                                    __Lrparam 0000  
                                 fprintf@cc 02C1                          __end_of_disk_ioctl 535E  
                     __size_of_remove_chain 009C                              put_cluster@val 008A  
                          get_cluster@clust 0088                          __end_of_disk_write 4D1A  
                              _SentenceType 0044                            __size_of___aldiv 00CC  
                    sdc_disk_initialize@ocr 0068                                monta_sd@dado 001D  
                    _verifica_fence_externo 460A                            __size_of___lldiv 0082  
                          __size_of___llmod 0066                               ??_put_cluster 008C  
                          __size_of___lwdiv 0052                                monta_sd@size 0020  
                          __size_of___lwmod 0042                                ??_init_ports 0019  
                       __end_of_move_window 3046                          __end_of_clust2sect 3F58  
                  escreve_inteiro_lcd@valor 002E                            __size_of_f_close 002A  
                  escreve_inteiro_lcd@texto 0060                            __size_of_f_lseek 048A  
                          __size_of_f_mount 0048                                 _leitura_SPI 54A0  
                          __size_of_f_write 058A          __end_of_verifica_diferenca_minutos 2B32  
                _verifica_diferenca_minutos 2976                            __size_of_command 005A  
                __end_of_armazena_longitude 53EA                       __end_of_init_hardware 541A  
                                  _check_fs 468E                                  strcat@from 001B  
                          __size_of_fprintf 037E                            __size_of_isdigit 001E  
                           ___lwdiv@divisor 001B                            ?_sdc_disk_status 0001  
                                ?_stringcpy 0001                               _time_recovery 012C  
                           ___lwdiv@counter 001D                          __end_of_auto_mount 0AE4  
                                  __ptext10 49BA                                    __ptext11 415E  
                                  __ptext20 44F4                                    __ptext12 191E  
                                  __ptext21 460A                                    __ptext13 4F8A  
                                  __ptext30 535E                                    __ptext22 3F58  
                                  __ptext14 546C                                    __ptext31 53D0  
                                  __ptext23 4008                                    __ptext15 5046  
                                  __ptext40 547A                                    __ptext32 54C2  
                                  __ptext24 2976                                    __ptext16 50B2  
                                  __ptext41 54D6                                    __ptext33 53EA  
                                  __ptext25 2CE8                                    __ptext17 433E  
                                  __ptext50 4954                                    __ptext42 35E6  
                                  __ptext34 54CC                                    __ptext26 3C4C  
                                  __ptext18 4F06                                    __ptext51 12EC  
                                  __ptext43 4E3A                                    __ptext35 5196  
                                  __ptext27 3B74                                    __ptext19 4BD6  
                                  __ptext60 5140                                    __ptext52 1BD8  
                                  __ptext44 4E7E                                    __ptext36 520A  
                                  __ptext28 4AD2                                    __ptext61 51BE  
                                  __ptext53 3336                                    __ptext45 531E  
                                  __ptext37 5252                                    __ptext29 3DE8  
                                  __ptext70 43D2                                    __ptext62 161E  
                                  __ptext54 1E50                                    __ptext46 0F6E  
                                  __ptext38 3A6A                                    __ptext71 4B2A  
                                  __ptext63 4464                                    __ptext55 31D2  
                                  __ptext47 4580                                    __ptext39 3D1C  
                                  __ptext80 370A                                    __ptext72 4D64  
                                  __ptext64 4A1A                                    __ptext56 3EA6  
                                  __ptext48 4FCA                                    __ptext81 4DAC  
                                  __ptext73 0AE4                                    __ptext65 48EA  
                                  __ptext57 42A2                                    __ptext49 0012  
                                  __ptext90 5488                                    __ptext82 50E4  
                                  __ptext74 3046                                    __ptext66 4C28  
                                  __ptext58 4EC2                                    __ptext91 5494  
                                  __ptext83 543E                                    __ptext75 20BE  
                                  __ptext67 4808                                    __ptext59 059C  
                                  __ptext92 4A78                                    __ptext84 4C7A  
                                  __ptext76 254E                                    __ptext68 537C  
                                  __ptext93 507C                                    __ptext85 2E9C  
                                  __ptext77 51E4                                    __ptext69 468E  
                                  __ptext94 544E                                    __ptext86 4CCC  
                                  __ptext78 4710                                    __ptext95 500A  
                                  __ptext87 2B32                                    __ptext79 516C  
                                  __ptext96 54A0                                    __ptext88 487A  
                                  __ptext97 533E                                    __ptext89 382E  
                                  __ptext98 3490                                    __ptext99 5274  
                          __size_of_proceed 000C                                    _filename 0264  
                               _rawAltitude 0200                            ?_disk_initialize 0001  
                            _timeout_tarefa 012E                          sdc_disk_read@count 002B  
                                strcpy@from 001D                         escrita_sdcard@f_fix 0040  
                __end_of_inicializa_tarefas 4A1A                    i2write_timer_zero@timer0 0001  
                    __end_of_sdc_disk_write 2CE8                                   monta_sd@i 0021  
                                  _gps_flag 0124                                 _rawLatitude 0280  
                                  _init_lcd 4204                               __size_of_atoi 00BE  
                             __size_of_main 002C                                _remove_chain 42A2  
                             __size_of_itoa 0032                               __size_of_utoa 0094  
                             __size_of_sync 0052                         _endereco_cursor_lcd 48EA  
                        __end_of_init_ports 53B6                                    _rawSpeed 011E  
                             dummy_clocks@i 001C                                    f_open@dj 00DE  
                             dummy_clocks@n 001B                                    f_open@fn 00C9  
                                  f_open@fp 00C0                                    f_open@dw 00D7  
                               ??_diff_calc 002A                                    f_open@rs 00D5  
                           _dados_gps_to_sd 4B80                                    _monta_sd 2770  
                                  _validate 4DAC                                    _sentence 01EE  
                              move_window@n 0081                               stringcpy@str1 0001  
                             stringcpy@str2 0003                                    _response 5488  
                                  f_sync@fp 008A                         _point_buff_gps_long 00F7  
               __size_of_posicao_cursor_lcd 005E                                    int$flags 0047  
                   posicao_cursor_lcd@linha 001D                                    atoi@sign 0023  
                              ??_wait_ready 0019                                 ??_disk_read 0030  
                   __end_of_inicializa_uart 5274                                ??_trace_path 00AD  
                 verifica_diferenca_graus@i 0022                   verifica_diferenca_graus@j 0020  
                      ?_endereco_cursor_lcd 0001                          put_cluster@fatsect 0096  
                                _INTCONbits 000FF2                                    memcmp@s1 0019  
                                  memcmp@s2 001B                            move_window@wsect 0082  
                                  memcpy@d1 0019                                    memcpy@s1 001B  
                       __end_of_put_cluster 2324                                    fprintf@c 02C5  
                                  fprintf@f 02BA                                    fprintf@i 02C3  
                                  fprintf@r 02BB                                    fprintf@s 02A4  
                                  fprintf@w 02B8                                    fputc@chr 00CC  
                                  itoa@base 002B                                    fputc@fil 00CE  
                                  isdigit@c 001B                                    memset@p1 0019  
                         _config_timer_dois 545E                                _tempo_backup 0108  
                                  fputs@fil 00D5                                    fputs@str 00D3  
                         _config_timer_zero 53B6                                _poligono_ext 0138  
                             wait_ready@res 001D                                    intlevel2 0000  
                        ?_config_timer_dois 0001                    mensagem_inicial@msg_dois 0071  
                               ??_sdc_reset 0025                          ?_config_timer_zero 0001  
                              _tempo_tarefa 0100                             ?_sdc_disk_write 0025  
                          ___lwmod@dividend 0019                          __end_of_wait_ready 50B2  
                  __end_of_disparo_gravacao 4FCA                            ___lldiv@dividend 0019  
                         sdc_disk_read@buff 0067                       __end_of_sdc_disk_read 3952  
                       sdc_disk_status@pdrv 001A                               ?_desliga_uart 0001  
                       ??_config_timer_dois 0019                                  _OSCCONbits 000FD3  
                        __end_of_trace_path 1E50                         ??_config_timer_zero 001B  
                               _move_window 2E9C                             _fence_diff_long 608B  
                            diff_calc@fence 0060                              diff_calc@point 006C  
                      sdc_disk_write@count1 0062  verifica_diferenca_minutos@point_index_long 001F  
                      sdc_disk_write@p_buff 0025                            _recebe_dado_uart 542C  
                                  utoa@base 0023                        sdc_disk_write@sector 0027  
                     ??_endereco_cursor_lcd 001B                            _recebe_dados_gps 5196  
                              response@buff 0019                                    strcat@cp 001D  
                                  strcat@to 0019                                    strcmp@s1 0001  
                                  strcmp@s2 0003                                ?_desliga_SPI 0001  
                          ___lldiv@quotient 0021                             ___lwmod@divisor 001B  
                                  strcpy@cp 001F                                    strlen@cp 001B  
                                  strcpy@to 001B                             ___lwmod@counter 001D  
                         remove_chain@clust 00A0               __size_of_calcula_diff_minutos 00D0  
                 __end_of_config_timer_dois 546C                                ___aldiv@sign 0022  
                             ?_create_chain 00A0                   __end_of_config_timer_zero 53D0  
                               ??_stringcpy 0007                 __size_ofi2_write_timer_zero 000A  
                               _SSPCON1bits 000FC6                     __size_of_next_dir_entry 0164  
                    escreve_cmd_lcd@comando 001B   verifica_diferenca_minutos@point_index_lat 001E  
                       sdc_disk_write@count 002B                 __size_of_verifica_recep_gps 0024  
             sdc_disk_initialize@crc_number 0065                     __end_of_dados_gps_to_sd 4BD6  
                        sdc_disk_write@buff 0067                __size_of_sdc_disk_initialize 0300  
                              f_write@clust 00C8                              ??_desliga_uart 0019  
                        leitura_sdcard@size 0046                                f_write@wbuff 00C1  
                              ?_get_fattime 001D                            _reserve_direntry 1E50  
                   disparo_gravacao@fix_gps 00F2                                 f_write@buff 00B0  
                         sdc_disk_write@res 0064                                ?_get_cluster 0088  
                               f_write@sect 00C2                                 f_write@wcnt 00CA  
                              ?_disk_status 0001               __end_ofmensagem_inicial@F3666 6109  
             __end_ofmensagem_inicial@F3668 60F8                             escreve_SPI@dado 001A  
