

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Sat May 21 11:25:52 2022

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=2
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=2
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=2
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=2
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=2
   110                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text91,global,reloc=2,class=CODE,delta=1
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1
   113                           	psect	text93,global,reloc=2,class=CODE,delta=1
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1
   115                           	psect	text95,global,reloc=2,class=CODE,delta=1
   116                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text97,global,reloc=2,class=CODE,delta=1
   118                           	psect	text98,global,reloc=2,class=CODE,delta=1
   119                           	psect	text99,global,reloc=2,class=CODE,delta=1
   120                           	psect	text100,global,reloc=2,class=CODE,delta=1
   121                           	psect	text101,global,reloc=2,class=CODE,delta=1
   122                           	psect	text102,global,reloc=2,class=CODE,delta=1
   123                           	psect	text103,global,reloc=2,class=CODE,delta=1
   124                           	psect	text104,global,reloc=2,class=CODE,delta=1
   125                           	psect	text105,global,reloc=2,class=CODE,delta=1
   126                           	psect	text106,global,reloc=2,class=CODE,delta=1
   127                           	psect	text107,global,reloc=2,class=CODE,delta=1
   128                           	psect	text108,global,reloc=2,class=CODE,delta=1
   129                           	psect	text109,global,reloc=2,class=CODE,delta=1
   130                           	psect	text110,global,reloc=2,class=CODE,delta=1
   131                           	psect	text111,global,reloc=2,class=CODE,delta=1
   132                           	psect	text112,global,reloc=2,class=CODE,delta=1
   133                           	psect	text113,global,reloc=2,class=CODE,delta=1
   134                           	psect	text114,global,reloc=2,class=CODE,delta=1
   135                           	psect	text115,global,reloc=2,class=CODE,delta=1
   136                           	psect	text116,global,reloc=2,class=CODE,delta=1
   137                           	psect	text117,global,reloc=2,class=CODE,delta=1
   138                           	psect	text118,global,reloc=2,class=CODE,delta=1
   139                           	psect	text119,global,reloc=2,class=CODE,delta=1
   140                           	psect	text120,global,reloc=2,class=CODE,delta=1
   141                           	psect	text121,global,reloc=2,class=CODE,delta=1
   142                           	psect	text122,global,reloc=2,class=CODE,delta=1
   143                           	psect	text123,global,reloc=2,class=CODE,delta=1
   144                           	psect	text124,global,reloc=2,class=CODE,delta=1
   145                           	psect	text125,global,reloc=2,class=CODE,delta=1
   146                           	psect	text126,global,reloc=2,class=CODE,delta=1
   147                           	psect	text127,global,reloc=2,class=CODE,delta=1
   148                           	psect	text128,global,reloc=2,class=CODE,delta=1,group=2
   149                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=2
   150                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=2
   151                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   152                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   153                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   154                           	psect	text133,global,reloc=2,class=CODE,delta=1
   155                           	psect	text134,global,reloc=2,class=CODE,delta=1
   156                           	psect	text135,global,reloc=2,class=CODE,delta=1
   157                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   158                           	psect	text136,global,reloc=2,class=CODE,delta=1
   159                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   160                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   161                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   162                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   163  0000                     
   164                           ; Version 2.30
   165                           ; Generated 26/08/2020 GMT
   166                           ; 
   167                           ; Copyright © 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   168                           ; All rights reserved.
   169                           ; 
   170                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   171                           ; 
   172                           ; Redistribution and use in source and binary forms, with or without modification, are
   173                           ; permitted provided that the following conditions are met:
   174                           ; 
   175                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   176                           ;        conditions and the following disclaimer.
   177                           ; 
   178                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   179                           ;        of conditions and the following disclaimer in the documentation and/or other
   180                           ;        materials provided with the distribution. Publication is not required when
   181                           ;        this file is used in an embedded application.
   182                           ; 
   183                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   184                           ;        software without specific prior written permission.
   185                           ; 
   186                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   187                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   188                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   189                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   190                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   191                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   192                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   193                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   194                           ; 
   195                           ; 
   196                           ; Code-generator required, PIC18F4550 Definitions
   197                           ; 
   198                           ; SFR Addresses
   199  0000                     
   200                           	psect	idataBANK1
   201  005C2C                     __pidataBANK1:
   202                           	callstack 0
   203                           
   204                           ;initializer for escreve_inteiro_uart@F3215
   205  005C2C  30                 	db	48
   206  005C2D  30                 	db	48
   207  005C2E  30                 	db	48
   208  005C2F  30                 	db	48
   209  005C30  30                 	db	48
   210  005C31  30                 	db	48
   211  005C32  00                 	db	0
   212                           
   213                           ;initializer for escreve_inteiro_lcd@F3223
   214  005C33  30                 	db	48
   215  005C34  30                 	db	48
   216  005C35  30                 	db	48
   217  005C36  30                 	db	48
   218  005C37  30                 	db	48
   219  005C38  30                 	db	48
   220  005C39  00                 	db	0
   221                           
   222                           ;initializer for leitura_sdcard@size
   223  005C3A  58                 	db	88
   224                           
   225                           	psect	idataBANK2
   226  004D68                     __pidataBANK2:
   227                           	callstack 0
   228                           
   229                           ;initializer for _dados_long
   230  004D68  30                 	db	48
   231  004D69  30                 	db	48
   232  004D6A  30                 	db	48
   233  004D6B  30                 	db	48
   234  004D6C  30                 	db	48
   235  004D6D  30                 	db	48
   236  004D6E  30                 	db	48
   237  004D6F  30                 	db	48
   238  004D70  30                 	db	48
   239  004D71  30                 	db	48
   240  004D72  30                 	db	48
   241  004D73  30                 	db	48
   242  004D74  30                 	db	48
   243  004D75  30                 	db	48
   244  004D76  30                 	db	48
   245  004D77  30                 	db	48
   246  004D78  30                 	db	48
   247  004D79  30                 	db	48
   248  004D7A  30                 	db	48
   249  004D7B  30                 	db	48
   250  004D7C  30                 	db	48
   251  004D7D  30                 	db	48
   252  004D7E  30                 	db	48
   253  004D7F  30                 	db	48
   254  004D80  30                 	db	48
   255  004D81  30                 	db	48
   256  004D82  30                 	db	48
   257  004D83  30                 	db	48
   258  004D84  30                 	db	48
   259  004D85  30                 	db	48
   260  004D86  30                 	db	48
   261  004D87  30                 	db	48
   262  004D88  30                 	db	48
   263  004D89  30                 	db	48
   264  004D8A  30                 	db	48
   265  004D8B  30                 	db	48
   266                           
   267                           ;initializer for _dados_lat
   268  004D8C  30                 	db	48
   269  004D8D  30                 	db	48
   270  004D8E  30                 	db	48
   271  004D8F  30                 	db	48
   272  004D90  30                 	db	48
   273  004D91  30                 	db	48
   274  004D92  30                 	db	48
   275  004D93  30                 	db	48
   276  004D94  30                 	db	48
   277  004D95  30                 	db	48
   278  004D96  00                 	db	0
   279  004D97  30                 	db	48
   280  004D98  30                 	db	48
   281  004D99  30                 	db	48
   282  004D9A  30                 	db	48
   283  004D9B  30                 	db	48
   284  004D9C  30                 	db	48
   285  004D9D  30                 	db	48
   286  004D9E  30                 	db	48
   287  004D9F  30                 	db	48
   288  004DA0  30                 	db	48
   289  004DA1  00                 	db	0
   290  004DA2  30                 	db	48
   291  004DA3  30                 	db	48
   292  004DA4  30                 	db	48
   293  004DA5  30                 	db	48
   294  004DA6  30                 	db	48
   295  004DA7  30                 	db	48
   296  004DA8  30                 	db	48
   297  004DA9  30                 	db	48
   298  004DAA  30                 	db	48
   299  004DAB  30                 	db	48
   300  004DAC  00                 	db	0
   301                           
   302                           ;initializer for _dados_data
   303  004DAD  30                 	db	48
   304  004DAE  30                 	db	48
   305  004DAF  30                 	db	48
   306  004DB0  30                 	db	48
   307  004DB1  30                 	db	48
   308  004DB2  30                 	db	48
   309  004DB3  30                 	db	48
   310  004DB4  30                 	db	48
   311  004DB5  30                 	db	48
   312  004DB6  30                 	db	48
   313  004DB7  30                 	db	48
   314  004DB8  30                 	db	48
   315  004DB9  30                 	db	48
   316  004DBA  30                 	db	48
   317  004DBB  30                 	db	48
   318  004DBC  30                 	db	48
   319  004DBD  30                 	db	48
   320  004DBE  30                 	db	48
   321                           
   322                           ;initializer for _dados_hora
   323  004DBF  30                 	db	48
   324  004DC0  30                 	db	48
   325  004DC1  30                 	db	48
   326  004DC2  30                 	db	48
   327  004DC3  30                 	db	48
   328  004DC4  30                 	db	48
   329  004DC5  30                 	db	48
   330  004DC6  30                 	db	48
   331  004DC7  30                 	db	48
   332  004DC8  30                 	db	48
   333  004DC9  30                 	db	48
   334  004DCA  30                 	db	48
   335  004DCB  30                 	db	48
   336  004DCC  30                 	db	48
   337  004DCD  30                 	db	48
   338  004DCE  30                 	db	48
   339  004DCF  30                 	db	48
   340  004DD0  30                 	db	48
   341                           
   342                           	psect	mediumconst
   343  006102                     __pmediumconst:
   344                           	callstack 0
   345  006102  00                 	db	0
   346  006103                     mensagem_inicial@F3689:
   347                           	callstack 0
   348  006103  54                 	db	84
   349  006104  43                 	db	67
   350  006105  43                 	db	67
   351  006106  2D                 	db	45
   352  006107  2D                 	db	45
   353  006108  54                 	db	84
   354  006109  45                 	db	69
   355  00610A  4C                 	db	76
   356  00610B  45                 	db	69
   357  00610C  4D                 	db	77
   358  00610D  54                 	db	84
   359  00610E  52                 	db	82
   360  00610F  49                 	db	73
   361  006110  41                 	db	65
   362  006111  00                 	db	0
   363  006112  00                 	db	0
   364  006113  00                 	db	0
   365  006114                     __end_ofmensagem_inicial@F3689:
   366                           	callstack 0
   367  006114                     mensagem_inicial@F3687:
   368                           	callstack 0
   369  006114  46                 	db	70
   370  006115  41                 	db	65
   371  006116  54                 	db	84
   372  006117  45                 	db	69
   373  006118  43                 	db	67
   374  006119  20                 	db	32
   375  00611A  53                 	db	83
   376  00611B  54                 	db	84
   377  00611C  20                 	db	32
   378  00611D  41                 	db	65
   379  00611E  4E                 	db	78
   380  00611F  44                 	db	68
   381  006120  52                 	db	82
   382  006121  45                 	db	69
   383  006122  00                 	db	0
   384  006123  00                 	db	0
   385  006124  00                 	db	0
   386  006125                     __end_ofmensagem_inicial@F3687:
   387                           	callstack 0
   388  006125                     _fence_diff_long:
   389                           	callstack 0
   390  006125  2D                 	db	45
   391  006126  30                 	db	48
   392  006127  34                 	db	52
   393  006128  36                 	db	54
   394  006129  33                 	db	51
   395  00612A  33                 	db	51
   396  00612B  39                 	db	57
   397  00612C  34                 	db	52
   398  00612D  30                 	db	48
   399  00612E  35                 	db	53
   400  00612F  30                 	db	48
   401  006130  2D                 	db	45
   402  006131  30                 	db	48
   403  006132  34                 	db	52
   404  006133  36                 	db	54
   405  006134  32                 	db	50
   406  006135  39                 	db	57
   407  006136  34                 	db	52
   408  006137  31                 	db	49
   409  006138  34                 	db	52
   410  006139  37                 	db	55
   411  00613A  34                 	db	52
   412  00613B  2D                 	db	45
   413  00613C  30                 	db	48
   414  00613D  34                 	db	52
   415  00613E  36                 	db	54
   416  00613F  32                 	db	50
   417  006140  39                 	db	57
   418  006141  34                 	db	52
   419  006142  31                 	db	49
   420  006143  34                 	db	52
   421  006144  37                 	db	55
   422  006145  34                 	db	52
   423  006146  2D                 	db	45
   424  006147  30                 	db	48
   425  006148  34                 	db	52
   426  006149  36                 	db	54
   427  00614A  33                 	db	51
   428  00614B  33                 	db	51
   429  00614C  39                 	db	57
   430  00614D  34                 	db	52
   431  00614E  30                 	db	48
   432  00614F  35                 	db	53
   433  006150  30                 	db	48
   434  006151                     __end_of_fence_diff_long:
   435                           	callstack 0
   436  006151                     _fence_diff_lat:
   437                           	callstack 0
   438  006151  2D                 	db	45
   439  006152  32                 	db	50
   440  006153  33                 	db	51
   441  006154  33                 	db	51
   442  006155  36                 	db	54
   443  006156  34                 	db	52
   444  006157  36                 	db	54
   445  006158  36                 	db	54
   446  006159  35                 	db	53
   447  00615A  33                 	db	51
   448  00615B  2D                 	db	45
   449  00615C  32                 	db	50
   450  00615D  33                 	db	51
   451  00615E  33                 	db	51
   452  00615F  36                 	db	54
   453  006160  34                 	db	52
   454  006161  36                 	db	54
   455  006162  36                 	db	54
   456  006163  35                 	db	53
   457  006164  33                 	db	51
   458  006165  2D                 	db	45
   459  006166  32                 	db	50
   460  006167  33                 	db	51
   461  006168  34                 	db	52
   462  006169  30                 	db	48
   463  00616A  35                 	db	53
   464  00616B  39                 	db	57
   465  00616C  36                 	db	54
   466  00616D  34                 	db	52
   467  00616E  32                 	db	50
   468  00616F  2D                 	db	45
   469  006170  32                 	db	50
   470  006171  33                 	db	51
   471  006172  34                 	db	52
   472  006173  30                 	db	48
   473  006174  35                 	db	53
   474  006175  39                 	db	57
   475  006176  36                 	db	54
   476  006177  34                 	db	52
   477  006178  32                 	db	50
   478  006179                     __end_of_fence_diff_lat:
   479                           	callstack 0
   480  0000                     _TMR0	set	4054
   481  0000                     _PORTEbits	set	3972
   482  0000                     _PCL	set	4089
   483  0000                     _PCLATH	set	4090
   484  0000                     _PIE1bits	set	3997
   485  0000                     _RCSTA	set	4011
   486  0000                     _TXSTA	set	4012
   487  0000                     _RCREG	set	4014
   488  0000                     _RCSTAbits	set	4011
   489  0000                     _SPBRG	set	4015
   490  0000                     _PIR1bits	set	3998
   491  0000                     _SSPBUF	set	4041
   492  0000                     _SSPCON1bits	set	4038
   493  0000                     _SSPSTATbits	set	4039
   494  0000                     _SSPCON1	set	4038
   495  0000                     _SSPSTAT	set	4039
   496  0000                     _TRISCbits	set	3988
   497  0000                     _TRISBbits	set	3987
   498  0000                     _PORTBbits	set	3969
   499  0000                     _PR2	set	4043
   500  0000                     _TMR2	set	4044
   501  0000                     _T2CON	set	4042
   502  0000                     _OSCCONbits	set	4051
   503  0000                     _TRISE	set	3990
   504  0000                     _TRISC	set	3988
   505  0000                     _TRISA	set	3986
   506  0000                     _TRISD	set	3989
   507  0000                     _LATB	set	3978
   508  0000                     _TRISB	set	3987
   509  0000                     _ADCON1	set	4033
   510  0000                     _T0CONbits	set	4053
   511  0000                     _INTCONbits	set	4082
   512  0000                     _PIE1	set	3997
   513  0000                     _INTCON3	set	4080
   514  0000                     _INTCON2	set	4081
   515  0000                     _INTCON	set	4082
   516  0000                     _SPPCFG	set	3939
   517  0000                     _SPPCON	set	3941
   518  0000                     _T0CON	set	4053
   519  0000                     _PORTDbits	set	3971
   520  0000                     _TRISDbits	set	3989
   521  0000                     _LATBbits	set	3978
   522  0000                     _LATCbits	set	3979
   523  0000                     _INT0IE	set	32660
   524  0000                     _INT0IF	set	32657
   525  0000                     _T0IF	set	32658
   526  0000                     _TMR0IF	set	32658
   527  0000                     _RCIF	set	31989
   528  0000                     _TXEN	set	32101
   529  0000                     _CREN	set	32092
   530  0000                     _SPEN	set	32095
   531  0000                     _SYNC	set	32100
   532  0000                     _BRGH	set	32098
   533  006179  6F                 	db	111	;'o'
   534  00617A  20                 	db	32
   535  00617B  53                 	db	83	;'S'
   536  00617C  69                 	db	105	;'i'
   537  00617D  73                 	db	115	;'s'
   538  00617E  74                 	db	116	;'t'
   539  00617F  65                 	db	101	;'e'
   540  006180  6D                 	db	109	;'m'
   541  006181  61                 	db	97	;'a'
   542  006182  20                 	db	32
   543  006183  64                 	db	100	;'d'
   544  006184  65                 	db	101	;'e'
   545  006185  20                 	db	32
   546  006186  61                 	db	97	;'a'
   547  006187  72                 	db	114	;'r'
   548  006188  71                 	db	113	;'q'
   549  006189  75                 	db	117	;'u'
   550  00618A  69                 	db	105	;'i'
   551  00618B  76                 	db	118	;'v'
   552  00618C  6F                 	db	111	;'o'
   553  00618D  00                 	db	0
   554  00618E                     STR_2:
   555  00618E  49                 	db	73	;'I'
   556  00618F  6E                 	db	110	;'n'
   557  006190  73                 	db	115	;'s'
   558  006191  69                 	db	105	;'i'
   559  006192  72                 	db	114	;'r'
   560  006193  61                 	db	97	;'a'
   561  006194  20                 	db	32
   562  006195  6F                 	db	111	;'o'
   563  006196  20                 	db	32
   564  006197  43                 	db	67	;'C'
   565  006198  61                 	db	97	;'a'
   566  006199  72                 	db	114	;'r'
   567  00619A  74                 	db	116	;'t'
   568  00619B  61                 	db	97	;'a'
   569  00619C  6F                 	db	111	;'o'
   570  00619D  00                 	db	0
   571  00619E                     STR_12:
   572  00619E  76                 	db	118	;'v'
   573  00619F  25                 	db	37
   574  0061A0  73                 	db	115	;'s'
   575  0061A1  3B                 	db	59	;';'
   576  0061A2  6C                 	db	108	;'l'
   577  0061A3  74                 	db	116	;'t'
   578  0061A4  25                 	db	37
   579  0061A5  73                 	db	115	;'s'
   580  0061A6  3B                 	db	59	;';'
   581  0061A7  6C                 	db	108	;'l'
   582  0061A8  6F                 	db	111	;'o'
   583  0061A9  25                 	db	37
   584  0061AA  73                 	db	115	;'s'
   585  0061AB  3B                 	db	59	;';'
   586  0061AC  00                 	db	0
   587  0061AD  45                 	db	69	;'E'
   588  0061AE  72                 	db	114	;'r'
   589  0061AF  72                 	db	114	;'r'
   590  0061B0  6F                 	db	111	;'o'
   591  0061B1  20                 	db	32
   592  0061B2  61                 	db	97	;'a'
   593  0061B3  6F                 	db	111	;'o'
   594  0061B4  20                 	db	32
   595  0061B5  6D                 	db	109	;'m'
   596  0061B6  6F                 	db	111	;'o'
   597  0061B7  6E                 	db	110	;'n'
   598  0061B8  74                 	db	116	;'t'
   599  0061B9  61                 	db	97	;'a'
   600  0061BA  72                 	db	114	;'r'
   601  0061BB  00                 	db	0
   602  0061BC  45                 	db	69	;'E'
   603  0061BD  72                 	db	114	;'r'
   604  0061BE  72                 	db	114	;'r'
   605  0061BF  6F                 	db	111	;'o'
   606  0061C0  20                 	db	32
   607  0061C1  61                 	db	97	;'a'
   608  0061C2  6F                 	db	111	;'o'
   609  0061C3  20                 	db	32
   610  0061C4  63                 	db	99	;'c'
   611  0061C5  72                 	db	114	;'r'
   612  0061C6  69                 	db	105	;'i'
   613  0061C7  61                 	db	97	;'a'
   614  0061C8  72                 	db	114	;'r'
   615  0061C9  00                 	db	0
   616  0061CA  65                 	db	101	;'e'
   617  0061CB  78                 	db	120	;'x'
   618  0061CC  74                 	db	116	;'t'
   619  0061CD  66                 	db	102	;'f'
   620  0061CE  65                 	db	101	;'e'
   621  0061CF  6E                 	db	110	;'n'
   622  0061D0  63                 	db	99	;'c'
   623  0061D1  65                 	db	101	;'e'
   624  0061D2  2E                 	db	46
   625  0061D3  74                 	db	116	;'t'
   626  0061D4  78                 	db	120	;'x'
   627  0061D5  74                 	db	116	;'t'
   628  0061D6  00                 	db	0
   629  0061D7                     STR_19:
   630  0061D7  41                 	db	65	;'A'
   631  0061D8  47                 	db	71	;'G'
   632  0061D9  55                 	db	85	;'U'
   633  0061DA  41                 	db	65	;'A'
   634  0061DB  52                 	db	82	;'R'
   635  0061DC  44                 	db	68	;'D'
   636  0061DD  45                 	db	69	;'E'
   637  0061DE  2E                 	db	46
   638  0061DF  2E                 	db	46
   639  0061E0  2E                 	db	46
   640  0061E1  00                 	db	0
   641  0061E2                     STR_4:
   642  0061E2  4D                 	db	77	;'M'
   643  0061E3  4D                 	db	77	;'M'
   644  0061E4  43                 	db	67	;'C'
   645  0061E5  20                 	db	32
   646  0061E6  56                 	db	86	;'V'
   647  0061E7  65                 	db	101	;'e'
   648  0061E8  72                 	db	114	;'r'
   649  0061E9  2E                 	db	46
   650  0061EA  20                 	db	32
   651  0061EB  33                 	db	51	;'3'
   652  0061EC  00                 	db	0
   653  0061ED                     STR_1:
   654  0061ED  53                 	db	83	;'S'
   655  0061EE  65                 	db	101	;'e'
   656  0061EF  6D                 	db	109	;'m'
   657  0061F0  20                 	db	32
   658  0061F1  43                 	db	67	;'C'
   659  0061F2  61                 	db	97	;'a'
   660  0061F3  72                 	db	114	;'r'
   661  0061F4  74                 	db	116	;'t'
   662  0061F5  61                 	db	97	;'a'
   663  0061F6  6F                 	db	111	;'o'
   664  0061F7  00                 	db	0
   665  0061F8                     STR_13:
   666  0061F8  72                 	db	114	;'r'
   667  0061F9  30                 	db	48	;'0'
   668  0061FA  3B                 	db	59	;';'
   669  0061FB  63                 	db	99	;'c'
   670  0061FC  30                 	db	48	;'0'
   671  0061FD  3B                 	db	59	;';'
   672  0061FE  6B                 	db	107	;'k'
   673  0061FF  30                 	db	48	;'0'
   674  006200  3B                 	db	59	;';'
   675  006201  00                 	db	0
   676  006202                     STR_14:
   677  006202  68                 	db	104	;'h'
   678  006203  25                 	db	37
   679  006204  73                 	db	115	;'s'
   680  006205  3B                 	db	59	;';'
   681  006206  64                 	db	100	;'d'
   682  006207  4E                 	db	78	;'N'
   683  006208  2F                 	db	47
   684  006209  41                 	db	65	;'A'
   685  00620A  3B                 	db	59	;';'
   686  00620B  00                 	db	0
   687  00620C  56                 	db	86	;'V'
   688  00620D  65                 	db	101	;'e'
   689  00620E  72                 	db	114	;'r'
   690  00620F  69                 	db	105	;'i'
   691  006210  66                 	db	102	;'f'
   692  006211  69                 	db	105	;'i'
   693  006212  71                 	db	113	;'q'
   694  006213  75                 	db	117	;'u'
   695  006214  65                 	db	101	;'e'
   696  006215  00                 	db	0
   697  006216  6F                 	db	111	;'o'
   698  006217  20                 	db	32
   699  006218  61                 	db	97	;'a'
   700  006219  72                 	db	114	;'r'
   701  00621A  71                 	db	113	;'q'
   702  00621B  75                 	db	117	;'u'
   703  00621C  69                 	db	105	;'i'
   704  00621D  76                 	db	118	;'v'
   705  00621E  6F                 	db	111	;'o'
   706  00621F  00                 	db	0
   707  006220                     STR_3:
   708  006220  53                 	db	83	;'S'
   709  006221  44                 	db	68	;'D'
   710  006222  20                 	db	32
   711  006223  56                 	db	86	;'V'
   712  006224  45                 	db	69	;'E'
   713  006225  52                 	db	82	;'R'
   714  006226  2E                 	db	46
   715  006227  20                 	db	32
   716  006228  31                 	db	49	;'1'
   717  006229  00                 	db	0
   718  00622A                     STR_32:
   719  00622A  42                 	db	66	;'B'
   720  00622B  31                 	db	49	;'1'
   721  00622C  3A                 	db	58	;':'
   722  00622D  46                 	db	70	;'F'
   723  00622E  45                 	db	69	;'E'
   724  00622F  4E                 	db	78	;'N'
   725  006230  43                 	db	67	;'C'
   726  006231  45                 	db	69	;'E'
   727  006232  00                 	db	0
   728  006233  6F                 	db	111	;'o'
   729  006234  20                 	db	32
   730  006235  63                 	db	99	;'c'
   731  006236  61                 	db	97	;'a'
   732  006237  72                 	db	114	;'r'
   733  006238  74                 	db	116	;'t'
   734  006239  61                 	db	97	;'a'
   735  00623A  6F                 	db	111	;'o'
   736  00623B  00                 	db	0
   737  00623C                     STR_33:
   738  00623C  42                 	db	66	;'B'
   739  00623D  32                 	db	50	;'2'
   740  00623E  3A                 	db	58	;':'
   741  00623F  4C                 	db	76	;'L'
   742  006240  54                 	db	84	;'T'
   743  006241  4C                 	db	76	;'L'
   744  006242  4F                 	db	79	;'O'
   745  006243  00                 	db	0
   746  006244                     STR_20:
   747  006244  46                 	db	70	;'F'
   748  006245  4F                 	db	79	;'O'
   749  006246  52                 	db	82	;'R'
   750  006247  41                 	db	65	;'A'
   751  006248  20                 	db	32
   752  006249  20                 	db	32
   753  00624A  00                 	db	0
   754  00624B                     STR_25:
   755  00624B  46                 	db	70	;'F'
   756  00624C  45                 	db	69	;'E'
   757  00624D  4E                 	db	78	;'N'
   758  00624E  43                 	db	67	;'C'
   759  00624F  45                 	db	69	;'E'
   760  006250  3A                 	db	58	;':'
   761  006251  00                 	db	0
   762  006252                     STR_21:
   763  006252  44                 	db	68	;'D'
   764  006253  45                 	db	69	;'E'
   765  006254  4E                 	db	78	;'N'
   766  006255  54                 	db	84	;'T'
   767  006256  52                 	db	82	;'R'
   768  006257  4F                 	db	79	;'O'
   769  006258  00                 	db	0
   770  006259                     STR_15:
   771  006259  66                 	db	102	;'f'
   772  00625A  25                 	db	37
   773  00625B  73                 	db	115	;'s'
   774  00625C  3B                 	db	59	;';'
   775  00625D  0A                 	db	10
   776  00625E  00                 	db	0
   777  00625F                     STR_29:
   778  00625F  46                 	db	70	;'F'
   779  006260  49                 	db	73	;'I'
   780  006261  58                 	db	88	;'X'
   781  006262  3A                 	db	58	;':'
   782  006263  00                 	db	0
   783  006264                     STR_23:
   784  006264  46                 	db	70	;'F'
   785  006265  4F                 	db	79	;'O'
   786  006266  52                 	db	82	;'R'
   787  006267  41                 	db	65	;'A'
   788  006268  00                 	db	0
   789  006269                     STR_11:
   790  006269  2E                 	db	46
   791  00626A  74                 	db	116	;'t'
   792  00626B  6C                 	db	108	;'l'
   793  00626C  6D                 	db	109	;'m'
   794  00626D  00                 	db	0
   795  00626E                     STR_31:
   796  00626E  6C                 	db	108	;'l'
   797  00626F  6F                 	db	111	;'o'
   798  006270  3A                 	db	58	;':'
   799  006271  00                 	db	0
   800  006272                     STR_30:
   801  006272  6C                 	db	108	;'l'
   802  006273  74                 	db	116	;'t'
   803  006274  3A                 	db	58	;':'
   804  006275  00                 	db	0
   805  006276                     STR_17:
   806  006276  46                 	db	70	;'F'
   807  006277  41                 	db	65	;'A'
   808  006278  54                 	db	84	;'T'
   809  006279  00                 	db	0
   810  00627A  0D                 	db	13
   811  00627B  0A                 	db	10
   812  00627C  00                 	db	0
   813  00627D                     STR_24:
   814  00627D  7C                 	db	124
   815  00627E  00                 	db	0
   816  00627F  00                 	db	0	; dummy byte at the end
   817  0000                     
   818                           ; #config settings
   819                           
   820                           	psect	cinit
   821  004650                     __pcinit:
   822                           	callstack 0
   823  004650                     start_initialization:
   824                           	callstack 0
   825  004650                     __initialization:
   826                           	callstack 0
   827                           
   828                           ; Initialize objects allocated to BANK2 (105 bytes)
   829                           ; load TBLPTR registers with __pidataBANK2
   830  004650  0E68               	movlw	low __pidataBANK2
   831  004652  6EF6               	movwf	tblptrl,c
   832  004654  0E4D               	movlw	high __pidataBANK2
   833  004656  6EF7               	movwf	tblptrh,c
   834  004658  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   835  00465A  6EF8               	movwf	tblptru,c
   836  00465C  EE02  F07E         	lfsr	0,__pdataBANK2
   837  004660  EE10 F069          	lfsr	1,105
   838  004664                     copy_data0:
   839  004664  0009               	tblrd		*+
   840  004666  CFF5 FFEE          	movff	tablat,postinc0
   841  00466A  50E5               	movf	postdec1,w,c
   842  00466C  50E1               	movf	fsr1l,w,c
   843  00466E  E1FA               	bnz	copy_data0
   844                           
   845                           ; Initialize objects allocated to BANK1 (15 bytes)
   846                           ; load TBLPTR registers with __pidataBANK1
   847  004670  0E2C               	movlw	low __pidataBANK1
   848  004672  6EF6               	movwf	tblptrl,c
   849  004674  0E5C               	movlw	high __pidataBANK1
   850  004676  6EF7               	movwf	tblptrh,c
   851  004678  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   852  00467A  6EF8               	movwf	tblptru,c
   853  00467C  EE01  F0F0         	lfsr	0,__pdataBANK1
   854  004680  EE10 F00F          	lfsr	1,15
   855  004684                     copy_data1:
   856  004684  0009               	tblrd		*+
   857  004686  CFF5 FFEE          	movff	tablat,postinc0
   858  00468A  50E5               	movf	postdec1,w,c
   859  00468C  50E1               	movf	fsr1l,w,c
   860  00468E  E1FA               	bnz	copy_data1
   861                           
   862                           ; Clear objects allocated to BIGRAM (544 bytes)
   863  004690  EE03  F096         	lfsr	0,__pbssBIGRAM
   864  004694  EE12 F020          	lfsr	1,544
   865  004698                     clear_0:
   866  004698  6AEE               	clrf	postinc0,c
   867  00469A  50E5               	movf	postdec1,w,c
   868  00469C  50E1               	movf	fsr1l,w,c
   869  00469E  E1FC               	bnz	clear_0
   870  0046A0  50E2               	movf	fsr1h,w,c
   871  0046A2  E1FA               	bnz	clear_0
   872                           
   873                           ; Clear objects allocated to BANK3 (150 bytes)
   874  0046A4  EE03  F000         	lfsr	0,__pbssBANK3
   875  0046A8  0E96               	movlw	150
   876  0046AA                     clear_1:
   877  0046AA  6AEE               	clrf	postinc0,c
   878  0046AC  06E8               	decf	wreg,f,c
   879  0046AE  E1FD               	bnz	clear_1
   880                           
   881                           ; Clear objects allocated to BANK2 (126 bytes)
   882  0046B0  EE02  F000         	lfsr	0,__pbssBANK2
   883  0046B4  0E7E               	movlw	126
   884  0046B6                     clear_2:
   885  0046B6  6AEE               	clrf	postinc0,c
   886  0046B8  06E8               	decf	wreg,f,c
   887  0046BA  E1FD               	bnz	clear_2
   888                           
   889                           ; Clear objects allocated to BANK1 (240 bytes)
   890  0046BC  EE01  F000         	lfsr	0,__pbssBANK1
   891  0046C0  0EF0               	movlw	240
   892  0046C2                     clear_3:
   893  0046C2  6AEE               	clrf	postinc0,c
   894  0046C4  06E8               	decf	wreg,f,c
   895  0046C6  E1FD               	bnz	clear_3
   896                           
   897                           ; Clear objects allocated to BANK0 (25 bytes)
   898  0046C8  EE00  F0E7         	lfsr	0,__pbssBANK0
   899  0046CC  0E19               	movlw	25
   900  0046CE                     clear_4:
   901  0046CE  6AEE               	clrf	postinc0,c
   902  0046D0  06E8               	decf	wreg,f,c
   903  0046D2  E1FD               	bnz	clear_4
   904                           
   905                           ; Clear objects allocated to COMRAM (9 bytes)
   906  0046D4  EE00  F04D         	lfsr	0,__pbssCOMRAM
   907  0046D8  0E09               	movlw	9
   908  0046DA                     clear_5:
   909  0046DA  6AEE               	clrf	postinc0,c
   910  0046DC  06E8               	decf	wreg,f,c
   911  0046DE  E1FD               	bnz	clear_5
   912  0046E0                     end_of_initialization:
   913                           	callstack 0
   914  0046E0                     __end_of__initialization:
   915                           	callstack 0
   916  0046E0  9056               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   917  0046E2  9256               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   918  0046E4  0100               	movlb	0
   919  0046E6  EFEF  F02B         	goto	_main	;jump to C main() function
   920                           
   921                           	psect	bssCOMRAM
   922  00004D                     __pbssCOMRAM:
   923                           	callstack 0
   924  00004D                     _FatFs:
   925                           	callstack 0
   926  00004D                     	ds	2
   927  00004F                     troca_de_tela@last_state:
   928                           	callstack 0
   929  00004F                     	ds	1
   930  000050                     troca_de_tela@state:
   931                           	callstack 0
   932  000050                     	ds	1
   933  000051                     verifica_dados_operacionais@contador_atual:
   934                           	callstack 0
   935  000051                     	ds	1
   936  000052                     _tarefa_em_execucao:
   937                           	callstack 0
   938  000052                     	ds	1
   939  000053                     escrita_sdcard@f_fix:
   940                           	callstack 0
   941  000053                     	ds	1
   942  000054                     _is_it_rmc_string:
   943                           	callstack 0
   944  000054                     	ds	1
   945  000055                     _is_it_gga_string:
   946                           	callstack 0
   947  000055                     	ds	1
   948                           
   949                           	psect	bssBANK0
   950  0000E7                     __pbssBANK0:
   951                           	callstack 0
   952  0000E7                     _poligono_ext:
   953                           	callstack 0
   954  0000E7                     	ds	16
   955  0000F7                     _rmc_index:
   956                           	callstack 0
   957  0000F7                     	ds	2
   958  0000F9                     _gga_index:
   959                           	callstack 0
   960  0000F9                     	ds	2
   961  0000FB                     verifica_dados_operacionais@contador_anterior:
   962                           	callstack 0
   963  0000FB                     	ds	1
   964  0000FC                     _sinaliza_int_timer:
   965                           	callstack 0
   966  0000FC                     	ds	1
   967  0000FD                     _data_uart_recebe:
   968                           	callstack 0
   969  0000FD                     	ds	1
   970  0000FE                     _comma_counter_rmc:
   971                           	callstack 0
   972  0000FE                     	ds	1
   973  0000FF                     _comma_counter_gga:
   974                           	callstack 0
   975  0000FF                     	ds	1
   976                           
   977                           	psect	bssBANK1
   978  000100                     __pbssBANK1:
   979                           	callstack 0
   980  000100                     _dado:
   981                           	callstack 0
   982  000100                     	ds	10
   983  00010A                     _rawAltitude:
   984                           	callstack 0
   985  00010A                     	ds	7
   986  000111                     	ds	6
   987  000117                     _dados_vel:
   988                           	callstack 0
   989  000117                     	ds	6
   990  00011D                     _tempo_tarefa:
   991                           	callstack 0
   992  00011D                     	ds	6
   993  000123                     _tempo_backup:
   994                           	callstack 0
   995  000123                     	ds	6
   996  000129                     _p_tarefas:
   997                           	callstack 0
   998  000129                     	ds	6
   999  00012F                     _rawCourse:
  1000                           	callstack 0
  1001  00012F                     	ds	6
  1002  000135                     _sentence:
  1003                           	callstack 0
  1004  000135                     	ds	6
  1005  00013B                     _gps_flag:
  1006                           	callstack 0
  1007  00013B                     	ds	6
  1008  000141                     verifica_dados_operacionais@velocidade_atual_int:
  1009                           	callstack 0
  1010  000141                     	ds	4
  1011  000145                     	ds	4
  1012  000149                     _fence_flag:
  1013                           	callstack 0
  1014  000149                     	ds	3
  1015  00014C                     _rmc_code:
  1016                           	callstack 0
  1017  00014C                     	ds	3
  1018  00014F                     _gga_code:
  1019                           	callstack 0
  1020  00014F                     	ds	3
  1021  000152                     _rawSatellites:
  1022                           	callstack 0
  1023  000152                     	ds	3
  1024  000155                     _temp_buff_lat:
  1025                           	callstack 0
  1026  000155                     	ds	2
  1027  000157                     _temp_buff_long:
  1028                           	callstack 0
  1029  000157                     	ds	2
  1030  000159                     verifica_dados_operacionais@velocidade_atual:
  1031                           	callstack 0
  1032  000159                     	ds	2
  1033  00015B                     _point_buff_gps_long:
  1034                           	callstack 0
  1035  00015B                     	ds	2
  1036  00015D                     _point_buff_gps_lat:
  1037                           	callstack 0
  1038  00015D                     	ds	2
  1039  00015F                     _time_atualizacao:
  1040                           	callstack 0
  1041  00015F                     	ds	2
  1042  000161                     _time_recovery:
  1043                           	callstack 0
  1044  000161                     	ds	2
  1045  000163                     _time_sd:
  1046                           	callstack 0
  1047  000163                     	ds	2
  1048  000165                     _timeout_tarefa:
  1049                           	callstack 0
  1050  000165                     	ds	2
  1051  000167                     _fsid:
  1052                           	callstack 0
  1053  000167                     	ds	2
  1054  000169                     _teste:
  1055                           	callstack 0
  1056  000169                     	ds	2
  1057  00016B                     _GPGGA_ok:
  1058                           	callstack 0
  1059  00016B                     	ds	2
  1060  00016D                     _GPRMC_ok:
  1061                           	callstack 0
  1062  00016D                     	ds	2
  1063  00016F                     _data_buff:
  1064                           	callstack 0
  1065  00016F                     	ds	2
  1066  000171                     _flag_anomalia:
  1067                           	callstack 0
  1068  000171                     	ds	1
  1069  000172                     _estado:
  1070                           	callstack 0
  1071  000172                     	ds	1
  1072  000173                     _data_hoje:
  1073                           	callstack 0
  1074  000173                     	ds	1
  1075  000174                     	ds	1
  1076  000175                     _E_W:
  1077                           	callstack 0
  1078  000175                     	ds	1
  1079  000176                     _n_s:
  1080                           	callstack 0
  1081  000176                     	ds	1
  1082  000177                     _Term:
  1083                           	callstack 0
  1084  000177                     	ds	1
  1085  000178                     _SentenceType:
  1086                           	callstack 0
  1087  000178                     	ds	1
  1088  000179                     _char_number:
  1089                           	callstack 0
  1090  000179                     	ds	1
  1091  00017A                     _fil:
  1092                           	callstack 0
  1093  00017A                     	ds	28
  1094  000196                     _lo:
  1095                           	callstack 0
  1096  000196                     	ds	13
  1097  0001A3                     _rawLongitude:
  1098                           	callstack 0
  1099  0001A3                     	ds	13
  1100  0001B0                     _lt:
  1101                           	callstack 0
  1102  0001B0                     	ds	12
  1103  0001BC                     _rawLatitude:
  1104                           	callstack 0
  1105  0001BC                     	ds	12
  1106  0001C8                     _hora:
  1107                           	callstack 0
  1108  0001C8                     	ds	7
  1109  0001CF                     _rawTime:
  1110                           	callstack 0
  1111  0001CF                     	ds	7
  1112  0001D6                     _data:
  1113                           	callstack 0
  1114  0001D6                     	ds	6
  1115  0001DC                     _vel:
  1116                           	callstack 0
  1117  0001DC                     	ds	6
  1118  0001E2                     _fence:
  1119                           	callstack 0
  1120  0001E2                     	ds	6
  1121  0001E8                     _rawDate:
  1122                           	callstack 0
  1123  0001E8                     	ds	6
  1124  0001EE                     _rawFix:
  1125                           	callstack 0
  1126  0001EE                     	ds	2
  1127                           
  1128                           	psect	dataBANK1
  1129  0001F0                     __pdataBANK1:
  1130                           	callstack 0
  1131  0001F0                     	ds	7
  1132  0001F7                     escreve_inteiro_lcd@F3223:
  1133                           	callstack 0
  1134  0001F7                     	ds	7
  1135  0001FE                     	ds	1
  1136                           
  1137                           	psect	bssBANK2
  1138  000200                     __pbssBANK2:
  1139                           	callstack 0
  1140  000200                     _string_dado:
  1141                           	callstack 0
  1142  000200                     	ds	22
  1143  000216                     _gga_pointers:
  1144                           	callstack 0
  1145  000216                     	ds	20
  1146  00022A                     _rmc_pointers:
  1147                           	callstack 0
  1148  00022A                     	ds	12
  1149  000236                     _buffer:
  1150                           	callstack 0
  1151  000236                     	ds	12
  1152  000242                     _dado_arquivo:
  1153                           	callstack 0
  1154  000242                     	ds	20
  1155  000256                     _filename:
  1156                           	callstack 0
  1157  000256                     	ds	20
  1158  00026A                     _rawSpeed:
  1159                           	callstack 0
  1160  00026A                     	ds	20
  1161                           
  1162                           	psect	dataBANK2
  1163  00027E                     __pdataBANK2:
  1164                           	callstack 0
  1165  00027E                     _dados_long:
  1166                           	callstack 0
  1167  00027E                     	ds	36
  1168  0002A2                     _dados_lat:
  1169                           	callstack 0
  1170  0002A2                     	ds	33
  1171  0002C3                     _dados_data:
  1172                           	callstack 0
  1173  0002C3                     	ds	18
  1174  0002D5                     _dados_hora:
  1175                           	callstack 0
  1176  0002D5                     	ds	18
  1177                           
  1178                           	psect	bssBANK3
  1179  000300                     __pbssBANK3:
  1180                           	callstack 0
  1181  000300                     _gga_buffer:
  1182                           	callstack 0
  1183  000300                     	ds	80
  1184  000350                     _rmc_buffer:
  1185                           	callstack 0
  1186  000350                     	ds	70
  1187                           
  1188                           	psect	bssBIGRAM
  1189  000396                     __pbssBIGRAM:
  1190                           	callstack 0
  1191  000396                     _fs:
  1192                           	callstack 0
  1193  000396                     	ds	544
  1194                           
  1195                           	psect	cstackBANK2
  1196  0002E7                     __pcstackBANK2:
  1197                           	callstack 0
  1198  0002E7                     disparo_gravacao@velocidade:
  1199                           	callstack 0
  1200                           
  1201                           ; 12 bytes @ 0x0
  1202  0002E7                     	ds	12
  1203  0002F3                     disparo_gravacao@fix_gps:
  1204                           	callstack 0
  1205                           
  1206                           ; 2 bytes @ 0xC
  1207  0002F3                     	ds	2
  1208  0002F5                     disparo_gravacao@v_max:
  1209                           	callstack 0
  1210                           
  1211                           ; 2 bytes @ 0xE
  1212  0002F5                     	ds	2
  1213  0002F7                     disparo_gravacao@index_max:
  1214                           	callstack 0
  1215                           
  1216                           ; 2 bytes @ 0x10
  1217  0002F7                     	ds	2
  1218  0002F9                     disparo_gravacao@i:
  1219                           	callstack 0
  1220                           
  1221                           ; 1 bytes @ 0x12
  1222  0002F9                     	ds	1
  1223                           
  1224                           	psect	cstackBANK0
  1225  000060                     __pcstackBANK0:
  1226                           	callstack 0
  1227  000060                     ??_get_cluster:
  1228  000060                     ??_auto_mount:
  1229  000060                     put_cluster@clust:
  1230                           	callstack 0
  1231  000060                     f_sync@fp:
  1232                           	callstack 0
  1233  000060                     latitude_to_convert@latitude:
  1234                           	callstack 0
  1235  000060                     longitude_to_convert@longitude:
  1236                           	callstack 0
  1237                           
  1238                           ; 11 bytes @ 0x0
  1239  000060                     	ds	2
  1240  000062                     put_cluster@val:
  1241                           	callstack 0
  1242  000062                     f_sync@tim:
  1243                           	callstack 0
  1244                           
  1245                           ; 4 bytes @ 0x2
  1246  000062                     	ds	2
  1247  000064                     ??_put_cluster:
  1248                           
  1249                           ; 1 bytes @ 0x4
  1250  000064                     	ds	2
  1251  000066                     f_sync@res:
  1252                           	callstack 0
  1253                           
  1254                           ; 1 bytes @ 0x6
  1255  000066                     	ds	1
  1256  000067                     f_sync@dir:
  1257                           	callstack 0
  1258                           
  1259                           ; 2 bytes @ 0x7
  1260  000067                     	ds	2
  1261  000069                     latitude_to_convert@j:
  1262                           	callstack 0
  1263  000069                     get_cluster@wc:
  1264                           	callstack 0
  1265  000069                     f_close@fp:
  1266                           	callstack 0
  1267                           
  1268                           ; 2 bytes @ 0x9
  1269  000069                     	ds	1
  1270  00006A                     latitude_to_convert@i:
  1271                           	callstack 0
  1272  00006A                     _put_cluster$1624:
  1273                           	callstack 0
  1274                           
  1275                           ; 2 bytes @ 0xA
  1276  00006A                     	ds	1
  1277  00006B                     longitude_to_convert@j:
  1278                           	callstack 0
  1279  00006B                     get_cluster@fatsect:
  1280                           	callstack 0
  1281                           
  1282                           ; 4 bytes @ 0xB
  1283  00006B                     	ds	1
  1284  00006C                     longitude_to_convert@i:
  1285                           	callstack 0
  1286  00006C                     _put_cluster$1625:
  1287                           	callstack 0
  1288                           
  1289                           ; 2 bytes @ 0xC
  1290  00006C                     	ds	2
  1291  00006E                     put_cluster@fatsect:
  1292                           	callstack 0
  1293                           
  1294                           ; 4 bytes @ 0xE
  1295  00006E                     	ds	1
  1296  00006F                     get_cluster@bc:
  1297                           	callstack 0
  1298                           
  1299                           ; 2 bytes @ 0xF
  1300  00006F                     	ds	2
  1301  000071                     get_cluster@fs:
  1302                           	callstack 0
  1303                           
  1304                           ; 2 bytes @ 0x11
  1305  000071                     	ds	1
  1306  000072                     put_cluster@bc:
  1307                           	callstack 0
  1308                           
  1309                           ; 2 bytes @ 0x12
  1310  000072                     	ds	1
  1311  000073                     ??_next_dir_entry:
  1312                           
  1313                           ; 1 bytes @ 0x13
  1314  000073                     	ds	1
  1315  000074                     put_cluster@p:
  1316                           	callstack 0
  1317                           
  1318                           ; 2 bytes @ 0x14
  1319  000074                     	ds	2
  1320  000076                     put_cluster@fs:
  1321                           	callstack 0
  1322  000076                     auto_mount@maxclust:
  1323                           	callstack 0
  1324                           
  1325                           ; 4 bytes @ 0x16
  1326  000076                     	ds	2
  1327  000078                     ?_create_chain:
  1328                           	callstack 0
  1329  000078                     remove_chain@clust:
  1330                           	callstack 0
  1331  000078                     create_chain@clust:
  1332                           	callstack 0
  1333                           
  1334                           ; 2 bytes @ 0x18
  1335  000078                     	ds	2
  1336  00007A                     next_dir_entry@clust:
  1337                           	callstack 0
  1338  00007A                     auto_mount@bootsect:
  1339                           	callstack 0
  1340                           
  1341                           ; 4 bytes @ 0x1A
  1342  00007A                     	ds	2
  1343  00007C                     remove_chain@nxt:
  1344                           	callstack 0
  1345  00007C                     create_chain@mcl:
  1346                           	callstack 0
  1347  00007C                     next_dir_entry@idx:
  1348                           	callstack 0
  1349                           
  1350                           ; 2 bytes @ 0x1C
  1351  00007C                     	ds	2
  1352  00007E                     trace_path@dj:
  1353                           	callstack 0
  1354  00007E                     remove_chain@fs:
  1355                           	callstack 0
  1356  00007E                     create_chain@fs:
  1357                           	callstack 0
  1358  00007E                     auto_mount@totalsect:
  1359                           	callstack 0
  1360                           
  1361                           ; 4 bytes @ 0x1E
  1362  00007E                     	ds	1
  1363  00007F                     trace_path@fn:
  1364                           	callstack 0
  1365                           
  1366                           ; 1 bytes @ 0x1F
  1367  00007F                     	ds	1
  1368  000080                     create_chain@cstat:
  1369                           	callstack 0
  1370  000080                     trace_path@path:
  1371                           	callstack 0
  1372                           
  1373                           ; 2 bytes @ 0x20
  1374  000080                     	ds	2
  1375  000082                     trace_path@dir:
  1376                           	callstack 0
  1377  000082                     create_chain@scl:
  1378                           	callstack 0
  1379  000082                     auto_mount@p:
  1380                           	callstack 0
  1381                           
  1382                           ; 2 bytes @ 0x22
  1383  000082                     	ds	1
  1384  000083                     ??_trace_path:
  1385                           
  1386                           ; 1 bytes @ 0x23
  1387  000083                     	ds	1
  1388  000084                     auto_mount@fmt:
  1389                           	callstack 0
  1390  000084                     create_chain@ncl:
  1391                           	callstack 0
  1392                           
  1393                           ; 2 bytes @ 0x24
  1394  000084                     	ds	1
  1395  000085                     auto_mount@stat:
  1396                           	callstack 0
  1397                           
  1398                           ; 1 bytes @ 0x25
  1399  000085                     	ds	1
  1400  000086                     reserve_direntry@dj:
  1401                           	callstack 0
  1402  000086                     f_write@fp:
  1403                           	callstack 0
  1404  000086                     f_lseek@fp:
  1405                           	callstack 0
  1406  000086                     auto_mount@fatsize:
  1407                           	callstack 0
  1408                           
  1409                           ; 4 bytes @ 0x26
  1410  000086                     	ds	1
  1411  000087                     reserve_direntry@dir:
  1412                           	callstack 0
  1413  000087                     _trace_path$1781:
  1414                           	callstack 0
  1415                           
  1416                           ; 2 bytes @ 0x27
  1417  000087                     	ds	1
  1418  000088                     ??_reserve_direntry:
  1419  000088                     f_write@buff:
  1420                           	callstack 0
  1421  000088                     f_lseek@ofs:
  1422                           	callstack 0
  1423                           
  1424                           ; 4 bytes @ 0x28
  1425  000088                     	ds	1
  1426  000089                     _trace_path$1783:
  1427                           	callstack 0
  1428  000089                     f_write@btw:
  1429                           	callstack 0
  1430                           
  1431                           ; 2 bytes @ 0x29
  1432  000089                     	ds	1
  1433  00008A                     auto_mount@fs:
  1434                           	callstack 0
  1435                           
  1436                           ; 2 bytes @ 0x2A
  1437  00008A                     	ds	1
  1438  00008B                     f_write@bw:
  1439                           	callstack 0
  1440  00008B                     trace_path@fs:
  1441                           	callstack 0
  1442                           
  1443                           ; 2 bytes @ 0x2B
  1444  00008B                     	ds	1
  1445  00008C                     ??_f_lseek:
  1446  00008C                     ??_f_write:
  1447  00008C                     reserve_direntry@sector:
  1448                           	callstack 0
  1449                           
  1450                           ; 4 bytes @ 0x2C
  1451  00008C                     	ds	1
  1452  00008D                     trace_path@clust:
  1453                           	callstack 0
  1454                           
  1455                           ; 2 bytes @ 0x2D
  1456  00008D                     	ds	2
  1457  00008F                     trace_path@ds:
  1458                           	callstack 0
  1459                           
  1460                           ; 1 bytes @ 0x2F
  1461  00008F                     	ds	1
  1462  000090                     reserve_direntry@n:
  1463                           	callstack 0
  1464  000090                     trace_path@dptr:
  1465                           	callstack 0
  1466                           
  1467                           ; 2 bytes @ 0x30
  1468  000090                     	ds	1
  1469  000091                     reserve_direntry@dptr:
  1470                           	callstack 0
  1471                           
  1472                           ; 2 bytes @ 0x31
  1473  000091                     	ds	2
  1474  000093                     reserve_direntry@c:
  1475                           	callstack 0
  1476                           
  1477                           ; 1 bytes @ 0x33
  1478  000093                     	ds	1
  1479  000094                     reserve_direntry@clust:
  1480                           	callstack 0
  1481                           
  1482                           ; 2 bytes @ 0x34
  1483  000094                     	ds	2
  1484  000096                     reserve_direntry@fs:
  1485                           	callstack 0
  1486                           
  1487                           ; 2 bytes @ 0x36
  1488  000096                     	ds	2
  1489  000098                     f_write@res:
  1490                           	callstack 0
  1491  000098                     f_open@fp:
  1492                           	callstack 0
  1493                           
  1494                           ; 2 bytes @ 0x38
  1495  000098                     	ds	1
  1496  000099                     f_write@wbuff:
  1497                           	callstack 0
  1498                           
  1499                           ; 1 bytes @ 0x39
  1500  000099                     	ds	1
  1501  00009A                     f_open@path:
  1502                           	callstack 0
  1503  00009A                     f_write@sect:
  1504                           	callstack 0
  1505                           
  1506                           ; 4 bytes @ 0x3A
  1507  00009A                     	ds	2
  1508  00009C                     f_open@mode:
  1509                           	callstack 0
  1510  00009C                     f_lseek@res:
  1511                           	callstack 0
  1512                           
  1513                           ; 1 bytes @ 0x3C
  1514  00009C                     	ds	1
  1515  00009D                     ??_f_open:
  1516  00009D                     f_lseek@ifptr:
  1517                           	callstack 0
  1518                           
  1519                           ; 4 bytes @ 0x3D
  1520  00009D                     	ds	1
  1521  00009E                     f_write@cc:
  1522                           	callstack 0
  1523                           
  1524                           ; 2 bytes @ 0x3E
  1525  00009E                     	ds	2
  1526  0000A0                     f_write@clust:
  1527                           	callstack 0
  1528                           
  1529                           ; 2 bytes @ 0x40
  1530  0000A0                     	ds	1
  1531  0000A1                     f_lseek@csize:
  1532                           	callstack 0
  1533  0000A1                     f_open@fn:
  1534                           	callstack 0
  1535                           
  1536                           ; 12 bytes @ 0x41
  1537  0000A1                     	ds	1
  1538  0000A2                     f_write@wcnt:
  1539                           	callstack 0
  1540                           
  1541                           ; 2 bytes @ 0x42
  1542  0000A2                     	ds	2
  1543  0000A4                     ?_fputc:
  1544                           	callstack 0
  1545  0000A4                     fputc@chr:
  1546                           	callstack 0
  1547                           
  1548                           ; 2 bytes @ 0x44
  1549  0000A4                     	ds	1
  1550  0000A5                     f_lseek@clust:
  1551                           	callstack 0
  1552                           
  1553                           ; 2 bytes @ 0x45
  1554  0000A5                     	ds	1
  1555  0000A6                     fputc@fil:
  1556                           	callstack 0
  1557                           
  1558                           ; 2 bytes @ 0x46
  1559  0000A6                     	ds	2
  1560  0000A8                     fputc@c:
  1561                           	callstack 0
  1562                           
  1563                           ; 1 bytes @ 0x48
  1564  0000A8                     	ds	1
  1565  0000A9                     fputc@bw:
  1566                           	callstack 0
  1567                           
  1568                           ; 2 bytes @ 0x49
  1569  0000A9                     	ds	2
  1570  0000AB                     ?_fputs:
  1571                           	callstack 0
  1572  0000AB                     fputs@str:
  1573                           	callstack 0
  1574                           
  1575                           ; 2 bytes @ 0x4B
  1576  0000AB                     	ds	2
  1577  0000AD                     f_open@rs:
  1578                           	callstack 0
  1579  0000AD                     fputs@fil:
  1580                           	callstack 0
  1581                           
  1582                           ; 2 bytes @ 0x4D
  1583  0000AD                     	ds	2
  1584  0000AF                     fputs@n:
  1585                           	callstack 0
  1586  0000AF                     f_open@dw:
  1587                           	callstack 0
  1588                           
  1589                           ; 4 bytes @ 0x4F
  1590  0000AF                     	ds	2
  1591  0000B1                     ?_fprintf:
  1592                           	callstack 0
  1593  0000B1                     fprintf@fil:
  1594                           	callstack 0
  1595                           
  1596                           ; 2 bytes @ 0x51
  1597  0000B1                     	ds	2
  1598  0000B3                     f_open@res:
  1599                           	callstack 0
  1600  0000B3                     fprintf@str:
  1601                           	callstack 0
  1602                           
  1603                           ; 2 bytes @ 0x53
  1604  0000B3                     	ds	1
  1605  0000B4                     f_open@dir:
  1606                           	callstack 0
  1607                           
  1608                           ; 2 bytes @ 0x54
  1609  0000B4                     	ds	2
  1610  0000B6                     f_open@dj:
  1611                           	callstack 0
  1612                           
  1613                           ; 14 bytes @ 0x56
  1614  0000B6                     	ds	5
  1615  0000BB                     ??_fprintf:
  1616                           
  1617                           ; 1 bytes @ 0x5B
  1618  0000BB                     	ds	2
  1619  0000BD                     fprintf@s:
  1620                           	callstack 0
  1621                           
  1622                           ; 16 bytes @ 0x5D
  1623  0000BD                     	ds	16
  1624  0000CD                     fprintf@res:
  1625                           	callstack 0
  1626                           
  1627                           ; 2 bytes @ 0x6D
  1628  0000CD                     	ds	2
  1629  0000CF                     _fprintf$2227:
  1630                           	callstack 0
  1631                           
  1632                           ; 2 bytes @ 0x6F
  1633  0000CF                     	ds	2
  1634  0000D1                     fprintf@w:
  1635                           	callstack 0
  1636                           
  1637                           ; 2 bytes @ 0x71
  1638  0000D1                     	ds	2
  1639  0000D3                     fprintf@f:
  1640                           	callstack 0
  1641                           
  1642                           ; 1 bytes @ 0x73
  1643  0000D3                     	ds	1
  1644  0000D4                     fprintf@r:
  1645                           	callstack 0
  1646                           
  1647                           ; 1 bytes @ 0x74
  1648  0000D4                     	ds	1
  1649  0000D5                     fprintf@val:
  1650                           	callstack 0
  1651                           
  1652                           ; 4 bytes @ 0x75
  1653  0000D5                     	ds	4
  1654  0000D9                     fprintf@arp:
  1655                           	callstack 0
  1656                           
  1657                           ; 1 bytes @ 0x79
  1658  0000D9                     	ds	1
  1659  0000DA                     fprintf@cc:
  1660                           	callstack 0
  1661                           
  1662                           ; 2 bytes @ 0x7A
  1663  0000DA                     	ds	2
  1664  0000DC                     fprintf@i:
  1665                           	callstack 0
  1666                           
  1667                           ; 2 bytes @ 0x7C
  1668  0000DC                     	ds	2
  1669  0000DE                     fprintf@c:
  1670                           	callstack 0
  1671                           
  1672                           ; 1 bytes @ 0x7E
  1673  0000DE                     	ds	1
  1674  0000DF                     ??_disparo_gravacao:
  1675                           
  1676                           ; 1 bytes @ 0x7F
  1677  0000DF                     	ds	5
  1678  0000E4                     ??_escalonador:
  1679                           
  1680                           ; 1 bytes @ 0x84
  1681  0000E4                     	ds	2
  1682  0000E6                     escalonador@cont:
  1683                           	callstack 0
  1684                           
  1685                           ; 1 bytes @ 0x86
  1686  0000E6                     	ds	1
  1687                           
  1688                           	psect	cstackCOMRAM
  1689  000001                     __pcstackCOMRAM:
  1690                           	callstack 0
  1691  000001                     tratamento_uart@received_char:
  1692                           	callstack 0
  1693  000001                     i2write_timer_zero@timer0:
  1694                           	callstack 0
  1695                           
  1696                           ; 2 bytes @ 0x0
  1697  000001                     	ds	2
  1698  000003                     ??_isr:
  1699  000003                     
  1700                           ; 1 bytes @ 0x2
  1701  000003                     	ds	6
  1702  000009                     isr@cont:
  1703                           	callstack 0
  1704                           
  1705                           ; 1 bytes @ 0x8
  1706  000009                     	ds	1
  1707  00000A                     ??_dummy_clocks:
  1708  00000A                     ??_isdigit:
  1709  00000A                     ?_fix:
  1710                           	callstack 0
  1711  00000A                     ?_latitude:
  1712                           	callstack 0
  1713  00000A                     ?_longitude:
  1714                           	callstack 0
  1715  00000A                     ?_rawhora:
  1716                           	callstack 0
  1717  00000A                     ?_rawdata:
  1718                           	callstack 0
  1719  00000A                     ?_Speed:
  1720                           	callstack 0
  1721  00000A                     ?_strlen:
  1722                           	callstack 0
  1723  00000A                     ?_memcmp:
  1724                           	callstack 0
  1725  00000A                     ?_gps_segundos:
  1726                           	callstack 0
  1727  00000A                     ?_gps_minutos:
  1728                           	callstack 0
  1729  00000A                     ?_gps_hora:
  1730                           	callstack 0
  1731  00000A                     ?_gps_dia:
  1732                           	callstack 0
  1733  00000A                     ?_gps_mes:
  1734                           	callstack 0
  1735  00000A                     ?_gps_ano:
  1736                           	callstack 0
  1737  00000A                     ?___wmul:
  1738                           	callstack 0
  1739  00000A                     ?___lwdiv:
  1740                           	callstack 0
  1741  00000A                     ?___lwmod:
  1742                           	callstack 0
  1743  00000A                     ?___ftpack:
  1744                           	callstack 0
  1745  00000A                     ?___lmul:
  1746                           	callstack 0
  1747  00000A                     ?___lldiv:
  1748                           	callstack 0
  1749  00000A                     ?___aldiv:
  1750                           	callstack 0
  1751  00000A                     ?___llmod:
  1752                           	callstack 0
  1753  00000A                     disk_ioctl@cmd:
  1754                           	callstack 0
  1755  00000A                     delay@contador_ext:
  1756                           	callstack 0
  1757  00000A                     get_gpstime@index:
  1758                           	callstack 0
  1759  00000A                     get_latitude@index_lat:
  1760                           	callstack 0
  1761  00000A                     get_longitude@index_long:
  1762                           	callstack 0
  1763  00000A                     get_rawdate@index_date:
  1764                           	callstack 0
  1765  00000A                     get_rawspeed@index_speed:
  1766                           	callstack 0
  1767  00000A                     response@buff:
  1768                           	callstack 0
  1769  00000A                     recebe_dado_gps@flag_recebe:
  1770                           	callstack 0
  1771  00000A                     verifica_plausibilidade_long@posicao:
  1772                           	callstack 0
  1773  00000A                     verifica_plausibilidade_lat@posicao:
  1774                           	callstack 0
  1775  00000A                     write_timer_zero@timer0:
  1776                           	callstack 0
  1777  00000A                     data_nome@p_buff:
  1778                           	callstack 0
  1779  00000A                     hora_nome@p_buff:
  1780                           	callstack 0
  1781  00000A                     f_mount@fs:
  1782                           	callstack 0
  1783  00000A                     ___wmul@multiplier:
  1784                           	callstack 0
  1785  00000A                     ___lwdiv@dividend:
  1786                           	callstack 0
  1787  00000A                     ___lwmod@dividend:
  1788                           	callstack 0
  1789  00000A                     memcmp@s1:
  1790                           	callstack 0
  1791  00000A                     memcpy@d1:
  1792                           	callstack 0
  1793  00000A                     memset@p1:
  1794                           	callstack 0
  1795  00000A                     strcat@to:
  1796                           	callstack 0
  1797  00000A                     strlen@s:
  1798                           	callstack 0
  1799  00000A                     ___ftpack@arg:
  1800                           	callstack 0
  1801  00000A                     wait_ready@timeout:
  1802                           	callstack 0
  1803  00000A                     ___lmul@multiplier:
  1804                           	callstack 0
  1805  00000A                     ___lldiv@dividend:
  1806                           	callstack 0
  1807  00000A                     ___aldiv@dividend:
  1808                           	callstack 0
  1809  00000A                     ___llmod@dividend:
  1810                           	callstack 0
  1811                           
  1812                           ; 4 bytes @ 0x9
  1813  00000A                     	ds	1
  1814  00000B                     sdc_disk_status@pdrv:
  1815                           	callstack 0
  1816  00000B                     delay@contador_int:
  1817                           	callstack 0
  1818  00000B                     get_latitude@index:
  1819                           	callstack 0
  1820  00000B                     get_longitude@index:
  1821                           	callstack 0
  1822  00000B                     get_rawdate@index:
  1823                           	callstack 0
  1824  00000B                     get_rawspeed@index:
  1825                           	callstack 0
  1826  00000B                     escreve_SPI@dado:
  1827                           	callstack 0
  1828  00000B                     recebe_dado_gps@timeout:
  1829                           	callstack 0
  1830  00000B                     _isdigit$3276:
  1831                           	callstack 0
  1832  00000B                     disk_ioctl@buff:
  1833                           	callstack 0
  1834                           
  1835                           ; 2 bytes @ 0xA
  1836  00000B                     	ds	1
  1837  00000C                     ??_gps_segundos:
  1838  00000C                     ??_gps_minutos:
  1839  00000C                     ??_gps_hora:
  1840  00000C                     ??_gps_dia:
  1841  00000C                     ??_gps_mes:
  1842  00000C                     ??_gps_ano:
  1843  00000C                     escreve_cmd_lcd@comando:
  1844                           	callstack 0
  1845  00000C                     endereco_cursor_lcd@endereco:
  1846                           	callstack 0
  1847  00000C                     escreve_caractere_lcd@data:
  1848                           	callstack 0
  1849  00000C                     dummy_clocks@n:
  1850                           	callstack 0
  1851  00000C                     data_nome@i:
  1852                           	callstack 0
  1853  00000C                     hora_nome@i:
  1854                           	callstack 0
  1855  00000C                     f_mount@drv:
  1856                           	callstack 0
  1857  00000C                     isdigit@c:
  1858                           	callstack 0
  1859  00000C                     ___wmul@multiplicand:
  1860                           	callstack 0
  1861  00000C                     ___lwdiv@divisor:
  1862                           	callstack 0
  1863  00000C                     ___lwmod@divisor:
  1864                           	callstack 0
  1865  00000C                     memcmp@s2:
  1866                           	callstack 0
  1867  00000C                     memcpy@s1:
  1868                           	callstack 0
  1869  00000C                     memset@c:
  1870                           	callstack 0
  1871  00000C                     strcat@from:
  1872                           	callstack 0
  1873  00000C                     strcpy@to:
  1874                           	callstack 0
  1875  00000C                     strlen@cp:
  1876                           	callstack 0
  1877                           
  1878                           ; 2 bytes @ 0xB
  1879  00000C                     	ds	1
  1880  00000D                     ??_init_lcd:
  1881  00000D                     disk_ioctl@pdrv:
  1882                           	callstack 0
  1883  00000D                     posicao_cursor_lcd@coluna:
  1884                           	callstack 0
  1885  00000D                     ___ftpack@exp:
  1886                           	callstack 0
  1887  00000D                     escreve_frase_ram_lcd@buffer:
  1888                           	callstack 0
  1889  00000D                     dummy_clocks@i:
  1890                           	callstack 0
  1891                           
  1892                           ; 2 bytes @ 0xC
  1893  00000D                     	ds	1
  1894  00000E                     ?_get_fattime:
  1895                           	callstack 0
  1896  00000E                     disk_status@pdrv:
  1897                           	callstack 0
  1898  00000E                     disk_ioctl@res:
  1899                           	callstack 0
  1900  00000E                     posicao_cursor_lcd@linha:
  1901                           	callstack 0
  1902  00000E                     wait_ready@res:
  1903                           	callstack 0
  1904  00000E                     ___ftpack@sign:
  1905                           	callstack 0
  1906  00000E                     ___lwdiv@counter:
  1907                           	callstack 0
  1908  00000E                     ___lwmod@counter:
  1909                           	callstack 0
  1910  00000E                     ___wmul@product:
  1911                           	callstack 0
  1912  00000E                     memcmp@n:
  1913                           	callstack 0
  1914  00000E                     memcpy@n:
  1915                           	callstack 0
  1916  00000E                     memset@n:
  1917                           	callstack 0
  1918  00000E                     strcat@cp:
  1919                           	callstack 0
  1920  00000E                     strcpy@from:
  1921                           	callstack 0
  1922  00000E                     ___lmul@multiplicand:
  1923                           	callstack 0
  1924  00000E                     ___lldiv@divisor:
  1925                           	callstack 0
  1926  00000E                     ___aldiv@divisor:
  1927                           	callstack 0
  1928  00000E                     ___llmod@divisor:
  1929                           	callstack 0
  1930                           
  1931                           ; 4 bytes @ 0xD
  1932  00000E                     	ds	1
  1933  00000F                     ??___ftpack:
  1934  00000F                     disk_status@stat:
  1935                           	callstack 0
  1936  00000F                     posicao_cursor_lcd@endereco:
  1937                           	callstack 0
  1938  00000F                     ___lwdiv@quotient:
  1939                           	callstack 0
  1940  00000F                     command@arg:
  1941                           	callstack 0
  1942                           
  1943                           ; 4 bytes @ 0xE
  1944  00000F                     	ds	1
  1945  000010                     ??_memcmp:
  1946  000010                     ??_mensagem_inicial:
  1947  000010                     ?_atoi:
  1948                           	callstack 0
  1949  000010                     get_fix@index_fix:
  1950                           	callstack 0
  1951  000010                     memcpy@tmp:
  1952                           	callstack 0
  1953  000010                     monta_sd@dado:
  1954                           	callstack 0
  1955  000010                     validate@fs:
  1956                           	callstack 0
  1957  000010                     memset@p:
  1958                           	callstack 0
  1959  000010                     strcpy@cp:
  1960                           	callstack 0
  1961  000010                     atoi@s:
  1962                           	callstack 0
  1963                           
  1964                           ; 3 bytes @ 0xF
  1965  000010                     	ds	1
  1966  000011                     get_fix@index:
  1967                           	callstack 0
  1968  000011                     utoa@buf:
  1969                           	callstack 0
  1970  000011                     memcpy@d:
  1971                           	callstack 0
  1972                           
  1973                           ; 2 bytes @ 0x10
  1974  000011                     	ds	1
  1975  000012                     ??_get_fattime:
  1976  000012                     make_dirfile@path:
  1977                           	callstack 0
  1978  000012                     ___aldiv@counter:
  1979                           	callstack 0
  1980  000012                     ___llmod@counter:
  1981                           	callstack 0
  1982  000012                     validate@id:
  1983                           	callstack 0
  1984  000012                     ___lmul@product:
  1985                           	callstack 0
  1986  000012                     ___lldiv@quotient:
  1987                           	callstack 0
  1988  000012                     mensagem_inicial@msg_linha_um:
  1989                           	callstack 0
  1990                           
  1991                           ; 17 bytes @ 0x11
  1992  000012                     	ds	1
  1993  000013                     ??_atoi:
  1994  000013                     command@CRC:
  1995                           	callstack 0
  1996  000013                     monta_sd@index:
  1997                           	callstack 0
  1998  000013                     make_dirfile@dirname:
  1999                           	callstack 0
  2000  000013                     ___aldiv@sign:
  2001                           	callstack 0
  2002  000013                     gps@flag_fix:
  2003                           	callstack 0
  2004  000013                     utoa@val:
  2005                           	callstack 0
  2006  000013                     memcpy@s:
  2007                           	callstack 0
  2008                           
  2009                           ; 2 bytes @ 0x12
  2010  000013                     	ds	1
  2011  000014                     ??_make_dirfile:
  2012  000014                     ??_validate:
  2013  000014                     command@CMD:
  2014                           	callstack 0
  2015  000014                     monta_sd@i:
  2016                           	callstack 0
  2017  000014                     ___aldiv@quotient:
  2018                           	callstack 0
  2019                           
  2020                           ; 4 bytes @ 0x13
  2021  000014                     	ds	1
  2022  000015                     command@argument:
  2023                           	callstack 0
  2024  000015                     atoi@sign:
  2025                           	callstack 0
  2026  000015                     utoa@base:
  2027                           	callstack 0
  2028                           
  2029                           ; 2 bytes @ 0x14
  2030  000015                     	ds	1
  2031  000016                     ?_atol:
  2032                           	callstack 0
  2033  000016                     ?_clust2sect:
  2034                           	callstack 0
  2035  000016                     ___lldiv@counter:
  2036                           	callstack 0
  2037  000016                     sdc_disk_read@p_buff:
  2038                           	callstack 0
  2039  000016                     sdc_disk_write@p_buff:
  2040                           	callstack 0
  2041  000016                     clust2sect@clust:
  2042                           	callstack 0
  2043  000016                     _make_dirfile$1734:
  2044                           	callstack 0
  2045  000016                     atoi@a:
  2046                           	callstack 0
  2047  000016                     atol@s:
  2048                           	callstack 0
  2049                           
  2050                           ; 2 bytes @ 0x15
  2051  000016                     	ds	1
  2052  000017                     ultoa@buf:
  2053                           	callstack 0
  2054  000017                     utoa@v:
  2055                           	callstack 0
  2056                           
  2057                           ; 2 bytes @ 0x16
  2058  000017                     	ds	1
  2059  000018                     ?___awtoft:
  2060                           	callstack 0
  2061  000018                     make_dirfile@b:
  2062                           	callstack 0
  2063  000018                     sdc_reset@count_nosd:
  2064                           	callstack 0
  2065  000018                     ___awtoft@c:
  2066                           	callstack 0
  2067  000018                     sdc_disk_read@sector:
  2068                           	callstack 0
  2069  000018                     sdc_disk_write@sector:
  2070                           	callstack 0
  2071  000018                     configura_baudrate_uart@baudrate:
  2072                           	callstack 0
  2073  000018                     ultoa@val:
  2074                           	callstack 0
  2075                           
  2076                           ; 4 bytes @ 0x17
  2077  000018                     	ds	1
  2078  000019                     make_dirfile@t:
  2079                           	callstack 0
  2080  000019                     utoa@c:
  2081                           	callstack 0
  2082                           
  2083                           ; 1 bytes @ 0x18
  2084  000019                     	ds	1
  2085  00001A                     ??_atol:
  2086  00001A                     ??_clust2sect:
  2087  00001A                     make_dirfile@a:
  2088                           	callstack 0
  2089  00001A                     sdc_reset@count:
  2090                           	callstack 0
  2091  00001A                     itoa@buf:
  2092                           	callstack 0
  2093                           
  2094                           ; 2 bytes @ 0x19
  2095  00001A                     	ds	1
  2096  00001B                     make_dirfile@n:
  2097                           	callstack 0
  2098  00001B                     ___awtoft@sign:
  2099                           	callstack 0
  2100                           
  2101                           ; 1 bytes @ 0x1A
  2102  00001B                     	ds	1
  2103  00001C                     ??_configura_baudrate_uart:
  2104  00001C                     ?___ftmul:
  2105                           	callstack 0
  2106  00001C                     sdc_reset@buff:
  2107                           	callstack 0
  2108  00001C                     sdc_disk_read@count:
  2109                           	callstack 0
  2110  00001C                     sdc_disk_write@count:
  2111                           	callstack 0
  2112  00001C                     make_dirfile@c:
  2113                           	callstack 0
  2114  00001C                     itoa@val:
  2115                           	callstack 0
  2116  00001C                     ultoa@base:
  2117                           	callstack 0
  2118  00001C                     ___ftmul@f1:
  2119                           	callstack 0
  2120                           
  2121                           ; 3 bytes @ 0x1B
  2122  00001C                     	ds	1
  2123  00001D                     ??_sdc_disk_initialize:
  2124  00001D                     ??_sdc_disk_read:
  2125  00001D                     ??_sdc_disk_write:
  2126                           
  2127                           ; 1 bytes @ 0x1C
  2128  00001D                     	ds	1
  2129  00001E                     atol@sign:
  2130                           	callstack 0
  2131  00001E                     itoa@base:
  2132                           	callstack 0
  2133  00001E                     ultoa@v:
  2134                           	callstack 0
  2135                           
  2136                           ; 4 bytes @ 0x1D
  2137  00001E                     	ds	1
  2138  00001F                     clust2sect@fs:
  2139                           	callstack 0
  2140  00001F                     ___ftmul@f2:
  2141                           	callstack 0
  2142  00001F                     atol@a:
  2143                           	callstack 0
  2144                           
  2145                           ; 4 bytes @ 0x1E
  2146  00001F                     	ds	1
  2147  000020                     sdc_disk_initialize@stat:
  2148                           	callstack 0
  2149                           
  2150                           ; 1 bytes @ 0x1F
  2151  000020                     	ds	1
  2152  000021                     sdc_disk_initialize@count1:
  2153                           	callstack 0
  2154                           
  2155                           ; 2 bytes @ 0x20
  2156  000021                     	ds	1
  2157  000022                     ??___ftmul:
  2158  000022                     ultoa@c:
  2159                           	callstack 0
  2160  000022                     sdc_disk_read@start_add:
  2161                           	callstack 0
  2162                           
  2163                           ; 4 bytes @ 0x21
  2164  000022                     	ds	1
  2165  000023                     atol@c:
  2166                           	callstack 0
  2167  000023                     ltoa@buf:
  2168                           	callstack 0
  2169  000023                     sdc_disk_initialize@crc_number:
  2170                           	callstack 0
  2171  000023                     sdc_disk_write@count1:
  2172                           	callstack 0
  2173  000023                     mensagem_inicial@msg_dois:
  2174                           	callstack 0
  2175                           
  2176                           ; 17 bytes @ 0x22
  2177  000023                     	ds	1
  2178  000024                     ?_convert_to_int_point_lat:
  2179                           	callstack 0
  2180  000024                     ?_convert_to_int:
  2181                           	callstack 0
  2182  000024                     ?_convert_to_int_point_long:
  2183                           	callstack 0
  2184  000024                     configura_baudrate_uart@x:
  2185                           	callstack 0
  2186  000024                     convert_to_int@p_buff:
  2187                           	callstack 0
  2188  000024                     ltoa@val:
  2189                           	callstack 0
  2190                           
  2191                           ; 4 bytes @ 0x23
  2192  000024                     	ds	1
  2193  000025                     sdc_disk_initialize@buff_i:
  2194                           	callstack 0
  2195  000025                     sdc_disk_write@res:
  2196                           	callstack 0
  2197  000025                     ___ftmul@exp:
  2198                           	callstack 0
  2199                           
  2200                           ; 1 bytes @ 0x24
  2201  000025                     	ds	1
  2202  000026                     sdc_disk_initialize@ocr:
  2203                           	callstack 0
  2204  000026                     sdc_disk_read@length:
  2205                           	callstack 0
  2206  000026                     sdc_disk_write@j:
  2207                           	callstack 0
  2208  000026                     ___ftmul@f3_as_product:
  2209                           	callstack 0
  2210                           
  2211                           ; 3 bytes @ 0x25
  2212  000026                     	ds	1
  2213  000027                     sdc_disk_initialize@count2:
  2214                           	callstack 0
  2215                           
  2216                           ; 2 bytes @ 0x26
  2217  000027                     	ds	1
  2218  000028                     sdc_disk_read@buff:
  2219                           	callstack 0
  2220  000028                     sdc_disk_write@buff:
  2221                           	callstack 0
  2222  000028                     ltoa@base:
  2223                           	callstack 0
  2224  000028                     convert_to_int_point_lat@convert_str_lat:
  2225                           	callstack 0
  2226  000028                     convert_to_int_point_long@convert_str_long:
  2227                           	callstack 0
  2228                           
  2229                           ; 10 bytes @ 0x27
  2230  000028                     	ds	1
  2231  000029                     sdc_disk_initialize@buff:
  2232                           	callstack 0
  2233  000029                     ___ftmul@cntr:
  2234                           	callstack 0
  2235  000029                     disk_read@buff:
  2236                           	callstack 0
  2237  000029                     disk_write@buff:
  2238                           	callstack 0
  2239                           
  2240                           ; 2 bytes @ 0x28
  2241  000029                     	ds	1
  2242  00002A                     disk_initialize@pdrv:
  2243                           	callstack 0
  2244  00002A                     ___ftmul@sign:
  2245                           	callstack 0
  2246                           
  2247                           ; 1 bytes @ 0x29
  2248  00002A                     	ds	1
  2249  00002B                     ?___fttol:
  2250                           	callstack 0
  2251  00002B                     disk_initialize@stat:
  2252                           	callstack 0
  2253  00002B                     ___fttol@f1:
  2254                           	callstack 0
  2255  00002B                     disk_read@sector:
  2256                           	callstack 0
  2257  00002B                     disk_write@sector:
  2258                           	callstack 0
  2259  00002B                     escreve_inteiro_lcd@valor:
  2260                           	callstack 0
  2261                           
  2262                           ; 4 bytes @ 0x2A
  2263  00002B                     	ds	4
  2264  00002F                     ??___fttol:
  2265  00002F                     disk_read@count:
  2266                           	callstack 0
  2267  00002F                     disk_write@count:
  2268                           	callstack 0
  2269  00002F                     escreve_inteiro_lcd@texto:
  2270                           	callstack 0
  2271                           
  2272                           ; 7 bytes @ 0x2E
  2273  00002F                     	ds	1
  2274  000030                     ??_disk_read:
  2275  000030                     ??_disk_write:
  2276                           
  2277                           ; 1 bytes @ 0x2F
  2278  000030                     	ds	1
  2279  000031                     disk_read@pdrv:
  2280                           	callstack 0
  2281  000031                     disk_write@pdrv:
  2282                           	callstack 0
  2283                           
  2284                           ; 1 bytes @ 0x30
  2285  000031                     	ds	1
  2286  000032                     convert_to_int_point_long@j:
  2287                           	callstack 0
  2288  000032                     disk_read@result:
  2289                           	callstack 0
  2290  000032                     disk_write@result:
  2291                           	callstack 0
  2292                           
  2293                           ; 2 bytes @ 0x31
  2294  000032                     	ds	1
  2295  000033                     convert_to_int_point_lat@j:
  2296                           	callstack 0
  2297  000033                     convert_to_int_point_long@i:
  2298                           	callstack 0
  2299                           
  2300                           ; 1 bytes @ 0x32
  2301  000033                     	ds	1
  2302  000034                     disk_read@res:
  2303                           	callstack 0
  2304  000034                     disk_write@res:
  2305                           	callstack 0
  2306  000034                     convert_to_int_point_lat@i:
  2307                           	callstack 0
  2308  000034                     ___fttol@sign1:
  2309                           	callstack 0
  2310                           
  2311                           ; 1 bytes @ 0x33
  2312  000034                     	ds	1
  2313  000035                     diferenca@index:
  2314                           	callstack 0
  2315  000035                     move_window@sector:
  2316                           	callstack 0
  2317  000035                     check_fs@sect:
  2318                           	callstack 0
  2319  000035                     ___fttol@lval:
  2320                           	callstack 0
  2321                           
  2322                           ; 4 bytes @ 0x34
  2323  000035                     	ds	1
  2324  000036                     ??_troca_de_tela:
  2325  000036                     diferenca@valor_lat:
  2326                           	callstack 0
  2327                           
  2328                           ; 4 bytes @ 0x35
  2329  000036                     	ds	1
  2330  000037                     troca_de_tela@fix_signal:
  2331                           	callstack 0
  2332                           
  2333                           ; 2 bytes @ 0x36
  2334  000037                     	ds	1
  2335  000038                     get_fattime@f_time:
  2336                           	callstack 0
  2337                           
  2338                           ; 10 bytes @ 0x37
  2339  000038                     	ds	1
  2340  000039                     ??_move_window:
  2341  000039                     ___fttol@exp1:
  2342                           	callstack 0
  2343                           
  2344                           ; 1 bytes @ 0x38
  2345  000039                     	ds	1
  2346  00003A                     ??_verifica_dados_operacionais:
  2347  00003A                     diferenca@valor_long:
  2348                           	callstack 0
  2349                           
  2350                           ; 4 bytes @ 0x39
  2351  00003A                     	ds	1
  2352  00003B                     check_fs@fs:
  2353                           	callstack 0
  2354                           
  2355                           ; 2 bytes @ 0x3A
  2356  00003B                     	ds	2
  2357  00003D                     auto_mount@path:
  2358                           	callstack 0
  2359                           
  2360                           ; 1 bytes @ 0x3C
  2361  00003D                     	ds	1
  2362  00003E                     auto_mount@chk_wp:
  2363                           	callstack 0
  2364  00003E                     armazena_ltlo@buffer:
  2365                           	callstack 0
  2366                           
  2367                           ; 1 bytes @ 0x3D
  2368  00003E                     	ds	1
  2369  00003F                     armazena_ltlo@index:
  2370                           	callstack 0
  2371                           
  2372                           ; 1 bytes @ 0x3E
  2373  00003F                     	ds	1
  2374  000040                     armazena_ltlo@j:
  2375                           	callstack 0
  2376                           
  2377                           ; 1 bytes @ 0x3F
  2378  000040                     	ds	1
  2379  000041                     armazena_ltlo@i:
  2380                           	callstack 0
  2381                           
  2382                           ; 1 bytes @ 0x40
  2383  000041                     	ds	1
  2384  000042                     
  2385                           ; 1 bytes @ 0x41
  2386  000042                     	ds	1
  2387  000043                     ??_verifica_fence:
  2388  000043                     move_window@n:
  2389                           	callstack 0
  2390                           
  2391                           ; 1 bytes @ 0x42
  2392  000043                     	ds	1
  2393  000044                     move_window@wsect:
  2394                           	callstack 0
  2395                           
  2396                           ; 4 bytes @ 0x43
  2397  000044                     	ds	4
  2398  000048                     move_window@fs:
  2399                           	callstack 0
  2400                           
  2401                           ; 2 bytes @ 0x47
  2402  000048                     	ds	2
  2403  00004A                     ?_get_cluster:
  2404                           	callstack 0
  2405  00004A                     sync@fs:
  2406                           	callstack 0
  2407  00004A                     get_cluster@clust:
  2408                           	callstack 0
  2409                           
  2410                           ; 2 bytes @ 0x49
  2411  00004A                     	ds	2
  2412  00004C                     ??_fputs:
  2413  00004C                     next_dir_entry@dj:
  2414                           	callstack 0
  2415  00004C                     f_close@res:
  2416                           	callstack 0
  2417                           
  2418                           ; 1 bytes @ 0x4B
  2419  00004C                     	ds	1
  2420  00004D                     
  2421                           ; 1 bytes @ 0x4C
  2422 ;;
  2423 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2424 ;;
  2425 ;; *************** function _main *****************
  2426 ;; Defined at:
  2427 ;;		line 224 in file "main.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;		None
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;		None
  2432 ;; Return value:  Size  Location     Type
  2433 ;;                  1    wreg      void 
  2434 ;; Registers used:
  2435 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2441 ;;      Params:         0       0       0       0       0       0       0       0       0
  2442 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2443 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2444 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2445 ;;Total ram usage:        0 bytes
  2446 ;; Hardware stack levels required when called:   18
  2447 ;; This function calls:
  2448 ;;		_escalonador
  2449 ;;		_gps
  2450 ;;		_inicializa_tarefas
  2451 ;;		_inicializa_uart
  2452 ;;		_init_hardware
  2453 ;;		_init_lcd
  2454 ;;		_mensagem_inicial
  2455 ;; This function is called by:
  2456 ;;		Startup code after reset
  2457 ;; This function uses a non-reentrant model
  2458 ;;
  2459                           
  2460                           	psect	text0
  2461  0057DE                     __ptext0:
  2462                           	callstack 0
  2463  0057DE                     _main:
  2464                           	callstack 13
  2465                           
  2466                           ;main.c: 226: init_hardware();
  2467                           
  2468                           ;incstack = 0
  2469  0057DE  ECD8  F02D         	call	_init_hardware	;wreg free
  2470                           
  2471                           ;main.c: 227: T0CONbits.TMR0ON = 0;
  2472  0057E2  9ED5               	bcf	213,7,c	;volatile
  2473                           
  2474                           ;main.c: 228: init_lcd();
  2475  0057E4  ECD9  F022         	call	_init_lcd	;wreg free
  2476                           
  2477                           ;main.c: 229: mensagem_inicial();
  2478  0057E8  EC75  F023         	call	_mensagem_inicial	;wreg free
  2479                           
  2480                           ;main.c: 230: inicializa_tarefas();
  2481  0057EC  EC34  F029         	call	_inicializa_tarefas	;wreg free
  2482                           
  2483                           ; BSR set to: 1
  2484                           ;main.c: 231: inicializa_uart();
  2485  0057F0  ECFC  F02C         	call	_inicializa_uart	;wreg free
  2486                           
  2487                           ;main.c: 233: T0CONbits.TMR0ON = 1;
  2488  0057F4  8ED5               	bsf	213,7,c	;volatile
  2489  0057F6                     l13883:
  2490                           
  2491                           ;main.c: 235: {;main.c: 237: if ((sinaliza_int_timer == 1) && (3))
  2492  0057F6  0100               	movlb	0	; () banked
  2493  0057F8  05FC               	decf	_sinaliza_int_timer& (0+255),w,b
  2494  0057FA  A4D8               	btfss	status,2,c
  2495  0057FC  D004               	goto	l13889
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;main.c: 238: {;main.c: 239: sinaliza_int_timer = 0;
  2499  0057FE  0E00               	movlw	0
  2500  005800  6FFC               	movwf	_sinaliza_int_timer& (0+255),b
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;main.c: 240: escalonador();
  2504  005802  ECE2  F021         	call	_escalonador	;wreg free
  2505  005806                     l13889:
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;main.c: 241: };main.c: 242: gps();
  2509  005806  EC71  F02B         	call	_gps	;wreg free
  2510  00580A  D7F5               	goto	l13883
  2511  00580C                     __end_of_main:
  2512                           	callstack 0
  2513                           
  2514 ;; *************** function _mensagem_inicial *****************
  2515 ;; Defined at:
  2516 ;;		line 251 in file "main.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;		None
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;  msg_dois       17   34[COMRAM] const unsigned char [17]
  2521 ;;  msg_linha_um   17   17[COMRAM] const unsigned char [17]
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  1    wreg      void 
  2524 ;; Registers used:
  2525 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2531 ;;      Params:         0       0       0       0       0       0       0       0       0
  2532 ;;      Locals:        34       0       0       0       0       0       0       0       0
  2533 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2534 ;;      Totals:        36       0       0       0       0       0       0       0       0
  2535 ;;Total ram usage:       36 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; Hardware stack levels required when called:    5
  2538 ;; This function calls:
  2539 ;;		_escreve_cmd_lcd
  2540 ;;		_escreve_frase_ram_lcd
  2541 ;;		_posicao_cursor_lcd
  2542 ;; This function is called by:
  2543 ;;		_main
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           	psect	text1
  2548  0046EA                     __ptext1:
  2549                           	callstack 0
  2550  0046EA                     _mensagem_inicial:
  2551                           	callstack 25
  2552                           
  2553                           ;main.c: 253: const unsigned char msg_linha_um[17] = "FATEC ST ANDRE";
  2554                           
  2555                           ;incstack = 0
  2556  0046EA  0E14               	movlw	low mensagem_inicial@F3687
  2557  0046EC  6EF6               	movwf	tblptrl,c
  2558  0046EE                     	if	1	;There is more than 1 active tblptr byte
  2559  0046EE  0E61               	movlw	high mensagem_inicial@F3687
  2560  0046F0  6EF7               	movwf	tblptrh,c
  2561  0046F2                     	endif
  2562  0046F2                     	if	1	;There are 3 active tblptr bytes
  2563  0046F2  0E00               	movlw	low (mensagem_inicial@F3687 shr (0+16))
  2564  0046F4  6EF8               	movwf	tblptru,c
  2565  0046F6                     	endif
  2566  0046F6  EE20  F012         	lfsr	2,mensagem_inicial@msg_linha_um
  2567  0046FA  0E10               	movlw	16
  2568  0046FC                     u16650:
  2569  0046FC  0009               	tblrd		*+
  2570  0046FE  CFF5 FFDE          	movff	tablat,postinc2
  2571  004702  06E8               	decf	wreg,f,c
  2572  004704  E2FB               	bc	u16650
  2573                           
  2574                           ;main.c: 254: const unsigned char msg_dois[17] = "TCC--TELEMTRIA";
  2575  004706  0E03               	movlw	low mensagem_inicial@F3689
  2576  004708  6EF6               	movwf	tblptrl,c
  2577  00470A                     	if	1	;There is more than 1 active tblptr byte
  2578  00470A  0E61               	movlw	high mensagem_inicial@F3689
  2579  00470C  6EF7               	movwf	tblptrh,c
  2580  00470E                     	endif
  2581  00470E                     	if	1	;There are 3 active tblptr bytes
  2582  00470E  0E00               	movlw	low (mensagem_inicial@F3689 shr (0+16))
  2583  004710  6EF8               	movwf	tblptru,c
  2584  004712                     	endif
  2585  004712  EE20  F023         	lfsr	2,mensagem_inicial@msg_dois
  2586  004716  0E10               	movlw	16
  2587  004718                     u16660:
  2588  004718  0009               	tblrd		*+
  2589  00471A  CFF5 FFDE          	movff	tablat,postinc2
  2590  00471E  06E8               	decf	wreg,f,c
  2591  004720  E2FB               	bc	u16660
  2592                           
  2593                           ;main.c: 256: posicao_cursor_lcd(1,0);
  2594  004722  0E00               	movlw	0
  2595  004724  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  2596  004726  0E01               	movlw	1
  2597  004728  EC80  F027         	call	_posicao_cursor_lcd
  2598                           
  2599                           ;main.c: 257: escreve_frase_ram_lcd(msg_linha_um);
  2600  00472C  0E12               	movlw	low mensagem_inicial@msg_linha_um
  2601  00472E  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  2602  004730  6A0E               	clrf	(escreve_frase_ram_lcd@buffer+1)^0,c
  2603  004732  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  2604                           
  2605                           ;main.c: 259: posicao_cursor_lcd(2,0);
  2606  004736  0E00               	movlw	0
  2607  004738  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  2608  00473A  0E02               	movlw	2
  2609  00473C  EC80  F027         	call	_posicao_cursor_lcd
  2610                           
  2611                           ;main.c: 260: escreve_frase_ram_lcd(msg_dois);
  2612  004740  0E23               	movlw	low mensagem_inicial@msg_dois
  2613  004742  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  2614  004744  6A0E               	clrf	(escreve_frase_ram_lcd@buffer+1)^0,c
  2615  004746  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  2616                           
  2617                           ;main.c: 261: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2618  00474A  0E3D               	movlw	61
  2619  00474C  6E11               	movwf	(??_mensagem_inicial+1)^0,c
  2620  00474E  0EE1               	movlw	225
  2621  004750  6E10               	movwf	??_mensagem_inicial^0,c
  2622  004752  0E40               	movlw	64
  2623  004754                     u16827:
  2624  004754  2EE8               	decfsz	wreg,f,c
  2625  004756  D7FE               	bra	u16827
  2626  004758  2E10               	decfsz	??_mensagem_inicial^0,f,c
  2627  00475A  D7FC               	bra	u16827
  2628  00475C  2E11               	decfsz	(??_mensagem_inicial+1)^0,f,c
  2629  00475E  D7FA               	bra	u16827
  2630                           
  2631                           ;main.c: 262: escreve_cmd_lcd(0b00000001);
  2632  004760  0E01               	movlw	1
  2633  004762  EC50  F024         	call	_escreve_cmd_lcd
  2634                           
  2635                           ;main.c: 263: posicao_cursor_lcd(1,0);
  2636  004766  0E00               	movlw	0
  2637  004768  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  2638  00476A  0E01               	movlw	1
  2639  00476C  EC80  F027         	call	_posicao_cursor_lcd
  2640                           
  2641                           ;main.c: 264: escreve_frase_ram_lcd("AGUARDE...");
  2642  004770  0ED7               	movlw	low STR_19
  2643  004772  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  2644  004774  0E61               	movlw	high STR_19
  2645  004776  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  2646  004778  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  2647  00477C  0012               	return		;funcret
  2648  00477E                     __end_of_mensagem_inicial:
  2649                           	callstack 0
  2650                           
  2651 ;; *************** function _init_lcd *****************
  2652 ;; Defined at:
  2653 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;		None
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;		None
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  1    wreg      void 
  2660 ;; Registers used:
  2661 ;;		wreg, status,2, status,0, cstack
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2667 ;;      Params:         0       0       0       0       0       0       0       0       0
  2668 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2669 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2670 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2671 ;;Total ram usage:        1 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    4
  2674 ;; This function calls:
  2675 ;;		_delay
  2676 ;;		_escreve_cmd_lcd
  2677 ;; This function is called by:
  2678 ;;		_main
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text2
  2683  0045B2                     __ptext2:
  2684                           	callstack 0
  2685  0045B2                     _init_lcd:
  2686                           	callstack 26
  2687                           
  2688                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2689                           
  2690                           ;incstack = 0
  2691  0045B2  9495               	bcf	149,2,c	;volatile
  2692                           
  2693                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2694  0045B4  9295               	bcf	149,1,c	;volatile
  2695                           
  2696                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2697  0045B6  9095               	bcf	149,0,c	;volatile
  2698                           
  2699                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2700  0045B8  9895               	bcf	149,4,c	;volatile
  2701                           
  2702                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2703  0045BA  9A95               	bcf	149,5,c	;volatile
  2704                           
  2705                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2706  0045BC  9C95               	bcf	149,6,c	;volatile
  2707                           
  2708                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2709  0045BE  9E95               	bcf	149,7,c	;volatile
  2710                           
  2711                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2712  0045C0  9483               	bcf	131,2,c	;volatile
  2713                           
  2714                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2715  0045C2  9283               	bcf	131,1,c	;volatile
  2716                           
  2717                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2718  0045C4  9083               	bcf	131,0,c	;volatile
  2719                           
  2720                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2721  0045C6  9E83               	bcf	131,7,c	;volatile
  2722                           
  2723                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2724  0045C8  9C83               	bcf	131,6,c	;volatile
  2725                           
  2726                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2727  0045CA  8A83               	bsf	131,5,c	;volatile
  2728                           
  2729                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2730  0045CC  8883               	bsf	131,4,c	;volatile
  2731                           
  2732                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2733  0045CE  0EEA               	movlw	234
  2734  0045D0  6E0D               	movwf	??_init_lcd^0,c
  2735  0045D2  0EC3               	movlw	195
  2736  0045D4                     u16837:
  2737  0045D4  2EE8               	decfsz	wreg,f,c
  2738  0045D6  D7FE               	bra	u16837
  2739  0045D8  2E0D               	decfsz	??_init_lcd^0,f,c
  2740  0045DA  D7FC               	bra	u16837
  2741  0045DC  F000               	nop	
  2742                           
  2743                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2744  0045DE  8083               	bsf	131,0,c	;volatile
  2745                           
  2746                           ;display_lcd.c: 108: delay();
  2747  0045E0  EC92  F02D         	call	_delay	;wreg free
  2748                           
  2749                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2750  0045E4  9083               	bcf	131,0,c	;volatile
  2751                           
  2752                           ;display_lcd.c: 110: delay();
  2753  0045E6  EC92  F02D         	call	_delay	;wreg free
  2754                           
  2755                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2756  0045EA  0E4E               	movlw	78
  2757  0045EC  6E0D               	movwf	??_init_lcd^0,c
  2758  0045EE  0EEB               	movlw	235
  2759  0045F0                     u16847:
  2760  0045F0  2EE8               	decfsz	wreg,f,c
  2761  0045F2  D7FE               	bra	u16847
  2762  0045F4  2E0D               	decfsz	??_init_lcd^0,f,c
  2763  0045F6  D7FC               	bra	u16847
  2764  0045F8  F000               	nop	
  2765                           
  2766                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2767  0045FA  8083               	bsf	131,0,c	;volatile
  2768                           
  2769                           ;display_lcd.c: 119: delay();
  2770  0045FC  EC92  F02D         	call	_delay	;wreg free
  2771                           
  2772                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2773  004600  9083               	bcf	131,0,c	;volatile
  2774                           
  2775                           ;display_lcd.c: 121: delay();
  2776  004602  EC92  F02D         	call	_delay	;wreg free
  2777                           
  2778                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2779  004606  0E4E               	movlw	78
  2780  004608  6E0D               	movwf	??_init_lcd^0,c
  2781  00460A  0EEB               	movlw	235
  2782  00460C                     u16857:
  2783  00460C  2EE8               	decfsz	wreg,f,c
  2784  00460E  D7FE               	bra	u16857
  2785  004610  2E0D               	decfsz	??_init_lcd^0,f,c
  2786  004612  D7FC               	bra	u16857
  2787  004614  F000               	nop	
  2788                           
  2789                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2790  004616  8083               	bsf	131,0,c	;volatile
  2791                           
  2792                           ;display_lcd.c: 130: delay();
  2793  004618  EC92  F02D         	call	_delay	;wreg free
  2794                           
  2795                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2796  00461C  9083               	bcf	131,0,c	;volatile
  2797                           
  2798                           ;display_lcd.c: 132: delay();
  2799  00461E  EC92  F02D         	call	_delay	;wreg free
  2800                           
  2801                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2802  004622  9E83               	bcf	131,7,c	;volatile
  2803                           
  2804                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2805  004624  9C83               	bcf	131,6,c	;volatile
  2806                           
  2807                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2808  004626  8A83               	bsf	131,5,c	;volatile
  2809                           
  2810                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2811  004628  9883               	bcf	131,4,c	;volatile
  2812                           
  2813                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2814  00462A  8083               	bsf	131,0,c	;volatile
  2815                           
  2816                           ;display_lcd.c: 143: delay();
  2817  00462C  EC92  F02D         	call	_delay	;wreg free
  2818                           
  2819                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2820  004630  9083               	bcf	131,0,c	;volatile
  2821                           
  2822                           ;display_lcd.c: 145: delay();
  2823  004632  EC92  F02D         	call	_delay	;wreg free
  2824                           
  2825                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2826  004636  0E28               	movlw	40
  2827  004638  EC50  F024         	call	_escreve_cmd_lcd
  2828                           
  2829                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2830  00463C  0E06               	movlw	6
  2831  00463E  EC50  F024         	call	_escreve_cmd_lcd
  2832                           
  2833                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2834  004642  0E0E               	movlw	14
  2835  004644  EC50  F024         	call	_escreve_cmd_lcd
  2836                           
  2837                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2838  004648  0E01               	movlw	1
  2839  00464A  EC50  F024         	call	_escreve_cmd_lcd
  2840  00464E  0012               	return		;funcret
  2841  004650                     __end_of_init_lcd:
  2842                           	callstack 0
  2843                           
  2844 ;; *************** function _init_hardware *****************
  2845 ;; Defined at:
  2846 ;;		line 52 in file "bibliotecas/hardware.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;		None
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;		None
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  1    wreg      void 
  2853 ;; Registers used:
  2854 ;;		wreg, status,2, cstack
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2860 ;;      Params:         0       0       0       0       0       0       0       0       0
  2861 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2862 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2863 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2864 ;;Total ram usage:        0 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; Hardware stack levels required when called:    4
  2867 ;; This function calls:
  2868 ;;		_config_timer_dois
  2869 ;;		_config_timer_zero
  2870 ;;		_init_interrupt
  2871 ;;		_init_oscilador
  2872 ;;		_init_ports
  2873 ;; This function is called by:
  2874 ;;		_main
  2875 ;; This function uses a non-reentrant model
  2876 ;;
  2877                           
  2878                           	psect	text3
  2879  005BB0                     __ptext3:
  2880                           	callstack 0
  2881  005BB0                     _init_hardware:
  2882                           	callstack 26
  2883                           
  2884                           ;hardware.c: 55: init_oscilador();
  2885                           
  2886                           ;incstack = 0
  2887  005BB0  EC5F  F02E         	call	_init_oscilador	;wreg free
  2888                           
  2889                           ;hardware.c: 58: init_ports();
  2890  005BB4  ECB0  F02D         	call	_init_ports	;wreg free
  2891                           
  2892                           ;hardware.c: 61: config_timer_zero();
  2893  005BB8  ECBE  F02D         	call	_config_timer_zero	;wreg free
  2894                           
  2895                           ;hardware.c: 64: config_timer_dois();
  2896  005BBC  EC1E  F02E         	call	_config_timer_dois	;wreg free
  2897                           
  2898                           ;hardware.c: 67: init_interrupt();
  2899  005BC0  ECE3  F02D         	call	_init_interrupt	;wreg free
  2900  005BC4  0012               	return		;funcret
  2901  005BC6                     __end_of_init_hardware:
  2902                           	callstack 0
  2903                           
  2904 ;; *************** function _init_ports *****************
  2905 ;; Defined at:
  2906 ;;		line 151 in file "bibliotecas/hardware.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;		None
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;		None
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  1    wreg      void 
  2913 ;; Registers used:
  2914 ;;		wreg, status,2
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2920 ;;      Params:         0       0       0       0       0       0       0       0       0
  2921 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2922 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2923 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2924 ;;Total ram usage:        0 bytes
  2925 ;; Hardware stack levels used:    1
  2926 ;; Hardware stack levels required when called:    2
  2927 ;; This function calls:
  2928 ;;		Nothing
  2929 ;; This function is called by:
  2930 ;;		_init_hardware
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934                           	psect	text4
  2935  005B60                     __ptext4:
  2936                           	callstack 0
  2937  005B60                     _init_ports:
  2938                           	callstack 27
  2939                           
  2940                           ;hardware.c: 153: ADCON1 = 0X0F;
  2941                           
  2942                           ;incstack = 0
  2943  005B60  0E0F               	movlw	15
  2944  005B62  6EC1               	movwf	193,c	;volatile
  2945                           
  2946                           ;hardware.c: 154: TRISB = 0b00000001;
  2947  005B64  0E01               	movlw	1
  2948  005B66  6E93               	movwf	147,c	;volatile
  2949                           
  2950                           ;hardware.c: 155: LATB = 0xFF;
  2951  005B68  688A               	setf	138,c	;volatile
  2952                           
  2953                           ;hardware.c: 156: TRISD = 0x00;
  2954  005B6A  0E00               	movlw	0
  2955  005B6C  6E95               	movwf	149,c	;volatile
  2956                           
  2957                           ;hardware.c: 157: TRISA = 0b00000111;
  2958  005B6E  0E07               	movlw	7
  2959  005B70  6E92               	movwf	146,c	;volatile
  2960                           
  2961                           ;hardware.c: 158: TRISC = 0x01111111;
  2962  005B72  0E11               	movlw	17
  2963  005B74  6E94               	movwf	148,c	;volatile
  2964                           
  2965                           ;hardware.c: 159: TRISE = 0b00000111;
  2966  005B76  0E07               	movlw	7
  2967  005B78  6E96               	movwf	150,c	;volatile
  2968  005B7A  0012               	return		;funcret
  2969  005B7C                     __end_of_init_ports:
  2970                           	callstack 0
  2971                           
  2972 ;; *************** function _init_oscilador *****************
  2973 ;; Defined at:
  2974 ;;		line 169 in file "bibliotecas/hardware.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;		None
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;		None
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  1    wreg      void 
  2981 ;; Registers used:
  2982 ;;		None
  2983 ;; Tracked objects:
  2984 ;;		On entry : 0/0
  2985 ;;		On exit  : 0/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2988 ;;      Params:         0       0       0       0       0       0       0       0       0
  2989 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2990 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2991 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2992 ;;Total ram usage:        0 bytes
  2993 ;; Hardware stack levels used:    1
  2994 ;; Hardware stack levels required when called:    2
  2995 ;; This function calls:
  2996 ;;		Nothing
  2997 ;; This function is called by:
  2998 ;;		_init_hardware
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           	psect	text5
  3003  005CBE                     __ptext5:
  3004                           	callstack 0
  3005  005CBE                     _init_oscilador:
  3006                           	callstack 27
  3007                           
  3008                           ;hardware.c: 172: OSCCONbits.IRCF0 = 1;
  3009                           
  3010                           ;incstack = 0
  3011  005CBE  88D3               	bsf	211,4,c	;volatile
  3012                           
  3013                           ;hardware.c: 173: OSCCONbits.IRCF1 = 1;
  3014  005CC0  8AD3               	bsf	211,5,c	;volatile
  3015                           
  3016                           ;hardware.c: 174: OSCCONbits.IRCF2 = 1;
  3017  005CC2  8CD3               	bsf	211,6,c	;volatile
  3018  005CC4  0012               	return		;funcret
  3019  005CC6                     __end_of_init_oscilador:
  3020                           	callstack 0
  3021                           
  3022 ;; *************** function _init_interrupt *****************
  3023 ;; Defined at:
  3024 ;;		line 94 in file "bibliotecas/hardware.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;		None
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;		None
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  1    wreg      void 
  3031 ;; Registers used:
  3032 ;;		wreg, status,2
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3038 ;;      Params:         0       0       0       0       0       0       0       0       0
  3039 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3040 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3041 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3042 ;;Total ram usage:        0 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; Hardware stack levels required when called:    2
  3045 ;; This function calls:
  3046 ;;		Nothing
  3047 ;; This function is called by:
  3048 ;;		_init_hardware
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           	psect	text6
  3053  005BC6                     __ptext6:
  3054                           	callstack 0
  3055  005BC6                     _init_interrupt:
  3056                           	callstack 27
  3057                           
  3058                           ;hardware.c: 96: INTCON = 0b10110000;
  3059                           
  3060                           ;incstack = 0
  3061  005BC6  0EB0               	movlw	176
  3062  005BC8  6EF2               	movwf	242,c	;volatile
  3063                           
  3064                           ;hardware.c: 97: INTCON2 = 0b00000000;
  3065  005BCA  0E00               	movlw	0
  3066  005BCC  6EF1               	movwf	241,c	;volatile
  3067                           
  3068                           ;hardware.c: 98: INTCON3 = 0b00000000;
  3069  005BCE  0E00               	movlw	0
  3070  005BD0  6EF0               	movwf	240,c	;volatile
  3071                           
  3072                           ;hardware.c: 100: PIE1 = 0b00101000;
  3073  005BD2  0E28               	movlw	40
  3074  005BD4  6E9D               	movwf	157,c	;volatile
  3075  005BD6  0012               	return		;funcret
  3076  005BD8                     __end_of_init_interrupt:
  3077                           	callstack 0
  3078                           
  3079 ;; *************** function _config_timer_zero *****************
  3080 ;; Defined at:
  3081 ;;		line 79 in file "bibliotecas/hardware.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;		None
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;		None
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      void 
  3088 ;; Registers used:
  3089 ;;		wreg, status,2, cstack
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3095 ;;      Params:         0       0       0       0       0       0       0       0       0
  3096 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3097 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3098 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3099 ;;Total ram usage:        0 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    3
  3102 ;; This function calls:
  3103 ;;		_write_timer_zero
  3104 ;; This function is called by:
  3105 ;;		_init_hardware
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           	psect	text7
  3110  005B7C                     __ptext7:
  3111                           	callstack 0
  3112  005B7C                     _config_timer_zero:
  3113                           	callstack 26
  3114                           
  3115                           ;hardware.c: 81: T0CON = 0b11000101;
  3116                           
  3117                           ;incstack = 0
  3118  005B7C  0EC5               	movlw	197
  3119  005B7E  6ED5               	movwf	213,c	;volatile
  3120                           
  3121                           ;hardware.c: 82: SPPCON = 0b00000000;
  3122  005B80  0E00               	movlw	0
  3123  005B82  6E65               	movwf	101,c	;volatile
  3124                           
  3125                           ;hardware.c: 83: SPPCFG = 0b00000000;
  3126  005B84  0E00               	movlw	0
  3127  005B86  6E63               	movwf	99,c	;volatile
  3128                           
  3129                           ;hardware.c: 84: write_timer_zero(0x45);
  3130  005B88  0E00               	movlw	0
  3131  005B8A  6E0B               	movwf	(write_timer_zero@timer0+1)^0,c
  3132  005B8C  0E45               	movlw	69
  3133  005B8E  6E0A               	movwf	write_timer_zero@timer0^0,c
  3134  005B90  EC37  F02E         	call	_write_timer_zero	;wreg free
  3135  005B94  0012               	return		;funcret
  3136  005B96                     __end_of_config_timer_zero:
  3137                           	callstack 0
  3138                           
  3139 ;; *************** function _write_timer_zero *****************
  3140 ;; Defined at:
  3141 ;;		line 134 in file "bibliotecas/hardware.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;  timer0          2    9[COMRAM] unsigned int 
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;		None
  3146 ;; Return value:  Size  Location     Type
  3147 ;;                  1    wreg      void 
  3148 ;; Registers used:
  3149 ;;		None
  3150 ;; Tracked objects:
  3151 ;;		On entry : 0/0
  3152 ;;		On exit  : 0/0
  3153 ;;		Unchanged: 0/0
  3154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3155 ;;      Params:         2       0       0       0       0       0       0       0       0
  3156 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3157 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3158 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3159 ;;Total ram usage:        2 bytes
  3160 ;; Hardware stack levels used:    1
  3161 ;; Hardware stack levels required when called:    2
  3162 ;; This function calls:
  3163 ;;		Nothing
  3164 ;; This function is called by:
  3165 ;;		_config_timer_zero
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169                           	psect	text8
  3170  005C6E                     __ptext8:
  3171                           	callstack 0
  3172  005C6E                     _write_timer_zero:
  3173                           	callstack 26
  3174                           
  3175                           ;hardware.c: 142: TMR0 = timer0;
  3176                           
  3177                           ;incstack = 0
  3178  005C6E  C00A  FFD6         	movff	write_timer_zero@timer0,4054	;volatile
  3179  005C72  C00B  FFD7         	movff	write_timer_zero@timer0+1,4055	;volatile
  3180  005C76  0012               	return		;funcret
  3181  005C78                     __end_of_write_timer_zero:
  3182                           	callstack 0
  3183                           
  3184 ;; *************** function _config_timer_dois *****************
  3185 ;; Defined at:
  3186 ;;		line 198 in file "bibliotecas/hardware.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;		None
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;		None
  3191 ;; Return value:  Size  Location     Type
  3192 ;;                  1    wreg      void 
  3193 ;; Registers used:
  3194 ;;		wreg, status,2
  3195 ;; Tracked objects:
  3196 ;;		On entry : 0/0
  3197 ;;		On exit  : 0/0
  3198 ;;		Unchanged: 0/0
  3199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3200 ;;      Params:         0       0       0       0       0       0       0       0       0
  3201 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3202 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3203 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3204 ;;Total ram usage:        0 bytes
  3205 ;; Hardware stack levels used:    1
  3206 ;; Hardware stack levels required when called:    2
  3207 ;; This function calls:
  3208 ;;		Nothing
  3209 ;; This function is called by:
  3210 ;;		_init_hardware
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text9
  3215  005C3C                     __ptext9:
  3216                           	callstack 0
  3217  005C3C                     _config_timer_dois:
  3218                           	callstack 27
  3219                           
  3220                           ;hardware.c: 200: T2CON = 0b00000100;
  3221                           
  3222                           ;incstack = 0
  3223  005C3C  0E04               	movlw	4
  3224  005C3E  6ECA               	movwf	202,c	;volatile
  3225                           
  3226                           ;hardware.c: 201: TMR2 = 0;
  3227  005C40  0E00               	movlw	0
  3228  005C42  6ECC               	movwf	204,c	;volatile
  3229                           
  3230                           ;hardware.c: 202: PR2 = 0x01;
  3231  005C44  0E01               	movlw	1
  3232  005C46  6ECB               	movwf	203,c	;volatile
  3233  005C48  0012               	return		;funcret
  3234  005C4A                     __end_of_config_timer_dois:
  3235                           	callstack 0
  3236                           
  3237 ;; *************** function _inicializa_tarefas *****************
  3238 ;; Defined at:
  3239 ;;		line 174 in file "main.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;		None
  3242 ;; Auto vars:     Size  Location     Type
  3243 ;;		None
  3244 ;; Return value:  Size  Location     Type
  3245 ;;                  1    wreg      void 
  3246 ;; Registers used:
  3247 ;;		wreg, status,2, status,0
  3248 ;; Tracked objects:
  3249 ;;		On entry : 0/0
  3250 ;;		On exit  : 3F/1
  3251 ;;		Unchanged: 0/0
  3252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3253 ;;      Params:         0       0       0       0       0       0       0       0       0
  3254 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3255 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3256 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3257 ;;Total ram usage:        0 bytes
  3258 ;; Hardware stack levels used:    1
  3259 ;; Hardware stack levels required when called:    2
  3260 ;; This function calls:
  3261 ;;		Nothing
  3262 ;; This function is called by:
  3263 ;;		_main
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           	psect	text10
  3268  005268                     __ptext10:
  3269                           	callstack 0
  3270  005268                     _inicializa_tarefas:
  3271                           	callstack 28
  3272                           
  3273                           ;main.c: 177: p_tarefas[0] = verifica_dados_operacionais;
  3274                           
  3275                           ;incstack = 0
  3276  005268  0E70               	movlw	low _verifica_dados_operacionais
  3277  00526A  0101               	movlb	1	; () banked
  3278  00526C  6F29               	movwf	_p_tarefas& (0+255),b
  3279  00526E  0E2F               	movlw	high _verifica_dados_operacionais
  3280  005270  6F2A               	movwf	(_p_tarefas+1)& (0+255),b
  3281                           
  3282                           ;main.c: 178: p_tarefas[1] = disparo_gravacao;
  3283  005272  0E78               	movlw	low _disparo_gravacao
  3284  005274  6F2B               	movwf	(_p_tarefas+2)& (0+255),b
  3285  005276  0E28               	movlw	high _disparo_gravacao
  3286  005278  6F2C               	movwf	(_p_tarefas+3)& (0+255),b
  3287                           
  3288                           ;main.c: 179: p_tarefas[2] = troca_de_tela;
  3289  00527A  0E62               	movlw	low _troca_de_tela
  3290  00527C  6F2D               	movwf	(_p_tarefas+4)& (0+255),b
  3291  00527E  0E1C               	movlw	high _troca_de_tela
  3292  005280  6F2E               	movwf	(_p_tarefas+5)& (0+255),b
  3293                           
  3294                           ; BSR set to: 1
  3295                           ;main.c: 183: tempo_backup[0] = 500;
  3296  005282  0E01               	movlw	1
  3297  005284  6F24               	movwf	(_tempo_backup+1)& (0+255),b
  3298  005286  0EF4               	movlw	244
  3299  005288  6F23               	movwf	_tempo_backup& (0+255),b
  3300                           
  3301                           ; BSR set to: 1
  3302                           ;main.c: 184: tempo_backup[1] = 1000;
  3303  00528A  0E03               	movlw	3
  3304  00528C  6F26               	movwf	(_tempo_backup+3)& (0+255),b
  3305  00528E  0EE8               	movlw	232
  3306  005290  6F25               	movwf	(_tempo_backup+2)& (0+255),b
  3307                           
  3308                           ; BSR set to: 1
  3309                           ;main.c: 185: tempo_backup[2] = 5000;
  3310  005292  0E13               	movlw	19
  3311  005294  6F28               	movwf	(_tempo_backup+5)& (0+255),b
  3312  005296  0E88               	movlw	136
  3313  005298  6F27               	movwf	(_tempo_backup+4)& (0+255),b
  3314                           
  3315                           ; BSR set to: 1
  3316                           ;main.c: 188: tempo_tarefa[0] = 500;
  3317  00529A  0E01               	movlw	1
  3318  00529C  6F1E               	movwf	(_tempo_tarefa+1)& (0+255),b
  3319  00529E  0EF4               	movlw	244
  3320  0052A0  6F1D               	movwf	_tempo_tarefa& (0+255),b
  3321                           
  3322                           ; BSR set to: 1
  3323                           ;main.c: 189: tempo_tarefa[1] = 1000;
  3324  0052A2  0E03               	movlw	3
  3325  0052A4  6F20               	movwf	(_tempo_tarefa+3)& (0+255),b
  3326  0052A6  0EE8               	movlw	232
  3327  0052A8  6F1F               	movwf	(_tempo_tarefa+2)& (0+255),b
  3328                           
  3329                           ; BSR set to: 1
  3330                           ;main.c: 190: tempo_tarefa[2] = 5000;
  3331  0052AA  0E13               	movlw	19
  3332  0052AC  6F22               	movwf	(_tempo_tarefa+5)& (0+255),b
  3333  0052AE  0E88               	movlw	136
  3334  0052B0  6F21               	movwf	(_tempo_tarefa+4)& (0+255),b
  3335                           
  3336                           ; BSR set to: 1
  3337                           ;main.c: 192: tarefa_em_execucao = 0;
  3338  0052B2  0E00               	movlw	0
  3339  0052B4  6E52               	movwf	_tarefa_em_execucao^0,c	;volatile
  3340                           
  3341                           ; BSR set to: 1
  3342  0052B6  0012               	return		;funcret
  3343  0052B8                     __end_of_inicializa_tarefas:
  3344                           	callstack 0
  3345                           
  3346 ;; *************** function _escalonador *****************
  3347 ;; Defined at:
  3348 ;;		line 203 in file "main.c"
  3349 ;; Parameters:    Size  Location     Type
  3350 ;;		None
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;  cont            1  134[BANK0 ] unsigned char 
  3353 ;; Return value:  Size  Location     Type
  3354 ;;                  1    wreg      void 
  3355 ;; Registers used:
  3356 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3357 ;; Tracked objects:
  3358 ;;		On entry : 3F/0
  3359 ;;		On exit  : 3F/0
  3360 ;;		Unchanged: 0/0
  3361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3362 ;;      Params:         0       0       0       0       0       0       0       0       0
  3363 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3364 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3365 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3366 ;;Total ram usage:        3 bytes
  3367 ;; Hardware stack levels used:    1
  3368 ;; Hardware stack levels required when called:   17
  3369 ;; This function calls:
  3370 ;;		_disparo_gravacao
  3371 ;;		_troca_de_tela
  3372 ;;		_verifica_dados_operacionais
  3373 ;; This function is called by:
  3374 ;;		_main
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           	psect	text11
  3379  0043C4                     __ptext11:
  3380                           	callstack 0
  3381  0043C4                     _escalonador:
  3382                           	callstack 13
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;main.c: 205: unsigned char cont;;main.c: 206: for(cont = 0; cont<3;cont++)
  3386                           
  3387                           ; BSR set to: 1
  3388                           ;incstack = 0
  3389  0043C4  0E00               	movlw	0
  3390  0043C6  6FE6               	movwf	escalonador@cont& (0+255),b
  3391  0043C8                     l13853:
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;main.c: 207: {;main.c: 208: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3395  0043C8  51E6               	movf	escalonador@cont& (0+255),w,b
  3396  0043CA  0D02               	mullw	2
  3397  0043CC  0E29               	movlw	low _p_tarefas
  3398  0043CE  24F3               	addwf	243,w,c
  3399  0043D0  6ED9               	movwf	fsr2l,c
  3400  0043D2  0E01               	movlw	high _p_tarefas
  3401  0043D4  20F4               	addwfc	prodh,w,c
  3402  0043D6  6EDA               	movwf	fsr2h,c
  3403  0043D8  50DE               	movf	postinc2,w,c
  3404  0043DA  10DE               	iorwf	postinc2,w,c
  3405  0043DC  B4D8               	btfsc	status,2,c
  3406  0043DE  D042               	goto	l13865
  3407                           
  3408                           ; BSR set to: 0
  3409  0043E0  51E6               	movf	escalonador@cont& (0+255),w,b
  3410  0043E2  0D02               	mullw	2
  3411  0043E4  0E1D               	movlw	low _tempo_tarefa
  3412  0043E6  24F3               	addwf	243,w,c
  3413  0043E8  6ED9               	movwf	fsr2l,c
  3414  0043EA  0E01               	movlw	high _tempo_tarefa
  3415  0043EC  20F4               	addwfc	prodh,w,c
  3416  0043EE  6EDA               	movwf	fsr2h,c
  3417  0043F0  50DE               	movf	postinc2,w,c
  3418  0043F2  10DE               	iorwf	postinc2,w,c
  3419  0043F4  A4D8               	btfss	status,2,c
  3420  0043F6  D036               	goto	l13865
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;main.c: 209: {;main.c: 210: tarefa_em_execucao = 1;
  3424  0043F8  0E01               	movlw	1
  3425  0043FA  6E52               	movwf	_tarefa_em_execucao^0,c	;volatile
  3426                           
  3427                           ;main.c: 211: timeout_tarefa = 65000;
  3428  0043FC  0EFD               	movlw	253
  3429  0043FE  0101               	movlb	1	; () banked
  3430  004400  6F66               	movwf	(_timeout_tarefa+1)& (0+255),b
  3431  004402  0EE8               	movlw	232
  3432  004404  6F65               	movwf	_timeout_tarefa& (0+255),b
  3433                           
  3434                           ; BSR set to: 1
  3435                           ;main.c: 212: p_tarefas[cont]();
  3436  004406  0100               	movlb	0	; () banked
  3437  004408  51E6               	movf	escalonador@cont& (0+255),w,b
  3438  00440A  0D02               	mullw	2
  3439  00440C  0E29               	movlw	low _p_tarefas
  3440  00440E  24F3               	addwf	243,w,c
  3441  004410  6ED9               	movwf	fsr2l,c
  3442  004412  0E01               	movlw	high _p_tarefas
  3443  004414  20F4               	addwfc	prodh,w,c
  3444  004416  6EDA               	movwf	fsr2h,c
  3445  004418  CFDE F0E4          	movff	postinc2,??_escalonador
  3446  00441C  CFDD F0E5          	movff	postdec2,??_escalonador+1
  3447  004420  D801               	call	u16798
  3448  004422  D009               	goto	u16799
  3449  004424                     u16798:
  3450  004424  0005               	push	
  3451  004426  6EFA               	movwf	pclath,c
  3452  004428  51E4               	movf	??_escalonador& (0+255),w,b
  3453  00442A  6EFD               	movwf	tosl,c
  3454  00442C  51E5               	movf	(??_escalonador+1)& (0+255),w,b
  3455  00442E  6EFE               	movwf	tosh,c
  3456  004430  6AFF               	clrf	tosu,c
  3457  004432  50FA               	movf	pclath,w,c
  3458  004434  0012               	return		;indir
  3459  004436                     u16799:
  3460                           
  3461                           ;main.c: 213: tarefa_em_execucao = 0;
  3462  004436  0E00               	movlw	0
  3463  004438  6E52               	movwf	_tarefa_em_execucao^0,c	;volatile
  3464                           
  3465                           ;main.c: 214: tempo_tarefa[cont] = tempo_backup[cont];
  3466  00443A  0100               	movlb	0	; () banked
  3467  00443C  51E6               	movf	escalonador@cont& (0+255),w,b
  3468  00443E  0D02               	mullw	2
  3469  004440  0E23               	movlw	low _tempo_backup
  3470  004442  24F3               	addwf	243,w,c
  3471  004444  6ED9               	movwf	fsr2l,c
  3472  004446  0E01               	movlw	high _tempo_backup
  3473  004448  20F4               	addwfc	prodh,w,c
  3474  00444A  6EDA               	movwf	fsr2h,c
  3475  00444C  51E6               	movf	escalonador@cont& (0+255),w,b
  3476  00444E  0D02               	mullw	2
  3477  004450  0E1D               	movlw	low _tempo_tarefa
  3478  004452  24F3               	addwf	243,w,c
  3479  004454  6EE1               	movwf	fsr1l,c
  3480  004456  0E01               	movlw	high _tempo_tarefa
  3481  004458  20F4               	addwfc	prodh,w,c
  3482  00445A  6EE2               	movwf	fsr1h,c
  3483  00445C  CFDE FFE6          	movff	postinc2,postinc1
  3484  004460  CFDD FFE5          	movff	postdec2,postdec1
  3485  004464                     l13865:
  3486                           
  3487                           ; BSR set to: 0
  3488  004464  2BE6               	incf	escalonador@cont& (0+255),f,b
  3489                           
  3490                           ; BSR set to: 0
  3491  004466  0E02               	movlw	2
  3492  004468  65E6               	cpfsgt	escalonador@cont& (0+255),b
  3493  00446A  D7AE               	goto	l13853
  3494  00446C  0012               	return	
  3495  00446E                     __end_of_escalonador:
  3496                           	callstack 0
  3497                           
  3498 ;; *************** function _troca_de_tela *****************
  3499 ;; Defined at:
  3500 ;;		line 413 in file "main.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;		None
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;  fix_signal      2   54[COMRAM] PTR unsigned char 
  3505 ;;		 -> rawFix(2), 
  3506 ;; Return value:  Size  Location     Type
  3507 ;;                  1    wreg      void 
  3508 ;; Registers used:
  3509 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3510 ;; Tracked objects:
  3511 ;;		On entry : 3F/0
  3512 ;;		On exit  : 0/0
  3513 ;;		Unchanged: 0/0
  3514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3515 ;;      Params:         0       0       0       0       0       0       0       0       0
  3516 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3517 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3518 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3519 ;;Total ram usage:        3 bytes
  3520 ;; Hardware stack levels used:    1
  3521 ;; Hardware stack levels required when called:    6
  3522 ;; This function calls:
  3523 ;;		_escreve_caractere_lcd
  3524 ;;		_escreve_cmd_lcd
  3525 ;;		_escreve_frase_ram_lcd
  3526 ;;		_escreve_inteiro_lcd
  3527 ;;		_fix
  3528 ;;		_mostra_dados_display
  3529 ;;		_posicao_cursor_lcd
  3530 ;;		_recebe_dado_gps
  3531 ;; This function is called by:
  3532 ;;		_inicializa_tarefas
  3533 ;;		_escalonador
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           	psect	text12
  3538  001C62                     __ptext12:
  3539                           	callstack 0
  3540  001C62                     _troca_de_tela:
  3541                           	callstack 23
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;main.c: 415: static unsigned char state = 0;;main.c: 416: static unsigned char last_sta
      +                          te = 0;;main.c: 417: unsigned char *fix_signal;;main.c: 419: if(!PORTEbits.RE0 || (state
      +                           == 1 ))
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;incstack = 0
  3548  001C62  A084               	btfss	132,0,c	;volatile
  3549  001C64  D003               	goto	u16290
  3550                           
  3551                           ; BSR set to: 0
  3552  001C66  0450               	decf	troca_de_tela@state^0,w,c
  3553  001C68  A4D8               	btfss	status,2,c
  3554  001C6A  D0E3               	goto	l13473
  3555  001C6C                     u16290:
  3556                           
  3557                           ; BSR set to: 0
  3558                           ;main.c: 420: {;main.c: 422: if(!time_atualizacao)
  3559  001C6C  0101               	movlb	1	; () banked
  3560  001C6E  515F               	movf	_time_atualizacao& (0+255),w,b
  3561  001C70  1160               	iorwf	(_time_atualizacao+1)& (0+255),w,b
  3562  001C72  A4D8               	btfss	status,2,c
  3563  001C74  D061               	goto	l13433
  3564                           
  3565                           ; BSR set to: 1
  3566                           ;main.c: 423: {;main.c: 424: if(!fence_flag[2].point)
  3567  001C76  B14B               	btfsc	(_fence_flag+2)& (0+255),0,b
  3568  001C78  D00C               	goto	l13411
  3569                           
  3570                           ; BSR set to: 1
  3571                           ;main.c: 425: {;main.c: 426: posicao_cursor_lcd(1,8);
  3572  001C7A  0E08               	movlw	8
  3573  001C7C  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3574  001C7E  0E01               	movlw	1
  3575  001C80  EC80  F027         	call	_posicao_cursor_lcd
  3576                           
  3577                           ;main.c: 427: escreve_frase_ram_lcd("DENTRO");
  3578  001C84  0E52               	movlw	low STR_21
  3579  001C86  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3580  001C88  0E62               	movlw	high STR_21
  3581  001C8A  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3582  001C8C  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3583                           
  3584                           ;main.c: 428: }
  3585  001C90  D03C               	goto	l13425
  3586  001C92                     l13411:
  3587                           
  3588                           ; BSR set to: 1
  3589                           ;main.c: 429: else;main.c: 430: {;main.c: 431: posicao_cursor_lcd(1,8);
  3590  001C92  0E08               	movlw	8
  3591  001C94  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3592  001C96  0E01               	movlw	1
  3593  001C98  EC80  F027         	call	_posicao_cursor_lcd
  3594                           
  3595                           ;main.c: 432: escreve_frase_ram_lcd("FORA");
  3596  001C9C  0E64               	movlw	low STR_23
  3597  001C9E  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3598  001CA0  0E62               	movlw	high STR_23
  3599  001CA2  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3600  001CA4  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3601                           
  3602                           ;main.c: 433: posicao_cursor_lcd(1,13);
  3603  001CA8  0E0D               	movlw	13
  3604  001CAA  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3605  001CAC  0E01               	movlw	1
  3606  001CAE  EC80  F027         	call	_posicao_cursor_lcd
  3607                           
  3608                           ;main.c: 434: escreve_inteiro_lcd(fence_flag[0].point);
  3609  001CB2  0101               	movlb	1	; () banked
  3610  001CB4  A149               	btfss	_fence_flag& (0+255),0,b
  3611  001CB6  D003               	goto	u16320
  3612  001CB8  6A36               	clrf	??_troca_de_tela^0,c
  3613  001CBA  2A36               	incf	??_troca_de_tela^0,f,c
  3614  001CBC  D001               	goto	u16328
  3615  001CBE                     u16320:
  3616  001CBE  6A36               	clrf	??_troca_de_tela^0,c
  3617  001CC0                     u16328:
  3618  001CC0  5036               	movf	??_troca_de_tela^0,w,c
  3619  001CC2  6E2B               	movwf	escreve_inteiro_lcd@valor^0,c
  3620  001CC4  6A2C               	clrf	(escreve_inteiro_lcd@valor+1)^0,c
  3621  001CC6  6A2D               	clrf	(escreve_inteiro_lcd@valor+2)^0,c
  3622  001CC8  6A2E               	clrf	(escreve_inteiro_lcd@valor+3)^0,c
  3623  001CCA  ECFB  F02A         	call	_escreve_inteiro_lcd	;wreg free
  3624                           
  3625                           ;main.c: 435: posicao_cursor_lcd(1,14);
  3626  001CCE  0E0E               	movlw	14
  3627  001CD0  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3628  001CD2  0E01               	movlw	1
  3629  001CD4  EC80  F027         	call	_posicao_cursor_lcd
  3630                           
  3631                           ;main.c: 436: escreve_frase_ram_lcd("|");
  3632  001CD8  0E7D               	movlw	low STR_24
  3633  001CDA  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3634  001CDC  0E62               	movlw	high STR_24
  3635  001CDE  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3636  001CE0  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3637                           
  3638                           ;main.c: 437: posicao_cursor_lcd(1,15);
  3639  001CE4  0E0F               	movlw	15
  3640  001CE6  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3641  001CE8  0E01               	movlw	1
  3642  001CEA  EC80  F027         	call	_posicao_cursor_lcd
  3643                           
  3644                           ;main.c: 438: escreve_inteiro_lcd(fence_flag[1].point);
  3645  001CEE  0101               	movlb	1	; () banked
  3646  001CF0  A14A               	btfss	(_fence_flag+1)& (0+255),0,b
  3647  001CF2  D003               	goto	u16330
  3648  001CF4  6A36               	clrf	??_troca_de_tela^0,c
  3649  001CF6  2A36               	incf	??_troca_de_tela^0,f,c
  3650  001CF8  D001               	goto	u16338
  3651  001CFA                     u16330:
  3652  001CFA  6A36               	clrf	??_troca_de_tela^0,c
  3653  001CFC                     u16338:
  3654  001CFC  5036               	movf	??_troca_de_tela^0,w,c
  3655  001CFE  6E2B               	movwf	escreve_inteiro_lcd@valor^0,c
  3656  001D00  6A2C               	clrf	(escreve_inteiro_lcd@valor+1)^0,c
  3657  001D02  6A2D               	clrf	(escreve_inteiro_lcd@valor+2)^0,c
  3658  001D04  6A2E               	clrf	(escreve_inteiro_lcd@valor+3)^0,c
  3659  001D06  ECFB  F02A         	call	_escreve_inteiro_lcd	;wreg free
  3660  001D0A                     l13425:
  3661                           
  3662                           ;main.c: 439: };main.c: 441: fix_signal = fix();
  3663  001D0A  EC55  F02E         	call	_fix	;wreg free
  3664  001D0E  C00A  F037         	movff	?_fix,troca_de_tela@fix_signal
  3665  001D12  C00B  F038         	movff	?_fix+1,troca_de_tela@fix_signal+1
  3666                           
  3667                           ;main.c: 442: posicao_cursor_lcd(2,8);
  3668  001D16  0E08               	movlw	8
  3669  001D18  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3670  001D1A  0E02               	movlw	2
  3671  001D1C  EC80  F027         	call	_posicao_cursor_lcd
  3672                           
  3673                           ;main.c: 443: escreve_caractere_lcd(fix_signal[0]);
  3674  001D20  C037  FFD9         	movff	troca_de_tela@fix_signal,fsr2l
  3675  001D24  C038  FFDA         	movff	troca_de_tela@fix_signal+1,fsr2h
  3676  001D28  50DF               	movf	indf2,w,c
  3677  001D2A  EC0F  F026         	call	_escreve_caractere_lcd
  3678                           
  3679                           ;main.c: 444: time_atualizacao = 10000;
  3680  001D2E  0E27               	movlw	39
  3681  001D30  0101               	movlb	1	; () banked
  3682  001D32  6F60               	movwf	(_time_atualizacao+1)& (0+255),b
  3683  001D34  0E10               	movlw	16
  3684  001D36  6F5F               	movwf	_time_atualizacao& (0+255),b
  3685  001D38                     l13433:
  3686                           
  3687                           ; BSR set to: 1
  3688                           ;main.c: 445: };main.c: 447: if(last_state != 1)
  3689  001D38  044F               	decf	troca_de_tela@last_state^0,w,c
  3690  001D3A  B4D8               	btfsc	status,2,c
  3691  001D3C  D078               	goto	l13471
  3692                           
  3693                           ; BSR set to: 1
  3694                           ;main.c: 448: {;main.c: 449: state = 1;
  3695  001D3E  0E01               	movlw	1
  3696  001D40  6E50               	movwf	troca_de_tela@state^0,c
  3697                           
  3698                           ; BSR set to: 1
  3699                           ;main.c: 450: escreve_cmd_lcd(0b00000001);
  3700  001D42  0E01               	movlw	1
  3701  001D44  EC50  F024         	call	_escreve_cmd_lcd
  3702                           
  3703                           ;main.c: 451: posicao_cursor_lcd(1,0);
  3704  001D48  0E00               	movlw	0
  3705  001D4A  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3706  001D4C  0E01               	movlw	1
  3707  001D4E  EC80  F027         	call	_posicao_cursor_lcd
  3708                           
  3709                           ;main.c: 452: escreve_frase_ram_lcd("FENCE:");
  3710  001D52  0E4B               	movlw	low STR_25
  3711  001D54  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3712  001D56  0E62               	movlw	high STR_25
  3713  001D58  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3714  001D5A  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3715                           
  3716                           ;main.c: 454: if(!fence_flag[2].point)
  3717  001D5E  0101               	movlb	1	; () banked
  3718  001D60  B14B               	btfsc	(_fence_flag+2)& (0+255),0,b
  3719  001D62  D00C               	goto	l13449
  3720                           
  3721                           ; BSR set to: 1
  3722                           ;main.c: 455: {;main.c: 456: posicao_cursor_lcd(1,8);
  3723  001D64  0E08               	movlw	8
  3724  001D66  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3725  001D68  0E01               	movlw	1
  3726  001D6A  EC80  F027         	call	_posicao_cursor_lcd
  3727                           
  3728                           ;main.c: 457: escreve_frase_ram_lcd("DENTRO");
  3729  001D6E  0E52               	movlw	low STR_21
  3730  001D70  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3731  001D72  0E62               	movlw	high STR_21
  3732  001D74  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3733  001D76  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3734                           
  3735                           ;main.c: 458: }
  3736  001D7A  D03C               	goto	l13463
  3737  001D7C                     l13449:
  3738                           
  3739                           ; BSR set to: 1
  3740                           ;main.c: 459: else;main.c: 460: {;main.c: 461: posicao_cursor_lcd(1,8);
  3741  001D7C  0E08               	movlw	8
  3742  001D7E  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3743  001D80  0E01               	movlw	1
  3744  001D82  EC80  F027         	call	_posicao_cursor_lcd
  3745                           
  3746                           ;main.c: 462: escreve_frase_ram_lcd("FORA");
  3747  001D86  0E64               	movlw	low STR_23
  3748  001D88  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3749  001D8A  0E62               	movlw	high STR_23
  3750  001D8C  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3751  001D8E  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3752                           
  3753                           ;main.c: 463: posicao_cursor_lcd(1,13);
  3754  001D92  0E0D               	movlw	13
  3755  001D94  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3756  001D96  0E01               	movlw	1
  3757  001D98  EC80  F027         	call	_posicao_cursor_lcd
  3758                           
  3759                           ;main.c: 464: escreve_inteiro_lcd(fence_flag[0].point);
  3760  001D9C  0101               	movlb	1	; () banked
  3761  001D9E  A149               	btfss	_fence_flag& (0+255),0,b
  3762  001DA0  D003               	goto	u16360
  3763  001DA2  6A36               	clrf	??_troca_de_tela^0,c
  3764  001DA4  2A36               	incf	??_troca_de_tela^0,f,c
  3765  001DA6  D001               	goto	u16368
  3766  001DA8                     u16360:
  3767  001DA8  6A36               	clrf	??_troca_de_tela^0,c
  3768  001DAA                     u16368:
  3769  001DAA  5036               	movf	??_troca_de_tela^0,w,c
  3770  001DAC  6E2B               	movwf	escreve_inteiro_lcd@valor^0,c
  3771  001DAE  6A2C               	clrf	(escreve_inteiro_lcd@valor+1)^0,c
  3772  001DB0  6A2D               	clrf	(escreve_inteiro_lcd@valor+2)^0,c
  3773  001DB2  6A2E               	clrf	(escreve_inteiro_lcd@valor+3)^0,c
  3774  001DB4  ECFB  F02A         	call	_escreve_inteiro_lcd	;wreg free
  3775                           
  3776                           ;main.c: 465: posicao_cursor_lcd(1,14);
  3777  001DB8  0E0E               	movlw	14
  3778  001DBA  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3779  001DBC  0E01               	movlw	1
  3780  001DBE  EC80  F027         	call	_posicao_cursor_lcd
  3781                           
  3782                           ;main.c: 466: escreve_frase_ram_lcd("|");
  3783  001DC2  0E7D               	movlw	low STR_24
  3784  001DC4  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3785  001DC6  0E62               	movlw	high STR_24
  3786  001DC8  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3787  001DCA  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3788                           
  3789                           ;main.c: 467: posicao_cursor_lcd(1,15);
  3790  001DCE  0E0F               	movlw	15
  3791  001DD0  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3792  001DD2  0E01               	movlw	1
  3793  001DD4  EC80  F027         	call	_posicao_cursor_lcd
  3794                           
  3795                           ;main.c: 468: escreve_inteiro_lcd(fence_flag[1].point);
  3796  001DD8  0101               	movlb	1	; () banked
  3797  001DDA  A14A               	btfss	(_fence_flag+1)& (0+255),0,b
  3798  001DDC  D003               	goto	u16370
  3799  001DDE  6A36               	clrf	??_troca_de_tela^0,c
  3800  001DE0  2A36               	incf	??_troca_de_tela^0,f,c
  3801  001DE2  D001               	goto	u16378
  3802  001DE4                     u16370:
  3803  001DE4  6A36               	clrf	??_troca_de_tela^0,c
  3804  001DE6                     u16378:
  3805  001DE6  5036               	movf	??_troca_de_tela^0,w,c
  3806  001DE8  6E2B               	movwf	escreve_inteiro_lcd@valor^0,c
  3807  001DEA  6A2C               	clrf	(escreve_inteiro_lcd@valor+1)^0,c
  3808  001DEC  6A2D               	clrf	(escreve_inteiro_lcd@valor+2)^0,c
  3809  001DEE  6A2E               	clrf	(escreve_inteiro_lcd@valor+3)^0,c
  3810  001DF0  ECFB  F02A         	call	_escreve_inteiro_lcd	;wreg free
  3811  001DF4                     l13463:
  3812                           
  3813                           ;main.c: 469: };main.c: 470: fix_signal = fix();
  3814  001DF4  EC55  F02E         	call	_fix	;wreg free
  3815  001DF8  C00A  F037         	movff	?_fix,troca_de_tela@fix_signal
  3816  001DFC  C00B  F038         	movff	?_fix+1,troca_de_tela@fix_signal+1
  3817                           
  3818                           ;main.c: 471: posicao_cursor_lcd(2,0);
  3819  001E00  0E00               	movlw	0
  3820  001E02  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3821  001E04  0E02               	movlw	2
  3822  001E06  EC80  F027         	call	_posicao_cursor_lcd
  3823                           
  3824                           ;main.c: 472: escreve_frase_ram_lcd("FIX:");
  3825  001E0A  0E5F               	movlw	low STR_29
  3826  001E0C  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3827  001E0E  0E62               	movlw	high STR_29
  3828  001E10  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3829  001E12  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3830                           
  3831                           ;main.c: 473: posicao_cursor_lcd(2,8);
  3832  001E16  0E08               	movlw	8
  3833  001E18  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3834  001E1A  0E02               	movlw	2
  3835  001E1C  EC80  F027         	call	_posicao_cursor_lcd
  3836                           
  3837                           ;main.c: 474: escreve_caractere_lcd(fix_signal[0]);
  3838  001E20  C037  FFD9         	movff	troca_de_tela@fix_signal,fsr2l
  3839  001E24  C038  FFDA         	movff	troca_de_tela@fix_signal+1,fsr2h
  3840  001E28  50DF               	movf	indf2,w,c
  3841  001E2A  EC0F  F026         	call	_escreve_caractere_lcd
  3842  001E2E                     l13471:
  3843                           
  3844                           ;main.c: 475: };main.c: 476: last_state = 1;
  3845  001E2E  0E01               	movlw	1
  3846  001E30  6E4F               	movwf	troca_de_tela@last_state^0,c
  3847  001E32                     l13473:
  3848                           
  3849                           ;main.c: 478: };main.c: 488: if(!PORTEbits.RE1 || (state == 2))
  3850  001E32  A284               	btfss	132,1,c	;volatile
  3851  001E34  D004               	goto	u16390
  3852  001E36  0E02               	movlw	2
  3853  001E38  1850               	xorwf	troca_de_tela@state^0,w,c
  3854  001E3A  A4D8               	btfss	status,2,c
  3855  001E3C  D033               	goto	l13505
  3856  001E3E                     u16390:
  3857                           
  3858                           ;main.c: 489: {;main.c: 490: if(!time_atualizacao)
  3859  001E3E  0101               	movlb	1	; () banked
  3860  001E40  515F               	movf	_time_atualizacao& (0+255),w,b
  3861  001E42  1160               	iorwf	(_time_atualizacao+1)& (0+255),w,b
  3862  001E44  A4D8               	btfss	status,2,c
  3863  001E46  D009               	goto	l13485
  3864                           
  3865                           ; BSR set to: 1
  3866                           ;main.c: 491: {;main.c: 492: recebe_dado_gps();
  3867  001E48  EC62  F02D         	call	_recebe_dado_gps	;wreg free
  3868                           
  3869                           ;main.c: 493: mostra_dados_display();
  3870  001E4C  EC1D  F02C         	call	_mostra_dados_display	;wreg free
  3871                           
  3872                           ;main.c: 494: time_atualizacao = 2000;
  3873  001E50  0E07               	movlw	7
  3874  001E52  0101               	movlb	1	; () banked
  3875  001E54  6F60               	movwf	(_time_atualizacao+1)& (0+255),b
  3876  001E56  0ED0               	movlw	208
  3877  001E58  6F5F               	movwf	_time_atualizacao& (0+255),b
  3878  001E5A                     l13485:
  3879                           
  3880                           ; BSR set to: 1
  3881                           ;main.c: 495: };main.c: 498: if(last_state != 2)
  3882  001E5A  0E02               	movlw	2
  3883  001E5C  184F               	xorwf	troca_de_tela@last_state^0,w,c
  3884  001E5E  B4D8               	btfsc	status,2,c
  3885  001E60  D01F               	goto	l13503
  3886                           
  3887                           ; BSR set to: 1
  3888                           ;main.c: 499: {;main.c: 500: state = 2;
  3889  001E62  0E02               	movlw	2
  3890  001E64  6E50               	movwf	troca_de_tela@state^0,c
  3891                           
  3892                           ; BSR set to: 1
  3893                           ;main.c: 501: escreve_cmd_lcd(0b00000001);
  3894  001E66  0E01               	movlw	1
  3895  001E68  EC50  F024         	call	_escreve_cmd_lcd
  3896                           
  3897                           ;main.c: 502: posicao_cursor_lcd(1,0);
  3898  001E6C  0E00               	movlw	0
  3899  001E6E  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3900  001E70  0E01               	movlw	1
  3901  001E72  EC80  F027         	call	_posicao_cursor_lcd
  3902                           
  3903                           ;main.c: 503: escreve_frase_ram_lcd("lt:");
  3904  001E76  0E72               	movlw	low STR_30
  3905  001E78  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3906  001E7A  0E62               	movlw	high STR_30
  3907  001E7C  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3908  001E7E  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3909                           
  3910                           ;main.c: 504: posicao_cursor_lcd(2,0);
  3911  001E82  0E00               	movlw	0
  3912  001E84  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3913  001E86  0E02               	movlw	2
  3914  001E88  EC80  F027         	call	_posicao_cursor_lcd
  3915                           
  3916                           ;main.c: 505: escreve_frase_ram_lcd("lo:");
  3917  001E8C  0E6E               	movlw	low STR_31
  3918  001E8E  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3919  001E90  0E62               	movlw	high STR_31
  3920  001E92  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3921  001E94  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3922                           
  3923                           ;main.c: 506: recebe_dado_gps();
  3924  001E98  EC62  F02D         	call	_recebe_dado_gps	;wreg free
  3925                           
  3926                           ;main.c: 507: mostra_dados_display();
  3927  001E9C  EC1D  F02C         	call	_mostra_dados_display	;wreg free
  3928  001EA0                     l13503:
  3929                           
  3930                           ;main.c: 508: };main.c: 509: last_state = 2;
  3931  001EA0  0E02               	movlw	2
  3932  001EA2  6E4F               	movwf	troca_de_tela@last_state^0,c
  3933  001EA4                     l13505:
  3934                           
  3935                           ;main.c: 510: };main.c: 515: if(!state)
  3936  001EA4  5050               	movf	troca_de_tela@state^0,w,c
  3937  001EA6  A4D8               	btfss	status,2,c
  3938  001EA8  0012               	return	
  3939                           
  3940                           ;main.c: 516: {;main.c: 517: if(last_state != 4)
  3941  001EAA  0E04               	movlw	4
  3942  001EAC  184F               	xorwf	troca_de_tela@last_state^0,w,c
  3943  001EAE  B4D8               	btfsc	status,2,c
  3944  001EB0  D019               	goto	l13515
  3945                           
  3946                           ;main.c: 518: {;main.c: 519: escreve_cmd_lcd(0b00000001);
  3947  001EB2  0E01               	movlw	1
  3948  001EB4  EC50  F024         	call	_escreve_cmd_lcd
  3949                           
  3950                           ;main.c: 520: posicao_cursor_lcd(1,0);
  3951  001EB8  0E00               	movlw	0
  3952  001EBA  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3953  001EBC  0E01               	movlw	1
  3954  001EBE  EC80  F027         	call	_posicao_cursor_lcd
  3955                           
  3956                           ;main.c: 521: escreve_frase_ram_lcd("B1:FENCE");
  3957  001EC2  0E2A               	movlw	low STR_32
  3958  001EC4  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3959  001EC6  0E62               	movlw	high STR_32
  3960  001EC8  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3961  001ECA  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3962                           
  3963                           ;main.c: 522: posicao_cursor_lcd(2,0);
  3964  001ECE  0E00               	movlw	0
  3965  001ED0  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  3966  001ED2  0E02               	movlw	2
  3967  001ED4  EC80  F027         	call	_posicao_cursor_lcd
  3968                           
  3969                           ;main.c: 523: escreve_frase_ram_lcd("B2:LTLO");
  3970  001ED8  0E3C               	movlw	low STR_33
  3971  001EDA  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3972  001EDC  0E62               	movlw	high STR_33
  3973  001EDE  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3974  001EE0  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  3975  001EE4                     l13515:
  3976                           
  3977                           ;main.c: 525: };main.c: 526: last_state = 4;
  3978  001EE4  0E04               	movlw	4
  3979  001EE6  6E4F               	movwf	troca_de_tela@last_state^0,c
  3980  001EE8  0012               	return		;funcret
  3981  001EEA                     __end_of_troca_de_tela:
  3982                           	callstack 0
  3983                           
  3984 ;; *************** function _disparo_gravacao *****************
  3985 ;; Defined at:
  3986 ;;		line 350 in file "main.c"
  3987 ;; Parameters:    Size  Location     Type
  3988 ;;		None
  3989 ;; Auto vars:     Size  Location     Type
  3990 ;;  velocidade     12    0[BANK2 ] PTR unsigned char [6]
  3991 ;;  index_max       2   16[BANK2 ] unsigned int 
  3992 ;;  v_max           2   14[BANK2 ] unsigned int 
  3993 ;;  fix_gps         2   12[BANK2 ] PTR unsigned char 
  3994 ;;		 -> rawFix(2), 
  3995 ;;  i               1   18[BANK2 ] unsigned char 
  3996 ;; Return value:  Size  Location     Type
  3997 ;;                  1    wreg      void 
  3998 ;; Registers used:
  3999 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4000 ;; Tracked objects:
  4001 ;;		On entry : 3F/0
  4002 ;;		On exit  : 3F/1
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4005 ;;      Params:         0       0       0       0       0       0       0       0       0
  4006 ;;      Locals:         0       0       0      19       0       0       0       0       0
  4007 ;;      Temps:          0       5       0       0       0       0       0       0       0
  4008 ;;      Totals:         0       5       0      19       0       0       0       0       0
  4009 ;;Total ram usage:       24 bytes
  4010 ;; Hardware stack levels used:    1
  4011 ;; Hardware stack levels required when called:   16
  4012 ;; This function calls:
  4013 ;;		___wmul
  4014 ;;		_atoi
  4015 ;;		_dados_gps_to_sd
  4016 ;;		_fix
  4017 ;;		_grava_sd
  4018 ;;		_itoa
  4019 ;;		_monta_sd
  4020 ;;		_recebe_dado_gps
  4021 ;;		_verifica_fence
  4022 ;; This function is called by:
  4023 ;;		_inicializa_tarefas
  4024 ;;		_escalonador
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           	psect	text13
  4029  002878                     __ptext13:
  4030                           	callstack 0
  4031  002878                     _disparo_gravacao:
  4032                           	callstack 13
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;main.c: 355: unsigned char *velocidade[6];;main.c: 357: v_max = atoi(dados_vel[0]);
  4036                           
  4037                           ; BSR set to: 0
  4038                           
  4039                           ;incstack = 0
  4040  002878  C117  F0DF         	movff	_dados_vel,??_disparo_gravacao
  4041  00287C  C118  F0E0         	movff	_dados_vel+1,??_disparo_gravacao+1
  4042  002880  6BE1               	clrf	(??_disparo_gravacao+2)& (0+255),b
  4043  002882  C0DF  F010         	movff	??_disparo_gravacao,atoi@s
  4044  002886  C0E0  F011         	movff	??_disparo_gravacao+1,atoi@s+1
  4045  00288A  C0E1  F012         	movff	??_disparo_gravacao+2,atoi@s+2
  4046  00288E  EC29  F019         	call	_atoi	;wreg free
  4047  002892  C010  F2F5         	movff	?_atoi,disparo_gravacao@v_max
  4048  002896  C011  F2F6         	movff	?_atoi+1,disparo_gravacao@v_max+1
  4049                           
  4050                           ;main.c: 358: index_max = 0;
  4051  00289A  0E00               	movlw	0
  4052  00289C  0102               	movlb	2	; () banked
  4053  00289E  6FF8               	movwf	(disparo_gravacao@index_max+1)& (0+255),b
  4054  0028A0  0E00               	movlw	0
  4055  0028A2  6FF7               	movwf	disparo_gravacao@index_max& (0+255),b
  4056                           
  4057                           ; BSR set to: 2
  4058                           ;main.c: 359: if(!time_sd)
  4059  0028A4  0101               	movlb	1	; () banked
  4060  0028A6  5163               	movf	_time_sd& (0+255),w,b
  4061  0028A8  1164               	iorwf	(_time_sd+1)& (0+255),w,b
  4062  0028AA  A4D8               	btfss	status,2,c
  4063  0028AC  0012               	return	
  4064                           
  4065                           ; BSR set to: 1
  4066                           ;main.c: 360: {;main.c: 361: verifica_fence();
  4067  0028AE  ECAF  F027         	call	_verifica_fence	;wreg free
  4068                           
  4069                           ;main.c: 362: fix_gps = fix();
  4070  0028B2  EC55  F02E         	call	_fix	;wreg free
  4071  0028B6  C00A  F2F3         	movff	?_fix,disparo_gravacao@fix_gps
  4072  0028BA  C00B  F2F4         	movff	?_fix+1,disparo_gravacao@fix_gps+1
  4073                           
  4074                           ;main.c: 364: if(*fix_gps == '1')
  4075  0028BE  C2F3  FFD9         	movff	disparo_gravacao@fix_gps,fsr2l
  4076  0028C2  C2F4  FFDA         	movff	disparo_gravacao@fix_gps+1,fsr2h
  4077  0028C6  0E31               	movlw	49
  4078  0028C8  18DE               	xorwf	postinc2,w,c
  4079  0028CA  A4D8               	btfss	status,2,c
  4080  0028CC  D0DA               	goto	l13829
  4081                           
  4082                           ;main.c: 365: {;main.c: 366: if(v_max> 0)
  4083  0028CE  0102               	movlb	2	; () banked
  4084  0028D0  51F5               	movf	disparo_gravacao@v_max& (0+255),w,b
  4085  0028D2  11F6               	iorwf	(disparo_gravacao@v_max+1)& (0+255),w,b
  4086  0028D4  B4D8               	btfsc	status,2,c
  4087  0028D6  D0C2               	goto	l13821
  4088                           
  4089                           ; BSR set to: 2
  4090                           ;main.c: 367: {;main.c: 368: for(i=1; i<3; i++)
  4091  0028D8  0E01               	movlw	1
  4092  0028DA  6FF9               	movwf	disparo_gravacao@i& (0+255),b
  4093  0028DC                     l13799:
  4094                           
  4095                           ; BSR set to: 2
  4096                           ;main.c: 369: {;main.c: 370: if(v_max < atoi(dados_vel[i]))
  4097  0028DC  51F9               	movf	disparo_gravacao@i& (0+255),w,b
  4098  0028DE  0D02               	mullw	2
  4099  0028E0  0E17               	movlw	low _dados_vel
  4100  0028E2  24F3               	addwf	243,w,c
  4101  0028E4  6ED9               	movwf	fsr2l,c
  4102  0028E6  0E01               	movlw	high _dados_vel
  4103  0028E8  20F4               	addwfc	prodh,w,c
  4104  0028EA  6EDA               	movwf	fsr2h,c
  4105  0028EC  CFDE F0DF          	movff	postinc2,??_disparo_gravacao
  4106  0028F0  CFDD F0E0          	movff	postdec2,??_disparo_gravacao+1
  4107  0028F4  C0DF  F0E1         	movff	??_disparo_gravacao,??_disparo_gravacao+2
  4108  0028F8  C0E0  F0E2         	movff	??_disparo_gravacao+1,??_disparo_gravacao+3
  4109  0028FC  0100               	movlb	0	; () banked
  4110  0028FE  6BE3               	clrf	(??_disparo_gravacao+4)& (0+255),b
  4111  002900  C0E1  F010         	movff	??_disparo_gravacao+2,atoi@s
  4112  002904  C0E2  F011         	movff	??_disparo_gravacao+3,atoi@s+1
  4113  002908  C0E3  F012         	movff	??_disparo_gravacao+4,atoi@s+2
  4114  00290C  EC29  F019         	call	_atoi	;wreg free
  4115  002910  5010               	movf	?_atoi^0,w,c
  4116  002912  0102               	movlb	2	; () banked
  4117  002914  5DF5               	subwf	disparo_gravacao@v_max& (0+255),w,b
  4118  002916  5011               	movf	(?_atoi+1)^0,w,c
  4119  002918  59F6               	subwfb	(disparo_gravacao@v_max+1)& (0+255),w,b
  4120  00291A  B0D8               	btfsc	status,0,c
  4121  00291C  D022               	goto	l13805
  4122                           
  4123                           ; BSR set to: 2
  4124                           ;main.c: 371: {;main.c: 372: v_max = atoi(dados_vel[i]);
  4125  00291E  51F9               	movf	disparo_gravacao@i& (0+255),w,b
  4126  002920  0D02               	mullw	2
  4127  002922  0E17               	movlw	low _dados_vel
  4128  002924  24F3               	addwf	243,w,c
  4129  002926  6ED9               	movwf	fsr2l,c
  4130  002928  0E01               	movlw	high _dados_vel
  4131  00292A  20F4               	addwfc	prodh,w,c
  4132  00292C  6EDA               	movwf	fsr2h,c
  4133  00292E  CFDE F0DF          	movff	postinc2,??_disparo_gravacao
  4134  002932  CFDD F0E0          	movff	postdec2,??_disparo_gravacao+1
  4135  002936  C0DF  F0E1         	movff	??_disparo_gravacao,??_disparo_gravacao+2
  4136  00293A  C0E0  F0E2         	movff	??_disparo_gravacao+1,??_disparo_gravacao+3
  4137  00293E  0100               	movlb	0	; () banked
  4138  002940  6BE3               	clrf	(??_disparo_gravacao+4)& (0+255),b
  4139  002942  C0E1  F010         	movff	??_disparo_gravacao+2,atoi@s
  4140  002946  C0E2  F011         	movff	??_disparo_gravacao+3,atoi@s+1
  4141  00294A  C0E3  F012         	movff	??_disparo_gravacao+4,atoi@s+2
  4142  00294E  EC29  F019         	call	_atoi	;wreg free
  4143  002952  C010  F2F5         	movff	?_atoi,disparo_gravacao@v_max
  4144  002956  C011  F2F6         	movff	?_atoi+1,disparo_gravacao@v_max+1
  4145                           
  4146                           ;main.c: 373: index_max = i;
  4147  00295A  C2F9  F2F7         	movff	disparo_gravacao@i,disparo_gravacao@index_max
  4148  00295E  0102               	movlb	2	; () banked
  4149  002960  6BF8               	clrf	(disparo_gravacao@index_max+1)& (0+255),b
  4150  002962                     l13805:
  4151                           
  4152                           ; BSR set to: 2
  4153  002962  2BF9               	incf	disparo_gravacao@i& (0+255),f,b
  4154                           
  4155                           ; BSR set to: 2
  4156  002964  0E02               	movlw	2
  4157  002966  65F9               	cpfsgt	disparo_gravacao@i& (0+255),b
  4158  002968  D7B9               	goto	l13799
  4159                           
  4160                           ; BSR set to: 2
  4161                           ;main.c: 374: };main.c: 376: };main.c: 378: monta_sd(0, dados_hora[index_max]);
  4162  00296A  C2F7  F00A         	movff	disparo_gravacao@index_max,___wmul@multiplier
  4163  00296E  C2F8  F00B         	movff	disparo_gravacao@index_max+1,___wmul@multiplier+1
  4164  002972  0E00               	movlw	0
  4165  002974  6E0D               	movwf	(___wmul@multiplicand+1)^0,c
  4166  002976  0E06               	movlw	6
  4167  002978  6E0C               	movwf	___wmul@multiplicand^0,c
  4168  00297A  ECC6  F02C         	call	___wmul	;wreg free
  4169  00297E  0ED5               	movlw	low _dados_hora
  4170  002980  240A               	addwf	?___wmul^0,w,c
  4171  002982  6E10               	movwf	monta_sd@dado^0,c
  4172  002984  0E02               	movlw	high _dados_hora
  4173  002986  200B               	addwfc	(?___wmul+1)^0,w,c
  4174  002988  6E11               	movwf	(monta_sd@dado+1)^0,c
  4175  00298A  0E00               	movlw	0
  4176  00298C  ECBF  F007         	call	_monta_sd
  4177                           
  4178                           ;main.c: 379: monta_sd(1, dados_data[index_max]);
  4179  002990  C2F7  F00A         	movff	disparo_gravacao@index_max,___wmul@multiplier
  4180  002994  C2F8  F00B         	movff	disparo_gravacao@index_max+1,___wmul@multiplier+1
  4181  002998  0E00               	movlw	0
  4182  00299A  6E0D               	movwf	(___wmul@multiplicand+1)^0,c
  4183  00299C  0E06               	movlw	6
  4184  00299E  6E0C               	movwf	___wmul@multiplicand^0,c
  4185  0029A0  ECC6  F02C         	call	___wmul	;wreg free
  4186  0029A4  0EC3               	movlw	low _dados_data
  4187  0029A6  240A               	addwf	?___wmul^0,w,c
  4188  0029A8  6E10               	movwf	monta_sd@dado^0,c
  4189  0029AA  0E02               	movlw	high _dados_data
  4190  0029AC  200B               	addwfc	(?___wmul+1)^0,w,c
  4191  0029AE  6E11               	movwf	(monta_sd@dado+1)^0,c
  4192  0029B0  0E01               	movlw	1
  4193  0029B2  ECBF  F007         	call	_monta_sd
  4194                           
  4195                           ;main.c: 380: monta_sd(2, dados_lat[index_max]);
  4196  0029B6  C2F7  F00A         	movff	disparo_gravacao@index_max,___wmul@multiplier
  4197  0029BA  C2F8  F00B         	movff	disparo_gravacao@index_max+1,___wmul@multiplier+1
  4198  0029BE  0E00               	movlw	0
  4199  0029C0  6E0D               	movwf	(___wmul@multiplicand+1)^0,c
  4200  0029C2  0E0B               	movlw	11
  4201  0029C4  6E0C               	movwf	___wmul@multiplicand^0,c
  4202  0029C6  ECC6  F02C         	call	___wmul	;wreg free
  4203  0029CA  0EA2               	movlw	low _dados_lat
  4204  0029CC  240A               	addwf	?___wmul^0,w,c
  4205  0029CE  6E10               	movwf	monta_sd@dado^0,c
  4206  0029D0  0E02               	movlw	high _dados_lat
  4207  0029D2  200B               	addwfc	(?___wmul+1)^0,w,c
  4208  0029D4  6E11               	movwf	(monta_sd@dado+1)^0,c
  4209  0029D6  0E02               	movlw	2
  4210  0029D8  ECBF  F007         	call	_monta_sd
  4211                           
  4212                           ;main.c: 381: monta_sd(3, dados_long[index_max]);
  4213  0029DC  C2F7  F00A         	movff	disparo_gravacao@index_max,___wmul@multiplier
  4214  0029E0  C2F8  F00B         	movff	disparo_gravacao@index_max+1,___wmul@multiplier+1
  4215  0029E4  0E00               	movlw	0
  4216  0029E6  6E0D               	movwf	(___wmul@multiplicand+1)^0,c
  4217  0029E8  0E0C               	movlw	12
  4218  0029EA  6E0C               	movwf	___wmul@multiplicand^0,c
  4219  0029EC  ECC6  F02C         	call	___wmul	;wreg free
  4220  0029F0  0E7E               	movlw	low _dados_long
  4221  0029F2  240A               	addwf	?___wmul^0,w,c
  4222  0029F4  6E10               	movwf	monta_sd@dado^0,c
  4223  0029F6  0E02               	movlw	high _dados_long
  4224  0029F8  200B               	addwfc	(?___wmul+1)^0,w,c
  4225  0029FA  6E11               	movwf	(monta_sd@dado+1)^0,c
  4226  0029FC  0E03               	movlw	3
  4227  0029FE  ECBF  F007         	call	_monta_sd
  4228                           
  4229                           ;main.c: 382: itoa(velocidade, dados_vel[index_max], 10);
  4230  002A02  0EE7               	movlw	low disparo_gravacao@velocidade
  4231  002A04  6E1A               	movwf	itoa@buf^0,c
  4232  002A06  0E02               	movlw	high disparo_gravacao@velocidade
  4233  002A08  6E1B               	movwf	(itoa@buf+1)^0,c
  4234  002A0A  90D8               	bcf	status,0,c
  4235  002A0C  0102               	movlb	2	; () banked
  4236  002A0E  35F7               	rlcf	disparo_gravacao@index_max& (0+255),w,b
  4237  002A10  6ED9               	movwf	fsr2l,c
  4238  002A12  35F8               	rlcf	(disparo_gravacao@index_max+1)& (0+255),w,b
  4239  002A14  6EDA               	movwf	fsr2h,c
  4240  002A16  0E17               	movlw	low _dados_vel
  4241  002A18  26D9               	addwf	fsr2l,f,c
  4242  002A1A  0E01               	movlw	high _dados_vel
  4243  002A1C  22DA               	addwfc	fsr2h,f,c
  4244  002A1E  CFDE F01C          	movff	postinc2,itoa@val
  4245  002A22  CFDD F01D          	movff	postdec2,itoa@val+1
  4246  002A26  0E00               	movlw	0
  4247  002A28  6E1F               	movwf	(itoa@base+1)^0,c
  4248  002A2A  0E0A               	movlw	10
  4249  002A2C  6E1E               	movwf	itoa@base^0,c
  4250  002A2E  EC38  F02B         	call	_itoa	;wreg free
  4251                           
  4252                           ;main.c: 383: monta_sd(7, velocidade);
  4253  002A32  0EE7               	movlw	low disparo_gravacao@velocidade
  4254  002A34  6E10               	movwf	monta_sd@dado^0,c
  4255  002A36  0E02               	movlw	high disparo_gravacao@velocidade
  4256  002A38  6E11               	movwf	(monta_sd@dado+1)^0,c
  4257  002A3A  0E07               	movlw	7
  4258  002A3C  ECBF  F007         	call	_monta_sd
  4259                           
  4260                           ;main.c: 385: dados_vel[0] = 50;
  4261  002A40  0E00               	movlw	0
  4262  002A42  0101               	movlb	1	; () banked
  4263  002A44  6F18               	movwf	(_dados_vel+1)& (0+255),b
  4264  002A46  0E32               	movlw	50
  4265  002A48  6F17               	movwf	_dados_vel& (0+255),b
  4266                           
  4267                           ; BSR set to: 1
  4268                           ;main.c: 386: dados_vel[1] = 50;
  4269  002A4A  0E00               	movlw	0
  4270  002A4C  6F1A               	movwf	(_dados_vel+3)& (0+255),b
  4271  002A4E  0E32               	movlw	50
  4272  002A50  6F19               	movwf	(_dados_vel+2)& (0+255),b
  4273                           
  4274                           ; BSR set to: 1
  4275                           ;main.c: 387: dados_vel[2] = 50;
  4276  002A52  0E00               	movlw	0
  4277  002A54  6F1C               	movwf	(_dados_vel+5)& (0+255),b
  4278  002A56  0E32               	movlw	50
  4279  002A58  6F1B               	movwf	(_dados_vel+4)& (0+255),b
  4280                           
  4281                           ;main.c: 388: }
  4282  002A5A  D011               	goto	l13827
  4283  002A5C                     l13821:
  4284                           
  4285                           ; BSR set to: 2
  4286                           ;main.c: 389: else;main.c: 390: {;main.c: 391: dados_vel[0] = 50;
  4287  002A5C  0E00               	movlw	0
  4288  002A5E  0101               	movlb	1	; () banked
  4289  002A60  6F18               	movwf	(_dados_vel+1)& (0+255),b
  4290  002A62  0E32               	movlw	50
  4291  002A64  6F17               	movwf	_dados_vel& (0+255),b
  4292                           
  4293                           ;main.c: 392: dados_vel[1] = 50;
  4294  002A66  0E00               	movlw	0
  4295  002A68  6F1A               	movwf	(_dados_vel+3)& (0+255),b
  4296  002A6A  0E32               	movlw	50
  4297  002A6C  6F19               	movwf	(_dados_vel+2)& (0+255),b
  4298                           
  4299                           ;main.c: 393: dados_vel[2] = 50;
  4300  002A6E  0E00               	movlw	0
  4301  002A70  6F1C               	movwf	(_dados_vel+5)& (0+255),b
  4302  002A72  0E32               	movlw	50
  4303  002A74  6F1B               	movwf	(_dados_vel+4)& (0+255),b
  4304                           
  4305                           ; BSR set to: 1
  4306                           ;main.c: 394: recebe_dado_gps();
  4307  002A76  EC62  F02D         	call	_recebe_dado_gps	;wreg free
  4308                           
  4309                           ;main.c: 395: dados_gps_to_sd();
  4310  002A7A  EC4E  F027         	call	_dados_gps_to_sd	;wreg free
  4311  002A7E                     l13827:
  4312                           
  4313                           ;main.c: 396: };main.c: 397: grava_sd();
  4314  002A7E  ECCB  F02D         	call	_grava_sd	;wreg free
  4315  002A82                     l13829:
  4316                           
  4317                           ;main.c: 398: };main.c: 401: time_sd = 1000;
  4318  002A82  0E03               	movlw	3
  4319  002A84  0101               	movlb	1	; () banked
  4320  002A86  6F64               	movwf	(_time_sd+1)& (0+255),b
  4321  002A88  0EE8               	movlw	232
  4322  002A8A  6F63               	movwf	_time_sd& (0+255),b
  4323                           
  4324                           ; BSR set to: 1
  4325  002A8C  0012               	return		;funcret
  4326  002A8E                     __end_of_disparo_gravacao:
  4327                           	callstack 0
  4328                           
  4329 ;; *************** function _verifica_dados_operacionais *****************
  4330 ;; Defined at:
  4331 ;;		line 309 in file "main.c"
  4332 ;; Parameters:    Size  Location     Type
  4333 ;;		None
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;		None
  4336 ;; Return value:  Size  Location     Type
  4337 ;;                  1    wreg      void 
  4338 ;; Registers used:
  4339 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4340 ;; Tracked objects:
  4341 ;;		On entry : 3F/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4345 ;;      Params:         0       0       0       0       0       0       0       0       0
  4346 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4347 ;;      Temps:          6       0       0       0       0       0       0       0       0
  4348 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4349 ;;Total ram usage:        6 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; Hardware stack levels required when called:    4
  4352 ;; This function calls:
  4353 ;;		_Speed
  4354 ;;		___awtoft
  4355 ;;		___ftmul
  4356 ;;		___fttol
  4357 ;;		_atoi
  4358 ;;		_latitude
  4359 ;;		_longitude
  4360 ;;		_rawdata
  4361 ;;		_rawhora
  4362 ;;		_strcpy
  4363 ;; This function is called by:
  4364 ;;		_inicializa_tarefas
  4365 ;;		_escalonador
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           	psect	text14
  4370  002F70                     __ptext14:
  4371                           	callstack 0
  4372  002F70                     _verifica_dados_operacionais:
  4373                           	callstack 25
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;main.c: 311: static unsigned char dado[6];;main.c: 312: static unsigned char contador_a
      +                          tual =0;;main.c: 313: static unsigned char contador_anterior =0;;main.c: 314: static uns
      +                          igned long int velocidade_media;;main.c: 315: static unsigned long int velocidade_atual_
      +                          int = 0;;main.c: 316: static unsigned char *velocidade_atual;;main.c: 319: if(contador_a
      +                          tual >=3)
  4377                           
  4378                           ; BSR set to: 1
  4379                           ;incstack = 0
  4380  002F70  0E02               	movlw	2
  4381  002F72  6451               	cpfsgt	verifica_dados_operacionais@contador_atual^0,c
  4382  002F74  D004               	goto	l13321
  4383                           
  4384                           ; BSR set to: 0
  4385                           ;main.c: 320: {;main.c: 321: contador_atual = 0;
  4386  002F76  0E00               	movlw	0
  4387  002F78  6E51               	movwf	verifica_dados_operacionais@contador_atual^0,c
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;main.c: 322: contador_anterior = contador_atual;
  4391  002F7A  0E00               	movlw	0
  4392  002F7C  6FFB               	movwf	verifica_dados_operacionais@contador_anterior& (0+255),b
  4393  002F7E                     l13321:
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;main.c: 323: };main.c: 325: velocidade_atual = Speed();
  4397  002F7E  EC50  F02E         	call	_Speed	;wreg free
  4398  002F82  C00A  F159         	movff	?_Speed,verifica_dados_operacionais@velocidade_atual
  4399  002F86  C00B  F15A         	movff	?_Speed+1,verifica_dados_operacionais@velocidade_atual+1
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;main.c: 326: velocidade_atual_int = ((atoi(velocidade_atual)*1.852));
  4403  002F8A  0E0E               	movlw	14
  4404  002F8C  6E1F               	movwf	___ftmul@f2^0,c
  4405  002F8E  0EED               	movlw	237
  4406  002F90  6E20               	movwf	(___ftmul@f2+1)^0,c
  4407  002F92  0E3F               	movlw	63
  4408  002F94  6E21               	movwf	(___ftmul@f2+2)^0,c
  4409  002F96  C159  F010         	movff	verifica_dados_operacionais@velocidade_atual,atoi@s
  4410  002F9A  C15A  F011         	movff	verifica_dados_operacionais@velocidade_atual+1,atoi@s+1
  4411  002F9E  5010               	movf	atoi@s^0,w,c
  4412  002FA0  1011               	iorwf	(atoi@s+1)^0,w,c
  4413  002FA2  A4D8               	btfss	status,2,c
  4414  002FA4  0E20               	movlw	32
  4415  002FA6  6E12               	movwf	(atoi@s+2)^0,c
  4416  002FA8  EC29  F019         	call	_atoi	;wreg free
  4417  002FAC  C010  F018         	movff	?_atoi,___awtoft@c
  4418  002FB0  C011  F019         	movff	?_atoi+1,___awtoft@c+1
  4419  002FB4  EC55  F02B         	call	___awtoft	;wreg free
  4420  002FB8  C018  F01C         	movff	?___awtoft,___ftmul@f1
  4421  002FBC  C019  F01D         	movff	?___awtoft+1,___ftmul@f1+1
  4422  002FC0  C01A  F01E         	movff	?___awtoft+2,___ftmul@f1+2
  4423  002FC4  EC96  F01E         	call	___ftmul	;wreg free
  4424  002FC8  C01C  F02B         	movff	?___ftmul,___fttol@f1
  4425  002FCC  C01D  F02C         	movff	?___ftmul+1,___fttol@f1+1
  4426  002FD0  C01E  F02D         	movff	?___ftmul+2,___fttol@f1+2
  4427  002FD4  ECFA  F01F         	call	___fttol	;wreg free
  4428  002FD8  C02B  F141         	movff	?___fttol,verifica_dados_operacionais@velocidade_atual_int
  4429  002FDC  C02C  F142         	movff	?___fttol+1,verifica_dados_operacionais@velocidade_atual_int+1
  4430  002FE0  C02D  F143         	movff	?___fttol+2,verifica_dados_operacionais@velocidade_atual_int+2
  4431  002FE4  C02E  F144         	movff	?___fttol+3,verifica_dados_operacionais@velocidade_atual_int+3
  4432                           
  4433                           ;main.c: 327: if((velocidade_atual_int > dados_vel[2]) && contador_atual<3)
  4434  002FE8  0101               	movlb	1	; () banked
  4435  002FEA  511B               	movf	(_dados_vel+4)& (0+255),w,b
  4436  002FEC  6E3A               	movwf	??_verifica_dados_operacionais^0,c
  4437  002FEE  511C               	movf	(_dados_vel+5)& (0+255),w,b
  4438  002FF0  6E3B               	movwf	(??_verifica_dados_operacionais+1)^0,c
  4439  002FF2  6A3C               	clrf	(??_verifica_dados_operacionais+2)^0,c
  4440  002FF4  6A3D               	clrf	(??_verifica_dados_operacionais+3)^0,c
  4441  002FF6  5141               	movf	verifica_dados_operacionais@velocidade_atual_int& (0+255),w,b
  4442  002FF8  5C3A               	subwf	??_verifica_dados_operacionais^0,w,c
  4443  002FFA  5142               	movf	(verifica_dados_operacionais@velocidade_atual_int+1)& (0+255),w,b
  4444  002FFC  583B               	subwfb	(??_verifica_dados_operacionais+1)^0,w,c
  4445  002FFE  5143               	movf	(verifica_dados_operacionais@velocidade_atual_int+2)& (0+255),w,b
  4446  003000  583C               	subwfb	(??_verifica_dados_operacionais+2)^0,w,c
  4447  003002  5144               	movf	(verifica_dados_operacionais@velocidade_atual_int+3)& (0+255),w,b
  4448  003004  583D               	subwfb	(??_verifica_dados_operacionais+3)^0,w,c
  4449  003006  B0D8               	btfsc	status,0,c
  4450  003008  0012               	return	
  4451                           
  4452                           ; BSR set to: 1
  4453  00300A  0E03               	movlw	3
  4454  00300C  6051               	cpfslt	verifica_dados_operacionais@contador_atual^0,c
  4455  00300E  0012               	return	
  4456                           
  4457                           ; BSR set to: 1
  4458                           ;main.c: 328: {;main.c: 329: if(velocidade_atual_int > dados_vel[contador_anterior])
  4459  003010  0100               	movlb	0	; () banked
  4460  003012  51FB               	movf	verifica_dados_operacionais@contador_anterior& (0+255),w,b
  4461  003014  0D02               	mullw	2
  4462  003016  0E17               	movlw	low _dados_vel
  4463  003018  24F3               	addwf	243,w,c
  4464  00301A  6ED9               	movwf	fsr2l,c
  4465  00301C  0E01               	movlw	high _dados_vel
  4466  00301E  20F4               	addwfc	prodh,w,c
  4467  003020  6EDA               	movwf	fsr2h,c
  4468  003022  CFDE F03A          	movff	postinc2,??_verifica_dados_operacionais
  4469  003026  CFDD F03B          	movff	postdec2,??_verifica_dados_operacionais+1
  4470  00302A  503A               	movf	??_verifica_dados_operacionais^0,w,c
  4471  00302C  6E3C               	movwf	(??_verifica_dados_operacionais+2)^0,c
  4472  00302E  503B               	movf	(??_verifica_dados_operacionais+1)^0,w,c
  4473  003030  6E3D               	movwf	(??_verifica_dados_operacionais+3)^0,c
  4474  003032  6A3E               	clrf	(??_verifica_dados_operacionais+4)^0,c
  4475  003034  6A3F               	clrf	(??_verifica_dados_operacionais+5)^0,c
  4476  003036  0101               	movlb	1	; () banked
  4477  003038  5141               	movf	verifica_dados_operacionais@velocidade_atual_int& (0+255),w,b
  4478  00303A  5C3C               	subwf	(??_verifica_dados_operacionais+2)^0,w,c
  4479  00303C  5142               	movf	(verifica_dados_operacionais@velocidade_atual_int+1)& (0+255),w,b
  4480  00303E  583D               	subwfb	(??_verifica_dados_operacionais+3)^0,w,c
  4481  003040  5143               	movf	(verifica_dados_operacionais@velocidade_atual_int+2)& (0+255),w,b
  4482  003042  583E               	subwfb	(??_verifica_dados_operacionais+4)^0,w,c
  4483  003044  5144               	movf	(verifica_dados_operacionais@velocidade_atual_int+3)& (0+255),w,b
  4484  003046  583F               	subwfb	(??_verifica_dados_operacionais+5)^0,w,c
  4485  003048  B0D8               	btfsc	status,0,c
  4486  00304A  D04C               	goto	l13341
  4487                           
  4488                           ; BSR set to: 1
  4489                           ;main.c: 330: {;main.c: 331: dados_vel[contador_atual] = velocidade_atual_int;
  4490  00304C  5051               	movf	verifica_dados_operacionais@contador_atual^0,w,c
  4491  00304E  0D02               	mullw	2
  4492  003050  0E17               	movlw	low _dados_vel
  4493  003052  24F3               	addwf	243,w,c
  4494  003054  6ED9               	movwf	fsr2l,c
  4495  003056  0E01               	movlw	high _dados_vel
  4496  003058  20F4               	addwfc	prodh,w,c
  4497  00305A  6EDA               	movwf	fsr2h,c
  4498  00305C  C141  FFDE         	movff	verifica_dados_operacionais@velocidade_atual_int,postinc2
  4499  003060  C142  FFDD         	movff	verifica_dados_operacionais@velocidade_atual_int+1,postdec2
  4500                           
  4501                           ; BSR set to: 1
  4502                           ;main.c: 332: strcpy(dados_lat[contador_atual], latitude());
  4503  003064  5051               	movf	verifica_dados_operacionais@contador_atual^0,w,c
  4504  003066  0D0B               	mullw	11
  4505  003068  0EA2               	movlw	low _dados_lat
  4506  00306A  24F3               	addwf	243,w,c
  4507  00306C  6E0C               	movwf	strcpy@to^0,c
  4508  00306E  0E02               	movlw	high _dados_lat
  4509  003070  20F4               	addwfc	prodh,w,c
  4510  003072  6E0D               	movwf	(strcpy@to+1)^0,c
  4511  003074  EC4B  F02E         	call	_latitude	;wreg free
  4512  003078  C00A  F00E         	movff	?_latitude,strcpy@from
  4513  00307C  C00B  F00F         	movff	?_latitude+1,strcpy@from+1
  4514  003080  EC06  F02C         	call	_strcpy	;wreg free
  4515                           
  4516                           ;main.c: 333: strcpy(dados_long[contador_atual], longitude());
  4517  003084  5051               	movf	verifica_dados_operacionais@contador_atual^0,w,c
  4518  003086  0D0C               	mullw	12
  4519  003088  0E7E               	movlw	low _dados_long
  4520  00308A  24F3               	addwf	243,w,c
  4521  00308C  6E0C               	movwf	strcpy@to^0,c
  4522  00308E  0E02               	movlw	high _dados_long
  4523  003090  20F4               	addwfc	prodh,w,c
  4524  003092  6E0D               	movwf	(strcpy@to+1)^0,c
  4525  003094  EC46  F02E         	call	_longitude	;wreg free
  4526  003098  C00A  F00E         	movff	?_longitude,strcpy@from
  4527  00309C  C00B  F00F         	movff	?_longitude+1,strcpy@from+1
  4528  0030A0  EC06  F02C         	call	_strcpy	;wreg free
  4529                           
  4530                           ;main.c: 334: strcpy(dados_hora[contador_atual], rawhora());
  4531  0030A4  5051               	movf	verifica_dados_operacionais@contador_atual^0,w,c
  4532  0030A6  0D06               	mullw	6
  4533  0030A8  0ED5               	movlw	low _dados_hora
  4534  0030AA  24F3               	addwf	243,w,c
  4535  0030AC  6E0C               	movwf	strcpy@to^0,c
  4536  0030AE  0E02               	movlw	high _dados_hora
  4537  0030B0  20F4               	addwfc	prodh,w,c
  4538  0030B2  6E0D               	movwf	(strcpy@to+1)^0,c
  4539  0030B4  EC3C  F02E         	call	_rawhora	;wreg free
  4540  0030B8  C00A  F00E         	movff	?_rawhora,strcpy@from
  4541  0030BC  C00B  F00F         	movff	?_rawhora+1,strcpy@from+1
  4542  0030C0  EC06  F02C         	call	_strcpy	;wreg free
  4543                           
  4544                           ;main.c: 335: strcpy(dados_data[contador_atual], rawdata());
  4545  0030C4  5051               	movf	verifica_dados_operacionais@contador_atual^0,w,c
  4546  0030C6  0D06               	mullw	6
  4547  0030C8  0EC3               	movlw	low _dados_data
  4548  0030CA  24F3               	addwf	243,w,c
  4549  0030CC  6E0C               	movwf	strcpy@to^0,c
  4550  0030CE  0E02               	movlw	high _dados_data
  4551  0030D0  20F4               	addwfc	prodh,w,c
  4552  0030D2  6E0D               	movwf	(strcpy@to+1)^0,c
  4553  0030D4  EC41  F02E         	call	_rawdata	;wreg free
  4554  0030D8  C00A  F00E         	movff	?_rawdata,strcpy@from
  4555  0030DC  C00B  F00F         	movff	?_rawdata+1,strcpy@from+1
  4556  0030E0  EC06  F02C         	call	_strcpy	;wreg free
  4557  0030E4                     l13341:
  4558                           
  4559                           ;main.c: 336: };main.c: 337: contador_anterior = contador_atual;
  4560  0030E4  C051  F0FB         	movff	verifica_dados_operacionais@contador_atual,verifica_dados_operacionais@contador_a
      +                          nterior
  4561                           
  4562                           ;main.c: 338: contador_atual++;
  4563  0030E8  2A51               	incf	verifica_dados_operacionais@contador_atual^0,f,c
  4564  0030EA  0012               	return		;funcret
  4565  0030EC                     __end_of_verifica_dados_operacionais:
  4566                           	callstack 0
  4567                           
  4568 ;; *************** function _strcpy *****************
  4569 ;; Defined at:
  4570 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strcpy.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;  to              2   11[COMRAM] PTR unsigned char 
  4573 ;;		 -> dados_data(18), dados_hora(18), dados_long(36), dados_lat(33), 
  4574 ;;  from            2   13[COMRAM] PTR const unsigned char 
  4575 ;;		 -> rawDate(6), rawLongitude(13), rawLatitude(12), rawTime(7), 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  cp              2   15[COMRAM] PTR unsigned char 
  4578 ;;		 -> dados_data(18), dados_hora(18), dados_long(36), dados_lat(33), 
  4579 ;; Return value:  Size  Location     Type
  4580 ;;                  2   11[COMRAM] PTR unsigned char 
  4581 ;; Registers used:
  4582 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/1
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4588 ;;      Params:         4       0       0       0       0       0       0       0       0
  4589 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4590 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4591 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4592 ;;Total ram usage:        6 bytes
  4593 ;; Hardware stack levels used:    1
  4594 ;; Hardware stack levels required when called:    2
  4595 ;; This function calls:
  4596 ;;		Nothing
  4597 ;; This function is called by:
  4598 ;;		_verifica_dados_operacionais
  4599 ;; This function uses a non-reentrant model
  4600 ;;
  4601                           
  4602                           	psect	text15
  4603  00580C                     __ptext15:
  4604                           	callstack 0
  4605  00580C                     _strcpy:
  4606                           	callstack 26
  4607                           
  4608                           ;incstack = 0
  4609  00580C  C00C  F010         	movff	strcpy@to,strcpy@cp
  4610  005810  C00D  F011         	movff	strcpy@to+1,strcpy@cp+1
  4611  005814  D004               	goto	l13299
  4612  005816                     l13297:
  4613  005816  4A10               	infsnz	strcpy@cp^0,f,c
  4614  005818  2A11               	incf	(strcpy@cp+1)^0,f,c
  4615  00581A  4A0E               	infsnz	strcpy@from^0,f,c
  4616  00581C  2A0F               	incf	(strcpy@from+1)^0,f,c
  4617  00581E                     l13299:
  4618  00581E  C00E  FFD9         	movff	strcpy@from,fsr2l
  4619  005822  C00F  FFDA         	movff	strcpy@from+1,fsr2h
  4620  005826  C010  FFE1         	movff	strcpy@cp,fsr1l
  4621  00582A  C011  FFE2         	movff	strcpy@cp+1,fsr1h
  4622  00582E  CFDF FFE7          	movff	indf2,indf1
  4623  005832  50E7               	movf	indf1,w,c
  4624  005834  B4D8               	btfsc	status,2,c
  4625  005836  0012               	return	
  4626  005838  D7EE               	goto	l13297
  4627  00583A                     __end_of_strcpy:
  4628                           	callstack 0
  4629                           
  4630 ;; *************** function _rawhora *****************
  4631 ;; Defined at:
  4632 ;;		line 668 in file "bibliotecas/GPS.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;		None
  4635 ;; Auto vars:     Size  Location     Type
  4636 ;;		None
  4637 ;; Return value:  Size  Location     Type
  4638 ;;                  2    9[COMRAM] PTR unsigned char 
  4639 ;; Registers used:
  4640 ;;		wreg, status,2, status,0
  4641 ;; Tracked objects:
  4642 ;;		On entry : 0/1
  4643 ;;		On exit  : 0/0
  4644 ;;		Unchanged: 0/0
  4645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4646 ;;      Params:         2       0       0       0       0       0       0       0       0
  4647 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4648 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4649 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4650 ;;Total ram usage:        2 bytes
  4651 ;; Hardware stack levels used:    1
  4652 ;; Hardware stack levels required when called:    2
  4653 ;; This function calls:
  4654 ;;		Nothing
  4655 ;; This function is called by:
  4656 ;;		_verifica_dados_operacionais
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           	psect	text16
  4661  005C78                     __ptext16:
  4662                           	callstack 0
  4663  005C78                     _rawhora:
  4664                           	callstack 26
  4665                           
  4666                           ;GPS.c: 670: return rawTime;
  4667                           
  4668                           ;incstack = 0
  4669  005C78  0ECF               	movlw	low _rawTime
  4670  005C7A  6E0A               	movwf	?_rawhora^0,c
  4671  005C7C  0E01               	movlw	high _rawTime
  4672  005C7E  6E0B               	movwf	(?_rawhora+1)^0,c
  4673  005C80  0012               	return		;funcret
  4674  005C82                     __end_of_rawhora:
  4675                           	callstack 0
  4676                           
  4677 ;; *************** function _rawdata *****************
  4678 ;; Defined at:
  4679 ;;		line 673 in file "bibliotecas/GPS.c"
  4680 ;; Parameters:    Size  Location     Type
  4681 ;;		None
  4682 ;; Auto vars:     Size  Location     Type
  4683 ;;		None
  4684 ;; Return value:  Size  Location     Type
  4685 ;;                  2    9[COMRAM] PTR unsigned char 
  4686 ;; Registers used:
  4687 ;;		wreg, status,2, status,0
  4688 ;; Tracked objects:
  4689 ;;		On entry : 0/1
  4690 ;;		On exit  : 0/0
  4691 ;;		Unchanged: 0/0
  4692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4693 ;;      Params:         2       0       0       0       0       0       0       0       0
  4694 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4695 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4696 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4697 ;;Total ram usage:        2 bytes
  4698 ;; Hardware stack levels used:    1
  4699 ;; Hardware stack levels required when called:    2
  4700 ;; This function calls:
  4701 ;;		Nothing
  4702 ;; This function is called by:
  4703 ;;		_verifica_dados_operacionais
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           	psect	text17
  4708  005C82                     __ptext17:
  4709                           	callstack 0
  4710  005C82                     _rawdata:
  4711                           	callstack 26
  4712                           
  4713                           ;GPS.c: 675: return rawDate;
  4714                           
  4715                           ;incstack = 0
  4716  005C82  0EE8               	movlw	low _rawDate
  4717  005C84  6E0A               	movwf	?_rawdata^0,c
  4718  005C86  0E01               	movlw	high _rawDate
  4719  005C88  6E0B               	movwf	(?_rawdata+1)^0,c
  4720  005C8A  0012               	return		;funcret
  4721  005C8C                     __end_of_rawdata:
  4722                           	callstack 0
  4723                           
  4724 ;; *************** function _longitude *****************
  4725 ;; Defined at:
  4726 ;;		line 663 in file "bibliotecas/GPS.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;		None
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;		None
  4731 ;; Return value:  Size  Location     Type
  4732 ;;                  2    9[COMRAM] PTR unsigned char 
  4733 ;; Registers used:
  4734 ;;		wreg, status,2, status,0
  4735 ;; Tracked objects:
  4736 ;;		On entry : 0/1
  4737 ;;		On exit  : 0/0
  4738 ;;		Unchanged: 0/0
  4739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4740 ;;      Params:         2       0       0       0       0       0       0       0       0
  4741 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4742 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4743 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4744 ;;Total ram usage:        2 bytes
  4745 ;; Hardware stack levels used:    1
  4746 ;; Hardware stack levels required when called:    2
  4747 ;; This function calls:
  4748 ;;		Nothing
  4749 ;; This function is called by:
  4750 ;;		_verifica_dados_operacionais
  4751 ;; This function uses a non-reentrant model
  4752 ;;
  4753                           
  4754                           	psect	text18
  4755  005C8C                     __ptext18:
  4756                           	callstack 0
  4757  005C8C                     _longitude:
  4758                           	callstack 26
  4759                           
  4760                           ;GPS.c: 665: return rawLongitude;
  4761                           
  4762                           ;incstack = 0
  4763  005C8C  0EA3               	movlw	low _rawLongitude
  4764  005C8E  6E0A               	movwf	?_longitude^0,c
  4765  005C90  0E01               	movlw	high _rawLongitude
  4766  005C92  6E0B               	movwf	(?_longitude+1)^0,c
  4767  005C94  0012               	return		;funcret
  4768  005C96                     __end_of_longitude:
  4769                           	callstack 0
  4770                           
  4771 ;; *************** function _latitude *****************
  4772 ;; Defined at:
  4773 ;;		line 658 in file "bibliotecas/GPS.c"
  4774 ;; Parameters:    Size  Location     Type
  4775 ;;		None
  4776 ;; Auto vars:     Size  Location     Type
  4777 ;;		None
  4778 ;; Return value:  Size  Location     Type
  4779 ;;                  2    9[COMRAM] PTR unsigned char 
  4780 ;; Registers used:
  4781 ;;		wreg, status,2, status,0
  4782 ;; Tracked objects:
  4783 ;;		On entry : 3F/1
  4784 ;;		On exit  : 3F/1
  4785 ;;		Unchanged: 3F/0
  4786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4787 ;;      Params:         2       0       0       0       0       0       0       0       0
  4788 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4789 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4790 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4791 ;;Total ram usage:        2 bytes
  4792 ;; Hardware stack levels used:    1
  4793 ;; Hardware stack levels required when called:    2
  4794 ;; This function calls:
  4795 ;;		Nothing
  4796 ;; This function is called by:
  4797 ;;		_verifica_dados_operacionais
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801                           	psect	text19
  4802  005C96                     __ptext19:
  4803                           	callstack 0
  4804  005C96                     _latitude:
  4805                           	callstack 26
  4806                           
  4807                           ; BSR set to: 1
  4808                           ;GPS.c: 660: return rawLatitude;
  4809                           
  4810                           ;incstack = 0
  4811  005C96  0EBC               	movlw	low _rawLatitude
  4812  005C98  6E0A               	movwf	?_latitude^0,c
  4813  005C9A  0E01               	movlw	high _rawLatitude
  4814  005C9C  6E0B               	movwf	(?_latitude+1)^0,c
  4815                           
  4816                           ; BSR set to: 1
  4817  005C9E  0012               	return		;funcret
  4818  005CA0                     __end_of_latitude:
  4819                           	callstack 0
  4820                           
  4821 ;; *************** function ___fttol *****************
  4822 ;; Defined at:
  4823 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\fttol.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;  f1              3   42[COMRAM] float 
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;  lval            4   52[COMRAM] unsigned long 
  4828 ;;  exp1            1   56[COMRAM] unsigned char 
  4829 ;;  sign1           1   51[COMRAM] unsigned char 
  4830 ;; Return value:  Size  Location     Type
  4831 ;;                  4   42[COMRAM] long 
  4832 ;; Registers used:
  4833 ;;		wreg, status,2, status,0
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4839 ;;      Params:         4       0       0       0       0       0       0       0       0
  4840 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4841 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4842 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4843 ;;Total ram usage:       15 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    2
  4846 ;; This function calls:
  4847 ;;		Nothing
  4848 ;; This function is called by:
  4849 ;;		_verifica_dados_operacionais
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           	psect	text20
  4854  003FF4                     __ptext20:
  4855                           	callstack 0
  4856  003FF4                     ___fttol:
  4857                           	callstack 26
  4858                           
  4859                           ; BSR set to: 1
  4860                           ;incstack = 0
  4861  003FF4  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4862  003FF8  6A30               	clrf	(??___fttol+1)^0,c
  4863  003FFA  6A31               	clrf	(??___fttol+2)^0,c
  4864  003FFC  342C               	rlcf	(___fttol@f1+1)^0,w,c
  4865  003FFE  362F               	rlcf	??___fttol^0,f,c
  4866  004000  E301               	bnc	u10561
  4867  004002  8030               	bsf	(??___fttol+1)^0,0,c
  4868  004004                     u10561:
  4869  004004  502F               	movf	??___fttol^0,w,c
  4870  004006  6E39               	movwf	___fttol@exp1^0,c
  4871  004008  5039               	movf	___fttol@exp1^0,w,c
  4872  00400A  A4D8               	btfss	status,2,c
  4873  00400C  D009               	goto	l9601
  4874  00400E                     u10570:
  4875  00400E  0E00               	movlw	0
  4876  004010  6E2B               	movwf	?___fttol^0,c
  4877  004012  0E00               	movlw	0
  4878  004014  6E2C               	movwf	(?___fttol+1)^0,c
  4879  004016  0E00               	movlw	0
  4880  004018  6E2D               	movwf	(?___fttol+2)^0,c
  4881  00401A  0E00               	movlw	0
  4882  00401C  6E2E               	movwf	(?___fttol+3)^0,c
  4883  00401E  0012               	return	
  4884  004020                     l9601:
  4885  004020  0E17               	movlw	23
  4886  004022  6E2F               	movwf	??___fttol^0,c
  4887  004024  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4888  004028  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4889  00402C  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4890  004030  282F               	incf	??___fttol^0,w,c
  4891  004032  6E33               	movwf	(??___fttol+4)^0,c
  4892  004034  D004               	goto	u10580
  4893  004036                     u10585:
  4894  004036  90D8               	bcf	status,0,c
  4895  004038  3232               	rrcf	(??___fttol+3)^0,f,c
  4896  00403A  3231               	rrcf	(??___fttol+2)^0,f,c
  4897  00403C  3230               	rrcf	(??___fttol+1)^0,f,c
  4898  00403E                     u10580:
  4899  00403E  2E33               	decfsz	(??___fttol+4)^0,f,c
  4900  004040  D7FA               	goto	u10585
  4901  004042  5030               	movf	(??___fttol+1)^0,w,c
  4902  004044  6E34               	movwf	___fttol@sign1^0,c
  4903  004046  8E2C               	bsf	(___fttol@f1+1)^0,7,c
  4904  004048  0EFF               	movlw	255
  4905  00404A  162B               	andwf	___fttol@f1^0,f,c
  4906  00404C  0EFF               	movlw	255
  4907  00404E  162C               	andwf	(___fttol@f1+1)^0,f,c
  4908  004050  0E00               	movlw	0
  4909  004052  162D               	andwf	(___fttol@f1+2)^0,f,c
  4910  004054  502B               	movf	___fttol@f1^0,w,c
  4911  004056  6E35               	movwf	___fttol@lval^0,c
  4912  004058  502C               	movf	(___fttol@f1+1)^0,w,c
  4913  00405A  6E36               	movwf	(___fttol@lval+1)^0,c
  4914  00405C  502D               	movf	(___fttol@f1+2)^0,w,c
  4915  00405E  6E37               	movwf	(___fttol@lval+2)^0,c
  4916  004060  6A38               	clrf	(___fttol@lval+3)^0,c
  4917  004062  0E8E               	movlw	142
  4918  004064  5E39               	subwf	___fttol@exp1^0,f,c
  4919  004066  AE39               	btfss	___fttol@exp1^0,7,c
  4920  004068  D00D               	goto	l9623
  4921  00406A  5039               	movf	___fttol@exp1^0,w,c
  4922  00406C  0A80               	xorlw	128
  4923  00406E  0F8F               	addlw	143
  4924  004070  A0D8               	btfss	status,0,c
  4925  004072  D7CD               	goto	u10570
  4926  004074                     l9619:
  4927  004074  90D8               	bcf	status,0,c
  4928  004076  3238               	rrcf	(___fttol@lval+3)^0,f,c
  4929  004078  3237               	rrcf	(___fttol@lval+2)^0,f,c
  4930  00407A  3236               	rrcf	(___fttol@lval+1)^0,f,c
  4931  00407C  3235               	rrcf	___fttol@lval^0,f,c
  4932  00407E  3E39               	incfsz	___fttol@exp1^0,f,c
  4933  004080  D7F9               	goto	l9619
  4934  004082  D00D               	goto	u10620
  4935  004084                     l9623:
  4936  004084  0E17               	movlw	23
  4937  004086  6439               	cpfsgt	___fttol@exp1^0,c
  4938  004088  D007               	goto	l9631
  4939  00408A  D7C1               	goto	u10570
  4940  00408C                     l9629:
  4941  00408C  90D8               	bcf	status,0,c
  4942  00408E  3635               	rlcf	___fttol@lval^0,f,c
  4943  004090  3636               	rlcf	(___fttol@lval+1)^0,f,c
  4944  004092  3637               	rlcf	(___fttol@lval+2)^0,f,c
  4945  004094  3638               	rlcf	(___fttol@lval+3)^0,f,c
  4946  004096  0639               	decf	___fttol@exp1^0,f,c
  4947  004098                     l9631:
  4948  004098  5039               	movf	___fttol@exp1^0,w,c
  4949  00409A  A4D8               	btfss	status,2,c
  4950  00409C  D7F7               	goto	l9629
  4951  00409E                     u10620:
  4952  00409E  5034               	movf	___fttol@sign1^0,w,c
  4953  0040A0  B4D8               	btfsc	status,2,c
  4954  0040A2  D008               	goto	l9637
  4955  0040A4  1E38               	comf	(___fttol@lval+3)^0,f,c
  4956  0040A6  1E37               	comf	(___fttol@lval+2)^0,f,c
  4957  0040A8  1E36               	comf	(___fttol@lval+1)^0,f,c
  4958  0040AA  6C35               	negf	___fttol@lval^0,c
  4959  0040AC  0E00               	movlw	0
  4960  0040AE  2236               	addwfc	(___fttol@lval+1)^0,f,c
  4961  0040B0  2237               	addwfc	(___fttol@lval+2)^0,f,c
  4962  0040B2  2238               	addwfc	(___fttol@lval+3)^0,f,c
  4963  0040B4                     l9637:
  4964  0040B4  C035  F02B         	movff	___fttol@lval,?___fttol
  4965  0040B8  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4966  0040BC  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4967  0040C0  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4968  0040C4  0012               	return		;funcret
  4969  0040C6                     __end_of___fttol:
  4970                           	callstack 0
  4971                           
  4972 ;; *************** function ___ftmul *****************
  4973 ;; Defined at:
  4974 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\ftmul.c"
  4975 ;; Parameters:    Size  Location     Type
  4976 ;;  f1              3   27[COMRAM] float 
  4977 ;;  f2              3   30[COMRAM] float 
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;  f3_as_produc    3   37[COMRAM] unsigned um
  4980 ;;  sign            1   41[COMRAM] unsigned char 
  4981 ;;  cntr            1   40[COMRAM] unsigned char 
  4982 ;;  exp             1   36[COMRAM] unsigned char 
  4983 ;; Return value:  Size  Location     Type
  4984 ;;                  3   27[COMRAM] float 
  4985 ;; Registers used:
  4986 ;;		wreg, status,2, status,0, cstack
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4992 ;;      Params:         6       0       0       0       0       0       0       0       0
  4993 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4994 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4995 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4996 ;;Total ram usage:       15 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; Hardware stack levels required when called:    3
  4999 ;; This function calls:
  5000 ;;		___ftpack
  5001 ;; This function is called by:
  5002 ;;		_verifica_dados_operacionais
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           	psect	text21
  5007  003D2C                     __ptext21:
  5008                           	callstack 0
  5009  003D2C                     ___ftmul:
  5010                           	callstack 25
  5011                           
  5012                           ;incstack = 0
  5013  003D2C  C01E  F022         	movff	___ftmul@f1+2,??___ftmul
  5014  003D30  6A23               	clrf	(??___ftmul+1)^0,c
  5015  003D32  6A24               	clrf	(??___ftmul+2)^0,c
  5016  003D34  341D               	rlcf	(___ftmul@f1+1)^0,w,c
  5017  003D36  3622               	rlcf	??___ftmul^0,f,c
  5018  003D38  E301               	bnc	u10491
  5019  003D3A  8023               	bsf	(??___ftmul+1)^0,0,c
  5020  003D3C                     u10491:
  5021  003D3C  5022               	movf	??___ftmul^0,w,c
  5022  003D3E  6E25               	movwf	___ftmul@exp^0,c
  5023  003D40  5025               	movf	___ftmul@exp^0,w,c
  5024  003D42  A4D8               	btfss	status,2,c
  5025  003D44  D007               	goto	l9541
  5026  003D46  0E00               	movlw	0
  5027  003D48  6E1C               	movwf	?___ftmul^0,c
  5028  003D4A  0E00               	movlw	0
  5029  003D4C  6E1D               	movwf	(?___ftmul+1)^0,c
  5030  003D4E  0E00               	movlw	0
  5031  003D50  6E1E               	movwf	(?___ftmul+2)^0,c
  5032  003D52  0012               	return	
  5033  003D54                     l9541:
  5034  003D54  C021  F022         	movff	___ftmul@f2+2,??___ftmul
  5035  003D58  6A23               	clrf	(??___ftmul+1)^0,c
  5036  003D5A  6A24               	clrf	(??___ftmul+2)^0,c
  5037  003D5C  3420               	rlcf	(___ftmul@f2+1)^0,w,c
  5038  003D5E  3622               	rlcf	??___ftmul^0,f,c
  5039  003D60  E301               	bnc	u10511
  5040  003D62  8023               	bsf	(??___ftmul+1)^0,0,c
  5041  003D64                     u10511:
  5042  003D64  5022               	movf	??___ftmul^0,w,c
  5043  003D66  6E2A               	movwf	___ftmul@sign^0,c
  5044  003D68  502A               	movf	___ftmul@sign^0,w,c
  5045  003D6A  A4D8               	btfss	status,2,c
  5046  003D6C  D007               	goto	l9547
  5047  003D6E  0E00               	movlw	0
  5048  003D70  6E1C               	movwf	?___ftmul^0,c
  5049  003D72  0E00               	movlw	0
  5050  003D74  6E1D               	movwf	(?___ftmul+1)^0,c
  5051  003D76  0E00               	movlw	0
  5052  003D78  6E1E               	movwf	(?___ftmul+2)^0,c
  5053  003D7A  0012               	return	
  5054  003D7C                     l9547:
  5055  003D7C  502A               	movf	___ftmul@sign^0,w,c
  5056  003D7E  0F7B               	addlw	123
  5057  003D80  2625               	addwf	___ftmul@exp^0,f,c
  5058  003D82  C01E  F02A         	movff	___ftmul@f1+2,___ftmul@sign
  5059  003D86  5021               	movf	(___ftmul@f2+2)^0,w,c
  5060  003D88  1A2A               	xorwf	___ftmul@sign^0,f,c
  5061  003D8A  0E80               	movlw	128
  5062  003D8C  162A               	andwf	___ftmul@sign^0,f,c
  5063  003D8E  8E1D               	bsf	(___ftmul@f1+1)^0,7,c
  5064  003D90  8E20               	bsf	(___ftmul@f2+1)^0,7,c
  5065  003D92  0EFF               	movlw	255
  5066  003D94  161F               	andwf	___ftmul@f2^0,f,c
  5067  003D96  0EFF               	movlw	255
  5068  003D98  1620               	andwf	(___ftmul@f2+1)^0,f,c
  5069  003D9A  0E00               	movlw	0
  5070  003D9C  1621               	andwf	(___ftmul@f2+2)^0,f,c
  5071  003D9E  0E00               	movlw	0
  5072  003DA0  6E26               	movwf	___ftmul@f3_as_product^0,c
  5073  003DA2  0E00               	movlw	0
  5074  003DA4  6E27               	movwf	(___ftmul@f3_as_product+1)^0,c
  5075  003DA6  0E00               	movlw	0
  5076  003DA8  6E28               	movwf	(___ftmul@f3_as_product+2)^0,c
  5077  003DAA  0E07               	movlw	7
  5078  003DAC  6E29               	movwf	___ftmul@cntr^0,c
  5079  003DAE                     l9561:
  5080  003DAE  A01C               	btfss	___ftmul@f1^0,0,c
  5081  003DB0  D006               	goto	l9565
  5082  003DB2  501F               	movf	___ftmul@f2^0,w,c
  5083  003DB4  2626               	addwf	___ftmul@f3_as_product^0,f,c
  5084  003DB6  5020               	movf	(___ftmul@f2+1)^0,w,c
  5085  003DB8  2227               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  5086  003DBA  5021               	movf	(___ftmul@f2+2)^0,w,c
  5087  003DBC  2228               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  5088  003DBE                     l9565:
  5089  003DBE  90D8               	bcf	status,0,c
  5090  003DC0  321E               	rrcf	(___ftmul@f1+2)^0,f,c
  5091  003DC2  321D               	rrcf	(___ftmul@f1+1)^0,f,c
  5092  003DC4  321C               	rrcf	___ftmul@f1^0,f,c
  5093  003DC6  90D8               	bcf	status,0,c
  5094  003DC8  361F               	rlcf	___ftmul@f2^0,f,c
  5095  003DCA  3620               	rlcf	(___ftmul@f2+1)^0,f,c
  5096  003DCC  3621               	rlcf	(___ftmul@f2+2)^0,f,c
  5097  003DCE  2E29               	decfsz	___ftmul@cntr^0,f,c
  5098  003DD0  D7EE               	goto	l9561
  5099  003DD2  0E09               	movlw	9
  5100  003DD4  6E29               	movwf	___ftmul@cntr^0,c
  5101  003DD6                     l9571:
  5102  003DD6  A01C               	btfss	___ftmul@f1^0,0,c
  5103  003DD8  D006               	goto	l9575
  5104  003DDA  501F               	movf	___ftmul@f2^0,w,c
  5105  003DDC  2626               	addwf	___ftmul@f3_as_product^0,f,c
  5106  003DDE  5020               	movf	(___ftmul@f2+1)^0,w,c
  5107  003DE0  2227               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  5108  003DE2  5021               	movf	(___ftmul@f2+2)^0,w,c
  5109  003DE4  2228               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  5110  003DE6                     l9575:
  5111  003DE6  90D8               	bcf	status,0,c
  5112  003DE8  321E               	rrcf	(___ftmul@f1+2)^0,f,c
  5113  003DEA  321D               	rrcf	(___ftmul@f1+1)^0,f,c
  5114  003DEC  321C               	rrcf	___ftmul@f1^0,f,c
  5115  003DEE  90D8               	bcf	status,0,c
  5116  003DF0  3228               	rrcf	(___ftmul@f3_as_product+2)^0,f,c
  5117  003DF2  3227               	rrcf	(___ftmul@f3_as_product+1)^0,f,c
  5118  003DF4  3226               	rrcf	___ftmul@f3_as_product^0,f,c
  5119  003DF6  2E29               	decfsz	___ftmul@cntr^0,f,c
  5120  003DF8  D7EE               	goto	l9571
  5121  003DFA  C026  F00A         	movff	___ftmul@f3_as_product,___ftpack@arg
  5122  003DFE  C027  F00B         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5123  003E02  C028  F00C         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5124  003E06  C025  F00D         	movff	___ftmul@exp,___ftpack@exp
  5125  003E0A  C02A  F00E         	movff	___ftmul@sign,___ftpack@sign
  5126  003E0E  EC8B  F021         	call	___ftpack	;wreg free
  5127  003E12  C00A  F01C         	movff	?___ftpack,?___ftmul
  5128  003E16  C00B  F01D         	movff	?___ftpack+1,?___ftmul+1
  5129  003E1A  C00C  F01E         	movff	?___ftpack+2,?___ftmul+2
  5130  003E1E  0012               	return		;funcret
  5131  003E20                     __end_of___ftmul:
  5132                           	callstack 0
  5133                           
  5134 ;; *************** function ___awtoft *****************
  5135 ;; Defined at:
  5136 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\awtoft.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;  c               2   23[COMRAM] int 
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;  sign            1   26[COMRAM] unsigned char 
  5141 ;; Return value:  Size  Location     Type
  5142 ;;                  3   23[COMRAM] float 
  5143 ;; Registers used:
  5144 ;;		wreg, status,2, status,0, cstack
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5150 ;;      Params:         3       0       0       0       0       0       0       0       0
  5151 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5152 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5153 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5154 ;;Total ram usage:        4 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    3
  5157 ;; This function calls:
  5158 ;;		___ftpack
  5159 ;; This function is called by:
  5160 ;;		_verifica_dados_operacionais
  5161 ;; This function uses a non-reentrant model
  5162 ;;
  5163                           
  5164                           	psect	text22
  5165  0056AA                     __ptext22:
  5166                           	callstack 0
  5167  0056AA                     ___awtoft:
  5168                           	callstack 25
  5169                           
  5170                           ;incstack = 0
  5171  0056AA  0E00               	movlw	0
  5172  0056AC  6E1B               	movwf	___awtoft@sign^0,c
  5173  0056AE  AE19               	btfss	(___awtoft@c+1)^0,7,c
  5174  0056B0  D006               	goto	l9591
  5175  0056B2  6C18               	negf	___awtoft@c^0,c
  5176  0056B4  1E19               	comf	(___awtoft@c+1)^0,f,c
  5177  0056B6  B0D8               	btfsc	status,0,c
  5178  0056B8  2A19               	incf	(___awtoft@c+1)^0,f,c
  5179  0056BA  0E01               	movlw	1
  5180  0056BC  6E1B               	movwf	___awtoft@sign^0,c
  5181  0056BE                     l9591:
  5182  0056BE  C018  F00A         	movff	___awtoft@c,___ftpack@arg
  5183  0056C2  C019  F00B         	movff	___awtoft@c+1,___ftpack@arg+1
  5184  0056C6  6A0C               	clrf	(___ftpack@arg+2)^0,c
  5185  0056C8  0E8E               	movlw	142
  5186  0056CA  6E0D               	movwf	___ftpack@exp^0,c
  5187  0056CC  C01B  F00E         	movff	___awtoft@sign,___ftpack@sign
  5188  0056D0  EC8B  F021         	call	___ftpack	;wreg free
  5189  0056D4  C00A  F018         	movff	?___ftpack,?___awtoft
  5190  0056D8  C00B  F019         	movff	?___ftpack+1,?___awtoft+1
  5191  0056DC  C00C  F01A         	movff	?___ftpack+2,?___awtoft+2
  5192  0056E0  0012               	return		;funcret
  5193  0056E2                     __end_of___awtoft:
  5194                           	callstack 0
  5195                           
  5196 ;; *************** function ___ftpack *****************
  5197 ;; Defined at:
  5198 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\float.c"
  5199 ;; Parameters:    Size  Location     Type
  5200 ;;  arg             3    9[COMRAM] unsigned um
  5201 ;;  exp             1   12[COMRAM] unsigned char 
  5202 ;;  sign            1   13[COMRAM] unsigned char 
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;		None
  5205 ;; Return value:  Size  Location     Type
  5206 ;;                  3    9[COMRAM] float 
  5207 ;; Registers used:
  5208 ;;		wreg, status,2, status,0
  5209 ;; Tracked objects:
  5210 ;;		On entry : 0/0
  5211 ;;		On exit  : 0/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5214 ;;      Params:         5       0       0       0       0       0       0       0       0
  5215 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5216 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5217 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5218 ;;Total ram usage:        8 bytes
  5219 ;; Hardware stack levels used:    1
  5220 ;; Hardware stack levels required when called:    2
  5221 ;; This function calls:
  5222 ;;		Nothing
  5223 ;; This function is called by:
  5224 ;;		___awtoft
  5225 ;;		___ftmul
  5226 ;; This function uses a non-reentrant model
  5227 ;;
  5228                           
  5229                           	psect	text23
  5230  004316                     __ptext23:
  5231                           	callstack 0
  5232  004316                     ___ftpack:
  5233                           	callstack 25
  5234                           
  5235                           ;incstack = 0
  5236  004316  500D               	movf	___ftpack@exp^0,w,c
  5237  004318  B4D8               	btfsc	status,2,c
  5238  00431A  D005               	goto	u10110
  5239  00431C  500A               	movf	___ftpack@arg^0,w,c
  5240  00431E  100B               	iorwf	(___ftpack@arg+1)^0,w,c
  5241  004320  100C               	iorwf	(___ftpack@arg+2)^0,w,c
  5242  004322  A4D8               	btfss	status,2,c
  5243  004324  D00C               	goto	l9321
  5244  004326                     u10110:
  5245  004326  0E00               	movlw	0
  5246  004328  6E0A               	movwf	?___ftpack^0,c
  5247  00432A  0E00               	movlw	0
  5248  00432C  6E0B               	movwf	(?___ftpack+1)^0,c
  5249  00432E  0E00               	movlw	0
  5250  004330  6E0C               	movwf	(?___ftpack+2)^0,c
  5251  004332  0012               	return	
  5252  004334                     l9319:
  5253  004334  2A0D               	incf	___ftpack@exp^0,f,c
  5254  004336  90D8               	bcf	status,0,c
  5255  004338  320C               	rrcf	(___ftpack@arg+2)^0,f,c
  5256  00433A  320B               	rrcf	(___ftpack@arg+1)^0,f,c
  5257  00433C  320A               	rrcf	___ftpack@arg^0,f,c
  5258  00433E                     l9321:
  5259  00433E  0E00               	movlw	0
  5260  004340  140A               	andwf	___ftpack@arg^0,w,c
  5261  004342  6E0F               	movwf	??___ftpack^0,c
  5262  004344  0E00               	movlw	0
  5263  004346  140B               	andwf	(___ftpack@arg+1)^0,w,c
  5264  004348  6E10               	movwf	(??___ftpack+1)^0,c
  5265  00434A  0EFE               	movlw	254
  5266  00434C  140C               	andwf	(___ftpack@arg+2)^0,w,c
  5267  00434E  6E11               	movwf	(??___ftpack+2)^0,c
  5268  004350  500F               	movf	??___ftpack^0,w,c
  5269  004352  1010               	iorwf	(??___ftpack+1)^0,w,c
  5270  004354  1011               	iorwf	(??___ftpack+2)^0,w,c
  5271  004356  B4D8               	btfsc	status,2,c
  5272  004358  D00C               	goto	l9327
  5273  00435A  D7EC               	goto	l9319
  5274  00435C                     l9323:
  5275  00435C  2A0D               	incf	___ftpack@exp^0,f,c
  5276  00435E  0E01               	movlw	1
  5277  004360  260A               	addwf	___ftpack@arg^0,f,c
  5278  004362  0E00               	movlw	0
  5279  004364  220B               	addwfc	(___ftpack@arg+1)^0,f,c
  5280  004366  0E00               	movlw	0
  5281  004368  220C               	addwfc	(___ftpack@arg+2)^0,f,c
  5282  00436A  90D8               	bcf	status,0,c
  5283  00436C  320C               	rrcf	(___ftpack@arg+2)^0,f,c
  5284  00436E  320B               	rrcf	(___ftpack@arg+1)^0,f,c
  5285  004370  320A               	rrcf	___ftpack@arg^0,f,c
  5286  004372                     l9327:
  5287  004372  0E00               	movlw	0
  5288  004374  140A               	andwf	___ftpack@arg^0,w,c
  5289  004376  6E0F               	movwf	??___ftpack^0,c
  5290  004378  0E00               	movlw	0
  5291  00437A  140B               	andwf	(___ftpack@arg+1)^0,w,c
  5292  00437C  6E10               	movwf	(??___ftpack+1)^0,c
  5293  00437E  0EFF               	movlw	255
  5294  004380  140C               	andwf	(___ftpack@arg+2)^0,w,c
  5295  004382  6E11               	movwf	(??___ftpack+2)^0,c
  5296  004384  500F               	movf	??___ftpack^0,w,c
  5297  004386  1010               	iorwf	(??___ftpack+1)^0,w,c
  5298  004388  1011               	iorwf	(??___ftpack+2)^0,w,c
  5299  00438A  B4D8               	btfsc	status,2,c
  5300  00438C  D006               	goto	l9331
  5301  00438E  D7E6               	goto	l9323
  5302  004390                     l9329:
  5303  004390  060D               	decf	___ftpack@exp^0,f,c
  5304  004392  90D8               	bcf	status,0,c
  5305  004394  360A               	rlcf	___ftpack@arg^0,f,c
  5306  004396  360B               	rlcf	(___ftpack@arg+1)^0,f,c
  5307  004398  360C               	rlcf	(___ftpack@arg+2)^0,f,c
  5308  00439A                     l9331:
  5309  00439A  BE0B               	btfsc	(___ftpack@arg+1)^0,7,c
  5310  00439C  D003               	goto	u10150
  5311  00439E  0E02               	movlw	2
  5312  0043A0  600D               	cpfslt	___ftpack@exp^0,c
  5313  0043A2  D7F6               	goto	l9329
  5314  0043A4                     u10150:
  5315  0043A4  A00D               	btfss	___ftpack@exp^0,0,c
  5316  0043A6  9E0B               	bcf	(___ftpack@arg+1)^0,7,c
  5317  0043A8  90D8               	bcf	status,0,c
  5318  0043AA  320D               	rrcf	___ftpack@exp^0,f,c
  5319  0043AC  500D               	movf	___ftpack@exp^0,w,c
  5320  0043AE  120C               	iorwf	(___ftpack@arg+2)^0,f,c
  5321  0043B0  500E               	movf	___ftpack@sign^0,w,c
  5322  0043B2  A4D8               	btfss	status,2,c
  5323  0043B4  8E0C               	bsf	(___ftpack@arg+2)^0,7,c
  5324  0043B6  C00A  F00A         	movff	___ftpack@arg,?___ftpack
  5325  0043BA  C00B  F00B         	movff	___ftpack@arg+1,?___ftpack+1
  5326  0043BE  C00C  F00C         	movff	___ftpack@arg+2,?___ftpack+2
  5327  0043C2  0012               	return		;funcret
  5328  0043C4                     __end_of___ftpack:
  5329                           	callstack 0
  5330                           
  5331 ;; *************** function _Speed *****************
  5332 ;; Defined at:
  5333 ;;		line 685 in file "bibliotecas/GPS.c"
  5334 ;; Parameters:    Size  Location     Type
  5335 ;;		None
  5336 ;; Auto vars:     Size  Location     Type
  5337 ;;		None
  5338 ;; Return value:  Size  Location     Type
  5339 ;;                  2    9[COMRAM] PTR unsigned char 
  5340 ;; Registers used:
  5341 ;;		wreg, status,2, status,0
  5342 ;; Tracked objects:
  5343 ;;		On entry : 3F/0
  5344 ;;		On exit  : 3F/0
  5345 ;;		Unchanged: 3F/0
  5346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5347 ;;      Params:         2       0       0       0       0       0       0       0       0
  5348 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5349 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5350 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5351 ;;Total ram usage:        2 bytes
  5352 ;; Hardware stack levels used:    1
  5353 ;; Hardware stack levels required when called:    2
  5354 ;; This function calls:
  5355 ;;		Nothing
  5356 ;; This function is called by:
  5357 ;;		_verifica_dados_operacionais
  5358 ;; This function uses a non-reentrant model
  5359 ;;
  5360                           
  5361                           	psect	text24
  5362  005CA0                     __ptext24:
  5363                           	callstack 0
  5364  005CA0                     _Speed:
  5365                           	callstack 26
  5366                           
  5367                           ; BSR set to: 0
  5368                           ;GPS.c: 687: return rawSpeed;
  5369                           
  5370                           ;incstack = 0
  5371  005CA0  0E6A               	movlw	low _rawSpeed
  5372  005CA2  6E0A               	movwf	?_Speed^0,c
  5373  005CA4  0E02               	movlw	high _rawSpeed
  5374  005CA6  6E0B               	movwf	(?_Speed+1)^0,c
  5375                           
  5376                           ; BSR set to: 0
  5377  005CA8  0012               	return		;funcret
  5378  005CAA                     __end_of_Speed:
  5379                           	callstack 0
  5380                           
  5381 ;; *************** function _mostra_dados_display *****************
  5382 ;; Defined at:
  5383 ;;		line 691 in file "bibliotecas/GPS.c"
  5384 ;; Parameters:    Size  Location     Type
  5385 ;;		None
  5386 ;; Auto vars:     Size  Location     Type
  5387 ;;		None
  5388 ;; Return value:  Size  Location     Type
  5389 ;;                  1    wreg      void 
  5390 ;; Registers used:
  5391 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5392 ;; Tracked objects:
  5393 ;;		On entry : 0/1
  5394 ;;		On exit  : 0/0
  5395 ;;		Unchanged: 0/0
  5396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5397 ;;      Params:         0       0       0       0       0       0       0       0       0
  5398 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5399 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5400 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5401 ;;Total ram usage:        0 bytes
  5402 ;; Hardware stack levels used:    1
  5403 ;; Hardware stack levels required when called:    5
  5404 ;; This function calls:
  5405 ;;		_escreve_frase_ram_lcd
  5406 ;;		_posicao_cursor_lcd
  5407 ;; This function is called by:
  5408 ;;		_troca_de_tela
  5409 ;; This function uses a non-reentrant model
  5410 ;;
  5411                           
  5412                           	psect	text25
  5413  00583A                     __ptext25:
  5414                           	callstack 0
  5415  00583A                     _mostra_dados_display:
  5416                           	callstack 23
  5417                           
  5418                           ;GPS.c: 693: posicao_cursor_lcd(1,4);
  5419                           
  5420                           ; BSR set to: 0
  5421                           ;incstack = 0
  5422  00583A  0E04               	movlw	4
  5423  00583C  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  5424  00583E  0E01               	movlw	1
  5425  005840  EC80  F027         	call	_posicao_cursor_lcd
  5426                           
  5427                           ;GPS.c: 694: escreve_frase_ram_lcd(rawLatitude);
  5428  005844  0EBC               	movlw	low _rawLatitude
  5429  005846  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  5430  005848  0E01               	movlw	high _rawLatitude
  5431  00584A  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  5432  00584C  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  5433                           
  5434                           ;GPS.c: 695: posicao_cursor_lcd(2,4);
  5435  005850  0E04               	movlw	4
  5436  005852  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  5437  005854  0E02               	movlw	2
  5438  005856  EC80  F027         	call	_posicao_cursor_lcd
  5439                           
  5440                           ;GPS.c: 696: escreve_frase_ram_lcd(rawLongitude);
  5441  00585A  0EA3               	movlw	low _rawLongitude
  5442  00585C  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  5443  00585E  0E01               	movlw	high _rawLongitude
  5444  005860  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  5445  005862  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  5446  005866  0012               	return		;funcret
  5447  005868                     __end_of_mostra_dados_display:
  5448                           	callstack 0
  5449                           
  5450 ;; *************** function _escreve_inteiro_lcd *****************
  5451 ;; Defined at:
  5452 ;;		line 376 in file "bibliotecas/display_lcd.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;  valor           4   42[COMRAM] long 
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;  texto           7   46[COMRAM] unsigned char [7]
  5457 ;; Return value:  Size  Location     Type
  5458 ;;                  1    wreg      void 
  5459 ;; Registers used:
  5460 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/1
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5466 ;;      Params:         4       0       0       0       0       0       0       0       0
  5467 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5468 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5469 ;;      Totals:        11       0       0       0       0       0       0       0       0
  5470 ;;Total ram usage:       11 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:    5
  5473 ;; This function calls:
  5474 ;;		_escreve_frase_ram_lcd
  5475 ;;		_ltoa
  5476 ;; This function is called by:
  5477 ;;		_troca_de_tela
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           	psect	text26
  5482  0055F6                     __ptext26:
  5483                           	callstack 0
  5484  0055F6                     _escreve_inteiro_lcd:
  5485                           	callstack 23
  5486                           
  5487                           ;display_lcd.c: 378: char texto[7] = "000000";
  5488                           
  5489                           ;incstack = 0
  5490  0055F6  EE21  F0F7         	lfsr	2,escreve_inteiro_lcd@F3223
  5491  0055FA  EE10  F02F         	lfsr	1,escreve_inteiro_lcd@texto
  5492  0055FE  0E06               	movlw	6
  5493  005600                     u16021:
  5494  005600  CFDB FFE3          	movff	plusw2,plusw1
  5495  005604  06E8               	decf	wreg,f,c
  5496  005606  E2FC               	bc	u16021
  5497                           
  5498                           ;display_lcd.c: 379: ltoa(texto,valor, 10);
  5499  005608  0E2F               	movlw	low escreve_inteiro_lcd@texto
  5500  00560A  6E23               	movwf	ltoa@buf^0,c
  5501  00560C  C02B  F024         	movff	escreve_inteiro_lcd@valor,ltoa@val
  5502  005610  C02C  F025         	movff	escreve_inteiro_lcd@valor+1,ltoa@val+1
  5503  005614  C02D  F026         	movff	escreve_inteiro_lcd@valor+2,ltoa@val+2
  5504  005618  C02E  F027         	movff	escreve_inteiro_lcd@valor+3,ltoa@val+3
  5505  00561C  0E00               	movlw	0
  5506  00561E  6E29               	movwf	(ltoa@base+1)^0,c
  5507  005620  0E0A               	movlw	10
  5508  005622  6E28               	movwf	ltoa@base^0,c
  5509  005624  EC57  F02A         	call	_ltoa	;wreg free
  5510                           
  5511                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
  5512  005628  0E2F               	movlw	low escreve_inteiro_lcd@texto
  5513  00562A  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
  5514  00562C  6A0E               	clrf	(escreve_frase_ram_lcd@buffer+1)^0,c
  5515  00562E  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
  5516  005632  0012               	return		;funcret
  5517  005634                     __end_of_escreve_inteiro_lcd:
  5518                           	callstack 0
  5519                           
  5520 ;; *************** function _ltoa *****************
  5521 ;; Defined at:
  5522 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\ltoa.c"
  5523 ;; Parameters:    Size  Location     Type
  5524 ;;  buf             1   34[COMRAM] PTR unsigned char 
  5525 ;;		 -> escreve_inteiro_lcd@texto(7), 
  5526 ;;  val             4   35[COMRAM] long 
  5527 ;;  base            2   39[COMRAM] int 
  5528 ;; Auto vars:     Size  Location     Type
  5529 ;;  cp              1    0        PTR unsigned char 
  5530 ;;		 -> escreve_inteiro_lcd@texto(7), 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  1    wreg      PTR unsigned char 
  5533 ;; Registers used:
  5534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/1
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5540 ;;      Params:         7       0       0       0       0       0       0       0       0
  5541 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5542 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5543 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5544 ;;Total ram usage:        8 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:    4
  5547 ;; This function calls:
  5548 ;;		_ultoa
  5549 ;; This function is called by:
  5550 ;;		_escreve_inteiro_lcd
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           	psect	text27
  5555  0054AE                     __ptext27:
  5556                           	callstack 0
  5557  0054AE                     _ltoa:
  5558                           	callstack 23
  5559                           
  5560                           ;incstack = 0
  5561  0054AE  AE27               	btfss	(ltoa@val+3)^0,7,c
  5562  0054B0  D00E               	goto	l12767
  5563  0054B2  5023               	movf	ltoa@buf^0,w,c
  5564  0054B4  6ED9               	movwf	fsr2l,c
  5565  0054B6  6ADA               	clrf	fsr2h,c
  5566  0054B8  0E2D               	movlw	45
  5567  0054BA  6EDF               	movwf	indf2,c
  5568  0054BC  2A23               	incf	ltoa@buf^0,f,c
  5569  0054BE  1E27               	comf	(ltoa@val+3)^0,f,c
  5570  0054C0  1E26               	comf	(ltoa@val+2)^0,f,c
  5571  0054C2  1E25               	comf	(ltoa@val+1)^0,f,c
  5572  0054C4  6C24               	negf	ltoa@val^0,c
  5573  0054C6  0E00               	movlw	0
  5574  0054C8  2225               	addwfc	(ltoa@val+1)^0,f,c
  5575  0054CA  2226               	addwfc	(ltoa@val+2)^0,f,c
  5576  0054CC  2227               	addwfc	(ltoa@val+3)^0,f,c
  5577  0054CE                     l12767:
  5578  0054CE  C023  F017         	movff	ltoa@buf,ultoa@buf
  5579  0054D2  C024  F018         	movff	ltoa@val,ultoa@val
  5580  0054D6  C025  F019         	movff	ltoa@val+1,ultoa@val+1
  5581  0054DA  C026  F01A         	movff	ltoa@val+2,ultoa@val+2
  5582  0054DE  C027  F01B         	movff	ltoa@val+3,ultoa@val+3
  5583  0054E2  C028  F01C         	movff	ltoa@base,ultoa@base
  5584  0054E6  C029  F01D         	movff	ltoa@base+1,ultoa@base+1
  5585  0054EA  EC86  F01F         	call	_ultoa	;wreg free
  5586  0054EE  0012               	return		;funcret
  5587  0054F0                     __end_of_ltoa:
  5588                           	callstack 0
  5589                           
  5590 ;; *************** function _ultoa *****************
  5591 ;; Defined at:
  5592 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\ltoa.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;  buf             1   22[COMRAM] PTR unsigned char 
  5595 ;;		 -> escreve_inteiro_lcd@texto(7), 
  5596 ;;  val             4   23[COMRAM] unsigned long 
  5597 ;;  base            2   27[COMRAM] int 
  5598 ;; Auto vars:     Size  Location     Type
  5599 ;;  v               4   29[COMRAM] unsigned long 
  5600 ;;  c               1   33[COMRAM] unsigned char 
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  1    wreg      PTR unsigned char 
  5603 ;; Registers used:
  5604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/1
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5610 ;;      Params:         7       0       0       0       0       0       0       0       0
  5611 ;;      Locals:         5       0       0       0       0       0       0       0       0
  5612 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5613 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5614 ;;Total ram usage:       12 bytes
  5615 ;; Hardware stack levels used:    1
  5616 ;; Hardware stack levels required when called:    3
  5617 ;; This function calls:
  5618 ;;		___lldiv
  5619 ;;		___llmod
  5620 ;; This function is called by:
  5621 ;;		_ltoa
  5622 ;; This function uses a non-reentrant model
  5623 ;;
  5624                           
  5625                           	psect	text28
  5626  003F0C                     __ptext28:
  5627                           	callstack 0
  5628  003F0C                     _ultoa:
  5629                           	callstack 23
  5630                           
  5631                           ;incstack = 0
  5632  003F0C  C018  F01E         	movff	ultoa@val,ultoa@v
  5633  003F10  C019  F01F         	movff	ultoa@val+1,ultoa@v+1
  5634  003F14  C01A  F020         	movff	ultoa@val+2,ultoa@v+2
  5635  003F18  C01B  F021         	movff	ultoa@val+3,ultoa@v+3
  5636  003F1C                     l12735:
  5637  003F1C  C01E  F00A         	movff	ultoa@v,___lldiv@dividend
  5638  003F20  C01F  F00B         	movff	ultoa@v+1,___lldiv@dividend+1
  5639  003F24  C020  F00C         	movff	ultoa@v+2,___lldiv@dividend+2
  5640  003F28  C021  F00D         	movff	ultoa@v+3,___lldiv@dividend+3
  5641  003F2C  C01C  F00E         	movff	ultoa@base,___lldiv@divisor
  5642  003F30  C01D  F00F         	movff	ultoa@base+1,___lldiv@divisor+1
  5643  003F34  0E00               	movlw	0
  5644  003F36  BE0F               	btfsc	(___lldiv@divisor+1)^0,7,c
  5645  003F38  0EFF               	movlw	-1
  5646  003F3A  6E10               	movwf	(___lldiv@divisor+2)^0,c
  5647  003F3C  6E11               	movwf	(___lldiv@divisor+3)^0,c
  5648  003F3E  EC19  F025         	call	___lldiv	;wreg free
  5649  003F42  C00A  F01E         	movff	?___lldiv,ultoa@v
  5650  003F46  C00B  F01F         	movff	?___lldiv+1,ultoa@v+1
  5651  003F4A  C00C  F020         	movff	?___lldiv+2,ultoa@v+2
  5652  003F4E  C00D  F021         	movff	?___lldiv+3,ultoa@v+3
  5653  003F52  2A17               	incf	ultoa@buf^0,f,c
  5654  003F54  501E               	movf	ultoa@v^0,w,c
  5655  003F56  101F               	iorwf	(ultoa@v+1)^0,w,c
  5656  003F58  1020               	iorwf	(ultoa@v+2)^0,w,c
  5657  003F5A  1021               	iorwf	(ultoa@v+3)^0,w,c
  5658  003F5C  A4D8               	btfss	status,2,c
  5659  003F5E  D7DE               	goto	l12735
  5660  003F60  5017               	movf	ultoa@buf^0,w,c
  5661  003F62  6ED9               	movwf	fsr2l,c
  5662  003F64  6ADA               	clrf	fsr2h,c
  5663  003F66  0E00               	movlw	0
  5664  003F68  6EDF               	movwf	indf2,c
  5665  003F6A  0617               	decf	ultoa@buf^0,f,c
  5666  003F6C                     l12745:
  5667  003F6C  C018  F00A         	movff	ultoa@val,___llmod@dividend
  5668  003F70  C019  F00B         	movff	ultoa@val+1,___llmod@dividend+1
  5669  003F74  C01A  F00C         	movff	ultoa@val+2,___llmod@dividend+2
  5670  003F78  C01B  F00D         	movff	ultoa@val+3,___llmod@dividend+3
  5671  003F7C  C01C  F00E         	movff	ultoa@base,___llmod@divisor
  5672  003F80  C01D  F00F         	movff	ultoa@base+1,___llmod@divisor+1
  5673  003F84  0E00               	movlw	0
  5674  003F86  BE0F               	btfsc	(___llmod@divisor+1)^0,7,c
  5675  003F88  0EFF               	movlw	-1
  5676  003F8A  6E10               	movwf	(___llmod@divisor+2)^0,c
  5677  003F8C  6E11               	movwf	(___llmod@divisor+3)^0,c
  5678  003F8E  ECE9  F026         	call	___llmod	;wreg free
  5679  003F92  500A               	movf	?___llmod^0,w,c
  5680  003F94  6E22               	movwf	ultoa@c^0,c
  5681  003F96  C018  F00A         	movff	ultoa@val,___lldiv@dividend
  5682  003F9A  C019  F00B         	movff	ultoa@val+1,___lldiv@dividend+1
  5683  003F9E  C01A  F00C         	movff	ultoa@val+2,___lldiv@dividend+2
  5684  003FA2  C01B  F00D         	movff	ultoa@val+3,___lldiv@dividend+3
  5685  003FA6  C01C  F00E         	movff	ultoa@base,___lldiv@divisor
  5686  003FAA  C01D  F00F         	movff	ultoa@base+1,___lldiv@divisor+1
  5687  003FAE  0E00               	movlw	0
  5688  003FB0  BE0F               	btfsc	(___lldiv@divisor+1)^0,7,c
  5689  003FB2  0EFF               	movlw	-1
  5690  003FB4  6E10               	movwf	(___lldiv@divisor+2)^0,c
  5691  003FB6  6E11               	movwf	(___lldiv@divisor+3)^0,c
  5692  003FB8  EC19  F025         	call	___lldiv	;wreg free
  5693  003FBC  C00A  F018         	movff	?___lldiv,ultoa@val
  5694  003FC0  C00B  F019         	movff	?___lldiv+1,ultoa@val+1
  5695  003FC4  C00C  F01A         	movff	?___lldiv+2,ultoa@val+2
  5696  003FC8  C00D  F01B         	movff	?___lldiv+3,ultoa@val+3
  5697  003FCC  0E09               	movlw	9
  5698  003FCE  6422               	cpfsgt	ultoa@c^0,c
  5699  003FD0  D002               	goto	l2473
  5700  003FD2  0E07               	movlw	7
  5701  003FD4  2622               	addwf	ultoa@c^0,f,c
  5702  003FD6                     l2473:
  5703  003FD6  0E30               	movlw	48
  5704  003FD8  2622               	addwf	ultoa@c^0,f,c
  5705  003FDA  5017               	movf	ultoa@buf^0,w,c
  5706  003FDC  6ED9               	movwf	fsr2l,c
  5707  003FDE  6ADA               	clrf	fsr2h,c
  5708  003FE0  C022  FFDF         	movff	ultoa@c,indf2
  5709  003FE4  0617               	decf	ultoa@buf^0,f,c
  5710  003FE6  5018               	movf	ultoa@val^0,w,c
  5711  003FE8  1019               	iorwf	(ultoa@val+1)^0,w,c
  5712  003FEA  101A               	iorwf	(ultoa@val+2)^0,w,c
  5713  003FEC  101B               	iorwf	(ultoa@val+3)^0,w,c
  5714  003FEE  B4D8               	btfsc	status,2,c
  5715  003FF0  0012               	return	
  5716  003FF2  D7BC               	goto	l12745
  5717  003FF4                     __end_of_ultoa:
  5718                           	callstack 0
  5719                           
  5720 ;; *************** function _escreve_cmd_lcd *****************
  5721 ;; Defined at:
  5722 ;;		line 162 in file "bibliotecas/display_lcd.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;  comando         1    wreg     unsigned char 
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;  comando         1   11[COMRAM] unsigned char 
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  1    wreg      void 
  5729 ;; Registers used:
  5730 ;;		wreg, status,2, status,0, cstack
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5736 ;;      Params:         0       0       0       0       0       0       0       0       0
  5737 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5738 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5739 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5740 ;;Total ram usage:        1 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    3
  5743 ;; This function calls:
  5744 ;;		_delay
  5745 ;; This function is called by:
  5746 ;;		_init_lcd
  5747 ;;		_mensagem_inicial
  5748 ;;		_troca_de_tela
  5749 ;; This function uses a non-reentrant model
  5750 ;;
  5751                           
  5752                           	psect	text29
  5753  0048A0                     __ptext29:
  5754                           	callstack 0
  5755  0048A0                     _escreve_cmd_lcd:
  5756                           	callstack 26
  5757                           
  5758                           ;incstack = 0
  5759                           ;escreve_cmd_lcd@comando stored from wreg
  5760  0048A0  6E0C               	movwf	escreve_cmd_lcd@comando^0,c
  5761                           
  5762                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
  5763  0048A2  9483               	bcf	131,2,c	;volatile
  5764                           
  5765                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
  5766  0048A4  9283               	bcf	131,1,c	;volatile
  5767                           
  5768                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
  5769  0048A6  9083               	bcf	131,0,c	;volatile
  5770                           
  5771                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
  5772  0048A8  A80C               	btfss	escreve_cmd_lcd@comando^0,4,c
  5773  0048AA  D002               	goto	l191
  5774  0048AC  8883               	bsf	131,4,c	;volatile
  5775  0048AE  D001               	goto	l13185
  5776  0048B0                     l191:
  5777                           
  5778                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
  5779  0048B0  9883               	bcf	131,4,c	;volatile
  5780  0048B2                     l13185:
  5781                           
  5782                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
  5783  0048B2  AA0C               	btfss	escreve_cmd_lcd@comando^0,5,c
  5784  0048B4  D002               	goto	l193
  5785  0048B6  8A83               	bsf	131,5,c	;volatile
  5786  0048B8  D001               	goto	l13189
  5787  0048BA                     l193:
  5788                           
  5789                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
  5790  0048BA  9A83               	bcf	131,5,c	;volatile
  5791  0048BC                     l13189:
  5792                           
  5793                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
  5794  0048BC  AC0C               	btfss	escreve_cmd_lcd@comando^0,6,c
  5795  0048BE  D002               	goto	l195
  5796  0048C0  8C83               	bsf	131,6,c	;volatile
  5797  0048C2  D001               	goto	l13193
  5798  0048C4                     l195:
  5799                           
  5800                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
  5801  0048C4  9C83               	bcf	131,6,c	;volatile
  5802  0048C6                     l13193:
  5803                           
  5804                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
  5805  0048C6  AE0C               	btfss	escreve_cmd_lcd@comando^0,7,c
  5806  0048C8  D002               	goto	l197
  5807  0048CA  8E83               	bsf	131,7,c	;volatile
  5808  0048CC  D001               	goto	l198
  5809  0048CE                     l197:
  5810                           
  5811                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
  5812  0048CE  9E83               	bcf	131,7,c	;volatile
  5813  0048D0                     l198:
  5814                           
  5815                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
  5816  0048D0  8083               	bsf	131,0,c	;volatile
  5817                           
  5818                           ;display_lcd.c: 181: delay();
  5819  0048D2  EC92  F02D         	call	_delay	;wreg free
  5820                           
  5821                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
  5822  0048D6  9083               	bcf	131,0,c	;volatile
  5823                           
  5824                           ;display_lcd.c: 183: delay();
  5825  0048D8  EC92  F02D         	call	_delay	;wreg free
  5826                           
  5827                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
  5828  0048DC  A00C               	btfss	escreve_cmd_lcd@comando^0,0,c
  5829  0048DE  D002               	goto	l199
  5830  0048E0  8883               	bsf	131,4,c	;volatile
  5831  0048E2  D001               	goto	l200
  5832  0048E4                     l199:
  5833                           
  5834                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
  5835  0048E4  9883               	bcf	131,4,c	;volatile
  5836  0048E6                     l200:
  5837                           
  5838                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
  5839  0048E6  A20C               	btfss	escreve_cmd_lcd@comando^0,1,c
  5840  0048E8  D002               	goto	l201
  5841  0048EA  8A83               	bsf	131,5,c	;volatile
  5842  0048EC  D001               	goto	l202
  5843  0048EE                     l201:
  5844                           
  5845                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
  5846  0048EE  9A83               	bcf	131,5,c	;volatile
  5847  0048F0                     l202:
  5848                           
  5849                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
  5850  0048F0  A40C               	btfss	escreve_cmd_lcd@comando^0,2,c
  5851  0048F2  D002               	goto	l203
  5852  0048F4  8C83               	bsf	131,6,c	;volatile
  5853  0048F6  D001               	goto	l204
  5854  0048F8                     l203:
  5855                           
  5856                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
  5857  0048F8  9C83               	bcf	131,6,c	;volatile
  5858  0048FA                     l204:
  5859                           
  5860                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
  5861  0048FA  A60C               	btfss	escreve_cmd_lcd@comando^0,3,c
  5862  0048FC  D002               	goto	l205
  5863  0048FE  8E83               	bsf	131,7,c	;volatile
  5864  004900  D001               	goto	l206
  5865  004902                     l205:
  5866                           
  5867                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
  5868  004902  9E83               	bcf	131,7,c	;volatile
  5869  004904                     l206:
  5870                           
  5871                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
  5872  004904  8083               	bsf	131,0,c	;volatile
  5873                           
  5874                           ;display_lcd.c: 197: delay();
  5875  004906  EC92  F02D         	call	_delay	;wreg free
  5876                           
  5877                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
  5878  00490A  9083               	bcf	131,0,c	;volatile
  5879                           
  5880                           ;display_lcd.c: 199: delay();
  5881  00490C  EC92  F02D         	call	_delay	;wreg free
  5882                           
  5883                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
  5884  004910  040C               	decf	escreve_cmd_lcd@comando^0,w,c
  5885  004912  B4D8               	btfsc	status,2,c
  5886  004914  D008               	goto	u16010
  5887  004916  0E02               	movlw	2
  5888  004918  180C               	xorwf	escreve_cmd_lcd@comando^0,w,c
  5889  00491A  B4D8               	btfsc	status,2,c
  5890  00491C  D004               	goto	u16010
  5891  00491E  0E03               	movlw	3
  5892  004920  180C               	xorwf	escreve_cmd_lcd@comando^0,w,c
  5893  004922  A4D8               	btfss	status,2,c
  5894  004924  0012               	return	
  5895  004926                     u16010:
  5896                           
  5897                           ;display_lcd.c: 205: { delay(); }
  5898  004926  EC92  F02D         	call	_delay	;wreg free
  5899  00492A  0012               	return		;funcret
  5900  00492C                     __end_of_escreve_cmd_lcd:
  5901                           	callstack 0
  5902                           
  5903 ;; *************** function _verifica_fence *****************
  5904 ;; Defined at:
  5905 ;;		line 276 in file "main.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;		None
  5908 ;; Auto vars:     Size  Location     Type
  5909 ;;		None
  5910 ;; Return value:  Size  Location     Type
  5911 ;;                  1    wreg      void 
  5912 ;; Registers used:
  5913 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5914 ;; Tracked objects:
  5915 ;;		On entry : 3F/1
  5916 ;;		On exit  : 0/0
  5917 ;;		Unchanged: 0/0
  5918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5919 ;;      Params:         0       0       0       0       0       0       0       0       0
  5920 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5921 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5922 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5923 ;;Total ram usage:        1 bytes
  5924 ;; Hardware stack levels used:    1
  5925 ;; Hardware stack levels required when called:    8
  5926 ;; This function calls:
  5927 ;;		_latitude_to_convert
  5928 ;;		_longitude_to_convert
  5929 ;;		_monta_sd
  5930 ;;		_recebe_dado_gps
  5931 ;;		_verifica_plausibilidade_lat
  5932 ;;		_verifica_plausibilidade_long
  5933 ;; This function is called by:
  5934 ;;		_disparo_gravacao
  5935 ;; This function uses a non-reentrant model
  5936 ;;
  5937                           
  5938                           	psect	text30
  5939  004F5E                     __ptext30:
  5940                           	callstack 0
  5941  004F5E                     _verifica_fence:
  5942                           	callstack 20
  5943                           
  5944                           ; BSR set to: 1
  5945                           ;main.c: 279: recebe_dado_gps();
  5946                           
  5947                           ;incstack = 0
  5948  004F5E  EC62  F02D         	call	_recebe_dado_gps	;wreg free
  5949                           
  5950                           ;main.c: 280: longitude_to_convert();
  5951  004F62  EC5A  F025         	call	_longitude_to_convert	;wreg free
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;main.c: 281: latitude_to_convert();
  5955  004F66  ECD3  F025         	call	_latitude_to_convert	;wreg free
  5956                           
  5957                           ;main.c: 282: fence_flag[0].point = verifica_plausibilidade_long();
  5958  004F6A  EC1C  F027         	call	_verifica_plausibilidade_long	;wreg free
  5959  004F6E  6E43               	movwf	??_verifica_fence^0,c
  5960  004F70  0101               	movlb	1	; () banked
  5961  004F72  5149               	movf	_fence_flag& (0+255),w,b
  5962  004F74  1843               	xorwf	??_verifica_fence^0,w,c
  5963  004F76  0BFE               	andlw	-2
  5964  004F78  1843               	xorwf	??_verifica_fence^0,w,c
  5965  004F7A  6F49               	movwf	_fence_flag& (0+255),b
  5966                           
  5967                           ;main.c: 283: fence_flag[1].point = verifica_plausibilidade_lat();
  5968  004F7C  EC97  F025         	call	_verifica_plausibilidade_lat	;wreg free
  5969  004F80  6E43               	movwf	??_verifica_fence^0,c
  5970  004F82  0101               	movlb	1	; () banked
  5971  004F84  514A               	movf	(_fence_flag+1)& (0+255),w,b
  5972  004F86  1843               	xorwf	??_verifica_fence^0,w,c
  5973  004F88  0BFE               	andlw	-2
  5974  004F8A  1843               	xorwf	??_verifica_fence^0,w,c
  5975  004F8C  6F4A               	movwf	(_fence_flag+1)& (0+255),b
  5976                           
  5977                           ; BSR set to: 1
  5978                           ;main.c: 288: if(fence_flag[0].point || fence_flag[1].point)
  5979  004F8E  B149               	btfsc	_fence_flag& (0+255),0,b
  5980  004F90  D002               	goto	u16050
  5981                           
  5982                           ; BSR set to: 1
  5983  004F92  A14A               	btfss	(_fence_flag+1)& (0+255),0,b
  5984  004F94  D009               	goto	l1578
  5985  004F96                     u16050:
  5986                           
  5987                           ; BSR set to: 1
  5988                           ;main.c: 289: {;main.c: 290: fence_flag[2].point = 1;
  5989  004F96  814B               	bsf	(_fence_flag+2)& (0+255),0,b
  5990                           
  5991                           ; BSR set to: 1
  5992                           ;main.c: 291: monta_sd(4, "FORA  ");
  5993  004F98  0E44               	movlw	low STR_20
  5994  004F9A  6E10               	movwf	monta_sd@dado^0,c
  5995  004F9C  0E62               	movlw	high STR_20
  5996  004F9E  6E11               	movwf	(monta_sd@dado+1)^0,c
  5997  004FA0  0E04               	movlw	4
  5998  004FA2  ECBF  F007         	call	_monta_sd
  5999                           
  6000                           ;main.c: 292: }
  6001  004FA6  0012               	return	
  6002  004FA8                     l1578:
  6003                           
  6004                           ; BSR set to: 1
  6005                           ;main.c: 293: else;main.c: 294: {;main.c: 295: fence_flag[2].point = 0;
  6006  004FA8  914B               	bcf	(_fence_flag+2)& (0+255),0,b
  6007                           
  6008                           ; BSR set to: 1
  6009                           ;main.c: 296: monta_sd(4, "DENTRO");
  6010  004FAA  0E52               	movlw	low STR_21
  6011  004FAC  6E10               	movwf	monta_sd@dado^0,c
  6012  004FAE  0E62               	movlw	high STR_21
  6013  004FB0  6E11               	movwf	(monta_sd@dado+1)^0,c
  6014  004FB2  0E04               	movlw	4
  6015  004FB4  ECBF  F007         	call	_monta_sd
  6016  004FB8  0012               	return		;funcret
  6017  004FBA                     __end_of_verifica_fence:
  6018                           	callstack 0
  6019                           
  6020 ;; *************** function _verifica_plausibilidade_long *****************
  6021 ;; Defined at:
  6022 ;;		line 311 in file "bibliotecas/fence.c"
  6023 ;; Parameters:    Size  Location     Type
  6024 ;;		None
  6025 ;; Auto vars:     Size  Location     Type
  6026 ;;  posicao         1    9[COMRAM] unsigned char 
  6027 ;; Return value:  Size  Location     Type
  6028 ;;                  1    wreg      unsigned char 
  6029 ;; Registers used:
  6030 ;;		wreg, status,2, status,0, cstack
  6031 ;; Tracked objects:
  6032 ;;		On entry : 3F/0
  6033 ;;		On exit  : 3F/0
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6036 ;;      Params:         0       0       0       0       0       0       0       0       0
  6037 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6038 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6039 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6040 ;;Total ram usage:        1 bytes
  6041 ;; Hardware stack levels used:    1
  6042 ;; Hardware stack levels required when called:    3
  6043 ;; This function calls:
  6044 ;;		_posicao_long
  6045 ;; This function is called by:
  6046 ;;		_verifica_fence
  6047 ;; This function uses a non-reentrant model
  6048 ;;
  6049                           
  6050                           	psect	text31
  6051  004E38                     __ptext31:
  6052                           	callstack 0
  6053  004E38                     _verifica_plausibilidade_long:
  6054                           	callstack 24
  6055                           
  6056                           ; BSR set to: 0
  6057                           ;fence.c: 313: char posicao = posicao_long();
  6058                           
  6059                           ;incstack = 0
  6060  004E38  EC63  F02E         	call	_posicao_long	;wreg free
  6061  004E3C  6E0A               	movwf	verifica_plausibilidade_long@posicao^0,c
  6062                           
  6063                           ;fence.c: 314: switch(posicao)
  6064  004E3E  D029               	goto	l13083
  6065  004E40                     l13033:
  6066                           
  6067                           ; BSR set to: 1
  6068                           ;fence.c: 317: if(;fence.c: 318: (poligono_ext[0].diff_long >= 0 &&;fence.c: 319: poligo
      +                          no_ext[1].diff_long <= 0))
  6069  004E40  0100               	movlb	0	; () banked
  6070  004E42  BFEE               	btfsc	(_poligono_ext+7)& (0+255),7,b
  6071  004E44  D00B               	goto	l13043
  6072                           
  6073                           ; BSR set to: 0
  6074  004E46  BFF6               	btfsc	(_poligono_ext+15)& (0+255),7,b
  6075  004E48  D007               	goto	u15710
  6076  004E4A  51F6               	movf	(_poligono_ext+15)& (0+255),w,b
  6077  004E4C  11F5               	iorwf	(_poligono_ext+14)& (0+255),w,b
  6078  004E4E  11F4               	iorwf	(_poligono_ext+13)& (0+255),w,b
  6079  004E50  E105               	bnz	l13043
  6080  004E52  05F3               	decf	(_poligono_ext+12)& (0+255),w,b
  6081  004E54  B0D8               	btfsc	status,0,c
  6082  004E56  D002               	goto	l13043
  6083  004E58                     u15710:
  6084                           
  6085                           ; BSR set to: 0
  6086                           ;fence.c: 320: {;fence.c: 321: return 0;
  6087  004E58  0E00               	movlw	0
  6088  004E5A  0012               	return	
  6089  004E5C                     l13043:
  6090                           
  6091                           ; BSR set to: 0
  6092                           ;fence.c: 323: else if(;fence.c: 324: (poligono_ext[0].diff_long == 0 ||;fence.c: 325: p
      +                          oligono_ext[1].diff_long == 0 ))
  6093  004E5C  51EB               	movf	(_poligono_ext+4)& (0+255),w,b
  6094  004E5E  11EC               	iorwf	(_poligono_ext+5)& (0+255),w,b
  6095  004E60  11ED               	iorwf	(_poligono_ext+6)& (0+255),w,b
  6096  004E62  11EE               	iorwf	(_poligono_ext+7)& (0+255),w,b
  6097  004E64  B4D8               	btfsc	status,2,c
  6098  004E66  D7F8               	goto	u15710
  6099                           
  6100                           ; BSR set to: 0
  6101  004E68  51F3               	movf	(_poligono_ext+12)& (0+255),w,b
  6102  004E6A  11F4               	iorwf	(_poligono_ext+13)& (0+255),w,b
  6103  004E6C  11F5               	iorwf	(_poligono_ext+14)& (0+255),w,b
  6104  004E6E  11F6               	iorwf	(_poligono_ext+15)& (0+255),w,b
  6105  004E70  B4D8               	btfsc	status,2,c
  6106  004E72  D7F2               	goto	u15710
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;fence.c: 329: else;fence.c: 330: {;fence.c: 331: return 1;
  6110  004E74  0E01               	movlw	1
  6111  004E76  0012               	return	
  6112  004E78                     l13057:
  6113                           
  6114                           ; BSR set to: 1
  6115                           ;fence.c: 336: if(;fence.c: 337: (poligono_ext[0].diff_long <= 0 &&;fence.c: 338: poligo
      +                          no_ext[1].diff_long >= 0 ) )
  6116  004E78  0100               	movlb	0	; () banked
  6117  004E7A  BFEE               	btfsc	(_poligono_ext+7)& (0+255),7,b
  6118  004E7C  D007               	goto	u15740
  6119  004E7E  51EE               	movf	(_poligono_ext+7)& (0+255),w,b
  6120  004E80  11ED               	iorwf	(_poligono_ext+6)& (0+255),w,b
  6121  004E82  11EC               	iorwf	(_poligono_ext+5)& (0+255),w,b
  6122  004E84  E1EB               	bnz	l13043
  6123  004E86  05EB               	decf	(_poligono_ext+4)& (0+255),w,b
  6124  004E88  B0D8               	btfsc	status,0,c
  6125  004E8A  D7E8               	goto	l13043
  6126  004E8C                     u15740:
  6127                           
  6128                           ; BSR set to: 0
  6129  004E8C  AFF6               	btfss	(_poligono_ext+15)& (0+255),7,b
  6130  004E8E  D7E4               	goto	u15710
  6131  004E90  D7E5               	goto	l13043
  6132  004E92                     l13083:
  6133                           
  6134                           ; BSR set to: 1
  6135  004E92  500A               	movf	verifica_plausibilidade_long@posicao^0,w,c
  6136                           
  6137                           ; Switch size 1, requested type "simple"
  6138                           ; Number of cases is 1, Range of values is 45 to 45
  6139                           ; switch strategies available:
  6140                           ; Name         Instructions Cycles
  6141                           ; simple_byte            4     3 (average)
  6142                           ;	Chosen strategy is simple_byte
  6143  004E94  0A2D               	xorlw	45	; case 45
  6144  004E96  B4D8               	btfsc	status,2,c
  6145  004E98  D7D3               	goto	l13033
  6146  004E9A  D7EE               	goto	l13057
  6147  004E9C                     __end_of_verifica_plausibilidade_long:
  6148                           	callstack 0
  6149                           
  6150 ;; *************** function _posicao_long *****************
  6151 ;; Defined at:
  6152 ;;		line 646 in file "bibliotecas/GPS.c"
  6153 ;; Parameters:    Size  Location     Type
  6154 ;;		None
  6155 ;; Auto vars:     Size  Location     Type
  6156 ;;		None
  6157 ;; Return value:  Size  Location     Type
  6158 ;;                  1    wreg      unsigned char 
  6159 ;; Registers used:
  6160 ;;		wreg, status,2
  6161 ;; Tracked objects:
  6162 ;;		On entry : 3F/0
  6163 ;;		On exit  : 3F/1
  6164 ;;		Unchanged: 0/0
  6165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6166 ;;      Params:         0       0       0       0       0       0       0       0       0
  6167 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6168 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6169 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6170 ;;Total ram usage:        0 bytes
  6171 ;; Hardware stack levels used:    1
  6172 ;; Hardware stack levels required when called:    2
  6173 ;; This function calls:
  6174 ;;		Nothing
  6175 ;; This function is called by:
  6176 ;;		_verifica_plausibilidade_long
  6177 ;; This function uses a non-reentrant model
  6178 ;;
  6179                           
  6180                           	psect	text32
  6181  005CC6                     __ptext32:
  6182                           	callstack 0
  6183  005CC6                     _posicao_long:
  6184                           	callstack 24
  6185                           
  6186                           ; BSR set to: 0
  6187                           ;GPS.c: 649: return rawLongitude[0];
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;incstack = 0
  6191  005CC6  0101               	movlb	1	; () banked
  6192  005CC8  51A3               	movf	_rawLongitude& (0+255),w,b
  6193                           
  6194                           ; BSR set to: 1
  6195  005CCA  0012               	return		;funcret
  6196  005CCC                     __end_of_posicao_long:
  6197                           	callstack 0
  6198                           
  6199 ;; *************** function _verifica_plausibilidade_lat *****************
  6200 ;; Defined at:
  6201 ;;		line 365 in file "bibliotecas/fence.c"
  6202 ;; Parameters:    Size  Location     Type
  6203 ;;		None
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;  posicao         1    9[COMRAM] unsigned char 
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  1    wreg      unsigned char 
  6208 ;; Registers used:
  6209 ;;		wreg, status,2, status,0, cstack
  6210 ;; Tracked objects:
  6211 ;;		On entry : 3F/1
  6212 ;;		On exit  : 3F/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6215 ;;      Params:         0       0       0       0       0       0       0       0       0
  6216 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6217 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6218 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6219 ;;Total ram usage:        1 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; Hardware stack levels required when called:    3
  6222 ;; This function calls:
  6223 ;;		_posicao_lat
  6224 ;; This function is called by:
  6225 ;;		_verifica_fence
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229                           	psect	text33
  6230  004B2E                     __ptext33:
  6231                           	callstack 0
  6232  004B2E                     _verifica_plausibilidade_lat:
  6233                           	callstack 24
  6234                           
  6235                           ; BSR set to: 1
  6236                           ;fence.c: 367: char posicao = posicao_lat();
  6237                           
  6238                           ; BSR set to: 1
  6239                           ;incstack = 0
  6240  004B2E  EC66  F02E         	call	_posicao_lat	;wreg free
  6241  004B32  6E0A               	movwf	verifica_plausibilidade_lat@posicao^0,c
  6242                           
  6243                           ;fence.c: 368: switch(posicao)
  6244  004B34  D033               	goto	l13147
  6245  004B36                     l13087:
  6246                           
  6247                           ; BSR set to: 1
  6248                           ;fence.c: 371: if(;fence.c: 372: ( poligono_ext[0].diff_lat <= 0 &&;fence.c: 373: poligo
      +                          no_ext[1].diff_lat >= 0))
  6249  004B36  0100               	movlb	0	; () banked
  6250  004B38  BFEA               	btfsc	(_poligono_ext+3)& (0+255),7,b
  6251  004B3A  D007               	goto	u15780
  6252  004B3C  51EA               	movf	(_poligono_ext+3)& (0+255),w,b
  6253  004B3E  11E9               	iorwf	(_poligono_ext+2)& (0+255),w,b
  6254  004B40  11E8               	iorwf	(_poligono_ext+1)& (0+255),w,b
  6255  004B42  E107               	bnz	l13097
  6256  004B44  05E7               	decf	_poligono_ext& (0+255),w,b
  6257  004B46  B0D8               	btfsc	status,0,c
  6258  004B48  D004               	goto	l13097
  6259  004B4A                     u15780:
  6260                           
  6261                           ; BSR set to: 0
  6262  004B4A  BFF2               	btfsc	(_poligono_ext+11)& (0+255),7,b
  6263  004B4C  D002               	goto	l13097
  6264  004B4E                     u15790:
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;fence.c: 374: {;fence.c: 375: return 0;
  6268  004B4E  0E00               	movlw	0
  6269  004B50  0012               	return	
  6270  004B52                     l13097:
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;fence.c: 377: else if(;fence.c: 378: (poligono_ext[0].diff_lat == 0 ||;fence.c: 379: po
      +                          ligono_ext[1].diff_lat == 0))
  6274  004B52  51E7               	movf	_poligono_ext& (0+255),w,b
  6275  004B54  11E8               	iorwf	(_poligono_ext+1)& (0+255),w,b
  6276  004B56  11E9               	iorwf	(_poligono_ext+2)& (0+255),w,b
  6277  004B58  11EA               	iorwf	(_poligono_ext+3)& (0+255),w,b
  6278  004B5A  B4D8               	btfsc	status,2,c
  6279  004B5C  D7F8               	goto	u15790
  6280                           
  6281                           ; BSR set to: 0
  6282  004B5E  51EF               	movf	(_poligono_ext+8)& (0+255),w,b
  6283  004B60  11F0               	iorwf	(_poligono_ext+9)& (0+255),w,b
  6284  004B62  11F1               	iorwf	(_poligono_ext+10)& (0+255),w,b
  6285  004B64  11F2               	iorwf	(_poligono_ext+11)& (0+255),w,b
  6286  004B66  B4D8               	btfsc	status,2,c
  6287  004B68  D7F2               	goto	u15790
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;fence.c: 384: else;fence.c: 385: {;fence.c: 387: return 1;
  6291  004B6A  0E01               	movlw	1
  6292  004B6C  0012               	return	
  6293  004B6E                     l13111:
  6294                           
  6295                           ; BSR set to: 1
  6296                           ;fence.c: 392: if((poligono_ext[0].diff_lat >= 0 &&;fence.c: 393: poligono_ext[1].diff_l
      +                          at <= 0 ))
  6297  004B6E  0100               	movlb	0	; () banked
  6298  004B70  BFEA               	btfsc	(_poligono_ext+3)& (0+255),7,b
  6299  004B72  D009               	goto	l13121
  6300                           
  6301                           ; BSR set to: 0
  6302  004B74  BFF2               	btfsc	(_poligono_ext+11)& (0+255),7,b
  6303  004B76  D7EB               	goto	u15790
  6304  004B78  51F2               	movf	(_poligono_ext+11)& (0+255),w,b
  6305  004B7A  11F1               	iorwf	(_poligono_ext+10)& (0+255),w,b
  6306  004B7C  11F0               	iorwf	(_poligono_ext+9)& (0+255),w,b
  6307  004B7E  E103               	bnz	l13121
  6308  004B80  05EF               	decf	(_poligono_ext+8)& (0+255),w,b
  6309  004B82  A0D8               	btfss	status,0,c
  6310  004B84  D7E4               	goto	u15790
  6311  004B86                     l13121:
  6312                           
  6313                           ; BSR set to: 0
  6314                           ;fence.c: 397: else if(;fence.c: 398: (poligono_ext[0].diff_lat >= 0 ||;fence.c: 399: po
      +                          ligono_ext[1].diff_lat <= 0))
  6315  004B86  BFEA               	btfsc	(_poligono_ext+3)& (0+255),7,b
  6316                           
  6317                           ; BSR set to: 0
  6318  004B88  BFF2               	btfsc	(_poligono_ext+11)& (0+255),7,b
  6319  004B8A  D7E1               	goto	u15790
  6320  004B8C  51F2               	movf	(_poligono_ext+11)& (0+255),w,b
  6321  004B8E  11F1               	iorwf	(_poligono_ext+10)& (0+255),w,b
  6322  004B90  11F0               	iorwf	(_poligono_ext+9)& (0+255),w,b
  6323  004B92  E1DF               	bnz	l13097
  6324  004B94  05EF               	decf	(_poligono_ext+8)& (0+255),w,b
  6325  004B96  A0D8               	btfss	status,0,c
  6326  004B98  D7DA               	goto	u15790
  6327  004B9A  D7DB               	goto	l13097
  6328  004B9C                     l13147:
  6329                           
  6330                           ; BSR set to: 1
  6331  004B9C  500A               	movf	verifica_plausibilidade_lat@posicao^0,w,c
  6332                           
  6333                           ; Switch size 1, requested type "simple"
  6334                           ; Number of cases is 1, Range of values is 45 to 45
  6335                           ; switch strategies available:
  6336                           ; Name         Instructions Cycles
  6337                           ; simple_byte            4     3 (average)
  6338                           ;	Chosen strategy is simple_byte
  6339  004B9E  0A2D               	xorlw	45	; case 45
  6340  004BA0  B4D8               	btfsc	status,2,c
  6341  004BA2  D7C9               	goto	l13087
  6342  004BA4  D7E4               	goto	l13111
  6343  004BA6                     __end_of_verifica_plausibilidade_lat:
  6344                           	callstack 0
  6345                           
  6346 ;; *************** function _posicao_lat *****************
  6347 ;; Defined at:
  6348 ;;		line 652 in file "bibliotecas/GPS.c"
  6349 ;; Parameters:    Size  Location     Type
  6350 ;;		None
  6351 ;; Auto vars:     Size  Location     Type
  6352 ;;		None
  6353 ;; Return value:  Size  Location     Type
  6354 ;;                  1    wreg      unsigned char 
  6355 ;; Registers used:
  6356 ;;		wreg, status,2
  6357 ;; Tracked objects:
  6358 ;;		On entry : 3F/1
  6359 ;;		On exit  : 3F/1
  6360 ;;		Unchanged: 0/0
  6361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6362 ;;      Params:         0       0       0       0       0       0       0       0       0
  6363 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6364 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6365 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6366 ;;Total ram usage:        0 bytes
  6367 ;; Hardware stack levels used:    1
  6368 ;; Hardware stack levels required when called:    2
  6369 ;; This function calls:
  6370 ;;		Nothing
  6371 ;; This function is called by:
  6372 ;;		_verifica_plausibilidade_lat
  6373 ;; This function uses a non-reentrant model
  6374 ;;
  6375                           
  6376                           	psect	text34
  6377  005CCC                     __ptext34:
  6378                           	callstack 0
  6379  005CCC                     _posicao_lat:
  6380                           	callstack 24
  6381                           
  6382                           ; BSR set to: 1
  6383                           ;GPS.c: 655: return rawLatitude[0];
  6384                           
  6385                           ; BSR set to: 0
  6386                           ;incstack = 0
  6387  005CCC  51BC               	movf	_rawLatitude& (0+255),w,b
  6388                           
  6389                           ; BSR set to: 1
  6390  005CCE  0012               	return		;funcret
  6391  005CD0                     __end_of_posicao_lat:
  6392                           	callstack 0
  6393                           
  6394 ;; *************** function _recebe_dado_gps *****************
  6395 ;; Defined at:
  6396 ;;		line 557 in file "main.c"
  6397 ;; Parameters:    Size  Location     Type
  6398 ;;		None
  6399 ;; Auto vars:     Size  Location     Type
  6400 ;;  timeout         1   10[COMRAM] unsigned char 
  6401 ;;  flag_recebe     1    9[COMRAM] unsigned char 
  6402 ;; Return value:  Size  Location     Type
  6403 ;;                  1    wreg      void 
  6404 ;; Registers used:
  6405 ;;		wreg, status,2, status,0, cstack
  6406 ;; Tracked objects:
  6407 ;;		On entry : 0/1
  6408 ;;		On exit  : 0/0
  6409 ;;		Unchanged: 0/0
  6410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6411 ;;      Params:         0       0       0       0       0       0       0       0       0
  6412 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6413 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6414 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6415 ;;Total ram usage:        2 bytes
  6416 ;; Hardware stack levels used:    1
  6417 ;; Hardware stack levels required when called:    3
  6418 ;; This function calls:
  6419 ;;		_verifica_recep_gps
  6420 ;; This function is called by:
  6421 ;;		_verifica_fence
  6422 ;;		_disparo_gravacao
  6423 ;;		_troca_de_tela
  6424 ;; This function uses a non-reentrant model
  6425 ;;
  6426                           
  6427                           	psect	text35
  6428  005AC4                     __ptext35:
  6429                           	callstack 0
  6430  005AC4                     _recebe_dado_gps:
  6431                           	callstack 25
  6432                           
  6433                           ;main.c: 559: unsigned char flag_recebe = 0;
  6434                           
  6435                           ; BSR set to: 1
  6436                           ;incstack = 0
  6437  005AC4  0E00               	movlw	0
  6438  005AC6  6E0A               	movwf	recebe_dado_gps@flag_recebe^0,c
  6439                           
  6440                           ;main.c: 560: unsigned char timeout = 10;
  6441  005AC8  0E0A               	movlw	10
  6442  005ACA  6E0B               	movwf	recebe_dado_gps@timeout^0,c
  6443                           
  6444                           ;main.c: 561: while(!flag_recebe && timeout>0)
  6445  005ACC  D004               	goto	l13027
  6446  005ACE                     l13023:
  6447                           
  6448                           ;main.c: 562: {;main.c: 563: flag_recebe = verifica_recep_gps();
  6449  005ACE  EC9F  F02C         	call	_verifica_recep_gps	;wreg free
  6450  005AD2  6E0A               	movwf	recebe_dado_gps@flag_recebe^0,c
  6451                           
  6452                           ; BSR set to: 1
  6453                           ;main.c: 564: timeout--;
  6454  005AD4  060B               	decf	recebe_dado_gps@timeout^0,f,c
  6455  005AD6                     l13027:
  6456  005AD6  500A               	movf	recebe_dado_gps@flag_recebe^0,w,c
  6457  005AD8  A4D8               	btfss	status,2,c
  6458  005ADA  0012               	return	
  6459  005ADC  500B               	movf	recebe_dado_gps@timeout^0,w,c
  6460  005ADE  B4D8               	btfsc	status,2,c
  6461  005AE0  0012               	return	
  6462  005AE2  D7F5               	goto	l13023
  6463  005AE4                     __end_of_recebe_dado_gps:
  6464                           	callstack 0
  6465                           
  6466 ;; *************** function _verifica_recep_gps *****************
  6467 ;; Defined at:
  6468 ;;		line 720 in file "bibliotecas/GPS.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;		None
  6471 ;; Auto vars:     Size  Location     Type
  6472 ;;		None
  6473 ;; Return value:  Size  Location     Type
  6474 ;;                  1    wreg      unsigned char 
  6475 ;; Registers used:
  6476 ;;		wreg
  6477 ;; Tracked objects:
  6478 ;;		On entry : 0/1
  6479 ;;		On exit  : 3F/1
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6482 ;;      Params:         0       0       0       0       0       0       0       0       0
  6483 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6484 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6485 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6486 ;;Total ram usage:        0 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; Hardware stack levels required when called:    2
  6489 ;; This function calls:
  6490 ;;		Nothing
  6491 ;; This function is called by:
  6492 ;;		_recebe_dado_gps
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           	psect	text36
  6497  00593E                     __ptext36:
  6498                           	callstack 0
  6499  00593E                     _verifica_recep_gps:
  6500                           	callstack 25
  6501                           
  6502                           ;GPS.c: 722: if(gps_flag[0].flag && gps_flag[1].flag && gps_flag[2].flag && gps_flag[3].
      +                          flag && gps_flag[4].flag && gps_flag[5].flag)
  6503                           
  6504                           ;incstack = 0
  6505  00593E  0101               	movlb	1	; () banked
  6506  005940  B13B               	btfsc	_gps_flag& (0+255),0,b
  6507                           
  6508                           ; BSR set to: 1
  6509  005942  A13C               	btfss	(_gps_flag+1)& (0+255),0,b
  6510  005944  D00E               	goto	l12255
  6511                           
  6512                           ; BSR set to: 1
  6513  005946  B13D               	btfsc	(_gps_flag+2)& (0+255),0,b
  6514                           
  6515                           ; BSR set to: 1
  6516  005948  A13E               	btfss	(_gps_flag+3)& (0+255),0,b
  6517  00594A  D00B               	goto	l12255
  6518                           
  6519                           ; BSR set to: 1
  6520  00594C  B13F               	btfsc	(_gps_flag+4)& (0+255),0,b
  6521                           
  6522                           ; BSR set to: 1
  6523  00594E  A140               	btfss	(_gps_flag+5)& (0+255),0,b
  6524  005950  D008               	goto	l12255
  6525                           
  6526                           ; BSR set to: 1
  6527                           ;GPS.c: 723: {;GPS.c: 724: gps_flag[0].flag = 0;
  6528  005952  913B               	bcf	_gps_flag& (0+255),0,b
  6529                           
  6530                           ;GPS.c: 725: gps_flag[1].flag = 0;
  6531  005954  913C               	bcf	(_gps_flag+1)& (0+255),0,b
  6532                           
  6533                           ;GPS.c: 726: gps_flag[2].flag = 0;
  6534  005956  913D               	bcf	(_gps_flag+2)& (0+255),0,b
  6535                           
  6536                           ;GPS.c: 727: gps_flag[3].flag = 0;
  6537  005958  913E               	bcf	(_gps_flag+3)& (0+255),0,b
  6538                           
  6539                           ;GPS.c: 728: gps_flag[4].flag = 0;
  6540  00595A  913F               	bcf	(_gps_flag+4)& (0+255),0,b
  6541                           
  6542                           ;GPS.c: 729: gps_flag[5].flag = 0;
  6543  00595C  9140               	bcf	(_gps_flag+5)& (0+255),0,b
  6544                           
  6545                           ; BSR set to: 1
  6546                           ;GPS.c: 730: return 1;
  6547  00595E  0E01               	movlw	1
  6548  005960  0012               	return	
  6549  005962                     l12255:
  6550                           
  6551                           ; BSR set to: 1
  6552                           ;GPS.c: 732: else;GPS.c: 733: {;GPS.c: 735: return 0;
  6553  005962  0E00               	movlw	0
  6554                           
  6555                           ; BSR set to: 1
  6556  005964  0012               	return		;funcret
  6557  005966                     __end_of_verifica_recep_gps:
  6558                           	callstack 0
  6559                           
  6560 ;; *************** function _longitude_to_convert *****************
  6561 ;; Defined at:
  6562 ;;		line 627 in file "bibliotecas/GPS.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;		None
  6565 ;; Auto vars:     Size  Location     Type
  6566 ;;  longitude      11    0[BANK0 ] unsigned char [11]
  6567 ;;  i               1   12[BANK0 ] unsigned char 
  6568 ;;  j               1   11[BANK0 ] unsigned char 
  6569 ;; Return value:  Size  Location     Type
  6570 ;;                  1    wreg      void 
  6571 ;; Registers used:
  6572 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6573 ;; Tracked objects:
  6574 ;;		On entry : 0/1
  6575 ;;		On exit  : 3F/0
  6576 ;;		Unchanged: 0/0
  6577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6578 ;;      Params:         0       0       0       0       0       0       0       0       0
  6579 ;;      Locals:         0      13       0       0       0       0       0       0       0
  6580 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6581 ;;      Totals:         1      13       0       0       0       0       0       0       0
  6582 ;;Total ram usage:       14 bytes
  6583 ;; Hardware stack levels used:    1
  6584 ;; Hardware stack levels required when called:    7
  6585 ;; This function calls:
  6586 ;;		_armazena_ltlo
  6587 ;; This function is called by:
  6588 ;;		_verifica_fence
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           	psect	text37
  6593  004AB4                     __ptext37:
  6594                           	callstack 0
  6595  004AB4                     _longitude_to_convert:
  6596                           	callstack 20
  6597                           
  6598                           ;GPS.c: 629: unsigned char i,j;;GPS.c: 630: unsigned char longitude[11];;GPS.c: 633: j =
      +                           0;
  6599                           
  6600                           ; BSR set to: 1
  6601                           ;incstack = 0
  6602  004AB4  0E00               	movlw	0
  6603  004AB6  0100               	movlb	0	; () banked
  6604  004AB8  6F6B               	movwf	longitude_to_convert@j& (0+255),b
  6605                           
  6606                           ;GPS.c: 634: for(i=0; i<12; i++)
  6607  004ABA  0E00               	movlw	0
  6608  004ABC  6F6C               	movwf	longitude_to_convert@i& (0+255),b
  6609  004ABE                     l12801:
  6610                           
  6611                           ; BSR set to: 0
  6612                           ;GPS.c: 635: {;GPS.c: 636: if(rawLongitude[i] != '\0' && rawLongitude[i] != '-' && rawLo
      +                          ngitude[i]!= '.' && j <10)
  6613  004ABE  0EA3               	movlw	low _rawLongitude
  6614  004AC0  256C               	addwf	longitude_to_convert@i& (0+255),w,b
  6615  004AC2  6ED9               	movwf	fsr2l,c
  6616  004AC4  6ADA               	clrf	fsr2h,c
  6617  004AC6  0E01               	movlw	high _rawLongitude
  6618  004AC8  22DA               	addwfc	fsr2h,f,c
  6619  004ACA  50DF               	movf	indf2,w,c
  6620  004ACC  B4D8               	btfsc	status,2,c
  6621  004ACE  D024               	goto	l12813
  6622                           
  6623                           ; BSR set to: 0
  6624  004AD0  0EA3               	movlw	low _rawLongitude
  6625  004AD2  256C               	addwf	longitude_to_convert@i& (0+255),w,b
  6626  004AD4  6ED9               	movwf	fsr2l,c
  6627  004AD6  6ADA               	clrf	fsr2h,c
  6628  004AD8  0E01               	movlw	high _rawLongitude
  6629  004ADA  22DA               	addwfc	fsr2h,f,c
  6630  004ADC  0E2D               	movlw	45
  6631  004ADE  18DE               	xorwf	postinc2,w,c
  6632  004AE0  B4D8               	btfsc	status,2,c
  6633  004AE2  D01A               	goto	l12813
  6634                           
  6635                           ; BSR set to: 0
  6636  004AE4  0EA3               	movlw	low _rawLongitude
  6637  004AE6  256C               	addwf	longitude_to_convert@i& (0+255),w,b
  6638  004AE8  6ED9               	movwf	fsr2l,c
  6639  004AEA  6ADA               	clrf	fsr2h,c
  6640  004AEC  0E01               	movlw	high _rawLongitude
  6641  004AEE  22DA               	addwfc	fsr2h,f,c
  6642  004AF0  0E2E               	movlw	46
  6643  004AF2  18DE               	xorwf	postinc2,w,c
  6644  004AF4  B4D8               	btfsc	status,2,c
  6645  004AF6  D010               	goto	l12813
  6646                           
  6647                           ; BSR set to: 0
  6648  004AF8  0E0A               	movlw	10
  6649  004AFA  616B               	cpfslt	longitude_to_convert@j& (0+255),b
  6650  004AFC  D00D               	goto	l12813
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;GPS.c: 637: {;GPS.c: 639: longitude[j] = rawLongitude[i];
  6654  004AFE  0EA3               	movlw	low _rawLongitude
  6655  004B00  256C               	addwf	longitude_to_convert@i& (0+255),w,b
  6656  004B02  6ED9               	movwf	fsr2l,c
  6657  004B04  6ADA               	clrf	fsr2h,c
  6658  004B06  0E01               	movlw	high _rawLongitude
  6659  004B08  22DA               	addwfc	fsr2h,f,c
  6660  004B0A  516B               	movf	longitude_to_convert@j& (0+255),w,b
  6661  004B0C  0F60               	addlw	low longitude_to_convert@longitude
  6662  004B0E  6EE1               	movwf	fsr1l,c
  6663  004B10  6AE2               	clrf	fsr1h,c
  6664  004B12  CFDF FFE7          	movff	indf2,indf1
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;GPS.c: 640: j++;
  6668  004B16  2B6B               	incf	longitude_to_convert@j& (0+255),f,b
  6669  004B18                     l12813:
  6670                           
  6671                           ; BSR set to: 0
  6672  004B18  2B6C               	incf	longitude_to_convert@i& (0+255),f,b
  6673                           
  6674                           ; BSR set to: 0
  6675  004B1A  0E0B               	movlw	11
  6676  004B1C  656C               	cpfsgt	longitude_to_convert@i& (0+255),b
  6677  004B1E  D7CF               	goto	l12801
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;GPS.c: 641: };GPS.c: 642: };GPS.c: 643: armazena_ltlo(longitude, 0);
  6681  004B20  0E60               	movlw	low longitude_to_convert@longitude
  6682  004B22  6E3E               	movwf	armazena_ltlo@buffer^0,c
  6683  004B24  0E00               	movlw	0
  6684  004B26  6E3F               	movwf	armazena_ltlo@index^0,c
  6685  004B28  EC96  F024         	call	_armazena_ltlo	;wreg free
  6686                           
  6687                           ; BSR set to: 0
  6688  004B2C  0012               	return		;funcret
  6689  004B2E                     __end_of_longitude_to_convert:
  6690                           	callstack 0
  6691                           
  6692 ;; *************** function _latitude_to_convert *****************
  6693 ;; Defined at:
  6694 ;;		line 602 in file "bibliotecas/GPS.c"
  6695 ;; Parameters:    Size  Location     Type
  6696 ;;		None
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;  latitude        9    0[BANK0 ] unsigned char [9]
  6699 ;;  i               1   10[BANK0 ] unsigned char 
  6700 ;;  j               1    9[BANK0 ] unsigned char 
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  1    wreg      void 
  6703 ;; Registers used:
  6704 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6705 ;; Tracked objects:
  6706 ;;		On entry : 3F/0
  6707 ;;		On exit  : 3F/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6710 ;;      Params:         0       0       0       0       0       0       0       0       0
  6711 ;;      Locals:         0      11       0       0       0       0       0       0       0
  6712 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6713 ;;      Totals:         1      11       0       0       0       0       0       0       0
  6714 ;;Total ram usage:       12 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    7
  6717 ;; This function calls:
  6718 ;;		_armazena_ltlo
  6719 ;; This function is called by:
  6720 ;;		_verifica_fence
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           	psect	text38
  6725  004BA6                     __ptext38:
  6726                           	callstack 0
  6727  004BA6                     _latitude_to_convert:
  6728                           	callstack 20
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;GPS.c: 604: unsigned char i,j;;GPS.c: 605: unsigned char latitude[9];;GPS.c: 608: j = 0
      +                          ;
  6732                           
  6733                           ; BSR set to: 0
  6734                           ;incstack = 0
  6735  004BA6  0E00               	movlw	0
  6736  004BA8  6F69               	movwf	latitude_to_convert@j& (0+255),b
  6737                           
  6738                           ;GPS.c: 609: for(i=0; i<12; i++)
  6739  004BAA  0E00               	movlw	0
  6740  004BAC  6F6A               	movwf	latitude_to_convert@i& (0+255),b
  6741  004BAE                     l12777:
  6742                           
  6743                           ; BSR set to: 0
  6744                           ;GPS.c: 610: {;GPS.c: 611: if(rawLatitude[i] != '\0' && rawLatitude[i] != '-' && rawLati
      +                          tude[i]!= '.' && j <9)
  6745  004BAE  0EBC               	movlw	low _rawLatitude
  6746  004BB0  256A               	addwf	latitude_to_convert@i& (0+255),w,b
  6747  004BB2  6ED9               	movwf	fsr2l,c
  6748  004BB4  6ADA               	clrf	fsr2h,c
  6749  004BB6  0E01               	movlw	high _rawLatitude
  6750  004BB8  22DA               	addwfc	fsr2h,f,c
  6751  004BBA  50DF               	movf	indf2,w,c
  6752  004BBC  B4D8               	btfsc	status,2,c
  6753  004BBE  D024               	goto	l12789
  6754                           
  6755                           ; BSR set to: 0
  6756  004BC0  0EBC               	movlw	low _rawLatitude
  6757  004BC2  256A               	addwf	latitude_to_convert@i& (0+255),w,b
  6758  004BC4  6ED9               	movwf	fsr2l,c
  6759  004BC6  6ADA               	clrf	fsr2h,c
  6760  004BC8  0E01               	movlw	high _rawLatitude
  6761  004BCA  22DA               	addwfc	fsr2h,f,c
  6762  004BCC  0E2D               	movlw	45
  6763  004BCE  18DE               	xorwf	postinc2,w,c
  6764  004BD0  B4D8               	btfsc	status,2,c
  6765  004BD2  D01A               	goto	l12789
  6766                           
  6767                           ; BSR set to: 0
  6768  004BD4  0EBC               	movlw	low _rawLatitude
  6769  004BD6  256A               	addwf	latitude_to_convert@i& (0+255),w,b
  6770  004BD8  6ED9               	movwf	fsr2l,c
  6771  004BDA  6ADA               	clrf	fsr2h,c
  6772  004BDC  0E01               	movlw	high _rawLatitude
  6773  004BDE  22DA               	addwfc	fsr2h,f,c
  6774  004BE0  0E2E               	movlw	46
  6775  004BE2  18DE               	xorwf	postinc2,w,c
  6776  004BE4  B4D8               	btfsc	status,2,c
  6777  004BE6  D010               	goto	l12789
  6778                           
  6779                           ; BSR set to: 0
  6780  004BE8  0E09               	movlw	9
  6781  004BEA  6169               	cpfslt	latitude_to_convert@j& (0+255),b
  6782  004BEC  D00D               	goto	l12789
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;GPS.c: 612: {;GPS.c: 613: latitude[j] = rawLatitude[i];
  6786  004BEE  0EBC               	movlw	low _rawLatitude
  6787  004BF0  256A               	addwf	latitude_to_convert@i& (0+255),w,b
  6788  004BF2  6ED9               	movwf	fsr2l,c
  6789  004BF4  6ADA               	clrf	fsr2h,c
  6790  004BF6  0E01               	movlw	high _rawLatitude
  6791  004BF8  22DA               	addwfc	fsr2h,f,c
  6792  004BFA  5169               	movf	latitude_to_convert@j& (0+255),w,b
  6793  004BFC  0F60               	addlw	low latitude_to_convert@latitude
  6794  004BFE  6EE1               	movwf	fsr1l,c
  6795  004C00  6AE2               	clrf	fsr1h,c
  6796  004C02  CFDF FFE7          	movff	indf2,indf1
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;GPS.c: 614: j++;
  6800  004C06  2B69               	incf	latitude_to_convert@j& (0+255),f,b
  6801  004C08                     l12789:
  6802                           
  6803                           ; BSR set to: 0
  6804  004C08  2B6A               	incf	latitude_to_convert@i& (0+255),f,b
  6805                           
  6806                           ; BSR set to: 0
  6807  004C0A  0E0B               	movlw	11
  6808  004C0C  656A               	cpfsgt	latitude_to_convert@i& (0+255),b
  6809  004C0E  D7CF               	goto	l12777
  6810                           
  6811                           ; BSR set to: 0
  6812                           ;GPS.c: 615: };GPS.c: 616: };GPS.c: 617: armazena_ltlo(latitude, 1);
  6813  004C10  0E60               	movlw	low latitude_to_convert@latitude
  6814  004C12  6E3E               	movwf	armazena_ltlo@buffer^0,c
  6815  004C14  0E01               	movlw	1
  6816  004C16  6E3F               	movwf	armazena_ltlo@index^0,c
  6817  004C18  EC96  F024         	call	_armazena_ltlo	;wreg free
  6818                           
  6819                           ; BSR set to: 0
  6820  004C1C  0012               	return		;funcret
  6821  004C1E                     __end_of_latitude_to_convert:
  6822                           	callstack 0
  6823                           
  6824 ;; *************** function _armazena_ltlo *****************
  6825 ;; Defined at:
  6826 ;;		line 64 in file "bibliotecas/fence.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;  buffer          1   61[COMRAM] PTR unsigned char 
  6829 ;;		 -> longitude_to_convert@longitude(11), latitude_to_convert@latitude(9), 
  6830 ;;  index           1   62[COMRAM] unsigned char 
  6831 ;; Auto vars:     Size  Location     Type
  6832 ;;  i               1   64[COMRAM] unsigned char 
  6833 ;;  j               1   63[COMRAM] unsigned char 
  6834 ;; Return value:  Size  Location     Type
  6835 ;;                  1    wreg      void 
  6836 ;; Registers used:
  6837 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6838 ;; Tracked objects:
  6839 ;;		On entry : 3F/0
  6840 ;;		On exit  : 3F/0
  6841 ;;		Unchanged: 0/0
  6842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6843 ;;      Params:         2       0       0       0       0       0       0       0       0
  6844 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6845 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6846 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6847 ;;Total ram usage:        4 bytes
  6848 ;; Hardware stack levels used:    1
  6849 ;; Hardware stack levels required when called:    6
  6850 ;; This function calls:
  6851 ;;		_diferenca
  6852 ;; This function is called by:
  6853 ;;		_latitude_to_convert
  6854 ;;		_longitude_to_convert
  6855 ;; This function uses a non-reentrant model
  6856 ;;
  6857                           
  6858                           	psect	text39
  6859  00492C                     __ptext39:
  6860                           	callstack 0
  6861  00492C                     _armazena_ltlo:
  6862                           	callstack 20
  6863                           
  6864                           ; BSR set to: 0
  6865                           ;fence.c: 67: unsigned char i, j;;fence.c: 72: switch(index)
  6866                           
  6867                           ; BSR set to: 0
  6868                           ;incstack = 0
  6869  00492C  D038               	goto	l12223
  6870  00492E                     l12185:
  6871                           
  6872                           ; BSR set to: 0
  6873                           ;fence.c: 75: j = 0;
  6874  00492E  0E00               	movlw	0
  6875  004930  6E40               	movwf	armazena_ltlo@j^0,c
  6876                           
  6877                           ;fence.c: 76: for(i=0; i<10; i++)
  6878  004932  0E00               	movlw	0
  6879  004934  6E41               	movwf	armazena_ltlo@i^0,c
  6880  004936                     l12191:
  6881                           
  6882                           ; BSR set to: 0
  6883                           ;fence.c: 77: {;fence.c: 78: if(*buffer != '\0')
  6884  004936  503E               	movf	armazena_ltlo@buffer^0,w,c
  6885  004938  6ED9               	movwf	fsr2l,c
  6886  00493A  6ADA               	clrf	fsr2h,c
  6887  00493C  50DF               	movf	indf2,w,c
  6888  00493E  B4D8               	btfsc	status,2,c
  6889  004940  D00C               	goto	l12197
  6890                           
  6891                           ; BSR set to: 0
  6892                           ;fence.c: 79: {;fence.c: 81: dado[j] = *buffer;
  6893  004942  503E               	movf	armazena_ltlo@buffer^0,w,c
  6894  004944  6ED9               	movwf	fsr2l,c
  6895  004946  6ADA               	clrf	fsr2h,c
  6896  004948  0E00               	movlw	low _dado
  6897  00494A  2440               	addwf	armazena_ltlo@j^0,w,c
  6898  00494C  6EE1               	movwf	fsr1l,c
  6899  00494E  6AE2               	clrf	fsr1h,c
  6900  004950  0E01               	movlw	high _dado
  6901  004952  22E2               	addwfc	fsr1h,f,c
  6902  004954  CFDF FFE7          	movff	indf2,indf1
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;fence.c: 82: j++;
  6906  004958  2A40               	incf	armazena_ltlo@j^0,f,c
  6907  00495A                     l12197:
  6908                           
  6909                           ; BSR set to: 0
  6910                           ;fence.c: 83: };fence.c: 85: buffer++;
  6911  00495A  2A3E               	incf	armazena_ltlo@buffer^0,f,c
  6912                           
  6913                           ; BSR set to: 0
  6914  00495C  2A41               	incf	armazena_ltlo@i^0,f,c
  6915                           
  6916                           ; BSR set to: 0
  6917  00495E  0E09               	movlw	9
  6918  004960  6441               	cpfsgt	armazena_ltlo@i^0,c
  6919  004962  D7E9               	goto	l12191
  6920  004964  D021               	goto	l12225
  6921  004966                     l12203:
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;fence.c: 91: j = 0;
  6925  004966  0E00               	movlw	0
  6926  004968  6E40               	movwf	armazena_ltlo@j^0,c
  6927                           
  6928                           ;fence.c: 92: for(i=0; i<11; i++)
  6929  00496A  0E00               	movlw	0
  6930  00496C  6E41               	movwf	armazena_ltlo@i^0,c
  6931  00496E                     l12209:
  6932                           
  6933                           ; BSR set to: 0
  6934                           ;fence.c: 93: {;fence.c: 94: if(*buffer != '\0')
  6935  00496E  503E               	movf	armazena_ltlo@buffer^0,w,c
  6936  004970  6ED9               	movwf	fsr2l,c
  6937  004972  6ADA               	clrf	fsr2h,c
  6938  004974  50DF               	movf	indf2,w,c
  6939  004976  B4D8               	btfsc	status,2,c
  6940  004978  D00C               	goto	l12215
  6941                           
  6942                           ; BSR set to: 0
  6943                           ;fence.c: 95: {;fence.c: 97: dado[j] = *buffer;
  6944  00497A  503E               	movf	armazena_ltlo@buffer^0,w,c
  6945  00497C  6ED9               	movwf	fsr2l,c
  6946  00497E  6ADA               	clrf	fsr2h,c
  6947  004980  0E00               	movlw	low _dado
  6948  004982  2440               	addwf	armazena_ltlo@j^0,w,c
  6949  004984  6EE1               	movwf	fsr1l,c
  6950  004986  6AE2               	clrf	fsr1h,c
  6951  004988  0E01               	movlw	high _dado
  6952  00498A  22E2               	addwfc	fsr1h,f,c
  6953  00498C  CFDF FFE7          	movff	indf2,indf1
  6954                           
  6955                           ; BSR set to: 0
  6956                           ;fence.c: 98: j++;
  6957  004990  2A40               	incf	armazena_ltlo@j^0,f,c
  6958  004992                     l12215:
  6959                           
  6960                           ; BSR set to: 0
  6961                           ;fence.c: 99: };fence.c: 101: buffer++;
  6962  004992  2A3E               	incf	armazena_ltlo@buffer^0,f,c
  6963                           
  6964                           ; BSR set to: 0
  6965  004994  2A41               	incf	armazena_ltlo@i^0,f,c
  6966                           
  6967                           ; BSR set to: 0
  6968  004996  0E0A               	movlw	10
  6969  004998  6441               	cpfsgt	armazena_ltlo@i^0,c
  6970  00499A  D7E9               	goto	l12209
  6971  00499C  D005               	goto	l12225
  6972  00499E                     l12223:
  6973                           
  6974                           ; BSR set to: 0
  6975  00499E  503F               	movf	armazena_ltlo@index^0,w,c
  6976                           
  6977                           ; Switch size 1, requested type "simple"
  6978                           ; Number of cases is 1, Range of values is 1 to 1
  6979                           ; switch strategies available:
  6980                           ; Name         Instructions Cycles
  6981                           ; simple_byte            4     3 (average)
  6982                           ;	Chosen strategy is simple_byte
  6983  0049A0  0A01               	xorlw	1	; case 1
  6984  0049A2  B4D8               	btfsc	status,2,c
  6985  0049A4  D7C4               	goto	l12185
  6986  0049A6  D7DF               	goto	l12203
  6987  0049A8                     l12225:
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;fence.c: 108: diferenca(index);
  6991  0049A8  503F               	movf	armazena_ltlo@index^0,w,c
  6992  0049AA  EC63  F020         	call	_diferenca
  6993                           
  6994                           ; BSR set to: 0
  6995  0049AE  0012               	return		;funcret
  6996  0049B0                     __end_of_armazena_ltlo:
  6997                           	callstack 0
  6998                           
  6999 ;; *************** function _diferenca *****************
  7000 ;; Defined at:
  7001 ;;		line 145 in file "bibliotecas/fence.c"
  7002 ;; Parameters:    Size  Location     Type
  7003 ;;  index           1    wreg     unsigned char 
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;  index           1   52[COMRAM] unsigned char 
  7006 ;;  valor_long      4   57[COMRAM] unsigned long 
  7007 ;;  valor_lat       4   53[COMRAM] unsigned long 
  7008 ;; Return value:  Size  Location     Type
  7009 ;;                  1    wreg      void 
  7010 ;; Registers used:
  7011 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7012 ;; Tracked objects:
  7013 ;;		On entry : 3F/0
  7014 ;;		On exit  : 3F/0
  7015 ;;		Unchanged: 0/0
  7016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7017 ;;      Params:         0       0       0       0       0       0       0       0       0
  7018 ;;      Locals:         9       0       0       0       0       0       0       0       0
  7019 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7020 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7021 ;;Total ram usage:        9 bytes
  7022 ;; Hardware stack levels used:    1
  7023 ;; Hardware stack levels required when called:    5
  7024 ;; This function calls:
  7025 ;;		_convert_to_int
  7026 ;;		_convert_to_int_point_lat
  7027 ;;		_convert_to_int_point_long
  7028 ;; This function is called by:
  7029 ;;		_armazena_ltlo
  7030 ;; This function uses a non-reentrant model
  7031 ;;
  7032                           
  7033                           	psect	text40
  7034  0040C6                     __ptext40:
  7035                           	callstack 0
  7036  0040C6                     _diferenca:
  7037                           	callstack 20
  7038                           
  7039                           ; BSR set to: 0
  7040                           ;incstack = 0
  7041                           ;diferenca@index stored from wreg
  7042  0040C6  6E35               	movwf	diferenca@index^0,c
  7043                           
  7044                           ;fence.c: 147: unsigned long int valor_lat, valor_long;;fence.c: 149: switch(index)
  7045  0040C8  D062               	goto	l12113
  7046  0040CA                     l12099:
  7047                           
  7048                           ;fence.c: 152: valor_lat = convert_to_int_point_lat();
  7049  0040CA  EC36  F028         	call	_convert_to_int_point_lat	;wreg free
  7050  0040CE  C024  F036         	movff	?_convert_to_int_point_lat,diferenca@valor_lat
  7051  0040D2  C025  F037         	movff	?_convert_to_int_point_lat+1,diferenca@valor_lat+1
  7052  0040D6  C026  F038         	movff	?_convert_to_int_point_lat+2,diferenca@valor_lat+2
  7053  0040DA  C027  F039         	movff	?_convert_to_int_point_lat+3,diferenca@valor_lat+3
  7054                           
  7055                           ;fence.c: 153: poligono_ext[0].diff_lat = convert_to_int(fence_diff_lat[0]) - valor_lat;
  7056  0040DE  0E51               	movlw	low _fence_diff_lat
  7057  0040E0  6E24               	movwf	convert_to_int@p_buff^0,c
  7058  0040E2  0E61               	movlw	high _fence_diff_lat
  7059  0040E4  6E25               	movwf	(convert_to_int@p_buff+1)^0,c
  7060  0040E6  ECEB  F02C         	call	_convert_to_int	;wreg free
  7061  0040EA  5036               	movf	diferenca@valor_lat^0,w,c
  7062  0040EC  5C24               	subwf	?_convert_to_int^0,w,c
  7063  0040EE  0100               	movlb	0	; () banked
  7064  0040F0  6FE7               	movwf	_poligono_ext& (0+255),b
  7065  0040F2  5037               	movf	(diferenca@valor_lat+1)^0,w,c
  7066  0040F4  5825               	subwfb	(?_convert_to_int+1)^0,w,c
  7067  0040F6  6FE8               	movwf	(_poligono_ext+1)& (0+255),b
  7068  0040F8  5038               	movf	(diferenca@valor_lat+2)^0,w,c
  7069  0040FA  5826               	subwfb	(?_convert_to_int+2)^0,w,c
  7070  0040FC  6FE9               	movwf	(_poligono_ext+2)& (0+255),b
  7071  0040FE  5039               	movf	(diferenca@valor_lat+3)^0,w,c
  7072  004100  5827               	subwfb	(?_convert_to_int+3)^0,w,c
  7073  004102  6FEA               	movwf	(_poligono_ext+3)& (0+255),b
  7074                           
  7075                           ; BSR set to: 0
  7076                           ;fence.c: 154: poligono_ext[1].diff_lat = convert_to_int(fence_diff_lat[2]) - valor_lat;
  7077  004104  0E65               	movlw	low (_fence_diff_lat+20)
  7078  004106  6E24               	movwf	convert_to_int@p_buff^0,c
  7079  004108  0E61               	movlw	high (_fence_diff_lat+20)
  7080  00410A  6E25               	movwf	(convert_to_int@p_buff+1)^0,c
  7081  00410C  ECEB  F02C         	call	_convert_to_int	;wreg free
  7082  004110  5036               	movf	diferenca@valor_lat^0,w,c
  7083  004112  5C24               	subwf	?_convert_to_int^0,w,c
  7084  004114  0100               	movlb	0	; () banked
  7085  004116  6FEF               	movwf	(_poligono_ext+8)& (0+255),b
  7086  004118  5037               	movf	(diferenca@valor_lat+1)^0,w,c
  7087  00411A  5825               	subwfb	(?_convert_to_int+1)^0,w,c
  7088  00411C  6FF0               	movwf	(_poligono_ext+9)& (0+255),b
  7089  00411E  5038               	movf	(diferenca@valor_lat+2)^0,w,c
  7090  004120  5826               	subwfb	(?_convert_to_int+2)^0,w,c
  7091  004122  6FF1               	movwf	(_poligono_ext+10)& (0+255),b
  7092  004124  5039               	movf	(diferenca@valor_lat+3)^0,w,c
  7093  004126  5827               	subwfb	(?_convert_to_int+3)^0,w,c
  7094  004128  6FF2               	movwf	(_poligono_ext+11)& (0+255),b
  7095                           
  7096                           ;fence.c: 157: break;
  7097  00412A  0012               	return	
  7098  00412C                     l12105:
  7099                           
  7100                           ;fence.c: 160: valor_long = convert_to_int_point_long();
  7101  00412C  EC0A  F028         	call	_convert_to_int_point_long	;wreg free
  7102  004130  C024  F03A         	movff	?_convert_to_int_point_long,diferenca@valor_long
  7103  004134  C025  F03B         	movff	?_convert_to_int_point_long+1,diferenca@valor_long+1
  7104  004138  C026  F03C         	movff	?_convert_to_int_point_long+2,diferenca@valor_long+2
  7105  00413C  C027  F03D         	movff	?_convert_to_int_point_long+3,diferenca@valor_long+3
  7106                           
  7107                           ;fence.c: 161: poligono_ext[0].diff_long = convert_to_int(fence_diff_long[0]) - valor_lo
      +                          ng;
  7108  004140  0E25               	movlw	low _fence_diff_long
  7109  004142  6E24               	movwf	convert_to_int@p_buff^0,c
  7110  004144  0E61               	movlw	high _fence_diff_long
  7111  004146  6E25               	movwf	(convert_to_int@p_buff+1)^0,c
  7112  004148  ECEB  F02C         	call	_convert_to_int	;wreg free
  7113  00414C  503A               	movf	diferenca@valor_long^0,w,c
  7114  00414E  5C24               	subwf	?_convert_to_int^0,w,c
  7115  004150  0100               	movlb	0	; () banked
  7116  004152  6FEB               	movwf	(_poligono_ext+4)& (0+255),b
  7117  004154  503B               	movf	(diferenca@valor_long+1)^0,w,c
  7118  004156  5825               	subwfb	(?_convert_to_int+1)^0,w,c
  7119  004158  6FEC               	movwf	(_poligono_ext+5)& (0+255),b
  7120  00415A  503C               	movf	(diferenca@valor_long+2)^0,w,c
  7121  00415C  5826               	subwfb	(?_convert_to_int+2)^0,w,c
  7122  00415E  6FED               	movwf	(_poligono_ext+6)& (0+255),b
  7123  004160  503D               	movf	(diferenca@valor_long+3)^0,w,c
  7124  004162  5827               	subwfb	(?_convert_to_int+3)^0,w,c
  7125  004164  6FEE               	movwf	(_poligono_ext+7)& (0+255),b
  7126                           
  7127                           ; BSR set to: 0
  7128                           ;fence.c: 162: poligono_ext[1].diff_long = convert_to_int(fence_diff_long[2]) - valor_lo
      +                          ng;
  7129  004166  0E3B               	movlw	low (_fence_diff_long+22)
  7130  004168  6E24               	movwf	convert_to_int@p_buff^0,c
  7131  00416A  0E61               	movlw	high (_fence_diff_long+22)
  7132  00416C  6E25               	movwf	(convert_to_int@p_buff+1)^0,c
  7133  00416E  ECEB  F02C         	call	_convert_to_int	;wreg free
  7134  004172  503A               	movf	diferenca@valor_long^0,w,c
  7135  004174  5C24               	subwf	?_convert_to_int^0,w,c
  7136  004176  0100               	movlb	0	; () banked
  7137  004178  6FF3               	movwf	(_poligono_ext+12)& (0+255),b
  7138  00417A  503B               	movf	(diferenca@valor_long+1)^0,w,c
  7139  00417C  5825               	subwfb	(?_convert_to_int+1)^0,w,c
  7140  00417E  6FF4               	movwf	(_poligono_ext+13)& (0+255),b
  7141  004180  503C               	movf	(diferenca@valor_long+2)^0,w,c
  7142  004182  5826               	subwfb	(?_convert_to_int+2)^0,w,c
  7143  004184  6FF5               	movwf	(_poligono_ext+14)& (0+255),b
  7144  004186  503D               	movf	(diferenca@valor_long+3)^0,w,c
  7145  004188  5827               	subwfb	(?_convert_to_int+3)^0,w,c
  7146  00418A  6FF6               	movwf	(_poligono_ext+15)& (0+255),b
  7147                           
  7148                           ;fence.c: 165: break;
  7149  00418C  0012               	return	
  7150  00418E                     l12113:
  7151  00418E  5035               	movf	diferenca@index^0,w,c
  7152                           
  7153                           ; Switch size 1, requested type "simple"
  7154                           ; Number of cases is 1, Range of values is 1 to 1
  7155                           ; switch strategies available:
  7156                           ; Name         Instructions Cycles
  7157                           ; simple_byte            4     3 (average)
  7158                           ;	Chosen strategy is simple_byte
  7159  004190  0A01               	xorlw	1	; case 1
  7160  004192  B4D8               	btfsc	status,2,c
  7161  004194  D79A               	goto	l12099
  7162  004196  D7CA               	goto	l12105
  7163  004198                     __end_of_diferenca:
  7164                           	callstack 0
  7165                           
  7166 ;; *************** function _convert_to_int_point_long *****************
  7167 ;; Defined at:
  7168 ;;		line 455 in file "bibliotecas/fence.c"
  7169 ;; Parameters:    Size  Location     Type
  7170 ;;		None
  7171 ;; Auto vars:     Size  Location     Type
  7172 ;;  convert_str_   10   39[COMRAM] unsigned char [10]
  7173 ;;  p               3    0        PTR unsigned char 
  7174 ;;  i               1   50[COMRAM] unsigned char 
  7175 ;;  j               1   49[COMRAM] unsigned char 
  7176 ;; Return value:  Size  Location     Type
  7177 ;;                  4   35[COMRAM] unsigned long 
  7178 ;; Registers used:
  7179 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7180 ;; Tracked objects:
  7181 ;;		On entry : 0/0
  7182 ;;		On exit  : 0/0
  7183 ;;		Unchanged: 0/0
  7184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7185 ;;      Params:         4       0       0       0       0       0       0       0       0
  7186 ;;      Locals:        12       0       0       0       0       0       0       0       0
  7187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7188 ;;      Totals:        16       0       0       0       0       0       0       0       0
  7189 ;;Total ram usage:       16 bytes
  7190 ;; Hardware stack levels used:    1
  7191 ;; Hardware stack levels required when called:    4
  7192 ;; This function calls:
  7193 ;;		_atol
  7194 ;; This function is called by:
  7195 ;;		_diferenca
  7196 ;; This function uses a non-reentrant model
  7197 ;;
  7198                           
  7199                           	psect	text41
  7200  005014                     __ptext41:
  7201                           	callstack 0
  7202  005014                     _convert_to_int_point_long:
  7203                           	callstack 20
  7204                           
  7205                           ;fence.c: 457: unsigned char *p;;;fence.c: 458: unsigned char i, j;;fence.c: 459: unsign
      +                          ed char convert_str_long[10];;fence.c: 462: j = 0;
  7206                           
  7207                           ; BSR set to: 0
  7208                           ;incstack = 0
  7209  005014  0E00               	movlw	0
  7210  005016  6E32               	movwf	convert_to_int_point_long@j^0,c
  7211                           
  7212                           ;fence.c: 463: for(i=0; i<10;i++)
  7213  005018  0E00               	movlw	0
  7214  00501A  6E33               	movwf	convert_to_int_point_long@i^0,c
  7215  00501C                     l11617:
  7216                           
  7217                           ;fence.c: 464: {;fence.c: 465: if(dado[i] != '\0')
  7218  00501C  0E00               	movlw	low _dado
  7219  00501E  2433               	addwf	convert_to_int_point_long@i^0,w,c
  7220  005020  6ED9               	movwf	fsr2l,c
  7221  005022  6ADA               	clrf	fsr2h,c
  7222  005024  0E01               	movlw	high _dado
  7223  005026  22DA               	addwfc	fsr2h,f,c
  7224  005028  50DF               	movf	indf2,w,c
  7225  00502A  B4D8               	btfsc	status,2,c
  7226  00502C  D00D               	goto	l11623
  7227                           
  7228                           ;fence.c: 466: {;fence.c: 468: convert_str_long[j] = dado[i];
  7229  00502E  0E00               	movlw	low _dado
  7230  005030  2433               	addwf	convert_to_int_point_long@i^0,w,c
  7231  005032  6ED9               	movwf	fsr2l,c
  7232  005034  6ADA               	clrf	fsr2h,c
  7233  005036  0E01               	movlw	high _dado
  7234  005038  22DA               	addwfc	fsr2h,f,c
  7235  00503A  5032               	movf	convert_to_int_point_long@j^0,w,c
  7236  00503C  0F28               	addlw	low convert_to_int_point_long@convert_str_long
  7237  00503E  6EE1               	movwf	fsr1l,c
  7238  005040  6AE2               	clrf	fsr1h,c
  7239  005042  CFDF FFE7          	movff	indf2,indf1
  7240                           
  7241                           ;fence.c: 469: j++;
  7242  005046  2A32               	incf	convert_to_int_point_long@j^0,f,c
  7243  005048                     l11623:
  7244  005048  2A33               	incf	convert_to_int_point_long@i^0,f,c
  7245  00504A  0E09               	movlw	9
  7246  00504C  6433               	cpfsgt	convert_to_int_point_long@i^0,c
  7247  00504E  D7E6               	goto	l11617
  7248                           
  7249                           ;fence.c: 470: };fence.c: 471: };fence.c: 474: return (atol(convert_str_long));
  7250  005050  0E28               	movlw	low convert_to_int_point_long@convert_str_long
  7251  005052  6E16               	movwf	atol@s^0,c
  7252  005054  6A17               	clrf	(atol@s+1)^0,c
  7253  005056  EC6C  F01C         	call	_atol	;wreg free
  7254  00505A  C016  F024         	movff	?_atol,?_convert_to_int_point_long
  7255  00505E  C017  F025         	movff	?_atol+1,?_convert_to_int_point_long+1
  7256  005062  C018  F026         	movff	?_atol+2,?_convert_to_int_point_long+2
  7257  005066  C019  F027         	movff	?_atol+3,?_convert_to_int_point_long+3
  7258  00506A  0012               	return		;funcret
  7259  00506C                     __end_of_convert_to_int_point_long:
  7260                           	callstack 0
  7261                           
  7262 ;; *************** function _convert_to_int_point_lat *****************
  7263 ;; Defined at:
  7264 ;;		line 428 in file "bibliotecas/fence.c"
  7265 ;; Parameters:    Size  Location     Type
  7266 ;;		None
  7267 ;; Auto vars:     Size  Location     Type
  7268 ;;  convert_str_    9   39[COMRAM] unsigned char [9]
  7269 ;;  temp_str_lat    2    0        PTR PTR unsigned char 
  7270 ;;		 -> NULL(0), 
  7271 ;;  i               1   51[COMRAM] unsigned char 
  7272 ;;  j               1   50[COMRAM] unsigned char 
  7273 ;; Return value:  Size  Location     Type
  7274 ;;                  4   35[COMRAM] long 
  7275 ;; Registers used:
  7276 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7277 ;; Tracked objects:
  7278 ;;		On entry : 0/0
  7279 ;;		On exit  : 0/0
  7280 ;;		Unchanged: 0/0
  7281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7282 ;;      Params:         4       0       0       0       0       0       0       0       0
  7283 ;;      Locals:        13       0       0       0       0       0       0       0       0
  7284 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7285 ;;      Totals:        17       0       0       0       0       0       0       0       0
  7286 ;;Total ram usage:       17 bytes
  7287 ;; Hardware stack levels used:    1
  7288 ;; Hardware stack levels required when called:    4
  7289 ;; This function calls:
  7290 ;;		_atol
  7291 ;; This function is called by:
  7292 ;;		_diferenca
  7293 ;; This function uses a non-reentrant model
  7294 ;;
  7295                           
  7296                           	psect	text42
  7297  00506C                     __ptext42:
  7298                           	callstack 0
  7299  00506C                     _convert_to_int_point_lat:
  7300                           	callstack 20
  7301                           
  7302                           ;fence.c: 431: unsigned char convert_str_lat[9];;fence.c: 433: unsigned char i, j;;fence
      +                          .c: 435: j= 0;
  7303                           
  7304                           ;incstack = 0
  7305  00506C  0E00               	movlw	0
  7306  00506E  6E33               	movwf	convert_to_int_point_lat@j^0,c
  7307                           
  7308                           ;fence.c: 436: for(i=0; i<10;i++)
  7309  005070  0E00               	movlw	0
  7310  005072  6E34               	movwf	convert_to_int_point_lat@i^0,c
  7311  005074                     l11591:
  7312                           
  7313                           ;fence.c: 437: {;fence.c: 438: if(dado[i] != '\0')
  7314  005074  0E00               	movlw	low _dado
  7315  005076  2434               	addwf	convert_to_int_point_lat@i^0,w,c
  7316  005078  6ED9               	movwf	fsr2l,c
  7317  00507A  6ADA               	clrf	fsr2h,c
  7318  00507C  0E01               	movlw	high _dado
  7319  00507E  22DA               	addwfc	fsr2h,f,c
  7320  005080  50DF               	movf	indf2,w,c
  7321  005082  B4D8               	btfsc	status,2,c
  7322  005084  D00D               	goto	l11597
  7323                           
  7324                           ;fence.c: 439: {;fence.c: 441: convert_str_lat[j] = dado[i];
  7325  005086  0E00               	movlw	low _dado
  7326  005088  2434               	addwf	convert_to_int_point_lat@i^0,w,c
  7327  00508A  6ED9               	movwf	fsr2l,c
  7328  00508C  6ADA               	clrf	fsr2h,c
  7329  00508E  0E01               	movlw	high _dado
  7330  005090  22DA               	addwfc	fsr2h,f,c
  7331  005092  5033               	movf	convert_to_int_point_lat@j^0,w,c
  7332  005094  0F28               	addlw	low convert_to_int_point_lat@convert_str_lat
  7333  005096  6EE1               	movwf	fsr1l,c
  7334  005098  6AE2               	clrf	fsr1h,c
  7335  00509A  CFDF FFE7          	movff	indf2,indf1
  7336                           
  7337                           ;fence.c: 442: j++;
  7338  00509E  2A33               	incf	convert_to_int_point_lat@j^0,f,c
  7339  0050A0                     l11597:
  7340  0050A0  2A34               	incf	convert_to_int_point_lat@i^0,f,c
  7341  0050A2  0E09               	movlw	9
  7342  0050A4  6434               	cpfsgt	convert_to_int_point_lat@i^0,c
  7343  0050A6  D7E6               	goto	l11591
  7344                           
  7345                           ;fence.c: 443: };fence.c: 444: };fence.c: 446: return (atol(convert_str_lat));
  7346  0050A8  0E28               	movlw	low convert_to_int_point_lat@convert_str_lat
  7347  0050AA  6E16               	movwf	atol@s^0,c
  7348  0050AC  6A17               	clrf	(atol@s+1)^0,c
  7349  0050AE  EC6C  F01C         	call	_atol	;wreg free
  7350  0050B2  C016  F024         	movff	?_atol,?_convert_to_int_point_lat
  7351  0050B6  C017  F025         	movff	?_atol+1,?_convert_to_int_point_lat+1
  7352  0050BA  C018  F026         	movff	?_atol+2,?_convert_to_int_point_lat+2
  7353  0050BE  C019  F027         	movff	?_atol+3,?_convert_to_int_point_lat+3
  7354  0050C2  0012               	return		;funcret
  7355  0050C4                     __end_of_convert_to_int_point_lat:
  7356                           	callstack 0
  7357                           
  7358 ;; *************** function _convert_to_int *****************
  7359 ;; Defined at:
  7360 ;;		line 420 in file "bibliotecas/fence.c"
  7361 ;; Parameters:    Size  Location     Type
  7362 ;;  p_buff          2   35[COMRAM] PTR const unsigned char 
  7363 ;;		 -> fence_diff_long(44), fence_diff_lat(40), 
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;		None
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  4   35[COMRAM] long 
  7368 ;; Registers used:
  7369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7375 ;;      Params:         4       0       0       0       0       0       0       0       0
  7376 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7377 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7378 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7379 ;;Total ram usage:        4 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; Hardware stack levels required when called:    4
  7382 ;; This function calls:
  7383 ;;		_atol
  7384 ;; This function is called by:
  7385 ;;		_diferenca
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           	psect	text43
  7390  0059D6                     __ptext43:
  7391                           	callstack 0
  7392  0059D6                     _convert_to_int:
  7393                           	callstack 20
  7394                           
  7395                           ;fence.c: 423: p_buff++;
  7396                           
  7397                           ;incstack = 0
  7398  0059D6  4A24               	infsnz	convert_to_int@p_buff^0,f,c
  7399  0059D8  2A25               	incf	(convert_to_int@p_buff+1)^0,f,c
  7400                           
  7401                           ;fence.c: 424: return atol(p_buff);
  7402  0059DA  C024  F016         	movff	convert_to_int@p_buff,atol@s
  7403  0059DE  C025  F017         	movff	convert_to_int@p_buff+1,atol@s+1
  7404  0059E2  EC6C  F01C         	call	_atol	;wreg free
  7405  0059E6  C016  F024         	movff	?_atol,?_convert_to_int
  7406  0059EA  C017  F025         	movff	?_atol+1,?_convert_to_int+1
  7407  0059EE  C018  F026         	movff	?_atol+2,?_convert_to_int+2
  7408  0059F2  C019  F027         	movff	?_atol+3,?_convert_to_int+3
  7409  0059F6  0012               	return		;funcret
  7410  0059F8                     __end_of_convert_to_int:
  7411                           	callstack 0
  7412                           
  7413 ;; *************** function _atol *****************
  7414 ;; Defined at:
  7415 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\atol.c"
  7416 ;; Parameters:    Size  Location     Type
  7417 ;;  s               2   21[COMRAM] PTR const unsigned char 
  7418 ;;		 -> convert_to_int_point_long@convert_str_long(10), convert_to_int_point_lat@convert_str_lat(9), fence_diff_long(44)
      +, fence_diff_lat(40), 
  7419 ;; Auto vars:     Size  Location     Type
  7420 ;;  a               4   30[COMRAM] long 
  7421 ;;  c               1   34[COMRAM] unsigned char 
  7422 ;;  sign            1   29[COMRAM] unsigned char 
  7423 ;; Return value:  Size  Location     Type
  7424 ;;                  4   21[COMRAM] long 
  7425 ;; Registers used:
  7426 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7427 ;; Tracked objects:
  7428 ;;		On entry : 0/0
  7429 ;;		On exit  : 0/0
  7430 ;;		Unchanged: 0/0
  7431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7432 ;;      Params:         4       0       0       0       0       0       0       0       0
  7433 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7434 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7435 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7436 ;;Total ram usage:       14 bytes
  7437 ;; Hardware stack levels used:    1
  7438 ;; Hardware stack levels required when called:    3
  7439 ;; This function calls:
  7440 ;;		___lmul
  7441 ;;		_isdigit
  7442 ;; This function is called by:
  7443 ;;		_convert_to_int
  7444 ;;		_convert_to_int_point_lat
  7445 ;;		_convert_to_int_point_long
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           	psect	text44
  7450  0038D8                     __ptext44:
  7451                           	callstack 0
  7452  0038D8                     _atol:
  7453                           	callstack 20
  7454                           
  7455                           ;incstack = 0
  7456  0038D8  C016  FFF6         	movff	atol@s,tblptrl
  7457  0038DC  C017  FFF7         	movff	atol@s+1,tblptrh
  7458  0038E0  6AF8               	clrf	tblptru,c
  7459  0038E2  0E07               	movlw	(high __ramtop+-1)
  7460  0038E4  64F7               	cpfsgt	tblptrh,c
  7461  0038E6  D003               	bra	u12877
  7462  0038E8  0008               	tblrd		*
  7463  0038EA  50F5               	movf	tablat,w,c
  7464  0038EC  D005               	bra	u12870
  7465  0038EE                     u12877:
  7466  0038EE  CFF6 FFE1          	movff	tblptrl,fsr1l
  7467  0038F2  CFF7 FFE2          	movff	tblptrh,fsr1h
  7468  0038F6  50E7               	movf	indf1,w,c
  7469  0038F8                     u12870:
  7470  0038F8  6E23               	movwf	atol@c^0,c
  7471  0038FA  4A16               	infsnz	atol@s^0,f,c
  7472  0038FC  2A17               	incf	(atol@s+1)^0,f,c
  7473  0038FE  0E20               	movlw	32
  7474  003900  1823               	xorwf	atol@c^0,w,c
  7475  003902  B4D8               	btfsc	status,2,c
  7476  003904  D7E9               	goto	_atol
  7477  003906  0E09               	movlw	9
  7478  003908  1823               	xorwf	atol@c^0,w,c
  7479  00390A  B4D8               	btfsc	status,2,c
  7480  00390C  D7E5               	goto	_atol
  7481  00390E  0E00               	movlw	0
  7482  003910  6E1F               	movwf	atol@a^0,c
  7483  003912  0E00               	movlw	0
  7484  003914  6E20               	movwf	(atol@a+1)^0,c
  7485  003916  0E00               	movlw	0
  7486  003918  6E21               	movwf	(atol@a+2)^0,c
  7487  00391A  0E00               	movlw	0
  7488  00391C  6E22               	movwf	(atol@a+3)^0,c
  7489  00391E  0E00               	movlw	0
  7490  003920  6E1E               	movwf	atol@sign^0,c
  7491  003922  0E2D               	movlw	45
  7492  003924  1823               	xorwf	atol@c^0,w,c
  7493  003926  A4D8               	btfss	status,2,c
  7494  003928  D015               	goto	l11321
  7495  00392A  2A1E               	incf	atol@sign^0,f,c
  7496  00392C                     l11317:
  7497  00392C  C016  FFF6         	movff	atol@s,tblptrl
  7498  003930  C017  FFF7         	movff	atol@s+1,tblptrh
  7499  003934  6AF8               	clrf	tblptru,c
  7500  003936  0E07               	movlw	(high __ramtop+-1)
  7501  003938  64F7               	cpfsgt	tblptrh,c
  7502  00393A  D003               	bra	u12917
  7503  00393C  0008               	tblrd		*
  7504  00393E  50F5               	movf	tablat,w,c
  7505  003940  D005               	bra	u12910
  7506  003942                     u12917:
  7507  003942  CFF6 FFE1          	movff	tblptrl,fsr1l
  7508  003946  CFF7 FFE2          	movff	tblptrh,fsr1h
  7509  00394A  50E7               	movf	indf1,w,c
  7510  00394C                     u12910:
  7511  00394C  6E23               	movwf	atol@c^0,c
  7512  00394E  4A16               	infsnz	atol@s^0,f,c
  7513  003950  2A17               	incf	(atol@s+1)^0,f,c
  7514  003952  D028               	goto	l11333
  7515  003954                     l11321:
  7516  003954  0E2B               	movlw	43
  7517  003956  1823               	xorwf	atol@c^0,w,c
  7518  003958  B4D8               	btfsc	status,2,c
  7519  00395A  D7E8               	goto	l11317
  7520  00395C  D023               	goto	l11333
  7521  00395E                     l11327:
  7522  00395E  C01F  F00A         	movff	atol@a,___lmul@multiplier
  7523  003962  C020  F00B         	movff	atol@a+1,___lmul@multiplier+1
  7524  003966  C021  F00C         	movff	atol@a+2,___lmul@multiplier+2
  7525  00396A  C022  F00D         	movff	atol@a+3,___lmul@multiplier+3
  7526  00396E  0E0A               	movlw	10
  7527  003970  6E0E               	movwf	___lmul@multiplicand^0,c
  7528  003972  0E00               	movlw	0
  7529  003974  6E0F               	movwf	(___lmul@multiplicand+1)^0,c
  7530  003976  0E00               	movlw	0
  7531  003978  6E10               	movwf	(___lmul@multiplicand+2)^0,c
  7532  00397A  0E00               	movlw	0
  7533  00397C  6E11               	movwf	(___lmul@multiplicand+3)^0,c
  7534  00397E  EC8E  F028         	call	___lmul	;wreg free
  7535  003982  C023  F01A         	movff	atol@c,??_atol
  7536  003986  0ED0               	movlw	208
  7537  003988  261A               	addwf	??_atol^0,f,c
  7538  00398A  501A               	movf	??_atol^0,w,c
  7539  00398C  240A               	addwf	?___lmul^0,w,c
  7540  00398E  6E1F               	movwf	atol@a^0,c
  7541  003990  0E00               	movlw	0
  7542  003992  200B               	addwfc	(?___lmul+1)^0,w,c
  7543  003994  6E20               	movwf	(atol@a+1)^0,c
  7544  003996  0E00               	movlw	0
  7545  003998  200C               	addwfc	(?___lmul+2)^0,w,c
  7546  00399A  6E21               	movwf	(atol@a+2)^0,c
  7547  00399C  0E00               	movlw	0
  7548  00399E  200D               	addwfc	(?___lmul+3)^0,w,c
  7549  0039A0  6E22               	movwf	(atol@a+3)^0,c
  7550  0039A2  D7C4               	goto	l11317
  7551  0039A4                     l11333:
  7552  0039A4  5023               	movf	atol@c^0,w,c
  7553  0039A6  ECA1  F02D         	call	_isdigit
  7554  0039AA  B0D8               	btfsc	status,0,c
  7555  0039AC  D7D8               	goto	l11327
  7556  0039AE  501E               	movf	atol@sign^0,w,c
  7557  0039B0  B4D8               	btfsc	status,2,c
  7558  0039B2  D01A               	goto	l2441
  7559  0039B4  C01F  F01A         	movff	atol@a,??_atol
  7560  0039B8  C020  F01B         	movff	atol@a+1,??_atol+1
  7561  0039BC  C021  F01C         	movff	atol@a+2,??_atol+2
  7562  0039C0  C022  F01D         	movff	atol@a+3,??_atol+3
  7563  0039C4  1E1A               	comf	??_atol^0,f,c
  7564  0039C6  1E1B               	comf	(??_atol+1)^0,f,c
  7565  0039C8  1E1C               	comf	(??_atol+2)^0,f,c
  7566  0039CA  1E1D               	comf	(??_atol+3)^0,f,c
  7567  0039CC  2A1A               	incf	??_atol^0,f,c
  7568  0039CE  0E00               	movlw	0
  7569  0039D0  221B               	addwfc	(??_atol+1)^0,f,c
  7570  0039D2  221C               	addwfc	(??_atol+2)^0,f,c
  7571  0039D4  221D               	addwfc	(??_atol+3)^0,f,c
  7572  0039D6  C01A  F016         	movff	??_atol,?_atol
  7573  0039DA  C01B  F017         	movff	??_atol+1,?_atol+1
  7574  0039DE  C01C  F018         	movff	??_atol+2,?_atol+2
  7575  0039E2  C01D  F019         	movff	??_atol+3,?_atol+3
  7576  0039E6  0012               	return	
  7577  0039E8                     l2441:
  7578  0039E8  C01F  F016         	movff	atol@a,?_atol
  7579  0039EC  C020  F017         	movff	atol@a+1,?_atol+1
  7580  0039F0  C021  F018         	movff	atol@a+2,?_atol+2
  7581  0039F4  C022  F019         	movff	atol@a+3,?_atol+3
  7582  0039F8  0012               	return		;funcret
  7583  0039FA                     __end_of_atol:
  7584                           	callstack 0
  7585                           
  7586 ;; *************** function _itoa *****************
  7587 ;; Defined at:
  7588 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\itoa.c"
  7589 ;; Parameters:    Size  Location     Type
  7590 ;;  buf             2   25[COMRAM] PTR unsigned char 
  7591 ;;		 -> disparo_gravacao@velocidade(12), escreve_inteiro_uart@valor_final(7), 
  7592 ;;  val             2   27[COMRAM] int 
  7593 ;;  base            2   29[COMRAM] int 
  7594 ;; Auto vars:     Size  Location     Type
  7595 ;;  cp              2    0        PTR unsigned char 
  7596 ;;		 -> disparo_gravacao@velocidade(12), escreve_inteiro_uart@valor_final(7), 
  7597 ;; Return value:  Size  Location     Type
  7598 ;;                  2   25[COMRAM] PTR unsigned char 
  7599 ;; Registers used:
  7600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7601 ;; Tracked objects:
  7602 ;;		On entry : 3F/2
  7603 ;;		On exit  : 0/0
  7604 ;;		Unchanged: 0/0
  7605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7606 ;;      Params:         6       0       0       0       0       0       0       0       0
  7607 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7608 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7609 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7610 ;;Total ram usage:        8 bytes
  7611 ;; Hardware stack levels used:    1
  7612 ;; Hardware stack levels required when called:    4
  7613 ;; This function calls:
  7614 ;;		_utoa
  7615 ;; This function is called by:
  7616 ;;		_disparo_gravacao
  7617 ;; This function uses a non-reentrant model
  7618 ;;
  7619                           
  7620                           	psect	text45
  7621  005670                     __ptext45:
  7622                           	callstack 0
  7623  005670                     _itoa:
  7624                           	callstack 24
  7625                           
  7626                           ; BSR set to: 2
  7627                           
  7628                           ;incstack = 0
  7629  005670  AE1D               	btfss	(itoa@val+1)^0,7,c
  7630  005672  D00C               	goto	l13773
  7631                           
  7632                           ; BSR set to: 2
  7633  005674  C01A  FFD9         	movff	itoa@buf,fsr2l
  7634  005678  C01B  FFDA         	movff	itoa@buf+1,fsr2h
  7635  00567C  0E2D               	movlw	45
  7636  00567E  6EDF               	movwf	indf2,c
  7637                           
  7638                           ; BSR set to: 2
  7639  005680  4A1A               	infsnz	itoa@buf^0,f,c
  7640  005682  2A1B               	incf	(itoa@buf+1)^0,f,c
  7641                           
  7642                           ; BSR set to: 2
  7643  005684  6C1C               	negf	itoa@val^0,c
  7644  005686  1E1D               	comf	(itoa@val+1)^0,f,c
  7645  005688  B0D8               	btfsc	status,0,c
  7646  00568A  2A1D               	incf	(itoa@val+1)^0,f,c
  7647  00568C                     l13773:
  7648                           
  7649                           ; BSR set to: 2
  7650  00568C  C01A  F011         	movff	itoa@buf,utoa@buf
  7651  005690  C01B  F012         	movff	itoa@buf+1,utoa@buf+1
  7652  005694  C01C  F013         	movff	itoa@val,utoa@val
  7653  005698  C01D  F014         	movff	itoa@val+1,utoa@val+1
  7654  00569C  C01E  F015         	movff	itoa@base,utoa@base
  7655  0056A0  C01F  F016         	movff	itoa@base+1,utoa@base+1
  7656  0056A4  EC37  F022         	call	_utoa	;wreg free
  7657  0056A8  0012               	return		;funcret
  7658  0056AA                     __end_of_itoa:
  7659                           	callstack 0
  7660                           
  7661 ;; *************** function _utoa *****************
  7662 ;; Defined at:
  7663 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\itoa.c"
  7664 ;; Parameters:    Size  Location     Type
  7665 ;;  buf             2   16[COMRAM] PTR unsigned char 
  7666 ;;		 -> disparo_gravacao@velocidade(12), escreve_inteiro_uart@valor_final(7), 
  7667 ;;  val             2   18[COMRAM] unsigned int 
  7668 ;;  base            2   20[COMRAM] int 
  7669 ;; Auto vars:     Size  Location     Type
  7670 ;;  v               2   22[COMRAM] unsigned int 
  7671 ;;  c               1   24[COMRAM] unsigned char 
  7672 ;; Return value:  Size  Location     Type
  7673 ;;                  2   16[COMRAM] PTR unsigned char 
  7674 ;; Registers used:
  7675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7676 ;; Tracked objects:
  7677 ;;		On entry : 3F/2
  7678 ;;		On exit  : 0/0
  7679 ;;		Unchanged: 0/0
  7680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7681 ;;      Params:         6       0       0       0       0       0       0       0       0
  7682 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7683 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7684 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7685 ;;Total ram usage:        9 bytes
  7686 ;; Hardware stack levels used:    1
  7687 ;; Hardware stack levels required when called:    3
  7688 ;; This function calls:
  7689 ;;		___lwdiv
  7690 ;;		___lwmod
  7691 ;; This function is called by:
  7692 ;;		_itoa
  7693 ;; This function uses a non-reentrant model
  7694 ;;
  7695                           
  7696                           	psect	text46
  7697  00446E                     __ptext46:
  7698                           	callstack 0
  7699  00446E                     _utoa:
  7700                           	callstack 24
  7701                           
  7702                           ; BSR set to: 2
  7703                           
  7704                           ;incstack = 0
  7705  00446E  C013  F017         	movff	utoa@val,utoa@v
  7706  004472  C014  F018         	movff	utoa@val+1,utoa@v+1
  7707  004476                     l13737:
  7708  004476  C017  F00A         	movff	utoa@v,___lwdiv@dividend
  7709  00447A  C018  F00B         	movff	utoa@v+1,___lwdiv@dividend+1
  7710  00447E  C015  F00C         	movff	utoa@base,___lwdiv@divisor
  7711  004482  C016  F00D         	movff	utoa@base+1,___lwdiv@divisor+1
  7712  004486  ECB9  F028         	call	___lwdiv	;wreg free
  7713  00448A  C00A  F017         	movff	?___lwdiv,utoa@v
  7714  00448E  C00B  F018         	movff	?___lwdiv+1,utoa@v+1
  7715  004492  4A11               	infsnz	utoa@buf^0,f,c
  7716  004494  2A12               	incf	(utoa@buf+1)^0,f,c
  7717  004496  5017               	movf	utoa@v^0,w,c
  7718  004498  1018               	iorwf	(utoa@v+1)^0,w,c
  7719  00449A  A4D8               	btfss	status,2,c
  7720  00449C  D7EC               	goto	l13737
  7721  00449E  C011  FFD9         	movff	utoa@buf,fsr2l
  7722  0044A2  C012  FFDA         	movff	utoa@buf+1,fsr2h
  7723  0044A6  0E00               	movlw	0
  7724  0044A8  6EDF               	movwf	indf2,c
  7725  0044AA  0611               	decf	utoa@buf^0,f,c
  7726  0044AC  A0D8               	btfss	status,0,c
  7727  0044AE  0612               	decf	(utoa@buf+1)^0,f,c
  7728  0044B0                     l13747:
  7729  0044B0  C013  F00A         	movff	utoa@val,___lwmod@dividend
  7730  0044B4  C014  F00B         	movff	utoa@val+1,___lwmod@dividend+1
  7731  0044B8  C015  F00C         	movff	utoa@base,___lwmod@divisor
  7732  0044BC  C016  F00D         	movff	utoa@base+1,___lwmod@divisor+1
  7733  0044C0  EC78  F02A         	call	___lwmod	;wreg free
  7734  0044C4  500A               	movf	?___lwmod^0,w,c
  7735  0044C6  6E19               	movwf	utoa@c^0,c
  7736  0044C8  C013  F00A         	movff	utoa@val,___lwdiv@dividend
  7737  0044CC  C014  F00B         	movff	utoa@val+1,___lwdiv@dividend+1
  7738  0044D0  C015  F00C         	movff	utoa@base,___lwdiv@divisor
  7739  0044D4  C016  F00D         	movff	utoa@base+1,___lwdiv@divisor+1
  7740  0044D8  ECB9  F028         	call	___lwdiv	;wreg free
  7741  0044DC  C00A  F013         	movff	?___lwdiv,utoa@val
  7742  0044E0  C00B  F014         	movff	?___lwdiv+1,utoa@val+1
  7743  0044E4  0E09               	movlw	9
  7744  0044E6  6419               	cpfsgt	utoa@c^0,c
  7745  0044E8  D002               	goto	l2459
  7746  0044EA  0E07               	movlw	7
  7747  0044EC  2619               	addwf	utoa@c^0,f,c
  7748  0044EE                     l2459:
  7749  0044EE  0E30               	movlw	48
  7750  0044F0  2619               	addwf	utoa@c^0,f,c
  7751  0044F2  C011  FFD9         	movff	utoa@buf,fsr2l
  7752  0044F6  C012  FFDA         	movff	utoa@buf+1,fsr2h
  7753  0044FA  C019  FFDF         	movff	utoa@c,indf2
  7754  0044FE  0611               	decf	utoa@buf^0,f,c
  7755  004500  A0D8               	btfss	status,0,c
  7756  004502  0612               	decf	(utoa@buf+1)^0,f,c
  7757  004504  5013               	movf	utoa@val^0,w,c
  7758  004506  1014               	iorwf	(utoa@val+1)^0,w,c
  7759  004508  A4D8               	btfss	status,2,c
  7760  00450A  D7D2               	goto	l13747
  7761                           
  7762                           ;	Return value of _utoa is never used
  7763  00450C  4A11               	infsnz	utoa@buf^0,f,c
  7764  00450E  2A12               	incf	(utoa@buf+1)^0,f,c
  7765  004510  0012               	return		;funcret
  7766  004512                     __end_of_utoa:
  7767                           	callstack 0
  7768                           
  7769 ;; *************** function ___lwmod *****************
  7770 ;; Defined at:
  7771 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\lwmod.c"
  7772 ;; Parameters:    Size  Location     Type
  7773 ;;  dividend        2    9[COMRAM] unsigned int 
  7774 ;;  divisor         2   11[COMRAM] unsigned int 
  7775 ;; Auto vars:     Size  Location     Type
  7776 ;;  counter         1   13[COMRAM] unsigned char 
  7777 ;; Return value:  Size  Location     Type
  7778 ;;                  2    9[COMRAM] unsigned int 
  7779 ;; Registers used:
  7780 ;;		wreg, status,2, status,0
  7781 ;; Tracked objects:
  7782 ;;		On entry : 0/2
  7783 ;;		On exit  : 0/0
  7784 ;;		Unchanged: 0/0
  7785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7786 ;;      Params:         4       0       0       0       0       0       0       0       0
  7787 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7788 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7789 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7790 ;;Total ram usage:        5 bytes
  7791 ;; Hardware stack levels used:    1
  7792 ;; Hardware stack levels required when called:    2
  7793 ;; This function calls:
  7794 ;;		Nothing
  7795 ;; This function is called by:
  7796 ;;		_utoa
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           	psect	text47
  7801  0054F0                     __ptext47:
  7802                           	callstack 0
  7803  0054F0                     ___lwmod:
  7804                           	callstack 24
  7805                           
  7806                           ;incstack = 0
  7807  0054F0  500C               	movf	___lwmod@divisor^0,w,c
  7808  0054F2  100D               	iorwf	(___lwmod@divisor+1)^0,w,c
  7809  0054F4  B4D8               	btfsc	status,2,c
  7810  0054F6  D018               	goto	l2239
  7811  0054F8  0E01               	movlw	1
  7812  0054FA  6E0E               	movwf	___lwmod@counter^0,c
  7813  0054FC  D004               	goto	l12723
  7814  0054FE                     l12721:
  7815  0054FE  90D8               	bcf	status,0,c
  7816  005500  360C               	rlcf	___lwmod@divisor^0,f,c
  7817  005502  360D               	rlcf	(___lwmod@divisor+1)^0,f,c
  7818  005504  2A0E               	incf	___lwmod@counter^0,f,c
  7819  005506                     l12723:
  7820  005506  AE0D               	btfss	(___lwmod@divisor+1)^0,7,c
  7821  005508  D7FA               	goto	l12721
  7822  00550A                     u15150:
  7823  00550A  500C               	movf	___lwmod@divisor^0,w,c
  7824  00550C  5C0A               	subwf	___lwmod@dividend^0,w,c
  7825  00550E  500D               	movf	(___lwmod@divisor+1)^0,w,c
  7826  005510  580B               	subwfb	(___lwmod@dividend+1)^0,w,c
  7827  005512  A0D8               	btfss	status,0,c
  7828  005514  D004               	goto	l12729
  7829  005516  500C               	movf	___lwmod@divisor^0,w,c
  7830  005518  5E0A               	subwf	___lwmod@dividend^0,f,c
  7831  00551A  500D               	movf	(___lwmod@divisor+1)^0,w,c
  7832  00551C  5A0B               	subwfb	(___lwmod@dividend+1)^0,f,c
  7833  00551E                     l12729:
  7834  00551E  90D8               	bcf	status,0,c
  7835  005520  320D               	rrcf	(___lwmod@divisor+1)^0,f,c
  7836  005522  320C               	rrcf	___lwmod@divisor^0,f,c
  7837  005524  2E0E               	decfsz	___lwmod@counter^0,f,c
  7838  005526  D7F1               	goto	u15150
  7839  005528                     l2239:
  7840  005528  C00A  F00A         	movff	___lwmod@dividend,?___lwmod
  7841  00552C  C00B  F00B         	movff	___lwmod@dividend+1,?___lwmod+1
  7842  005530  0012               	return		;funcret
  7843  005532                     __end_of___lwmod:
  7844                           	callstack 0
  7845                           
  7846 ;; *************** function ___lwdiv *****************
  7847 ;; Defined at:
  7848 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
  7849 ;; Parameters:    Size  Location     Type
  7850 ;;  dividend        2    9[COMRAM] unsigned int 
  7851 ;;  divisor         2   11[COMRAM] unsigned int 
  7852 ;; Auto vars:     Size  Location     Type
  7853 ;;  quotient        2   14[COMRAM] unsigned int 
  7854 ;;  counter         1   13[COMRAM] unsigned char 
  7855 ;; Return value:  Size  Location     Type
  7856 ;;                  2    9[COMRAM] unsigned int 
  7857 ;; Registers used:
  7858 ;;		wreg, status,2, status,0
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/2
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7864 ;;      Params:         4       0       0       0       0       0       0       0       0
  7865 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7866 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7867 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7868 ;;Total ram usage:        7 bytes
  7869 ;; Hardware stack levels used:    1
  7870 ;; Hardware stack levels required when called:    2
  7871 ;; This function calls:
  7872 ;;		Nothing
  7873 ;; This function is called by:
  7874 ;;		_utoa
  7875 ;; This function uses a non-reentrant model
  7876 ;;
  7877                           
  7878                           	psect	text48
  7879  005172                     __ptext48:
  7880                           	callstack 0
  7881  005172                     ___lwdiv:
  7882                           	callstack 24
  7883                           
  7884                           ;incstack = 0
  7885  005172  0E00               	movlw	0
  7886  005174  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  7887  005176  0E00               	movlw	0
  7888  005178  6E0F               	movwf	___lwdiv@quotient^0,c
  7889  00517A  500C               	movf	___lwdiv@divisor^0,w,c
  7890  00517C  100D               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7891  00517E  B4D8               	btfsc	status,2,c
  7892  005180  D01C               	goto	l2229
  7893  005182  0E01               	movlw	1
  7894  005184  6E0E               	movwf	___lwdiv@counter^0,c
  7895  005186  D004               	goto	l12703
  7896  005188                     l12701:
  7897  005188  90D8               	bcf	status,0,c
  7898  00518A  360C               	rlcf	___lwdiv@divisor^0,f,c
  7899  00518C  360D               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7900  00518E  2A0E               	incf	___lwdiv@counter^0,f,c
  7901  005190                     l12703:
  7902  005190  AE0D               	btfss	(___lwdiv@divisor+1)^0,7,c
  7903  005192  D7FA               	goto	l12701
  7904  005194                     u15120:
  7905  005194  90D8               	bcf	status,0,c
  7906  005196  360F               	rlcf	___lwdiv@quotient^0,f,c
  7907  005198  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7908  00519A  500C               	movf	___lwdiv@divisor^0,w,c
  7909  00519C  5C0A               	subwf	___lwdiv@dividend^0,w,c
  7910  00519E  500D               	movf	(___lwdiv@divisor+1)^0,w,c
  7911  0051A0  580B               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7912  0051A2  A0D8               	btfss	status,0,c
  7913  0051A4  D005               	goto	l12713
  7914  0051A6  500C               	movf	___lwdiv@divisor^0,w,c
  7915  0051A8  5E0A               	subwf	___lwdiv@dividend^0,f,c
  7916  0051AA  500D               	movf	(___lwdiv@divisor+1)^0,w,c
  7917  0051AC  5A0B               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7918  0051AE  800F               	bsf	___lwdiv@quotient^0,0,c
  7919  0051B0                     l12713:
  7920  0051B0  90D8               	bcf	status,0,c
  7921  0051B2  320D               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7922  0051B4  320C               	rrcf	___lwdiv@divisor^0,f,c
  7923  0051B6  2E0E               	decfsz	___lwdiv@counter^0,f,c
  7924  0051B8  D7ED               	goto	u15120
  7925  0051BA                     l2229:
  7926  0051BA  C00F  F00A         	movff	___lwdiv@quotient,?___lwdiv
  7927  0051BE  C010  F00B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7928  0051C2  0012               	return		;funcret
  7929  0051C4                     __end_of___lwdiv:
  7930                           	callstack 0
  7931                           
  7932 ;; *************** function _grava_sd *****************
  7933 ;; Defined at:
  7934 ;;		line 538 in file "main.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;		None
  7937 ;; Auto vars:     Size  Location     Type
  7938 ;;		None
  7939 ;; Return value:  Size  Location     Type
  7940 ;;                  1    wreg      void 
  7941 ;; Registers used:
  7942 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7943 ;; Tracked objects:
  7944 ;;		On entry : 0/1
  7945 ;;		On exit  : 0/0
  7946 ;;		Unchanged: 0/0
  7947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7948 ;;      Params:         0       0       0       0       0       0       0       0       0
  7949 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7950 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7951 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7952 ;;Total ram usage:        0 bytes
  7953 ;; Hardware stack levels used:    1
  7954 ;; Hardware stack levels required when called:   15
  7955 ;; This function calls:
  7956 ;;		_desliga_SPI
  7957 ;;		_desliga_uart
  7958 ;;		_escrita_sdcard
  7959 ;;		_inicializa_SPI
  7960 ;;		_inicializa_uart
  7961 ;; This function is called by:
  7962 ;;		_disparo_gravacao
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           	psect	text49
  7967  005B96                     __ptext49:
  7968                           	callstack 0
  7969  005B96                     _grava_sd:
  7970                           	callstack 13
  7971                           
  7972                           ;main.c: 540: PORTBbits.RB3 = 0;
  7973                           
  7974                           ;incstack = 0
  7975  005B96  9681               	bcf	129,3,c	;volatile
  7976                           
  7977                           ;main.c: 541: desliga_uart();
  7978  005B98  ECEC  F02D         	call	_desliga_uart	;wreg free
  7979                           
  7980                           ;main.c: 542: inicializa_SPI();
  7981  005B9C  EC72  F02D         	call	_inicializa_SPI	;wreg free
  7982                           
  7983                           ;main.c: 543: escrita_sdcard();
  7984  005BA0  EC31  F01B         	call	_escrita_sdcard	;wreg free
  7985                           
  7986                           ;main.c: 544: desliga_SPI();
  7987  005BA4  EC0E  F02E         	call	_desliga_SPI	;wreg free
  7988                           
  7989                           ;main.c: 545: inicializa_uart();
  7990  005BA8  ECFC  F02C         	call	_inicializa_uart	;wreg free
  7991                           
  7992                           ;main.c: 546: PORTBbits.RB3 = 1;
  7993  005BAC  8681               	bsf	129,3,c	;volatile
  7994  005BAE  0012               	return		;funcret
  7995  005BB0                     __end_of_grava_sd:
  7996                           	callstack 0
  7997                           
  7998 ;; *************** function _inicializa_uart *****************
  7999 ;; Defined at:
  8000 ;;		line 206 in file "bibliotecas/uart.c"
  8001 ;; Parameters:    Size  Location     Type
  8002 ;;		None
  8003 ;; Auto vars:     Size  Location     Type
  8004 ;;		None
  8005 ;; Return value:  Size  Location     Type
  8006 ;;                  1    wreg      void 
  8007 ;; Registers used:
  8008 ;;		wreg, status,2, status,0, cstack
  8009 ;; Tracked objects:
  8010 ;;		On entry : 0/1
  8011 ;;		On exit  : 0/0
  8012 ;;		Unchanged: 0/0
  8013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8014 ;;      Params:         0       0       0       0       0       0       0       0       0
  8015 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8016 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8017 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8018 ;;Total ram usage:        0 bytes
  8019 ;; Hardware stack levels used:    1
  8020 ;; Hardware stack levels required when called:    4
  8021 ;; This function calls:
  8022 ;;		_configura_baudrate_uart
  8023 ;; This function is called by:
  8024 ;;		_main
  8025 ;;		_grava_sd
  8026 ;; This function uses a non-reentrant model
  8027 ;;
  8028                           
  8029                           	psect	text50
  8030  0059F8                     __ptext50:
  8031                           	callstack 0
  8032  0059F8                     _inicializa_uart:
  8033                           	callstack 26
  8034                           
  8035                           ;uart.c: 208: TRISCbits.RC6 = 0;
  8036                           
  8037                           ;incstack = 0
  8038  0059F8  9C94               	bcf	148,6,c	;volatile
  8039                           
  8040                           ;uart.c: 209: TRISCbits.RC7 = 0;
  8041  0059FA  9E94               	bcf	148,7,c	;volatile
  8042                           
  8043                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  8044  0059FC  0E80               	movlw	128
  8045  0059FE  6E18               	movwf	configura_baudrate_uart@baudrate^0,c
  8046  005A00  0E25               	movlw	37
  8047  005A02  6E19               	movwf	(configura_baudrate_uart@baudrate+1)^0,c
  8048  005A04  0E00               	movlw	0
  8049  005A06  6E1A               	movwf	(configura_baudrate_uart@baudrate+2)^0,c
  8050  005A08  0E00               	movlw	0
  8051  005A0A  6E1B               	movwf	(configura_baudrate_uart@baudrate+3)^0,c
  8052  005A0C  EC12  F01E         	call	_configura_baudrate_uart	;wreg free
  8053                           
  8054                           ;uart.c: 213: TXSTA = 0x20;
  8055  005A10  0E20               	movlw	32
  8056  005A12  6EAC               	movwf	172,c	;volatile
  8057                           
  8058                           ;uart.c: 214: RCSTA = 0x90;
  8059  005A14  0E90               	movlw	144
  8060  005A16  6EAB               	movwf	171,c	;volatile
  8061  005A18  0012               	return		;funcret
  8062  005A1A                     __end_of_inicializa_uart:
  8063                           	callstack 0
  8064                           
  8065 ;; *************** function _configura_baudrate_uart *****************
  8066 ;; Defined at:
  8067 ;;		line 50 in file "bibliotecas/uart.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;  baudrate        4   23[COMRAM] const long 
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;  x               2   35[COMRAM] unsigned int 
  8072 ;; Return value:  Size  Location     Type
  8073 ;;                  1    wreg      unsigned char 
  8074 ;; Registers used:
  8075 ;;		wreg, status,2, status,0, cstack
  8076 ;; Tracked objects:
  8077 ;;		On entry : 0/1
  8078 ;;		On exit  : 0/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8081 ;;      Params:         4       0       0       0       0       0       0       0       0
  8082 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8083 ;;      Temps:          8       0       0       0       0       0       0       0       0
  8084 ;;      Totals:        14       0       0       0       0       0       0       0       0
  8085 ;;Total ram usage:       14 bytes
  8086 ;; Hardware stack levels used:    1
  8087 ;; Hardware stack levels required when called:    3
  8088 ;; This function calls:
  8089 ;;		___aldiv
  8090 ;; This function is called by:
  8091 ;;		_inicializa_uart
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           	psect	text51
  8096  003C24                     __ptext51:
  8097                           	callstack 0
  8098  003C24                     _configura_baudrate_uart:
  8099                           	callstack 26
  8100                           
  8101                           ;uart.c: 52: unsigned int x;;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  8102                           
  8103                           ;incstack = 0
  8104  003C24  C018  F01C         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  8105  003C28  C019  F01D         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  8106  003C2C  C01A  F01E         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  8107  003C30  C01B  F01F         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  8108  003C34  0E06               	movlw	6
  8109  003C36                     u15055:
  8110  003C36  90D8               	bcf	status,0,c
  8111  003C38  361C               	rlcf	??_configura_baudrate_uart^0,f,c
  8112  003C3A  361D               	rlcf	(??_configura_baudrate_uart+1)^0,f,c
  8113  003C3C  361E               	rlcf	(??_configura_baudrate_uart+2)^0,f,c
  8114  003C3E  361F               	rlcf	(??_configura_baudrate_uart+3)^0,f,c
  8115  003C40  2EE8               	decfsz	wreg,f,c
  8116  003C42  D7F9               	goto	u15055
  8117  003C44  501C               	movf	??_configura_baudrate_uart^0,w,c
  8118  003C46  0800               	sublw	0
  8119  003C48  6E0A               	movwf	___aldiv@dividend^0,c
  8120  003C4A  0E6C               	movlw	108
  8121  003C4C  541D               	subfwb	(??_configura_baudrate_uart+1)^0,w,c
  8122  003C4E  6E0B               	movwf	(___aldiv@dividend+1)^0,c
  8123  003C50  0EDC               	movlw	220
  8124  003C52  541E               	subfwb	(??_configura_baudrate_uart+2)^0,w,c
  8125  003C54  6E0C               	movwf	(___aldiv@dividend+2)^0,c
  8126  003C56  0E02               	movlw	2
  8127  003C58  541F               	subfwb	(??_configura_baudrate_uart+3)^0,w,c
  8128  003C5A  6E0D               	movwf	(___aldiv@dividend+3)^0,c
  8129  003C5C  C018  F020         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  8130  003C60  C019  F021         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  8131  003C64  C01A  F022         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  8132  003C68  C01B  F023         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  8133  003C6C  0E06               	movlw	6
  8134  003C6E                     u15065:
  8135  003C6E  90D8               	bcf	status,0,c
  8136  003C70  3620               	rlcf	(??_configura_baudrate_uart+4)^0,f,c
  8137  003C72  3621               	rlcf	(??_configura_baudrate_uart+5)^0,f,c
  8138  003C74  3622               	rlcf	(??_configura_baudrate_uart+6)^0,f,c
  8139  003C76  3623               	rlcf	(??_configura_baudrate_uart+7)^0,f,c
  8140  003C78  2EE8               	decfsz	wreg,f,c
  8141  003C7A  D7F9               	goto	u15065
  8142  003C7C  C020  F00E         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  8143  003C80  C021  F00F         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  8144  003C84  C022  F010         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  8145  003C88  C023  F011         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  8146  003C8C  ECCC  F020         	call	___aldiv	;wreg free
  8147  003C90  C00A  F024         	movff	?___aldiv,configura_baudrate_uart@x
  8148  003C94  C00B  F025         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  8149                           
  8150                           ;uart.c: 55: if(x > 255)
  8151  003C98  0425               	decf	(configura_baudrate_uart@x+1)^0,w,c
  8152  003C9A  A0D8               	btfss	status,0,c
  8153  003C9C  D03B               	goto	l12691
  8154                           
  8155                           ;uart.c: 56: {;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  8156  003C9E  C018  F01C         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  8157  003CA2  C019  F01D         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  8158  003CA6  C01A  F01E         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  8159  003CAA  C01B  F01F         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  8160  003CAE  0E04               	movlw	4
  8161  003CB0                     u15085:
  8162  003CB0  90D8               	bcf	status,0,c
  8163  003CB2  361C               	rlcf	??_configura_baudrate_uart^0,f,c
  8164  003CB4  361D               	rlcf	(??_configura_baudrate_uart+1)^0,f,c
  8165  003CB6  361E               	rlcf	(??_configura_baudrate_uart+2)^0,f,c
  8166  003CB8  361F               	rlcf	(??_configura_baudrate_uart+3)^0,f,c
  8167  003CBA  2EE8               	decfsz	wreg,f,c
  8168  003CBC  D7F9               	goto	u15085
  8169  003CBE  501C               	movf	??_configura_baudrate_uart^0,w,c
  8170  003CC0  0800               	sublw	0
  8171  003CC2  6E0A               	movwf	___aldiv@dividend^0,c
  8172  003CC4  0E6C               	movlw	108
  8173  003CC6  541D               	subfwb	(??_configura_baudrate_uart+1)^0,w,c
  8174  003CC8  6E0B               	movwf	(___aldiv@dividend+1)^0,c
  8175  003CCA  0EDC               	movlw	220
  8176  003CCC  541E               	subfwb	(??_configura_baudrate_uart+2)^0,w,c
  8177  003CCE  6E0C               	movwf	(___aldiv@dividend+2)^0,c
  8178  003CD0  0E02               	movlw	2
  8179  003CD2  541F               	subfwb	(??_configura_baudrate_uart+3)^0,w,c
  8180  003CD4  6E0D               	movwf	(___aldiv@dividend+3)^0,c
  8181  003CD6  C018  F020         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  8182  003CDA  C019  F021         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  8183  003CDE  C01A  F022         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  8184  003CE2  C01B  F023         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  8185  003CE6  0E04               	movlw	4
  8186  003CE8                     u15095:
  8187  003CE8  90D8               	bcf	status,0,c
  8188  003CEA  3620               	rlcf	(??_configura_baudrate_uart+4)^0,f,c
  8189  003CEC  3621               	rlcf	(??_configura_baudrate_uart+5)^0,f,c
  8190  003CEE  3622               	rlcf	(??_configura_baudrate_uart+6)^0,f,c
  8191  003CF0  3623               	rlcf	(??_configura_baudrate_uart+7)^0,f,c
  8192  003CF2  2EE8               	decfsz	wreg,f,c
  8193  003CF4  D7F9               	goto	u15095
  8194  003CF6  C020  F00E         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  8195  003CFA  C021  F00F         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  8196  003CFE  C022  F010         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  8197  003D02  C023  F011         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  8198  003D06  ECCC  F020         	call	___aldiv	;wreg free
  8199  003D0A  C00A  F024         	movff	?___aldiv,configura_baudrate_uart@x
  8200  003D0E  C00B  F025         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  8201                           
  8202                           ;uart.c: 58: BRGH = 1;
  8203  003D12  84AC               	bsf	4012,2,c	;volatile
  8204  003D14                     l12691:
  8205                           
  8206                           ;uart.c: 59: };uart.c: 60: if(x < 256)
  8207  003D14  0425               	decf	(configura_baudrate_uart@x+1)^0,w,c
  8208  003D16  B0D8               	btfsc	status,0,c
  8209  003D18  0012               	return	
  8210                           
  8211                           ;uart.c: 61: {;uart.c: 62: SPBRG = x;
  8212  003D1A  C024  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  8213                           
  8214                           ;uart.c: 63: SYNC = 0;
  8215  003D1E  98AC               	bcf	4012,4,c	;volatile
  8216                           
  8217                           ;uart.c: 64: SPEN = 1;
  8218  003D20  8EAB               	bsf	4011,7,c	;volatile
  8219                           
  8220                           ;uart.c: 65: TRISCbits.RC7 = 1;
  8221  003D22  8E94               	bsf	148,7,c	;volatile
  8222                           
  8223                           ;uart.c: 66: TRISCbits.RC6 = 0;
  8224  003D24  9C94               	bcf	148,6,c	;volatile
  8225                           
  8226                           ;uart.c: 67: CREN = 1;
  8227  003D26  88AB               	bsf	4011,4,c	;volatile
  8228                           
  8229                           ;uart.c: 68: TXEN = 1;
  8230  003D28  8AAC               	bsf	4012,5,c	;volatile
  8231                           
  8232                           ;uart.c: 70: return (1);;	Return value of _configura_baudrate_uart is never used
  8233  003D2A  0012               	return		;funcret
  8234  003D2C                     __end_of_configura_baudrate_uart:
  8235                           	callstack 0
  8236                           
  8237 ;; *************** function ___aldiv *****************
  8238 ;; Defined at:
  8239 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\aldiv.c"
  8240 ;; Parameters:    Size  Location     Type
  8241 ;;  dividend        4    9[COMRAM] long 
  8242 ;;  divisor         4   13[COMRAM] long 
  8243 ;; Auto vars:     Size  Location     Type
  8244 ;;  quotient        4   19[COMRAM] long 
  8245 ;;  sign            1   18[COMRAM] unsigned char 
  8246 ;;  counter         1   17[COMRAM] unsigned char 
  8247 ;; Return value:  Size  Location     Type
  8248 ;;                  4    9[COMRAM] long 
  8249 ;; Registers used:
  8250 ;;		wreg, status,2, status,0
  8251 ;; Tracked objects:
  8252 ;;		On entry : 0/1
  8253 ;;		On exit  : 0/0
  8254 ;;		Unchanged: 0/0
  8255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8256 ;;      Params:         8       0       0       0       0       0       0       0       0
  8257 ;;      Locals:         6       0       0       0       0       0       0       0       0
  8258 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8259 ;;      Totals:        14       0       0       0       0       0       0       0       0
  8260 ;;Total ram usage:       14 bytes
  8261 ;; Hardware stack levels used:    1
  8262 ;; Hardware stack levels required when called:    2
  8263 ;; This function calls:
  8264 ;;		Nothing
  8265 ;; This function is called by:
  8266 ;;		_configura_baudrate_uart
  8267 ;; This function uses a non-reentrant model
  8268 ;;
  8269                           
  8270                           	psect	text52
  8271  004198                     __ptext52:
  8272                           	callstack 0
  8273  004198                     ___aldiv:
  8274                           	callstack 26
  8275                           
  8276                           ;incstack = 0
  8277  004198  0E00               	movlw	0
  8278  00419A  6E13               	movwf	___aldiv@sign^0,c
  8279  00419C  AE11               	btfss	(___aldiv@divisor+3)^0,7,c
  8280  00419E  D00A               	goto	l12123
  8281  0041A0  1E11               	comf	(___aldiv@divisor+3)^0,f,c
  8282  0041A2  1E10               	comf	(___aldiv@divisor+2)^0,f,c
  8283  0041A4  1E0F               	comf	(___aldiv@divisor+1)^0,f,c
  8284  0041A6  6C0E               	negf	___aldiv@divisor^0,c
  8285  0041A8  0E00               	movlw	0
  8286  0041AA  220F               	addwfc	(___aldiv@divisor+1)^0,f,c
  8287  0041AC  2210               	addwfc	(___aldiv@divisor+2)^0,f,c
  8288  0041AE  2211               	addwfc	(___aldiv@divisor+3)^0,f,c
  8289  0041B0  0E01               	movlw	1
  8290  0041B2  6E13               	movwf	___aldiv@sign^0,c
  8291  0041B4                     l12123:
  8292  0041B4  AE0D               	btfss	(___aldiv@dividend+3)^0,7,c
  8293  0041B6  D00A               	goto	l12129
  8294  0041B8  1E0D               	comf	(___aldiv@dividend+3)^0,f,c
  8295  0041BA  1E0C               	comf	(___aldiv@dividend+2)^0,f,c
  8296  0041BC  1E0B               	comf	(___aldiv@dividend+1)^0,f,c
  8297  0041BE  6C0A               	negf	___aldiv@dividend^0,c
  8298  0041C0  0E00               	movlw	0
  8299  0041C2  220B               	addwfc	(___aldiv@dividend+1)^0,f,c
  8300  0041C4  220C               	addwfc	(___aldiv@dividend+2)^0,f,c
  8301  0041C6  220D               	addwfc	(___aldiv@dividend+3)^0,f,c
  8302  0041C8  0E01               	movlw	1
  8303  0041CA  1A13               	xorwf	___aldiv@sign^0,f,c
  8304  0041CC                     l12129:
  8305  0041CC  0E00               	movlw	0
  8306  0041CE  6E14               	movwf	___aldiv@quotient^0,c
  8307  0041D0  0E00               	movlw	0
  8308  0041D2  6E15               	movwf	(___aldiv@quotient+1)^0,c
  8309  0041D4  0E00               	movlw	0
  8310  0041D6  6E16               	movwf	(___aldiv@quotient+2)^0,c
  8311  0041D8  0E00               	movlw	0
  8312  0041DA  6E17               	movwf	(___aldiv@quotient+3)^0,c
  8313  0041DC  500E               	movf	___aldiv@divisor^0,w,c
  8314  0041DE  100F               	iorwf	(___aldiv@divisor+1)^0,w,c
  8315  0041E0  1010               	iorwf	(___aldiv@divisor+2)^0,w,c
  8316  0041E2  1011               	iorwf	(___aldiv@divisor+3)^0,w,c
  8317  0041E4  B4D8               	btfsc	status,2,c
  8318  0041E6  D02A               	goto	l12151
  8319  0041E8  0E01               	movlw	1
  8320  0041EA  6E12               	movwf	___aldiv@counter^0,c
  8321  0041EC  D006               	goto	l12137
  8322  0041EE                     l12135:
  8323  0041EE  90D8               	bcf	status,0,c
  8324  0041F0  360E               	rlcf	___aldiv@divisor^0,f,c
  8325  0041F2  360F               	rlcf	(___aldiv@divisor+1)^0,f,c
  8326  0041F4  3610               	rlcf	(___aldiv@divisor+2)^0,f,c
  8327  0041F6  3611               	rlcf	(___aldiv@divisor+3)^0,f,c
  8328  0041F8  2A12               	incf	___aldiv@counter^0,f,c
  8329  0041FA                     l12137:
  8330  0041FA  AE11               	btfss	(___aldiv@divisor+3)^0,7,c
  8331  0041FC  D7F8               	goto	l12135
  8332  0041FE                     u14150:
  8333  0041FE  90D8               	bcf	status,0,c
  8334  004200  3614               	rlcf	___aldiv@quotient^0,f,c
  8335  004202  3615               	rlcf	(___aldiv@quotient+1)^0,f,c
  8336  004204  3616               	rlcf	(___aldiv@quotient+2)^0,f,c
  8337  004206  3617               	rlcf	(___aldiv@quotient+3)^0,f,c
  8338  004208  500E               	movf	___aldiv@divisor^0,w,c
  8339  00420A  5C0A               	subwf	___aldiv@dividend^0,w,c
  8340  00420C  500F               	movf	(___aldiv@divisor+1)^0,w,c
  8341  00420E  580B               	subwfb	(___aldiv@dividend+1)^0,w,c
  8342  004210  5010               	movf	(___aldiv@divisor+2)^0,w,c
  8343  004212  580C               	subwfb	(___aldiv@dividend+2)^0,w,c
  8344  004214  5011               	movf	(___aldiv@divisor+3)^0,w,c
  8345  004216  580D               	subwfb	(___aldiv@dividend+3)^0,w,c
  8346  004218  A0D8               	btfss	status,0,c
  8347  00421A  D009               	goto	l12147
  8348  00421C  500E               	movf	___aldiv@divisor^0,w,c
  8349  00421E  5E0A               	subwf	___aldiv@dividend^0,f,c
  8350  004220  500F               	movf	(___aldiv@divisor+1)^0,w,c
  8351  004222  5A0B               	subwfb	(___aldiv@dividend+1)^0,f,c
  8352  004224  5010               	movf	(___aldiv@divisor+2)^0,w,c
  8353  004226  5A0C               	subwfb	(___aldiv@dividend+2)^0,f,c
  8354  004228  5011               	movf	(___aldiv@divisor+3)^0,w,c
  8355  00422A  5A0D               	subwfb	(___aldiv@dividend+3)^0,f,c
  8356  00422C  8014               	bsf	___aldiv@quotient^0,0,c
  8357  00422E                     l12147:
  8358  00422E  90D8               	bcf	status,0,c
  8359  004230  3211               	rrcf	(___aldiv@divisor+3)^0,f,c
  8360  004232  3210               	rrcf	(___aldiv@divisor+2)^0,f,c
  8361  004234  320F               	rrcf	(___aldiv@divisor+1)^0,f,c
  8362  004236  320E               	rrcf	___aldiv@divisor^0,f,c
  8363  004238  2E12               	decfsz	___aldiv@counter^0,f,c
  8364  00423A  D7E1               	goto	u14150
  8365  00423C                     l12151:
  8366  00423C  5013               	movf	___aldiv@sign^0,w,c
  8367  00423E  B4D8               	btfsc	status,2,c
  8368  004240  D008               	goto	l12155
  8369  004242  1E17               	comf	(___aldiv@quotient+3)^0,f,c
  8370  004244  1E16               	comf	(___aldiv@quotient+2)^0,f,c
  8371  004246  1E15               	comf	(___aldiv@quotient+1)^0,f,c
  8372  004248  6C14               	negf	___aldiv@quotient^0,c
  8373  00424A  0E00               	movlw	0
  8374  00424C  2215               	addwfc	(___aldiv@quotient+1)^0,f,c
  8375  00424E  2216               	addwfc	(___aldiv@quotient+2)^0,f,c
  8376  004250  2217               	addwfc	(___aldiv@quotient+3)^0,f,c
  8377  004252                     l12155:
  8378  004252  C014  F00A         	movff	___aldiv@quotient,?___aldiv
  8379  004256  C015  F00B         	movff	___aldiv@quotient+1,?___aldiv+1
  8380  00425A  C016  F00C         	movff	___aldiv@quotient+2,?___aldiv+2
  8381  00425E  C017  F00D         	movff	___aldiv@quotient+3,?___aldiv+3
  8382  004262  0012               	return		;funcret
  8383  004264                     __end_of___aldiv:
  8384                           	callstack 0
  8385                           
  8386 ;; *************** function _inicializa_SPI *****************
  8387 ;; Defined at:
  8388 ;;		line 48 in file "bibliotecas/SPI.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;		None
  8391 ;; Auto vars:     Size  Location     Type
  8392 ;;		None
  8393 ;; Return value:  Size  Location     Type
  8394 ;;                  1    wreg      void 
  8395 ;; Registers used:
  8396 ;;		wreg, status,2, status,0
  8397 ;; Tracked objects:
  8398 ;;		On entry : 0/1
  8399 ;;		On exit  : 0/0
  8400 ;;		Unchanged: 0/0
  8401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8402 ;;      Params:         0       0       0       0       0       0       0       0       0
  8403 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8404 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8405 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8406 ;;Total ram usage:        0 bytes
  8407 ;; Hardware stack levels used:    1
  8408 ;; Hardware stack levels required when called:    2
  8409 ;; This function calls:
  8410 ;;		Nothing
  8411 ;; This function is called by:
  8412 ;;		_grava_sd
  8413 ;; This function uses a non-reentrant model
  8414 ;;
  8415                           
  8416                           	psect	text53
  8417  005AE4                     __ptext53:
  8418                           	callstack 0
  8419  005AE4                     _inicializa_SPI:
  8420                           	callstack 25
  8421                           
  8422                           ;SPI.c: 50: TRISBbits.RB1 = 0;
  8423                           
  8424                           ;incstack = 0
  8425  005AE4  9293               	bcf	147,1,c	;volatile
  8426                           
  8427                           ;SPI.c: 51: TRISBbits.RB5 = 0;
  8428  005AE6  9A93               	bcf	147,5,c	;volatile
  8429                           
  8430                           ;SPI.c: 52: TRISBbits.RB0 = 1;
  8431  005AE8  8093               	bsf	147,0,c	;volatile
  8432                           
  8433                           ;SPI.c: 53: TRISCbits.RC7 = 0;
  8434  005AEA  9E94               	bcf	148,7,c	;volatile
  8435                           
  8436                           ;SPI.c: 55: LATBbits.LATB5 = 1;
  8437  005AEC  8A8A               	bsf	138,5,c	;volatile
  8438                           
  8439                           ;SPI.c: 56: SSPSTAT &= 0x3F;
  8440  005AEE  0E3F               	movlw	63
  8441  005AF0  16C7               	andwf	199,f,c	;volatile
  8442                           
  8443                           ;SPI.c: 57: SSPCON1 = 0x00;
  8444  005AF2  0E00               	movlw	0
  8445  005AF4  6EC6               	movwf	198,c	;volatile
  8446                           
  8447                           ;SPI.c: 59: SSPSTATbits.SMP = 0;
  8448  005AF6  9EC7               	bcf	199,7,c	;volatile
  8449                           
  8450                           ;SPI.c: 60: SSPSTATbits.CKE = 1;
  8451  005AF8  8CC7               	bsf	199,6,c	;volatile
  8452                           
  8453                           ;SPI.c: 61: SSPCON1bits.CKP = 0;
  8454  005AFA  98C6               	bcf	198,4,c	;volatile
  8455                           
  8456                           ;SPI.c: 63: SSPCON1 = 0b00000011;
  8457  005AFC  0E03               	movlw	3
  8458  005AFE  6EC6               	movwf	198,c	;volatile
  8459                           
  8460                           ;SPI.c: 65: SSPCON1bits.SSPEN = 1;
  8461  005B00  8AC6               	bsf	198,5,c	;volatile
  8462  005B02  0012               	return		;funcret
  8463  005B04                     __end_of_inicializa_SPI:
  8464                           	callstack 0
  8465                           
  8466 ;; *************** function _escrita_sdcard *****************
  8467 ;; Defined at:
  8468 ;;		line 208 in file "bibliotecas/SDCard.c"
  8469 ;; Parameters:    Size  Location     Type
  8470 ;;		None
  8471 ;; Auto vars:     Size  Location     Type
  8472 ;;  fix_gps         3    0        PTR unsigned char 
  8473 ;;  bw              2    0        unsigned short 
  8474 ;;  j               1    0        unsigned char 
  8475 ;;  i               1    0        unsigned char 
  8476 ;; Return value:  Size  Location     Type
  8477 ;;                  1    wreg      void 
  8478 ;; Registers used:
  8479 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8480 ;; Tracked objects:
  8481 ;;		On entry : 0/1
  8482 ;;		On exit  : 0/0
  8483 ;;		Unchanged: 0/0
  8484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8485 ;;      Params:         0       0       0       0       0       0       0       0       0
  8486 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8487 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8488 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8489 ;;Total ram usage:        0 bytes
  8490 ;; Hardware stack levels used:    1
  8491 ;; Hardware stack levels required when called:   14
  8492 ;; This function calls:
  8493 ;;		_data_nome
  8494 ;;		_f_close
  8495 ;;		_f_lseek
  8496 ;;		_f_mount
  8497 ;;		_f_open
  8498 ;;		_fprintf
  8499 ;;		_gps
  8500 ;;		_hora_nome
  8501 ;;		_strcat
  8502 ;; This function is called by:
  8503 ;;		_grava_sd
  8504 ;; This function uses a non-reentrant model
  8505 ;;
  8506                           
  8507                           	psect	text54
  8508  003662                     __ptext54:
  8509                           	callstack 0
  8510  003662                     _escrita_sdcard:
  8511                           	callstack 13
  8512                           
  8513                           ;SDCard.c: 210: unsigned char *fix_gps;;SDCard.c: 211: unsigned char i, j;;SDCard.c: 212
      +                          : static unsigned char f_fix = 0;;SDCard.c: 213: WORD bw;;SDCard.c: 217: f_mount(0,&fs);
  8514                           
  8515                           ;incstack = 0
  8516  003662  0E96               	movlw	low _fs
  8517  003664  6E0A               	movwf	f_mount@fs^0,c
  8518  003666  0E03               	movlw	high _fs
  8519  003668  6E0B               	movwf	(f_mount@fs+1)^0,c
  8520  00366A  0E00               	movlw	0
  8521  00366C  ECCA  F029         	call	_f_mount
  8522                           
  8523                           ;SDCard.c: 218: if(!f_fix)
  8524  003670  5053               	movf	escrita_sdcard@f_fix^0,w,c
  8525  003672  A4D8               	btfss	status,2,c
  8526  003674  D023               	goto	l12989
  8527                           
  8528                           ;SDCard.c: 219: {;SDCard.c: 220: gps();
  8529  003676  EC71  F02B         	call	_gps	;wreg free
  8530                           
  8531                           ;SDCard.c: 221: if(data[0] != ' ' && hora[0] != ' ')
  8532  00367A  0E20               	movlw	32
  8533  00367C  0101               	movlb	1	; () banked
  8534  00367E  19D6               	xorwf	_data& (0+255),w,b
  8535  003680  B4D8               	btfsc	status,2,c
  8536  003682  D01C               	goto	l12989
  8537                           
  8538                           ; BSR set to: 1
  8539  003684  0E20               	movlw	32
  8540  003686  19C8               	xorwf	_hora& (0+255),w,b
  8541  003688  B4D8               	btfsc	status,2,c
  8542  00368A  D018               	goto	l12989
  8543                           
  8544                           ; BSR set to: 1
  8545                           ;SDCard.c: 222: {;SDCard.c: 223: data_nome(data);
  8546  00368C  0ED6               	movlw	low _data
  8547  00368E  6E0A               	movwf	data_nome@p_buff^0,c
  8548  003690  0E01               	movlw	high _data
  8549  003692  6E0B               	movwf	(data_nome@p_buff+1)^0,c
  8550  003694  EC8A  F02C         	call	_data_nome	;wreg free
  8551                           
  8552                           ;SDCard.c: 224: hora_nome(hora);
  8553  003698  0EC8               	movlw	low _hora
  8554  00369A  6E0A               	movwf	hora_nome@p_buff^0,c
  8555  00369C  0E01               	movlw	high _hora
  8556  00369E  6E0B               	movwf	(hora_nome@p_buff+1)^0,c
  8557  0036A0  EC60  F02C         	call	_hora_nome	;wreg free
  8558                           
  8559                           ; BSR set to: 1
  8560                           ;SDCard.c: 226: strcat(filename, ".tlm");
  8561  0036A4  0E56               	movlw	low _filename
  8562  0036A6  6E0A               	movwf	strcat@to^0,c
  8563  0036A8  0E02               	movlw	high _filename
  8564  0036AA  6E0B               	movwf	(strcat@to+1)^0,c
  8565  0036AC  0E69               	movlw	low STR_11
  8566  0036AE  6E0C               	movwf	strcat@from^0,c
  8567  0036B0  0E62               	movlw	high STR_11
  8568  0036B2  6E0D               	movwf	(strcat@from+1)^0,c
  8569  0036B4  EC12  F02A         	call	_strcat	;wreg free
  8570                           
  8571                           ; BSR set to: 1
  8572                           ;SDCard.c: 227: f_fix = 1;
  8573  0036B8  0E01               	movlw	1
  8574  0036BA  6E53               	movwf	escrita_sdcard@f_fix^0,c
  8575  0036BC                     l12989:
  8576                           
  8577                           ;SDCard.c: 228: };SDCard.c: 229: };SDCard.c: 231: if(f_fix)
  8578  0036BC  5053               	movf	escrita_sdcard@f_fix^0,w,c
  8579  0036BE  B4D8               	btfsc	status,2,c
  8580  0036C0  0012               	return	
  8581                           
  8582                           ;SDCard.c: 232: {;SDCard.c: 233: if (f_open(&fil, filename, 0x02 ) == FR_OK)
  8583  0036C2  0E7A               	movlw	low _fil
  8584  0036C4  0100               	movlb	0	; () banked
  8585  0036C6  6F98               	movwf	f_open@fp& (0+255),b
  8586  0036C8  0E01               	movlw	high _fil
  8587  0036CA  6F99               	movwf	(f_open@fp+1)& (0+255),b
  8588  0036CC  0E56               	movlw	low _filename
  8589  0036CE  6F9A               	movwf	f_open@path& (0+255),b
  8590  0036D0  0E02               	movlw	high _filename
  8591  0036D2  6F9B               	movwf	(f_open@path+1)& (0+255),b
  8592  0036D4  0E02               	movlw	2
  8593  0036D6  6F9C               	movwf	f_open@mode& (0+255),b
  8594  0036D8  EC20  F00B         	call	_f_open	;wreg free
  8595  0036DC  0900               	iorlw	0
  8596  0036DE  A4D8               	btfss	status,2,c
  8597  0036E0  D052               	goto	l13003
  8598                           
  8599                           ;SDCard.c: 234: {;SDCard.c: 236: f_lseek(&fil, ((&fil)->fsize));
  8600  0036E2  0E7A               	movlw	low _fil
  8601  0036E4  0100               	movlb	0	; () banked
  8602  0036E6  6F86               	movwf	f_lseek@fp& (0+255),b
  8603  0036E8  0E01               	movlw	high _fil
  8604  0036EA  6F87               	movwf	(f_lseek@fp+1)& (0+255),b
  8605  0036EC  C184  F088         	movff	_fil+10,f_lseek@ofs
  8606  0036F0  C185  F089         	movff	_fil+11,f_lseek@ofs+1
  8607  0036F4  C186  F08A         	movff	_fil+12,f_lseek@ofs+2
  8608  0036F8  C187  F08B         	movff	_fil+13,f_lseek@ofs+3
  8609  0036FC  EC79  F005         	call	_f_lseek	;wreg free
  8610                           
  8611                           ; BSR set to: 0
  8612                           ;SDCard.c: 237: fprintf(&fil, "v%s;lt%s;lo%s;", vel, lt, lo);
  8613  003700  0E7A               	movlw	low _fil
  8614  003702  6FB1               	movwf	fprintf@fil& (0+255),b
  8615  003704  0E01               	movlw	high _fil
  8616  003706  6FB2               	movwf	(fprintf@fil+1)& (0+255),b
  8617  003708  0E9E               	movlw	low STR_12
  8618  00370A  6FB3               	movwf	fprintf@str& (0+255),b
  8619  00370C  0E61               	movlw	high STR_12
  8620  00370E  6FB4               	movwf	(fprintf@str+1)& (0+255),b
  8621  003710  0EDC               	movlw	low _vel
  8622  003712  6FB5               	movwf	(?_fprintf+4)& (0+255),b
  8623  003714  0E01               	movlw	high _vel
  8624  003716  6FB6               	movwf	(?_fprintf+5)& (0+255),b
  8625  003718  0EB0               	movlw	low _lt
  8626  00371A  6FB7               	movwf	(?_fprintf+6)& (0+255),b
  8627  00371C  0E01               	movlw	high _lt
  8628  00371E  6FB8               	movwf	(?_fprintf+7)& (0+255),b
  8629  003720  0E96               	movlw	low _lo
  8630  003722  6FB9               	movwf	(?_fprintf+8)& (0+255),b
  8631  003724  0E01               	movlw	high _lo
  8632  003726  6FBA               	movwf	(?_fprintf+9)& (0+255),b
  8633  003728  EC79  F009         	call	_fprintf	;wreg free
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;SDCard.c: 239: fprintf(&fil, "r0;c0;k0;");
  8637  00372C  0E7A               	movlw	low _fil
  8638  00372E  6FB1               	movwf	fprintf@fil& (0+255),b
  8639  003730  0E01               	movlw	high _fil
  8640  003732  6FB2               	movwf	(fprintf@fil+1)& (0+255),b
  8641  003734  0EF8               	movlw	low STR_13
  8642  003736  6FB3               	movwf	fprintf@str& (0+255),b
  8643  003738  0E61               	movlw	high STR_13
  8644  00373A  6FB4               	movwf	(fprintf@str+1)& (0+255),b
  8645  00373C  EC79  F009         	call	_fprintf	;wreg free
  8646                           
  8647                           ; BSR set to: 0
  8648                           ;SDCard.c: 240: fprintf(&fil, "h%s;dN/A;", hora);
  8649  003740  0E7A               	movlw	low _fil
  8650  003742  6FB1               	movwf	fprintf@fil& (0+255),b
  8651  003744  0E01               	movlw	high _fil
  8652  003746  6FB2               	movwf	(fprintf@fil+1)& (0+255),b
  8653  003748  0E02               	movlw	low STR_14
  8654  00374A  6FB3               	movwf	fprintf@str& (0+255),b
  8655  00374C  0E62               	movlw	high STR_14
  8656  00374E  6FB4               	movwf	(fprintf@str+1)& (0+255),b
  8657  003750  0EC8               	movlw	low _hora
  8658  003752  6FB5               	movwf	(?_fprintf+4)& (0+255),b
  8659  003754  0E01               	movlw	high _hora
  8660  003756  6FB6               	movwf	(?_fprintf+5)& (0+255),b
  8661  003758  EC79  F009         	call	_fprintf	;wreg free
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;SDCard.c: 241: fprintf(&fil, "f%s;\n", fence);
  8665  00375C  0E7A               	movlw	low _fil
  8666  00375E  6FB1               	movwf	fprintf@fil& (0+255),b
  8667  003760  0E01               	movlw	high _fil
  8668  003762  6FB2               	movwf	(fprintf@fil+1)& (0+255),b
  8669  003764  0E59               	movlw	low STR_15
  8670  003766  6FB3               	movwf	fprintf@str& (0+255),b
  8671  003768  0E62               	movlw	high STR_15
  8672  00376A  6FB4               	movwf	(fprintf@str+1)& (0+255),b
  8673  00376C  0EE2               	movlw	low _fence
  8674  00376E  6FB5               	movwf	(?_fprintf+4)& (0+255),b
  8675  003770  0E01               	movlw	high _fence
  8676  003772  6FB6               	movwf	(?_fprintf+5)& (0+255),b
  8677  003774  EC79  F009         	call	_fprintf	;wreg free
  8678                           
  8679                           ;SDCard.c: 244: f_close(&fil);
  8680  003778  0E7A               	movlw	low _fil
  8681  00377A  6F69               	movwf	f_close@fp& (0+255),b
  8682  00377C  0E01               	movlw	high _fil
  8683  00377E  6F6A               	movwf	(f_close@fp+1)& (0+255),b
  8684  003780  EC4A  F02C         	call	_f_close	;wreg free
  8685                           
  8686                           ;SDCard.c: 245: }
  8687  003784  0012               	return	
  8688  003786                     l13003:
  8689                           
  8690                           ;SDCard.c: 246: else;SDCard.c: 247: {;SDCard.c: 248: f_open(&fil, filename, 0x08 );
  8691  003786  0E7A               	movlw	low _fil
  8692  003788  0100               	movlb	0	; () banked
  8693  00378A  6F98               	movwf	f_open@fp& (0+255),b
  8694  00378C  0E01               	movlw	high _fil
  8695  00378E  6F99               	movwf	(f_open@fp+1)& (0+255),b
  8696  003790  0E56               	movlw	low _filename
  8697  003792  6F9A               	movwf	f_open@path& (0+255),b
  8698  003794  0E02               	movlw	high _filename
  8699  003796  6F9B               	movwf	(f_open@path+1)& (0+255),b
  8700  003798  0E08               	movlw	8
  8701  00379A  6F9C               	movwf	f_open@mode& (0+255),b
  8702  00379C  EC20  F00B         	call	_f_open	;wreg free
  8703                           
  8704                           ;SDCard.c: 249: f_close(&fil);
  8705  0037A0  0E7A               	movlw	low _fil
  8706  0037A2  0100               	movlb	0	; () banked
  8707  0037A4  6F69               	movwf	f_close@fp& (0+255),b
  8708  0037A6  0E01               	movlw	high _fil
  8709  0037A8  6F6A               	movwf	(f_close@fp+1)& (0+255),b
  8710  0037AA  EC4A  F02C         	call	_f_close	;wreg free
  8711  0037AE  0012               	return		;funcret
  8712  0037B0                     __end_of_escrita_sdcard:
  8713                           	callstack 0
  8714                           
  8715 ;; *************** function _strcat *****************
  8716 ;; Defined at:
  8717 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strcat.c"
  8718 ;; Parameters:    Size  Location     Type
  8719 ;;  to              2    9[COMRAM] PTR unsigned char 
  8720 ;;		 -> filename(20), 
  8721 ;;  from            2   11[COMRAM] PTR const unsigned char 
  8722 ;;		 -> STR_11(5), 
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;  cp              2   13[COMRAM] PTR unsigned char 
  8725 ;;		 -> filename(20), 
  8726 ;; Return value:  Size  Location     Type
  8727 ;;                  2    9[COMRAM] PTR unsigned char 
  8728 ;; Registers used:
  8729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8730 ;; Tracked objects:
  8731 ;;		On entry : 3F/1
  8732 ;;		On exit  : 3F/1
  8733 ;;		Unchanged: 3F/0
  8734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8735 ;;      Params:         4       0       0       0       0       0       0       0       0
  8736 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8737 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8738 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8739 ;;Total ram usage:        6 bytes
  8740 ;; Hardware stack levels used:    1
  8741 ;; Hardware stack levels required when called:    2
  8742 ;; This function calls:
  8743 ;;		Nothing
  8744 ;; This function is called by:
  8745 ;;		_escrita_sdcard
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           	psect	text55
  8750  005424                     __ptext55:
  8751                           	callstack 0
  8752  005424                     _strcat:
  8753                           	callstack 24
  8754                           
  8755                           ; BSR set to: 1
  8756                           
  8757                           ;incstack = 0
  8758  005424  C00A  F00E         	movff	strcat@to,strcat@cp
  8759  005428  C00B  F00F         	movff	strcat@to+1,strcat@cp+1
  8760  00542C  D002               	goto	l12431
  8761  00542E                     l12429:
  8762                           
  8763                           ; BSR set to: 1
  8764  00542E  4A0E               	infsnz	strcat@cp^0,f,c
  8765  005430  2A0F               	incf	(strcat@cp+1)^0,f,c
  8766  005432                     l12431:
  8767                           
  8768                           ; BSR set to: 1
  8769  005432  C00E  FFD9         	movff	strcat@cp,fsr2l
  8770  005436  C00F  FFDA         	movff	strcat@cp+1,fsr2h
  8771  00543A  50DF               	movf	indf2,w,c
  8772  00543C  B4D8               	btfsc	status,2,c
  8773  00543E  D005               	goto	l12435
  8774  005440  D7F6               	goto	l12429
  8775  005442                     l12433:
  8776                           
  8777                           ; BSR set to: 1
  8778  005442  4A0E               	infsnz	strcat@cp^0,f,c
  8779  005444  2A0F               	incf	(strcat@cp+1)^0,f,c
  8780  005446  4A0C               	infsnz	strcat@from^0,f,c
  8781  005448  2A0D               	incf	(strcat@from+1)^0,f,c
  8782  00544A                     l12435:
  8783                           
  8784                           ; BSR set to: 1
  8785  00544A  C00C  FFF6         	movff	strcat@from,tblptrl
  8786  00544E  C00D  FFF7         	movff	strcat@from+1,tblptrh
  8787  005452                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8788  005452  6AF8               	clrf	tblptru,c
  8789  005454                     	endif
  8790  005454                     	if	0	;tblptru may be non-zero
  8791  005454                     	endif
  8792  005454  C00E  FFD9         	movff	strcat@cp,fsr2l
  8793  005458  C00F  FFDA         	movff	strcat@cp+1,fsr2h
  8794  00545C  0008               	tblrd		*
  8795  00545E  CFF5 FFDF          	movff	tablat,indf2
  8796  005462  50DF               	movf	indf2,w,c
  8797  005464  B4D8               	btfsc	status,2,c
  8798  005466  0012               	return	
  8799  005468  D7EC               	goto	l12433
  8800  00546A                     __end_of_strcat:
  8801                           	callstack 0
  8802                           
  8803 ;; *************** function _hora_nome *****************
  8804 ;; Defined at:
  8805 ;;		line 422 in file "bibliotecas/SDCard.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;  p_buff          2    9[COMRAM] PTR unsigned char 
  8808 ;;		 -> hora(7), 
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;  i               1   11[COMRAM] unsigned char 
  8811 ;; Return value:  Size  Location     Type
  8812 ;;                  1    wreg      void 
  8813 ;; Registers used:
  8814 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8815 ;; Tracked objects:
  8816 ;;		On entry : 3F/1
  8817 ;;		On exit  : 3F/1
  8818 ;;		Unchanged: 3F/0
  8819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8820 ;;      Params:         2       0       0       0       0       0       0       0       0
  8821 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8822 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8823 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8824 ;;Total ram usage:        3 bytes
  8825 ;; Hardware stack levels used:    1
  8826 ;; Hardware stack levels required when called:    2
  8827 ;; This function calls:
  8828 ;;		Nothing
  8829 ;; This function is called by:
  8830 ;;		_escrita_sdcard
  8831 ;; This function uses a non-reentrant model
  8832 ;;
  8833                           
  8834                           	psect	text56
  8835  0058C0                     __ptext56:
  8836                           	callstack 0
  8837  0058C0                     _hora_nome:
  8838                           	callstack 24
  8839                           
  8840                           ; BSR set to: 1
  8841                           ;SDCard.c: 424: unsigned char i;;SDCard.c: 425: for(i=4; i<8;i++)
  8842                           
  8843                           ; BSR set to: 1
  8844                           ;incstack = 0
  8845  0058C0  0E04               	movlw	4
  8846  0058C2  6E0C               	movwf	hora_nome@i^0,c
  8847  0058C4                     l12419:
  8848                           
  8849                           ; BSR set to: 1
  8850                           ;SDCard.c: 426: {;SDCard.c: 427: filename[i] = *p_buff;
  8851  0058C4  C00A  FFD9         	movff	hora_nome@p_buff,fsr2l
  8852  0058C8  C00B  FFDA         	movff	hora_nome@p_buff+1,fsr2h
  8853  0058CC  0E56               	movlw	low _filename
  8854  0058CE  240C               	addwf	hora_nome@i^0,w,c
  8855  0058D0  6EE1               	movwf	fsr1l,c
  8856  0058D2  6AE2               	clrf	fsr1h,c
  8857  0058D4  0E02               	movlw	high _filename
  8858  0058D6  22E2               	addwfc	fsr1h,f,c
  8859  0058D8  CFDF FFE7          	movff	indf2,indf1
  8860                           
  8861                           ; BSR set to: 1
  8862                           ;SDCard.c: 428: p_buff++;
  8863  0058DC  4A0A               	infsnz	hora_nome@p_buff^0,f,c
  8864  0058DE  2A0B               	incf	(hora_nome@p_buff+1)^0,f,c
  8865                           
  8866                           ; BSR set to: 1
  8867  0058E0  2A0C               	incf	hora_nome@i^0,f,c
  8868                           
  8869                           ; BSR set to: 1
  8870  0058E2  0E07               	movlw	7
  8871  0058E4  640C               	cpfsgt	hora_nome@i^0,c
  8872  0058E6  D7EE               	goto	l12419
  8873  0058E8  0012               	return	
  8874  0058EA                     __end_of_hora_nome:
  8875                           	callstack 0
  8876                           
  8877 ;; *************** function _gps *****************
  8878 ;; Defined at:
  8879 ;;		line 92 in file "bibliotecas/GPS.c"
  8880 ;; Parameters:    Size  Location     Type
  8881 ;;		None
  8882 ;; Auto vars:     Size  Location     Type
  8883 ;;  flag_fix        2   18[COMRAM] PTR unsigned char 
  8884 ;;		 -> rawFix(2), 
  8885 ;; Return value:  Size  Location     Type
  8886 ;;                  1    wreg      void 
  8887 ;; Registers used:
  8888 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8889 ;; Tracked objects:
  8890 ;;		On entry : 0/0
  8891 ;;		On exit  : 0/0
  8892 ;;		Unchanged: 0/0
  8893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8894 ;;      Params:         0       0       0       0       0       0       0       0       0
  8895 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8896 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8897 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8898 ;;Total ram usage:        3 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; Hardware stack levels required when called:    6
  8901 ;; This function calls:
  8902 ;;		_fix
  8903 ;;		_get_fix
  8904 ;;		_get_gpstime
  8905 ;;		_get_latitude
  8906 ;;		_get_longitude
  8907 ;;		_get_rawdate
  8908 ;;		_get_rawspeed
  8909 ;; This function is called by:
  8910 ;;		_escrita_sdcard
  8911 ;;		_main
  8912 ;; This function uses a non-reentrant model
  8913 ;;
  8914                           
  8915                           	psect	text57
  8916  0056E2                     __ptext57:
  8917                           	callstack 0
  8918  0056E2                     _gps:
  8919                           	callstack 24
  8920                           
  8921                           ;GPS.c: 94: unsigned char *flag_fix;;GPS.c: 95: get_fix();
  8922                           
  8923                           ; BSR set to: 1
  8924                           ;incstack = 0
  8925  0056E2  EC99  F02A         	call	_get_fix	;wreg free
  8926                           
  8927                           ;GPS.c: 96: flag_fix = fix();
  8928  0056E6  EC55  F02E         	call	_fix	;wreg free
  8929  0056EA  C00A  F013         	movff	?_fix,gps@flag_fix
  8930  0056EE  C00B  F014         	movff	?_fix+1,gps@flag_fix+1
  8931                           
  8932                           ;GPS.c: 97: if(flag_fix[0] == '1')
  8933  0056F2  C013  FFD9         	movff	gps@flag_fix,fsr2l
  8934  0056F6  C014  FFDA         	movff	gps@flag_fix+1,fsr2h
  8935  0056FA  0E31               	movlw	49
  8936  0056FC  18DE               	xorwf	postinc2,w,c
  8937  0056FE  A4D8               	btfss	status,2,c
  8938  005700  0012               	return	
  8939                           
  8940                           ;GPS.c: 98: {;GPS.c: 99: get_gpstime();
  8941  005702  EC75  F02C         	call	_get_gpstime	;wreg free
  8942                           
  8943                           ;GPS.c: 100: get_latitude();
  8944  005706  ECA6  F029         	call	_get_latitude	;wreg free
  8945                           
  8946                           ;GPS.c: 101: get_longitude();
  8947  00570A  EC82  F029         	call	_get_longitude	;wreg free
  8948                           
  8949                           ;GPS.c: 102: get_rawdate();
  8950  00570E  ECBF  F02B         	call	_get_rawdate	;wreg free
  8951                           
  8952                           ;GPS.c: 103: get_rawspeed();
  8953  005712  ECA7  F02B         	call	_get_rawspeed	;wreg free
  8954  005716  0012               	return		;funcret
  8955  005718                     __end_of_gps:
  8956                           	callstack 0
  8957                           
  8958 ;; *************** function _get_rawspeed *****************
  8959 ;; Defined at:
  8960 ;;		line 310 in file "bibliotecas/GPS.c"
  8961 ;; Parameters:    Size  Location     Type
  8962 ;;		None
  8963 ;; Auto vars:     Size  Location     Type
  8964 ;;  index           1   10[COMRAM] unsigned char 
  8965 ;;  index_speed     1    9[COMRAM] unsigned char 
  8966 ;; Return value:  Size  Location     Type
  8967 ;;                  1    wreg      void 
  8968 ;; Registers used:
  8969 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8970 ;; Tracked objects:
  8971 ;;		On entry : 3F/1
  8972 ;;		On exit  : 3F/1
  8973 ;;		Unchanged: 3F/0
  8974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8975 ;;      Params:         0       0       0       0       0       0       0       0       0
  8976 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8977 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8978 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8979 ;;Total ram usage:        2 bytes
  8980 ;; Hardware stack levels used:    1
  8981 ;; Hardware stack levels required when called:    2
  8982 ;; This function calls:
  8983 ;;		Nothing
  8984 ;; This function is called by:
  8985 ;;		_gps
  8986 ;; This function uses a non-reentrant model
  8987 ;;
  8988                           
  8989                           	psect	text58
  8990  00574E                     __ptext58:
  8991                           	callstack 0
  8992  00574E                     _get_rawspeed:
  8993                           	callstack 27
  8994                           
  8995                           ; BSR set to: 1
  8996                           ;GPS.c: 312: unsigned char index_speed, index;;GPS.c: 314: index_speed = 0;
  8997                           
  8998                           ;incstack = 0
  8999  00574E  0E00               	movlw	0
  9000  005750  6E0A               	movwf	get_rawspeed@index_speed^0,c
  9001                           
  9002                           ;GPS.c: 316: for(index = 39; index<44; index++)
  9003  005752  0E27               	movlw	39
  9004  005754  6E0B               	movwf	get_rawspeed@index^0,c
  9005  005756                     l11745:
  9006                           
  9007                           ; BSR set to: 1
  9008                           ;GPS.c: 317: {;GPS.c: 318: rawSpeed[index_speed] = rmc_buffer[index];
  9009  005756  0E50               	movlw	low _rmc_buffer
  9010  005758  240B               	addwf	get_rawspeed@index^0,w,c
  9011  00575A  6ED9               	movwf	fsr2l,c
  9012  00575C  6ADA               	clrf	fsr2h,c
  9013  00575E  0E03               	movlw	high _rmc_buffer
  9014  005760  22DA               	addwfc	fsr2h,f,c
  9015  005762  0E6A               	movlw	low _rawSpeed
  9016  005764  240A               	addwf	get_rawspeed@index_speed^0,w,c
  9017  005766  6EE1               	movwf	fsr1l,c
  9018  005768  6AE2               	clrf	fsr1h,c
  9019  00576A  0E02               	movlw	high _rawSpeed
  9020  00576C  22E2               	addwfc	fsr1h,f,c
  9021  00576E  CFDF FFE7          	movff	indf2,indf1
  9022                           
  9023                           ; BSR set to: 1
  9024                           ;GPS.c: 319: index_speed++;
  9025  005772  2A0A               	incf	get_rawspeed@index_speed^0,f,c
  9026                           
  9027                           ; BSR set to: 1
  9028  005774  2A0B               	incf	get_rawspeed@index^0,f,c
  9029                           
  9030                           ; BSR set to: 1
  9031  005776  0E2B               	movlw	43
  9032  005778  640B               	cpfsgt	get_rawspeed@index^0,c
  9033  00577A  D7ED               	goto	l11745
  9034  00577C  0012               	return	
  9035  00577E                     __end_of_get_rawspeed:
  9036                           	callstack 0
  9037                           
  9038 ;; *************** function _get_rawdate *****************
  9039 ;; Defined at:
  9040 ;;		line 295 in file "bibliotecas/GPS.c"
  9041 ;; Parameters:    Size  Location     Type
  9042 ;;		None
  9043 ;; Auto vars:     Size  Location     Type
  9044 ;;  index           1   10[COMRAM] unsigned char 
  9045 ;;  index_date      1    9[COMRAM] unsigned char 
  9046 ;; Return value:  Size  Location     Type
  9047 ;;                  1    wreg      void 
  9048 ;; Registers used:
  9049 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9050 ;; Tracked objects:
  9051 ;;		On entry : 3F/1
  9052 ;;		On exit  : 3F/1
  9053 ;;		Unchanged: 3F/0
  9054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9055 ;;      Params:         0       0       0       0       0       0       0       0       0
  9056 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9057 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9058 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9059 ;;Total ram usage:        2 bytes
  9060 ;; Hardware stack levels used:    1
  9061 ;; Hardware stack levels required when called:    2
  9062 ;; This function calls:
  9063 ;;		Nothing
  9064 ;; This function is called by:
  9065 ;;		_gps
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           	psect	text59
  9070  00577E                     __ptext59:
  9071                           	callstack 0
  9072  00577E                     _get_rawdate:
  9073                           	callstack 27
  9074                           
  9075                           ; BSR set to: 1
  9076                           ;GPS.c: 297: unsigned char index_date, index;;GPS.c: 299: index_date = 0;
  9077                           
  9078                           ; BSR set to: 1
  9079                           ;incstack = 0
  9080  00577E  0E00               	movlw	0
  9081  005780  6E0A               	movwf	get_rawdate@index_date^0,c
  9082                           
  9083                           ;GPS.c: 301: for(index = 46; index<52; index++)
  9084  005782  0E2E               	movlw	46
  9085  005784  6E0B               	movwf	get_rawdate@index^0,c
  9086  005786                     l11731:
  9087                           
  9088                           ; BSR set to: 1
  9089                           ;GPS.c: 302: {;GPS.c: 303: rawDate[index_date] = rmc_buffer[index];
  9090  005786  0E50               	movlw	low _rmc_buffer
  9091  005788  240B               	addwf	get_rawdate@index^0,w,c
  9092  00578A  6ED9               	movwf	fsr2l,c
  9093  00578C  6ADA               	clrf	fsr2h,c
  9094  00578E  0E03               	movlw	high _rmc_buffer
  9095  005790  22DA               	addwfc	fsr2h,f,c
  9096  005792  0EE8               	movlw	low _rawDate
  9097  005794  240A               	addwf	get_rawdate@index_date^0,w,c
  9098  005796  6EE1               	movwf	fsr1l,c
  9099  005798  6AE2               	clrf	fsr1h,c
  9100  00579A  0E01               	movlw	high _rawDate
  9101  00579C  22E2               	addwfc	fsr1h,f,c
  9102  00579E  CFDF FFE7          	movff	indf2,indf1
  9103                           
  9104                           ; BSR set to: 1
  9105                           ;GPS.c: 304: index_date++;
  9106  0057A2  2A0A               	incf	get_rawdate@index_date^0,f,c
  9107                           
  9108                           ; BSR set to: 1
  9109  0057A4  2A0B               	incf	get_rawdate@index^0,f,c
  9110                           
  9111                           ; BSR set to: 1
  9112  0057A6  0E33               	movlw	51
  9113  0057A8  640B               	cpfsgt	get_rawdate@index^0,c
  9114  0057AA  D7ED               	goto	l11731
  9115  0057AC  0012               	return	
  9116  0057AE                     __end_of_get_rawdate:
  9117                           	callstack 0
  9118                           
  9119 ;; *************** function _get_longitude *****************
  9120 ;; Defined at:
  9121 ;;		line 273 in file "bibliotecas/GPS.c"
  9122 ;; Parameters:    Size  Location     Type
  9123 ;;		None
  9124 ;; Auto vars:     Size  Location     Type
  9125 ;;  index           1   10[COMRAM] unsigned char 
  9126 ;;  index_long      1    9[COMRAM] unsigned char 
  9127 ;; Return value:  Size  Location     Type
  9128 ;;                  1    wreg      void 
  9129 ;; Registers used:
  9130 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9131 ;; Tracked objects:
  9132 ;;		On entry : 3F/1
  9133 ;;		On exit  : 3F/1
  9134 ;;		Unchanged: 0/0
  9135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9136 ;;      Params:         0       0       0       0       0       0       0       0       0
  9137 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9139 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9140 ;;Total ram usage:        2 bytes
  9141 ;; Hardware stack levels used:    1
  9142 ;; Hardware stack levels required when called:    2
  9143 ;; This function calls:
  9144 ;;		Nothing
  9145 ;; This function is called by:
  9146 ;;		_gps
  9147 ;; This function uses a non-reentrant model
  9148 ;;
  9149                           
  9150                           	psect	text60
  9151  005304                     __ptext60:
  9152                           	callstack 0
  9153  005304                     _get_longitude:
  9154                           	callstack 27
  9155                           
  9156                           ; BSR set to: 1
  9157                           ;GPS.c: 275: unsigned char index_long, index;;GPS.c: 277: index_long = 1;
  9158                           
  9159                           ; BSR set to: 1
  9160                           ;incstack = 0
  9161  005304  0E01               	movlw	1
  9162  005306  6E0A               	movwf	get_longitude@index_long^0,c
  9163                           
  9164                           ;GPS.c: 279: for(index = 23; index<34; index++)
  9165  005308  0E17               	movlw	23
  9166  00530A  6E0B               	movwf	get_longitude@index^0,c
  9167  00530C                     l11711:
  9168                           
  9169                           ; BSR set to: 1
  9170                           ;GPS.c: 280: {;GPS.c: 281: rawLongitude[index_long] = gga_buffer[index];
  9171  00530C  0E00               	movlw	low _gga_buffer
  9172  00530E  240B               	addwf	get_longitude@index^0,w,c
  9173  005310  6ED9               	movwf	fsr2l,c
  9174  005312  6ADA               	clrf	fsr2h,c
  9175  005314  0E03               	movlw	high _gga_buffer
  9176  005316  22DA               	addwfc	fsr2h,f,c
  9177  005318  0EA3               	movlw	low _rawLongitude
  9178  00531A  240A               	addwf	get_longitude@index_long^0,w,c
  9179  00531C  6EE1               	movwf	fsr1l,c
  9180  00531E  6AE2               	clrf	fsr1h,c
  9181  005320  0E01               	movlw	high _rawLongitude
  9182  005322  22E2               	addwfc	fsr1h,f,c
  9183  005324  CFDF FFE7          	movff	indf2,indf1
  9184                           
  9185                           ; BSR set to: 1
  9186                           ;GPS.c: 282: index_long++;
  9187  005328  2A0A               	incf	get_longitude@index_long^0,f,c
  9188                           
  9189                           ; BSR set to: 1
  9190  00532A  2A0B               	incf	get_longitude@index^0,f,c
  9191                           
  9192                           ; BSR set to: 1
  9193  00532C  0E21               	movlw	33
  9194  00532E  640B               	cpfsgt	get_longitude@index^0,c
  9195  005330  D7ED               	goto	l11711
  9196                           
  9197                           ; BSR set to: 1
  9198                           ;GPS.c: 283: };GPS.c: 284: if(gga_buffer[32] == 'E')
  9199  005332  0E45               	movlw	69
  9200  005334  0103               	movlb	3	; () banked
  9201  005336  1920               	xorwf	(_gga_buffer+32)& (0+255),w,b
  9202  005338  A4D8               	btfss	status,2,c
  9203  00533A  D004               	goto	l11723
  9204                           
  9205                           ; BSR set to: 3
  9206                           ;GPS.c: 285: {;GPS.c: 286: rawLongitude[0] = '0';
  9207  00533C  0E30               	movlw	48
  9208  00533E  0101               	movlb	1	; () banked
  9209  005340  6FA3               	movwf	_rawLongitude& (0+255),b
  9210                           
  9211                           ;GPS.c: 287: }
  9212  005342  0012               	return	
  9213  005344                     l11723:
  9214                           
  9215                           ; BSR set to: 3
  9216                           ;GPS.c: 288: else;GPS.c: 289: {;GPS.c: 290: rawLongitude[0] = '-';
  9217  005344  0E2D               	movlw	45
  9218  005346  0101               	movlb	1	; () banked
  9219  005348  6FA3               	movwf	_rawLongitude& (0+255),b
  9220                           
  9221                           ; BSR set to: 1
  9222  00534A  0012               	return		;funcret
  9223  00534C                     __end_of_get_longitude:
  9224                           	callstack 0
  9225                           
  9226 ;; *************** function _get_latitude *****************
  9227 ;; Defined at:
  9228 ;;		line 249 in file "bibliotecas/GPS.c"
  9229 ;; Parameters:    Size  Location     Type
  9230 ;;		None
  9231 ;; Auto vars:     Size  Location     Type
  9232 ;;  time_buffer    15    0        unsigned char [15]
  9233 ;;  index           1   10[COMRAM] unsigned char 
  9234 ;;  index_lat       1    9[COMRAM] unsigned char 
  9235 ;; Return value:  Size  Location     Type
  9236 ;;                  1    wreg      void 
  9237 ;; Registers used:
  9238 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9239 ;; Tracked objects:
  9240 ;;		On entry : 0/0
  9241 ;;		On exit  : 3F/1
  9242 ;;		Unchanged: 0/0
  9243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9244 ;;      Params:         0       0       0       0       0       0       0       0       0
  9245 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9246 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9247 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9248 ;;Total ram usage:        2 bytes
  9249 ;; Hardware stack levels used:    1
  9250 ;; Hardware stack levels required when called:    2
  9251 ;; This function calls:
  9252 ;;		Nothing
  9253 ;; This function is called by:
  9254 ;;		_gps
  9255 ;; This function uses a non-reentrant model
  9256 ;;
  9257                           
  9258                           	psect	text61
  9259  00534C                     __ptext61:
  9260                           	callstack 0
  9261  00534C                     _get_latitude:
  9262                           	callstack 27
  9263                           
  9264                           ;GPS.c: 251: unsigned char index_lat, index;;GPS.c: 252: unsigned char time_buffer[15];;
      +                          GPS.c: 254: index_lat = 1;
  9265                           
  9266                           ; BSR set to: 1
  9267                           ;incstack = 0
  9268  00534C  0E01               	movlw	1
  9269  00534E  6E0A               	movwf	get_latitude@index_lat^0,c
  9270                           
  9271                           ;GPS.c: 256: for(index = 10; index<20; index++)
  9272  005350  0E0A               	movlw	10
  9273  005352  6E0B               	movwf	get_latitude@index^0,c
  9274  005354                     l11691:
  9275                           
  9276                           ;GPS.c: 257: {;GPS.c: 258: rawLatitude[index_lat] = gga_buffer[index];
  9277  005354  0E00               	movlw	low _gga_buffer
  9278  005356  240B               	addwf	get_latitude@index^0,w,c
  9279  005358  6ED9               	movwf	fsr2l,c
  9280  00535A  6ADA               	clrf	fsr2h,c
  9281  00535C  0E03               	movlw	high _gga_buffer
  9282  00535E  22DA               	addwfc	fsr2h,f,c
  9283  005360  0EBC               	movlw	low _rawLatitude
  9284  005362  240A               	addwf	get_latitude@index_lat^0,w,c
  9285  005364  6EE1               	movwf	fsr1l,c
  9286  005366  6AE2               	clrf	fsr1h,c
  9287  005368  0E01               	movlw	high _rawLatitude
  9288  00536A  22E2               	addwfc	fsr1h,f,c
  9289  00536C  CFDF FFE7          	movff	indf2,indf1
  9290                           
  9291                           ;GPS.c: 259: index_lat++;
  9292  005370  2A0A               	incf	get_latitude@index_lat^0,f,c
  9293  005372  2A0B               	incf	get_latitude@index^0,f,c
  9294  005374  0E13               	movlw	19
  9295  005376  640B               	cpfsgt	get_latitude@index^0,c
  9296  005378  D7ED               	goto	l11691
  9297                           
  9298                           ;GPS.c: 260: };GPS.c: 261: if(gga_buffer[21] == 'N')
  9299  00537A  0E4E               	movlw	78
  9300  00537C  0103               	movlb	3	; () banked
  9301  00537E  1915               	xorwf	(_gga_buffer+21)& (0+255),w,b
  9302  005380  A4D8               	btfss	status,2,c
  9303  005382  D004               	goto	l11703
  9304                           
  9305                           ; BSR set to: 3
  9306                           ;GPS.c: 262: {;GPS.c: 263: rawLatitude[0] = '0';
  9307  005384  0E30               	movlw	48
  9308  005386  0101               	movlb	1	; () banked
  9309  005388  6FBC               	movwf	_rawLatitude& (0+255),b
  9310                           
  9311                           ;GPS.c: 264: }
  9312  00538A  0012               	return	
  9313  00538C                     l11703:
  9314                           
  9315                           ; BSR set to: 3
  9316                           ;GPS.c: 265: else;GPS.c: 266: {;GPS.c: 267: rawLatitude[0] = '-';
  9317  00538C  0E2D               	movlw	45
  9318  00538E  0101               	movlb	1	; () banked
  9319  005390  6FBC               	movwf	_rawLatitude& (0+255),b
  9320                           
  9321                           ; BSR set to: 1
  9322  005392  0012               	return		;funcret
  9323  005394                     __end_of_get_latitude:
  9324                           	callstack 0
  9325                           
  9326 ;; *************** function _get_gpstime *****************
  9327 ;; Defined at:
  9328 ;;		line 229 in file "bibliotecas/GPS.c"
  9329 ;; Parameters:    Size  Location     Type
  9330 ;;		None
  9331 ;; Auto vars:     Size  Location     Type
  9332 ;;  time_buffer    15    0        unsigned char [15]
  9333 ;;  index           1    9[COMRAM] unsigned char 
  9334 ;; Return value:  Size  Location     Type
  9335 ;;                  1    wreg      void 
  9336 ;; Registers used:
  9337 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9338 ;; Tracked objects:
  9339 ;;		On entry : 0/0
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9343 ;;      Params:         0       0       0       0       0       0       0       0       0
  9344 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9345 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9346 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9347 ;;Total ram usage:        1 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; Hardware stack levels required when called:    2
  9350 ;; This function calls:
  9351 ;;		Nothing
  9352 ;; This function is called by:
  9353 ;;		_gps
  9354 ;; This function uses a non-reentrant model
  9355 ;;
  9356                           
  9357                           	psect	text62
  9358  0058EA                     __ptext62:
  9359                           	callstack 0
  9360  0058EA                     _get_gpstime:
  9361                           	callstack 27
  9362                           
  9363                           ;GPS.c: 231: unsigned char index;;GPS.c: 232: unsigned char time_buffer[15];;GPS.c: 236:
      +                           for(index = 0; index<6; index++)
  9364                           
  9365                           ; BSR set to: 1
  9366                           ;incstack = 0
  9367  0058EA  0E00               	movlw	0
  9368  0058EC  6E0A               	movwf	get_gpstime@index^0,c
  9369  0058EE                     l11679:
  9370                           
  9371                           ;GPS.c: 237: {;GPS.c: 238: rawTime[index] = gga_buffer[index];
  9372  0058EE  0E00               	movlw	low _gga_buffer
  9373  0058F0  240A               	addwf	get_gpstime@index^0,w,c
  9374  0058F2  6ED9               	movwf	fsr2l,c
  9375  0058F4  6ADA               	clrf	fsr2h,c
  9376  0058F6  0E03               	movlw	high _gga_buffer
  9377  0058F8  22DA               	addwfc	fsr2h,f,c
  9378  0058FA  0ECF               	movlw	low _rawTime
  9379  0058FC  240A               	addwf	get_gpstime@index^0,w,c
  9380  0058FE  6EE1               	movwf	fsr1l,c
  9381  005900  6AE2               	clrf	fsr1h,c
  9382  005902  0E01               	movlw	high _rawTime
  9383  005904  22E2               	addwfc	fsr1h,f,c
  9384  005906  CFDF FFE7          	movff	indf2,indf1
  9385  00590A  2A0A               	incf	get_gpstime@index^0,f,c
  9386  00590C  0E05               	movlw	5
  9387  00590E  640A               	cpfsgt	get_gpstime@index^0,c
  9388  005910  D7EE               	goto	l11679
  9389  005912  0012               	return	
  9390  005914                     __end_of_get_gpstime:
  9391                           	callstack 0
  9392                           
  9393 ;; *************** function _get_fix *****************
  9394 ;; Defined at:
  9395 ;;		line 324 in file "bibliotecas/GPS.c"
  9396 ;; Parameters:    Size  Location     Type
  9397 ;;		None
  9398 ;; Auto vars:     Size  Location     Type
  9399 ;;  index           1   16[COMRAM] unsigned char 
  9400 ;;  index_fix       1   15[COMRAM] unsigned char 
  9401 ;; Return value:  Size  Location     Type
  9402 ;;                  1    wreg      void 
  9403 ;; Registers used:
  9404 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9405 ;; Tracked objects:
  9406 ;;		On entry : 0/0
  9407 ;;		On exit  : 0/0
  9408 ;;		Unchanged: 0/0
  9409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9410 ;;      Params:         0       0       0       0       0       0       0       0       0
  9411 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9412 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9413 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9414 ;;Total ram usage:        2 bytes
  9415 ;; Hardware stack levels used:    1
  9416 ;; Hardware stack levels required when called:    5
  9417 ;; This function calls:
  9418 ;;		_escreve_caractere_lcd
  9419 ;;		_posicao_cursor_lcd
  9420 ;; This function is called by:
  9421 ;;		_gps
  9422 ;; This function uses a non-reentrant model
  9423 ;;
  9424                           
  9425                           	psect	text63
  9426  005532                     __ptext63:
  9427                           	callstack 0
  9428  005532                     _get_fix:
  9429                           	callstack 24
  9430                           
  9431                           ;GPS.c: 326: unsigned char index_fix, index;;GPS.c: 328: index_fix = 0;
  9432                           
  9433                           ;incstack = 0
  9434  005532  0E00               	movlw	0
  9435  005534  6E10               	movwf	get_fix@index_fix^0,c
  9436                           
  9437                           ;GPS.c: 330: for(index = 37; index<39; index++)
  9438  005536  0E25               	movlw	37
  9439  005538  6E11               	movwf	get_fix@index^0,c
  9440  00553A                     l11659:
  9441                           
  9442                           ;GPS.c: 331: {;GPS.c: 332: rawFix[index_fix] = gga_buffer[index];
  9443  00553A  0E00               	movlw	low _gga_buffer
  9444  00553C  2411               	addwf	get_fix@index^0,w,c
  9445  00553E  6ED9               	movwf	fsr2l,c
  9446  005540  6ADA               	clrf	fsr2h,c
  9447  005542  0E03               	movlw	high _gga_buffer
  9448  005544  22DA               	addwfc	fsr2h,f,c
  9449  005546  0EEE               	movlw	low _rawFix
  9450  005548  2410               	addwf	get_fix@index_fix^0,w,c
  9451  00554A  6EE1               	movwf	fsr1l,c
  9452  00554C  6AE2               	clrf	fsr1h,c
  9453  00554E  0E01               	movlw	high _rawFix
  9454  005550  22E2               	addwfc	fsr1h,f,c
  9455  005552  CFDF FFE7          	movff	indf2,indf1
  9456                           
  9457                           ;GPS.c: 333: index_fix++;
  9458  005556  2A10               	incf	get_fix@index_fix^0,f,c
  9459  005558  2A11               	incf	get_fix@index^0,f,c
  9460  00555A  0E26               	movlw	38
  9461  00555C  6411               	cpfsgt	get_fix@index^0,c
  9462  00555E  D7ED               	goto	l11659
  9463                           
  9464                           ;GPS.c: 334: };GPS.c: 335: posicao_cursor_lcd(2,0);
  9465  005560  0E00               	movlw	0
  9466  005562  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
  9467  005564  0E02               	movlw	2
  9468  005566  EC80  F027         	call	_posicao_cursor_lcd
  9469                           
  9470                           ;GPS.c: 336: escreve_caractere_lcd(rawFix[0]);
  9471  00556A  0101               	movlb	1	; () banked
  9472  00556C  51EE               	movf	_rawFix& (0+255),w,b
  9473  00556E  EC0F  F026         	call	_escreve_caractere_lcd
  9474  005572  0012               	return		;funcret
  9475  005574                     __end_of_get_fix:
  9476                           	callstack 0
  9477                           
  9478 ;; *************** function _fix *****************
  9479 ;; Defined at:
  9480 ;;		line 679 in file "bibliotecas/GPS.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;		None
  9483 ;; Auto vars:     Size  Location     Type
  9484 ;;		None
  9485 ;; Return value:  Size  Location     Type
  9486 ;;                  2    9[COMRAM] PTR unsigned char 
  9487 ;; Registers used:
  9488 ;;		wreg, status,2, status,0
  9489 ;; Tracked objects:
  9490 ;;		On entry : 0/1
  9491 ;;		On exit  : 0/0
  9492 ;;		Unchanged: 0/0
  9493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9494 ;;      Params:         2       0       0       0       0       0       0       0       0
  9495 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9496 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9497 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9498 ;;Total ram usage:        2 bytes
  9499 ;; Hardware stack levels used:    1
  9500 ;; Hardware stack levels required when called:    2
  9501 ;; This function calls:
  9502 ;;		Nothing
  9503 ;; This function is called by:
  9504 ;;		_gps
  9505 ;;		_disparo_gravacao
  9506 ;;		_troca_de_tela
  9507 ;; This function uses a non-reentrant model
  9508 ;;
  9509                           
  9510                           	psect	text64
  9511  005CAA                     __ptext64:
  9512                           	callstack 0
  9513  005CAA                     _fix:
  9514                           	callstack 27
  9515                           
  9516                           ;GPS.c: 681: return rawFix;
  9517                           
  9518                           ;incstack = 0
  9519  005CAA  0EEE               	movlw	low _rawFix
  9520  005CAC  6E0A               	movwf	?_fix^0,c
  9521  005CAE  0E01               	movlw	high _rawFix
  9522  005CB0  6E0B               	movwf	(?_fix+1)^0,c
  9523  005CB2  0012               	return		;funcret
  9524  005CB4                     __end_of_fix:
  9525                           	callstack 0
  9526                           
  9527 ;; *************** function _fprintf *****************
  9528 ;; Defined at:
  9529 ;;		line 1816 in file "bibliotecas/tff.c"
  9530 ;; Parameters:    Size  Location     Type
  9531 ;;  fil             2   81[BANK0 ] PTR struct _FIL
  9532 ;;		 -> fil(28), 
  9533 ;;  str             2   83[BANK0 ] PTR const unsigned char 
  9534 ;;		 -> STR_15(6), STR_14(10), STR_13(10), STR_12(15), 
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;  s              16   93[BANK0 ] unsigned char [16]
  9537 ;;  val             4  117[BANK0 ] unsigned long 
  9538 ;;  i               2  124[BANK0 ] int 
  9539 ;;  cc              2  122[BANK0 ] int 
  9540 ;;  w               2  113[BANK0 ] int 
  9541 ;;  res             2  109[BANK0 ] int 
  9542 ;;  c               1  126[BANK0 ] unsigned char 
  9543 ;;  arp             1  121[BANK0 ] PTR void [1]
  9544 ;;		 -> ?_fprintf(2), 
  9545 ;;  r               1  116[BANK0 ] unsigned char 
  9546 ;;  f               1  115[BANK0 ] unsigned char 
  9547 ;; Return value:  Size  Location     Type
  9548 ;;                  2   81[BANK0 ] int 
  9549 ;; Registers used:
  9550 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9551 ;; Tracked objects:
  9552 ;;		On entry : 3F/0
  9553 ;;		On exit  : 3F/0
  9554 ;;		Unchanged: 0/0
  9555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9556 ;;      Params:         0      10       0       0       0       0       0       0       0
  9557 ;;      Locals:         0      34       0       0       0       0       0       0       0
  9558 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9559 ;;      Totals:         0      46       0       0       0       0       0       0       0
  9560 ;;Total ram usage:       46 bytes
  9561 ;; Hardware stack levels used:    1
  9562 ;; Hardware stack levels required when called:   13
  9563 ;; This function calls:
  9564 ;;		___lldiv
  9565 ;;		___llmod
  9566 ;;		___wmul
  9567 ;;		_fputc
  9568 ;;		_fputs
  9569 ;; This function is called by:
  9570 ;;		_escrita_sdcard
  9571 ;; This function uses a non-reentrant model
  9572 ;;
  9573                           
  9574                           	psect	text65
  9575  0012F2                     __ptext65:
  9576                           	callstack 0
  9577  0012F2                     _fprintf:
  9578                           	callstack 13
  9579                           
  9580                           ; BSR set to: 0
  9581                           ;tff.c: 1822: va_list arp;;tff.c: 1823: UCHAR c, f, r;;tff.c: 1824: ULONG val;;tff.c: 18
      +                          25: char s[16];;tff.c: 1826: int i, w, res, cc;;tff.c: 1829: *arp = __va_start();
  9582                           
  9583                           ;incstack = 0
  9584  0012F2  0EB5               	movlw	low (?_fprintf+4)
  9585  0012F4  6FD9               	movwf	fprintf@arp& (0+255),b
  9586                           
  9587                           ; BSR set to: 0
  9588                           ;tff.c: 1831: for (cc = res = 0; cc != -1; res += cc) {
  9589  0012F6  0E00               	movlw	0
  9590  0012F8  6FCE               	movwf	(fprintf@res+1)& (0+255),b
  9591  0012FA  0E00               	movlw	0
  9592  0012FC  6FCD               	movwf	fprintf@res& (0+255),b
  9593  0012FE  C0CD  F0DA         	movff	fprintf@res,fprintf@cc
  9594  001302  C0CE  F0DB         	movff	fprintf@res+1,fprintf@cc+1
  9595  001306                     l12521:
  9596                           
  9597                           ; BSR set to: 0
  9598  001306  29DA               	incf	fprintf@cc& (0+255),w,b
  9599  001308  E103               	bnz	l12525
  9600  00130A  29DB               	incf	(fprintf@cc+1)& (0+255),w,b
  9601  00130C  B4D8               	btfsc	status,2,c
  9602  00130E  0012               	return	
  9603  001310                     l12525:
  9604                           
  9605                           ; BSR set to: 0
  9606                           ;tff.c: 1832: c = *str++;
  9607  001310  C0B3  FFF6         	movff	fprintf@str,tblptrl
  9608  001314  C0B4  FFF7         	movff	fprintf@str+1,tblptrh
  9609  001318                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9610  001318  6AF8               	clrf	tblptru,c
  9611  00131A                     	endif
  9612  00131A                     	if	0	;tblptru may be non-zero
  9613  00131A                     	endif
  9614  00131A  0008               	tblrd		*
  9615  00131C  CFF5 F0DE          	movff	tablat,fprintf@c
  9616                           
  9617                           ; BSR set to: 0
  9618  001320  4BB3               	infsnz	fprintf@str& (0+255),f,b
  9619  001322  2BB4               	incf	(fprintf@str+1)& (0+255),f,b
  9620                           
  9621                           ; BSR set to: 0
  9622                           ;tff.c: 1833: if (c == 0) break;
  9623  001324  51DE               	movf	fprintf@c& (0+255),w,b
  9624  001326  B4D8               	btfsc	status,2,c
  9625  001328  0012               	return	
  9626                           
  9627                           ; BSR set to: 0
  9628                           ;tff.c: 1834: if (c != '%') {
  9629  00132A  0E25               	movlw	37
  9630  00132C  19DE               	xorwf	fprintf@c& (0+255),w,b
  9631  00132E  B4D8               	btfsc	status,2,c
  9632  001330  D017               	goto	l12541
  9633                           
  9634                           ; BSR set to: 0
  9635                           ;tff.c: 1835: cc = fputc(c, fil);
  9636  001332  C0DE  F0A4         	movff	fprintf@c,fputc@chr
  9637  001336  6BA5               	clrf	(fputc@chr+1)& (0+255),b
  9638  001338  C0B1  F0A6         	movff	fprintf@fil,fputc@fil
  9639  00133C  C0B2  F0A7         	movff	fprintf@fil+1,fputc@fil+1
  9640  001340  ECDB  F02A         	call	_fputc	;wreg free
  9641  001344  C0A4  F0DA         	movff	?_fputc,fprintf@cc
  9642  001348  C0A5  F0DB         	movff	?_fputc+1,fprintf@cc+1
  9643                           
  9644                           ; BSR set to: 0
  9645                           ;tff.c: 1836: if (cc != -1) cc = 1;
  9646  00134C  29DA               	incf	fprintf@cc& (0+255),w,b
  9647  00134E  E103               	bnz	u14790
  9648  001350  29DB               	incf	(fprintf@cc+1)& (0+255),w,b
  9649  001352  B4D8               	btfsc	status,2,c
  9650  001354  D170               	goto	l12665
  9651  001356                     u14790:
  9652                           
  9653                           ; BSR set to: 0
  9654  001356  0E00               	movlw	0
  9655  001358  6FDB               	movwf	(fprintf@cc+1)& (0+255),b
  9656  00135A  0E01               	movlw	1
  9657  00135C  6FDA               	movwf	fprintf@cc& (0+255),b
  9658  00135E  D16B               	goto	l12665
  9659  001360                     l12541:
  9660                           
  9661                           ; BSR set to: 0
  9662                           ;tff.c: 1838: };tff.c: 1839: w = f = 0;
  9663  001360  0E00               	movlw	0
  9664  001362  6FD3               	movwf	fprintf@f& (0+255),b
  9665  001364  C0D3  F0D1         	movff	fprintf@f,fprintf@w
  9666  001368  6BD2               	clrf	(fprintf@w+1)& (0+255),b
  9667                           
  9668                           ; BSR set to: 0
  9669                           ;tff.c: 1840: c = *str++;
  9670  00136A  C0B3  FFF6         	movff	fprintf@str,tblptrl
  9671  00136E  C0B4  FFF7         	movff	fprintf@str+1,tblptrh
  9672  001372                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9673  001372  6AF8               	clrf	tblptru,c
  9674  001374                     	endif
  9675  001374                     	if	0	;tblptru may be non-zero
  9676  001374                     	endif
  9677  001374  0008               	tblrd		*
  9678  001376  CFF5 F0DE          	movff	tablat,fprintf@c
  9679                           
  9680                           ; BSR set to: 0
  9681  00137A  4BB3               	infsnz	fprintf@str& (0+255),f,b
  9682  00137C  2BB4               	incf	(fprintf@str+1)& (0+255),f,b
  9683                           
  9684                           ; BSR set to: 0
  9685                           ;tff.c: 1841: if (c == '0') {
  9686  00137E  0E30               	movlw	48
  9687  001380  19DE               	xorwf	fprintf@c& (0+255),w,b
  9688  001382  A4D8               	btfss	status,2,c
  9689  001384  D023               	goto	l12561
  9690                           
  9691                           ; BSR set to: 0
  9692                           ;tff.c: 1842: f = 1; c = *str++;
  9693  001386  0E01               	movlw	1
  9694  001388  6FD3               	movwf	fprintf@f& (0+255),b
  9695  00138A                     l12551:
  9696                           
  9697                           ; BSR set to: 0
  9698  00138A  C0B3  FFF6         	movff	fprintf@str,tblptrl
  9699  00138E  C0B4  FFF7         	movff	fprintf@str+1,tblptrh
  9700  001392                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9701  001392  6AF8               	clrf	tblptru,c
  9702  001394                     	endif
  9703  001394                     	if	0	;tblptru may be non-zero
  9704  001394                     	endif
  9705  001394  0008               	tblrd		*
  9706  001396  CFF5 F0DE          	movff	tablat,fprintf@c
  9707                           
  9708                           ; BSR set to: 0
  9709  00139A  4BB3               	infsnz	fprintf@str& (0+255),f,b
  9710  00139C  2BB4               	incf	(fprintf@str+1)& (0+255),f,b
  9711  00139E  D016               	goto	l12561
  9712  0013A0                     l12555:
  9713                           
  9714                           ; BSR set to: 0
  9715                           ;tff.c: 1845: w = w * 10 + (c - '0');
  9716  0013A0  C0D1  F00A         	movff	fprintf@w,___wmul@multiplier
  9717  0013A4  C0D2  F00B         	movff	fprintf@w+1,___wmul@multiplier+1
  9718  0013A8  0E00               	movlw	0
  9719  0013AA  6E0D               	movwf	(___wmul@multiplicand+1)^0,c
  9720  0013AC  0E0A               	movlw	10
  9721  0013AE  6E0C               	movwf	___wmul@multiplicand^0,c
  9722  0013B0  ECC6  F02C         	call	___wmul	;wreg free
  9723  0013B4  0100               	movlb	0	; () banked
  9724  0013B6  51DE               	movf	fprintf@c& (0+255),w,b
  9725  0013B8  260A               	addwf	?___wmul^0,f,c
  9726  0013BA  0E00               	movlw	0
  9727  0013BC  220B               	addwfc	(?___wmul+1)^0,f,c
  9728  0013BE  0ED0               	movlw	208
  9729  0013C0  240A               	addwf	?___wmul^0,w,c
  9730  0013C2  6FD1               	movwf	fprintf@w& (0+255),b
  9731  0013C4  0EFF               	movlw	255
  9732  0013C6  200B               	addwfc	(?___wmul+1)^0,w,c
  9733  0013C8  6FD2               	movwf	(fprintf@w+1)& (0+255),b
  9734  0013CA  D7DF               	goto	l12551
  9735  0013CC                     l12561:
  9736                           
  9737                           ; BSR set to: 0
  9738  0013CC  0E2F               	movlw	47
  9739  0013CE  65DE               	cpfsgt	fprintf@c& (0+255),b
  9740  0013D0  D003               	goto	u14820
  9741                           
  9742                           ; BSR set to: 0
  9743  0013D2  0E39               	movlw	57
  9744  0013D4  65DE               	cpfsgt	fprintf@c& (0+255),b
  9745  0013D6  D7E4               	goto	l12555
  9746  0013D8                     u14820:
  9747                           
  9748                           ; BSR set to: 0
  9749                           ;tff.c: 1847: };tff.c: 1848: if (c == 'l') {
  9750  0013D8  0E6C               	movlw	108
  9751  0013DA  19DE               	xorwf	fprintf@c& (0+255),w,b
  9752  0013DC  A4D8               	btfss	status,2,c
  9753  0013DE  D00B               	goto	l12573
  9754                           
  9755                           ; BSR set to: 0
  9756                           ;tff.c: 1849: f |= 2; c = *str++;
  9757  0013E0  83D3               	bsf	fprintf@f& (0+255),1,b
  9758                           
  9759                           ; BSR set to: 0
  9760  0013E2  C0B3  FFF6         	movff	fprintf@str,tblptrl
  9761  0013E6  C0B4  FFF7         	movff	fprintf@str+1,tblptrh
  9762  0013EA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9763  0013EA  6AF8               	clrf	tblptru,c
  9764  0013EC                     	endif
  9765  0013EC                     	if	0	;tblptru may be non-zero
  9766  0013EC                     	endif
  9767  0013EC  0008               	tblrd		*
  9768  0013EE  CFF5 F0DE          	movff	tablat,fprintf@c
  9769                           
  9770                           ; BSR set to: 0
  9771  0013F2  4BB3               	infsnz	fprintf@str& (0+255),f,b
  9772  0013F4  2BB4               	incf	(fprintf@str+1)& (0+255),f,b
  9773  0013F6                     l12573:
  9774                           
  9775                           ; BSR set to: 0
  9776                           ;tff.c: 1850: };tff.c: 1851: if (c == 's') {
  9777  0013F6  0E73               	movlw	115
  9778  0013F8  19DE               	xorwf	fprintf@c& (0+255),w,b
  9779  0013FA  A4D8               	btfss	status,2,c
  9780  0013FC  D014               	goto	l12579
  9781                           
  9782                           ; BSR set to: 0
  9783                           ;tff.c: 1852: cc = fputs((*(char* *)__va_arg((*(char* **)arp), (char*)0)), fil);
  9784  0013FE  51D9               	movf	fprintf@arp& (0+255),w,b
  9785  001400  6ED9               	movwf	fsr2l,c
  9786  001402  6ADA               	clrf	fsr2h,c
  9787  001404  CFDE F0AB          	movff	postinc2,fputs@str
  9788  001408  CFDD F0AC          	movff	postdec2,fputs@str+1
  9789  00140C  C0B1  F0AD         	movff	fprintf@fil,fputs@fil
  9790  001410  C0B2  F0AE         	movff	fprintf@fil+1,fputs@fil+1
  9791  001414  EC62  F028         	call	_fputs	;wreg free
  9792  001418  C0AB  F0DA         	movff	?_fputs,fprintf@cc
  9793  00141C  C0AC  F0DB         	movff	?_fputs+1,fprintf@cc+1
  9794                           
  9795                           ; BSR set to: 0
  9796  001420  0E02               	movlw	2
  9797  001422  27D9               	addwf	fprintf@arp& (0+255),f,b
  9798                           
  9799                           ;tff.c: 1853: continue;
  9800  001424  D108               	goto	l12665
  9801  001426                     l12579:
  9802                           
  9803                           ; BSR set to: 0
  9804                           ;tff.c: 1854: };tff.c: 1855: if (c == 'c') {
  9805  001426  0E63               	movlw	99
  9806  001428  19DE               	xorwf	fprintf@c& (0+255),w,b
  9807  00142A  A4D8               	btfss	status,2,c
  9808  00142C  D01B               	goto	l12589
  9809                           
  9810                           ; BSR set to: 0
  9811                           ;tff.c: 1856: cc = fputc((*(char *)__va_arg((*(char **)arp), (char)0)), fil);
  9812  00142E  51D9               	movf	fprintf@arp& (0+255),w,b
  9813  001430  6ED9               	movwf	fsr2l,c
  9814  001432  6ADA               	clrf	fsr2h,c
  9815  001434  50DF               	movf	indf2,w,c
  9816  001436  6FBB               	movwf	??_fprintf& (0+255),b
  9817  001438  51BB               	movf	??_fprintf& (0+255),w,b
  9818  00143A  6FA4               	movwf	fputc@chr& (0+255),b
  9819  00143C  6BA5               	clrf	(fputc@chr+1)& (0+255),b
  9820  00143E  C0B1  F0A6         	movff	fprintf@fil,fputc@fil
  9821  001442  C0B2  F0A7         	movff	fprintf@fil+1,fputc@fil+1
  9822  001446  ECDB  F02A         	call	_fputc	;wreg free
  9823  00144A  C0A4  F0DA         	movff	?_fputc,fprintf@cc
  9824  00144E  C0A5  F0DB         	movff	?_fputc+1,fprintf@cc+1
  9825                           
  9826                           ; BSR set to: 0
  9827  001452  0E02               	movlw	2
  9828  001454  27D9               	addwf	fprintf@arp& (0+255),f,b
  9829                           
  9830                           ; BSR set to: 0
  9831                           ;tff.c: 1857: if (cc != -1) cc = 1;
  9832  001456  29DA               	incf	fprintf@cc& (0+255),w,b
  9833  001458  E104               	bnz	u14860
  9834  00145A  29DB               	incf	(fprintf@cc+1)& (0+255),w,b
  9835  00145C  A4D8               	btfss	status,2,c
  9836  00145E  D77B               	goto	u14790
  9837  001460  D0EA               	goto	l12665
  9838  001462                     u14860:
  9839  001462  D779               	goto	u14790
  9840  001464                     l12589:
  9841                           
  9842                           ; BSR set to: 0
  9843                           ;tff.c: 1859: };tff.c: 1860: r = 0;
  9844  001464  0E00               	movlw	0
  9845  001466  6FD4               	movwf	fprintf@r& (0+255),b
  9846                           
  9847                           ; BSR set to: 0
  9848                           ;tff.c: 1861: if (c == 'd') r = 10;
  9849  001468  0E64               	movlw	100
  9850  00146A  19DE               	xorwf	fprintf@c& (0+255),w,b
  9851  00146C  A4D8               	btfss	status,2,c
  9852  00146E  D002               	goto	l12595
  9853                           
  9854                           ; BSR set to: 0
  9855  001470  0E0A               	movlw	10
  9856  001472  6FD4               	movwf	fprintf@r& (0+255),b
  9857  001474                     l12595:
  9858                           
  9859                           ; BSR set to: 0
  9860                           ;tff.c: 1862: if (c == 'u') r = 10;
  9861  001474  0E75               	movlw	117
  9862  001476  19DE               	xorwf	fprintf@c& (0+255),w,b
  9863  001478  A4D8               	btfss	status,2,c
  9864  00147A  D002               	goto	l12599
  9865                           
  9866                           ; BSR set to: 0
  9867  00147C  0E0A               	movlw	10
  9868  00147E  6FD4               	movwf	fprintf@r& (0+255),b
  9869  001480                     l12599:
  9870                           
  9871                           ; BSR set to: 0
  9872                           ;tff.c: 1863: if (c == 'X') r = 16;
  9873  001480  0E58               	movlw	88
  9874  001482  19DE               	xorwf	fprintf@c& (0+255),w,b
  9875  001484  A4D8               	btfss	status,2,c
  9876  001486  D002               	goto	l1279
  9877                           
  9878                           ; BSR set to: 0
  9879  001488  0E10               	movlw	16
  9880  00148A  6FD4               	movwf	fprintf@r& (0+255),b
  9881  00148C                     l1279:
  9882                           
  9883                           ; BSR set to: 0
  9884                           ;tff.c: 1864: if (r == 0) break;
  9885  00148C  51D4               	movf	fprintf@r& (0+255),w,b
  9886  00148E  B4D8               	btfsc	status,2,c
  9887  001490  0012               	return	
  9888                           
  9889                           ; BSR set to: 0
  9890                           ;tff.c: 1865: if (f & 2) {
  9891  001492  A3D3               	btfss	fprintf@f& (0+255),1,b
  9892  001494  D00D               	goto	l12609
  9893                           
  9894                           ; BSR set to: 0
  9895                           ;tff.c: 1866: val = (ULONG)(*(long *)__va_arg((*(long **)arp), (long)0));
  9896  001496  51D9               	movf	fprintf@arp& (0+255),w,b
  9897  001498  6ED9               	movwf	fsr2l,c
  9898  00149A  6ADA               	clrf	fsr2h,c
  9899  00149C  CFDE F0D5          	movff	postinc2,fprintf@val
  9900  0014A0  CFDE F0D6          	movff	postinc2,fprintf@val+1
  9901  0014A4  CFDE F0D7          	movff	postinc2,fprintf@val+2
  9902  0014A8  CFDE F0D8          	movff	postinc2,fprintf@val+3
  9903                           
  9904                           ; BSR set to: 0
  9905  0014AC  0E04               	movlw	4
  9906  0014AE  D01F               	goto	L1
  9907  0014B0                     l12609:
  9908                           
  9909                           ; BSR set to: 0
  9910                           ;tff.c: 1868: val = (c == 'd') ? (ULONG)(long)(*(int *)__va_arg((*(int **)arp), (int)0))
      +                           : (ULONG)(*(unsigned int *)__va_arg((*(unsigned int **)arp), (unsigned int)0));
  9911  0014B0  0E64               	movlw	100
  9912  0014B2  19DE               	xorwf	fprintf@c& (0+255),w,b
  9913  0014B4  B4D8               	btfsc	status,2,c
  9914  0014B6  D00E               	goto	l12615
  9915                           
  9916                           ; BSR set to: 0
  9917  0014B8  51D9               	movf	fprintf@arp& (0+255),w,b
  9918  0014BA  6ED9               	movwf	fsr2l,c
  9919  0014BC  6ADA               	clrf	fsr2h,c
  9920  0014BE  CFDE F0BB          	movff	postinc2,??_fprintf
  9921  0014C2  CFDD F0BC          	movff	postdec2,??_fprintf+1
  9922  0014C6  C0BB  F0D5         	movff	??_fprintf,fprintf@val
  9923  0014CA  C0BC  F0D6         	movff	??_fprintf+1,fprintf@val+1
  9924  0014CE  6BD7               	clrf	(fprintf@val+2)& (0+255),b
  9925  0014D0  6BD8               	clrf	(fprintf@val+3)& (0+255),b
  9926  0014D2  D00C               	goto	l12617
  9927  0014D4                     l12615:
  9928                           
  9929                           ; BSR set to: 0
  9930  0014D4  51D9               	movf	fprintf@arp& (0+255),w,b
  9931  0014D6  6ED9               	movwf	fsr2l,c
  9932  0014D8  6ADA               	clrf	fsr2h,c
  9933  0014DA  CFDE F0D5          	movff	postinc2,fprintf@val
  9934  0014DE  CFDD F0D6          	movff	postdec2,fprintf@val+1
  9935  0014E2  0E00               	movlw	0
  9936  0014E4  BFD6               	btfsc	(fprintf@val+1)& (0+255),7,b
  9937  0014E6  0EFF               	movlw	-1
  9938  0014E8  6FD7               	movwf	(fprintf@val+2)& (0+255),b
  9939  0014EA  6FD8               	movwf	(fprintf@val+3)& (0+255),b
  9940  0014EC                     l12617:
  9941                           
  9942                           ; BSR set to: 0
  9943  0014EC  0E02               	movlw	2
  9944  0014EE                     L1:
  9945  0014EE  27D9               	addwf	fprintf@arp& (0+255),f,b
  9946                           
  9947                           ; BSR set to: 0
  9948                           ;tff.c: 1869: };tff.c: 1871: if (c == 'd') {
  9949  0014F0  0E64               	movlw	100
  9950  0014F2  19DE               	xorwf	fprintf@c& (0+255),w,b
  9951  0014F4  A4D8               	btfss	status,2,c
  9952  0014F6  D00E               	goto	l12627
  9953                           
  9954                           ; BSR set to: 0
  9955                           ;tff.c: 1872: if (val >= 0x80000000) {
  9956  0014F8  0E80               	movlw	128
  9957  0014FA  5DD8               	subwf	(fprintf@val+3)& (0+255),w,b
  9958  0014FC  A0D8               	btfss	status,0,c
  9959  0014FE  D00A               	goto	l12627
  9960                           
  9961                           ; BSR set to: 0
  9962                           ;tff.c: 1873: val = 0 - val;
  9963  001500  6DD5               	negf	fprintf@val& (0+255),b
  9964  001502  1FD6               	comf	(fprintf@val+1)& (0+255),f,b
  9965  001504  B0D8               	btfsc	status,0,c
  9966  001506  2BD6               	incf	(fprintf@val+1)& (0+255),f,b
  9967  001508  1FD7               	comf	(fprintf@val+2)& (0+255),f,b
  9968  00150A  B0D8               	btfsc	status,0,c
  9969  00150C  2BD7               	incf	(fprintf@val+2)& (0+255),f,b
  9970  00150E  0E00               	movlw	0
  9971  001510  57D8               	subfwb	(fprintf@val+3)& (0+255),f,b
  9972                           
  9973                           ; BSR set to: 0
  9974                           ;tff.c: 1874: f |= 4;
  9975  001512  85D3               	bsf	fprintf@f& (0+255),2,b
  9976  001514                     l12627:
  9977                           
  9978                           ; BSR set to: 0
  9979                           ;tff.c: 1875: };tff.c: 1876: };tff.c: 1877: i = sizeof(s) - 1; s[i] = 0;
  9980  001514  0E00               	movlw	0
  9981  001516  6FDD               	movwf	(fprintf@i+1)& (0+255),b
  9982  001518  0E0F               	movlw	15
  9983  00151A  6FDC               	movwf	fprintf@i& (0+255),b
  9984                           
  9985                           ; BSR set to: 0
  9986  00151C  0E00               	movlw	0
  9987  00151E  6FCC               	movwf	(fprintf@s+15)& (0+255),b
  9988  001520                     l12631:
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;tff.c: 1879: c = (UCHAR)(val % r + '0');
  9992  001520  C0D5  F00A         	movff	fprintf@val,___llmod@dividend
  9993  001524  C0D6  F00B         	movff	fprintf@val+1,___llmod@dividend+1
  9994  001528  C0D7  F00C         	movff	fprintf@val+2,___llmod@dividend+2
  9995  00152C  C0D8  F00D         	movff	fprintf@val+3,___llmod@dividend+3
  9996  001530  51D4               	movf	fprintf@r& (0+255),w,b
  9997  001532  6E0E               	movwf	___llmod@divisor^0,c
  9998  001534  6A0F               	clrf	(___llmod@divisor+1)^0,c
  9999  001536  6A10               	clrf	(___llmod@divisor+2)^0,c
 10000  001538  6A11               	clrf	(___llmod@divisor+3)^0,c
 10001  00153A  ECE9  F026         	call	___llmod	;wreg free
 10002  00153E  500A               	movf	?___llmod^0,w,c
 10003  001540  0F30               	addlw	48
 10004  001542  0100               	movlb	0	; () banked
 10005  001544  6FDE               	movwf	fprintf@c& (0+255),b
 10006                           
 10007                           ; BSR set to: 0
 10008                           ;tff.c: 1880: if (c > '9') c += 7;
 10009  001546  0E39               	movlw	57
 10010  001548  65DE               	cpfsgt	fprintf@c& (0+255),b
 10011  00154A  D002               	goto	l12637
 10012                           
 10013                           ; BSR set to: 0
 10014  00154C  0E07               	movlw	7
 10015  00154E  27DE               	addwf	fprintf@c& (0+255),f,b
 10016  001550                     l12637:
 10017                           
 10018                           ; BSR set to: 0
 10019                           ;tff.c: 1881: s[--i] = c;
 10020  001550  07DC               	decf	fprintf@i& (0+255),f,b
 10021  001552  A0D8               	btfss	status,0,c
 10022  001554  07DD               	decf	(fprintf@i+1)& (0+255),f,b
 10023  001556  51DC               	movf	fprintf@i& (0+255),w,b
 10024  001558  0FBD               	addlw	low fprintf@s
 10025  00155A  6ED9               	movwf	fsr2l,c
 10026  00155C  6ADA               	clrf	fsr2h,c
 10027  00155E  C0DE  FFDF         	movff	fprintf@c,indf2
 10028                           
 10029                           ; BSR set to: 0
 10030                           ;tff.c: 1882: val /= r;
 10031  001562  C0D5  F00A         	movff	fprintf@val,___lldiv@dividend
 10032  001566  C0D6  F00B         	movff	fprintf@val+1,___lldiv@dividend+1
 10033  00156A  C0D7  F00C         	movff	fprintf@val+2,___lldiv@dividend+2
 10034  00156E  C0D8  F00D         	movff	fprintf@val+3,___lldiv@dividend+3
 10035  001572  51D4               	movf	fprintf@r& (0+255),w,b
 10036  001574  6E0E               	movwf	___lldiv@divisor^0,c
 10037  001576  6A0F               	clrf	(___lldiv@divisor+1)^0,c
 10038  001578  6A10               	clrf	(___lldiv@divisor+2)^0,c
 10039  00157A  6A11               	clrf	(___lldiv@divisor+3)^0,c
 10040  00157C  EC19  F025         	call	___lldiv	;wreg free
 10041  001580  C00A  F0D5         	movff	?___lldiv,fprintf@val
 10042  001584  C00B  F0D6         	movff	?___lldiv+1,fprintf@val+1
 10043  001588  C00C  F0D7         	movff	?___lldiv+2,fprintf@val+2
 10044  00158C  C00D  F0D8         	movff	?___lldiv+3,fprintf@val+3
 10045                           
 10046                           ;tff.c: 1883: } while (i && val);
 10047  001590  0100               	movlb	0	; () banked
 10048  001592  51DC               	movf	fprintf@i& (0+255),w,b
 10049  001594  11DD               	iorwf	(fprintf@i+1)& (0+255),w,b
 10050  001596  B4D8               	btfsc	status,2,c
 10051  001598  D006               	goto	u14970
 10052                           
 10053                           ; BSR set to: 0
 10054  00159A  51D5               	movf	fprintf@val& (0+255),w,b
 10055  00159C  11D6               	iorwf	(fprintf@val+1)& (0+255),w,b
 10056  00159E  11D7               	iorwf	(fprintf@val+2)& (0+255),w,b
 10057  0015A0  11D8               	iorwf	(fprintf@val+3)& (0+255),w,b
 10058  0015A2  A4D8               	btfss	status,2,c
 10059  0015A4  D7BD               	goto	l12631
 10060  0015A6                     u14970:
 10061                           
 10062                           ; BSR set to: 0
 10063                           ;tff.c: 1884: if (i && (f & 4)) s[--i] = '-';
 10064  0015A6  51DC               	movf	fprintf@i& (0+255),w,b
 10065  0015A8  11DD               	iorwf	(fprintf@i+1)& (0+255),w,b
 10066  0015AA  A4D8               	btfss	status,2,c
 10067                           
 10068                           ; BSR set to: 0
 10069  0015AC  A5D3               	btfss	fprintf@f& (0+255),2,b
 10070  0015AE  D009               	goto	l12651
 10071                           
 10072                           ; BSR set to: 0
 10073  0015B0  07DC               	decf	fprintf@i& (0+255),f,b
 10074  0015B2  A0D8               	btfss	status,0,c
 10075  0015B4  07DD               	decf	(fprintf@i+1)& (0+255),f,b
 10076  0015B6  51DC               	movf	fprintf@i& (0+255),w,b
 10077  0015B8  0FBD               	addlw	low fprintf@s
 10078  0015BA  6ED9               	movwf	fsr2l,c
 10079  0015BC  6ADA               	clrf	fsr2h,c
 10080  0015BE  0E2D               	movlw	45
 10081  0015C0  6EDF               	movwf	indf2,c
 10082  0015C2                     l12651:
 10083                           
 10084                           ; BSR set to: 0
 10085                           ;tff.c: 1885: w = sizeof(s) - 1 - w;
 10086  0015C2  51D1               	movf	fprintf@w& (0+255),w,b
 10087  0015C4  080F               	sublw	15
 10088  0015C6  6FD1               	movwf	fprintf@w& (0+255),b
 10089  0015C8  51D2               	movf	(fprintf@w+1)& (0+255),w,b
 10090  0015CA  A0D8               	btfss	status,0,c
 10091  0015CC  2AE8               	incf	wreg,f,c
 10092  0015CE  0800               	sublw	0
 10093  0015D0  6FD2               	movwf	(fprintf@w+1)& (0+255),b
 10094                           
 10095                           ;tff.c: 1886: while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
 10096  0015D2  D013               	goto	l12659
 10097  0015D4                     l1296:
 10098                           
 10099                           ; BSR set to: 0
 10100  0015D4  B1D3               	btfsc	fprintf@f& (0+255),0,b
 10101  0015D6  D004               	goto	l12655
 10102                           
 10103                           ; BSR set to: 0
 10104  0015D8  0E00               	movlw	0
 10105  0015DA  6FD0               	movwf	(_fprintf$2227+1)& (0+255),b
 10106  0015DC  0E20               	movlw	32
 10107  0015DE  D003               	goto	L2
 10108  0015E0                     l12655:
 10109                           
 10110                           ; BSR set to: 0
 10111  0015E0  0E00               	movlw	0
 10112  0015E2  6FD0               	movwf	(_fprintf$2227+1)& (0+255),b
 10113  0015E4  0E30               	movlw	48
 10114  0015E6                     L2:
 10115  0015E6  6FCF               	movwf	_fprintf$2227& (0+255),b
 10116                           
 10117                           ; BSR set to: 0
 10118  0015E8  07DC               	decf	fprintf@i& (0+255),f,b
 10119  0015EA  A0D8               	btfss	status,0,c
 10120  0015EC  07DD               	decf	(fprintf@i+1)& (0+255),f,b
 10121  0015EE  51DC               	movf	fprintf@i& (0+255),w,b
 10122  0015F0  0FBD               	addlw	low fprintf@s
 10123  0015F2  6ED9               	movwf	fsr2l,c
 10124  0015F4  6ADA               	clrf	fsr2h,c
 10125  0015F6  C0CF  FFDF         	movff	_fprintf$2227,indf2
 10126  0015FA                     l12659:
 10127                           
 10128                           ; BSR set to: 0
 10129  0015FA  51DC               	movf	fprintf@i& (0+255),w,b
 10130  0015FC  11DD               	iorwf	(fprintf@i+1)& (0+255),w,b
 10131  0015FE  B4D8               	btfsc	status,2,c
 10132  001600  D00A               	goto	u15020
 10133                           
 10134                           ; BSR set to: 0
 10135  001602  51DC               	movf	fprintf@i& (0+255),w,b
 10136  001604  5DD1               	subwf	fprintf@w& (0+255),w,b
 10137  001606  51D2               	movf	(fprintf@w+1)& (0+255),w,b
 10138  001608  0A80               	xorlw	128
 10139  00160A  6FBB               	movwf	??_fprintf& (0+255),b
 10140  00160C  51DD               	movf	(fprintf@i+1)& (0+255),w,b
 10141  00160E  0A80               	xorlw	128
 10142  001610  59BB               	subwfb	??_fprintf& (0+255),w,b
 10143  001612  A0D8               	btfss	status,0,c
 10144  001614  D7DF               	goto	l1296
 10145  001616                     u15020:
 10146                           
 10147                           ; BSR set to: 0
 10148                           ;tff.c: 1887: cc = fputs(&s[i], fil);
 10149  001616  51DC               	movf	fprintf@i& (0+255),w,b
 10150  001618  0FBD               	addlw	low fprintf@s
 10151  00161A  6FBB               	movwf	??_fprintf& (0+255),b
 10152  00161C  C0BB  F0AB         	movff	??_fprintf,fputs@str
 10153  001620  6BAC               	clrf	(fputs@str+1)& (0+255),b
 10154  001622  C0B1  F0AD         	movff	fprintf@fil,fputs@fil
 10155  001626  C0B2  F0AE         	movff	fprintf@fil+1,fputs@fil+1
 10156  00162A  EC62  F028         	call	_fputs	;wreg free
 10157  00162E  C0AB  F0DA         	movff	?_fputs,fprintf@cc
 10158  001632  C0AC  F0DB         	movff	?_fputs+1,fprintf@cc+1
 10159  001636                     l12665:
 10160                           
 10161                           ; BSR set to: 0
 10162  001636  51DA               	movf	fprintf@cc& (0+255),w,b
 10163  001638  27CD               	addwf	fprintf@res& (0+255),f,b
 10164  00163A  51DB               	movf	(fprintf@cc+1)& (0+255),w,b
 10165  00163C  23CE               	addwfc	(fprintf@res+1)& (0+255),f,b
 10166  00163E  D663               	goto	l12521
 10167  001640                     __end_of_fprintf:
 10168                           	callstack 0
 10169                           
 10170 ;; *************** function _fputs *****************
 10171 ;; Defined at:
 10172 ;;		line 1796 in file "bibliotecas/tff.c"
 10173 ;; Parameters:    Size  Location     Type
 10174 ;;  str             2   75[BANK0 ] PTR const unsigned char 
 10175 ;;		 -> fprintf@s(16), ?_fprintf(2), fence(6), lo(13), 
 10176 ;;		 -> lt(12), vel(6), hora(7), 
 10177 ;;  fil             2   77[BANK0 ] PTR struct _FIL
 10178 ;;		 -> fil(28), 
 10179 ;; Auto vars:     Size  Location     Type
 10180 ;;  n               2   79[BANK0 ] int 
 10181 ;; Return value:  Size  Location     Type
 10182 ;;                  2   75[BANK0 ] int 
 10183 ;; Registers used:
 10184 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10185 ;; Tracked objects:
 10186 ;;		On entry : 3F/0
 10187 ;;		On exit  : 3F/0
 10188 ;;		Unchanged: 0/0
 10189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10190 ;;      Params:         0       4       0       0       0       0       0       0       0
 10191 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10192 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10193 ;;      Totals:         1       6       0       0       0       0       0       0       0
 10194 ;;Total ram usage:        7 bytes
 10195 ;; Hardware stack levels used:    1
 10196 ;; Hardware stack levels required when called:   12
 10197 ;; This function calls:
 10198 ;;		_fputc
 10199 ;; This function is called by:
 10200 ;;		_fprintf
 10201 ;; This function uses a non-reentrant model
 10202 ;;
 10203                           
 10204                           	psect	text66
 10205  0050C4                     __ptext66:
 10206                           	callstack 0
 10207  0050C4                     _fputs:
 10208                           	callstack 13
 10209                           
 10210                           ; BSR set to: 0
 10211                           ;tff.c: 1801: int n;;tff.c: 1804: for (n = 0; *str; str++, n++) {
 10212                           
 10213                           ; BSR set to: 0
 10214                           ;incstack = 0
 10215  0050C4  0E00               	movlw	0
 10216  0050C6  6FB0               	movwf	(fputs@n+1)& (0+255),b
 10217  0050C8  0E00               	movlw	0
 10218  0050CA  6FAF               	movwf	fputs@n& (0+255),b
 10219  0050CC  D01B               	goto	l12095
 10220  0050CE                     l12089:
 10221                           
 10222                           ; BSR set to: 0
 10223                           ;tff.c: 1805: if (fputc(*str, fil) == -1) return -1;
 10224  0050CE  C0AB  FFD9         	movff	fputs@str,fsr2l
 10225  0050D2  C0AC  FFDA         	movff	fputs@str+1,fsr2h
 10226  0050D6  50DF               	movf	indf2,w,c
 10227  0050D8  6E4C               	movwf	??_fputs^0,c
 10228  0050DA  504C               	movf	??_fputs^0,w,c
 10229  0050DC  6FA4               	movwf	fputc@chr& (0+255),b
 10230  0050DE  6BA5               	clrf	(fputc@chr+1)& (0+255),b
 10231  0050E0  C0AD  F0A6         	movff	fputs@fil,fputc@fil
 10232  0050E4  C0AE  F0A7         	movff	fputs@fil+1,fputc@fil+1
 10233  0050E8  ECDB  F02A         	call	_fputc	;wreg free
 10234  0050EC  29A4               	incf	?_fputc& (0+255),w,b
 10235  0050EE  E106               	bnz	l12093
 10236  0050F0  29A5               	incf	(?_fputc+1)& (0+255),w,b
 10237  0050F2  A4D8               	btfss	status,2,c
 10238  0050F4  D003               	goto	l12093
 10239                           
 10240                           ; BSR set to: 0
 10241  0050F6  69AB               	setf	?_fputs& (0+255),b
 10242  0050F8  69AC               	setf	(?_fputs+1)& (0+255),b
 10243  0050FA  0012               	return	
 10244  0050FC                     l12093:
 10245                           
 10246                           ; BSR set to: 0
 10247  0050FC  4BAB               	infsnz	fputs@str& (0+255),f,b
 10248  0050FE  2BAC               	incf	(fputs@str+1)& (0+255),f,b
 10249  005100  4BAF               	infsnz	fputs@n& (0+255),f,b
 10250  005102  2BB0               	incf	(fputs@n+1)& (0+255),f,b
 10251  005104                     l12095:
 10252                           
 10253                           ; BSR set to: 0
 10254  005104  C0AB  FFD9         	movff	fputs@str,fsr2l
 10255  005108  C0AC  FFDA         	movff	fputs@str+1,fsr2h
 10256  00510C  50DF               	movf	indf2,w,c
 10257  00510E  A4D8               	btfss	status,2,c
 10258  005110  D7DE               	goto	l12089
 10259                           
 10260                           ; BSR set to: 0
 10261                           ;tff.c: 1806: };tff.c: 1807: return n;
 10262  005112  C0AF  F0AB         	movff	fputs@n,?_fputs
 10263  005116  C0B0  F0AC         	movff	fputs@n+1,?_fputs+1
 10264                           
 10265                           ; BSR set to: 0
 10266  00511A  0012               	return		;funcret
 10267  00511C                     __end_of_fputs:
 10268                           	callstack 0
 10269                           
 10270 ;; *************** function _fputc *****************
 10271 ;; Defined at:
 10272 ;;		line 1769 in file "bibliotecas/tff.c"
 10273 ;; Parameters:    Size  Location     Type
 10274 ;;  chr             2   68[BANK0 ] int 
 10275 ;;  fil             2   70[BANK0 ] PTR struct _FIL
 10276 ;;		 -> fil(28), 
 10277 ;; Auto vars:     Size  Location     Type
 10278 ;;  bw              2   73[BANK0 ] unsigned int 
 10279 ;;  c               1   72[BANK0 ] unsigned char 
 10280 ;; Return value:  Size  Location     Type
 10281 ;;                  2   68[BANK0 ] int 
 10282 ;; Registers used:
 10283 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10284 ;; Tracked objects:
 10285 ;;		On entry : 3F/0
 10286 ;;		On exit  : 3F/0
 10287 ;;		Unchanged: 0/0
 10288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10289 ;;      Params:         0       4       0       0       0       0       0       0       0
 10290 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10291 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10292 ;;      Totals:         0       7       0       0       0       0       0       0       0
 10293 ;;Total ram usage:        7 bytes
 10294 ;; Hardware stack levels used:    1
 10295 ;; Hardware stack levels required when called:   11
 10296 ;; This function calls:
 10297 ;;		_f_write
 10298 ;; This function is called by:
 10299 ;;		_fputs
 10300 ;;		_fprintf
 10301 ;; This function uses a non-reentrant model
 10302 ;;
 10303                           
 10304                           	psect	text67
 10305  0055B6                     __ptext67:
 10306                           	callstack 0
 10307  0055B6                     _fputc:
 10308                           	callstack 13
 10309                           
 10310                           ; BSR set to: 0
 10311                           ;tff.c: 1774: UINT bw;;tff.c: 1775: char c;;tff.c: 1781: if (!fil) {
 10312                           
 10313                           ; BSR set to: 0
 10314                           ;incstack = 0
 10315  0055B6  51A6               	movf	fputc@fil& (0+255),w,b
 10316  0055B8  11A7               	iorwf	(fputc@fil+1)& (0+255),w,b
 10317  0055BA  A4D8               	btfss	status,2,c
 10318  0055BC  D005               	goto	l1246
 10319  0055BE                     u13370:
 10320                           
 10321                           ; BSR set to: 0
 10322                           ;tff.c: 1783: return chr;
 10323  0055BE  C0A4  F0A4         	movff	fputc@chr,?_fputc
 10324  0055C2  C0A5  F0A5         	movff	fputc@chr+1,?_fputc+1
 10325  0055C6  0012               	return	
 10326  0055C8                     l1246:
 10327                           
 10328                           ; BSR set to: 0
 10329                           ;tff.c: 1784: };tff.c: 1785: c = (char)chr;
 10330  0055C8  C0A4  F0A8         	movff	fputc@chr,fputc@c
 10331                           
 10332                           ; BSR set to: 0
 10333                           ;tff.c: 1786: f_write(fil, &c, 1, &bw);
 10334  0055CC  C0A6  F086         	movff	fputc@fil,f_write@fp
 10335  0055D0  C0A7  F087         	movff	fputc@fil+1,f_write@fp+1
 10336  0055D4  0EA8               	movlw	low fputc@c
 10337  0055D6  6F88               	movwf	f_write@buff& (0+255),b
 10338  0055D8  0E00               	movlw	0
 10339  0055DA  6F8A               	movwf	(f_write@btw+1)& (0+255),b
 10340  0055DC  0E01               	movlw	1
 10341  0055DE  6F89               	movwf	f_write@btw& (0+255),b
 10342  0055E0  0EA9               	movlw	low fputc@bw
 10343  0055E2  6F8B               	movwf	f_write@bw& (0+255),b
 10344  0055E4  EC09  F000         	call	_f_write	;wreg free
 10345                           
 10346                           ; BSR set to: 0
 10347                           ;tff.c: 1787: return bw ? chr : -1;
 10348  0055E8  51A9               	movf	fputc@bw& (0+255),w,b
 10349  0055EA  11AA               	iorwf	(fputc@bw+1)& (0+255),w,b
 10350  0055EC  A4D8               	btfss	status,2,c
 10351  0055EE  D7E7               	goto	u13370
 10352                           
 10353                           ; BSR set to: 0
 10354  0055F0  69A4               	setf	?_fputc& (0+255),b
 10355  0055F2  69A5               	setf	(?_fputc+1)& (0+255),b
 10356                           
 10357                           ; BSR set to: 0
 10358  0055F4  0012               	return		;funcret
 10359  0055F6                     __end_of_fputc:
 10360                           	callstack 0
 10361                           
 10362 ;; *************** function _f_write *****************
 10363 ;; Defined at:
 10364 ;;		line 999 in file "bibliotecas/tff.c"
 10365 ;; Parameters:    Size  Location     Type
 10366 ;;  fp              2   38[BANK0 ] PTR struct _FIL
 10367 ;;		 -> fil(28), 
 10368 ;;  buff            1   40[BANK0 ] PTR const void 
 10369 ;;		 -> fputc@c(1), 
 10370 ;;  btw             2   41[BANK0 ] unsigned int 
 10371 ;;  bw              1   43[BANK0 ] PTR unsigned int 
 10372 ;;		 -> fputc@bw(2), 
 10373 ;; Auto vars:     Size  Location     Type
 10374 ;;  sect            4   58[BANK0 ] unsigned long 
 10375 ;;  wcnt            2   66[BANK0 ] unsigned int 
 10376 ;;  clust           2   64[BANK0 ] unsigned short 
 10377 ;;  cc              2   62[BANK0 ] unsigned int 
 10378 ;;  wbuff           1   57[BANK0 ] PTR const unsigned char 
 10379 ;;		 -> fputc@c(1), 
 10380 ;;  res             1   56[BANK0 ] enum E155
 10381 ;; Return value:  Size  Location     Type
 10382 ;;                  1    wreg      enum E155
 10383 ;; Registers used:
 10384 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10385 ;; Tracked objects:
 10386 ;;		On entry : 3F/0
 10387 ;;		On exit  : 3F/0
 10388 ;;		Unchanged: 0/0
 10389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10390 ;;      Params:         0       6       0       0       0       0       0       0       0
 10391 ;;      Locals:         0      12       0       0       0       0       0       0       0
 10392 ;;      Temps:          0      12       0       0       0       0       0       0       0
 10393 ;;      Totals:         0      30       0       0       0       0       0       0       0
 10394 ;;Total ram usage:       30 bytes
 10395 ;; Hardware stack levels used:    1
 10396 ;; Hardware stack levels required when called:   10
 10397 ;; This function calls:
 10398 ;;		_clust2sect
 10399 ;;		_create_chain
 10400 ;;		_disk_write
 10401 ;;		_memcpy
 10402 ;;		_move_window
 10403 ;;		_validate
 10404 ;; This function is called by:
 10405 ;;		_fputc
 10406 ;; This function uses a non-reentrant model
 10407 ;;
 10408                           
 10409                           	psect	text68
 10410  000012                     __ptext68:
 10411                           	callstack 0
 10412  000012                     _f_write:
 10413                           	callstack 13
 10414                           
 10415                           ; BSR set to: 0
 10416                           ;tff.c: 1006: FRESULT res;;tff.c: 1007: DWORD sect;;tff.c: 1008: UINT wcnt, cc;;tff.c: 1
      +                          009: CLUST clust;;tff.c: 1010: const BYTE *wbuff = buff;
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;incstack = 0
 10420  000012  C088  F099         	movff	f_write@buff,f_write@wbuff
 10421                           
 10422                           ; BSR set to: 0
 10423                           ;tff.c: 1013: *bw = 0;
 10424  000016  518B               	movf	f_write@bw& (0+255),w,b
 10425  000018  6ED9               	movwf	fsr2l,c
 10426  00001A  6ADA               	clrf	fsr2h,c
 10427  00001C  0E00               	movlw	0
 10428  00001E  6EDE               	movwf	postinc2,c
 10429  000020  0E00               	movlw	0
 10430  000022  6EDD               	movwf	postdec2,c
 10431                           
 10432                           ; BSR set to: 0
 10433                           ;tff.c: 1014: res = validate(fp->fs, fp->id);
 10434  000024  EE20 F004          	lfsr	2,4
 10435  000028  5186               	movf	f_write@fp& (0+255),w,b
 10436  00002A  26D9               	addwf	fsr2l,f,c
 10437  00002C  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10438  00002E  22DA               	addwfc	fsr2h,f,c
 10439  000030  CFDE F010          	movff	postinc2,validate@fs
 10440  000034  CFDD F011          	movff	postdec2,validate@fs+1
 10441  000038  C086  FFD9         	movff	f_write@fp,fsr2l
 10442  00003C  C087  FFDA         	movff	f_write@fp+1,fsr2h
 10443  000040  CFDE F012          	movff	postinc2,validate@id
 10444  000044  CFDD F013          	movff	postdec2,validate@id+1
 10445  000048  ECEE  F029         	call	_validate	;wreg free
 10446  00004C  0100               	movlb	0	; () banked
 10447  00004E  6F98               	movwf	f_write@res& (0+255),b
 10448                           
 10449                           ; BSR set to: 0
 10450                           ;tff.c: 1015: if (res != FR_OK) return res;
 10451  000050  5198               	movf	f_write@res& (0+255),w,b
 10452  000052  A4D8               	btfss	status,2,c
 10453  000054  0012               	return	
 10454                           
 10455                           ; BSR set to: 0
 10456                           ;tff.c: 1016: if (fp->flag & 0x80) return FR_RW_ERROR;
 10457  000056  EE20 F002          	lfsr	2,2
 10458  00005A  5186               	movf	f_write@fp& (0+255),w,b
 10459  00005C  26D9               	addwf	fsr2l,f,c
 10460  00005E  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10461  000060  22DA               	addwfc	fsr2h,f,c
 10462  000062  BEDF               	btfsc	indf2,7,c
 10463  000064  0012               	return	
 10464                           
 10465                           ; BSR set to: 0
 10466                           ;tff.c: 1017: if (!(fp->flag & 0x02)) return FR_DENIED;
 10467  000066  EE20 F002          	lfsr	2,2
 10468  00006A  5186               	movf	f_write@fp& (0+255),w,b
 10469  00006C  26D9               	addwf	fsr2l,f,c
 10470  00006E  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10471  000070  22DA               	addwfc	fsr2h,f,c
 10472  000072  A2DF               	btfss	indf2,1,c
 10473  000074  0012               	return	
 10474                           
 10475                           ; BSR set to: 0
 10476                           ;tff.c: 1018: if (fp->fsize + btw < fp->fsize) return FR_OK;
 10477  000076  EE20 F00A          	lfsr	2,10
 10478  00007A  5186               	movf	f_write@fp& (0+255),w,b
 10479  00007C  26D9               	addwf	fsr2l,f,c
 10480  00007E  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10481  000080  22DA               	addwfc	fsr2h,f,c
 10482  000082  EE10 F00A          	lfsr	1,10
 10483  000086  5186               	movf	f_write@fp& (0+255),w,b
 10484  000088  26E1               	addwf	fsr1l,f,c
 10485  00008A  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10486  00008C  22E2               	addwfc	fsr1h,f,c
 10487  00008E  CFE6 F090          	movff	postinc1,??_f_write+4
 10488  000092  CFE6 F091          	movff	postinc1,??_f_write+5
 10489  000096  CFE6 F092          	movff	postinc1,??_f_write+6
 10490  00009A  CFE6 F093          	movff	postinc1,??_f_write+7
 10491  00009E  5189               	movf	f_write@btw& (0+255),w,b
 10492  0000A0  2590               	addwf	(??_f_write+4)& (0+255),w,b
 10493  0000A2  6F94               	movwf	(??_f_write+8)& (0+255),b
 10494  0000A4  518A               	movf	(f_write@btw+1)& (0+255),w,b
 10495  0000A6  2191               	addwfc	(??_f_write+5)& (0+255),w,b
 10496  0000A8  6F95               	movwf	(??_f_write+9)& (0+255),b
 10497  0000AA  0E00               	movlw	0
 10498  0000AC  2192               	addwfc	(??_f_write+6)& (0+255),w,b
 10499  0000AE  6F96               	movwf	(??_f_write+10)& (0+255),b
 10500  0000B0  0E00               	movlw	0
 10501  0000B2  2193               	addwfc	(??_f_write+7)& (0+255),w,b
 10502  0000B4  6F97               	movwf	(??_f_write+11)& (0+255),b
 10503  0000B6  50DE               	movf	postinc2,w,c
 10504  0000B8  5D94               	subwf	(??_f_write+8)& (0+255),w,b
 10505  0000BA  50DE               	movf	postinc2,w,c
 10506  0000BC  5995               	subwfb	(??_f_write+9)& (0+255),w,b
 10507  0000BE  50DE               	movf	postinc2,w,c
 10508  0000C0  5996               	subwfb	(??_f_write+10)& (0+255),w,b
 10509  0000C2  50DE               	movf	postinc2,w,c
 10510  0000C4  5997               	subwfb	(??_f_write+11)& (0+255),w,b
 10511  0000C6  A0D8               	btfss	status,0,c
 10512  0000C8  0012               	return	
 10513  0000CA  D22D               	goto	l11289
 10514  0000CC                     l11213:
 10515                           
 10516                           ; BSR set to: 0
 10517                           ;tff.c: 1022: if ((fp->fptr % 512U) == 0) {
 10518  0000CC  EE20 F006          	lfsr	2,6
 10519  0000D0  5186               	movf	f_write@fp& (0+255),w,b
 10520  0000D2  26D9               	addwf	fsr2l,f,c
 10521  0000D4  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10522  0000D6  22DA               	addwfc	fsr2h,f,c
 10523  0000D8  0EFF               	movlw	255
 10524  0000DA  14DE               	andwf	postinc2,w,c
 10525  0000DC  6F8C               	movwf	??_f_write& (0+255),b
 10526  0000DE  0E01               	movlw	1
 10527  0000E0  14DE               	andwf	postinc2,w,c
 10528  0000E2  6F8D               	movwf	(??_f_write+1)& (0+255),b
 10529  0000E4  0E00               	movlw	0
 10530  0000E6  14DE               	andwf	postinc2,w,c
 10531  0000E8  6F8E               	movwf	(??_f_write+2)& (0+255),b
 10532  0000EA  0E00               	movlw	0
 10533  0000EC  14DE               	andwf	postinc2,w,c
 10534  0000EE  6F8F               	movwf	(??_f_write+3)& (0+255),b
 10535  0000F0  518C               	movf	??_f_write& (0+255),w,b
 10536  0000F2  118D               	iorwf	(??_f_write+1)& (0+255),w,b
 10537  0000F4  118E               	iorwf	(??_f_write+2)& (0+255),w,b
 10538  0000F6  118F               	iorwf	(??_f_write+3)& (0+255),w,b
 10539  0000F8  A4D8               	btfss	status,2,c
 10540  0000FA  D15E               	goto	l11265
 10541                           
 10542                           ; BSR set to: 0
 10543                           ;tff.c: 1023: if (fp->csect >= fp->fs->csize) {
 10544  0000FC  EE20 F004          	lfsr	2,4
 10545  000100  5186               	movf	f_write@fp& (0+255),w,b
 10546  000102  26D9               	addwf	fsr2l,f,c
 10547  000104  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10548  000106  22DA               	addwfc	fsr2h,f,c
 10549  000108  EE10 F01D          	lfsr	1,29
 10550  00010C  50DE               	movf	postinc2,w,c
 10551  00010E  26E1               	addwf	fsr1l,f,c
 10552  000110  50DD               	movf	postdec2,w,c
 10553  000112  22E2               	addwfc	fsr1h,f,c
 10554  000114  EE20 F003          	lfsr	2,3
 10555  000118  5186               	movf	f_write@fp& (0+255),w,b
 10556  00011A  26D9               	addwf	fsr2l,f,c
 10557  00011C  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10558  00011E  22DA               	addwfc	fsr2h,f,c
 10559  000120  50E6               	movf	postinc1,w,c
 10560  000122  5CDE               	subwf	postinc2,w,c
 10561  000124  A0D8               	btfss	status,0,c
 10562  000126  D06B               	goto	l11237
 10563                           
 10564                           ; BSR set to: 0
 10565                           ;tff.c: 1024: if (fp->fptr == 0) {
 10566  000128  EE20 F006          	lfsr	2,6
 10567  00012C  5186               	movf	f_write@fp& (0+255),w,b
 10568  00012E  26D9               	addwf	fsr2l,f,c
 10569  000130  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10570  000132  22DA               	addwfc	fsr2h,f,c
 10571  000134  50DE               	movf	postinc2,w,c
 10572  000136  10DE               	iorwf	postinc2,w,c
 10573  000138  10DE               	iorwf	postinc2,w,c
 10574  00013A  10DE               	iorwf	postinc2,w,c
 10575  00013C  A4D8               	btfss	status,2,c
 10576  00013E  D023               	goto	l11225
 10577                           
 10578                           ; BSR set to: 0
 10579                           ;tff.c: 1025: clust = fp->org_clust;
 10580  000140  EE20 F00E          	lfsr	2,14
 10581  000144  5186               	movf	f_write@fp& (0+255),w,b
 10582  000146  26D9               	addwf	fsr2l,f,c
 10583  000148  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10584  00014A  22DA               	addwfc	fsr2h,f,c
 10585  00014C  CFDE F0A0          	movff	postinc2,f_write@clust
 10586  000150  CFDD F0A1          	movff	postdec2,f_write@clust+1
 10587                           
 10588                           ; BSR set to: 0
 10589                           ;tff.c: 1026: if (clust == 0)
 10590  000154  51A0               	movf	f_write@clust& (0+255),w,b
 10591  000156  11A1               	iorwf	(f_write@clust+1)& (0+255),w,b
 10592  000158  A4D8               	btfss	status,2,c
 10593  00015A  D025               	goto	l11227
 10594                           
 10595                           ; BSR set to: 0
 10596                           ;tff.c: 1027: fp->org_clust = clust = create_chain(0);
 10597  00015C  0E00               	movlw	0
 10598  00015E  6F79               	movwf	(create_chain@clust+1)& (0+255),b
 10599  000160  0E00               	movlw	0
 10600  000162  6F78               	movwf	create_chain@clust& (0+255),b
 10601  000164  ECED  F016         	call	_create_chain	;wreg free
 10602  000168  C078  F0A0         	movff	?_create_chain,f_write@clust
 10603  00016C  C079  F0A1         	movff	?_create_chain+1,f_write@clust+1
 10604  000170  EE20 F00E          	lfsr	2,14
 10605  000174  5186               	movf	f_write@fp& (0+255),w,b
 10606  000176  26D9               	addwf	fsr2l,f,c
 10607  000178  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10608  00017A  22DA               	addwfc	fsr2h,f,c
 10609  00017C  C0A0  FFDE         	movff	f_write@clust,postinc2
 10610  000180  C0A1  FFDD         	movff	f_write@clust+1,postdec2
 10611  000184  D010               	goto	l11227
 10612  000186                     l11225:
 10613                           
 10614                           ; BSR set to: 0
 10615                           ;tff.c: 1029: clust = create_chain(fp->curr_clust);
 10616  000186  EE20 F010          	lfsr	2,16
 10617  00018A  5186               	movf	f_write@fp& (0+255),w,b
 10618  00018C  26D9               	addwf	fsr2l,f,c
 10619  00018E  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10620  000190  22DA               	addwfc	fsr2h,f,c
 10621  000192  CFDE F078          	movff	postinc2,create_chain@clust
 10622  000196  CFDD F079          	movff	postdec2,create_chain@clust+1
 10623  00019A  ECED  F016         	call	_create_chain	;wreg free
 10624  00019E  C078  F0A0         	movff	?_create_chain,f_write@clust
 10625  0001A2  C079  F0A1         	movff	?_create_chain+1,f_write@clust+1
 10626  0001A6                     l11227:
 10627                           
 10628                           ; BSR set to: 0
 10629                           ;tff.c: 1030: };tff.c: 1031: if (clust == 0) break;
 10630  0001A6  51A0               	movf	f_write@clust& (0+255),w,b
 10631  0001A8  11A1               	iorwf	(f_write@clust+1)& (0+255),w,b
 10632  0001AA  B4D8               	btfsc	status,2,c
 10633  0001AC  D1C0               	goto	u12850
 10634                           
 10635                           ; BSR set to: 0
 10636                           ;tff.c: 1032: if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
 10637  0001AE  05A0               	decf	f_write@clust& (0+255),w,b
 10638  0001B0  11A1               	iorwf	(f_write@clust+1)& (0+255),w,b
 10639  0001B2  B4D8               	btfsc	status,2,c
 10640  0001B4  D1EF               	goto	l11299
 10641                           
 10642                           ; BSR set to: 0
 10643  0001B6  EE20 F004          	lfsr	2,4
 10644  0001BA  5186               	movf	f_write@fp& (0+255),w,b
 10645  0001BC  26D9               	addwf	fsr2l,f,c
 10646  0001BE  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10647  0001C0  22DA               	addwfc	fsr2h,f,c
 10648  0001C2  EE10 F016          	lfsr	1,22
 10649  0001C6  50DE               	movf	postinc2,w,c
 10650  0001C8  26E1               	addwf	fsr1l,f,c
 10651  0001CA  50DD               	movf	postdec2,w,c
 10652  0001CC  22E2               	addwfc	fsr1h,f,c
 10653  0001CE  50E6               	movf	postinc1,w,c
 10654  0001D0  5DA0               	subwf	f_write@clust& (0+255),w,b
 10655  0001D2  50E6               	movf	postinc1,w,c
 10656  0001D4  59A1               	subwfb	(f_write@clust+1)& (0+255),w,b
 10657  0001D6  B0D8               	btfsc	status,0,c
 10658  0001D8  D1DD               	goto	l11299
 10659                           
 10660                           ; BSR set to: 0
 10661                           ;tff.c: 1033: fp->curr_clust = clust;
 10662  0001DA  EE20 F010          	lfsr	2,16
 10663  0001DE  5186               	movf	f_write@fp& (0+255),w,b
 10664  0001E0  26D9               	addwf	fsr2l,f,c
 10665  0001E2  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10666  0001E4  22DA               	addwfc	fsr2h,f,c
 10667  0001E6  C0A0  FFDE         	movff	f_write@clust,postinc2
 10668  0001EA  C0A1  FFDD         	movff	f_write@clust+1,postdec2
 10669                           
 10670                           ;tff.c: 1034: fp->csect = 0;
 10671  0001EE  EE20 F003          	lfsr	2,3
 10672  0001F2  5186               	movf	f_write@fp& (0+255),w,b
 10673  0001F4  26D9               	addwf	fsr2l,f,c
 10674  0001F6  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10675  0001F8  22DA               	addwfc	fsr2h,f,c
 10676  0001FA  0E00               	movlw	0
 10677  0001FC  6EDF               	movwf	indf2,c
 10678  0001FE                     l11237:
 10679                           
 10680                           ; BSR set to: 0
 10681                           ;tff.c: 1035: };tff.c: 1036: sect = clust2sect(fp->curr_clust) + fp->csect;
 10682  0001FE  EE20 F010          	lfsr	2,16
 10683  000202  5186               	movf	f_write@fp& (0+255),w,b
 10684  000204  26D9               	addwf	fsr2l,f,c
 10685  000206  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10686  000208  22DA               	addwfc	fsr2h,f,c
 10687  00020A  CFDE F016          	movff	postinc2,clust2sect@clust
 10688  00020E  CFDD F017          	movff	postdec2,clust2sect@clust+1
 10689  000212  EC32  F021         	call	_clust2sect	;wreg free
 10690  000216  0100               	movlb	0	; () banked
 10691  000218  EE20 F003          	lfsr	2,3
 10692  00021C  5186               	movf	f_write@fp& (0+255),w,b
 10693  00021E  26D9               	addwf	fsr2l,f,c
 10694  000220  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10695  000222  22DA               	addwfc	fsr2h,f,c
 10696  000224  50DF               	movf	indf2,w,c
 10697  000226  6F8C               	movwf	??_f_write& (0+255),b
 10698  000228  518C               	movf	??_f_write& (0+255),w,b
 10699  00022A  2416               	addwf	?_clust2sect^0,w,c
 10700  00022C  6F9A               	movwf	f_write@sect& (0+255),b
 10701  00022E  0E00               	movlw	0
 10702  000230  2017               	addwfc	(?_clust2sect+1)^0,w,c
 10703  000232  6F9B               	movwf	(f_write@sect+1)& (0+255),b
 10704  000234  0E00               	movlw	0
 10705  000236  2018               	addwfc	(?_clust2sect+2)^0,w,c
 10706  000238  6F9C               	movwf	(f_write@sect+2)& (0+255),b
 10707  00023A  0E00               	movlw	0
 10708  00023C  2019               	addwfc	(?_clust2sect+3)^0,w,c
 10709  00023E  6F9D               	movwf	(f_write@sect+3)& (0+255),b
 10710                           
 10711                           ; BSR set to: 0
 10712                           ;tff.c: 1037: cc = btw / 512U;
 10713  000240  C089  F08C         	movff	f_write@btw,??_f_write
 10714  000244  C08A  F08D         	movff	f_write@btw+1,??_f_write+1
 10715  000248  0E09               	movlw	9
 10716  00024A  6F8E               	movwf	(??_f_write+2)& (0+255),b
 10717  00024C                     u12765:
 10718  00024C  90D8               	bcf	status,0,c
 10719  00024E  338D               	rrcf	(??_f_write+1)& (0+255),f,b
 10720  000250  338C               	rrcf	??_f_write& (0+255),f,b
 10721  000252  2F8E               	decfsz	(??_f_write+2)& (0+255),f,b
 10722  000254  D7FB               	goto	u12765
 10723  000256  C08C  F09E         	movff	??_f_write,f_write@cc
 10724  00025A  C08D  F09F         	movff	??_f_write+1,f_write@cc+1
 10725                           
 10726                           ; BSR set to: 0
 10727                           ;tff.c: 1038: if (cc) {
 10728  00025E  519E               	movf	f_write@cc& (0+255),w,b
 10729  000260  119F               	iorwf	(f_write@cc+1)& (0+255),w,b
 10730  000262  B4D8               	btfsc	status,2,c
 10731  000264  D06A               	goto	l11255
 10732                           
 10733                           ; BSR set to: 0
 10734                           ;tff.c: 1039: if (fp->csect + cc > fp->fs->csize)
 10735  000266  EE20 F003          	lfsr	2,3
 10736  00026A  5186               	movf	f_write@fp& (0+255),w,b
 10737  00026C  26D9               	addwf	fsr2l,f,c
 10738  00026E  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10739  000270  22DA               	addwfc	fsr2h,f,c
 10740  000272  50DF               	movf	indf2,w,c
 10741  000274  6F8C               	movwf	??_f_write& (0+255),b
 10742  000276  518C               	movf	??_f_write& (0+255),w,b
 10743  000278  259E               	addwf	f_write@cc& (0+255),w,b
 10744  00027A  6F8D               	movwf	(??_f_write+1)& (0+255),b
 10745  00027C  0E00               	movlw	0
 10746  00027E  219F               	addwfc	(f_write@cc+1)& (0+255),w,b
 10747  000280  6F8E               	movwf	(??_f_write+2)& (0+255),b
 10748  000282  EE20 F004          	lfsr	2,4
 10749  000286  5186               	movf	f_write@fp& (0+255),w,b
 10750  000288  26D9               	addwf	fsr2l,f,c
 10751  00028A  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10752  00028C  22DA               	addwfc	fsr2h,f,c
 10753  00028E  EE10 F01D          	lfsr	1,29
 10754  000292  50DE               	movf	postinc2,w,c
 10755  000294  26E1               	addwf	fsr1l,f,c
 10756  000296  50DD               	movf	postdec2,w,c
 10757  000298  22E2               	addwfc	fsr1h,f,c
 10758  00029A  50E7               	movf	indf1,w,c
 10759  00029C  6F8F               	movwf	(??_f_write+3)& (0+255),b
 10760  00029E  6B90               	clrf	(??_f_write+4)& (0+255),b
 10761  0002A0  518D               	movf	(??_f_write+1)& (0+255),w,b
 10762  0002A2  5D8F               	subwf	(??_f_write+3)& (0+255),w,b
 10763  0002A4  518E               	movf	(??_f_write+2)& (0+255),w,b
 10764  0002A6  5990               	subwfb	(??_f_write+4)& (0+255),w,b
 10765  0002A8  B0D8               	btfsc	status,0,c
 10766  0002AA  D01C               	goto	l11247
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;tff.c: 1040: cc = fp->fs->csize - fp->csect;
 10770  0002AC  EE20 F004          	lfsr	2,4
 10771  0002B0  5186               	movf	f_write@fp& (0+255),w,b
 10772  0002B2  26D9               	addwf	fsr2l,f,c
 10773  0002B4  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10774  0002B6  22DA               	addwfc	fsr2h,f,c
 10775  0002B8  EE10 F01D          	lfsr	1,29
 10776  0002BC  50DE               	movf	postinc2,w,c
 10777  0002BE  26E1               	addwf	fsr1l,f,c
 10778  0002C0  50DD               	movf	postdec2,w,c
 10779  0002C2  22E2               	addwfc	fsr1h,f,c
 10780  0002C4  50E7               	movf	indf1,w,c
 10781  0002C6  6F8C               	movwf	??_f_write& (0+255),b
 10782  0002C8  EE20 F003          	lfsr	2,3
 10783  0002CC  5186               	movf	f_write@fp& (0+255),w,b
 10784  0002CE  26D9               	addwf	fsr2l,f,c
 10785  0002D0  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10786  0002D2  22DA               	addwfc	fsr2h,f,c
 10787  0002D4  50DF               	movf	indf2,w,c
 10788  0002D6  6F8D               	movwf	(??_f_write+1)& (0+255),b
 10789  0002D8  518D               	movf	(??_f_write+1)& (0+255),w,b
 10790  0002DA  5D8C               	subwf	??_f_write& (0+255),w,b
 10791  0002DC  6F9E               	movwf	f_write@cc& (0+255),b
 10792  0002DE  6B9F               	clrf	(f_write@cc+1)& (0+255),b
 10793  0002E0  A0D8               	btfss	status,0,c
 10794  0002E2  079F               	decf	(f_write@cc+1)& (0+255),f,b
 10795  0002E4                     l11247:
 10796                           
 10797                           ; BSR set to: 0
 10798                           ;tff.c: 1041: if (disk_write(0, wbuff, sect, (BYTE)cc) != RES_OK)
 10799  0002E4  C099  F029         	movff	f_write@wbuff,disk_write@buff
 10800  0002E8  6A2A               	clrf	(disk_write@buff+1)^0,c
 10801  0002EA  C09A  F02B         	movff	f_write@sect,disk_write@sector
 10802  0002EE  C09B  F02C         	movff	f_write@sect+1,disk_write@sector+1
 10803  0002F2  C09C  F02D         	movff	f_write@sect+2,disk_write@sector+2
 10804  0002F6  C09D  F02E         	movff	f_write@sect+3,disk_write@sector+3
 10805  0002FA  C09E  F02F         	movff	f_write@cc,disk_write@count
 10806  0002FE  0E00               	movlw	0
 10807  000300  EC5C  F029         	call	_disk_write
 10808  000304  0900               	iorlw	0
 10809  000306  A4D8               	btfss	status,2,c
 10810  000308  D145               	goto	l11299
 10811                           
 10812                           ;tff.c: 1043: fp->csect += (BYTE)cc;
 10813  00030A  0100               	movlb	0	; () banked
 10814  00030C  EE20 F003          	lfsr	2,3
 10815  000310  5186               	movf	f_write@fp& (0+255),w,b
 10816  000312  26D9               	addwf	fsr2l,f,c
 10817  000314  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10818  000316  22DA               	addwfc	fsr2h,f,c
 10819  000318  519E               	movf	f_write@cc& (0+255),w,b
 10820  00031A  26DF               	addwf	indf2,f,c
 10821                           
 10822                           ; BSR set to: 0
 10823                           ;tff.c: 1044: wcnt = 512U * cc;
 10824  00031C  C09E  F08C         	movff	f_write@cc,??_f_write
 10825  000320  C09F  F08D         	movff	f_write@cc+1,??_f_write+1
 10826  000324  0E09               	movlw	9
 10827  000326                     u12805:
 10828  000326  90D8               	bcf	status,0,c
 10829  000328  378C               	rlcf	??_f_write& (0+255),f,b
 10830  00032A  378D               	rlcf	(??_f_write+1)& (0+255),f,b
 10831  00032C  2EE8               	decfsz	wreg,f,c
 10832  00032E  D7FB               	goto	u12805
 10833  000330  C08C  F0A2         	movff	??_f_write,f_write@wcnt
 10834  000334  C08D  F0A3         	movff	??_f_write+1,f_write@wcnt+1
 10835                           
 10836                           ;tff.c: 1045: continue;
 10837  000338  D0DC               	goto	l11281
 10838  00033A                     l11255:
 10839                           
 10840                           ; BSR set to: 0
 10841                           ;tff.c: 1046: };tff.c: 1047: if (fp->fptr >= fp->fsize) {
 10842  00033A  EE20 F00A          	lfsr	2,10
 10843  00033E  5186               	movf	f_write@fp& (0+255),w,b
 10844  000340  26D9               	addwf	fsr2l,f,c
 10845  000342  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10846  000344  22DA               	addwfc	fsr2h,f,c
 10847  000346  EE10 F006          	lfsr	1,6
 10848  00034A  5186               	movf	f_write@fp& (0+255),w,b
 10849  00034C  26E1               	addwf	fsr1l,f,c
 10850  00034E  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10851  000350  22E2               	addwfc	fsr1h,f,c
 10852  000352  50DE               	movf	postinc2,w,c
 10853  000354  5CE6               	subwf	postinc1,w,c
 10854  000356  50DE               	movf	postinc2,w,c
 10855  000358  58E6               	subwfb	postinc1,w,c
 10856  00035A  50DE               	movf	postinc2,w,c
 10857  00035C  58E6               	subwfb	postinc1,w,c
 10858  00035E  50DE               	movf	postinc2,w,c
 10859  000360  58E6               	subwfb	postinc1,w,c
 10860  000362  A0D8               	btfss	status,0,c
 10861  000364  D022               	goto	l11263
 10862                           
 10863                           ; BSR set to: 0
 10864                           ;tff.c: 1048: if (!move_window(0)) goto fw_error;
 10865  000366  0E00               	movlw	0
 10866  000368  6E35               	movwf	move_window@sector^0,c
 10867  00036A  0E00               	movlw	0
 10868  00036C  6E36               	movwf	(move_window@sector+1)^0,c
 10869  00036E  0E00               	movlw	0
 10870  000370  6E37               	movwf	(move_window@sector+2)^0,c
 10871  000372  0E00               	movlw	0
 10872  000374  6E38               	movwf	(move_window@sector+3)^0,c
 10873  000376  EC47  F015         	call	_move_window	;wreg free
 10874  00037A  0900               	iorlw	0
 10875  00037C  B4D8               	btfsc	status,2,c
 10876  00037E  D10A               	goto	l11299
 10877                           
 10878                           ;tff.c: 1049: fp->fs->winsect = sect;
 10879  000380  0100               	movlb	0	; () banked
 10880  000382  EE20 F004          	lfsr	2,4
 10881  000386  5186               	movf	f_write@fp& (0+255),w,b
 10882  000388  26D9               	addwf	fsr2l,f,c
 10883  00038A  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10884  00038C  22DA               	addwfc	fsr2h,f,c
 10885  00038E  EE10 F004          	lfsr	1,4
 10886  000392  50DE               	movf	postinc2,w,c
 10887  000394  26E1               	addwf	fsr1l,f,c
 10888  000396  50DD               	movf	postdec2,w,c
 10889  000398  22E2               	addwfc	fsr1h,f,c
 10890  00039A  C09A  FFE6         	movff	f_write@sect,postinc1
 10891  00039E  C09B  FFE6         	movff	f_write@sect+1,postinc1
 10892  0003A2  C09C  FFE6         	movff	f_write@sect+2,postinc1
 10893  0003A6  C09D  FFE6         	movff	f_write@sect+3,postinc1
 10894  0003AA                     l11263:
 10895                           
 10896                           ; BSR set to: 0
 10897                           ;tff.c: 1050: };tff.c: 1051: fp->csect++;
 10898  0003AA  EE20 F003          	lfsr	2,3
 10899  0003AE  5186               	movf	f_write@fp& (0+255),w,b
 10900  0003B0  26D9               	addwf	fsr2l,f,c
 10901  0003B2  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10902  0003B4  22DA               	addwfc	fsr2h,f,c
 10903  0003B6  2ADF               	incf	indf2,f,c
 10904  0003B8                     l11265:
 10905                           
 10906                           ; BSR set to: 0
 10907                           ;tff.c: 1052: };tff.c: 1053: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
 10908  0003B8  EE20 F010          	lfsr	2,16
 10909  0003BC  5186               	movf	f_write@fp& (0+255),w,b
 10910  0003BE  26D9               	addwf	fsr2l,f,c
 10911  0003C0  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10912  0003C2  22DA               	addwfc	fsr2h,f,c
 10913  0003C4  CFDE F016          	movff	postinc2,clust2sect@clust
 10914  0003C8  CFDD F017          	movff	postdec2,clust2sect@clust+1
 10915  0003CC  EC32  F021         	call	_clust2sect	;wreg free
 10916  0003D0  0100               	movlb	0	; () banked
 10917  0003D2  EE20 F003          	lfsr	2,3
 10918  0003D6  5186               	movf	f_write@fp& (0+255),w,b
 10919  0003D8  26D9               	addwf	fsr2l,f,c
 10920  0003DA  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10921  0003DC  22DA               	addwfc	fsr2h,f,c
 10922  0003DE  50DF               	movf	indf2,w,c
 10923  0003E0  6F8C               	movwf	??_f_write& (0+255),b
 10924  0003E2  518C               	movf	??_f_write& (0+255),w,b
 10925  0003E4  2416               	addwf	?_clust2sect^0,w,c
 10926  0003E6  6F8D               	movwf	(??_f_write+1)& (0+255),b
 10927  0003E8  0E00               	movlw	0
 10928  0003EA  2017               	addwfc	(?_clust2sect+1)^0,w,c
 10929  0003EC  6F8E               	movwf	(??_f_write+2)& (0+255),b
 10930  0003EE  0E00               	movlw	0
 10931  0003F0  2018               	addwfc	(?_clust2sect+2)^0,w,c
 10932  0003F2  6F8F               	movwf	(??_f_write+3)& (0+255),b
 10933  0003F4  0E00               	movlw	0
 10934  0003F6  2019               	addwfc	(?_clust2sect+3)^0,w,c
 10935  0003F8  6F90               	movwf	(??_f_write+4)& (0+255),b
 10936  0003FA  0EFF               	movlw	255
 10937  0003FC  258D               	addwf	(??_f_write+1)& (0+255),w,b
 10938  0003FE  6F9A               	movwf	f_write@sect& (0+255),b
 10939  000400  0EFF               	movlw	255
 10940  000402  218E               	addwfc	(??_f_write+2)& (0+255),w,b
 10941  000404  6F9B               	movwf	(f_write@sect+1)& (0+255),b
 10942  000406  0EFF               	movlw	255
 10943  000408  218F               	addwfc	(??_f_write+3)& (0+255),w,b
 10944  00040A  6F9C               	movwf	(f_write@sect+2)& (0+255),b
 10945  00040C  0EFF               	movlw	255
 10946  00040E  2190               	addwfc	(??_f_write+4)& (0+255),w,b
 10947  000410  6F9D               	movwf	(f_write@sect+3)& (0+255),b
 10948                           
 10949                           ; BSR set to: 0
 10950                           ;tff.c: 1054: if (!move_window(sect)) goto fw_error;
 10951  000412  C09A  F035         	movff	f_write@sect,move_window@sector
 10952  000416  C09B  F036         	movff	f_write@sect+1,move_window@sector+1
 10953  00041A  C09C  F037         	movff	f_write@sect+2,move_window@sector+2
 10954  00041E  C09D  F038         	movff	f_write@sect+3,move_window@sector+3
 10955  000422  EC47  F015         	call	_move_window	;wreg free
 10956  000426  0900               	iorlw	0
 10957  000428  B4D8               	btfsc	status,2,c
 10958  00042A  D0B4               	goto	l11299
 10959                           
 10960                           ;tff.c: 1055: wcnt = 512U - (fp->fptr % 512U);
 10961  00042C  0EFF               	movlw	255
 10962  00042E  0100               	movlb	0	; () banked
 10963  000430  6F8C               	movwf	??_f_write& (0+255),b
 10964  000432  0E01               	movlw	1
 10965  000434  6F8D               	movwf	(??_f_write+1)& (0+255),b
 10966  000436  EE20 F006          	lfsr	2,6
 10967  00043A  5186               	movf	f_write@fp& (0+255),w,b
 10968  00043C  26D9               	addwf	fsr2l,f,c
 10969  00043E  5187               	movf	(f_write@fp+1)& (0+255),w,b
 10970  000440  22DA               	addwfc	fsr2h,f,c
 10971  000442  CFDE F08E          	movff	postinc2,??_f_write+2
 10972  000446  CFDD F08F          	movff	postdec2,??_f_write+3
 10973  00044A  518C               	movf	??_f_write& (0+255),w,b
 10974  00044C  178E               	andwf	(??_f_write+2)& (0+255),f,b
 10975  00044E  518D               	movf	(??_f_write+1)& (0+255),w,b
 10976  000450  178F               	andwf	(??_f_write+3)& (0+255),f,b
 10977  000452  518E               	movf	(??_f_write+2)& (0+255),w,b
 10978  000454  0800               	sublw	0
 10979  000456  6FA2               	movwf	f_write@wcnt& (0+255),b
 10980  000458  518F               	movf	(??_f_write+3)& (0+255),w,b
 10981  00045A  A0D8               	btfss	status,0,c
 10982  00045C  2AE8               	incf	wreg,f,c
 10983  00045E  0802               	sublw	2
 10984  000460  6FA3               	movwf	(f_write@wcnt+1)& (0+255),b
 10985                           
 10986                           ; BSR set to: 0
 10987                           ;tff.c: 1056: if (wcnt > btw) wcnt = btw;
 10988  000462  51A2               	movf	f_write@wcnt& (0+255),w,b
 10989  000464  5D89               	subwf	f_write@btw& (0+255),w,b
 10990  000466  51A3               	movf	(f_write@wcnt+1)& (0+255),w,b
 10991  000468  598A               	subwfb	(f_write@btw+1)& (0+255),w,b
 10992  00046A  B0D8               	btfsc	status,0,c
 10993  00046C  D004               	goto	l11277
 10994                           
 10995                           ; BSR set to: 0
 10996  00046E  C089  F0A2         	movff	f_write@btw,f_write@wcnt
 10997  000472  C08A  F0A3         	movff	f_write@btw+1,f_write@wcnt+1
 10998  000476                     l11277:
 10999                           
 11000                           ; BSR set to: 0
 11001                           ;tff.c: 1057: memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
 11002  000476  0EFF               	movlw	255
 11003  000478  6F8C               	movwf	??_f_write& (0+255),b
 11004  00047A  0E01               	movlw	1
 11005  00047C  6F8D               	movwf	(??_f_write+1)& (0+255),b
 11006  00047E  EE20 F006          	lfsr	2,6
 11007  000482  5186               	movf	f_write@fp& (0+255),w,b
 11008  000484  26D9               	addwf	fsr2l,f,c
 11009  000486  5187               	movf	(f_write@fp+1)& (0+255),w,b
 11010  000488  22DA               	addwfc	fsr2h,f,c
 11011  00048A  CFDE F08E          	movff	postinc2,??_f_write+2
 11012  00048E  CFDD F08F          	movff	postdec2,??_f_write+3
 11013  000492  518C               	movf	??_f_write& (0+255),w,b
 11014  000494  178E               	andwf	(??_f_write+2)& (0+255),f,b
 11015  000496  518D               	movf	(??_f_write+1)& (0+255),w,b
 11016  000498  178F               	andwf	(??_f_write+3)& (0+255),f,b
 11017  00049A  EE20 F004          	lfsr	2,4
 11018  00049E  5186               	movf	f_write@fp& (0+255),w,b
 11019  0004A0  26D9               	addwf	fsr2l,f,c
 11020  0004A2  5187               	movf	(f_write@fp+1)& (0+255),w,b
 11021  0004A4  22DA               	addwfc	fsr2h,f,c
 11022  0004A6  CFDE F090          	movff	postinc2,??_f_write+4
 11023  0004AA  CFDD F091          	movff	postdec2,??_f_write+5
 11024  0004AE  518E               	movf	(??_f_write+2)& (0+255),w,b
 11025  0004B0  2790               	addwf	(??_f_write+4)& (0+255),f,b
 11026  0004B2  518F               	movf	(??_f_write+3)& (0+255),w,b
 11027  0004B4  2391               	addwfc	(??_f_write+5)& (0+255),f,b
 11028  0004B6  0E20               	movlw	32
 11029  0004B8  2590               	addwf	(??_f_write+4)& (0+255),w,b
 11030  0004BA  6E0A               	movwf	memcpy@d1^0,c
 11031  0004BC  0E00               	movlw	0
 11032  0004BE  2191               	addwfc	(??_f_write+5)& (0+255),w,b
 11033  0004C0  6E0B               	movwf	(memcpy@d1+1)^0,c
 11034  0004C2  C099  F00C         	movff	f_write@wbuff,memcpy@s1
 11035  0004C6  6A0D               	clrf	(memcpy@s1+1)^0,c
 11036  0004C8  C0A2  F00E         	movff	f_write@wcnt,memcpy@n
 11037  0004CC  C0A3  F00F         	movff	f_write@wcnt+1,memcpy@n+1
 11038  0004D0  EC35  F02A         	call	_memcpy	;wreg free
 11039                           
 11040                           ;tff.c: 1058: fp->fs->winflag = 1;
 11041  0004D4  0100               	movlb	0	; () banked
 11042  0004D6  EE20 F004          	lfsr	2,4
 11043  0004DA  5186               	movf	f_write@fp& (0+255),w,b
 11044  0004DC  26D9               	addwf	fsr2l,f,c
 11045  0004DE  5187               	movf	(f_write@fp+1)& (0+255),w,b
 11046  0004E0  22DA               	addwfc	fsr2h,f,c
 11047  0004E2  EE10 F01F          	lfsr	1,31
 11048  0004E6  50DE               	movf	postinc2,w,c
 11049  0004E8  26E1               	addwf	fsr1l,f,c
 11050  0004EA  50DD               	movf	postdec2,w,c
 11051  0004EC  22E2               	addwfc	fsr1h,f,c
 11052  0004EE  0E01               	movlw	1
 11053  0004F0  6EE7               	movwf	indf1,c
 11054  0004F2                     l11281:
 11055                           
 11056                           ; BSR set to: 0
 11057  0004F2  51A2               	movf	f_write@wcnt& (0+255),w,b
 11058  0004F4  2799               	addwf	f_write@wbuff& (0+255),f,b
 11059                           
 11060                           ; BSR set to: 0
 11061  0004F6  EE20 F006          	lfsr	2,6
 11062  0004FA  5186               	movf	f_write@fp& (0+255),w,b
 11063  0004FC  26D9               	addwf	fsr2l,f,c
 11064  0004FE  5187               	movf	(f_write@fp+1)& (0+255),w,b
 11065  000500  22DA               	addwfc	fsr2h,f,c
 11066  000502  51A2               	movf	f_write@wcnt& (0+255),w,b
 11067  000504  26DE               	addwf	postinc2,f,c
 11068  000506  51A3               	movf	(f_write@wcnt+1)& (0+255),w,b
 11069  000508  22DE               	addwfc	postinc2,f,c
 11070  00050A  0E00               	movlw	0
 11071  00050C  22DE               	addwfc	postinc2,f,c
 11072  00050E  22DE               	addwfc	postinc2,f,c
 11073                           
 11074                           ; BSR set to: 0
 11075  000510  518B               	movf	f_write@bw& (0+255),w,b
 11076  000512  6ED9               	movwf	fsr2l,c
 11077  000514  6ADA               	clrf	fsr2h,c
 11078  000516  51A2               	movf	f_write@wcnt& (0+255),w,b
 11079  000518  26DE               	addwf	postinc2,f,c
 11080  00051A  51A3               	movf	(f_write@wcnt+1)& (0+255),w,b
 11081  00051C  22DD               	addwfc	postdec2,f,c
 11082                           
 11083                           ; BSR set to: 0
 11084  00051E  51A2               	movf	f_write@wcnt& (0+255),w,b
 11085  000520  5F89               	subwf	f_write@btw& (0+255),f,b
 11086  000522  51A3               	movf	(f_write@wcnt+1)& (0+255),w,b
 11087  000524  5B8A               	subwfb	(f_write@btw+1)& (0+255),f,b
 11088  000526                     l11289:
 11089                           
 11090                           ; BSR set to: 0
 11091  000526  5189               	movf	f_write@btw& (0+255),w,b
 11092  000528  118A               	iorwf	(f_write@btw+1)& (0+255),w,b
 11093  00052A  A4D8               	btfss	status,2,c
 11094  00052C  D5CF               	goto	l11213
 11095  00052E                     u12850:
 11096                           
 11097                           ; BSR set to: 0
 11098                           ;tff.c: 1059: };tff.c: 1061: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
 11099  00052E  EE20 F006          	lfsr	2,6
 11100  000532  5186               	movf	f_write@fp& (0+255),w,b
 11101  000534  26D9               	addwf	fsr2l,f,c
 11102  000536  5187               	movf	(f_write@fp+1)& (0+255),w,b
 11103  000538  22DA               	addwfc	fsr2h,f,c
 11104  00053A  EE10 F00A          	lfsr	1,10
 11105  00053E  5186               	movf	f_write@fp& (0+255),w,b
 11106  000540  26E1               	addwf	fsr1l,f,c
 11107  000542  5187               	movf	(f_write@fp+1)& (0+255),w,b
 11108  000544  22E2               	addwfc	fsr1h,f,c
 11109  000546  50DE               	movf	postinc2,w,c
 11110  000548  5CE6               	subwf	postinc1,w,c
 11111  00054A  50DE               	movf	postinc2,w,c
 11112  00054C  58E6               	subwfb	postinc1,w,c
 11113  00054E  50DE               	movf	postinc2,w,c
 11114  000550  58E6               	subwfb	postinc1,w,c
 11115  000552  50DE               	movf	postinc2,w,c
 11116  000554  58E6               	subwfb	postinc1,w,c
 11117  000556  B0D8               	btfsc	status,0,c
 11118  000558  D014               	goto	l11295
 11119                           
 11120                           ; BSR set to: 0
 11121  00055A  EE20 F006          	lfsr	2,6
 11122  00055E  5186               	movf	f_write@fp& (0+255),w,b
 11123  000560  26D9               	addwf	fsr2l,f,c
 11124  000562  5187               	movf	(f_write@fp+1)& (0+255),w,b
 11125  000564  22DA               	addwfc	fsr2h,f,c
 11126  000566  EE10 F00A          	lfsr	1,10
 11127  00056A  5186               	movf	f_write@fp& (0+255),w,b
 11128  00056C  26E1               	addwf	fsr1l,f,c
 11129  00056E  5187               	movf	(f_write@fp+1)& (0+255),w,b
 11130  000570  22E2               	addwfc	fsr1h,f,c
 11131  000572  CFDE FFE6          	movff	postinc2,postinc1
 11132  000576  CFDE FFE6          	movff	postinc2,postinc1
 11133  00057A  CFDE FFE6          	movff	postinc2,postinc1
 11134  00057E  CFDE FFE6          	movff	postinc2,postinc1
 11135  000582                     l11295:
 11136                           
 11137                           ; BSR set to: 0
 11138                           ;tff.c: 1062: fp->flag |= 0x20;
 11139  000582  EE20 F002          	lfsr	2,2
 11140  000586  5186               	movf	f_write@fp& (0+255),w,b
 11141  000588  26D9               	addwf	fsr2l,f,c
 11142  00058A  5187               	movf	(f_write@fp+1)& (0+255),w,b
 11143  00058C  22DA               	addwfc	fsr2h,f,c
 11144  00058E  0E00               	movlw	0
 11145  000590  8ADB               	bsf	plusw2,5,c
 11146  000592  0012               	return	
 11147  000594                     l11299:
 11148                           
 11149                           ;tff.c: 1066: fp->flag |= 0x80;
 11150  000594  0100               	movlb	0	; () banked
 11151  000596  EE20 F002          	lfsr	2,2
 11152  00059A  5186               	movf	f_write@fp& (0+255),w,b
 11153  00059C  26D9               	addwf	fsr2l,f,c
 11154  00059E  5187               	movf	(f_write@fp+1)& (0+255),w,b
 11155  0005A0  22DA               	addwfc	fsr2h,f,c
 11156  0005A2  0E00               	movlw	0
 11157  0005A4  8EDB               	bsf	plusw2,7,c
 11158                           
 11159                           ; BSR set to: 0
 11160  0005A6  0012               	return		;funcret
 11161  0005A8                     __end_of_f_write:
 11162                           	callstack 0
 11163                           
 11164 ;; *************** function ___llmod *****************
 11165 ;; Defined at:
 11166 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\llmod.c"
 11167 ;; Parameters:    Size  Location     Type
 11168 ;;  dividend        4    9[COMRAM] unsigned long 
 11169 ;;  divisor         4   13[COMRAM] unsigned long 
 11170 ;; Auto vars:     Size  Location     Type
 11171 ;;  counter         1   17[COMRAM] unsigned char 
 11172 ;; Return value:  Size  Location     Type
 11173 ;;                  4    9[COMRAM] unsigned long 
 11174 ;; Registers used:
 11175 ;;		wreg, status,2, status,0
 11176 ;; Tracked objects:
 11177 ;;		On entry : 0/1
 11178 ;;		On exit  : 0/0
 11179 ;;		Unchanged: 0/0
 11180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11181 ;;      Params:         8       0       0       0       0       0       0       0       0
 11182 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11183 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11184 ;;      Totals:         9       0       0       0       0       0       0       0       0
 11185 ;;Total ram usage:        9 bytes
 11186 ;; Hardware stack levels used:    1
 11187 ;; Hardware stack levels required when called:    2
 11188 ;; This function calls:
 11189 ;;		Nothing
 11190 ;; This function is called by:
 11191 ;;		_fprintf
 11192 ;;		_ultoa
 11193 ;; This function uses a non-reentrant model
 11194 ;;
 11195                           
 11196                           	psect	text69
 11197  004DD2                     __ptext69:
 11198                           	callstack 0
 11199  004DD2                     ___llmod:
 11200                           	callstack 23
 11201                           
 11202                           ; BSR set to: 0
 11203                           ;incstack = 0
 11204  004DD2  500E               	movf	___llmod@divisor^0,w,c
 11205  004DD4  100F               	iorwf	(___llmod@divisor+1)^0,w,c
 11206  004DD6  1010               	iorwf	(___llmod@divisor+2)^0,w,c
 11207  004DD8  1011               	iorwf	(___llmod@divisor+3)^0,w,c
 11208  004DDA  B4D8               	btfsc	status,2,c
 11209  004DDC  D024               	goto	l2158
 11210  004DDE  0E01               	movlw	1
 11211  004DE0  6E12               	movwf	___llmod@counter^0,c
 11212  004DE2  D006               	goto	l12165
 11213  004DE4                     l12163:
 11214  004DE4  90D8               	bcf	status,0,c
 11215  004DE6  360E               	rlcf	___llmod@divisor^0,f,c
 11216  004DE8  360F               	rlcf	(___llmod@divisor+1)^0,f,c
 11217  004DEA  3610               	rlcf	(___llmod@divisor+2)^0,f,c
 11218  004DEC  3611               	rlcf	(___llmod@divisor+3)^0,f,c
 11219  004DEE  2A12               	incf	___llmod@counter^0,f,c
 11220  004DF0                     l12165:
 11221  004DF0  AE11               	btfss	(___llmod@divisor+3)^0,7,c
 11222  004DF2  D7F8               	goto	l12163
 11223  004DF4                     u14190:
 11224  004DF4  500E               	movf	___llmod@divisor^0,w,c
 11225  004DF6  5C0A               	subwf	___llmod@dividend^0,w,c
 11226  004DF8  500F               	movf	(___llmod@divisor+1)^0,w,c
 11227  004DFA  580B               	subwfb	(___llmod@dividend+1)^0,w,c
 11228  004DFC  5010               	movf	(___llmod@divisor+2)^0,w,c
 11229  004DFE  580C               	subwfb	(___llmod@dividend+2)^0,w,c
 11230  004E00  5011               	movf	(___llmod@divisor+3)^0,w,c
 11231  004E02  580D               	subwfb	(___llmod@dividend+3)^0,w,c
 11232  004E04  A0D8               	btfss	status,0,c
 11233  004E06  D008               	goto	l12171
 11234  004E08  500E               	movf	___llmod@divisor^0,w,c
 11235  004E0A  5E0A               	subwf	___llmod@dividend^0,f,c
 11236  004E0C  500F               	movf	(___llmod@divisor+1)^0,w,c
 11237  004E0E  5A0B               	subwfb	(___llmod@dividend+1)^0,f,c
 11238  004E10  5010               	movf	(___llmod@divisor+2)^0,w,c
 11239  004E12  5A0C               	subwfb	(___llmod@dividend+2)^0,f,c
 11240  004E14  5011               	movf	(___llmod@divisor+3)^0,w,c
 11241  004E16  5A0D               	subwfb	(___llmod@dividend+3)^0,f,c
 11242  004E18                     l12171:
 11243  004E18  90D8               	bcf	status,0,c
 11244  004E1A  3211               	rrcf	(___llmod@divisor+3)^0,f,c
 11245  004E1C  3210               	rrcf	(___llmod@divisor+2)^0,f,c
 11246  004E1E  320F               	rrcf	(___llmod@divisor+1)^0,f,c
 11247  004E20  320E               	rrcf	___llmod@divisor^0,f,c
 11248  004E22  2E12               	decfsz	___llmod@counter^0,f,c
 11249  004E24  D7E7               	goto	u14190
 11250  004E26                     l2158:
 11251  004E26  C00A  F00A         	movff	___llmod@dividend,?___llmod
 11252  004E2A  C00B  F00B         	movff	___llmod@dividend+1,?___llmod+1
 11253  004E2E  C00C  F00C         	movff	___llmod@dividend+2,?___llmod+2
 11254  004E32  C00D  F00D         	movff	___llmod@dividend+3,?___llmod+3
 11255  004E36  0012               	return		;funcret
 11256  004E38                     __end_of___llmod:
 11257                           	callstack 0
 11258                           
 11259 ;; *************** function _f_open *****************
 11260 ;; Defined at:
 11261 ;;		line 833 in file "bibliotecas/tff.c"
 11262 ;; Parameters:    Size  Location     Type
 11263 ;;  fp              2   56[BANK0 ] PTR struct _FIL
 11264 ;;		 -> fil(28), 
 11265 ;;  path            2   58[BANK0 ] PTR const unsigned char 
 11266 ;;		 -> STR_16(13), filename(20), 
 11267 ;;  mode            1   60[BANK0 ] unsigned char 
 11268 ;; Auto vars:     Size  Location     Type
 11269 ;;  dw              4   79[BANK0 ] unsigned long 
 11270 ;;  rs              2   77[BANK0 ] unsigned short 
 11271 ;;  dj             14   86[BANK0 ] struct _DIR_E
 11272 ;;  fn             12   65[BANK0 ] unsigned char [12]
 11273 ;;  dir             2   84[BANK0 ] PTR unsigned char 
 11274 ;;		 -> NULL(0), fs(544), 
 11275 ;;  res             1   83[BANK0 ] enum E155
 11276 ;; Return value:  Size  Location     Type
 11277 ;;                  1    wreg      enum E3231
 11278 ;; Registers used:
 11279 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11280 ;; Tracked objects:
 11281 ;;		On entry : 3F/0
 11282 ;;		On exit  : 0/0
 11283 ;;		Unchanged: 0/0
 11284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11285 ;;      Params:         0       5       0       0       0       0       0       0       0
 11286 ;;      Locals:         0      35       0       0       0       0       0       0       0
 11287 ;;      Temps:          0       4       0       0       0       0       0       0       0
 11288 ;;      Totals:         0      44       0       0       0       0       0       0       0
 11289 ;;Total ram usage:       44 bytes
 11290 ;; Hardware stack levels used:    1
 11291 ;; Hardware stack levels required when called:   11
 11292 ;; This function calls:
 11293 ;;		_auto_mount
 11294 ;;		_get_fattime
 11295 ;;		_memcpy
 11296 ;;		_memset
 11297 ;;		_move_window
 11298 ;;		_remove_chain
 11299 ;;		_reserve_direntry
 11300 ;;		_trace_path
 11301 ;; This function is called by:
 11302 ;;		_escrita_sdcard
 11303 ;; This function uses a non-reentrant model
 11304 ;;
 11305                           
 11306                           	psect	text70
 11307  001640                     __ptext70:
 11308                           	callstack 0
 11309  001640                     _f_open:
 11310                           	callstack 15
 11311                           
 11312                           ; BSR set to: 0
 11313                           ;tff.c: 839: FRESULT res;;tff.c: 840: DIR_E dj;;tff.c: 841: BYTE *dir;;tff.c: 842: char 
      +                          fn[8+3+1];;tff.c: 845: fp->fs = (0);
 11314                           
 11315                           ;incstack = 0
 11316  001640  EE20 F004          	lfsr	2,4
 11317  001644  5198               	movf	f_open@fp& (0+255),w,b
 11318  001646  26D9               	addwf	fsr2l,f,c
 11319  001648  5199               	movf	(f_open@fp+1)& (0+255),w,b
 11320  00164A  22DA               	addwfc	fsr2h,f,c
 11321  00164C  0E00               	movlw	0
 11322  00164E  6EDE               	movwf	postinc2,c
 11323  001650  0E00               	movlw	0
 11324  001652  6EDD               	movwf	postdec2,c
 11325                           
 11326                           ; BSR set to: 0
 11327                           ;tff.c: 847: mode &= (0x01|0x02|0x08|0x10|0x04);
 11328  001654  0E1F               	movlw	31
 11329  001656  179C               	andwf	f_open@mode& (0+255),f,b
 11330                           
 11331                           ; BSR set to: 0
 11332                           ;tff.c: 848: res = auto_mount(&path, (BYTE)(mode & (0x02|0x08|0x10|0x04)));
 11333  001658  0E9A               	movlw	low f_open@path
 11334  00165A  6E3D               	movwf	auto_mount@path^0,c
 11335  00165C  519C               	movf	f_open@mode& (0+255),w,b
 11336  00165E  0B1E               	andlw	30
 11337  001660  6E3E               	movwf	auto_mount@chk_wp^0,c
 11338  001662  ECD4  F002         	call	_auto_mount	;wreg free
 11339  001666  0100               	movlb	0	; () banked
 11340  001668  6FB3               	movwf	f_open@res& (0+255),b
 11341                           
 11342                           ; BSR set to: 0
 11343                           ;tff.c: 853: if (res != FR_OK) return res;
 11344  00166A  51B3               	movf	f_open@res& (0+255),w,b
 11345  00166C  B4D8               	btfsc	status,2,c
 11346  00166E  D002               	goto	l12291
 11347  001670                     u14350:
 11348                           
 11349                           ; BSR set to: 0
 11350  001670  51B3               	movf	f_open@res& (0+255),w,b
 11351  001672  0012               	return	
 11352  001674                     l12291:
 11353                           
 11354                           ; BSR set to: 0
 11355                           ;tff.c: 854: res = trace_path(&dj, fn, path, &dir);
 11356  001674  0EB6               	movlw	low f_open@dj
 11357  001676  6F7E               	movwf	trace_path@dj& (0+255),b
 11358  001678  0EA1               	movlw	low f_open@fn
 11359  00167A  6F7F               	movwf	trace_path@fn& (0+255),b
 11360  00167C  C09A  F080         	movff	f_open@path,trace_path@path
 11361  001680  C09B  F081         	movff	f_open@path+1,trace_path@path+1
 11362  001684  0EB4               	movlw	low f_open@dir
 11363  001686  6F82               	movwf	trace_path@dir& (0+255),b
 11364  001688  EC75  F00F         	call	_trace_path	;wreg free
 11365  00168C  0100               	movlb	0	; () banked
 11366  00168E  6FB3               	movwf	f_open@res& (0+255),b
 11367                           
 11368                           ; BSR set to: 0
 11369                           ;tff.c: 858: if (mode & (0x08|0x10|0x04)) {
 11370  001690  C09C  F09D         	movff	f_open@mode,??_f_open
 11371  001694  0E1C               	movlw	28
 11372  001696  179D               	andwf	??_f_open& (0+255),f,b
 11373  001698  B4D8               	btfsc	status,2,c
 11374  00169A  D0E0               	goto	l12353
 11375                           
 11376                           ; BSR set to: 0
 11377                           ;tff.c: 859: CLUST rs;;tff.c: 860: DWORD dw;;tff.c: 861: if (res != FR_OK) {
 11378  00169C  51B3               	movf	f_open@res& (0+255),w,b
 11379  00169E  B4D8               	btfsc	status,2,c
 11380  0016A0  D035               	goto	l1104
 11381                           
 11382                           ; BSR set to: 0
 11383                           ;tff.c: 862: if (res != FR_NO_FILE) return res;
 11384  0016A2  0E02               	movlw	2
 11385  0016A4  19B3               	xorwf	f_open@res& (0+255),w,b
 11386  0016A6  A4D8               	btfss	status,2,c
 11387  0016A8  D7E3               	goto	u14350
 11388                           
 11389                           ; BSR set to: 0
 11390                           ;tff.c: 863: res = reserve_direntry(&dj, &dir);
 11391  0016AA  0EB6               	movlw	low f_open@dj
 11392  0016AC  6F86               	movwf	reserve_direntry@dj& (0+255),b
 11393  0016AE  0EB4               	movlw	low f_open@dir
 11394  0016B0  6F87               	movwf	reserve_direntry@dir& (0+255),b
 11395  0016B2  ECB5  F010         	call	_reserve_direntry	;wreg free
 11396  0016B6  0100               	movlb	0	; () banked
 11397  0016B8  6FB3               	movwf	f_open@res& (0+255),b
 11398                           
 11399                           ; BSR set to: 0
 11400                           ;tff.c: 864: if (res != FR_OK) return res;
 11401  0016BA  51B3               	movf	f_open@res& (0+255),w,b
 11402  0016BC  A4D8               	btfss	status,2,c
 11403  0016BE  D7D8               	goto	u14350
 11404                           
 11405                           ; BSR set to: 0
 11406                           ;tff.c: 865: memset(dir, 0, 32);
 11407  0016C0  C0B4  F00A         	movff	f_open@dir,memset@p1
 11408  0016C4  C0B5  F00B         	movff	f_open@dir+1,memset@p1+1
 11409  0016C8  0E00               	movlw	0
 11410  0016CA  6E0D               	movwf	(memset@c+1)^0,c
 11411  0016CC  0E00               	movlw	0
 11412  0016CE  6E0C               	movwf	memset@c^0,c
 11413  0016D0  0E00               	movlw	0
 11414  0016D2  6E0F               	movwf	(memset@n+1)^0,c
 11415  0016D4  0E20               	movlw	32
 11416  0016D6  6E0E               	movwf	memset@n^0,c
 11417  0016D8  EC34  F02C         	call	_memset	;wreg free
 11418                           
 11419                           ;tff.c: 866: memcpy(&dir[0], fn, 8+3);
 11420  0016DC  C0B4  F00A         	movff	f_open@dir,memcpy@d1
 11421  0016E0  C0B5  F00B         	movff	f_open@dir+1,memcpy@d1+1
 11422  0016E4  0EA1               	movlw	low f_open@fn
 11423  0016E6  6E0C               	movwf	memcpy@s1^0,c
 11424  0016E8  6A0D               	clrf	(memcpy@s1+1)^0,c
 11425  0016EA  0E00               	movlw	0
 11426  0016EC  6E0F               	movwf	(memcpy@n+1)^0,c
 11427  0016EE  0E0B               	movlw	11
 11428  0016F0  6E0E               	movwf	memcpy@n^0,c
 11429  0016F2  EC35  F02A         	call	_memcpy	;wreg free
 11430                           
 11431                           ;tff.c: 867: dir[12] = fn[11];
 11432  0016F6  0100               	movlb	0	; () banked
 11433  0016F8  EE20 F00C          	lfsr	2,12
 11434  0016FC  51B4               	movf	f_open@dir& (0+255),w,b
 11435  0016FE  26D9               	addwf	fsr2l,f,c
 11436  001700  51B5               	movf	(f_open@dir+1)& (0+255),w,b
 11437  001702  22DA               	addwfc	fsr2h,f,c
 11438  001704  C0AC  FFDF         	movff	f_open@fn+11,indf2
 11439                           
 11440                           ; BSR set to: 0
 11441                           ;tff.c: 868: mode |= 0x08;
 11442  001708  879C               	bsf	f_open@mode& (0+255),3,b
 11443                           
 11444                           ;tff.c: 869: }
 11445  00170A  D07B               	goto	l12341
 11446  00170C                     l1104:
 11447                           
 11448                           ; BSR set to: 0
 11449                           ;tff.c: 870: else {;tff.c: 871: if (mode & 0x04)
 11450  00170C  A59C               	btfss	f_open@mode& (0+255),2,b
 11451  00170E  D002               	goto	l12321
 11452                           
 11453                           ; BSR set to: 0
 11454                           ;tff.c: 872: return FR_EXIST;
 11455  001710  0E07               	movlw	7
 11456  001712  0012               	return	
 11457  001714                     l12321:
 11458                           
 11459                           ; BSR set to: 0
 11460                           ;tff.c: 873: if (!dir || (dir[11] & (0x01|0x10)))
 11461  001714  51B4               	movf	f_open@dir& (0+255),w,b
 11462  001716  11B5               	iorwf	(f_open@dir+1)& (0+255),w,b
 11463  001718  B4D8               	btfsc	status,2,c
 11464  00171A  D00C               	goto	u14420
 11465                           
 11466                           ; BSR set to: 0
 11467  00171C  EE20 F00B          	lfsr	2,11
 11468  001720  51B4               	movf	f_open@dir& (0+255),w,b
 11469  001722  26D9               	addwf	fsr2l,f,c
 11470  001724  51B5               	movf	(f_open@dir+1)& (0+255),w,b
 11471  001726  22DA               	addwfc	fsr2h,f,c
 11472  001728  50DF               	movf	indf2,w,c
 11473  00172A  6F9D               	movwf	??_f_open& (0+255),b
 11474  00172C  0E11               	movlw	17
 11475  00172E  179D               	andwf	??_f_open& (0+255),f,b
 11476  001730  B4D8               	btfsc	status,2,c
 11477  001732  D002               	goto	l1109
 11478  001734                     u14420:
 11479                           
 11480                           ; BSR set to: 0
 11481                           ;tff.c: 874: return FR_DENIED;
 11482  001734  0E06               	movlw	6
 11483  001736  0012               	return	
 11484  001738                     l1109:
 11485                           
 11486                           ; BSR set to: 0
 11487                           ;tff.c: 875: if (mode & 0x08) {
 11488  001738  A79C               	btfss	f_open@mode& (0+255),3,b
 11489  00173A  D063               	goto	l12341
 11490                           
 11491                           ; BSR set to: 0
 11492                           ;tff.c: 880: rs = (WORD)(*(WORD*)(BYTE*)(&dir[26]));
 11493  00173C  EE20 F01A          	lfsr	2,26
 11494  001740  51B4               	movf	f_open@dir& (0+255),w,b
 11495  001742  26D9               	addwf	fsr2l,f,c
 11496  001744  51B5               	movf	(f_open@dir+1)& (0+255),w,b
 11497  001746  22DA               	addwfc	fsr2h,f,c
 11498  001748  CFDE F0AD          	movff	postinc2,f_open@rs
 11499  00174C  CFDD F0AE          	movff	postdec2,f_open@rs+1
 11500                           
 11501                           ;tff.c: 882: *(WORD*)(BYTE*)(&dir[26])=(WORD)(0);
 11502  001750  EE20 F01A          	lfsr	2,26
 11503  001754  51B4               	movf	f_open@dir& (0+255),w,b
 11504  001756  26D9               	addwf	fsr2l,f,c
 11505  001758  51B5               	movf	(f_open@dir+1)& (0+255),w,b
 11506  00175A  22DA               	addwfc	fsr2h,f,c
 11507  00175C  0E00               	movlw	0
 11508  00175E  6EDE               	movwf	postinc2,c
 11509  001760  0E00               	movlw	0
 11510  001762  6EDD               	movwf	postdec2,c
 11511                           
 11512                           ;tff.c: 883: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(0);
 11513  001764  EE20 F01C          	lfsr	2,28
 11514  001768  51B4               	movf	f_open@dir& (0+255),w,b
 11515  00176A  26D9               	addwf	fsr2l,f,c
 11516  00176C  51B5               	movf	(f_open@dir+1)& (0+255),w,b
 11517  00176E  22DA               	addwfc	fsr2h,f,c
 11518  001770  6ADE               	clrf	postinc2,c
 11519  001772  6ADE               	clrf	postinc2,c
 11520  001774  6ADE               	clrf	postinc2,c
 11521  001776  6ADD               	clrf	postdec2,c
 11522                           
 11523                           ;tff.c: 884: dj.fs->winflag = 1;
 11524  001778  EE20 F01F          	lfsr	2,31
 11525  00177C  51BA               	movf	(f_open@dj+4)& (0+255),w,b
 11526  00177E  26D9               	addwf	fsr2l,f,c
 11527  001780  51BB               	movf	(f_open@dj+5)& (0+255),w,b
 11528  001782  22DA               	addwfc	fsr2h,f,c
 11529  001784  0E01               	movlw	1
 11530  001786  6EDF               	movwf	indf2,c
 11531                           
 11532                           ;tff.c: 885: dw = dj.fs->winsect;
 11533  001788  EE20 F004          	lfsr	2,4
 11534  00178C  51BA               	movf	(f_open@dj+4)& (0+255),w,b
 11535  00178E  26D9               	addwf	fsr2l,f,c
 11536  001790  51BB               	movf	(f_open@dj+5)& (0+255),w,b
 11537  001792  22DA               	addwfc	fsr2h,f,c
 11538  001794  CFDE F0AF          	movff	postinc2,f_open@dw
 11539  001798  CFDE F0B0          	movff	postinc2,f_open@dw+1
 11540  00179C  CFDE F0B1          	movff	postinc2,f_open@dw+2
 11541  0017A0  CFDE F0B2          	movff	postinc2,f_open@dw+3
 11542                           
 11543                           ; BSR set to: 0
 11544                           ;tff.c: 886: if (!remove_chain(rs) || !move_window(dw))
 11545  0017A4  C0AD  F078         	movff	f_open@rs,remove_chain@clust
 11546  0017A8  C0AE  F079         	movff	f_open@rs+1,remove_chain@clust+1
 11547  0017AC  EC89  F022         	call	_remove_chain	;wreg free
 11548  0017B0  0900               	iorlw	0
 11549  0017B2  B4D8               	btfsc	status,2,c
 11550  0017B4  D00D               	goto	u14450
 11551  0017B6  C0AF  F035         	movff	f_open@dw,move_window@sector
 11552  0017BA  C0B0  F036         	movff	f_open@dw+1,move_window@sector+1
 11553  0017BE  C0B1  F037         	movff	f_open@dw+2,move_window@sector+2
 11554  0017C2  C0B2  F038         	movff	f_open@dw+3,move_window@sector+3
 11555  0017C6  EC47  F015         	call	_move_window	;wreg free
 11556  0017CA  0900               	iorlw	0
 11557  0017CC  A4D8               	btfss	status,2,c
 11558  0017CE  D002               	goto	l12339
 11559  0017D0                     u14450:
 11560                           
 11561                           ;tff.c: 887: return FR_RW_ERROR;
 11562  0017D0  0E08               	movlw	8
 11563  0017D2  0012               	return	
 11564  0017D4                     l12339:
 11565                           
 11566                           ;tff.c: 888: dj.fs->last_clust = rs - 1;
 11567  0017D4  0EFF               	movlw	255
 11568  0017D6  0100               	movlb	0	; () banked
 11569  0017D8  6F9D               	movwf	??_f_open& (0+255),b
 11570  0017DA  0EFF               	movlw	255
 11571  0017DC  6F9E               	movwf	(??_f_open+1)& (0+255),b
 11572  0017DE  C0AD  F09F         	movff	f_open@rs,??_f_open+2
 11573  0017E2  C0AE  F0A0         	movff	f_open@rs+1,??_f_open+3
 11574  0017E6  519D               	movf	??_f_open& (0+255),w,b
 11575  0017E8  279F               	addwf	(??_f_open+2)& (0+255),f,b
 11576  0017EA  519E               	movf	(??_f_open+1)& (0+255),w,b
 11577  0017EC  23A0               	addwfc	(??_f_open+3)& (0+255),f,b
 11578  0017EE  EE20 F018          	lfsr	2,24
 11579  0017F2  51BA               	movf	(f_open@dj+4)& (0+255),w,b
 11580  0017F4  26D9               	addwf	fsr2l,f,c
 11581  0017F6  51BB               	movf	(f_open@dj+5)& (0+255),w,b
 11582  0017F8  22DA               	addwfc	fsr2h,f,c
 11583  0017FA  C09F  FFDE         	movff	??_f_open+2,postinc2
 11584  0017FE  C0A0  FFDD         	movff	??_f_open+3,postdec2
 11585  001802                     l12341:
 11586                           
 11587                           ; BSR set to: 0
 11588                           ;tff.c: 889: };tff.c: 890: };tff.c: 891: if (mode & 0x08) {
 11589  001802  A79C               	btfss	f_open@mode& (0+255),3,b
 11590  001804  D046               	goto	l12373
 11591                           
 11592                           ; BSR set to: 0
 11593                           ;tff.c: 892: dir[11] = 0;
 11594  001806  EE20 F00B          	lfsr	2,11
 11595  00180A  51B4               	movf	f_open@dir& (0+255),w,b
 11596  00180C  26D9               	addwf	fsr2l,f,c
 11597  00180E  51B5               	movf	(f_open@dir+1)& (0+255),w,b
 11598  001810  22DA               	addwfc	fsr2h,f,c
 11599  001812  0E00               	movlw	0
 11600  001814  6EDF               	movwf	indf2,c
 11601                           
 11602                           ; BSR set to: 0
 11603                           ;tff.c: 893: dw = get_fattime();
 11604  001816  EC87  F01A         	call	_get_fattime	;wreg free
 11605  00181A  C00E  F0AF         	movff	?_get_fattime,f_open@dw
 11606  00181E  C00F  F0B0         	movff	?_get_fattime+1,f_open@dw+1
 11607  001822  C010  F0B1         	movff	?_get_fattime+2,f_open@dw+2
 11608  001826  C011  F0B2         	movff	?_get_fattime+3,f_open@dw+3
 11609                           
 11610                           ; BSR set to: 1
 11611                           ;tff.c: 894: *(DWORD*)(BYTE*)(&dir[14])=(DWORD)(dw);
 11612  00182A  0100               	movlb	0	; () banked
 11613  00182C  EE20 F00E          	lfsr	2,14
 11614  001830  51B4               	movf	f_open@dir& (0+255),w,b
 11615  001832  26D9               	addwf	fsr2l,f,c
 11616  001834  51B5               	movf	(f_open@dir+1)& (0+255),w,b
 11617  001836  22DA               	addwfc	fsr2h,f,c
 11618  001838  C0AF  FFDE         	movff	f_open@dw,postinc2
 11619  00183C  C0B0  FFDE         	movff	f_open@dw+1,postinc2
 11620  001840  C0B1  FFDE         	movff	f_open@dw+2,postinc2
 11621  001844  C0B2  FFDE         	movff	f_open@dw+3,postinc2
 11622                           
 11623                           ; BSR set to: 0
 11624                           ;tff.c: 895: dj.fs->winflag = 1;
 11625  001848  EE20 F01F          	lfsr	2,31
 11626  00184C  51BA               	movf	(f_open@dj+4)& (0+255),w,b
 11627  00184E  26D9               	addwf	fsr2l,f,c
 11628  001850  51BB               	movf	(f_open@dj+5)& (0+255),w,b
 11629  001852  22DA               	addwfc	fsr2h,f,c
 11630  001854  0E01               	movlw	1
 11631  001856  6EDF               	movwf	indf2,c
 11632                           
 11633                           ; BSR set to: 0
 11634                           ;tff.c: 896: mode |= 0x20;
 11635  001858  8B9C               	bsf	f_open@mode& (0+255),5,b
 11636  00185A  D01B               	goto	l12373
 11637  00185C                     l12353:
 11638                           
 11639                           ; BSR set to: 0
 11640                           ;tff.c: 900: else {;tff.c: 902: if (res != FR_OK) return res;
 11641  00185C  51B3               	movf	f_open@res& (0+255),w,b
 11642  00185E  A4D8               	btfss	status,2,c
 11643  001860  D707               	goto	u14350
 11644                           
 11645                           ; BSR set to: 0
 11646                           ;tff.c: 903: if (!dir || (dir[11] & 0x10))
 11647  001862  51B4               	movf	f_open@dir& (0+255),w,b
 11648  001864  11B5               	iorwf	(f_open@dir+1)& (0+255),w,b
 11649  001866  B4D8               	btfsc	status,2,c
 11650  001868  D008               	goto	u14490
 11651                           
 11652                           ; BSR set to: 0
 11653  00186A  EE20 F00B          	lfsr	2,11
 11654  00186E  51B4               	movf	f_open@dir& (0+255),w,b
 11655  001870  26D9               	addwf	fsr2l,f,c
 11656  001872  51B5               	movf	(f_open@dir+1)& (0+255),w,b
 11657  001874  22DA               	addwfc	fsr2h,f,c
 11658  001876  A8DF               	btfss	indf2,4,c
 11659  001878  D002               	goto	l1119
 11660  00187A                     u14490:
 11661                           
 11662                           ; BSR set to: 0
 11663                           ;tff.c: 904: return FR_NO_FILE;
 11664  00187A  0E02               	movlw	2
 11665  00187C  0012               	return	
 11666  00187E                     l1119:
 11667                           
 11668                           ; BSR set to: 0
 11669                           ;tff.c: 906: if ((mode & 0x02) && (dir[11] & 0x01))
 11670  00187E  A39C               	btfss	f_open@mode& (0+255),1,b
 11671  001880  D008               	goto	l12373
 11672                           
 11673                           ; BSR set to: 0
 11674  001882  EE20 F00B          	lfsr	2,11
 11675  001886  51B4               	movf	f_open@dir& (0+255),w,b
 11676  001888  26D9               	addwf	fsr2l,f,c
 11677  00188A  51B5               	movf	(f_open@dir+1)& (0+255),w,b
 11678  00188C  22DA               	addwfc	fsr2h,f,c
 11679  00188E  B0DF               	btfsc	indf2,0,c
 11680  001890  D751               	goto	u14420
 11681  001892                     l12373:
 11682                           
 11683                           ; BSR set to: 0
 11684                           ;tff.c: 908: };tff.c: 909: fp->dir_sect = dj.fs->winsect;
 11685  001892  EE20 F004          	lfsr	2,4
 11686  001896  51BA               	movf	(f_open@dj+4)& (0+255),w,b
 11687  001898  26D9               	addwf	fsr2l,f,c
 11688  00189A  51BB               	movf	(f_open@dj+5)& (0+255),w,b
 11689  00189C  22DA               	addwfc	fsr2h,f,c
 11690  00189E  EE10 F016          	lfsr	1,22
 11691  0018A2  5198               	movf	f_open@fp& (0+255),w,b
 11692  0018A4  26E1               	addwf	fsr1l,f,c
 11693  0018A6  5199               	movf	(f_open@fp+1)& (0+255),w,b
 11694  0018A8  22E2               	addwfc	fsr1h,f,c
 11695  0018AA  CFDE FFE6          	movff	postinc2,postinc1
 11696  0018AE  CFDE FFE6          	movff	postinc2,postinc1
 11697  0018B2  CFDE FFE6          	movff	postinc2,postinc1
 11698  0018B6  CFDE FFE6          	movff	postinc2,postinc1
 11699                           
 11700                           ; BSR set to: 0
 11701                           ;tff.c: 910: fp->dir_ptr = dir;
 11702  0018BA  EE20 F01A          	lfsr	2,26
 11703  0018BE  5198               	movf	f_open@fp& (0+255),w,b
 11704  0018C0  26D9               	addwf	fsr2l,f,c
 11705  0018C2  5199               	movf	(f_open@fp+1)& (0+255),w,b
 11706  0018C4  22DA               	addwfc	fsr2h,f,c
 11707  0018C6  C0B4  FFDE         	movff	f_open@dir,postinc2
 11708  0018CA  C0B5  FFDD         	movff	f_open@dir+1,postdec2
 11709                           
 11710                           ; BSR set to: 0
 11711                           ;tff.c: 912: fp->flag = mode;
 11712  0018CE  EE20 F002          	lfsr	2,2
 11713  0018D2  5198               	movf	f_open@fp& (0+255),w,b
 11714  0018D4  26D9               	addwf	fsr2l,f,c
 11715  0018D6  5199               	movf	(f_open@fp+1)& (0+255),w,b
 11716  0018D8  22DA               	addwfc	fsr2h,f,c
 11717  0018DA  C09C  FFDF         	movff	f_open@mode,indf2
 11718                           
 11719                           ;tff.c: 913: fp->org_clust =;tff.c: 917: (WORD)(*(WORD*)(BYTE*)(&dir[26]));
 11720  0018DE  EE20 F01A          	lfsr	2,26
 11721  0018E2  51B4               	movf	f_open@dir& (0+255),w,b
 11722  0018E4  26D9               	addwf	fsr2l,f,c
 11723  0018E6  51B5               	movf	(f_open@dir+1)& (0+255),w,b
 11724  0018E8  22DA               	addwfc	fsr2h,f,c
 11725  0018EA  EE10 F00E          	lfsr	1,14
 11726  0018EE  5198               	movf	f_open@fp& (0+255),w,b
 11727  0018F0  26E1               	addwf	fsr1l,f,c
 11728  0018F2  5199               	movf	(f_open@fp+1)& (0+255),w,b
 11729  0018F4  22E2               	addwfc	fsr1h,f,c
 11730  0018F6  CFDE FFE6          	movff	postinc2,postinc1
 11731  0018FA  CFDD FFE5          	movff	postdec2,postdec1
 11732                           
 11733                           ;tff.c: 918: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(&dir[28]));
 11734  0018FE  EE20 F01C          	lfsr	2,28
 11735  001902  51B4               	movf	f_open@dir& (0+255),w,b
 11736  001904  26D9               	addwf	fsr2l,f,c
 11737  001906  51B5               	movf	(f_open@dir+1)& (0+255),w,b
 11738  001908  22DA               	addwfc	fsr2h,f,c
 11739  00190A  EE10 F00A          	lfsr	1,10
 11740  00190E  5198               	movf	f_open@fp& (0+255),w,b
 11741  001910  26E1               	addwf	fsr1l,f,c
 11742  001912  5199               	movf	(f_open@fp+1)& (0+255),w,b
 11743  001914  22E2               	addwfc	fsr1h,f,c
 11744  001916  CFDE FFE6          	movff	postinc2,postinc1
 11745  00191A  CFDE FFE6          	movff	postinc2,postinc1
 11746  00191E  CFDE FFE6          	movff	postinc2,postinc1
 11747  001922  CFDE FFE6          	movff	postinc2,postinc1
 11748                           
 11749                           ; BSR set to: 0
 11750                           ;tff.c: 919: fp->fptr = 0; fp->csect = 255;
 11751  001926  EE20 F006          	lfsr	2,6
 11752  00192A  5198               	movf	f_open@fp& (0+255),w,b
 11753  00192C  26D9               	addwf	fsr2l,f,c
 11754  00192E  5199               	movf	(f_open@fp+1)& (0+255),w,b
 11755  001930  22DA               	addwfc	fsr2h,f,c
 11756  001932  6ADE               	clrf	postinc2,c
 11757  001934  6ADE               	clrf	postinc2,c
 11758  001936  6ADE               	clrf	postinc2,c
 11759  001938  6ADD               	clrf	postdec2,c
 11760                           
 11761                           ; BSR set to: 0
 11762  00193A  EE20 F003          	lfsr	2,3
 11763  00193E  5198               	movf	f_open@fp& (0+255),w,b
 11764  001940  26D9               	addwf	fsr2l,f,c
 11765  001942  5199               	movf	(f_open@fp+1)& (0+255),w,b
 11766  001944  22DA               	addwfc	fsr2h,f,c
 11767  001946  0EFF               	movlw	255
 11768  001948  6EDF               	movwf	indf2,c
 11769                           
 11770                           ; BSR set to: 0
 11771                           ;tff.c: 920: fp->fs = dj.fs; fp->id = dj.fs->id;
 11772  00194A  EE20 F004          	lfsr	2,4
 11773  00194E  5198               	movf	f_open@fp& (0+255),w,b
 11774  001950  26D9               	addwf	fsr2l,f,c
 11775  001952  5199               	movf	(f_open@fp+1)& (0+255),w,b
 11776  001954  22DA               	addwfc	fsr2h,f,c
 11777  001956  C0BA  FFDE         	movff	f_open@dj+4,postinc2
 11778  00195A  C0BB  FFDD         	movff	f_open@dj+5,postdec2
 11779                           
 11780                           ; BSR set to: 0
 11781  00195E  C0BA  FFD9         	movff	f_open@dj+4,fsr2l
 11782  001962  C0BB  FFDA         	movff	f_open@dj+5,fsr2h
 11783  001966  C098  FFE1         	movff	f_open@fp,fsr1l
 11784  00196A  C099  FFE2         	movff	f_open@fp+1,fsr1h
 11785  00196E  CFDE FFE6          	movff	postinc2,postinc1
 11786  001972  CFDD FFE5          	movff	postdec2,postdec1
 11787                           
 11788                           ; BSR set to: 0
 11789                           ;tff.c: 922: return FR_OK;
 11790  001976  0E00               	movlw	0
 11791  001978  0012               	return		;funcret
 11792  00197A                     __end_of_f_open:
 11793                           	callstack 0
 11794                           
 11795 ;; *************** function _trace_path *****************
 11796 ;; Defined at:
 11797 ;;		line 502 in file "bibliotecas/tff.c"
 11798 ;; Parameters:    Size  Location     Type
 11799 ;;  dj              1   30[BANK0 ] PTR struct _DIR_E
 11800 ;;		 -> f_open@dj(14), 
 11801 ;;  fn              1   31[BANK0 ] PTR unsigned char 
 11802 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
 11803 ;;  path            2   32[BANK0 ] PTR const unsigned char 
 11804 ;;		 -> STR_16(13), filename(20), 
 11805 ;;  dir             1   34[BANK0 ] PTR PTR unsigned char 
 11806 ;;		 -> f_opendir@dir(2), f_open@dir(2), 
 11807 ;; Auto vars:     Size  Location     Type
 11808 ;;  dptr            2   48[BANK0 ] PTR unsigned char 
 11809 ;;		 -> fs.win(512), NULL(0), fs(544), 
 11810 ;;  clust           2   45[BANK0 ] unsigned short 
 11811 ;;  fs              2   43[BANK0 ] PTR struct _FATFS
 11812 ;;		 -> NULL(0), fs(544), 
 11813 ;;  ds              1   47[BANK0 ] unsigned char 
 11814 ;; Return value:  Size  Location     Type
 11815 ;;                  1    wreg      enum E155
 11816 ;; Registers used:
 11817 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11818 ;; Tracked objects:
 11819 ;;		On entry : 3F/0
 11820 ;;		On exit  : 0/0
 11821 ;;		Unchanged: 0/0
 11822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11823 ;;      Params:         0       5       0       0       0       0       0       0       0
 11824 ;;      Locals:         0      11       0       0       0       0       0       0       0
 11825 ;;      Temps:          0       4       0       0       0       0       0       0       0
 11826 ;;      Totals:         0      20       0       0       0       0       0       0       0
 11827 ;;Total ram usage:       20 bytes
 11828 ;; Hardware stack levels used:    1
 11829 ;; Hardware stack levels required when called:   10
 11830 ;; This function calls:
 11831 ;;		_clust2sect
 11832 ;;		_make_dirfile
 11833 ;;		_memcmp
 11834 ;;		_move_window
 11835 ;;		_next_dir_entry
 11836 ;; This function is called by:
 11837 ;;		_f_open
 11838 ;; This function uses a non-reentrant model
 11839 ;;
 11840                           
 11841                           	psect	text71
 11842  001EEA                     __ptext71:
 11843                           	callstack 0
 11844  001EEA                     _trace_path:
 11845                           	callstack 15
 11846                           
 11847                           ; BSR set to: 0
 11848                           ;tff.c: 512: FATFS *fs = FatFs;
 11849                           
 11850                           ;incstack = 0
 11851  001EEA  C04D  F08B         	movff	_FatFs,trace_path@fs
 11852  001EEE  C04E  F08C         	movff	_FatFs+1,trace_path@fs+1
 11853                           
 11854                           ; BSR set to: 0
 11855                           ;tff.c: 515: dj->fs = fs;
 11856  001EF2  517E               	movf	trace_path@dj& (0+255),w,b
 11857  001EF4  6ED9               	movwf	fsr2l,c
 11858  001EF6  6ADA               	clrf	fsr2h,c
 11859  001EF8  0E04               	movlw	4
 11860  001EFA  26D9               	addwf	fsr2l,f,c
 11861  001EFC  C08B  FFDE         	movff	trace_path@fs,postinc2
 11862  001F00  C08C  FFDD         	movff	trace_path@fs+1,postdec2
 11863                           
 11864                           ; BSR set to: 0
 11865                           ;tff.c: 516: clust = fs->dirbase;
 11866  001F04  EE20 F00C          	lfsr	2,12
 11867  001F08  518B               	movf	trace_path@fs& (0+255),w,b
 11868  001F0A  26D9               	addwf	fsr2l,f,c
 11869  001F0C  518C               	movf	(trace_path@fs+1)& (0+255),w,b
 11870  001F0E  22DA               	addwfc	fsr2h,f,c
 11871  001F10  CFDE F08D          	movff	postinc2,trace_path@clust
 11872  001F14  CFDD F08E          	movff	postdec2,trace_path@clust+1
 11873                           
 11874                           ; BSR set to: 0
 11875                           ;tff.c: 523: {;tff.c: 524: dj->clust = dj->sclust = 0;
 11876  001F18  517E               	movf	trace_path@dj& (0+255),w,b
 11877  001F1A  6ED9               	movwf	fsr2l,c
 11878  001F1C  6ADA               	clrf	fsr2h,c
 11879  001F1E  0E06               	movlw	6
 11880  001F20  26D9               	addwf	fsr2l,f,c
 11881  001F22  0E00               	movlw	0
 11882  001F24  6EDE               	movwf	postinc2,c
 11883  001F26  0E00               	movlw	0
 11884  001F28  6EDD               	movwf	postdec2,c
 11885  001F2A  517E               	movf	trace_path@dj& (0+255),w,b
 11886  001F2C  6EE1               	movwf	fsr1l,c
 11887  001F2E  6AE2               	clrf	fsr1h,c
 11888  001F30  0E08               	movlw	8
 11889  001F32  26E1               	addwf	fsr1l,f,c
 11890  001F34  CFDE FFE6          	movff	postinc2,postinc1
 11891  001F38  CFDD FFE5          	movff	postdec2,postdec1
 11892                           
 11893                           ; BSR set to: 0
 11894                           ;tff.c: 525: dj->sect = clust;
 11895  001F3C  518D               	movf	trace_path@clust& (0+255),w,b
 11896  001F3E  6F83               	movwf	??_trace_path& (0+255),b
 11897  001F40  518E               	movf	(trace_path@clust+1)& (0+255),w,b
 11898  001F42  6F84               	movwf	(??_trace_path+1)& (0+255),b
 11899  001F44  6B85               	clrf	(??_trace_path+2)& (0+255),b
 11900  001F46  6B86               	clrf	(??_trace_path+3)& (0+255),b
 11901  001F48  517E               	movf	trace_path@dj& (0+255),w,b
 11902  001F4A  6ED9               	movwf	fsr2l,c
 11903  001F4C  6ADA               	clrf	fsr2h,c
 11904  001F4E  0E0A               	movlw	10
 11905  001F50  26D9               	addwf	fsr2l,f,c
 11906  001F52  C083  FFDE         	movff	??_trace_path,postinc2
 11907  001F56  C084  FFDE         	movff	??_trace_path+1,postinc2
 11908  001F5A  C085  FFDE         	movff	??_trace_path+2,postinc2
 11909  001F5E  C086  FFDE         	movff	??_trace_path+3,postinc2
 11910                           
 11911                           ; BSR set to: 0
 11912                           ;tff.c: 526: };tff.c: 527: dj->index = 0;
 11913  001F62  517E               	movf	trace_path@dj& (0+255),w,b
 11914  001F64  6ED9               	movwf	fsr2l,c
 11915  001F66  6ADA               	clrf	fsr2h,c
 11916  001F68  0E02               	movlw	2
 11917  001F6A  26D9               	addwf	fsr2l,f,c
 11918  001F6C  0E00               	movlw	0
 11919  001F6E  6EDE               	movwf	postinc2,c
 11920  001F70  0E00               	movlw	0
 11921  001F72  6EDD               	movwf	postdec2,c
 11922                           
 11923                           ; BSR set to: 0
 11924                           ;tff.c: 529: if (*path == '\0') {
 11925  001F74  C080  FFF6         	movff	trace_path@path,tblptrl
 11926  001F78  C081  FFF7         	movff	trace_path@path+1,tblptrh
 11927  001F7C  6AF8               	clrf	tblptru,c
 11928  001F7E  0E07               	movlw	(high __ramtop+-1)
 11929  001F80  64F7               	cpfsgt	tblptrh,c
 11930  001F82  D003               	bra	u13597
 11931  001F84  0008               	tblrd		*
 11932  001F86  50F5               	movf	tablat,w,c
 11933  001F88  D005               	bra	u13590
 11934  001F8A                     u13597:
 11935  001F8A  CFF6 FFE1          	movff	tblptrl,fsr1l
 11936  001F8E  CFF7 FFE2          	movff	tblptrh,fsr1h
 11937  001F92  50E7               	movf	indf1,w,c
 11938  001F94                     u13590:
 11939  001F94  0900               	iorlw	0
 11940  001F96  A4D8               	btfss	status,2,c
 11941  001F98  D00A               	goto	l11803
 11942                           
 11943                           ;tff.c: 530: *dir = (0); return FR_OK;
 11944  001F9A  0100               	movlb	0	; () banked
 11945  001F9C  5182               	movf	trace_path@dir& (0+255),w,b
 11946  001F9E  6ED9               	movwf	fsr2l,c
 11947  001FA0  6ADA               	clrf	fsr2h,c
 11948  001FA2  0E00               	movlw	0
 11949  001FA4  6EDE               	movwf	postinc2,c
 11950  001FA6  0E00               	movlw	0
 11951  001FA8  6EDD               	movwf	postdec2,c
 11952  001FAA                     l11799:
 11953                           
 11954                           ; BSR set to: 0
 11955  001FAA  0E00               	movlw	0
 11956  001FAC  0012               	return	
 11957  001FAE                     l11803:
 11958                           
 11959                           ;tff.c: 534: ds = make_dirfile(&path, fn);
 11960  001FAE  0E80               	movlw	low trace_path@path
 11961  001FB0  6E12               	movwf	make_dirfile@path^0,c
 11962  001FB2  C07F  F013         	movff	trace_path@fn,make_dirfile@dirname
 11963  001FB6  ECDA  F019         	call	_make_dirfile	;wreg free
 11964  001FBA  0100               	movlb	0	; () banked
 11965  001FBC  6F8F               	movwf	trace_path@ds& (0+255),b
 11966                           
 11967                           ; BSR set to: 0
 11968                           ;tff.c: 535: if (ds == 1) return FR_INVALID_NAME;
 11969  001FBE  058F               	decf	trace_path@ds& (0+255),w,b
 11970  001FC0  A4D8               	btfss	status,2,c
 11971  001FC2  D002               	goto	l11811
 11972                           
 11973                           ; BSR set to: 0
 11974  001FC4  0E04               	movlw	4
 11975  001FC6  0012               	return	
 11976  001FC8                     l11811:
 11977                           
 11978                           ;tff.c: 537: if (!move_window(dj->sect)) return FR_RW_ERROR;
 11979  001FC8  0100               	movlb	0	; () banked
 11980  001FCA  517E               	movf	trace_path@dj& (0+255),w,b
 11981  001FCC  6ED9               	movwf	fsr2l,c
 11982  001FCE  6ADA               	clrf	fsr2h,c
 11983  001FD0  0E0A               	movlw	10
 11984  001FD2  26D9               	addwf	fsr2l,f,c
 11985  001FD4  CFDE F035          	movff	postinc2,move_window@sector
 11986  001FD8  CFDE F036          	movff	postinc2,move_window@sector+1
 11987  001FDC  CFDE F037          	movff	postinc2,move_window@sector+2
 11988  001FE0  CFDE F038          	movff	postinc2,move_window@sector+3
 11989  001FE4  EC47  F015         	call	_move_window	;wreg free
 11990  001FE8  0900               	iorlw	0
 11991  001FEA  A4D8               	btfss	status,2,c
 11992  001FEC  D002               	goto	l11817
 11993  001FEE  0E08               	movlw	8
 11994  001FF0  0012               	return	
 11995  001FF2                     l11817:
 11996                           
 11997                           ;tff.c: 538: dptr = &fs->win[(dj->index & 15) * 32];
 11998  001FF2  0100               	movlb	0	; () banked
 11999  001FF4  517E               	movf	trace_path@dj& (0+255),w,b
 12000  001FF6  6ED9               	movwf	fsr2l,c
 12001  001FF8  6ADA               	clrf	fsr2h,c
 12002  001FFA  0E02               	movlw	2
 12003  001FFC  26D9               	addwf	fsr2l,f,c
 12004  001FFE  CFDE F083          	movff	postinc2,??_trace_path
 12005  002002  CFDD F084          	movff	postdec2,??_trace_path+1
 12006  002006  0E0F               	movlw	15
 12007  002008  1783               	andwf	??_trace_path& (0+255),f,b
 12008  00200A  0E00               	movlw	0
 12009  00200C  1784               	andwf	(??_trace_path+1)& (0+255),f,b
 12010  00200E  0E05               	movlw	5
 12011  002010                     u13635:
 12012  002010  90D8               	bcf	status,0,c
 12013  002012  3783               	rlcf	??_trace_path& (0+255),f,b
 12014  002014  3784               	rlcf	(??_trace_path+1)& (0+255),f,b
 12015  002016  2EE8               	decfsz	wreg,f,c
 12016  002018  D7FB               	goto	u13635
 12017  00201A  C08B  F085         	movff	trace_path@fs,??_trace_path+2
 12018  00201E  C08C  F086         	movff	trace_path@fs+1,??_trace_path+3
 12019  002022  5183               	movf	??_trace_path& (0+255),w,b
 12020  002024  2785               	addwf	(??_trace_path+2)& (0+255),f,b
 12021  002026  5184               	movf	(??_trace_path+1)& (0+255),w,b
 12022  002028  2386               	addwfc	(??_trace_path+3)& (0+255),f,b
 12023  00202A  0E20               	movlw	32
 12024  00202C  2585               	addwf	(??_trace_path+2)& (0+255),w,b
 12025  00202E  6F90               	movwf	trace_path@dptr& (0+255),b
 12026  002030  0E00               	movlw	0
 12027  002032  2186               	addwfc	(??_trace_path+3)& (0+255),w,b
 12028  002034  6F91               	movwf	(trace_path@dptr+1)& (0+255),b
 12029                           
 12030                           ; BSR set to: 0
 12031                           ;tff.c: 539: if (dptr[0] == 0)
 12032  002036  C090  FFD9         	movff	trace_path@dptr,fsr2l
 12033  00203A  C091  FFDA         	movff	trace_path@dptr+1,fsr2h
 12034  00203E  50DF               	movf	indf2,w,c
 12035  002040  A4D8               	btfss	status,2,c
 12036  002042  D00D               	goto	l11829
 12037                           
 12038                           ; BSR set to: 0
 12039                           ;tff.c: 540: return !ds ? FR_NO_FILE : FR_NO_PATH;
 12040  002044  518F               	movf	trace_path@ds& (0+255),w,b
 12041  002046  B4D8               	btfsc	status,2,c
 12042  002048  D004               	goto	l11825
 12043                           
 12044                           ; BSR set to: 0
 12045  00204A  0E00               	movlw	0
 12046  00204C  6F88               	movwf	(_trace_path$1781+1)& (0+255),b
 12047  00204E  0E03               	movlw	3
 12048  002050  D003               	goto	L3
 12049  002052                     l11825:
 12050                           
 12051                           ; BSR set to: 0
 12052  002052  0E00               	movlw	0
 12053  002054  6F88               	movwf	(_trace_path$1781+1)& (0+255),b
 12054  002056  0E02               	movlw	2
 12055  002058                     L3:
 12056  002058  6F87               	movwf	_trace_path$1781& (0+255),b
 12057                           
 12058                           ; BSR set to: 0
 12059  00205A  5187               	movf	_trace_path$1781& (0+255),w,b
 12060  00205C  0012               	return	
 12061  00205E                     l11829:
 12062                           
 12063                           ; BSR set to: 0
 12064                           ;tff.c: 541: if (dptr[0] != 0xE5;tff.c: 542: && !(dptr[11] & 0x08);tff.c: 543: && !memcm
      +                          p(&dptr[0], fn, 8+3) ) break;
 12065  00205E  C090  FFD9         	movff	trace_path@dptr,fsr2l
 12066  002062  C091  FFDA         	movff	trace_path@dptr+1,fsr2h
 12067  002066  0EE5               	movlw	229
 12068  002068  18DE               	xorwf	postinc2,w,c
 12069  00206A  B4D8               	btfsc	status,2,c
 12070  00206C  D019               	goto	l11837
 12071                           
 12072                           ; BSR set to: 0
 12073  00206E  EE20 F00B          	lfsr	2,11
 12074  002072  5190               	movf	trace_path@dptr& (0+255),w,b
 12075  002074  26D9               	addwf	fsr2l,f,c
 12076  002076  5191               	movf	(trace_path@dptr+1)& (0+255),w,b
 12077  002078  22DA               	addwfc	fsr2h,f,c
 12078  00207A  B6DF               	btfsc	indf2,3,c
 12079  00207C  D011               	goto	l11837
 12080                           
 12081                           ; BSR set to: 0
 12082  00207E  C090  F00A         	movff	trace_path@dptr,memcmp@s1
 12083  002082  C091  F00B         	movff	trace_path@dptr+1,memcmp@s1+1
 12084  002086  C07F  F00C         	movff	trace_path@fn,memcmp@s2
 12085  00208A  6A0D               	clrf	(memcmp@s2+1)^0,c
 12086  00208C  0E00               	movlw	0
 12087  00208E  6E0F               	movwf	(memcmp@n+1)^0,c
 12088  002090  0E0B               	movlw	11
 12089  002092  6E0E               	movwf	memcmp@n^0,c
 12090  002094  ECBF  F023         	call	_memcmp	;wreg free
 12091  002098  500A               	movf	?_memcmp^0,w,c
 12092  00209A  100B               	iorwf	(?_memcmp+1)^0,w,c
 12093  00209C  B4D8               	btfsc	status,2,c
 12094  00209E  D015               	goto	l11847
 12095  0020A0                     l11837:
 12096                           
 12097                           ;tff.c: 544: if (!next_dir_entry(dj))
 12098  0020A0  C07E  F04C         	movff	trace_path@dj,next_dir_entry@dj
 12099  0020A4  EC76  F018         	call	_next_dir_entry	;wreg free
 12100  0020A8  0900               	iorlw	0
 12101  0020AA  A4D8               	btfss	status,2,c
 12102  0020AC  D78D               	goto	l11811
 12103                           
 12104                           ;tff.c: 545: return !ds ? FR_NO_FILE : FR_NO_PATH;
 12105  0020AE  0100               	movlb	0	; () banked
 12106  0020B0  518F               	movf	trace_path@ds& (0+255),w,b
 12107  0020B2  B4D8               	btfsc	status,2,c
 12108  0020B4  D004               	goto	l11843
 12109                           
 12110                           ; BSR set to: 0
 12111  0020B6  0E00               	movlw	0
 12112  0020B8  6F8A               	movwf	(_trace_path$1783+1)& (0+255),b
 12113  0020BA  0E03               	movlw	3
 12114  0020BC  D003               	goto	L4
 12115  0020BE                     l11843:
 12116                           
 12117                           ; BSR set to: 0
 12118  0020BE  0E00               	movlw	0
 12119  0020C0  6F8A               	movwf	(_trace_path$1783+1)& (0+255),b
 12120  0020C2  0E02               	movlw	2
 12121  0020C4                     L4:
 12122  0020C4  6F89               	movwf	_trace_path$1783& (0+255),b
 12123                           
 12124                           ; BSR set to: 0
 12125  0020C6  5189               	movf	_trace_path$1783& (0+255),w,b
 12126  0020C8  0012               	return	
 12127  0020CA                     l11847:
 12128                           
 12129                           ;tff.c: 547: if (!ds) { *dir = dptr; return FR_OK; }
 12130  0020CA  0100               	movlb	0	; () banked
 12131  0020CC  518F               	movf	trace_path@ds& (0+255),w,b
 12132  0020CE  A4D8               	btfss	status,2,c
 12133  0020D0  D008               	goto	l11855
 12134                           
 12135                           ; BSR set to: 0
 12136  0020D2  5182               	movf	trace_path@dir& (0+255),w,b
 12137  0020D4  6ED9               	movwf	fsr2l,c
 12138  0020D6  6ADA               	clrf	fsr2h,c
 12139  0020D8  C090  FFDE         	movff	trace_path@dptr,postinc2
 12140  0020DC  C091  FFDD         	movff	trace_path@dptr+1,postdec2
 12141  0020E0  D764               	goto	l11799
 12142  0020E2                     l11855:
 12143                           
 12144                           ; BSR set to: 0
 12145                           ;tff.c: 548: if (!(dptr[11] & 0x10)) return FR_NO_PATH;
 12146  0020E2  EE20 F00B          	lfsr	2,11
 12147  0020E6  5190               	movf	trace_path@dptr& (0+255),w,b
 12148  0020E8  26D9               	addwf	fsr2l,f,c
 12149  0020EA  5191               	movf	(trace_path@dptr+1)& (0+255),w,b
 12150  0020EC  22DA               	addwfc	fsr2h,f,c
 12151  0020EE  B8DF               	btfsc	indf2,4,c
 12152  0020F0  D002               	goto	l11861
 12153                           
 12154                           ; BSR set to: 0
 12155  0020F2  0E03               	movlw	3
 12156  0020F4  0012               	return	
 12157  0020F6                     l11861:
 12158                           
 12159                           ; BSR set to: 0
 12160                           ;tff.c: 549: clust =;tff.c: 553: (WORD)(*(WORD*)(BYTE*)(&dptr[26]));
 12161  0020F6  EE20 F01A          	lfsr	2,26
 12162  0020FA  5190               	movf	trace_path@dptr& (0+255),w,b
 12163  0020FC  26D9               	addwf	fsr2l,f,c
 12164  0020FE  5191               	movf	(trace_path@dptr+1)& (0+255),w,b
 12165  002100  22DA               	addwfc	fsr2h,f,c
 12166  002102  CFDE F08D          	movff	postinc2,trace_path@clust
 12167  002106  CFDD F08E          	movff	postdec2,trace_path@clust+1
 12168                           
 12169                           ; BSR set to: 0
 12170                           ;tff.c: 554: dj->clust = dj->sclust = clust;
 12171  00210A  517E               	movf	trace_path@dj& (0+255),w,b
 12172  00210C  6ED9               	movwf	fsr2l,c
 12173  00210E  6ADA               	clrf	fsr2h,c
 12174  002110  0E06               	movlw	6
 12175  002112  26D9               	addwf	fsr2l,f,c
 12176  002114  C08D  FFDE         	movff	trace_path@clust,postinc2
 12177  002118  C08E  FFDD         	movff	trace_path@clust+1,postdec2
 12178  00211C  517E               	movf	trace_path@dj& (0+255),w,b
 12179  00211E  6EE1               	movwf	fsr1l,c
 12180  002120  6AE2               	clrf	fsr1h,c
 12181  002122  0E08               	movlw	8
 12182  002124  26E1               	addwf	fsr1l,f,c
 12183  002126  CFDE FFE6          	movff	postinc2,postinc1
 12184  00212A  CFDD FFE5          	movff	postdec2,postdec1
 12185                           
 12186                           ; BSR set to: 0
 12187                           ;tff.c: 555: dj->sect = clust2sect(clust);
 12188  00212E  C08D  F016         	movff	trace_path@clust,clust2sect@clust
 12189  002132  C08E  F017         	movff	trace_path@clust+1,clust2sect@clust+1
 12190  002136  EC32  F021         	call	_clust2sect	;wreg free
 12191  00213A  0100               	movlb	0	; () banked
 12192  00213C  517E               	movf	trace_path@dj& (0+255),w,b
 12193  00213E  6ED9               	movwf	fsr2l,c
 12194  002140  6ADA               	clrf	fsr2h,c
 12195  002142  0E0A               	movlw	10
 12196  002144  26D9               	addwf	fsr2l,f,c
 12197  002146  C016  FFDE         	movff	?_clust2sect,postinc2
 12198  00214A  C017  FFDE         	movff	?_clust2sect+1,postinc2
 12199  00214E  C018  FFDE         	movff	?_clust2sect+2,postinc2
 12200  002152  C019  FFDE         	movff	?_clust2sect+3,postinc2
 12201                           
 12202                           ; BSR set to: 0
 12203                           ;tff.c: 556: dj->index = 2;
 12204  002156  517E               	movf	trace_path@dj& (0+255),w,b
 12205  002158  6ED9               	movwf	fsr2l,c
 12206  00215A  6ADA               	clrf	fsr2h,c
 12207  00215C  0E02               	movlw	2
 12208  00215E  26D9               	addwf	fsr2l,f,c
 12209  002160  0E02               	movlw	2
 12210  002162  6EDE               	movwf	postinc2,c
 12211  002164  0E00               	movlw	0
 12212  002166  6EDD               	movwf	postdec2,c
 12213                           
 12214                           ;tff.c: 557: }
 12215  002168  D722               	goto	l11803
 12216  00216A                     __end_of_trace_path:
 12217                           	callstack 0
 12218                           
 12219 ;; *************** function _make_dirfile *****************
 12220 ;; Defined at:
 12221 ;;		line 439 in file "bibliotecas/tff.c"
 12222 ;; Parameters:    Size  Location     Type
 12223 ;;  path            1   17[COMRAM] PTR PTR const unsigned c
 12224 ;;		 -> trace_path@path(2), 
 12225 ;;  dirname         1   18[COMRAM] PTR unsigned char 
 12226 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
 12227 ;; Auto vars:     Size  Location     Type
 12228 ;;  c               1   27[COMRAM] unsigned char 
 12229 ;;  n               1   26[COMRAM] unsigned char 
 12230 ;;  a               1   25[COMRAM] unsigned char 
 12231 ;;  t               1   24[COMRAM] unsigned char 
 12232 ;;  b               1   23[COMRAM] unsigned char 
 12233 ;; Return value:  Size  Location     Type
 12234 ;;                  1    wreg      unsigned char 
 12235 ;; Registers used:
 12236 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12237 ;; Tracked objects:
 12238 ;;		On entry : 0/0
 12239 ;;		On exit  : 0/0
 12240 ;;		Unchanged: 0/0
 12241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12242 ;;      Params:         2       0       0       0       0       0       0       0       0
 12243 ;;      Locals:         7       0       0       0       0       0       0       0       0
 12244 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12245 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12246 ;;Total ram usage:       11 bytes
 12247 ;; Hardware stack levels used:    1
 12248 ;; Hardware stack levels required when called:    3
 12249 ;; This function calls:
 12250 ;;		_memset
 12251 ;; This function is called by:
 12252 ;;		_trace_path
 12253 ;; This function uses a non-reentrant model
 12254 ;;
 12255                           
 12256                           	psect	text72
 12257  0033B4                     __ptext72:
 12258                           	callstack 0
 12259  0033B4                     _make_dirfile:
 12260                           	callstack 21
 12261                           
 12262                           ;tff.c: 444: BYTE n, t, c, a, b;;tff.c: 447: memset(dirname, ' ', 8+3);
 12263                           
 12264                           ;incstack = 0
 12265  0033B4  C013  F00A         	movff	make_dirfile@dirname,memset@p1
 12266  0033B8  6A0B               	clrf	(memset@p1+1)^0,c
 12267  0033BA  0E00               	movlw	0
 12268  0033BC  6E0D               	movwf	(memset@c+1)^0,c
 12269  0033BE  0E20               	movlw	32
 12270  0033C0  6E0C               	movwf	memset@c^0,c
 12271  0033C2  0E00               	movlw	0
 12272  0033C4  6E0F               	movwf	(memset@n+1)^0,c
 12273  0033C6  0E0B               	movlw	11
 12274  0033C8  6E0E               	movwf	memset@n^0,c
 12275  0033CA  EC34  F02C         	call	_memset	;wreg free
 12276                           
 12277                           ;tff.c: 448: a = 0; b = 0x18;
 12278  0033CE  0E00               	movlw	0
 12279  0033D0  6E1A               	movwf	make_dirfile@a^0,c
 12280  0033D2  0E18               	movlw	24
 12281  0033D4  6E18               	movwf	make_dirfile@b^0,c
 12282                           
 12283                           ;tff.c: 449: n = 0; t = 8;
 12284  0033D6  0E00               	movlw	0
 12285  0033D8  6E1B               	movwf	make_dirfile@n^0,c
 12286  0033DA  0E08               	movlw	8
 12287  0033DC  6E19               	movwf	make_dirfile@t^0,c
 12288  0033DE                     l11431:
 12289                           
 12290                           ;tff.c: 451: c = *(*path)++;
 12291  0033DE  5012               	movf	make_dirfile@path^0,w,c
 12292  0033E0  6ED9               	movwf	fsr2l,c
 12293  0033E2  6ADA               	clrf	fsr2h,c
 12294  0033E4  CFDF F014          	movff	indf2,??_make_dirfile
 12295  0033E8  0E01               	movlw	1
 12296  0033EA  26DE               	addwf	postinc2,f,c
 12297  0033EC  CFDF F015          	movff	indf2,??_make_dirfile+1
 12298  0033F0  0E00               	movlw	0
 12299  0033F2  22DD               	addwfc	postdec2,f,c
 12300  0033F4  C014  FFF6         	movff	??_make_dirfile,tblptrl
 12301  0033F8  C015  FFF7         	movff	??_make_dirfile+1,tblptrh
 12302  0033FC  6AF8               	clrf	tblptru,c
 12303  0033FE  0E07               	movlw	(high __ramtop+-1)
 12304  003400  64F7               	cpfsgt	tblptrh,c
 12305  003402  D003               	bra	u13047
 12306  003404  0008               	tblrd		*
 12307  003406  50F5               	movf	tablat,w,c
 12308  003408  D005               	bra	u13040
 12309  00340A                     u13047:
 12310  00340A  CFF6 FFE1          	movff	tblptrl,fsr1l
 12311  00340E  CFF7 FFE2          	movff	tblptrh,fsr1h
 12312  003412  50E7               	movf	indf1,w,c
 12313  003414                     u13040:
 12314  003414  6E1C               	movwf	make_dirfile@c^0,c
 12315                           
 12316                           ;tff.c: 452: if (c == '\0' || c == '/') {
 12317  003416  501C               	movf	make_dirfile@c^0,w,c
 12318  003418  B4D8               	btfsc	status,2,c
 12319  00341A  D004               	goto	u13060
 12320  00341C  0E2F               	movlw	47
 12321  00341E  181C               	xorwf	make_dirfile@c^0,w,c
 12322  003420  A4D8               	btfss	status,2,c
 12323  003422  D012               	goto	l11451
 12324  003424                     u13060:
 12325                           
 12326                           ;tff.c: 453: if (n == 0) break;
 12327  003424  501B               	movf	make_dirfile@n^0,w,c
 12328  003426  B4D8               	btfsc	status,2,c
 12329  003428  D070               	goto	l11539
 12330  00342A  501A               	movf	make_dirfile@a^0,w,c
 12331  00342C  1418               	andwf	make_dirfile@b^0,w,c
 12332  00342E  6E14               	movwf	??_make_dirfile^0,c
 12333  003430  5014               	movf	??_make_dirfile^0,w,c
 12334  003432  6E16               	movwf	_make_dirfile$1734^0,c
 12335  003434  6A17               	clrf	(_make_dirfile$1734+1)^0,c
 12336  003436  5013               	movf	make_dirfile@dirname^0,w,c
 12337  003438  6ED9               	movwf	fsr2l,c
 12338  00343A  6ADA               	clrf	fsr2h,c
 12339  00343C  0E0B               	movlw	11
 12340  00343E  26D9               	addwf	fsr2l,f,c
 12341  003440  C016  FFDF         	movff	_make_dirfile$1734,indf2
 12342                           
 12343                           ;tff.c: 455: return c;
 12344  003444  501C               	movf	make_dirfile@c^0,w,c
 12345  003446  0012               	return	
 12346  003448                     l11451:
 12347                           
 12348                           ;tff.c: 456: };tff.c: 457: if (c <= ' ' || c == 0x7F) break;
 12349  003448  0E20               	movlw	32
 12350  00344A  641C               	cpfsgt	make_dirfile@c^0,c
 12351  00344C  D05E               	goto	l11539
 12352  00344E  0E7F               	movlw	127
 12353  003450  181C               	xorwf	make_dirfile@c^0,w,c
 12354  003452  B4D8               	btfsc	status,2,c
 12355  003454  D05A               	goto	l11539
 12356                           
 12357                           ;tff.c: 458: if (c == '.') {
 12358  003456  0E2E               	movlw	46
 12359  003458  181C               	xorwf	make_dirfile@c^0,w,c
 12360  00345A  A4D8               	btfss	status,2,c
 12361  00345C  D00C               	goto	l11481
 12362                           
 12363                           ;tff.c: 459: if (!(a & 1) && n >= 1 && n <= 8) {
 12364  00345E  B01A               	btfsc	make_dirfile@a^0,0,c
 12365  003460  D054               	goto	l11539
 12366  003462  501B               	movf	make_dirfile@n^0,w,c
 12367  003464  B4D8               	btfsc	status,2,c
 12368  003466  D051               	goto	l11539
 12369  003468  0E09               	movlw	9
 12370  00346A  601B               	cpfslt	make_dirfile@n^0,c
 12371  00346C  D04E               	goto	l11539
 12372                           
 12373                           ;tff.c: 460: n = 8; t = 11; continue;
 12374  00346E  0E08               	movlw	8
 12375  003470  6E1B               	movwf	make_dirfile@n^0,c
 12376  003472  0E0B               	movlw	11
 12377  003474  D7B3               	goto	L5
 12378  003476                     l11481:
 12379                           
 12380                           ;tff.c: 470: };tff.c: 471: if (c == '"') break;
 12381  003476  0E22               	movlw	34
 12382  003478  181C               	xorwf	make_dirfile@c^0,w,c
 12383  00347A  B4D8               	btfsc	status,2,c
 12384  00347C  D046               	goto	l11539
 12385                           
 12386                           ;tff.c: 472: if (c <= ')') goto md_l1;
 12387  00347E  0E2A               	movlw	42
 12388  003480  601C               	cpfslt	make_dirfile@c^0,c
 12389  003482  D001               	goto	l11489
 12390  003484  D035               	goto	l992
 12391  003486                     l11489:
 12392                           
 12393                           ;tff.c: 473: if (c <= ',') break;
 12394  003486  0E2D               	movlw	45
 12395  003488  601C               	cpfslt	make_dirfile@c^0,c
 12396  00348A  D001               	goto	l11493
 12397  00348C  D03E               	goto	l11539
 12398  00348E                     l11493:
 12399                           
 12400                           ;tff.c: 474: if (c <= '9') goto md_l1;
 12401  00348E  0E3A               	movlw	58
 12402  003490  601C               	cpfslt	make_dirfile@c^0,c
 12403  003492  D001               	goto	l11497
 12404  003494  D02D               	goto	l992
 12405  003496                     l11497:
 12406                           
 12407                           ;tff.c: 475: if (c <= '?') break;
 12408  003496  0E40               	movlw	64
 12409  003498  601C               	cpfslt	make_dirfile@c^0,c
 12410  00349A  D001               	goto	l995
 12411  00349C  D036               	goto	l11539
 12412  00349E                     l995:
 12413                           
 12414                           ;tff.c: 476: if (!(a & 1)) {
 12415  00349E  B01A               	btfsc	make_dirfile@a^0,0,c
 12416  0034A0  D027               	goto	l992
 12417                           
 12418                           ;tff.c: 477: if (c == '|') break;
 12419  0034A2  0E7C               	movlw	124
 12420  0034A4  181C               	xorwf	make_dirfile@c^0,w,c
 12421  0034A6  B4D8               	btfsc	status,2,c
 12422  0034A8  D030               	goto	l11539
 12423                           
 12424                           ;tff.c: 478: if (c >= '[' && c <= ']') break;
 12425  0034AA  0E5A               	movlw	90
 12426  0034AC  641C               	cpfsgt	make_dirfile@c^0,c
 12427  0034AE  D004               	goto	l11511
 12428  0034B0  0E5E               	movlw	94
 12429  0034B2  601C               	cpfslt	make_dirfile@c^0,c
 12430  0034B4  D001               	goto	l11511
 12431  0034B6  D029               	goto	l11539
 12432  0034B8                     l11511:
 12433  0034B8  0E40               	movlw	64
 12434  0034BA  641C               	cpfsgt	make_dirfile@c^0,c
 12435  0034BC  D00A               	goto	l11521
 12436  0034BE  0E5B               	movlw	91
 12437  0034C0  601C               	cpfslt	make_dirfile@c^0,c
 12438  0034C2  D007               	goto	l11521
 12439                           
 12440                           ;tff.c: 480: (t == 8) ? (b &= 0xF7) : (b &= 0xEF);
 12441  0034C4  0E08               	movlw	8
 12442  0034C6  1819               	xorwf	make_dirfile@t^0,w,c
 12443  0034C8  A4D8               	btfss	status,2,c
 12444  0034CA  D002               	goto	l11519
 12445  0034CC  9618               	bcf	make_dirfile@b^0,3,c
 12446  0034CE  D001               	goto	l11521
 12447  0034D0                     l11519:
 12448  0034D0  9818               	bcf	make_dirfile@b^0,4,c
 12449  0034D2                     l11521:
 12450                           
 12451                           ;tff.c: 481: if (c >= 'a' && c <= 'z') {
 12452  0034D2  0E60               	movlw	96
 12453  0034D4  641C               	cpfsgt	make_dirfile@c^0,c
 12454  0034D6  D00C               	goto	l992
 12455  0034D8  0E7B               	movlw	123
 12456  0034DA  601C               	cpfslt	make_dirfile@c^0,c
 12457  0034DC  D009               	goto	l992
 12458                           
 12459                           ;tff.c: 483: if (1) (t == 8) ? (a |= 0x08) : (a |= 0x10);
 12460  0034DE  0E20               	movlw	32
 12461  0034E0  5E1C               	subwf	make_dirfile@c^0,f,c
 12462  0034E2  0E08               	movlw	8
 12463  0034E4  1819               	xorwf	make_dirfile@t^0,w,c
 12464  0034E6  A4D8               	btfss	status,2,c
 12465  0034E8  D002               	goto	l11529
 12466  0034EA  861A               	bsf	make_dirfile@a^0,3,c
 12467  0034EC  D001               	goto	l992
 12468  0034EE                     l11529:
 12469  0034EE  881A               	bsf	make_dirfile@a^0,4,c
 12470  0034F0                     l992:
 12471                           
 12472                           ;tff.c: 487: a &= 0xFE;
 12473  0034F0  901A               	bcf	make_dirfile@a^0,0,c
 12474                           
 12475                           ;tff.c: 489: if (n >= t) break;
 12476  0034F2  5019               	movf	make_dirfile@t^0,w,c
 12477  0034F4  5C1B               	subwf	make_dirfile@n^0,w,c
 12478  0034F6  B0D8               	btfsc	status,0,c
 12479  0034F8  D008               	goto	l11539
 12480                           
 12481                           ;tff.c: 490: dirname[n++] = c;
 12482  0034FA  5013               	movf	make_dirfile@dirname^0,w,c
 12483  0034FC  241B               	addwf	make_dirfile@n^0,w,c
 12484  0034FE  6ED9               	movwf	fsr2l,c
 12485  003500  6ADA               	clrf	fsr2h,c
 12486  003502  C01C  FFDF         	movff	make_dirfile@c,indf2
 12487  003506  2A1B               	incf	make_dirfile@n^0,f,c
 12488  003508  D76A               	goto	l11431
 12489  00350A                     l11539:
 12490                           
 12491                           ;tff.c: 492: return 1;
 12492  00350A  0E01               	movlw	1
 12493  00350C  0012               	return		;funcret
 12494  00350E                     __end_of_make_dirfile:
 12495                           	callstack 0
 12496                           
 12497 ;; *************** function _reserve_direntry *****************
 12498 ;; Defined at:
 12499 ;;		line 568 in file "bibliotecas/tff.c"
 12500 ;; Parameters:    Size  Location     Type
 12501 ;;  dj              1   38[BANK0 ] PTR struct _DIR_E
 12502 ;;		 -> f_open@dj(14), 
 12503 ;;  dir             1   39[BANK0 ] PTR PTR unsigned char 
 12504 ;;		 -> f_open@dir(2), 
 12505 ;; Auto vars:     Size  Location     Type
 12506 ;;  sector          4   44[BANK0 ] unsigned long 
 12507 ;;  fs              2   54[BANK0 ] PTR struct _FATFS
 12508 ;;		 -> NULL(0), fs(544), 
 12509 ;;  clust           2   52[BANK0 ] unsigned short 
 12510 ;;  dptr            2   49[BANK0 ] PTR unsigned char 
 12511 ;;		 -> fs.win(512), NULL(0), fs(544), 
 12512 ;;  c               1   51[BANK0 ] unsigned char 
 12513 ;;  n               1   48[BANK0 ] unsigned char 
 12514 ;; Return value:  Size  Location     Type
 12515 ;;                  1    wreg      enum E155
 12516 ;; Registers used:
 12517 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12518 ;; Tracked objects:
 12519 ;;		On entry : 3F/0
 12520 ;;		On exit  : 0/0
 12521 ;;		Unchanged: 0/0
 12522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12523 ;;      Params:         0       2       0       0       0       0       0       0       0
 12524 ;;      Locals:         0      12       0       0       0       0       0       0       0
 12525 ;;      Temps:          0       4       0       0       0       0       0       0       0
 12526 ;;      Totals:         0      18       0       0       0       0       0       0       0
 12527 ;;Total ram usage:       18 bytes
 12528 ;; Hardware stack levels used:    1
 12529 ;; Hardware stack levels required when called:   10
 12530 ;; This function calls:
 12531 ;;		_clust2sect
 12532 ;;		_create_chain
 12533 ;;		_disk_write
 12534 ;;		_memset
 12535 ;;		_move_window
 12536 ;;		_next_dir_entry
 12537 ;; This function is called by:
 12538 ;;		_f_open
 12539 ;; This function uses a non-reentrant model
 12540 ;;
 12541                           
 12542                           	psect	text73
 12543  00216A                     __ptext73:
 12544                           	callstack 0
 12545  00216A                     _reserve_direntry:
 12546                           	callstack 15
 12547                           
 12548                           ; BSR set to: 0
 12549                           ;tff.c: 573: CLUST clust;;tff.c: 574: DWORD sector;;tff.c: 575: BYTE c, n, *dptr;;tff.c:
      +                           576: FATFS *fs = dj->fs;
 12550                           
 12551                           ;incstack = 0
 12552  00216A  5186               	movf	reserve_direntry@dj& (0+255),w,b
 12553  00216C  6ED9               	movwf	fsr2l,c
 12554  00216E  6ADA               	clrf	fsr2h,c
 12555  002170  0E04               	movlw	4
 12556  002172  26D9               	addwf	fsr2l,f,c
 12557  002174  CFDE F096          	movff	postinc2,reserve_direntry@fs
 12558  002178  CFDD F097          	movff	postdec2,reserve_direntry@fs+1
 12559                           
 12560                           ;tff.c: 580: clust = dj->sclust;
 12561  00217C  5186               	movf	reserve_direntry@dj& (0+255),w,b
 12562  00217E  6ED9               	movwf	fsr2l,c
 12563  002180  6ADA               	clrf	fsr2h,c
 12564  002182  0E06               	movlw	6
 12565  002184  26D9               	addwf	fsr2l,f,c
 12566  002186  CFDE F094          	movff	postinc2,reserve_direntry@clust
 12567  00218A  CFDD F095          	movff	postdec2,reserve_direntry@clust+1
 12568                           
 12569                           ; BSR set to: 0
 12570                           ;tff.c: 581: if (clust != 0) {
 12571  00218E  5194               	movf	reserve_direntry@clust& (0+255),w,b
 12572  002190  1195               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 12573  002192  B4D8               	btfsc	status,2,c
 12574  002194  D01E               	goto	l11877
 12575                           
 12576                           ; BSR set to: 0
 12577                           ;tff.c: 582: dj->clust = clust;
 12578  002196  5186               	movf	reserve_direntry@dj& (0+255),w,b
 12579  002198  6ED9               	movwf	fsr2l,c
 12580  00219A  6ADA               	clrf	fsr2h,c
 12581  00219C  0E08               	movlw	8
 12582  00219E  26D9               	addwf	fsr2l,f,c
 12583  0021A0  C094  FFDE         	movff	reserve_direntry@clust,postinc2
 12584  0021A4  C095  FFDD         	movff	reserve_direntry@clust+1,postdec2
 12585                           
 12586                           ; BSR set to: 0
 12587                           ;tff.c: 583: dj->sect = clust2sect(clust);
 12588  0021A8  C094  F016         	movff	reserve_direntry@clust,clust2sect@clust
 12589  0021AC  C095  F017         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 12590  0021B0  EC32  F021         	call	_clust2sect	;wreg free
 12591  0021B4  0100               	movlb	0	; () banked
 12592  0021B6  5186               	movf	reserve_direntry@dj& (0+255),w,b
 12593  0021B8  6ED9               	movwf	fsr2l,c
 12594  0021BA  6ADA               	clrf	fsr2h,c
 12595  0021BC  0E0A               	movlw	10
 12596  0021BE  26D9               	addwf	fsr2l,f,c
 12597  0021C0  C016  FFDE         	movff	?_clust2sect,postinc2
 12598  0021C4  C017  FFDE         	movff	?_clust2sect+1,postinc2
 12599  0021C8  C018  FFDE         	movff	?_clust2sect+2,postinc2
 12600  0021CC  C019  FFDE         	movff	?_clust2sect+3,postinc2
 12601                           
 12602                           ;tff.c: 584: } else {
 12603  0021D0  D013               	goto	l11879
 12604  0021D2                     l11877:
 12605                           
 12606                           ; BSR set to: 0
 12607                           ;tff.c: 585: dj->sect = fs->dirbase;
 12608  0021D2  EE20 F00C          	lfsr	2,12
 12609  0021D6  5196               	movf	reserve_direntry@fs& (0+255),w,b
 12610  0021D8  26D9               	addwf	fsr2l,f,c
 12611  0021DA  5197               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12612  0021DC  22DA               	addwfc	fsr2h,f,c
 12613  0021DE  5186               	movf	reserve_direntry@dj& (0+255),w,b
 12614  0021E0  6EE1               	movwf	fsr1l,c
 12615  0021E2  6AE2               	clrf	fsr1h,c
 12616  0021E4  0E0A               	movlw	10
 12617  0021E6  26E1               	addwf	fsr1l,f,c
 12618  0021E8  CFDE FFE6          	movff	postinc2,postinc1
 12619  0021EC  CFDE FFE6          	movff	postinc2,postinc1
 12620  0021F0  CFDE FFE6          	movff	postinc2,postinc1
 12621  0021F4  CFDE FFE6          	movff	postinc2,postinc1
 12622  0021F8                     l11879:
 12623                           
 12624                           ; BSR set to: 0
 12625                           ;tff.c: 586: };tff.c: 587: dj->index = 0;
 12626  0021F8  5186               	movf	reserve_direntry@dj& (0+255),w,b
 12627  0021FA  6ED9               	movwf	fsr2l,c
 12628  0021FC  6ADA               	clrf	fsr2h,c
 12629  0021FE  0E02               	movlw	2
 12630  002200  26D9               	addwf	fsr2l,f,c
 12631  002202  0E00               	movlw	0
 12632  002204  6EDE               	movwf	postinc2,c
 12633  002206  0E00               	movlw	0
 12634  002208  6EDD               	movwf	postdec2,c
 12635  00220A                     l11881:
 12636                           
 12637                           ;tff.c: 590: if (!move_window(dj->sect)) return FR_RW_ERROR;
 12638  00220A  0100               	movlb	0	; () banked
 12639  00220C  5186               	movf	reserve_direntry@dj& (0+255),w,b
 12640  00220E  6ED9               	movwf	fsr2l,c
 12641  002210  6ADA               	clrf	fsr2h,c
 12642  002212  0E0A               	movlw	10
 12643  002214  26D9               	addwf	fsr2l,f,c
 12644  002216  CFDE F035          	movff	postinc2,move_window@sector
 12645  00221A  CFDE F036          	movff	postinc2,move_window@sector+1
 12646  00221E  CFDE F037          	movff	postinc2,move_window@sector+2
 12647  002222  CFDE F038          	movff	postinc2,move_window@sector+3
 12648  002226  EC47  F015         	call	_move_window	;wreg free
 12649  00222A  0900               	iorlw	0
 12650  00222C  A4D8               	btfss	status,2,c
 12651  00222E  D002               	goto	l11887
 12652  002230                     u13740:
 12653  002230  0E08               	movlw	8
 12654  002232  0012               	return	
 12655  002234                     l11887:
 12656                           
 12657                           ;tff.c: 591: dptr = &fs->win[(dj->index & 15) * 32];
 12658  002234  0100               	movlb	0	; () banked
 12659  002236  5186               	movf	reserve_direntry@dj& (0+255),w,b
 12660  002238  6ED9               	movwf	fsr2l,c
 12661  00223A  6ADA               	clrf	fsr2h,c
 12662  00223C  0E02               	movlw	2
 12663  00223E  26D9               	addwf	fsr2l,f,c
 12664  002240  CFDE F088          	movff	postinc2,??_reserve_direntry
 12665  002244  CFDD F089          	movff	postdec2,??_reserve_direntry+1
 12666  002248  0E0F               	movlw	15
 12667  00224A  1788               	andwf	??_reserve_direntry& (0+255),f,b
 12668  00224C  0E00               	movlw	0
 12669  00224E  1789               	andwf	(??_reserve_direntry+1)& (0+255),f,b
 12670  002250  0E05               	movlw	5
 12671  002252                     u13755:
 12672  002252  90D8               	bcf	status,0,c
 12673  002254  3788               	rlcf	??_reserve_direntry& (0+255),f,b
 12674  002256  3789               	rlcf	(??_reserve_direntry+1)& (0+255),f,b
 12675  002258  2EE8               	decfsz	wreg,f,c
 12676  00225A  D7FB               	goto	u13755
 12677  00225C  C096  F08A         	movff	reserve_direntry@fs,??_reserve_direntry+2
 12678  002260  C097  F08B         	movff	reserve_direntry@fs+1,??_reserve_direntry+3
 12679  002264  5188               	movf	??_reserve_direntry& (0+255),w,b
 12680  002266  278A               	addwf	(??_reserve_direntry+2)& (0+255),f,b
 12681  002268  5189               	movf	(??_reserve_direntry+1)& (0+255),w,b
 12682  00226A  238B               	addwfc	(??_reserve_direntry+3)& (0+255),f,b
 12683  00226C  0E20               	movlw	32
 12684  00226E  258A               	addwf	(??_reserve_direntry+2)& (0+255),w,b
 12685  002270  6F91               	movwf	reserve_direntry@dptr& (0+255),b
 12686  002272  0E00               	movlw	0
 12687  002274  218B               	addwfc	(??_reserve_direntry+3)& (0+255),w,b
 12688  002276  6F92               	movwf	(reserve_direntry@dptr+1)& (0+255),b
 12689                           
 12690                           ; BSR set to: 0
 12691                           ;tff.c: 592: c = dptr[0];
 12692  002278  C091  FFD9         	movff	reserve_direntry@dptr,fsr2l
 12693  00227C  C092  FFDA         	movff	reserve_direntry@dptr+1,fsr2h
 12694  002280  50DF               	movf	indf2,w,c
 12695  002282  6F93               	movwf	reserve_direntry@c& (0+255),b
 12696                           
 12697                           ; BSR set to: 0
 12698                           ;tff.c: 593: if (c == 0 || c == 0xE5) {
 12699  002284  5193               	movf	reserve_direntry@c& (0+255),w,b
 12700  002286  B4D8               	btfsc	status,2,c
 12701  002288  D004               	goto	u13770
 12702                           
 12703                           ; BSR set to: 0
 12704  00228A  0EE5               	movlw	229
 12705  00228C  1993               	xorwf	reserve_direntry@c& (0+255),w,b
 12706  00228E  A4D8               	btfss	status,2,c
 12707  002290  D009               	goto	l11901
 12708  002292                     u13770:
 12709                           
 12710                           ; BSR set to: 0
 12711                           ;tff.c: 594: *dir = dptr; return FR_OK;
 12712  002292  5187               	movf	reserve_direntry@dir& (0+255),w,b
 12713  002294  6ED9               	movwf	fsr2l,c
 12714  002296  6ADA               	clrf	fsr2h,c
 12715  002298  C091  FFDE         	movff	reserve_direntry@dptr,postinc2
 12716  00229C  C092  FFDD         	movff	reserve_direntry@dptr+1,postdec2
 12717  0022A0                     l11897:
 12718                           
 12719                           ; BSR set to: 0
 12720  0022A0  0E00               	movlw	0
 12721  0022A2  0012               	return	
 12722  0022A4                     l11901:
 12723                           
 12724                           ; BSR set to: 0
 12725                           ;tff.c: 595: };tff.c: 596: } while (next_dir_entry(dj));
 12726  0022A4  C086  F04C         	movff	reserve_direntry@dj,next_dir_entry@dj
 12727  0022A8  EC76  F018         	call	_next_dir_entry	;wreg free
 12728  0022AC  0900               	iorlw	0
 12729  0022AE  A4D8               	btfss	status,2,c
 12730  0022B0  D7AC               	goto	l11881
 12731                           
 12732                           ;tff.c: 600: if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
 12733  0022B2  0100               	movlb	0	; () banked
 12734  0022B4  5194               	movf	reserve_direntry@clust& (0+255),w,b
 12735  0022B6  1195               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 12736  0022B8  B4D8               	btfsc	status,2,c
 12737  0022BA  D013               	goto	u13800
 12738                           
 12739                           ; BSR set to: 0
 12740  0022BC  5186               	movf	reserve_direntry@dj& (0+255),w,b
 12741  0022BE  6ED9               	movwf	fsr2l,c
 12742  0022C0  6ADA               	clrf	fsr2h,c
 12743  0022C2  0E08               	movlw	8
 12744  0022C4  26D9               	addwf	fsr2l,f,c
 12745  0022C6  CFDE F078          	movff	postinc2,create_chain@clust
 12746  0022CA  CFDD F079          	movff	postdec2,create_chain@clust+1
 12747  0022CE  ECED  F016         	call	_create_chain	;wreg free
 12748  0022D2  C078  F094         	movff	?_create_chain,reserve_direntry@clust
 12749  0022D6  C079  F095         	movff	?_create_chain+1,reserve_direntry@clust+1
 12750  0022DA  5194               	movf	reserve_direntry@clust& (0+255),w,b
 12751  0022DC  1195               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 12752  0022DE  A4D8               	btfss	status,2,c
 12753  0022E0  D002               	goto	l11911
 12754  0022E2                     u13800:
 12755                           
 12756                           ; BSR set to: 0
 12757  0022E2  0E06               	movlw	6
 12758  0022E4  0012               	return	
 12759  0022E6                     l11911:
 12760                           
 12761                           ; BSR set to: 0
 12762                           ;tff.c: 601: if (clust == 1 || !move_window(0)) return FR_RW_ERROR;
 12763  0022E6  0594               	decf	reserve_direntry@clust& (0+255),w,b
 12764  0022E8  1195               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 12765  0022EA  B4D8               	btfsc	status,2,c
 12766  0022EC  D7A1               	goto	u13740
 12767                           
 12768                           ; BSR set to: 0
 12769  0022EE  0E00               	movlw	0
 12770  0022F0  6E35               	movwf	move_window@sector^0,c
 12771  0022F2  0E00               	movlw	0
 12772  0022F4  6E36               	movwf	(move_window@sector+1)^0,c
 12773  0022F6  0E00               	movlw	0
 12774  0022F8  6E37               	movwf	(move_window@sector+2)^0,c
 12775  0022FA  0E00               	movlw	0
 12776  0022FC  6E38               	movwf	(move_window@sector+3)^0,c
 12777  0022FE  EC47  F015         	call	_move_window	;wreg free
 12778  002302  0900               	iorlw	0
 12779  002304  B4D8               	btfsc	status,2,c
 12780  002306  D794               	goto	u13740
 12781                           
 12782                           ;tff.c: 603: fs->winsect = sector = clust2sect(clust);
 12783  002308  C094  F016         	movff	reserve_direntry@clust,clust2sect@clust
 12784  00230C  C095  F017         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 12785  002310  EC32  F021         	call	_clust2sect	;wreg free
 12786  002314  C016  F08C         	movff	?_clust2sect,reserve_direntry@sector
 12787  002318  C017  F08D         	movff	?_clust2sect+1,reserve_direntry@sector+1
 12788  00231C  C018  F08E         	movff	?_clust2sect+2,reserve_direntry@sector+2
 12789  002320  C019  F08F         	movff	?_clust2sect+3,reserve_direntry@sector+3
 12790  002324  0100               	movlb	0	; () banked
 12791  002326  EE20 F004          	lfsr	2,4
 12792  00232A  5196               	movf	reserve_direntry@fs& (0+255),w,b
 12793  00232C  26D9               	addwf	fsr2l,f,c
 12794  00232E  5197               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12795  002330  22DA               	addwfc	fsr2h,f,c
 12796  002332  C08C  FFDE         	movff	reserve_direntry@sector,postinc2
 12797  002336  C08D  FFDE         	movff	reserve_direntry@sector+1,postinc2
 12798  00233A  C08E  FFDE         	movff	reserve_direntry@sector+2,postinc2
 12799  00233E  C08F  FFDE         	movff	reserve_direntry@sector+3,postinc2
 12800                           
 12801                           ;tff.c: 604: memset(fs->win, 0, 512U);
 12802  002342  0E20               	movlw	32
 12803  002344  2596               	addwf	reserve_direntry@fs& (0+255),w,b
 12804  002346  6E0A               	movwf	memset@p1^0,c
 12805  002348  0E00               	movlw	0
 12806  00234A  2197               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 12807  00234C  6E0B               	movwf	(memset@p1+1)^0,c
 12808  00234E  0E00               	movlw	0
 12809  002350  6E0D               	movwf	(memset@c+1)^0,c
 12810  002352  0E00               	movlw	0
 12811  002354  6E0C               	movwf	memset@c^0,c
 12812  002356  0E02               	movlw	2
 12813  002358  6E0F               	movwf	(memset@n+1)^0,c
 12814  00235A  0E00               	movlw	0
 12815  00235C  6E0E               	movwf	memset@n^0,c
 12816  00235E  EC34  F02C         	call	_memset	;wreg free
 12817                           
 12818                           ;tff.c: 605: for (n = fs->csize; n; n--) {
 12819  002362  0100               	movlb	0	; () banked
 12820  002364  EE20 F01D          	lfsr	2,29
 12821  002368  5196               	movf	reserve_direntry@fs& (0+255),w,b
 12822  00236A  26D9               	addwf	fsr2l,f,c
 12823  00236C  5197               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12824  00236E  22DA               	addwfc	fsr2h,f,c
 12825  002370  50DF               	movf	indf2,w,c
 12826  002372  6F90               	movwf	reserve_direntry@n& (0+255),b
 12827  002374  D01E               	goto	l11933
 12828  002376                     l11923:
 12829                           
 12830                           ; BSR set to: 0
 12831                           ;tff.c: 606: if (disk_write(0, fs->win, sector, 1) != RES_OK)
 12832  002376  0E20               	movlw	32
 12833  002378  2596               	addwf	reserve_direntry@fs& (0+255),w,b
 12834  00237A  6E29               	movwf	disk_write@buff^0,c
 12835  00237C  0E00               	movlw	0
 12836  00237E  2197               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 12837  002380  6E2A               	movwf	(disk_write@buff+1)^0,c
 12838  002382  C08C  F02B         	movff	reserve_direntry@sector,disk_write@sector
 12839  002386  C08D  F02C         	movff	reserve_direntry@sector+1,disk_write@sector+1
 12840  00238A  C08E  F02D         	movff	reserve_direntry@sector+2,disk_write@sector+2
 12841  00238E  C08F  F02E         	movff	reserve_direntry@sector+3,disk_write@sector+3
 12842  002392  0E01               	movlw	1
 12843  002394  6E2F               	movwf	disk_write@count^0,c
 12844  002396  0E00               	movlw	0
 12845  002398  EC5C  F029         	call	_disk_write
 12846  00239C  0900               	iorlw	0
 12847  00239E  A4D8               	btfss	status,2,c
 12848  0023A0  D747               	goto	u13740
 12849                           
 12850                           ;tff.c: 608: sector++;
 12851  0023A2  0E01               	movlw	1
 12852  0023A4  0100               	movlb	0	; () banked
 12853  0023A6  278C               	addwf	reserve_direntry@sector& (0+255),f,b
 12854  0023A8  0E00               	movlw	0
 12855  0023AA  238D               	addwfc	(reserve_direntry@sector+1)& (0+255),f,b
 12856  0023AC  238E               	addwfc	(reserve_direntry@sector+2)& (0+255),f,b
 12857  0023AE  238F               	addwfc	(reserve_direntry@sector+3)& (0+255),f,b
 12858                           
 12859                           ; BSR set to: 0
 12860  0023B0  0790               	decf	reserve_direntry@n& (0+255),f,b
 12861  0023B2                     l11933:
 12862                           
 12863                           ; BSR set to: 0
 12864  0023B2  5190               	movf	reserve_direntry@n& (0+255),w,b
 12865  0023B4  A4D8               	btfss	status,2,c
 12866  0023B6  D7DF               	goto	l11923
 12867                           
 12868                           ; BSR set to: 0
 12869                           ;tff.c: 609: };tff.c: 610: fs->winflag = 1;
 12870  0023B8  EE20 F01F          	lfsr	2,31
 12871  0023BC  5196               	movf	reserve_direntry@fs& (0+255),w,b
 12872  0023BE  26D9               	addwf	fsr2l,f,c
 12873  0023C0  5197               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12874  0023C2  22DA               	addwfc	fsr2h,f,c
 12875  0023C4  0E01               	movlw	1
 12876  0023C6  6EDF               	movwf	indf2,c
 12877                           
 12878                           ;tff.c: 611: *dir = fs->win;
 12879  0023C8  0E20               	movlw	32
 12880  0023CA  2596               	addwf	reserve_direntry@fs& (0+255),w,b
 12881  0023CC  6F88               	movwf	??_reserve_direntry& (0+255),b
 12882  0023CE  0E00               	movlw	0
 12883  0023D0  2197               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 12884  0023D2  6F89               	movwf	(??_reserve_direntry+1)& (0+255),b
 12885  0023D4  5187               	movf	reserve_direntry@dir& (0+255),w,b
 12886  0023D6  6ED9               	movwf	fsr2l,c
 12887  0023D8  6ADA               	clrf	fsr2h,c
 12888  0023DA  C088  FFDE         	movff	??_reserve_direntry,postinc2
 12889  0023DE  C089  FFDD         	movff	??_reserve_direntry+1,postdec2
 12890  0023E2  D75E               	goto	l11897
 12891  0023E4                     __end_of_reserve_direntry:
 12892                           	callstack 0
 12893                           
 12894 ;; *************** function _next_dir_entry *****************
 12895 ;; Defined at:
 12896 ;;		line 359 in file "bibliotecas/tff.c"
 12897 ;; Parameters:    Size  Location     Type
 12898 ;;  dj              1   75[COMRAM] PTR struct _DIR_E
 12899 ;;		 -> f_open@dj(14), 
 12900 ;; Auto vars:     Size  Location     Type
 12901 ;;  idx             2   28[BANK0 ] unsigned short 
 12902 ;;  clust           2   26[BANK0 ] unsigned short 
 12903 ;; Return value:  Size  Location     Type
 12904 ;;                  1    wreg      enum E105
 12905 ;; Registers used:
 12906 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12907 ;; Tracked objects:
 12908 ;;		On entry : 0/0
 12909 ;;		On exit  : 0/0
 12910 ;;		Unchanged: 0/0
 12911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12912 ;;      Params:         1       0       0       0       0       0       0       0       0
 12913 ;;      Locals:         0       4       0       0       0       0       0       0       0
 12914 ;;      Temps:          0       7       0       0       0       0       0       0       0
 12915 ;;      Totals:         1      11       0       0       0       0       0       0       0
 12916 ;;Total ram usage:       12 bytes
 12917 ;; Hardware stack levels used:    1
 12918 ;; Hardware stack levels required when called:    9
 12919 ;; This function calls:
 12920 ;;		_clust2sect
 12921 ;;		_get_cluster
 12922 ;; This function is called by:
 12923 ;;		_trace_path
 12924 ;;		_reserve_direntry
 12925 ;; This function uses a non-reentrant model
 12926 ;;
 12927                           
 12928                           	psect	text74
 12929  0030EC                     __ptext74:
 12930                           	callstack 0
 12931  0030EC                     _next_dir_entry:
 12932                           	callstack 15
 12933                           
 12934                           ;tff.c: 363: CLUST clust;;tff.c: 364: WORD idx;;tff.c: 367: idx = dj->index + 1;
 12935                           
 12936                           ;incstack = 0
 12937  0030EC  504C               	movf	next_dir_entry@dj^0,w,c
 12938  0030EE  6ED9               	movwf	fsr2l,c
 12939  0030F0  6ADA               	clrf	fsr2h,c
 12940  0030F2  0E02               	movlw	2
 12941  0030F4  26D9               	addwf	fsr2l,f,c
 12942  0030F6  CFDE F073          	movff	postinc2,??_next_dir_entry
 12943  0030FA  CFDD F074          	movff	postdec2,??_next_dir_entry+1
 12944  0030FE  0E01               	movlw	1
 12945  003100  0100               	movlb	0	; () banked
 12946  003102  2573               	addwf	??_next_dir_entry& (0+255),w,b
 12947  003104  6F7C               	movwf	next_dir_entry@idx& (0+255),b
 12948  003106  0E00               	movlw	0
 12949  003108  2174               	addwfc	(??_next_dir_entry+1)& (0+255),w,b
 12950  00310A  6F7D               	movwf	(next_dir_entry@idx+1)& (0+255),b
 12951                           
 12952                           ; BSR set to: 0
 12953                           ;tff.c: 368: if ((idx & 15) == 0) {
 12954  00310C  C07C  F073         	movff	next_dir_entry@idx,??_next_dir_entry
 12955  003110  0E0F               	movlw	15
 12956  003112  1773               	andwf	??_next_dir_entry& (0+255),f,b
 12957  003114  A4D8               	btfss	status,2,c
 12958  003116  D092               	goto	l11415
 12959                           
 12960                           ; BSR set to: 0
 12961                           ;tff.c: 369: dj->sect++;
 12962  003118  504C               	movf	next_dir_entry@dj^0,w,c
 12963  00311A  6ED9               	movwf	fsr2l,c
 12964  00311C  6ADA               	clrf	fsr2h,c
 12965  00311E  0E0A               	movlw	10
 12966  003120  26D9               	addwf	fsr2l,f,c
 12967  003122  2ADE               	incf	postinc2,f,c
 12968  003124  0E00               	movlw	0
 12969  003126  22DE               	addwfc	postinc2,f,c
 12970  003128  22DE               	addwfc	postinc2,f,c
 12971  00312A  22DE               	addwfc	postinc2,f,c
 12972                           
 12973                           ;tff.c: 370: if (dj->clust == 0) {
 12974  00312C  504C               	movf	next_dir_entry@dj^0,w,c
 12975  00312E  6ED9               	movwf	fsr2l,c
 12976  003130  6ADA               	clrf	fsr2h,c
 12977  003132  0E08               	movlw	8
 12978  003134  26D9               	addwf	fsr2l,f,c
 12979  003136  50DE               	movf	postinc2,w,c
 12980  003138  10DE               	iorwf	postinc2,w,c
 12981  00313A  A4D8               	btfss	status,2,c
 12982  00313C  D013               	goto	l11399
 12983                           
 12984                           ; BSR set to: 0
 12985                           ;tff.c: 371: if (idx >= dj->fs->n_rootdir) return FALSE;
 12986  00313E  504C               	movf	next_dir_entry@dj^0,w,c
 12987  003140  6ED9               	movwf	fsr2l,c
 12988  003142  6ADA               	clrf	fsr2h,c
 12989  003144  0E04               	movlw	4
 12990  003146  26D9               	addwf	fsr2l,f,c
 12991  003148  EE10 F002          	lfsr	1,2
 12992  00314C  50DE               	movf	postinc2,w,c
 12993  00314E  26E1               	addwf	fsr1l,f,c
 12994  003150  50DD               	movf	postdec2,w,c
 12995  003152  22E2               	addwfc	fsr1h,f,c
 12996  003154  50E6               	movf	postinc1,w,c
 12997  003156  5D7C               	subwf	next_dir_entry@idx& (0+255),w,b
 12998  003158  50E6               	movf	postinc1,w,c
 12999  00315A  597D               	subwfb	(next_dir_entry@idx+1)& (0+255),w,b
 13000  00315C  A0D8               	btfss	status,0,c
 13001  00315E  D06E               	goto	l11415
 13002  003160                     u12990:
 13003                           
 13004                           ; BSR set to: 0
 13005  003160  0E00               	movlw	0
 13006  003162  0012               	return	
 13007  003164                     l11399:
 13008                           
 13009                           ; BSR set to: 0
 13010                           ;tff.c: 373: if (((idx / 16) & (dj->fs->csize - 1)) == 0) {
 13011  003164  C07C  F073         	movff	next_dir_entry@idx,??_next_dir_entry
 13012  003168  C07D  F074         	movff	next_dir_entry@idx+1,??_next_dir_entry+1
 13013  00316C  0E04               	movlw	4
 13014  00316E  6F75               	movwf	(??_next_dir_entry+2)& (0+255),b
 13015  003170                     u13005:
 13016  003170  90D8               	bcf	status,0,c
 13017  003172  3374               	rrcf	(??_next_dir_entry+1)& (0+255),f,b
 13018  003174  3373               	rrcf	??_next_dir_entry& (0+255),f,b
 13019  003176  2F75               	decfsz	(??_next_dir_entry+2)& (0+255),f,b
 13020  003178  D7FB               	goto	u13005
 13021  00317A  0EFF               	movlw	255
 13022  00317C  6F76               	movwf	(??_next_dir_entry+3)& (0+255),b
 13023  00317E  0EFF               	movlw	255
 13024  003180  6F77               	movwf	(??_next_dir_entry+4)& (0+255),b
 13025  003182  504C               	movf	next_dir_entry@dj^0,w,c
 13026  003184  6ED9               	movwf	fsr2l,c
 13027  003186  6ADA               	clrf	fsr2h,c
 13028  003188  0E04               	movlw	4
 13029  00318A  26D9               	addwf	fsr2l,f,c
 13030  00318C  EE10 F01D          	lfsr	1,29
 13031  003190  50DE               	movf	postinc2,w,c
 13032  003192  26E1               	addwf	fsr1l,f,c
 13033  003194  50DD               	movf	postdec2,w,c
 13034  003196  22E2               	addwfc	fsr1h,f,c
 13035  003198  50E7               	movf	indf1,w,c
 13036  00319A  6F78               	movwf	(??_next_dir_entry+5)& (0+255),b
 13037  00319C  6B79               	clrf	(??_next_dir_entry+6)& (0+255),b
 13038  00319E  5176               	movf	(??_next_dir_entry+3)& (0+255),w,b
 13039  0031A0  2778               	addwf	(??_next_dir_entry+5)& (0+255),f,b
 13040  0031A2  5177               	movf	(??_next_dir_entry+4)& (0+255),w,b
 13041  0031A4  2379               	addwfc	(??_next_dir_entry+6)& (0+255),f,b
 13042  0031A6  5173               	movf	??_next_dir_entry& (0+255),w,b
 13043  0031A8  1778               	andwf	(??_next_dir_entry+5)& (0+255),f,b
 13044  0031AA  5174               	movf	(??_next_dir_entry+1)& (0+255),w,b
 13045  0031AC  1779               	andwf	(??_next_dir_entry+6)& (0+255),f,b
 13046  0031AE  5178               	movf	(??_next_dir_entry+5)& (0+255),w,b
 13047  0031B0  1179               	iorwf	(??_next_dir_entry+6)& (0+255),w,b
 13048  0031B2  A4D8               	btfss	status,2,c
 13049  0031B4  D043               	goto	l11415
 13050                           
 13051                           ; BSR set to: 0
 13052                           ;tff.c: 374: clust = get_cluster(dj->clust);
 13053  0031B6  504C               	movf	next_dir_entry@dj^0,w,c
 13054  0031B8  6ED9               	movwf	fsr2l,c
 13055  0031BA  6ADA               	clrf	fsr2h,c
 13056  0031BC  0E08               	movlw	8
 13057  0031BE  26D9               	addwf	fsr2l,f,c
 13058  0031C0  CFDE F04A          	movff	postinc2,get_cluster@clust
 13059  0031C4  CFDD F04B          	movff	postdec2,get_cluster@clust+1
 13060  0031C8  EC28  F013         	call	_get_cluster	;wreg free
 13061  0031CC  C04A  F07A         	movff	?_get_cluster,next_dir_entry@clust
 13062  0031D0  C04B  F07B         	movff	?_get_cluster+1,next_dir_entry@clust+1
 13063                           
 13064                           ;tff.c: 375: if (clust < 2 || clust >= dj->fs->max_clust)
 13065  0031D4  0100               	movlb	0	; () banked
 13066  0031D6  517B               	movf	(next_dir_entry@clust+1)& (0+255),w,b
 13067  0031D8  E104               	bnz	u13020
 13068  0031DA  0E02               	movlw	2
 13069  0031DC  5D7A               	subwf	next_dir_entry@clust& (0+255),w,b
 13070  0031DE  A0D8               	btfss	status,0,c
 13071  0031E0  D7BF               	goto	u12990
 13072  0031E2                     u13020:
 13073                           
 13074                           ; BSR set to: 0
 13075  0031E2  504C               	movf	next_dir_entry@dj^0,w,c
 13076  0031E4  6ED9               	movwf	fsr2l,c
 13077  0031E6  6ADA               	clrf	fsr2h,c
 13078  0031E8  0E04               	movlw	4
 13079  0031EA  26D9               	addwf	fsr2l,f,c
 13080  0031EC  EE10 F016          	lfsr	1,22
 13081  0031F0  50DE               	movf	postinc2,w,c
 13082  0031F2  26E1               	addwf	fsr1l,f,c
 13083  0031F4  50DD               	movf	postdec2,w,c
 13084  0031F6  22E2               	addwfc	fsr1h,f,c
 13085  0031F8  50E6               	movf	postinc1,w,c
 13086  0031FA  5D7A               	subwf	next_dir_entry@clust& (0+255),w,b
 13087  0031FC  50E6               	movf	postinc1,w,c
 13088  0031FE  597B               	subwfb	(next_dir_entry@clust+1)& (0+255),w,b
 13089  003200  B0D8               	btfsc	status,0,c
 13090  003202  D7AE               	goto	u12990
 13091                           
 13092                           ; BSR set to: 0
 13093                           ;tff.c: 377: dj->clust = clust;
 13094  003204  504C               	movf	next_dir_entry@dj^0,w,c
 13095  003206  6ED9               	movwf	fsr2l,c
 13096  003208  6ADA               	clrf	fsr2h,c
 13097  00320A  0E08               	movlw	8
 13098  00320C  26D9               	addwf	fsr2l,f,c
 13099  00320E  C07A  FFDE         	movff	next_dir_entry@clust,postinc2
 13100  003212  C07B  FFDD         	movff	next_dir_entry@clust+1,postdec2
 13101                           
 13102                           ; BSR set to: 0
 13103                           ;tff.c: 378: dj->sect = clust2sect(clust);
 13104  003216  C07A  F016         	movff	next_dir_entry@clust,clust2sect@clust
 13105  00321A  C07B  F017         	movff	next_dir_entry@clust+1,clust2sect@clust+1
 13106  00321E  EC32  F021         	call	_clust2sect	;wreg free
 13107  003222  504C               	movf	next_dir_entry@dj^0,w,c
 13108  003224  6ED9               	movwf	fsr2l,c
 13109  003226  6ADA               	clrf	fsr2h,c
 13110  003228  0E0A               	movlw	10
 13111  00322A  26D9               	addwf	fsr2l,f,c
 13112  00322C  C016  FFDE         	movff	?_clust2sect,postinc2
 13113  003230  C017  FFDE         	movff	?_clust2sect+1,postinc2
 13114  003234  C018  FFDE         	movff	?_clust2sect+2,postinc2
 13115  003238  C019  FFDE         	movff	?_clust2sect+3,postinc2
 13116  00323C                     l11415:
 13117                           
 13118                           ;tff.c: 379: };tff.c: 380: };tff.c: 381: };tff.c: 382: dj->index = idx;
 13119  00323C  504C               	movf	next_dir_entry@dj^0,w,c
 13120  00323E  6ED9               	movwf	fsr2l,c
 13121  003240  6ADA               	clrf	fsr2h,c
 13122  003242  0E02               	movlw	2
 13123  003244  26D9               	addwf	fsr2l,f,c
 13124  003246  C07C  FFDE         	movff	next_dir_entry@idx,postinc2
 13125  00324A  C07D  FFDD         	movff	next_dir_entry@idx+1,postdec2
 13126                           
 13127                           ;tff.c: 383: return TRUE;
 13128  00324E  0E01               	movlw	1
 13129  003250  0012               	return		;funcret
 13130  003252                     __end_of_next_dir_entry:
 13131                           	callstack 0
 13132                           
 13133 ;; *************** function _clust2sect *****************
 13134 ;; Defined at:
 13135 ;;		line 339 in file "bibliotecas/tff.c"
 13136 ;; Parameters:    Size  Location     Type
 13137 ;;  clust           2   21[COMRAM] unsigned short 
 13138 ;; Auto vars:     Size  Location     Type
 13139 ;;  fs              2   30[COMRAM] PTR struct _FATFS
 13140 ;;		 -> NULL(0), fs(544), 
 13141 ;; Return value:  Size  Location     Type
 13142 ;;                  4   21[COMRAM] unsigned long 
 13143 ;; Registers used:
 13144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13145 ;; Tracked objects:
 13146 ;;		On entry : 0/0
 13147 ;;		On exit  : 0/0
 13148 ;;		Unchanged: 0/0
 13149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13150 ;;      Params:         4       0       0       0       0       0       0       0       0
 13151 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13152 ;;      Temps:          5       0       0       0       0       0       0       0       0
 13153 ;;      Totals:        11       0       0       0       0       0       0       0       0
 13154 ;;Total ram usage:       11 bytes
 13155 ;; Hardware stack levels used:    1
 13156 ;; Hardware stack levels required when called:    3
 13157 ;; This function calls:
 13158 ;;		___lmul
 13159 ;; This function is called by:
 13160 ;;		_next_dir_entry
 13161 ;;		_trace_path
 13162 ;;		_reserve_direntry
 13163 ;;		_f_write
 13164 ;;		_f_read
 13165 ;; This function uses a non-reentrant model
 13166 ;;
 13167                           
 13168                           	psect	text75
 13169  004264                     __ptext75:
 13170                           	callstack 0
 13171  004264                     _clust2sect:
 13172                           	callstack 19
 13173                           
 13174                           ;tff.c: 343: FATFS *fs = FatFs;
 13175                           
 13176                           ;incstack = 0
 13177  004264  C04D  F01F         	movff	_FatFs,clust2sect@fs
 13178  004268  C04E  F020         	movff	_FatFs+1,clust2sect@fs+1
 13179                           
 13180                           ;tff.c: 346: clust -= 2;
 13181  00426C  0E02               	movlw	2
 13182  00426E  5E16               	subwf	clust2sect@clust^0,f,c
 13183  004270  0E00               	movlw	0
 13184  004272  5A17               	subwfb	(clust2sect@clust+1)^0,f,c
 13185                           
 13186                           ;tff.c: 347: if (clust >= (fs->max_clust - 2)) return 0;
 13187  004274  0EFE               	movlw	254
 13188  004276  6E1A               	movwf	??_clust2sect^0,c
 13189  004278  0EFF               	movlw	255
 13190  00427A  6E1B               	movwf	(??_clust2sect+1)^0,c
 13191  00427C  EE20 F016          	lfsr	2,22
 13192  004280  501F               	movf	clust2sect@fs^0,w,c
 13193  004282  26D9               	addwf	fsr2l,f,c
 13194  004284  5020               	movf	(clust2sect@fs+1)^0,w,c
 13195  004286  22DA               	addwfc	fsr2h,f,c
 13196  004288  CFDE F01C          	movff	postinc2,??_clust2sect+2
 13197  00428C  CFDD F01D          	movff	postdec2,??_clust2sect+3
 13198  004290  501A               	movf	??_clust2sect^0,w,c
 13199  004292  261C               	addwf	(??_clust2sect+2)^0,f,c
 13200  004294  501B               	movf	(??_clust2sect+1)^0,w,c
 13201  004296  221D               	addwfc	(??_clust2sect+3)^0,f,c
 13202  004298  501C               	movf	(??_clust2sect+2)^0,w,c
 13203  00429A  5C16               	subwf	clust2sect@clust^0,w,c
 13204  00429C  501D               	movf	(??_clust2sect+3)^0,w,c
 13205  00429E  5817               	subwfb	(clust2sect@clust+1)^0,w,c
 13206  0042A0  A0D8               	btfss	status,0,c
 13207  0042A2  D009               	goto	l10921
 13208  0042A4  0E00               	movlw	0
 13209  0042A6  6E16               	movwf	?_clust2sect^0,c
 13210  0042A8  0E00               	movlw	0
 13211  0042AA  6E17               	movwf	(?_clust2sect+1)^0,c
 13212  0042AC  0E00               	movlw	0
 13213  0042AE  6E18               	movwf	(?_clust2sect+2)^0,c
 13214  0042B0  0E00               	movlw	0
 13215  0042B2  6E19               	movwf	(?_clust2sect+3)^0,c
 13216  0042B4  0012               	return	
 13217  0042B6                     l10921:
 13218                           
 13219                           ;tff.c: 348: return (DWORD)clust * fs->csize + fs->database;
 13220  0042B6  EE20 F010          	lfsr	2,16
 13221  0042BA  501F               	movf	clust2sect@fs^0,w,c
 13222  0042BC  26D9               	addwf	fsr2l,f,c
 13223  0042BE  5020               	movf	(clust2sect@fs+1)^0,w,c
 13224  0042C0  22DA               	addwfc	fsr2h,f,c
 13225  0042C2  CFDE F01A          	movff	postinc2,??_clust2sect
 13226  0042C6  CFDE F01B          	movff	postinc2,??_clust2sect+1
 13227  0042CA  CFDE F01C          	movff	postinc2,??_clust2sect+2
 13228  0042CE  CFDE F01D          	movff	postinc2,??_clust2sect+3
 13229  0042D2  C016  F00A         	movff	clust2sect@clust,___lmul@multiplier
 13230  0042D6  C017  F00B         	movff	clust2sect@clust+1,___lmul@multiplier+1
 13231  0042DA  6A0C               	clrf	(___lmul@multiplier+2)^0,c
 13232  0042DC  6A0D               	clrf	(___lmul@multiplier+3)^0,c
 13233  0042DE  EE20 F01D          	lfsr	2,29
 13234  0042E2  501F               	movf	clust2sect@fs^0,w,c
 13235  0042E4  26D9               	addwf	fsr2l,f,c
 13236  0042E6  5020               	movf	(clust2sect@fs+1)^0,w,c
 13237  0042E8  22DA               	addwfc	fsr2h,f,c
 13238  0042EA  50DF               	movf	indf2,w,c
 13239  0042EC  6E1E               	movwf	(??_clust2sect+4)^0,c
 13240  0042EE  501E               	movf	(??_clust2sect+4)^0,w,c
 13241  0042F0  6E0E               	movwf	___lmul@multiplicand^0,c
 13242  0042F2  6A0F               	clrf	(___lmul@multiplicand+1)^0,c
 13243  0042F4  6A10               	clrf	(___lmul@multiplicand+2)^0,c
 13244  0042F6  6A11               	clrf	(___lmul@multiplicand+3)^0,c
 13245  0042F8  EC8E  F028         	call	___lmul	;wreg free
 13246  0042FC  501A               	movf	??_clust2sect^0,w,c
 13247  0042FE  240A               	addwf	?___lmul^0,w,c
 13248  004300  6E16               	movwf	?_clust2sect^0,c
 13249  004302  501B               	movf	(??_clust2sect+1)^0,w,c
 13250  004304  200B               	addwfc	(?___lmul+1)^0,w,c
 13251  004306  6E17               	movwf	(?_clust2sect+1)^0,c
 13252  004308  501C               	movf	(??_clust2sect+2)^0,w,c
 13253  00430A  200C               	addwfc	(?___lmul+2)^0,w,c
 13254  00430C  6E18               	movwf	(?_clust2sect+2)^0,c
 13255  00430E  501D               	movf	(??_clust2sect+3)^0,w,c
 13256  004310  200D               	addwfc	(?___lmul+3)^0,w,c
 13257  004312  6E19               	movwf	(?_clust2sect+3)^0,c
 13258  004314  0012               	return		;funcret
 13259  004316                     __end_of_clust2sect:
 13260                           	callstack 0
 13261                           
 13262 ;; *************** function _remove_chain *****************
 13263 ;; Defined at:
 13264 ;;		line 250 in file "bibliotecas/tff.c"
 13265 ;; Parameters:    Size  Location     Type
 13266 ;;  clust           2   24[BANK0 ] unsigned short 
 13267 ;; Auto vars:     Size  Location     Type
 13268 ;;  fs              2   30[BANK0 ] PTR struct _FATFS
 13269 ;;		 -> NULL(0), fs(544), 
 13270 ;;  nxt             2   28[BANK0 ] unsigned short 
 13271 ;; Return value:  Size  Location     Type
 13272 ;;                  1    wreg      enum E105
 13273 ;; Registers used:
 13274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13275 ;; Tracked objects:
 13276 ;;		On entry : 3F/0
 13277 ;;		On exit  : 0/0
 13278 ;;		Unchanged: 0/0
 13279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13280 ;;      Params:         0       2       0       0       0       0       0       0       0
 13281 ;;      Locals:         0       4       0       0       0       0       0       0       0
 13282 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13283 ;;      Totals:         0       8       0       0       0       0       0       0       0
 13284 ;;Total ram usage:        8 bytes
 13285 ;; Hardware stack levels used:    1
 13286 ;; Hardware stack levels required when called:    9
 13287 ;; This function calls:
 13288 ;;		_get_cluster
 13289 ;;		_put_cluster
 13290 ;; This function is called by:
 13291 ;;		_f_open
 13292 ;; This function uses a non-reentrant model
 13293 ;;
 13294                           
 13295                           	psect	text76
 13296  004512                     __ptext76:
 13297                           	callstack 0
 13298  004512                     _remove_chain:
 13299                           	callstack 16
 13300                           
 13301                           ; BSR set to: 0
 13302                           ;tff.c: 254: CLUST nxt;;tff.c: 255: FATFS *fs = FatFs;
 13303                           
 13304                           ;incstack = 0
 13305  004512  C04D  F07E         	movff	_FatFs,remove_chain@fs
 13306  004516  C04E  F07F         	movff	_FatFs+1,remove_chain@fs+1
 13307                           
 13308                           ;tff.c: 258: while (clust >= 2 && clust < fs->max_clust) {
 13309  00451A  D037               	goto	l11775
 13310  00451C                     l11755:
 13311                           
 13312                           ; BSR set to: 0
 13313                           ;tff.c: 259: nxt = get_cluster(clust);
 13314  00451C  C078  F04A         	movff	remove_chain@clust,get_cluster@clust
 13315  004520  C079  F04B         	movff	remove_chain@clust+1,get_cluster@clust+1
 13316  004524  EC28  F013         	call	_get_cluster	;wreg free
 13317  004528  C04A  F07C         	movff	?_get_cluster,remove_chain@nxt
 13318  00452C  C04B  F07D         	movff	?_get_cluster+1,remove_chain@nxt+1
 13319                           
 13320                           ;tff.c: 260: if (nxt == 1) return FALSE;
 13321  004530  0100               	movlb	0	; () banked
 13322  004532  057C               	decf	remove_chain@nxt& (0+255),w,b
 13323  004534  117D               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
 13324  004536  A4D8               	btfss	status,2,c
 13325  004538  D002               	goto	l11763
 13326  00453A                     u13540:
 13327  00453A  0E00               	movlw	0
 13328  00453C  0012               	return	
 13329  00453E                     l11763:
 13330                           
 13331                           ; BSR set to: 0
 13332                           ;tff.c: 261: if (!put_cluster(clust, 0)) return FALSE;
 13333  00453E  C078  F060         	movff	remove_chain@clust,put_cluster@clust
 13334  004542  C079  F061         	movff	remove_chain@clust+1,put_cluster@clust+1
 13335  004546  0E00               	movlw	0
 13336  004548  6F63               	movwf	(put_cluster@val+1)& (0+255),b
 13337  00454A  0E00               	movlw	0
 13338  00454C  6F62               	movwf	put_cluster@val& (0+255),b
 13339  00454E  ECF2  F011         	call	_put_cluster	;wreg free
 13340  004552  0900               	iorlw	0
 13341  004554  B4D8               	btfsc	status,2,c
 13342  004556  D7F1               	goto	u13540
 13343                           
 13344                           ;tff.c: 262: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 13345  004558  0100               	movlb	0	; () banked
 13346  00455A  EE20 F01A          	lfsr	2,26
 13347  00455E  517E               	movf	remove_chain@fs& (0+255),w,b
 13348  004560  26D9               	addwf	fsr2l,f,c
 13349  004562  517F               	movf	(remove_chain@fs+1)& (0+255),w,b
 13350  004564  22DA               	addwfc	fsr2h,f,c
 13351  004566  28DE               	incf	postinc2,w,c
 13352  004568  E103               	bnz	u13560
 13353  00456A  28DE               	incf	postinc2,w,c
 13354  00456C  B4D8               	btfsc	status,2,c
 13355  00456E  D009               	goto	l11773
 13356  004570                     u13560:
 13357                           
 13358                           ; BSR set to: 0
 13359                           ;tff.c: 263: fs->free_clust++;
 13360  004570  EE20 F01A          	lfsr	2,26
 13361  004574  517E               	movf	remove_chain@fs& (0+255),w,b
 13362  004576  26D9               	addwf	fsr2l,f,c
 13363  004578  517F               	movf	(remove_chain@fs+1)& (0+255),w,b
 13364  00457A  22DA               	addwfc	fsr2h,f,c
 13365  00457C  2ADE               	incf	postinc2,f,c
 13366  00457E  0E00               	movlw	0
 13367  004580  22DD               	addwfc	postdec2,f,c
 13368  004582                     l11773:
 13369                           
 13370                           ; BSR set to: 0
 13371                           ;tff.c: 267: };tff.c: 268: clust = nxt;
 13372  004582  C07C  F078         	movff	remove_chain@nxt,remove_chain@clust
 13373  004586  C07D  F079         	movff	remove_chain@nxt+1,remove_chain@clust+1
 13374  00458A                     l11775:
 13375                           
 13376                           ; BSR set to: 0
 13377  00458A  5179               	movf	(remove_chain@clust+1)& (0+255),w,b
 13378  00458C  E104               	bnz	u13570
 13379  00458E  0E02               	movlw	2
 13380  004590  5D78               	subwf	remove_chain@clust& (0+255),w,b
 13381  004592  A0D8               	btfss	status,0,c
 13382  004594  D00C               	goto	u13580
 13383  004596                     u13570:
 13384                           
 13385                           ; BSR set to: 0
 13386  004596  EE20 F016          	lfsr	2,22
 13387  00459A  517E               	movf	remove_chain@fs& (0+255),w,b
 13388  00459C  26D9               	addwf	fsr2l,f,c
 13389  00459E  517F               	movf	(remove_chain@fs+1)& (0+255),w,b
 13390  0045A0  22DA               	addwfc	fsr2h,f,c
 13391  0045A2  50DE               	movf	postinc2,w,c
 13392  0045A4  5D78               	subwf	remove_chain@clust& (0+255),w,b
 13393  0045A6  50DE               	movf	postinc2,w,c
 13394  0045A8  5979               	subwfb	(remove_chain@clust+1)& (0+255),w,b
 13395  0045AA  A0D8               	btfss	status,0,c
 13396  0045AC  D7B7               	goto	l11755
 13397  0045AE                     u13580:
 13398                           
 13399                           ; BSR set to: 0
 13400                           ;tff.c: 269: };tff.c: 270: return TRUE;
 13401  0045AE  0E01               	movlw	1
 13402  0045B0  0012               	return		;funcret
 13403  0045B2                     __end_of_remove_chain:
 13404                           	callstack 0
 13405                           
 13406 ;; *************** function _memcpy *****************
 13407 ;; Defined at:
 13408 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\memcpy.c"
 13409 ;; Parameters:    Size  Location     Type
 13410 ;;  d1              2    9[COMRAM] PTR void 
 13411 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 13412 ;;  s1              2   11[COMRAM] PTR const void 
 13413 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 13414 ;;		 -> fs(544), 
 13415 ;;  n               2   13[COMRAM] unsigned int 
 13416 ;; Auto vars:     Size  Location     Type
 13417 ;;  s               2   18[COMRAM] PTR const unsigned char 
 13418 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 13419 ;;		 -> fs(544), 
 13420 ;;  d               2   16[COMRAM] PTR unsigned char 
 13421 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 13422 ;;  tmp             1   15[COMRAM] unsigned char 
 13423 ;; Return value:  Size  Location     Type
 13424 ;;                  2    9[COMRAM] PTR void 
 13425 ;; Registers used:
 13426 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13427 ;; Tracked objects:
 13428 ;;		On entry : 0/0
 13429 ;;		On exit  : 0/0
 13430 ;;		Unchanged: 0/0
 13431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13432 ;;      Params:         6       0       0       0       0       0       0       0       0
 13433 ;;      Locals:         5       0       0       0       0       0       0       0       0
 13434 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13435 ;;      Totals:        11       0       0       0       0       0       0       0       0
 13436 ;;Total ram usage:       11 bytes
 13437 ;; Hardware stack levels used:    1
 13438 ;; Hardware stack levels required when called:    2
 13439 ;; This function calls:
 13440 ;;		Nothing
 13441 ;; This function is called by:
 13442 ;;		_f_open
 13443 ;;		_f_write
 13444 ;;		_f_read
 13445 ;; This function uses a non-reentrant model
 13446 ;;
 13447                           
 13448                           	psect	text77
 13449  00546A                     __ptext77:
 13450                           	callstack 0
 13451  00546A                     _memcpy:
 13452                           	callstack 20
 13453                           
 13454                           ;incstack = 0
 13455  00546A  C00C  F013         	movff	memcpy@s1,memcpy@s
 13456  00546E  C00D  F014         	movff	memcpy@s1+1,memcpy@s+1
 13457  005472  C00A  F011         	movff	memcpy@d1,memcpy@d
 13458  005476  C00B  F012         	movff	memcpy@d1+1,memcpy@d+1
 13459  00547A  D010               	goto	l10955
 13460  00547C                     l10947:
 13461  00547C  C013  FFD9         	movff	memcpy@s,fsr2l
 13462  005480  C014  FFDA         	movff	memcpy@s+1,fsr2h
 13463  005484  50DF               	movf	indf2,w,c
 13464  005486  6E10               	movwf	memcpy@tmp^0,c
 13465  005488  4A13               	infsnz	memcpy@s^0,f,c
 13466  00548A  2A14               	incf	(memcpy@s+1)^0,f,c
 13467  00548C  C011  FFD9         	movff	memcpy@d,fsr2l
 13468  005490  C012  FFDA         	movff	memcpy@d+1,fsr2h
 13469  005494  C010  FFDF         	movff	memcpy@tmp,indf2
 13470  005498  4A11               	infsnz	memcpy@d^0,f,c
 13471  00549A  2A12               	incf	(memcpy@d+1)^0,f,c
 13472  00549C                     l10955:
 13473  00549C  060E               	decf	memcpy@n^0,f,c
 13474  00549E  A0D8               	btfss	status,0,c
 13475  0054A0  060F               	decf	(memcpy@n+1)^0,f,c
 13476  0054A2  280E               	incf	memcpy@n^0,w,c
 13477  0054A4  E1EB               	bnz	l10947
 13478  0054A6  280F               	incf	(memcpy@n+1)^0,w,c
 13479  0054A8  B4D8               	btfsc	status,2,c
 13480  0054AA  0012               	return	
 13481  0054AC  D7E7               	goto	l10947
 13482  0054AE                     __end_of_memcpy:
 13483                           	callstack 0
 13484                           
 13485 ;; *************** function _auto_mount *****************
 13486 ;; Defined at:
 13487 ;;		line 652 in file "bibliotecas/tff.c"
 13488 ;; Parameters:    Size  Location     Type
 13489 ;;  path            1   60[COMRAM] PTR PTR const unsigned c
 13490 ;;		 -> f_opendir@path(2), f_open@path(2), 
 13491 ;;  chk_wp          1   61[COMRAM] unsigned char 
 13492 ;; Auto vars:     Size  Location     Type
 13493 ;;  fatsize         4   38[BANK0 ] unsigned long 
 13494 ;;  totalsect       4   30[BANK0 ] unsigned long 
 13495 ;;  bootsect        4   26[BANK0 ] unsigned long 
 13496 ;;  maxclust        4   22[BANK0 ] unsigned long 
 13497 ;;  fs              2   42[BANK0 ] PTR struct _FATFS
 13498 ;;		 -> NULL(0), fs(544), 
 13499 ;;  p               2   34[BANK0 ] PTR const unsigned char 
 13500 ;;		 -> STR_16(13), filename(20), 
 13501 ;;  stat            1   37[BANK0 ] unsigned char 
 13502 ;;  fmt             1   36[BANK0 ] unsigned char 
 13503 ;; Return value:  Size  Location     Type
 13504 ;;                  1    wreg      enum E155
 13505 ;; Registers used:
 13506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13507 ;; Tracked objects:
 13508 ;;		On entry : 3F/0
 13509 ;;		On exit  : 3E/0
 13510 ;;		Unchanged: 0/0
 13511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13512 ;;      Params:         2       0       0       0       0       0       0       0       0
 13513 ;;      Locals:         0      22       0       0       0       0       0       0       0
 13514 ;;      Temps:          0      22       0       0       0       0       0       0       0
 13515 ;;      Totals:         2      44       0       0       0       0       0       0       0
 13516 ;;Total ram usage:       46 bytes
 13517 ;; Hardware stack levels used:    1
 13518 ;; Hardware stack levels required when called:    8
 13519 ;; This function calls:
 13520 ;;		___lldiv
 13521 ;;		___lmul
 13522 ;;		_check_fs
 13523 ;;		_disk_initialize
 13524 ;;		_disk_status
 13525 ;;		_memset
 13526 ;; This function is called by:
 13527 ;;		_f_open
 13528 ;; This function uses a non-reentrant model
 13529 ;;
 13530                           
 13531                           	psect	text78
 13532  0005A8                     __ptext78:
 13533                           	callstack 0
 13534  0005A8                     _auto_mount:
 13535                           	callstack 17
 13536                           
 13537                           ; BSR set to: 0
 13538                           ;tff.c: 657: BYTE fmt;;tff.c: 658: DSTATUS stat;;tff.c: 659: DWORD bootsect, fatsize, to
      +                          talsect, maxclust;;tff.c: 660: const char *p = *path;
 13539                           
 13540                           ;incstack = 0
 13541  0005A8  503D               	movf	auto_mount@path^0,w,c
 13542  0005AA  6ED9               	movwf	fsr2l,c
 13543  0005AC  6ADA               	clrf	fsr2h,c
 13544  0005AE  CFDE F082          	movff	postinc2,auto_mount@p
 13545  0005B2  CFDD F083          	movff	postdec2,auto_mount@p+1
 13546                           
 13547                           ;tff.c: 661: FATFS *fs;;tff.c: 664: while (*p == ' ') p++;
 13548  0005B6  D003               	goto	l11945
 13549  0005B8                     l11943:
 13550  0005B8  0100               	movlb	0	; () banked
 13551  0005BA  4B82               	infsnz	auto_mount@p& (0+255),f,b
 13552  0005BC  2B83               	incf	(auto_mount@p+1)& (0+255),f,b
 13553  0005BE                     l11945:
 13554                           
 13555                           ; BSR set to: 0
 13556  0005BE  C082  FFF6         	movff	auto_mount@p,tblptrl
 13557  0005C2  C083  FFF7         	movff	auto_mount@p+1,tblptrh
 13558  0005C6  6AF8               	clrf	tblptru,c
 13559  0005C8  0E07               	movlw	(high __ramtop+-1)
 13560  0005CA  64F7               	cpfsgt	tblptrh,c
 13561  0005CC  D003               	bra	u13857
 13562  0005CE  0008               	tblrd		*
 13563  0005D0  50F5               	movf	tablat,w,c
 13564  0005D2  D005               	bra	u13850
 13565  0005D4                     u13857:
 13566  0005D4  CFF6 FFE1          	movff	tblptrl,fsr1l
 13567  0005D8  CFF7 FFE2          	movff	tblptrh,fsr1h
 13568  0005DC  50E7               	movf	indf1,w,c
 13569  0005DE                     u13850:
 13570  0005DE  0A20               	xorlw	32
 13571  0005E0  B4D8               	btfsc	status,2,c
 13572  0005E2  D7EA               	goto	l11943
 13573                           
 13574                           ;tff.c: 665: if (*p == '/') p++;
 13575  0005E4  C082  FFF6         	movff	auto_mount@p,tblptrl
 13576  0005E8  C083  FFF7         	movff	auto_mount@p+1,tblptrh
 13577  0005EC  6AF8               	clrf	tblptru,c
 13578  0005EE  0E07               	movlw	(high __ramtop+-1)
 13579  0005F0  64F7               	cpfsgt	tblptrh,c
 13580  0005F2  D003               	bra	u13877
 13581  0005F4  0008               	tblrd		*
 13582  0005F6  50F5               	movf	tablat,w,c
 13583  0005F8  D005               	bra	u13870
 13584  0005FA                     u13877:
 13585  0005FA  CFF6 FFE1          	movff	tblptrl,fsr1l
 13586  0005FE  CFF7 FFE2          	movff	tblptrh,fsr1h
 13587  000602  50E7               	movf	indf1,w,c
 13588  000604                     u13870:
 13589  000604  0A2F               	xorlw	47
 13590  000606  A4D8               	btfss	status,2,c
 13591  000608  D003               	goto	l11951
 13592  00060A  0100               	movlb	0	; () banked
 13593  00060C  4B82               	infsnz	auto_mount@p& (0+255),f,b
 13594  00060E  2B83               	incf	(auto_mount@p+1)& (0+255),f,b
 13595  000610                     l11951:
 13596                           
 13597                           ;tff.c: 666: *path = p;
 13598  000610  503D               	movf	auto_mount@path^0,w,c
 13599  000612  6ED9               	movwf	fsr2l,c
 13600  000614  6ADA               	clrf	fsr2h,c
 13601  000616  C082  FFDE         	movff	auto_mount@p,postinc2
 13602  00061A  C083  FFDD         	movff	auto_mount@p+1,postdec2
 13603                           
 13604                           ;tff.c: 669: fs = FatFs;
 13605  00061E  C04D  F08A         	movff	_FatFs,auto_mount@fs
 13606  000622  C04E  F08B         	movff	_FatFs+1,auto_mount@fs+1
 13607                           
 13608                           ;tff.c: 670: if (!fs) return FR_NOT_ENABLED;
 13609  000626  0100               	movlb	0	; () banked
 13610  000628  518A               	movf	auto_mount@fs& (0+255),w,b
 13611  00062A  118B               	iorwf	(auto_mount@fs+1)& (0+255),w,b
 13612  00062C  A4D8               	btfss	status,2,c
 13613  00062E  D002               	goto	l11961
 13614                           
 13615                           ; BSR set to: 0
 13616  000630  0E0A               	movlw	10
 13617  000632  0012               	return	
 13618  000634                     l11961:
 13619                           
 13620                           ; BSR set to: 0
 13621                           ;tff.c: 672: if (fs->fs_type) {
 13622  000634  EE20 F01C          	lfsr	2,28
 13623  000638  518A               	movf	auto_mount@fs& (0+255),w,b
 13624  00063A  26D9               	addwf	fsr2l,f,c
 13625  00063C  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13626  00063E  22DA               	addwfc	fsr2h,f,c
 13627  000640  50DF               	movf	indf2,w,c
 13628  000642  B4D8               	btfsc	status,2,c
 13629  000644  D00F               	goto	l11979
 13630                           
 13631                           ; BSR set to: 0
 13632                           ;tff.c: 673: stat = disk_status(0);
 13633  000646  0E00               	movlw	0
 13634  000648  ECD7  F02B         	call	_disk_status
 13635  00064C  0100               	movlb	0	; () banked
 13636  00064E  6F85               	movwf	auto_mount@stat& (0+255),b
 13637                           
 13638                           ; BSR set to: 0
 13639                           ;tff.c: 674: if (!(stat & 0x01)) {
 13640  000650  B185               	btfsc	auto_mount@stat& (0+255),0,b
 13641  000652  D008               	goto	l11979
 13642                           
 13643                           ; BSR set to: 0
 13644                           ;tff.c: 676: if (chk_wp && (stat & 0x04))
 13645  000654  503E               	movf	auto_mount@chk_wp^0,w,c
 13646  000656  A4D8               	btfss	status,2,c
 13647                           
 13648                           ; BSR set to: 0
 13649  000658  A585               	btfss	auto_mount@stat& (0+255),2,b
 13650  00065A  D002               	goto	l11975
 13651  00065C                     u13930:
 13652                           
 13653                           ; BSR set to: 0
 13654                           ;tff.c: 677: return FR_WRITE_PROTECTED;
 13655  00065C  0E09               	movlw	9
 13656  00065E  0012               	return	
 13657  000660                     l11975:
 13658                           
 13659                           ; BSR set to: 0
 13660                           ;tff.c: 679: return FR_OK;
 13661  000660  0E00               	movlw	0
 13662  000662  0012               	return	
 13663  000664                     l11979:
 13664                           
 13665                           ; BSR set to: 0
 13666                           ;tff.c: 680: };tff.c: 681: };tff.c: 685: memset(fs, 0, sizeof(FATFS));
 13667  000664  C08A  F00A         	movff	auto_mount@fs,memset@p1
 13668  000668  C08B  F00B         	movff	auto_mount@fs+1,memset@p1+1
 13669  00066C  0E00               	movlw	0
 13670  00066E  6E0D               	movwf	(memset@c+1)^0,c
 13671  000670  0E00               	movlw	0
 13672  000672  6E0C               	movwf	memset@c^0,c
 13673  000674  0E02               	movlw	2
 13674  000676  6E0F               	movwf	(memset@n+1)^0,c
 13675  000678  0E20               	movlw	32
 13676  00067A  6E0E               	movwf	memset@n^0,c
 13677  00067C  EC34  F02C         	call	_memset	;wreg free
 13678                           
 13679                           ;tff.c: 686: stat = disk_initialize(0);
 13680  000680  0E00               	movlw	0
 13681  000682  ECB3  F02C         	call	_disk_initialize
 13682  000686  0100               	movlb	0	; () banked
 13683  000688  6F85               	movwf	auto_mount@stat& (0+255),b
 13684                           
 13685                           ; BSR set to: 0
 13686                           ;tff.c: 687: if (stat & 0x01)
 13687  00068A  A185               	btfss	auto_mount@stat& (0+255),0,b
 13688  00068C  D002               	goto	l11989
 13689                           
 13690                           ; BSR set to: 0
 13691                           ;tff.c: 688: return FR_NOT_READY;
 13692  00068E  0E01               	movlw	1
 13693  000690  0012               	return	
 13694  000692                     l11989:
 13695                           
 13696                           ; BSR set to: 0
 13697                           ;tff.c: 690: if (chk_wp && (stat & 0x04))
 13698  000692  503E               	movf	auto_mount@chk_wp^0,w,c
 13699  000694  B4D8               	btfsc	status,2,c
 13700  000696  D002               	goto	l11997
 13701                           
 13702                           ; BSR set to: 0
 13703  000698  B585               	btfsc	auto_mount@stat& (0+255),2,b
 13704  00069A  D7E0               	goto	u13930
 13705  00069C                     l11997:
 13706                           
 13707                           ; BSR set to: 0
 13708                           ;tff.c: 695: fmt = check_fs(bootsect = 0);
 13709  00069C  0E00               	movlw	0
 13710  00069E  6F7A               	movwf	auto_mount@bootsect& (0+255),b
 13711  0006A0  0E00               	movlw	0
 13712  0006A2  6F7B               	movwf	(auto_mount@bootsect+1)& (0+255),b
 13713  0006A4  0E00               	movlw	0
 13714  0006A6  6F7C               	movwf	(auto_mount@bootsect+2)& (0+255),b
 13715  0006A8  0E00               	movlw	0
 13716  0006AA  6F7D               	movwf	(auto_mount@bootsect+3)& (0+255),b
 13717  0006AC  C07A  F035         	movff	auto_mount@bootsect,check_fs@sect
 13718  0006B0  C07B  F036         	movff	auto_mount@bootsect+1,check_fs@sect+1
 13719  0006B4  C07C  F037         	movff	auto_mount@bootsect+2,check_fs@sect+2
 13720  0006B8  C07D  F038         	movff	auto_mount@bootsect+3,check_fs@sect+3
 13721  0006BC  ECD8  F024         	call	_check_fs	;wreg free
 13722  0006C0  0100               	movlb	0	; () banked
 13723  0006C2  6F84               	movwf	auto_mount@fmt& (0+255),b
 13724                           
 13725                           ; BSR set to: 0
 13726                           ;tff.c: 697: if (fmt == 1) {
 13727  0006C4  0584               	decf	auto_mount@fmt& (0+255),w,b
 13728  0006C6  A4D8               	btfss	status,2,c
 13729  0006C8  D023               	goto	l12007
 13730                           
 13731                           ; BSR set to: 0
 13732                           ;tff.c: 699: if (fs->win[446+4]) {
 13733  0006CA  EE21 F0E2          	lfsr	2,482
 13734  0006CE  518A               	movf	auto_mount@fs& (0+255),w,b
 13735  0006D0  26D9               	addwf	fsr2l,f,c
 13736  0006D2  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13737  0006D4  22DA               	addwfc	fsr2h,f,c
 13738  0006D6  50DF               	movf	indf2,w,c
 13739  0006D8  B4D8               	btfsc	status,2,c
 13740  0006DA  D01A               	goto	l12007
 13741                           
 13742                           ; BSR set to: 0
 13743                           ;tff.c: 700: bootsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[446+8]));
 13744  0006DC  EE21 F0E6          	lfsr	2,486
 13745  0006E0  518A               	movf	auto_mount@fs& (0+255),w,b
 13746  0006E2  26D9               	addwf	fsr2l,f,c
 13747  0006E4  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13748  0006E6  22DA               	addwfc	fsr2h,f,c
 13749  0006E8  CFDE F07A          	movff	postinc2,auto_mount@bootsect
 13750  0006EC  CFDE F07B          	movff	postinc2,auto_mount@bootsect+1
 13751  0006F0  CFDE F07C          	movff	postinc2,auto_mount@bootsect+2
 13752  0006F4  CFDE F07D          	movff	postinc2,auto_mount@bootsect+3
 13753                           
 13754                           ; BSR set to: 0
 13755                           ;tff.c: 701: fmt = check_fs(bootsect);
 13756  0006F8  C07A  F035         	movff	auto_mount@bootsect,check_fs@sect
 13757  0006FC  C07B  F036         	movff	auto_mount@bootsect+1,check_fs@sect+1
 13758  000700  C07C  F037         	movff	auto_mount@bootsect+2,check_fs@sect+2
 13759  000704  C07D  F038         	movff	auto_mount@bootsect+3,check_fs@sect+3
 13760  000708  ECD8  F024         	call	_check_fs	;wreg free
 13761  00070C  0100               	movlb	0	; () banked
 13762  00070E  6F84               	movwf	auto_mount@fmt& (0+255),b
 13763  000710                     l12007:
 13764                           
 13765                           ; BSR set to: 0
 13766                           ;tff.c: 702: };tff.c: 703: };tff.c: 704: if (fmt || (WORD)(*(WORD*)(BYTE*)(&fs->win[11])
      +                          ) != 512U)
 13767  000710  5184               	movf	auto_mount@fmt& (0+255),w,b
 13768  000712  A4D8               	btfss	status,2,c
 13769  000714  D00C               	goto	u14000
 13770                           
 13771                           ; BSR set to: 0
 13772  000716  EE20 F02B          	lfsr	2,43
 13773  00071A  518A               	movf	auto_mount@fs& (0+255),w,b
 13774  00071C  26D9               	addwf	fsr2l,f,c
 13775  00071E  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13776  000720  22DA               	addwfc	fsr2h,f,c
 13777  000722  50DE               	movf	postinc2,w,c
 13778  000724  E104               	bnz	u14000
 13779  000726  0E02               	movlw	2
 13780  000728  18DE               	xorwf	postinc2,w,c
 13781  00072A  B4D8               	btfsc	status,2,c
 13782  00072C  D002               	goto	l12015
 13783  00072E                     u14000:
 13784                           
 13785                           ; BSR set to: 0
 13786                           ;tff.c: 705: return FR_NO_FILESYSTEM;
 13787  00072E  0E0B               	movlw	11
 13788  000730  0012               	return	
 13789  000732                     l12015:
 13790                           
 13791                           ; BSR set to: 0
 13792                           ;tff.c: 708: fatsize = (WORD)(*(WORD*)(BYTE*)(&fs->win[22]));
 13793  000732  EE20 F036          	lfsr	2,54
 13794  000736  518A               	movf	auto_mount@fs& (0+255),w,b
 13795  000738  26D9               	addwf	fsr2l,f,c
 13796  00073A  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13797  00073C  22DA               	addwfc	fsr2h,f,c
 13798  00073E  CFDE F060          	movff	postinc2,??_auto_mount
 13799  000742  CFDD F061          	movff	postdec2,??_auto_mount+1
 13800  000746  C060  F086         	movff	??_auto_mount,auto_mount@fatsize
 13801  00074A  C061  F087         	movff	??_auto_mount+1,auto_mount@fatsize+1
 13802  00074E  6B88               	clrf	(auto_mount@fatsize+2)& (0+255),b
 13803  000750  6B89               	clrf	(auto_mount@fatsize+3)& (0+255),b
 13804                           
 13805                           ; BSR set to: 0
 13806                           ;tff.c: 709: if (!fatsize) fatsize = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[36]));
 13807  000752  5186               	movf	auto_mount@fatsize& (0+255),w,b
 13808  000754  1187               	iorwf	(auto_mount@fatsize+1)& (0+255),w,b
 13809  000756  1188               	iorwf	(auto_mount@fatsize+2)& (0+255),w,b
 13810  000758  1189               	iorwf	(auto_mount@fatsize+3)& (0+255),w,b
 13811  00075A  A4D8               	btfss	status,2,c
 13812  00075C  D00E               	goto	l1079
 13813                           
 13814                           ; BSR set to: 0
 13815  00075E  EE20 F044          	lfsr	2,68
 13816  000762  518A               	movf	auto_mount@fs& (0+255),w,b
 13817  000764  26D9               	addwf	fsr2l,f,c
 13818  000766  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13819  000768  22DA               	addwfc	fsr2h,f,c
 13820  00076A  CFDE F086          	movff	postinc2,auto_mount@fatsize
 13821  00076E  CFDE F087          	movff	postinc2,auto_mount@fatsize+1
 13822  000772  CFDE F088          	movff	postinc2,auto_mount@fatsize+2
 13823  000776  CFDE F089          	movff	postinc2,auto_mount@fatsize+3
 13824  00077A                     l1079:
 13825                           
 13826                           ; BSR set to: 0
 13827                           ;tff.c: 710: fs->sects_fat = (CLUST)fatsize;
 13828  00077A  EE20 F014          	lfsr	2,20
 13829  00077E  518A               	movf	auto_mount@fs& (0+255),w,b
 13830  000780  26D9               	addwf	fsr2l,f,c
 13831  000782  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13832  000784  22DA               	addwfc	fsr2h,f,c
 13833  000786  C086  FFDE         	movff	auto_mount@fatsize,postinc2
 13834  00078A  C087  FFDD         	movff	auto_mount@fatsize+1,postdec2
 13835                           
 13836                           ; BSR set to: 0
 13837                           ;tff.c: 711: fs->n_fats = fs->win[16];
 13838  00078E  EE20 F030          	lfsr	2,48
 13839  000792  518A               	movf	auto_mount@fs& (0+255),w,b
 13840  000794  26D9               	addwf	fsr2l,f,c
 13841  000796  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13842  000798  22DA               	addwfc	fsr2h,f,c
 13843  00079A  EE10 F01E          	lfsr	1,30
 13844  00079E  518A               	movf	auto_mount@fs& (0+255),w,b
 13845  0007A0  26E1               	addwf	fsr1l,f,c
 13846  0007A2  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13847  0007A4  22E2               	addwfc	fsr1h,f,c
 13848  0007A6  CFDF FFE7          	movff	indf2,indf1
 13849                           
 13850                           ; BSR set to: 0
 13851                           ;tff.c: 712: fatsize *= fs->n_fats;
 13852  0007AA  C086  F00A         	movff	auto_mount@fatsize,___lmul@multiplier
 13853  0007AE  C087  F00B         	movff	auto_mount@fatsize+1,___lmul@multiplier+1
 13854  0007B2  C088  F00C         	movff	auto_mount@fatsize+2,___lmul@multiplier+2
 13855  0007B6  C089  F00D         	movff	auto_mount@fatsize+3,___lmul@multiplier+3
 13856  0007BA  EE20 F01E          	lfsr	2,30
 13857  0007BE  518A               	movf	auto_mount@fs& (0+255),w,b
 13858  0007C0  26D9               	addwf	fsr2l,f,c
 13859  0007C2  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13860  0007C4  22DA               	addwfc	fsr2h,f,c
 13861  0007C6  50DF               	movf	indf2,w,c
 13862  0007C8  6F60               	movwf	??_auto_mount& (0+255),b
 13863  0007CA  5160               	movf	??_auto_mount& (0+255),w,b
 13864  0007CC  6E0E               	movwf	___lmul@multiplicand^0,c
 13865  0007CE  6A0F               	clrf	(___lmul@multiplicand+1)^0,c
 13866  0007D0  6A10               	clrf	(___lmul@multiplicand+2)^0,c
 13867  0007D2  6A11               	clrf	(___lmul@multiplicand+3)^0,c
 13868  0007D4  EC8E  F028         	call	___lmul	;wreg free
 13869  0007D8  C00A  F086         	movff	?___lmul,auto_mount@fatsize
 13870  0007DC  C00B  F087         	movff	?___lmul+1,auto_mount@fatsize+1
 13871  0007E0  C00C  F088         	movff	?___lmul+2,auto_mount@fatsize+2
 13872  0007E4  C00D  F089         	movff	?___lmul+3,auto_mount@fatsize+3
 13873                           
 13874                           ;tff.c: 713: fs->fatbase = bootsect + (WORD)(*(WORD*)(BYTE*)(&fs->win[14]));
 13875  0007E8  0100               	movlb	0	; () banked
 13876  0007EA  EE20 F02E          	lfsr	2,46
 13877  0007EE  518A               	movf	auto_mount@fs& (0+255),w,b
 13878  0007F0  26D9               	addwf	fsr2l,f,c
 13879  0007F2  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13880  0007F4  22DA               	addwfc	fsr2h,f,c
 13881  0007F6  CFDE F060          	movff	postinc2,??_auto_mount
 13882  0007FA  CFDD F061          	movff	postdec2,??_auto_mount+1
 13883  0007FE  5160               	movf	??_auto_mount& (0+255),w,b
 13884  000800  257A               	addwf	auto_mount@bootsect& (0+255),w,b
 13885  000802  6F62               	movwf	(??_auto_mount+2)& (0+255),b
 13886  000804  5161               	movf	(??_auto_mount+1)& (0+255),w,b
 13887  000806  217B               	addwfc	(auto_mount@bootsect+1)& (0+255),w,b
 13888  000808  6F63               	movwf	(??_auto_mount+3)& (0+255),b
 13889  00080A  0E00               	movlw	0
 13890  00080C  217C               	addwfc	(auto_mount@bootsect+2)& (0+255),w,b
 13891  00080E  6F64               	movwf	(??_auto_mount+4)& (0+255),b
 13892  000810  0E00               	movlw	0
 13893  000812  217D               	addwfc	(auto_mount@bootsect+3)& (0+255),w,b
 13894  000814  6F65               	movwf	(??_auto_mount+5)& (0+255),b
 13895  000816  EE20 F008          	lfsr	2,8
 13896  00081A  518A               	movf	auto_mount@fs& (0+255),w,b
 13897  00081C  26D9               	addwf	fsr2l,f,c
 13898  00081E  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13899  000820  22DA               	addwfc	fsr2h,f,c
 13900  000822  C062  FFDE         	movff	??_auto_mount+2,postinc2
 13901  000826  C063  FFDE         	movff	??_auto_mount+3,postinc2
 13902  00082A  C064  FFDE         	movff	??_auto_mount+4,postinc2
 13903  00082E  C065  FFDE         	movff	??_auto_mount+5,postinc2
 13904                           
 13905                           ; BSR set to: 0
 13906                           ;tff.c: 714: fs->csize = fs->win[13];
 13907  000832  EE20 F02D          	lfsr	2,45
 13908  000836  518A               	movf	auto_mount@fs& (0+255),w,b
 13909  000838  26D9               	addwf	fsr2l,f,c
 13910  00083A  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13911  00083C  22DA               	addwfc	fsr2h,f,c
 13912  00083E  EE10 F01D          	lfsr	1,29
 13913  000842  518A               	movf	auto_mount@fs& (0+255),w,b
 13914  000844  26E1               	addwf	fsr1l,f,c
 13915  000846  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13916  000848  22E2               	addwfc	fsr1h,f,c
 13917  00084A  CFDF FFE7          	movff	indf2,indf1
 13918                           
 13919                           ; BSR set to: 0
 13920                           ;tff.c: 715: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(&fs->win[17]));
 13921  00084E  EE20 F031          	lfsr	2,49
 13922  000852  518A               	movf	auto_mount@fs& (0+255),w,b
 13923  000854  26D9               	addwf	fsr2l,f,c
 13924  000856  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13925  000858  22DA               	addwfc	fsr2h,f,c
 13926  00085A  EE10 F002          	lfsr	1,2
 13927  00085E  518A               	movf	auto_mount@fs& (0+255),w,b
 13928  000860  26E1               	addwf	fsr1l,f,c
 13929  000862  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13930  000864  22E2               	addwfc	fsr1h,f,c
 13931  000866  CFDE FFE6          	movff	postinc2,postinc1
 13932  00086A  CFDD FFE5          	movff	postdec2,postdec1
 13933                           
 13934                           ; BSR set to: 0
 13935                           ;tff.c: 716: totalsect = (WORD)(*(WORD*)(BYTE*)(&fs->win[19]));
 13936  00086E  EE20 F033          	lfsr	2,51
 13937  000872  518A               	movf	auto_mount@fs& (0+255),w,b
 13938  000874  26D9               	addwf	fsr2l,f,c
 13939  000876  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13940  000878  22DA               	addwfc	fsr2h,f,c
 13941  00087A  CFDE F060          	movff	postinc2,??_auto_mount
 13942  00087E  CFDD F061          	movff	postdec2,??_auto_mount+1
 13943  000882  C060  F07E         	movff	??_auto_mount,auto_mount@totalsect
 13944  000886  C061  F07F         	movff	??_auto_mount+1,auto_mount@totalsect+1
 13945  00088A  6B80               	clrf	(auto_mount@totalsect+2)& (0+255),b
 13946  00088C  6B81               	clrf	(auto_mount@totalsect+3)& (0+255),b
 13947                           
 13948                           ; BSR set to: 0
 13949                           ;tff.c: 717: if (!totalsect) totalsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[32]));
 13950  00088E  517E               	movf	auto_mount@totalsect& (0+255),w,b
 13951  000890  117F               	iorwf	(auto_mount@totalsect+1)& (0+255),w,b
 13952  000892  1180               	iorwf	(auto_mount@totalsect+2)& (0+255),w,b
 13953  000894  1181               	iorwf	(auto_mount@totalsect+3)& (0+255),w,b
 13954  000896  A4D8               	btfss	status,2,c
 13955  000898  D00E               	goto	l12037
 13956                           
 13957                           ; BSR set to: 0
 13958  00089A  EE20 F040          	lfsr	2,64
 13959  00089E  518A               	movf	auto_mount@fs& (0+255),w,b
 13960  0008A0  26D9               	addwf	fsr2l,f,c
 13961  0008A2  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13962  0008A4  22DA               	addwfc	fsr2h,f,c
 13963  0008A6  CFDE F07E          	movff	postinc2,auto_mount@totalsect
 13964  0008AA  CFDE F07F          	movff	postinc2,auto_mount@totalsect+1
 13965  0008AE  CFDE F080          	movff	postinc2,auto_mount@totalsect+2
 13966  0008B2  CFDE F081          	movff	postinc2,auto_mount@totalsect+3
 13967  0008B6                     l12037:
 13968                           
 13969                           ; BSR set to: 0
 13970                           ;tff.c: 718: fs->max_clust = maxclust = (totalsect;tff.c: 719: - (WORD)(*(WORD*)(BYTE*)(
      +                          &fs->win[14])) - fatsize - fs->n_rootdir / 16;tff.c: 720: ) / fs->csize + 2;
 13971  0008B6  EE20 F002          	lfsr	2,2
 13972  0008BA  518A               	movf	auto_mount@fs& (0+255),w,b
 13973  0008BC  26D9               	addwf	fsr2l,f,c
 13974  0008BE  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13975  0008C0  22DA               	addwfc	fsr2h,f,c
 13976  0008C2  CFDE F060          	movff	postinc2,??_auto_mount
 13977  0008C6  CFDD F061          	movff	postdec2,??_auto_mount+1
 13978  0008CA  0E04               	movlw	4
 13979  0008CC  6F62               	movwf	(??_auto_mount+2)& (0+255),b
 13980  0008CE                     u14035:
 13981  0008CE  90D8               	bcf	status,0,c
 13982  0008D0  3361               	rrcf	(??_auto_mount+1)& (0+255),f,b
 13983  0008D2  3360               	rrcf	??_auto_mount& (0+255),f,b
 13984  0008D4  2F62               	decfsz	(??_auto_mount+2)& (0+255),f,b
 13985  0008D6  D7FB               	goto	u14035
 13986  0008D8  5160               	movf	??_auto_mount& (0+255),w,b
 13987  0008DA  6F63               	movwf	(??_auto_mount+3)& (0+255),b
 13988  0008DC  5161               	movf	(??_auto_mount+1)& (0+255),w,b
 13989  0008DE  6F64               	movwf	(??_auto_mount+4)& (0+255),b
 13990  0008E0  6B65               	clrf	(??_auto_mount+5)& (0+255),b
 13991  0008E2  6B66               	clrf	(??_auto_mount+6)& (0+255),b
 13992  0008E4  EE20 F02E          	lfsr	2,46
 13993  0008E8  518A               	movf	auto_mount@fs& (0+255),w,b
 13994  0008EA  26D9               	addwf	fsr2l,f,c
 13995  0008EC  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 13996  0008EE  22DA               	addwfc	fsr2h,f,c
 13997  0008F0  CFDE F067          	movff	postinc2,??_auto_mount+7
 13998  0008F4  CFDD F068          	movff	postdec2,??_auto_mount+8
 13999  0008F8  5167               	movf	(??_auto_mount+7)& (0+255),w,b
 14000  0008FA  6F69               	movwf	(??_auto_mount+9)& (0+255),b
 14001  0008FC  5168               	movf	(??_auto_mount+8)& (0+255),w,b
 14002  0008FE  6F6A               	movwf	(??_auto_mount+10)& (0+255),b
 14003  000900  6B6B               	clrf	(??_auto_mount+11)& (0+255),b
 14004  000902  6B6C               	clrf	(??_auto_mount+12)& (0+255),b
 14005  000904  1F69               	comf	(??_auto_mount+9)& (0+255),f,b
 14006  000906  1F6A               	comf	(??_auto_mount+10)& (0+255),f,b
 14007  000908  1F6B               	comf	(??_auto_mount+11)& (0+255),f,b
 14008  00090A  1F6C               	comf	(??_auto_mount+12)& (0+255),f,b
 14009  00090C  2B69               	incf	(??_auto_mount+9)& (0+255),f,b
 14010  00090E  0E00               	movlw	0
 14011  000910  236A               	addwfc	(??_auto_mount+10)& (0+255),f,b
 14012  000912  236B               	addwfc	(??_auto_mount+11)& (0+255),f,b
 14013  000914  236C               	addwfc	(??_auto_mount+12)& (0+255),f,b
 14014  000916  5186               	movf	auto_mount@fatsize& (0+255),w,b
 14015  000918  5D69               	subwf	(??_auto_mount+9)& (0+255),w,b
 14016  00091A  6F6D               	movwf	(??_auto_mount+13)& (0+255),b
 14017  00091C  5187               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 14018  00091E  596A               	subwfb	(??_auto_mount+10)& (0+255),w,b
 14019  000920  6F6E               	movwf	(??_auto_mount+14)& (0+255),b
 14020  000922  5188               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 14021  000924  596B               	subwfb	(??_auto_mount+11)& (0+255),w,b
 14022  000926  6F6F               	movwf	(??_auto_mount+15)& (0+255),b
 14023  000928  5189               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 14024  00092A  596C               	subwfb	(??_auto_mount+12)& (0+255),w,b
 14025  00092C  6F70               	movwf	(??_auto_mount+16)& (0+255),b
 14026  00092E  5163               	movf	(??_auto_mount+3)& (0+255),w,b
 14027  000930  5D6D               	subwf	(??_auto_mount+13)& (0+255),w,b
 14028  000932  6F71               	movwf	(??_auto_mount+17)& (0+255),b
 14029  000934  5164               	movf	(??_auto_mount+4)& (0+255),w,b
 14030  000936  596E               	subwfb	(??_auto_mount+14)& (0+255),w,b
 14031  000938  6F72               	movwf	(??_auto_mount+18)& (0+255),b
 14032  00093A  5165               	movf	(??_auto_mount+5)& (0+255),w,b
 14033  00093C  596F               	subwfb	(??_auto_mount+15)& (0+255),w,b
 14034  00093E  6F73               	movwf	(??_auto_mount+19)& (0+255),b
 14035  000940  5166               	movf	(??_auto_mount+6)& (0+255),w,b
 14036  000942  5970               	subwfb	(??_auto_mount+16)& (0+255),w,b
 14037  000944  6F74               	movwf	(??_auto_mount+20)& (0+255),b
 14038  000946  517E               	movf	auto_mount@totalsect& (0+255),w,b
 14039  000948  2571               	addwf	(??_auto_mount+17)& (0+255),w,b
 14040  00094A  6E0A               	movwf	___lldiv@dividend^0,c
 14041  00094C  517F               	movf	(auto_mount@totalsect+1)& (0+255),w,b
 14042  00094E  2172               	addwfc	(??_auto_mount+18)& (0+255),w,b
 14043  000950  6E0B               	movwf	(___lldiv@dividend+1)^0,c
 14044  000952  5180               	movf	(auto_mount@totalsect+2)& (0+255),w,b
 14045  000954  2173               	addwfc	(??_auto_mount+19)& (0+255),w,b
 14046  000956  6E0C               	movwf	(___lldiv@dividend+2)^0,c
 14047  000958  5181               	movf	(auto_mount@totalsect+3)& (0+255),w,b
 14048  00095A  2174               	addwfc	(??_auto_mount+20)& (0+255),w,b
 14049  00095C  6E0D               	movwf	(___lldiv@dividend+3)^0,c
 14050  00095E  EE20 F01D          	lfsr	2,29
 14051  000962  518A               	movf	auto_mount@fs& (0+255),w,b
 14052  000964  26D9               	addwf	fsr2l,f,c
 14053  000966  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 14054  000968  22DA               	addwfc	fsr2h,f,c
 14055  00096A  50DF               	movf	indf2,w,c
 14056  00096C  6F75               	movwf	(??_auto_mount+21)& (0+255),b
 14057  00096E  5175               	movf	(??_auto_mount+21)& (0+255),w,b
 14058  000970  6E0E               	movwf	___lldiv@divisor^0,c
 14059  000972  6A0F               	clrf	(___lldiv@divisor+1)^0,c
 14060  000974  6A10               	clrf	(___lldiv@divisor+2)^0,c
 14061  000976  6A11               	clrf	(___lldiv@divisor+3)^0,c
 14062  000978  EC19  F025         	call	___lldiv	;wreg free
 14063  00097C  0E02               	movlw	2
 14064  00097E  240A               	addwf	?___lldiv^0,w,c
 14065  000980  0100               	movlb	0	; () banked
 14066  000982  6F76               	movwf	auto_mount@maxclust& (0+255),b
 14067  000984  0E00               	movlw	0
 14068  000986  200B               	addwfc	(?___lldiv+1)^0,w,c
 14069  000988  6F77               	movwf	(auto_mount@maxclust+1)& (0+255),b
 14070  00098A  0E00               	movlw	0
 14071  00098C  200C               	addwfc	(?___lldiv+2)^0,w,c
 14072  00098E  6F78               	movwf	(auto_mount@maxclust+2)& (0+255),b
 14073  000990  0E00               	movlw	0
 14074  000992  200D               	addwfc	(?___lldiv+3)^0,w,c
 14075  000994  6F79               	movwf	(auto_mount@maxclust+3)& (0+255),b
 14076  000996  EE20 F016          	lfsr	2,22
 14077  00099A  518A               	movf	auto_mount@fs& (0+255),w,b
 14078  00099C  26D9               	addwf	fsr2l,f,c
 14079  00099E  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 14080  0009A0  22DA               	addwfc	fsr2h,f,c
 14081  0009A2  C076  FFDE         	movff	auto_mount@maxclust,postinc2
 14082  0009A6  C077  FFDD         	movff	auto_mount@maxclust+1,postdec2
 14083                           
 14084                           ; BSR set to: 0
 14085                           ;tff.c: 722: fmt = 1;
 14086  0009AA  0E01               	movlw	1
 14087  0009AC  6F84               	movwf	auto_mount@fmt& (0+255),b
 14088                           
 14089                           ; BSR set to: 0
 14090                           ;tff.c: 723: if (maxclust >= 0xFF7) fmt = 2;
 14091  0009AE  5179               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 14092  0009B0  1178               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 14093  0009B2  E106               	bnz	u14040
 14094  0009B4  0EF7               	movlw	247
 14095  0009B6  5D76               	subwf	auto_mount@maxclust& (0+255),w,b
 14096  0009B8  0E0F               	movlw	15
 14097  0009BA  5977               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 14098  0009BC  A0D8               	btfss	status,0,c
 14099  0009BE  D002               	goto	l12045
 14100  0009C0                     u14040:
 14101                           
 14102                           ; BSR set to: 0
 14103  0009C0  0E02               	movlw	2
 14104  0009C2  6F84               	movwf	auto_mount@fmt& (0+255),b
 14105  0009C4                     l12045:
 14106                           
 14107                           ; BSR set to: 0
 14108                           ;tff.c: 724: if (maxclust >= 0xFFF7)
 14109  0009C4  5179               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 14110  0009C6  1178               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 14111  0009C8  E107               	bnz	u14050
 14112  0009CA  0EF7               	movlw	247
 14113  0009CC  5D76               	subwf	auto_mount@maxclust& (0+255),w,b
 14114  0009CE  0EFF               	movlw	255
 14115  0009D0  5977               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 14116  0009D2  B0D8               	btfsc	status,0,c
 14117  0009D4  D6AC               	goto	u14000
 14118  0009D6  D001               	goto	l12051
 14119  0009D8                     u14050:
 14120  0009D8  D6AA               	goto	u14000
 14121  0009DA                     l12051:
 14122                           
 14123                           ; BSR set to: 0
 14124                           ;tff.c: 733: fs->dirbase = fs->fatbase + fatsize;
 14125  0009DA  EE20 F008          	lfsr	2,8
 14126  0009DE  518A               	movf	auto_mount@fs& (0+255),w,b
 14127  0009E0  26D9               	addwf	fsr2l,f,c
 14128  0009E2  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 14129  0009E4  22DA               	addwfc	fsr2h,f,c
 14130  0009E6  CFDE F060          	movff	postinc2,??_auto_mount
 14131  0009EA  CFDE F061          	movff	postinc2,??_auto_mount+1
 14132  0009EE  CFDE F062          	movff	postinc2,??_auto_mount+2
 14133  0009F2  CFDE F063          	movff	postinc2,??_auto_mount+3
 14134  0009F6  5186               	movf	auto_mount@fatsize& (0+255),w,b
 14135  0009F8  2560               	addwf	??_auto_mount& (0+255),w,b
 14136  0009FA  6F64               	movwf	(??_auto_mount+4)& (0+255),b
 14137  0009FC  5187               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 14138  0009FE  2161               	addwfc	(??_auto_mount+1)& (0+255),w,b
 14139  000A00  6F65               	movwf	(??_auto_mount+5)& (0+255),b
 14140  000A02  5188               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 14141  000A04  2162               	addwfc	(??_auto_mount+2)& (0+255),w,b
 14142  000A06  6F66               	movwf	(??_auto_mount+6)& (0+255),b
 14143  000A08  5189               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 14144  000A0A  2163               	addwfc	(??_auto_mount+3)& (0+255),w,b
 14145  000A0C  6F67               	movwf	(??_auto_mount+7)& (0+255),b
 14146  000A0E  EE20 F00C          	lfsr	2,12
 14147  000A12  518A               	movf	auto_mount@fs& (0+255),w,b
 14148  000A14  26D9               	addwf	fsr2l,f,c
 14149  000A16  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 14150  000A18  22DA               	addwfc	fsr2h,f,c
 14151  000A1A  C064  FFDE         	movff	??_auto_mount+4,postinc2
 14152  000A1E  C065  FFDE         	movff	??_auto_mount+5,postinc2
 14153  000A22  C066  FFDE         	movff	??_auto_mount+6,postinc2
 14154  000A26  C067  FFDE         	movff	??_auto_mount+7,postinc2
 14155                           
 14156                           ;tff.c: 734: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;
 14157  000A2A  EE20 F008          	lfsr	2,8
 14158  000A2E  518A               	movf	auto_mount@fs& (0+255),w,b
 14159  000A30  26D9               	addwf	fsr2l,f,c
 14160  000A32  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 14161  000A34  22DA               	addwfc	fsr2h,f,c
 14162  000A36  CFDE F060          	movff	postinc2,??_auto_mount
 14163  000A3A  CFDE F061          	movff	postinc2,??_auto_mount+1
 14164  000A3E  CFDE F062          	movff	postinc2,??_auto_mount+2
 14165  000A42  CFDE F063          	movff	postinc2,??_auto_mount+3
 14166  000A46  EE20 F002          	lfsr	2,2
 14167  000A4A  518A               	movf	auto_mount@fs& (0+255),w,b
 14168  000A4C  26D9               	addwf	fsr2l,f,c
 14169  000A4E  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 14170  000A50  22DA               	addwfc	fsr2h,f,c
 14171  000A52  CFDE F064          	movff	postinc2,??_auto_mount+4
 14172  000A56  CFDD F065          	movff	postdec2,??_auto_mount+5
 14173  000A5A  0E04               	movlw	4
 14174  000A5C  6F66               	movwf	(??_auto_mount+6)& (0+255),b
 14175  000A5E                     u14065:
 14176  000A5E  90D8               	bcf	status,0,c
 14177  000A60  3365               	rrcf	(??_auto_mount+5)& (0+255),f,b
 14178  000A62  3364               	rrcf	(??_auto_mount+4)& (0+255),f,b
 14179  000A64  2F66               	decfsz	(??_auto_mount+6)& (0+255),f,b
 14180  000A66  D7FB               	goto	u14065
 14181  000A68  5164               	movf	(??_auto_mount+4)& (0+255),w,b
 14182  000A6A  2560               	addwf	??_auto_mount& (0+255),w,b
 14183  000A6C  6F67               	movwf	(??_auto_mount+7)& (0+255),b
 14184  000A6E  5165               	movf	(??_auto_mount+5)& (0+255),w,b
 14185  000A70  2161               	addwfc	(??_auto_mount+1)& (0+255),w,b
 14186  000A72  6F68               	movwf	(??_auto_mount+8)& (0+255),b
 14187  000A74  0E00               	movlw	0
 14188  000A76  2162               	addwfc	(??_auto_mount+2)& (0+255),w,b
 14189  000A78  6F69               	movwf	(??_auto_mount+9)& (0+255),b
 14190  000A7A  0E00               	movlw	0
 14191  000A7C  2163               	addwfc	(??_auto_mount+3)& (0+255),w,b
 14192  000A7E  6F6A               	movwf	(??_auto_mount+10)& (0+255),b
 14193  000A80  5186               	movf	auto_mount@fatsize& (0+255),w,b
 14194  000A82  2567               	addwf	(??_auto_mount+7)& (0+255),w,b
 14195  000A84  6F6B               	movwf	(??_auto_mount+11)& (0+255),b
 14196  000A86  5187               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 14197  000A88  2168               	addwfc	(??_auto_mount+8)& (0+255),w,b
 14198  000A8A  6F6C               	movwf	(??_auto_mount+12)& (0+255),b
 14199  000A8C  5188               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 14200  000A8E  2169               	addwfc	(??_auto_mount+9)& (0+255),w,b
 14201  000A90  6F6D               	movwf	(??_auto_mount+13)& (0+255),b
 14202  000A92  5189               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 14203  000A94  216A               	addwfc	(??_auto_mount+10)& (0+255),w,b
 14204  000A96  6F6E               	movwf	(??_auto_mount+14)& (0+255),b
 14205  000A98  EE20 F010          	lfsr	2,16
 14206  000A9C  518A               	movf	auto_mount@fs& (0+255),w,b
 14207  000A9E  26D9               	addwf	fsr2l,f,c
 14208  000AA0  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 14209  000AA2  22DA               	addwfc	fsr2h,f,c
 14210  000AA4  C06B  FFDE         	movff	??_auto_mount+11,postinc2
 14211  000AA8  C06C  FFDE         	movff	??_auto_mount+12,postinc2
 14212  000AAC  C06D  FFDE         	movff	??_auto_mount+13,postinc2
 14213  000AB0  C06E  FFDE         	movff	??_auto_mount+14,postinc2
 14214                           
 14215                           ;tff.c: 738: fs->free_clust = (CLUST)0xFFFFFFFF;
 14216  000AB4  EE20 F01A          	lfsr	2,26
 14217  000AB8  518A               	movf	auto_mount@fs& (0+255),w,b
 14218  000ABA  26D9               	addwf	fsr2l,f,c
 14219  000ABC  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 14220  000ABE  22DA               	addwfc	fsr2h,f,c
 14221  000AC0  0EFF               	movlw	255
 14222  000AC2  6EDE               	movwf	postinc2,c
 14223  000AC4  0EFF               	movlw	255
 14224  000AC6  6EDD               	movwf	postdec2,c
 14225                           
 14226                           ;tff.c: 754: fs->fs_type = fmt;
 14227  000AC8  EE20 F01C          	lfsr	2,28
 14228  000ACC  518A               	movf	auto_mount@fs& (0+255),w,b
 14229  000ACE  26D9               	addwf	fsr2l,f,c
 14230  000AD0  518B               	movf	(auto_mount@fs+1)& (0+255),w,b
 14231  000AD2  22DA               	addwfc	fsr2h,f,c
 14232  000AD4  C084  FFDF         	movff	auto_mount@fmt,indf2
 14233                           
 14234                           ; BSR set to: 0
 14235                           ;tff.c: 755: fs->id = ++fsid;
 14236  000AD8  0101               	movlb	1	; () banked
 14237  000ADA  4B67               	infsnz	_fsid& (0+255),f,b
 14238  000ADC  2B68               	incf	(_fsid+1)& (0+255),f,b
 14239  000ADE  C08A  FFD9         	movff	auto_mount@fs,fsr2l
 14240  000AE2  C08B  FFDA         	movff	auto_mount@fs+1,fsr2h
 14241  000AE6  C167  FFDE         	movff	_fsid,postinc2
 14242  000AEA  C168  FFDD         	movff	_fsid+1,postdec2
 14243                           
 14244                           ;tff.c: 756: return FR_OK;
 14245  000AEE  0E00               	movlw	0
 14246  000AF0  0012               	return		;funcret
 14247  000AF2                     __end_of_auto_mount:
 14248                           	callstack 0
 14249                           
 14250 ;; *************** function _memset *****************
 14251 ;; Defined at:
 14252 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\memset.c"
 14253 ;; Parameters:    Size  Location     Type
 14254 ;;  p1              2    9[COMRAM] PTR void 
 14255 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 14256 ;;  c               2   11[COMRAM] int 
 14257 ;;  n               2   13[COMRAM] unsigned int 
 14258 ;; Auto vars:     Size  Location     Type
 14259 ;;  p               2   15[COMRAM] PTR unsigned char 
 14260 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 14261 ;; Return value:  Size  Location     Type
 14262 ;;                  2    9[COMRAM] PTR void 
 14263 ;; Registers used:
 14264 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14265 ;; Tracked objects:
 14266 ;;		On entry : 0/0
 14267 ;;		On exit  : 0/0
 14268 ;;		Unchanged: 0/0
 14269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14270 ;;      Params:         6       0       0       0       0       0       0       0       0
 14271 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14272 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14273 ;;      Totals:         8       0       0       0       0       0       0       0       0
 14274 ;;Total ram usage:        8 bytes
 14275 ;; Hardware stack levels used:    1
 14276 ;; Hardware stack levels required when called:    2
 14277 ;; This function calls:
 14278 ;;		Nothing
 14279 ;; This function is called by:
 14280 ;;		_make_dirfile
 14281 ;;		_reserve_direntry
 14282 ;;		_auto_mount
 14283 ;;		_f_open
 14284 ;; This function uses a non-reentrant model
 14285 ;;
 14286                           
 14287                           	psect	text79
 14288  005868                     __ptext79:
 14289                           	callstack 0
 14290  005868                     _memset:
 14291                           	callstack 21
 14292                           
 14293                           ;incstack = 0
 14294  005868  C00A  F010         	movff	memset@p1,memset@p
 14295  00586C  C00B  F011         	movff	memset@p1+1,memset@p+1
 14296  005870  D008               	goto	l11173
 14297  005872                     l11169:
 14298  005872  C010  FFD9         	movff	memset@p,fsr2l
 14299  005876  C011  FFDA         	movff	memset@p+1,fsr2h
 14300  00587A  C00C  FFDF         	movff	memset@c,indf2
 14301  00587E  4A10               	infsnz	memset@p^0,f,c
 14302  005880  2A11               	incf	(memset@p+1)^0,f,c
 14303  005882                     l11173:
 14304  005882  060E               	decf	memset@n^0,f,c
 14305  005884  A0D8               	btfss	status,0,c
 14306  005886  060F               	decf	(memset@n+1)^0,f,c
 14307  005888  280E               	incf	memset@n^0,w,c
 14308  00588A  E1F3               	bnz	l11169
 14309  00588C  280F               	incf	(memset@n+1)^0,w,c
 14310  00588E  B4D8               	btfsc	status,2,c
 14311  005890  0012               	return	
 14312  005892  D7EF               	goto	l11169
 14313  005894                     __end_of_memset:
 14314                           	callstack 0
 14315                           
 14316 ;; *************** function _disk_initialize *****************
 14317 ;; Defined at:
 14318 ;;		line 59 in file "bibliotecas/diskio.c"
 14319 ;; Parameters:    Size  Location     Type
 14320 ;;  pdrv            1    wreg     unsigned char 
 14321 ;; Auto vars:     Size  Location     Type
 14322 ;;  pdrv            1   41[COMRAM] unsigned char 
 14323 ;;  result          2    0        int 
 14324 ;;  stat            1   42[COMRAM] unsigned char 
 14325 ;; Return value:  Size  Location     Type
 14326 ;;                  1    wreg      unsigned char 
 14327 ;; Registers used:
 14328 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14329 ;; Tracked objects:
 14330 ;;		On entry : 0/0
 14331 ;;		On exit  : 0/0
 14332 ;;		Unchanged: 0/0
 14333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14334 ;;      Params:         0       0       0       0       0       0       0       0       0
 14335 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14336 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14337 ;;      Totals:         2       0       0       0       0       0       0       0       0
 14338 ;;Total ram usage:        2 bytes
 14339 ;; Hardware stack levels used:    1
 14340 ;; Hardware stack levels required when called:    7
 14341 ;; This function calls:
 14342 ;;		_sdc_disk_initialize
 14343 ;; This function is called by:
 14344 ;;		_auto_mount
 14345 ;; This function uses a non-reentrant model
 14346 ;;
 14347                           
 14348                           	psect	text80
 14349  005966                     __ptext80:
 14350                           	callstack 0
 14351  005966                     _disk_initialize:
 14352                           	callstack 17
 14353                           
 14354                           ;incstack = 0
 14355                           ;disk_initialize@pdrv stored from wreg
 14356  005966  6E2A               	movwf	disk_initialize@pdrv^0,c
 14357                           
 14358                           ;diskio.c: 63: DSTATUS stat;;diskio.c: 64: int result;;diskio.c: 66: switch (pdrv) {
 14359  005968  D005               	goto	l11361
 14360  00596A                     l11343:
 14361                           
 14362                           ;diskio.c: 68: stat = sdc_disk_initialize();
 14363  00596A  ECBD  F00C         	call	_sdc_disk_initialize	;wreg free
 14364  00596E  6E2B               	movwf	disk_initialize@stat^0,c
 14365  005970                     l11345:
 14366                           
 14367                           ;diskio.c: 72: return stat;
 14368  005970  502B               	movf	disk_initialize@stat^0,w,c
 14369  005972  0012               	return	
 14370  005974                     l11361:
 14371  005974  502A               	movf	disk_initialize@pdrv^0,w,c
 14372                           
 14373                           ; Switch size 1, requested type "simple"
 14374                           ; Number of cases is 3, Range of values is 0 to 2
 14375                           ; switch strategies available:
 14376                           ; Name         Instructions Cycles
 14377                           ; simple_byte           10     6 (average)
 14378                           ;	Chosen strategy is simple_byte
 14379  005976  0A00               	xorlw	0	; case 0
 14380  005978  B4D8               	btfsc	status,2,c
 14381  00597A  D7F7               	goto	l11343
 14382  00597C  0A01               	xorlw	1	; case 1
 14383  00597E  B4D8               	btfsc	status,2,c
 14384  005980  D7F4               	goto	l11343
 14385  005982  0A03               	xorlw	3	; case 2
 14386  005984  B4D8               	btfsc	status,2,c
 14387  005986  D7F4               	goto	l11345
 14388                           
 14389                           ;diskio.c: 88: return 0x01;
 14390  005988  0E01               	movlw	1
 14391  00598A  0012               	return		;funcret
 14392  00598C                     __end_of_disk_initialize:
 14393                           	callstack 0
 14394                           
 14395 ;; *************** function _sdc_disk_initialize *****************
 14396 ;; Defined at:
 14397 ;;		line 275 in file "bibliotecas/diskio.c"
 14398 ;; Parameters:    Size  Location     Type
 14399 ;;		None
 14400 ;; Auto vars:     Size  Location     Type
 14401 ;;  count2          2   38[COMRAM] int 
 14402 ;;  crc_number      2   34[COMRAM] int 
 14403 ;;  count1          2   32[COMRAM] int 
 14404 ;;  i               2    0        int 
 14405 ;;  buff            1   40[COMRAM] unsigned char 
 14406 ;;  ocr             1   37[COMRAM] unsigned char 
 14407 ;;  buff_i          1   36[COMRAM] unsigned char 
 14408 ;;  stat            1   31[COMRAM] unsigned char 
 14409 ;; Return value:  Size  Location     Type
 14410 ;;                  1    wreg      unsigned char 
 14411 ;; Registers used:
 14412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14413 ;; Tracked objects:
 14414 ;;		On entry : 0/0
 14415 ;;		On exit  : 0/0
 14416 ;;		Unchanged: 0/0
 14417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14418 ;;      Params:         0       0       0       0       0       0       0       0       0
 14419 ;;      Locals:        12       0       0       0       0       0       0       0       0
 14420 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14421 ;;      Totals:        13       0       0       0       0       0       0       0       0
 14422 ;;Total ram usage:       13 bytes
 14423 ;; Hardware stack levels used:    1
 14424 ;; Hardware stack levels required when called:    6
 14425 ;; This function calls:
 14426 ;;		_command
 14427 ;;		_dummy_clocks
 14428 ;;		_escreve_frase_ram_lcd
 14429 ;;		_posicao_cursor_lcd
 14430 ;;		_proceed
 14431 ;;		_response
 14432 ;;		_sdc_reset
 14433 ;; This function is called by:
 14434 ;;		_disk_initialize
 14435 ;; This function uses a non-reentrant model
 14436 ;;
 14437                           
 14438                           	psect	text81
 14439  00197A                     __ptext81:
 14440                           	callstack 0
 14441  00197A                     _sdc_disk_initialize:
 14442                           	callstack 17
 14443                           
 14444                           ;incstack = 0
 14445  00197A  0E00               	movlw	0
 14446  00197C  6E22               	movwf	(sdc_disk_initialize@count1+1)^0,c
 14447  00197E  0E00               	movlw	0
 14448  001980  6E21               	movwf	sdc_disk_initialize@count1^0,c
 14449  001982  0E00               	movlw	0
 14450  001984  6E28               	movwf	(sdc_disk_initialize@count2+1)^0,c
 14451  001986  0E00               	movlw	0
 14452  001988  6E27               	movwf	sdc_disk_initialize@count2^0,c
 14453                           
 14454                           ;diskio.c: 280: BYTE buff = 0;
 14455  00198A  0E00               	movlw	0
 14456  00198C  6E29               	movwf	sdc_disk_initialize@buff^0,c
 14457                           
 14458                           ;diskio.c: 281: BYTE buff_i;;diskio.c: 282: int crc_number;;diskio.c: 283: _delay((unsig
      +                          ned long)((1)*(48000000/4000.0)));
 14459  00198E  0E10               	movlw	16
 14460  001990  6E1D               	movwf	??_sdc_disk_initialize^0,c
 14461  001992  0E94               	movlw	148
 14462  001994                     u16867:
 14463  001994  2EE8               	decfsz	wreg,f,c
 14464  001996  D7FE               	bra	u16867
 14465  001998  2E1D               	decfsz	??_sdc_disk_initialize^0,f,c
 14466  00199A  D7FC               	bra	u16867
 14467  00199C  D000               	nop2	
 14468                           
 14469                           ;diskio.c: 284: dummy_clocks(100);
 14470  00199E  0E64               	movlw	100
 14471  0019A0  EC1A  F02B         	call	_dummy_clocks
 14472                           
 14473                           ;diskio.c: 287: sdc_reset();
 14474  0019A4  EC08  F024         	call	_sdc_reset	;wreg free
 14475                           
 14476                           ;diskio.c: 288: command(0X48, 0x000001AA, 0x87);
 14477  0019A8  0EAA               	movlw	170
 14478  0019AA  6E0F               	movwf	command@arg^0,c
 14479  0019AC  0E01               	movlw	1
 14480  0019AE  6E10               	movwf	(command@arg+1)^0,c
 14481  0019B0  0E00               	movlw	0
 14482  0019B2  6E11               	movwf	(command@arg+2)^0,c
 14483  0019B4  0E00               	movlw	0
 14484  0019B6  6E12               	movwf	(command@arg+3)^0,c
 14485  0019B8  0E87               	movlw	135
 14486  0019BA  6E13               	movwf	command@CRC^0,c
 14487  0019BC  0E48               	movlw	72
 14488  0019BE  ECDD  F027         	call	_command
 14489                           
 14490                           ;diskio.c: 289: proceed();
 14491  0019C2  EC2B  F02E         	call	_proceed	;wreg free
 14492  0019C6                     l10981:
 14493                           
 14494                           ;diskio.c: 291: buff_i = response();
 14495  0019C6  EC25  F02E         	call	_response	;wreg free
 14496  0019CA  6E25               	movwf	sdc_disk_initialize@buff_i^0,c
 14497                           
 14498                           ;diskio.c: 292: if(buff_i == 1)
 14499  0019CC  0425               	decf	sdc_disk_initialize@buff_i^0,w,c
 14500  0019CE  A4D8               	btfss	status,2,c
 14501  0019D0  D004               	goto	l10987
 14502                           
 14503                           ;diskio.c: 293: {;diskio.c: 294: crc_number = buff_i<<8;
 14504  0019D2  5025               	movf	sdc_disk_initialize@buff_i^0,w,c
 14505  0019D4  6E24               	movwf	(sdc_disk_initialize@crc_number+1)^0,c
 14506  0019D6  6A23               	clrf	sdc_disk_initialize@crc_number^0,c
 14507                           
 14508                           ;diskio.c: 295: }
 14509  0019D8  D006               	goto	l10991
 14510  0019DA                     l10987:
 14511                           
 14512                           ;diskio.c: 296: else if(buff_i==0xAA)
 14513  0019DA  0EAA               	movlw	170
 14514  0019DC  1825               	xorwf	sdc_disk_initialize@buff_i^0,w,c
 14515  0019DE  A4D8               	btfss	status,2,c
 14516  0019E0  D002               	goto	l10991
 14517                           
 14518                           ;diskio.c: 297: {;diskio.c: 298: crc_number |= buff_i;
 14519  0019E2  5025               	movf	sdc_disk_initialize@buff_i^0,w,c
 14520  0019E4  1223               	iorwf	sdc_disk_initialize@crc_number^0,f,c
 14521  0019E6                     l10991:
 14522                           
 14523                           ;diskio.c: 299: };diskio.c: 300: count1++;
 14524  0019E6  4A21               	infsnz	sdc_disk_initialize@count1^0,f,c
 14525  0019E8  2A22               	incf	(sdc_disk_initialize@count1+1)^0,f,c
 14526                           
 14527                           ;diskio.c: 301: }while(crc_number != 0x1AA && count1<1000);
 14528  0019EA  0EAA               	movlw	170
 14529  0019EC  1823               	xorwf	sdc_disk_initialize@crc_number^0,w,c
 14530  0019EE  E103               	bnz	u12390
 14531  0019F0  0424               	decf	(sdc_disk_initialize@crc_number+1)^0,w,c
 14532  0019F2  B4D8               	btfsc	status,2,c
 14533  0019F4  D008               	goto	u12400
 14534  0019F6                     u12390:
 14535  0019F6  BE22               	btfsc	(sdc_disk_initialize@count1+1)^0,7,c
 14536  0019F8  D7E6               	goto	l10981
 14537  0019FA  0EE8               	movlw	232
 14538  0019FC  5C21               	subwf	sdc_disk_initialize@count1^0,w,c
 14539  0019FE  0E03               	movlw	3
 14540  001A00  5822               	subwfb	(sdc_disk_initialize@count1+1)^0,w,c
 14541  001A02  A0D8               	btfss	status,0,c
 14542  001A04  D7E0               	goto	l10981
 14543  001A06                     u12400:
 14544                           
 14545                           ;diskio.c: 306: if (crc_number == 0x1AA)
 14546  001A06  0EAA               	movlw	170
 14547  001A08  1823               	xorwf	sdc_disk_initialize@crc_number^0,w,c
 14548  001A0A  E102               	bnz	u12411
 14549  001A0C  0424               	decf	(sdc_disk_initialize@crc_number+1)^0,w,c
 14550  001A0E  A4D8               	btfss	status,2,c
 14551  001A10                     u12411:
 14552  001A10  D099               	goto	l11069
 14553  001A12                     u12410:
 14554                           
 14555                           ;diskio.c: 310: count2 = 0;
 14556                           
 14557                           ;diskio.c: 309: do{
 14558  001A12  0E00               	movlw	0
 14559  001A14  6E28               	movwf	(sdc_disk_initialize@count2+1)^0,c
 14560  001A16  0E00               	movlw	0
 14561  001A18  6E27               	movwf	sdc_disk_initialize@count2^0,c
 14562  001A1A                     
 14563                           ;diskio.c: 319: dummy_clocks(10);
 14564  001A1A  0E0A               	movlw	10
 14565  001A1C  EC1A  F02B         	call	_dummy_clocks
 14566                           
 14567                           ;diskio.c: 320: command(0X77, 0X00000000, 0X00);
 14568  001A20  0E00               	movlw	0
 14569  001A22  6E0F               	movwf	command@arg^0,c
 14570  001A24  0E00               	movlw	0
 14571  001A26  6E10               	movwf	(command@arg+1)^0,c
 14572  001A28  0E00               	movlw	0
 14573  001A2A  6E11               	movwf	(command@arg+2)^0,c
 14574  001A2C  0E00               	movlw	0
 14575  001A2E  6E12               	movwf	(command@arg+3)^0,c
 14576  001A30  0E00               	movlw	0
 14577  001A32  6E13               	movwf	command@CRC^0,c
 14578  001A34  0E77               	movlw	119
 14579  001A36  ECDD  F027         	call	_command
 14580                           
 14581                           ;diskio.c: 323: proceed();
 14582  001A3A  EC2B  F02E         	call	_proceed	;wreg free
 14583  001A3E                     l11011:
 14584                           
 14585                           ;diskio.c: 325: buff = response();
 14586  001A3E  EC25  F02E         	call	_response	;wreg free
 14587  001A42  6E29               	movwf	sdc_disk_initialize@buff^0,c
 14588                           
 14589                           ;diskio.c: 326: count2++;
 14590  001A44  4A27               	infsnz	sdc_disk_initialize@count2^0,f,c
 14591  001A46  2A28               	incf	(sdc_disk_initialize@count2+1)^0,f,c
 14592                           
 14593                           ;diskio.c: 327: }while((buff!=0X01)&&(count2<10));
 14594  001A48  0429               	decf	sdc_disk_initialize@buff^0,w,c
 14595  001A4A  B4D8               	btfsc	status,2,c
 14596  001A4C  D008               	goto	u12430
 14597  001A4E  BE28               	btfsc	(sdc_disk_initialize@count2+1)^0,7,c
 14598  001A50  D7F6               	goto	l11011
 14599  001A52  5028               	movf	(sdc_disk_initialize@count2+1)^0,w,c
 14600  001A54  E104               	bnz	u12430
 14601  001A56  0E0A               	movlw	10
 14602  001A58  5C27               	subwf	sdc_disk_initialize@count2^0,w,c
 14603  001A5A  A0D8               	btfss	status,0,c
 14604  001A5C  D7F0               	goto	l11011
 14605  001A5E                     u12430:
 14606                           
 14607                           ;diskio.c: 328: count2 = 0;
 14608  001A5E  0E00               	movlw	0
 14609  001A60  6E28               	movwf	(sdc_disk_initialize@count2+1)^0,c
 14610  001A62  0E00               	movlw	0
 14611  001A64  6E27               	movwf	sdc_disk_initialize@count2^0,c
 14612                           
 14613                           ;diskio.c: 332: dummy_clocks(10);
 14614  001A66  0E0A               	movlw	10
 14615  001A68  EC1A  F02B         	call	_dummy_clocks
 14616                           
 14617                           ;diskio.c: 333: command(0X69, 0X40000000 , 0x00);
 14618  001A6C  0E00               	movlw	0
 14619  001A6E  6E0F               	movwf	command@arg^0,c
 14620  001A70  0E00               	movlw	0
 14621  001A72  6E10               	movwf	(command@arg+1)^0,c
 14622  001A74  0E00               	movlw	0
 14623  001A76  6E11               	movwf	(command@arg+2)^0,c
 14624  001A78  0E40               	movlw	64
 14625  001A7A  6E12               	movwf	(command@arg+3)^0,c
 14626  001A7C  0E00               	movlw	0
 14627  001A7E  6E13               	movwf	command@CRC^0,c
 14628  001A80  0E69               	movlw	105
 14629  001A82  ECDD  F027         	call	_command
 14630                           
 14631                           ;diskio.c: 334: proceed();
 14632  001A86  EC2B  F02E         	call	_proceed	;wreg free
 14633                           
 14634                           ;diskio.c: 335: buff = response();
 14635  001A8A  EC25  F02E         	call	_response	;wreg free
 14636  001A8E  6E29               	movwf	sdc_disk_initialize@buff^0,c
 14637                           
 14638                           ;diskio.c: 336: count2++;
 14639  001A90  4A27               	infsnz	sdc_disk_initialize@count2^0,f,c
 14640  001A92  2A28               	incf	(sdc_disk_initialize@count2+1)^0,f,c
 14641                           
 14642                           ;diskio.c: 337: }while(buff!=0X00);
 14643  001A94  5029               	movf	sdc_disk_initialize@buff^0,w,c
 14644  001A96  A4D8               	btfss	status,2,c
 14645  001A98  D7C0               	goto	l11001
 14646                           
 14647                           ;diskio.c: 342: dummy_clocks(10);
 14648  001A9A  0E0A               	movlw	10
 14649  001A9C  EC1A  F02B         	call	_dummy_clocks
 14650                           
 14651                           ;diskio.c: 343: command(0X7A, 0X00000000, 0XFF);
 14652  001AA0  0E00               	movlw	0
 14653  001AA2  6E0F               	movwf	command@arg^0,c
 14654  001AA4  0E00               	movlw	0
 14655  001AA6  6E10               	movwf	(command@arg+1)^0,c
 14656  001AA8  0E00               	movlw	0
 14657  001AAA  6E11               	movwf	(command@arg+2)^0,c
 14658  001AAC  0E00               	movlw	0
 14659  001AAE  6E12               	movwf	(command@arg+3)^0,c
 14660  001AB0  0EFF               	movlw	255
 14661  001AB2  6E13               	movwf	command@CRC^0,c
 14662  001AB4  0E7A               	movlw	122
 14663  001AB6  ECDD  F027         	call	_command
 14664                           
 14665                           ;diskio.c: 344: proceed();
 14666  001ABA  EC2B  F02E         	call	_proceed	;wreg free
 14667  001ABE                     l11035:
 14668                           
 14669                           ;diskio.c: 346: buff = response();
 14670  001ABE  EC25  F02E         	call	_response	;wreg free
 14671  001AC2  6E29               	movwf	sdc_disk_initialize@buff^0,c
 14672                           
 14673                           ;diskio.c: 347: ocr = (buff << 1) & 0b10000000;
 14674  001AC4  5029               	movf	sdc_disk_initialize@buff^0,w,c
 14675  001AC6  2429               	addwf	sdc_disk_initialize@buff^0,w,c
 14676  001AC8  0B80               	andlw	128
 14677  001ACA  6E26               	movwf	sdc_disk_initialize@ocr^0,c
 14678                           
 14679                           ;diskio.c: 348: count2++;
 14680  001ACC  4A27               	infsnz	sdc_disk_initialize@count2^0,f,c
 14681  001ACE  2A28               	incf	(sdc_disk_initialize@count2+1)^0,f,c
 14682                           
 14683                           ;diskio.c: 349: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 14684  001AD0  5026               	movf	sdc_disk_initialize@ocr^0,w,c
 14685  001AD2  B4D8               	btfsc	status,2,c
 14686  001AD4  D00B               	goto	u12470
 14687  001AD6  0426               	decf	sdc_disk_initialize@ocr^0,w,c
 14688  001AD8  B4D8               	btfsc	status,2,c
 14689  001ADA  D008               	goto	u12470
 14690  001ADC  BE28               	btfsc	(sdc_disk_initialize@count2+1)^0,7,c
 14691  001ADE  D7EF               	goto	l11035
 14692  001AE0  5028               	movf	(sdc_disk_initialize@count2+1)^0,w,c
 14693  001AE2  E104               	bnz	u12470
 14694  001AE4  0E0A               	movlw	10
 14695  001AE6  5C27               	subwf	sdc_disk_initialize@count2^0,w,c
 14696  001AE8  A0D8               	btfss	status,0,c
 14697  001AEA  D7E9               	goto	l11035
 14698  001AEC                     u12470:
 14699                           
 14700                           ;diskio.c: 350: }while(ocr != 0X00 && ocr !=0x01);
 14701  001AEC  5026               	movf	sdc_disk_initialize@ocr^0,w,c
 14702  001AEE  B4D8               	btfsc	status,2,c
 14703  001AF0  D003               	goto	u12490
 14704  001AF2  0426               	decf	sdc_disk_initialize@ocr^0,w,c
 14705  001AF4  A4D8               	btfss	status,2,c
 14706  001AF6  D78D               	goto	u12410
 14707  001AF8                     u12490:
 14708                           
 14709                           ;diskio.c: 355: _delay((unsigned long)((1)*(48000000/4000.0)));
 14710  001AF8  0E10               	movlw	16
 14711  001AFA  6E1D               	movwf	??_sdc_disk_initialize^0,c
 14712  001AFC  0E94               	movlw	148
 14713  001AFE                     u16877:
 14714  001AFE  2EE8               	decfsz	wreg,f,c
 14715  001B00  D7FE               	bra	u16877
 14716  001B02  2E1D               	decfsz	??_sdc_disk_initialize^0,f,c
 14717  001B04  D7FC               	bra	u16877
 14718  001B06  D000               	nop2	
 14719                           
 14720                           ;diskio.c: 356: stat = 0X00;
 14721  001B08  0E00               	movlw	0
 14722  001B0A  6E20               	movwf	sdc_disk_initialize@stat^0,c
 14723                           
 14724                           ;diskio.c: 358: if(!ocr)
 14725  001B0C  5026               	movf	sdc_disk_initialize@ocr^0,w,c
 14726  001B0E  A4D8               	btfss	status,2,c
 14727  001B10  D0A6               	goto	u12590
 14728                           
 14729                           ;diskio.c: 359: {;diskio.c: 361: dummy_clocks(10);
 14730  001B12  0E0A               	movlw	10
 14731  001B14  EC1A  F02B         	call	_dummy_clocks
 14732                           
 14733                           ;diskio.c: 362: command(0x50, 0x00000200,0XFF);
 14734  001B18  0E00               	movlw	0
 14735  001B1A  6E0F               	movwf	command@arg^0,c
 14736  001B1C  0E02               	movlw	2
 14737  001B1E  6E10               	movwf	(command@arg+1)^0,c
 14738  001B20  0E00               	movlw	0
 14739  001B22  6E11               	movwf	(command@arg+2)^0,c
 14740  001B24  0E00               	movlw	0
 14741  001B26  6E12               	movwf	(command@arg+3)^0,c
 14742  001B28  0EFF               	movlw	255
 14743  001B2A  6E13               	movwf	command@CRC^0,c
 14744  001B2C  0E50               	movlw	80
 14745  001B2E  ECDD  F027         	call	_command
 14746                           
 14747                           ;diskio.c: 363: proceed();
 14748  001B32  EC2B  F02E         	call	_proceed	;wreg free
 14749  001B36                     
 14750                           ;diskio.c: 367: buff = response();
 14751  001B36  EC25  F02E         	call	_response	;wreg free
 14752  001B3A  6E29               	movwf	sdc_disk_initialize@buff^0,c
 14753                           
 14754                           ;diskio.c: 368: }while(buff!=0X00);
 14755  001B3C  5029               	movf	sdc_disk_initialize@buff^0,w,c
 14756  001B3E  B4D8               	btfsc	status,2,c
 14757  001B40  D08E               	goto	u12590
 14758  001B42  D7F9               	goto	l11063
 14759  001B44                     l11069:
 14760                           
 14761                           ;diskio.c: 373: else;diskio.c: 374: {;diskio.c: 376: count2 = 0;
 14762  001B44  0E00               	movlw	0
 14763  001B46  6E28               	movwf	(sdc_disk_initialize@count2+1)^0,c
 14764  001B48  0E00               	movlw	0
 14765  001B4A  6E27               	movwf	sdc_disk_initialize@count2^0,c
 14766                           
 14767                           ;diskio.c: 378: dummy_clocks(1);
 14768  001B4C  0E01               	movlw	1
 14769  001B4E  EC1A  F02B         	call	_dummy_clocks
 14770                           
 14771                           ;diskio.c: 379: command(0X69, 0X00000000, 0XFF);
 14772  001B52  0E00               	movlw	0
 14773  001B54  6E0F               	movwf	command@arg^0,c
 14774  001B56  0E00               	movlw	0
 14775  001B58  6E10               	movwf	(command@arg+1)^0,c
 14776  001B5A  0E00               	movlw	0
 14777  001B5C  6E11               	movwf	(command@arg+2)^0,c
 14778  001B5E  0E00               	movlw	0
 14779  001B60  6E12               	movwf	(command@arg+3)^0,c
 14780  001B62  0EFF               	movlw	255
 14781  001B64  6E13               	movwf	command@CRC^0,c
 14782  001B66  0E69               	movlw	105
 14783  001B68  ECDD  F027         	call	_command
 14784                           
 14785                           ;diskio.c: 380: proceed();
 14786  001B6C  EC2B  F02E         	call	_proceed	;wreg free
 14787  001B70                     l11079:
 14788                           
 14789                           ;diskio.c: 382: buff = response();
 14790  001B70  EC25  F02E         	call	_response	;wreg free
 14791  001B74  6E29               	movwf	sdc_disk_initialize@buff^0,c
 14792                           
 14793                           ;diskio.c: 383: count2++;
 14794  001B76  4A27               	infsnz	sdc_disk_initialize@count2^0,f,c
 14795  001B78  2A28               	incf	(sdc_disk_initialize@count2+1)^0,f,c
 14796                           
 14797                           ;diskio.c: 384: if(buff==0x00)
 14798  001B7A  5029               	movf	sdc_disk_initialize@buff^0,w,c
 14799  001B7C  A4D8               	btfss	status,2,c
 14800  001B7E  D00B               	goto	l11089
 14801                           
 14802                           ;diskio.c: 385: {;diskio.c: 386: posicao_cursor_lcd(1,0);
 14803  001B80  0E00               	movlw	0
 14804  001B82  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
 14805  001B84  0E01               	movlw	1
 14806  001B86  EC80  F027         	call	_posicao_cursor_lcd
 14807                           
 14808                           ;diskio.c: 387: escreve_frase_ram_lcd("SD VER. 1");
 14809  001B8A  0E20               	movlw	low STR_3
 14810  001B8C  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
 14811  001B8E  0E62               	movlw	high STR_3
 14812  001B90  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 14813  001B92  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
 14814  001B96                     l11089:
 14815                           
 14816                           ;diskio.c: 388: };diskio.c: 389: _delay((unsigned long)((1)*(48000000/4000.0)));
 14817  001B96  0E10               	movlw	16
 14818  001B98  6E1D               	movwf	??_sdc_disk_initialize^0,c
 14819  001B9A  0E94               	movlw	148
 14820  001B9C                     u16887:
 14821  001B9C  2EE8               	decfsz	wreg,f,c
 14822  001B9E  D7FE               	bra	u16887
 14823  001BA0  2E1D               	decfsz	??_sdc_disk_initialize^0,f,c
 14824  001BA2  D7FC               	bra	u16887
 14825  001BA4  D000               	nop2	
 14826                           
 14827                           ;diskio.c: 390: }while(buff!=0X00 && count2<10000);
 14828  001BA6  5029               	movf	sdc_disk_initialize@buff^0,w,c
 14829  001BA8  B4D8               	btfsc	status,2,c
 14830  001BAA  D008               	goto	u12540
 14831  001BAC  BE28               	btfsc	(sdc_disk_initialize@count2+1)^0,7,c
 14832  001BAE  D7E0               	goto	l11079
 14833  001BB0  0E10               	movlw	16
 14834  001BB2  5C27               	subwf	sdc_disk_initialize@count2^0,w,c
 14835  001BB4  0E27               	movlw	39
 14836  001BB6  5828               	subwfb	(sdc_disk_initialize@count2+1)^0,w,c
 14837  001BB8  A0D8               	btfss	status,0,c
 14838  001BBA  D7DA               	goto	l11079
 14839  001BBC                     u12540:
 14840                           
 14841                           ;diskio.c: 393: if(count2==10)
 14842  001BBC  0E0A               	movlw	10
 14843  001BBE  1827               	xorwf	sdc_disk_initialize@count2^0,w,c
 14844  001BC0  1028               	iorwf	(sdc_disk_initialize@count2+1)^0,w,c
 14845  001BC2  A4D8               	btfss	status,2,c
 14846  001BC4  D034               	goto	u12580
 14847                           
 14848                           ;diskio.c: 394: {;diskio.c: 395: count2 = 0;
 14849  001BC6  0E00               	movlw	0
 14850  001BC8  6E28               	movwf	(sdc_disk_initialize@count2+1)^0,c
 14851  001BCA  0E00               	movlw	0
 14852  001BCC  6E27               	movwf	sdc_disk_initialize@count2^0,c
 14853                           
 14854                           ;diskio.c: 396: dummy_clocks(10);
 14855  001BCE  0E0A               	movlw	10
 14856  001BD0  EC1A  F02B         	call	_dummy_clocks
 14857                           
 14858                           ;diskio.c: 397: command(0X41, 0X00000000, 0XFF);
 14859  001BD4  0E00               	movlw	0
 14860  001BD6  6E0F               	movwf	command@arg^0,c
 14861  001BD8  0E00               	movlw	0
 14862  001BDA  6E10               	movwf	(command@arg+1)^0,c
 14863  001BDC  0E00               	movlw	0
 14864  001BDE  6E11               	movwf	(command@arg+2)^0,c
 14865  001BE0  0E00               	movlw	0
 14866  001BE2  6E12               	movwf	(command@arg+3)^0,c
 14867  001BE4  0EFF               	movlw	255
 14868  001BE6  6E13               	movwf	command@CRC^0,c
 14869  001BE8  0E41               	movlw	65
 14870  001BEA  ECDD  F027         	call	_command
 14871                           
 14872                           ;diskio.c: 398: proceed();
 14873  001BEE  EC2B  F02E         	call	_proceed	;wreg free
 14874  001BF2                     l11105:
 14875                           
 14876                           ;diskio.c: 400: buff = response();
 14877  001BF2  EC25  F02E         	call	_response	;wreg free
 14878  001BF6  6E29               	movwf	sdc_disk_initialize@buff^0,c
 14879                           
 14880                           ;diskio.c: 401: count2++;
 14881  001BF8  4A27               	infsnz	sdc_disk_initialize@count2^0,f,c
 14882  001BFA  2A28               	incf	(sdc_disk_initialize@count2+1)^0,f,c
 14883                           
 14884                           ;diskio.c: 402: if(buff==0x00)
 14885  001BFC  5029               	movf	sdc_disk_initialize@buff^0,w,c
 14886  001BFE  A4D8               	btfss	status,2,c
 14887  001C00  D00B               	goto	l11115
 14888                           
 14889                           ;diskio.c: 403: {;diskio.c: 404: posicao_cursor_lcd(1,0);
 14890  001C02  0E00               	movlw	0
 14891  001C04  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
 14892  001C06  0E01               	movlw	1
 14893  001C08  EC80  F027         	call	_posicao_cursor_lcd
 14894                           
 14895                           ;diskio.c: 405: escreve_frase_ram_lcd("MMC Ver. 3");
 14896  001C0C  0EE2               	movlw	low STR_4
 14897  001C0E  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
 14898  001C10  0E61               	movlw	high STR_4
 14899  001C12  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 14900  001C14  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
 14901  001C18                     l11115:
 14902                           
 14903                           ;diskio.c: 406: };diskio.c: 408: }while(buff!=0X00 && count2<10000);
 14904  001C18  5029               	movf	sdc_disk_initialize@buff^0,w,c
 14905  001C1A  B4D8               	btfsc	status,2,c
 14906  001C1C  D008               	goto	u12580
 14907  001C1E  BE28               	btfsc	(sdc_disk_initialize@count2+1)^0,7,c
 14908  001C20  D7E8               	goto	l11105
 14909  001C22  0E10               	movlw	16
 14910  001C24  5C27               	subwf	sdc_disk_initialize@count2^0,w,c
 14911  001C26  0E27               	movlw	39
 14912  001C28  5828               	subwfb	(sdc_disk_initialize@count2+1)^0,w,c
 14913  001C2A  A0D8               	btfss	status,0,c
 14914  001C2C  D7E2               	goto	l11105
 14915  001C2E                     u12580:
 14916                           
 14917                           ;diskio.c: 409: };diskio.c: 412: dummy_clocks(10);
 14918  001C2E  0E0A               	movlw	10
 14919  001C30  EC1A  F02B         	call	_dummy_clocks
 14920                           
 14921                           ;diskio.c: 413: command(0X50,0X00000200,0XFF);
 14922  001C34  0E00               	movlw	0
 14923  001C36  6E0F               	movwf	command@arg^0,c
 14924  001C38  0E02               	movlw	2
 14925  001C3A  6E10               	movwf	(command@arg+1)^0,c
 14926  001C3C  0E00               	movlw	0
 14927  001C3E  6E11               	movwf	(command@arg+2)^0,c
 14928  001C40  0E00               	movlw	0
 14929  001C42  6E12               	movwf	(command@arg+3)^0,c
 14930  001C44  0EFF               	movlw	255
 14931  001C46  6E13               	movwf	command@CRC^0,c
 14932  001C48  0E50               	movlw	80
 14933  001C4A  ECDD  F027         	call	_command
 14934                           
 14935                           ;diskio.c: 414: proceed();
 14936  001C4E  EC2B  F02E         	call	_proceed	;wreg free
 14937  001C52                     
 14938                           ;diskio.c: 418: buff = response();
 14939  001C52  EC25  F02E         	call	_response	;wreg free
 14940  001C56  6E29               	movwf	sdc_disk_initialize@buff^0,c
 14941                           
 14942                           ;diskio.c: 419: }while(buff!=0X00);
 14943  001C58  5029               	movf	sdc_disk_initialize@buff^0,w,c
 14944  001C5A  A4D8               	btfss	status,2,c
 14945  001C5C  D7FA               	goto	l11123
 14946  001C5E                     u12590:
 14947                           
 14948                           ;diskio.c: 421: };diskio.c: 425: return stat;
 14949  001C5E  5020               	movf	sdc_disk_initialize@stat^0,w,c
 14950  001C60  0012               	return		;funcret
 14951  001C62                     __end_of_sdc_disk_initialize:
 14952                           	callstack 0
 14953                           
 14954 ;; *************** function _sdc_reset *****************
 14955 ;; Defined at:
 14956 ;;		line 238 in file "bibliotecas/diskio.c"
 14957 ;; Parameters:    Size  Location     Type
 14958 ;;		None
 14959 ;; Auto vars:     Size  Location     Type
 14960 ;;  teste          10    0        unsigned char [10]
 14961 ;;  count           2   25[COMRAM] int 
 14962 ;;  count_nosd      2   23[COMRAM] int 
 14963 ;;  i               2    0        int 
 14964 ;;  receive         2    0        unsigned int 
 14965 ;;  buff            1   27[COMRAM] unsigned char 
 14966 ;;  stat            1    0        unsigned char 
 14967 ;; Return value:  Size  Location     Type
 14968 ;;                  1    wreg      void 
 14969 ;; Registers used:
 14970 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14971 ;; Tracked objects:
 14972 ;;		On entry : 0/0
 14973 ;;		On exit  : 0/0
 14974 ;;		Unchanged: 0/0
 14975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14976 ;;      Params:         0       0       0       0       0       0       0       0       0
 14977 ;;      Locals:         7       0       0       0       0       0       0       0       0
 14978 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14979 ;;      Totals:         7       0       0       0       0       0       0       0       0
 14980 ;;Total ram usage:        7 bytes
 14981 ;; Hardware stack levels used:    1
 14982 ;; Hardware stack levels required when called:    5
 14983 ;; This function calls:
 14984 ;;		_command
 14985 ;;		_escreve_frase_ram_lcd
 14986 ;;		_posicao_cursor_lcd
 14987 ;;		_proceed
 14988 ;;		_response
 14989 ;; This function is called by:
 14990 ;;		_sdc_disk_initialize
 14991 ;; This function uses a non-reentrant model
 14992 ;;
 14993                           
 14994                           	psect	text82
 14995  004810                     __ptext82:
 14996                           	callstack 0
 14997  004810                     _sdc_reset:
 14998                           	callstack 17
 14999                           
 15000                           ;incstack = 0
 15001  004810  0E00               	movlw	0
 15002  004812  6E1B               	movwf	(sdc_reset@count+1)^0,c
 15003  004814  0E00               	movlw	0
 15004  004816  6E1A               	movwf	sdc_reset@count^0,c
 15005  004818  0E00               	movlw	0
 15006  00481A  6E19               	movwf	(sdc_reset@count_nosd+1)^0,c
 15007  00481C  0E00               	movlw	0
 15008  00481E  6E18               	movwf	sdc_reset@count_nosd^0,c
 15009  004820                     l10811:
 15010                           
 15011                           ;diskio.c: 248: command(0x40, 0X00000000, 0X95);
 15012  004820  0E00               	movlw	0
 15013  004822  6E0F               	movwf	command@arg^0,c
 15014  004824  0E00               	movlw	0
 15015  004826  6E10               	movwf	(command@arg+1)^0,c
 15016  004828  0E00               	movlw	0
 15017  00482A  6E11               	movwf	(command@arg+2)^0,c
 15018  00482C  0E00               	movlw	0
 15019  00482E  6E12               	movwf	(command@arg+3)^0,c
 15020  004830  0E95               	movlw	149
 15021  004832  6E13               	movwf	command@CRC^0,c
 15022  004834  0E40               	movlw	64
 15023  004836  ECDD  F027         	call	_command
 15024                           
 15025                           ;diskio.c: 249: proceed();
 15026  00483A  EC2B  F02E         	call	_proceed	;wreg free
 15027  00483E                     l10815:
 15028                           
 15029                           ;diskio.c: 251: buff = response();
 15030  00483E  EC25  F02E         	call	_response	;wreg free
 15031  004842  6E1C               	movwf	sdc_reset@buff^0,c
 15032                           
 15033                           ;diskio.c: 252: count++;
 15034  004844  4A1A               	infsnz	sdc_reset@count^0,f,c
 15035  004846  2A1B               	incf	(sdc_reset@count+1)^0,f,c
 15036                           
 15037                           ;diskio.c: 253: }while(buff!=0X01 && count<10);
 15038  004848  041C               	decf	sdc_reset@buff^0,w,c
 15039  00484A  B4D8               	btfsc	status,2,c
 15040  00484C  D008               	goto	u12120
 15041  00484E  BE1B               	btfsc	(sdc_reset@count+1)^0,7,c
 15042  004850  D7F6               	goto	l10815
 15043  004852  501B               	movf	(sdc_reset@count+1)^0,w,c
 15044  004854  E104               	bnz	u12120
 15045  004856  0E0A               	movlw	10
 15046  004858  5C1A               	subwf	sdc_reset@count^0,w,c
 15047  00485A  A0D8               	btfss	status,0,c
 15048  00485C  D7F0               	goto	l10815
 15049  00485E                     u12120:
 15050                           
 15051                           ;diskio.c: 254: count = 0;
 15052  00485E  0E00               	movlw	0
 15053  004860  6E1B               	movwf	(sdc_reset@count+1)^0,c
 15054  004862  0E00               	movlw	0
 15055  004864  6E1A               	movwf	sdc_reset@count^0,c
 15056                           
 15057                           ;diskio.c: 255: if(buff != 0x01)
 15058  004866  041C               	decf	sdc_reset@buff^0,w,c
 15059  004868  B4D8               	btfsc	status,2,c
 15060  00486A  D016               	goto	l10833
 15061                           
 15062                           ;diskio.c: 256: {;diskio.c: 257: posicao_cursor_lcd(1,0);
 15063  00486C  0E00               	movlw	0
 15064  00486E  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
 15065  004870  0E01               	movlw	1
 15066  004872  EC80  F027         	call	_posicao_cursor_lcd
 15067                           
 15068                           ;diskio.c: 258: escreve_frase_ram_lcd("Sem Cartao");
 15069  004876  0EED               	movlw	low STR_1
 15070  004878  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
 15071  00487A  0E61               	movlw	high STR_1
 15072  00487C  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 15073  00487E  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
 15074                           
 15075                           ;diskio.c: 259: posicao_cursor_lcd(2,0);
 15076  004882  0E00               	movlw	0
 15077  004884  6E0D               	movwf	posicao_cursor_lcd@coluna^0,c
 15078  004886  0E02               	movlw	2
 15079  004888  EC80  F027         	call	_posicao_cursor_lcd
 15080                           
 15081                           ;diskio.c: 260: escreve_frase_ram_lcd("Insira o Cartao");
 15082  00488C  0E8E               	movlw	low STR_2
 15083  00488E  6E0D               	movwf	escreve_frase_ram_lcd@buffer^0,c
 15084  004890  0E61               	movlw	high STR_2
 15085  004892  6E0E               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 15086  004894  ECE2  F028         	call	_escreve_frase_ram_lcd	;wreg free
 15087  004898                     l10833:
 15088                           
 15089                           ;diskio.c: 261: };diskio.c: 263: }while(buff!=0X01);
 15090  004898  041C               	decf	sdc_reset@buff^0,w,c
 15091  00489A  B4D8               	btfsc	status,2,c
 15092  00489C  0012               	return	
 15093  00489E  D7C0               	goto	l10811
 15094  0048A0                     __end_of_sdc_reset:
 15095                           	callstack 0
 15096                           
 15097 ;; *************** function _posicao_cursor_lcd *****************
 15098 ;; Defined at:
 15099 ;;		line 271 in file "bibliotecas/display_lcd.c"
 15100 ;; Parameters:    Size  Location     Type
 15101 ;;  linha           1    wreg     unsigned char 
 15102 ;;  coluna          1   12[COMRAM] unsigned char 
 15103 ;; Auto vars:     Size  Location     Type
 15104 ;;  linha           1   13[COMRAM] unsigned char 
 15105 ;;  endereco        1   14[COMRAM] unsigned char 
 15106 ;; Return value:  Size  Location     Type
 15107 ;;                  1    wreg      void 
 15108 ;; Registers used:
 15109 ;;		wreg, status,2, status,0, cstack
 15110 ;; Tracked objects:
 15111 ;;		On entry : 0/0
 15112 ;;		On exit  : 0/0
 15113 ;;		Unchanged: 0/0
 15114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15115 ;;      Params:         1       0       0       0       0       0       0       0       0
 15116 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15117 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15118 ;;      Totals:         3       0       0       0       0       0       0       0       0
 15119 ;;Total ram usage:        3 bytes
 15120 ;; Hardware stack levels used:    1
 15121 ;; Hardware stack levels required when called:    4
 15122 ;; This function calls:
 15123 ;;		_endereco_cursor_lcd
 15124 ;; This function is called by:
 15125 ;;		_sdc_reset
 15126 ;;		_sdc_disk_initialize
 15127 ;;		_get_fix
 15128 ;;		_mostra_dados_display
 15129 ;;		_mensagem_inicial
 15130 ;;		_troca_de_tela
 15131 ;; This function uses a non-reentrant model
 15132 ;;
 15133                           
 15134                           	psect	text83
 15135  004F00                     __ptext83:
 15136                           	callstack 0
 15137  004F00                     _posicao_cursor_lcd:
 15138                           	callstack 25
 15139                           
 15140                           ;incstack = 0
 15141                           ;posicao_cursor_lcd@linha stored from wreg
 15142  004F00  6E0E               	movwf	posicao_cursor_lcd@linha^0,c
 15143                           
 15144                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 15145  004F02  0E11               	movlw	17
 15146  004F04  600D               	cpfslt	posicao_cursor_lcd@coluna^0,c
 15147  004F06  0012               	return	
 15148  004F08  D01B               	goto	l10675
 15149  004F0A                     l232:
 15150                           
 15151                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 15152  004F0A  C00D  F00F         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 15153                           
 15154                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 15155  004F0E  500F               	movf	posicao_cursor_lcd@endereco^0,w,c
 15156  004F10  EC7F  F026         	call	_endereco_cursor_lcd
 15157                           
 15158                           ;display_lcd.c: 284: break;
 15159  004F14  D022               	goto	l10677
 15160  004F16                     l10659:
 15161                           
 15162                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 15163  004F16  500D               	movf	posicao_cursor_lcd@coluna^0,w,c
 15164  004F18  0F40               	addlw	64
 15165  004F1A  6E0F               	movwf	posicao_cursor_lcd@endereco^0,c
 15166                           
 15167                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 15168  004F1C  500F               	movf	posicao_cursor_lcd@endereco^0,w,c
 15169  004F1E  EC7F  F026         	call	_endereco_cursor_lcd
 15170                           
 15171                           ;display_lcd.c: 289: break;
 15172  004F22  D01B               	goto	l10677
 15173  004F24                     l10663:
 15174                           
 15175                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 15176  004F24  500D               	movf	posicao_cursor_lcd@coluna^0,w,c
 15177  004F26  0F14               	addlw	20
 15178  004F28  6E0F               	movwf	posicao_cursor_lcd@endereco^0,c
 15179                           
 15180                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 15181  004F2A  500F               	movf	posicao_cursor_lcd@endereco^0,w,c
 15182  004F2C  EC7F  F026         	call	_endereco_cursor_lcd
 15183                           
 15184                           ;display_lcd.c: 294: break;
 15185  004F30  D014               	goto	l10677
 15186  004F32                     l10667:
 15187                           
 15188                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 15189  004F32  500D               	movf	posicao_cursor_lcd@coluna^0,w,c
 15190  004F34  0F54               	addlw	84
 15191  004F36  6E0F               	movwf	posicao_cursor_lcd@endereco^0,c
 15192                           
 15193                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 15194  004F38  500F               	movf	posicao_cursor_lcd@endereco^0,w,c
 15195  004F3A  EC7F  F026         	call	_endereco_cursor_lcd
 15196                           
 15197                           ;display_lcd.c: 303: break;
 15198                           
 15199                           ;display_lcd.c: 299: break;
 15200  004F3E  D00D               	goto	l10677
 15201  004F40                     l10675:
 15202  004F40  500E               	movf	posicao_cursor_lcd@linha^0,w,c
 15203                           
 15204                           ; Switch size 1, requested type "simple"
 15205                           ; Number of cases is 4, Range of values is 1 to 4
 15206                           ; switch strategies available:
 15207                           ; Name         Instructions Cycles
 15208                           ; simple_byte           13     7 (average)
 15209                           ;	Chosen strategy is simple_byte
 15210  004F42  0A01               	xorlw	1	; case 1
 15211  004F44  B4D8               	btfsc	status,2,c
 15212  004F46  D7E1               	goto	l232
 15213  004F48  0A03               	xorlw	3	; case 2
 15214  004F4A  B4D8               	btfsc	status,2,c
 15215  004F4C  D7E4               	goto	l10659
 15216  004F4E  0A01               	xorlw	1	; case 3
 15217  004F50  B4D8               	btfsc	status,2,c
 15218  004F52  D7E8               	goto	l10663
 15219  004F54  0A07               	xorlw	7	; case 4
 15220  004F56  B4D8               	btfsc	status,2,c
 15221  004F58  D7EC               	goto	l10667
 15222  004F5A                     l10677:
 15223                           
 15224                           ;display_lcd.c: 306: coluna++;
 15225  004F5A  2A0D               	incf	posicao_cursor_lcd@coluna^0,f,c
 15226                           
 15227                           ;display_lcd.c: 307: }
 15228  004F5C  0012               	return	
 15229  004F5E                     __end_of_posicao_cursor_lcd:
 15230                           	callstack 0
 15231                           
 15232 ;; *************** function _endereco_cursor_lcd *****************
 15233 ;; Defined at:
 15234 ;;		line 218 in file "bibliotecas/display_lcd.c"
 15235 ;; Parameters:    Size  Location     Type
 15236 ;;  endereco        1    wreg     unsigned char 
 15237 ;; Auto vars:     Size  Location     Type
 15238 ;;  endereco        1   11[COMRAM] unsigned char 
 15239 ;; Return value:  Size  Location     Type
 15240 ;;                  1    wreg      void 
 15241 ;; Registers used:
 15242 ;;		wreg, status,2, status,0, cstack
 15243 ;; Tracked objects:
 15244 ;;		On entry : 0/0
 15245 ;;		On exit  : 0/0
 15246 ;;		Unchanged: 0/0
 15247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15248 ;;      Params:         0       0       0       0       0       0       0       0       0
 15249 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15250 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15251 ;;      Totals:         1       0       0       0       0       0       0       0       0
 15252 ;;Total ram usage:        1 bytes
 15253 ;; Hardware stack levels used:    1
 15254 ;; Hardware stack levels required when called:    3
 15255 ;; This function calls:
 15256 ;;		_delay
 15257 ;; This function is called by:
 15258 ;;		_posicao_cursor_lcd
 15259 ;; This function uses a non-reentrant model
 15260 ;;
 15261                           
 15262                           	psect	text84
 15263  004CFE                     __ptext84:
 15264                           	callstack 0
 15265  004CFE                     _endereco_cursor_lcd:
 15266                           	callstack 25
 15267                           
 15268                           ;incstack = 0
 15269                           ;endereco_cursor_lcd@endereco stored from wreg
 15270  004CFE  6E0C               	movwf	endereco_cursor_lcd@endereco^0,c
 15271                           
 15272                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 15273  004D00  9483               	bcf	131,2,c	;volatile
 15274                           
 15275                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 15276  004D02  9283               	bcf	131,1,c	;volatile
 15277                           
 15278                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 15279  004D04  9083               	bcf	131,0,c	;volatile
 15280                           
 15281                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 15282  004D06  8E83               	bsf	131,7,c	;volatile
 15283                           
 15284                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 15285  004D08  A80C               	btfss	endereco_cursor_lcd@endereco^0,4,c
 15286  004D0A  D002               	goto	l213
 15287  004D0C  8883               	bsf	131,4,c	;volatile
 15288  004D0E  D001               	goto	l10513
 15289  004D10                     l213:
 15290                           
 15291                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 15292  004D10  9883               	bcf	131,4,c	;volatile
 15293  004D12                     l10513:
 15294                           
 15295                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 15296  004D12  AA0C               	btfss	endereco_cursor_lcd@endereco^0,5,c
 15297  004D14  D002               	goto	l215
 15298  004D16  8A83               	bsf	131,5,c	;volatile
 15299  004D18  D001               	goto	l10517
 15300  004D1A                     l215:
 15301                           
 15302                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 15303  004D1A  9A83               	bcf	131,5,c	;volatile
 15304  004D1C                     l10517:
 15305                           
 15306                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 15307  004D1C  AC0C               	btfss	endereco_cursor_lcd@endereco^0,6,c
 15308  004D1E  D002               	goto	l217
 15309  004D20  8C83               	bsf	131,6,c	;volatile
 15310  004D22  D001               	goto	l218
 15311  004D24                     l217:
 15312                           
 15313                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 15314  004D24  9C83               	bcf	131,6,c	;volatile
 15315  004D26                     l218:
 15316                           
 15317                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 15318  004D26  8083               	bsf	131,0,c	;volatile
 15319                           
 15320                           ;display_lcd.c: 236: delay();
 15321  004D28  EC92  F02D         	call	_delay	;wreg free
 15322                           
 15323                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 15324  004D2C  9083               	bcf	131,0,c	;volatile
 15325                           
 15326                           ;display_lcd.c: 238: delay();
 15327  004D2E  EC92  F02D         	call	_delay	;wreg free
 15328                           
 15329                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 15330  004D32  A00C               	btfss	endereco_cursor_lcd@endereco^0,0,c
 15331  004D34  D002               	goto	l219
 15332  004D36  8883               	bsf	131,4,c	;volatile
 15333  004D38  D001               	goto	l220
 15334  004D3A                     l219:
 15335                           
 15336                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 15337  004D3A  9883               	bcf	131,4,c	;volatile
 15338  004D3C                     l220:
 15339                           
 15340                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 15341  004D3C  A20C               	btfss	endereco_cursor_lcd@endereco^0,1,c
 15342  004D3E  D002               	goto	l221
 15343  004D40  8A83               	bsf	131,5,c	;volatile
 15344  004D42  D001               	goto	l222
 15345  004D44                     l221:
 15346                           
 15347                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 15348  004D44  9A83               	bcf	131,5,c	;volatile
 15349  004D46                     l222:
 15350                           
 15351                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 15352  004D46  A40C               	btfss	endereco_cursor_lcd@endereco^0,2,c
 15353  004D48  D002               	goto	l223
 15354  004D4A  8C83               	bsf	131,6,c	;volatile
 15355  004D4C  D001               	goto	l224
 15356  004D4E                     l223:
 15357                           
 15358                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 15359  004D4E  9C83               	bcf	131,6,c	;volatile
 15360  004D50                     l224:
 15361                           
 15362                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 15363  004D50  A60C               	btfss	endereco_cursor_lcd@endereco^0,3,c
 15364  004D52  D002               	goto	l225
 15365  004D54  8E83               	bsf	131,7,c	;volatile
 15366  004D56  D001               	goto	l226
 15367  004D58                     l225:
 15368                           
 15369                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 15370  004D58  9E83               	bcf	131,7,c	;volatile
 15371  004D5A                     l226:
 15372                           
 15373                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 15374  004D5A  8083               	bsf	131,0,c	;volatile
 15375                           
 15376                           ;display_lcd.c: 252: delay();
 15377  004D5C  EC92  F02D         	call	_delay	;wreg free
 15378                           
 15379                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 15380  004D60  9083               	bcf	131,0,c	;volatile
 15381                           
 15382                           ;display_lcd.c: 254: delay();
 15383  004D62  EC92  F02D         	call	_delay	;wreg free
 15384  004D66  0012               	return		;funcret
 15385  004D68                     __end_of_endereco_cursor_lcd:
 15386                           	callstack 0
 15387                           
 15388 ;; *************** function _escreve_frase_ram_lcd *****************
 15389 ;; Defined at:
 15390 ;;		line 445 in file "bibliotecas/display_lcd.c"
 15391 ;; Parameters:    Size  Location     Type
 15392 ;;  buffer          2   12[COMRAM] PTR unsigned char 
 15393 ;;		 -> STR_33(8), STR_32(9), STR_31(4), STR_30(4), 
 15394 ;;		 -> STR_29(5), STR_28(2), STR_27(5), STR_26(7), 
 15395 ;;		 -> STR_25(7), STR_24(2), STR_23(5), STR_22(7), 
 15396 ;;		 -> STR_19(11), mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), STR_10(9), 
 15397 ;;		 -> STR_9(10), STR_8(10), STR_7(14), STR_6(21), 
 15398 ;;		 -> STR_5(15), rawLongitude(13), rawLatitude(12), escreve_inteiro_lcd@texto(7), 
 15399 ;;		 -> STR_4(11), STR_3(10), STR_2(16), STR_1(11), 
 15400 ;; Auto vars:     Size  Location     Type
 15401 ;;		None
 15402 ;; Return value:  Size  Location     Type
 15403 ;;                  1    wreg      void 
 15404 ;; Registers used:
 15405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15406 ;; Tracked objects:
 15407 ;;		On entry : 0/0
 15408 ;;		On exit  : 0/0
 15409 ;;		Unchanged: 0/0
 15410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15411 ;;      Params:         2       0       0       0       0       0       0       0       0
 15412 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15413 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15414 ;;      Totals:         2       0       0       0       0       0       0       0       0
 15415 ;;Total ram usage:        2 bytes
 15416 ;; Hardware stack levels used:    1
 15417 ;; Hardware stack levels required when called:    4
 15418 ;; This function calls:
 15419 ;;		_escreve_caractere_lcd
 15420 ;; This function is called by:
 15421 ;;		_sdc_reset
 15422 ;;		_sdc_disk_initialize
 15423 ;;		_escreve_inteiro_lcd
 15424 ;;		_mostra_dados_display
 15425 ;;		_mensagem_inicial
 15426 ;;		_troca_de_tela
 15427 ;; This function uses a non-reentrant model
 15428 ;;
 15429                           
 15430                           	psect	text85
 15431  0051C4                     __ptext85:
 15432                           	callstack 0
 15433  0051C4                     _escreve_frase_ram_lcd:
 15434                           	callstack 25
 15435                           
 15436                           ;display_lcd.c: 447: while(*buffer)
 15437                           
 15438                           ;incstack = 0
 15439  0051C4  D014               	goto	l10687
 15440  0051C6                     l10683:
 15441                           
 15442                           ;display_lcd.c: 448: {;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 15443  0051C6  C00D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 15444  0051CA  C00E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 15445  0051CE  6AF8               	clrf	tblptru,c
 15446  0051D0  0E07               	movlw	(high __ramtop+-1)
 15447  0051D2  64F7               	cpfsgt	tblptrh,c
 15448  0051D4  D003               	bra	u11897
 15449  0051D6  0008               	tblrd		*
 15450  0051D8  50F5               	movf	tablat,w,c
 15451  0051DA  D005               	bra	u11890
 15452  0051DC                     u11897:
 15453  0051DC  CFF6 FFE1          	movff	tblptrl,fsr1l
 15454  0051E0  CFF7 FFE2          	movff	tblptrh,fsr1h
 15455  0051E4  50E7               	movf	indf1,w,c
 15456  0051E6                     u11890:
 15457  0051E6  EC0F  F026         	call	_escreve_caractere_lcd
 15458                           
 15459                           ;display_lcd.c: 450: buffer++;
 15460  0051EA  4A0D               	infsnz	escreve_frase_ram_lcd@buffer^0,f,c
 15461  0051EC  2A0E               	incf	(escreve_frase_ram_lcd@buffer+1)^0,f,c
 15462  0051EE                     l10687:
 15463  0051EE  C00D  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 15464  0051F2  C00E  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 15465  0051F6  6AF8               	clrf	tblptru,c
 15466  0051F8  0E07               	movlw	(high __ramtop+-1)
 15467  0051FA  64F7               	cpfsgt	tblptrh,c
 15468  0051FC  D003               	bra	u11907
 15469  0051FE  0008               	tblrd		*
 15470  005200  50F5               	movf	tablat,w,c
 15471  005202  D005               	bra	u11900
 15472  005204                     u11907:
 15473  005204  CFF6 FFE1          	movff	tblptrl,fsr1l
 15474  005208  CFF7 FFE2          	movff	tblptrh,fsr1h
 15475  00520C  50E7               	movf	indf1,w,c
 15476  00520E                     u11900:
 15477  00520E  0900               	iorlw	0
 15478  005210  B4D8               	btfsc	status,2,c
 15479  005212  0012               	return	
 15480  005214  D7D8               	goto	l10683
 15481  005216                     __end_of_escreve_frase_ram_lcd:
 15482                           	callstack 0
 15483                           
 15484 ;; *************** function _escreve_caractere_lcd *****************
 15485 ;; Defined at:
 15486 ;;		line 323 in file "bibliotecas/display_lcd.c"
 15487 ;; Parameters:    Size  Location     Type
 15488 ;;  data            1    wreg     unsigned char 
 15489 ;; Auto vars:     Size  Location     Type
 15490 ;;  data            1   11[COMRAM] unsigned char 
 15491 ;; Return value:  Size  Location     Type
 15492 ;;                  1    wreg      void 
 15493 ;; Registers used:
 15494 ;;		wreg, status,2, status,0, cstack
 15495 ;; Tracked objects:
 15496 ;;		On entry : 0/1
 15497 ;;		On exit  : 0/0
 15498 ;;		Unchanged: 0/0
 15499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15500 ;;      Params:         0       0       0       0       0       0       0       0       0
 15501 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15502 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15503 ;;      Totals:         1       0       0       0       0       0       0       0       0
 15504 ;;Total ram usage:        1 bytes
 15505 ;; Hardware stack levels used:    1
 15506 ;; Hardware stack levels required when called:    3
 15507 ;; This function calls:
 15508 ;;		_delay
 15509 ;; This function is called by:
 15510 ;;		_escreve_frase_ram_lcd
 15511 ;;		_get_fix
 15512 ;;		_troca_de_tela
 15513 ;; This function uses a non-reentrant model
 15514 ;;
 15515                           
 15516                           	psect	text86
 15517  004C1E                     __ptext86:
 15518                           	callstack 0
 15519  004C1E                     _escreve_caractere_lcd:
 15520                           	callstack 25
 15521                           
 15522                           ;incstack = 0
 15523                           ;escreve_caractere_lcd@data stored from wreg
 15524  004C1E  6E0C               	movwf	escreve_caractere_lcd@data^0,c
 15525                           
 15526                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 15527  004C20  9483               	bcf	131,2,c	;volatile
 15528                           
 15529                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 15530  004C22  8283               	bsf	131,1,c	;volatile
 15531                           
 15532                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 15533  004C24  9083               	bcf	131,0,c	;volatile
 15534                           
 15535                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 15536  004C26  A80C               	btfss	escreve_caractere_lcd@data^0,4,c
 15537  004C28  D002               	goto	l242
 15538  004C2A  8883               	bsf	131,4,c	;volatile
 15539  004C2C  D001               	goto	l10545
 15540  004C2E                     l242:
 15541                           
 15542                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 15543  004C2E  9883               	bcf	131,4,c	;volatile
 15544  004C30                     l10545:
 15545                           
 15546                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 15547  004C30  AA0C               	btfss	escreve_caractere_lcd@data^0,5,c
 15548  004C32  D002               	goto	l244
 15549  004C34  8A83               	bsf	131,5,c	;volatile
 15550  004C36  D001               	goto	l10549
 15551  004C38                     l244:
 15552                           
 15553                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 15554  004C38  9A83               	bcf	131,5,c	;volatile
 15555  004C3A                     l10549:
 15556                           
 15557                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 15558  004C3A  AC0C               	btfss	escreve_caractere_lcd@data^0,6,c
 15559  004C3C  D002               	goto	l246
 15560  004C3E  8C83               	bsf	131,6,c	;volatile
 15561  004C40  D001               	goto	l10553
 15562  004C42                     l246:
 15563                           
 15564                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 15565  004C42  9C83               	bcf	131,6,c	;volatile
 15566  004C44                     l10553:
 15567                           
 15568                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 15569  004C44  AE0C               	btfss	escreve_caractere_lcd@data^0,7,c
 15570  004C46  D002               	goto	l248
 15571  004C48  8E83               	bsf	131,7,c	;volatile
 15572  004C4A  D001               	goto	l249
 15573  004C4C                     l248:
 15574                           
 15575                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 15576  004C4C  9E83               	bcf	131,7,c	;volatile
 15577  004C4E                     l249:
 15578                           
 15579                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 15580  004C4E  8083               	bsf	131,0,c	;volatile
 15581                           
 15582                           ;display_lcd.c: 342: delay();
 15583  004C50  EC92  F02D         	call	_delay	;wreg free
 15584                           
 15585                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 15586  004C54  9083               	bcf	131,0,c	;volatile
 15587                           
 15588                           ;display_lcd.c: 344: delay();
 15589  004C56  EC92  F02D         	call	_delay	;wreg free
 15590                           
 15591                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 15592  004C5A  A00C               	btfss	escreve_caractere_lcd@data^0,0,c
 15593  004C5C  D002               	goto	l250
 15594  004C5E  8883               	bsf	131,4,c	;volatile
 15595  004C60  D001               	goto	l251
 15596  004C62                     l250:
 15597                           
 15598                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 15599  004C62  9883               	bcf	131,4,c	;volatile
 15600  004C64                     l251:
 15601                           
 15602                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 15603  004C64  A20C               	btfss	escreve_caractere_lcd@data^0,1,c
 15604  004C66  D002               	goto	l252
 15605  004C68  8A83               	bsf	131,5,c	;volatile
 15606  004C6A  D001               	goto	l253
 15607  004C6C                     l252:
 15608                           
 15609                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 15610  004C6C  9A83               	bcf	131,5,c	;volatile
 15611  004C6E                     l253:
 15612                           
 15613                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 15614  004C6E  A40C               	btfss	escreve_caractere_lcd@data^0,2,c
 15615  004C70  D002               	goto	l254
 15616  004C72  8C83               	bsf	131,6,c	;volatile
 15617  004C74  D001               	goto	l255
 15618  004C76                     l254:
 15619                           
 15620                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 15621  004C76  9C83               	bcf	131,6,c	;volatile
 15622  004C78                     l255:
 15623                           
 15624                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 15625  004C78  A60C               	btfss	escreve_caractere_lcd@data^0,3,c
 15626  004C7A  D002               	goto	l256
 15627  004C7C  8E83               	bsf	131,7,c	;volatile
 15628  004C7E  D001               	goto	l257
 15629  004C80                     l256:
 15630                           
 15631                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 15632  004C80  9E83               	bcf	131,7,c	;volatile
 15633  004C82                     l257:
 15634                           
 15635                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 15636  004C82  8083               	bsf	131,0,c	;volatile
 15637                           
 15638                           ;display_lcd.c: 359: delay();
 15639  004C84  EC92  F02D         	call	_delay	;wreg free
 15640                           
 15641                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 15642  004C88  9083               	bcf	131,0,c	;volatile
 15643                           
 15644                           ;display_lcd.c: 361: delay();
 15645  004C8A  EC92  F02D         	call	_delay	;wreg free
 15646  004C8E  0012               	return		;funcret
 15647  004C90                     __end_of_escreve_caractere_lcd:
 15648                           	callstack 0
 15649                           
 15650 ;; *************** function _delay *****************
 15651 ;; Defined at:
 15652 ;;		line 45 in file "bibliotecas/display_lcd.c"
 15653 ;; Parameters:    Size  Location     Type
 15654 ;;		None
 15655 ;; Auto vars:     Size  Location     Type
 15656 ;;  contador_int    1   10[COMRAM] unsigned char 
 15657 ;;  contador_ext    1    9[COMRAM] unsigned char 
 15658 ;; Return value:  Size  Location     Type
 15659 ;;                  1    wreg      void 
 15660 ;; Registers used:
 15661 ;;		wreg, status,2, status,0
 15662 ;; Tracked objects:
 15663 ;;		On entry : 0/0
 15664 ;;		On exit  : 0/0
 15665 ;;		Unchanged: 0/0
 15666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15667 ;;      Params:         0       0       0       0       0       0       0       0       0
 15668 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15669 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15670 ;;      Totals:         2       0       0       0       0       0       0       0       0
 15671 ;;Total ram usage:        2 bytes
 15672 ;; Hardware stack levels used:    1
 15673 ;; Hardware stack levels required when called:    2
 15674 ;; This function calls:
 15675 ;;		Nothing
 15676 ;; This function is called by:
 15677 ;;		_init_lcd
 15678 ;;		_escreve_cmd_lcd
 15679 ;;		_endereco_cursor_lcd
 15680 ;;		_escreve_caractere_lcd
 15681 ;; This function uses a non-reentrant model
 15682 ;;
 15683                           
 15684                           	psect	text87
 15685  005B24                     __ptext87:
 15686                           	callstack 0
 15687  005B24                     _delay:
 15688                           	callstack 25
 15689                           
 15690                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;;display_lcd.c: 49: for(con
      +                          tador_ext = 0; contador_ext<100; contador_ext++)
 15691                           
 15692                           ;incstack = 0
 15693  005B24  0E00               	movlw	0
 15694  005B26  6E0A               	movwf	delay@contador_ext^0,c
 15695  005B28                     l181:
 15696                           
 15697                           ;display_lcd.c: 50: {;display_lcd.c: 51: __nop();
 15698  005B28  F000               	nop	
 15699                           
 15700                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 15701  005B2A  0E00               	movlw	0
 15702  005B2C  6E0B               	movwf	delay@contador_int^0,c
 15703  005B2E                     l183:
 15704                           
 15705                           ;display_lcd.c: 53: {;display_lcd.c: 54: __nop();
 15706  005B2E  F000               	nop	
 15707  005B30  2A0B               	incf	delay@contador_int^0,f,c
 15708  005B32  0E31               	movlw	49
 15709  005B34  640B               	cpfsgt	delay@contador_int^0,c
 15710  005B36  D7FB               	goto	l183
 15711  005B38  2A0A               	incf	delay@contador_ext^0,f,c
 15712  005B3A  0E63               	movlw	99
 15713  005B3C  640A               	cpfsgt	delay@contador_ext^0,c
 15714  005B3E  D7F4               	goto	l181
 15715  005B40  0012               	return	
 15716  005B42                     __end_of_delay:
 15717                           	callstack 0
 15718                           
 15719 ;; *************** function _check_fs *****************
 15720 ;; Defined at:
 15721 ;;		line 624 in file "bibliotecas/tff.c"
 15722 ;; Parameters:    Size  Location     Type
 15723 ;;  sect            4   52[COMRAM] unsigned long 
 15724 ;; Auto vars:     Size  Location     Type
 15725 ;;  fs              2   58[COMRAM] PTR struct _FATFS
 15726 ;;		 -> NULL(0), fs(544), 
 15727 ;; Return value:  Size  Location     Type
 15728 ;;                  1    wreg      unsigned char 
 15729 ;; Registers used:
 15730 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15731 ;; Tracked objects:
 15732 ;;		On entry : 3F/0
 15733 ;;		On exit  : 0/0
 15734 ;;		Unchanged: 0/0
 15735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15736 ;;      Params:         4       0       0       0       0       0       0       0       0
 15737 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15738 ;;      Temps:          2       0       0       0       0       0       0       0       0
 15739 ;;      Totals:         8       0       0       0       0       0       0       0       0
 15740 ;;Total ram usage:        8 bytes
 15741 ;; Hardware stack levels used:    1
 15742 ;; Hardware stack levels required when called:    7
 15743 ;; This function calls:
 15744 ;;		_disk_read
 15745 ;;		_memcmp
 15746 ;; This function is called by:
 15747 ;;		_auto_mount
 15748 ;; This function uses a non-reentrant model
 15749 ;;
 15750                           
 15751                           	psect	text88
 15752  0049B0                     __ptext88:
 15753                           	callstack 0
 15754  0049B0                     _check_fs:
 15755                           	callstack 17
 15756                           
 15757                           ; BSR set to: 0
 15758                           ;tff.c: 628: FATFS *fs = FatFs;
 15759                           
 15760                           ;incstack = 0
 15761  0049B0  C04D  F03B         	movff	_FatFs,check_fs@fs
 15762  0049B4  C04E  F03C         	movff	_FatFs+1,check_fs@fs+1
 15763                           
 15764                           ; BSR set to: 0
 15765                           ;tff.c: 630: if (disk_read(0, fs->win, sect, 1) != RES_OK)
 15766  0049B8  0E20               	movlw	32
 15767  0049BA  243B               	addwf	check_fs@fs^0,w,c
 15768  0049BC  6E29               	movwf	disk_read@buff^0,c
 15769  0049BE  0E00               	movlw	0
 15770  0049C0  203C               	addwfc	(check_fs@fs+1)^0,w,c
 15771  0049C2  6E2A               	movwf	(disk_read@buff+1)^0,c
 15772  0049C4  C035  F02B         	movff	check_fs@sect,disk_read@sector
 15773  0049C8  C036  F02C         	movff	check_fs@sect+1,disk_read@sector+1
 15774  0049CC  C037  F02D         	movff	check_fs@sect+2,disk_read@sector+2
 15775  0049D0  C038  F02E         	movff	check_fs@sect+3,disk_read@sector+3
 15776  0049D4  0E01               	movlw	1
 15777  0049D6  6E2F               	movwf	disk_read@count^0,c
 15778  0049D8  0E00               	movlw	0
 15779  0049DA  EC48  F026         	call	_disk_read
 15780  0049DE  0900               	iorlw	0
 15781  0049E0  B4D8               	btfsc	status,2,c
 15782  0049E2  D002               	goto	l11551
 15783  0049E4                     u13300:
 15784  0049E4                     l11547:
 15785                           
 15786                           ;tff.c: 631: return 2;
 15787  0049E4  0E02               	movlw	2
 15788  0049E6  0012               	return	
 15789  0049E8                     l11551:
 15790                           
 15791                           ;tff.c: 632: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 15792  0049E8  EE22 F01E          	lfsr	2,542
 15793  0049EC  503B               	movf	check_fs@fs^0,w,c
 15794  0049EE  26D9               	addwf	fsr2l,f,c
 15795  0049F0  503C               	movf	(check_fs@fs+1)^0,w,c
 15796  0049F2  22DA               	addwfc	fsr2h,f,c
 15797  0049F4  0E55               	movlw	85
 15798  0049F6  18DE               	xorwf	postinc2,w,c
 15799  0049F8  E1F5               	bnz	l11547
 15800  0049FA  0EAA               	movlw	170
 15801  0049FC  18DE               	xorwf	postinc2,w,c
 15802  0049FE  A4D8               	btfss	status,2,c
 15803  004A00  D7F1               	goto	u13300
 15804                           
 15805                           ;tff.c: 635: if (!memcmp(&fs->win[54], "FAT", 3))
 15806  004A02  0E56               	movlw	86
 15807  004A04  243B               	addwf	check_fs@fs^0,w,c
 15808  004A06  6E0A               	movwf	memcmp@s1^0,c
 15809  004A08  0E00               	movlw	0
 15810  004A0A  203C               	addwfc	(check_fs@fs+1)^0,w,c
 15811  004A0C  6E0B               	movwf	(memcmp@s1+1)^0,c
 15812  004A0E  0E76               	movlw	low STR_17
 15813  004A10  6E0C               	movwf	memcmp@s2^0,c
 15814  004A12  0E62               	movlw	high STR_17
 15815  004A14  6E0D               	movwf	(memcmp@s2+1)^0,c
 15816  004A16  0E00               	movlw	0
 15817  004A18  6E0F               	movwf	(memcmp@n+1)^0,c
 15818  004A1A  0E03               	movlw	3
 15819  004A1C  6E0E               	movwf	memcmp@n^0,c
 15820  004A1E  ECBF  F023         	call	_memcmp	;wreg free
 15821  004A22  500A               	movf	?_memcmp^0,w,c
 15822  004A24  100B               	iorwf	(?_memcmp+1)^0,w,c
 15823  004A26  A4D8               	btfss	status,2,c
 15824  004A28  D002               	goto	l11563
 15825                           
 15826                           ;tff.c: 636: return 0;
 15827  004A2A  0E00               	movlw	0
 15828  004A2C  0012               	return	
 15829  004A2E                     l11563:
 15830                           
 15831                           ;tff.c: 641: return 1;
 15832  004A2E  0E01               	movlw	1
 15833  004A30  0012               	return		;funcret
 15834  004A32                     __end_of_check_fs:
 15835                           	callstack 0
 15836                           
 15837 ;; *************** function _memcmp *****************
 15838 ;; Defined at:
 15839 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\memcmp.c"
 15840 ;; Parameters:    Size  Location     Type
 15841 ;;  s1              2    9[COMRAM] PTR const void 
 15842 ;;		 -> fs.win(512), NULL(0), fs(544), 
 15843 ;;  s2              2   11[COMRAM] PTR const void 
 15844 ;;		 -> f_opendir@fn(12), f_open@fn(12), STR_17(4), 
 15845 ;;  n               2   13[COMRAM] unsigned int 
 15846 ;; Auto vars:     Size  Location     Type
 15847 ;;		None
 15848 ;; Return value:  Size  Location     Type
 15849 ;;                  2    9[COMRAM] int 
 15850 ;; Registers used:
 15851 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15852 ;; Tracked objects:
 15853 ;;		On entry : 0/0
 15854 ;;		On exit  : 0/0
 15855 ;;		Unchanged: 0/0
 15856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15857 ;;      Params:         6       0       0       0       0       0       0       0       0
 15858 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15859 ;;      Temps:          2       0       0       0       0       0       0       0       0
 15860 ;;      Totals:         8       0       0       0       0       0       0       0       0
 15861 ;;Total ram usage:        8 bytes
 15862 ;; Hardware stack levels used:    1
 15863 ;; Hardware stack levels required when called:    2
 15864 ;; This function calls:
 15865 ;;		Nothing
 15866 ;; This function is called by:
 15867 ;;		_trace_path
 15868 ;;		_check_fs
 15869 ;; This function uses a non-reentrant model
 15870 ;;
 15871                           
 15872                           	psect	text89
 15873  00477E                     __ptext89:
 15874                           	callstack 0
 15875  00477E                     _memcmp:
 15876                           	callstack 22
 15877                           
 15878                           ;incstack = 0
 15879  00477E  D03B               	goto	l11185
 15880  004780                     l11177:
 15881  004780  C00A  FFD9         	movff	memcmp@s1,fsr2l
 15882  004784  C00B  FFDA         	movff	memcmp@s1+1,fsr2h
 15883  004788  50DF               	movf	indf2,w,c
 15884  00478A  6E10               	movwf	??_memcmp^0,c
 15885  00478C  C00C  FFF6         	movff	memcmp@s2,tblptrl
 15886  004790  C00D  FFF7         	movff	memcmp@s2+1,tblptrh
 15887  004794  6AF8               	clrf	tblptru,c
 15888  004796  0E07               	movlw	(high __ramtop+-1)
 15889  004798  64F7               	cpfsgt	tblptrh,c
 15890  00479A  D003               	bra	u12617
 15891  00479C  0008               	tblrd		*
 15892  00479E  50F5               	movf	tablat,w,c
 15893  0047A0  D005               	bra	u12610
 15894  0047A2                     u12617:
 15895  0047A2  CFF6 FFE1          	movff	tblptrl,fsr1l
 15896  0047A6  CFF7 FFE2          	movff	tblptrh,fsr1h
 15897  0047AA  50E7               	movf	indf1,w,c
 15898  0047AC                     u12610:
 15899  0047AC  1810               	xorwf	??_memcmp^0,w,c
 15900  0047AE  B4D8               	btfsc	status,2,c
 15901  0047B0  D01E               	goto	l11183
 15902  0047B2  C00A  FFD9         	movff	memcmp@s1,fsr2l
 15903  0047B6  C00B  FFDA         	movff	memcmp@s1+1,fsr2h
 15904  0047BA  50DF               	movf	indf2,w,c
 15905  0047BC  6E10               	movwf	??_memcmp^0,c
 15906  0047BE  C00C  FFF6         	movff	memcmp@s2,tblptrl
 15907  0047C2  C00D  FFF7         	movff	memcmp@s2+1,tblptrh
 15908  0047C6  6AF8               	clrf	tblptru,c
 15909  0047C8  0E07               	movlw	(high __ramtop+-1)
 15910  0047CA  64F7               	cpfsgt	tblptrh,c
 15911  0047CC  D003               	bra	u12637
 15912  0047CE  0008               	tblrd		*
 15913  0047D0  50F5               	movf	tablat,w,c
 15914  0047D2  D005               	bra	u12630
 15915  0047D4                     u12637:
 15916  0047D4  CFF6 FFE1          	movff	tblptrl,fsr1l
 15917  0047D8  CFF7 FFE2          	movff	tblptrh,fsr1h
 15918  0047DC  50E7               	movf	indf1,w,c
 15919  0047DE                     u12630:
 15920  0047DE  6E11               	movwf	(??_memcmp+1)^0,c
 15921  0047E0  5011               	movf	(??_memcmp+1)^0,w,c
 15922  0047E2  5C10               	subwf	??_memcmp^0,w,c
 15923  0047E4  6E0A               	movwf	?_memcmp^0,c
 15924  0047E6  6A0B               	clrf	(?_memcmp+1)^0,c
 15925  0047E8  A0D8               	btfss	status,0,c
 15926  0047EA  060B               	decf	(?_memcmp+1)^0,f,c
 15927  0047EC  0012               	return	
 15928  0047EE                     l11183:
 15929  0047EE  4A0A               	infsnz	memcmp@s1^0,f,c
 15930  0047F0  2A0B               	incf	(memcmp@s1+1)^0,f,c
 15931  0047F2  4A0C               	infsnz	memcmp@s2^0,f,c
 15932  0047F4  2A0D               	incf	(memcmp@s2+1)^0,f,c
 15933  0047F6                     l11185:
 15934  0047F6  060E               	decf	memcmp@n^0,f,c
 15935  0047F8  A0D8               	btfss	status,0,c
 15936  0047FA  060F               	decf	(memcmp@n+1)^0,f,c
 15937  0047FC  280E               	incf	memcmp@n^0,w,c
 15938  0047FE  E1C0               	bnz	l11177
 15939  004800  280F               	incf	(memcmp@n+1)^0,w,c
 15940  004802  A4D8               	btfss	status,2,c
 15941  004804  D7BD               	goto	l11177
 15942  004806  0E00               	movlw	0
 15943  004808  6E0B               	movwf	(?_memcmp+1)^0,c
 15944  00480A  0E00               	movlw	0
 15945  00480C  6E0A               	movwf	?_memcmp^0,c
 15946  00480E  0012               	return		;funcret
 15947  004810                     __end_of_memcmp:
 15948                           	callstack 0
 15949                           
 15950 ;; *************** function ___lmul *****************
 15951 ;; Defined at:
 15952 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\Umul32.c"
 15953 ;; Parameters:    Size  Location     Type
 15954 ;;  multiplier      4    9[COMRAM] unsigned long 
 15955 ;;  multiplicand    4   13[COMRAM] unsigned long 
 15956 ;; Auto vars:     Size  Location     Type
 15957 ;;  product         4   17[COMRAM] unsigned long 
 15958 ;; Return value:  Size  Location     Type
 15959 ;;                  4    9[COMRAM] unsigned long 
 15960 ;; Registers used:
 15961 ;;		wreg, status,2, status,0
 15962 ;; Tracked objects:
 15963 ;;		On entry : 0/0
 15964 ;;		On exit  : 0/0
 15965 ;;		Unchanged: 0/0
 15966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15967 ;;      Params:         8       0       0       0       0       0       0       0       0
 15968 ;;      Locals:         4       0       0       0       0       0       0       0       0
 15969 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15970 ;;      Totals:        12       0       0       0       0       0       0       0       0
 15971 ;;Total ram usage:       12 bytes
 15972 ;; Hardware stack levels used:    1
 15973 ;; Hardware stack levels required when called:    2
 15974 ;; This function calls:
 15975 ;;		Nothing
 15976 ;; This function is called by:
 15977 ;;		_clust2sect
 15978 ;;		_auto_mount
 15979 ;;		_atol
 15980 ;; This function uses a non-reentrant model
 15981 ;;
 15982                           
 15983                           	psect	text90
 15984  00511C                     __ptext90:
 15985                           	callstack 0
 15986  00511C                     ___lmul:
 15987                           	callstack 20
 15988                           
 15989                           ;incstack = 0
 15990  00511C  0E00               	movlw	0
 15991  00511E  6E12               	movwf	___lmul@product^0,c
 15992  005120  0E00               	movlw	0
 15993  005122  6E13               	movwf	(___lmul@product+1)^0,c
 15994  005124  0E00               	movlw	0
 15995  005126  6E14               	movwf	(___lmul@product+2)^0,c
 15996  005128  0E00               	movlw	0
 15997  00512A  6E15               	movwf	(___lmul@product+3)^0,c
 15998  00512C                     l10801:
 15999  00512C  A00A               	btfss	___lmul@multiplier^0,0,c
 16000  00512E  D008               	goto	l10805
 16001  005130  500E               	movf	___lmul@multiplicand^0,w,c
 16002  005132  2612               	addwf	___lmul@product^0,f,c
 16003  005134  500F               	movf	(___lmul@multiplicand+1)^0,w,c
 16004  005136  2213               	addwfc	(___lmul@product+1)^0,f,c
 16005  005138  5010               	movf	(___lmul@multiplicand+2)^0,w,c
 16006  00513A  2214               	addwfc	(___lmul@product+2)^0,f,c
 16007  00513C  5011               	movf	(___lmul@multiplicand+3)^0,w,c
 16008  00513E  2215               	addwfc	(___lmul@product+3)^0,f,c
 16009  005140                     l10805:
 16010  005140  90D8               	bcf	status,0,c
 16011  005142  360E               	rlcf	___lmul@multiplicand^0,f,c
 16012  005144  360F               	rlcf	(___lmul@multiplicand+1)^0,f,c
 16013  005146  3610               	rlcf	(___lmul@multiplicand+2)^0,f,c
 16014  005148  3611               	rlcf	(___lmul@multiplicand+3)^0,f,c
 16015  00514A  90D8               	bcf	status,0,c
 16016  00514C  320D               	rrcf	(___lmul@multiplier+3)^0,f,c
 16017  00514E  320C               	rrcf	(___lmul@multiplier+2)^0,f,c
 16018  005150  320B               	rrcf	(___lmul@multiplier+1)^0,f,c
 16019  005152  320A               	rrcf	___lmul@multiplier^0,f,c
 16020  005154  500A               	movf	___lmul@multiplier^0,w,c
 16021  005156  100B               	iorwf	(___lmul@multiplier+1)^0,w,c
 16022  005158  100C               	iorwf	(___lmul@multiplier+2)^0,w,c
 16023  00515A  100D               	iorwf	(___lmul@multiplier+3)^0,w,c
 16024  00515C  A4D8               	btfss	status,2,c
 16025  00515E  D7E6               	goto	l10801
 16026  005160  C012  F00A         	movff	___lmul@product,?___lmul
 16027  005164  C013  F00B         	movff	___lmul@product+1,?___lmul+1
 16028  005168  C014  F00C         	movff	___lmul@product+2,?___lmul+2
 16029  00516C  C015  F00D         	movff	___lmul@product+3,?___lmul+3
 16030  005170  0012               	return		;funcret
 16031  005172                     __end_of___lmul:
 16032                           	callstack 0
 16033                           
 16034 ;; *************** function _f_mount *****************
 16035 ;; Defined at:
 16036 ;;		line 794 in file "bibliotecas/tff.c"
 16037 ;; Parameters:    Size  Location     Type
 16038 ;;  drv             1    wreg     unsigned char 
 16039 ;;  fs              2    9[COMRAM] PTR struct _FATFS
 16040 ;;		 -> fs(544), 
 16041 ;; Auto vars:     Size  Location     Type
 16042 ;;  drv             1   11[COMRAM] unsigned char 
 16043 ;; Return value:  Size  Location     Type
 16044 ;;                  1    wreg      enum E3231
 16045 ;; Registers used:
 16046 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16047 ;; Tracked objects:
 16048 ;;		On entry : 0/1
 16049 ;;		On exit  : 0/0
 16050 ;;		Unchanged: 0/0
 16051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16052 ;;      Params:         2       0       0       0       0       0       0       0       0
 16053 ;;      Locals:         1       0       0       0       0       0       0       0       0
 16054 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16055 ;;      Totals:         3       0       0       0       0       0       0       0       0
 16056 ;;Total ram usage:        3 bytes
 16057 ;; Hardware stack levels used:    1
 16058 ;; Hardware stack levels required when called:    2
 16059 ;; This function calls:
 16060 ;;		Nothing
 16061 ;; This function is called by:
 16062 ;;		_escrita_sdcard
 16063 ;; This function uses a non-reentrant model
 16064 ;;
 16065                           
 16066                           	psect	text91
 16067  005394                     __ptext91:
 16068                           	callstack 0
 16069  005394                     _f_mount:
 16070                           	callstack 24
 16071                           
 16072                           ;incstack = 0
 16073                           ;f_mount@drv stored from wreg
 16074  005394  6E0C               	movwf	f_mount@drv^0,c
 16075                           
 16076                           ;tff.c: 799: if (drv) return FR_INVALID_DRIVE;
 16077  005396  500C               	movf	f_mount@drv^0,w,c
 16078  005398  B4D8               	btfsc	status,2,c
 16079  00539A  D002               	goto	l12265
 16080  00539C  0E05               	movlw	5
 16081  00539E  0012               	return	
 16082  0053A0                     l12265:
 16083                           
 16084                           ;tff.c: 801: if (FatFs) FatFs->fs_type = 0;
 16085  0053A0  504D               	movf	_FatFs^0,w,c
 16086  0053A2  104E               	iorwf	(_FatFs+1)^0,w,c
 16087  0053A4  B4D8               	btfsc	status,2,c
 16088  0053A6  D008               	goto	l12269
 16089  0053A8  EE20 F01C          	lfsr	2,28
 16090  0053AC  504D               	movf	_FatFs^0,w,c
 16091  0053AE  26D9               	addwf	fsr2l,f,c
 16092  0053B0  504E               	movf	(_FatFs+1)^0,w,c
 16093  0053B2  22DA               	addwfc	fsr2h,f,c
 16094  0053B4  0E00               	movlw	0
 16095  0053B6  6EDF               	movwf	indf2,c
 16096  0053B8                     l12269:
 16097                           
 16098                           ;tff.c: 803: FatFs = fs;
 16099  0053B8  C00A  F04D         	movff	f_mount@fs,_FatFs
 16100  0053BC  C00B  F04E         	movff	f_mount@fs+1,_FatFs+1
 16101                           
 16102                           ;tff.c: 804: if (fs) fs->fs_type = 0;
 16103  0053C0  500A               	movf	f_mount@fs^0,w,c
 16104  0053C2  100B               	iorwf	(f_mount@fs+1)^0,w,c
 16105  0053C4  B4D8               	btfsc	status,2,c
 16106  0053C6  D008               	goto	l12275
 16107  0053C8  EE20 F01C          	lfsr	2,28
 16108  0053CC  500A               	movf	f_mount@fs^0,w,c
 16109  0053CE  26D9               	addwf	fsr2l,f,c
 16110  0053D0  500B               	movf	(f_mount@fs+1)^0,w,c
 16111  0053D2  22DA               	addwfc	fsr2h,f,c
 16112  0053D4  0E00               	movlw	0
 16113  0053D6  6EDF               	movwf	indf2,c
 16114  0053D8                     l12275:
 16115                           
 16116                           ;tff.c: 806: return FR_OK;
 16117  0053D8  0E00               	movlw	0
 16118  0053DA  0012               	return		;funcret
 16119  0053DC                     __end_of_f_mount:
 16120                           	callstack 0
 16121                           
 16122 ;; *************** function _f_lseek *****************
 16123 ;; Defined at:
 16124 ;;		line 1140 in file "bibliotecas/tff.c"
 16125 ;; Parameters:    Size  Location     Type
 16126 ;;  fp              2   38[BANK0 ] PTR struct _FIL
 16127 ;;		 -> fil(28), 
 16128 ;;  ofs             4   40[BANK0 ] unsigned long 
 16129 ;; Auto vars:     Size  Location     Type
 16130 ;;  csize           4   65[BANK0 ] unsigned long 
 16131 ;;  ifptr           4   61[BANK0 ] unsigned long 
 16132 ;;  clust           2   69[BANK0 ] unsigned short 
 16133 ;;  res             1   60[BANK0 ] enum E155
 16134 ;; Return value:  Size  Location     Type
 16135 ;;                  1    wreg      enum E3231
 16136 ;; Registers used:
 16137 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16138 ;; Tracked objects:
 16139 ;;		On entry : 3F/0
 16140 ;;		On exit  : 3F/0
 16141 ;;		Unchanged: 0/0
 16142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16143 ;;      Params:         0       6       0       0       0       0       0       0       0
 16144 ;;      Locals:         0      11       0       0       0       0       0       0       0
 16145 ;;      Temps:          0      16       0       0       0       0       0       0       0
 16146 ;;      Totals:         0      33       0       0       0       0       0       0       0
 16147 ;;Total ram usage:       33 bytes
 16148 ;; Hardware stack levels used:    1
 16149 ;; Hardware stack levels required when called:   10
 16150 ;; This function calls:
 16151 ;;		___lldiv
 16152 ;;		_create_chain
 16153 ;;		_get_cluster
 16154 ;;		_validate
 16155 ;; This function is called by:
 16156 ;;		_escrita_sdcard
 16157 ;; This function uses a non-reentrant model
 16158 ;;
 16159                           
 16160                           	psect	text92
 16161  000AF2                     __ptext92:
 16162                           	callstack 0
 16163  000AF2                     _f_lseek:
 16164                           	callstack 16
 16165                           
 16166                           ; BSR set to: 0
 16167                           ;tff.c: 1145: FRESULT res;;tff.c: 1146: CLUST clust;;tff.c: 1147: DWORD csize, ifptr;;tf
      +                          f.c: 1150: res = validate(fp->fs, fp->id);
 16168                           
 16169                           ;incstack = 0
 16170  000AF2  EE20 F004          	lfsr	2,4
 16171  000AF6  5186               	movf	f_lseek@fp& (0+255),w,b
 16172  000AF8  26D9               	addwf	fsr2l,f,c
 16173  000AFA  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16174  000AFC  22DA               	addwfc	fsr2h,f,c
 16175  000AFE  CFDE F010          	movff	postinc2,validate@fs
 16176  000B02  CFDD F011          	movff	postdec2,validate@fs+1
 16177  000B06  C086  FFD9         	movff	f_lseek@fp,fsr2l
 16178  000B0A  C087  FFDA         	movff	f_lseek@fp+1,fsr2h
 16179  000B0E  CFDE F012          	movff	postinc2,validate@id
 16180  000B12  CFDD F013          	movff	postdec2,validate@id+1
 16181  000B16  ECEE  F029         	call	_validate	;wreg free
 16182  000B1A  0100               	movlb	0	; () banked
 16183  000B1C  6F9C               	movwf	f_lseek@res& (0+255),b
 16184                           
 16185                           ; BSR set to: 0
 16186                           ;tff.c: 1151: if (res != FR_OK) return res;
 16187  000B1E  519C               	movf	f_lseek@res& (0+255),w,b
 16188  000B20  A4D8               	btfss	status,2,c
 16189  000B22  0012               	return	
 16190                           
 16191                           ; BSR set to: 0
 16192                           ;tff.c: 1152: if (fp->flag & 0x80) return FR_RW_ERROR;
 16193  000B24  EE20 F002          	lfsr	2,2
 16194  000B28  5186               	movf	f_lseek@fp& (0+255),w,b
 16195  000B2A  26D9               	addwf	fsr2l,f,c
 16196  000B2C  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16197  000B2E  22DA               	addwfc	fsr2h,f,c
 16198  000B30  BEDF               	btfsc	indf2,7,c
 16199  000B32  0012               	return	
 16200                           
 16201                           ; BSR set to: 0
 16202                           ;tff.c: 1153: if (ofs > fp->fsize;tff.c: 1155: && !(fp->flag & 0x02);tff.c: 1157: ) ofs 
      +                          = fp->fsize;
 16203  000B34  EE20 F00A          	lfsr	2,10
 16204  000B38  5186               	movf	f_lseek@fp& (0+255),w,b
 16205  000B3A  26D9               	addwf	fsr2l,f,c
 16206  000B3C  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16207  000B3E  22DA               	addwfc	fsr2h,f,c
 16208  000B40  5188               	movf	f_lseek@ofs& (0+255),w,b
 16209  000B42  5CDE               	subwf	postinc2,w,c
 16210  000B44  5189               	movf	(f_lseek@ofs+1)& (0+255),w,b
 16211  000B46  58DE               	subwfb	postinc2,w,c
 16212  000B48  518A               	movf	(f_lseek@ofs+2)& (0+255),w,b
 16213  000B4A  58DE               	subwfb	postinc2,w,c
 16214  000B4C  518B               	movf	(f_lseek@ofs+3)& (0+255),w,b
 16215  000B4E  58DE               	subwfb	postinc2,w,c
 16216  000B50  B0D8               	btfsc	status,0,c
 16217  000B52  D016               	goto	l1193
 16218                           
 16219                           ; BSR set to: 0
 16220  000B54  EE20 F002          	lfsr	2,2
 16221  000B58  5186               	movf	f_lseek@fp& (0+255),w,b
 16222  000B5A  26D9               	addwf	fsr2l,f,c
 16223  000B5C  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16224  000B5E  22DA               	addwfc	fsr2h,f,c
 16225  000B60  B2DF               	btfsc	indf2,1,c
 16226  000B62  D00E               	goto	l1193
 16227                           
 16228                           ; BSR set to: 0
 16229  000B64  EE20 F00A          	lfsr	2,10
 16230  000B68  5186               	movf	f_lseek@fp& (0+255),w,b
 16231  000B6A  26D9               	addwf	fsr2l,f,c
 16232  000B6C  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16233  000B6E  22DA               	addwfc	fsr2h,f,c
 16234  000B70  CFDE F088          	movff	postinc2,f_lseek@ofs
 16235  000B74  CFDE F089          	movff	postinc2,f_lseek@ofs+1
 16236  000B78  CFDE F08A          	movff	postinc2,f_lseek@ofs+2
 16237  000B7C  CFDE F08B          	movff	postinc2,f_lseek@ofs+3
 16238  000B80                     l1193:
 16239                           
 16240                           ; BSR set to: 0
 16241                           ;tff.c: 1159: ifptr = fp->fptr;
 16242  000B80  EE20 F006          	lfsr	2,6
 16243  000B84  5186               	movf	f_lseek@fp& (0+255),w,b
 16244  000B86  26D9               	addwf	fsr2l,f,c
 16245  000B88  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16246  000B8A  22DA               	addwfc	fsr2h,f,c
 16247  000B8C  CFDE F09D          	movff	postinc2,f_lseek@ifptr
 16248  000B90  CFDE F09E          	movff	postinc2,f_lseek@ifptr+1
 16249  000B94  CFDE F09F          	movff	postinc2,f_lseek@ifptr+2
 16250  000B98  CFDE F0A0          	movff	postinc2,f_lseek@ifptr+3
 16251                           
 16252                           ;tff.c: 1160: fp->fptr = 0; fp->csect = 255;
 16253  000B9C  EE20 F006          	lfsr	2,6
 16254  000BA0  5186               	movf	f_lseek@fp& (0+255),w,b
 16255  000BA2  26D9               	addwf	fsr2l,f,c
 16256  000BA4  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16257  000BA6  22DA               	addwfc	fsr2h,f,c
 16258  000BA8  6ADE               	clrf	postinc2,c
 16259  000BAA  6ADE               	clrf	postinc2,c
 16260  000BAC  6ADE               	clrf	postinc2,c
 16261  000BAE  6ADD               	clrf	postdec2,c
 16262  000BB0  EE20 F003          	lfsr	2,3
 16263  000BB4  5186               	movf	f_lseek@fp& (0+255),w,b
 16264  000BB6  26D9               	addwf	fsr2l,f,c
 16265  000BB8  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16266  000BBA  22DA               	addwfc	fsr2h,f,c
 16267  000BBC  0EFF               	movlw	255
 16268  000BBE  6EDF               	movwf	indf2,c
 16269                           
 16270                           ; BSR set to: 0
 16271                           ;tff.c: 1161: if (ofs > 0) {
 16272  000BC0  5188               	movf	f_lseek@ofs& (0+255),w,b
 16273  000BC2  1189               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 16274  000BC4  118A               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 16275  000BC6  118B               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 16276  000BC8  B4D8               	btfsc	status,2,c
 16277  000BCA  D19D               	goto	l12505
 16278                           
 16279                           ; BSR set to: 0
 16280                           ;tff.c: 1162: csize = (DWORD)fp->fs->csize * 512U;
 16281  000BCC  EE20 F004          	lfsr	2,4
 16282  000BD0  5186               	movf	f_lseek@fp& (0+255),w,b
 16283  000BD2  26D9               	addwf	fsr2l,f,c
 16284  000BD4  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16285  000BD6  22DA               	addwfc	fsr2h,f,c
 16286  000BD8  EE10 F01D          	lfsr	1,29
 16287  000BDC  50DE               	movf	postinc2,w,c
 16288  000BDE  26E1               	addwf	fsr1l,f,c
 16289  000BE0  50DD               	movf	postdec2,w,c
 16290  000BE2  22E2               	addwfc	fsr1h,f,c
 16291  000BE4  50E7               	movf	indf1,w,c
 16292  000BE6  6F8C               	movwf	??_f_lseek& (0+255),b
 16293  000BE8  C08C  F08D         	movff	??_f_lseek,??_f_lseek+1
 16294  000BEC  6B8E               	clrf	(??_f_lseek+2)& (0+255),b
 16295  000BEE  6B8F               	clrf	(??_f_lseek+3)& (0+255),b
 16296  000BF0  6B90               	clrf	(??_f_lseek+4)& (0+255),b
 16297  000BF2  0E09               	movlw	9
 16298  000BF4                     u14625:
 16299  000BF4  90D8               	bcf	status,0,c
 16300  000BF6  378D               	rlcf	(??_f_lseek+1)& (0+255),f,b
 16301  000BF8  378E               	rlcf	(??_f_lseek+2)& (0+255),f,b
 16302  000BFA  378F               	rlcf	(??_f_lseek+3)& (0+255),f,b
 16303  000BFC  3790               	rlcf	(??_f_lseek+4)& (0+255),f,b
 16304  000BFE  2EE8               	decfsz	wreg,f,c
 16305  000C00  D7F9               	goto	u14625
 16306  000C02  C08D  F0A1         	movff	??_f_lseek+1,f_lseek@csize
 16307  000C06  C08E  F0A2         	movff	??_f_lseek+2,f_lseek@csize+1
 16308  000C0A  C08F  F0A3         	movff	??_f_lseek+3,f_lseek@csize+2
 16309  000C0E  C090  F0A4         	movff	??_f_lseek+4,f_lseek@csize+3
 16310                           
 16311                           ; BSR set to: 0
 16312                           ;tff.c: 1163: if (ifptr > 0 &&;tff.c: 1164: (ofs - 1) / csize >= (ifptr - 1) / csize) {
 16313  000C12  519D               	movf	f_lseek@ifptr& (0+255),w,b
 16314  000C14  119E               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 16315  000C16  119F               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 16316  000C18  11A0               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 16317  000C1A  B4D8               	btfsc	status,2,c
 16318  000C1C  D093               	goto	l12463
 16319                           
 16320                           ; BSR set to: 0
 16321  000C1E  0EFF               	movlw	255
 16322  000C20  2588               	addwf	f_lseek@ofs& (0+255),w,b
 16323  000C22  6E0A               	movwf	___lldiv@dividend^0,c
 16324  000C24  0EFF               	movlw	255
 16325  000C26  2189               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 16326  000C28  6E0B               	movwf	(___lldiv@dividend+1)^0,c
 16327  000C2A  0EFF               	movlw	255
 16328  000C2C  218A               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 16329  000C2E  6E0C               	movwf	(___lldiv@dividend+2)^0,c
 16330  000C30  0EFF               	movlw	255
 16331  000C32  218B               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 16332  000C34  6E0D               	movwf	(___lldiv@dividend+3)^0,c
 16333  000C36  C0A1  F00E         	movff	f_lseek@csize,___lldiv@divisor
 16334  000C3A  C0A2  F00F         	movff	f_lseek@csize+1,___lldiv@divisor+1
 16335  000C3E  C0A3  F010         	movff	f_lseek@csize+2,___lldiv@divisor+2
 16336  000C42  C0A4  F011         	movff	f_lseek@csize+3,___lldiv@divisor+3
 16337  000C46  EC19  F025         	call	___lldiv	;wreg free
 16338  000C4A  C00A  F08C         	movff	?___lldiv,??_f_lseek
 16339  000C4E  C00B  F08D         	movff	?___lldiv+1,??_f_lseek+1
 16340  000C52  C00C  F08E         	movff	?___lldiv+2,??_f_lseek+2
 16341  000C56  C00D  F08F         	movff	?___lldiv+3,??_f_lseek+3
 16342  000C5A  0EFF               	movlw	255
 16343  000C5C  0100               	movlb	0	; () banked
 16344  000C5E  259D               	addwf	f_lseek@ifptr& (0+255),w,b
 16345  000C60  6E0A               	movwf	___lldiv@dividend^0,c
 16346  000C62  0EFF               	movlw	255
 16347  000C64  219E               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 16348  000C66  6E0B               	movwf	(___lldiv@dividend+1)^0,c
 16349  000C68  0EFF               	movlw	255
 16350  000C6A  219F               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 16351  000C6C  6E0C               	movwf	(___lldiv@dividend+2)^0,c
 16352  000C6E  0EFF               	movlw	255
 16353  000C70  21A0               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 16354  000C72  6E0D               	movwf	(___lldiv@dividend+3)^0,c
 16355  000C74  C0A1  F00E         	movff	f_lseek@csize,___lldiv@divisor
 16356  000C78  C0A2  F00F         	movff	f_lseek@csize+1,___lldiv@divisor+1
 16357  000C7C  C0A3  F010         	movff	f_lseek@csize+2,___lldiv@divisor+2
 16358  000C80  C0A4  F011         	movff	f_lseek@csize+3,___lldiv@divisor+3
 16359  000C84  EC19  F025         	call	___lldiv	;wreg free
 16360  000C88  500A               	movf	?___lldiv^0,w,c
 16361  000C8A  0100               	movlb	0	; () banked
 16362  000C8C  5D8C               	subwf	??_f_lseek& (0+255),w,b
 16363  000C8E  500B               	movf	(?___lldiv+1)^0,w,c
 16364  000C90  598D               	subwfb	(??_f_lseek+1)& (0+255),w,b
 16365  000C92  500C               	movf	(?___lldiv+2)^0,w,c
 16366  000C94  598E               	subwfb	(??_f_lseek+2)& (0+255),w,b
 16367  000C96  500D               	movf	(?___lldiv+3)^0,w,c
 16368  000C98  598F               	subwfb	(??_f_lseek+3)& (0+255),w,b
 16369  000C9A  A0D8               	btfss	status,0,c
 16370  000C9C  D053               	goto	l12463
 16371                           
 16372                           ; BSR set to: 0
 16373                           ;tff.c: 1165: fp->fptr = (ifptr - 1) & ~(csize - 1);
 16374  000C9E  0EFF               	movlw	255
 16375  000CA0  25A1               	addwf	f_lseek@csize& (0+255),w,b
 16376  000CA2  6F8C               	movwf	??_f_lseek& (0+255),b
 16377  000CA4  0EFF               	movlw	255
 16378  000CA6  21A2               	addwfc	(f_lseek@csize+1)& (0+255),w,b
 16379  000CA8  6F8D               	movwf	(??_f_lseek+1)& (0+255),b
 16380  000CAA  0EFF               	movlw	255
 16381  000CAC  21A3               	addwfc	(f_lseek@csize+2)& (0+255),w,b
 16382  000CAE  6F8E               	movwf	(??_f_lseek+2)& (0+255),b
 16383  000CB0  0EFF               	movlw	255
 16384  000CB2  21A4               	addwfc	(f_lseek@csize+3)& (0+255),w,b
 16385  000CB4  6F8F               	movwf	(??_f_lseek+3)& (0+255),b
 16386  000CB6  1D8C               	comf	??_f_lseek& (0+255),w,b
 16387  000CB8  6F90               	movwf	(??_f_lseek+4)& (0+255),b
 16388  000CBA  1D8D               	comf	(??_f_lseek+1)& (0+255),w,b
 16389  000CBC  6F91               	movwf	(??_f_lseek+5)& (0+255),b
 16390  000CBE  1D8E               	comf	(??_f_lseek+2)& (0+255),w,b
 16391  000CC0  6F92               	movwf	(??_f_lseek+6)& (0+255),b
 16392  000CC2  1D8F               	comf	(??_f_lseek+3)& (0+255),w,b
 16393  000CC4  6F93               	movwf	(??_f_lseek+7)& (0+255),b
 16394  000CC6  0EFF               	movlw	255
 16395  000CC8  259D               	addwf	f_lseek@ifptr& (0+255),w,b
 16396  000CCA  6F94               	movwf	(??_f_lseek+8)& (0+255),b
 16397  000CCC  0EFF               	movlw	255
 16398  000CCE  219E               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 16399  000CD0  6F95               	movwf	(??_f_lseek+9)& (0+255),b
 16400  000CD2  0EFF               	movlw	255
 16401  000CD4  219F               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 16402  000CD6  6F96               	movwf	(??_f_lseek+10)& (0+255),b
 16403  000CD8  0EFF               	movlw	255
 16404  000CDA  21A0               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 16405  000CDC  6F97               	movwf	(??_f_lseek+11)& (0+255),b
 16406  000CDE  5190               	movf	(??_f_lseek+4)& (0+255),w,b
 16407  000CE0  1594               	andwf	(??_f_lseek+8)& (0+255),w,b
 16408  000CE2  6F98               	movwf	(??_f_lseek+12)& (0+255),b
 16409  000CE4  5191               	movf	(??_f_lseek+5)& (0+255),w,b
 16410  000CE6  1595               	andwf	(??_f_lseek+9)& (0+255),w,b
 16411  000CE8  6F99               	movwf	(??_f_lseek+13)& (0+255),b
 16412  000CEA  5192               	movf	(??_f_lseek+6)& (0+255),w,b
 16413  000CEC  1596               	andwf	(??_f_lseek+10)& (0+255),w,b
 16414  000CEE  6F9A               	movwf	(??_f_lseek+14)& (0+255),b
 16415  000CF0  5193               	movf	(??_f_lseek+7)& (0+255),w,b
 16416  000CF2  1597               	andwf	(??_f_lseek+11)& (0+255),w,b
 16417  000CF4  6F9B               	movwf	(??_f_lseek+15)& (0+255),b
 16418  000CF6  EE20 F006          	lfsr	2,6
 16419  000CFA  5186               	movf	f_lseek@fp& (0+255),w,b
 16420  000CFC  26D9               	addwf	fsr2l,f,c
 16421  000CFE  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16422  000D00  22DA               	addwfc	fsr2h,f,c
 16423  000D02  C098  FFDE         	movff	??_f_lseek+12,postinc2
 16424  000D06  C099  FFDE         	movff	??_f_lseek+13,postinc2
 16425  000D0A  C09A  FFDE         	movff	??_f_lseek+14,postinc2
 16426  000D0E  C09B  FFDE         	movff	??_f_lseek+15,postinc2
 16427                           
 16428                           ;tff.c: 1166: ofs -= fp->fptr;
 16429  000D12  EE20 F006          	lfsr	2,6
 16430  000D16  5186               	movf	f_lseek@fp& (0+255),w,b
 16431  000D18  26D9               	addwf	fsr2l,f,c
 16432  000D1A  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16433  000D1C  22DA               	addwfc	fsr2h,f,c
 16434  000D1E  50DE               	movf	postinc2,w,c
 16435  000D20  5F88               	subwf	f_lseek@ofs& (0+255),f,b
 16436  000D22  50DE               	movf	postinc2,w,c
 16437  000D24  5B89               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 16438  000D26  50DE               	movf	postinc2,w,c
 16439  000D28  5B8A               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 16440  000D2A  50DD               	movf	postdec2,w,c
 16441  000D2C  5B8B               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 16442                           
 16443                           ;tff.c: 1167: clust = fp->curr_clust;
 16444  000D2E  EE20 F010          	lfsr	2,16
 16445  000D32  5186               	movf	f_lseek@fp& (0+255),w,b
 16446  000D34  26D9               	addwf	fsr2l,f,c
 16447  000D36  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16448  000D38  22DA               	addwfc	fsr2h,f,c
 16449  000D3A  CFDE F0A5          	movff	postinc2,f_lseek@clust
 16450  000D3E  CFDD F0A6          	movff	postdec2,f_lseek@clust+1
 16451                           
 16452                           ;tff.c: 1168: } else {
 16453  000D42  D030               	goto	l12475
 16454  000D44                     l12463:
 16455                           
 16456                           ; BSR set to: 0
 16457                           ;tff.c: 1169: clust = fp->org_clust;
 16458  000D44  EE20 F00E          	lfsr	2,14
 16459  000D48  5186               	movf	f_lseek@fp& (0+255),w,b
 16460  000D4A  26D9               	addwf	fsr2l,f,c
 16461  000D4C  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16462  000D4E  22DA               	addwfc	fsr2h,f,c
 16463  000D50  CFDE F0A5          	movff	postinc2,f_lseek@clust
 16464  000D54  CFDD F0A6          	movff	postdec2,f_lseek@clust+1
 16465                           
 16466                           ; BSR set to: 0
 16467                           ;tff.c: 1171: if (clust == 0) {
 16468  000D58  51A5               	movf	f_lseek@clust& (0+255),w,b
 16469  000D5A  11A6               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 16470  000D5C  A4D8               	btfss	status,2,c
 16471  000D5E  D018               	goto	l1197
 16472                           
 16473                           ; BSR set to: 0
 16474                           ;tff.c: 1172: clust = create_chain(0);
 16475  000D60  0E00               	movlw	0
 16476  000D62  6F79               	movwf	(create_chain@clust+1)& (0+255),b
 16477  000D64  0E00               	movlw	0
 16478  000D66  6F78               	movwf	create_chain@clust& (0+255),b
 16479  000D68  ECED  F016         	call	_create_chain	;wreg free
 16480  000D6C  C078  F0A5         	movff	?_create_chain,f_lseek@clust
 16481  000D70  C079  F0A6         	movff	?_create_chain+1,f_lseek@clust+1
 16482                           
 16483                           ; BSR set to: 0
 16484                           ;tff.c: 1173: if (clust == 1) goto fk_error;
 16485  000D74  05A5               	decf	f_lseek@clust& (0+255),w,b
 16486  000D76  11A6               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 16487  000D78  B4D8               	btfsc	status,2,c
 16488  000D7A  D0F8               	goto	l12513
 16489                           
 16490                           ; BSR set to: 0
 16491                           ;tff.c: 1174: fp->org_clust = clust;
 16492  000D7C  EE20 F00E          	lfsr	2,14
 16493  000D80  5186               	movf	f_lseek@fp& (0+255),w,b
 16494  000D82  26D9               	addwf	fsr2l,f,c
 16495  000D84  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16496  000D86  22DA               	addwfc	fsr2h,f,c
 16497  000D88  C0A5  FFDE         	movff	f_lseek@clust,postinc2
 16498  000D8C  C0A6  FFDD         	movff	f_lseek@clust+1,postdec2
 16499  000D90                     l1197:
 16500                           
 16501                           ; BSR set to: 0
 16502                           ;tff.c: 1175: };tff.c: 1177: fp->curr_clust = clust;
 16503  000D90  EE20 F010          	lfsr	2,16
 16504  000D94  5186               	movf	f_lseek@fp& (0+255),w,b
 16505  000D96  26D9               	addwf	fsr2l,f,c
 16506  000D98  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16507  000D9A  22DA               	addwfc	fsr2h,f,c
 16508  000D9C  C0A5  FFDE         	movff	f_lseek@clust,postinc2
 16509  000DA0  C0A6  FFDD         	movff	f_lseek@clust+1,postdec2
 16510  000DA4                     l12475:
 16511                           
 16512                           ; BSR set to: 0
 16513                           ;tff.c: 1178: };tff.c: 1179: if (clust != 0) {
 16514  000DA4  51A5               	movf	f_lseek@clust& (0+255),w,b
 16515  000DA6  11A6               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 16516  000DA8  A4D8               	btfss	status,2,c
 16517  000DAA  D063               	goto	l12497
 16518  000DAC  D0AC               	goto	l12505
 16519  000DAE                     l12479:
 16520                           
 16521                           ; BSR set to: 0
 16522                           ;tff.c: 1182: if (fp->flag & 0x02) {
 16523  000DAE  EE20 F002          	lfsr	2,2
 16524  000DB2  5186               	movf	f_lseek@fp& (0+255),w,b
 16525  000DB4  26D9               	addwf	fsr2l,f,c
 16526  000DB6  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16527  000DB8  22DA               	addwfc	fsr2h,f,c
 16528  000DBA  A2DF               	btfss	indf2,1,c
 16529  000DBC  D017               	goto	l12487
 16530                           
 16531                           ; BSR set to: 0
 16532                           ;tff.c: 1183: clust = create_chain(clust);
 16533  000DBE  C0A5  F078         	movff	f_lseek@clust,create_chain@clust
 16534  000DC2  C0A6  F079         	movff	f_lseek@clust+1,create_chain@clust+1
 16535  000DC6  ECED  F016         	call	_create_chain	;wreg free
 16536  000DCA  C078  F0A5         	movff	?_create_chain,f_lseek@clust
 16537  000DCE  C079  F0A6         	movff	?_create_chain+1,f_lseek@clust+1
 16538                           
 16539                           ; BSR set to: 0
 16540                           ;tff.c: 1184: if (clust == 0) {
 16541  000DD2  51A5               	movf	f_lseek@clust& (0+255),w,b
 16542  000DD4  11A6               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 16543  000DD6  A4D8               	btfss	status,2,c
 16544  000DD8  D013               	goto	l12489
 16545                           
 16546                           ; BSR set to: 0
 16547                           ;tff.c: 1185: ofs = csize; break;
 16548  000DDA  C0A1  F088         	movff	f_lseek@csize,f_lseek@ofs
 16549  000DDE  C0A2  F089         	movff	f_lseek@csize+1,f_lseek@ofs+1
 16550  000DE2  C0A3  F08A         	movff	f_lseek@csize+2,f_lseek@ofs+2
 16551  000DE6  C0A4  F08B         	movff	f_lseek@csize+3,f_lseek@ofs+3
 16552  000DEA  D04D               	goto	u14720
 16553  000DEC                     l12487:
 16554                           
 16555                           ; BSR set to: 0
 16556                           ;tff.c: 1189: clust = get_cluster(clust);
 16557  000DEC  C0A5  F04A         	movff	f_lseek@clust,get_cluster@clust
 16558  000DF0  C0A6  F04B         	movff	f_lseek@clust+1,get_cluster@clust+1
 16559  000DF4  EC28  F013         	call	_get_cluster	;wreg free
 16560  000DF8  C04A  F0A5         	movff	?_get_cluster,f_lseek@clust
 16561  000DFC  C04B  F0A6         	movff	?_get_cluster+1,f_lseek@clust+1
 16562  000E00                     l12489:
 16563                           
 16564                           ;tff.c: 1190: if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
 16565  000E00  0100               	movlb	0	; () banked
 16566  000E02  51A6               	movf	(f_lseek@clust+1)& (0+255),w,b
 16567  000E04  E104               	bnz	u14700
 16568  000E06  0E02               	movlw	2
 16569  000E08  5DA5               	subwf	f_lseek@clust& (0+255),w,b
 16570  000E0A  A0D8               	btfss	status,0,c
 16571  000E0C  D0AF               	goto	l12513
 16572  000E0E                     u14700:
 16573                           
 16574                           ; BSR set to: 0
 16575  000E0E  EE20 F004          	lfsr	2,4
 16576  000E12  5186               	movf	f_lseek@fp& (0+255),w,b
 16577  000E14  26D9               	addwf	fsr2l,f,c
 16578  000E16  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16579  000E18  22DA               	addwfc	fsr2h,f,c
 16580  000E1A  EE10 F016          	lfsr	1,22
 16581  000E1E  50DE               	movf	postinc2,w,c
 16582  000E20  26E1               	addwf	fsr1l,f,c
 16583  000E22  50DD               	movf	postdec2,w,c
 16584  000E24  22E2               	addwfc	fsr1h,f,c
 16585  000E26  50E6               	movf	postinc1,w,c
 16586  000E28  5DA5               	subwf	f_lseek@clust& (0+255),w,b
 16587  000E2A  50E6               	movf	postinc1,w,c
 16588  000E2C  59A6               	subwfb	(f_lseek@clust+1)& (0+255),w,b
 16589  000E2E  B0D8               	btfsc	status,0,c
 16590  000E30  D09D               	goto	l12513
 16591                           
 16592                           ; BSR set to: 0
 16593                           ;tff.c: 1191: fp->curr_clust = clust;
 16594  000E32  EE20 F010          	lfsr	2,16
 16595  000E36  5186               	movf	f_lseek@fp& (0+255),w,b
 16596  000E38  26D9               	addwf	fsr2l,f,c
 16597  000E3A  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16598  000E3C  22DA               	addwfc	fsr2h,f,c
 16599  000E3E  C0A5  FFDE         	movff	f_lseek@clust,postinc2
 16600  000E42  C0A6  FFDD         	movff	f_lseek@clust+1,postdec2
 16601                           
 16602                           ;tff.c: 1192: fp->fptr += csize;
 16603  000E46  EE20 F006          	lfsr	2,6
 16604  000E4A  5186               	movf	f_lseek@fp& (0+255),w,b
 16605  000E4C  26D9               	addwf	fsr2l,f,c
 16606  000E4E  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16607  000E50  22DA               	addwfc	fsr2h,f,c
 16608  000E52  51A1               	movf	f_lseek@csize& (0+255),w,b
 16609  000E54  26DE               	addwf	postinc2,f,c
 16610  000E56  51A2               	movf	(f_lseek@csize+1)& (0+255),w,b
 16611  000E58  22DE               	addwfc	postinc2,f,c
 16612  000E5A  51A3               	movf	(f_lseek@csize+2)& (0+255),w,b
 16613  000E5C  22DE               	addwfc	postinc2,f,c
 16614  000E5E  51A4               	movf	(f_lseek@csize+3)& (0+255),w,b
 16615  000E60  22DE               	addwfc	postinc2,f,c
 16616                           
 16617                           ; BSR set to: 0
 16618                           ;tff.c: 1193: ofs -= csize;
 16619  000E62  51A1               	movf	f_lseek@csize& (0+255),w,b
 16620  000E64  5F88               	subwf	f_lseek@ofs& (0+255),f,b
 16621  000E66  51A2               	movf	(f_lseek@csize+1)& (0+255),w,b
 16622  000E68  5B89               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 16623  000E6A  51A3               	movf	(f_lseek@csize+2)& (0+255),w,b
 16624  000E6C  5B8A               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 16625  000E6E  51A4               	movf	(f_lseek@csize+3)& (0+255),w,b
 16626  000E70  5B8B               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 16627  000E72                     l12497:
 16628                           
 16629                           ; BSR set to: 0
 16630  000E72  5188               	movf	f_lseek@ofs& (0+255),w,b
 16631  000E74  5DA1               	subwf	f_lseek@csize& (0+255),w,b
 16632  000E76  5189               	movf	(f_lseek@ofs+1)& (0+255),w,b
 16633  000E78  59A2               	subwfb	(f_lseek@csize+1)& (0+255),w,b
 16634  000E7A  518A               	movf	(f_lseek@ofs+2)& (0+255),w,b
 16635  000E7C  59A3               	subwfb	(f_lseek@csize+2)& (0+255),w,b
 16636  000E7E  518B               	movf	(f_lseek@ofs+3)& (0+255),w,b
 16637  000E80  59A4               	subwfb	(f_lseek@csize+3)& (0+255),w,b
 16638  000E82  A0D8               	btfss	status,0,c
 16639  000E84  D794               	goto	l12479
 16640  000E86                     u14720:
 16641                           
 16642                           ; BSR set to: 0
 16643                           ;tff.c: 1194: };tff.c: 1195: fp->fptr += ofs;
 16644  000E86  EE20 F006          	lfsr	2,6
 16645  000E8A  5186               	movf	f_lseek@fp& (0+255),w,b
 16646  000E8C  26D9               	addwf	fsr2l,f,c
 16647  000E8E  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16648  000E90  22DA               	addwfc	fsr2h,f,c
 16649  000E92  5188               	movf	f_lseek@ofs& (0+255),w,b
 16650  000E94  26DE               	addwf	postinc2,f,c
 16651  000E96  5189               	movf	(f_lseek@ofs+1)& (0+255),w,b
 16652  000E98  22DE               	addwfc	postinc2,f,c
 16653  000E9A  518A               	movf	(f_lseek@ofs+2)& (0+255),w,b
 16654  000E9C  22DE               	addwfc	postinc2,f,c
 16655  000E9E  518B               	movf	(f_lseek@ofs+3)& (0+255),w,b
 16656  000EA0  22DE               	addwfc	postinc2,f,c
 16657                           
 16658                           ;tff.c: 1196: fp->csect = (BYTE)(ofs / 512U);
 16659  000EA2  EE20 F003          	lfsr	2,3
 16660  000EA6  5186               	movf	f_lseek@fp& (0+255),w,b
 16661  000EA8  26D9               	addwf	fsr2l,f,c
 16662  000EAA  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16663  000EAC  22DA               	addwfc	fsr2h,f,c
 16664  000EAE  C088  F08C         	movff	f_lseek@ofs,??_f_lseek
 16665  000EB2  C089  F08D         	movff	f_lseek@ofs+1,??_f_lseek+1
 16666  000EB6  C08A  F08E         	movff	f_lseek@ofs+2,??_f_lseek+2
 16667  000EBA  C08B  F08F         	movff	f_lseek@ofs+3,??_f_lseek+3
 16668  000EBE  0E0A               	movlw	10
 16669  000EC0  D005               	goto	u14730
 16670  000EC2                     u14735:
 16671  000EC2  90D8               	bcf	status,0,c
 16672  000EC4  338F               	rrcf	(??_f_lseek+3)& (0+255),f,b
 16673  000EC6  338E               	rrcf	(??_f_lseek+2)& (0+255),f,b
 16674  000EC8  338D               	rrcf	(??_f_lseek+1)& (0+255),f,b
 16675  000ECA  338C               	rrcf	??_f_lseek& (0+255),f,b
 16676  000ECC                     u14730:
 16677  000ECC  2EE8               	decfsz	wreg,f,c
 16678  000ECE  D7F9               	goto	u14735
 16679  000ED0  518C               	movf	??_f_lseek& (0+255),w,b
 16680  000ED2  6EDF               	movwf	indf2,c
 16681                           
 16682                           ; BSR set to: 0
 16683                           ;tff.c: 1197: if (ofs % 512U) fp->csect++;
 16684  000ED4  0EFF               	movlw	255
 16685  000ED6  1588               	andwf	f_lseek@ofs& (0+255),w,b
 16686  000ED8  6F8C               	movwf	??_f_lseek& (0+255),b
 16687  000EDA  0E01               	movlw	1
 16688  000EDC  1589               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 16689  000EDE  6F8D               	movwf	(??_f_lseek+1)& (0+255),b
 16690  000EE0  0E00               	movlw	0
 16691  000EE2  158A               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 16692  000EE4  6F8E               	movwf	(??_f_lseek+2)& (0+255),b
 16693  000EE6  0E00               	movlw	0
 16694  000EE8  158B               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 16695  000EEA  6F8F               	movwf	(??_f_lseek+3)& (0+255),b
 16696  000EEC  518C               	movf	??_f_lseek& (0+255),w,b
 16697  000EEE  118D               	iorwf	(??_f_lseek+1)& (0+255),w,b
 16698  000EF0  118E               	iorwf	(??_f_lseek+2)& (0+255),w,b
 16699  000EF2  118F               	iorwf	(??_f_lseek+3)& (0+255),w,b
 16700  000EF4  B4D8               	btfsc	status,2,c
 16701  000EF6  D007               	goto	l12505
 16702                           
 16703                           ; BSR set to: 0
 16704  000EF8  EE20 F003          	lfsr	2,3
 16705  000EFC  5186               	movf	f_lseek@fp& (0+255),w,b
 16706  000EFE  26D9               	addwf	fsr2l,f,c
 16707  000F00  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16708  000F02  22DA               	addwfc	fsr2h,f,c
 16709  000F04  2ADF               	incf	indf2,f,c
 16710  000F06                     l12505:
 16711                           
 16712                           ; BSR set to: 0
 16713                           ;tff.c: 1198: };tff.c: 1199: };tff.c: 1202: if (fp->fptr > fp->fsize) {
 16714  000F06  EE20 F006          	lfsr	2,6
 16715  000F0A  5186               	movf	f_lseek@fp& (0+255),w,b
 16716  000F0C  26D9               	addwf	fsr2l,f,c
 16717  000F0E  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16718  000F10  22DA               	addwfc	fsr2h,f,c
 16719  000F12  EE10 F00A          	lfsr	1,10
 16720  000F16  5186               	movf	f_lseek@fp& (0+255),w,b
 16721  000F18  26E1               	addwf	fsr1l,f,c
 16722  000F1A  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16723  000F1C  22E2               	addwfc	fsr1h,f,c
 16724  000F1E  50DE               	movf	postinc2,w,c
 16725  000F20  5CE6               	subwf	postinc1,w,c
 16726  000F22  50DE               	movf	postinc2,w,c
 16727  000F24  58E6               	subwfb	postinc1,w,c
 16728  000F26  50DE               	movf	postinc2,w,c
 16729  000F28  58E6               	subwfb	postinc1,w,c
 16730  000F2A  50DE               	movf	postinc2,w,c
 16731  000F2C  58E6               	subwfb	postinc1,w,c
 16732  000F2E  B0D8               	btfsc	status,0,c
 16733  000F30  0012               	return	
 16734                           
 16735                           ; BSR set to: 0
 16736                           ;tff.c: 1203: fp->fsize = fp->fptr;
 16737  000F32  EE20 F006          	lfsr	2,6
 16738  000F36  5186               	movf	f_lseek@fp& (0+255),w,b
 16739  000F38  26D9               	addwf	fsr2l,f,c
 16740  000F3A  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16741  000F3C  22DA               	addwfc	fsr2h,f,c
 16742  000F3E  EE10 F00A          	lfsr	1,10
 16743  000F42  5186               	movf	f_lseek@fp& (0+255),w,b
 16744  000F44  26E1               	addwf	fsr1l,f,c
 16745  000F46  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16746  000F48  22E2               	addwfc	fsr1h,f,c
 16747  000F4A  CFDE FFE6          	movff	postinc2,postinc1
 16748  000F4E  CFDE FFE6          	movff	postinc2,postinc1
 16749  000F52  CFDE FFE6          	movff	postinc2,postinc1
 16750  000F56  CFDE FFE6          	movff	postinc2,postinc1
 16751                           
 16752                           ; BSR set to: 0
 16753                           ;tff.c: 1204: fp->flag |= 0x20;
 16754  000F5A  EE20 F002          	lfsr	2,2
 16755  000F5E  5186               	movf	f_lseek@fp& (0+255),w,b
 16756  000F60  26D9               	addwf	fsr2l,f,c
 16757  000F62  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16758  000F64  22DA               	addwfc	fsr2h,f,c
 16759  000F66  0E00               	movlw	0
 16760  000F68  8ADB               	bsf	plusw2,5,c
 16761  000F6A  0012               	return	
 16762  000F6C                     l12513:
 16763                           
 16764                           ; BSR set to: 0
 16765                           ;tff.c: 1211: fp->flag |= 0x80;
 16766  000F6C  EE20 F002          	lfsr	2,2
 16767  000F70  5186               	movf	f_lseek@fp& (0+255),w,b
 16768  000F72  26D9               	addwf	fsr2l,f,c
 16769  000F74  5187               	movf	(f_lseek@fp+1)& (0+255),w,b
 16770  000F76  22DA               	addwfc	fsr2h,f,c
 16771  000F78  0E00               	movlw	0
 16772  000F7A  8EDB               	bsf	plusw2,7,c
 16773                           
 16774                           ; BSR set to: 0
 16775  000F7C  0012               	return		;funcret
 16776  000F7E                     __end_of_f_lseek:
 16777                           	callstack 0
 16778                           
 16779 ;; *************** function _create_chain *****************
 16780 ;; Defined at:
 16781 ;;		line 283 in file "bibliotecas/tff.c"
 16782 ;; Parameters:    Size  Location     Type
 16783 ;;  clust           2   24[BANK0 ] unsigned short 
 16784 ;; Auto vars:     Size  Location     Type
 16785 ;;  ncl             2   36[BANK0 ] unsigned short 
 16786 ;;  scl             2   34[BANK0 ] unsigned short 
 16787 ;;  cstat           2   32[BANK0 ] unsigned short 
 16788 ;;  fs              2   30[BANK0 ] PTR struct _FATFS
 16789 ;;		 -> NULL(0), fs(544), 
 16790 ;;  mcl             2   28[BANK0 ] unsigned short 
 16791 ;; Return value:  Size  Location     Type
 16792 ;;                  2   24[BANK0 ] unsigned short 
 16793 ;; Registers used:
 16794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16795 ;; Tracked objects:
 16796 ;;		On entry : 3F/0
 16797 ;;		On exit  : 3F/0
 16798 ;;		Unchanged: 0/0
 16799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16800 ;;      Params:         0       2       0       0       0       0       0       0       0
 16801 ;;      Locals:         0      10       0       0       0       0       0       0       0
 16802 ;;      Temps:          0       2       0       0       0       0       0       0       0
 16803 ;;      Totals:         0      14       0       0       0       0       0       0       0
 16804 ;;Total ram usage:       14 bytes
 16805 ;; Hardware stack levels used:    1
 16806 ;; Hardware stack levels required when called:    9
 16807 ;; This function calls:
 16808 ;;		_get_cluster
 16809 ;;		_put_cluster
 16810 ;; This function is called by:
 16811 ;;		_reserve_direntry
 16812 ;;		_f_write
 16813 ;;		_f_lseek
 16814 ;; This function uses a non-reentrant model
 16815 ;;
 16816                           
 16817                           	psect	text93
 16818  002DDA                     __ptext93:
 16819                           	callstack 0
 16820  002DDA                     _create_chain:
 16821                           	callstack 13
 16822                           
 16823                           ; BSR set to: 0
 16824                           ;tff.c: 287: CLUST cstat, ncl, scl, mcl;;tff.c: 288: FATFS *fs = FatFs;
 16825                           
 16826                           ; BSR set to: 0
 16827                           ;incstack = 0
 16828  002DDA  C04D  F07E         	movff	_FatFs,create_chain@fs
 16829  002DDE  C04E  F07F         	movff	_FatFs+1,create_chain@fs+1
 16830                           
 16831                           ; BSR set to: 0
 16832                           ;tff.c: 291: mcl = fs->max_clust;
 16833  002DE2  EE20 F016          	lfsr	2,22
 16834  002DE6  517E               	movf	create_chain@fs& (0+255),w,b
 16835  002DE8  26D9               	addwf	fsr2l,f,c
 16836  002DEA  517F               	movf	(create_chain@fs+1)& (0+255),w,b
 16837  002DEC  22DA               	addwfc	fsr2h,f,c
 16838  002DEE  CFDE F07C          	movff	postinc2,create_chain@mcl
 16839  002DF2  CFDD F07D          	movff	postdec2,create_chain@mcl+1
 16840                           
 16841                           ; BSR set to: 0
 16842                           ;tff.c: 292: if (clust == 0) {
 16843  002DF6  5178               	movf	create_chain@clust& (0+255),w,b
 16844  002DF8  1179               	iorwf	(create_chain@clust+1)& (0+255),w,b
 16845  002DFA  A4D8               	btfss	status,2,c
 16846  002DFC  D01B               	goto	l10849
 16847                           
 16848                           ; BSR set to: 0
 16849                           ;tff.c: 293: scl = fs->last_clust;
 16850  002DFE  EE20 F018          	lfsr	2,24
 16851  002E02  517E               	movf	create_chain@fs& (0+255),w,b
 16852  002E04  26D9               	addwf	fsr2l,f,c
 16853  002E06  517F               	movf	(create_chain@fs+1)& (0+255),w,b
 16854  002E08  22DA               	addwfc	fsr2h,f,c
 16855  002E0A  CFDE F082          	movff	postinc2,create_chain@scl
 16856  002E0E  CFDD F083          	movff	postdec2,create_chain@scl+1
 16857                           
 16858                           ; BSR set to: 0
 16859                           ;tff.c: 294: if (scl < 2 || scl >= mcl) scl = 1;
 16860  002E12  5183               	movf	(create_chain@scl+1)& (0+255),w,b
 16861  002E14  E104               	bnz	u12160
 16862  002E16  0E02               	movlw	2
 16863  002E18  5D82               	subwf	create_chain@scl& (0+255),w,b
 16864  002E1A  A0D8               	btfss	status,0,c
 16865  002E1C  D006               	goto	u12170
 16866  002E1E                     u12160:
 16867                           
 16868                           ; BSR set to: 0
 16869  002E1E  517C               	movf	create_chain@mcl& (0+255),w,b
 16870  002E20  5D82               	subwf	create_chain@scl& (0+255),w,b
 16871  002E22  517D               	movf	(create_chain@mcl+1)& (0+255),w,b
 16872  002E24  5983               	subwfb	(create_chain@scl+1)& (0+255),w,b
 16873  002E26  A0D8               	btfss	status,0,c
 16874  002E28  D02B               	goto	l918
 16875  002E2A                     u12170:
 16876                           
 16877                           ; BSR set to: 0
 16878  002E2A  0E00               	movlw	0
 16879  002E2C  6F83               	movwf	(create_chain@scl+1)& (0+255),b
 16880  002E2E  0E01               	movlw	1
 16881  002E30  6F82               	movwf	create_chain@scl& (0+255),b
 16882  002E32  D026               	goto	l918
 16883  002E34                     l10849:
 16884                           
 16885                           ; BSR set to: 0
 16886                           ;tff.c: 296: else {;tff.c: 297: cstat = get_cluster(clust);
 16887  002E34  C078  F04A         	movff	create_chain@clust,get_cluster@clust
 16888  002E38  C079  F04B         	movff	create_chain@clust+1,get_cluster@clust+1
 16889  002E3C  EC28  F013         	call	_get_cluster	;wreg free
 16890  002E40  C04A  F080         	movff	?_get_cluster,create_chain@cstat
 16891  002E44  C04B  F081         	movff	?_get_cluster+1,create_chain@cstat+1
 16892                           
 16893                           ;tff.c: 298: if (cstat < 2) return 1;
 16894  002E48  0100               	movlb	0	; () banked
 16895  002E4A  5181               	movf	(create_chain@cstat+1)& (0+255),w,b
 16896  002E4C  E10A               	bnz	l10857
 16897  002E4E  0E02               	movlw	2
 16898  002E50  5D80               	subwf	create_chain@cstat& (0+255),w,b
 16899  002E52  B0D8               	btfsc	status,0,c
 16900  002E54  D006               	goto	l10857
 16901  002E56                     u12180:
 16902  002E56  0E00               	movlw	0
 16903  002E58  0100               	movlb	0	; () banked
 16904  002E5A  6F79               	movwf	(?_create_chain+1)& (0+255),b
 16905  002E5C  0E01               	movlw	1
 16906  002E5E  6F78               	movwf	?_create_chain& (0+255),b
 16907  002E60  0012               	return	
 16908  002E62                     l10857:
 16909                           
 16910                           ; BSR set to: 0
 16911                           ;tff.c: 299: if (cstat < mcl) return cstat;
 16912  002E62  517C               	movf	create_chain@mcl& (0+255),w,b
 16913  002E64  5D80               	subwf	create_chain@cstat& (0+255),w,b
 16914  002E66  517D               	movf	(create_chain@mcl+1)& (0+255),w,b
 16915  002E68  5981               	subwfb	(create_chain@cstat+1)& (0+255),w,b
 16916  002E6A  B0D8               	btfsc	status,0,c
 16917  002E6C  D005               	goto	l921
 16918                           
 16919                           ; BSR set to: 0
 16920  002E6E  C080  F078         	movff	create_chain@cstat,?_create_chain
 16921  002E72  C081  F079         	movff	create_chain@cstat+1,?_create_chain+1
 16922  002E76  0012               	return	
 16923  002E78                     l921:
 16924                           
 16925                           ; BSR set to: 0
 16926                           ;tff.c: 300: scl = clust;
 16927  002E78  C078  F082         	movff	create_chain@clust,create_chain@scl
 16928  002E7C  C079  F083         	movff	create_chain@clust+1,create_chain@scl+1
 16929  002E80                     l918:
 16930                           
 16931                           ; BSR set to: 0
 16932                           ;tff.c: 301: };tff.c: 303: ncl = scl;
 16933  002E80  C082  F084         	movff	create_chain@scl,create_chain@ncl
 16934  002E84  C083  F085         	movff	create_chain@scl+1,create_chain@ncl+1
 16935  002E88                     l10861:
 16936                           
 16937                           ; BSR set to: 0
 16938                           ;tff.c: 305: ncl++;
 16939  002E88  4B84               	infsnz	create_chain@ncl& (0+255),f,b
 16940  002E8A  2B85               	incf	(create_chain@ncl+1)& (0+255),f,b
 16941                           
 16942                           ; BSR set to: 0
 16943                           ;tff.c: 306: if (ncl >= mcl) {
 16944  002E8C  517C               	movf	create_chain@mcl& (0+255),w,b
 16945  002E8E  5D84               	subwf	create_chain@ncl& (0+255),w,b
 16946  002E90  517D               	movf	(create_chain@mcl+1)& (0+255),w,b
 16947  002E92  5985               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 16948  002E94  A0D8               	btfss	status,0,c
 16949  002E96  D00F               	goto	l10873
 16950                           
 16951                           ; BSR set to: 0
 16952                           ;tff.c: 307: ncl = 2;
 16953  002E98  0E00               	movlw	0
 16954  002E9A  6F85               	movwf	(create_chain@ncl+1)& (0+255),b
 16955  002E9C  0E02               	movlw	2
 16956  002E9E  6F84               	movwf	create_chain@ncl& (0+255),b
 16957                           
 16958                           ; BSR set to: 0
 16959                           ;tff.c: 308: if (ncl > scl) return 0;
 16960  002EA0  5183               	movf	(create_chain@scl+1)& (0+255),w,b
 16961  002EA2  E109               	bnz	l10873
 16962  002EA4  0E02               	movlw	2
 16963  002EA6  5D82               	subwf	create_chain@scl& (0+255),w,b
 16964  002EA8  B0D8               	btfsc	status,0,c
 16965  002EAA  D005               	goto	l10873
 16966  002EAC                     u12210:
 16967                           
 16968                           ; BSR set to: 0
 16969  002EAC  0E00               	movlw	0
 16970  002EAE  6F79               	movwf	(?_create_chain+1)& (0+255),b
 16971  002EB0  0E00               	movlw	0
 16972  002EB2  6F78               	movwf	?_create_chain& (0+255),b
 16973  002EB4  0012               	return	
 16974  002EB6                     l10873:
 16975                           
 16976                           ; BSR set to: 0
 16977                           ;tff.c: 309: };tff.c: 310: cstat = get_cluster(ncl);
 16978  002EB6  C084  F04A         	movff	create_chain@ncl,get_cluster@clust
 16979  002EBA  C085  F04B         	movff	create_chain@ncl+1,get_cluster@clust+1
 16980  002EBE  EC28  F013         	call	_get_cluster	;wreg free
 16981  002EC2  C04A  F080         	movff	?_get_cluster,create_chain@cstat
 16982  002EC6  C04B  F081         	movff	?_get_cluster+1,create_chain@cstat+1
 16983                           
 16984                           ;tff.c: 311: if (cstat == 0) break;
 16985  002ECA  0100               	movlb	0	; () banked
 16986  002ECC  5180               	movf	create_chain@cstat& (0+255),w,b
 16987  002ECE  1181               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 16988  002ED0  B4D8               	btfsc	status,2,c
 16989  002ED2  D00C               	goto	l10891
 16990                           
 16991                           ; BSR set to: 0
 16992                           ;tff.c: 312: if (cstat == 1) return 1;
 16993  002ED4  0580               	decf	create_chain@cstat& (0+255),w,b
 16994  002ED6  1181               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 16995  002ED8  B4D8               	btfsc	status,2,c
 16996  002EDA  D7BD               	goto	u12180
 16997                           
 16998                           ; BSR set to: 0
 16999                           ;tff.c: 313: if (ncl == scl) return 0;
 17000  002EDC  5182               	movf	create_chain@scl& (0+255),w,b
 17001  002EDE  1984               	xorwf	create_chain@ncl& (0+255),w,b
 17002  002EE0  E1D3               	bnz	l10861
 17003  002EE2  5183               	movf	(create_chain@scl+1)& (0+255),w,b
 17004  002EE4  1985               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 17005  002EE6  B4D8               	btfsc	status,2,c
 17006  002EE8  D7E1               	goto	u12210
 17007  002EEA  D7CE               	goto	l10861
 17008  002EEC                     l10891:
 17009                           
 17010                           ; BSR set to: 0
 17011                           ;tff.c: 316: if (!put_cluster(ncl, (CLUST)0x0FFFFFFF)) return 1;
 17012  002EEC  C084  F060         	movff	create_chain@ncl,put_cluster@clust
 17013  002EF0  C085  F061         	movff	create_chain@ncl+1,put_cluster@clust+1
 17014  002EF4  0EFF               	movlw	255
 17015  002EF6  6F63               	movwf	(put_cluster@val+1)& (0+255),b
 17016  002EF8  6962               	setf	put_cluster@val& (0+255),b
 17017  002EFA  ECF2  F011         	call	_put_cluster	;wreg free
 17018  002EFE  0900               	iorlw	0
 17019  002F00  B4D8               	btfsc	status,2,c
 17020  002F02  D7A9               	goto	u12180
 17021                           
 17022                           ;tff.c: 317: if (clust != 0 && !put_cluster(clust, ncl)) return 1;
 17023  002F04  0100               	movlb	0	; () banked
 17024  002F06  5178               	movf	create_chain@clust& (0+255),w,b
 17025  002F08  1179               	iorwf	(create_chain@clust+1)& (0+255),w,b
 17026  002F0A  B4D8               	btfsc	status,2,c
 17027  002F0C  D00D               	goto	l10905
 17028                           
 17029                           ; BSR set to: 0
 17030  002F0E  C078  F060         	movff	create_chain@clust,put_cluster@clust
 17031  002F12  C079  F061         	movff	create_chain@clust+1,put_cluster@clust+1
 17032  002F16  C084  F062         	movff	create_chain@ncl,put_cluster@val
 17033  002F1A  C085  F063         	movff	create_chain@ncl+1,put_cluster@val+1
 17034  002F1E  ECF2  F011         	call	_put_cluster	;wreg free
 17035  002F22  0900               	iorlw	0
 17036  002F24  B4D8               	btfsc	status,2,c
 17037  002F26  D797               	goto	u12180
 17038  002F28                     l10905:
 17039                           
 17040                           ;tff.c: 319: fs->last_clust = ncl;
 17041  002F28  0100               	movlb	0	; () banked
 17042  002F2A  EE20 F018          	lfsr	2,24
 17043  002F2E  517E               	movf	create_chain@fs& (0+255),w,b
 17044  002F30  26D9               	addwf	fsr2l,f,c
 17045  002F32  517F               	movf	(create_chain@fs+1)& (0+255),w,b
 17046  002F34  22DA               	addwfc	fsr2h,f,c
 17047  002F36  C084  FFDE         	movff	create_chain@ncl,postinc2
 17048  002F3A  C085  FFDD         	movff	create_chain@ncl+1,postdec2
 17049                           
 17050                           ;tff.c: 320: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 17051  002F3E  EE20 F01A          	lfsr	2,26
 17052  002F42  517E               	movf	create_chain@fs& (0+255),w,b
 17053  002F44  26D9               	addwf	fsr2l,f,c
 17054  002F46  517F               	movf	(create_chain@fs+1)& (0+255),w,b
 17055  002F48  22DA               	addwfc	fsr2h,f,c
 17056  002F4A  28DE               	incf	postinc2,w,c
 17057  002F4C  E103               	bnz	u12280
 17058  002F4E  28DE               	incf	postinc2,w,c
 17059  002F50  B4D8               	btfsc	status,2,c
 17060  002F52  D009               	goto	l10909
 17061  002F54                     u12280:
 17062                           
 17063                           ; BSR set to: 0
 17064                           ;tff.c: 321: fs->free_clust--;
 17065  002F54  EE20 F01A          	lfsr	2,26
 17066  002F58  517E               	movf	create_chain@fs& (0+255),w,b
 17067  002F5A  26D9               	addwf	fsr2l,f,c
 17068  002F5C  517F               	movf	(create_chain@fs+1)& (0+255),w,b
 17069  002F5E  22DA               	addwfc	fsr2h,f,c
 17070  002F60  06DE               	decf	postinc2,f,c
 17071  002F62  0E00               	movlw	0
 17072  002F64  5ADD               	subwfb	postdec2,f,c
 17073  002F66                     l10909:
 17074                           
 17075                           ; BSR set to: 0
 17076                           ;tff.c: 325: };tff.c: 327: return ncl;
 17077  002F66  C084  F078         	movff	create_chain@ncl,?_create_chain
 17078  002F6A  C085  F079         	movff	create_chain@ncl+1,?_create_chain+1
 17079                           
 17080                           ; BSR set to: 0
 17081  002F6E  0012               	return		;funcret
 17082  002F70                     __end_of_create_chain:
 17083                           	callstack 0
 17084                           
 17085 ;; *************** function _put_cluster *****************
 17086 ;; Defined at:
 17087 ;;		line 198 in file "bibliotecas/tff.c"
 17088 ;; Parameters:    Size  Location     Type
 17089 ;;  clust           2    0[BANK0 ] unsigned short 
 17090 ;;  val             2    2[BANK0 ] unsigned short 
 17091 ;; Auto vars:     Size  Location     Type
 17092 ;;  fatsect         4   14[BANK0 ] unsigned long 
 17093 ;;  fs              2   22[BANK0 ] PTR struct _FATFS
 17094 ;;		 -> NULL(0), fs(544), 
 17095 ;;  p               2   20[BANK0 ] PTR unsigned char 
 17096 ;;		 -> fs.win(512), NULL(0), fs(544), 
 17097 ;;  bc              2   18[BANK0 ] unsigned short 
 17098 ;; Return value:  Size  Location     Type
 17099 ;;                  1    wreg      enum E105
 17100 ;; Registers used:
 17101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17102 ;; Tracked objects:
 17103 ;;		On entry : 3F/0
 17104 ;;		On exit  : 0/0
 17105 ;;		Unchanged: 0/0
 17106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17107 ;;      Params:         0       4       0       0       0       0       0       0       0
 17108 ;;      Locals:         0      14       0       0       0       0       0       0       0
 17109 ;;      Temps:          0       6       0       0       0       0       0       0       0
 17110 ;;      Totals:         0      24       0       0       0       0       0       0       0
 17111 ;;Total ram usage:       24 bytes
 17112 ;; Hardware stack levels used:    1
 17113 ;; Hardware stack levels required when called:    8
 17114 ;; This function calls:
 17115 ;;		___wmul
 17116 ;;		_move_window
 17117 ;; This function is called by:
 17118 ;;		_remove_chain
 17119 ;;		_create_chain
 17120 ;; This function uses a non-reentrant model
 17121 ;;
 17122                           
 17123                           	psect	text94
 17124  0023E4                     __ptext94:
 17125                           	callstack 0
 17126  0023E4                     _put_cluster:
 17127                           	callstack 13
 17128                           
 17129                           ; BSR set to: 0
 17130                           ;tff.c: 203: WORD bc;;tff.c: 204: BYTE *p;;tff.c: 205: DWORD fatsect;;tff.c: 206: FATFS 
      +                          *fs = FatFs;
 17131                           
 17132                           ; BSR set to: 0
 17133                           ;incstack = 0
 17134  0023E4  C04D  F076         	movff	_FatFs,put_cluster@fs
 17135  0023E8  C04E  F077         	movff	_FatFs+1,put_cluster@fs+1
 17136                           
 17137                           ; BSR set to: 0
 17138                           ;tff.c: 209: fatsect = fs->fatbase;
 17139  0023EC  EE20 F008          	lfsr	2,8
 17140  0023F0  5176               	movf	put_cluster@fs& (0+255),w,b
 17141  0023F2  26D9               	addwf	fsr2l,f,c
 17142  0023F4  5177               	movf	(put_cluster@fs+1)& (0+255),w,b
 17143  0023F6  22DA               	addwfc	fsr2h,f,c
 17144  0023F8  CFDE F06E          	movff	postinc2,put_cluster@fatsect
 17145  0023FC  CFDE F06F          	movff	postinc2,put_cluster@fatsect+1
 17146  002400  CFDE F070          	movff	postinc2,put_cluster@fatsect+2
 17147  002404  CFDE F071          	movff	postinc2,put_cluster@fatsect+3
 17148                           
 17149                           ;tff.c: 210: switch (fs->fs_type) {
 17150  002408  D10B               	goto	l10791
 17151  00240A                     l10739:
 17152                           
 17153                           ; BSR set to: 0
 17154                           ;tff.c: 212: bc = (WORD)clust * 3 / 2;
 17155  00240A  C060  F00A         	movff	put_cluster@clust,___wmul@multiplier
 17156  00240E  C061  F00B         	movff	put_cluster@clust+1,___wmul@multiplier+1
 17157  002412  0E00               	movlw	0
 17158  002414  6E0D               	movwf	(___wmul@multiplicand+1)^0,c
 17159  002416  0E03               	movlw	3
 17160  002418  6E0C               	movwf	___wmul@multiplicand^0,c
 17161  00241A  ECC6  F02C         	call	___wmul	;wreg free
 17162  00241E  90D8               	bcf	status,0,c
 17163  002420  300B               	rrcf	(?___wmul+1)^0,w,c
 17164  002422  0100               	movlb	0	; () banked
 17165  002424  6F64               	movwf	??_put_cluster& (0+255),b
 17166  002426  300A               	rrcf	?___wmul^0,w,c
 17167  002428  6F72               	movwf	put_cluster@bc& (0+255),b
 17168  00242A  C064  F073         	movff	??_put_cluster,put_cluster@bc+1
 17169                           
 17170                           ; BSR set to: 0
 17171                           ;tff.c: 213: if (!move_window(fatsect + bc / 512U)) return FALSE;
 17172  00242E  C072  F064         	movff	put_cluster@bc,??_put_cluster
 17173  002432  C073  F065         	movff	put_cluster@bc+1,??_put_cluster+1
 17174  002436  0E09               	movlw	9
 17175  002438  6F66               	movwf	(??_put_cluster+2)& (0+255),b
 17176  00243A                     u12015:
 17177  00243A  90D8               	bcf	status,0,c
 17178  00243C  3365               	rrcf	(??_put_cluster+1)& (0+255),f,b
 17179  00243E  3364               	rrcf	??_put_cluster& (0+255),f,b
 17180  002440  2F66               	decfsz	(??_put_cluster+2)& (0+255),f,b
 17181  002442  D7FB               	goto	u12015
 17182  002444  5164               	movf	??_put_cluster& (0+255),w,b
 17183  002446  256E               	addwf	put_cluster@fatsect& (0+255),w,b
 17184  002448  6E35               	movwf	move_window@sector^0,c
 17185  00244A  5165               	movf	(??_put_cluster+1)& (0+255),w,b
 17186  00244C  216F               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 17187  00244E  6E36               	movwf	(move_window@sector+1)^0,c
 17188  002450  0E00               	movlw	0
 17189  002452  2170               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 17190  002454  6E37               	movwf	(move_window@sector+2)^0,c
 17191  002456  0E00               	movlw	0
 17192  002458  2171               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 17193  00245A  6E38               	movwf	(move_window@sector+3)^0,c
 17194  00245C  EC47  F015         	call	_move_window	;wreg free
 17195  002460  0900               	iorlw	0
 17196  002462  A4D8               	btfss	status,2,c
 17197  002464  D002               	goto	l10747
 17198  002466                     u12020:
 17199  002466  0E00               	movlw	0
 17200  002468  0012               	return	
 17201  00246A                     l10747:
 17202                           
 17203                           ;tff.c: 214: p = &fs->win[bc % 512U];
 17204  00246A  0EFF               	movlw	255
 17205  00246C  0100               	movlb	0	; () banked
 17206  00246E  6F64               	movwf	??_put_cluster& (0+255),b
 17207  002470  0E01               	movlw	1
 17208  002472  6F65               	movwf	(??_put_cluster+1)& (0+255),b
 17209  002474  C072  F066         	movff	put_cluster@bc,??_put_cluster+2
 17210  002478  C073  F067         	movff	put_cluster@bc+1,??_put_cluster+3
 17211  00247C  5164               	movf	??_put_cluster& (0+255),w,b
 17212  00247E  1766               	andwf	(??_put_cluster+2)& (0+255),f,b
 17213  002480  5165               	movf	(??_put_cluster+1)& (0+255),w,b
 17214  002482  1767               	andwf	(??_put_cluster+3)& (0+255),f,b
 17215  002484  C076  F068         	movff	put_cluster@fs,??_put_cluster+4
 17216  002488  C077  F069         	movff	put_cluster@fs+1,??_put_cluster+5
 17217  00248C  5166               	movf	(??_put_cluster+2)& (0+255),w,b
 17218  00248E  2768               	addwf	(??_put_cluster+4)& (0+255),f,b
 17219  002490  5167               	movf	(??_put_cluster+3)& (0+255),w,b
 17220  002492  2369               	addwfc	(??_put_cluster+5)& (0+255),f,b
 17221  002494  0E20               	movlw	32
 17222  002496  2568               	addwf	(??_put_cluster+4)& (0+255),w,b
 17223  002498  6F74               	movwf	put_cluster@p& (0+255),b
 17224  00249A  0E00               	movlw	0
 17225  00249C  2169               	addwfc	(??_put_cluster+5)& (0+255),w,b
 17226  00249E  6F75               	movwf	(put_cluster@p+1)& (0+255),b
 17227                           
 17228                           ; BSR set to: 0
 17229                           ;tff.c: 215: *p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 17230  0024A0  B160               	btfsc	put_cluster@clust& (0+255),0,b
 17231  0024A2  D004               	goto	l10753
 17232                           
 17233                           ; BSR set to: 0
 17234  0024A4  C062  F06A         	movff	put_cluster@val,_put_cluster$1624
 17235  0024A8  6B6B               	clrf	(_put_cluster$1624+1)& (0+255),b
 17236  0024AA  D01A               	goto	l10755
 17237  0024AC                     l10753:
 17238                           
 17239                           ; BSR set to: 0
 17240  0024AC  5162               	movf	put_cluster@val& (0+255),w,b
 17241  0024AE  6F64               	movwf	??_put_cluster& (0+255),b
 17242  0024B0  6B65               	clrf	(??_put_cluster+1)& (0+255),b
 17243  0024B2  3B64               	swapf	??_put_cluster& (0+255),f,b
 17244  0024B4  3B65               	swapf	(??_put_cluster+1)& (0+255),f,b
 17245  0024B6  0EF0               	movlw	240
 17246  0024B8  1765               	andwf	(??_put_cluster+1)& (0+255),f,b
 17247  0024BA  5164               	movf	??_put_cluster& (0+255),w,b
 17248  0024BC  0B0F               	andlw	15
 17249  0024BE  1365               	iorwf	(??_put_cluster+1)& (0+255),f,b
 17250  0024C0  0EF0               	movlw	240
 17251  0024C2  1764               	andwf	??_put_cluster& (0+255),f,b
 17252  0024C4  C074  FFD9         	movff	put_cluster@p,fsr2l
 17253  0024C8  C075  FFDA         	movff	put_cluster@p+1,fsr2h
 17254  0024CC  50DF               	movf	indf2,w,c
 17255  0024CE  0B0F               	andlw	15
 17256  0024D0  6F66               	movwf	(??_put_cluster+2)& (0+255),b
 17257  0024D2  6B67               	clrf	(??_put_cluster+3)& (0+255),b
 17258  0024D4  5164               	movf	??_put_cluster& (0+255),w,b
 17259  0024D6  1166               	iorwf	(??_put_cluster+2)& (0+255),w,b
 17260  0024D8  6F6A               	movwf	_put_cluster$1624& (0+255),b
 17261  0024DA  5165               	movf	(??_put_cluster+1)& (0+255),w,b
 17262  0024DC  1167               	iorwf	(??_put_cluster+3)& (0+255),w,b
 17263  0024DE  6F6B               	movwf	(_put_cluster$1624+1)& (0+255),b
 17264  0024E0                     l10755:
 17265                           
 17266                           ; BSR set to: 0
 17267  0024E0  C074  FFD9         	movff	put_cluster@p,fsr2l
 17268  0024E4  C075  FFDA         	movff	put_cluster@p+1,fsr2h
 17269  0024E8  C06A  FFDF         	movff	_put_cluster$1624,indf2
 17270                           
 17271                           ; BSR set to: 0
 17272                           ;tff.c: 216: bc++;
 17273  0024EC  4B72               	infsnz	put_cluster@bc& (0+255),f,b
 17274  0024EE  2B73               	incf	(put_cluster@bc+1)& (0+255),f,b
 17275                           
 17276                           ; BSR set to: 0
 17277                           ;tff.c: 217: fs->winflag = 1;
 17278  0024F0  EE20 F01F          	lfsr	2,31
 17279  0024F4  5176               	movf	put_cluster@fs& (0+255),w,b
 17280  0024F6  26D9               	addwf	fsr2l,f,c
 17281  0024F8  5177               	movf	(put_cluster@fs+1)& (0+255),w,b
 17282  0024FA  22DA               	addwfc	fsr2h,f,c
 17283  0024FC  0E01               	movlw	1
 17284  0024FE  6EDF               	movwf	indf2,c
 17285                           
 17286                           ; BSR set to: 0
 17287                           ;tff.c: 218: if (!move_window(fatsect + bc / 512U)) return FALSE;
 17288  002500  C072  F064         	movff	put_cluster@bc,??_put_cluster
 17289  002504  C073  F065         	movff	put_cluster@bc+1,??_put_cluster+1
 17290  002508  0E09               	movlw	9
 17291  00250A  6F66               	movwf	(??_put_cluster+2)& (0+255),b
 17292  00250C                     u12045:
 17293  00250C  90D8               	bcf	status,0,c
 17294  00250E  3365               	rrcf	(??_put_cluster+1)& (0+255),f,b
 17295  002510  3364               	rrcf	??_put_cluster& (0+255),f,b
 17296  002512  2F66               	decfsz	(??_put_cluster+2)& (0+255),f,b
 17297  002514  D7FB               	goto	u12045
 17298  002516  5164               	movf	??_put_cluster& (0+255),w,b
 17299  002518  256E               	addwf	put_cluster@fatsect& (0+255),w,b
 17300  00251A  6E35               	movwf	move_window@sector^0,c
 17301  00251C  5165               	movf	(??_put_cluster+1)& (0+255),w,b
 17302  00251E  216F               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 17303  002520  6E36               	movwf	(move_window@sector+1)^0,c
 17304  002522  0E00               	movlw	0
 17305  002524  2170               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 17306  002526  6E37               	movwf	(move_window@sector+2)^0,c
 17307  002528  0E00               	movlw	0
 17308  00252A  2171               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 17309  00252C  6E38               	movwf	(move_window@sector+3)^0,c
 17310  00252E  EC47  F015         	call	_move_window	;wreg free
 17311  002532  0900               	iorlw	0
 17312  002534  B4D8               	btfsc	status,2,c
 17313  002536  D797               	goto	u12020
 17314                           
 17315                           ;tff.c: 219: p = &fs->win[bc % 512U];
 17316  002538  0EFF               	movlw	255
 17317  00253A  0100               	movlb	0	; () banked
 17318  00253C  6F64               	movwf	??_put_cluster& (0+255),b
 17319  00253E  0E01               	movlw	1
 17320  002540  6F65               	movwf	(??_put_cluster+1)& (0+255),b
 17321  002542  C072  F066         	movff	put_cluster@bc,??_put_cluster+2
 17322  002546  C073  F067         	movff	put_cluster@bc+1,??_put_cluster+3
 17323  00254A  5164               	movf	??_put_cluster& (0+255),w,b
 17324  00254C  1766               	andwf	(??_put_cluster+2)& (0+255),f,b
 17325  00254E  5165               	movf	(??_put_cluster+1)& (0+255),w,b
 17326  002550  1767               	andwf	(??_put_cluster+3)& (0+255),f,b
 17327  002552  C076  F068         	movff	put_cluster@fs,??_put_cluster+4
 17328  002556  C077  F069         	movff	put_cluster@fs+1,??_put_cluster+5
 17329  00255A  5166               	movf	(??_put_cluster+2)& (0+255),w,b
 17330  00255C  2768               	addwf	(??_put_cluster+4)& (0+255),f,b
 17331  00255E  5167               	movf	(??_put_cluster+3)& (0+255),w,b
 17332  002560  2369               	addwfc	(??_put_cluster+5)& (0+255),f,b
 17333  002562  0E20               	movlw	32
 17334  002564  2568               	addwf	(??_put_cluster+4)& (0+255),w,b
 17335  002566  6F74               	movwf	put_cluster@p& (0+255),b
 17336  002568  0E00               	movlw	0
 17337  00256A  2169               	addwfc	(??_put_cluster+5)& (0+255),w,b
 17338  00256C  6F75               	movwf	(put_cluster@p+1)& (0+255),b
 17339                           
 17340                           ; BSR set to: 0
 17341                           ;tff.c: 220: *p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x
      +                          0F));
 17342  00256E  B160               	btfsc	put_cluster@clust& (0+255),0,b
 17343  002570  D00E               	goto	l10773
 17344                           
 17345                           ; BSR set to: 0
 17346  002572  C063  F064         	movff	put_cluster@val+1,??_put_cluster
 17347  002576  0E0F               	movlw	15
 17348  002578  1764               	andwf	??_put_cluster& (0+255),f,b
 17349  00257A  C074  FFD9         	movff	put_cluster@p,fsr2l
 17350  00257E  C075  FFDA         	movff	put_cluster@p+1,fsr2h
 17351  002582  50DF               	movf	indf2,w,c
 17352  002584  0BF0               	andlw	240
 17353  002586  1164               	iorwf	??_put_cluster& (0+255),w,b
 17354  002588  6F65               	movwf	(??_put_cluster+1)& (0+255),b
 17355  00258A  5165               	movf	(??_put_cluster+1)& (0+255),w,b
 17356  00258C  D00C               	goto	L6
 17357  00258E                     l10773:
 17358                           
 17359                           ; BSR set to: 0
 17360  00258E  C062  F064         	movff	put_cluster@val,??_put_cluster
 17361  002592  C063  F065         	movff	put_cluster@val+1,??_put_cluster+1
 17362  002596  0E04               	movlw	4
 17363  002598  6F66               	movwf	(??_put_cluster+2)& (0+255),b
 17364  00259A                     u12075:
 17365  00259A  90D8               	bcf	status,0,c
 17366  00259C  3365               	rrcf	(??_put_cluster+1)& (0+255),f,b
 17367  00259E  3364               	rrcf	??_put_cluster& (0+255),f,b
 17368  0025A0  2F66               	decfsz	(??_put_cluster+2)& (0+255),f,b
 17369  0025A2  D7FB               	goto	u12075
 17370  0025A4  5164               	movf	??_put_cluster& (0+255),w,b
 17371  0025A6                     L6:
 17372  0025A6  6F6C               	movwf	_put_cluster$1625& (0+255),b
 17373  0025A8  6B6D               	clrf	(_put_cluster$1625+1)& (0+255),b
 17374                           
 17375                           ; BSR set to: 0
 17376  0025AA  C074  FFD9         	movff	put_cluster@p,fsr2l
 17377  0025AE  C075  FFDA         	movff	put_cluster@p+1,fsr2h
 17378  0025B2  C06C  FFDF         	movff	_put_cluster$1625,indf2
 17379                           
 17380                           ;tff.c: 221: break;
 17381  0025B6  D042               	goto	l10793
 17382  0025B8                     l10777:
 17383                           
 17384                           ; BSR set to: 0
 17385                           ;tff.c: 224: if (!move_window(fatsect + clust / 256)) return FALSE;
 17386  0025B8  5161               	movf	(put_cluster@clust+1)& (0+255),w,b
 17387  0025BA  256E               	addwf	put_cluster@fatsect& (0+255),w,b
 17388  0025BC  6E35               	movwf	move_window@sector^0,c
 17389  0025BE  0E00               	movlw	0
 17390  0025C0  216F               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 17391  0025C2  6E36               	movwf	(move_window@sector+1)^0,c
 17392  0025C4  0E00               	movlw	0
 17393  0025C6  2170               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 17394  0025C8  6E37               	movwf	(move_window@sector+2)^0,c
 17395  0025CA  0E00               	movlw	0
 17396  0025CC  2171               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 17397  0025CE  6E38               	movwf	(move_window@sector+3)^0,c
 17398  0025D0  EC47  F015         	call	_move_window	;wreg free
 17399  0025D4  0900               	iorlw	0
 17400  0025D6  B4D8               	btfsc	status,2,c
 17401  0025D8  D746               	goto	u12020
 17402                           
 17403                           ;tff.c: 225: *(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U])=(WORD)((WORD)val);
 17404  0025DA  0EFF               	movlw	255
 17405  0025DC  0100               	movlb	0	; () banked
 17406  0025DE  6F64               	movwf	??_put_cluster& (0+255),b
 17407  0025E0  0E01               	movlw	1
 17408  0025E2  6F65               	movwf	(??_put_cluster+1)& (0+255),b
 17409  0025E4  C060  F066         	movff	put_cluster@clust,??_put_cluster+2
 17410  0025E8  C061  F067         	movff	put_cluster@clust+1,??_put_cluster+3
 17411  0025EC  90D8               	bcf	status,0,c
 17412  0025EE  3766               	rlcf	(??_put_cluster+2)& (0+255),f,b
 17413  0025F0  3767               	rlcf	(??_put_cluster+3)& (0+255),f,b
 17414  0025F2  5164               	movf	??_put_cluster& (0+255),w,b
 17415  0025F4  1766               	andwf	(??_put_cluster+2)& (0+255),f,b
 17416  0025F6  5165               	movf	(??_put_cluster+1)& (0+255),w,b
 17417  0025F8  1767               	andwf	(??_put_cluster+3)& (0+255),f,b
 17418  0025FA  C076  F068         	movff	put_cluster@fs,??_put_cluster+4
 17419  0025FE  C077  F069         	movff	put_cluster@fs+1,??_put_cluster+5
 17420  002602  5166               	movf	(??_put_cluster+2)& (0+255),w,b
 17421  002604  2768               	addwf	(??_put_cluster+4)& (0+255),f,b
 17422  002606  5167               	movf	(??_put_cluster+3)& (0+255),w,b
 17423  002608  2369               	addwfc	(??_put_cluster+5)& (0+255),f,b
 17424  00260A  0E20               	movlw	32
 17425  00260C  2568               	addwf	(??_put_cluster+4)& (0+255),w,b
 17426  00260E  6ED9               	movwf	fsr2l,c
 17427  002610  0E00               	movlw	0
 17428  002612  2169               	addwfc	(??_put_cluster+5)& (0+255),w,b
 17429  002614  6EDA               	movwf	fsr2h,c
 17430  002616  C062  FFDE         	movff	put_cluster@val,postinc2
 17431  00261A  C063  FFDD         	movff	put_cluster@val+1,postdec2
 17432                           
 17433                           ;tff.c: 226: break;
 17434  00261E  D00E               	goto	l10793
 17435  002620                     l10791:
 17436                           
 17437                           ; BSR set to: 0
 17438  002620  EE20 F01C          	lfsr	2,28
 17439  002624  5176               	movf	put_cluster@fs& (0+255),w,b
 17440  002626  26D9               	addwf	fsr2l,f,c
 17441  002628  5177               	movf	(put_cluster@fs+1)& (0+255),w,b
 17442  00262A  22DA               	addwfc	fsr2h,f,c
 17443  00262C  50DF               	movf	indf2,w,c
 17444                           
 17445                           ; Switch size 1, requested type "simple"
 17446                           ; Number of cases is 2, Range of values is 1 to 2
 17447                           ; switch strategies available:
 17448                           ; Name         Instructions Cycles
 17449                           ; simple_byte            7     4 (average)
 17450                           ;	Chosen strategy is simple_byte
 17451  00262E  0A01               	xorlw	1	; case 1
 17452  002630  B4D8               	btfsc	status,2,c
 17453  002632  D6EB               	goto	l10739
 17454  002634  0A03               	xorlw	3	; case 2
 17455  002636  B4D8               	btfsc	status,2,c
 17456  002638  D7BF               	goto	l10777
 17457  00263A  D715               	goto	u12020
 17458  00263C                     l10793:
 17459                           
 17460                           ; BSR set to: 0
 17461                           ;tff.c: 236: fs->winflag = 1;
 17462  00263C  EE20 F01F          	lfsr	2,31
 17463  002640  5176               	movf	put_cluster@fs& (0+255),w,b
 17464  002642  26D9               	addwf	fsr2l,f,c
 17465  002644  5177               	movf	(put_cluster@fs+1)& (0+255),w,b
 17466  002646  22DA               	addwfc	fsr2h,f,c
 17467  002648  0E01               	movlw	1
 17468  00264A  6EDF               	movwf	indf2,c
 17469                           
 17470                           ; BSR set to: 0
 17471                           ;tff.c: 237: return TRUE;
 17472  00264C  0E01               	movlw	1
 17473  00264E  0012               	return		;funcret
 17474  002650                     __end_of_put_cluster:
 17475                           	callstack 0
 17476                           
 17477 ;; *************** function _get_cluster *****************
 17478 ;; Defined at:
 17479 ;;		line 155 in file "bibliotecas/tff.c"
 17480 ;; Parameters:    Size  Location     Type
 17481 ;;  clust           2   73[COMRAM] unsigned short 
 17482 ;; Auto vars:     Size  Location     Type
 17483 ;;  fatsect         4   11[BANK0 ] unsigned long 
 17484 ;;  fs              2   17[BANK0 ] PTR struct _FATFS
 17485 ;;		 -> NULL(0), fs(544), 
 17486 ;;  bc              2   15[BANK0 ] unsigned short 
 17487 ;;  wc              2    9[BANK0 ] unsigned short 
 17488 ;; Return value:  Size  Location     Type
 17489 ;;                  2   73[COMRAM] unsigned short 
 17490 ;; Registers used:
 17491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17492 ;; Tracked objects:
 17493 ;;		On entry : 3F/0
 17494 ;;		On exit  : 0/0
 17495 ;;		Unchanged: 0/0
 17496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17497 ;;      Params:         2       0       0       0       0       0       0       0       0
 17498 ;;      Locals:         0      10       0       0       0       0       0       0       0
 17499 ;;      Temps:          0       9       0       0       0       0       0       0       0
 17500 ;;      Totals:         2      19       0       0       0       0       0       0       0
 17501 ;;Total ram usage:       21 bytes
 17502 ;; Hardware stack levels used:    1
 17503 ;; Hardware stack levels required when called:    8
 17504 ;; This function calls:
 17505 ;;		___wmul
 17506 ;;		_move_window
 17507 ;; This function is called by:
 17508 ;;		_remove_chain
 17509 ;;		_create_chain
 17510 ;;		_next_dir_entry
 17511 ;;		_f_lseek
 17512 ;;		_f_read
 17513 ;; This function uses a non-reentrant model
 17514 ;;
 17515                           
 17516                           	psect	text95
 17517  002650                     __ptext95:
 17518                           	callstack 0
 17519  002650                     _get_cluster:
 17520                           	callstack 13
 17521                           
 17522                           ; BSR set to: 0
 17523                           ;tff.c: 159: WORD wc, bc;;tff.c: 160: DWORD fatsect;;tff.c: 161: FATFS *fs = FatFs;
 17524                           
 17525                           ;incstack = 0
 17526  002650  C04D  F071         	movff	_FatFs,get_cluster@fs
 17527  002654  C04E  F072         	movff	_FatFs+1,get_cluster@fs+1
 17528                           
 17529                           ;tff.c: 164: if (clust >= 2 && clust < fs->max_clust) {
 17530  002658  504B               	movf	(get_cluster@clust+1)^0,w,c
 17531  00265A  E104               	bnz	u11920
 17532  00265C  0E02               	movlw	2
 17533  00265E  5C4A               	subwf	get_cluster@clust^0,w,c
 17534  002660  A0D8               	btfss	status,0,c
 17535  002662  D105               	goto	l10731
 17536  002664                     u11920:
 17537                           
 17538                           ; BSR set to: 0
 17539  002664  EE20 F016          	lfsr	2,22
 17540  002668  5171               	movf	get_cluster@fs& (0+255),w,b
 17541  00266A  26D9               	addwf	fsr2l,f,c
 17542  00266C  5172               	movf	(get_cluster@fs+1)& (0+255),w,b
 17543  00266E  22DA               	addwfc	fsr2h,f,c
 17544  002670  50DE               	movf	postinc2,w,c
 17545  002672  5C4A               	subwf	get_cluster@clust^0,w,c
 17546  002674  50DE               	movf	postinc2,w,c
 17547  002676  584B               	subwfb	(get_cluster@clust+1)^0,w,c
 17548  002678  B0D8               	btfsc	status,0,c
 17549  00267A  D0F9               	goto	l10731
 17550                           
 17551                           ; BSR set to: 0
 17552                           ;tff.c: 165: fatsect = fs->fatbase;
 17553  00267C  EE20 F008          	lfsr	2,8
 17554  002680  5171               	movf	get_cluster@fs& (0+255),w,b
 17555  002682  26D9               	addwf	fsr2l,f,c
 17556  002684  5172               	movf	(get_cluster@fs+1)& (0+255),w,b
 17557  002686  22DA               	addwfc	fsr2h,f,c
 17558  002688  CFDE F06B          	movff	postinc2,get_cluster@fatsect
 17559  00268C  CFDE F06C          	movff	postinc2,get_cluster@fatsect+1
 17560  002690  CFDE F06D          	movff	postinc2,get_cluster@fatsect+2
 17561  002694  CFDE F06E          	movff	postinc2,get_cluster@fatsect+3
 17562                           
 17563                           ;tff.c: 166: switch (fs->fs_type) {
 17564  002698  D0DD               	goto	l10729
 17565  00269A                     l10695:
 17566                           
 17567                           ; BSR set to: 0
 17568                           ;tff.c: 168: bc = (WORD)clust * 3 / 2;
 17569  00269A  C04A  F00A         	movff	get_cluster@clust,___wmul@multiplier
 17570  00269E  C04B  F00B         	movff	get_cluster@clust+1,___wmul@multiplier+1
 17571  0026A2  0E00               	movlw	0
 17572  0026A4  6E0D               	movwf	(___wmul@multiplicand+1)^0,c
 17573  0026A6  0E03               	movlw	3
 17574  0026A8  6E0C               	movwf	___wmul@multiplicand^0,c
 17575  0026AA  ECC6  F02C         	call	___wmul	;wreg free
 17576  0026AE  90D8               	bcf	status,0,c
 17577  0026B0  300B               	rrcf	(?___wmul+1)^0,w,c
 17578  0026B2  0100               	movlb	0	; () banked
 17579  0026B4  6F60               	movwf	??_get_cluster& (0+255),b
 17580  0026B6  300A               	rrcf	?___wmul^0,w,c
 17581  0026B8  6F6F               	movwf	get_cluster@bc& (0+255),b
 17582  0026BA  C060  F070         	movff	??_get_cluster,get_cluster@bc+1
 17583                           
 17584                           ; BSR set to: 0
 17585                           ;tff.c: 169: if (!move_window(fatsect + bc / 512U)) break;
 17586  0026BE  C06F  F060         	movff	get_cluster@bc,??_get_cluster
 17587  0026C2  C070  F061         	movff	get_cluster@bc+1,??_get_cluster+1
 17588  0026C6  0E09               	movlw	9
 17589  0026C8  6F62               	movwf	(??_get_cluster+2)& (0+255),b
 17590  0026CA                     u11945:
 17591  0026CA  90D8               	bcf	status,0,c
 17592  0026CC  3361               	rrcf	(??_get_cluster+1)& (0+255),f,b
 17593  0026CE  3360               	rrcf	??_get_cluster& (0+255),f,b
 17594  0026D0  2F62               	decfsz	(??_get_cluster+2)& (0+255),f,b
 17595  0026D2  D7FB               	goto	u11945
 17596  0026D4  5160               	movf	??_get_cluster& (0+255),w,b
 17597  0026D6  256B               	addwf	get_cluster@fatsect& (0+255),w,b
 17598  0026D8  6E35               	movwf	move_window@sector^0,c
 17599  0026DA  5161               	movf	(??_get_cluster+1)& (0+255),w,b
 17600  0026DC  216C               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 17601  0026DE  6E36               	movwf	(move_window@sector+1)^0,c
 17602  0026E0  0E00               	movlw	0
 17603  0026E2  216D               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 17604  0026E4  6E37               	movwf	(move_window@sector+2)^0,c
 17605  0026E6  0E00               	movlw	0
 17606  0026E8  216E               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 17607  0026EA  6E38               	movwf	(move_window@sector+3)^0,c
 17608  0026EC  EC47  F015         	call	_move_window	;wreg free
 17609  0026F0  0900               	iorlw	0
 17610  0026F2  B4D8               	btfsc	status,2,c
 17611  0026F4  D0BC               	goto	l10731
 17612                           
 17613                           ;tff.c: 170: wc = fs->win[bc % 512U]; bc++;
 17614  0026F6  0EFF               	movlw	255
 17615  0026F8  0100               	movlb	0	; () banked
 17616  0026FA  6F60               	movwf	??_get_cluster& (0+255),b
 17617  0026FC  0E01               	movlw	1
 17618  0026FE  6F61               	movwf	(??_get_cluster+1)& (0+255),b
 17619  002700  C06F  F062         	movff	get_cluster@bc,??_get_cluster+2
 17620  002704  C070  F063         	movff	get_cluster@bc+1,??_get_cluster+3
 17621  002708  5160               	movf	??_get_cluster& (0+255),w,b
 17622  00270A  1762               	andwf	(??_get_cluster+2)& (0+255),f,b
 17623  00270C  5161               	movf	(??_get_cluster+1)& (0+255),w,b
 17624  00270E  1763               	andwf	(??_get_cluster+3)& (0+255),f,b
 17625  002710  C071  F064         	movff	get_cluster@fs,??_get_cluster+4
 17626  002714  C072  F065         	movff	get_cluster@fs+1,??_get_cluster+5
 17627  002718  5162               	movf	(??_get_cluster+2)& (0+255),w,b
 17628  00271A  2764               	addwf	(??_get_cluster+4)& (0+255),f,b
 17629  00271C  5163               	movf	(??_get_cluster+3)& (0+255),w,b
 17630  00271E  2365               	addwfc	(??_get_cluster+5)& (0+255),f,b
 17631  002720  0E20               	movlw	32
 17632  002722  2564               	addwf	(??_get_cluster+4)& (0+255),w,b
 17633  002724  6ED9               	movwf	fsr2l,c
 17634  002726  0E00               	movlw	0
 17635  002728  2165               	addwfc	(??_get_cluster+5)& (0+255),w,b
 17636  00272A  6EDA               	movwf	fsr2h,c
 17637  00272C  50DF               	movf	indf2,w,c
 17638  00272E  6F66               	movwf	(??_get_cluster+6)& (0+255),b
 17639  002730  5166               	movf	(??_get_cluster+6)& (0+255),w,b
 17640  002732  6F69               	movwf	get_cluster@wc& (0+255),b
 17641  002734  6B6A               	clrf	(get_cluster@wc+1)& (0+255),b
 17642                           
 17643                           ; BSR set to: 0
 17644  002736  4B6F               	infsnz	get_cluster@bc& (0+255),f,b
 17645  002738  2B70               	incf	(get_cluster@bc+1)& (0+255),f,b
 17646                           
 17647                           ; BSR set to: 0
 17648                           ;tff.c: 171: if (!move_window(fatsect + bc / 512U)) break;
 17649  00273A  C06F  F060         	movff	get_cluster@bc,??_get_cluster
 17650  00273E  C070  F061         	movff	get_cluster@bc+1,??_get_cluster+1
 17651  002742  0E09               	movlw	9
 17652  002744  6F62               	movwf	(??_get_cluster+2)& (0+255),b
 17653  002746                     u11965:
 17654  002746  90D8               	bcf	status,0,c
 17655  002748  3361               	rrcf	(??_get_cluster+1)& (0+255),f,b
 17656  00274A  3360               	rrcf	??_get_cluster& (0+255),f,b
 17657  00274C  2F62               	decfsz	(??_get_cluster+2)& (0+255),f,b
 17658  00274E  D7FB               	goto	u11965
 17659  002750  5160               	movf	??_get_cluster& (0+255),w,b
 17660  002752  256B               	addwf	get_cluster@fatsect& (0+255),w,b
 17661  002754  6E35               	movwf	move_window@sector^0,c
 17662  002756  5161               	movf	(??_get_cluster+1)& (0+255),w,b
 17663  002758  216C               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 17664  00275A  6E36               	movwf	(move_window@sector+1)^0,c
 17665  00275C  0E00               	movlw	0
 17666  00275E  216D               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 17667  002760  6E37               	movwf	(move_window@sector+2)^0,c
 17668  002762  0E00               	movlw	0
 17669  002764  216E               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 17670  002766  6E38               	movwf	(move_window@sector+3)^0,c
 17671  002768  EC47  F015         	call	_move_window	;wreg free
 17672  00276C  0900               	iorlw	0
 17673  00276E  B4D8               	btfsc	status,2,c
 17674  002770  D07E               	goto	l10731
 17675                           
 17676                           ;tff.c: 172: wc |= (WORD)fs->win[bc % 512U] << 8;
 17677  002772  0EFF               	movlw	255
 17678  002774  0100               	movlb	0	; () banked
 17679  002776  6F60               	movwf	??_get_cluster& (0+255),b
 17680  002778  0E01               	movlw	1
 17681  00277A  6F61               	movwf	(??_get_cluster+1)& (0+255),b
 17682  00277C  C06F  F062         	movff	get_cluster@bc,??_get_cluster+2
 17683  002780  C070  F063         	movff	get_cluster@bc+1,??_get_cluster+3
 17684  002784  5160               	movf	??_get_cluster& (0+255),w,b
 17685  002786  1762               	andwf	(??_get_cluster+2)& (0+255),f,b
 17686  002788  5161               	movf	(??_get_cluster+1)& (0+255),w,b
 17687  00278A  1763               	andwf	(??_get_cluster+3)& (0+255),f,b
 17688  00278C  C071  F064         	movff	get_cluster@fs,??_get_cluster+4
 17689  002790  C072  F065         	movff	get_cluster@fs+1,??_get_cluster+5
 17690  002794  5162               	movf	(??_get_cluster+2)& (0+255),w,b
 17691  002796  2764               	addwf	(??_get_cluster+4)& (0+255),f,b
 17692  002798  5163               	movf	(??_get_cluster+3)& (0+255),w,b
 17693  00279A  2365               	addwfc	(??_get_cluster+5)& (0+255),f,b
 17694  00279C  0E20               	movlw	32
 17695  00279E  2564               	addwf	(??_get_cluster+4)& (0+255),w,b
 17696  0027A0  6ED9               	movwf	fsr2l,c
 17697  0027A2  0E00               	movlw	0
 17698  0027A4  2165               	addwfc	(??_get_cluster+5)& (0+255),w,b
 17699  0027A6  6EDA               	movwf	fsr2h,c
 17700  0027A8  50DF               	movf	indf2,w,c
 17701  0027AA  6F66               	movwf	(??_get_cluster+6)& (0+255),b
 17702  0027AC  5166               	movf	(??_get_cluster+6)& (0+255),w,b
 17703  0027AE  6F68               	movwf	(??_get_cluster+8)& (0+255),b
 17704  0027B0  6B67               	clrf	(??_get_cluster+7)& (0+255),b
 17705  0027B2  5167               	movf	(??_get_cluster+7)& (0+255),w,b
 17706  0027B4  1369               	iorwf	get_cluster@wc& (0+255),f,b
 17707  0027B6  5168               	movf	(??_get_cluster+8)& (0+255),w,b
 17708  0027B8  136A               	iorwf	(get_cluster@wc+1)& (0+255),f,b
 17709                           
 17710                           ; BSR set to: 0
 17711                           ;tff.c: 173: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
 17712  0027BA  B04A               	btfsc	get_cluster@clust^0,0,c
 17713  0027BC  D007               	goto	l10715
 17714                           
 17715                           ; BSR set to: 0
 17716  0027BE  0EFF               	movlw	255
 17717  0027C0  1569               	andwf	get_cluster@wc& (0+255),w,b
 17718  0027C2  6E4A               	movwf	?_get_cluster^0,c
 17719  0027C4  0E0F               	movlw	15
 17720  0027C6  156A               	andwf	(get_cluster@wc+1)& (0+255),w,b
 17721  0027C8  6E4B               	movwf	(?_get_cluster+1)^0,c
 17722  0027CA  0012               	return	
 17723  0027CC                     l10715:
 17724                           
 17725                           ; BSR set to: 0
 17726  0027CC  C069  F060         	movff	get_cluster@wc,??_get_cluster
 17727  0027D0  C06A  F061         	movff	get_cluster@wc+1,??_get_cluster+1
 17728  0027D4  0E04               	movlw	4
 17729  0027D6  6F62               	movwf	(??_get_cluster+2)& (0+255),b
 17730  0027D8                     u11995:
 17731  0027D8  90D8               	bcf	status,0,c
 17732  0027DA  3361               	rrcf	(??_get_cluster+1)& (0+255),f,b
 17733  0027DC  3360               	rrcf	??_get_cluster& (0+255),f,b
 17734  0027DE  2F62               	decfsz	(??_get_cluster+2)& (0+255),f,b
 17735  0027E0  D7FB               	goto	u11995
 17736  0027E2  C060  F04A         	movff	??_get_cluster,?_get_cluster
 17737  0027E6  C061  F04B         	movff	??_get_cluster+1,?_get_cluster+1
 17738  0027EA  0012               	return	
 17739  0027EC                     l10719:
 17740                           
 17741                           ; BSR set to: 0
 17742                           ;tff.c: 176: if (!move_window(fatsect + clust / 256)) break;
 17743  0027EC  504B               	movf	(get_cluster@clust+1)^0,w,c
 17744  0027EE  256B               	addwf	get_cluster@fatsect& (0+255),w,b
 17745  0027F0  6E35               	movwf	move_window@sector^0,c
 17746  0027F2  0E00               	movlw	0
 17747  0027F4  216C               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 17748  0027F6  6E36               	movwf	(move_window@sector+1)^0,c
 17749  0027F8  0E00               	movlw	0
 17750  0027FA  216D               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 17751  0027FC  6E37               	movwf	(move_window@sector+2)^0,c
 17752  0027FE  0E00               	movlw	0
 17753  002800  216E               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 17754  002802  6E38               	movwf	(move_window@sector+3)^0,c
 17755  002804  EC47  F015         	call	_move_window	;wreg free
 17756  002808  0900               	iorlw	0
 17757  00280A  B4D8               	btfsc	status,2,c
 17758  00280C  D030               	goto	l10731
 17759                           
 17760                           ;tff.c: 177: return (WORD)(*(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U]));
 17761  00280E  0EFF               	movlw	255
 17762  002810  0100               	movlb	0	; () banked
 17763  002812  6F60               	movwf	??_get_cluster& (0+255),b
 17764  002814  0E01               	movlw	1
 17765  002816  6F61               	movwf	(??_get_cluster+1)& (0+255),b
 17766  002818  C04A  F062         	movff	get_cluster@clust,??_get_cluster+2
 17767  00281C  C04B  F063         	movff	get_cluster@clust+1,??_get_cluster+3
 17768  002820  90D8               	bcf	status,0,c
 17769  002822  3762               	rlcf	(??_get_cluster+2)& (0+255),f,b
 17770  002824  3763               	rlcf	(??_get_cluster+3)& (0+255),f,b
 17771  002826  5160               	movf	??_get_cluster& (0+255),w,b
 17772  002828  1762               	andwf	(??_get_cluster+2)& (0+255),f,b
 17773  00282A  5161               	movf	(??_get_cluster+1)& (0+255),w,b
 17774  00282C  1763               	andwf	(??_get_cluster+3)& (0+255),f,b
 17775  00282E  C071  F064         	movff	get_cluster@fs,??_get_cluster+4
 17776  002832  C072  F065         	movff	get_cluster@fs+1,??_get_cluster+5
 17777  002836  5162               	movf	(??_get_cluster+2)& (0+255),w,b
 17778  002838  2764               	addwf	(??_get_cluster+4)& (0+255),f,b
 17779  00283A  5163               	movf	(??_get_cluster+3)& (0+255),w,b
 17780  00283C  2365               	addwfc	(??_get_cluster+5)& (0+255),f,b
 17781  00283E  0E20               	movlw	32
 17782  002840  2564               	addwf	(??_get_cluster+4)& (0+255),w,b
 17783  002842  6ED9               	movwf	fsr2l,c
 17784  002844  0E00               	movlw	0
 17785  002846  2165               	addwfc	(??_get_cluster+5)& (0+255),w,b
 17786  002848  6EDA               	movwf	fsr2h,c
 17787  00284A  CFDE F04A          	movff	postinc2,?_get_cluster
 17788  00284E  CFDD F04B          	movff	postdec2,?_get_cluster+1
 17789  002852  0012               	return	
 17790  002854                     l10729:
 17791                           
 17792                           ; BSR set to: 0
 17793  002854  EE20 F01C          	lfsr	2,28
 17794  002858  5171               	movf	get_cluster@fs& (0+255),w,b
 17795  00285A  26D9               	addwf	fsr2l,f,c
 17796  00285C  5172               	movf	(get_cluster@fs+1)& (0+255),w,b
 17797  00285E  22DA               	addwfc	fsr2h,f,c
 17798  002860  50DF               	movf	indf2,w,c
 17799                           
 17800                           ; Switch size 1, requested type "simple"
 17801                           ; Number of cases is 2, Range of values is 1 to 2
 17802                           ; switch strategies available:
 17803                           ; Name         Instructions Cycles
 17804                           ; simple_byte            7     4 (average)
 17805                           ;	Chosen strategy is simple_byte
 17806  002862  0A01               	xorlw	1	; case 1
 17807  002864  B4D8               	btfsc	status,2,c
 17808  002866  D719               	goto	l10695
 17809  002868  0A03               	xorlw	3	; case 2
 17810  00286A  B4D8               	btfsc	status,2,c
 17811  00286C  D7BF               	goto	l10719
 17812  00286E                     l10731:
 17813                           
 17814                           ;tff.c: 184: };tff.c: 186: return 1;
 17815  00286E  0E00               	movlw	0
 17816  002870  6E4B               	movwf	(?_get_cluster+1)^0,c
 17817  002872  0E01               	movlw	1
 17818  002874  6E4A               	movwf	?_get_cluster^0,c
 17819  002876  0012               	return		;funcret
 17820  002878                     __end_of_get_cluster:
 17821                           	callstack 0
 17822                           
 17823 ;; *************** function ___lldiv *****************
 17824 ;; Defined at:
 17825 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\__lldiv.c"
 17826 ;; Parameters:    Size  Location     Type
 17827 ;;  dividend        4    9[COMRAM] unsigned long 
 17828 ;;  divisor         4   13[COMRAM] unsigned long 
 17829 ;; Auto vars:     Size  Location     Type
 17830 ;;  quotient        4   17[COMRAM] unsigned long 
 17831 ;;  counter         1   21[COMRAM] unsigned char 
 17832 ;; Return value:  Size  Location     Type
 17833 ;;                  4    9[COMRAM] unsigned long 
 17834 ;; Registers used:
 17835 ;;		wreg, status,2, status,0
 17836 ;; Tracked objects:
 17837 ;;		On entry : 0/1
 17838 ;;		On exit  : 0/0
 17839 ;;		Unchanged: 0/0
 17840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17841 ;;      Params:         8       0       0       0       0       0       0       0       0
 17842 ;;      Locals:         5       0       0       0       0       0       0       0       0
 17843 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17844 ;;      Totals:        13       0       0       0       0       0       0       0       0
 17845 ;;Total ram usage:       13 bytes
 17846 ;; Hardware stack levels used:    1
 17847 ;; Hardware stack levels required when called:    2
 17848 ;; This function calls:
 17849 ;;		Nothing
 17850 ;; This function is called by:
 17851 ;;		_auto_mount
 17852 ;;		_f_lseek
 17853 ;;		_fprintf
 17854 ;;		_ultoa
 17855 ;; This function uses a non-reentrant model
 17856 ;;
 17857                           
 17858                           	psect	text96
 17859  004A32                     __ptext96:
 17860                           	callstack 0
 17861  004A32                     ___lldiv:
 17862                           	callstack 23
 17863                           
 17864                           ;incstack = 0
 17865  004A32  0E00               	movlw	0
 17866  004A34  6E12               	movwf	___lldiv@quotient^0,c
 17867  004A36  0E00               	movlw	0
 17868  004A38  6E13               	movwf	(___lldiv@quotient+1)^0,c
 17869  004A3A  0E00               	movlw	0
 17870  004A3C  6E14               	movwf	(___lldiv@quotient+2)^0,c
 17871  004A3E  0E00               	movlw	0
 17872  004A40  6E15               	movwf	(___lldiv@quotient+3)^0,c
 17873  004A42  500E               	movf	___lldiv@divisor^0,w,c
 17874  004A44  100F               	iorwf	(___lldiv@divisor+1)^0,w,c
 17875  004A46  1010               	iorwf	(___lldiv@divisor+2)^0,w,c
 17876  004A48  1011               	iorwf	(___lldiv@divisor+3)^0,w,c
 17877  004A4A  B4D8               	btfsc	status,2,c
 17878  004A4C  D02A               	goto	l1777
 17879  004A4E  0E01               	movlw	1
 17880  004A50  6E16               	movwf	___lldiv@counter^0,c
 17881  004A52  D006               	goto	l11639
 17882  004A54                     l11637:
 17883  004A54  90D8               	bcf	status,0,c
 17884  004A56  360E               	rlcf	___lldiv@divisor^0,f,c
 17885  004A58  360F               	rlcf	(___lldiv@divisor+1)^0,f,c
 17886  004A5A  3610               	rlcf	(___lldiv@divisor+2)^0,f,c
 17887  004A5C  3611               	rlcf	(___lldiv@divisor+3)^0,f,c
 17888  004A5E  2A16               	incf	___lldiv@counter^0,f,c
 17889  004A60                     l11639:
 17890  004A60  AE11               	btfss	(___lldiv@divisor+3)^0,7,c
 17891  004A62  D7F8               	goto	l11637
 17892  004A64                     u13440:
 17893  004A64  90D8               	bcf	status,0,c
 17894  004A66  3612               	rlcf	___lldiv@quotient^0,f,c
 17895  004A68  3613               	rlcf	(___lldiv@quotient+1)^0,f,c
 17896  004A6A  3614               	rlcf	(___lldiv@quotient+2)^0,f,c
 17897  004A6C  3615               	rlcf	(___lldiv@quotient+3)^0,f,c
 17898  004A6E  500E               	movf	___lldiv@divisor^0,w,c
 17899  004A70  5C0A               	subwf	___lldiv@dividend^0,w,c
 17900  004A72  500F               	movf	(___lldiv@divisor+1)^0,w,c
 17901  004A74  580B               	subwfb	(___lldiv@dividend+1)^0,w,c
 17902  004A76  5010               	movf	(___lldiv@divisor+2)^0,w,c
 17903  004A78  580C               	subwfb	(___lldiv@dividend+2)^0,w,c
 17904  004A7A  5011               	movf	(___lldiv@divisor+3)^0,w,c
 17905  004A7C  580D               	subwfb	(___lldiv@dividend+3)^0,w,c
 17906  004A7E  A0D8               	btfss	status,0,c
 17907  004A80  D009               	goto	l11649
 17908  004A82  500E               	movf	___lldiv@divisor^0,w,c
 17909  004A84  5E0A               	subwf	___lldiv@dividend^0,f,c
 17910  004A86  500F               	movf	(___lldiv@divisor+1)^0,w,c
 17911  004A88  5A0B               	subwfb	(___lldiv@dividend+1)^0,f,c
 17912  004A8A  5010               	movf	(___lldiv@divisor+2)^0,w,c
 17913  004A8C  5A0C               	subwfb	(___lldiv@dividend+2)^0,f,c
 17914  004A8E  5011               	movf	(___lldiv@divisor+3)^0,w,c
 17915  004A90  5A0D               	subwfb	(___lldiv@dividend+3)^0,f,c
 17916  004A92  8012               	bsf	___lldiv@quotient^0,0,c
 17917  004A94                     l11649:
 17918  004A94  90D8               	bcf	status,0,c
 17919  004A96  3211               	rrcf	(___lldiv@divisor+3)^0,f,c
 17920  004A98  3210               	rrcf	(___lldiv@divisor+2)^0,f,c
 17921  004A9A  320F               	rrcf	(___lldiv@divisor+1)^0,f,c
 17922  004A9C  320E               	rrcf	___lldiv@divisor^0,f,c
 17923  004A9E  2E16               	decfsz	___lldiv@counter^0,f,c
 17924  004AA0  D7E1               	goto	u13440
 17925  004AA2                     l1777:
 17926  004AA2  C012  F00A         	movff	___lldiv@quotient,?___lldiv
 17927  004AA6  C013  F00B         	movff	___lldiv@quotient+1,?___lldiv+1
 17928  004AAA  C014  F00C         	movff	___lldiv@quotient+2,?___lldiv+2
 17929  004AAE  C015  F00D         	movff	___lldiv@quotient+3,?___lldiv+3
 17930  004AB2  0012               	return		;funcret
 17931  004AB4                     __end_of___lldiv:
 17932                           	callstack 0
 17933                           
 17934 ;; *************** function _f_close *****************
 17935 ;; Defined at:
 17936 ;;		line 1116 in file "bibliotecas/tff.c"
 17937 ;; Parameters:    Size  Location     Type
 17938 ;;  fp              2    9[BANK0 ] PTR struct _FIL
 17939 ;;		 -> fil(28), 
 17940 ;; Auto vars:     Size  Location     Type
 17941 ;;  res             1   75[COMRAM] enum E155
 17942 ;; Return value:  Size  Location     Type
 17943 ;;                  1    wreg      enum E3231
 17944 ;; Registers used:
 17945 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17946 ;; Tracked objects:
 17947 ;;		On entry : 3F/0
 17948 ;;		On exit  : 0/0
 17949 ;;		Unchanged: 0/0
 17950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17951 ;;      Params:         0       2       0       0       0       0       0       0       0
 17952 ;;      Locals:         1       0       0       0       0       0       0       0       0
 17953 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17954 ;;      Totals:         1       2       0       0       0       0       0       0       0
 17955 ;;Total ram usage:        3 bytes
 17956 ;; Hardware stack levels used:    1
 17957 ;; Hardware stack levels required when called:   10
 17958 ;; This function calls:
 17959 ;;		_f_sync
 17960 ;; This function is called by:
 17961 ;;		_escrita_sdcard
 17962 ;; This function uses a non-reentrant model
 17963 ;;
 17964                           
 17965                           	psect	text97
 17966  005894                     __ptext97:
 17967                           	callstack 0
 17968  005894                     _f_close:
 17969                           	callstack 16
 17970                           
 17971                           ; BSR set to: 0
 17972                           ;tff.c: 1120: FRESULT res;;tff.c: 1124: res = f_sync(fp);
 17973                           
 17974                           ;incstack = 0
 17975  005894  C069  F060         	movff	f_close@fp,f_sync@fp
 17976  005898  C06A  F061         	movff	f_close@fp+1,f_sync@fp+1
 17977  00589C  ECD8  F01B         	call	_f_sync	;wreg free
 17978  0058A0  6E4C               	movwf	f_close@res^0,c
 17979                           
 17980                           ;tff.c: 1128: if (res == FR_OK) fp->fs = (0);
 17981  0058A2  504C               	movf	f_close@res^0,w,c
 17982  0058A4  A4D8               	btfss	status,2,c
 17983  0058A6  0012               	return	
 17984  0058A8  0100               	movlb	0	; () banked
 17985  0058AA  EE20 F004          	lfsr	2,4
 17986  0058AE  5169               	movf	f_close@fp& (0+255),w,b
 17987  0058B0  26D9               	addwf	fsr2l,f,c
 17988  0058B2  516A               	movf	(f_close@fp+1)& (0+255),w,b
 17989  0058B4  22DA               	addwfc	fsr2h,f,c
 17990  0058B6  0E00               	movlw	0
 17991  0058B8  6EDE               	movwf	postinc2,c
 17992  0058BA  0E00               	movlw	0
 17993  0058BC  6EDD               	movwf	postdec2,c
 17994  0058BE  0012               	return		;funcret
 17995  0058C0                     __end_of_f_close:
 17996                           	callstack 0
 17997                           
 17998 ;; *************** function _f_sync *****************
 17999 ;; Defined at:
 18000 ;;		line 1077 in file "bibliotecas/tff.c"
 18001 ;; Parameters:    Size  Location     Type
 18002 ;;  fp              2    0[BANK0 ] PTR struct _FIL
 18003 ;;		 -> fil(28), 
 18004 ;; Auto vars:     Size  Location     Type
 18005 ;;  tim             4    2[BANK0 ] unsigned long 
 18006 ;;  dir             2    7[BANK0 ] PTR unsigned char 
 18007 ;;		 -> NULL(0), fs(544), 
 18008 ;;  res             1    6[BANK0 ] enum E155
 18009 ;; Return value:  Size  Location     Type
 18010 ;;                  1    wreg      enum E155
 18011 ;; Registers used:
 18012 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18013 ;; Tracked objects:
 18014 ;;		On entry : 3F/0
 18015 ;;		On exit  : 0/0
 18016 ;;		Unchanged: 0/0
 18017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18018 ;;      Params:         0       2       0       0       0       0       0       0       0
 18019 ;;      Locals:         0       7       0       0       0       0       0       0       0
 18020 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18021 ;;      Totals:         0       9       0       0       0       0       0       0       0
 18022 ;;Total ram usage:        9 bytes
 18023 ;; Hardware stack levels used:    1
 18024 ;; Hardware stack levels required when called:    9
 18025 ;; This function calls:
 18026 ;;		_get_fattime
 18027 ;;		_move_window
 18028 ;;		_sync
 18029 ;;		_validate
 18030 ;; This function is called by:
 18031 ;;		_f_close
 18032 ;; This function uses a non-reentrant model
 18033 ;;
 18034                           
 18035                           	psect	text98
 18036  0037B0                     __ptext98:
 18037                           	callstack 0
 18038  0037B0                     _f_sync:
 18039                           	callstack 16
 18040                           
 18041                           ; BSR set to: 0
 18042                           ;tff.c: 1081: FRESULT res;;tff.c: 1082: DWORD tim;;tff.c: 1083: BYTE *dir;;tff.c: 1086: 
      +                          res = validate(fp->fs, fp->id);
 18043                           
 18044                           ;incstack = 0
 18045  0037B0  EE20 F004          	lfsr	2,4
 18046  0037B4  5160               	movf	f_sync@fp& (0+255),w,b
 18047  0037B6  26D9               	addwf	fsr2l,f,c
 18048  0037B8  5161               	movf	(f_sync@fp+1)& (0+255),w,b
 18049  0037BA  22DA               	addwfc	fsr2h,f,c
 18050  0037BC  CFDE F010          	movff	postinc2,validate@fs
 18051  0037C0  CFDD F011          	movff	postdec2,validate@fs+1
 18052  0037C4  C060  FFD9         	movff	f_sync@fp,fsr2l
 18053  0037C8  C061  FFDA         	movff	f_sync@fp+1,fsr2h
 18054  0037CC  CFDE F012          	movff	postinc2,validate@id
 18055  0037D0  CFDD F013          	movff	postdec2,validate@id+1
 18056  0037D4  ECEE  F029         	call	_validate	;wreg free
 18057  0037D8  0100               	movlb	0	; () banked
 18058  0037DA  6F66               	movwf	f_sync@res& (0+255),b
 18059                           
 18060                           ; BSR set to: 0
 18061                           ;tff.c: 1087: if (res == FR_OK) {
 18062  0037DC  5166               	movf	f_sync@res& (0+255),w,b
 18063  0037DE  A4D8               	btfss	status,2,c
 18064  0037E0  D079               	goto	l12083
 18065                           
 18066                           ; BSR set to: 0
 18067                           ;tff.c: 1088: if (fp->flag & 0x20) {
 18068  0037E2  EE20 F002          	lfsr	2,2
 18069  0037E6  5160               	movf	f_sync@fp& (0+255),w,b
 18070  0037E8  26D9               	addwf	fsr2l,f,c
 18071  0037EA  5161               	movf	(f_sync@fp+1)& (0+255),w,b
 18072  0037EC  22DA               	addwfc	fsr2h,f,c
 18073  0037EE  AADF               	btfss	indf2,5,c
 18074  0037F0  D071               	goto	l12083
 18075                           
 18076                           ; BSR set to: 0
 18077                           ;tff.c: 1090: if (!move_window(fp->dir_sect))
 18078  0037F2  EE20 F016          	lfsr	2,22
 18079  0037F6  5160               	movf	f_sync@fp& (0+255),w,b
 18080  0037F8  26D9               	addwf	fsr2l,f,c
 18081  0037FA  5161               	movf	(f_sync@fp+1)& (0+255),w,b
 18082  0037FC  22DA               	addwfc	fsr2h,f,c
 18083  0037FE  CFDE F035          	movff	postinc2,move_window@sector
 18084  003802  CFDE F036          	movff	postinc2,move_window@sector+1
 18085  003806  CFDE F037          	movff	postinc2,move_window@sector+2
 18086  00380A  CFDE F038          	movff	postinc2,move_window@sector+3
 18087  00380E  EC47  F015         	call	_move_window	;wreg free
 18088  003812  0900               	iorlw	0
 18089  003814  A4D8               	btfss	status,2,c
 18090  003816  D002               	goto	l12069
 18091                           
 18092                           ;tff.c: 1091: return FR_RW_ERROR;
 18093  003818  0E08               	movlw	8
 18094  00381A  0012               	return	
 18095  00381C                     l12069:
 18096                           
 18097                           ;tff.c: 1092: dir = fp->dir_ptr;
 18098  00381C  0100               	movlb	0	; () banked
 18099  00381E  EE20 F01A          	lfsr	2,26
 18100  003822  5160               	movf	f_sync@fp& (0+255),w,b
 18101  003824  26D9               	addwf	fsr2l,f,c
 18102  003826  5161               	movf	(f_sync@fp+1)& (0+255),w,b
 18103  003828  22DA               	addwfc	fsr2h,f,c
 18104  00382A  CFDE F067          	movff	postinc2,f_sync@dir
 18105  00382E  CFDD F068          	movff	postdec2,f_sync@dir+1
 18106                           
 18107                           ;tff.c: 1093: dir[11] |= 0x20;
 18108  003832  EE20 F00B          	lfsr	2,11
 18109  003836  5167               	movf	f_sync@dir& (0+255),w,b
 18110  003838  26D9               	addwf	fsr2l,f,c
 18111  00383A  5168               	movf	(f_sync@dir+1)& (0+255),w,b
 18112  00383C  22DA               	addwfc	fsr2h,f,c
 18113  00383E  0E00               	movlw	0
 18114  003840  8ADB               	bsf	plusw2,5,c
 18115                           
 18116                           ; BSR set to: 0
 18117                           ;tff.c: 1094: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(fp->fsize);
 18118  003842  EE20 F00A          	lfsr	2,10
 18119  003846  5160               	movf	f_sync@fp& (0+255),w,b
 18120  003848  26D9               	addwf	fsr2l,f,c
 18121  00384A  5161               	movf	(f_sync@fp+1)& (0+255),w,b
 18122  00384C  22DA               	addwfc	fsr2h,f,c
 18123  00384E  EE10 F01C          	lfsr	1,28
 18124  003852  5167               	movf	f_sync@dir& (0+255),w,b
 18125  003854  26E1               	addwf	fsr1l,f,c
 18126  003856  5168               	movf	(f_sync@dir+1)& (0+255),w,b
 18127  003858  22E2               	addwfc	fsr1h,f,c
 18128  00385A  CFDE FFE6          	movff	postinc2,postinc1
 18129  00385E  CFDE FFE6          	movff	postinc2,postinc1
 18130  003862  CFDE FFE6          	movff	postinc2,postinc1
 18131  003866  CFDE FFE6          	movff	postinc2,postinc1
 18132                           
 18133                           ; BSR set to: 0
 18134                           ;tff.c: 1095: *(WORD*)(BYTE*)(&dir[26])=(WORD)(fp->org_clust);
 18135  00386A  EE20 F00E          	lfsr	2,14
 18136  00386E  5160               	movf	f_sync@fp& (0+255),w,b
 18137  003870  26D9               	addwf	fsr2l,f,c
 18138  003872  5161               	movf	(f_sync@fp+1)& (0+255),w,b
 18139  003874  22DA               	addwfc	fsr2h,f,c
 18140  003876  EE10 F01A          	lfsr	1,26
 18141  00387A  5167               	movf	f_sync@dir& (0+255),w,b
 18142  00387C  26E1               	addwf	fsr1l,f,c
 18143  00387E  5168               	movf	(f_sync@dir+1)& (0+255),w,b
 18144  003880  22E2               	addwfc	fsr1h,f,c
 18145  003882  CFDE FFE6          	movff	postinc2,postinc1
 18146  003886  CFDD FFE5          	movff	postdec2,postdec1
 18147                           
 18148                           ; BSR set to: 0
 18149                           ;tff.c: 1099: tim = get_fattime();
 18150  00388A  EC87  F01A         	call	_get_fattime	;wreg free
 18151  00388E  C00E  F062         	movff	?_get_fattime,f_sync@tim
 18152  003892  C00F  F063         	movff	?_get_fattime+1,f_sync@tim+1
 18153  003896  C010  F064         	movff	?_get_fattime+2,f_sync@tim+2
 18154  00389A  C011  F065         	movff	?_get_fattime+3,f_sync@tim+3
 18155                           
 18156                           ; BSR set to: 1
 18157                           ;tff.c: 1100: *(DWORD*)(BYTE*)(&dir[22])=(DWORD)(tim);
 18158  00389E  0100               	movlb	0	; () banked
 18159  0038A0  EE20 F016          	lfsr	2,22
 18160  0038A4  5167               	movf	f_sync@dir& (0+255),w,b
 18161  0038A6  26D9               	addwf	fsr2l,f,c
 18162  0038A8  5168               	movf	(f_sync@dir+1)& (0+255),w,b
 18163  0038AA  22DA               	addwfc	fsr2h,f,c
 18164  0038AC  C062  FFDE         	movff	f_sync@tim,postinc2
 18165  0038B0  C063  FFDE         	movff	f_sync@tim+1,postinc2
 18166  0038B4  C064  FFDE         	movff	f_sync@tim+2,postinc2
 18167  0038B8  C065  FFDE         	movff	f_sync@tim+3,postinc2
 18168                           
 18169                           ; BSR set to: 0
 18170                           ;tff.c: 1101: fp->flag &= (BYTE)~0x20;
 18171  0038BC  EE20 F002          	lfsr	2,2
 18172  0038C0  5160               	movf	f_sync@fp& (0+255),w,b
 18173  0038C2  26D9               	addwf	fsr2l,f,c
 18174  0038C4  5161               	movf	(f_sync@fp+1)& (0+255),w,b
 18175  0038C6  22DA               	addwfc	fsr2h,f,c
 18176  0038C8  0EDF               	movlw	223
 18177  0038CA  16DF               	andwf	indf2,f,c
 18178                           
 18179                           ; BSR set to: 0
 18180                           ;tff.c: 1102: res = sync();
 18181  0038CC  EC0B  F029         	call	_sync	;wreg free
 18182  0038D0  0100               	movlb	0	; () banked
 18183  0038D2  6F66               	movwf	f_sync@res& (0+255),b
 18184  0038D4                     l12083:
 18185                           
 18186                           ; BSR set to: 0
 18187                           ;tff.c: 1103: };tff.c: 1104: };tff.c: 1105: return res;
 18188  0038D4  5166               	movf	f_sync@res& (0+255),w,b
 18189  0038D6  0012               	return		;funcret
 18190  0038D8                     __end_of_f_sync:
 18191                           	callstack 0
 18192                           
 18193 ;; *************** function _validate *****************
 18194 ;; Defined at:
 18195 ;;		line 767 in file "bibliotecas/tff.c"
 18196 ;; Parameters:    Size  Location     Type
 18197 ;;  fs              2   15[COMRAM] PTR const struct _FATFS
 18198 ;;		 -> NULL(0), fs(544), 
 18199 ;;  id              2   17[COMRAM] unsigned short 
 18200 ;; Auto vars:     Size  Location     Type
 18201 ;;		None
 18202 ;; Return value:  Size  Location     Type
 18203 ;;                  1    wreg      enum E155
 18204 ;; Registers used:
 18205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18206 ;; Tracked objects:
 18207 ;;		On entry : 3F/0
 18208 ;;		On exit  : 0/0
 18209 ;;		Unchanged: 0/0
 18210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18211 ;;      Params:         4       0       0       0       0       0       0       0       0
 18212 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18213 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18214 ;;      Totals:         6       0       0       0       0       0       0       0       0
 18215 ;;Total ram usage:        6 bytes
 18216 ;; Hardware stack levels used:    1
 18217 ;; Hardware stack levels required when called:    4
 18218 ;; This function calls:
 18219 ;;		_disk_status
 18220 ;; This function is called by:
 18221 ;;		_f_write
 18222 ;;		_f_sync
 18223 ;;		_f_lseek
 18224 ;;		_f_read
 18225 ;; This function uses a non-reentrant model
 18226 ;;
 18227                           
 18228                           	psect	text99
 18229  0053DC                     __ptext99:
 18230                           	callstack 0
 18231  0053DC                     _validate:
 18232                           	callstack 18
 18233                           
 18234                           ; BSR set to: 0
 18235                           ;tff.c: 772: if (!fs || !fs->fs_type || fs->id != id)
 18236                           
 18237                           ;incstack = 0
 18238  0053DC  5010               	movf	validate@fs^0,w,c
 18239  0053DE  1011               	iorwf	(validate@fs+1)^0,w,c
 18240  0053E0  B4D8               	btfsc	status,2,c
 18241  0053E2  D014               	goto	u12320
 18242                           
 18243                           ; BSR set to: 0
 18244  0053E4  EE20 F01C          	lfsr	2,28
 18245  0053E8  5010               	movf	validate@fs^0,w,c
 18246  0053EA  26D9               	addwf	fsr2l,f,c
 18247  0053EC  5011               	movf	(validate@fs+1)^0,w,c
 18248  0053EE  22DA               	addwfc	fsr2h,f,c
 18249  0053F0  50DF               	movf	indf2,w,c
 18250  0053F2  B4D8               	btfsc	status,2,c
 18251  0053F4  D00B               	goto	u12320
 18252                           
 18253                           ; BSR set to: 0
 18254  0053F6  C010  FFD9         	movff	validate@fs,fsr2l
 18255  0053FA  C011  FFDA         	movff	validate@fs+1,fsr2h
 18256  0053FE  5012               	movf	validate@id^0,w,c
 18257  005400  18DE               	xorwf	postinc2,w,c
 18258  005402  E104               	bnz	u12320
 18259  005404  5013               	movf	(validate@id+1)^0,w,c
 18260  005406  18DE               	xorwf	postinc2,w,c
 18261  005408  B4D8               	btfsc	status,2,c
 18262  00540A  D002               	goto	l10935
 18263  00540C                     u12320:
 18264                           
 18265                           ; BSR set to: 0
 18266                           ;tff.c: 773: return FR_INVALID_OBJECT;
 18267  00540C  0E0C               	movlw	12
 18268  00540E  0012               	return	
 18269  005410                     l10935:
 18270                           
 18271                           ; BSR set to: 0
 18272                           ;tff.c: 774: if (disk_status(0) & 0x01)
 18273  005410  0E00               	movlw	0
 18274  005412  ECD7  F02B         	call	_disk_status
 18275  005416  6E14               	movwf	??_validate^0,c
 18276  005418  A014               	btfss	??_validate^0,0,c
 18277  00541A  D002               	goto	l10941
 18278                           
 18279                           ;tff.c: 775: return FR_NOT_READY;
 18280  00541C  0E01               	movlw	1
 18281  00541E  0012               	return	
 18282  005420                     l10941:
 18283                           
 18284                           ;tff.c: 777: return FR_OK;
 18285  005420  0E00               	movlw	0
 18286  005422  0012               	return		;funcret
 18287  005424                     __end_of_validate:
 18288                           	callstack 0
 18289                           
 18290 ;; *************** function _disk_status *****************
 18291 ;; Defined at:
 18292 ;;		line 27 in file "bibliotecas/diskio.c"
 18293 ;; Parameters:    Size  Location     Type
 18294 ;;  pdrv            1    wreg     unsigned char 
 18295 ;; Auto vars:     Size  Location     Type
 18296 ;;  pdrv            1   13[COMRAM] unsigned char 
 18297 ;;  result          2    0        int 
 18298 ;;  stat            1   14[COMRAM] unsigned char 
 18299 ;; Return value:  Size  Location     Type
 18300 ;;                  1    wreg      unsigned char 
 18301 ;; Registers used:
 18302 ;;		wreg, status,2, status,0, cstack
 18303 ;; Tracked objects:
 18304 ;;		On entry : 3F/0
 18305 ;;		On exit  : 0/0
 18306 ;;		Unchanged: 0/0
 18307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18308 ;;      Params:         0       0       0       0       0       0       0       0       0
 18309 ;;      Locals:         4       0       0       0       0       0       0       0       0
 18310 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18311 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18312 ;;Total ram usage:        4 bytes
 18313 ;; Hardware stack levels used:    1
 18314 ;; Hardware stack levels required when called:    3
 18315 ;; This function calls:
 18316 ;;		_sdc_disk_status
 18317 ;; This function is called by:
 18318 ;;		_auto_mount
 18319 ;;		_validate
 18320 ;; This function uses a non-reentrant model
 18321 ;;
 18322                           
 18323                           	psect	text100
 18324  0057AE                     __ptext100:
 18325                           	callstack 0
 18326  0057AE                     _disk_status:
 18327                           	callstack 18
 18328                           
 18329                           ;incstack = 0
 18330                           ;disk_status@pdrv stored from wreg
 18331  0057AE  6E0E               	movwf	disk_status@pdrv^0,c
 18332                           
 18333                           ;diskio.c: 31: DSTATUS stat;;diskio.c: 32: int result;;diskio.c: 34: switch (pdrv) {
 18334  0057B0  D00A               	goto	l10645
 18335  0057B2                     l10627:
 18336                           
 18337                           ;diskio.c: 36: stat = sdc_disk_status(pdrv);
 18338  0057B2  500E               	movf	disk_status@pdrv^0,w,c
 18339  0057B4  ECFE  F02D         	call	_sdc_disk_status
 18340  0057B8  6E0F               	movwf	disk_status@stat^0,c
 18341  0057BA                     l10629:
 18342                           
 18343                           ;diskio.c: 39: return stat;
 18344  0057BA  500F               	movf	disk_status@stat^0,w,c
 18345  0057BC  0012               	return	
 18346  0057BE                     l10633:
 18347  0057BE  500E               	movf	disk_status@pdrv^0,w,c
 18348  0057C0  ECFE  F02D         	call	_sdc_disk_status
 18349  0057C4  D7FA               	goto	l10629
 18350  0057C6                     l10645:
 18351  0057C6  500E               	movf	disk_status@pdrv^0,w,c
 18352                           
 18353                           ; Switch size 1, requested type "simple"
 18354                           ; Number of cases is 3, Range of values is 0 to 2
 18355                           ; switch strategies available:
 18356                           ; Name         Instructions Cycles
 18357                           ; simple_byte           10     6 (average)
 18358                           ;	Chosen strategy is simple_byte
 18359  0057C8  0A00               	xorlw	0	; case 0
 18360  0057CA  B4D8               	btfsc	status,2,c
 18361  0057CC  D7F2               	goto	l10627
 18362  0057CE  0A01               	xorlw	1	; case 1
 18363  0057D0  B4D8               	btfsc	status,2,c
 18364  0057D2  D7F5               	goto	l10633
 18365  0057D4  0A03               	xorlw	3	; case 2
 18366  0057D6  B4D8               	btfsc	status,2,c
 18367  0057D8  D7F0               	goto	l10629
 18368                           
 18369                           ;diskio.c: 50: return 0x01;
 18370  0057DA  0E01               	movlw	1
 18371  0057DC  0012               	return		;funcret
 18372  0057DE                     __end_of_disk_status:
 18373                           	callstack 0
 18374                           
 18375 ;; *************** function _sdc_disk_status *****************
 18376 ;; Defined at:
 18377 ;;		line 588 in file "bibliotecas/diskio.c"
 18378 ;; Parameters:    Size  Location     Type
 18379 ;;  pdrv            1    wreg     unsigned char 
 18380 ;; Auto vars:     Size  Location     Type
 18381 ;;  pdrv            1   10[COMRAM] unsigned char 
 18382 ;;  stat            1    0        unsigned char 
 18383 ;;  cont            1    0        unsigned char 
 18384 ;;  buff            1    0        unsigned char 
 18385 ;; Return value:  Size  Location     Type
 18386 ;;                  1    wreg      unsigned char 
 18387 ;; Registers used:
 18388 ;;		wreg, status,2
 18389 ;; Tracked objects:
 18390 ;;		On entry : 0/0
 18391 ;;		On exit  : 0/0
 18392 ;;		Unchanged: 0/0
 18393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18394 ;;      Params:         0       0       0       0       0       0       0       0       0
 18395 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18396 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18397 ;;      Totals:         2       0       0       0       0       0       0       0       0
 18398 ;;Total ram usage:        2 bytes
 18399 ;; Hardware stack levels used:    1
 18400 ;; Hardware stack levels required when called:    2
 18401 ;; This function calls:
 18402 ;;		Nothing
 18403 ;; This function is called by:
 18404 ;;		_disk_status
 18405 ;; This function uses a non-reentrant model
 18406 ;;
 18407                           
 18408                           	psect	text101
 18409  005BFC                     __ptext101:
 18410                           	callstack 0
 18411  005BFC                     _sdc_disk_status:
 18412                           	callstack 18
 18413                           
 18414                           ;incstack = 0
 18415                           ;sdc_disk_status@pdrv stored from wreg
 18416  005BFC  6E0B               	movwf	sdc_disk_status@pdrv^0,c
 18417                           
 18418                           ;diskio.c: 591: unsigned char buff, cont;;diskio.c: 593: if (pdrv != 0) return 0x01;
 18419  005BFE  500B               	movf	sdc_disk_status@pdrv^0,w,c
 18420  005C00  B4D8               	btfsc	status,2,c
 18421  005C02  D002               	goto	l10503
 18422  005C04  0E01               	movlw	1
 18423  005C06  0012               	return	
 18424  005C08                     l10503:
 18425                           
 18426                           ;diskio.c: 595: return FR_OK;
 18427  005C08  0E00               	movlw	0
 18428  005C0A  0012               	return		;funcret
 18429  005C0C                     __end_of_sdc_disk_status:
 18430                           	callstack 0
 18431                           
 18432 ;; *************** function _sync *****************
 18433 ;; Defined at:
 18434 ;;		line 119 in file "bibliotecas/tff.c"
 18435 ;; Parameters:    Size  Location     Type
 18436 ;;		None
 18437 ;; Auto vars:     Size  Location     Type
 18438 ;;  fs              2   73[COMRAM] PTR struct _FATFS
 18439 ;;		 -> NULL(0), fs(544), 
 18440 ;; Return value:  Size  Location     Type
 18441 ;;                  1    wreg      enum E155
 18442 ;; Registers used:
 18443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18444 ;; Tracked objects:
 18445 ;;		On entry : 3F/0
 18446 ;;		On exit  : 0/0
 18447 ;;		Unchanged: 0/0
 18448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18449 ;;      Params:         0       0       0       0       0       0       0       0       0
 18450 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18451 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18452 ;;      Totals:         2       0       0       0       0       0       0       0       0
 18453 ;;Total ram usage:        2 bytes
 18454 ;; Hardware stack levels used:    1
 18455 ;; Hardware stack levels required when called:    8
 18456 ;; This function calls:
 18457 ;;		_disk_ioctl
 18458 ;;		_move_window
 18459 ;; This function is called by:
 18460 ;;		_f_sync
 18461 ;; This function uses a non-reentrant model
 18462 ;;
 18463                           
 18464                           	psect	text102
 18465  005216                     __ptext102:
 18466                           	callstack 0
 18467  005216                     _sync:
 18468                           	callstack 16
 18469                           
 18470                           ; BSR set to: 0
 18471                           ;tff.c: 121: FATFS *fs = FatFs;
 18472                           
 18473                           ;incstack = 0
 18474  005216  C04D  F04A         	movff	_FatFs,sync@fs
 18475  00521A  C04E  F04B         	movff	_FatFs+1,sync@fs+1
 18476                           
 18477                           ; BSR set to: 0
 18478                           ;tff.c: 124: fs->winflag = 1;
 18479  00521E  EE20 F01F          	lfsr	2,31
 18480  005222  504A               	movf	sync@fs^0,w,c
 18481  005224  26D9               	addwf	fsr2l,f,c
 18482  005226  504B               	movf	(sync@fs+1)^0,w,c
 18483  005228  22DA               	addwfc	fsr2h,f,c
 18484  00522A  0E01               	movlw	1
 18485  00522C  6EDF               	movwf	indf2,c
 18486                           
 18487                           ; BSR set to: 0
 18488                           ;tff.c: 125: if (!move_window(0)) return FR_RW_ERROR;
 18489  00522E  0E00               	movlw	0
 18490  005230  6E35               	movwf	move_window@sector^0,c
 18491  005232  0E00               	movlw	0
 18492  005234  6E36               	movwf	(move_window@sector+1)^0,c
 18493  005236  0E00               	movlw	0
 18494  005238  6E37               	movwf	(move_window@sector+2)^0,c
 18495  00523A  0E00               	movlw	0
 18496  00523C  6E38               	movwf	(move_window@sector+3)^0,c
 18497  00523E  EC47  F015         	call	_move_window	;wreg free
 18498  005242  0900               	iorlw	0
 18499  005244  A4D8               	btfss	status,2,c
 18500  005246  D002               	goto	l11377
 18501  005248                     u12950:
 18502  005248  0E08               	movlw	8
 18503  00524A  0012               	return	
 18504  00524C                     l11377:
 18505                           
 18506                           ;tff.c: 141: if (disk_ioctl(0, 0, (0)) != RES_OK)
 18507  00524C  0E00               	movlw	0
 18508  00524E  6E0A               	movwf	disk_ioctl@cmd^0,c
 18509  005250  0E00               	movlw	0
 18510  005252  6E0B               	movwf	disk_ioctl@buff^0,c
 18511  005254  0E00               	movlw	0
 18512  005256  6E0C               	movwf	(disk_ioctl@buff+1)^0,c
 18513  005258  0E00               	movlw	0
 18514  00525A  EC82  F02D         	call	_disk_ioctl
 18515  00525E  0900               	iorlw	0
 18516  005260  A4D8               	btfss	status,2,c
 18517  005262  D7F2               	goto	u12950
 18518                           
 18519                           ;tff.c: 143: return FR_OK;
 18520  005264  0E00               	movlw	0
 18521  005266  0012               	return		;funcret
 18522  005268                     __end_of_sync:
 18523                           	callstack 0
 18524                           
 18525 ;; *************** function _move_window *****************
 18526 ;; Defined at:
 18527 ;;		line 77 in file "bibliotecas/tff.c"
 18528 ;; Parameters:    Size  Location     Type
 18529 ;;  sector          4   52[COMRAM] unsigned long 
 18530 ;; Auto vars:     Size  Location     Type
 18531 ;;  n               1   66[COMRAM] unsigned char 
 18532 ;;  wsect           4   67[COMRAM] unsigned long 
 18533 ;;  fs              2   71[COMRAM] PTR struct _FATFS
 18534 ;;		 -> NULL(0), fs(544), 
 18535 ;; Return value:  Size  Location     Type
 18536 ;;                  1    wreg      enum E105
 18537 ;; Registers used:
 18538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18539 ;; Tracked objects:
 18540 ;;		On entry : 0/0
 18541 ;;		On exit  : 0/0
 18542 ;;		Unchanged: 0/0
 18543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18544 ;;      Params:         4       0       0       0       0       0       0       0       0
 18545 ;;      Locals:         7       0       0       0       0       0       0       0       0
 18546 ;;      Temps:         10       0       0       0       0       0       0       0       0
 18547 ;;      Totals:        21       0       0       0       0       0       0       0       0
 18548 ;;Total ram usage:       21 bytes
 18549 ;; Hardware stack levels used:    1
 18550 ;; Hardware stack levels required when called:    7
 18551 ;; This function calls:
 18552 ;;		_disk_read
 18553 ;;		_disk_write
 18554 ;; This function is called by:
 18555 ;;		_sync
 18556 ;;		_get_cluster
 18557 ;;		_put_cluster
 18558 ;;		_trace_path
 18559 ;;		_reserve_direntry
 18560 ;;		_f_open
 18561 ;;		_f_write
 18562 ;;		_f_sync
 18563 ;;		_f_read
 18564 ;; This function uses a non-reentrant model
 18565 ;;
 18566                           
 18567                           	psect	text103
 18568  002A8E                     __ptext103:
 18569                           	callstack 0
 18570  002A8E                     _move_window:
 18571                           	callstack 15
 18572                           
 18573                           ;tff.c: 81: DWORD wsect;;tff.c: 82: FATFS *fs = FatFs;
 18574                           
 18575                           ;incstack = 0
 18576  002A8E  C04D  F048         	movff	_FatFs,move_window@fs
 18577  002A92  C04E  F049         	movff	_FatFs+1,move_window@fs+1
 18578                           
 18579                           ;tff.c: 85: wsect = fs->winsect;
 18580  002A96  EE20 F004          	lfsr	2,4
 18581  002A9A  5048               	movf	move_window@fs^0,w,c
 18582  002A9C  26D9               	addwf	fsr2l,f,c
 18583  002A9E  5049               	movf	(move_window@fs+1)^0,w,c
 18584  002AA0  22DA               	addwfc	fsr2h,f,c
 18585  002AA2  CFDE F044          	movff	postinc2,move_window@wsect
 18586  002AA6  CFDE F045          	movff	postinc2,move_window@wsect+1
 18587  002AAA  CFDE F046          	movff	postinc2,move_window@wsect+2
 18588  002AAE  CFDE F047          	movff	postinc2,move_window@wsect+3
 18589                           
 18590                           ;tff.c: 86: if (wsect != sector) {
 18591  002AB2  5035               	movf	move_window@sector^0,w,c
 18592  002AB4  1844               	xorwf	move_window@wsect^0,w,c
 18593  002AB6  E10A               	bnz	u11810
 18594  002AB8  5036               	movf	(move_window@sector+1)^0,w,c
 18595  002ABA  1845               	xorwf	(move_window@wsect+1)^0,w,c
 18596  002ABC  E107               	bnz	u11810
 18597  002ABE  5037               	movf	(move_window@sector+2)^0,w,c
 18598  002AC0  1846               	xorwf	(move_window@wsect+2)^0,w,c
 18599  002AC2  E104               	bnz	u11810
 18600  002AC4  5038               	movf	(move_window@sector+3)^0,w,c
 18601  002AC6  1847               	xorwf	(move_window@wsect+3)^0,w,c
 18602  002AC8  B4D8               	btfsc	status,2,c
 18603  002ACA  D0B4               	goto	l10615
 18604  002ACC                     u11810:
 18605                           
 18606                           ;tff.c: 88: BYTE n;;tff.c: 89: if (fs->winflag) {
 18607  002ACC  EE20 F01F          	lfsr	2,31
 18608  002AD0  5048               	movf	move_window@fs^0,w,c
 18609  002AD2  26D9               	addwf	fsr2l,f,c
 18610  002AD4  5049               	movf	(move_window@fs+1)^0,w,c
 18611  002AD6  22DA               	addwfc	fsr2h,f,c
 18612  002AD8  50DF               	movf	indf2,w,c
 18613  002ADA  B4D8               	btfsc	status,2,c
 18614  002ADC  D081               	goto	l10605
 18615                           
 18616                           ;tff.c: 90: if (disk_write(0, fs->win, wsect, 1) != RES_OK)
 18617  002ADE  0E20               	movlw	32
 18618  002AE0  2448               	addwf	move_window@fs^0,w,c
 18619  002AE2  6E29               	movwf	disk_write@buff^0,c
 18620  002AE4  0E00               	movlw	0
 18621  002AE6  2049               	addwfc	(move_window@fs+1)^0,w,c
 18622  002AE8  6E2A               	movwf	(disk_write@buff+1)^0,c
 18623  002AEA  C044  F02B         	movff	move_window@wsect,disk_write@sector
 18624  002AEE  C045  F02C         	movff	move_window@wsect+1,disk_write@sector+1
 18625  002AF2  C046  F02D         	movff	move_window@wsect+2,disk_write@sector+2
 18626  002AF6  C047  F02E         	movff	move_window@wsect+3,disk_write@sector+3
 18627  002AFA  0E01               	movlw	1
 18628  002AFC  6E2F               	movwf	disk_write@count^0,c
 18629  002AFE  0E00               	movlw	0
 18630  002B00  EC5C  F029         	call	_disk_write
 18631  002B04  0900               	iorlw	0
 18632  002B06  B4D8               	btfsc	status,2,c
 18633  002B08  D002               	goto	l10589
 18634  002B0A                     u11830:
 18635                           
 18636                           ;tff.c: 91: return FALSE;
 18637  002B0A  0E00               	movlw	0
 18638  002B0C  0012               	return	
 18639  002B0E                     l10589:
 18640                           
 18641                           ;tff.c: 92: fs->winflag = 0;
 18642  002B0E  EE20 F01F          	lfsr	2,31
 18643  002B12  5048               	movf	move_window@fs^0,w,c
 18644  002B14  26D9               	addwf	fsr2l,f,c
 18645  002B16  5049               	movf	(move_window@fs+1)^0,w,c
 18646  002B18  22DA               	addwfc	fsr2h,f,c
 18647  002B1A  0E00               	movlw	0
 18648  002B1C  6EDF               	movwf	indf2,c
 18649                           
 18650                           ;tff.c: 93: if (wsect < (fs->fatbase + fs->sects_fat)) {
 18651  002B1E  EE20 F008          	lfsr	2,8
 18652  002B22  5048               	movf	move_window@fs^0,w,c
 18653  002B24  26D9               	addwf	fsr2l,f,c
 18654  002B26  5049               	movf	(move_window@fs+1)^0,w,c
 18655  002B28  22DA               	addwfc	fsr2h,f,c
 18656  002B2A  CFDE F039          	movff	postinc2,??_move_window
 18657  002B2E  CFDE F03A          	movff	postinc2,??_move_window+1
 18658  002B32  CFDE F03B          	movff	postinc2,??_move_window+2
 18659  002B36  CFDE F03C          	movff	postinc2,??_move_window+3
 18660  002B3A  EE20 F014          	lfsr	2,20
 18661  002B3E  5048               	movf	move_window@fs^0,w,c
 18662  002B40  26D9               	addwf	fsr2l,f,c
 18663  002B42  5049               	movf	(move_window@fs+1)^0,w,c
 18664  002B44  22DA               	addwfc	fsr2h,f,c
 18665  002B46  CFDE F03D          	movff	postinc2,??_move_window+4
 18666  002B4A  CFDD F03E          	movff	postdec2,??_move_window+5
 18667  002B4E  503D               	movf	(??_move_window+4)^0,w,c
 18668  002B50  2439               	addwf	??_move_window^0,w,c
 18669  002B52  6E3F               	movwf	(??_move_window+6)^0,c
 18670  002B54  503E               	movf	(??_move_window+5)^0,w,c
 18671  002B56  203A               	addwfc	(??_move_window+1)^0,w,c
 18672  002B58  6E40               	movwf	(??_move_window+7)^0,c
 18673  002B5A  0E00               	movlw	0
 18674  002B5C  203B               	addwfc	(??_move_window+2)^0,w,c
 18675  002B5E  6E41               	movwf	(??_move_window+8)^0,c
 18676  002B60  0E00               	movlw	0
 18677  002B62  203C               	addwfc	(??_move_window+3)^0,w,c
 18678  002B64  6E42               	movwf	(??_move_window+9)^0,c
 18679  002B66  503F               	movf	(??_move_window+6)^0,w,c
 18680  002B68  5C44               	subwf	move_window@wsect^0,w,c
 18681  002B6A  5040               	movf	(??_move_window+7)^0,w,c
 18682  002B6C  5845               	subwfb	(move_window@wsect+1)^0,w,c
 18683  002B6E  5041               	movf	(??_move_window+8)^0,w,c
 18684  002B70  5846               	subwfb	(move_window@wsect+2)^0,w,c
 18685  002B72  5042               	movf	(??_move_window+9)^0,w,c
 18686  002B74  5847               	subwfb	(move_window@wsect+3)^0,w,c
 18687  002B76  B0D8               	btfsc	status,0,c
 18688  002B78  D033               	goto	l10605
 18689                           
 18690                           ;tff.c: 94: for (n = fs->n_fats; n >= 2; n--) {
 18691  002B7A  EE20 F01E          	lfsr	2,30
 18692  002B7E  5048               	movf	move_window@fs^0,w,c
 18693  002B80  26D9               	addwf	fsr2l,f,c
 18694  002B82  5049               	movf	(move_window@fs+1)^0,w,c
 18695  002B84  22DA               	addwfc	fsr2h,f,c
 18696  002B86  50DF               	movf	indf2,w,c
 18697  002B88  6E43               	movwf	move_window@n^0,c
 18698  002B8A                     l10593:
 18699  002B8A  0E02               	movlw	2
 18700  002B8C  6043               	cpfslt	move_window@n^0,c
 18701  002B8E  D001               	goto	l10597
 18702  002B90  D027               	goto	l10605
 18703  002B92                     l10597:
 18704                           
 18705                           ;tff.c: 95: wsect += fs->sects_fat;
 18706  002B92  EE20 F014          	lfsr	2,20
 18707  002B96  5048               	movf	move_window@fs^0,w,c
 18708  002B98  26D9               	addwf	fsr2l,f,c
 18709  002B9A  5049               	movf	(move_window@fs+1)^0,w,c
 18710  002B9C  22DA               	addwfc	fsr2h,f,c
 18711  002B9E  CFDE F039          	movff	postinc2,??_move_window
 18712  002BA2  CFDD F03A          	movff	postdec2,??_move_window+1
 18713  002BA6  5039               	movf	??_move_window^0,w,c
 18714  002BA8  2644               	addwf	move_window@wsect^0,f,c
 18715  002BAA  503A               	movf	(??_move_window+1)^0,w,c
 18716  002BAC  2245               	addwfc	(move_window@wsect+1)^0,f,c
 18717  002BAE  0E00               	movlw	0
 18718  002BB0  2246               	addwfc	(move_window@wsect+2)^0,f,c
 18719  002BB2  0E00               	movlw	0
 18720  002BB4  2247               	addwfc	(move_window@wsect+3)^0,f,c
 18721                           
 18722                           ;tff.c: 96: disk_write(0, fs->win, wsect, 1);
 18723  002BB6  0E20               	movlw	32
 18724  002BB8  2448               	addwf	move_window@fs^0,w,c
 18725  002BBA  6E29               	movwf	disk_write@buff^0,c
 18726  002BBC  0E00               	movlw	0
 18727  002BBE  2049               	addwfc	(move_window@fs+1)^0,w,c
 18728  002BC0  6E2A               	movwf	(disk_write@buff+1)^0,c
 18729  002BC2  C044  F02B         	movff	move_window@wsect,disk_write@sector
 18730  002BC6  C045  F02C         	movff	move_window@wsect+1,disk_write@sector+1
 18731  002BCA  C046  F02D         	movff	move_window@wsect+2,disk_write@sector+2
 18732  002BCE  C047  F02E         	movff	move_window@wsect+3,disk_write@sector+3
 18733  002BD2  0E01               	movlw	1
 18734  002BD4  6E2F               	movwf	disk_write@count^0,c
 18735  002BD6  0E00               	movlw	0
 18736  002BD8  EC5C  F029         	call	_disk_write
 18737  002BDC  0643               	decf	move_window@n^0,f,c
 18738  002BDE  D7D5               	goto	l10593
 18739  002BE0                     l10605:
 18740                           
 18741                           ;tff.c: 97: };tff.c: 98: };tff.c: 99: };tff.c: 101: if (sector) {
 18742  002BE0  5035               	movf	move_window@sector^0,w,c
 18743  002BE2  1036               	iorwf	(move_window@sector+1)^0,w,c
 18744  002BE4  1037               	iorwf	(move_window@sector+2)^0,w,c
 18745  002BE6  1038               	iorwf	(move_window@sector+3)^0,w,c
 18746  002BE8  B4D8               	btfsc	status,2,c
 18747  002BEA  D024               	goto	l10615
 18748                           
 18749                           ;tff.c: 102: if (disk_read(0, fs->win, sector, 1) != RES_OK)
 18750  002BEC  0E20               	movlw	32
 18751  002BEE  2448               	addwf	move_window@fs^0,w,c
 18752  002BF0  6E29               	movwf	disk_read@buff^0,c
 18753  002BF2  0E00               	movlw	0
 18754  002BF4  2049               	addwfc	(move_window@fs+1)^0,w,c
 18755  002BF6  6E2A               	movwf	(disk_read@buff+1)^0,c
 18756  002BF8  C035  F02B         	movff	move_window@sector,disk_read@sector
 18757  002BFC  C036  F02C         	movff	move_window@sector+1,disk_read@sector+1
 18758  002C00  C037  F02D         	movff	move_window@sector+2,disk_read@sector+2
 18759  002C04  C038  F02E         	movff	move_window@sector+3,disk_read@sector+3
 18760  002C08  0E01               	movlw	1
 18761  002C0A  6E2F               	movwf	disk_read@count^0,c
 18762  002C0C  0E00               	movlw	0
 18763  002C0E  EC48  F026         	call	_disk_read
 18764  002C12  0900               	iorlw	0
 18765  002C14  A4D8               	btfss	status,2,c
 18766  002C16  D779               	goto	u11830
 18767                           
 18768                           ;tff.c: 104: fs->winsect = sector;
 18769  002C18  EE20 F004          	lfsr	2,4
 18770  002C1C  5048               	movf	move_window@fs^0,w,c
 18771  002C1E  26D9               	addwf	fsr2l,f,c
 18772  002C20  5049               	movf	(move_window@fs+1)^0,w,c
 18773  002C22  22DA               	addwfc	fsr2h,f,c
 18774  002C24  C035  FFDE         	movff	move_window@sector,postinc2
 18775  002C28  C036  FFDE         	movff	move_window@sector+1,postinc2
 18776  002C2C  C037  FFDE         	movff	move_window@sector+2,postinc2
 18777  002C30  C038  FFDE         	movff	move_window@sector+3,postinc2
 18778  002C34                     l10615:
 18779                           
 18780                           ;tff.c: 105: };tff.c: 106: };tff.c: 107: return TRUE;
 18781  002C34  0E01               	movlw	1
 18782  002C36  0012               	return		;funcret
 18783  002C38                     __end_of_move_window:
 18784                           	callstack 0
 18785                           
 18786 ;; *************** function _disk_write *****************
 18787 ;; Defined at:
 18788 ;;		line 150 in file "bibliotecas/diskio.c"
 18789 ;; Parameters:    Size  Location     Type
 18790 ;;  pdrv            1    wreg     unsigned char 
 18791 ;;  buff            2   40[COMRAM] PTR const unsigned char 
 18792 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 18793 ;;  sector          4   42[COMRAM] unsigned long 
 18794 ;;  count           1   46[COMRAM] unsigned char 
 18795 ;; Auto vars:     Size  Location     Type
 18796 ;;  pdrv            1   48[COMRAM] unsigned char 
 18797 ;;  result          2   49[COMRAM] int 
 18798 ;;  res             1   51[COMRAM] enum E25
 18799 ;; Return value:  Size  Location     Type
 18800 ;;                  1    wreg      enum E25
 18801 ;; Registers used:
 18802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18803 ;; Tracked objects:
 18804 ;;		On entry : 0/0
 18805 ;;		On exit  : 0/0
 18806 ;;		Unchanged: 0/0
 18807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18808 ;;      Params:         7       0       0       0       0       0       0       0       0
 18809 ;;      Locals:         4       0       0       0       0       0       0       0       0
 18810 ;;      Temps:          1       0       0       0       0       0       0       0       0
 18811 ;;      Totals:        12       0       0       0       0       0       0       0       0
 18812 ;;Total ram usage:       12 bytes
 18813 ;; Hardware stack levels used:    1
 18814 ;; Hardware stack levels required when called:    6
 18815 ;; This function calls:
 18816 ;;		_sdc_disk_write
 18817 ;; This function is called by:
 18818 ;;		_move_window
 18819 ;;		_reserve_direntry
 18820 ;;		_f_write
 18821 ;; This function uses a non-reentrant model
 18822 ;;
 18823                           
 18824                           	psect	text104
 18825  0052B8                     __ptext104:
 18826                           	callstack 0
 18827  0052B8                     _disk_write:
 18828                           	callstack 15
 18829                           
 18830                           ;incstack = 0
 18831                           ;disk_write@pdrv stored from wreg
 18832  0052B8  6E31               	movwf	disk_write@pdrv^0,c
 18833                           
 18834                           ;diskio.c: 157: DRESULT res;;diskio.c: 158: int result;;diskio.c: 160: switch (pdrv) {
 18835  0052BA  D018               	goto	l10469
 18836  0052BC                     l10447:
 18837                           
 18838                           ;diskio.c: 163: result = sdc_disk_write(buff, sector, count);
 18839  0052BC  C029  F016         	movff	disk_write@buff,sdc_disk_write@p_buff
 18840  0052C0  C02A  F017         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 18841  0052C4  C02B  F018         	movff	disk_write@sector,sdc_disk_write@sector
 18842  0052C8  C02C  F019         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 18843  0052CC  C02D  F01A         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 18844  0052D0  C02E  F01B         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 18845  0052D4  C02F  F01C         	movff	disk_write@count,sdc_disk_write@count
 18846  0052D8  EC1C  F016         	call	_sdc_disk_write	;wreg free
 18847  0052DC  6E30               	movwf	??_disk_write^0,c
 18848  0052DE  5030               	movf	??_disk_write^0,w,c
 18849  0052E0  6E32               	movwf	disk_write@result^0,c
 18850  0052E2  6A33               	clrf	(disk_write@result+1)^0,c
 18851                           
 18852                           ;diskio.c: 165: res = result;
 18853  0052E4  C032  F034         	movff	disk_write@result,disk_write@res
 18854  0052E8                     l10451:
 18855                           
 18856                           ;diskio.c: 168: return res;
 18857  0052E8  5034               	movf	disk_write@res^0,w,c
 18858  0052EA  0012               	return	
 18859  0052EC                     l10469:
 18860  0052EC  5031               	movf	disk_write@pdrv^0,w,c
 18861                           
 18862                           ; Switch size 1, requested type "simple"
 18863                           ; Number of cases is 3, Range of values is 0 to 2
 18864                           ; switch strategies available:
 18865                           ; Name         Instructions Cycles
 18866                           ; simple_byte           10     6 (average)
 18867                           ;	Chosen strategy is simple_byte
 18868  0052EE  0A00               	xorlw	0	; case 0
 18869  0052F0  B4D8               	btfsc	status,2,c
 18870  0052F2  D7E4               	goto	l10447
 18871  0052F4  0A01               	xorlw	1	; case 1
 18872  0052F6  B4D8               	btfsc	status,2,c
 18873  0052F8  D7E1               	goto	l10447
 18874  0052FA  0A03               	xorlw	3	; case 2
 18875  0052FC  B4D8               	btfsc	status,2,c
 18876  0052FE  D7F4               	goto	l10451
 18877                           
 18878                           ;diskio.c: 189: return RES_PARERR;
 18879  005300  0E04               	movlw	4
 18880  005302  0012               	return		;funcret
 18881  005304                     __end_of_disk_write:
 18882                           	callstack 0
 18883                           
 18884 ;; *************** function _sdc_disk_write *****************
 18885 ;; Defined at:
 18886 ;;		line 509 in file "bibliotecas/diskio.c"
 18887 ;; Parameters:    Size  Location     Type
 18888 ;;  p_buff          2   21[COMRAM] PTR const unsigned char 
 18889 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 18890 ;;  sector          4   23[COMRAM] unsigned long 
 18891 ;;  count           1   27[COMRAM] unsigned char 
 18892 ;; Auto vars:     Size  Location     Type
 18893 ;;  j               2   37[COMRAM] int 
 18894 ;;  count1          2   34[COMRAM] int 
 18895 ;;  i               2    0        int 
 18896 ;;  buff            1   39[COMRAM] unsigned char 
 18897 ;;  res             1   36[COMRAM] enum E25
 18898 ;; Return value:  Size  Location     Type
 18899 ;;                  1    wreg      enum E25
 18900 ;; Registers used:
 18901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18902 ;; Tracked objects:
 18903 ;;		On entry : 0/0
 18904 ;;		On exit  : 0/0
 18905 ;;		Unchanged: 0/0
 18906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18907 ;;      Params:         7       0       0       0       0       0       0       0       0
 18908 ;;      Locals:         8       0       0       0       0       0       0       0       0
 18909 ;;      Temps:          4       0       0       0       0       0       0       0       0
 18910 ;;      Totals:        19       0       0       0       0       0       0       0       0
 18911 ;;Total ram usage:       19 bytes
 18912 ;; Hardware stack levels used:    1
 18913 ;; Hardware stack levels required when called:    5
 18914 ;; This function calls:
 18915 ;;		_command
 18916 ;;		_dummy_clocks
 18917 ;;		_escreve_SPI
 18918 ;;		_leitura_SPI
 18919 ;;		_proceed
 18920 ;;		_response
 18921 ;; This function is called by:
 18922 ;;		_disk_write
 18923 ;; This function uses a non-reentrant model
 18924 ;;
 18925                           
 18926                           	psect	text105
 18927  002C38                     __ptext105:
 18928                           	callstack 0
 18929  002C38                     _sdc_disk_write:
 18930                           	callstack 15
 18931                           
 18932                           ;incstack = 0
 18933  002C38  0E00               	movlw	0
 18934  002C3A  6E24               	movwf	(sdc_disk_write@count1+1)^0,c
 18935  002C3C  0E00               	movlw	0
 18936  002C3E  6E23               	movwf	sdc_disk_write@count1^0,c
 18937                           
 18938                           ;diskio.c: 515: if(count>1)
 18939  002C40  0E01               	movlw	1
 18940  002C42  641C               	cpfsgt	sdc_disk_write@count^0,c
 18941  002C44  D065               	goto	l144
 18942                           
 18943                           ;diskio.c: 516: {;diskio.c: 517: LATCbits.LATC7 = 0;
 18944  002C46  9E8B               	bcf	139,7,c	;volatile
 18945                           
 18946                           ;diskio.c: 518: LATBbits.LATB5 = 0;
 18947  002C48  9A8A               	bcf	138,5,c	;volatile
 18948                           
 18949                           ;diskio.c: 519: dummy_clocks(10);
 18950  002C4A  0E0A               	movlw	10
 18951  002C4C  EC1A  F02B         	call	_dummy_clocks
 18952                           
 18953                           ;diskio.c: 520: command(0X57, count, 0XFF);
 18954  002C50  501C               	movf	sdc_disk_write@count^0,w,c
 18955  002C52  6E0F               	movwf	command@arg^0,c
 18956  002C54  6A10               	clrf	(command@arg+1)^0,c
 18957  002C56  6A11               	clrf	(command@arg+2)^0,c
 18958  002C58  6A12               	clrf	(command@arg+3)^0,c
 18959  002C5A  0EFF               	movlw	255
 18960  002C5C  6E13               	movwf	command@CRC^0,c
 18961  002C5E  0E57               	movlw	87
 18962  002C60  ECDD  F027         	call	_command
 18963                           
 18964                           ;diskio.c: 521: proceed();
 18965  002C64  EC2B  F02E         	call	_proceed	;wreg free
 18966  002C68                     l10335:
 18967                           
 18968                           ;diskio.c: 523: buff = response();
 18969  002C68  EC25  F02E         	call	_response	;wreg free
 18970  002C6C  6E28               	movwf	sdc_disk_write@buff^0,c
 18971                           
 18972                           ;diskio.c: 524: }while(buff!=0X00);
 18973  002C6E  5028               	movf	sdc_disk_write@buff^0,w,c
 18974  002C70  A4D8               	btfss	status,2,c
 18975  002C72  D7FA               	goto	l10335
 18976                           
 18977                           ;diskio.c: 526: dummy_clocks(10);
 18978  002C74  0E0A               	movlw	10
 18979  002C76  EC1A  F02B         	call	_dummy_clocks
 18980                           
 18981                           ;diskio.c: 527: command(0X59, sector*512, 0XFF);
 18982  002C7A  C018  F01D         	movff	sdc_disk_write@sector,??_sdc_disk_write
 18983  002C7E  C019  F01E         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 18984  002C82  C01A  F01F         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 18985  002C86  C01B  F020         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 18986  002C8A  0E09               	movlw	9
 18987  002C8C                     u11565:
 18988  002C8C  90D8               	bcf	status,0,c
 18989  002C8E  361D               	rlcf	??_sdc_disk_write^0,f,c
 18990  002C90  361E               	rlcf	(??_sdc_disk_write+1)^0,f,c
 18991  002C92  361F               	rlcf	(??_sdc_disk_write+2)^0,f,c
 18992  002C94  3620               	rlcf	(??_sdc_disk_write+3)^0,f,c
 18993  002C96  2EE8               	decfsz	wreg,f,c
 18994  002C98  D7F9               	goto	u11565
 18995  002C9A  C01D  F00F         	movff	??_sdc_disk_write,command@arg
 18996  002C9E  C01E  F010         	movff	??_sdc_disk_write+1,command@arg+1
 18997  002CA2  C01F  F011         	movff	??_sdc_disk_write+2,command@arg+2
 18998  002CA6  C020  F012         	movff	??_sdc_disk_write+3,command@arg+3
 18999  002CAA  0EFF               	movlw	255
 19000  002CAC  6E13               	movwf	command@CRC^0,c
 19001  002CAE  0E59               	movlw	89
 19002  002CB0  ECDD  F027         	call	_command
 19003                           
 19004                           ;diskio.c: 528: proceed();
 19005  002CB4  EC2B  F02E         	call	_proceed	;wreg free
 19006  002CB8                     l10343:
 19007                           
 19008                           ;diskio.c: 530: buff = response();
 19009  002CB8  EC25  F02E         	call	_response	;wreg free
 19010  002CBC  6E28               	movwf	sdc_disk_write@buff^0,c
 19011                           
 19012                           ;diskio.c: 531: }while(buff!=0X00);
 19013  002CBE  5028               	movf	sdc_disk_write@buff^0,w,c
 19014  002CC0  A4D8               	btfss	status,2,c
 19015  002CC2  D7FA               	goto	l10343
 19016                           
 19017                           ;diskio.c: 533: dummy_clocks(1);
 19018  002CC4  0E01               	movlw	1
 19019  002CC6  EC1A  F02B         	call	_dummy_clocks
 19020                           
 19021                           ;diskio.c: 534: escreve_SPI(0XFC);
 19022  002CCA  0EFC               	movlw	252
 19023  002CCC  EC06  F02E         	call	_escreve_SPI
 19024                           
 19025                           ;diskio.c: 535: for(j=0;j<512;j++)
 19026  002CD0  0E00               	movlw	0
 19027  002CD2  6E27               	movwf	(sdc_disk_write@j+1)^0,c
 19028  002CD4  0E00               	movlw	0
 19029  002CD6  6E26               	movwf	sdc_disk_write@j^0,c
 19030  002CD8                     l10357:
 19031                           
 19032                           ;diskio.c: 536: {;diskio.c: 537: escreve_SPI(*p_buff);
 19033  002CD8  C016  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 19034  002CDC  C017  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 19035  002CE0  50DF               	movf	indf2,w,c
 19036  002CE2  EC06  F02E         	call	_escreve_SPI
 19037                           
 19038                           ;diskio.c: 538: p_buff++;
 19039  002CE6  4A16               	infsnz	sdc_disk_write@p_buff^0,f,c
 19040  002CE8  2A17               	incf	(sdc_disk_write@p_buff+1)^0,f,c
 19041  002CEA  4A26               	infsnz	sdc_disk_write@j^0,f,c
 19042  002CEC  2A27               	incf	(sdc_disk_write@j+1)^0,f,c
 19043  002CEE  BE27               	btfsc	(sdc_disk_write@j+1)^0,7,c
 19044  002CF0  D7F3               	goto	l10357
 19045  002CF2  0E02               	movlw	2
 19046  002CF4  5C27               	subwf	(sdc_disk_write@j+1)^0,w,c
 19047  002CF6  A0D8               	btfss	status,0,c
 19048  002CF8  D7EF               	goto	l10357
 19049                           
 19050                           ;diskio.c: 539: };diskio.c: 540: leitura_SPI();
 19051  002CFA  EC31  F02E         	call	_leitura_SPI	;wreg free
 19052                           
 19053                           ;diskio.c: 541: leitura_SPI();
 19054  002CFE  EC31  F02E         	call	_leitura_SPI	;wreg free
 19055                           
 19056                           ;diskio.c: 543: dummy_clocks(1);
 19057  002D02  0E01               	movlw	1
 19058  002D04  EC1A  F02B         	call	_dummy_clocks
 19059                           
 19060                           ;diskio.c: 544: escreve_SPI(0XFD);
 19061  002D08  0EFD               	movlw	253
 19062  002D0A  EC06  F02E         	call	_escreve_SPI
 19063                           
 19064                           ;diskio.c: 546: }
 19065  002D0E  D063               	goto	u11620
 19066  002D10                     l144:
 19067                           
 19068                           ;diskio.c: 547: else;diskio.c: 548: {;diskio.c: 549: LATCbits.LATC7 = 0;
 19069  002D10  9E8B               	bcf	139,7,c	;volatile
 19070                           
 19071                           ;diskio.c: 550: LATBbits.LATB5 = 0;
 19072  002D12  9A8A               	bcf	138,5,c	;volatile
 19073                           
 19074                           ;diskio.c: 551: dummy_clocks(10);
 19075  002D14  0E0A               	movlw	10
 19076  002D16  EC1A  F02B         	call	_dummy_clocks
 19077                           
 19078                           ;diskio.c: 552: command(0X58, sector*512, 0X00);
 19079  002D1A  C018  F01D         	movff	sdc_disk_write@sector,??_sdc_disk_write
 19080  002D1E  C019  F01E         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 19081  002D22  C01A  F01F         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 19082  002D26  C01B  F020         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 19083  002D2A  0E09               	movlw	9
 19084  002D2C                     u11595:
 19085  002D2C  90D8               	bcf	status,0,c
 19086  002D2E  361D               	rlcf	??_sdc_disk_write^0,f,c
 19087  002D30  361E               	rlcf	(??_sdc_disk_write+1)^0,f,c
 19088  002D32  361F               	rlcf	(??_sdc_disk_write+2)^0,f,c
 19089  002D34  3620               	rlcf	(??_sdc_disk_write+3)^0,f,c
 19090  002D36  2EE8               	decfsz	wreg,f,c
 19091  002D38  D7F9               	goto	u11595
 19092  002D3A  C01D  F00F         	movff	??_sdc_disk_write,command@arg
 19093  002D3E  C01E  F010         	movff	??_sdc_disk_write+1,command@arg+1
 19094  002D42  C01F  F011         	movff	??_sdc_disk_write+2,command@arg+2
 19095  002D46  C020  F012         	movff	??_sdc_disk_write+3,command@arg+3
 19096  002D4A  0E00               	movlw	0
 19097  002D4C  6E13               	movwf	command@CRC^0,c
 19098  002D4E  0E58               	movlw	88
 19099  002D50  ECDD  F027         	call	_command
 19100                           
 19101                           ;diskio.c: 553: proceed();
 19102  002D54  EC2B  F02E         	call	_proceed	;wreg free
 19103  002D58                     l10375:
 19104                           
 19105                           ;diskio.c: 555: buff = response();
 19106  002D58  EC25  F02E         	call	_response	;wreg free
 19107  002D5C  6E28               	movwf	sdc_disk_write@buff^0,c
 19108                           
 19109                           ;diskio.c: 556: }while(buff!=0X00);
 19110  002D5E  5028               	movf	sdc_disk_write@buff^0,w,c
 19111  002D60  A4D8               	btfss	status,2,c
 19112  002D62  D7FA               	goto	l10375
 19113                           
 19114                           ;diskio.c: 558: LATBbits.LATB5 = 0;
 19115  002D64  9A8A               	bcf	138,5,c	;volatile
 19116                           
 19117                           ;diskio.c: 559: LATCbits.LATC7 = 0;
 19118  002D66  9E8B               	bcf	139,7,c	;volatile
 19119                           
 19120                           ;diskio.c: 560: dummy_clocks(1);
 19121  002D68  0E01               	movlw	1
 19122  002D6A  EC1A  F02B         	call	_dummy_clocks
 19123                           
 19124                           ;diskio.c: 561: escreve_SPI(0XFE);
 19125  002D6E  0EFE               	movlw	254
 19126  002D70  EC06  F02E         	call	_escreve_SPI
 19127                           
 19128                           ;diskio.c: 562: for(j=0;j<512;j++)
 19129  002D74  0E00               	movlw	0
 19130  002D76  6E27               	movwf	(sdc_disk_write@j+1)^0,c
 19131  002D78  0E00               	movlw	0
 19132  002D7A  6E26               	movwf	sdc_disk_write@j^0,c
 19133  002D7C                     l10389:
 19134                           
 19135                           ;diskio.c: 563: {;diskio.c: 564: escreve_SPI(*p_buff);
 19136  002D7C  C016  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 19137  002D80  C017  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 19138  002D84  50DF               	movf	indf2,w,c
 19139  002D86  EC06  F02E         	call	_escreve_SPI
 19140                           
 19141                           ;diskio.c: 565: p_buff++;
 19142  002D8A  4A16               	infsnz	sdc_disk_write@p_buff^0,f,c
 19143  002D8C  2A17               	incf	(sdc_disk_write@p_buff+1)^0,f,c
 19144  002D8E  4A26               	infsnz	sdc_disk_write@j^0,f,c
 19145  002D90  2A27               	incf	(sdc_disk_write@j+1)^0,f,c
 19146  002D92  BE27               	btfsc	(sdc_disk_write@j+1)^0,7,c
 19147  002D94  D7F3               	goto	l10389
 19148  002D96  0E02               	movlw	2
 19149  002D98  5C27               	subwf	(sdc_disk_write@j+1)^0,w,c
 19150  002D9A  A0D8               	btfss	status,0,c
 19151  002D9C  D7EF               	goto	l10389
 19152                           
 19153                           ;diskio.c: 566: };diskio.c: 567: leitura_SPI();
 19154  002D9E  EC31  F02E         	call	_leitura_SPI	;wreg free
 19155                           
 19156                           ;diskio.c: 568: leitura_SPI();
 19157  002DA2  EC31  F02E         	call	_leitura_SPI	;wreg free
 19158                           
 19159                           ;diskio.c: 570: dummy_clocks(10);
 19160  002DA6  0E0A               	movlw	10
 19161  002DA8  EC1A  F02B         	call	_dummy_clocks
 19162                           
 19163                           ;diskio.c: 571: command(0X4D,0X00000000,0X00);
 19164  002DAC  0E00               	movlw	0
 19165  002DAE  6E0F               	movwf	command@arg^0,c
 19166  002DB0  0E00               	movlw	0
 19167  002DB2  6E10               	movwf	(command@arg+1)^0,c
 19168  002DB4  0E00               	movlw	0
 19169  002DB6  6E11               	movwf	(command@arg+2)^0,c
 19170  002DB8  0E00               	movlw	0
 19171  002DBA  6E12               	movwf	(command@arg+3)^0,c
 19172  002DBC  0E00               	movlw	0
 19173  002DBE  6E13               	movwf	command@CRC^0,c
 19174  002DC0  0E4D               	movlw	77
 19175  002DC2  ECDD  F027         	call	_command
 19176                           
 19177                           ;diskio.c: 572: proceed();
 19178  002DC6  EC2B  F02E         	call	_proceed	;wreg free
 19179  002DCA                     l10405:
 19180                           
 19181                           ;diskio.c: 574: buff = response();
 19182  002DCA  EC25  F02E         	call	_response	;wreg free
 19183  002DCE  6E28               	movwf	sdc_disk_write@buff^0,c
 19184                           
 19185                           ;diskio.c: 575: }while(buff!=0X00 );
 19186  002DD0  5028               	movf	sdc_disk_write@buff^0,w,c
 19187  002DD2  A4D8               	btfss	status,2,c
 19188  002DD4  D7FA               	goto	l10405
 19189  002DD6                     u11620:
 19190                           
 19191                           ;diskio.c: 576: };diskio.c: 577: return res;
 19192  002DD6  5025               	movf	sdc_disk_write@res^0,w,c
 19193  002DD8  0012               	return		;funcret
 19194  002DDA                     __end_of_sdc_disk_write:
 19195                           	callstack 0
 19196                           
 19197 ;; *************** function _disk_read *****************
 19198 ;; Defined at:
 19199 ;;		line 97 in file "bibliotecas/diskio.c"
 19200 ;; Parameters:    Size  Location     Type
 19201 ;;  pdrv            1    wreg     unsigned char 
 19202 ;;  buff            2   40[COMRAM] PTR unsigned char 
 19203 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 19204 ;;  sector          4   42[COMRAM] unsigned long 
 19205 ;;  count           1   46[COMRAM] unsigned char 
 19206 ;; Auto vars:     Size  Location     Type
 19207 ;;  pdrv            1   48[COMRAM] unsigned char 
 19208 ;;  result          2   49[COMRAM] int 
 19209 ;;  res             1   51[COMRAM] enum E25
 19210 ;; Return value:  Size  Location     Type
 19211 ;;                  1    wreg      enum E25
 19212 ;; Registers used:
 19213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19214 ;; Tracked objects:
 19215 ;;		On entry : 0/0
 19216 ;;		On exit  : 0/0
 19217 ;;		Unchanged: 0/0
 19218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19219 ;;      Params:         7       0       0       0       0       0       0       0       0
 19220 ;;      Locals:         4       0       0       0       0       0       0       0       0
 19221 ;;      Temps:          1       0       0       0       0       0       0       0       0
 19222 ;;      Totals:        12       0       0       0       0       0       0       0       0
 19223 ;;Total ram usage:       12 bytes
 19224 ;; Hardware stack levels used:    1
 19225 ;; Hardware stack levels required when called:    6
 19226 ;; This function calls:
 19227 ;;		_sdc_disk_read
 19228 ;; This function is called by:
 19229 ;;		_move_window
 19230 ;;		_check_fs
 19231 ;;		_f_read
 19232 ;; This function uses a non-reentrant model
 19233 ;;
 19234                           
 19235                           	psect	text106
 19236  004C90                     __ptext106:
 19237                           	callstack 0
 19238  004C90                     _disk_read:
 19239                           	callstack 15
 19240                           
 19241                           ;incstack = 0
 19242                           ;disk_read@pdrv stored from wreg
 19243  004C90  6E31               	movwf	disk_read@pdrv^0,c
 19244                           
 19245                           ;diskio.c: 104: DRESULT res;;diskio.c: 105: int result;;diskio.c: 107: switch (pdrv) {
 19246  004C92  D029               	goto	l10439
 19247  004C94                     l10415:
 19248                           
 19249                           ;diskio.c: 111: result = sdc_disk_read(buff, sector, count);
 19250  004C94  C029  F016         	movff	disk_read@buff,sdc_disk_read@p_buff
 19251  004C98  C02A  F017         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 19252  004C9C  C02B  F018         	movff	disk_read@sector,sdc_disk_read@sector
 19253  004CA0  C02C  F019         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 19254  004CA4  C02D  F01A         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 19255  004CA8  C02E  F01B         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 19256  004CAC  C02F  F01C         	movff	disk_read@count,sdc_disk_read@count
 19257  004CB0  ECFD  F01C         	call	_sdc_disk_read	;wreg free
 19258  004CB4  6E30               	movwf	??_disk_read^0,c
 19259  004CB6  5030               	movf	??_disk_read^0,w,c
 19260  004CB8  6E32               	movwf	disk_read@result^0,c
 19261  004CBA  6A33               	clrf	(disk_read@result+1)^0,c
 19262                           
 19263                           ;diskio.c: 115: res = result;
 19264  004CBC  C032  F034         	movff	disk_read@result,disk_read@res
 19265  004CC0                     l10419:
 19266                           
 19267                           ;diskio.c: 117: return res;
 19268  004CC0  5034               	movf	disk_read@res^0,w,c
 19269  004CC2  0012               	return	
 19270  004CC4                     l10423:
 19271                           
 19272                           ;diskio.c: 122: result = sdc_disk_read(buff, sector, count);
 19273  004CC4  C029  F016         	movff	disk_read@buff,sdc_disk_read@p_buff
 19274  004CC8  C02A  F017         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 19275  004CCC  C02B  F018         	movff	disk_read@sector,sdc_disk_read@sector
 19276  004CD0  C02C  F019         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 19277  004CD4  C02D  F01A         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 19278  004CD8  C02E  F01B         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 19279  004CDC  C02F  F01C         	movff	disk_read@count,sdc_disk_read@count
 19280  004CE0  ECFD  F01C         	call	_sdc_disk_read	;wreg free
 19281  004CE4  D7E7               	goto	L7
 19282  004CE6                     l10439:
 19283  004CE6  5031               	movf	disk_read@pdrv^0,w,c
 19284                           
 19285                           ; Switch size 1, requested type "simple"
 19286                           ; Number of cases is 3, Range of values is 0 to 2
 19287                           ; switch strategies available:
 19288                           ; Name         Instructions Cycles
 19289                           ; simple_byte           10     6 (average)
 19290                           ;	Chosen strategy is simple_byte
 19291  004CE8  0A00               	xorlw	0	; case 0
 19292  004CEA  B4D8               	btfsc	status,2,c
 19293  004CEC  D7D3               	goto	l10415
 19294  004CEE  0A01               	xorlw	1	; case 1
 19295  004CF0  B4D8               	btfsc	status,2,c
 19296  004CF2  D7E8               	goto	l10423
 19297  004CF4  0A03               	xorlw	3	; case 2
 19298  004CF6  B4D8               	btfsc	status,2,c
 19299  004CF8  D7E3               	goto	l10419
 19300                           
 19301                           ;diskio.c: 141: return RES_PARERR;
 19302  004CFA  0E04               	movlw	4
 19303  004CFC  0012               	return		;funcret
 19304  004CFE                     __end_of_disk_read:
 19305                           	callstack 0
 19306                           
 19307 ;; *************** function _sdc_disk_read *****************
 19308 ;; Defined at:
 19309 ;;		line 439 in file "bibliotecas/diskio.c"
 19310 ;; Parameters:    Size  Location     Type
 19311 ;;  p_buff          2   21[COMRAM] PTR unsigned char 
 19312 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 19313 ;;  sector          4   23[COMRAM] unsigned long 
 19314 ;;  count           1   27[COMRAM] unsigned char 
 19315 ;; Auto vars:     Size  Location     Type
 19316 ;;  start_add       4   33[COMRAM] unsigned long 
 19317 ;;  length          2   37[COMRAM] int 
 19318 ;;  count1          2    0        int 
 19319 ;;  i               2    0        int 
 19320 ;;  buff            1   39[COMRAM] unsigned char 
 19321 ;;  ptr             1    0        unsigned char 
 19322 ;;  res             1    0        enum E25
 19323 ;; Return value:  Size  Location     Type
 19324 ;;                  1    wreg      enum E25
 19325 ;; Registers used:
 19326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19327 ;; Tracked objects:
 19328 ;;		On entry : 0/0
 19329 ;;		On exit  : 0/0
 19330 ;;		Unchanged: 0/0
 19331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19332 ;;      Params:         7       0       0       0       0       0       0       0       0
 19333 ;;      Locals:         8       0       0       0       0       0       0       0       0
 19334 ;;      Temps:          4       0       0       0       0       0       0       0       0
 19335 ;;      Totals:        19       0       0       0       0       0       0       0       0
 19336 ;;Total ram usage:       19 bytes
 19337 ;; Hardware stack levels used:    1
 19338 ;; Hardware stack levels required when called:    5
 19339 ;; This function calls:
 19340 ;;		_command
 19341 ;;		_dummy_clocks
 19342 ;;		_proceed
 19343 ;;		_response
 19344 ;; This function is called by:
 19345 ;;		_disk_read
 19346 ;; This function uses a non-reentrant model
 19347 ;;
 19348                           
 19349                           	psect	text107
 19350  0039FA                     __ptext107:
 19351                           	callstack 0
 19352  0039FA                     _sdc_disk_read:
 19353                           	callstack 15
 19354                           
 19355                           ;diskio.c: 448: unsigned long int start_add;;diskio.c: 449: int length,i, count1;;diskio
      +                          .c: 450: dummy_clocks(10);
 19356                           
 19357                           ;incstack = 0
 19358  0039FA  0E0A               	movlw	10
 19359  0039FC  EC1A  F02B         	call	_dummy_clocks
 19360                           
 19361                           ;diskio.c: 452: start_add = sector*512;
 19362  003A00  C018  F01D         	movff	sdc_disk_read@sector,??_sdc_disk_read
 19363  003A04  C019  F01E         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 19364  003A08  C01A  F01F         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 19365  003A0C  C01B  F020         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 19366  003A10  0E09               	movlw	9
 19367  003A12                     u11475:
 19368  003A12  90D8               	bcf	status,0,c
 19369  003A14  361D               	rlcf	??_sdc_disk_read^0,f,c
 19370  003A16  361E               	rlcf	(??_sdc_disk_read+1)^0,f,c
 19371  003A18  361F               	rlcf	(??_sdc_disk_read+2)^0,f,c
 19372  003A1A  3620               	rlcf	(??_sdc_disk_read+3)^0,f,c
 19373  003A1C  2EE8               	decfsz	wreg,f,c
 19374  003A1E  D7F9               	goto	u11475
 19375  003A20  C01D  F022         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 19376  003A24  C01E  F023         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 19377  003A28  C01F  F024         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 19378  003A2C  C020  F025         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 19379                           
 19380                           ;diskio.c: 455: if(sector != 1)
 19381  003A30  0418               	decf	sdc_disk_read@sector^0,w,c
 19382  003A32  1019               	iorwf	(sdc_disk_read@sector+1)^0,w,c
 19383  003A34  101A               	iorwf	(sdc_disk_read@sector+2)^0,w,c
 19384  003A36  101B               	iorwf	(sdc_disk_read@sector+3)^0,w,c
 19385  003A38  B4D8               	btfsc	status,2,c
 19386  003A3A  D01B               	goto	l10285
 19387                           
 19388                           ;diskio.c: 456: {;diskio.c: 457: dummy_clocks(10);
 19389  003A3C  0E0A               	movlw	10
 19390  003A3E  EC1A  F02B         	call	_dummy_clocks
 19391                           
 19392                           ;diskio.c: 458: command(0X52,start_add ,0X00);
 19393  003A42  C022  F00F         	movff	sdc_disk_read@start_add,command@arg
 19394  003A46  C023  F010         	movff	sdc_disk_read@start_add+1,command@arg+1
 19395  003A4A  C024  F011         	movff	sdc_disk_read@start_add+2,command@arg+2
 19396  003A4E  C025  F012         	movff	sdc_disk_read@start_add+3,command@arg+3
 19397  003A52  0E00               	movlw	0
 19398  003A54  6E13               	movwf	command@CRC^0,c
 19399  003A56  0E52               	movlw	82
 19400  003A58  ECDD  F027         	call	_command
 19401                           
 19402                           ;diskio.c: 459: proceed();
 19403  003A5C  EC2B  F02E         	call	_proceed	;wreg free
 19404  003A60                     l10279:
 19405                           
 19406                           ;diskio.c: 461: buff = response();
 19407  003A60  EC25  F02E         	call	_response	;wreg free
 19408  003A64  6E28               	movwf	sdc_disk_read@buff^0,c
 19409                           
 19410                           ;diskio.c: 462: }while(buff!=0X00);
 19411  003A66  5028               	movf	sdc_disk_read@buff^0,w,c
 19412  003A68  A4D8               	btfss	status,2,c
 19413  003A6A  D7FA               	goto	l10279
 19414  003A6C                     u11490:
 19415                           
 19416                           ;diskio.c: 463: proceed();
 19417  003A6C  EC2B  F02E         	call	_proceed	;wreg free
 19418                           
 19419                           ;diskio.c: 464: }
 19420  003A70  D01C               	goto	l10297
 19421  003A72                     l10285:
 19422                           
 19423                           ;diskio.c: 465: else;diskio.c: 466: {;diskio.c: 467: dummy_clocks(10);
 19424  003A72  0E0A               	movlw	10
 19425  003A74  EC1A  F02B         	call	_dummy_clocks
 19426                           
 19427                           ;diskio.c: 468: command(0X51,sector ,0X00);
 19428  003A78  C018  F00F         	movff	sdc_disk_read@sector,command@arg
 19429  003A7C  C019  F010         	movff	sdc_disk_read@sector+1,command@arg+1
 19430  003A80  C01A  F011         	movff	sdc_disk_read@sector+2,command@arg+2
 19431  003A84  C01B  F012         	movff	sdc_disk_read@sector+3,command@arg+3
 19432  003A88  0E00               	movlw	0
 19433  003A8A  6E13               	movwf	command@CRC^0,c
 19434  003A8C  0E51               	movlw	81
 19435  003A8E  ECDD  F027         	call	_command
 19436                           
 19437                           ;diskio.c: 469: proceed();
 19438  003A92  EC2B  F02E         	call	_proceed	;wreg free
 19439  003A96                     l10289:
 19440                           
 19441                           ;diskio.c: 471: buff = response();
 19442  003A96  EC25  F02E         	call	_response	;wreg free
 19443  003A9A  6E28               	movwf	sdc_disk_read@buff^0,c
 19444                           
 19445                           ;diskio.c: 472: }while(buff!=0X00);
 19446  003A9C  5028               	movf	sdc_disk_read@buff^0,w,c
 19447  003A9E  B4D8               	btfsc	status,2,c
 19448  003AA0  D7E5               	goto	u11490
 19449  003AA2  D7F9               	goto	l10289
 19450  003AA4                     l10295:
 19451                           
 19452                           ;diskio.c: 479: {;diskio.c: 480: buff = response();
 19453  003AA4  EC25  F02E         	call	_response	;wreg free
 19454  003AA8  6E28               	movwf	sdc_disk_read@buff^0,c
 19455  003AAA                     l10297:
 19456  003AAA  0EFE               	movlw	254
 19457  003AAC  1828               	xorwf	sdc_disk_read@buff^0,w,c
 19458  003AAE  A4D8               	btfss	status,2,c
 19459  003AB0  D7F9               	goto	l10295
 19460                           
 19461                           ;diskio.c: 481: };diskio.c: 483: length = 0;
 19462  003AB2  0E00               	movlw	0
 19463  003AB4  6E27               	movwf	(sdc_disk_read@length+1)^0,c
 19464  003AB6  0E00               	movlw	0
 19465  003AB8  6E26               	movwf	sdc_disk_read@length^0,c
 19466                           
 19467                           ;diskio.c: 484: while ( length < 512 )
 19468  003ABA  D00B               	goto	l10305
 19469  003ABC                     l10301:
 19470                           
 19471                           ;diskio.c: 485: {;diskio.c: 486: p_buff[length] = response();
 19472  003ABC  5026               	movf	sdc_disk_read@length^0,w,c
 19473  003ABE  2416               	addwf	sdc_disk_read@p_buff^0,w,c
 19474  003AC0  6ED9               	movwf	fsr2l,c
 19475  003AC2  5027               	movf	(sdc_disk_read@length+1)^0,w,c
 19476  003AC4  2017               	addwfc	(sdc_disk_read@p_buff+1)^0,w,c
 19477  003AC6  6EDA               	movwf	fsr2h,c
 19478  003AC8  EC25  F02E         	call	_response	;wreg free
 19479  003ACC  6EDF               	movwf	indf2,c
 19480                           
 19481                           ;diskio.c: 487: length++;
 19482  003ACE  4A26               	infsnz	sdc_disk_read@length^0,f,c
 19483  003AD0  2A27               	incf	(sdc_disk_read@length+1)^0,f,c
 19484  003AD2                     l10305:
 19485  003AD2  BE27               	btfsc	(sdc_disk_read@length+1)^0,7,c
 19486  003AD4  D7F3               	goto	l10301
 19487  003AD6  0E02               	movlw	2
 19488  003AD8  5C27               	subwf	(sdc_disk_read@length+1)^0,w,c
 19489  003ADA  A0D8               	btfss	status,0,c
 19490  003ADC  D7EF               	goto	l10301
 19491                           
 19492                           ;diskio.c: 491: dummy_clocks(10);
 19493  003ADE  0E0A               	movlw	10
 19494  003AE0  EC1A  F02B         	call	_dummy_clocks
 19495                           
 19496                           ;diskio.c: 493: command(0X4C,0X00000000,0X00);
 19497  003AE4  0E00               	movlw	0
 19498  003AE6  6E0F               	movwf	command@arg^0,c
 19499  003AE8  0E00               	movlw	0
 19500  003AEA  6E10               	movwf	(command@arg+1)^0,c
 19501  003AEC  0E00               	movlw	0
 19502  003AEE  6E11               	movwf	(command@arg+2)^0,c
 19503  003AF0  0E00               	movlw	0
 19504  003AF2  6E12               	movwf	(command@arg+3)^0,c
 19505  003AF4  0E00               	movlw	0
 19506  003AF6  6E13               	movwf	command@CRC^0,c
 19507  003AF8  0E4C               	movlw	76
 19508  003AFA  ECDD  F027         	call	_command
 19509                           
 19510                           ;diskio.c: 494: proceed();
 19511  003AFE  EC2B  F02E         	call	_proceed	;wreg free
 19512  003B02                     l10315:
 19513                           
 19514                           ;diskio.c: 496: buff = response();
 19515  003B02  EC25  F02E         	call	_response	;wreg free
 19516  003B06  6E28               	movwf	sdc_disk_read@buff^0,c
 19517                           
 19518                           ;diskio.c: 497: }while(buff!=0xFF);
 19519  003B08  2828               	incf	sdc_disk_read@buff^0,w,c
 19520  003B0A  A4D8               	btfss	status,2,c
 19521  003B0C  D7FA               	goto	l10315
 19522                           
 19523                           ;diskio.c: 500: return RES_OK;
 19524  003B0E  0E00               	movlw	0
 19525  003B10  0012               	return		;funcret
 19526  003B12                     __end_of_sdc_disk_read:
 19527                           	callstack 0
 19528                           
 19529 ;; *************** function _response *****************
 19530 ;; Defined at:
 19531 ;;		line 61 in file "bibliotecas/SDCard.c"
 19532 ;; Parameters:    Size  Location     Type
 19533 ;;		None
 19534 ;; Auto vars:     Size  Location     Type
 19535 ;;  buff            1    9[COMRAM] unsigned char 
 19536 ;; Return value:  Size  Location     Type
 19537 ;;                  1    wreg      unsigned char 
 19538 ;; Registers used:
 19539 ;;		wreg, status,2, cstack
 19540 ;; Tracked objects:
 19541 ;;		On entry : 0/0
 19542 ;;		On exit  : 0/0
 19543 ;;		Unchanged: 0/0
 19544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19545 ;;      Params:         0       0       0       0       0       0       0       0       0
 19546 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19547 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19548 ;;      Totals:         1       0       0       0       0       0       0       0       0
 19549 ;;Total ram usage:        1 bytes
 19550 ;; Hardware stack levels used:    1
 19551 ;; Hardware stack levels required when called:    3
 19552 ;; This function calls:
 19553 ;;		_leitura_SPI
 19554 ;; This function is called by:
 19555 ;;		_sdc_reset
 19556 ;;		_sdc_disk_initialize
 19557 ;;		_sdc_disk_read
 19558 ;;		_sdc_disk_write
 19559 ;; This function uses a non-reentrant model
 19560 ;;
 19561                           
 19562                           	psect	text108
 19563  005C4A                     __ptext108:
 19564                           	callstack 0
 19565  005C4A                     _response:
 19566                           	callstack 16
 19567                           
 19568                           ;SDCard.c: 63: unsigned char buff;;SDCard.c: 64: LATBbits.LATB5 = 0;
 19569                           
 19570                           ;incstack = 0
 19571  005C4A  9A8A               	bcf	138,5,c	;volatile
 19572                           
 19573                           ;SDCard.c: 65: buff= leitura_SPI();
 19574  005C4C  EC31  F02E         	call	_leitura_SPI	;wreg free
 19575  005C50  6E0A               	movwf	response@buff^0,c
 19576                           
 19577                           ;SDCard.c: 66: return buff;
 19578  005C52  500A               	movf	response@buff^0,w,c
 19579  005C54  0012               	return		;funcret
 19580  005C56                     __end_of_response:
 19581                           	callstack 0
 19582                           
 19583 ;; *************** function _proceed *****************
 19584 ;; Defined at:
 19585 ;;		line 94 in file "bibliotecas/SDCard.c"
 19586 ;; Parameters:    Size  Location     Type
 19587 ;;		None
 19588 ;; Auto vars:     Size  Location     Type
 19589 ;;		None
 19590 ;; Return value:  Size  Location     Type
 19591 ;;                  1    wreg      void 
 19592 ;; Registers used:
 19593 ;;		wreg, cstack
 19594 ;; Tracked objects:
 19595 ;;		On entry : 0/0
 19596 ;;		On exit  : 0/0
 19597 ;;		Unchanged: 0/0
 19598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19599 ;;      Params:         0       0       0       0       0       0       0       0       0
 19600 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19601 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19602 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19603 ;;Total ram usage:        0 bytes
 19604 ;; Hardware stack levels used:    1
 19605 ;; Hardware stack levels required when called:    3
 19606 ;; This function calls:
 19607 ;;		_escreve_SPI
 19608 ;; This function is called by:
 19609 ;;		_sdc_reset
 19610 ;;		_sdc_disk_initialize
 19611 ;;		_sdc_disk_read
 19612 ;;		_sdc_disk_write
 19613 ;; This function uses a non-reentrant model
 19614 ;;
 19615                           
 19616                           	psect	text109
 19617  005C56                     __ptext109:
 19618                           	callstack 0
 19619  005C56                     _proceed:
 19620                           	callstack 16
 19621                           
 19622                           ;SDCard.c: 96: LATBbits.LATB5 = 0;
 19623                           
 19624                           ;incstack = 0
 19625  005C56  9A8A               	bcf	138,5,c	;volatile
 19626                           
 19627                           ;SDCard.c: 97: escreve_SPI(0xFF);
 19628  005C58  0EFF               	movlw	255
 19629  005C5A  EC06  F02E         	call	_escreve_SPI
 19630                           
 19631                           ;SDCard.c: 98: LATBbits.LATB5 = 1;
 19632  005C5E  8A8A               	bsf	138,5,c	;volatile
 19633  005C60  0012               	return		;funcret
 19634  005C62                     __end_of_proceed:
 19635                           	callstack 0
 19636                           
 19637 ;; *************** function _command *****************
 19638 ;; Defined at:
 19639 ;;		line 127 in file "bibliotecas/SDCard.c"
 19640 ;; Parameters:    Size  Location     Type
 19641 ;;  CMD             1    wreg     unsigned char 
 19642 ;;  arg             4   14[COMRAM] unsigned long 
 19643 ;;  CRC             1   18[COMRAM] unsigned char 
 19644 ;; Auto vars:     Size  Location     Type
 19645 ;;  CMD             1   19[COMRAM] unsigned char 
 19646 ;;  argument        1   20[COMRAM] unsigned char 
 19647 ;; Return value:  Size  Location     Type
 19648 ;;                  1    wreg      void 
 19649 ;; Registers used:
 19650 ;;		wreg, status,2, status,0, cstack
 19651 ;; Tracked objects:
 19652 ;;		On entry : 0/0
 19653 ;;		On exit  : 0/0
 19654 ;;		Unchanged: 0/0
 19655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19656 ;;      Params:         5       0       0       0       0       0       0       0       0
 19657 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19658 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19659 ;;      Totals:         7       0       0       0       0       0       0       0       0
 19660 ;;Total ram usage:        7 bytes
 19661 ;; Hardware stack levels used:    1
 19662 ;; Hardware stack levels required when called:    4
 19663 ;; This function calls:
 19664 ;;		_dummy_clocks
 19665 ;;		_escreve_SPI
 19666 ;;		_wait_ready
 19667 ;; This function is called by:
 19668 ;;		_sdc_reset
 19669 ;;		_sdc_disk_initialize
 19670 ;;		_sdc_disk_read
 19671 ;;		_sdc_disk_write
 19672 ;; This function uses a non-reentrant model
 19673 ;;
 19674                           
 19675                           	psect	text110
 19676  004FBA                     __ptext110:
 19677                           	callstack 0
 19678  004FBA                     _command:
 19679                           	callstack 15
 19680                           
 19681                           ;incstack = 0
 19682                           ;command@CMD stored from wreg
 19683  004FBA  6E14               	movwf	command@CMD^0,c
 19684                           
 19685                           ;SDCard.c: 129: unsigned char argument;;SDCard.c: 131: if (wait_ready() != 0xFF)
 19686  004FBC  EC8C  F02B         	call	_wait_ready	;wreg free
 19687  004FC0  0AFF               	xorlw	255
 19688  004FC2  A4D8               	btfss	status,2,c
 19689  004FC4  D004               	goto	l704
 19690  004FC6  D008               	goto	u11460
 19691  004FC8                     l10229:
 19692                           
 19693                           ;SDCard.c: 134: {;SDCard.c: 135: dummy_clocks(10);
 19694  004FC8  0E0A               	movlw	10
 19695  004FCA  EC1A  F02B         	call	_dummy_clocks
 19696  004FCE                     l704:
 19697  004FCE  EC8C  F02B         	call	_wait_ready	;wreg free
 19698  004FD2  0AFF               	xorlw	255
 19699  004FD4  A4D8               	btfss	status,2,c
 19700  004FD6  D7F8               	goto	l10229
 19701  004FD8                     u11460:
 19702                           
 19703                           ;SDCard.c: 136: };SDCard.c: 137: };SDCard.c: 138: escreve_SPI(0xFF);
 19704  004FD8  0EFF               	movlw	255
 19705  004FDA  EC06  F02E         	call	_escreve_SPI
 19706                           
 19707                           ;SDCard.c: 139: escreve_SPI(CMD);
 19708  004FDE  5014               	movf	command@CMD^0,w,c
 19709  004FE0  EC06  F02E         	call	_escreve_SPI
 19710                           
 19711                           ;SDCard.c: 140: argument = arg>>24;
 19712  004FE4  C012  F015         	movff	command@arg+3,command@argument
 19713                           
 19714                           ;SDCard.c: 141: escreve_SPI(argument);
 19715  004FE8  5015               	movf	command@argument^0,w,c
 19716  004FEA  EC06  F02E         	call	_escreve_SPI
 19717                           
 19718                           ;SDCard.c: 142: argument = arg>>16;
 19719  004FEE  C011  F015         	movff	command@arg+2,command@argument
 19720                           
 19721                           ;SDCard.c: 143: escreve_SPI(argument);
 19722  004FF2  5015               	movf	command@argument^0,w,c
 19723  004FF4  EC06  F02E         	call	_escreve_SPI
 19724                           
 19725                           ;SDCard.c: 144: argument = arg>>8;
 19726  004FF8  C010  F015         	movff	command@arg+1,command@argument
 19727                           
 19728                           ;SDCard.c: 145: escreve_SPI(argument);
 19729  004FFC  5015               	movf	command@argument^0,w,c
 19730  004FFE  EC06  F02E         	call	_escreve_SPI
 19731                           
 19732                           ;SDCard.c: 146: argument = arg;
 19733  005002  C00F  F015         	movff	command@arg,command@argument
 19734                           
 19735                           ;SDCard.c: 147: escreve_SPI(argument);
 19736  005006  5015               	movf	command@argument^0,w,c
 19737  005008  EC06  F02E         	call	_escreve_SPI
 19738                           
 19739                           ;SDCard.c: 148: escreve_SPI(CRC);
 19740  00500C  5013               	movf	command@CRC^0,w,c
 19741  00500E  EC06  F02E         	call	_escreve_SPI
 19742  005012  0012               	return		;funcret
 19743  005014                     __end_of_command:
 19744                           	callstack 0
 19745                           
 19746 ;; *************** function _wait_ready *****************
 19747 ;; Defined at:
 19748 ;;		line 107 in file "bibliotecas/SDCard.c"
 19749 ;; Parameters:    Size  Location     Type
 19750 ;;		None
 19751 ;; Auto vars:     Size  Location     Type
 19752 ;;  msg            10    0        unsigned char [10]
 19753 ;;  timeout         4    9[COMRAM] unsigned long 
 19754 ;;  res             1   13[COMRAM] unsigned char 
 19755 ;; Return value:  Size  Location     Type
 19756 ;;                  1    wreg      unsigned char 
 19757 ;; Registers used:
 19758 ;;		wreg, status,2, status,0, cstack
 19759 ;; Tracked objects:
 19760 ;;		On entry : 0/0
 19761 ;;		On exit  : 0/0
 19762 ;;		Unchanged: 0/0
 19763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19764 ;;      Params:         0       0       0       0       0       0       0       0       0
 19765 ;;      Locals:         5       0       0       0       0       0       0       0       0
 19766 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19767 ;;      Totals:         5       0       0       0       0       0       0       0       0
 19768 ;;Total ram usage:        5 bytes
 19769 ;; Hardware stack levels used:    1
 19770 ;; Hardware stack levels required when called:    3
 19771 ;; This function calls:
 19772 ;;		_leitura_SPI
 19773 ;; This function is called by:
 19774 ;;		_command
 19775 ;; This function uses a non-reentrant model
 19776 ;;
 19777                           
 19778                           	psect	text111
 19779  005718                     __ptext111:
 19780                           	callstack 0
 19781  005718                     _wait_ready:
 19782                           	callstack 15
 19783                           
 19784                           ;SDCard.c: 109: BYTE res;;SDCard.c: 110: DWORD timeout = 0x7FFF;
 19785                           
 19786                           ;incstack = 0
 19787  005718  0EFF               	movlw	255
 19788  00571A  6E0A               	movwf	wait_ready@timeout^0,c
 19789  00571C  0E7F               	movlw	127
 19790  00571E  6E0B               	movwf	(wait_ready@timeout+1)^0,c
 19791  005720  0E00               	movlw	0
 19792  005722  6E0C               	movwf	(wait_ready@timeout+2)^0,c
 19793  005724  0E00               	movlw	0
 19794  005726  6E0D               	movwf	(wait_ready@timeout+3)^0,c
 19795  005728                     l10215:
 19796                           
 19797                           ;SDCard.c: 114: res = leitura_SPI();
 19798  005728  EC31  F02E         	call	_leitura_SPI	;wreg free
 19799  00572C  6E0E               	movwf	wait_ready@res^0,c
 19800                           
 19801                           ;SDCard.c: 115: }while ((res != 0xFF) && (--timeout));
 19802  00572E  280E               	incf	wait_ready@res^0,w,c
 19803  005730  B4D8               	btfsc	status,2,c
 19804  005732  D00B               	goto	u11440
 19805  005734  060A               	decf	wait_ready@timeout^0,f,c
 19806  005736  0E00               	movlw	0
 19807  005738  5A0B               	subwfb	(wait_ready@timeout+1)^0,f,c
 19808  00573A  5A0C               	subwfb	(wait_ready@timeout+2)^0,f,c
 19809  00573C  5A0D               	subwfb	(wait_ready@timeout+3)^0,f,c
 19810  00573E  500A               	movf	wait_ready@timeout^0,w,c
 19811  005740  100B               	iorwf	(wait_ready@timeout+1)^0,w,c
 19812  005742  100C               	iorwf	(wait_ready@timeout+2)^0,w,c
 19813  005744  100D               	iorwf	(wait_ready@timeout+3)^0,w,c
 19814  005746  A4D8               	btfss	status,2,c
 19815  005748  D7EF               	goto	l10215
 19816  00574A                     u11440:
 19817                           
 19818                           ;SDCard.c: 117: return res;
 19819  00574A  500E               	movf	wait_ready@res^0,w,c
 19820  00574C  0012               	return		;funcret
 19821  00574E                     __end_of_wait_ready:
 19822                           	callstack 0
 19823                           
 19824 ;; *************** function _escreve_SPI *****************
 19825 ;; Defined at:
 19826 ;;		line 105 in file "bibliotecas/SPI.c"
 19827 ;; Parameters:    Size  Location     Type
 19828 ;;  dado            1    wreg     unsigned char 
 19829 ;; Auto vars:     Size  Location     Type
 19830 ;;  dado            1   10[COMRAM] unsigned char 
 19831 ;;  TempVar         1    0        unsigned char 
 19832 ;; Return value:  Size  Location     Type
 19833 ;;                  1    wreg      void 
 19834 ;; Registers used:
 19835 ;;		wreg
 19836 ;; Tracked objects:
 19837 ;;		On entry : 0/0
 19838 ;;		On exit  : 0/0
 19839 ;;		Unchanged: 0/0
 19840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19841 ;;      Params:         0       0       0       0       0       0       0       0       0
 19842 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19843 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19844 ;;      Totals:         2       0       0       0       0       0       0       0       0
 19845 ;;Total ram usage:        2 bytes
 19846 ;; Hardware stack levels used:    1
 19847 ;; Hardware stack levels required when called:    2
 19848 ;; This function calls:
 19849 ;;		Nothing
 19850 ;; This function is called by:
 19851 ;;		_sdc_disk_write
 19852 ;;		_proceed
 19853 ;;		_command
 19854 ;; This function uses a non-reentrant model
 19855 ;;
 19856                           
 19857                           	psect	text112
 19858  005C0C                     __ptext112:
 19859                           	callstack 0
 19860  005C0C                     _escreve_SPI:
 19861                           	callstack 16
 19862                           
 19863                           ;incstack = 0
 19864                           ;escreve_SPI@dado stored from wreg
 19865  005C0C  6E0B               	movwf	escreve_SPI@dado^0,c
 19866  005C0E  50C9               	movf	201,w,c	;volatile
 19867                           
 19868                           ;SPI.c: 109: PIR1bits.SSPIF = 0;
 19869  005C10  969E               	bcf	158,3,c	;volatile
 19870                           
 19871                           ;SPI.c: 111: SSPBUF = dado;
 19872  005C12  C00B  FFC9         	movff	escreve_SPI@dado,4041	;volatile
 19873  005C16                     l811:
 19874  005C16  B69E               	btfsc	158,3,c	;volatile
 19875  005C18  0012               	return	
 19876  005C1A  D7FD               	goto	l811
 19877  005C1C                     __end_of_escreve_SPI:
 19878                           	callstack 0
 19879                           
 19880 ;; *************** function _dummy_clocks *****************
 19881 ;; Defined at:
 19882 ;;		line 76 in file "bibliotecas/SDCard.c"
 19883 ;; Parameters:    Size  Location     Type
 19884 ;;  n               1    wreg     unsigned char 
 19885 ;; Auto vars:     Size  Location     Type
 19886 ;;  n               1   11[COMRAM] unsigned char 
 19887 ;;  i               2   12[COMRAM] unsigned int 
 19888 ;; Return value:  Size  Location     Type
 19889 ;;                  1    wreg      void 
 19890 ;; Registers used:
 19891 ;;		wreg, status,2, status,0, cstack
 19892 ;; Tracked objects:
 19893 ;;		On entry : 0/0
 19894 ;;		On exit  : 0/0
 19895 ;;		Unchanged: 0/0
 19896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19897 ;;      Params:         0       0       0       0       0       0       0       0       0
 19898 ;;      Locals:         3       0       0       0       0       0       0       0       0
 19899 ;;      Temps:          2       0       0       0       0       0       0       0       0
 19900 ;;      Totals:         5       0       0       0       0       0       0       0       0
 19901 ;;Total ram usage:        5 bytes
 19902 ;; Hardware stack levels used:    1
 19903 ;; Hardware stack levels required when called:    3
 19904 ;; This function calls:
 19905 ;;		_leitura_SPI
 19906 ;; This function is called by:
 19907 ;;		_sdc_disk_initialize
 19908 ;;		_sdc_disk_read
 19909 ;;		_sdc_disk_write
 19910 ;;		_command
 19911 ;; This function uses a non-reentrant model
 19912 ;;
 19913                           
 19914                           	psect	text113
 19915  005634                     __ptext113:
 19916                           	callstack 0
 19917  005634                     _dummy_clocks:
 19918                           	callstack 16
 19919                           
 19920                           ;incstack = 0
 19921                           ;dummy_clocks@n stored from wreg
 19922  005634  6E0C               	movwf	dummy_clocks@n^0,c
 19923                           
 19924                           ;SDCard.c: 78: unsigned int i;;SDCard.c: 79: _delay((unsigned long)((1)*(48000000/4000.0
      +                          )));
 19925  005636  0E10               	movlw	16
 19926  005638  6E0A               	movwf	??_dummy_clocks^0,c
 19927  00563A  0E94               	movlw	148
 19928  00563C                     u16897:
 19929  00563C  2EE8               	decfsz	wreg,f,c
 19930  00563E  D7FE               	bra	u16897
 19931  005640  2E0A               	decfsz	??_dummy_clocks^0,f,c
 19932  005642  D7FC               	bra	u16897
 19933  005644  D000               	nop2	
 19934                           
 19935                           ;SDCard.c: 80: for(i=0;i<n;i++)
 19936  005646  0E00               	movlw	0
 19937  005648  6E0E               	movwf	(dummy_clocks@i+1)^0,c
 19938  00564A  0E00               	movlw	0
 19939  00564C  6E0D               	movwf	dummy_clocks@i^0,c
 19940  00564E  D006               	goto	l10207
 19941  005650                     l688:
 19942                           
 19943                           ;SDCard.c: 81: {;SDCard.c: 82: LATBbits.LATB5 = 1;
 19944  005650  8A8A               	bsf	138,5,c	;volatile
 19945                           
 19946                           ;SDCard.c: 83: leitura_SPI();
 19947  005652  EC31  F02E         	call	_leitura_SPI	;wreg free
 19948                           
 19949                           ;SDCard.c: 84: LATBbits.LATB5 = 0;
 19950  005656  9A8A               	bcf	138,5,c	;volatile
 19951  005658  4A0D               	infsnz	dummy_clocks@i^0,f,c
 19952  00565A  2A0E               	incf	(dummy_clocks@i+1)^0,f,c
 19953  00565C                     l10207:
 19954  00565C  500C               	movf	dummy_clocks@n^0,w,c
 19955  00565E  6E0A               	movwf	??_dummy_clocks^0,c
 19956  005660  6A0B               	clrf	(??_dummy_clocks+1)^0,c
 19957  005662  500A               	movf	??_dummy_clocks^0,w,c
 19958  005664  5C0D               	subwf	dummy_clocks@i^0,w,c
 19959  005666  500B               	movf	(??_dummy_clocks+1)^0,w,c
 19960  005668  580E               	subwfb	(dummy_clocks@i+1)^0,w,c
 19961  00566A  B0D8               	btfsc	status,0,c
 19962  00566C  0012               	return	
 19963  00566E  D7F0               	goto	l688
 19964  005670                     __end_of_dummy_clocks:
 19965                           	callstack 0
 19966                           
 19967 ;; *************** function _leitura_SPI *****************
 19968 ;; Defined at:
 19969 ;;		line 90 in file "bibliotecas/SPI.c"
 19970 ;; Parameters:    Size  Location     Type
 19971 ;;		None
 19972 ;; Auto vars:     Size  Location     Type
 19973 ;;		None
 19974 ;; Return value:  Size  Location     Type
 19975 ;;                  1    wreg      unsigned char 
 19976 ;; Registers used:
 19977 ;;		wreg, status,2
 19978 ;; Tracked objects:
 19979 ;;		On entry : 0/0
 19980 ;;		On exit  : 0/0
 19981 ;;		Unchanged: 0/0
 19982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19983 ;;      Params:         0       0       0       0       0       0       0       0       0
 19984 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19985 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19986 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19987 ;;Total ram usage:        0 bytes
 19988 ;; Hardware stack levels used:    1
 19989 ;; Hardware stack levels required when called:    2
 19990 ;; This function calls:
 19991 ;;		Nothing
 19992 ;; This function is called by:
 19993 ;;		_sdc_disk_write
 19994 ;;		_response
 19995 ;;		_dummy_clocks
 19996 ;;		_wait_ready
 19997 ;; This function uses a non-reentrant model
 19998 ;;
 19999                           
 20000                           	psect	text114
 20001  005C62                     __ptext114:
 20002                           	callstack 0
 20003  005C62                     _leitura_SPI:
 20004                           	callstack 16
 20005                           
 20006                           ;SPI.c: 92: SSPBUF = 0xFF;
 20007                           
 20008                           ;incstack = 0
 20009  005C62  68C9               	setf	201,c	;volatile
 20010                           
 20011                           ;SPI.c: 93: SSPSTATbits.BF = 0;
 20012  005C64  90C7               	bcf	199,0,c	;volatile
 20013  005C66                     l805:
 20014  005C66  A0C7               	btfss	199,0,c	;volatile
 20015  005C68  D7FE               	goto	l805
 20016                           
 20017                           ;SPI.c: 95: return (SSPBUF);
 20018  005C6A  50C9               	movf	201,w,c	;volatile
 20019  005C6C  0012               	return		;funcret
 20020  005C6E                     __end_of_leitura_SPI:
 20021                           	callstack 0
 20022                           
 20023 ;; *************** function _disk_ioctl *****************
 20024 ;; Defined at:
 20025 ;;		line 198 in file "bibliotecas/diskio.c"
 20026 ;; Parameters:    Size  Location     Type
 20027 ;;  pdrv            1    wreg     unsigned char 
 20028 ;;  cmd             1    9[COMRAM] unsigned char 
 20029 ;;  buff            2   10[COMRAM] PTR void 
 20030 ;;		 -> NULL(0), 
 20031 ;; Auto vars:     Size  Location     Type
 20032 ;;  pdrv            1   12[COMRAM] unsigned char 
 20033 ;;  result          2    0        int 
 20034 ;;  res             1   13[COMRAM] enum E25
 20035 ;; Return value:  Size  Location     Type
 20036 ;;                  1    wreg      enum E25
 20037 ;; Registers used:
 20038 ;;		wreg, status,2, status,0
 20039 ;; Tracked objects:
 20040 ;;		On entry : 0/0
 20041 ;;		On exit  : 0/0
 20042 ;;		Unchanged: 0/0
 20043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20044 ;;      Params:         3       0       0       0       0       0       0       0       0
 20045 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20046 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20047 ;;      Totals:         5       0       0       0       0       0       0       0       0
 20048 ;;Total ram usage:        5 bytes
 20049 ;; Hardware stack levels used:    1
 20050 ;; Hardware stack levels required when called:    2
 20051 ;; This function calls:
 20052 ;;		Nothing
 20053 ;; This function is called by:
 20054 ;;		_sync
 20055 ;; This function uses a non-reentrant model
 20056 ;;
 20057                           
 20058                           	psect	text115
 20059  005B04                     __ptext115:
 20060                           	callstack 0
 20061  005B04                     _disk_ioctl:
 20062                           	callstack 21
 20063                           
 20064                           ;incstack = 0
 20065                           ;disk_ioctl@pdrv stored from wreg
 20066  005B04  6E0D               	movwf	disk_ioctl@pdrv^0,c
 20067                           
 20068                           ;diskio.c: 204: DRESULT res;;diskio.c: 205: int result;;diskio.c: 207: switch (pdrv) {
 20069  005B06  D002               	goto	l11137
 20070  005B08                     l68:
 20071                           
 20072                           ;diskio.c: 212: return res;
 20073  005B08  500E               	movf	disk_ioctl@res^0,w,c
 20074  005B0A  0012               	return	
 20075  005B0C                     l11137:
 20076  005B0C  500D               	movf	disk_ioctl@pdrv^0,w,c
 20077                           
 20078                           ; Switch size 1, requested type "simple"
 20079                           ; Number of cases is 3, Range of values is 0 to 2
 20080                           ; switch strategies available:
 20081                           ; Name         Instructions Cycles
 20082                           ; simple_byte           10     6 (average)
 20083                           ;	Chosen strategy is simple_byte
 20084  005B0E  0A00               	xorlw	0	; case 0
 20085  005B10  B4D8               	btfsc	status,2,c
 20086  005B12  D7FA               	goto	l68
 20087  005B14  0A01               	xorlw	1	; case 1
 20088  005B16  B4D8               	btfsc	status,2,c
 20089  005B18  D7F7               	goto	l68
 20090  005B1A  0A03               	xorlw	3	; case 2
 20091  005B1C  B4D8               	btfsc	status,2,c
 20092  005B1E  D7F4               	goto	l68
 20093                           
 20094                           ;diskio.c: 227: return RES_PARERR;
 20095  005B20  0E04               	movlw	4
 20096  005B22  0012               	return		;funcret
 20097  005B24                     __end_of_disk_ioctl:
 20098                           	callstack 0
 20099                           
 20100 ;; *************** function _get_fattime *****************
 20101 ;; Defined at:
 20102 ;;		line 810 in file "bibliotecas/tff.c"
 20103 ;; Parameters:    Size  Location     Type
 20104 ;;		None
 20105 ;; Auto vars:     Size  Location     Type
 20106 ;;  f_time         10   55[COMRAM] struct .
 20107 ;; Return value:  Size  Location     Type
 20108 ;;                  4   13[COMRAM] unsigned long 
 20109 ;; Registers used:
 20110 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 20111 ;; Tracked objects:
 20112 ;;		On entry : 3F/0
 20113 ;;		On exit  : 3F/1
 20114 ;;		Unchanged: 0/0
 20115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20116 ;;      Params:         4       0       0       0       0       0       0       0       0
 20117 ;;      Locals:        10       0       0       0       0       0       0       0       0
 20118 ;;      Temps:         38       0       0       0       0       0       0       0       0
 20119 ;;      Totals:        52       0       0       0       0       0       0       0       0
 20120 ;;Total ram usage:       52 bytes
 20121 ;; Hardware stack levels used:    1
 20122 ;; Hardware stack levels required when called:    3
 20123 ;; This function calls:
 20124 ;;		_gps_ano
 20125 ;;		_gps_dia
 20126 ;;		_gps_hora
 20127 ;;		_gps_mes
 20128 ;;		_gps_minutos
 20129 ;;		_gps_segundos
 20130 ;; This function is called by:
 20131 ;;		_f_open
 20132 ;;		_f_sync
 20133 ;; This function uses a non-reentrant model
 20134 ;;
 20135                           
 20136                           	psect	text116
 20137  00350E                     __ptext116:
 20138                           	callstack 0
 20139  00350E                     _get_fattime:
 20140                           	callstack 22
 20141                           
 20142                           ; BSR set to: 0
 20143                           ;tff.c: 812: fat_time f_time;;tff.c: 814: f_time.hora = gps_hora() - 3;
 20144                           
 20145                           ;incstack = 0
 20146  00350E  ECD9  F02C         	call	_gps_hora	;wreg free
 20147  003512  0EFD               	movlw	253
 20148  003514  240A               	addwf	?_gps_hora^0,w,c
 20149  003516  6E38               	movwf	get_fattime@f_time^0,c
 20150  003518  0EFF               	movlw	255
 20151  00351A  200B               	addwfc	(?_gps_hora+1)^0,w,c
 20152  00351C  6E39               	movwf	(get_fattime@f_time+1)^0,c
 20153                           
 20154                           ;tff.c: 815: f_time.min = gps_minutos();
 20155  00351E  EC1E  F02D         	call	_gps_minutos	;wreg free
 20156  003522  C00A  F03A         	movff	?_gps_minutos,get_fattime@f_time+2
 20157  003526  C00B  F03B         	movff	?_gps_minutos+1,get_fattime@f_time+3
 20158                           
 20159                           ;tff.c: 816: f_time.seg = gps_segundos();
 20160  00352A  EC0D  F02D         	call	_gps_segundos	;wreg free
 20161  00352E  C00A  F03C         	movff	?_gps_segundos,get_fattime@f_time+4
 20162  003532  C00B  F03D         	movff	?_gps_segundos+1,get_fattime@f_time+5
 20163                           
 20164                           ;tff.c: 817: f_time.ano = gps_ano() + 2000;
 20165  003536  EC51  F02D         	call	_gps_ano	;wreg free
 20166  00353A  0ED0               	movlw	208
 20167  00353C  240A               	addwf	?_gps_ano^0,w,c
 20168  00353E  6E40               	movwf	(get_fattime@f_time+8)^0,c
 20169  003540  0E07               	movlw	7
 20170  003542  200B               	addwfc	(?_gps_ano+1)^0,w,c
 20171  003544  6E41               	movwf	(get_fattime@f_time+9)^0,c
 20172                           
 20173                           ;tff.c: 818: f_time.mes = gps_mes();
 20174  003546  EC2F  F02D         	call	_gps_mes	;wreg free
 20175  00354A  500A               	movf	?_gps_mes^0,w,c
 20176  00354C  6E3F               	movwf	(get_fattime@f_time+7)^0,c
 20177                           
 20178                           ;tff.c: 819: f_time.dia = gps_dia();
 20179  00354E  EC40  F02D         	call	_gps_dia	;wreg free
 20180  003552  500A               	movf	?_gps_dia^0,w,c
 20181  003554  6E3E               	movwf	(get_fattime@f_time+6)^0,c
 20182                           
 20183                           ; BSR set to: 1
 20184                           ;tff.c: 821: return (DWORD)(f_time.ano - 60) << 25 |;tff.c: 822: (DWORD)(f_time.mes) << 
      +                          21 |;tff.c: 823: (DWORD)(f_time.dia) << 16 |;tff.c: 824: (DWORD)(f_time.hora) << 11 |;tf
      +                          f.c: 825: (DWORD)(f_time.min) << 5 |;tff.c: 826: (DWORD)(f_time.seg) >> 1;
 20185  003556  90D8               	bcf	status,0,c
 20186  003558  303D               	rrcf	(get_fattime@f_time+5)^0,w,c
 20187  00355A  6E13               	movwf	(??_get_fattime+1)^0,c
 20188  00355C  303C               	rrcf	(get_fattime@f_time+4)^0,w,c
 20189  00355E  6E12               	movwf	??_get_fattime^0,c
 20190  003560  503A               	movf	(get_fattime@f_time+2)^0,w,c
 20191  003562  6E14               	movwf	(??_get_fattime+2)^0,c
 20192  003564  503B               	movf	(get_fattime@f_time+3)^0,w,c
 20193  003566  6E15               	movwf	(??_get_fattime+3)^0,c
 20194  003568  6A16               	clrf	(??_get_fattime+4)^0,c
 20195  00356A  6A17               	clrf	(??_get_fattime+5)^0,c
 20196  00356C  0E05               	movlw	5
 20197  00356E                     u13335:
 20198  00356E  90D8               	bcf	status,0,c
 20199  003570  3614               	rlcf	(??_get_fattime+2)^0,f,c
 20200  003572  3615               	rlcf	(??_get_fattime+3)^0,f,c
 20201  003574  3616               	rlcf	(??_get_fattime+4)^0,f,c
 20202  003576  3617               	rlcf	(??_get_fattime+5)^0,f,c
 20203  003578  2EE8               	decfsz	wreg,f,c
 20204  00357A  D7F9               	goto	u13335
 20205  00357C  5038               	movf	get_fattime@f_time^0,w,c
 20206  00357E  6E18               	movwf	(??_get_fattime+6)^0,c
 20207  003580  5039               	movf	(get_fattime@f_time+1)^0,w,c
 20208  003582  6E19               	movwf	(??_get_fattime+7)^0,c
 20209  003584  6A1A               	clrf	(??_get_fattime+8)^0,c
 20210  003586  6A1B               	clrf	(??_get_fattime+9)^0,c
 20211  003588  0E0B               	movlw	11
 20212  00358A                     u13345:
 20213  00358A  90D8               	bcf	status,0,c
 20214  00358C  3618               	rlcf	(??_get_fattime+6)^0,f,c
 20215  00358E  3619               	rlcf	(??_get_fattime+7)^0,f,c
 20216  003590  361A               	rlcf	(??_get_fattime+8)^0,f,c
 20217  003592  361B               	rlcf	(??_get_fattime+9)^0,f,c
 20218  003594  2EE8               	decfsz	wreg,f,c
 20219  003596  D7F9               	goto	u13345
 20220  003598  C03E  F01C         	movff	get_fattime@f_time+6,??_get_fattime+10
 20221  00359C  6A1D               	clrf	(??_get_fattime+11)^0,c
 20222  00359E  6A1E               	clrf	(??_get_fattime+12)^0,c
 20223  0035A0  6A1F               	clrf	(??_get_fattime+13)^0,c
 20224  0035A2  C01D  F01F         	movff	??_get_fattime+11,??_get_fattime+13
 20225  0035A6  C01C  F01E         	movff	??_get_fattime+10,??_get_fattime+12
 20226  0035AA  6A1D               	clrf	(??_get_fattime+11)^0,c
 20227  0035AC  6A1C               	clrf	(??_get_fattime+10)^0,c
 20228  0035AE  C03F  F020         	movff	get_fattime@f_time+7,??_get_fattime+14
 20229  0035B2  6A21               	clrf	(??_get_fattime+15)^0,c
 20230  0035B4  6A22               	clrf	(??_get_fattime+16)^0,c
 20231  0035B6  6A23               	clrf	(??_get_fattime+17)^0,c
 20232  0035B8  0E15               	movlw	21
 20233  0035BA                     u13355:
 20234  0035BA  90D8               	bcf	status,0,c
 20235  0035BC  3620               	rlcf	(??_get_fattime+14)^0,f,c
 20236  0035BE  3621               	rlcf	(??_get_fattime+15)^0,f,c
 20237  0035C0  3622               	rlcf	(??_get_fattime+16)^0,f,c
 20238  0035C2  3623               	rlcf	(??_get_fattime+17)^0,f,c
 20239  0035C4  2EE8               	decfsz	wreg,f,c
 20240  0035C6  D7F9               	goto	u13355
 20241  0035C8  0EC4               	movlw	196
 20242  0035CA  2440               	addwf	(get_fattime@f_time+8)^0,w,c
 20243  0035CC  6E24               	movwf	(??_get_fattime+18)^0,c
 20244  0035CE  0EFF               	movlw	255
 20245  0035D0  2041               	addwfc	(get_fattime@f_time+9)^0,w,c
 20246  0035D2  6E25               	movwf	(??_get_fattime+19)^0,c
 20247  0035D4  6A26               	clrf	(??_get_fattime+20)^0,c
 20248  0035D6  6A27               	clrf	(??_get_fattime+21)^0,c
 20249  0035D8  0E19               	movlw	25
 20250  0035DA                     u13365:
 20251  0035DA  90D8               	bcf	status,0,c
 20252  0035DC  3624               	rlcf	(??_get_fattime+18)^0,f,c
 20253  0035DE  3625               	rlcf	(??_get_fattime+19)^0,f,c
 20254  0035E0  3626               	rlcf	(??_get_fattime+20)^0,f,c
 20255  0035E2  3627               	rlcf	(??_get_fattime+21)^0,f,c
 20256  0035E4  2EE8               	decfsz	wreg,f,c
 20257  0035E6  D7F9               	goto	u13365
 20258  0035E8  5020               	movf	(??_get_fattime+14)^0,w,c
 20259  0035EA  1024               	iorwf	(??_get_fattime+18)^0,w,c
 20260  0035EC  6E28               	movwf	(??_get_fattime+22)^0,c
 20261  0035EE  5021               	movf	(??_get_fattime+15)^0,w,c
 20262  0035F0  1025               	iorwf	(??_get_fattime+19)^0,w,c
 20263  0035F2  6E29               	movwf	(??_get_fattime+23)^0,c
 20264  0035F4  5022               	movf	(??_get_fattime+16)^0,w,c
 20265  0035F6  1026               	iorwf	(??_get_fattime+20)^0,w,c
 20266  0035F8  6E2A               	movwf	(??_get_fattime+24)^0,c
 20267  0035FA  5023               	movf	(??_get_fattime+17)^0,w,c
 20268  0035FC  1027               	iorwf	(??_get_fattime+21)^0,w,c
 20269  0035FE  6E2B               	movwf	(??_get_fattime+25)^0,c
 20270  003600  501C               	movf	(??_get_fattime+10)^0,w,c
 20271  003602  1028               	iorwf	(??_get_fattime+22)^0,w,c
 20272  003604  6E2C               	movwf	(??_get_fattime+26)^0,c
 20273  003606  501D               	movf	(??_get_fattime+11)^0,w,c
 20274  003608  1029               	iorwf	(??_get_fattime+23)^0,w,c
 20275  00360A  6E2D               	movwf	(??_get_fattime+27)^0,c
 20276  00360C  501E               	movf	(??_get_fattime+12)^0,w,c
 20277  00360E  102A               	iorwf	(??_get_fattime+24)^0,w,c
 20278  003610  6E2E               	movwf	(??_get_fattime+28)^0,c
 20279  003612  501F               	movf	(??_get_fattime+13)^0,w,c
 20280  003614  102B               	iorwf	(??_get_fattime+25)^0,w,c
 20281  003616  6E2F               	movwf	(??_get_fattime+29)^0,c
 20282  003618  5018               	movf	(??_get_fattime+6)^0,w,c
 20283  00361A  102C               	iorwf	(??_get_fattime+26)^0,w,c
 20284  00361C  6E30               	movwf	(??_get_fattime+30)^0,c
 20285  00361E  5019               	movf	(??_get_fattime+7)^0,w,c
 20286  003620  102D               	iorwf	(??_get_fattime+27)^0,w,c
 20287  003622  6E31               	movwf	(??_get_fattime+31)^0,c
 20288  003624  501A               	movf	(??_get_fattime+8)^0,w,c
 20289  003626  102E               	iorwf	(??_get_fattime+28)^0,w,c
 20290  003628  6E32               	movwf	(??_get_fattime+32)^0,c
 20291  00362A  501B               	movf	(??_get_fattime+9)^0,w,c
 20292  00362C  102F               	iorwf	(??_get_fattime+29)^0,w,c
 20293  00362E  6E33               	movwf	(??_get_fattime+33)^0,c
 20294  003630  5014               	movf	(??_get_fattime+2)^0,w,c
 20295  003632  1030               	iorwf	(??_get_fattime+30)^0,w,c
 20296  003634  6E34               	movwf	(??_get_fattime+34)^0,c
 20297  003636  5015               	movf	(??_get_fattime+3)^0,w,c
 20298  003638  1031               	iorwf	(??_get_fattime+31)^0,w,c
 20299  00363A  6E35               	movwf	(??_get_fattime+35)^0,c
 20300  00363C  5016               	movf	(??_get_fattime+4)^0,w,c
 20301  00363E  1032               	iorwf	(??_get_fattime+32)^0,w,c
 20302  003640  6E36               	movwf	(??_get_fattime+36)^0,c
 20303  003642  5017               	movf	(??_get_fattime+5)^0,w,c
 20304  003644  1033               	iorwf	(??_get_fattime+33)^0,w,c
 20305  003646  6E37               	movwf	(??_get_fattime+37)^0,c
 20306  003648  5012               	movf	??_get_fattime^0,w,c
 20307  00364A  1034               	iorwf	(??_get_fattime+34)^0,w,c
 20308  00364C  6E0E               	movwf	?_get_fattime^0,c
 20309  00364E  5013               	movf	(??_get_fattime+1)^0,w,c
 20310  003650  1035               	iorwf	(??_get_fattime+35)^0,w,c
 20311  003652  6E0F               	movwf	(?_get_fattime+1)^0,c
 20312  003654  0E00               	movlw	0
 20313  003656  1036               	iorwf	(??_get_fattime+36)^0,w,c
 20314  003658  6E10               	movwf	(?_get_fattime+2)^0,c
 20315  00365A  0E00               	movlw	0
 20316  00365C  1037               	iorwf	(??_get_fattime+37)^0,w,c
 20317  00365E  6E11               	movwf	(?_get_fattime+3)^0,c
 20318                           
 20319                           ; BSR set to: 1
 20320  003660  0012               	return		;funcret
 20321  003662                     __end_of_get_fattime:
 20322                           	callstack 0
 20323                           
 20324 ;; *************** function _gps_segundos *****************
 20325 ;; Defined at:
 20326 ;;		line 530 in file "bibliotecas/GPS.c"
 20327 ;; Parameters:    Size  Location     Type
 20328 ;;		None
 20329 ;; Auto vars:     Size  Location     Type
 20330 ;;		None
 20331 ;; Return value:  Size  Location     Type
 20332 ;;                  2    9[COMRAM] unsigned int 
 20333 ;; Registers used:
 20334 ;;		wreg, status,2, status,0, prodl, prodh
 20335 ;; Tracked objects:
 20336 ;;		On entry : 3F/1
 20337 ;;		On exit  : 3F/1
 20338 ;;		Unchanged: 0/0
 20339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20340 ;;      Params:         2       0       0       0       0       0       0       0       0
 20341 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20342 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20343 ;;      Totals:         4       0       0       0       0       0       0       0       0
 20344 ;;Total ram usage:        4 bytes
 20345 ;; Hardware stack levels used:    1
 20346 ;; Hardware stack levels required when called:    2
 20347 ;; This function calls:
 20348 ;;		Nothing
 20349 ;; This function is called by:
 20350 ;;		_get_fattime
 20351 ;; This function uses a non-reentrant model
 20352 ;;
 20353                           
 20354                           	psect	text117
 20355  005A1A                     __ptext117:
 20356                           	callstack 0
 20357  005A1A                     _gps_segundos:
 20358                           	callstack 22
 20359                           
 20360                           ; BSR set to: 1
 20361                           ;GPS.c: 532: return ((rawTime[4] - '0') * 10 + (rawTime[5] - '0'));
 20362                           
 20363                           ; BSR set to: 1
 20364                           ;incstack = 0
 20365  005A1A  51D3               	movf	(_rawTime+4)& (0+255),w,b
 20366  005A1C  0D0A               	mullw	10
 20367  005A1E  CFF3 F00C          	movff	prodl,??_gps_segundos
 20368  005A22  CFF4 F00D          	movff	prodh,??_gps_segundos+1
 20369  005A26  51D4               	movf	(_rawTime+5)& (0+255),w,b
 20370  005A28  260C               	addwf	??_gps_segundos^0,f,c
 20371  005A2A  0E00               	movlw	0
 20372  005A2C  220D               	addwfc	(??_gps_segundos+1)^0,f,c
 20373  005A2E  0EF0               	movlw	240
 20374  005A30  240C               	addwf	??_gps_segundos^0,w,c
 20375  005A32  6E0A               	movwf	?_gps_segundos^0,c
 20376  005A34  0EFD               	movlw	253
 20377  005A36  200D               	addwfc	(??_gps_segundos+1)^0,w,c
 20378  005A38  6E0B               	movwf	(?_gps_segundos+1)^0,c
 20379                           
 20380                           ; BSR set to: 1
 20381  005A3A  0012               	return		;funcret
 20382  005A3C                     __end_of_gps_segundos:
 20383                           	callstack 0
 20384                           
 20385 ;; *************** function _gps_minutos *****************
 20386 ;; Defined at:
 20387 ;;		line 541 in file "bibliotecas/GPS.c"
 20388 ;; Parameters:    Size  Location     Type
 20389 ;;		None
 20390 ;; Auto vars:     Size  Location     Type
 20391 ;;		None
 20392 ;; Return value:  Size  Location     Type
 20393 ;;                  2    9[COMRAM] unsigned int 
 20394 ;; Registers used:
 20395 ;;		wreg, status,2, status,0, prodl, prodh
 20396 ;; Tracked objects:
 20397 ;;		On entry : 3F/1
 20398 ;;		On exit  : 3F/1
 20399 ;;		Unchanged: 0/0
 20400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20401 ;;      Params:         2       0       0       0       0       0       0       0       0
 20402 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20403 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20404 ;;      Totals:         4       0       0       0       0       0       0       0       0
 20405 ;;Total ram usage:        4 bytes
 20406 ;; Hardware stack levels used:    1
 20407 ;; Hardware stack levels required when called:    2
 20408 ;; This function calls:
 20409 ;;		Nothing
 20410 ;; This function is called by:
 20411 ;;		_get_fattime
 20412 ;; This function uses a non-reentrant model
 20413 ;;
 20414                           
 20415                           	psect	text118
 20416  005A3C                     __ptext118:
 20417                           	callstack 0
 20418  005A3C                     _gps_minutos:
 20419                           	callstack 22
 20420                           
 20421                           ; BSR set to: 1
 20422                           ;GPS.c: 543: return ((rawTime[2] - '0') * 10 + (rawTime[3] - '0'));
 20423                           
 20424                           ; BSR set to: 1
 20425                           ;incstack = 0
 20426  005A3C  51D1               	movf	(_rawTime+2)& (0+255),w,b
 20427  005A3E  0D0A               	mullw	10
 20428  005A40  CFF3 F00C          	movff	prodl,??_gps_minutos
 20429  005A44  CFF4 F00D          	movff	prodh,??_gps_minutos+1
 20430  005A48  51D2               	movf	(_rawTime+3)& (0+255),w,b
 20431  005A4A  260C               	addwf	??_gps_minutos^0,f,c
 20432  005A4C  0E00               	movlw	0
 20433  005A4E  220D               	addwfc	(??_gps_minutos+1)^0,f,c
 20434  005A50  0EF0               	movlw	240
 20435  005A52  240C               	addwf	??_gps_minutos^0,w,c
 20436  005A54  6E0A               	movwf	?_gps_minutos^0,c
 20437  005A56  0EFD               	movlw	253
 20438  005A58  200D               	addwfc	(??_gps_minutos+1)^0,w,c
 20439  005A5A  6E0B               	movwf	(?_gps_minutos+1)^0,c
 20440                           
 20441                           ; BSR set to: 1
 20442  005A5C  0012               	return		;funcret
 20443  005A5E                     __end_of_gps_minutos:
 20444                           	callstack 0
 20445                           
 20446 ;; *************** function _gps_mes *****************
 20447 ;; Defined at:
 20448 ;;		line 578 in file "bibliotecas/GPS.c"
 20449 ;; Parameters:    Size  Location     Type
 20450 ;;		None
 20451 ;; Auto vars:     Size  Location     Type
 20452 ;;		None
 20453 ;; Return value:  Size  Location     Type
 20454 ;;                  2    9[COMRAM] unsigned int 
 20455 ;; Registers used:
 20456 ;;		wreg, status,2, status,0, prodl, prodh
 20457 ;; Tracked objects:
 20458 ;;		On entry : 3F/1
 20459 ;;		On exit  : 3F/1
 20460 ;;		Unchanged: 0/0
 20461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20462 ;;      Params:         2       0       0       0       0       0       0       0       0
 20463 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20464 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20465 ;;      Totals:         4       0       0       0       0       0       0       0       0
 20466 ;;Total ram usage:        4 bytes
 20467 ;; Hardware stack levels used:    1
 20468 ;; Hardware stack levels required when called:    2
 20469 ;; This function calls:
 20470 ;;		Nothing
 20471 ;; This function is called by:
 20472 ;;		_get_fattime
 20473 ;; This function uses a non-reentrant model
 20474 ;;
 20475                           
 20476                           	psect	text119
 20477  005A5E                     __ptext119:
 20478                           	callstack 0
 20479  005A5E                     _gps_mes:
 20480                           	callstack 22
 20481                           
 20482                           ; BSR set to: 1
 20483                           ;GPS.c: 580: return ((rawDate[2] - '0') * 10 + (rawDate[3] - '0'));
 20484                           
 20485                           ; BSR set to: 1
 20486                           ;incstack = 0
 20487  005A5E  51EA               	movf	(_rawDate+2)& (0+255),w,b
 20488  005A60  0D0A               	mullw	10
 20489  005A62  CFF3 F00C          	movff	prodl,??_gps_mes
 20490  005A66  CFF4 F00D          	movff	prodh,??_gps_mes+1
 20491  005A6A  51EB               	movf	(_rawDate+3)& (0+255),w,b
 20492  005A6C  260C               	addwf	??_gps_mes^0,f,c
 20493  005A6E  0E00               	movlw	0
 20494  005A70  220D               	addwfc	(??_gps_mes+1)^0,f,c
 20495  005A72  0EF0               	movlw	240
 20496  005A74  240C               	addwf	??_gps_mes^0,w,c
 20497  005A76  6E0A               	movwf	?_gps_mes^0,c
 20498  005A78  0EFD               	movlw	253
 20499  005A7A  200D               	addwfc	(??_gps_mes+1)^0,w,c
 20500  005A7C  6E0B               	movwf	(?_gps_mes+1)^0,c
 20501                           
 20502                           ; BSR set to: 1
 20503  005A7E  0012               	return		;funcret
 20504  005A80                     __end_of_gps_mes:
 20505                           	callstack 0
 20506                           
 20507 ;; *************** function _gps_hora *****************
 20508 ;; Defined at:
 20509 ;;		line 553 in file "bibliotecas/GPS.c"
 20510 ;; Parameters:    Size  Location     Type
 20511 ;;		None
 20512 ;; Auto vars:     Size  Location     Type
 20513 ;;		None
 20514 ;; Return value:  Size  Location     Type
 20515 ;;                  2    9[COMRAM] unsigned int 
 20516 ;; Registers used:
 20517 ;;		wreg, status,2, status,0, prodl, prodh
 20518 ;; Tracked objects:
 20519 ;;		On entry : 3F/0
 20520 ;;		On exit  : 3F/1
 20521 ;;		Unchanged: 0/0
 20522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20523 ;;      Params:         2       0       0       0       0       0       0       0       0
 20524 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20525 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20526 ;;      Totals:         4       0       0       0       0       0       0       0       0
 20527 ;;Total ram usage:        4 bytes
 20528 ;; Hardware stack levels used:    1
 20529 ;; Hardware stack levels required when called:    2
 20530 ;; This function calls:
 20531 ;;		Nothing
 20532 ;; This function is called by:
 20533 ;;		_get_fattime
 20534 ;; This function uses a non-reentrant model
 20535 ;;
 20536                           
 20537                           	psect	text120
 20538  0059B2                     __ptext120:
 20539                           	callstack 0
 20540  0059B2                     _gps_hora:
 20541                           	callstack 22
 20542                           
 20543                           ; BSR set to: 0
 20544                           ;GPS.c: 555: return (((rawTime[0] - '0') * 10 + (rawTime[1] - '0')));
 20545                           
 20546                           ; BSR set to: 1
 20547                           ;incstack = 0
 20548  0059B2  0101               	movlb	1	; () banked
 20549  0059B4  51CF               	movf	_rawTime& (0+255),w,b
 20550  0059B6  0D0A               	mullw	10
 20551  0059B8  CFF3 F00C          	movff	prodl,??_gps_hora
 20552  0059BC  CFF4 F00D          	movff	prodh,??_gps_hora+1
 20553  0059C0  51D0               	movf	(_rawTime+1)& (0+255),w,b
 20554  0059C2  260C               	addwf	??_gps_hora^0,f,c
 20555  0059C4  0E00               	movlw	0
 20556  0059C6  220D               	addwfc	(??_gps_hora+1)^0,f,c
 20557  0059C8  0EF0               	movlw	240
 20558  0059CA  240C               	addwf	??_gps_hora^0,w,c
 20559  0059CC  6E0A               	movwf	?_gps_hora^0,c
 20560  0059CE  0EFD               	movlw	253
 20561  0059D0  200D               	addwfc	(??_gps_hora+1)^0,w,c
 20562  0059D2  6E0B               	movwf	(?_gps_hora+1)^0,c
 20563                           
 20564                           ; BSR set to: 1
 20565  0059D4  0012               	return		;funcret
 20566  0059D6                     __end_of_gps_hora:
 20567                           	callstack 0
 20568                           
 20569 ;; *************** function _gps_dia *****************
 20570 ;; Defined at:
 20571 ;;		line 565 in file "bibliotecas/GPS.c"
 20572 ;; Parameters:    Size  Location     Type
 20573 ;;		None
 20574 ;; Auto vars:     Size  Location     Type
 20575 ;;		None
 20576 ;; Return value:  Size  Location     Type
 20577 ;;                  2    9[COMRAM] unsigned int 
 20578 ;; Registers used:
 20579 ;;		wreg, status,2, status,0, prodl, prodh
 20580 ;; Tracked objects:
 20581 ;;		On entry : 3F/1
 20582 ;;		On exit  : 3F/1
 20583 ;;		Unchanged: 0/0
 20584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20585 ;;      Params:         2       0       0       0       0       0       0       0       0
 20586 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20587 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20588 ;;      Totals:         4       0       0       0       0       0       0       0       0
 20589 ;;Total ram usage:        4 bytes
 20590 ;; Hardware stack levels used:    1
 20591 ;; Hardware stack levels required when called:    2
 20592 ;; This function calls:
 20593 ;;		Nothing
 20594 ;; This function is called by:
 20595 ;;		_get_fattime
 20596 ;; This function uses a non-reentrant model
 20597 ;;
 20598                           
 20599                           	psect	text121
 20600  005A80                     __ptext121:
 20601                           	callstack 0
 20602  005A80                     _gps_dia:
 20603                           	callstack 22
 20604                           
 20605                           ; BSR set to: 1
 20606                           ;GPS.c: 567: return ((rawDate[0] - '0') * 10 + (rawDate[1] - '0'));
 20607                           
 20608                           ; BSR set to: 1
 20609                           ;incstack = 0
 20610  005A80  51E8               	movf	_rawDate& (0+255),w,b
 20611  005A82  0D0A               	mullw	10
 20612  005A84  CFF3 F00C          	movff	prodl,??_gps_dia
 20613  005A88  CFF4 F00D          	movff	prodh,??_gps_dia+1
 20614  005A8C  51E9               	movf	(_rawDate+1)& (0+255),w,b
 20615  005A8E  260C               	addwf	??_gps_dia^0,f,c
 20616  005A90  0E00               	movlw	0
 20617  005A92  220D               	addwfc	(??_gps_dia+1)^0,f,c
 20618  005A94  0EF0               	movlw	240
 20619  005A96  240C               	addwf	??_gps_dia^0,w,c
 20620  005A98  6E0A               	movwf	?_gps_dia^0,c
 20621  005A9A  0EFD               	movlw	253
 20622  005A9C  200D               	addwfc	(??_gps_dia+1)^0,w,c
 20623  005A9E  6E0B               	movwf	(?_gps_dia+1)^0,c
 20624                           
 20625                           ; BSR set to: 1
 20626  005AA0  0012               	return		;funcret
 20627  005AA2                     __end_of_gps_dia:
 20628                           	callstack 0
 20629                           
 20630 ;; *************** function _gps_ano *****************
 20631 ;; Defined at:
 20632 ;;		line 590 in file "bibliotecas/GPS.c"
 20633 ;; Parameters:    Size  Location     Type
 20634 ;;		None
 20635 ;; Auto vars:     Size  Location     Type
 20636 ;;		None
 20637 ;; Return value:  Size  Location     Type
 20638 ;;                  2    9[COMRAM] unsigned int 
 20639 ;; Registers used:
 20640 ;;		wreg, status,2, status,0, prodl, prodh
 20641 ;; Tracked objects:
 20642 ;;		On entry : 3F/1
 20643 ;;		On exit  : 3F/1
 20644 ;;		Unchanged: 0/0
 20645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20646 ;;      Params:         2       0       0       0       0       0       0       0       0
 20647 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20648 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20649 ;;      Totals:         4       0       0       0       0       0       0       0       0
 20650 ;;Total ram usage:        4 bytes
 20651 ;; Hardware stack levels used:    1
 20652 ;; Hardware stack levels required when called:    2
 20653 ;; This function calls:
 20654 ;;		Nothing
 20655 ;; This function is called by:
 20656 ;;		_get_fattime
 20657 ;; This function uses a non-reentrant model
 20658 ;;
 20659                           
 20660                           	psect	text122
 20661  005AA2                     __ptext122:
 20662                           	callstack 0
 20663  005AA2                     _gps_ano:
 20664                           	callstack 22
 20665                           
 20666                           ; BSR set to: 1
 20667                           ;GPS.c: 592: return ((rawDate[4] - '0') * 10 + (rawDate[5] - '0'));
 20668                           
 20669                           ; BSR set to: 1
 20670                           ;incstack = 0
 20671  005AA2  51EC               	movf	(_rawDate+4)& (0+255),w,b
 20672  005AA4  0D0A               	mullw	10
 20673  005AA6  CFF3 F00C          	movff	prodl,??_gps_ano
 20674  005AAA  CFF4 F00D          	movff	prodh,??_gps_ano+1
 20675  005AAE  51ED               	movf	(_rawDate+5)& (0+255),w,b
 20676  005AB0  260C               	addwf	??_gps_ano^0,f,c
 20677  005AB2  0E00               	movlw	0
 20678  005AB4  220D               	addwfc	(??_gps_ano+1)^0,f,c
 20679  005AB6  0EF0               	movlw	240
 20680  005AB8  240C               	addwf	??_gps_ano^0,w,c
 20681  005ABA  6E0A               	movwf	?_gps_ano^0,c
 20682  005ABC  0EFD               	movlw	253
 20683  005ABE  200D               	addwfc	(??_gps_ano+1)^0,w,c
 20684  005AC0  6E0B               	movwf	(?_gps_ano+1)^0,c
 20685                           
 20686                           ; BSR set to: 1
 20687  005AC2  0012               	return		;funcret
 20688  005AC4                     __end_of_gps_ano:
 20689                           	callstack 0
 20690                           
 20691 ;; *************** function _data_nome *****************
 20692 ;; Defined at:
 20693 ;;		line 404 in file "bibliotecas/SDCard.c"
 20694 ;; Parameters:    Size  Location     Type
 20695 ;;  p_buff          2    9[COMRAM] PTR unsigned char 
 20696 ;;		 -> data(6), 
 20697 ;; Auto vars:     Size  Location     Type
 20698 ;;  i               1   11[COMRAM] unsigned char 
 20699 ;; Return value:  Size  Location     Type
 20700 ;;                  1    wreg      void 
 20701 ;; Registers used:
 20702 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 20703 ;; Tracked objects:
 20704 ;;		On entry : 3F/1
 20705 ;;		On exit  : 3F/1
 20706 ;;		Unchanged: 3F/0
 20707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20708 ;;      Params:         2       0       0       0       0       0       0       0       0
 20709 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20710 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20711 ;;      Totals:         3       0       0       0       0       0       0       0       0
 20712 ;;Total ram usage:        3 bytes
 20713 ;; Hardware stack levels used:    1
 20714 ;; Hardware stack levels required when called:    2
 20715 ;; This function calls:
 20716 ;;		Nothing
 20717 ;; This function is called by:
 20718 ;;		_escrita_sdcard
 20719 ;; This function uses a non-reentrant model
 20720 ;;
 20721                           
 20722                           	psect	text123
 20723  005914                     __ptext123:
 20724                           	callstack 0
 20725  005914                     _data_nome:
 20726                           	callstack 24
 20727                           
 20728                           ; BSR set to: 1
 20729                           ;SDCard.c: 406: unsigned char i;;SDCard.c: 407: for(i=0; i<4;i++)
 20730                           
 20731                           ; BSR set to: 1
 20732                           ;incstack = 0
 20733  005914  0E00               	movlw	0
 20734  005916  6E0C               	movwf	data_nome@i^0,c
 20735  005918                     l12405:
 20736                           
 20737                           ; BSR set to: 1
 20738                           ;SDCard.c: 408: {;SDCard.c: 409: filename[i] = *p_buff;
 20739  005918  C00A  FFD9         	movff	data_nome@p_buff,fsr2l
 20740  00591C  C00B  FFDA         	movff	data_nome@p_buff+1,fsr2h
 20741  005920  0E56               	movlw	low _filename
 20742  005922  240C               	addwf	data_nome@i^0,w,c
 20743  005924  6EE1               	movwf	fsr1l,c
 20744  005926  6AE2               	clrf	fsr1h,c
 20745  005928  0E02               	movlw	high _filename
 20746  00592A  22E2               	addwfc	fsr1h,f,c
 20747  00592C  CFDF FFE7          	movff	indf2,indf1
 20748                           
 20749                           ; BSR set to: 1
 20750                           ;SDCard.c: 410: p_buff++;
 20751  005930  4A0A               	infsnz	data_nome@p_buff^0,f,c
 20752  005932  2A0B               	incf	(data_nome@p_buff+1)^0,f,c
 20753                           
 20754                           ; BSR set to: 1
 20755  005934  2A0C               	incf	data_nome@i^0,f,c
 20756                           
 20757                           ; BSR set to: 1
 20758  005936  0E03               	movlw	3
 20759  005938  640C               	cpfsgt	data_nome@i^0,c
 20760  00593A  D7EE               	goto	l12405
 20761  00593C  0012               	return	
 20762  00593E                     __end_of_data_nome:
 20763                           	callstack 0
 20764                           
 20765 ;; *************** function _desliga_uart *****************
 20766 ;; Defined at:
 20767 ;;		line 223 in file "bibliotecas/uart.c"
 20768 ;; Parameters:    Size  Location     Type
 20769 ;;		None
 20770 ;; Auto vars:     Size  Location     Type
 20771 ;;		None
 20772 ;; Return value:  Size  Location     Type
 20773 ;;                  1    wreg      void 
 20774 ;; Registers used:
 20775 ;;		wreg, status,2
 20776 ;; Tracked objects:
 20777 ;;		On entry : 0/1
 20778 ;;		On exit  : 0/0
 20779 ;;		Unchanged: 0/0
 20780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20781 ;;      Params:         0       0       0       0       0       0       0       0       0
 20782 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20783 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20784 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20785 ;;Total ram usage:        0 bytes
 20786 ;; Hardware stack levels used:    1
 20787 ;; Hardware stack levels required when called:    2
 20788 ;; This function calls:
 20789 ;;		Nothing
 20790 ;; This function is called by:
 20791 ;;		_grava_sd
 20792 ;; This function uses a non-reentrant model
 20793 ;;
 20794                           
 20795                           	psect	text124
 20796  005BD8                     __ptext124:
 20797                           	callstack 0
 20798  005BD8                     _desliga_uart:
 20799                           	callstack 25
 20800                           
 20801                           ;uart.c: 226: TRISCbits.RC6 = 1;
 20802                           
 20803                           ; BSR set to: 1
 20804                           ;incstack = 0
 20805  005BD8  8C94               	bsf	148,6,c	;volatile
 20806                           
 20807                           ;uart.c: 227: TRISCbits.RC7 = 1;
 20808  005BDA  8E94               	bsf	148,7,c	;volatile
 20809                           
 20810                           ;uart.c: 230: TXSTA = 0x00;
 20811  005BDC  0E00               	movlw	0
 20812  005BDE  6EAC               	movwf	172,c	;volatile
 20813                           
 20814                           ;uart.c: 232: RCSTA = 0x00;
 20815  005BE0  0E00               	movlw	0
 20816  005BE2  6EAB               	movwf	171,c	;volatile
 20817                           
 20818                           ;uart.c: 233: RCREG = 0x00;
 20819  005BE4  0E00               	movlw	0
 20820  005BE6  6EAE               	movwf	174,c	;volatile
 20821  005BE8  0012               	return		;funcret
 20822  005BEA                     __end_of_desliga_uart:
 20823                           	callstack 0
 20824                           
 20825 ;; *************** function _desliga_SPI *****************
 20826 ;; Defined at:
 20827 ;;		line 75 in file "bibliotecas/SPI.c"
 20828 ;; Parameters:    Size  Location     Type
 20829 ;;		None
 20830 ;; Auto vars:     Size  Location     Type
 20831 ;;		None
 20832 ;; Return value:  Size  Location     Type
 20833 ;;                  1    wreg      void 
 20834 ;; Registers used:
 20835 ;;		wreg, status,2
 20836 ;; Tracked objects:
 20837 ;;		On entry : 0/1
 20838 ;;		On exit  : 0/0
 20839 ;;		Unchanged: 0/0
 20840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20841 ;;      Params:         0       0       0       0       0       0       0       0       0
 20842 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20843 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20844 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20845 ;;Total ram usage:        0 bytes
 20846 ;; Hardware stack levels used:    1
 20847 ;; Hardware stack levels required when called:    2
 20848 ;; This function calls:
 20849 ;;		Nothing
 20850 ;; This function is called by:
 20851 ;;		_grava_sd
 20852 ;; This function uses a non-reentrant model
 20853 ;;
 20854                           
 20855                           	psect	text125
 20856  005C1C                     __ptext125:
 20857                           	callstack 0
 20858  005C1C                     _desliga_SPI:
 20859                           	callstack 25
 20860                           
 20861                           ;SPI.c: 77: SSPSTAT = 0x00;
 20862                           
 20863                           ;incstack = 0
 20864  005C1C  0E00               	movlw	0
 20865  005C1E  6EC7               	movwf	199,c	;volatile
 20866                           
 20867                           ;SPI.c: 78: SSPCON1 = 0x00;
 20868  005C20  0E00               	movlw	0
 20869  005C22  6EC6               	movwf	198,c	;volatile
 20870                           
 20871                           ;SPI.c: 79: SSPCON1bits.SSPEN = 0;
 20872  005C24  9AC6               	bcf	198,5,c	;volatile
 20873                           
 20874                           ;SPI.c: 80: SSPBUF = 0x00;
 20875  005C26  0E00               	movlw	0
 20876  005C28  6EC9               	movwf	201,c	;volatile
 20877  005C2A  0012               	return		;funcret
 20878  005C2C                     __end_of_desliga_SPI:
 20879                           	callstack 0
 20880                           
 20881 ;; *************** function _dados_gps_to_sd *****************
 20882 ;; Defined at:
 20883 ;;		line 702 in file "bibliotecas/GPS.c"
 20884 ;; Parameters:    Size  Location     Type
 20885 ;;		None
 20886 ;; Auto vars:     Size  Location     Type
 20887 ;;		None
 20888 ;; Return value:  Size  Location     Type
 20889 ;;                  1    wreg      void 
 20890 ;; Registers used:
 20891 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20892 ;; Tracked objects:
 20893 ;;		On entry : 0/1
 20894 ;;		On exit  : 0/0
 20895 ;;		Unchanged: 0/0
 20896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20897 ;;      Params:         0       0       0       0       0       0       0       0       0
 20898 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20899 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20900 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20901 ;;Total ram usage:        0 bytes
 20902 ;; Hardware stack levels used:    1
 20903 ;; Hardware stack levels required when called:    4
 20904 ;; This function calls:
 20905 ;;		_monta_sd
 20906 ;; This function is called by:
 20907 ;;		_disparo_gravacao
 20908 ;; This function uses a non-reentrant model
 20909 ;;
 20910                           
 20911                           	psect	text126
 20912  004E9C                     __ptext126:
 20913                           	callstack 0
 20914  004E9C                     _dados_gps_to_sd:
 20915                           	callstack 24
 20916                           
 20917                           ;GPS.c: 705: monta_sd(0, rawTime);
 20918                           
 20919                           ;incstack = 0
 20920  004E9C  0ECF               	movlw	low _rawTime
 20921  004E9E  6E10               	movwf	monta_sd@dado^0,c
 20922  004EA0  0E01               	movlw	high _rawTime
 20923  004EA2  6E11               	movwf	(monta_sd@dado+1)^0,c
 20924  004EA4  0E00               	movlw	0
 20925  004EA6  ECBF  F007         	call	_monta_sd
 20926                           
 20927                           ;GPS.c: 706: monta_sd(1, rawDate);
 20928  004EAA  0EE8               	movlw	low _rawDate
 20929  004EAC  6E10               	movwf	monta_sd@dado^0,c
 20930  004EAE  0E01               	movlw	high _rawDate
 20931  004EB0  6E11               	movwf	(monta_sd@dado+1)^0,c
 20932  004EB2  0E01               	movlw	1
 20933  004EB4  ECBF  F007         	call	_monta_sd
 20934                           
 20935                           ;GPS.c: 707: monta_sd(2, rawLatitude);
 20936  004EB8  0EBC               	movlw	low _rawLatitude
 20937  004EBA  6E10               	movwf	monta_sd@dado^0,c
 20938  004EBC  0E01               	movlw	high _rawLatitude
 20939  004EBE  6E11               	movwf	(monta_sd@dado+1)^0,c
 20940  004EC0  0E02               	movlw	2
 20941  004EC2  ECBF  F007         	call	_monta_sd
 20942                           
 20943                           ;GPS.c: 708: monta_sd(3, rawLongitude);
 20944  004EC6  0EA3               	movlw	low _rawLongitude
 20945  004EC8  6E10               	movwf	monta_sd@dado^0,c
 20946  004ECA  0E01               	movlw	high _rawLongitude
 20947  004ECC  6E11               	movwf	(monta_sd@dado+1)^0,c
 20948  004ECE  0E03               	movlw	3
 20949  004ED0  ECBF  F007         	call	_monta_sd
 20950                           
 20951                           ;GPS.c: 709: monta_sd(5, rawTime);
 20952  004ED4  0ECF               	movlw	low _rawTime
 20953  004ED6  6E10               	movwf	monta_sd@dado^0,c
 20954  004ED8  0E01               	movlw	high _rawTime
 20955  004EDA  6E11               	movwf	(monta_sd@dado+1)^0,c
 20956  004EDC  0E05               	movlw	5
 20957  004EDE  ECBF  F007         	call	_monta_sd
 20958                           
 20959                           ;GPS.c: 710: monta_sd(6, rawDate);
 20960  004EE2  0EE8               	movlw	low _rawDate
 20961  004EE4  6E10               	movwf	monta_sd@dado^0,c
 20962  004EE6  0E01               	movlw	high _rawDate
 20963  004EE8  6E11               	movwf	(monta_sd@dado+1)^0,c
 20964  004EEA  0E06               	movlw	6
 20965  004EEC  ECBF  F007         	call	_monta_sd
 20966                           
 20967                           ;GPS.c: 711: monta_sd(7, rawSpeed);
 20968  004EF0  0E6A               	movlw	low _rawSpeed
 20969  004EF2  6E10               	movwf	monta_sd@dado^0,c
 20970  004EF4  0E02               	movlw	high _rawSpeed
 20971  004EF6  6E11               	movwf	(monta_sd@dado+1)^0,c
 20972  004EF8  0E07               	movlw	7
 20973  004EFA  ECBF  F007         	call	_monta_sd
 20974  004EFE  0012               	return		;funcret
 20975  004F00                     __end_of_dados_gps_to_sd:
 20976                           	callstack 0
 20977                           
 20978 ;; *************** function _monta_sd *****************
 20979 ;; Defined at:
 20980 ;;		line 306 in file "bibliotecas/SDCard.c"
 20981 ;; Parameters:    Size  Location     Type
 20982 ;;  index           1    wreg     unsigned char 
 20983 ;;  dado            2   15[COMRAM] PTR unsigned char 
 20984 ;;		 -> disparo_gravacao@velocidade(12), dados_data(18), dados_hora(18), dados_long(36), 
 20985 ;;		 -> dados_lat(33), STR_21(7), STR_20(7), rawSpeed(20), 
 20986 ;;		 -> rawDate(6), rawLongitude(13), rawLatitude(12), rawTime(7), 
 20987 ;; Auto vars:     Size  Location     Type
 20988 ;;  index           1   18[COMRAM] unsigned char 
 20989 ;;  i               1   19[COMRAM] unsigned char 
 20990 ;;  size            1    0        unsigned char 
 20991 ;; Return value:  Size  Location     Type
 20992 ;;                  1    wreg      void 
 20993 ;; Registers used:
 20994 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20995 ;; Tracked objects:
 20996 ;;		On entry : 0/2
 20997 ;;		On exit  : 0/0
 20998 ;;		Unchanged: 0/0
 20999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21000 ;;      Params:         2       0       0       0       0       0       0       0       0
 21001 ;;      Locals:         3       0       0       0       0       0       0       0       0
 21002 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21003 ;;      Totals:         5       0       0       0       0       0       0       0       0
 21004 ;;Total ram usage:        5 bytes
 21005 ;; Hardware stack levels used:    1
 21006 ;; Hardware stack levels required when called:    3
 21007 ;; This function calls:
 21008 ;;		_strlen
 21009 ;; This function is called by:
 21010 ;;		_dados_gps_to_sd
 21011 ;;		_verifica_fence
 21012 ;;		_disparo_gravacao
 21013 ;; This function uses a non-reentrant model
 21014 ;;
 21015                           
 21016                           	psect	text127
 21017  000F7E                     __ptext127:
 21018                           	callstack 0
 21019  000F7E                     _monta_sd:
 21020                           	callstack 24
 21021                           
 21022                           ;incstack = 0
 21023                           ;monta_sd@index stored from wreg
 21024  000F7E  6E13               	movwf	monta_sd@index^0,c
 21025  000F80  C010  F00A         	movff	monta_sd@dado,strlen@s
 21026  000F84  C011  F00B         	movff	monta_sd@dado+1,strlen@s+1
 21027  000F88  ECBA  F02A         	call	_strlen	;wreg free
 21028                           
 21029                           ;SDCard.c: 310: switch(index)
 21030  000F8C  D198               	goto	l12951
 21031  000F8E                     l12821:
 21032                           
 21033                           ;SDCard.c: 313: for(i=0; i<7;i++)
 21034  000F8E  0E00               	movlw	0
 21035  000F90  6E14               	movwf	monta_sd@i^0,c
 21036  000F92                     l12827:
 21037                           
 21038                           ;SDCard.c: 314: {;SDCard.c: 315: if(*dado != '\0')
 21039  000F92  C010  FFF6         	movff	monta_sd@dado,tblptrl
 21040  000F96  C011  FFF7         	movff	monta_sd@dado+1,tblptrh
 21041  000F9A  6AF8               	clrf	tblptru,c
 21042  000F9C  0E07               	movlw	(high __ramtop+-1)
 21043  000F9E  64F7               	cpfsgt	tblptrh,c
 21044  000FA0  D003               	bra	u15317
 21045  000FA2  0008               	tblrd		*
 21046  000FA4  50F5               	movf	tablat,w,c
 21047  000FA6  D005               	bra	u15310
 21048  000FA8                     u15317:
 21049  000FA8  CFF6 FFE1          	movff	tblptrl,fsr1l
 21050  000FAC  CFF7 FFE2          	movff	tblptrh,fsr1h
 21051  000FB0  50E7               	movf	indf1,w,c
 21052  000FB2                     u15310:
 21053  000FB2  0900               	iorlw	0
 21054  000FB4  B4D8               	btfsc	status,2,c
 21055  000FB6  D017               	goto	l12831
 21056                           
 21057                           ;SDCard.c: 316: {;SDCard.c: 317: hora[i] = *dado;
 21058  000FB8  C010  FFF6         	movff	monta_sd@dado,tblptrl
 21059  000FBC  C011  FFF7         	movff	monta_sd@dado+1,tblptrh
 21060  000FC0  6AF8               	clrf	tblptru,c
 21061  000FC2  0EC8               	movlw	low _hora
 21062  000FC4  2414               	addwf	monta_sd@i^0,w,c
 21063  000FC6  6ED9               	movwf	fsr2l,c
 21064  000FC8  6ADA               	clrf	fsr2h,c
 21065  000FCA  0E01               	movlw	high _hora
 21066  000FCC  22DA               	addwfc	fsr2h,f,c
 21067  000FCE  0E07               	movlw	(high __ramtop+-1)
 21068  000FD0  64F7               	cpfsgt	tblptrh,c
 21069  000FD2  D003               	bra	u15337
 21070  000FD4  0008               	tblrd		*
 21071  000FD6  50F5               	movf	tablat,w,c
 21072  000FD8  D005               	bra	u15330
 21073  000FDA                     u15337:
 21074  000FDA  CFF6 FFE1          	movff	tblptrl,fsr1l
 21075  000FDE  CFF7 FFE2          	movff	tblptrh,fsr1h
 21076  000FE2  50E7               	movf	indf1,w,c
 21077  000FE4                     u15330:
 21078  000FE4  6EDF               	movwf	indf2,c
 21079  000FE6                     l12831:
 21080                           
 21081                           ;SDCard.c: 318: };SDCard.c: 319: dado++;
 21082  000FE6  4A10               	infsnz	monta_sd@dado^0,f,c
 21083  000FE8  2A11               	incf	(monta_sd@dado+1)^0,f,c
 21084  000FEA  2A14               	incf	monta_sd@i^0,f,c
 21085  000FEC  0E06               	movlw	6
 21086  000FEE  6414               	cpfsgt	monta_sd@i^0,c
 21087  000FF0  D7D0               	goto	l12827
 21088  000FF2  0012               	return	
 21089  000FF4                     l12837:
 21090                           
 21091                           ;SDCard.c: 324: for(i=0; i<6;i++)
 21092  000FF4  0E00               	movlw	0
 21093  000FF6  6E14               	movwf	monta_sd@i^0,c
 21094  000FF8                     l12843:
 21095                           
 21096                           ;SDCard.c: 325: {;SDCard.c: 326: if(*dado != '\0')
 21097  000FF8  C010  FFF6         	movff	monta_sd@dado,tblptrl
 21098  000FFC  C011  FFF7         	movff	monta_sd@dado+1,tblptrh
 21099  001000  6AF8               	clrf	tblptru,c
 21100  001002  0E07               	movlw	(high __ramtop+-1)
 21101  001004  64F7               	cpfsgt	tblptrh,c
 21102  001006  D003               	bra	u15357
 21103  001008  0008               	tblrd		*
 21104  00100A  50F5               	movf	tablat,w,c
 21105  00100C  D005               	bra	u15350
 21106  00100E                     u15357:
 21107  00100E  CFF6 FFE1          	movff	tblptrl,fsr1l
 21108  001012  CFF7 FFE2          	movff	tblptrh,fsr1h
 21109  001016  50E7               	movf	indf1,w,c
 21110  001018                     u15350:
 21111  001018  0900               	iorlw	0
 21112  00101A  B4D8               	btfsc	status,2,c
 21113  00101C  D017               	goto	l12847
 21114                           
 21115                           ;SDCard.c: 327: {;SDCard.c: 328: data[i] = *dado;
 21116  00101E  C010  FFF6         	movff	monta_sd@dado,tblptrl
 21117  001022  C011  FFF7         	movff	monta_sd@dado+1,tblptrh
 21118  001026  6AF8               	clrf	tblptru,c
 21119  001028  0ED6               	movlw	low _data
 21120  00102A  2414               	addwf	monta_sd@i^0,w,c
 21121  00102C  6ED9               	movwf	fsr2l,c
 21122  00102E  6ADA               	clrf	fsr2h,c
 21123  001030  0E01               	movlw	high _data
 21124  001032  22DA               	addwfc	fsr2h,f,c
 21125  001034  0E07               	movlw	(high __ramtop+-1)
 21126  001036  64F7               	cpfsgt	tblptrh,c
 21127  001038  D003               	bra	u15377
 21128  00103A  0008               	tblrd		*
 21129  00103C  50F5               	movf	tablat,w,c
 21130  00103E  D005               	bra	u15370
 21131  001040                     u15377:
 21132  001040  CFF6 FFE1          	movff	tblptrl,fsr1l
 21133  001044  CFF7 FFE2          	movff	tblptrh,fsr1h
 21134  001048  50E7               	movf	indf1,w,c
 21135  00104A                     u15370:
 21136  00104A  6EDF               	movwf	indf2,c
 21137  00104C                     l12847:
 21138                           
 21139                           ;SDCard.c: 329: };SDCard.c: 330: dado++;
 21140  00104C  4A10               	infsnz	monta_sd@dado^0,f,c
 21141  00104E  2A11               	incf	(monta_sd@dado+1)^0,f,c
 21142  001050  2A14               	incf	monta_sd@i^0,f,c
 21143  001052  0E05               	movlw	5
 21144  001054  6414               	cpfsgt	monta_sd@i^0,c
 21145  001056  D7D0               	goto	l12843
 21146  001058  0012               	return	
 21147  00105A                     l12853:
 21148                           
 21149                           ;SDCard.c: 335: for(i=0; i<11;i++)
 21150  00105A  0E00               	movlw	0
 21151  00105C  6E14               	movwf	monta_sd@i^0,c
 21152  00105E                     l12859:
 21153                           
 21154                           ;SDCard.c: 336: {;SDCard.c: 337: if(*dado != '\0')
 21155  00105E  C010  FFF6         	movff	monta_sd@dado,tblptrl
 21156  001062  C011  FFF7         	movff	monta_sd@dado+1,tblptrh
 21157  001066  6AF8               	clrf	tblptru,c
 21158  001068  0E07               	movlw	(high __ramtop+-1)
 21159  00106A  64F7               	cpfsgt	tblptrh,c
 21160  00106C  D003               	bra	u15397
 21161  00106E  0008               	tblrd		*
 21162  001070  50F5               	movf	tablat,w,c
 21163  001072  D005               	bra	u15390
 21164  001074                     u15397:
 21165  001074  CFF6 FFE1          	movff	tblptrl,fsr1l
 21166  001078  CFF7 FFE2          	movff	tblptrh,fsr1h
 21167  00107C  50E7               	movf	indf1,w,c
 21168  00107E                     u15390:
 21169  00107E  0900               	iorlw	0
 21170  001080  B4D8               	btfsc	status,2,c
 21171  001082  D017               	goto	l12863
 21172                           
 21173                           ;SDCard.c: 338: {;SDCard.c: 339: lt[i] = *dado;
 21174  001084  C010  FFF6         	movff	monta_sd@dado,tblptrl
 21175  001088  C011  FFF7         	movff	monta_sd@dado+1,tblptrh
 21176  00108C  6AF8               	clrf	tblptru,c
 21177  00108E  0EB0               	movlw	low _lt
 21178  001090  2414               	addwf	monta_sd@i^0,w,c
 21179  001092  6ED9               	movwf	fsr2l,c
 21180  001094  6ADA               	clrf	fsr2h,c
 21181  001096  0E01               	movlw	high _lt
 21182  001098  22DA               	addwfc	fsr2h,f,c
 21183  00109A  0E07               	movlw	(high __ramtop+-1)
 21184  00109C  64F7               	cpfsgt	tblptrh,c
 21185  00109E  D003               	bra	u15417
 21186  0010A0  0008               	tblrd		*
 21187  0010A2  50F5               	movf	tablat,w,c
 21188  0010A4  D005               	bra	u15410
 21189  0010A6                     u15417:
 21190  0010A6  CFF6 FFE1          	movff	tblptrl,fsr1l
 21191  0010AA  CFF7 FFE2          	movff	tblptrh,fsr1h
 21192  0010AE  50E7               	movf	indf1,w,c
 21193  0010B0                     u15410:
 21194  0010B0  6EDF               	movwf	indf2,c
 21195  0010B2                     l12863:
 21196                           
 21197                           ;SDCard.c: 340: };SDCard.c: 341: dado++;
 21198  0010B2  4A10               	infsnz	monta_sd@dado^0,f,c
 21199  0010B4  2A11               	incf	(monta_sd@dado+1)^0,f,c
 21200  0010B6  2A14               	incf	monta_sd@i^0,f,c
 21201  0010B8  0E0A               	movlw	10
 21202  0010BA  6414               	cpfsgt	monta_sd@i^0,c
 21203  0010BC  D7D0               	goto	l12859
 21204  0010BE  0012               	return	
 21205  0010C0                     l12869:
 21206                           
 21207                           ;SDCard.c: 346: for(i=0; i<12;i++)
 21208  0010C0  0E00               	movlw	0
 21209  0010C2  6E14               	movwf	monta_sd@i^0,c
 21210  0010C4                     l12875:
 21211                           
 21212                           ;SDCard.c: 347: {;SDCard.c: 348: if(*dado != '\0')
 21213  0010C4  C010  FFF6         	movff	monta_sd@dado,tblptrl
 21214  0010C8  C011  FFF7         	movff	monta_sd@dado+1,tblptrh
 21215  0010CC  6AF8               	clrf	tblptru,c
 21216  0010CE  0E07               	movlw	(high __ramtop+-1)
 21217  0010D0  64F7               	cpfsgt	tblptrh,c
 21218  0010D2  D003               	bra	u15437
 21219  0010D4  0008               	tblrd		*
 21220  0010D6  50F5               	movf	tablat,w,c
 21221  0010D8  D005               	bra	u15430
 21222  0010DA                     u15437:
 21223  0010DA  CFF6 FFE1          	movff	tblptrl,fsr1l
 21224  0010DE  CFF7 FFE2          	movff	tblptrh,fsr1h
 21225  0010E2  50E7               	movf	indf1,w,c
 21226  0010E4                     u15430:
 21227  0010E4  0900               	iorlw	0
 21228  0010E6  B4D8               	btfsc	status,2,c
 21229  0010E8  D017               	goto	l12879
 21230                           
 21231                           ;SDCard.c: 349: {;SDCard.c: 350: lo[i] = *dado;
 21232  0010EA  C010  FFF6         	movff	monta_sd@dado,tblptrl
 21233  0010EE  C011  FFF7         	movff	monta_sd@dado+1,tblptrh
 21234  0010F2  6AF8               	clrf	tblptru,c
 21235  0010F4  0E96               	movlw	low _lo
 21236  0010F6  2414               	addwf	monta_sd@i^0,w,c
 21237  0010F8  6ED9               	movwf	fsr2l,c
 21238  0010FA  6ADA               	clrf	fsr2h,c
 21239  0010FC  0E01               	movlw	high _lo
 21240  0010FE  22DA               	addwfc	fsr2h,f,c
 21241  001100  0E07               	movlw	(high __ramtop+-1)
 21242  001102  64F7               	cpfsgt	tblptrh,c
 21243  001104  D003               	bra	u15457
 21244  001106  0008               	tblrd		*
 21245  001108  50F5               	movf	tablat,w,c
 21246  00110A  D005               	bra	u15450
 21247  00110C                     u15457:
 21248  00110C  CFF6 FFE1          	movff	tblptrl,fsr1l
 21249  001110  CFF7 FFE2          	movff	tblptrh,fsr1h
 21250  001114  50E7               	movf	indf1,w,c
 21251  001116                     u15450:
 21252  001116  6EDF               	movwf	indf2,c
 21253  001118                     l12879:
 21254                           
 21255                           ;SDCard.c: 351: };SDCard.c: 352: dado++;
 21256  001118  4A10               	infsnz	monta_sd@dado^0,f,c
 21257  00111A  2A11               	incf	(monta_sd@dado+1)^0,f,c
 21258  00111C  2A14               	incf	monta_sd@i^0,f,c
 21259  00111E  0E0B               	movlw	11
 21260  001120  6414               	cpfsgt	monta_sd@i^0,c
 21261  001122  D7D0               	goto	l12875
 21262  001124  0012               	return	
 21263  001126                     l12885:
 21264                           
 21265                           ;SDCard.c: 358: for(i=0; i<6;i++)
 21266  001126  0E00               	movlw	0
 21267  001128  6E14               	movwf	monta_sd@i^0,c
 21268  00112A                     l12891:
 21269                           
 21270                           ;SDCard.c: 359: {;SDCard.c: 360: if(*dado != ' ' && *dado != '\0')
 21271  00112A  C010  FFF6         	movff	monta_sd@dado,tblptrl
 21272  00112E  C011  FFF7         	movff	monta_sd@dado+1,tblptrh
 21273  001132  6AF8               	clrf	tblptru,c
 21274  001134  0E07               	movlw	(high __ramtop+-1)
 21275  001136  64F7               	cpfsgt	tblptrh,c
 21276  001138  D003               	bra	u15477
 21277  00113A  0008               	tblrd		*
 21278  00113C  50F5               	movf	tablat,w,c
 21279  00113E  D005               	bra	u15470
 21280  001140                     u15477:
 21281  001140  CFF6 FFE1          	movff	tblptrl,fsr1l
 21282  001144  CFF7 FFE2          	movff	tblptrh,fsr1h
 21283  001148  50E7               	movf	indf1,w,c
 21284  00114A                     u15470:
 21285  00114A  0A20               	xorlw	32
 21286  00114C  B4D8               	btfsc	status,2,c
 21287  00114E  D02A               	goto	l12897
 21288  001150  C010  FFF6         	movff	monta_sd@dado,tblptrl
 21289  001154  C011  FFF7         	movff	monta_sd@dado+1,tblptrh
 21290  001158  6AF8               	clrf	tblptru,c
 21291  00115A  0E07               	movlw	(high __ramtop+-1)
 21292  00115C  64F7               	cpfsgt	tblptrh,c
 21293  00115E  D003               	bra	u15497
 21294  001160  0008               	tblrd		*
 21295  001162  50F5               	movf	tablat,w,c
 21296  001164  D005               	bra	u15490
 21297  001166                     u15497:
 21298  001166  CFF6 FFE1          	movff	tblptrl,fsr1l
 21299  00116A  CFF7 FFE2          	movff	tblptrh,fsr1h
 21300  00116E  50E7               	movf	indf1,w,c
 21301  001170                     u15490:
 21302  001170  0900               	iorlw	0
 21303  001172  B4D8               	btfsc	status,2,c
 21304  001174  D017               	goto	l12897
 21305                           
 21306                           ;SDCard.c: 361: {;SDCard.c: 362: fence[i] = *dado;
 21307  001176  C010  FFF6         	movff	monta_sd@dado,tblptrl
 21308  00117A  C011  FFF7         	movff	monta_sd@dado+1,tblptrh
 21309  00117E  6AF8               	clrf	tblptru,c
 21310  001180  0EE2               	movlw	low _fence
 21311  001182  2414               	addwf	monta_sd@i^0,w,c
 21312  001184  6ED9               	movwf	fsr2l,c
 21313  001186  6ADA               	clrf	fsr2h,c
 21314  001188  0E01               	movlw	high _fence
 21315  00118A  22DA               	addwfc	fsr2h,f,c
 21316  00118C  0E07               	movlw	(high __ramtop+-1)
 21317  00118E  64F7               	cpfsgt	tblptrh,c
 21318  001190  D003               	bra	u15517
 21319  001192  0008               	tblrd		*
 21320  001194  50F5               	movf	tablat,w,c
 21321  001196  D005               	bra	u15510
 21322  001198                     u15517:
 21323  001198  CFF6 FFE1          	movff	tblptrl,fsr1l
 21324  00119C  CFF7 FFE2          	movff	tblptrh,fsr1h
 21325  0011A0  50E7               	movf	indf1,w,c
 21326  0011A2                     u15510:
 21327  0011A2  6EDF               	movwf	indf2,c
 21328  0011A4                     l12897:
 21329                           
 21330                           ;SDCard.c: 363: };SDCard.c: 364: dado++;
 21331  0011A4  4A10               	infsnz	monta_sd@dado^0,f,c
 21332  0011A6  2A11               	incf	(monta_sd@dado+1)^0,f,c
 21333  0011A8  2A14               	incf	monta_sd@i^0,f,c
 21334  0011AA  0E05               	movlw	5
 21335  0011AC  6414               	cpfsgt	monta_sd@i^0,c
 21336  0011AE  D7BD               	goto	l12891
 21337  0011B0  0012               	return	
 21338  0011B2                     l12903:
 21339                           
 21340                           ;SDCard.c: 369: for(i=0; i<4;i++)
 21341  0011B2  0E00               	movlw	0
 21342  0011B4  6E14               	movwf	monta_sd@i^0,c
 21343  0011B6                     l12909:
 21344                           
 21345                           ;SDCard.c: 370: {;SDCard.c: 371: string_dado.hora_name[i] = *dado;
 21346  0011B6  C010  FFF6         	movff	monta_sd@dado,tblptrl
 21347  0011BA  C011  FFF7         	movff	monta_sd@dado+1,tblptrh
 21348  0011BE  6AF8               	clrf	tblptru,c
 21349  0011C0  0E14               	movlw	low (_string_dado+20)
 21350  0011C2  2414               	addwf	monta_sd@i^0,w,c
 21351  0011C4  6ED9               	movwf	fsr2l,c
 21352  0011C6  6ADA               	clrf	fsr2h,c
 21353  0011C8  0E02               	movlw	high (_string_dado+20)
 21354  0011CA  22DA               	addwfc	fsr2h,f,c
 21355  0011CC  0E07               	movlw	(high __ramtop+-1)
 21356  0011CE  64F7               	cpfsgt	tblptrh,c
 21357  0011D0  D003               	bra	u15537
 21358  0011D2  0008               	tblrd		*
 21359  0011D4  50F5               	movf	tablat,w,c
 21360  0011D6  D005               	bra	u15530
 21361  0011D8                     u15537:
 21362  0011D8  CFF6 FFE1          	movff	tblptrl,fsr1l
 21363  0011DC  CFF7 FFE2          	movff	tblptrh,fsr1h
 21364  0011E0  50E7               	movf	indf1,w,c
 21365  0011E2                     u15530:
 21366  0011E2  6EDF               	movwf	indf2,c
 21367                           
 21368                           ;SDCard.c: 372: dado++;
 21369  0011E4  4A10               	infsnz	monta_sd@dado^0,f,c
 21370  0011E6  2A11               	incf	(monta_sd@dado+1)^0,f,c
 21371  0011E8  2A14               	incf	monta_sd@i^0,f,c
 21372  0011EA  0E03               	movlw	3
 21373  0011EC  6414               	cpfsgt	monta_sd@i^0,c
 21374  0011EE  D7E3               	goto	l12909
 21375  0011F0  0012               	return	
 21376  0011F2                     l12917:
 21377                           
 21378                           ;SDCard.c: 378: for(i=0; i<4;i++)
 21379  0011F2  0E00               	movlw	0
 21380  0011F4  6E14               	movwf	monta_sd@i^0,c
 21381  0011F6                     l12923:
 21382                           
 21383                           ;SDCard.c: 379: {;SDCard.c: 380: string_dado.data_name[i] = *dado;
 21384  0011F6  C010  FFF6         	movff	monta_sd@dado,tblptrl
 21385  0011FA  C011  FFF7         	movff	monta_sd@dado+1,tblptrh
 21386  0011FE  6AF8               	clrf	tblptru,c
 21387  001200  0E12               	movlw	low (_string_dado+18)
 21388  001202  2414               	addwf	monta_sd@i^0,w,c
 21389  001204  6ED9               	movwf	fsr2l,c
 21390  001206  6ADA               	clrf	fsr2h,c
 21391  001208  0E02               	movlw	high (_string_dado+18)
 21392  00120A  22DA               	addwfc	fsr2h,f,c
 21393  00120C  0E07               	movlw	(high __ramtop+-1)
 21394  00120E  64F7               	cpfsgt	tblptrh,c
 21395  001210  D003               	bra	u15557
 21396  001212  0008               	tblrd		*
 21397  001214  50F5               	movf	tablat,w,c
 21398  001216  D005               	bra	u15550
 21399  001218                     u15557:
 21400  001218  CFF6 FFE1          	movff	tblptrl,fsr1l
 21401  00121C  CFF7 FFE2          	movff	tblptrh,fsr1h
 21402  001220  50E7               	movf	indf1,w,c
 21403  001222                     u15550:
 21404  001222  6EDF               	movwf	indf2,c
 21405                           
 21406                           ;SDCard.c: 381: dado++;
 21407  001224  4A10               	infsnz	monta_sd@dado^0,f,c
 21408  001226  2A11               	incf	(monta_sd@dado+1)^0,f,c
 21409  001228  2A14               	incf	monta_sd@i^0,f,c
 21410  00122A  0E03               	movlw	3
 21411  00122C  6414               	cpfsgt	monta_sd@i^0,c
 21412  00122E  D7E3               	goto	l12923
 21413  001230  0012               	return	
 21414  001232                     l12931:
 21415                           
 21416                           ;SDCard.c: 386: for(i=0; i<6;i++)
 21417  001232  0E00               	movlw	0
 21418  001234  6E14               	movwf	monta_sd@i^0,c
 21419  001236                     l12937:
 21420                           
 21421                           ;SDCard.c: 387: {;SDCard.c: 388: if(*dado != ' ' && *dado != '\0')
 21422  001236  C010  FFF6         	movff	monta_sd@dado,tblptrl
 21423  00123A  C011  FFF7         	movff	monta_sd@dado+1,tblptrh
 21424  00123E  6AF8               	clrf	tblptru,c
 21425  001240  0E07               	movlw	(high __ramtop+-1)
 21426  001242  64F7               	cpfsgt	tblptrh,c
 21427  001244  D003               	bra	u15577
 21428  001246  0008               	tblrd		*
 21429  001248  50F5               	movf	tablat,w,c
 21430  00124A  D005               	bra	u15570
 21431  00124C                     u15577:
 21432  00124C  CFF6 FFE1          	movff	tblptrl,fsr1l
 21433  001250  CFF7 FFE2          	movff	tblptrh,fsr1h
 21434  001254  50E7               	movf	indf1,w,c
 21435  001256                     u15570:
 21436  001256  0A20               	xorlw	32
 21437  001258  B4D8               	btfsc	status,2,c
 21438  00125A  D02A               	goto	l12943
 21439  00125C  C010  FFF6         	movff	monta_sd@dado,tblptrl
 21440  001260  C011  FFF7         	movff	monta_sd@dado+1,tblptrh
 21441  001264  6AF8               	clrf	tblptru,c
 21442  001266  0E07               	movlw	(high __ramtop+-1)
 21443  001268  64F7               	cpfsgt	tblptrh,c
 21444  00126A  D003               	bra	u15597
 21445  00126C  0008               	tblrd		*
 21446  00126E  50F5               	movf	tablat,w,c
 21447  001270  D005               	bra	u15590
 21448  001272                     u15597:
 21449  001272  CFF6 FFE1          	movff	tblptrl,fsr1l
 21450  001276  CFF7 FFE2          	movff	tblptrh,fsr1h
 21451  00127A  50E7               	movf	indf1,w,c
 21452  00127C                     u15590:
 21453  00127C  0900               	iorlw	0
 21454  00127E  B4D8               	btfsc	status,2,c
 21455  001280  D017               	goto	l12943
 21456                           
 21457                           ;SDCard.c: 389: {;SDCard.c: 390: vel[i] = *dado;
 21458  001282  C010  FFF6         	movff	monta_sd@dado,tblptrl
 21459  001286  C011  FFF7         	movff	monta_sd@dado+1,tblptrh
 21460  00128A  6AF8               	clrf	tblptru,c
 21461  00128C  0EDC               	movlw	low _vel
 21462  00128E  2414               	addwf	monta_sd@i^0,w,c
 21463  001290  6ED9               	movwf	fsr2l,c
 21464  001292  6ADA               	clrf	fsr2h,c
 21465  001294  0E01               	movlw	high _vel
 21466  001296  22DA               	addwfc	fsr2h,f,c
 21467  001298  0E07               	movlw	(high __ramtop+-1)
 21468  00129A  64F7               	cpfsgt	tblptrh,c
 21469  00129C  D003               	bra	u15617
 21470  00129E  0008               	tblrd		*
 21471  0012A0  50F5               	movf	tablat,w,c
 21472  0012A2  D005               	bra	u15610
 21473  0012A4                     u15617:
 21474  0012A4  CFF6 FFE1          	movff	tblptrl,fsr1l
 21475  0012A8  CFF7 FFE2          	movff	tblptrh,fsr1h
 21476  0012AC  50E7               	movf	indf1,w,c
 21477  0012AE                     u15610:
 21478  0012AE  6EDF               	movwf	indf2,c
 21479  0012B0                     l12943:
 21480                           
 21481                           ;SDCard.c: 391: };SDCard.c: 393: dado++;
 21482  0012B0  4A10               	infsnz	monta_sd@dado^0,f,c
 21483  0012B2  2A11               	incf	(monta_sd@dado+1)^0,f,c
 21484  0012B4  2A14               	incf	monta_sd@i^0,f,c
 21485  0012B6  0E05               	movlw	5
 21486  0012B8  6414               	cpfsgt	monta_sd@i^0,c
 21487  0012BA  D7BD               	goto	l12937
 21488  0012BC  0012               	return	
 21489  0012BE                     l12951:
 21490  0012BE  5013               	movf	monta_sd@index^0,w,c
 21491                           
 21492                           ; Switch size 1, requested type "simple"
 21493                           ; Number of cases is 8, Range of values is 0 to 7
 21494                           ; switch strategies available:
 21495                           ; Name         Instructions Cycles
 21496                           ; simple_byte           25    13 (average)
 21497                           ;	Chosen strategy is simple_byte
 21498  0012C0  0A00               	xorlw	0	; case 0
 21499  0012C2  B4D8               	btfsc	status,2,c
 21500  0012C4  D664               	goto	l12821
 21501  0012C6  0A01               	xorlw	1	; case 1
 21502  0012C8  B4D8               	btfsc	status,2,c
 21503  0012CA  D694               	goto	l12837
 21504  0012CC  0A03               	xorlw	3	; case 2
 21505  0012CE  B4D8               	btfsc	status,2,c
 21506  0012D0  D6C4               	goto	l12853
 21507  0012D2  0A01               	xorlw	1	; case 3
 21508  0012D4  B4D8               	btfsc	status,2,c
 21509  0012D6  D6F4               	goto	l12869
 21510  0012D8  0A07               	xorlw	7	; case 4
 21511  0012DA  B4D8               	btfsc	status,2,c
 21512  0012DC  D724               	goto	l12885
 21513  0012DE  0A01               	xorlw	1	; case 5
 21514  0012E0  B4D8               	btfsc	status,2,c
 21515  0012E2  D767               	goto	l12903
 21516  0012E4  0A03               	xorlw	3	; case 6
 21517  0012E6  B4D8               	btfsc	status,2,c
 21518  0012E8  D784               	goto	l12917
 21519  0012EA  0A01               	xorlw	1	; case 7
 21520  0012EC  A4D8               	btfss	status,2,c
 21521  0012EE  0012               	return	
 21522  0012F0  D7A0               	goto	l12931
 21523  0012F2                     __end_of_monta_sd:
 21524                           	callstack 0
 21525                           
 21526 ;; *************** function _strlen *****************
 21527 ;; Defined at:
 21528 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strlen.c"
 21529 ;; Parameters:    Size  Location     Type
 21530 ;;  s               2    9[COMRAM] PTR const unsigned char 
 21531 ;;		 -> disparo_gravacao@velocidade(12), dados_data(18), dados_hora(18), dados_long(36), 
 21532 ;;		 -> dados_lat(33), STR_21(7), STR_20(7), rawSpeed(20), 
 21533 ;;		 -> rawDate(6), rawLongitude(13), rawLatitude(12), rawTime(7), 
 21534 ;; Auto vars:     Size  Location     Type
 21535 ;;  cp              2   11[COMRAM] PTR const unsigned char 
 21536 ;;		 -> disparo_gravacao@velocidade(12), dados_data(18), dados_hora(18), dados_long(36), 
 21537 ;;		 -> dados_lat(33), STR_21(7), STR_20(7), rawSpeed(20), 
 21538 ;;		 -> rawDate(6), rawLongitude(13), rawLatitude(12), rawTime(7), 
 21539 ;; Return value:  Size  Location     Type
 21540 ;;                  2    9[COMRAM] unsigned int 
 21541 ;; Registers used:
 21542 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
 21543 ;; Tracked objects:
 21544 ;;		On entry : 0/2
 21545 ;;		On exit  : 0/0
 21546 ;;		Unchanged: 0/0
 21547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21548 ;;      Params:         2       0       0       0       0       0       0       0       0
 21549 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21550 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21551 ;;      Totals:         4       0       0       0       0       0       0       0       0
 21552 ;;Total ram usage:        4 bytes
 21553 ;; Hardware stack levels used:    1
 21554 ;; Hardware stack levels required when called:    2
 21555 ;; This function calls:
 21556 ;;		Nothing
 21557 ;; This function is called by:
 21558 ;;		_monta_sd
 21559 ;; This function uses a non-reentrant model
 21560 ;;
 21561                           
 21562                           	psect	text128
 21563  005574                     __ptext128:
 21564                           	callstack 0
 21565  005574                     _strlen:
 21566                           	callstack 24
 21567                           
 21568                           ;incstack = 0
 21569  005574  C00A  F00C         	movff	strlen@s,strlen@cp
 21570  005578  C00B  F00D         	movff	strlen@s+1,strlen@cp+1
 21571  00557C  D002               	goto	l12677
 21572  00557E                     l12675:
 21573  00557E  4A0C               	infsnz	strlen@cp^0,f,c
 21574  005580  2A0D               	incf	(strlen@cp+1)^0,f,c
 21575  005582                     l12677:
 21576  005582  C00C  FFF6         	movff	strlen@cp,tblptrl
 21577  005586  C00D  FFF7         	movff	strlen@cp+1,tblptrh
 21578  00558A  6AF8               	clrf	tblptru,c
 21579  00558C  0E07               	movlw	(high __ramtop+-1)
 21580  00558E  64F7               	cpfsgt	tblptrh,c
 21581  005590  D003               	bra	u15037
 21582  005592  0008               	tblrd		*
 21583  005594  50F5               	movf	tablat,w,c
 21584  005596  D005               	bra	u15030
 21585  005598                     u15037:
 21586  005598  CFF6 FFE1          	movff	tblptrl,fsr1l
 21587  00559C  CFF7 FFE2          	movff	tblptrh,fsr1h
 21588  0055A0  50E7               	movf	indf1,w,c
 21589  0055A2                     u15030:
 21590  0055A2  0900               	iorlw	0
 21591  0055A4  A4D8               	btfss	status,2,c
 21592  0055A6  D7EB               	goto	l12675
 21593  0055A8  500A               	movf	strlen@s^0,w,c
 21594  0055AA  5C0C               	subwf	strlen@cp^0,w,c
 21595  0055AC  6E0A               	movwf	?_strlen^0,c
 21596  0055AE  500B               	movf	(strlen@s+1)^0,w,c
 21597  0055B0  580D               	subwfb	(strlen@cp+1)^0,w,c
 21598  0055B2  6E0B               	movwf	(?_strlen+1)^0,c
 21599  0055B4  0012               	return		;funcret
 21600  0055B6                     __end_of_strlen:
 21601                           	callstack 0
 21602                           
 21603 ;; *************** function _atoi *****************
 21604 ;; Defined at:
 21605 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\atoi.c"
 21606 ;; Parameters:    Size  Location     Type
 21607 ;;  s               3   15[COMRAM] PTR const unsigned char 
 21608 ;;		 -> ROM(32767), NULL(0), rawSpeed(20), 
 21609 ;; Auto vars:     Size  Location     Type
 21610 ;;  a               2   21[COMRAM] int 
 21611 ;;  sign            1   20[COMRAM] unsigned char 
 21612 ;; Return value:  Size  Location     Type
 21613 ;;                  2   15[COMRAM] int 
 21614 ;; Registers used:
 21615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21616 ;; Tracked objects:
 21617 ;;		On entry : 3F/0
 21618 ;;		On exit  : 0/0
 21619 ;;		Unchanged: 0/0
 21620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21621 ;;      Params:         3       0       0       0       0       0       0       0       0
 21622 ;;      Locals:         3       0       0       0       0       0       0       0       0
 21623 ;;      Temps:          2       0       0       0       0       0       0       0       0
 21624 ;;      Totals:         8       0       0       0       0       0       0       0       0
 21625 ;;Total ram usage:        8 bytes
 21626 ;; Hardware stack levels used:    1
 21627 ;; Hardware stack levels required when called:    3
 21628 ;; This function calls:
 21629 ;;		___wmul
 21630 ;;		_isdigit
 21631 ;; This function is called by:
 21632 ;;		_verifica_dados_operacionais
 21633 ;;		_disparo_gravacao
 21634 ;; This function uses a non-reentrant model
 21635 ;;
 21636                           
 21637                           	psect	text129
 21638  003252                     __ptext129:
 21639                           	callstack 0
 21640  003252                     _atoi:
 21641                           	callstack 25
 21642                           
 21643                           ; BSR set to: 0
 21644                           
 21645                           ;incstack = 0
 21646  003252  D006               	goto	l13269
 21647  003254                     l13267:
 21648  003254  0E01               	movlw	1
 21649  003256  2610               	addwf	atoi@s^0,f,c
 21650  003258  0E00               	movlw	0
 21651  00325A  2211               	addwfc	(atoi@s+1)^0,f,c
 21652  00325C  0E00               	movlw	0
 21653  00325E  2212               	addwfc	(atoi@s+2)^0,f,c
 21654  003260                     l13269:
 21655  003260  C010  FFF6         	movff	atoi@s,tblptrl
 21656  003264  C011  FFF7         	movff	atoi@s+1,tblptrh
 21657  003268  C012  FFF8         	movff	atoi@s+2,tblptru
 21658  00326C  BAF8               	btfsc	tblptru,5,c
 21659  00326E  D003               	bra	u16067
 21660  003270  0008               	tblrd		*
 21661  003272  50F5               	movf	tablat,w,c
 21662  003274  D005               	bra	u16060
 21663  003276                     u16067:
 21664  003276  CFF6 FFE1          	movff	tblptrl,fsr1l
 21665  00327A  CFF7 FFE2          	movff	tblptrh,fsr1h
 21666  00327E  50E7               	movf	indf1,w,c
 21667  003280                     u16060:
 21668  003280  0A20               	xorlw	32
 21669  003282  B4D8               	btfsc	status,2,c
 21670  003284  D7E7               	goto	l13267
 21671  003286  C010  FFF6         	movff	atoi@s,tblptrl
 21672  00328A  C011  FFF7         	movff	atoi@s+1,tblptrh
 21673  00328E  C012  FFF8         	movff	atoi@s+2,tblptru
 21674  003292  BAF8               	btfsc	tblptru,5,c
 21675  003294  D003               	bra	u16087
 21676  003296  0008               	tblrd		*
 21677  003298  50F5               	movf	tablat,w,c
 21678  00329A  D005               	bra	u16080
 21679  00329C                     u16087:
 21680  00329C  CFF6 FFE1          	movff	tblptrl,fsr1l
 21681  0032A0  CFF7 FFE2          	movff	tblptrh,fsr1h
 21682  0032A4  50E7               	movf	indf1,w,c
 21683  0032A6                     u16080:
 21684  0032A6  0A09               	xorlw	9
 21685  0032A8  B4D8               	btfsc	status,2,c
 21686  0032AA  D7D4               	goto	l13267
 21687  0032AC  0E00               	movlw	0
 21688  0032AE  6E17               	movwf	(atoi@a+1)^0,c
 21689  0032B0  0E00               	movlw	0
 21690  0032B2  6E16               	movwf	atoi@a^0,c
 21691  0032B4  0E00               	movlw	0
 21692  0032B6  6E15               	movwf	atoi@sign^0,c
 21693  0032B8  C010  FFF6         	movff	atoi@s,tblptrl
 21694  0032BC  C011  FFF7         	movff	atoi@s+1,tblptrh
 21695  0032C0  C012  FFF8         	movff	atoi@s+2,tblptru
 21696  0032C4  BAF8               	btfsc	tblptru,5,c
 21697  0032C6  D003               	bra	u16107
 21698  0032C8  0008               	tblrd		*
 21699  0032CA  50F5               	movf	tablat,w,c
 21700  0032CC  D005               	bra	u16100
 21701  0032CE                     u16107:
 21702  0032CE  CFF6 FFE1          	movff	tblptrl,fsr1l
 21703  0032D2  CFF7 FFE2          	movff	tblptrh,fsr1h
 21704  0032D6  50E7               	movf	indf1,w,c
 21705  0032D8                     u16100:
 21706  0032D8  0A2D               	xorlw	45
 21707  0032DA  A4D8               	btfss	status,2,c
 21708  0032DC  D008               	goto	l13281
 21709  0032DE  2A15               	incf	atoi@sign^0,f,c
 21710  0032E0                     l13279:
 21711  0032E0  0E01               	movlw	1
 21712  0032E2  2610               	addwf	atoi@s^0,f,c
 21713  0032E4  0E00               	movlw	0
 21714  0032E6  2211               	addwfc	(atoi@s+1)^0,f,c
 21715  0032E8  0E00               	movlw	0
 21716  0032EA  2212               	addwfc	(atoi@s+2)^0,f,c
 21717  0032EC  D03A               	goto	l13289
 21718  0032EE                     l13281:
 21719  0032EE  C010  FFF6         	movff	atoi@s,tblptrl
 21720  0032F2  C011  FFF7         	movff	atoi@s+1,tblptrh
 21721  0032F6  C012  FFF8         	movff	atoi@s+2,tblptru
 21722  0032FA  BAF8               	btfsc	tblptru,5,c
 21723  0032FC  D003               	bra	u16127
 21724  0032FE  0008               	tblrd		*
 21725  003300  50F5               	movf	tablat,w,c
 21726  003302  D005               	bra	u16120
 21727  003304                     u16127:
 21728  003304  CFF6 FFE1          	movff	tblptrl,fsr1l
 21729  003308  CFF7 FFE2          	movff	tblptrh,fsr1h
 21730  00330C  50E7               	movf	indf1,w,c
 21731  00330E                     u16120:
 21732  00330E  0A2B               	xorlw	43
 21733  003310  B4D8               	btfsc	status,2,c
 21734  003312  D7E6               	goto	l13279
 21735  003314  D026               	goto	l13289
 21736  003316                     l13285:
 21737  003316  C016  F00A         	movff	atoi@a,___wmul@multiplier
 21738  00331A  C017  F00B         	movff	atoi@a+1,___wmul@multiplier+1
 21739  00331E  0E00               	movlw	0
 21740  003320  6E0D               	movwf	(___wmul@multiplicand+1)^0,c
 21741  003322  0E0A               	movlw	10
 21742  003324  6E0C               	movwf	___wmul@multiplicand^0,c
 21743  003326  ECC6  F02C         	call	___wmul	;wreg free
 21744  00332A  C010  FFF6         	movff	atoi@s,tblptrl
 21745  00332E  C011  FFF7         	movff	atoi@s+1,tblptrh
 21746  003332  C012  FFF8         	movff	atoi@s+2,tblptru
 21747  003336  BAF8               	btfsc	tblptru,5,c
 21748  003338  D003               	bra	u16147
 21749  00333A  0008               	tblrd		*
 21750  00333C  50F5               	movf	tablat,w,c
 21751  00333E  D005               	bra	u16140
 21752  003340                     u16147:
 21753  003340  CFF6 FFE1          	movff	tblptrl,fsr1l
 21754  003344  CFF7 FFE2          	movff	tblptrh,fsr1h
 21755  003348  50E7               	movf	indf1,w,c
 21756  00334A                     u16140:
 21757  00334A  6E13               	movwf	??_atoi^0,c
 21758  00334C  5013               	movf	??_atoi^0,w,c
 21759  00334E  260A               	addwf	?___wmul^0,f,c
 21760  003350  0E00               	movlw	0
 21761  003352  220B               	addwfc	(?___wmul+1)^0,f,c
 21762  003354  0ED0               	movlw	208
 21763  003356  240A               	addwf	?___wmul^0,w,c
 21764  003358  6E16               	movwf	atoi@a^0,c
 21765  00335A  0EFF               	movlw	255
 21766  00335C  200B               	addwfc	(?___wmul+1)^0,w,c
 21767  00335E  6E17               	movwf	(atoi@a+1)^0,c
 21768  003360  D7BF               	goto	l13279
 21769  003362                     l13289:
 21770  003362  C010  FFF6         	movff	atoi@s,tblptrl
 21771  003366  C011  FFF7         	movff	atoi@s+1,tblptrh
 21772  00336A  C012  FFF8         	movff	atoi@s+2,tblptru
 21773  00336E  BAF8               	btfsc	tblptru,5,c
 21774  003370  D003               	bra	u16157
 21775  003372  0008               	tblrd		*
 21776  003374  50F5               	movf	tablat,w,c
 21777  003376  D005               	bra	u16150
 21778  003378                     u16157:
 21779  003378  CFF6 FFE1          	movff	tblptrl,fsr1l
 21780  00337C  CFF7 FFE2          	movff	tblptrh,fsr1h
 21781  003380  50E7               	movf	indf1,w,c
 21782  003382                     u16150:
 21783  003382  ECA1  F02D         	call	_isdigit
 21784  003386  B0D8               	btfsc	status,0,c
 21785  003388  D7C6               	goto	l13285
 21786  00338A  5015               	movf	atoi@sign^0,w,c
 21787  00338C  B4D8               	btfsc	status,2,c
 21788  00338E  D00D               	goto	l2427
 21789  003390  C016  F013         	movff	atoi@a,??_atoi
 21790  003394  C017  F014         	movff	atoi@a+1,??_atoi+1
 21791  003398  1E13               	comf	??_atoi^0,f,c
 21792  00339A  1E14               	comf	(??_atoi+1)^0,f,c
 21793  00339C  4A13               	infsnz	??_atoi^0,f,c
 21794  00339E  2A14               	incf	(??_atoi+1)^0,f,c
 21795  0033A0  C013  F010         	movff	??_atoi,?_atoi
 21796  0033A4  C014  F011         	movff	??_atoi+1,?_atoi+1
 21797  0033A8  0012               	return	
 21798  0033AA                     l2427:
 21799  0033AA  C016  F010         	movff	atoi@a,?_atoi
 21800  0033AE  C017  F011         	movff	atoi@a+1,?_atoi+1
 21801  0033B2  0012               	return		;funcret
 21802  0033B4                     __end_of_atoi:
 21803                           	callstack 0
 21804                           
 21805 ;; *************** function _isdigit *****************
 21806 ;; Defined at:
 21807 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\isdigit.c"
 21808 ;; Parameters:    Size  Location     Type
 21809 ;;  c               1    wreg     unsigned char 
 21810 ;; Auto vars:     Size  Location     Type
 21811 ;;  c               1   11[COMRAM] unsigned char 
 21812 ;; Return value:  Size  Location     Type
 21813 ;;		None               void
 21814 ;; Registers used:
 21815 ;;		wreg, status,2, status,0
 21816 ;; Tracked objects:
 21817 ;;		On entry : 0/0
 21818 ;;		On exit  : 0/0
 21819 ;;		Unchanged: 0/0
 21820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21821 ;;      Params:         0       0       0       0       0       0       0       0       0
 21822 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21823 ;;      Temps:          1       0       0       0       0       0       0       0       0
 21824 ;;      Totals:         3       0       0       0       0       0       0       0       0
 21825 ;;Total ram usage:        3 bytes
 21826 ;; Hardware stack levels used:    1
 21827 ;; Hardware stack levels required when called:    2
 21828 ;; This function calls:
 21829 ;;		Nothing
 21830 ;; This function is called by:
 21831 ;;		_atoi
 21832 ;;		_atol
 21833 ;; This function uses a non-reentrant model
 21834 ;;
 21835                           
 21836                           	psect	text130
 21837  005B42                     __ptext130:
 21838                           	callstack 0
 21839  005B42                     _isdigit:
 21840                           	callstack 25
 21841                           
 21842                           ;incstack = 0
 21843                           ;isdigit@c stored from wreg
 21844  005B42  6E0C               	movwf	isdigit@c^0,c
 21845  005B44  0E00               	movlw	0
 21846  005B46  6E0B               	movwf	_isdigit$3276^0,c
 21847  005B48  0E3A               	movlw	58
 21848  005B4A  600C               	cpfslt	isdigit@c^0,c
 21849  005B4C  D005               	goto	l10965
 21850  005B4E  0E2F               	movlw	47
 21851  005B50  640C               	cpfsgt	isdigit@c^0,c
 21852  005B52  D002               	goto	l10965
 21853  005B54  0E01               	movlw	1
 21854  005B56  6E0B               	movwf	_isdigit$3276^0,c
 21855  005B58                     l10965:
 21856  005B58  C00B  F00A         	movff	_isdigit$3276,??_isdigit
 21857  005B5C  300A               	rrcf	??_isdigit^0,w,c
 21858  005B5E  0012               	return		;funcret
 21859  005B60                     __end_of_isdigit:
 21860                           	callstack 0
 21861                           
 21862 ;; *************** function ___wmul *****************
 21863 ;; Defined at:
 21864 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\Umul16.c"
 21865 ;; Parameters:    Size  Location     Type
 21866 ;;  multiplier      2    9[COMRAM] unsigned int 
 21867 ;;  multiplicand    2   11[COMRAM] unsigned int 
 21868 ;; Auto vars:     Size  Location     Type
 21869 ;;  product         2   13[COMRAM] unsigned int 
 21870 ;; Return value:  Size  Location     Type
 21871 ;;                  2    9[COMRAM] unsigned int 
 21872 ;; Registers used:
 21873 ;;		wreg, status,2, status,0, prodl, prodh
 21874 ;; Tracked objects:
 21875 ;;		On entry : 0/2
 21876 ;;		On exit  : 0/0
 21877 ;;		Unchanged: 0/0
 21878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21879 ;;      Params:         4       0       0       0       0       0       0       0       0
 21880 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21881 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21882 ;;      Totals:         6       0       0       0       0       0       0       0       0
 21883 ;;Total ram usage:        6 bytes
 21884 ;; Hardware stack levels used:    1
 21885 ;; Hardware stack levels required when called:    2
 21886 ;; This function calls:
 21887 ;;		Nothing
 21888 ;; This function is called by:
 21889 ;;		_get_cluster
 21890 ;;		_put_cluster
 21891 ;;		_fprintf
 21892 ;;		_atoi
 21893 ;;		_disparo_gravacao
 21894 ;; This function uses a non-reentrant model
 21895 ;;
 21896                           
 21897                           	psect	text131
 21898  00598C                     __ptext131:
 21899                           	callstack 0
 21900  00598C                     ___wmul:
 21901                           	callstack 25
 21902                           
 21903                           ;incstack = 0
 21904  00598C  500A               	movf	___wmul@multiplier^0,w,c
 21905  00598E  020C               	mulwf	___wmul@multiplicand^0,c
 21906  005990  CFF3 F00E          	movff	prodl,___wmul@product
 21907  005994  CFF4 F00F          	movff	prodh,___wmul@product+1
 21908  005998  500A               	movf	___wmul@multiplier^0,w,c
 21909  00599A  020D               	mulwf	(___wmul@multiplicand+1)^0,c
 21910  00599C  50F3               	movf	243,w,c
 21911  00599E  260F               	addwf	(___wmul@product+1)^0,f,c
 21912  0059A0  500B               	movf	(___wmul@multiplier+1)^0,w,c
 21913  0059A2  020C               	mulwf	___wmul@multiplicand^0,c
 21914  0059A4  50F3               	movf	243,w,c
 21915  0059A6  260F               	addwf	(___wmul@product+1)^0,f,c
 21916  0059A8  C00E  F00A         	movff	___wmul@product,?___wmul
 21917  0059AC  C00F  F00B         	movff	___wmul@product+1,?___wmul+1
 21918  0059B0  0012               	return		;funcret
 21919  0059B2                     __end_of___wmul:
 21920                           	callstack 0
 21921                           
 21922 ;; *************** function _isr *****************
 21923 ;; Defined at:
 21924 ;;		line 113 in file "main.c"
 21925 ;; Parameters:    Size  Location     Type
 21926 ;;		None
 21927 ;; Auto vars:     Size  Location     Type
 21928 ;;  cont            1    8[COMRAM] unsigned char 
 21929 ;; Return value:  Size  Location     Type
 21930 ;;                  1    wreg      void 
 21931 ;; Registers used:
 21932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21933 ;; Tracked objects:
 21934 ;;		On entry : 0/0
 21935 ;;		On exit  : 0/0
 21936 ;;		Unchanged: 0/0
 21937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21938 ;;      Params:         0       0       0       0       0       0       0       0       0
 21939 ;;      Locals:         1       0       0       0       0       0       0       0       0
 21940 ;;      Temps:          6       0       0       0       0       0       0       0       0
 21941 ;;      Totals:         7       0       0       0       0       0       0       0       0
 21942 ;;Total ram usage:        7 bytes
 21943 ;; Hardware stack levels used:    1
 21944 ;; Hardware stack levels required when called:    1
 21945 ;; This function calls:
 21946 ;;		_recebe_dado_uart
 21947 ;;		_tratamento_uart
 21948 ;;		i2_write_timer_zero
 21949 ;; This function is called by:
 21950 ;;		Interrupt level 2
 21951 ;; This function uses a non-reentrant model
 21952 ;;
 21953                           
 21954                           	psect	intcode
 21955  000008                     __pintcode:
 21956                           	callstack 0
 21957  000008                     _isr:
 21958                           	callstack 13
 21959                           
 21960                           ;incstack = 0
 21961  000008  8256               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 21962  00000A  ED10  F01F         	call	int_func,f	;refresh shadow registers
 21963                           
 21964                           	psect	intcode_body
 21965  003E20                     __pintcode_body:
 21966                           	callstack 13
 21967  003E20                     int_func:
 21968                           	callstack 13
 21969  003E20  0006               	pop		; remove dummy address from shadow register refresh
 21970  003E22  CFD9 F005          	movff	fsr2l,??_isr+2
 21971  003E26  CFDA F006          	movff	fsr2h,??_isr+3
 21972  003E2A  CFF3 F007          	movff	prodl,??_isr+4
 21973  003E2E  CFF4 F008          	movff	prodh,??_isr+5
 21974                           
 21975                           ;main.c: 115: unsigned char cont;;main.c: 118: if (PIE1bits.RCIE && PIR1bits.RCIF)
 21976  003E32  BA9D               	btfsc	157,5,c	;volatile
 21977  003E34  AA9E               	btfss	158,5,c	;volatile
 21978  003E36  D015               	goto	i2l10125
 21979                           
 21980                           ;main.c: 119: {;main.c: 120: PIR1bits.RCIF = 0;
 21981  003E38  9A9E               	bcf	158,5,c	;volatile
 21982                           
 21983                           ;main.c: 121: data_uart_recebe = recebe_dado_uart();
 21984  003E3A  ECF5  F02D         	call	_recebe_dado_uart	;wreg free
 21985  003E3E  0100               	movlb	0	; () banked
 21986  003E40  6FFD               	movwf	_data_uart_recebe& (0+255),b
 21987                           
 21988                           ; BSR set to: 0
 21989                           ;main.c: 122: tratamento_uart(data_uart_recebe);
 21990  003E42  51FD               	movf	_data_uart_recebe& (0+255),w,b
 21991  003E44  EC89  F01D         	call	_tratamento_uart
 21992                           
 21993                           ;main.c: 123: PORTBbits.RB2 = !PORTBbits.RB2;
 21994  003E48  B481               	btfsc	129,2,c	;volatile
 21995  003E4A  D003               	goto	i2u1127_40
 21996  003E4C  6A03               	clrf	??_isr^0,c
 21997  003E4E  2A03               	incf	??_isr^0,f,c
 21998  003E50  D001               	goto	i2u1128_48
 21999  003E52                     i2u1127_40:
 22000  003E52  6A03               	clrf	??_isr^0,c
 22001  003E54                     i2u1128_48:
 22002  003E54  4603               	rlncf	??_isr^0,f,c
 22003  003E56  4603               	rlncf	??_isr^0,f,c
 22004  003E58  5081               	movf	129,w,c	;volatile
 22005  003E5A  1803               	xorwf	??_isr^0,w,c
 22006  003E5C  0BFB               	andlw	-5
 22007  003E5E  1803               	xorwf	??_isr^0,w,c
 22008  003E60  6E81               	movwf	129,c	;volatile
 22009  003E62                     i2l10125:
 22010                           
 22011                           ;main.c: 124: };main.c: 127: unsigned char cont;;main.c: 129: if (TMR0IF && T0IF)
 22012  003E62  B4F2               	btfsc	4082,2,c	;volatile
 22013  003E64  A4F2               	btfss	4082,2,c	;volatile
 22014  003E66  D044               	goto	i2l10163
 22015                           
 22016                           ;main.c: 130: {;main.c: 131: INTCONbits.TMR0IF = 0;
 22017  003E68  94F2               	bcf	242,2,c	;volatile
 22018                           
 22019                           ;main.c: 132: sinaliza_int_timer = 1;
 22020  003E6A  0E01               	movlw	1
 22021  003E6C  0100               	movlb	0	; () banked
 22022  003E6E  6FFC               	movwf	_sinaliza_int_timer& (0+255),b
 22023                           
 22024                           ;main.c: 134: for(cont= 0; cont<3;cont++)
 22025  003E70  0E00               	movlw	0
 22026  003E72  6E09               	movwf	isr@cont^0,c
 22027  003E74                     i2l10137:
 22028                           
 22029                           ;main.c: 135: {;main.c: 136: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 22030  003E74  5009               	movf	isr@cont^0,w,c
 22031  003E76  0D02               	mullw	2
 22032  003E78  0E1D               	movlw	low _tempo_tarefa
 22033  003E7A  24F3               	addwf	243,w,c
 22034  003E7C  6ED9               	movwf	fsr2l,c
 22035  003E7E  0E01               	movlw	high _tempo_tarefa
 22036  003E80  20F4               	addwfc	prodh,w,c
 22037  003E82  6EDA               	movwf	fsr2h,c
 22038  003E84  50DE               	movf	postinc2,w,c
 22039  003E86  10DE               	iorwf	postinc2,w,c
 22040  003E88  B4D8               	btfsc	status,2,c
 22041  003E8A  D00B               	goto	i2l10141
 22042  003E8C  5009               	movf	isr@cont^0,w,c
 22043  003E8E  0D02               	mullw	2
 22044  003E90  0E1D               	movlw	low _tempo_tarefa
 22045  003E92  24F3               	addwf	243,w,c
 22046  003E94  6ED9               	movwf	fsr2l,c
 22047  003E96  0E01               	movlw	high _tempo_tarefa
 22048  003E98  20F4               	addwfc	prodh,w,c
 22049  003E9A  6EDA               	movwf	fsr2h,c
 22050  003E9C  06DE               	decf	postinc2,f,c
 22051  003E9E  0E00               	movlw	0
 22052  003EA0  5ADD               	subwfb	postdec2,f,c
 22053  003EA2                     i2l10141:
 22054  003EA2  2A09               	incf	isr@cont^0,f,c
 22055  003EA4  0E02               	movlw	2
 22056  003EA6  6409               	cpfsgt	isr@cont^0,c
 22057  003EA8  D7E5               	goto	i2l10137
 22058                           
 22059                           ;main.c: 138: };main.c: 139: if(time_sd > 0) time_sd--;
 22060  003EAA  0101               	movlb	1	; () banked
 22061  003EAC  5163               	movf	_time_sd& (0+255),w,b
 22062  003EAE  1164               	iorwf	(_time_sd+1)& (0+255),w,b
 22063  003EB0  B4D8               	btfsc	status,2,c
 22064  003EB2  D003               	goto	i2l10149
 22065                           
 22066                           ; BSR set to: 1
 22067  003EB4  0763               	decf	_time_sd& (0+255),f,b
 22068  003EB6  A0D8               	btfss	status,0,c
 22069  003EB8  0764               	decf	(_time_sd+1)& (0+255),f,b
 22070  003EBA                     i2l10149:
 22071                           
 22072                           ; BSR set to: 1
 22073                           ;main.c: 140: if(time_atualizacao > 0) time_atualizacao--;
 22074  003EBA  515F               	movf	_time_atualizacao& (0+255),w,b
 22075  003EBC  1160               	iorwf	(_time_atualizacao+1)& (0+255),w,b
 22076  003EBE  B4D8               	btfsc	status,2,c
 22077  003EC0  D003               	goto	i2l10153
 22078                           
 22079                           ; BSR set to: 1
 22080  003EC2  075F               	decf	_time_atualizacao& (0+255),f,b
 22081  003EC4  A0D8               	btfss	status,0,c
 22082  003EC6  0760               	decf	(_time_atualizacao+1)& (0+255),f,b
 22083  003EC8                     i2l10153:
 22084                           
 22085                           ; BSR set to: 1
 22086                           ;main.c: 142: if(tarefa_em_execucao == 1)
 22087  003EC8  0452               	decf	_tarefa_em_execucao^0,w,c	;volatile
 22088  003ECA  A4D8               	btfss	status,2,c
 22089  003ECC  D00B               	goto	i2l10161
 22090                           
 22091                           ; BSR set to: 1
 22092                           ;main.c: 143: {;main.c: 144: timeout_tarefa--;
 22093  003ECE  0765               	decf	_timeout_tarefa& (0+255),f,b
 22094  003ED0  A0D8               	btfss	status,0,c
 22095  003ED2  0766               	decf	(_timeout_tarefa+1)& (0+255),f,b
 22096                           
 22097                           ; BSR set to: 1
 22098                           ;main.c: 145: if(!timeout_tarefa)
 22099  003ED4  5165               	movf	_timeout_tarefa& (0+255),w,b
 22100  003ED6  1166               	iorwf	(_timeout_tarefa+1)& (0+255),w,b
 22101  003ED8  A4D8               	btfss	status,2,c
 22102  003EDA  D004               	goto	i2l10161
 22103                           
 22104                           ; BSR set to: 1
 22105                           ;main.c: 146: {;main.c: 148: PCLATH = 0;
 22106  003EDC  0E00               	movlw	0
 22107  003EDE  6EFA               	movwf	250,c	;volatile
 22108                           
 22109                           ;main.c: 149: PCL = 0;
 22110  003EE0  0E00               	movlw	0
 22111  003EE2  6EF9               	movwf	249,c	;volatile
 22112  003EE4                     i2l10161:
 22113                           
 22114                           ; BSR set to: 1
 22115                           ;main.c: 150: };main.c: 151: };main.c: 155: write_timer_zero(0x45);
 22116  003EE4  0E00               	movlw	0
 22117  003EE6  6E02               	movwf	(i2write_timer_zero@timer0+1)^0,c
 22118  003EE8  0E45               	movlw	69
 22119  003EEA  6E01               	movwf	i2write_timer_zero@timer0^0,c
 22120  003EEC  EC5A  F02E         	call	i2_write_timer_zero	;wreg free
 22121  003EF0                     i2l10163:
 22122                           
 22123                           ;main.c: 156: };main.c: 158: if (INT0IF && INT0IE)
 22124  003EF0  B2F2               	btfsc	4082,1,c	;volatile
 22125  003EF2  A8F2               	btfss	4082,4,c	;volatile
 22126  003EF4  D001               	goto	i2l1550
 22127                           
 22128                           ;main.c: 159: {;main.c: 160: INT0IF = 0;
 22129  003EF6  92F2               	bcf	4082,1,c	;volatile
 22130  003EF8                     i2l1550:
 22131  003EF8  C008  FFF4         	movff	??_isr+5,prodh
 22132  003EFC  C007  FFF3         	movff	??_isr+4,prodl
 22133  003F00  C006  FFDA         	movff	??_isr+3,fsr2h
 22134  003F04  C005  FFD9         	movff	??_isr+2,fsr2l
 22135  003F08  9256               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 22136  003F0A  0011               	retfie		f
 22137  003F0C                     __end_of_isr:
 22138                           	callstack 0
 22139                           
 22140 ;; *************** function i2_write_timer_zero *****************
 22141 ;; Defined at:
 22142 ;;		line 134 in file "bibliotecas/hardware.c"
 22143 ;; Parameters:    Size  Location     Type
 22144 ;;  timer0          2    0[COMRAM] unsigned int 
 22145 ;; Auto vars:     Size  Location     Type
 22146 ;;		None
 22147 ;; Return value:  Size  Location     Type
 22148 ;;                  1    wreg      void 
 22149 ;; Registers used:
 22150 ;;		None
 22151 ;; Tracked objects:
 22152 ;;		On entry : 3F/1
 22153 ;;		On exit  : 3F/1
 22154 ;;		Unchanged: 3F/0
 22155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22156 ;;      Params:         2       0       0       0       0       0       0       0       0
 22157 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22158 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22159 ;;      Totals:         2       0       0       0       0       0       0       0       0
 22160 ;;Total ram usage:        2 bytes
 22161 ;; Hardware stack levels used:    1
 22162 ;; This function calls:
 22163 ;;		Nothing
 22164 ;; This function is called by:
 22165 ;;		_isr
 22166 ;; This function uses a non-reentrant model
 22167 ;;
 22168                           
 22169                           	psect	text133
 22170  005CB4                     __ptext133:
 22171                           	callstack 0
 22172  005CB4                     i2_write_timer_zero:
 22173                           	callstack 13
 22174                           
 22175                           ; BSR set to: 1
 22176                           ;hardware.c: 142: TMR0 = timer0;
 22177                           
 22178                           ;incstack = 0
 22179  005CB4  C001  FFD6         	movff	i2write_timer_zero@timer0,4054	;volatile
 22180  005CB8  C002  FFD7         	movff	i2write_timer_zero@timer0+1,4055	;volatile
 22181                           
 22182                           ; BSR set to: 1
 22183  005CBC  0012               	return		;funcret
 22184  005CBE                     __end_ofi2_write_timer_zero:
 22185                           	callstack 0
 22186                           
 22187 ;; *************** function _tratamento_uart *****************
 22188 ;; Defined at:
 22189 ;;		line 347 in file "bibliotecas/GPS.c"
 22190 ;; Parameters:    Size  Location     Type
 22191 ;;  received_cha    1    wreg     unsigned char 
 22192 ;; Auto vars:     Size  Location     Type
 22193 ;;  received_cha    1    0[COMRAM] unsigned char 
 22194 ;; Return value:  Size  Location     Type
 22195 ;;                  1    wreg      void 
 22196 ;; Registers used:
 22197 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22198 ;; Tracked objects:
 22199 ;;		On entry : 3F/0
 22200 ;;		On exit  : 3E/0
 22201 ;;		Unchanged: 0/0
 22202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22203 ;;      Params:         0       0       0       0       0       0       0       0       0
 22204 ;;      Locals:         1       0       0       0       0       0       0       0       0
 22205 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22206 ;;      Totals:         1       0       0       0       0       0       0       0       0
 22207 ;;Total ram usage:        1 bytes
 22208 ;; Hardware stack levels used:    1
 22209 ;; This function calls:
 22210 ;;		Nothing
 22211 ;; This function is called by:
 22212 ;;		_isr
 22213 ;; This function uses a non-reentrant model
 22214 ;;
 22215                           
 22216                           	psect	text134
 22217  003B12                     __ptext134:
 22218                           	callstack 0
 22219  003B12                     _tratamento_uart:
 22220                           	callstack 13
 22221                           
 22222                           ; BSR set to: 1
 22223                           ;incstack = 0
 22224                           ;tratamento_uart@received_char stored from wreg
 22225  003B12  6E01               	movwf	tratamento_uart@received_char^0,c
 22226                           
 22227                           ;GPS.c: 349: if(received_char =='$'){
 22228  003B14  0E24               	movlw	36
 22229  003B16  1801               	xorwf	tratamento_uart@received_char^0,w,c
 22230  003B18  A4D8               	btfss	status,2,c
 22231  003B1A  D011               	goto	i2l9913
 22232                           
 22233                           ;GPS.c: 350: gga_index = 0;
 22234  003B1C  0E00               	movlw	0
 22235  003B1E  0100               	movlb	0	; () banked
 22236  003B20  6FFA               	movwf	(_gga_index+1)& (0+255),b	;volatile
 22237  003B22  0E00               	movlw	0
 22238  003B24  6FF9               	movwf	_gga_index& (0+255),b	;volatile
 22239                           
 22240                           ;GPS.c: 351: rmc_index = 0;
 22241  003B26  0E00               	movlw	0
 22242  003B28  6FF8               	movwf	(_rmc_index+1)& (0+255),b	;volatile
 22243  003B2A  0E00               	movlw	0
 22244  003B2C  6FF7               	movwf	_rmc_index& (0+255),b	;volatile
 22245                           
 22246                           ;GPS.c: 352: is_it_gga_string = 0;
 22247  003B2E  0E00               	movlw	0
 22248  003B30  6E55               	movwf	_is_it_gga_string^0,c	;volatile
 22249                           
 22250                           ;GPS.c: 353: is_it_rmc_string = 0;
 22251  003B32  0E00               	movlw	0
 22252  003B34  6E54               	movwf	_is_it_rmc_string^0,c	;volatile
 22253                           
 22254                           ;GPS.c: 354: comma_counter_gga = 0;
 22255  003B36  0E00               	movlw	0
 22256  003B38  6FFF               	movwf	_comma_counter_gga& (0+255),b
 22257                           
 22258                           ;GPS.c: 355: comma_counter_rmc = 0;
 22259  003B3A  0E00               	movlw	0
 22260  003B3C  6FFE               	movwf	_comma_counter_rmc& (0+255),b
 22261  003B3E                     i2l9913:
 22262                           
 22263                           ;GPS.c: 356: };GPS.c: 358: if(is_it_gga_string == 1)
 22264  003B3E  0455               	decf	_is_it_gga_string^0,w,c	;volatile
 22265  003B40  A4D8               	btfss	status,2,c
 22266  003B42  D01A               	goto	i2l9923
 22267                           
 22268                           ;GPS.c: 359: {;GPS.c: 360: if(received_char == ',' )
 22269  003B44  0E2C               	movlw	44
 22270  003B46  1801               	xorwf	tratamento_uart@received_char^0,w,c
 22271  003B48  A4D8               	btfss	status,2,c
 22272  003B4A  D00A               	goto	i2l9921
 22273                           
 22274                           ;GPS.c: 361: {;GPS.c: 362: gga_pointers[comma_counter_gga++] = gga_index;
 22275  003B4C  0E16               	movlw	low _gga_pointers
 22276  003B4E  0100               	movlb	0	; () banked
 22277  003B50  25FF               	addwf	_comma_counter_gga& (0+255),w,b
 22278  003B52  6ED9               	movwf	fsr2l,c
 22279  003B54  6ADA               	clrf	fsr2h,c
 22280  003B56  0E02               	movlw	high _gga_pointers
 22281  003B58  22DA               	addwfc	fsr2h,f,c
 22282  003B5A  C0F9  FFDF         	movff	_gga_index,indf2	;volatile
 22283                           
 22284                           ; BSR set to: 0
 22285  003B5E  2BFF               	incf	_comma_counter_gga& (0+255),f,b
 22286  003B60                     i2l9921:
 22287                           
 22288                           ;GPS.c: 363: };GPS.c: 364: gga_buffer[gga_index++] = received_char;
 22289  003B60  0E00               	movlw	low _gga_buffer
 22290  003B62  0100               	movlb	0	; () banked
 22291  003B64  25F9               	addwf	_gga_index& (0+255),w,b	;volatile
 22292  003B66  6ED9               	movwf	fsr2l,c
 22293  003B68  0E03               	movlw	high _gga_buffer
 22294  003B6A  21FA               	addwfc	(_gga_index+1)& (0+255),w,b	;volatile
 22295  003B6C  6EDA               	movwf	fsr2h,c
 22296  003B6E  C001  FFDF         	movff	tratamento_uart@received_char,indf2
 22297  003B72  4BF9               	infsnz	_gga_index& (0+255),f,b	;volatile
 22298  003B74  2BFA               	incf	(_gga_index+1)& (0+255),f,b	;volatile
 22299                           
 22300                           ;GPS.c: 365: }
 22301  003B76  D01C               	goto	i2l9931
 22302  003B78                     i2l9923:
 22303                           
 22304                           ;GPS.c: 366: else if(gga_code[0] == 'G' && gga_code[1] == 'G' && gga_code[2] == 'A'){
 22305  003B78  0E47               	movlw	71
 22306  003B7A  0101               	movlb	1	; () banked
 22307  003B7C  194F               	xorwf	_gga_code& (0+255),w,b
 22308  003B7E  A4D8               	btfss	status,2,c
 22309  003B80  D011               	goto	i2l441
 22310                           
 22311                           ; BSR set to: 1
 22312  003B82  0E47               	movlw	71
 22313  003B84  1950               	xorwf	(_gga_code+1)& (0+255),w,b
 22314  003B86  A4D8               	btfss	status,2,c
 22315  003B88  D00D               	goto	i2l441
 22316                           
 22317                           ; BSR set to: 1
 22318  003B8A  0E41               	movlw	65
 22319  003B8C  1951               	xorwf	(_gga_code+2)& (0+255),w,b
 22320  003B8E  A4D8               	btfss	status,2,c
 22321  003B90  D009               	goto	i2l441
 22322                           
 22323                           ; BSR set to: 1
 22324                           ;GPS.c: 367: is_it_gga_string = 1;
 22325  003B92  0E01               	movlw	1
 22326  003B94  6E55               	movwf	_is_it_gga_string^0,c	;volatile
 22327                           
 22328                           ;GPS.c: 368: gga_code[0] = 0;
 22329  003B96  0E00               	movlw	0
 22330  003B98  6F4F               	movwf	_gga_code& (0+255),b
 22331                           
 22332                           ;GPS.c: 369: gga_code[1] = 0;
 22333  003B9A  0E00               	movlw	0
 22334  003B9C  6F50               	movwf	(_gga_code+1)& (0+255),b
 22335                           
 22336                           ;GPS.c: 370: gga_code[2] = 0;
 22337  003B9E  0E00               	movlw	0
 22338  003BA0  6F51               	movwf	(_gga_code+2)& (0+255),b
 22339                           
 22340                           ;GPS.c: 371: }
 22341  003BA2  D006               	goto	i2l9931
 22342  003BA4                     i2l441:
 22343                           
 22344                           ; BSR set to: 1
 22345                           ;GPS.c: 372: else{;GPS.c: 373: gga_code[0] = gga_code[1];
 22346  003BA4  C150  F14F         	movff	_gga_code+1,_gga_code
 22347                           
 22348                           ;GPS.c: 374: gga_code[1] = gga_code[2];
 22349  003BA8  C151  F150         	movff	_gga_code+2,_gga_code+1
 22350                           
 22351                           ;GPS.c: 375: gga_code[2] = received_char;
 22352  003BAC  C001  F151         	movff	tratamento_uart@received_char,_gga_code+2
 22353  003BB0                     i2l9931:
 22354                           
 22355                           ;GPS.c: 376: };GPS.c: 378: if(is_it_rmc_string == 1)
 22356  003BB0  0454               	decf	_is_it_rmc_string^0,w,c	;volatile
 22357  003BB2  A4D8               	btfss	status,2,c
 22358  003BB4  D01A               	goto	i2l9941
 22359                           
 22360                           ;GPS.c: 379: {;GPS.c: 380: if(received_char == ',' )
 22361  003BB6  0E2C               	movlw	44
 22362  003BB8  1801               	xorwf	tratamento_uart@received_char^0,w,c
 22363  003BBA  A4D8               	btfss	status,2,c
 22364  003BBC  D00A               	goto	i2l9939
 22365                           
 22366                           ;GPS.c: 381: {;GPS.c: 382: rmc_pointers[comma_counter_rmc++] = rmc_index;
 22367  003BBE  0E2A               	movlw	low _rmc_pointers
 22368  003BC0  0100               	movlb	0	; () banked
 22369  003BC2  25FE               	addwf	_comma_counter_rmc& (0+255),w,b
 22370  003BC4  6ED9               	movwf	fsr2l,c
 22371  003BC6  6ADA               	clrf	fsr2h,c
 22372  003BC8  0E02               	movlw	high _rmc_pointers
 22373  003BCA  22DA               	addwfc	fsr2h,f,c
 22374  003BCC  C0F7  FFDF         	movff	_rmc_index,indf2	;volatile
 22375                           
 22376                           ; BSR set to: 0
 22377  003BD0  2BFE               	incf	_comma_counter_rmc& (0+255),f,b
 22378  003BD2                     i2l9939:
 22379                           
 22380                           ;GPS.c: 383: };GPS.c: 384: rmc_buffer[rmc_index++] = received_char;
 22381  003BD2  0E50               	movlw	low _rmc_buffer
 22382  003BD4  0100               	movlb	0	; () banked
 22383  003BD6  25F7               	addwf	_rmc_index& (0+255),w,b	;volatile
 22384  003BD8  6ED9               	movwf	fsr2l,c
 22385  003BDA  0E03               	movlw	high _rmc_buffer
 22386  003BDC  21F8               	addwfc	(_rmc_index+1)& (0+255),w,b	;volatile
 22387  003BDE  6EDA               	movwf	fsr2h,c
 22388  003BE0  C001  FFDF         	movff	tratamento_uart@received_char,indf2
 22389  003BE4  4BF7               	infsnz	_rmc_index& (0+255),f,b	;volatile
 22390  003BE6  2BF8               	incf	(_rmc_index+1)& (0+255),f,b	;volatile
 22391                           
 22392                           ;GPS.c: 385: }
 22393  003BE8  0012               	return	
 22394  003BEA                     i2l9941:
 22395                           
 22396                           ;GPS.c: 386: else if(rmc_code[0] == 'R' && rmc_code[1] == 'M' && rmc_code[2] == 'C'){
 22397  003BEA  0E52               	movlw	82
 22398  003BEC  0101               	movlb	1	; () banked
 22399  003BEE  194C               	xorwf	_rmc_code& (0+255),w,b
 22400  003BF0  A4D8               	btfss	status,2,c
 22401  003BF2  D011               	goto	i2l446
 22402                           
 22403                           ; BSR set to: 1
 22404  003BF4  0E4D               	movlw	77
 22405  003BF6  194D               	xorwf	(_rmc_code+1)& (0+255),w,b
 22406  003BF8  A4D8               	btfss	status,2,c
 22407  003BFA  D00D               	goto	i2l446
 22408                           
 22409                           ; BSR set to: 1
 22410  003BFC  0E43               	movlw	67
 22411  003BFE  194E               	xorwf	(_rmc_code+2)& (0+255),w,b
 22412  003C00  A4D8               	btfss	status,2,c
 22413  003C02  D009               	goto	i2l446
 22414                           
 22415                           ; BSR set to: 1
 22416                           ;GPS.c: 387: is_it_rmc_string = 1;
 22417  003C04  0E01               	movlw	1
 22418  003C06  6E54               	movwf	_is_it_rmc_string^0,c	;volatile
 22419                           
 22420                           ;GPS.c: 388: rmc_code[0] = 0;
 22421  003C08  0E00               	movlw	0
 22422  003C0A  6F4C               	movwf	_rmc_code& (0+255),b
 22423                           
 22424                           ;GPS.c: 389: rmc_code[1] = 0;
 22425  003C0C  0E00               	movlw	0
 22426  003C0E  6F4D               	movwf	(_rmc_code+1)& (0+255),b
 22427                           
 22428                           ;GPS.c: 390: rmc_code[2] = 0;
 22429  003C10  0E00               	movlw	0
 22430  003C12  6F4E               	movwf	(_rmc_code+2)& (0+255),b
 22431                           
 22432                           ;GPS.c: 391: }
 22433  003C14  0012               	return	
 22434  003C16                     i2l446:
 22435                           
 22436                           ; BSR set to: 1
 22437                           ;GPS.c: 392: else{;GPS.c: 393: rmc_code[0] = rmc_code[1];
 22438  003C16  C14D  F14C         	movff	_rmc_code+1,_rmc_code
 22439                           
 22440                           ;GPS.c: 394: rmc_code[1] = rmc_code[2];
 22441  003C1A  C14E  F14D         	movff	_rmc_code+2,_rmc_code+1
 22442                           
 22443                           ;GPS.c: 395: rmc_code[2] = received_char;
 22444  003C1E  C001  F14E         	movff	tratamento_uart@received_char,_rmc_code+2
 22445  003C22  0012               	return		;funcret
 22446  003C24                     __end_of_tratamento_uart:
 22447                           	callstack 0
 22448                           
 22449 ;; *************** function _recebe_dado_uart *****************
 22450 ;; Defined at:
 22451 ;;		line 138 in file "bibliotecas/uart.c"
 22452 ;; Parameters:    Size  Location     Type
 22453 ;;		None
 22454 ;; Auto vars:     Size  Location     Type
 22455 ;;		None
 22456 ;; Return value:  Size  Location     Type
 22457 ;;                  1    wreg      unsigned char 
 22458 ;; Registers used:
 22459 ;;		wreg, status,2
 22460 ;; Tracked objects:
 22461 ;;		On entry : 0/0
 22462 ;;		On exit  : 0/0
 22463 ;;		Unchanged: 0/0
 22464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22465 ;;      Params:         0       0       0       0       0       0       0       0       0
 22466 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22467 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22468 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22469 ;;Total ram usage:        0 bytes
 22470 ;; Hardware stack levels used:    1
 22471 ;; This function calls:
 22472 ;;		Nothing
 22473 ;; This function is called by:
 22474 ;;		_isr
 22475 ;; This function uses a non-reentrant model
 22476 ;;
 22477                           
 22478                           	psect	text135
 22479  005BEA                     __ptext135:
 22480                           	callstack 0
 22481  005BEA                     _recebe_dado_uart:
 22482                           	callstack 13
 22483                           
 22484                           ;uart.c: 140: while(RCIF==0);
 22485                           
 22486                           ;incstack = 0
 22487  005BEA  AA9E               	btfss	3998,5,c	;volatile
 22488  005BEC  D7FE               	goto	_recebe_dado_uart
 22489                           
 22490                           ;uart.c: 141: if(RCSTAbits.OERR)
 22491  005BEE  A2AB               	btfss	171,1,c	;volatile
 22492  005BF0  D003               	goto	i2l10051
 22493                           
 22494                           ;uart.c: 142: {;uart.c: 143: CREN = 0;
 22495  005BF2  98AB               	bcf	4011,4,c	;volatile
 22496                           
 22497                           ;uart.c: 144: __nop();
 22498  005BF4  F000               	nop	
 22499                           
 22500                           ;uart.c: 145: CREN=1;
 22501  005BF6  88AB               	bsf	4011,4,c	;volatile
 22502  005BF8                     i2l10051:
 22503                           
 22504                           ;uart.c: 146: };uart.c: 147: return(RCREG);
 22505  005BF8  50AE               	movf	174,w,c	;volatile
 22506  005BFA  0012               	return		;funcret
 22507  005BFC                     __end_of_recebe_dado_uart:
 22508                           	callstack 0
 22509                           
 22510                           	psect	text136
 22511  000000                     __ptext136:
 22512                           	callstack 0
 22513                           
 22514                           	psect	rparam
 22515  0000                     
 22516                           	psect	temp
 22517  000056                     btemp:
 22518                           	callstack 0
 22519  000056                     	ds	1
 22520  0000                     int$flags	set	btemp
 22521  0000                     wtemp8	set	btemp+1
 22522  0000                     ttemp5	set	btemp+1
 22523  0000                     ttemp6	set	btemp+4
 22524  0000                     ttemp7	set	btemp+8
 22525                           
 22526                           	psect	idloc
 22527                           
 22528                           ;Config register IDLOC0 @ 0x200000
 22529                           ;	unspecified, using default values
 22530  200000                     	org	2097152
 22531  200000  FF                 	db	255
 22532                           
 22533                           ;Config register IDLOC1 @ 0x200001
 22534                           ;	unspecified, using default values
 22535  200001                     	org	2097153
 22536  200001  FF                 	db	255
 22537                           
 22538                           ;Config register IDLOC2 @ 0x200002
 22539                           ;	unspecified, using default values
 22540  200002                     	org	2097154
 22541  200002  FF                 	db	255
 22542                           
 22543                           ;Config register IDLOC3 @ 0x200003
 22544                           ;	unspecified, using default values
 22545  200003                     	org	2097155
 22546  200003  FF                 	db	255
 22547                           
 22548                           ;Config register IDLOC4 @ 0x200004
 22549                           ;	unspecified, using default values
 22550  200004                     	org	2097156
 22551  200004  FF                 	db	255
 22552                           
 22553                           ;Config register IDLOC5 @ 0x200005
 22554                           ;	unspecified, using default values
 22555  200005                     	org	2097157
 22556  200005  FF                 	db	255
 22557                           
 22558                           ;Config register IDLOC6 @ 0x200006
 22559                           ;	unspecified, using default values
 22560  200006                     	org	2097158
 22561  200006  FF                 	db	255
 22562                           
 22563                           ;Config register IDLOC7 @ 0x200007
 22564                           ;	unspecified, using default values
 22565  200007                     	org	2097159
 22566  200007  FF                 	db	255
 22567                           
 22568                           	psect	config
 22569                           
 22570                           ;Config register CONFIG1L @ 0x300000
 22571                           ;	unspecified, using default values
 22572                           ;	PLL Prescaler Selection bits
 22573                           ;	PLLDIV = 0x0, unprogrammed default
 22574                           ;	System Clock Postscaler Selection bits
 22575                           ;	CPUDIV = 0x0, unprogrammed default
 22576                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
 22577                           ;	USBDIV = 0x0, unprogrammed default
 22578  300000                     	org	3145728
 22579  300000  00                 	db	0
 22580                           
 22581                           ;Config register CONFIG1H @ 0x300001
 22582                           ;	unspecified, using default values
 22583                           ;	Oscillator Selection bits
 22584                           ;	FOSC = 0x5, unprogrammed default
 22585                           ;	Fail-Safe Clock Monitor Enable bit
 22586                           ;	FCMEN = 0x0, unprogrammed default
 22587                           ;	Internal/External Oscillator Switchover bit
 22588                           ;	IESO = 0x0, unprogrammed default
 22589  300001                     	org	3145729
 22590  300001  05                 	db	5
 22591                           
 22592                           ;Config register CONFIG2L @ 0x300002
 22593                           ;	unspecified, using default values
 22594                           ;	Power-up Timer Enable bit
 22595                           ;	PWRT = 0x1, unprogrammed default
 22596                           ;	Brown-out Reset Enable bits
 22597                           ;	BOR = 0x3, unprogrammed default
 22598                           ;	Brown-out Reset Voltage bits
 22599                           ;	BORV = 0x3, unprogrammed default
 22600                           ;	USB Voltage Regulator Enable bit
 22601                           ;	VREGEN = 0x0, unprogrammed default
 22602  300002                     	org	3145730
 22603  300002  1F                 	db	31
 22604                           
 22605                           ;Config register CONFIG2H @ 0x300003
 22606                           ;	unspecified, using default values
 22607                           ;	Watchdog Timer Enable bit
 22608                           ;	WDT = 0x1, unprogrammed default
 22609                           ;	Watchdog Timer Postscale Select bits
 22610                           ;	WDTPS = 0xF, unprogrammed default
 22611  300003                     	org	3145731
 22612  300003  1F                 	db	31
 22613                           
 22614                           ; Padding undefined space
 22615  300004                     	org	3145732
 22616  300004  FF                 	db	255
 22617                           
 22618                           ;Config register CONFIG3H @ 0x300005
 22619                           ;	unspecified, using default values
 22620                           ;	CCP2 MUX bit
 22621                           ;	CCP2MX = 0x1, unprogrammed default
 22622                           ;	PORTB A/D Enable bit
 22623                           ;	PBADEN = 0x1, unprogrammed default
 22624                           ;	Low-Power Timer 1 Oscillator Enable bit
 22625                           ;	LPT1OSC = 0x0, unprogrammed default
 22626                           ;	MCLR Pin Enable bit
 22627                           ;	MCLRE = 0x1, unprogrammed default
 22628  300005                     	org	3145733
 22629  300005  83                 	db	131
 22630                           
 22631                           ;Config register CONFIG4L @ 0x300006
 22632                           ;	unspecified, using default values
 22633                           ;	Stack Full/Underflow Reset Enable bit
 22634                           ;	STVREN = 0x1, unprogrammed default
 22635                           ;	Single-Supply ICSP Enable bit
 22636                           ;	LVP = 0x1, unprogrammed default
 22637                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
 22638                           ;	ICPRT = 0x0, unprogrammed default
 22639                           ;	Extended Instruction Set Enable bit
 22640                           ;	XINST = 0x0, unprogrammed default
 22641                           ;	Background Debugger Enable bit
 22642                           ;	DEBUG = 0x1, unprogrammed default
 22643  300006                     	org	3145734
 22644  300006  85                 	db	133
 22645                           
 22646                           ; Padding undefined space
 22647  300007                     	org	3145735
 22648  300007  FF                 	db	255
 22649                           
 22650                           ;Config register CONFIG5L @ 0x300008
 22651                           ;	unspecified, using default values
 22652                           ;	Code Protection bit
 22653                           ;	CP0 = 0x1, unprogrammed default
 22654                           ;	Code Protection bit
 22655                           ;	CP1 = 0x1, unprogrammed default
 22656                           ;	Code Protection bit
 22657                           ;	CP2 = 0x1, unprogrammed default
 22658                           ;	Code Protection bit
 22659                           ;	CP3 = 0x1, unprogrammed default
 22660  300008                     	org	3145736
 22661  300008  0F                 	db	15
 22662                           
 22663                           ;Config register CONFIG5H @ 0x300009
 22664                           ;	unspecified, using default values
 22665                           ;	Boot Block Code Protection bit
 22666                           ;	CPB = 0x1, unprogrammed default
 22667                           ;	Data EEPROM Code Protection bit
 22668                           ;	CPD = 0x1, unprogrammed default
 22669  300009                     	org	3145737
 22670  300009  C0                 	db	192
 22671                           
 22672                           ;Config register CONFIG6L @ 0x30000A
 22673                           ;	unspecified, using default values
 22674                           ;	Write Protection bit
 22675                           ;	WRT0 = 0x1, unprogrammed default
 22676                           ;	Write Protection bit
 22677                           ;	WRT1 = 0x1, unprogrammed default
 22678                           ;	Write Protection bit
 22679                           ;	WRT2 = 0x1, unprogrammed default
 22680                           ;	Write Protection bit
 22681                           ;	WRT3 = 0x1, unprogrammed default
 22682  30000A                     	org	3145738
 22683  30000A  0F                 	db	15
 22684                           
 22685                           ;Config register CONFIG6H @ 0x30000B
 22686                           ;	unspecified, using default values
 22687                           ;	Configuration Register Write Protection bit
 22688                           ;	WRTC = 0x1, unprogrammed default
 22689                           ;	Boot Block Write Protection bit
 22690                           ;	WRTB = 0x1, unprogrammed default
 22691                           ;	Data EEPROM Write Protection bit
 22692                           ;	WRTD = 0x1, unprogrammed default
 22693  30000B                     	org	3145739
 22694  30000B  E0                 	db	224
 22695                           
 22696                           ;Config register CONFIG7L @ 0x30000C
 22697                           ;	unspecified, using default values
 22698                           ;	Table Read Protection bit
 22699                           ;	EBTR0 = 0x1, unprogrammed default
 22700                           ;	Table Read Protection bit
 22701                           ;	EBTR1 = 0x1, unprogrammed default
 22702                           ;	Table Read Protection bit
 22703                           ;	EBTR2 = 0x1, unprogrammed default
 22704                           ;	Table Read Protection bit
 22705                           ;	EBTR3 = 0x1, unprogrammed default
 22706  30000C                     	org	3145740
 22707  30000C  0F                 	db	15
 22708                           
 22709                           ;Config register CONFIG7H @ 0x30000D
 22710                           ;	unspecified, using default values
 22711                           ;	Boot Block Table Read Protection bit
 22712                           ;	EBTRB = 0x1, unprogrammed default
 22713  30000D                     	org	3145741
 22714  30000D  40                 	db	64
 22715                           tosu	equ	0xFFF
 22716                           tosh	equ	0xFFE
 22717                           tosl	equ	0xFFD
 22718                           stkptr	equ	0xFFC
 22719                           pclatu	equ	0xFFB
 22720                           pclath	equ	0xFFA
 22721                           pcl	equ	0xFF9
 22722                           tblptru	equ	0xFF8
 22723                           tblptrh	equ	0xFF7
 22724                           tblptrl	equ	0xFF6
 22725                           tablat	equ	0xFF5
 22726                           prodh	equ	0xFF4
 22727                           prodl	equ	0xFF3
 22728                           indf0	equ	0xFEF
 22729                           postinc0	equ	0xFEE
 22730                           postdec0	equ	0xFED
 22731                           preinc0	equ	0xFEC
 22732                           plusw0	equ	0xFEB
 22733                           fsr0h	equ	0xFEA
 22734                           fsr0l	equ	0xFE9
 22735                           wreg	equ	0xFE8
 22736                           indf1	equ	0xFE7
 22737                           postinc1	equ	0xFE6
 22738                           postdec1	equ	0xFE5
 22739                           preinc1	equ	0xFE4
 22740                           plusw1	equ	0xFE3
 22741                           fsr1h	equ	0xFE2
 22742                           fsr1l	equ	0xFE1
 22743                           bsr	equ	0xFE0
 22744                           indf2	equ	0xFDF
 22745                           postinc2	equ	0xFDE
 22746                           postdec2	equ	0xFDD
 22747                           preinc2	equ	0xFDC
 22748                           plusw2	equ	0xFDB
 22749                           fsr2h	equ	0xFDA
 22750                           fsr2l	equ	0xFD9
 22751                           status	equ	0xFD8

Data Sizes:
    Strings     262
    Constant    118
    Data        120
    BSS         1094
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     76      85
    BANK0           160    135     160
    BANK1           256      0     255
    BANK2           256     19     250
    BANK3           256      0     150
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$3669	PTR FTN()void  size(2) Largest target is 1
		 -> troca_de_tela(), disparo_gravacao(), verifica_dados_operacionais(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    temp_buff_long	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    point_buff_gps_long	PTR volatile unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    point_buff_gps_lat	PTR volatile unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    teste	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 36
		 -> disparo_gravacao@velocidade(BANK2[12]), dados_data(BANK2[18]), dados_hora(BANK2[18]), dados_long(BANK2[36]), 
		 -> dados_lat(BANK2[33]), STR_21(CODE[7]), STR_20(CODE[7]), rawSpeed(BANK2[20]), 
		 -> rawDate(BANK1[6]), rawLongitude(BANK1[13]), rawLatitude(BANK1[12]), rawTime(BANK1[7]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 36
		 -> disparo_gravacao@velocidade(BANK2[12]), dados_data(BANK2[18]), dados_hora(BANK2[18]), dados_long(BANK2[36]), 
		 -> dados_lat(BANK2[33]), STR_21(CODE[7]), STR_20(CODE[7]), rawSpeed(BANK2[20]), 
		 -> rawDate(BANK1[6]), rawLongitude(BANK1[13]), rawLatitude(BANK1[12]), rawTime(BANK1[7]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 13
		 -> rawDate(BANK1[6]), rawLongitude(BANK1[13]), rawLatitude(BANK1[12]), rawTime(BANK1[7]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 36
		 -> dados_data(BANK2[18]), dados_hora(BANK2[18]), dados_long(BANK2[36]), dados_lat(BANK2[33]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 36
		 -> dados_data(BANK2[18]), dados_hora(BANK2[18]), dados_long(BANK2[36]), dados_lat(BANK2[33]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 20
		 -> filename(BANK2[20]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 20
		 -> filename(BANK2[20]), 

    memset@p1	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memset@p	PTR unsigned char  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d1	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK0[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK0[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), STR_17(CODE[4]), 

    memcmp@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    ultoa@buf	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), 

    sp__ultoa	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), 

    ltoa@buf	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), 

    ltoa@cp	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 18
		 -> disparo_gravacao@velocidade(BANK2[12]), escreve_inteiro_uart@valor_final(COMRAM[7]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 18
		 -> disparo_gravacao@velocidade(BANK2[12]), escreve_inteiro_uart@valor_final(COMRAM[7]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 18
		 -> disparo_gravacao@velocidade(BANK2[12]), escreve_inteiro_uart@valor_final(COMRAM[7]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 18
		 -> disparo_gravacao@velocidade(BANK2[12]), escreve_inteiro_uart@valor_final(COMRAM[7]), 

    atol@s	PTR const unsigned char  size(2) Largest target is 44
		 -> convert_to_int_point_long@convert_str_long(COMRAM[10]), convert_to_int_point_lat@convert_str_lat(COMRAM[9]), fence_diff_long(CODE[44]), fence_diff_lat(CODE[40]), 

    atoi@s	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), NULL(NULL[0]), rawSpeed(BANK2[20]), 

    temp_buff_lat	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    convert_to_int_point_lat@temp_str_lat	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    convert_to_int@p_buff	PTR const unsigned char  size(2) Largest target is 44
		 -> fence_diff_long(CODE[44]), fence_diff_lat(CODE[40]), 

    armazena_ltlo@buffer	PTR unsigned char  size(1) Largest target is 11
		 -> longitude_to_convert@longitude(BANK0[11]), latitude_to_convert@latitude(BANK0[9]), 

    troca_de_tela@fix_signal	PTR unsigned char  size(2) Largest target is 2
		 -> rawFix(BANK1[2]), 

    disparo_gravacao@velocidade	PTR unsigned char [6] size(2) Largest target is 0

    disparo_gravacao@fix_gps	PTR unsigned char  size(2) Largest target is 2
		 -> rawFix(BANK1[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 36
		 -> dados_data(BANK2[18]), dados_hora(BANK2[18]), dados_long(BANK2[36]), dados_lat(BANK2[33]), 

    verifica_dados_operacionais@velocidade_atual	PTR unsigned char  size(2) Largest target is 20
		 -> NULL(NULL[0]), rawSpeed(BANK2[20]), 

    p_tarefas	PTR FTN()void [3] size(2) Largest target is 1
		 -> troca_de_tela(), disparo_gravacao(), verifica_dados_operacionais(), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 18
		 -> disparo_gravacao@velocidade(BANK2[12]), escreve_inteiro_uart@valor_final(COMRAM[7]), 

    fprintf@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fprintf@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_15(CODE[6]), STR_14(CODE[10]), STR_13(CODE[10]), STR_12(CODE[15]), 

    fprintf@arp	PTR void [1] size(1) Largest target is 2
		 -> ?_fprintf(BANK0[2]), 

    fputs@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fputs@str	PTR const unsigned char  size(2) Largest target is 16
		 -> fprintf@s(BANK0[16]), ?_fprintf(BANK0[2]), fence(BANK1[6]), lo(BANK1[13]), 
		 -> lt(BANK1[12]), vel(BANK1[6]), hora(BANK1[7]), 

    fputc@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    sp__fgets	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_readdir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_opendir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@bw	PTR unsigned int  size(1) Largest target is 2
		 -> fputc@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(1) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_write@wbuff	PTR const unsigned char  size(1) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__memcpy	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_16(CODE[13]), filename(BANK2[20]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> fs(BIGRAM[544]), 

    validate@fs	PTR const struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@path	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> f_opendir@path(COMRAM[2]), f_open@path(BANK0[2]), 

    auto_mount@p	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_16(CODE[13]), filename(BANK2[20]), 

    check_fs@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dir	PTR PTR unsigned char  size(1) Largest target is 2
		 -> f_open@dir(BANK0[2]), 

    reserve_direntry@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj	PTR struct _DIR_E size(1) Largest target is 15
		 -> f_open@dj(BANK0[14]), 

    reserve_direntry@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), 

    trace_path@dir	PTR PTR unsigned char  size(1) Largest target is 2
		 -> f_opendir@dir(COMRAM[2]), f_open@dir(BANK0[2]), 

    trace_path@path	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_16(CODE[13]), filename(BANK2[20]), 

    trace_path@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dj	PTR struct _DIR_E size(1) Largest target is 15
		 -> f_open@dj(BANK0[14]), 

    trace_path@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@path	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> trace_path@path(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@dirname	PTR unsigned char  size(1) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), 

    S1467_DIR_E$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj	PTR struct _DIR_E size(1) Largest target is 15
		 -> f_open@dj(BANK0[14]), 

    clust2sect@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    create_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    remove_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@p	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    get_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sync@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    FatFs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    move_window@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    hora_nome@p_buff	PTR unsigned char  size(2) Largest target is 7
		 -> hora(BANK1[7]), 

    data_nome@p_buff	PTR unsigned char  size(2) Largest target is 6
		 -> data(BANK1[6]), 

    monta_sd@dado	PTR unsigned char  size(2) Largest target is 36
		 -> disparo_gravacao@velocidade(BANK2[12]), dados_data(BANK2[18]), dados_hora(BANK2[18]), dados_long(BANK2[36]), 
		 -> dados_lat(BANK2[33]), STR_21(CODE[7]), STR_20(CODE[7]), rawSpeed(BANK2[20]), 
		 -> rawDate(BANK1[6]), rawLongitude(BANK1[13]), rawLatitude(BANK1[12]), rawTime(BANK1[7]), 

    sp__leitura_sdcard	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK2[20]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 20
		 -> filename(BANK2[20]), 

    S796_FIL$dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    S796_FIL$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__Speed	PTR unsigned char  size(2) Largest target is 20
		 -> rawSpeed(BANK2[20]), 

    sp__rawdata	PTR unsigned char  size(2) Largest target is 6
		 -> rawDate(BANK1[6]), 

    sp__rawhora	PTR unsigned char  size(2) Largest target is 7
		 -> rawTime(BANK1[7]), 

    sp__longitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLongitude(BANK1[13]), 

    sp__latitude	PTR unsigned char  size(2) Largest target is 12
		 -> rawLatitude(BANK1[12]), 

    sp__fix	PTR unsigned char  size(2) Largest target is 2
		 -> rawFix(BANK1[2]), 

    gps@flag_fix	PTR unsigned char  size(2) Largest target is 2
		 -> rawFix(BANK1[2]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 21
		 -> STR_33(CODE[8]), STR_32(CODE[9]), STR_31(CODE[4]), STR_30(CODE[4]), 
		 -> STR_29(CODE[5]), STR_28(CODE[2]), STR_27(CODE[5]), STR_26(CODE[7]), 
		 -> STR_25(CODE[7]), STR_24(CODE[2]), STR_23(CODE[5]), STR_22(CODE[7]), 
		 -> STR_19(CODE[11]), mensagem_inicial@msg_dois(COMRAM[17]), mensagem_inicial@msg_linha_um(COMRAM[17]), STR_10(CODE[9]), 
		 -> STR_9(CODE[10]), STR_8(CODE[10]), STR_7(CODE[14]), STR_6(CODE[21]), 
		 -> STR_5(CODE[15]), rawLongitude(BANK1[13]), rawLatitude(BANK1[12]), escreve_inteiro_lcd@texto(COMRAM[7]), 
		 -> STR_4(CODE[11]), STR_3(CODE[10]), STR_2(CODE[16]), STR_1(CODE[11]), 

    sp__ltoa	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_lcd@texto(COMRAM[7]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _verifica_dados_operacionais->___fttol
    _strcpy->_latitude
    _strcpy->_longitude
    _strcpy->_rawdata
    _strcpy->_rawhora
    ___fttol->___ftmul
    ___ftmul->___awtoft
    ___awtoft->_atoi
    _troca_de_tela->_escreve_inteiro_lcd
    _mostra_dados_display->_posicao_cursor_lcd
    _escreve_inteiro_lcd->_ltoa
    _ltoa->_ultoa
    _ultoa->___lldiv
    _escreve_cmd_lcd->_delay
    _verifica_fence->_latitude_to_convert
    _verifica_fence->_longitude_to_convert
    _longitude_to_convert->_armazena_ltlo
    _latitude_to_convert->_armazena_ltlo
    _armazena_ltlo->_diferenca
    _diferenca->_convert_to_int_point_lat
    _convert_to_int_point_long->_atol
    _convert_to_int_point_lat->_atol
    _convert_to_int->_atol
    _atol->___lmul
    _itoa->_utoa
    _utoa->___lwdiv
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _escrita_sdcard->_f_close
    _gps->_get_fix
    _get_fix->_posicao_cursor_lcd
    _fprintf->_fputs
    _trace_path->_next_dir_entry
    _make_dirfile->_memset
    _reserve_direntry->_next_dir_entry
    _next_dir_entry->_get_cluster
    _clust2sect->___lmul
    _remove_chain->_get_cluster
    _auto_mount->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_command
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _check_fs->_disk_read
    _f_lseek->_get_cluster
    _create_chain->_get_cluster
    _put_cluster->_move_window
    _get_cluster->_move_window
    _f_sync->_sync
    _validate->_disk_status
    _disk_status->_sdc_disk_status
    _sync->_move_window
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_command
    _proceed->_escreve_SPI
    _command->_dummy_clocks
    _command->_wait_ready
    _get_fattime->_gps_ano
    _get_fattime->_gps_dia
    _get_fattime->_gps_hora
    _get_fattime->_gps_mes
    _get_fattime->_gps_minutos
    _get_fattime->_gps_segundos
    _dados_gps_to_sd->_monta_sd
    _monta_sd->___wmul
    _atoi->___wmul

Critical Paths under _isr in COMRAM

    _isr->i2_write_timer_zero

Critical Paths under _main in BANK0

    _main->_escalonador
    _escalonador->_disparo_gravacao
    _verifica_fence->_longitude_to_convert
    _escrita_sdcard->_fprintf
    _fprintf->_fputs
    _fputs->_fputc
    _fputc->_f_write
    _f_write->_create_chain
    _f_open->_reserve_direntry
    _trace_path->_next_dir_entry
    _reserve_direntry->_create_chain
    _next_dir_entry->_get_cluster
    _remove_chain->_put_cluster
    _f_lseek->_create_chain
    _create_chain->_put_cluster
    _f_close->_f_sync

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _escalonador->_disparo_gravacao

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  506873
                        _escalonador
                                _gps
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    7033
                                             15 COMRAM    36    36      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             12 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     148
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     148
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     2     0      2     148
                                              9 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  493106
                                            132 BANK0      3     3      0
                   _disparo_gravacao *
                      _troca_de_tela *
        _verifica_dados_operacionais *
 ---------------------------------------------------------------------------------
 (2) _verifica_dados_operacionais                          6     6      0   10450
                                             57 COMRAM     6     6      0
                              _Speed
                           ___awtoft
                            ___ftmul
                            ___fttol
                               _atoi
                           _latitude
                          _longitude
                            _rawdata
                            _rawhora
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     829
                                             11 COMRAM     6     2      4
                           _latitude (ARG)
                          _longitude (ARG)
                            _rawdata (ARG)
                            _rawhora (ARG)
 ---------------------------------------------------------------------------------
 (3) _rawhora                                              2     0      2       0
                                              9 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _rawdata                                              2     0      2       0
                                              9 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _longitude                                            2     0      2       0
                                              9 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _latitude                                             2     0      2       0
                                              9 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     517
                                             42 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                               _atoi (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3498
                                             27 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                               _atoi (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3059
                                             23 COMRAM     4     1      3
                           ___ftpack
                               _atoi (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2766
                                              9 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _Speed                                                2     0      2       0
                                              9 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _troca_de_tela                                        3     3      0   20487
                                             53 COMRAM     3     3      0
              _escreve_caractere_lcd
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                                _fix
               _mostra_dados_display
                 _posicao_cursor_lcd
                    _recebe_dado_gps
 ---------------------------------------------------------------------------------
 (3) _mostra_dados_display                                 0     0      0    6476
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_inteiro_lcd                                 11     7      4    6532
                                             42 COMRAM    11     7      4
              _escreve_frase_ram_lcd
                               _ltoa
 ---------------------------------------------------------------------------------
 (4) _ltoa                                                 8     1      7    3063
                                             34 COMRAM     8     1      7
                              _ultoa
 ---------------------------------------------------------------------------------
 (5) _ultoa                                               12     5      7    2560
                                             22 COMRAM    12     5      7
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             11 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _disparo_gravacao                                    24    24      0  461863
                                            127 BANK0      5     5      0
                                              0 BANK2     19    19      0
                             ___wmul
                               _atoi
                    _dados_gps_to_sd
                                _fix
                           _grava_sd
                               _itoa
                           _monta_sd
                    _recebe_dado_gps
                     _verifica_fence
 ---------------------------------------------------------------------------------
 (3) _verifica_fence                                       1     1      0   16517
                                             66 COMRAM     1     1      0
                _latitude_to_convert
               _longitude_to_convert
                           _monta_sd
                    _recebe_dado_gps
        _verifica_plausibilidade_lat
       _verifica_plausibilidade_long
 ---------------------------------------------------------------------------------
 (4) _verifica_plausibilidade_long                         1     1      0      34
                                              9 COMRAM     1     1      0
                       _posicao_long
 ---------------------------------------------------------------------------------
 (5) _posicao_long                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _verifica_plausibilidade_lat                          1     1      0      34
                                              9 COMRAM     1     1      0
                        _posicao_lat
 ---------------------------------------------------------------------------------
 (5) _posicao_lat                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _recebe_dado_gps                                      2     2      0      74
                                              9 COMRAM     2     2      0
                 _verifica_recep_gps
 ---------------------------------------------------------------------------------
 (4) _verifica_recep_gps                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _longitude_to_convert                                14    14      0    6759
                                             65 COMRAM     1     1      0
                                              0 BANK0     13    13      0
                      _armazena_ltlo
 ---------------------------------------------------------------------------------
 (4) _latitude_to_convert                                 12    12      0    6759
                                             65 COMRAM     1     1      0
                                              0 BANK0     11    11      0
                      _armazena_ltlo
 ---------------------------------------------------------------------------------
 (5) _armazena_ltlo                                        4     2      2    6419
                                             61 COMRAM     4     2      2
                          _diferenca
 ---------------------------------------------------------------------------------
 (6) _diferenca                                            9     9      0    5657
                                             52 COMRAM     9     9      0
                     _convert_to_int
           _convert_to_int_point_lat
          _convert_to_int_point_long
 ---------------------------------------------------------------------------------
 (7) _convert_to_int_point_long                           19    15      4    1782
                                             35 COMRAM    16    12      4
                               _atol
 ---------------------------------------------------------------------------------
 (7) _convert_to_int_point_lat                            17    13      4    1785
                                             35 COMRAM    17    13      4
                               _atol
 ---------------------------------------------------------------------------------
 (7) _convert_to_int                                       4     0      4    1929
                                             35 COMRAM     4     0      4
                               _atol
 ---------------------------------------------------------------------------------
 (8) _atol                                                14    10      4    1535
                                             21 COMRAM    14    10      4
                             ___lmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    3934
                                             25 COMRAM     8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6    3065
                                             16 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     972
                                              9 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4    1161
                                              9 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _grava_sd                                             0     0      0  430507
                        _desliga_SPI
                       _desliga_uart
                     _escrita_sdcard
                     _inicializa_SPI
                    _inicializa_uart
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             23 COMRAM    14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                              9 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (4) _inicializa_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _escrita_sdcard                                       7     7      0  429389
                          _data_nome
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _fprintf
                                _gps
                          _hora_nome
                             _strcat
 ---------------------------------------------------------------------------------
 (5) _strcat                                               6     2      4     323
                                              9 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _hora_nome                                            3     1      2     223
                                              9 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _gps                                                  3     3      0    4855
                                             17 COMRAM     3     3      0
                                _fix
                            _get_fix
                        _get_gpstime
                       _get_latitude
                      _get_longitude
                        _get_rawdate
                       _get_rawspeed
 ---------------------------------------------------------------------------------
 (2) _get_rawspeed                                         2     2      0     136
                                              9 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _get_rawdate                                          2     2      0     136
                                              9 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _get_longitude                                        2     2      0     136
                                              9 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _get_latitude                                        17    17      0     136
                                              9 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _get_gpstime                                         16    16      0     130
                                              9 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _get_fix                                              2     2      0    4147
                                             15 COMRAM     2     2      0
              _escreve_caractere_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (2) _fix                                                  2     0      2       0
                                              9 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _fprintf                                             46    36     10  131436
                                             81 BANK0     46    36     10
                            ___lldiv
                            ___llmod
                             ___wmul
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4   62687
                                             75 COMRAM     1     1      0
                                             75 BANK0      6     2      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                7     3      4   62194
                                             68 BANK0      7     3      4
                            _f_write
 ---------------------------------------------------------------------------------
 (8) _f_write                                             30    24      6   61382
                                             38 BANK0     30    24      6
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     592
                                              9 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (5) _f_open                                              44    39      5  205194
                                             56 BANK0     44    39      5
                         _auto_mount
                        _get_fattime
                             _memcpy
                             _memset
                        _move_window
                       _remove_chain
                   _reserve_direntry
                         _trace_path
 ---------------------------------------------------------------------------------
 (6) _trace_path                                          20    15      5   39801
                                             30 BANK0     20    15      5
                         _clust2sect
                       _make_dirfile
                             _memcmp
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (7) _make_dirfile                                        11     9      2    2753
                                             17 COMRAM    11     9      2
                             _memset
 ---------------------------------------------------------------------------------
 (6) _reserve_direntry                                    18    16      2   78208
                                             38 BANK0     18    16      2
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memset
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (7) _next_dir_entry                                      12    11      1   19144
                                             75 COMRAM     1     0      1
                                             19 BANK0     11    11      0
                         _clust2sect
                        _get_cluster
 ---------------------------------------------------------------------------------
 (9) _clust2sect                                          11     7      4    1615
                                             21 COMRAM    11     7      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) _remove_chain                                         8     6      2   34118
                                             24 BANK0      8     6      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (9) _memcpy                                              11     5      6     970
                                              9 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (6) _auto_mount                                          46    44      2   33382
                                             60 COMRAM     2     0      2
                                              0 BANK0     44    44      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                             _memset
 ---------------------------------------------------------------------------------
 (8) _memset                                               8     2      6    1217
                                              9 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (7) _disk_initialize                                      4     4      0   21194
                                             41 COMRAM     2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (8) _sdc_disk_initialize                                 13    13      0   21064
                                             28 COMRAM    13    13      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (9) _sdc_reset                                           20    20      0   10098
                                             21 COMRAM     7     7      0
                            _command
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    3627
                                             12 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             11 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2849
                                             12 COMRAM     2     0      2
              _escreve_caractere_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             11 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                              9 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _check_fs                                             8     4      4    6616
                                             52 COMRAM     8     4      4
                          _disk_read
                             _memcmp
 ---------------------------------------------------------------------------------
 (7) _memcmp                                               8     2      6     701
                                              9 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (9) ___lmul                                              12     4      8     696
                                              9 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) _f_mount                                              3     1      2     354
                                              9 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (5) _f_lseek                                             33    27      6   56356
                                             38 BANK0     33    27      6
                            ___lldiv
                       _create_chain
                        _get_cluster
                           _validate
 ---------------------------------------------------------------------------------
 (9) _create_chain                                        14    12      2   35181
                                             24 BANK0     14    12      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (10) _put_cluster                                        24    20      4   17025
                                              0 BANK0     24    20      4
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (10) _get_cluster                                        21    19      2   16715
                                             73 COMRAM     2     0      2
                                              0 BANK0     19    19      0
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8    1261
                                              9 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (5) _f_close                                              3     1      2   30425
                                             75 COMRAM     1     1      0
                                              9 BANK0      2     0      2
                             _f_sync
 ---------------------------------------------------------------------------------
 (6) _f_sync                                               9     7      2   30002
                                              0 BANK0      9     7      2
                        _get_fattime
                        _move_window
                               _sync
                           _validate
 ---------------------------------------------------------------------------------
 (9) _validate                                             6     2      4    1178
                                             15 COMRAM     6     2      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (10) _disk_status                                         4     4      0     226
                                             11 COMRAM     4     4      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (11) _sdc_disk_status                                     4     4      0      34
                                              9 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _sync                                                 2     2      0   14103
                                             73 COMRAM     2     2      0
                         _disk_ioctl
                        _move_window
 ---------------------------------------------------------------------------------
 (9) _move_window                                         21    17      4   13765
                                             52 COMRAM    21    17      4
                          _disk_read
                         _disk_write
 ---------------------------------------------------------------------------------
 (10) _disk_write                                         12     5      7    6087
                                             40 COMRAM    12     5      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (11) _sdc_disk_write                                     19    12      7    4623
                                             21 COMRAM    19    12      7
                            _command
                       _dummy_clocks
                        _escreve_SPI
                        _leitura_SPI
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (10) _disk_read                                          12     5      7    5608
                                             40 COMRAM    12     5      7
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (11) _sdc_disk_read                                      24    17      7    4459
                                             21 COMRAM    19    12      7
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (12) _response                                            1     1      0      34
                                              9 COMRAM     1     1      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _proceed                                             0     0      0      34
                        _escreve_SPI
 ---------------------------------------------------------------------------------
 (12) _command                                             7     2      5    3412
                                             14 COMRAM     7     2      5
                       _dummy_clocks
                        _escreve_SPI
                         _wait_ready
 ---------------------------------------------------------------------------------
 (13) _wait_ready                                         15    15      0      99
                                              9 COMRAM     5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (13) _escreve_SPI                                         2     2      0      34
                                              9 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (12) _dummy_clocks                                        5     5      0      68
                                              9 COMRAM     5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (13) _leitura_SPI                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _disk_ioctl                                           7     4      3     304
                                              9 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (6) _get_fattime                                         52    48      4     389
                                             13 COMRAM    52    48      4
                            _gps_ano
                            _gps_dia
                           _gps_hora
                            _gps_mes
                        _gps_minutos
                       _gps_segundos
 ---------------------------------------------------------------------------------
 (7) _gps_segundos                                         4     2      2       0
                                              9 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _gps_minutos                                          4     2      2       0
                                              9 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _gps_mes                                              4     2      2       0
                                              9 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _gps_hora                                             4     2      2       0
                                              9 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _gps_dia                                              4     2      2       0
                                              9 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _gps_ano                                              4     2      2       0
                                              9 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _data_nome                                            3     1      2     223
                                              9 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _desliga_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _desliga_SPI                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _dados_gps_to_sd                                      0     0      0    2857
                           _monta_sd
 ---------------------------------------------------------------------------------
 (4) _monta_sd                                             5     3      2    2857
                                             15 COMRAM     5     3      2
                             ___wmul (ARG)
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               4     2      2     220
                                              9 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 8     5      3    2547
                                             15 COMRAM     8     5      3
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              9 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1754
                                              9 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (17) _isr                                                 7     7      0     292
                                              2 COMRAM     7     7      0
                   _recebe_dado_uart
                    _tratamento_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (18) i2_write_timer_zero                                  2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (18) _tratamento_uart                                     1     1      0     154
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (18) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _escalonador
     _disparo_gravacao *
       ___wmul
       _atoi
         ___wmul
         _isdigit
       _dados_gps_to_sd
         _monta_sd
           ___wmul (ARG)
           _strlen (ARG)
       _fix
       _grava_sd
         _desliga_SPI
         _desliga_uart
         _escrita_sdcard
           _data_nome
           _f_close
             _f_sync
               _get_fattime
                 _gps_ano
                 _gps_dia
                 _gps_hora
                 _gps_mes
                 _gps_minutos
                 _gps_segundos
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _sync
                 _disk_ioctl
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _validate
                 _disk_status
                   _sdc_disk_status
           _f_lseek
             ___lldiv
             _create_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
           _f_mount
           _f_open
             _auto_mount
               ___lldiv
               ___lmul
               _check_fs
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _memcmp
               _disk_initialize
                 _sdc_disk_initialize
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
                   _sdc_reset
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _disk_status
                 _sdc_disk_status
               _memset
             _get_fattime
               _gps_ano
               _gps_dia
               _gps_hora
               _gps_mes
               _gps_minutos
               _gps_segundos
             _memcpy
             _memset
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _remove_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _reserve_direntry
               _clust2sect
                 ___lmul
               _create_chain
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                 _put_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memset
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _next_dir_entry
                 _clust2sect
                   ___lmul
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
             _trace_path
               _clust2sect
                 ___lmul
               _make_dirfile
                 _memset
               _memcmp
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _next_dir_entry
                 _clust2sect
                   ___lmul
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
           _fprintf
             ___lldiv
             ___llmod
             ___wmul
             _fputc
               _f_write
                 _clust2sect
                   ___lmul
                 _create_chain
                   _get_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                   _put_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _memcpy
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                 _validate
                   _disk_status
                     _sdc_disk_status
             _fputs
               _fputc
                 _f_write
                   _clust2sect
                     ___lmul
                   _create_chain
                     _get_cluster
                       ___wmul
                       _move_window
                         _disk_read
                           _sdc_disk_read
                             _command
                               _dummy_clocks
                                 _leitura_SPI
                               _escreve_SPI
                               _wait_ready
                                 _leitura_SPI
                             _dummy_clocks
                               _leitura_SPI
                             _proceed
                               _escreve_SPI
                             _response
                               _leitura_SPI
                         _disk_write
                           _sdc_disk_write
                             _command
                               _dummy_clocks
                                 _leitura_SPI
                               _escreve_SPI
                               _wait_ready
                                 _leitura_SPI
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _leitura_SPI
                             _proceed
                               _escreve_SPI
                             _response
                               _leitura_SPI
                     _put_cluster
                       ___wmul
                       _move_window
                         _disk_read
                           _sdc_disk_read
                             _command
                               _dummy_clocks
                                 _leitura_SPI
                               _escreve_SPI
                               _wait_ready
                                 _leitura_SPI
                             _dummy_clocks
                               _leitura_SPI
                             _proceed
                               _escreve_SPI
                             _response
                               _leitura_SPI
                         _disk_write
                           _sdc_disk_write
                             _command
                               _dummy_clocks
                                 _leitura_SPI
                               _escreve_SPI
                               _wait_ready
                                 _leitura_SPI
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _leitura_SPI
                             _proceed
                               _escreve_SPI
                             _response
                               _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _memcpy
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                   _validate
                     _disk_status
                       _sdc_disk_status
           _gps
             _fix
             _get_fix
               _escreve_caractere_lcd
                 _delay
               _posicao_cursor_lcd
                 _endereco_cursor_lcd
                   _delay
             _get_gpstime
             _get_latitude
             _get_longitude
             _get_rawdate
             _get_rawspeed
           _hora_nome
           _strcat
         _inicializa_SPI
         _inicializa_uart
           _configura_baudrate_uart
             ___aldiv
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _monta_sd
         ___wmul (ARG)
         _strlen (ARG)
       _recebe_dado_gps
         _verifica_recep_gps
       _verifica_fence
         _latitude_to_convert
           _armazena_ltlo
             _diferenca
               _convert_to_int
                 _atol
                   ___lmul
                   _isdigit
               _convert_to_int_point_lat
                 _atol
                   ___lmul
                   _isdigit
               _convert_to_int_point_long
                 _atol
                   ___lmul
                   _isdigit
         _longitude_to_convert
           _armazena_ltlo
             _diferenca
               _convert_to_int
                 _atol
                   ___lmul
                   _isdigit
               _convert_to_int_point_lat
                 _atol
                   ___lmul
                   _isdigit
               _convert_to_int_point_long
                 _atol
                   ___lmul
                   _isdigit
         _monta_sd
           ___wmul (ARG)
           _strlen (ARG)
         _recebe_dado_gps
           _verifica_recep_gps
         _verifica_plausibilidade_lat
           _posicao_lat
         _verifica_plausibilidade_long
           _posicao_long
     _troca_de_tela *
       _escreve_caractere_lcd
         _delay
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _fix
       _mostra_dados_display
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
         _posicao_cursor_lcd
           _endereco_cursor_lcd
             _delay
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
       _recebe_dado_gps
         _verifica_recep_gps
     _verifica_dados_operacionais *
       _Speed
       ___awtoft
         ___ftpack
         _atoi (ARG)
           ___wmul
           _isdigit
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
           _atoi (ARG)
             ___wmul
             _isdigit
         ___ftpack (ARG)
         _atoi (ARG)
           ___wmul
           _isdigit
       ___fttol
         ___awtoft (ARG)
           ___ftpack
           _atoi (ARG)
             ___wmul
             _isdigit
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _atoi (ARG)
               ___wmul
               _isdigit
           ___ftpack (ARG)
           _atoi (ARG)
             ___wmul
             _isdigit
         _atoi (ARG)
           ___wmul
           _isdigit
       _atoi
         ___wmul
         _isdigit
       _latitude
       _longitude
       _rawdata
       _rawhora
       _strcpy
         _latitude (ARG)
         _longitude (ARG)
         _rawdata (ARG)
         _rawhora (ARG)
   _gps
     _fix
     _get_fix
       _escreve_caractere_lcd
         _delay
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
     _get_gpstime
     _get_latitude
     _get_longitude
     _get_rawdate
     _get_rawspeed
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _recebe_dado_uart
   _tratamento_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     220      21       26.6%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      96      11       58.6%
BITBANK2           100      0       0       8        0.0%
BANK2              100     13      FA       9       97.7%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     87      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4C      55       1       90.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     384      20        0.0%
DATA                 0      0     5A4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Sat May 21 11:25:52 2022

                              next_dir_entry@idx 007C                                     ?_get_rawdate 0001  
                       __end_of_mensagem_inicial 477E                              next_dir_entry@clust 007A  
                                 ?_get_longitude 0001                                    ?_get_rawspeed 0001  
                                    _SSPSTATbits 000FC7                                 ??_init_interrupt 000A  
                                             l68 5B08                     __size_of_escreve_inteiro_lcd 003E  
                                             _fs 0396                                               _lo 0196  
                                             _lt 01B0                              ___wmul@multiplicand 000C  
                                    _put_cluster 23E4                                 disk_write@sector 002B  
                                   ?_escalonador 0001                                   create_chain@fs 007E  
                               disk_write@result 0032                                 ?_inicializa_uart 0001  
                                            l200 48E6                                              l201 48EE  
                                            l202 48F0                                              l203 48F8  
                                            l220 4D3C                                              l204 48FA  
                                            l221 4D44                                              l213 4D10  
                                            l205 4902                                              l222 4D46  
                                            l206 4904                                              l223 4D4E  
                                            l215 4D1A                           __size_of_troca_de_tela 0288  
                                            l144 2D10                                              l224 4D50  
                                            l232 4F0A                                              l225 4D58  
                                            l217 4D24                                              l250 4C62  
                                            l242 4C2E                                              l226 4D5A  
                                            l218 4D26                                              l251 4C64  
                                            l219 4D3A                                              l252 4C6C  
                                            l244 4C38                                              l181 5B28  
                                            l253 4C6E                                              l254 4C76  
                                            l246 4C42                                              l183 5B2E  
                                            l255 4C78                                              l191 48B0  
                                            l256 4C80                                              l248 4C4C  
                                            l257 4C82                                              l249 4C4E  
                                            l193 48BA                                              l195 48C4  
                                            l197 48CE                                              l198 48D0  
                                            l199 48E4                                              l704 4FCE  
                                            l811 5C16                                              l805 5C66  
                                            l921 2E78                                              l918 2E80  
                                            l688 5650                                              l992 34F0  
                                            l995 349E                                              _PCL 000FF9  
                                            _PR2 000FCB                                              _E_W 0175  
                            _latitude_to_convert 4BA6                                              _fil 017A  
                               ??_init_oscilador 000A                                              _fix 5CAA  
                                            _n_s 0176                                              _gps 56E2  
                                            _isr 0008                                ??_tratamento_uart 0001  
                                            _vel 01DC                    __size_of_longitude_to_convert 007A  
                                   disk_read@res 0034                                              prod 000FF3  
                                 ??_create_chain 007A                                              tosl 000FFD  
                                            wreg 000FE8                                     get_fix@index 0011  
                                ?_verifica_fence 0001                        __size_of_write_timer_zero 000A  
                                create_chain@mcl 007C                                  create_chain@ncl 0084  
                                create_chain@scl 0082                          ??_escreve_frase_ram_lcd 000F  
                                           l1104 170C                                             l1109 1738  
                                           l1119 187E                                             l1246 55C8  
                                           l1079 077A                                             l1193 0B80  
                                           l1197 0D90                                             l2229 51BA  
                                           l2158 4E26                                             l1279 148C  
                                           l2239 5528                                             l1296 15D4  
                                           l2441 39E8                                             l2427 33AA  
                                           l2473 3FD6                                             l1578 4FA8  
                                           l2459 44EE                                             l1777 4AA2  
                                           ?_fix 000A                                             ?_gps 0001  
                                           ?_isr 0001                                             l9321 433E  
                                           l9331 439A                                             l9323 435C  
                                           l9327 4372                                             l9319 4334  
                                           l9329 4390                                             l9601 4020  
                                           l9541 3D54                                             l9631 4098  
                                           l9623 4084                                             l9561 3DAE  
                                           l9571 3DD6                                             l9547 3D7C  
                                           l9619 4074                                             l9565 3DBE  
                                           l9637 40B4                                             l9629 408C  
                                           l9591 56BE                                             l9575 3DE6  
                          _escreve_caractere_lcd 4C1E                                             STR_1 61ED  
                                           STR_2 618E                                             STR_3 6220  
                                           STR_4 61E2                                             STR_5 61AD  
                                           STR_6 6179                                             STR_7 61BC  
                                           STR_8 6216                                             STR_9 620C  
                                 timer_dois@flag 0174                                             _BRGH 007D62  
                                           _CREN 007D5C                                             _T0IF 007F92  
                                   ?_escreve_SPI 0001                                             _LATB 000F8A  
                                           _PIE1 000F9D                                             _RCIF 007CF5  
                                           _TMR0 000FD6                                             _TMR2 000FCC  
                                           _SPEN 007D5F                                             _TXEN 007D65  
                                           _SYNC 007D64                                     trace_path@dj 007E  
                                   trace_path@fn 007F                                     trace_path@ds 008F  
                                   trace_path@fs 008B                                    ?_make_dirfile 0012  
                                           _Term 0177                                             _dado 0100  
                                           _data 01D6                                             _atoi 3252  
                                           _atol 38D8                                             _main 57DE  
                                           _fsid 0167                                             _hora 01C8  
                                   ___ftpack@arg 000A                                             _itoa 5670  
                                   ___ftpack@exp 000D                                             _ltoa 54AE  
                        __end_of_fence_diff_long 6151                                             fsr1h 000FE2  
                                           fsr2h 000FDA                                             indf1 000FE7  
                                           indf2 000FDF                                             fsr1l 000FE1  
                                           fsr2l 000FD9                                             btemp 0056  
                                           _utoa 446E                                             _sync 5216  
                                  disk_ioctl@cmd 000A                                    disk_read@buff 0029  
                                  disk_ioctl@res 000E                                   ??_get_latitude 000A  
                                  disk_read@pdrv 0031                             ?_latitude_to_convert 0001  
                                           prodh 000FF4                                             prodl 000FF3  
                   tratamento_uart@received_char 0001                            get_latitude@index_lat 000A  
                                           start 000E                                      gps@flag_fix 0013  
                              disparo_gravacao@i 02F9                                     ___ftmul@cntr 0029  
                      sdc_disk_initialize@buff_i 0025                                     ___param_bank 000000  
                                   ___ftmul@sign 002A                        sdc_disk_initialize@count1 0021  
                      sdc_disk_initialize@count2 0027                                      _string_dado 0200  
                                 ??_get_rawspeed 000A                              diferenca@valor_long 003A  
                                   ___fttol@exp1 0039                                            ??_fix 000C  
                                          ??_gps 0012                                     ___fttol@lval 0035  
                                          ??_isr 0003                          __size_of_escrita_sdcard 014E  
               __size_of_configura_baudrate_uart 0108                         __size_of_recebe_dado_gps 0020  
                     ??_convert_to_int_point_lat 0028                                            l11001 1A1A  
                                          l11011 1A3E                                            l10301 3ABC  
                                          l10207 565C                                            l10215 5728  
                                          l10305 3AD2                                            l11105 1BF2  
                                          l10315 3B02                                            l11123 1C52  
                                          l11115 1C18                                            l11035 1ABE  
                                          l10229 4FC8                                            l10405 2DCA  
                                          l11213 00CC                                            l10423 4CC4  
                                          l10415 4C94                                            l10343 2CB8  
                                          l10335 2C68                                            l10503 5C08  
                                          l11063 1B36                                            l12015 0732  
                                          l12007 0710                                            l11137 5B0C  
                                          l10513 4D12                                            l11225 0186  
                                          l11321 3954                                            l12105 412C  
                                          l12113 418E                                            l10419 4CC0  
                                          l10451 52E8                                            l12051 09DA  
                                          l11227 01A6                                            l13003 3786  
                                          l12123 41B4                                            l12203 4966  
                                          l10285 3A72                                            l10357 2CD8  
                                          l10605 2BE0                                            l10517 4D1C  
                                          l11069 1B44                                            l11173 5882  
                                          l12045 09C4                                            l12037 08B6  
                                          l11237 01FE                                            l11333 39A4  
                                          l11317 392C                                            l10295 3AA4  
                                          l10279 3A60                                            l10439 4CE6  
                                          l10375 2D58                                            l10447 52BC  
                                          l10615 2C34                                            l11183 47EE  
                                          l11079 1B70                                            l11343 596A  
                                          l11415 323C                                            l11511 34B8  
                                          l11431 33DE                                            l11263 03AA  
                                          l11247 02E4                                            l11255 033A  
                                          l12135 41EE                                            l12151 423C  
                                          l11327 395E                                            l12215 4992  
                                          l12223 499E                                            l13023 5ACE  
                                          l13111 4B6E                                            l10289 3A96  
                                          l10297 3AAA                                            l10633 57BE  
                                          l10801 512C                                            l11177 4780  
                                          l11185 47F6                                            l10553 4C44  
                                          l10545 4C30                                            l11089 1B96  
                                          l11345 5970                                            l11361 5974  
                                          l11169 5872                                            l11521 34D2  
                                          l12321 1714                                            l11281 04F2  
                                          l11265 03B8                                            l12137 41FA  
                                          l12129 41CC                                            l12209 496E  
                                          l12225 49A8                                            l13121 4B86  
                                          l13033 4E40                                            l10627 57B2  
                                          l12083 38D4                                            l10715 27CC  
                                          l10731 286E                                            l10811 4820  
                                          l11451 3448                                            l12171 4E18  
                                          l12163 4DE4                                            l12155 4252  
                                          l12147 422E                                            l13027 5AD6  
                                          l13043 4E5C                                            l12405 5918  
                                          l10389 2D7C                                            l10469 52EC  
                                          l10629 57BA                                            l10645 57C6  
                                          l12069 381C                                            l10805 5140  
                                          l10549 4C3A                                            l12341 1802  
                                          l12165 4DF0                                            l11277 0476  
                                          l12093 50FC                                            l10719 27EC  
                                          l11551 49E8                                            l10663 4F24  
                                          l10815 483E                                            l11519 34D0  
                                          l11295 0582                                            l12095 5104  
                                          l11703 538C                                            l11711 530C  
                                          l12431 5432                                            l11623 5048  
                                          l12191 4936                                            l12255 5962  
                                          l10593 2B8A                                            l11377 524C  
                                          l10729 2854                                            l10753 24AC  
                                          l10905 2F28                                            l12513 0F6C  
                                          l12505 0F06                                            l12265 53A0  
                                          l10833 4898                                            l10921 42B6  
                                          l11529 34EE                                            l11481 3476  
                                          l12353 185C                                            l11289 0526  
                                          l12089 50CE                                            l12521 1306  
                                          l12433 5442                                            l11617 501C  
                                          l12185 492E                                            l13057 4E78  
                                          l13321 2F7E                                            l10755 24E0  
                                          l10747 246A                                            l10739 240A  
                                          l12275 53D8                                            l11563 4A2E  
                                          l11547 49E4                                            l10683 51C6  
                                          l10667 4F32                                            l10659 4F16  
                                          l10675 4F40                                            l11539 350A  
                                          l11811 1FC8                                            l11803 1FAE  
                                          l12339 17D4                                            l12291 1674  
                                          l11299 0594                                            l11723 5344  
                                          l11731 5786                                            l12419 58C4  
                                          l12435 544A                                            l12099 40CA  
                                          l13147 4B9C                                            l13083 4E92  
                                          l13411 1C92                                            l10597 2B92  
                                          l10589 2B0E                                            l10941 5420  
                                          l11637 4A54                                            l10773 258E  
                                          l10909 2F66                                            l10861 2E88  
                                          l12269 53B8                                            l10677 4F5A  
                                          l11901 22A4                                            l11493 348E  
                                          l12373 1892                                            l12541 1360  
                                          l12525 1310                                            l12429 542E  
                                          l12701 5188                                            l12197 495A  
                                          l13341 30E4                                            l10935 5410  
                                          l11639 4A60                                            l10695 269A  
                                          l10791 2620                                            l12463 0D44  
                                          l10687 51EE                                            l11399 3164  
                                          l11911 22E6                                            l12631 1520  
                                          l12615 14D4                                            l12551 138A  
                                          l12703 5190                                            l11591 5074  
                                          l13087 4B36                                            l13503 1EA0  
                                          l13281 32EE                                            l11649 4A94  
                                          l10777 25B8                                            l10793 263C  
                                          l10873 2EB6                                            l10857 2E62  
                                          l10849 2E34                                            l11497 3496  
                                          l11489 3486                                            l11825 2052  
                                          l11817 1FF2                                            l12617 14EC  
                                          l12609 14B0                                            l12561 13CC  
                                          l11745 5756                                            l12713 51B0  
                                          l12721 54FE                                            l12801 4ABE  
                                          l13097 4B52                                            l13193 48C6  
                                          l13185 48B2                                            l13505 1EA4  
                                          l13425 1D0A                                            l13433 1D38  
                                          l13267 3254                                            l10891 2EEC  
                                          l12475 0DA4                                            l10947 547C  
                                          l10955 549C                                            l11763 453E  
                                          l11755 451C                                            l11923 2376  
                                          l11843 20BE                                            l12651 15C2  
                                          l12627 1514                                            l12555 13A0  
                                          l11659 553A                                            l11691 5354  
                                          l12723 5506                                            l13515 1EE4  
                                          l10965 5B58                                            l13285 3316  
                                          l13269 3260                                            l12821 0F8E  
                                          l10981 19C6                                            l11773 4582  
                                          l11933 23B2                                            l11861 20F6  
                                          l11837 20A0                                            l11829 205E  
                                          l12637 1550                                            l12573 13F6  
                                          l11597 50A0                                            l12813 4B18  
                                          l13189 48BC                                            l13279 32E0  
                                          l12903 11B2                                            l12831 0FE6  
                                          l12487 0DEC                                            l12479 0DAE  
                                          l10991 19E6                                            l11951 0610  
                                          l11943 05B8                                            l11775 458A  
                                          l11855 20E2                                            l11847 20CA  
                                          l12655 15E0                                            l11679 58EE  
                                          l12735 3F1C                                            l13463 1DF4  
                                          l13471 1E2E                                            l13289 3362  
                                          l12489 0E00                                            l12497 0E72  
                                          l11961 0634                                            l11945 05BE  
                                          l11881 220A                                            l12665 1636  
                                          l12729 551E                                            l12745 3F6C  
                                          l13297 5816                                            l13449 1D7C  
                                          l13473 1E32                                            l12675 557E  
                                          l12931 1232                                            l12923 11F6  
                                          l12843 0FF8                                            l12827 0F92  
                                          l10987 19DA                                            l12659 15FA  
                                          l12595 1474                                            l12579 1426  
                                          l12691 3D14                                            l13299 581E  
                                          l12677 5582                                            l12917 11F2  
                                          l12909 11B6                                            l12853 105A  
                                          l12837 0FF4                                            l11877 21D2  
                                          l12589 1464                                            l13805 2962  
                                          l13821 2A5C                                            l13485 1E5A  
                                          l12943 12B0                                            l12863 10B2  
                                          l12847 104C                                            l12951 12BE  
                                          l11975 0660                                            l11887 2234  
                                          l11879 21F8                                            l11799 1FAA  
                                          l12599 1480                                            l12767 54CE  
                                          l12937 1236                                            l11897 22A0  
                                          l13737 4476                                            l12777 4BAE  
                                          l12891 112A                                            l12875 10C4  
                                          l12859 105E                                            l11979 0664  
                                          l13747 44B0                                            l13827 2A7E  
                                          l12885 1126                                            l12869 10C0  
                                          l11997 069C                                            l11989 0692  
                                          l13773 568C                                            l12789 4C08  
                                          l13829 2A82                                            l13853 43C8  
                                          l12879 1118                                            l12897 11A4  
                                          l13865 4464                                            l13883 57F6  
                                          l12989 36BC                                            l13799 28DC  
                                          l13889 5806                                  __end_of___aldiv 4264  
                                          ?_atoi 0010                                            ?_atol 0016  
                                          ?_main 0001                                            ?_itoa 001A  
                                          STR_10 6233                                            ?_ltoa 0023  
                                          STR_11 6269                                            STR_20 6244  
                                          STR_12 619E                                            STR_21 6252  
                                          STR_13 61F8                                            STR_22 6252  
                                          STR_30 6272                                            STR_14 6202  
                                          STR_31 626E                                            STR_23 6264  
                                          STR_15 6259                                            STR_24 627D  
                                          STR_32 622A                                            STR_16 61CA  
                                          STR_17 6276                                            STR_25 624B  
                                          STR_33 623C                                            STR_26 6252  
                                          STR_18 627A                                            STR_27 6264  
                                          STR_19 61D7                                            STR_28 627D  
                                          STR_29 625F                                     ?_leitura_SPI 0001  
                                __end_of___lldiv 4AB4                                            u10110 4326  
                                          ?_utoa 0011                                            ?_sync 0001  
                                          u10150 43A4                                            u12020 2466  
                                __end_of___ftmul 3E20                                            u12015 243A  
                                          u10511 3D64                                            u12120 485E  
                                          _T0CON 000FD5                                            u12210 2EAC  
                                          u13020 31E2                                            u10620 409E  
                                          u12045 250C                                            u13005 3170  
                                          u11440 574A                                            u12320 540C  
                                          u12160 2E1E                                            u12400 1A06  
                                          u14000 072E                                            u13040 3414  
                                __end_of___llmod 4E38                                            u10561 4004  
                                          u12170 2E2A                                            u12410 1A12  
                                          u10570 400E                                            u12075 259A  
                                          u12411 1A10                                            u10491 3D3C  
                                          u11460 4FD8                                            u11620 2DD6  
                                          u12180 2E56                                            u13300 49E4  
                                          u13060 3424                                            u10580 403E  
                                __end_of___fttol 40C6                                            u12430 1A5E  
                                          u13047 340A                                            u12280 2F54  
                                          u14040 09C0                                            _T2CON 000FCA  
                                          u10585 4036                                            u11490 3A6C  
                                          u11810 2ACC                                            u12610 47AC  
                                          u14050 09D8                                            u11475 3A12  
                                          u14035 08CE                                            u11900 520E  
                                          u12540 1BBC                                            u15020 1616  
                                          u11565 2C8C                                            u15030 55A2  
                                          u11830 2B0A                                            u12630 47DE  
                                          u12470 1AEC                                            u12390 19F6  
                                          u14150 41FE                                            u13335 356E  
                                          u13440 4A64                                            u11920 2664  
                                          u15120 5194                                            u13345 358A  
                                          u12617 47A2                                            u14065 0A5E  
                                          u12490 1AF8                                            u13370 55BE  
                                          u16010 4926                                            u13355 35BA  
                                          u11595 2D2C                                            u11907 5204  
                                          u16100 32D8                                            u12580 1C2E  
                                          u13540 453A                                            u14420 1734  
                                          u15037 5598                                            u13365 35DA  
                                          u12637 47D4                                            u12805 0326  
                                          u16021 5600                                            u15310 0FB2  
                                          u12590 1C5E                                            u14350 1670  
                                          u14190 4DF4                                            u15150 550A  
                                          u12910 394C                                            u15055 3C36  
                                          u16120 330E                                            u13560 4570  
                                          u13800 22E2                                            u11945 26CA  
                                          u15065 3C6E                                            u15410 10B0  
                                          u15330 0FE4                                            u11890 51E6  
                                          u13570 4596                                            u14450 17D0  
                                          u12850 052E                                            u16050 4F96  
                                          u16107 32CE                                            u13635 2010  
                                          u16140 334A                                            u16060 3280  
                                          u14700 0E0E                                            u13580 45AE  
                                          u13740 2230                                            u15317 0FA8  
                                          u11965 2746                                            u12765 024C  
                                          u15085 3CB0                                            u12917 3942  
                                          u16150 3382                                            u15510 11A2  
                                          u15430 10E4                                            u15350 1018  
                                          u12950 5248                                            u13590 1F94  
                                          u12870 38F8                                            u16127 3304  
                                          u15095 3CE8                                            u16080 32A6  
                                          u14720 0E86                                            u16320 1CBE  
                                          u15417 10A6                                            u15337 0FDA  
                                          u14625 0BF4                                            u11897 51DC  
                                          u15610 12AE                                            u15530 11E2  
                                          u15450 1116                                            u15370 104A  
                                          u14730 0ECC                                            u13930 065C  
                                          u13850 05DE                                            u13770 2292  
                                          u14490 187A                                            u16330 1CFA  
                                          u16147 3340                                            u16067 3276  
                                          u11995 27D8                                            u13755 2252  
                                          u14820 13D8                                            u16157 3378  
                                          u15517 1198                                            u15437 10DA  
                                          u15357 100E                                            u13597 1F8A  
                                          u12877 38EE                                            u15550 1222  
                                          u15470 114A                                            u15390 107E  
                                          u13870 0604                                            u12990 3160  
                                          u15710 4E58                                            u16087 329C  
                                          u14735 0EC2                                            u16360 1DA8  
                                          u16328 1CC0                                            u15617 12A4  
                                          u15537 11D8                                            u15457 110C  
                                          u15377 1040                                            u13857 05D4  
                                          u15570 1256                                            u15490 1170  
                                          u16370 1DE4                                            u16338 1CFC  
                                          u16290 1C6C                                            u14860 1462  
                                          u15740 4E8C                                            u15557 1218  
                                          u15477 1140                                            u15397 1074  
                                          u13877 05FA                                            u15590 127C  
                                          u14790 1356                                            u16390 1E3E  
                                          u16368 1DAA                                            u15577 124C  
                                          u15497 1166                                            u14970 15A6  
                                          u16378 1DE6                                            u16650 46FC  
                                          u15780 4B4A                                            u16660 4718  
                                          u15597 1272                                            u15790 4B4E  
                                __end_of___lwdiv 51C4                                            u16827 4754  
                                          u16837 45D4                                            u16847 45F0  
                                          u16857 460C                                            u16867 1994  
                                          u16877 1AFE                                            u16798 4424  
                                          u16887 1B9C                                            u16799 4436  
                                          u16897 563C                                  __end_of___lwmod 5532  
                                          i2l441 3BA4                                            i2l446 3C16  
                                          _RCREG 000FAE                                     ?_gps_minutos 000A  
                                          _RCSTA 000FAB                                            _SPBRG 000FAF  
                                          _TRISA 000F92                                            _TRISB 000F93  
                                          _TRISC 000F94                                            _TRISD 000F95  
                                          _TRISE 000F96                                  __end_of_f_close 58C0  
                                  trace_path@dir 0082                                            _TXSTA 000FAC  
                                          _FatFs 004D                                  __end_of_f_lseek 0F7E  
                            ___lmul@multiplicand 000E                       __size_of_config_timer_dois 000E  
                                __end_of_f_mount 53DC                                  ??_armazena_ltlo 0040  
                                __end_of_f_write 05A8                       __size_of_config_timer_zero 001A  
                                          _Speed 5CA0                                    get_cluster@bc 006F  
                                __end_of_get_fix 5574                                    get_cluster@fs 0071  
                                  get_cluster@wc 0069                                  __end_of_command 5014  
                                  ___awtoft@sign 001B                                            _delay 5B24  
                                clust2sect@clust 0016                                            _fence 01E2  
                                __end_of_gps_dia 5AA2                                  __end_of_gps_ano 5AC4  
                                __end_of_gps_mes 5A80                                  __end_of_fprintf 1640  
                                          _fputc 55B6                                            _fputs 50C4  
                                __end_of_isdigit 5B60                         __size_of_escreve_cmd_lcd 008C  
                                  ___ftpack@sign 000E                                            atoi@a 0016  
                                          _teste 0169                                            atol@a 001F  
                                          atol@c 0023                                            atoi@s 0010  
                                          atol@s 0016                                            _ultoa 3F0C  
                                __end_of_rawdata 5C8C                                   ??_make_dirfile 0014  
                                __end_of_rawhora 5C82                                   disk_ioctl@buff 000B  
                                          pclath 000FFA                                   disk_read@count 002F  
                                          tablat 000FF5                                   disk_ioctl@pdrv 000D  
                               ?_dados_gps_to_sd 0001                                  __end_of_proceed 5C62  
                                          plusw1 000FE3                                            plusw2 000FDB  
                                          ttemp5 0057                                            ttemp6 005A  
                                          ttemp7 005E                                            utoa@c 0019  
                          longitude_to_convert@i 006C                            longitude_to_convert@j 006B  
                                          utoa@v 0017                                            status 000FD8  
                                  _troca_de_tela 1C62                                            wtemp8 0057  
                          ??_latitude_to_convert 0042                                    disk_write@res 0034  
                                __initialization 4650                                  ??_get_longitude 000A  
                            disk_initialize@pdrv 002A                              disk_initialize@stat 002B  
                                   __end_of_atoi 33B4                                     __end_of_atol 39FA  
                                   __end_of_main 580C                                     clust2sect@fs 001F  
                                   __end_of_itoa 56AA                                     __end_of_ltoa 54F0  
   verifica_dados_operacionais@contador_anterior 00FB                                     __end_of_utoa 4512  
                                   __end_of_sync 5268                               _inicializa_tarefas 5268  
                                escalonador@cont 00E6                          get_rawspeed@index_speed 000A  
                               get_gpstime@index 000A          convert_to_int_point_lat@convert_str_lat 0028  
                            reserve_direntry@dir 0087                                create_chain@clust 0078  
                                    auto_mount@p 0082                                create_chain@cstat 0080  
                                  sdc_reset@buff 001C                                           ??_atoi 0013  
                                         ??_atol 001A                                           ??_main 004D  
                                  ___fttol@sign1 0034                                           ??_itoa 0020  
                                         ??_ltoa 002A                                           ??_utoa 0017  
                                         ??_sync 004A                                    __activetblptr 000003  
                            ?_inicializa_tarefas 0001                             __end_of_desliga_uart 5BEA  
                    ??_convert_to_int_point_long 0028                                           ?_Speed 000A  
                                 _next_dir_entry 30EC                             __size_of_desliga_SPI 0010  
                              get_fattime@f_time 0038                                 ??_sdc_disk_write 001D  
                                         ?_delay 0001                           ?_escreve_caractere_lcd 0001  
                                         _ADCON1 000FC1                                           ?_fputc 00A4  
                               ___llmod@dividend 000A                                           ?_fputs 00AB  
                                 _convert_to_int 59D6                               auto_mount@bootsect 007A  
                               __end_of___awtoft 56E2                                 __end_of___ftpack 43C4  
                                         ?_ultoa 0017                                           _INT0IE 007F94  
                                         _INT0IF 007F91                                    ?_dummy_clocks 0001  
                                 armazena_ltlo@i 0041                                   armazena_ltlo@j 0040  
                                         i2l1550 3EF8                                           _PCLATH 000FFA  
                                         _INTCON 000FF2                                           i2l9921 3B60  
                                         i2l9913 3B3E                                           i2l9931 3BB0  
                                         i2l9923 3B78                                           i2l9941 3BEA  
                                         i2l9939 3BD2                        convert_to_int_point_lat@i 0034  
                      convert_to_int_point_lat@j 0033                          __size_of_inicializa_SPI 0020  
                                 ?_troca_de_tela 0001                                           _TMR0IF 007F92  
                             auto_mount@maxclust 0076                         __end_of_recebe_dado_uart 5BFC  
                                         _SPPCFG 000F63                                           _SPPCON 000F65  
                                  ?_gps_segundos 000A                                 _is_it_gga_string 0055  
                                         _SSPBUF 000FC9                         __size_of_sdc_disk_status 0010  
                               __end_of_check_fs 4A32                             ??_inicializa_tarefas 000A  
                              ?_disparo_gravacao 0001                                   trace_path@dptr 0090  
                                 trace_path@path 0080                           reserve_direntry@sector 008C  
                       __size_of_disk_initialize 0026                               get_longitude@index 000B  
                     __end_of_posicao_cursor_lcd 4F5E                               ??_disparo_gravacao 00DF  
                                 auto_mount@path 003D                                     ?_move_window 0035  
                           __end_of_create_chain 2F70                                     _dado_arquivo 0242  
                         __size_of_init_hardware 0016                                   auto_mount@stat 0085  
                           __size_of_get_fattime 0154                                     put_cluster@p 0074  
                   ?_verifica_dados_operacionais 0001                             __size_of_get_cluster 0228  
                                         ___lmul 511C                                        ??___aldiv 0012  
                           __size_of_disk_status 0030                                           ___wmul 598C  
                                      ??___lldiv 0012                                        ??___ftmul 0022  
                                         _f_open 1640                                        ??___llmod 0012  
                                      ??___fttol 002F                                        ??___lwdiv 000E  
                               __end_of_grava_sd 5BB0                             __size_of_get_gpstime 002A  
                                         _f_sync 37B0                                        ??___lwmod 000E  
                                         _buffer 0236                             __size_of_get_rawdate 0030  
                               __end_of_latitude 5CA0                                 __end_of_gps_hora 59D6  
                                         _estado 0172                                           _memcmp 477E  
                                         _memcpy 546A                                 __end_of_init_lcd 4650  
                                         _memset 5868                                        ??_f_close 004C  
                                         _rawFix 01EE                                           clear_0 4698  
                                         clear_1 46AA                                           clear_2 46B6  
                                         clear_3 46C2                                           clear_4 46CE  
                                         clear_5 46DA                                        ??_f_lseek 008C  
                                      ??_f_mount 000C                         configura_baudrate_uart@x 0024  
                                      ??_f_write 008C                                        ??_get_fix 0010  
                                         _strcat 5424                              _sdc_disk_initialize 197A  
                                      ??_command 0014                                           _strcpy 580C  
                                         _strlen 5574                            ___ftmul@f3_as_product 0026  
                               put_cluster@clust 0060                                        ??_gps_dia 000C  
                                         fputc@c 00A8                               get_cluster@fatsect 006B  
                               __end_of_monta_sd 12F2                                        ??_gps_ano 000C  
                       __end_of_reserve_direntry 23E4                                        ??_gps_mes 000C  
                               __end_of_validate 5424                           __end_of_next_dir_entry 3252  
                                      ??_fprintf 00BB                                           fputs@n 00AF  
                                      ??_isdigit 000A                             __size_of_escalonador 00AA  
                           __end_of_get_latitude 5394                                 __end_of_response 5C56  
                              ??_recebe_dado_gps 000A                                        ??_rawdata 000C  
                                   __mediumconst 6102                                  disk_read@sector 002B  
                                      ??_rawhora 000C                                  disk_read@result 0032  
                                         tblptrh 000FF7                                           tblptrl 000FF6  
                                         tblptru 000FF8                           __end_of_convert_to_int 59F8  
                                      ??_proceed 000C                                 _write_timer_zero 5C6E  
                                         ultoa@c 0022                                     ?_posicao_lat 0001  
                                         ultoa@v 001E                                           sync@fs 004A  
                      escreve_caractere_lcd@data 000C                                   ??_dummy_clocks 000A  
                           __end_of_get_rawspeed 577E                              _escreve_inteiro_lcd 55F6  
                                sdc_disk_write@j 0026                                   ??_gps_segundos 000C  
                                     __accesstop 0060                          __end_of__initialization 46E0  
                           ?_sdc_disk_initialize 0001                                   disk_write@buff 0029  
                                 disk_write@pdrv 0031                             __size_of_escreve_SPI 0010  
                                  ___rparam_used 000001                                ??_escreve_cmd_lcd 000C  
                   ?_verifica_plausibilidade_lat 0001                        _convert_to_int_point_long 5014  
                                     ___awtoft@c 0018                                       ___ftmul@f1 001C  
                                     ___ftmul@f2 001F                                       ___fttol@f1 002B  
                                 __pcstackCOMRAM 0001                                    __end_of_Speed 5CAA  
                                _tratamento_uart 3B12                      __end_of_endereco_cursor_lcd 4D68  
                                   __pidataBANK1 5C2C                                     __pidataBANK2 4D68  
                              ?_mensagem_inicial 0001                          _configura_baudrate_uart 3C24  
                                  __end_of_delay 5B42                                   _escrita_sdcard 3662  
                                hora_nome@p_buff 000A                                    __end_of_fputc 55F6  
                                  __end_of_fputs 511C                             ?_escreve_inteiro_lcd 002B  
                  ??_verifica_dados_operacionais 003A                 __end_of_convert_to_int_point_lat 50C4  
                             __size_of_data_nome 002A                                    __end_of_ultoa 3FF4  
                                 diferenca@index 0035                               ??_mensagem_inicial 0010  
                           __end_of_make_dirfile 350E                                     ?_put_cluster 0060  
                  __size_of_mostra_dados_display 002E                               __size_of_diferenca 00D2  
                              reserve_direntry@c 0093                                reserve_direntry@n 0090  
                               ??_verifica_fence 0043                          get_longitude@index_long 000A  
                             _tarefa_em_execucao 0052                       __end_ofi2_write_timer_zero 5CBE  
                                ?_next_dir_entry 004C                                 get_rawdate@index 000B  
                         __size_of_sdc_disk_read 0118                  configura_baudrate_uart@baudrate 0018  
                           reserve_direntry@dptr 0091                             __size_of_leitura_SPI 000C  
                                  _init_hardware 5BB0                                     auto_mount@fs 008A  
                             __size_of_disk_read 006E                                          ??_Speed 000C  
                                ?_convert_to_int 0024                       __end_of_verifica_recep_gps 5966  
                           __size_of_gps_minutos 0022                                          ??_delay 000A  
                                 sdc_reset@count 001A                                       _dados_data 02C3  
                                        ??_fputc 004C                                          ??_fputs 004C  
                                     _dados_hora 02D5                                       _dados_long 027E  
                                ??_troca_de_tela 0036                                 _is_it_rmc_string 0054  
                                        ??_ultoa 001E                     mensagem_inicial@msg_linha_um 0012  
                                     __pbssBANK0 00E7                                       __pbssBANK1 0100  
                                     __pbssBANK2 0200                                       __pbssBANK3 0300  
                 __size_of_escreve_frase_ram_lcd 0052                    __end_of_escreve_frase_ram_lcd 5216  
                          ??_sdc_disk_initialize 001D              verifica_plausibilidade_long@posicao 000A  
                             __size_of_hora_nome 002A                     __end_of_longitude_to_convert 4B2E  
                      escreve_inteiro_uart@F3215 01F0                                       _gga_buffer 0300  
                  ??_verifica_plausibilidade_lat 000A                           __end_of_escrita_sdcard 37B0  
                             __size_of_sdc_reset 0090                               troca_de_tela@state 0050  
                                        ?___lmul 000A                                ??_sdc_disk_status 000A  
                                  make_dirfile@a 001A                                    make_dirfile@b 0018  
                                  make_dirfile@c 001C                                    make_dirfile@n 001B  
                                  make_dirfile@t 0019                                          ?___wmul 000A  
                          mensagem_inicial@F3687 6114                            mensagem_inicial@F3689 6103  
                          ??_escreve_inteiro_lcd 002F                                          ?_f_open 0098  
                                     _fence_flag 0149                                          ?_f_sync 0060  
                             __size_of_longitude 000A                                ??_disk_initialize 002A  
                          __size_of_desliga_uart 0012                                          ?_memcmp 000A  
                                        ?_memcpy 000A                                          ?_memset 000A  
                                 ___lmul@product 0012                                        ?___awtoft 0018  
                                      ?___ftpack 000A                                          ?_strcat 000A  
                                        ?_strcpy 000C                                          ?_strlen 000A  
                                   _gga_pointers 0216                                          i2l10051 5BF8  
                                        i2l10141 3EA2                                          i2l10125 3E62  
                                        i2l10161 3EE4                                          i2l10153 3EC8  
                                        i2l10137 3E74                                          i2l10163 3EF0  
                                        i2l10149 3EBA                                          _INTCON2 000FF1  
                                        _INTCON3 000FF0                                   ?_init_hardware 0001  
                                      ?_check_fs 0035                                       _disk_ioctl 5B04  
                                     _disk_write 52B8                                   remove_chain@fs 007E  
           __size_of_verifica_dados_operacionais 017C                                          _SSPCON1 000FC6  
                       __size_of_inicializa_uart 0022                                          _SSPSTAT 000FC7  
                                     _clust2sect 4264                                   _inicializa_SPI 5AE4  
                                trace_path@clust 008D                                __end_of_data_nome 593E  
                                      ?_grava_sd 0001                                        ?_latitude 000A  
                                  ?_remove_chain 0078                            __size_of_create_chain 0196  
                                      ?_gps_hora 000A                                        ?_init_lcd 0001  
                        __end_of_tratamento_uart 3C24                                __end_of_diferenca 4198  
                                  _sdc_disk_read 39FA                                     _desliga_uart 5BD8  
                                     _auto_mount 05A8                                          __Hparam 0000  
                      ??_configura_baudrate_uart 001C                                          __Lparam 0000  
                                      ?_monta_sd 0010                                        ?_validate 0010  
                                ?_escrita_sdcard 0001                                __end_of_disk_read 4CFE  
                                  put_cluster@bc 0072                                        ?_response 0001  
                                  put_cluster@fs 0076                                          ___aldiv 4198  
                                     f_close@res 004C                                  __size_of___lmul 0056  
                                        ___lldiv 4A32                                  __size_of___wmul 0026  
                                        ___ftmul 3D2C                                          ___llmod 4DD2  
                                        ___fttol 3FF4                             __size_of_move_window 01AA  
                                     check_fs@fs 003B                                          ___lwdiv 5172  
                                        ___lwmod 54F0                                  __size_of_f_open 033A  
                                __size_of_f_sync 0128                             __end_of_dummy_clocks 5670  
                          __size_of_get_latitude 0048                                          _f_close 5894  
                                        __pcinit 4650                                  __size_of_memcmp 0092  
                                __size_of_memcpy 0044                                       ??___awtoft 001B  
                                     ??___ftpack 000F                                  __size_of_memset 002C  
                                        _f_lseek 0AF2                                       _init_ports 5B60  
                                        __ramtop 0800                                          _f_mount 5394  
                                        __ptext0 57DE                                          __ptext1 46EA  
                                        __ptext2 45B2                                          __ptext3 5BB0  
                                        __ptext4 5B60                                          __ptext5 5CBE  
                                        __ptext6 5BC6                                          __ptext7 5B7C  
                                        __ptext8 5C6E                                          __ptext9 5C3C  
                           __end_of_gps_segundos 5A3C                                          _f_write 0012  
                                        _get_fix 5532                                          _command 4FBA  
                                      _T0CONbits 000FD5                              auto_mount@totalsect 007E  
                                __size_of_strcat 0046                                  __size_of_strcpy 002E  
                                __size_of_strlen 0042                                       data_nome@i 000C  
                    endereco_cursor_lcd@endereco 000C                                __end_of_hora_nome 58EA  
                                        _gps_dia 5A80                                          _gps_ano 5AA2  
                                        _gps_mes 5A5E                                          _fprintf 12F2  
                                   __size_of_fix 000A                                     __size_of_gps 0036  
                                        _rawDate 01E8                                          _isdigit 5B42  
                                   __size_of_isr 3F04             __size_of_verifica_plausibilidade_lat 0078  
                        ??_escreve_caractere_lcd 000C                                       ??_check_fs 0039  
                          __size_of_get_rawspeed 0030                                          _rawTime 01CF  
                               ___aldiv@dividend 000A                                          _rawdata 5C82  
                                        _rawhora 5C78                                          _time_sd 0163  
                                   _create_chain 2DDA                                          _proceed 5C56  
                        __size_of_init_interrupt 0012                               _point_buff_gps_lat 015D  
                              __end_of_sdc_reset 48A0                           __end_of_inicializa_SPI 5B04  
                          __end_of_armazena_ltlo 49B0                      __end_of_latitude_to_convert 4C1E  
                                     f_lseek@ofs 0088                                   __pintcode_body 3E20  
                                     f_lseek@res 009C                             end_of_initialization 46E0  
                              __end_of_longitude 5C96             __end_of_verifica_plausibilidade_long 4E9C  
          __size_of_verifica_plausibilidade_long 0064                     _verifica_plausibilidade_long 4E38  
              __size_of_convert_to_int_point_lat 0058                             __size_of_posicao_lat 0004  
                                     f_open@mode 009C                                       f_open@path 009A  
                      ?_convert_to_int_point_lat 0024                                   ??_remove_chain 007A  
                                        isr@cont 0009                                          memcmp@n 000E  
                                     ??_grava_sd 004D                            get_rawdate@index_date 000A  
                                        memcpy@d 0011                                          memcpy@n 000E  
                                        memcpy@s 0013                          __size_of_init_oscilador 0008  
                                        fputc@bw 00A9                                          itoa@buf 001A  
                                     ??_latitude 000C                                          memset@c 000C  
                                        itoa@val 001C                                          memset@n 000E  
                                     ??_gps_hora 000C                                          memset@p 0010  
                                     ??_init_lcd 000D                                          int_func 3E20  
                                     _rmc_buffer 0350                                ?_recebe_dado_uart 0001  
                                disk_status@pdrv 000E                                        i2u1127_40 3E52  
                                disk_status@stat 000F                                        i2u1128_48 3E54  
                                 ?_sdc_disk_read 0016                                          ltoa@buf 0023  
                                        ltoa@val 0024                           write_timer_zero@timer0 000A  
                                ___lldiv@divisor 000E                                    _rawSatellites 0152  
                                     f_mount@drv 000C                               ??_recebe_dado_uart 0001  
                                   _get_latitude 534C                                  ___lldiv@counter 0016  
                                     ??_monta_sd 0012                                       ??_validate 0014  
                          __size_of_make_dirfile 015A                         __size_of_dados_gps_to_sd 0064  
                                 _fence_diff_lat 6151                                       ??_response 000A  
                                      _RCSTAbits 000FAB                         __end_of_write_timer_zero 5C78  
                               ___aldiv@quotient 0014                                          postdec1 000FE5  
                                        postdec2 000FDD                                          postinc0 000FEE  
                                        postinc1 000FE6                                          postinc2 000FDE  
                                _recebe_dado_gps 5AC4                            __end_of_get_longitude 534C  
                                        utoa@buf 0011                                    ?_posicao_long 0001  
                                        utoa@val 0013                                       _wait_ready 5718  
                                   _get_rawspeed 574E                                          strlen@s 000A  
                  longitude_to_convert@longitude 0060               __size_of_convert_to_int_point_long 0058  
                                      _PORTBbits 000F81                        __size_of_disparo_gravacao 0216  
                                      _PORTDbits 000F83                                        _PORTEbits 000F84  
                                ??_init_hardware 000C                                       _trace_path 1EEA  
                             _posicao_cursor_lcd 4F00                                    ??_desliga_SPI 000A  
                           __size_of_put_cluster 026C                  __end_of_configura_baudrate_uart 3D2C  
                                    ?_disk_ioctl 000A                             _longitude_to_convert 4AB4  
                              ?_reserve_direntry 0086                                       f_write@btw 0089  
                                     f_write@res 0098                                        _TRISBbits 000F93  
                                    ?_disk_write 0029                                        _TRISCbits 000F94  
                                      _TRISDbits 000F95                                 next_dir_entry@dj 004C  
      verifica_dados_operacionais@contador_atual 0051                                  _escreve_cmd_lcd 48A0  
                             ??_reserve_direntry 0088                              ?_posicao_cursor_lcd 000D  
                                ?_inicializa_SPI 0001                                  disk_write@count 002F  
                               get_fix@index_fix 0010                                      ?_clust2sect 0016  
                               _put_cluster$1624 006A                                 _put_cluster$1625 006C  
                                     command@CMD 0014                                       command@CRC 0013  
                                     command@arg 000F                                     _make_dirfile 33B4  
                  ?_verifica_plausibilidade_long 0001                                    ??_get_fattime 0012  
                               ?_tratamento_uart 0001                                ??_inicializa_uart 0026  
                    __size_of_inicializa_tarefas 0050                                    ??_get_cluster 0060  
                         __end_of_fence_diff_lat 6179                                    ??_disk_status 000C  
                                    ?_auto_mount 003D                                    ??_get_gpstime 000A  
                              _make_dirfile$1734 0016                                      ___ftmul@exp 0025  
                                  ??_get_rawdate 000A                                  command@argument 0015  
                             diferenca@valor_lat 0036                             ??_posicao_cursor_lcd 000E  
                                 ??_posicao_long 000A                                   __end_of___lmul 5172  
                                 _temp_buff_long 0157                                 ??_next_dir_entry 0073  
                                 __end_of___wmul 59B2                                   __end_of_f_open 197A  
                                  ??_escalonador 00E4                                      ?_init_ports 0001  
                                 __end_of_f_sync 38D8                                 ??_convert_to_int 0028  
                                 __end_of_memcmp 4810                                   __end_of_memcpy 54AE  
                                 __end_of_memset 5894                __end_of_convert_to_int_point_long 506C  
                          ?_longitude_to_convert 0001                                   __end_of_strcat 546A  
                                 __end_of_strcpy 583A                                   __end_of_strlen 55B6  
                               _time_atualizacao 015F                              start_initialization 4650  
                                    __end_of_fix 5CB4                                      __end_of_gps 5718  
                                    __end_of_isr 3F0C                        __size_of_mensagem_inicial 0094  
                      disparo_gravacao@index_max 02F7                               reserve_direntry@dj 0086  
                             reserve_direntry@fs 0096                              __end_of_desliga_SPI 5C2C  
                                  ??_escreve_SPI 000A                     __end_of_mostra_dados_display 5868  
                                _sdc_disk_status 5BFC                                  ??_sdc_disk_read 001D  
                              auto_mount@fatsize 0086                               i2_write_timer_zero 5CB4  
                                ___llmod@divisor 000E                                  data_nome@p_buff 000A  
                                _disk_initialize 5966                                  ___llmod@counter 0012  
                        __end_of_recebe_dado_gps 5AE4                               _verifica_recep_gps 593E  
                          reserve_direntry@clust 0094                          __size_of_sdc_disk_write 01A2  
                               _data_uart_recebe 00FD                                wait_ready@timeout 000A  
                          __size_of_dummy_clocks 003C                                    auto_mount@fmt 0084  
                            __size_of_disk_ioctl 0020                              ?i2_write_timer_zero 0001  
                                     hora_nome@i 000C                              __size_of_disk_write 004C  
                                       ??___lmul 0012                            __size_of_gps_segundos 0022  
                                     fprintf@fil 00B1                                       fprintf@arp 00D9  
                                       ??___wmul 000E                                       fprintf@res 00CD  
                                     fprintf@val 00D5                                       fprintf@str 00B3  
                            __end_of_get_fattime 3662                                         ??_f_open 009D  
                            ?_verifica_recep_gps 0001                                         ??_f_sync 004C  
                                    ?_wait_ready 0001                                      __pdataBANK1 01F0  
                                    __pdataBANK2 027E                              __end_of_get_cluster 2878  
                verifica_dados_operacionais@dado 0111                                         ??_memcmp 0010  
                            __end_of_disk_status 57DE                                         ??_memcpy 0010  
                            __size_of_clust2sect 00B2                                         ??_memset 0010  
                            __end_of_get_gpstime 5914                           sdc_disk_read@start_add 0022  
                           __end_of_remove_chain 45B2                                ??_dados_gps_to_sd 0015  
                            __end_of_get_rawdate 57AE                          sdc_disk_initialize@buff 0029  
                                  ??_leitura_SPI 000A                          __end_of_escreve_cmd_lcd 492C  
                                       ??_strcat 000E                                         ??_strcpy 0010  
                                       ??_strlen 000C                          sdc_disk_initialize@stat 0020  
                                    ?_trace_path 007E                                    ??_gps_minutos 000C  
                                   _fprintf$2227 00CF                     __size_of_endereco_cursor_lcd 006A  
                              __size_of___awtoft 0038                                __size_of___ftpack 00AE  
                                    __pbssBIGRAM 0396                                    monta_sd@index 0013  
                                    __pbssCOMRAM 004D                                  _trace_path$1781 0087  
                                _trace_path$1783 0089                                    __pcstackBANK0 0060  
                                  __pcstackBANK2 02E7                                   _init_interrupt 5BC6  
                            __size_of_auto_mount 054A                             ??i2_write_timer_zero 0003  
                            __end_of_escalonador 446E                      __end_of_sdc_disk_initialize 1C62  
                              __size_of_check_fs 0082                                     _isdigit$3276 000B  
                                   check_fs@sect 0035                                      _char_number 0179  
                           ??_verifica_recep_gps 000A                                     _dummy_clocks 5634  
                                 _init_oscilador 5CBE                            __end_of_troca_de_tela 1EEA  
                               ??_escrita_sdcard 004D                                        _dados_lat 02A2  
                            __size_of_init_ports 001C                                        _dados_vel 0117  
                                   _gps_segundos 5A1A                            _escreve_frase_ram_lcd 51C4  
                              __size_of_grava_sd 001A                                        _data_buff 016F  
                                      _data_hoje 0173                      __end_of_escreve_inteiro_lcd 5634  
                                      _data_nome 5914                              __end_of_escreve_SPI 5C1C  
                              __size_of_latitude 000A                                __size_of_gps_hora 0024  
                              __size_of_init_lcd 009E                                 ___lwdiv@dividend 000A  
                              delay@contador_int 000B                                delay@contador_ext 000A  
                                      _gga_index 00F9                   ??_verifica_plausibilidade_long 000A  
            __end_of_verifica_dados_operacionais 30EC                      _verifica_dados_operacionais 2F70  
                                      _diferenca 40C6                                        __pintcode 0008  
                                  __pmediumconst 6102                                         ?___aldiv 000A  
                           latitude_to_convert@i 006A                             latitude_to_convert@j 0069  
                                      __ptext100 57AE                                        __ptext101 5BFC  
                                      __ptext110 4FBA                                        __ptext102 5216  
                                      __ptext111 5718                                        __ptext103 2A8E  
                                      __ptext120 59B2                                        __ptext112 5C0C  
                                      __ptext104 52B8                                        __ptext121 5A80  
                                      __ptext113 5634                                        __ptext105 2C38  
                        troca_de_tela@fix_signal 0037                                        __ptext130 5B42  
                                      __ptext122 5AA2                                        __ptext114 5C62  
                                      __ptext106 4C90                                        __ptext131 598C  
                                      __ptext123 5914                                        __ptext115 5B04  
                                      __ptext107 39FA                                        __ptext124 5BD8  
                                      __ptext116 350E                                        __ptext108 5C4A  
                                      __ptext133 5CB4                                        __ptext125 5C1C  
                                      __ptext117 5A1A                                        __ptext109 5C56  
                                      __ptext134 3B12                                        __ptext126 4E9C  
                                      __ptext118 5A3C                                        __ptext135 5BEA  
                                      __ptext127 0F7E                                        __ptext119 5A5E  
                                      __ptext136 0000                                        __ptext128 5574  
                                      __ptext129 3252                                __size_of_monta_sd 0374  
                                       ?___lldiv 000A                                         ?___ftmul 001C  
                                       ?___llmod 000A                                __size_of_validate 0048  
                                       ?___fttol 002B                                         ?___lwdiv 000A  
                                       ?___lwmod 000A                                __size_of_response 000C  
                                       ?_f_close 0069                                        _disk_read 4C90  
                             _sinaliza_int_timer 00FC                                         ?_f_lseek 0086  
                                       ?_f_mount 000A                                 _disparo_gravacao 2878  
                                       ?_f_write 0086                           ??_longitude_to_convert 0042  
                                       ?_get_fix 0001                                         ?_command 000F  
                         __end_of_init_interrupt 5BD8                                         ?_gps_dia 000A  
                                       ?_gps_ano 000A                                         ?_gps_mes 000A  
                                       ?_fprintf 00B1                                         ?_isdigit 0001  
                                    _desliga_SPI 5C1C                              sdc_disk_read@p_buff 0016  
                        troca_de_tela@last_state 004F                              sdc_disk_read@length 0026  
                                       ?_rawdata 000A                              sdc_disk_read@sector 0018  
                                       ?_rawhora 000A                          __end_of_sdc_disk_status 5C0C  
                 __size_of_escreve_caractere_lcd 0072                                   __size_of_Speed 000A  
                  __end_of_escreve_caractere_lcd 4C90                                         ?_proceed 0001  
                                      f_close@fp 0069                              __end_of_leitura_SPI 5C6E  
                                      _hora_nome 58C0                                 ___lwdiv@quotient 000F  
                                 __size_of_delay 001E                          __end_of_disk_initialize 598C  
                         __end_of_init_oscilador 5CC6                              __end_of_gps_minutos 5A5E  
                                 __size_of_fputc 0040                                   __size_of_fputs 0058  
                            make_dirfile@dirname 0013                                       validate@id 0012  
                                     validate@fs 0010                             __end_of_posicao_long 5CCC  
                                      _p_tarefas 0129                                   __size_of_ultoa 00E8  
                        __size_of_verifica_fence 005C                                        _rawCourse 012F  
                               make_dirfile@path 0012                                         _GPGGA_ok 016B  
                                      _sdc_reset 4810                              __size_of_wait_ready 0036  
                                ___aldiv@divisor 000E                      latitude_to_convert@latitude 0060  
                                ___aldiv@counter 0012                                   ___wmul@product 000E  
                                       _LATBbits 000F8A                                        f_lseek@fp 0086  
                                       _LATCbits 000F8B              __end_of_verifica_plausibilidade_lat 4BA6  
                    _verifica_plausibilidade_lat 4B2E                                         _GPRMC_ok 016D  
                                      f_open@dir 00B4                                        f_open@res 00B3  
                                      _longitude 5C8C                                         _PIE1bits 000F9D  
                                    _get_fattime 350E                                     _rawLongitude 01A3  
                               ?_recebe_dado_gps 0001                                       ?_data_nome 000A  
                            __size_of_trace_path 0280                                        _rmc_index 00F7  
                                    _get_cluster 2650                                      _disk_status 57AE  
                                  ??_move_window 0039                                        f_mount@fs 000A  
                                       _PIR1bits 000F9E                                      _get_gpstime 58EA  
                                     ?_diferenca 0001                                    move_window@fs 0048  
                                    _get_rawdate 577E               verifica_plausibilidade_lat@posicao 000A  
    verifica_dados_operacionais@velocidade_atual 0159      verifica_dados_operacionais@velocidade_media 0145  
                              ?_write_timer_zero 000A                                  remove_chain@nxt 007C  
                                      f_sync@dir 0067                                        f_sync@res 0066  
                                      f_sync@tim 0062                         posicao_cursor_lcd@coluna 000D  
                                     ?_disk_read 0029                               ??_write_timer_zero 000C  
                                      f_write@cc 009E                       posicao_cursor_lcd@endereco 000F  
                                      f_write@bw 008B                                        f_write@fp 0086  
                           _mostra_dados_display 583A                        __size_of_recebe_dado_uart 0012  
                                    _escalonador 43C4                                ___wmul@multiplier 000A  
                               ?_escreve_cmd_lcd 0001                      escreve_frase_ram_lcd@buffer 000D  
                               ??_inicializa_SPI 000A                                  ?_init_interrupt 0001  
                                   ??_disk_ioctl 000D                                     ??_disk_write 0030  
                            armazena_ltlo@buffer 003E                                     f_lseek@clust 00A5  
                                _inicializa_uart 59F8                                     f_lseek@csize 00A1  
                                   f_lseek@ifptr 009D                                 _mensagem_inicial 46EA  
                                  ??_posicao_lat 000A                                       ?_hora_nome 000A  
                                  _temp_buff_lat 0155                                  ?_init_oscilador 0001  
                                   ??_clust2sect 001A                                ___lmul@multiplier 000A  
                                      copy_data0 4664                                        copy_data1 4684  
                         recebe_dado_gps@timeout 000B                                      _escreve_SPI 5C0C  
                                  _flag_anomalia 0171                                       ?_sdc_reset 0001  
                            sdc_reset@count_nosd 0018                         ?_configura_baudrate_uart 0018  
                         ?_escreve_frase_ram_lcd 000D                                       ?_longitude 000A  
                               auto_mount@chk_wp 003E                                move_window@sector 0035  
                                 _sdc_disk_write 2C38                        __size_of_reserve_direntry 027A  
                   __size_of_latitude_to_convert 0078                         escreve_inteiro_lcd@F3223 01F7  
                                   ??_auto_mount 0060                                         __Hrparam 0000  
                                      memcpy@tmp 0010                                         __Lrparam 0000  
                                      fprintf@cc 00DA                               __end_of_disk_ioctl 5B24  
                          __size_of_remove_chain 00A0                                   put_cluster@val 0062  
                               get_cluster@clust 004A                               __end_of_disk_write 5304  
                                   _SentenceType 0178                                 __size_of___aldiv 00CC  
                         sdc_disk_initialize@ocr 0026                           __size_of_armazena_ltlo 0084  
                                   monta_sd@dado 0010                                 __size_of___lldiv 0082  
                               __size_of___ftmul 00F4                                 __size_of___llmod 0066  
                               __size_of___fttol 00D2                                    ??_put_cluster 0064  
                               __size_of___lwdiv 0052                                 __size_of___lwmod 0042  
                          ?_mostra_dados_display 0001                                     ??_init_ports 000A  
                            __end_of_move_window 2C38                                         ___awtoft 56AA  
                                       ___ftpack 4316                               __end_of_clust2sect 4316  
                       escreve_inteiro_lcd@valor 002B                                 __size_of_f_close 002C  
                       escreve_inteiro_lcd@texto 002F                                 __size_of_f_lseek 048C  
                               __size_of_f_mount 0048                                      _leitura_SPI 5C62  
                     disparo_gravacao@velocidade 02E7                                 __size_of_f_write 0596  
                               __size_of_get_fix 0042                                      _gps_minutos 5A3C  
                               __size_of_command 005A                            __end_of_init_hardware 5BC6  
                                       _check_fs 49B0                                       strcat@from 000C  
                               __size_of_gps_dia 0022                                 __size_of_gps_ano 0022  
                               __size_of_gps_mes 0022                                 __size_of_fprintf 034E  
                               __size_of_isdigit 001E                                         _gga_code 014F  
                                ___lwdiv@divisor 000C                                 ?_sdc_disk_status 0001  
                                  _time_recovery 0161                         _convert_to_int_point_lat 506C  
                               __size_of_rawdata 000A                                  ___lwdiv@counter 000E  
                             __end_of_auto_mount 0AF2                                         __ptext10 5268  
                               __size_of_rawhora 000A                                         __ptext11 43C4  
                                       __ptext20 3FF4                                         __ptext12 1C62  
                                       __ptext21 3D2C                                         __ptext13 2878  
                                       __ptext30 4F5E                                         __ptext22 56AA  
                                       __ptext14 2F70                                         __ptext31 4E38  
                                       __ptext23 4316                                         __ptext15 580C  
                                       __ptext40 40C6                                         __ptext32 5CC6  
                                       __ptext24 5CA0                                         __ptext16 5C78  
                                       __ptext41 5014                                         __ptext33 4B2E  
                                       __ptext25 583A                                         __ptext17 5C82  
                                       __ptext50 59F8                                         __ptext42 506C  
                                       __ptext34 5CCC                                         __ptext26 55F6  
                                       __ptext18 5C8C                                         __ptext51 3C24  
                                       __ptext43 59D6                                         __ptext35 5AC4  
                                       __ptext27 54AE                                         __ptext19 5C96  
                                       __ptext60 5304                                         __ptext52 4198  
                                       __ptext44 38D8                                         __ptext36 593E  
                                       __ptext28 3F0C                                         __ptext61 534C  
                                       __ptext53 5AE4                                         __ptext45 5670  
                                       __ptext37 4AB4                                         __ptext29 48A0  
                                       __ptext70 1640                                         __ptext62 58EA  
                                       __ptext54 3662                                         __ptext46 446E  
                                       __ptext38 4BA6                                         __ptext71 1EEA  
                                       __ptext63 5532                                         __ptext55 5424  
                                       __ptext47 54F0                                         __ptext39 492C  
                                       __ptext80 5966                                         __ptext72 33B4  
                                       __ptext64 5CAA                                         __ptext56 58C0  
                                       __ptext48 5172                                         __ptext81 197A  
                                       __ptext73 216A                                         __ptext65 12F2  
                                       __ptext57 56E2                                         __ptext49 5B96  
                                       __ptext90 511C                                         __ptext82 4810  
                                       __ptext74 30EC                                         __ptext66 50C4  
                                       __ptext58 574E                                         __ptext91 5394  
                                       __ptext83 4F00                                         __ptext75 4264  
                                       __ptext67 55B6                                         __ptext59 577E  
                                       __ptext92 0AF2                                         __ptext84 4CFE  
                                       __ptext76 4512                                         __ptext68 0012  
                                       __ptext93 2DDA                                         __ptext85 51C4  
                                       __ptext77 546A                                         __ptext69 4DD2  
                                       __ptext94 23E4                                         __ptext86 4C1E  
                                       __ptext78 05A8                                         __ptext95 2650  
                                       __ptext87 5B24                                         __ptext79 5868  
                                       __ptext96 4A32                                         __ptext88 49B0  
                                       __ptext97 5894                                         __ptext89 477E  
                                       __ptext98 37B0                                         __ptext99 53DC  
                               __size_of_proceed 000C                                         _filename 0256  
                                    _rawAltitude 010A                                 ?_disk_initialize 0001  
                                 _timeout_tarefa 0165                                     _rmc_pointers 022A  
                             sdc_disk_read@count 001C                           __size_of_get_longitude 0048  
                                     strcpy@from 000E                              escrita_sdcard@f_fix 0053  
                     __end_of_inicializa_tarefas 52B8                         i2write_timer_zero@timer0 0001  
                                       _grava_sd 5B96                           __end_of_sdc_disk_write 2DDA  
                                      monta_sd@i 0014                                         _gps_flag 013B  
                                       _latitude 5C96                                         _gps_hora 59B2  
                                    _rawLatitude 01BC                                         _init_lcd 45B2  
                                  __size_of_atoi 0162                                    __size_of_atol 0122  
                                  __size_of_main 002E                                     _remove_chain 4512  
                                  __size_of_itoa 003A                                    __size_of_ltoa 0042  
                            __end_of_posicao_lat 5CD0                                    __size_of_utoa 00A4  
                                  __size_of_sync 0052                              _endereco_cursor_lcd 4CFE  
                             __end_of_init_ports 5B7C                                         _rawSpeed 026A  
                                    ??_data_nome 000C                                _comma_counter_gga 00FF  
                                  dummy_clocks@i 000D                                         f_open@dj 00B6  
                                  dummy_clocks@n 000C                                         f_open@fn 00A1  
                                       f_open@fp 0098                                         f_open@dw 00AF  
                                       f_open@rs 00AD                                _comma_counter_rmc 00FE  
                                _dados_gps_to_sd 4E9C                                         _rmc_code 014C  
                                       _monta_sd 0F7E                                         _validate 53DC  
                                    ??_diferenca 0035                                         _sentence 0135  
                                   move_window@n 0043                                         _response 5C4A  
                                       f_sync@fp 0060                              _point_buff_gps_long 015B  
                    __size_of_posicao_cursor_lcd 005E                                         int$flags 0056  
                        posicao_cursor_lcd@linha 000E                                         atoi@sign 0015  
                       __size_of_tratamento_uart 0112                                         atol@sign 001E  
                                   ??_wait_ready 000A                                      ??_disk_read 0030  
                             armazena_ltlo@index 003F                          __end_of_inicializa_uart 5A1A  
                           convert_to_int@p_buff 0024                                     ??_trace_path 0083  
                           ?_endereco_cursor_lcd 0001                               put_cluster@fatsect 006E  
                                     _INTCONbits 000FF2                            __size_of_posicao_long 0006  
                     ?_convert_to_int_point_long 0024                                         memcmp@s1 000A  
                                       memcmp@s2 000C                                 move_window@wsect 0044  
                                       memcpy@d1 000A                                         memcpy@s1 000C  
                            __end_of_put_cluster 2650                                         fprintf@c 00DE  
                                       fprintf@f 00D3                                         fprintf@i 00DC  
                                       fprintf@r 00D4                                         fprintf@s 00BD  
                                       fprintf@w 00D1                                         fputc@chr 00A4  
                                       itoa@base 001E                                         fputc@fil 00A6  
                                       isdigit@c 000C                                         memset@p1 000A  
                                    ??_hora_nome 000C                                        ultoa@base 001C  
                              _config_timer_dois 5C3C                                     _tempo_backup 0123  
                                       fputs@fil 00AD                                         fputs@str 00AB  
                              _config_timer_zero 5B7C                                   _verifica_fence 4F5E  
                                  _armazena_ltlo 492C                                     _poligono_ext 00E7  
                                  wait_ready@res 000E                                         intlevel2 0000  
                             ?_config_timer_dois 0001                         mensagem_inicial@msg_dois 0023  
                                    ??_sdc_reset 0016                                         ltoa@base 0028  
                             ?_config_timer_zero 0001                                     _tempo_tarefa 011D  
                                ?_sdc_disk_write 0016  verifica_dados_operacionais@velocidade_atual_int 0141  
                               ___lwmod@dividend 000A                               __end_of_wait_ready 574E  
                       __end_of_disparo_gravacao 2A8E                                 ___lldiv@dividend 000A  
                              sdc_disk_read@buff 0028                            __end_of_sdc_disk_read 3B12  
                                    ??_longitude 000C                              sdc_disk_status@pdrv 000B  
                              get_rawspeed@index 000B                                    ?_desliga_uart 0001  
                     recebe_dado_gps@flag_recebe 000A                              ??_config_timer_dois 000A  
                                     _OSCCONbits 000FD3                               __end_of_trace_path 216A  
                            ??_config_timer_zero 000C                                      _move_window 2A8E  
                                _fence_diff_long 6125                                get_latitude@index 000B  
                         ??_mostra_dados_display 0010                                     _posicao_long 5CC6  
                                  _get_longitude 5304                             sdc_disk_write@count1 0023  
                           sdc_disk_write@p_buff 0016                                 _recebe_dado_uart 5BEA  
                                       utoa@base 0015                                         ultoa@buf 0017  
                           sdc_disk_write@sector 0018                            ??_endereco_cursor_lcd 000C  
                                       ultoa@val 0018                                     response@buff 000A  
                                       strcat@cp 000E                                         strcat@to 000A  
                                   ?_desliga_SPI 0001                                 ___lldiv@quotient 0012  
                     convert_to_int_point_long@i 0033                       convert_to_int_point_long@j 0032  
                                ___lwmod@divisor 000C                                         strcpy@cp 0010  
                                       strlen@cp 000C                                         strcpy@to 000C  
                                ___lwmod@counter 000E                                remove_chain@clust 0078  
                      __end_of_config_timer_dois 5C4A                                     ___aldiv@sign 0013  
                                  ?_create_chain 0078                        __end_of_config_timer_zero 5B96  
                         __end_of_verifica_fence 4FBA                      __size_ofi2_write_timer_zero 000A  
                                    _SSPCON1bits 000FC6                          __size_of_next_dir_entry 0166  
                                    _posicao_lat 5CCC                           escreve_cmd_lcd@comando 000C  
                                 ?_armazena_ltlo 003E                              sdc_disk_write@count 001C  
                    __size_of_verifica_recep_gps 0028                          __size_of_convert_to_int 0022  
                  sdc_disk_initialize@crc_number 0023        convert_to_int_point_long@convert_str_long 0028  
                        __end_of_dados_gps_to_sd 4F00                               sdc_disk_write@buff 0028  
                   __size_of_sdc_disk_initialize 02E8                                     f_write@clust 00A0  
                                 ??_desliga_uart 000A                               leitura_sdcard@size 01FE  
                                   f_write@wbuff 0099                                     ?_get_fattime 000E  
                               _reserve_direntry 216A                          disparo_gravacao@fix_gps 02F3  
                                    f_write@buff 0088                                sdc_disk_write@res 0025  
                                  ?_get_latitude 0001                                     ?_get_cluster 004A  
                                    f_write@sect 009A                                      f_write@wcnt 00A2  
                                   ?_disk_status 0001                    __end_ofmensagem_inicial@F3687 6125  
                  __end_ofmensagem_inicial@F3689 6114                                  escreve_SPI@dado 000B  
                                   ?_get_gpstime 0001                            disparo_gravacao@v_max 02F5  
