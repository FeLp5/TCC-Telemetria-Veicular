

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Thu May 05 14:53:26 2022

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=3
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=3
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=3
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=3
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=3
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=2
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=3
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=2
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=3
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=3
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=3
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1,group=2
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=2
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=2
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1,group=3
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1,group=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1,group=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1,group=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1,group=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1,group=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1,group=1
   145                           	psect	text124,global,reloc=2,class=CODE,delta=1,group=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1,group=1
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1,group=1
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1,group=1
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1,group=1
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=1
   151                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=1
   152                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   153                           	psect	text132,global,reloc=2,class=CODE,delta=1,group=1
   154                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   155                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   156                           	psect	text134,global,reloc=2,class=CODE,delta=1
   157                           	psect	text135,global,reloc=2,class=CODE,delta=1
   158                           	psect	text136,global,reloc=2,class=CODE,delta=1
   159                           	psect	text137,global,reloc=2,class=CODE,delta=1
   160                           	psect	text138,global,reloc=2,class=CODE,delta=1,group=3
   161                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1,group=3
   163                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   164                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   165                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   166                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   167  0000                     
   168                           ; Version 2.30
   169                           ; Generated 26/08/2020 GMT
   170                           ; 
   171                           ; Copyright © 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   172                           ; All rights reserved.
   173                           ; 
   174                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   175                           ; 
   176                           ; Redistribution and use in source and binary forms, with or without modification, are
   177                           ; permitted provided that the following conditions are met:
   178                           ; 
   179                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   180                           ;        conditions and the following disclaimer.
   181                           ; 
   182                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   183                           ;        of conditions and the following disclaimer in the documentation and/or other
   184                           ;        materials provided with the distribution. Publication is not required when
   185                           ;        this file is used in an embedded application.
   186                           ; 
   187                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   188                           ;        software without specific prior written permission.
   189                           ; 
   190                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   191                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   192                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   193                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   194                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   195                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   196                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   197                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   198                           ; 
   199                           ; 
   200                           ; Code-generator required, PIC18F4550 Definitions
   201                           ; 
   202                           ; SFR Addresses
   203  0000                     
   204                           	psect	idataBANK0
   205  005EFB                     __pidataBANK0:
   206                           	callstack 0
   207                           
   208                           ;initializer for leitura_sdcard@size
   209  005EFB  58                 	db	88
   210                           
   211                           	psect	idataBANK1
   212  005EF8                     __pidataBANK1:
   213                           	callstack 0
   214                           
   215                           ;initializer for mcp2515_getNextFreeTXBuf@F3700
   216  005EF8  30                 	db	48
   217  005EF9  40                 	db	64
   218  005EFA  50                 	db	80
   219                           
   220                           	psect	idataBANK2
   221  005E56                     __pidataBANK2:
   222                           	callstack 0
   223                           
   224                           ;initializer for escreve_inteiro_uart@F3215
   225  005E56  30                 	db	48
   226  005E57  30                 	db	48
   227  005E58  30                 	db	48
   228  005E59  30                 	db	48
   229  005E5A  30                 	db	48
   230  005E5B  30                 	db	48
   231  005E5C  00                 	db	0
   232                           
   233                           ;initializer for escreve_inteiro_lcd@F3223
   234  005E5D  30                 	db	48
   235  005E5E  30                 	db	48
   236  005E5F  30                 	db	48
   237  005E60  30                 	db	48
   238  005E61  30                 	db	48
   239  005E62  30                 	db	48
   240  005E63  00                 	db	0
   241                           
   242                           	psect	mediumconst
   243  006088                     __pmediumconst:
   244                           	callstack 0
   245  006088  00                 	db	0
   246  006089                     _fence_diff_long:
   247                           	callstack 0
   248  006089  2D                 	db	45
   249  00608A  30                 	db	48
   250  00608B  34                 	db	52
   251  00608C  36                 	db	54
   252  00608D  33                 	db	51
   253  00608E  32                 	db	50
   254  00608F  2E                 	db	46
   255  006090  30                 	db	48
   256  006091  34                 	db	52
   257  006092  32                 	db	50
   258  006093  36                 	db	54
   259  006094  34                 	db	52
   260  006095  2D                 	db	45
   261  006096  30                 	db	48
   262  006097  34                 	db	52
   263  006098  36                 	db	54
   264  006099  33                 	db	51
   265  00609A  31                 	db	49
   266  00609B  2E                 	db	46
   267  00609C  37                 	db	55
   268  00609D  35                 	db	53
   269  00609E  39                 	db	57
   270  00609F  30                 	db	48
   271  0060A0  37                 	db	55
   272  0060A1  2D                 	db	45
   273  0060A2  30                 	db	48
   274  0060A3  34                 	db	52
   275  0060A4  36                 	db	54
   276  0060A5  33                 	db	51
   277  0060A6  31                 	db	49
   278  0060A7  2E                 	db	46
   279  0060A8  37                 	db	55
   280  0060A9  35                 	db	53
   281  0060AA  39                 	db	57
   282  0060AB  30                 	db	48
   283  0060AC  37                 	db	55
   284  0060AD  2D                 	db	45
   285  0060AE  30                 	db	48
   286  0060AF  34                 	db	52
   287  0060B0  36                 	db	54
   288  0060B1  33                 	db	51
   289  0060B2  32                 	db	50
   290  0060B3  2E                 	db	46
   291  0060B4  30                 	db	48
   292  0060B5  34                 	db	52
   293  0060B6  32                 	db	50
   294  0060B7  36                 	db	54
   295  0060B8  34                 	db	52
   296  0060B9                     __end_of_fence_diff_long:
   297                           	callstack 0
   298  0060B9                     _fence_diff_lat:
   299                           	callstack 0
   300  0060B9  2D                 	db	45
   301  0060BA  32                 	db	50
   302  0060BB  33                 	db	51
   303  0060BC  33                 	db	51
   304  0060BD  39                 	db	57
   305  0060BE  2E                 	db	46
   306  0060BF  34                 	db	52
   307  0060C0  38                 	db	56
   308  0060C1  35                 	db	53
   309  0060C2  31                 	db	49
   310  0060C3  37                 	db	55
   311  0060C4  2D                 	db	45
   312  0060C5  32                 	db	50
   313  0060C6  33                 	db	51
   314  0060C7  33                 	db	51
   315  0060C8  39                 	db	57
   316  0060C9  2E                 	db	46
   317  0060CA  34                 	db	52
   318  0060CB  38                 	db	56
   319  0060CC  35                 	db	53
   320  0060CD  31                 	db	49
   321  0060CE  37                 	db	55
   322  0060CF  2D                 	db	45
   323  0060D0  32                 	db	50
   324  0060D1  33                 	db	51
   325  0060D2  33                 	db	51
   326  0060D3  39                 	db	57
   327  0060D4  2E                 	db	46
   328  0060D5  37                 	db	55
   329  0060D6  31                 	db	49
   330  0060D7  33                 	db	51
   331  0060D8  36                 	db	54
   332  0060D9  35                 	db	53
   333  0060DA  2D                 	db	45
   334  0060DB  32                 	db	50
   335  0060DC  33                 	db	51
   336  0060DD  33                 	db	51
   337  0060DE  39                 	db	57
   338  0060DF  2E                 	db	46
   339  0060E0  37                 	db	55
   340  0060E1  31                 	db	49
   341  0060E2  33                 	db	51
   342  0060E3  36                 	db	54
   343  0060E4  35                 	db	53
   344  0060E5                     __end_of_fence_diff_lat:
   345                           	callstack 0
   346  0060E5                     mensagem_inicial@F3672:
   347                           	callstack 0
   348  0060E5  54                 	db	84
   349  0060E6  43                 	db	67
   350  0060E7  43                 	db	67
   351  0060E8  2D                 	db	45
   352  0060E9  2D                 	db	45
   353  0060EA  54                 	db	84
   354  0060EB  45                 	db	69
   355  0060EC  4C                 	db	76
   356  0060ED  45                 	db	69
   357  0060EE  4D                 	db	77
   358  0060EF  54                 	db	84
   359  0060F0  52                 	db	82
   360  0060F1  49                 	db	73
   361  0060F2  41                 	db	65
   362  0060F3  00                 	db	0
   363  0060F4  00                 	db	0
   364  0060F5  00                 	db	0
   365  0060F6                     __end_ofmensagem_inicial@F3672:
   366                           	callstack 0
   367  0060F6                     mensagem_inicial@F3670:
   368                           	callstack 0
   369  0060F6  46                 	db	70
   370  0060F7  41                 	db	65
   371  0060F8  54                 	db	84
   372  0060F9  45                 	db	69
   373  0060FA  43                 	db	67
   374  0060FB  20                 	db	32
   375  0060FC  53                 	db	83
   376  0060FD  54                 	db	84
   377  0060FE  20                 	db	32
   378  0060FF  41                 	db	65
   379  006100  4E                 	db	78
   380  006101  44                 	db	68
   381  006102  52                 	db	82
   382  006103  45                 	db	69
   383  006104  00                 	db	0
   384  006105  00                 	db	0
   385  006106  00                 	db	0
   386  006107                     __end_ofmensagem_inicial@F3670:
   387                           	callstack 0
   388  0000                     _TMR0	set	4054
   389  0000                     _INTCON2bits	set	4081
   390  0000                     _ADCON0	set	4034
   391  0000                     _SSPADD	set	4040
   392  0000                     _TRISAbits	set	3986
   393  0000                     _PORTEbits	set	3972
   394  0000                     _PCL	set	4089
   395  0000                     _PCLATH	set	4090
   396  0000                     _PIE1bits	set	3997
   397  0000                     _RCSTA	set	4011
   398  0000                     _TXSTA	set	4012
   399  0000                     _RCREG	set	4014
   400  0000                     _RCSTAbits	set	4011
   401  0000                     _SPBRG	set	4015
   402  0000                     _PIR1bits	set	3998
   403  0000                     _SSPBUF	set	4041
   404  0000                     _SSPCON1bits	set	4038
   405  0000                     _SSPSTATbits	set	4039
   406  0000                     _SSPCON1	set	4038
   407  0000                     _SSPSTAT	set	4039
   408  0000                     _TRISCbits	set	3988
   409  0000                     _TRISBbits	set	3987
   410  0000                     _PORTBbits	set	3969
   411  0000                     _PR2	set	4043
   412  0000                     _TMR2	set	4044
   413  0000                     _T2CON	set	4042
   414  0000                     _OSCCONbits	set	4051
   415  0000                     _TRISE	set	3990
   416  0000                     _TRISC	set	3988
   417  0000                     _TRISA	set	3986
   418  0000                     _TRISD	set	3989
   419  0000                     _LATB	set	3978
   420  0000                     _TRISB	set	3987
   421  0000                     _ADCON1	set	4033
   422  0000                     _T0CONbits	set	4053
   423  0000                     _INTCONbits	set	4082
   424  0000                     _PIE1	set	3997
   425  0000                     _INTCON3	set	4080
   426  0000                     _INTCON2	set	4081
   427  0000                     _INTCON	set	4082
   428  0000                     _SPPCFG	set	3939
   429  0000                     _SPPCON	set	3941
   430  0000                     _T0CON	set	4053
   431  0000                     _PORTDbits	set	3971
   432  0000                     _TRISDbits	set	3989
   433  0000                     _LATBbits	set	3978
   434  0000                     _LATCbits	set	3979
   435  0000                     _INT0IE	set	32660
   436  0000                     _INT0IF	set	32657
   437  0000                     _T0IF	set	32658
   438  0000                     _TMR0IF	set	32658
   439  0000                     _RCIF	set	31989
   440  0000                     _TXEN	set	32101
   441  0000                     _CREN	set	32092
   442  0000                     _SPEN	set	32095
   443  0000                     _SYNC	set	32100
   444  0000                     _BRGH	set	32098
   445  006107                     STR_14:
   446  006107  0A                 	db	10
   447  006108  76                 	db	118	;'v'
   448  006109  25                 	db	37
   449  00610A  73                 	db	115	;'s'
   450  00610B  3B                 	db	59	;';'
   451  00610C  6C                 	db	108	;'l'
   452  00610D  74                 	db	116	;'t'
   453  00610E  25                 	db	37
   454  00610F  73                 	db	115	;'s'
   455  006110  3B                 	db	59	;';'
   456  006111  6C                 	db	108	;'l'
   457  006112  6F                 	db	111	;'o'
   458  006113  25                 	db	37
   459  006114  73                 	db	115	;'s'
   460  006115  3B                 	db	59	;';'
   461  006116  72                 	db	114	;'r'
   462  006117  25                 	db	37
   463  006118  73                 	db	115	;'s'
   464  006119  3B                 	db	59	;';'
   465  00611A  63                 	db	99	;'c'
   466  00611B  25                 	db	37
   467  00611C  73                 	db	115	;'s'
   468  00611D  3B                 	db	59	;';'
   469  00611E  6B                 	db	107	;'k'
   470  00611F  25                 	db	37
   471  006120  73                 	db	115	;'s'
   472  006121  3B                 	db	59	;';'
   473  006122  68                 	db	104	;'h'
   474  006123  25                 	db	37
   475  006124  73                 	db	115	;'s'
   476  006125  3B                 	db	59	;';'
   477  006126  64                 	db	100	;'d'
   478  006127  25                 	db	37
   479  006128  73                 	db	115	;'s'
   480  006129  3B                 	db	59	;';'
   481  00612A  66                 	db	102	;'f'
   482  00612B  25                 	db	37
   483  00612C  73                 	db	115	;'s'
   484  00612D  00                 	db	0
   485  00612E                     STR_18:
   486  00612E  73                 	db	115	;'s'
   487  00612F  74                 	db	116	;'t'
   488  006130  72                 	db	114	;'r'
   489  006131  69                 	db	105	;'i'
   490  006132  6E                 	db	110	;'n'
   491  006133  67                 	db	103	;'g'
   492  006134  5F                 	db	95	;'_'
   493  006135  64                 	db	100	;'d'
   494  006136  61                 	db	97	;'a'
   495  006137  64                 	db	100	;'d'
   496  006138  6F                 	db	111	;'o'
   497  006139  2E                 	db	46
   498  00613A  6F                 	db	111	;'o'
   499  00613B  64                 	db	100	;'d'
   500  00613C  6F                 	db	111	;'o'
   501  00613D  6D                 	db	109	;'m'
   502  00613E  65                 	db	101	;'e'
   503  00613F  74                 	db	116	;'t'
   504  006140  72                 	db	114	;'r'
   505  006141  6F                 	db	111	;'o'
   506  006142  5F                 	db	95	;'_'
   507  006143  74                 	db	116	;'t'
   508  006144  6F                 	db	111	;'o'
   509  006145  74                 	db	116	;'t'
   510  006146  61                 	db	97	;'a'
   511  006147  6C                 	db	108	;'l'
   512  006148  00                 	db	0
   513  006149  6F                 	db	111	;'o'
   514  00614A  20                 	db	32
   515  00614B  53                 	db	83	;'S'
   516  00614C  69                 	db	105	;'i'
   517  00614D  73                 	db	115	;'s'
   518  00614E  74                 	db	116	;'t'
   519  00614F  65                 	db	101	;'e'
   520  006150  6D                 	db	109	;'m'
   521  006151  61                 	db	97	;'a'
   522  006152  20                 	db	32
   523  006153  64                 	db	100	;'d'
   524  006154  65                 	db	101	;'e'
   525  006155  20                 	db	32
   526  006156  61                 	db	97	;'a'
   527  006157  72                 	db	114	;'r'
   528  006158  71                 	db	113	;'q'
   529  006159  75                 	db	117	;'u'
   530  00615A  69                 	db	105	;'i'
   531  00615B  76                 	db	118	;'v'
   532  00615C  6F                 	db	111	;'o'
   533  00615D  00                 	db	0
   534  00615E                     STR_30:
   535  00615E  42                 	db	66	;'B'
   536  00615F  31                 	db	49	;'1'
   537  006160  3A                 	db	58	;':'
   538  006161  52                 	db	82	;'R'
   539  006162  50                 	db	80	;'P'
   540  006163  4D                 	db	77	;'M'
   541  006164  20                 	db	32
   542  006165  20                 	db	32
   543  006166  42                 	db	66	;'B'
   544  006167  32                 	db	50	;'2'
   545  006168  3A                 	db	58	;':'
   546  006169  46                 	db	70	;'F'
   547  00616A  45                 	db	69	;'E'
   548  00616B  4E                 	db	78	;'N'
   549  00616C  43                 	db	67	;'C'
   550  00616D  45                 	db	69	;'E'
   551  00616E  00                 	db	0
   552  00616F                     STR_17:
   553  00616F  73                 	db	115	;'s'
   554  006170  74                 	db	116	;'t'
   555  006171  72                 	db	114	;'r'
   556  006172  69                 	db	105	;'i'
   557  006173  6E                 	db	110	;'n'
   558  006174  67                 	db	103	;'g'
   559  006175  5F                 	db	95	;'_'
   560  006176  64                 	db	100	;'d'
   561  006177  61                 	db	97	;'a'
   562  006178  64                 	db	100	;'d'
   563  006179  6F                 	db	111	;'o'
   564  00617A  2E                 	db	46
   565  00617B  63                 	db	99	;'c'
   566  00617C  6F                 	db	111	;'o'
   567  00617D  6D                 	db	109	;'m'
   568  00617E  62                 	db	98	;'b'
   569  00617F  00                 	db	0
   570  006180                     STR_19:
   571  006180  73                 	db	115	;'s'
   572  006181  74                 	db	116	;'t'
   573  006182  72                 	db	114	;'r'
   574  006183  69                 	db	105	;'i'
   575  006184  6E                 	db	110	;'n'
   576  006185  67                 	db	103	;'g'
   577  006186  5F                 	db	95	;'_'
   578  006187  64                 	db	100	;'d'
   579  006188  61                 	db	97	;'a'
   580  006189  64                 	db	100	;'d'
   581  00618A  6F                 	db	111	;'o'
   582  00618B  2E                 	db	46
   583  00618C  64                 	db	100	;'d'
   584  00618D  74                 	db	116	;'t'
   585  00618E  63                 	db	99	;'c'
   586  00618F  00                 	db	0
   587  006190                     STR_15:
   588  006190  73                 	db	115	;'s'
   589  006191  74                 	db	116	;'t'
   590  006192  72                 	db	114	;'r'
   591  006193  69                 	db	105	;'i'
   592  006194  6E                 	db	110	;'n'
   593  006195  67                 	db	103	;'g'
   594  006196  5F                 	db	95	;'_'
   595  006197  64                 	db	100	;'d'
   596  006198  61                 	db	97	;'a'
   597  006199  64                 	db	100	;'d'
   598  00619A  6F                 	db	111	;'o'
   599  00619B  2E                 	db	46
   600  00619C  76                 	db	118	;'v'
   601  00619D  65                 	db	101	;'e'
   602  00619E  6C                 	db	108	;'l'
   603  00619F  00                 	db	0
   604  0061A0                     STR_16:
   605  0061A0  73                 	db	115	;'s'
   606  0061A1  74                 	db	116	;'t'
   607  0061A2  72                 	db	114	;'r'
   608  0061A3  69                 	db	105	;'i'
   609  0061A4  6E                 	db	110	;'n'
   610  0061A5  67                 	db	103	;'g'
   611  0061A6  5F                 	db	95	;'_'
   612  0061A7  64                 	db	100	;'d'
   613  0061A8  61                 	db	97	;'a'
   614  0061A9  64                 	db	100	;'d'
   615  0061AA  6F                 	db	111	;'o'
   616  0061AB  2E                 	db	46
   617  0061AC  72                 	db	114	;'r'
   618  0061AD  70                 	db	112	;'p'
   619  0061AE  6D                 	db	109	;'m'
   620  0061AF  00                 	db	0
   621  0061B0                     STR_2:
   622  0061B0  49                 	db	73	;'I'
   623  0061B1  6E                 	db	110	;'n'
   624  0061B2  73                 	db	115	;'s'
   625  0061B3  69                 	db	105	;'i'
   626  0061B4  72                 	db	114	;'r'
   627  0061B5  61                 	db	97	;'a'
   628  0061B6  20                 	db	32
   629  0061B7  6F                 	db	111	;'o'
   630  0061B8  20                 	db	32
   631  0061B9  43                 	db	67	;'C'
   632  0061BA  61                 	db	97	;'a'
   633  0061BB  72                 	db	114	;'r'
   634  0061BC  74                 	db	116	;'t'
   635  0061BD  61                 	db	97	;'a'
   636  0061BE  6F                 	db	111	;'o'
   637  0061BF  00                 	db	0
   638  0061C0  45                 	db	69	;'E'
   639  0061C1  72                 	db	114	;'r'
   640  0061C2  72                 	db	114	;'r'
   641  0061C3  6F                 	db	111	;'o'
   642  0061C4  20                 	db	32
   643  0061C5  61                 	db	97	;'a'
   644  0061C6  6F                 	db	111	;'o'
   645  0061C7  20                 	db	32
   646  0061C8  6D                 	db	109	;'m'
   647  0061C9  6F                 	db	111	;'o'
   648  0061CA  6E                 	db	110	;'n'
   649  0061CB  74                 	db	116	;'t'
   650  0061CC  61                 	db	97	;'a'
   651  0061CD  72                 	db	114	;'r'
   652  0061CE  00                 	db	0
   653  0061CF                     STR_31:
   654  0061CF  52                 	db	82	;'R'
   655  0061D0  45                 	db	69	;'E'
   656  0061D1  47                 	db	71	;'G'
   657  0061D2  49                 	db	73	;'I'
   658  0061D3  41                 	db	65	;'A'
   659  0061D4  4F                 	db	79	;'O'
   660  0061D5  20                 	db	32
   661  0061D6  4E                 	db	78	;'N'
   662  0061D7  45                 	db	69	;'E'
   663  0061D8  47                 	db	71	;'G'
   664  0061D9  41                 	db	65	;'A'
   665  0061DA  44                 	db	68	;'D'
   666  0061DB  41                 	db	65	;'A'
   667  0061DC  00                 	db	0
   668  0061DD  45                 	db	69	;'E'
   669  0061DE  72                 	db	114	;'r'
   670  0061DF  72                 	db	114	;'r'
   671  0061E0  6F                 	db	111	;'o'
   672  0061E1  20                 	db	32
   673  0061E2  61                 	db	97	;'a'
   674  0061E3  6F                 	db	111	;'o'
   675  0061E4  20                 	db	32
   676  0061E5  63                 	db	99	;'c'
   677  0061E6  72                 	db	114	;'r'
   678  0061E7  69                 	db	105	;'i'
   679  0061E8  61                 	db	97	;'a'
   680  0061E9  72                 	db	114	;'r'
   681  0061EA  00                 	db	0
   682  0061EB  65                 	db	101	;'e'
   683  0061EC  78                 	db	120	;'x'
   684  0061ED  74                 	db	116	;'t'
   685  0061EE  66                 	db	102	;'f'
   686  0061EF  65                 	db	101	;'e'
   687  0061F0  6E                 	db	110	;'n'
   688  0061F1  63                 	db	99	;'c'
   689  0061F2  65                 	db	101	;'e'
   690  0061F3  2E                 	db	46
   691  0061F4  74                 	db	116	;'t'
   692  0061F5  78                 	db	120	;'x'
   693  0061F6  74                 	db	116	;'t'
   694  0061F7  00                 	db	0
   695  0061F8                     STR_23:
   696  0061F8  41                 	db	65	;'A'
   697  0061F9  47                 	db	71	;'G'
   698  0061FA  55                 	db	85	;'U'
   699  0061FB  41                 	db	65	;'A'
   700  0061FC  52                 	db	82	;'R'
   701  0061FD  44                 	db	68	;'D'
   702  0061FE  45                 	db	69	;'E'
   703  0061FF  2E                 	db	46
   704  006200  2E                 	db	46
   705  006201  2E                 	db	46
   706  006202  00                 	db	0
   707  006203                     STR_4:
   708  006203  4D                 	db	77	;'M'
   709  006204  4D                 	db	77	;'M'
   710  006205  43                 	db	67	;'C'
   711  006206  20                 	db	32
   712  006207  56                 	db	86	;'V'
   713  006208  65                 	db	101	;'e'
   714  006209  72                 	db	114	;'r'
   715  00620A  2E                 	db	46
   716  00620B  20                 	db	32
   717  00620C  33                 	db	51	;'3'
   718  00620D  00                 	db	0
   719  00620E                     STR_1:
   720  00620E  53                 	db	83	;'S'
   721  00620F  65                 	db	101	;'e'
   722  006210  6D                 	db	109	;'m'
   723  006211  20                 	db	32
   724  006212  43                 	db	67	;'C'
   725  006213  61                 	db	97	;'a'
   726  006214  72                 	db	114	;'r'
   727  006215  74                 	db	116	;'t'
   728  006216  61                 	db	97	;'a'
   729  006217  6F                 	db	111	;'o'
   730  006218  00                 	db	0
   731  006219  56                 	db	86	;'V'
   732  00621A  65                 	db	101	;'e'
   733  00621B  72                 	db	114	;'r'
   734  00621C  69                 	db	105	;'i'
   735  00621D  66                 	db	102	;'f'
   736  00621E  69                 	db	105	;'i'
   737  00621F  71                 	db	113	;'q'
   738  006220  75                 	db	117	;'u'
   739  006221  65                 	db	101	;'e'
   740  006222  00                 	db	0
   741  006223  6F                 	db	111	;'o'
   742  006224  20                 	db	32
   743  006225  61                 	db	97	;'a'
   744  006226  72                 	db	114	;'r'
   745  006227  71                 	db	113	;'q'
   746  006228  75                 	db	117	;'u'
   747  006229  69                 	db	105	;'i'
   748  00622A  76                 	db	118	;'v'
   749  00622B  6F                 	db	111	;'o'
   750  00622C  00                 	db	0
   751  00622D                     STR_3:
   752  00622D  53                 	db	83	;'S'
   753  00622E  44                 	db	68	;'D'
   754  00622F  20                 	db	32
   755  006230  56                 	db	86	;'V'
   756  006231  45                 	db	69	;'E'
   757  006232  52                 	db	82	;'R'
   758  006233  2E                 	db	46
   759  006234  20                 	db	32
   760  006235  31                 	db	49	;'1'
   761  006236  00                 	db	0
   762  006237  6F                 	db	111	;'o'
   763  006238  20                 	db	32
   764  006239  63                 	db	99	;'c'
   765  00623A  61                 	db	97	;'a'
   766  00623B  72                 	db	114	;'r'
   767  00623C  74                 	db	116	;'t'
   768  00623D  61                 	db	97	;'a'
   769  00623E  6F                 	db	111	;'o'
   770  00623F  00                 	db	0
   771  006240                     STR_32:
   772  006240  4C                 	db	76	;'L'
   773  006241  4F                 	db	79	;'O'
   774  006242  2D                 	db	45
   775  006243  4C                 	db	76	;'L'
   776  006244  54                 	db	84	;'T'
   777  006245  3A                 	db	58	;':'
   778  006246  00                 	db	0
   779  006247                     STR_25:
   780  006247  44                 	db	68	;'D'
   781  006248  45                 	db	69	;'E'
   782  006249  4E                 	db	78	;'N'
   783  00624A  54                 	db	84	;'T'
   784  00624B  52                 	db	82	;'R'
   785  00624C  4F                 	db	79	;'O'
   786  00624D  00                 	db	0
   787  00624E                     STR_6:
   788  00624E  47                 	db	71	;'G'
   789  00624F  50                 	db	80	;'P'
   790  006250  47                 	db	71	;'G'
   791  006251  47                 	db	71	;'G'
   792  006252  41                 	db	65	;'A'
   793  006253  00                 	db	0
   794  006254                     STR_5:
   795  006254  47                 	db	71	;'G'
   796  006255  50                 	db	80	;'P'
   797  006256  52                 	db	82	;'R'
   798  006257  4D                 	db	77	;'M'
   799  006258  43                 	db	67	;'C'
   800  006259  00                 	db	0
   801  00625A                     STR_27:
   802  00625A  56                 	db	86	;'V'
   803  00625B  45                 	db	69	;'E'
   804  00625C  4C                 	db	76	;'L'
   805  00625D  3A                 	db	58	;':'
   806  00625E  00                 	db	0
   807  00625F                     STR_26:
   808  00625F  52                 	db	82	;'R'
   809  006260  50                 	db	80	;'P'
   810  006261  4D                 	db	77	;'M'
   811  006262  3A                 	db	58	;':'
   812  006263  00                 	db	0
   813  006264                     STR_24:
   814  006264  46                 	db	70	;'F'
   815  006265  4F                 	db	79	;'O'
   816  006266  52                 	db	82	;'R'
   817  006267  41                 	db	65	;'A'
   818  006268  00                 	db	0
   819  006269                     STR_13:
   820  006269  2E                 	db	46
   821  00626A  74                 	db	116	;'t'
   822  00626B  6C                 	db	108	;'l'
   823  00626C  6D                 	db	109	;'m'
   824  00626D  00                 	db	0
   825  00626E                     STR_29:
   826  00626E  6C                 	db	108	;'l'
   827  00626F  6F                 	db	111	;'o'
   828  006270  3A                 	db	58	;':'
   829  006271  00                 	db	0
   830  006272                     STR_28:
   831  006272  6C                 	db	108	;'l'
   832  006273  74                 	db	116	;'t'
   833  006274  3A                 	db	58	;':'
   834  006275  00                 	db	0
   835  006276                     STR_21:
   836  006276  46                 	db	70	;'F'
   837  006277  41                 	db	65	;'A'
   838  006278  54                 	db	84	;'T'
   839  006279  00                 	db	0
   840  00627A  0D                 	db	13
   841  00627B  0A                 	db	10
   842  00627C  00                 	db	0
   843  00627D                     STR_33:
   844  00627D  2D                 	db	45
   845  00627E  00                 	db	0
   846  00627F  00                 	db	0	; dummy byte at the end
   847  0000                     
   848                           ; #config settings
   849                           
   850                           	psect	cinit
   851  0047D8                     __pcinit:
   852                           	callstack 0
   853  0047D8                     start_initialization:
   854                           	callstack 0
   855  0047D8                     __initialization:
   856                           	callstack 0
   857                           
   858                           ; Initialize objects allocated to BANK2 (14 bytes)
   859                           ; load TBLPTR registers with __pidataBANK2
   860  0047D8  0E56               	movlw	low __pidataBANK2
   861  0047DA  6EF6               	movwf	tblptrl,c
   862  0047DC  0E5E               	movlw	high __pidataBANK2
   863  0047DE  6EF7               	movwf	tblptrh,c
   864  0047E0  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   865  0047E2  6EF8               	movwf	tblptru,c
   866  0047E4  EE02  F0D3         	lfsr	0,__pdataBANK2
   867  0047E8  EE10 F00E          	lfsr	1,14
   868  0047EC                     copy_data0:
   869  0047EC  0009               	tblrd		*+
   870  0047EE  CFF5 FFEE          	movff	tablat,postinc0
   871  0047F2  50E5               	movf	postdec1,w,c
   872  0047F4  50E1               	movf	fsr1l,w,c
   873  0047F6  E1FA               	bnz	copy_data0
   874                           
   875                           ; Initialize objects allocated to BANK1 (3 bytes)
   876                           ; load TBLPTR registers with __pidataBANK1
   877  0047F8  0EF8               	movlw	low __pidataBANK1
   878  0047FA  6EF6               	movwf	tblptrl,c
   879  0047FC  0E5E               	movlw	high __pidataBANK1
   880  0047FE  6EF7               	movwf	tblptrh,c
   881  004800  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   882  004802  6EF8               	movwf	tblptru,c
   883  004804  0009               	tblrd		*+	;fetch initializer
   884  004806  CFF5 F1FC          	movff	tablat,__pdataBANK1
   885  00480A  0009               	tblrd		*+	;fetch initializer
   886  00480C  CFF5 F1FD          	movff	tablat,__pdataBANK1+1
   887  004810  0009               	tblrd		*+	;fetch initializer
   888  004812  CFF5 F1FE          	movff	tablat,__pdataBANK1+2
   889                           
   890                           ; Initialize objects allocated to BANK0 (1 bytes)
   891                           ; load TBLPTR registers with __pidataBANK0
   892  004816  0EFB               	movlw	low __pidataBANK0
   893  004818  6EF6               	movwf	tblptrl,c
   894  00481A  0E5E               	movlw	high __pidataBANK0
   895  00481C  6EF7               	movwf	tblptrh,c
   896  00481E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   897  004820  6EF8               	movwf	tblptru,c
   898  004822  0009               	tblrd		*+	;fetch initializer
   899  004824  CFF5 F0FD          	movff	tablat,__pdataBANK0
   900                           
   901                           ; Clear objects allocated to BIGRAM (544 bytes)
   902  004828  EE02  F0E1         	lfsr	0,__pbssBIGRAM
   903  00482C  EE12 F020          	lfsr	1,544
   904  004830                     clear_0:
   905  004830  6AEE               	clrf	postinc0,c
   906  004832  50E5               	movf	postdec1,w,c
   907  004834  50E1               	movf	fsr1l,w,c
   908  004836  E1FC               	bnz	clear_0
   909  004838  50E2               	movf	fsr1h,w,c
   910  00483A  E1FA               	bnz	clear_0
   911                           
   912                           ; Clear objects allocated to BANK2 (177 bytes)
   913  00483C  EE02  F000         	lfsr	0,__pbssBANK2
   914  004840  0EB1               	movlw	177
   915  004842                     clear_1:
   916  004842  6AEE               	clrf	postinc0,c
   917  004844  06E8               	decf	wreg,f,c
   918  004846  E1FD               	bnz	clear_1
   919                           
   920                           ; Clear objects allocated to BANK1 (252 bytes)
   921  004848  EE01  F000         	lfsr	0,__pbssBANK1
   922  00484C  0EFC               	movlw	252
   923  00484E                     clear_2:
   924  00484E  6AEE               	clrf	postinc0,c
   925  004850  06E8               	decf	wreg,f,c
   926  004852  E1FD               	bnz	clear_2
   927                           
   928                           ; Clear objects allocated to BANK0 (6 bytes)
   929  004854  0100               	movlb	0
   930  004856  6BFC               	clrf	(__pbssBANK0+5)& (0+255),b
   931  004858  6BFB               	clrf	(__pbssBANK0+4)& (0+255),b
   932  00485A  6BFA               	clrf	(__pbssBANK0+3)& (0+255),b
   933  00485C  6BF9               	clrf	(__pbssBANK0+2)& (0+255),b
   934  00485E  6BF8               	clrf	(__pbssBANK0+1)& (0+255),b
   935  004860  6BF7               	clrf	__pbssBANK0& (0+255),b
   936                           
   937                           ; Clear objects allocated to COMRAM (21 bytes)
   938  004862  EE00  F032         	lfsr	0,__pbssCOMRAM
   939  004866  0E15               	movlw	21
   940  004868                     clear_3:
   941  004868  6AEE               	clrf	postinc0,c
   942  00486A  06E8               	decf	wreg,f,c
   943  00486C  E1FD               	bnz	clear_3
   944  00486E                     end_of_initialization:
   945                           	callstack 0
   946  00486E                     __end_of__initialization:
   947                           	callstack 0
   948  00486E  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   949  004870  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   950  004872  0E00               	movlw	low (__Lmediumconst shr (0+16))
   951  004874  6EF8               	movwf	tblptru,c
   952  004876  0100               	movlb	0
   953  004878  EF78  F02D         	goto	_main	;jump to C main() function
   954                           
   955                           	psect	bssCOMRAM
   956  000032                     __pbssCOMRAM:
   957                           	callstack 0
   958  000032                     _fence_flag:
   959                           	callstack 0
   960  000032                     	ds	3
   961  000035                     _time_atualizacao:
   962                           	callstack 0
   963  000035                     	ds	2
   964  000037                     _FatFs:
   965                           	callstack 0
   966  000037                     	ds	2
   967  000039                     _mcpMode:
   968                           	callstack 0
   969  000039                     	ds	1
   970  00003A                     _m_nRtr:
   971                           	callstack 0
   972  00003A                     	ds	1
   973  00003B                     _m_nDlc:
   974                           	callstack 0
   975  00003B                     	ds	1
   976  00003C                     troca_de_tela@last_state:
   977                           	callstack 0
   978  00003C                     	ds	1
   979  00003D                     troca_de_tela@state:
   980                           	callstack 0
   981  00003D                     	ds	1
   982  00003E                     _tarefa_em_execucao:
   983                           	callstack 0
   984  00003E                     	ds	1
   985  00003F                     _sinaliza_int_timer:
   986                           	callstack 0
   987  00003F                     	ds	1
   988  000040                     _data_uart_recebe:
   989                           	callstack 0
   990  000040                     	ds	1
   991  000041                     _sinaliza_mcp2515:
   992                           	callstack 0
   993  000041                     	ds	1
   994  000042                     escrita_sdcard@f_fix:
   995                           	callstack 0
   996  000042                     	ds	1
   997  000043                     _Term:
   998                           	callstack 0
   999  000043                     	ds	1
  1000  000044                     _SentenceType:
  1001                           	callstack 0
  1002  000044                     	ds	1
  1003  000045                     _char_number:
  1004                           	callstack 0
  1005  000045                     	ds	1
  1006  000046                     _m_nExtFlg:
  1007                           	callstack 0
  1008  000046                     	ds	1
  1009                           
  1010                           	psect	bssBANK0
  1011  0000F7                     __pbssBANK0:
  1012                           	callstack 0
  1013  0000F7                     _MCPCS:
  1014                           	callstack 0
  1015  0000F7                     	ds	1
  1016  0000F8                     _m_nfilhit:
  1017                           	callstack 0
  1018  0000F8                     	ds	1
  1019  0000F9                     _flag_anomalia:
  1020                           	callstack 0
  1021  0000F9                     	ds	1
  1022  0000FA                     _estado:
  1023                           	callstack 0
  1024  0000FA                     	ds	1
  1025  0000FB                     _data_hoje:
  1026                           	callstack 0
  1027  0000FB                     	ds	1
  1028  0000FC                     	ds	1
  1029                           
  1030                           	psect	dataBANK0
  1031  0000FD                     __pdataBANK0:
  1032                           	callstack 0
  1033  0000FD                     	ds	1
  1034                           
  1035                           	psect	bssBANK1
  1036  000100                     __pbssBANK1:
  1037                           	callstack 0
  1038  000100                     _tempo_tarefa:
  1039                           	callstack 0
  1040  000100                     	ds	8
  1041  000108                     _tempo_backup:
  1042                           	callstack 0
  1043  000108                     	ds	8
  1044  000110                     _p_tarefas:
  1045                           	callstack 0
  1046  000110                     	ds	8
  1047  000118                     _gps_flag:
  1048                           	callstack 0
  1049  000118                     	ds	5
  1050  00011D                     _rawSatellites:
  1051                           	callstack 0
  1052  00011D                     	ds	3
  1053  000120                     _point_buff_gps_long:
  1054                           	callstack 0
  1055  000120                     	ds	2
  1056  000122                     _point_buff_gps_lat:
  1057                           	callstack 0
  1058  000122                     	ds	2
  1059  000124                     _time_recovery:
  1060                           	callstack 0
  1061  000124                     	ds	2
  1062  000126                     _time_sd:
  1063                           	callstack 0
  1064  000126                     	ds	2
  1065  000128                     _timeout_tarefa:
  1066                           	callstack 0
  1067  000128                     	ds	2
  1068  00012A                     _fsid:
  1069                           	callstack 0
  1070  00012A                     	ds	2
  1071  00012C                     _GPGGA_ok:
  1072                           	callstack 0
  1073  00012C                     	ds	2
  1074  00012E                     _GPRMC_ok:
  1075                           	callstack 0
  1076  00012E                     	ds	2
  1077  000130                     _data_buff:
  1078                           	callstack 0
  1079  000130                     	ds	2
  1080  000132                     _poligono_ext:
  1081                           	callstack 0
  1082  000132                     	ds	124
  1083  0001AE                     _fil:
  1084                           	callstack 0
  1085  0001AE                     	ds	28
  1086  0001CA                     _buffer:
  1087                           	callstack 0
  1088  0001CA                     	ds	12
  1089  0001D6                     _rawTime:
  1090                           	callstack 0
  1091  0001D6                     	ds	11
  1092  0001E1                     _m_nDta:
  1093                           	callstack 0
  1094  0001E1                     	ds	8
  1095  0001E9                     _rawDate:
  1096                           	callstack 0
  1097  0001E9                     	ds	7
  1098  0001F0                     _sentence:
  1099                           	callstack 0
  1100  0001F0                     	ds	6
  1101  0001F6                     _m_nID:
  1102                           	callstack 0
  1103  0001F6                     	ds	4
  1104  0001FA                     _rawFix:
  1105                           	callstack 0
  1106  0001FA                     	ds	2
  1107                           
  1108                           	psect	dataBANK1
  1109  0001FC                     __pdataBANK1:
  1110                           	callstack 0
  1111  0001FC                     mcp2515_getNextFreeTXBuf@F3700:
  1112                           	callstack 0
  1113  0001FC                     	ds	3
  1114                           
  1115                           	psect	bssBANK2
  1116  000200                     __pbssBANK2:
  1117                           	callstack 0
  1118  000200                     _rawAltitude:
  1119                           	callstack 0
  1120  000200                     	ds	7
  1121  000207                     _rawCourse:
  1122                           	callstack 0
  1123  000207                     	ds	6
  1124  00020D                     _rawSpeed:
  1125                           	callstack 0
  1126  00020D                     	ds	6
  1127  000213                     _string_dado:
  1128                           	callstack 0
  1129  000213                     	ds	69
  1130  000258                     _dado_arquivo:
  1131                           	callstack 0
  1132  000258                     	ds	20
  1133  00026C                     _filename:
  1134                           	callstack 0
  1135  00026C                     	ds	20
  1136  000280                     _rawLongitude:
  1137                           	callstack 0
  1138  000280                     	ds	13
  1139  00028D                     _rawLatitude:
  1140                           	callstack 0
  1141  00028D                     	ds	13
  1142  00029A                     _temp_buff_long:
  1143                           	callstack 0
  1144  00029A                     	ds	12
  1145  0002A6                     _temp_buff_lat:
  1146                           	callstack 0
  1147  0002A6                     	ds	11
  1148                           
  1149                           	psect	dataBANK2
  1150  0002D3                     __pdataBANK2:
  1151                           	callstack 0
  1152  0002D3                     	ds	7
  1153  0002DA                     escreve_inteiro_lcd@F3223:
  1154                           	callstack 0
  1155  0002DA                     	ds	7
  1156                           
  1157                           	psect	bssBIGRAM
  1158  0002E1                     __pbssBIGRAM:
  1159                           	callstack 0
  1160  0002E1                     _fs:
  1161                           	callstack 0
  1162  0002E1                     	ds	544
  1163                           
  1164                           	psect	cstackBANK2
  1165  0002B1                     __pcstackBANK2:
  1166                           	callstack 0
  1167  0002B1                     fprintf@s:
  1168                           	callstack 0
  1169                           
  1170                           ; 16 bytes @ 0x0
  1171  0002B1                     	ds	16
  1172  0002C1                     fprintf@res:
  1173                           	callstack 0
  1174                           
  1175                           ; 2 bytes @ 0x10
  1176  0002C1                     	ds	2
  1177  0002C3                     _fprintf$2155:
  1178                           	callstack 0
  1179                           
  1180                           ; 2 bytes @ 0x12
  1181  0002C3                     	ds	2
  1182  0002C5                     fprintf@w:
  1183                           	callstack 0
  1184                           
  1185                           ; 2 bytes @ 0x14
  1186  0002C5                     	ds	2
  1187  0002C7                     fprintf@f:
  1188                           	callstack 0
  1189                           
  1190                           ; 1 bytes @ 0x16
  1191  0002C7                     	ds	1
  1192  0002C8                     fprintf@r:
  1193                           	callstack 0
  1194                           
  1195                           ; 1 bytes @ 0x17
  1196  0002C8                     	ds	1
  1197  0002C9                     fprintf@val:
  1198                           	callstack 0
  1199                           
  1200                           ; 4 bytes @ 0x18
  1201  0002C9                     	ds	4
  1202  0002CD                     fprintf@arp:
  1203                           	callstack 0
  1204                           
  1205                           ; 1 bytes @ 0x1C
  1206  0002CD                     	ds	1
  1207  0002CE                     fprintf@cc:
  1208                           	callstack 0
  1209                           
  1210                           ; 2 bytes @ 0x1D
  1211  0002CE                     	ds	2
  1212  0002D0                     fprintf@i:
  1213                           	callstack 0
  1214                           
  1215                           ; 2 bytes @ 0x1F
  1216  0002D0                     	ds	2
  1217  0002D2                     fprintf@c:
  1218                           	callstack 0
  1219                           
  1220                           ; 1 bytes @ 0x21
  1221  0002D2                     	ds	1
  1222                           
  1223                           	psect	cstackBANK0
  1224  000060                     __pcstackBANK0:
  1225                           	callstack 0
  1226  000060                     ??_get_fattime:
  1227  000060                     ??_configura_baudrate_uart:
  1228  000060                     mcp2515_initCANBuffers@a1:
  1229                           	callstack 0
  1230  000060                     mcp2515_read_canMsg@buffer_sidh_addr:
  1231                           	callstack 0
  1232  000060                     escreve_inteiro_lcd@texto:
  1233                           	callstack 0
  1234  000060                     diff_calc@fence:
  1235                           	callstack 0
  1236  000060                     mensagem_inicial@msg_linha_um:
  1237                           	callstack 0
  1238                           
  1239                           ; 17 bytes @ 0x0
  1240  000060                     	ds	1
  1241  000061                     mcp2515_initCANBuffers@a2:
  1242                           	callstack 0
  1243  000061                     mcp2515_read_canMsg@ctrl:
  1244                           	callstack 0
  1245  000061                     sdc_disk_read@start_add:
  1246                           	callstack 0
  1247                           
  1248                           ; 4 bytes @ 0x1
  1249  000061                     	ds	1
  1250  000062                     sdc_disk_initialize@stat:
  1251                           	callstack 0
  1252  000062                     mcp2515_initCANBuffers@a3:
  1253                           	callstack 0
  1254  000062                     mcp2515_read_canMsg@mcp_addr:
  1255                           	callstack 0
  1256  000062                     sdc_disk_write@count1:
  1257                           	callstack 0
  1258                           
  1259                           ; 2 bytes @ 0x2
  1260  000062                     	ds	1
  1261  000063                     sdc_disk_initialize@count1:
  1262                           	callstack 0
  1263  000063                     readMsgBuf@id:
  1264                           	callstack 0
  1265  000063                     mcp2515_initCANBuffers@ulMask:
  1266                           	callstack 0
  1267                           
  1268                           ; 4 bytes @ 0x3
  1269  000063                     	ds	1
  1270  000064                     sdc_disk_write@res:
  1271                           	callstack 0
  1272                           
  1273                           ; 1 bytes @ 0x4
  1274  000064                     	ds	1
  1275  000065                     sdc_disk_initialize@crc_number:
  1276                           	callstack 0
  1277  000065                     sdc_disk_read@length:
  1278                           	callstack 0
  1279  000065                     sdc_disk_write@j:
  1280                           	callstack 0
  1281  000065                     readMsgBuf@len:
  1282                           	callstack 0
  1283                           
  1284                           ; 2 bytes @ 0x5
  1285  000065                     	ds	2
  1286  000067                     sdc_disk_initialize@buff_i:
  1287                           	callstack 0
  1288  000067                     sdc_disk_read@buff:
  1289                           	callstack 0
  1290  000067                     sdc_disk_write@buff:
  1291                           	callstack 0
  1292  000067                     mcp2515_initCANBuffers@i:
  1293                           	callstack 0
  1294  000067                     readMsgBuf@buf:
  1295                           	callstack 0
  1296                           
  1297                           ; 1 bytes @ 0x7
  1298  000067                     	ds	1
  1299  000068                     ??_readMsgBuf:
  1300  000068                     sdc_disk_initialize@ocr:
  1301                           	callstack 0
  1302  000068                     disk_read@buff:
  1303                           	callstack 0
  1304  000068                     disk_write@buff:
  1305                           	callstack 0
  1306                           
  1307                           ; 2 bytes @ 0x8
  1308  000068                     	ds	1
  1309  000069                     mcp2515_initCANBuffers@ext:
  1310                           	callstack 0
  1311  000069                     sdc_disk_initialize@count2:
  1312                           	callstack 0
  1313                           
  1314                           ; 2 bytes @ 0x9
  1315  000069                     	ds	1
  1316  00006A                     disk_read@sector:
  1317                           	callstack 0
  1318  00006A                     disk_write@sector:
  1319                           	callstack 0
  1320  00006A                     mcp2515_initCANBuffers@ulFilt:
  1321                           	callstack 0
  1322                           
  1323                           ; 4 bytes @ 0xA
  1324  00006A                     	ds	1
  1325  00006B                     sdc_disk_initialize@buff:
  1326                           	callstack 0
  1327  00006B                     readMsgBuf@i:
  1328                           	callstack 0
  1329                           
  1330                           ; 2 bytes @ 0xB
  1331  00006B                     	ds	1
  1332  00006C                     diff_calc@point:
  1333                           	callstack 0
  1334                           
  1335                           ; 12 bytes @ 0xC
  1336  00006C                     	ds	1
  1337  00006D                     MCP2515_RECEBE@id:
  1338                           	callstack 0
  1339                           
  1340                           ; 2 bytes @ 0xD
  1341  00006D                     	ds	1
  1342  00006E                     disk_read@count:
  1343                           	callstack 0
  1344  00006E                     disk_write@count:
  1345                           	callstack 0
  1346  00006E                     mcp2515_init@canIDMode:
  1347                           	callstack 0
  1348                           
  1349                           ; 1 bytes @ 0xE
  1350  00006E                     	ds	1
  1351  00006F                     disk_read@pdrv:
  1352                           	callstack 0
  1353  00006F                     disk_write@pdrv:
  1354                           	callstack 0
  1355  00006F                     mcp2515_init@res:
  1356                           	callstack 0
  1357  00006F                     MCP2515_RECEBE@len:
  1358                           	callstack 0
  1359                           
  1360                           ; 2 bytes @ 0xF
  1361  00006F                     	ds	1
  1362  000070                     begin@speedset:
  1363                           	callstack 0
  1364  000070                     disk_read@result:
  1365                           	callstack 0
  1366  000070                     disk_write@result:
  1367                           	callstack 0
  1368                           
  1369                           ; 2 bytes @ 0x10
  1370  000070                     	ds	1
  1371  000071                     begin@clockset:
  1372                           	callstack 0
  1373  000071                     MCP2515_RECEBE@buf:
  1374                           	callstack 0
  1375  000071                     mensagem_inicial@msg_dois:
  1376                           	callstack 0
  1377                           
  1378                           ; 17 bytes @ 0x11
  1379  000071                     	ds	1
  1380  000072                     ??_MCP2515_RECEBE:
  1381  000072                     disk_read@res:
  1382                           	callstack 0
  1383  000072                     disk_write@res:
  1384                           	callstack 0
  1385  000072                     begin@idmodeset:
  1386                           	callstack 0
  1387                           
  1388                           ; 1 bytes @ 0x12
  1389  000072                     	ds	1
  1390  000073                     move_window@sector:
  1391                           	callstack 0
  1392  000073                     check_fs@sect:
  1393                           	callstack 0
  1394  000073                     verifica_dados_operacionais@rpm:
  1395                           	callstack 0
  1396                           
  1397                           ; 4 bytes @ 0x13
  1398  000073                     	ds	4
  1399  000077                     ??_move_window:
  1400  000077                     
  1401                           ; 1 bytes @ 0x17
  1402  000077                     	ds	2
  1403  000079                     check_fs@fs:
  1404                           	callstack 0
  1405                           
  1406                           ; 2 bytes @ 0x19
  1407  000079                     	ds	2
  1408  00007B                     auto_mount@path:
  1409                           	callstack 0
  1410                           
  1411                           ; 1 bytes @ 0x1B
  1412  00007B                     	ds	1
  1413  00007C                     auto_mount@chk_wp:
  1414                           	callstack 0
  1415                           
  1416                           ; 1 bytes @ 0x1C
  1417  00007C                     	ds	1
  1418  00007D                     ??_auto_mount:
  1419                           
  1420                           ; 1 bytes @ 0x1D
  1421  00007D                     	ds	4
  1422  000081                     move_window@n:
  1423                           	callstack 0
  1424                           
  1425                           ; 1 bytes @ 0x21
  1426  000081                     	ds	1
  1427  000082                     move_window@wsect:
  1428                           	callstack 0
  1429                           
  1430                           ; 4 bytes @ 0x22
  1431  000082                     	ds	4
  1432  000086                     move_window@fs:
  1433                           	callstack 0
  1434                           
  1435                           ; 2 bytes @ 0x26
  1436  000086                     	ds	2
  1437  000088                     ?_get_cluster:
  1438                           	callstack 0
  1439  000088                     sync@fs:
  1440                           	callstack 0
  1441  000088                     get_cluster@clust:
  1442                           	callstack 0
  1443  000088                     put_cluster@clust:
  1444                           	callstack 0
  1445                           
  1446                           ; 2 bytes @ 0x28
  1447  000088                     	ds	2
  1448  00008A                     ??_get_cluster:
  1449  00008A                     put_cluster@val:
  1450                           	callstack 0
  1451  00008A                     f_sync@fp:
  1452                           	callstack 0
  1453                           
  1454                           ; 2 bytes @ 0x2A
  1455  00008A                     	ds	2
  1456  00008C                     ??_put_cluster:
  1457  00008C                     f_sync@tim:
  1458                           	callstack 0
  1459                           
  1460                           ; 4 bytes @ 0x2C
  1461  00008C                     	ds	4
  1462  000090                     f_sync@res:
  1463                           	callstack 0
  1464                           
  1465                           ; 1 bytes @ 0x30
  1466  000090                     	ds	1
  1467  000091                     f_sync@dir:
  1468                           	callstack 0
  1469                           
  1470                           ; 2 bytes @ 0x31
  1471  000091                     	ds	1
  1472  000092                     _put_cluster$1552:
  1473                           	callstack 0
  1474                           
  1475                           ; 2 bytes @ 0x32
  1476  000092                     	ds	1
  1477  000093                     get_cluster@wc:
  1478                           	callstack 0
  1479  000093                     f_close@fp:
  1480                           	callstack 0
  1481  000093                     auto_mount@maxclust:
  1482                           	callstack 0
  1483                           
  1484                           ; 4 bytes @ 0x33
  1485  000093                     	ds	1
  1486  000094                     _put_cluster$1553:
  1487                           	callstack 0
  1488                           
  1489                           ; 2 bytes @ 0x34
  1490  000094                     	ds	1
  1491  000095                     get_cluster@fatsect:
  1492                           	callstack 0
  1493                           
  1494                           ; 4 bytes @ 0x35
  1495  000095                     	ds	1
  1496  000096                     put_cluster@fatsect:
  1497                           	callstack 0
  1498                           
  1499                           ; 4 bytes @ 0x36
  1500  000096                     	ds	1
  1501  000097                     auto_mount@bootsect:
  1502                           	callstack 0
  1503                           
  1504                           ; 4 bytes @ 0x37
  1505  000097                     	ds	2
  1506  000099                     get_cluster@bc:
  1507                           	callstack 0
  1508                           
  1509                           ; 2 bytes @ 0x39
  1510  000099                     	ds	1
  1511  00009A                     put_cluster@bc:
  1512                           	callstack 0
  1513                           
  1514                           ; 2 bytes @ 0x3A
  1515  00009A                     	ds	1
  1516  00009B                     get_cluster@fs:
  1517                           	callstack 0
  1518  00009B                     auto_mount@totalsect:
  1519                           	callstack 0
  1520                           
  1521                           ; 4 bytes @ 0x3B
  1522  00009B                     	ds	1
  1523  00009C                     put_cluster@p:
  1524                           	callstack 0
  1525                           
  1526                           ; 2 bytes @ 0x3C
  1527  00009C                     	ds	1
  1528  00009D                     ??_next_dir_entry:
  1529                           
  1530                           ; 1 bytes @ 0x3D
  1531  00009D                     	ds	1
  1532  00009E                     put_cluster@fs:
  1533                           	callstack 0
  1534                           
  1535                           ; 2 bytes @ 0x3E
  1536  00009E                     	ds	1
  1537  00009F                     auto_mount@p:
  1538                           	callstack 0
  1539                           
  1540                           ; 2 bytes @ 0x3F
  1541  00009F                     	ds	1
  1542  0000A0                     ?_create_chain:
  1543                           	callstack 0
  1544  0000A0                     remove_chain@clust:
  1545                           	callstack 0
  1546  0000A0                     create_chain@clust:
  1547                           	callstack 0
  1548                           
  1549                           ; 2 bytes @ 0x40
  1550  0000A0                     	ds	1
  1551  0000A1                     auto_mount@fmt:
  1552                           	callstack 0
  1553                           
  1554                           ; 1 bytes @ 0x41
  1555  0000A1                     	ds	1
  1556  0000A2                     auto_mount@stat:
  1557                           	callstack 0
  1558                           
  1559                           ; 1 bytes @ 0x42
  1560  0000A2                     	ds	1
  1561  0000A3                     auto_mount@fatsize:
  1562                           	callstack 0
  1563                           
  1564                           ; 4 bytes @ 0x43
  1565  0000A3                     	ds	1
  1566  0000A4                     remove_chain@nxt:
  1567                           	callstack 0
  1568  0000A4                     create_chain@mcl:
  1569                           	callstack 0
  1570  0000A4                     next_dir_entry@clust:
  1571                           	callstack 0
  1572                           
  1573                           ; 2 bytes @ 0x44
  1574  0000A4                     	ds	2
  1575  0000A6                     remove_chain@fs:
  1576                           	callstack 0
  1577  0000A6                     create_chain@fs:
  1578                           	callstack 0
  1579  0000A6                     next_dir_entry@idx:
  1580                           	callstack 0
  1581                           
  1582                           ; 2 bytes @ 0x46
  1583  0000A6                     	ds	1
  1584  0000A7                     auto_mount@fs:
  1585                           	callstack 0
  1586                           
  1587                           ; 2 bytes @ 0x47
  1588  0000A7                     	ds	1
  1589  0000A8                     trace_path@dj:
  1590                           	callstack 0
  1591  0000A8                     create_chain@cstat:
  1592                           	callstack 0
  1593                           
  1594                           ; 2 bytes @ 0x48
  1595  0000A8                     	ds	1
  1596  0000A9                     trace_path@fn:
  1597                           	callstack 0
  1598                           
  1599                           ; 1 bytes @ 0x49
  1600  0000A9                     	ds	1
  1601  0000AA                     create_chain@scl:
  1602                           	callstack 0
  1603  0000AA                     trace_path@path:
  1604                           	callstack 0
  1605                           
  1606                           ; 2 bytes @ 0x4A
  1607  0000AA                     	ds	2
  1608  0000AC                     trace_path@dir:
  1609                           	callstack 0
  1610  0000AC                     create_chain@ncl:
  1611                           	callstack 0
  1612                           
  1613                           ; 2 bytes @ 0x4C
  1614  0000AC                     	ds	1
  1615  0000AD                     ??_trace_path:
  1616                           
  1617                           ; 1 bytes @ 0x4D
  1618  0000AD                     	ds	1
  1619  0000AE                     reserve_direntry@dj:
  1620                           	callstack 0
  1621  0000AE                     f_write@fp:
  1622                           	callstack 0
  1623  0000AE                     f_lseek@fp:
  1624                           	callstack 0
  1625                           
  1626                           ; 2 bytes @ 0x4E
  1627  0000AE                     	ds	1
  1628  0000AF                     reserve_direntry@dir:
  1629                           	callstack 0
  1630                           
  1631                           ; 1 bytes @ 0x4F
  1632  0000AF                     	ds	1
  1633  0000B0                     ??_reserve_direntry:
  1634  0000B0                     f_write@buff:
  1635                           	callstack 0
  1636  0000B0                     f_lseek@ofs:
  1637                           	callstack 0
  1638                           
  1639                           ; 4 bytes @ 0x50
  1640  0000B0                     	ds	1
  1641  0000B1                     _trace_path$1709:
  1642                           	callstack 0
  1643  0000B1                     f_write@btw:
  1644                           	callstack 0
  1645                           
  1646                           ; 2 bytes @ 0x51
  1647  0000B1                     	ds	2
  1648  0000B3                     f_write@bw:
  1649                           	callstack 0
  1650  0000B3                     _trace_path$1711:
  1651                           	callstack 0
  1652                           
  1653                           ; 2 bytes @ 0x53
  1654  0000B3                     	ds	1
  1655  0000B4                     ??_f_lseek:
  1656  0000B4                     ??_f_write:
  1657  0000B4                     reserve_direntry@sector:
  1658                           	callstack 0
  1659                           
  1660                           ; 4 bytes @ 0x54
  1661  0000B4                     	ds	1
  1662  0000B5                     trace_path@fs:
  1663                           	callstack 0
  1664                           
  1665                           ; 2 bytes @ 0x55
  1666  0000B5                     	ds	2
  1667  0000B7                     trace_path@clust:
  1668                           	callstack 0
  1669                           
  1670                           ; 2 bytes @ 0x57
  1671  0000B7                     	ds	1
  1672  0000B8                     reserve_direntry@n:
  1673                           	callstack 0
  1674                           
  1675                           ; 1 bytes @ 0x58
  1676  0000B8                     	ds	1
  1677  0000B9                     trace_path@ds:
  1678                           	callstack 0
  1679  0000B9                     reserve_direntry@dptr:
  1680                           	callstack 0
  1681                           
  1682                           ; 2 bytes @ 0x59
  1683  0000B9                     	ds	1
  1684  0000BA                     trace_path@dptr:
  1685                           	callstack 0
  1686                           
  1687                           ; 2 bytes @ 0x5A
  1688  0000BA                     	ds	1
  1689  0000BB                     reserve_direntry@c:
  1690                           	callstack 0
  1691                           
  1692                           ; 1 bytes @ 0x5B
  1693  0000BB                     	ds	1
  1694  0000BC                     reserve_direntry@clust:
  1695                           	callstack 0
  1696                           
  1697                           ; 2 bytes @ 0x5C
  1698  0000BC                     	ds	2
  1699  0000BE                     reserve_direntry@fs:
  1700                           	callstack 0
  1701                           
  1702                           ; 2 bytes @ 0x5E
  1703  0000BE                     	ds	2
  1704  0000C0                     f_write@res:
  1705                           	callstack 0
  1706  0000C0                     f_open@fp:
  1707                           	callstack 0
  1708                           
  1709                           ; 2 bytes @ 0x60
  1710  0000C0                     	ds	1
  1711  0000C1                     f_write@wbuff:
  1712                           	callstack 0
  1713                           
  1714                           ; 1 bytes @ 0x61
  1715  0000C1                     	ds	1
  1716  0000C2                     f_open@path:
  1717                           	callstack 0
  1718  0000C2                     f_write@sect:
  1719                           	callstack 0
  1720                           
  1721                           ; 4 bytes @ 0x62
  1722  0000C2                     	ds	2
  1723  0000C4                     f_open@mode:
  1724                           	callstack 0
  1725  0000C4                     f_lseek@res:
  1726                           	callstack 0
  1727                           
  1728                           ; 1 bytes @ 0x64
  1729  0000C4                     	ds	1
  1730  0000C5                     ??_f_open:
  1731  0000C5                     f_lseek@ifptr:
  1732                           	callstack 0
  1733                           
  1734                           ; 4 bytes @ 0x65
  1735  0000C5                     	ds	1
  1736  0000C6                     f_write@cc:
  1737                           	callstack 0
  1738                           
  1739                           ; 2 bytes @ 0x66
  1740  0000C6                     	ds	2
  1741  0000C8                     f_write@clust:
  1742                           	callstack 0
  1743                           
  1744                           ; 2 bytes @ 0x68
  1745  0000C8                     	ds	1
  1746  0000C9                     f_lseek@csize:
  1747                           	callstack 0
  1748  0000C9                     f_open@fn:
  1749                           	callstack 0
  1750                           
  1751                           ; 12 bytes @ 0x69
  1752  0000C9                     	ds	1
  1753  0000CA                     f_write@wcnt:
  1754                           	callstack 0
  1755                           
  1756                           ; 2 bytes @ 0x6A
  1757  0000CA                     	ds	2
  1758  0000CC                     ?_fputc:
  1759                           	callstack 0
  1760  0000CC                     fputc@chr:
  1761                           	callstack 0
  1762                           
  1763                           ; 2 bytes @ 0x6C
  1764  0000CC                     	ds	1
  1765  0000CD                     f_lseek@clust:
  1766                           	callstack 0
  1767                           
  1768                           ; 2 bytes @ 0x6D
  1769  0000CD                     	ds	1
  1770  0000CE                     fputc@fil:
  1771                           	callstack 0
  1772                           
  1773                           ; 2 bytes @ 0x6E
  1774  0000CE                     	ds	2
  1775  0000D0                     fputc@c:
  1776                           	callstack 0
  1777                           
  1778                           ; 1 bytes @ 0x70
  1779  0000D0                     	ds	1
  1780  0000D1                     fputc@bw:
  1781                           	callstack 0
  1782                           
  1783                           ; 2 bytes @ 0x71
  1784  0000D1                     	ds	2
  1785  0000D3                     ?_fputs:
  1786                           	callstack 0
  1787  0000D3                     fputs@str:
  1788                           	callstack 0
  1789                           
  1790                           ; 2 bytes @ 0x73
  1791  0000D3                     	ds	2
  1792  0000D5                     f_open@rs:
  1793                           	callstack 0
  1794  0000D5                     fputs@fil:
  1795                           	callstack 0
  1796                           
  1797                           ; 2 bytes @ 0x75
  1798  0000D5                     	ds	2
  1799  0000D7                     fputs@n:
  1800                           	callstack 0
  1801  0000D7                     f_open@dw:
  1802                           	callstack 0
  1803                           
  1804                           ; 4 bytes @ 0x77
  1805  0000D7                     	ds	2
  1806  0000D9                     ?_fprintf:
  1807                           	callstack 0
  1808  0000D9                     fprintf@fil:
  1809                           	callstack 0
  1810                           
  1811                           ; 2 bytes @ 0x79
  1812  0000D9                     	ds	2
  1813  0000DB                     f_open@res:
  1814                           	callstack 0
  1815  0000DB                     fprintf@str:
  1816                           	callstack 0
  1817                           
  1818                           ; 2 bytes @ 0x7B
  1819  0000DB                     	ds	1
  1820  0000DC                     f_open@dir:
  1821                           	callstack 0
  1822                           
  1823                           ; 2 bytes @ 0x7C
  1824  0000DC                     	ds	2
  1825  0000DE                     f_open@dj:
  1826                           	callstack 0
  1827                           
  1828                           ; 14 bytes @ 0x7E
  1829  0000DE                     	ds	17
  1830  0000EF                     ??_fprintf:
  1831                           
  1832                           ; 1 bytes @ 0x8F
  1833  0000EF                     	ds	2
  1834  0000F1                     
  1835                           ; 1 bytes @ 0x91
  1836  0000F1                     	ds	1
  1837  0000F2                     disparo_gravacao@fix_gps:
  1838                           	callstack 0
  1839                           
  1840                           ; 2 bytes @ 0x92
  1841  0000F2                     	ds	2
  1842  0000F4                     
  1843                           ; 1 bytes @ 0x94
  1844  0000F4                     	ds	2
  1845  0000F6                     escalonador@cont:
  1846                           	callstack 0
  1847                           
  1848                           ; 1 bytes @ 0x96
  1849  0000F6                     	ds	1
  1850                           
  1851                           	psect	cstackCOMRAM
  1852  000001                     __pcstackCOMRAM:
  1853                           	callstack 0
  1854  000001                     ?_strcmp:
  1855                           	callstack 0
  1856  000001                     stringcpy@str1:
  1857                           	callstack 0
  1858  000001                     strcmp@s1:
  1859                           	callstack 0
  1860  000001                     i2write_timer_zero@timer0:
  1861                           	callstack 0
  1862                           
  1863                           ; 2 bytes @ 0x0
  1864  000001                     	ds	2
  1865  000003                     stringcpy@str2:
  1866                           	callstack 0
  1867  000003                     strcmp@s2:
  1868                           	callstack 0
  1869                           
  1870                           ; 2 bytes @ 0x2
  1871  000003                     	ds	2
  1872  000005                     ??_strcmp:
  1873  000005                     stringcpy@dir:
  1874                           	callstack 0
  1875                           
  1876                           ; 2 bytes @ 0x4
  1877  000005                     	ds	2
  1878  000007                     ??_stringcpy:
  1879  000007                     strcmp@r:
  1880                           	callstack 0
  1881                           
  1882                           ; 1 bytes @ 0x6
  1883  000007                     	ds	2
  1884  000009                     stringcpy@chr:
  1885                           	callstack 0
  1886                           
  1887                           ; 1 bytes @ 0x8
  1888  000009                     	ds	1
  1889  00000A                     GPSRead@buff:
  1890                           	callstack 0
  1891                           
  1892                           ; 1 bytes @ 0x9
  1893  00000A                     	ds	1
  1894  00000B                     GPSRead@c:
  1895                           	callstack 0
  1896                           
  1897                           ; 1 bytes @ 0xA
  1898  00000B                     	ds	1
  1899  00000C                     ??_isr:
  1900                           
  1901                           ; 1 bytes @ 0xB
  1902  00000C                     	ds	12
  1903  000018                     isr@cont:
  1904                           	callstack 0
  1905                           
  1906                           ; 1 bytes @ 0x17
  1907  000018                     	ds	1
  1908  000019                     ??_dummy_clocks:
  1909  000019                     ??_verifica_diferenca_graus:
  1910  000019                     ??_verifica_diferenca_minutos:
  1911  000019                     ??_isdigit:
  1912  000019                     ?_Latitude:
  1913                           	callstack 0
  1914  000019                     ?_Longitude:
  1915                           	callstack 0
  1916  000019                     ?_fix:
  1917                           	callstack 0
  1918  000019                     ?_strlen:
  1919                           	callstack 0
  1920  000019                     ?_memcmp:
  1921                           	callstack 0
  1922  000019                     ?_GPSSecond:
  1923                           	callstack 0
  1924  000019                     ?_GPSMinute:
  1925                           	callstack 0
  1926  000019                     ?_GPSHour:
  1927                           	callstack 0
  1928  000019                     ?_GPSDay:
  1929                           	callstack 0
  1930  000019                     ?_GPSMonth:
  1931                           	callstack 0
  1932  000019                     ?_GPSyear:
  1933                           	callstack 0
  1934  000019                     ?___wmul:
  1935                           	callstack 0
  1936  000019                     ?___lwdiv:
  1937                           	callstack 0
  1938  000019                     ?___lwmod:
  1939                           	callstack 0
  1940  000019                     ?___lmul:
  1941                           	callstack 0
  1942  000019                     ?___lldiv:
  1943                           	callstack 0
  1944  000019                     ?___aldiv:
  1945                           	callstack 0
  1946  000019                     ?___llmod:
  1947                           	callstack 0
  1948  000019                     disk_ioctl@cmd:
  1949                           	callstack 0
  1950  000019                     delay@contador_ext:
  1951                           	callstack 0
  1952  000019                     response@buff:
  1953                           	callstack 0
  1954  000019                     MPC2515_SPI@data:
  1955                           	callstack 0
  1956  000019                     write_timer_zero@timer0:
  1957                           	callstack 0
  1958  000019                     data_nome@p_buff:
  1959                           	callstack 0
  1960  000019                     hora_nome@p_buff:
  1961                           	callstack 0
  1962  000019                     f_mount@fs:
  1963                           	callstack 0
  1964  000019                     ___wmul@multiplier:
  1965                           	callstack 0
  1966  000019                     ___lwdiv@dividend:
  1967                           	callstack 0
  1968  000019                     ___lwmod@dividend:
  1969                           	callstack 0
  1970  000019                     memcmp@s1:
  1971                           	callstack 0
  1972  000019                     memcpy@d1:
  1973                           	callstack 0
  1974  000019                     memset@p1:
  1975                           	callstack 0
  1976  000019                     strcat@to:
  1977                           	callstack 0
  1978  000019                     strlen@s:
  1979                           	callstack 0
  1980  000019                     wait_ready@timeout:
  1981                           	callstack 0
  1982  000019                     ___lmul@multiplier:
  1983                           	callstack 0
  1984  000019                     ___lldiv@dividend:
  1985                           	callstack 0
  1986  000019                     ___aldiv@dividend:
  1987                           	callstack 0
  1988  000019                     ___llmod@dividend:
  1989                           	callstack 0
  1990                           
  1991                           ; 4 bytes @ 0x18
  1992  000019                     	ds	1
  1993  00001A                     ??_mcp2515_reset:
  1994  00001A                     sdc_disk_status@pdrv:
  1995                           	callstack 0
  1996  00001A                     delay@contador_int:
  1997                           	callstack 0
  1998  00001A                     escreve_SPI@dado:
  1999                           	callstack 0
  2000  00001A                     mcp2515_readRegister@address:
  2001                           	callstack 0
  2002  00001A                     mcp2515_setRegister@value:
  2003                           	callstack 0
  2004  00001A                     mcp2515_modifyRegister@mask:
  2005                           	callstack 0
  2006  00001A                     mcp2515_readStatus@i:
  2007                           	callstack 0
  2008  00001A                     _isdigit$3625:
  2009                           	callstack 0
  2010  00001A                     disk_ioctl@buff:
  2011                           	callstack 0
  2012  00001A                     mcp2515_readRegisterS@values:
  2013                           	callstack 0
  2014  00001A                     mcp2515_setRegisterS@values:
  2015                           	callstack 0
  2016                           
  2017                           ; 2 bytes @ 0x19
  2018  00001A                     	ds	1
  2019  00001B                     ??_GPSSecond:
  2020  00001B                     ??_GPSMinute:
  2021  00001B                     ??_GPSHour:
  2022  00001B                     ??_GPSDay:
  2023  00001B                     ??_GPSMonth:
  2024  00001B                     ??_GPSyear:
  2025  00001B                     escreve_cmd_lcd@comando:
  2026                           	callstack 0
  2027  00001B                     endereco_cursor_lcd@endereco:
  2028                           	callstack 0
  2029  00001B                     escreve_caractere_lcd@data:
  2030                           	callstack 0
  2031  00001B                     dummy_clocks@n:
  2032                           	callstack 0
  2033  00001B                     data_nome@i:
  2034                           	callstack 0
  2035  00001B                     hora_nome@i:
  2036                           	callstack 0
  2037  00001B                     f_mount@drv:
  2038                           	callstack 0
  2039  00001B                     mcp2515_readRegister@ret:
  2040                           	callstack 0
  2041  00001B                     mcp2515_setRegister@address:
  2042                           	callstack 0
  2043  00001B                     mcp2515_modifyRegister@data:
  2044                           	callstack 0
  2045  00001B                     isdigit@c:
  2046                           	callstack 0
  2047  00001B                     ___wmul@multiplicand:
  2048                           	callstack 0
  2049  00001B                     ___lwdiv@divisor:
  2050                           	callstack 0
  2051  00001B                     ___lwmod@divisor:
  2052                           	callstack 0
  2053  00001B                     memcmp@s2:
  2054                           	callstack 0
  2055  00001B                     memcpy@s1:
  2056                           	callstack 0
  2057  00001B                     memset@c:
  2058                           	callstack 0
  2059  00001B                     strcat@from:
  2060                           	callstack 0
  2061  00001B                     strcpy@to:
  2062                           	callstack 0
  2063  00001B                     strlen@cp:
  2064                           	callstack 0
  2065                           
  2066                           ; 2 bytes @ 0x1A
  2067  00001B                     	ds	1
  2068  00001C                     ??_init_lcd:
  2069  00001C                     disk_ioctl@pdrv:
  2070                           	callstack 0
  2071  00001C                     posicao_cursor_lcd@coluna:
  2072                           	callstack 0
  2073  00001C                     mcp2515_readRegisterS@n:
  2074                           	callstack 0
  2075  00001C                     mcp2515_setRegisterS@n:
  2076                           	callstack 0
  2077  00001C                     mcp2515_modifyRegister@address:
  2078                           	callstack 0
  2079  00001C                     mcp2515_configRate@canClock:
  2080                           	callstack 0
  2081  00001C                     escreve_frase_ram_lcd@buffer:
  2082                           	callstack 0
  2083  00001C                     dummy_clocks@i:
  2084                           	callstack 0
  2085                           
  2086                           ; 2 bytes @ 0x1B
  2087  00001C                     	ds	1
  2088  00001D                     ??_mcp2515_configRate:
  2089  00001D                     ?_get_fattime:
  2090                           	callstack 0
  2091  00001D                     disk_status@pdrv:
  2092                           	callstack 0
  2093  00001D                     disk_ioctl@res:
  2094                           	callstack 0
  2095  00001D                     posicao_cursor_lcd@linha:
  2096                           	callstack 0
  2097  00001D                     wait_ready@res:
  2098                           	callstack 0
  2099  00001D                     verifica_diferenca_graus@select_data:
  2100                           	callstack 0
  2101  00001D                     verifica_diferenca_minutos@select_data:
  2102                           	callstack 0
  2103  00001D                     mcp2515_readRegisterS@address:
  2104                           	callstack 0
  2105  00001D                     mcp2515_setRegisterS@address:
  2106                           	callstack 0
  2107  00001D                     mcp2515_setCANCTRL_Mode@i:
  2108                           	callstack 0
  2109  00001D                     ___lwdiv@counter:
  2110                           	callstack 0
  2111  00001D                     ___lwmod@counter:
  2112                           	callstack 0
  2113  00001D                     monta_sd@dado:
  2114                           	callstack 0
  2115  00001D                     ___wmul@product:
  2116                           	callstack 0
  2117  00001D                     memcmp@n:
  2118                           	callstack 0
  2119  00001D                     memcpy@n:
  2120                           	callstack 0
  2121  00001D                     memset@n:
  2122                           	callstack 0
  2123  00001D                     strcat@cp:
  2124                           	callstack 0
  2125  00001D                     strcpy@from:
  2126                           	callstack 0
  2127  00001D                     ___lmul@multiplicand:
  2128                           	callstack 0
  2129  00001D                     ___lldiv@divisor:
  2130                           	callstack 0
  2131  00001D                     ___aldiv@divisor:
  2132                           	callstack 0
  2133  00001D                     ___llmod@divisor:
  2134                           	callstack 0
  2135                           
  2136                           ; 4 bytes @ 0x1C
  2137  00001D                     	ds	1
  2138  00001E                     disk_status@stat:
  2139                           	callstack 0
  2140  00001E                     posicao_cursor_lcd@endereco:
  2141                           	callstack 0
  2142  00001E                     verifica_diferenca_graus@point_index_lat:
  2143                           	callstack 0
  2144  00001E                     verifica_diferenca_minutos@point_index_lat:
  2145                           	callstack 0
  2146  00001E                     mcp2515_readRegisterS@i:
  2147                           	callstack 0
  2148  00001E                     mcp2515_setRegisterS@i:
  2149                           	callstack 0
  2150  00001E                     mcp2515_setCANCTRL_Mode@newmode:
  2151                           	callstack 0
  2152  00001E                     ___lwdiv@quotient:
  2153                           	callstack 0
  2154  00001E                     command@arg:
  2155                           	callstack 0
  2156                           
  2157                           ; 4 bytes @ 0x1D
  2158  00001E                     	ds	1
  2159  00001F                     ??_memcmp:
  2160  00001F                     ??_mensagem_inicial:
  2161  00001F                     ?_atoi:
  2162                           	callstack 0
  2163  00001F                     monta_sd@index:
  2164                           	callstack 0
  2165  00001F                     verifica_diferenca_graus@point_index_long:
  2166                           	callstack 0
  2167  00001F                     verifica_diferenca_minutos@point_index_long:
  2168                           	callstack 0
  2169  00001F                     setMode@opMode:
  2170                           	callstack 0
  2171  00001F                     mcp2515_write_mf@ext:
  2172                           	callstack 0
  2173  00001F                     mcp2515_read_id@ext:
  2174                           	callstack 0
  2175  00001F                     atoi@s:
  2176                           	callstack 0
  2177  00001F                     memcpy@tmp:
  2178                           	callstack 0
  2179  00001F                     validate@fs:
  2180                           	callstack 0
  2181  00001F                     memset@p:
  2182                           	callstack 0
  2183  00001F                     strcpy@cp:
  2184                           	callstack 0
  2185                           
  2186                           ; 2 bytes @ 0x1E
  2187  00001F                     	ds	1
  2188  000020                     monta_sd@size:
  2189                           	callstack 0
  2190  000020                     verifica_diferenca_graus@j:
  2191                           	callstack 0
  2192  000020                     verifica_diferenca_minutos@j:
  2193                           	callstack 0
  2194  000020                     mcp2515_configRate@canSpeed:
  2195                           	callstack 0
  2196  000020                     utoa@buf:
  2197                           	callstack 0
  2198  000020                     mcp2515_read_id@id:
  2199                           	callstack 0
  2200  000020                     memcpy@d:
  2201                           	callstack 0
  2202  000020                     mcp2515_write_mf@id:
  2203                           	callstack 0
  2204                           
  2205                           ; 4 bytes @ 0x1F
  2206  000020                     	ds	1
  2207  000021                     ??_atoi:
  2208  000021                     monta_sd@i:
  2209                           	callstack 0
  2210  000021                     make_dirfile@path:
  2211                           	callstack 0
  2212  000021                     verifica_diferenca_graus@point:
  2213                           	callstack 0
  2214  000021                     verifica_diferenca_minutos@point:
  2215                           	callstack 0
  2216  000021                     mcp2515_configRate@cfg1:
  2217                           	callstack 0
  2218  000021                     ___aldiv@counter:
  2219                           	callstack 0
  2220  000021                     ___llmod@counter:
  2221                           	callstack 0
  2222  000021                     validate@id:
  2223                           	callstack 0
  2224  000021                     utoa@val:
  2225                           	callstack 0
  2226  000021                     ___lmul@product:
  2227                           	callstack 0
  2228  000021                     ___lldiv@quotient:
  2229                           	callstack 0
  2230  000021                     get_fattime@f_time:
  2231                           	callstack 0
  2232                           
  2233                           ; 10 bytes @ 0x20
  2234  000021                     	ds	1
  2235  000022                     ??_mcp2515_read_id:
  2236  000022                     command@CRC:
  2237                           	callstack 0
  2238  000022                     make_dirfile@dirname:
  2239                           	callstack 0
  2240  000022                     verifica_diferenca_graus@i:
  2241                           	callstack 0
  2242  000022                     verifica_diferenca_minutos@i:
  2243                           	callstack 0
  2244  000022                     mcp2515_configRate@cfg2:
  2245                           	callstack 0
  2246  000022                     ___aldiv@sign:
  2247                           	callstack 0
  2248  000022                     memcpy@s:
  2249                           	callstack 0
  2250                           
  2251                           ; 2 bytes @ 0x21
  2252  000022                     	ds	1
  2253  000023                     ??_make_dirfile:
  2254  000023                     ??_validate:
  2255  000023                     command@CMD:
  2256                           	callstack 0
  2257  000023                     mcp2515_configRate@cfg3:
  2258                           	callstack 0
  2259  000023                     atoi@sign:
  2260                           	callstack 0
  2261  000023                     utoa@base:
  2262                           	callstack 0
  2263  000023                     ___aldiv@quotient:
  2264                           	callstack 0
  2265                           
  2266                           ; 4 bytes @ 0x22
  2267  000023                     	ds	1
  2268  000024                     ??_mcp2515_write_mf:
  2269  000024                     command@argument:
  2270                           	callstack 0
  2271  000024                     atoi@a:
  2272                           	callstack 0
  2273                           
  2274                           ; 2 bytes @ 0x23
  2275  000024                     	ds	1
  2276  000025                     ?_clust2sect:
  2277                           	callstack 0
  2278  000025                     ___lldiv@counter:
  2279                           	callstack 0
  2280  000025                     sdc_disk_read@p_buff:
  2281                           	callstack 0
  2282  000025                     sdc_disk_write@p_buff:
  2283                           	callstack 0
  2284  000025                     clust2sect@clust:
  2285                           	callstack 0
  2286  000025                     _make_dirfile$1662:
  2287                           	callstack 0
  2288  000025                     utoa@v:
  2289                           	callstack 0
  2290                           
  2291                           ; 2 bytes @ 0x24
  2292  000025                     	ds	1
  2293  000026                     ?_diff_calc:
  2294                           	callstack 0
  2295  000026                     diff_calc@p_buff_fence:
  2296                           	callstack 0
  2297                           
  2298                           ; 2 bytes @ 0x25
  2299  000026                     	ds	1
  2300  000027                     make_dirfile@b:
  2301                           	callstack 0
  2302  000027                     mcp2515_write_mf@mcp_addr:
  2303                           	callstack 0
  2304  000027                     utoa@c:
  2305                           	callstack 0
  2306  000027                     sdc_reset@count_nosd:
  2307                           	callstack 0
  2308  000027                     sdc_disk_read@sector:
  2309                           	callstack 0
  2310  000027                     sdc_disk_write@sector:
  2311                           	callstack 0
  2312  000027                     configura_baudrate_uart@baudrate:
  2313                           	callstack 0
  2314                           
  2315                           ; 4 bytes @ 0x26
  2316  000027                     	ds	1
  2317  000028                     make_dirfile@t:
  2318                           	callstack 0
  2319  000028                     itoa@buf:
  2320                           	callstack 0
  2321  000028                     diff_calc@p_buff_point:
  2322                           	callstack 0
  2323  000028                     mcp2515_write_mf@tbufdata:
  2324                           	callstack 0
  2325                           
  2326                           ; 4 bytes @ 0x27
  2327  000028                     	ds	1
  2328  000029                     ??_clust2sect:
  2329  000029                     make_dirfile@a:
  2330                           	callstack 0
  2331  000029                     sdc_reset@count:
  2332                           	callstack 0
  2333  000029                     itoa@val:
  2334                           	callstack 0
  2335                           
  2336                           ; 2 bytes @ 0x28
  2337  000029                     	ds	1
  2338  00002A                     ??_diff_calc:
  2339  00002A                     make_dirfile@n:
  2340                           	callstack 0
  2341                           
  2342                           ; 1 bytes @ 0x29
  2343  00002A                     	ds	1
  2344  00002B                     sdc_reset@buff:
  2345                           	callstack 0
  2346  00002B                     sdc_disk_read@count:
  2347                           	callstack 0
  2348  00002B                     sdc_disk_write@count:
  2349                           	callstack 0
  2350  00002B                     make_dirfile@c:
  2351                           	callstack 0
  2352  00002B                     mcp2515_read_id@mcp_addr:
  2353                           	callstack 0
  2354  00002B                     configura_baudrate_uart@x:
  2355                           	callstack 0
  2356  00002B                     itoa@base:
  2357                           	callstack 0
  2358                           
  2359                           ; 2 bytes @ 0x2A
  2360  00002B                     	ds	1
  2361  00002C                     ??_sdc_disk_initialize:
  2362  00002C                     ??_sdc_disk_read:
  2363  00002C                     ??_sdc_disk_write:
  2364  00002C                     calcula_diff_graus@select_data:
  2365                           	callstack 0
  2366  00002C                     calcula_diff_minutos@select_data:
  2367                           	callstack 0
  2368  00002C                     mcp2515_write_mf@canid:
  2369                           	callstack 0
  2370  00002C                     mcp2515_read_id@tbufdata:
  2371                           	callstack 0
  2372                           
  2373                           ; 4 bytes @ 0x2B
  2374  00002C                     	ds	1
  2375  00002D                     disk_initialize@pdrv:
  2376                           	callstack 0
  2377  00002D                     recebe_dados_gps@flag_gps:
  2378                           	callstack 0
  2379  00002D                     calcula_diff_graus@point:
  2380                           	callstack 0
  2381  00002D                     calcula_diff_minutos@point:
  2382                           	callstack 0
  2383                           
  2384                           ; 1 bytes @ 0x2C
  2385  00002D                     	ds	1
  2386  00002E                     disk_initialize@stat:
  2387                           	callstack 0
  2388  00002E                     calcula_diff_graus@count:
  2389                           	callstack 0
  2390  00002E                     calcula_diff_minutos@count:
  2391                           	callstack 0
  2392  00002E                     mcp2515_init@canSpeed:
  2393                           	callstack 0
  2394  00002E                     escreve_inteiro_lcd@valor:
  2395                           	callstack 0
  2396  00002E                     clust2sect@fs:
  2397                           	callstack 0
  2398                           
  2399                           ; 2 bytes @ 0x2D
  2400  00002E                     	ds	1
  2401  00002F                     ??_verifica_fence_externo:
  2402  00002F                     mcp2515_init@canClock:
  2403                           	callstack 0
  2404                           
  2405                           ; 1 bytes @ 0x2E
  2406  00002F                     	ds	1
  2407  000030                     ??_troca_de_tela:
  2408  000030                     ??_disk_read:
  2409  000030                     ??_disk_write:
  2410  000030                     ??_mcp2515_init:
  2411  000030                     readMsg@res:
  2412                           	callstack 0
  2413                           
  2414                           ; 1 bytes @ 0x2F
  2415  000030                     	ds	1
  2416  000031                     ??_fputs:
  2417  000031                     next_dir_entry@dj:
  2418                           	callstack 0
  2419  000031                     f_close@res:
  2420                           	callstack 0
  2421  000031                     readMsg@stat:
  2422                           	callstack 0
  2423                           
  2424                           ; 1 bytes @ 0x30
  2425  000031                     	ds	1
  2426  000032                     
  2427                           ; 1 bytes @ 0x31
  2428 ;;
  2429 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2430 ;;
  2431 ;; *************** function _main *****************
  2432 ;; Defined at:
  2433 ;;		line 225 in file "main.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;		None
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;		None
  2438 ;; Return value:  Size  Location     Type
  2439 ;;                  1    wreg      void 
  2440 ;; Registers used:
  2441 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2442 ;; Tracked objects:
  2443 ;;		On entry : 0/0
  2444 ;;		On exit  : 3F/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2447 ;;      Params:         0       0       0       0       0       0       0       0       0
  2448 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2449 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2450 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2451 ;;Total ram usage:        0 bytes
  2452 ;; Hardware stack levels required when called:   18
  2453 ;; This function calls:
  2454 ;;		_escalonador
  2455 ;;		_inicializa_tarefas
  2456 ;;		_init_hardware
  2457 ;;		_init_lcd
  2458 ;;		_mensagem_inicial
  2459 ;; This function is called by:
  2460 ;;		Startup code after reset
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           	psect	text0
  2465  005AF0                     __ptext0:
  2466                           	callstack 0
  2467  005AF0                     _main:
  2468                           	callstack 13
  2469                           
  2470                           ;main.c: 227: init_hardware();
  2471                           
  2472                           ;incstack = 0
  2473  005AF0  ECE1  F02E         	call	_init_hardware	;wreg free
  2474                           
  2475                           ;main.c: 228: T0CONbits.TMR0ON = 0;
  2476  005AF4  9ED5               	bcf	213,7,c	;volatile
  2477                           
  2478                           ;main.c: 229: init_lcd();
  2479  005AF6  EC3E  F024         	call	_init_lcd	;wreg free
  2480                           
  2481                           ;main.c: 230: mensagem_inicial();
  2482  005AFA  ECB6  F025         	call	_mensagem_inicial	;wreg free
  2483                           
  2484                           ;main.c: 231: inicializa_tarefas();
  2485  005AFE  EC6A  F028         	call	_inicializa_tarefas	;wreg free
  2486                           
  2487                           ; BSR set to: 1
  2488                           ;main.c: 236: T0CONbits.TMR0ON = 1;
  2489  005B02  8ED5               	bsf	213,7,c	;volatile
  2490  005B04                     l14525:
  2491                           
  2492                           ;main.c: 238: {;main.c: 240: if ((sinaliza_int_timer == 1) && (4))
  2493  005B04  043F               	decf	_sinaliza_int_timer^0,w,c
  2494  005B06  A4D8               	btfss	status,2,c
  2495  005B08  D7FD               	goto	l14525
  2496                           
  2497                           ;main.c: 241: {;main.c: 242: sinaliza_int_timer = 0;
  2498  005B0A  0E00               	movlw	0
  2499  005B0C  6E3F               	movwf	_sinaliza_int_timer^0,c
  2500                           
  2501                           ;main.c: 243: escalonador();
  2502  005B0E  EC99  F023         	call	_escalonador	;wreg free
  2503  005B12  D7F8               	goto	l14525
  2504  005B14                     __end_of_main:
  2505                           	callstack 0
  2506                           
  2507 ;; *************** function _mensagem_inicial *****************
  2508 ;; Defined at:
  2509 ;;		line 253 in file "main.c"
  2510 ;; Parameters:    Size  Location     Type
  2511 ;;		None
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;  msg_dois       17   17[BANK0 ] const unsigned char [17]
  2514 ;;  msg_linha_um   17    0[BANK0 ] const unsigned char [17]
  2515 ;; Return value:  Size  Location     Type
  2516 ;;                  1    wreg      void 
  2517 ;; Registers used:
  2518 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2519 ;; Tracked objects:
  2520 ;;		On entry : 0/0
  2521 ;;		On exit  : 0/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2524 ;;      Params:         0       0       0       0       0       0       0       0       0
  2525 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2526 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2527 ;;      Totals:         2      34       0       0       0       0       0       0       0
  2528 ;;Total ram usage:       36 bytes
  2529 ;; Hardware stack levels used:    1
  2530 ;; Hardware stack levels required when called:    6
  2531 ;; This function calls:
  2532 ;;		_escreve_cmd_lcd
  2533 ;;		_escreve_frase_ram_lcd
  2534 ;;		_posicao_cursor_lcd
  2535 ;; This function is called by:
  2536 ;;		_main
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text1
  2541  004B6C                     __ptext1:
  2542                           	callstack 0
  2543  004B6C                     _mensagem_inicial:
  2544                           	callstack 24
  2545                           
  2546                           ;main.c: 255: const unsigned char msg_linha_um[17] = "FATEC ST ANDRE";
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;incstack = 0
  2550  004B6C  0EF6               	movlw	low mensagem_inicial@F3670
  2551  004B6E  6EF6               	movwf	tblptrl,c
  2552  004B70                     	if	1	;There is more than 1 active tblptr byte
  2553  004B70  0E60               	movlw	high mensagem_inicial@F3670
  2554  004B72  6EF7               	movwf	tblptrh,c
  2555  004B74                     	endif
  2556  004B74                     	if	0	;There are less than 3 active tblptr bytes
  2557  004B74                     	endif
  2558  004B74  EE20  F060         	lfsr	2,mensagem_inicial@msg_linha_um
  2559  004B78  0E10               	movlw	16
  2560  004B7A                     u16040:
  2561  004B7A  0009               	tblrd		*+
  2562  004B7C  CFF5 FFDE          	movff	tablat,postinc2
  2563  004B80  06E8               	decf	wreg,f,c
  2564  004B82  E2FB               	bc	u16040
  2565                           
  2566                           ;main.c: 256: const unsigned char msg_dois[17] = "TCC--TELEMTRIA";
  2567  004B84  0EE5               	movlw	low mensagem_inicial@F3672
  2568  004B86  6EF6               	movwf	tblptrl,c
  2569  004B88                     	if	1	;There is more than 1 active tblptr byte
  2570  004B88  0E60               	movlw	high mensagem_inicial@F3672
  2571  004B8A  6EF7               	movwf	tblptrh,c
  2572  004B8C                     	endif
  2573  004B8C                     	if	0	;There are less than 3 active tblptr bytes
  2574  004B8C                     	endif
  2575  004B8C  EE20  F071         	lfsr	2,mensagem_inicial@msg_dois
  2576  004B90  0E10               	movlw	16
  2577  004B92                     u16050:
  2578  004B92  0009               	tblrd		*+
  2579  004B94  CFF5 FFDE          	movff	tablat,postinc2
  2580  004B98  06E8               	decf	wreg,f,c
  2581  004B9A  E2FB               	bc	u16050
  2582                           
  2583                           ;main.c: 258: posicao_cursor_lcd(1,0);
  2584  004B9C  0E00               	movlw	0
  2585  004B9E  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  2586  004BA0  0E01               	movlw	1
  2587  004BA2  EC9A  F028         	call	_posicao_cursor_lcd
  2588                           
  2589                           ;main.c: 259: escreve_frase_ram_lcd(msg_linha_um);
  2590  004BA6  0E60               	movlw	low mensagem_inicial@msg_linha_um
  2591  004BA8  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  2592  004BAA  6A1D               	clrf	(escreve_frase_ram_lcd@buffer+1)^0,c
  2593  004BAC  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  2594                           
  2595                           ;main.c: 261: posicao_cursor_lcd(2,0);
  2596  004BB0  0E00               	movlw	0
  2597  004BB2  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  2598  004BB4  0E02               	movlw	2
  2599  004BB6  EC9A  F028         	call	_posicao_cursor_lcd
  2600                           
  2601                           ;main.c: 262: escreve_frase_ram_lcd(msg_dois);
  2602  004BBA  0E71               	movlw	low mensagem_inicial@msg_dois
  2603  004BBC  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  2604  004BBE  6A1D               	clrf	(escreve_frase_ram_lcd@buffer+1)^0,c
  2605  004BC0  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  2606                           
  2607                           ;main.c: 263: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2608  004BC4  0E3D               	movlw	61
  2609  004BC6  6E20               	movwf	(??_mensagem_inicial+1)^0,c
  2610  004BC8  0EE1               	movlw	225
  2611  004BCA  6E1F               	movwf	??_mensagem_inicial^0,c
  2612  004BCC  0E40               	movlw	64
  2613  004BCE                     u16217:
  2614  004BCE  2EE8               	decfsz	wreg,f,c
  2615  004BD0  D7FE               	bra	u16217
  2616  004BD2  2E1F               	decfsz	??_mensagem_inicial^0,f,c
  2617  004BD4  D7FC               	bra	u16217
  2618  004BD6  2E20               	decfsz	(??_mensagem_inicial+1)^0,f,c
  2619  004BD8  D7FA               	bra	u16217
  2620                           
  2621                           ;main.c: 264: escreve_cmd_lcd(0b00000001);
  2622  004BDA  0E01               	movlw	1
  2623  004BDC  EC42  F026         	call	_escreve_cmd_lcd
  2624                           
  2625                           ;main.c: 265: posicao_cursor_lcd(1,0);
  2626  004BE0  0E00               	movlw	0
  2627  004BE2  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  2628  004BE4  0E01               	movlw	1
  2629  004BE6  EC9A  F028         	call	_posicao_cursor_lcd
  2630                           
  2631                           ;main.c: 266: escreve_frase_ram_lcd("AGUARDE...");
  2632  004BEA  0EF8               	movlw	low STR_23
  2633  004BEC  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  2634  004BEE  0E61               	movlw	high STR_23
  2635  004BF0  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  2636  004BF2  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  2637  004BF6  0012               	return		;funcret
  2638  004BF8                     __end_of_mensagem_inicial:
  2639                           	callstack 0
  2640                           
  2641 ;; *************** function _init_lcd *****************
  2642 ;; Defined at:
  2643 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;		None
  2646 ;; Auto vars:     Size  Location     Type
  2647 ;;		None
  2648 ;; Return value:  Size  Location     Type
  2649 ;;                  1    wreg      void 
  2650 ;; Registers used:
  2651 ;;		wreg, status,2, status,0, cstack
  2652 ;; Tracked objects:
  2653 ;;		On entry : 0/0
  2654 ;;		On exit  : 0/0
  2655 ;;		Unchanged: 0/0
  2656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2657 ;;      Params:         0       0       0       0       0       0       0       0       0
  2658 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2659 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2660 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2661 ;;Total ram usage:        1 bytes
  2662 ;; Hardware stack levels used:    1
  2663 ;; Hardware stack levels required when called:    5
  2664 ;; This function calls:
  2665 ;;		_delay
  2666 ;;		_escreve_cmd_lcd
  2667 ;; This function is called by:
  2668 ;;		_main
  2669 ;; This function uses a non-reentrant model
  2670 ;;
  2671                           
  2672                           	psect	text2
  2673  00487C                     __ptext2:
  2674                           	callstack 0
  2675  00487C                     _init_lcd:
  2676                           	callstack 25
  2677                           
  2678                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2679                           
  2680                           ;incstack = 0
  2681  00487C  9495               	bcf	149,2,c	;volatile
  2682                           
  2683                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2684  00487E  9295               	bcf	149,1,c	;volatile
  2685                           
  2686                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2687  004880  9095               	bcf	149,0,c	;volatile
  2688                           
  2689                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2690  004882  9895               	bcf	149,4,c	;volatile
  2691                           
  2692                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2693  004884  9A95               	bcf	149,5,c	;volatile
  2694                           
  2695                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2696  004886  9C95               	bcf	149,6,c	;volatile
  2697                           
  2698                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2699  004888  9E95               	bcf	149,7,c	;volatile
  2700                           
  2701                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2702  00488A  9483               	bcf	131,2,c	;volatile
  2703                           
  2704                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2705  00488C  9283               	bcf	131,1,c	;volatile
  2706                           
  2707                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2708  00488E  9083               	bcf	131,0,c	;volatile
  2709                           
  2710                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2711  004890  9E83               	bcf	131,7,c	;volatile
  2712                           
  2713                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2714  004892  9C83               	bcf	131,6,c	;volatile
  2715                           
  2716                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2717  004894  8A83               	bsf	131,5,c	;volatile
  2718                           
  2719                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2720  004896  8883               	bsf	131,4,c	;volatile
  2721                           
  2722                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2723  004898  0EEA               	movlw	234
  2724  00489A  6E1C               	movwf	??_init_lcd^0,c
  2725  00489C  0EC3               	movlw	195
  2726  00489E                     u16227:
  2727  00489E  2EE8               	decfsz	wreg,f,c
  2728  0048A0  D7FE               	bra	u16227
  2729  0048A2  2E1C               	decfsz	??_init_lcd^0,f,c
  2730  0048A4  D7FC               	bra	u16227
  2731  0048A6  F000               	nop	
  2732                           
  2733                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2734  0048A8  8083               	bsf	131,0,c	;volatile
  2735                           
  2736                           ;display_lcd.c: 108: delay();
  2737  0048AA  EC65  F02E         	call	_delay	;wreg free
  2738                           
  2739                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2740  0048AE  9083               	bcf	131,0,c	;volatile
  2741                           
  2742                           ;display_lcd.c: 110: delay();
  2743  0048B0  EC65  F02E         	call	_delay	;wreg free
  2744                           
  2745                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2746  0048B4  0E4E               	movlw	78
  2747  0048B6  6E1C               	movwf	??_init_lcd^0,c
  2748  0048B8  0EEB               	movlw	235
  2749  0048BA                     u16237:
  2750  0048BA  2EE8               	decfsz	wreg,f,c
  2751  0048BC  D7FE               	bra	u16237
  2752  0048BE  2E1C               	decfsz	??_init_lcd^0,f,c
  2753  0048C0  D7FC               	bra	u16237
  2754  0048C2  F000               	nop	
  2755                           
  2756                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2757  0048C4  8083               	bsf	131,0,c	;volatile
  2758                           
  2759                           ;display_lcd.c: 119: delay();
  2760  0048C6  EC65  F02E         	call	_delay	;wreg free
  2761                           
  2762                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2763  0048CA  9083               	bcf	131,0,c	;volatile
  2764                           
  2765                           ;display_lcd.c: 121: delay();
  2766  0048CC  EC65  F02E         	call	_delay	;wreg free
  2767                           
  2768                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2769  0048D0  0E4E               	movlw	78
  2770  0048D2  6E1C               	movwf	??_init_lcd^0,c
  2771  0048D4  0EEB               	movlw	235
  2772  0048D6                     u16247:
  2773  0048D6  2EE8               	decfsz	wreg,f,c
  2774  0048D8  D7FE               	bra	u16247
  2775  0048DA  2E1C               	decfsz	??_init_lcd^0,f,c
  2776  0048DC  D7FC               	bra	u16247
  2777  0048DE  F000               	nop	
  2778                           
  2779                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2780  0048E0  8083               	bsf	131,0,c	;volatile
  2781                           
  2782                           ;display_lcd.c: 130: delay();
  2783  0048E2  EC65  F02E         	call	_delay	;wreg free
  2784                           
  2785                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2786  0048E6  9083               	bcf	131,0,c	;volatile
  2787                           
  2788                           ;display_lcd.c: 132: delay();
  2789  0048E8  EC65  F02E         	call	_delay	;wreg free
  2790                           
  2791                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2792  0048EC  9E83               	bcf	131,7,c	;volatile
  2793                           
  2794                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2795  0048EE  9C83               	bcf	131,6,c	;volatile
  2796                           
  2797                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2798  0048F0  8A83               	bsf	131,5,c	;volatile
  2799                           
  2800                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2801  0048F2  9883               	bcf	131,4,c	;volatile
  2802                           
  2803                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2804  0048F4  8083               	bsf	131,0,c	;volatile
  2805                           
  2806                           ;display_lcd.c: 143: delay();
  2807  0048F6  EC65  F02E         	call	_delay	;wreg free
  2808                           
  2809                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2810  0048FA  9083               	bcf	131,0,c	;volatile
  2811                           
  2812                           ;display_lcd.c: 145: delay();
  2813  0048FC  EC65  F02E         	call	_delay	;wreg free
  2814                           
  2815                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2816  004900  0E28               	movlw	40
  2817  004902  EC42  F026         	call	_escreve_cmd_lcd
  2818                           
  2819                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2820  004906  0E06               	movlw	6
  2821  004908  EC42  F026         	call	_escreve_cmd_lcd
  2822                           
  2823                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2824  00490C  0E0E               	movlw	14
  2825  00490E  EC42  F026         	call	_escreve_cmd_lcd
  2826                           
  2827                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2828  004912  0E01               	movlw	1
  2829  004914  EC42  F026         	call	_escreve_cmd_lcd
  2830  004918  0012               	return		;funcret
  2831  00491A                     __end_of_init_lcd:
  2832                           	callstack 0
  2833                           
  2834 ;; *************** function _init_hardware *****************
  2835 ;; Defined at:
  2836 ;;		line 52 in file "bibliotecas/hardware.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;		None
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;		None
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  1    wreg      void 
  2843 ;; Registers used:
  2844 ;;		wreg, status,2, cstack
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2850 ;;      Params:         0       0       0       0       0       0       0       0       0
  2851 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2852 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2853 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2854 ;;Total ram usage:        0 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; Hardware stack levels required when called:    5
  2857 ;; This function calls:
  2858 ;;		_config_timer_dois
  2859 ;;		_config_timer_zero
  2860 ;;		_init_interrupt
  2861 ;;		_init_oscilador
  2862 ;;		_init_ports
  2863 ;; This function is called by:
  2864 ;;		_main
  2865 ;; This function uses a non-reentrant model
  2866 ;;
  2867                           
  2868                           	psect	text3
  2869  005DC2                     __ptext3:
  2870                           	callstack 0
  2871  005DC2                     _init_hardware:
  2872                           	callstack 25
  2873                           
  2874                           ;hardware.c: 55: init_oscilador();
  2875                           
  2876                           ;incstack = 0
  2877  005DC2  EC78  F02F         	call	_init_oscilador	;wreg free
  2878                           
  2879                           ;hardware.c: 58: init_ports();
  2880  005DC6  EC83  F02E         	call	_init_ports	;wreg free
  2881                           
  2882                           ;hardware.c: 61: config_timer_zero();
  2883  005DCA  ECAD  F02E         	call	_config_timer_zero	;wreg free
  2884                           
  2885                           ;hardware.c: 64: config_timer_dois();
  2886  005DCE  EC32  F02F         	call	_config_timer_dois	;wreg free
  2887                           
  2888                           ;hardware.c: 67: init_interrupt();
  2889  005DD2  EC01  F02F         	call	_init_interrupt	;wreg free
  2890  005DD6  0012               	return		;funcret
  2891  005DD8                     __end_of_init_hardware:
  2892                           	callstack 0
  2893                           
  2894 ;; *************** function _init_ports *****************
  2895 ;; Defined at:
  2896 ;;		line 151 in file "bibliotecas/hardware.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;		None
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg, status,2
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2910 ;;      Params:         0       0       0       0       0       0       0       0       0
  2911 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2913 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2914 ;;Total ram usage:        0 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    3
  2917 ;; This function calls:
  2918 ;;		Nothing
  2919 ;; This function is called by:
  2920 ;;		_init_hardware
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text4
  2925  005D06                     __ptext4:
  2926                           	callstack 0
  2927  005D06                     _init_ports:
  2928                           	callstack 26
  2929                           
  2930                           ;hardware.c: 153: ADCON1 = 0X0F;
  2931                           
  2932                           ;incstack = 0
  2933  005D06  0E0F               	movlw	15
  2934  005D08  6EC1               	movwf	193,c	;volatile
  2935                           
  2936                           ;hardware.c: 154: TRISB = 0b00000001;
  2937  005D0A  0E01               	movlw	1
  2938  005D0C  6E93               	movwf	147,c	;volatile
  2939                           
  2940                           ;hardware.c: 155: LATB = 0xFF;
  2941  005D0E  688A               	setf	138,c	;volatile
  2942                           
  2943                           ;hardware.c: 156: TRISD = 0x00;
  2944  005D10  0E00               	movlw	0
  2945  005D12  6E95               	movwf	149,c	;volatile
  2946                           
  2947                           ;hardware.c: 157: TRISA = 0b00000111;
  2948  005D14  0E07               	movlw	7
  2949  005D16  6E92               	movwf	146,c	;volatile
  2950                           
  2951                           ;hardware.c: 158: TRISC = 0x01111111;
  2952  005D18  0E11               	movlw	17
  2953  005D1A  6E94               	movwf	148,c	;volatile
  2954                           
  2955                           ;hardware.c: 159: TRISE = 0b00000011;
  2956  005D1C  0E03               	movlw	3
  2957  005D1E  6E96               	movwf	150,c	;volatile
  2958  005D20  0012               	return		;funcret
  2959  005D22                     __end_of_init_ports:
  2960                           	callstack 0
  2961                           
  2962 ;; *************** function _init_oscilador *****************
  2963 ;; Defined at:
  2964 ;;		line 169 in file "bibliotecas/hardware.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;		None
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;		None
  2969 ;; Return value:  Size  Location     Type
  2970 ;;                  1    wreg      void 
  2971 ;; Registers used:
  2972 ;;		None
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2978 ;;      Params:         0       0       0       0       0       0       0       0       0
  2979 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2980 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2981 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2982 ;;Total ram usage:        0 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; Hardware stack levels required when called:    3
  2985 ;; This function calls:
  2986 ;;		Nothing
  2987 ;; This function is called by:
  2988 ;;		_init_hardware
  2989 ;; This function uses a non-reentrant model
  2990 ;;
  2991                           
  2992                           	psect	text5
  2993  005EF0                     __ptext5:
  2994                           	callstack 0
  2995  005EF0                     _init_oscilador:
  2996                           	callstack 26
  2997                           
  2998                           ;hardware.c: 172: OSCCONbits.IRCF0 = 1;
  2999                           
  3000                           ;incstack = 0
  3001  005EF0  88D3               	bsf	211,4,c	;volatile
  3002                           
  3003                           ;hardware.c: 173: OSCCONbits.IRCF1 = 1;
  3004  005EF2  8AD3               	bsf	211,5,c	;volatile
  3005                           
  3006                           ;hardware.c: 174: OSCCONbits.IRCF2 = 1;
  3007  005EF4  8CD3               	bsf	211,6,c	;volatile
  3008  005EF6  0012               	return		;funcret
  3009  005EF8                     __end_of_init_oscilador:
  3010                           	callstack 0
  3011                           
  3012 ;; *************** function _init_interrupt *****************
  3013 ;; Defined at:
  3014 ;;		line 94 in file "bibliotecas/hardware.c"
  3015 ;; Parameters:    Size  Location     Type
  3016 ;;		None
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;		None
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg, status,2
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3028 ;;      Params:         0       0       0       0       0       0       0       0       0
  3029 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3030 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3031 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3032 ;;Total ram usage:        0 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:    3
  3035 ;; This function calls:
  3036 ;;		Nothing
  3037 ;; This function is called by:
  3038 ;;		_init_hardware
  3039 ;; This function uses a non-reentrant model
  3040 ;;
  3041                           
  3042                           	psect	text6
  3043  005E02                     __ptext6:
  3044                           	callstack 0
  3045  005E02                     _init_interrupt:
  3046                           	callstack 26
  3047                           
  3048                           ;hardware.c: 96: INTCON = 0b10110000;
  3049                           
  3050                           ;incstack = 0
  3051  005E02  0EB0               	movlw	176
  3052  005E04  6EF2               	movwf	242,c	;volatile
  3053                           
  3054                           ;hardware.c: 97: INTCON2 = 0b00000000;
  3055  005E06  0E00               	movlw	0
  3056  005E08  6EF1               	movwf	241,c	;volatile
  3057                           
  3058                           ;hardware.c: 98: INTCON3 = 0b00000000;
  3059  005E0A  0E00               	movlw	0
  3060  005E0C  6EF0               	movwf	240,c	;volatile
  3061                           
  3062                           ;hardware.c: 100: PIE1 = 0b00101000;
  3063  005E0E  0E28               	movlw	40
  3064  005E10  6E9D               	movwf	157,c	;volatile
  3065  005E12  0012               	return		;funcret
  3066  005E14                     __end_of_init_interrupt:
  3067                           	callstack 0
  3068                           
  3069 ;; *************** function _config_timer_zero *****************
  3070 ;; Defined at:
  3071 ;;		line 79 in file "bibliotecas/hardware.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;		None
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;		None
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  1    wreg      void 
  3078 ;; Registers used:
  3079 ;;		wreg, status,2, cstack
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3085 ;;      Params:         0       0       0       0       0       0       0       0       0
  3086 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3087 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3088 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3089 ;;Total ram usage:        0 bytes
  3090 ;; Hardware stack levels used:    1
  3091 ;; Hardware stack levels required when called:    4
  3092 ;; This function calls:
  3093 ;;		_write_timer_zero
  3094 ;; This function is called by:
  3095 ;;		_init_hardware
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           	psect	text7
  3100  005D5A                     __ptext7:
  3101                           	callstack 0
  3102  005D5A                     _config_timer_zero:
  3103                           	callstack 25
  3104                           
  3105                           ;hardware.c: 81: T0CON = 0b11000101;
  3106                           
  3107                           ;incstack = 0
  3108  005D5A  0EC5               	movlw	197
  3109  005D5C  6ED5               	movwf	213,c	;volatile
  3110                           
  3111                           ;hardware.c: 82: SPPCON = 0b00000000;
  3112  005D5E  0E00               	movlw	0
  3113  005D60  6E65               	movwf	101,c	;volatile
  3114                           
  3115                           ;hardware.c: 83: SPPCFG = 0b00000000;
  3116  005D62  0E00               	movlw	0
  3117  005D64  6E63               	movwf	99,c	;volatile
  3118                           
  3119                           ;hardware.c: 84: write_timer_zero(0x45);
  3120  005D66  0E00               	movlw	0
  3121  005D68  6E1A               	movwf	(write_timer_zero@timer0+1)^0,c
  3122  005D6A  0E45               	movlw	69
  3123  005D6C  6E19               	movwf	write_timer_zero@timer0^0,c
  3124  005D6E  EC5F  F02F         	call	_write_timer_zero	;wreg free
  3125  005D72  0012               	return		;funcret
  3126  005D74                     __end_of_config_timer_zero:
  3127                           	callstack 0
  3128                           
  3129 ;; *************** function _write_timer_zero *****************
  3130 ;; Defined at:
  3131 ;;		line 134 in file "bibliotecas/hardware.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;  timer0          2   24[COMRAM] unsigned int 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;		None
  3136 ;; Return value:  Size  Location     Type
  3137 ;;                  1    wreg      void 
  3138 ;; Registers used:
  3139 ;;		None
  3140 ;; Tracked objects:
  3141 ;;		On entry : 0/0
  3142 ;;		On exit  : 0/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3145 ;;      Params:         2       0       0       0       0       0       0       0       0
  3146 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3147 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3148 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3149 ;;Total ram usage:        2 bytes
  3150 ;; Hardware stack levels used:    1
  3151 ;; Hardware stack levels required when called:    3
  3152 ;; This function calls:
  3153 ;;		Nothing
  3154 ;; This function is called by:
  3155 ;;		_config_timer_zero
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           	psect	text8
  3160  005EBE                     __ptext8:
  3161                           	callstack 0
  3162  005EBE                     _write_timer_zero:
  3163                           	callstack 25
  3164                           
  3165                           ;hardware.c: 142: TMR0 = timer0;
  3166                           
  3167                           ;incstack = 0
  3168  005EBE  C019  FFD6         	movff	write_timer_zero@timer0,4054	;volatile
  3169  005EC2  C01A  FFD7         	movff	write_timer_zero@timer0+1,4055	;volatile
  3170  005EC6  0012               	return		;funcret
  3171  005EC8                     __end_of_write_timer_zero:
  3172                           	callstack 0
  3173                           
  3174 ;; *************** function _config_timer_dois *****************
  3175 ;; Defined at:
  3176 ;;		line 198 in file "bibliotecas/hardware.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;		None
  3179 ;; Auto vars:     Size  Location     Type
  3180 ;;		None
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  1    wreg      void 
  3183 ;; Registers used:
  3184 ;;		wreg, status,2
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3190 ;;      Params:         0       0       0       0       0       0       0       0       0
  3191 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3192 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3193 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3194 ;;Total ram usage:        0 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    3
  3197 ;; This function calls:
  3198 ;;		Nothing
  3199 ;; This function is called by:
  3200 ;;		_init_hardware
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           	psect	text9
  3205  005E64                     __ptext9:
  3206                           	callstack 0
  3207  005E64                     _config_timer_dois:
  3208                           	callstack 26
  3209                           
  3210                           ;hardware.c: 200: T2CON = 0b00000100;
  3211                           
  3212                           ;incstack = 0
  3213  005E64  0E04               	movlw	4
  3214  005E66  6ECA               	movwf	202,c	;volatile
  3215                           
  3216                           ;hardware.c: 201: TMR2 = 0;
  3217  005E68  0E00               	movlw	0
  3218  005E6A  6ECC               	movwf	204,c	;volatile
  3219                           
  3220                           ;hardware.c: 202: PR2 = 0x01;
  3221  005E6C  0E01               	movlw	1
  3222  005E6E  6ECB               	movwf	203,c	;volatile
  3223  005E70  0012               	return		;funcret
  3224  005E72                     __end_of_config_timer_dois:
  3225                           	callstack 0
  3226                           
  3227 ;; *************** function _inicializa_tarefas *****************
  3228 ;; Defined at:
  3229 ;;		line 172 in file "main.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;		None
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;		None
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  1    wreg      void 
  3236 ;; Registers used:
  3237 ;;		wreg, status,2, status,0
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 3F/1
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3243 ;;      Params:         0       0       0       0       0       0       0       0       0
  3244 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3245 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3246 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3247 ;;Total ram usage:        0 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; Hardware stack levels required when called:    3
  3250 ;; This function calls:
  3251 ;;		Nothing
  3252 ;; This function is called by:
  3253 ;;		_main
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           	psect	text10
  3258  0050D4                     __ptext10:
  3259                           	callstack 0
  3260  0050D4                     _inicializa_tarefas:
  3261                           	callstack 27
  3262                           
  3263                           ;main.c: 175: p_tarefas[0] = verifica_dados_operacionais;
  3264                           
  3265                           ;incstack = 0
  3266  0050D4  0E54               	movlw	low _verifica_dados_operacionais
  3267  0050D6  0101               	movlb	1	; () banked
  3268  0050D8  6F10               	movwf	_p_tarefas& (0+255),b
  3269  0050DA  0E5A               	movlw	high _verifica_dados_operacionais
  3270  0050DC  6F11               	movwf	(_p_tarefas+1)& (0+255),b
  3271                           
  3272                           ;main.c: 176: p_tarefas[1] = disparo_gravacao;
  3273  0050DE  0EDC               	movlw	low _disparo_gravacao
  3274  0050E0  6F12               	movwf	(_p_tarefas+2)& (0+255),b
  3275  0050E2  0E54               	movlw	high _disparo_gravacao
  3276  0050E4  6F13               	movwf	(_p_tarefas+3)& (0+255),b
  3277                           
  3278                           ;main.c: 178: p_tarefas[2] = troca_de_tela;
  3279  0050E6  0E1E               	movlw	low _troca_de_tela
  3280  0050E8  6F14               	movwf	(_p_tarefas+4)& (0+255),b
  3281  0050EA  0E19               	movlw	high _troca_de_tela
  3282  0050EC  6F15               	movwf	(_p_tarefas+5)& (0+255),b
  3283                           
  3284                           ; BSR set to: 1
  3285                           ;main.c: 182: tempo_backup[0] = 500;
  3286  0050EE  0E01               	movlw	1
  3287  0050F0  6F09               	movwf	(_tempo_backup+1)& (0+255),b
  3288  0050F2  0EF4               	movlw	244
  3289  0050F4  6F08               	movwf	_tempo_backup& (0+255),b
  3290                           
  3291                           ; BSR set to: 1
  3292                           ;main.c: 183: tempo_backup[1] = 1000;
  3293  0050F6  0E03               	movlw	3
  3294  0050F8  6F0B               	movwf	(_tempo_backup+3)& (0+255),b
  3295  0050FA  0EE8               	movlw	232
  3296  0050FC  6F0A               	movwf	(_tempo_backup+2)& (0+255),b
  3297                           
  3298                           ; BSR set to: 1
  3299                           ;main.c: 184: tempo_backup[2] = 2000;
  3300  0050FE  0E07               	movlw	7
  3301  005100  6F0D               	movwf	(_tempo_backup+5)& (0+255),b
  3302  005102  0ED0               	movlw	208
  3303  005104  6F0C               	movwf	(_tempo_backup+4)& (0+255),b
  3304                           
  3305                           ; BSR set to: 1
  3306                           ;main.c: 185: tempo_backup[3] = 1000;
  3307  005106  0E03               	movlw	3
  3308  005108  6F0F               	movwf	(_tempo_backup+7)& (0+255),b
  3309  00510A  0EE8               	movlw	232
  3310  00510C  6F0E               	movwf	(_tempo_backup+6)& (0+255),b
  3311                           
  3312                           ; BSR set to: 1
  3313                           ;main.c: 188: tempo_tarefa[0] = 500;
  3314  00510E  0E01               	movlw	1
  3315  005110  6F01               	movwf	(_tempo_tarefa+1)& (0+255),b
  3316  005112  0EF4               	movlw	244
  3317  005114  6F00               	movwf	_tempo_tarefa& (0+255),b
  3318                           
  3319                           ; BSR set to: 1
  3320                           ;main.c: 189: tempo_tarefa[1] = 1000;
  3321  005116  0E03               	movlw	3
  3322  005118  6F03               	movwf	(_tempo_tarefa+3)& (0+255),b
  3323  00511A  0EE8               	movlw	232
  3324  00511C  6F02               	movwf	(_tempo_tarefa+2)& (0+255),b
  3325                           
  3326                           ; BSR set to: 1
  3327                           ;main.c: 190: tempo_tarefa[2] = 5000;
  3328  00511E  0E13               	movlw	19
  3329  005120  6F05               	movwf	(_tempo_tarefa+5)& (0+255),b
  3330  005122  0E88               	movlw	136
  3331  005124  6F04               	movwf	(_tempo_tarefa+4)& (0+255),b
  3332                           
  3333                           ; BSR set to: 1
  3334                           ;main.c: 191: tempo_tarefa[3] = 5000;
  3335  005126  0E13               	movlw	19
  3336  005128  6F07               	movwf	(_tempo_tarefa+7)& (0+255),b
  3337  00512A  0E88               	movlw	136
  3338  00512C  6F06               	movwf	(_tempo_tarefa+6)& (0+255),b
  3339                           
  3340                           ; BSR set to: 1
  3341                           ;main.c: 193: tarefa_em_execucao = 0;
  3342  00512E  0E00               	movlw	0
  3343  005130  6E3E               	movwf	_tarefa_em_execucao^0,c	;volatile
  3344                           
  3345                           ; BSR set to: 1
  3346  005132  0012               	return		;funcret
  3347  005134                     __end_of_inicializa_tarefas:
  3348                           	callstack 0
  3349                           
  3350 ;; *************** function _escalonador *****************
  3351 ;; Defined at:
  3352 ;;		line 204 in file "main.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;		None
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;  cont            1  150[BANK0 ] unsigned char 
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  1    wreg      void 
  3359 ;; Registers used:
  3360 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/1
  3363 ;;		On exit  : 3F/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3366 ;;      Params:         0       0       0       0       0       0       0       0       0
  3367 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3368 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3369 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3370 ;;Total ram usage:        3 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; Hardware stack levels required when called:   17
  3373 ;; This function calls:
  3374 ;;		_disparo_gravacao
  3375 ;;		_troca_de_tela
  3376 ;;		_verifica_dados_operacionais
  3377 ;; This function is called by:
  3378 ;;		_main
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           	psect	text11
  3383  004732                     __ptext11:
  3384                           	callstack 0
  3385  004732                     _escalonador:
  3386                           	callstack 13
  3387                           
  3388                           ;main.c: 206: unsigned char cont;;main.c: 207: for(cont = 0; cont<4;cont++)
  3389                           
  3390                           ; BSR set to: 1
  3391                           ;incstack = 0
  3392  004732  0E00               	movlw	0
  3393  004734  0100               	movlb	0	; () banked
  3394  004736  6FF6               	movwf	escalonador@cont& (0+255),b
  3395  004738                     l14423:
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;main.c: 208: {;main.c: 209: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3399  004738  51F6               	movf	escalonador@cont& (0+255),w,b
  3400  00473A  0D02               	mullw	2
  3401  00473C  0E10               	movlw	low _p_tarefas
  3402  00473E  24F3               	addwf	243,w,c
  3403  004740  6ED9               	movwf	fsr2l,c
  3404  004742  0E01               	movlw	high _p_tarefas
  3405  004744  20F4               	addwfc	prodh,w,c
  3406  004746  6EDA               	movwf	fsr2h,c
  3407  004748  50DE               	movf	postinc2,w,c
  3408  00474A  10DE               	iorwf	postinc2,w,c
  3409  00474C  B4D8               	btfsc	status,2,c
  3410  00474E  D03F               	goto	l14435
  3411                           
  3412                           ; BSR set to: 0
  3413  004750  51F6               	movf	escalonador@cont& (0+255),w,b
  3414  004752  0D02               	mullw	2
  3415  004754  0E00               	movlw	low _tempo_tarefa
  3416  004756  24F3               	addwf	243,w,c
  3417  004758  6ED9               	movwf	fsr2l,c
  3418  00475A  0E01               	movlw	high _tempo_tarefa
  3419  00475C  20F4               	addwfc	prodh,w,c
  3420  00475E  6EDA               	movwf	fsr2h,c
  3421  004760  50DE               	movf	postinc2,w,c
  3422  004762  10DE               	iorwf	postinc2,w,c
  3423  004764  A4D8               	btfss	status,2,c
  3424  004766  D033               	goto	l14435
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;main.c: 210: {;main.c: 211: tarefa_em_execucao = 1;
  3428  004768  0E01               	movlw	1
  3429  00476A  6E3E               	movwf	_tarefa_em_execucao^0,c	;volatile
  3430                           
  3431                           ;main.c: 212: timeout_tarefa = 10000;
  3432  00476C  0E27               	movlw	39
  3433  00476E  0101               	movlb	1	; () banked
  3434  004770  6F29               	movwf	(_timeout_tarefa+1)& (0+255),b
  3435  004772  0E10               	movlw	16
  3436  004774  6F28               	movwf	_timeout_tarefa& (0+255),b
  3437                           
  3438                           ; BSR set to: 1
  3439                           ;main.c: 213: p_tarefas[cont]();
  3440  004776  0100               	movlb	0	; () banked
  3441  004778  51F6               	movf	escalonador@cont& (0+255),w,b
  3442  00477A  0D02               	mullw	2
  3443  00477C  0E10               	movlw	low _p_tarefas
  3444  00477E  24F3               	addwf	243,w,c
  3445  004780  6ED9               	movwf	fsr2l,c
  3446  004782  0E01               	movlw	high _p_tarefas
  3447  004784  20F4               	addwfc	prodh,w,c
  3448  004786  6EDA               	movwf	fsr2h,c
  3449  004788  D801               	call	u16028
  3450  00478A  D00A               	goto	u16029
  3451  00478C                     u16028:
  3452  00478C  0005               	push	
  3453  00478E  6EFA               	movwf	pclath,c
  3454  004790  50DE               	movf	postinc2,w,c
  3455  004792  6EFD               	movwf	tosl,c
  3456  004794  50DE               	movf	postinc2,w,c
  3457  004796  6EFE               	movwf	tosh,c
  3458  004798  50F8               	movf	tblptru,w,c
  3459  00479A  6EFF               	movwf	tosu,c
  3460  00479C  50FA               	movf	pclath,w,c
  3461  00479E  0012               	return		;indir
  3462  0047A0                     u16029:
  3463                           
  3464                           ;main.c: 214: tarefa_em_execucao = 0;
  3465  0047A0  0E00               	movlw	0
  3466  0047A2  6E3E               	movwf	_tarefa_em_execucao^0,c	;volatile
  3467                           
  3468                           ;main.c: 215: tempo_tarefa[cont] = tempo_backup[cont];
  3469  0047A4  0100               	movlb	0	; () banked
  3470  0047A6  51F6               	movf	escalonador@cont& (0+255),w,b
  3471  0047A8  0D02               	mullw	2
  3472  0047AA  0E08               	movlw	low _tempo_backup
  3473  0047AC  24F3               	addwf	243,w,c
  3474  0047AE  6ED9               	movwf	fsr2l,c
  3475  0047B0  0E01               	movlw	high _tempo_backup
  3476  0047B2  20F4               	addwfc	prodh,w,c
  3477  0047B4  6EDA               	movwf	fsr2h,c
  3478  0047B6  51F6               	movf	escalonador@cont& (0+255),w,b
  3479  0047B8  0D02               	mullw	2
  3480  0047BA  0E00               	movlw	low _tempo_tarefa
  3481  0047BC  24F3               	addwf	243,w,c
  3482  0047BE  6EE1               	movwf	fsr1l,c
  3483  0047C0  0E01               	movlw	high _tempo_tarefa
  3484  0047C2  20F4               	addwfc	prodh,w,c
  3485  0047C4  6EE2               	movwf	fsr1h,c
  3486  0047C6  CFDE FFE6          	movff	postinc2,postinc1
  3487  0047CA  CFDD FFE5          	movff	postdec2,postdec1
  3488  0047CE                     l14435:
  3489                           
  3490                           ; BSR set to: 0
  3491  0047CE  2BF6               	incf	escalonador@cont& (0+255),f,b
  3492                           
  3493                           ; BSR set to: 0
  3494  0047D0  0E03               	movlw	3
  3495  0047D2  65F6               	cpfsgt	escalonador@cont& (0+255),b
  3496  0047D4  D7B1               	goto	l14423
  3497  0047D6  0012               	return	
  3498  0047D8                     __end_of_escalonador:
  3499                           	callstack 0
  3500                           
  3501 ;; *************** function _troca_de_tela *****************
  3502 ;; Defined at:
  3503 ;;		line 390 in file "main.c"
  3504 ;; Parameters:    Size  Location     Type
  3505 ;;		None
  3506 ;; Auto vars:     Size  Location     Type
  3507 ;;		None
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  1    wreg      void 
  3510 ;; Registers used:
  3511 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3512 ;; Tracked objects:
  3513 ;;		On entry : 3F/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3517 ;;      Params:         0       0       0       0       0       0       0       0       0
  3518 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3519 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3520 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3521 ;;Total ram usage:        1 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; Hardware stack levels required when called:    7
  3524 ;; This function calls:
  3525 ;;		_Latitude
  3526 ;;		_Longitude
  3527 ;;		_escreve_cmd_lcd
  3528 ;;		_escreve_frase_ram_lcd
  3529 ;;		_escreve_inteiro_lcd
  3530 ;;		_fix
  3531 ;;		_posicao_cursor_lcd
  3532 ;; This function is called by:
  3533 ;;		_inicializa_tarefas
  3534 ;;		_escalonador
  3535 ;; This function uses a non-reentrant model
  3536 ;;
  3537                           
  3538                           	psect	text12
  3539  00191E                     __ptext12:
  3540                           	callstack 0
  3541  00191E                     _troca_de_tela:
  3542                           	callstack 22
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;main.c: 393: static unsigned char state = 0;;main.c: 394: static unsigned char last_sta
      +                          te = 0;;;main.c: 397: switch(fence_flag[2].point)
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;incstack = 0
  3549  00191E  D153               	goto	l14147
  3550  001920                     l1458:
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;main.c: 401: if(!PORTEbits.RE0 && !fence_flag[2].point || (state == 1 ))
  3554  001920  B084               	btfsc	132,0,c	;volatile
  3555  001922  D002               	goto	u15390
  3556                           
  3557                           ; BSR set to: 0
  3558  001924  A034               	btfss	(_fence_flag+2)^0,0,c
  3559  001926  D003               	goto	u15400
  3560  001928                     u15390:
  3561                           
  3562                           ; BSR set to: 0
  3563  001928  043D               	decf	troca_de_tela@state^0,w,c
  3564  00192A  A4D8               	btfss	status,2,c
  3565  00192C  D042               	goto	l14049
  3566  00192E                     u15400:
  3567                           
  3568                           ; BSR set to: 0
  3569                           ;main.c: 402: {;main.c: 404: if(!time_atualizacao)
  3570  00192E  5035               	movf	_time_atualizacao^0,w,c
  3571  001930  1036               	iorwf	(_time_atualizacao+1)^0,w,c
  3572  001932  A4D8               	btfss	status,2,c
  3573  001934  D011               	goto	l14029
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;main.c: 405: {;main.c: 406: posicao_cursor_lcd(2,6);
  3577  001936  0E06               	movlw	6
  3578  001938  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3579  00193A  0E02               	movlw	2
  3580  00193C  EC9A  F028         	call	_posicao_cursor_lcd
  3581                           
  3582                           ;main.c: 407: escreve_frase_ram_lcd(fix());
  3583  001940  EC6E  F02F         	call	_fix	;wreg free
  3584  001944  C019  F01C         	movff	?_fix,escreve_frase_ram_lcd@buffer
  3585  001948  C01A  F01D         	movff	?_fix+1,escreve_frase_ram_lcd@buffer+1
  3586  00194C  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  3587                           
  3588                           ;main.c: 408: time_atualizacao = 10000;
  3589  001950  0E27               	movlw	39
  3590  001952  6E36               	movwf	(_time_atualizacao+1)^0,c
  3591  001954  0E10               	movlw	16
  3592  001956  6E35               	movwf	_time_atualizacao^0,c
  3593  001958                     l14029:
  3594                           
  3595                           ;main.c: 409: };main.c: 411: if(last_state != 1)
  3596  001958  043C               	decf	troca_de_tela@last_state^0,w,c
  3597  00195A  B4D8               	btfsc	status,2,c
  3598  00195C  D028               	goto	l14047
  3599                           
  3600                           ;main.c: 412: {;main.c: 413: state = 1;
  3601  00195E  0E01               	movlw	1
  3602  001960  6E3D               	movwf	troca_de_tela@state^0,c
  3603                           
  3604                           ;main.c: 414: escreve_cmd_lcd(0b00000001);
  3605  001962  0E01               	movlw	1
  3606  001964  EC42  F026         	call	_escreve_cmd_lcd
  3607                           
  3608                           ;main.c: 415: posicao_cursor_lcd(1,0);
  3609  001968  0E00               	movlw	0
  3610  00196A  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3611  00196C  0E01               	movlw	1
  3612  00196E  EC9A  F028         	call	_posicao_cursor_lcd
  3613                           
  3614                           ;main.c: 416: escreve_frase_ram_lcd("RPM:");
  3615  001972  0E5F               	movlw	low STR_26
  3616  001974  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3617  001976  0E62               	movlw	high STR_26
  3618  001978  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3619  00197A  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  3620                           
  3621                           ;main.c: 417: posicao_cursor_lcd(2,0);
  3622  00197E  0E00               	movlw	0
  3623  001980  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3624  001982  0E02               	movlw	2
  3625  001984  EC9A  F028         	call	_posicao_cursor_lcd
  3626                           
  3627                           ;main.c: 418: escreve_frase_ram_lcd("VEL:");
  3628  001988  0E5A               	movlw	low STR_27
  3629  00198A  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3630  00198C  0E62               	movlw	high STR_27
  3631  00198E  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3632  001990  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  3633                           
  3634                           ;main.c: 419: posicao_cursor_lcd(2,6);
  3635  001994  0E06               	movlw	6
  3636  001996  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3637  001998  0E02               	movlw	2
  3638  00199A  EC9A  F028         	call	_posicao_cursor_lcd
  3639                           
  3640                           ;main.c: 420: escreve_frase_ram_lcd(fix());
  3641  00199E  EC6E  F02F         	call	_fix	;wreg free
  3642  0019A2  C019  F01C         	movff	?_fix,escreve_frase_ram_lcd@buffer
  3643  0019A6  C01A  F01D         	movff	?_fix+1,escreve_frase_ram_lcd@buffer+1
  3644  0019AA  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  3645  0019AE                     l14047:
  3646                           
  3647                           ;main.c: 421: };main.c: 422: last_state = 1;
  3648  0019AE  0E01               	movlw	1
  3649  0019B0  6E3C               	movwf	troca_de_tela@last_state^0,c
  3650  0019B2                     l14049:
  3651                           
  3652                           ;main.c: 424: };main.c: 427: if(!PORTEbits.RE1 && !fence_flag[2].point || (state == 2))
  3653  0019B2  B284               	btfsc	132,1,c	;volatile
  3654  0019B4  D002               	goto	u15440
  3655  0019B6  A034               	btfss	(_fence_flag+2)^0,0,c
  3656  0019B8  D004               	goto	u15450
  3657  0019BA                     u15440:
  3658  0019BA  0E02               	movlw	2
  3659  0019BC  183D               	xorwf	troca_de_tela@state^0,w,c
  3660  0019BE  A4D8               	btfss	status,2,c
  3661  0019C0  D06D               	goto	l14093
  3662  0019C2                     u15450:
  3663                           
  3664                           ;main.c: 428: {;main.c: 429: if(!time_atualizacao)
  3665  0019C2  5035               	movf	_time_atualizacao^0,w,c
  3666  0019C4  1036               	iorwf	(_time_atualizacao+1)^0,w,c
  3667  0019C6  A4D8               	btfss	status,2,c
  3668  0019C8  D026               	goto	l14065
  3669                           
  3670                           ;main.c: 430: {;main.c: 431: point_buff_gps_lat = Latitude();
  3671  0019CA  EC69  F02F         	call	_Latitude	;wreg free
  3672  0019CE  C019  F122         	movff	?_Latitude,_point_buff_gps_lat
  3673  0019D2  C01A  F123         	movff	?_Latitude+1,_point_buff_gps_lat+1
  3674                           
  3675                           ;main.c: 432: point_buff_gps_long = Longitude();
  3676  0019D6  EC64  F02F         	call	_Longitude	;wreg free
  3677  0019DA  C019  F120         	movff	?_Longitude,_point_buff_gps_long
  3678  0019DE  C01A  F121         	movff	?_Longitude+1,_point_buff_gps_long+1
  3679                           
  3680                           ;main.c: 433: posicao_cursor_lcd(1,4);
  3681  0019E2  0E04               	movlw	4
  3682  0019E4  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3683  0019E6  0E01               	movlw	1
  3684  0019E8  EC9A  F028         	call	_posicao_cursor_lcd
  3685                           
  3686                           ;main.c: 434: escreve_frase_ram_lcd(point_buff_gps_lat);
  3687  0019EC  C122  F01C         	movff	_point_buff_gps_lat,escreve_frase_ram_lcd@buffer
  3688  0019F0  C123  F01D         	movff	_point_buff_gps_lat+1,escreve_frase_ram_lcd@buffer+1
  3689  0019F4  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  3690                           
  3691                           ;main.c: 435: posicao_cursor_lcd(2,4);
  3692  0019F8  0E04               	movlw	4
  3693  0019FA  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3694  0019FC  0E02               	movlw	2
  3695  0019FE  EC9A  F028         	call	_posicao_cursor_lcd
  3696                           
  3697                           ;main.c: 436: escreve_frase_ram_lcd(point_buff_gps_long);
  3698  001A02  C120  F01C         	movff	_point_buff_gps_long,escreve_frase_ram_lcd@buffer
  3699  001A06  C121  F01D         	movff	_point_buff_gps_long+1,escreve_frase_ram_lcd@buffer+1
  3700  001A0A  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  3701                           
  3702                           ;main.c: 437: time_atualizacao = 2000;
  3703  001A0E  0E07               	movlw	7
  3704  001A10  6E36               	movwf	(_time_atualizacao+1)^0,c
  3705  001A12  0ED0               	movlw	208
  3706  001A14  6E35               	movwf	_time_atualizacao^0,c
  3707  001A16                     l14065:
  3708                           
  3709                           ;main.c: 438: };main.c: 441: if(last_state != 2)
  3710  001A16  0E02               	movlw	2
  3711  001A18  183C               	xorwf	troca_de_tela@last_state^0,w,c
  3712  001A1A  B4D8               	btfsc	status,2,c
  3713  001A1C  D03D               	goto	l14091
  3714                           
  3715                           ;main.c: 442: {;main.c: 443: state = 2;
  3716  001A1E  0E02               	movlw	2
  3717  001A20  6E3D               	movwf	troca_de_tela@state^0,c
  3718                           
  3719                           ;main.c: 444: escreve_cmd_lcd(0b00000001);
  3720  001A22  0E01               	movlw	1
  3721  001A24  EC42  F026         	call	_escreve_cmd_lcd
  3722                           
  3723                           ;main.c: 445: point_buff_gps_lat = Latitude();
  3724  001A28  EC69  F02F         	call	_Latitude	;wreg free
  3725  001A2C  C019  F122         	movff	?_Latitude,_point_buff_gps_lat
  3726  001A30  C01A  F123         	movff	?_Latitude+1,_point_buff_gps_lat+1
  3727                           
  3728                           ;main.c: 446: point_buff_gps_long = Longitude();
  3729  001A34  EC64  F02F         	call	_Longitude	;wreg free
  3730  001A38  C019  F120         	movff	?_Longitude,_point_buff_gps_long
  3731  001A3C  C01A  F121         	movff	?_Longitude+1,_point_buff_gps_long+1
  3732                           
  3733                           ;main.c: 447: posicao_cursor_lcd(1,0);
  3734  001A40  0E00               	movlw	0
  3735  001A42  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3736  001A44  0E01               	movlw	1
  3737  001A46  EC9A  F028         	call	_posicao_cursor_lcd
  3738                           
  3739                           ;main.c: 448: escreve_frase_ram_lcd("lt:");
  3740  001A4A  0E72               	movlw	low STR_28
  3741  001A4C  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3742  001A4E  0E62               	movlw	high STR_28
  3743  001A50  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3744  001A52  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  3745                           
  3746                           ;main.c: 449: posicao_cursor_lcd(1,4);
  3747  001A56  0E04               	movlw	4
  3748  001A58  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3749  001A5A  0E01               	movlw	1
  3750  001A5C  EC9A  F028         	call	_posicao_cursor_lcd
  3751                           
  3752                           ;main.c: 450: escreve_frase_ram_lcd(point_buff_gps_lat);
  3753  001A60  C122  F01C         	movff	_point_buff_gps_lat,escreve_frase_ram_lcd@buffer
  3754  001A64  C123  F01D         	movff	_point_buff_gps_lat+1,escreve_frase_ram_lcd@buffer+1
  3755  001A68  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  3756                           
  3757                           ;main.c: 451: posicao_cursor_lcd(2,0);
  3758  001A6C  0E00               	movlw	0
  3759  001A6E  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3760  001A70  0E02               	movlw	2
  3761  001A72  EC9A  F028         	call	_posicao_cursor_lcd
  3762                           
  3763                           ;main.c: 452: escreve_frase_ram_lcd("lo:");
  3764  001A76  0E6E               	movlw	low STR_29
  3765  001A78  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3766  001A7A  0E62               	movlw	high STR_29
  3767  001A7C  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3768  001A7E  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  3769                           
  3770                           ;main.c: 453: posicao_cursor_lcd(2,4);
  3771  001A82  0E04               	movlw	4
  3772  001A84  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3773  001A86  0E02               	movlw	2
  3774  001A88  EC9A  F028         	call	_posicao_cursor_lcd
  3775                           
  3776                           ;main.c: 454: escreve_frase_ram_lcd(point_buff_gps_long);
  3777  001A8C  C120  F01C         	movff	_point_buff_gps_long,escreve_frase_ram_lcd@buffer
  3778  001A90  C121  F01D         	movff	_point_buff_gps_long+1,escreve_frase_ram_lcd@buffer+1
  3779  001A94  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  3780  001A98                     l14091:
  3781                           
  3782                           ;main.c: 455: };main.c: 456: last_state = 2;
  3783  001A98  0E02               	movlw	2
  3784  001A9A  6E3C               	movwf	troca_de_tela@last_state^0,c
  3785  001A9C                     l14093:
  3786                           
  3787                           ;main.c: 457: };main.c: 472: if(!state && !fence_flag[2].point)
  3788  001A9C  503D               	movf	troca_de_tela@state^0,w,c
  3789  001A9E  A4D8               	btfss	status,2,c
  3790  001AA0  0012               	return	
  3791  001AA2  B034               	btfsc	(_fence_flag+2)^0,0,c
  3792  001AA4  0012               	return	
  3793                           
  3794                           ;main.c: 473: {;main.c: 474: if(last_state != 4)
  3795  001AA6  0E04               	movlw	4
  3796  001AA8  183C               	xorwf	troca_de_tela@last_state^0,w,c
  3797  001AAA  B4D8               	btfsc	status,2,c
  3798  001AAC  D00E               	goto	l14103
  3799                           
  3800                           ;main.c: 475: {;main.c: 476: escreve_cmd_lcd(0b00000001);
  3801  001AAE  0E01               	movlw	1
  3802  001AB0  EC42  F026         	call	_escreve_cmd_lcd
  3803                           
  3804                           ;main.c: 477: posicao_cursor_lcd(1,0);
  3805  001AB4  0E00               	movlw	0
  3806  001AB6  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3807  001AB8  0E01               	movlw	1
  3808  001ABA  EC9A  F028         	call	_posicao_cursor_lcd
  3809                           
  3810                           ;main.c: 478: escreve_frase_ram_lcd("B1:RPM  B2:FENCE");
  3811  001ABE  0E5E               	movlw	low STR_30
  3812  001AC0  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3813  001AC2  0E61               	movlw	high STR_30
  3814  001AC4  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3815  001AC6  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  3816  001ACA                     l14103:
  3817                           
  3818                           ;main.c: 480: };main.c: 481: last_state = 4;
  3819  001ACA  0E04               	movlw	4
  3820  001ACC  6E3C               	movwf	troca_de_tela@last_state^0,c
  3821  001ACE  0012               	return	
  3822  001AD0                     l1476:
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;main.c: 486: if(fence_flag[2].point || state == 3)
  3826  001AD0  B034               	btfsc	(_fence_flag+2)^0,0,c
  3827  001AD2  D004               	goto	u15520
  3828                           
  3829                           ; BSR set to: 0
  3830  001AD4  0E03               	movlw	3
  3831  001AD6  183D               	xorwf	troca_de_tela@state^0,w,c
  3832  001AD8  A4D8               	btfss	status,2,c
  3833  001ADA  0012               	return	
  3834  001ADC                     u15520:
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;main.c: 487: {;main.c: 489: if(!time_atualizacao)
  3838  001ADC  5035               	movf	_time_atualizacao^0,w,c
  3839  001ADE  1036               	iorwf	(_time_atualizacao+1)^0,w,c
  3840  001AE0  A4D8               	btfss	status,2,c
  3841  001AE2  D024               	goto	l14117
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;main.c: 490: {;main.c: 491: posicao_cursor_lcd(2,7);
  3845  001AE4  0E07               	movlw	7
  3846  001AE6  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3847  001AE8  0E02               	movlw	2
  3848  001AEA  EC9A  F028         	call	_posicao_cursor_lcd
  3849                           
  3850                           ;main.c: 492: escreve_inteiro_lcd(fence_flag[0].point);
  3851  001AEE  A032               	btfss	_fence_flag^0,0,c
  3852  001AF0  D003               	goto	u15540
  3853  001AF2  6A30               	clrf	??_troca_de_tela^0,c
  3854  001AF4  2A30               	incf	??_troca_de_tela^0,f,c
  3855  001AF6  D001               	goto	u15548
  3856  001AF8                     u15540:
  3857  001AF8  6A30               	clrf	??_troca_de_tela^0,c
  3858  001AFA                     u15548:
  3859  001AFA  5030               	movf	??_troca_de_tela^0,w,c
  3860  001AFC  6E2E               	movwf	escreve_inteiro_lcd@valor^0,c
  3861  001AFE  6A2F               	clrf	(escreve_inteiro_lcd@valor+1)^0,c
  3862  001B00  EC26  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3863                           
  3864                           ;main.c: 493: posicao_cursor_lcd(2,9);
  3865  001B04  0E09               	movlw	9
  3866  001B06  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3867  001B08  0E02               	movlw	2
  3868  001B0A  EC9A  F028         	call	_posicao_cursor_lcd
  3869                           
  3870                           ;main.c: 494: escreve_inteiro_lcd(fence_flag[1].point);
  3871  001B0E  A033               	btfss	(_fence_flag+1)^0,0,c
  3872  001B10  D003               	goto	u15550
  3873  001B12  6A30               	clrf	??_troca_de_tela^0,c
  3874  001B14  2A30               	incf	??_troca_de_tela^0,f,c
  3875  001B16  D001               	goto	u15558
  3876  001B18                     u15550:
  3877  001B18  6A30               	clrf	??_troca_de_tela^0,c
  3878  001B1A                     u15558:
  3879  001B1A  5030               	movf	??_troca_de_tela^0,w,c
  3880  001B1C  6E2E               	movwf	escreve_inteiro_lcd@valor^0,c
  3881  001B1E  6A2F               	clrf	(escreve_inteiro_lcd@valor+1)^0,c
  3882  001B20  EC26  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3883                           
  3884                           ;main.c: 495: time_atualizacao = 10000;
  3885  001B24  0E27               	movlw	39
  3886  001B26  6E36               	movwf	(_time_atualizacao+1)^0,c
  3887  001B28  0E10               	movlw	16
  3888  001B2A  6E35               	movwf	_time_atualizacao^0,c
  3889  001B2C                     l14117:
  3890                           
  3891                           ;main.c: 496: };main.c: 498: if(last_state != 3)
  3892  001B2C  0E03               	movlw	3
  3893  001B2E  183C               	xorwf	troca_de_tela@last_state^0,w,c
  3894  001B30  B4D8               	btfsc	status,2,c
  3895  001B32  D046               	goto	l14143
  3896                           
  3897                           ;main.c: 499: {;main.c: 500: state = 3;
  3898  001B34  0E03               	movlw	3
  3899  001B36  6E3D               	movwf	troca_de_tela@state^0,c
  3900                           
  3901                           ;main.c: 501: escreve_cmd_lcd(0b00000001);
  3902  001B38  0E01               	movlw	1
  3903  001B3A  EC42  F026         	call	_escreve_cmd_lcd
  3904                           
  3905                           ;main.c: 502: posicao_cursor_lcd(1,0);
  3906  001B3E  0E00               	movlw	0
  3907  001B40  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3908  001B42  0E01               	movlw	1
  3909  001B44  EC9A  F028         	call	_posicao_cursor_lcd
  3910                           
  3911                           ;main.c: 503: escreve_frase_ram_lcd("REGIAO NEGADA");
  3912  001B48  0ECF               	movlw	low STR_31
  3913  001B4A  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3914  001B4C  0E61               	movlw	high STR_31
  3915  001B4E  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3916  001B50  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  3917                           
  3918                           ;main.c: 504: posicao_cursor_lcd(2,0);
  3919  001B54  0E00               	movlw	0
  3920  001B56  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3921  001B58  0E02               	movlw	2
  3922  001B5A  EC9A  F028         	call	_posicao_cursor_lcd
  3923                           
  3924                           ;main.c: 505: escreve_frase_ram_lcd("LO-LT:");
  3925  001B5E  0E40               	movlw	low STR_32
  3926  001B60  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3927  001B62  0E62               	movlw	high STR_32
  3928  001B64  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3929  001B66  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  3930                           
  3931                           ;main.c: 506: posicao_cursor_lcd(2,7);
  3932  001B6A  0E07               	movlw	7
  3933  001B6C  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3934  001B6E  0E02               	movlw	2
  3935  001B70  EC9A  F028         	call	_posicao_cursor_lcd
  3936                           
  3937                           ;main.c: 507: escreve_inteiro_lcd(fence_flag[0].point);
  3938  001B74  A032               	btfss	_fence_flag^0,0,c
  3939  001B76  D003               	goto	u15570
  3940  001B78  6A30               	clrf	??_troca_de_tela^0,c
  3941  001B7A  2A30               	incf	??_troca_de_tela^0,f,c
  3942  001B7C  D001               	goto	u15578
  3943  001B7E                     u15570:
  3944  001B7E  6A30               	clrf	??_troca_de_tela^0,c
  3945  001B80                     u15578:
  3946  001B80  5030               	movf	??_troca_de_tela^0,w,c
  3947  001B82  6E2E               	movwf	escreve_inteiro_lcd@valor^0,c
  3948  001B84  6A2F               	clrf	(escreve_inteiro_lcd@valor+1)^0,c
  3949  001B86  EC26  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3950                           
  3951                           ;main.c: 508: posicao_cursor_lcd(2,8);
  3952  001B8A  0E08               	movlw	8
  3953  001B8C  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3954  001B8E  0E02               	movlw	2
  3955  001B90  EC9A  F028         	call	_posicao_cursor_lcd
  3956                           
  3957                           ;main.c: 509: escreve_frase_ram_lcd("-");
  3958  001B94  0E7D               	movlw	low STR_33
  3959  001B96  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3960  001B98  0E62               	movlw	high STR_33
  3961  001B9A  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3962  001B9C  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  3963                           
  3964                           ;main.c: 510: posicao_cursor_lcd(2,9);
  3965  001BA0  0E09               	movlw	9
  3966  001BA2  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3967  001BA4  0E02               	movlw	2
  3968  001BA6  EC9A  F028         	call	_posicao_cursor_lcd
  3969                           
  3970                           ;main.c: 511: escreve_inteiro_lcd(fence_flag[1].point);
  3971  001BAA  A033               	btfss	(_fence_flag+1)^0,0,c
  3972  001BAC  D003               	goto	u15580
  3973  001BAE  6A30               	clrf	??_troca_de_tela^0,c
  3974  001BB0  2A30               	incf	??_troca_de_tela^0,f,c
  3975  001BB2  D001               	goto	u15588
  3976  001BB4                     u15580:
  3977  001BB4  6A30               	clrf	??_troca_de_tela^0,c
  3978  001BB6                     u15588:
  3979  001BB6  5030               	movf	??_troca_de_tela^0,w,c
  3980  001BB8  6E2E               	movwf	escreve_inteiro_lcd@valor^0,c
  3981  001BBA  6A2F               	clrf	(escreve_inteiro_lcd@valor+1)^0,c
  3982  001BBC  EC26  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3983  001BC0                     l14143:
  3984                           
  3985                           ;main.c: 512: };main.c: 513: last_state = 3;
  3986  001BC0  0E03               	movlw	3
  3987  001BC2  6E3C               	movwf	troca_de_tela@last_state^0,c
  3988  001BC4  0012               	return	
  3989  001BC6                     l14147:
  3990                           
  3991                           ; BSR set to: 0
  3992  001BC6  A034               	btfss	(_fence_flag+2)^0,0,c
  3993  001BC8  D002               	goto	u15590
  3994  001BCA  0E01               	movlw	1
  3995  001BCC  D001               	goto	u15596
  3996  001BCE                     u15590:
  3997  001BCE  0E00               	movlw	0
  3998  001BD0                     u15596:
  3999                           
  4000                           ; Switch size 1, requested type "simple"
  4001                           ; Number of cases is 1, Range of values is 0 to 0
  4002                           ; switch strategies available:
  4003                           ; Name         Instructions Cycles
  4004                           ; simple_byte            4     3 (average)
  4005                           ;	Chosen strategy is simple_byte
  4006  001BD0  0A00               	xorlw	0	; case 0
  4007  001BD2  B4D8               	btfsc	status,2,c
  4008  001BD4  D6A5               	goto	l1458
  4009  001BD6  D77C               	goto	l1476
  4010  001BD8                     __end_of_troca_de_tela:
  4011                           	callstack 0
  4012                           
  4013 ;; *************** function _disparo_gravacao *****************
  4014 ;; Defined at:
  4015 ;;		line 350 in file "main.c"
  4016 ;; Parameters:    Size  Location     Type
  4017 ;;		None
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;  fix_gps         2  146[BANK0 ] PTR unsigned char 
  4020 ;;		 -> rawFix(2), 
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  1    wreg      void 
  4023 ;; Registers used:
  4024 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4025 ;; Tracked objects:
  4026 ;;		On entry : 3F/0
  4027 ;;		On exit  : 3F/1
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4030 ;;      Params:         0       0       0       0       0       0       0       0       0
  4031 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4032 ;;      Temps:          0       1       0       0       0       0       0       0       0
  4033 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4034 ;;Total ram usage:        3 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:   16
  4037 ;; This function calls:
  4038 ;;		_MCP2515_INIT
  4039 ;;		_escrita_sdcard
  4040 ;;		_fix
  4041 ;;		_recebe_dados_gps
  4042 ;;		_verifica_fence_externo
  4043 ;; This function is called by:
  4044 ;;		_inicializa_tarefas
  4045 ;;		_escalonador
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           	psect	text13
  4050  0054DC                     __ptext13:
  4051                           	callstack 0
  4052  0054DC                     _disparo_gravacao:
  4053                           	callstack 13
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;main.c: 352: unsigned char *fix_gps;;main.c: 356: if(!time_sd)
  4057                           
  4058                           ;incstack = 0
  4059  0054DC  0101               	movlb	1	; () banked
  4060  0054DE  5126               	movf	_time_sd& (0+255),w,b
  4061  0054E0  1127               	iorwf	(_time_sd+1)& (0+255),w,b
  4062  0054E2  A4D8               	btfss	status,2,c
  4063  0054E4  0012               	return	
  4064                           
  4065                           ; BSR set to: 1
  4066                           ;main.c: 357: {;main.c: 358: sinaliza_mcp2515.trigger = 0;
  4067  0054E6  9041               	bcf	_sinaliza_mcp2515^0,0,c
  4068                           
  4069                           ; BSR set to: 1
  4070                           ;main.c: 359: recebe_dados_gps();
  4071  0054E8  EC3E  F02D         	call	_recebe_dados_gps	;wreg free
  4072                           
  4073                           ;main.c: 360: fix_gps = fix();
  4074  0054EC  EC6E  F02F         	call	_fix	;wreg free
  4075  0054F0  C019  F0F2         	movff	?_fix,disparo_gravacao@fix_gps
  4076  0054F4  C01A  F0F3         	movff	?_fix+1,disparo_gravacao@fix_gps+1
  4077                           
  4078                           ;main.c: 361: if(fix_gps[0] == '1')
  4079  0054F8  C0F2  FFD9         	movff	disparo_gravacao@fix_gps,fsr2l
  4080  0054FC  C0F3  FFDA         	movff	disparo_gravacao@fix_gps+1,fsr2h
  4081  005500  0E31               	movlw	49
  4082  005502  18DE               	xorwf	postinc2,w,c
  4083  005504  A4D8               	btfss	status,2,c
  4084  005506  D007               	goto	l14009
  4085                           
  4086                           ;main.c: 362: {;main.c: 363: verifica_fence_externo();
  4087  005508  ECCD  F026         	call	_verifica_fence_externo	;wreg free
  4088                           
  4089                           ;main.c: 364: escrita_sdcard();
  4090  00550C  EC73  F01D         	call	_escrita_sdcard	;wreg free
  4091                           
  4092                           ;main.c: 365: MCP2515_INIT();
  4093  005510  EC91  F02E         	call	_MCP2515_INIT	;wreg free
  4094                           
  4095                           ;main.c: 366: }
  4096  005514  D002               	goto	l14011
  4097  005516                     l14009:
  4098                           
  4099                           ;main.c: 367: else;main.c: 368: {;main.c: 369: verifica_fence_externo();
  4100  005516  ECCD  F026         	call	_verifica_fence_externo	;wreg free
  4101  00551A                     l14011:
  4102                           
  4103                           ;main.c: 370: };main.c: 373: time_sd = 22000;
  4104  00551A  0E55               	movlw	85
  4105  00551C  0101               	movlb	1	; () banked
  4106  00551E  6F27               	movwf	(_time_sd+1)& (0+255),b
  4107  005520  0EF0               	movlw	240
  4108  005522  6F26               	movwf	_time_sd& (0+255),b
  4109                           
  4110                           ; BSR set to: 1
  4111                           ;main.c: 374: sinaliza_mcp2515.trigger = 1;
  4112  005524  8041               	bsf	_sinaliza_mcp2515^0,0,c
  4113                           
  4114                           ; BSR set to: 1
  4115  005526  0012               	return		;funcret
  4116  005528                     __end_of_disparo_gravacao:
  4117                           	callstack 0
  4118                           
  4119 ;; *************** function _verifica_dados_operacionais *****************
  4120 ;; Defined at:
  4121 ;;		line 321 in file "main.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;		None
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;  rpm             4   19[BANK0 ] unsigned char [4]
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  1    wreg      void 
  4128 ;; Registers used:
  4129 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4130 ;; Tracked objects:
  4131 ;;		On entry : 3F/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4135 ;;      Params:         0       0       0       0       0       0       0       0       0
  4136 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4137 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4138 ;;      Totals:         0       4       0       0       0       0       0       0       0
  4139 ;;Total ram usage:        4 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:   10
  4142 ;; This function calls:
  4143 ;;		_MCP2515_RECEBE
  4144 ;;		_desliga_uart
  4145 ;; This function is called by:
  4146 ;;		_inicializa_tarefas
  4147 ;;		_escalonador
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           	psect	text14
  4152  005A54                     __ptext14:
  4153                           	callstack 0
  4154  005A54                     _verifica_dados_operacionais:
  4155                           	callstack 19
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;main.c: 323: unsigned char rpm[4];;main.c: 327: if(sinaliza_mcp2515.trigger)
  4159                           
  4160                           ; BSR set to: 1
  4161                           ;incstack = 0
  4162  005A54  A041               	btfss	_sinaliza_mcp2515^0,0,c
  4163  005A56  0012               	return	
  4164                           
  4165                           ; BSR set to: 0
  4166                           ;main.c: 328: {;main.c: 329: desliga_uart();
  4167  005A58  EC39  F02F         	call	_desliga_uart	;wreg free
  4168                           
  4169                           ;main.c: 330: flag_anomalia = 0;
  4170  005A5C  0E00               	movlw	0
  4171  005A5E  0100               	movlb	0	; () banked
  4172  005A60  6FF9               	movwf	_flag_anomalia& (0+255),b
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;main.c: 331: MCP2515_RECEBE(0x30, 4, rpm);
  4176  005A62  0E30               	movlw	48
  4177  005A64  6F6D               	movwf	MCP2515_RECEBE@id& (0+255),b
  4178  005A66  0E00               	movlw	0
  4179  005A68  6F6E               	movwf	(MCP2515_RECEBE@id+1)& (0+255),b
  4180  005A6A  0E04               	movlw	4
  4181  005A6C  6F6F               	movwf	MCP2515_RECEBE@len& (0+255),b
  4182  005A6E  0E00               	movlw	0
  4183  005A70  6F70               	movwf	(MCP2515_RECEBE@len+1)& (0+255),b
  4184  005A72  0E73               	movlw	low verifica_dados_operacionais@rpm
  4185  005A74  6F71               	movwf	MCP2515_RECEBE@buf& (0+255),b
  4186  005A76  EC20  F02A         	call	_MCP2515_RECEBE	;wreg free
  4187  005A7A  0012               	return		;funcret
  4188  005A7C                     __end_of_verifica_dados_operacionais:
  4189                           	callstack 0
  4190                           
  4191 ;; *************** function _MCP2515_RECEBE *****************
  4192 ;; Defined at:
  4193 ;;		line 1281 in file "MCP2515.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;  id              2   13[BANK0 ] PTR unsigned long 
  4196 ;;		 -> RAM(2047), 
  4197 ;;  len             2   15[BANK0 ] PTR unsigned char 
  4198 ;;		 -> RAM(2047), 
  4199 ;;  buf             1   17[BANK0 ] PTR unsigned char 
  4200 ;;		 -> verifica_dados_operacionais@rpm(4), 
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;		None
  4203 ;; Return value:  Size  Location     Type
  4204 ;;                  1    wreg      unsigned char 
  4205 ;; Registers used:
  4206 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4207 ;; Tracked objects:
  4208 ;;		On entry : 3F/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4212 ;;      Params:         0       5       0       0       0       0       0       0       0
  4213 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4214 ;;      Temps:          0       1       0       0       0       0       0       0       0
  4215 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4216 ;;Total ram usage:        6 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; Hardware stack levels required when called:    9
  4219 ;; This function calls:
  4220 ;;		_readMsgBuf
  4221 ;; This function is called by:
  4222 ;;		_verifica_dados_operacionais
  4223 ;; This function uses a non-reentrant model
  4224 ;;
  4225                           
  4226                           	psect	text15
  4227  005440                     __ptext15:
  4228                           	callstack 0
  4229  005440                     _MCP2515_RECEBE:
  4230                           	callstack 19
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;MCP2515.c: 1283:     if(&id > 0x10) *id = 0x10;
  4234                           
  4235                           ;incstack = 0
  4236  005440  0E6D               	movlw	MCP2515_RECEBE@id& (0+255)
  4237  005442  6F72               	movwf	??_MCP2515_RECEBE& (0+255),b
  4238  005444  0E10               	movlw	16
  4239  005446  6572               	cpfsgt	??_MCP2515_RECEBE& (0+255),b
  4240  005448  D00C               	goto	l13909
  4241                           
  4242                           ; BSR set to: 0
  4243  00544A  C06D  FFD9         	movff	MCP2515_RECEBE@id,fsr2l
  4244  00544E  C06E  FFDA         	movff	MCP2515_RECEBE@id+1,fsr2h
  4245  005452  0E10               	movlw	16
  4246  005454  6EDE               	movwf	postinc2,c
  4247  005456  0E00               	movlw	0
  4248  005458  6EDE               	movwf	postinc2,c
  4249  00545A  0E00               	movlw	0
  4250  00545C  6EDE               	movwf	postinc2,c
  4251  00545E  0E00               	movlw	0
  4252  005460  6EDD               	movwf	postdec2,c
  4253  005462                     l13909:
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;MCP2515.c: 1284:     if(&len > 1) len = 1;
  4257  005462  0E6F               	movlw	MCP2515_RECEBE@len& (0+255)
  4258  005464  6F72               	movwf	??_MCP2515_RECEBE& (0+255),b
  4259  005466  0E01               	movlw	1
  4260  005468  6572               	cpfsgt	??_MCP2515_RECEBE& (0+255),b
  4261  00546A  D004               	goto	l13913
  4262                           
  4263                           ; BSR set to: 0
  4264  00546C  0E01               	movlw	1
  4265  00546E  6F6F               	movwf	MCP2515_RECEBE@len& (0+255),b
  4266  005470  0E00               	movlw	0
  4267  005472  6F70               	movwf	(MCP2515_RECEBE@len+1)& (0+255),b
  4268  005474                     l13913:
  4269                           
  4270                           ; BSR set to: 0
  4271                           ;MCP2515.c: 1286:     return readMsgBuf(id, len, buf);;	Return value of _MCP2515_RECEBE 
      +                          is never used
  4272  005474  C06D  F063         	movff	MCP2515_RECEBE@id,readMsgBuf@id
  4273  005478  C06E  F064         	movff	MCP2515_RECEBE@id+1,readMsgBuf@id+1
  4274  00547C  C06F  F065         	movff	MCP2515_RECEBE@len,readMsgBuf@len
  4275  005480  C070  F066         	movff	MCP2515_RECEBE@len+1,readMsgBuf@len+1
  4276  005484  C071  F067         	movff	MCP2515_RECEBE@buf,readMsgBuf@buf
  4277  005488  ECFC  F025         	call	_readMsgBuf	;wreg free
  4278  00548C  0012               	return		;funcret
  4279  00548E                     __end_of_MCP2515_RECEBE:
  4280                           	callstack 0
  4281                           
  4282 ;; *************** function _readMsgBuf *****************
  4283 ;; Defined at:
  4284 ;;		line 1123 in file "MCP2515.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  id              2    3[BANK0 ] PTR unsigned long 
  4287 ;;		 -> RAM(2047), 
  4288 ;;  len             2    5[BANK0 ] PTR unsigned char 
  4289 ;;		 -> RAM(2047), 
  4290 ;;  buf             1    7[BANK0 ] PTR unsigned char 
  4291 ;;		 -> verifica_dados_operacionais@rpm(4), 
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;  i               2   11[BANK0 ] int 
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  1    wreg      unsigned char 
  4296 ;; Registers used:
  4297 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4298 ;; Tracked objects:
  4299 ;;		On entry : 3F/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4303 ;;      Params:         0       5       0       0       0       0       0       0       0
  4304 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4305 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4306 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4307 ;;Total ram usage:       10 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    8
  4310 ;; This function calls:
  4311 ;;		_readMsg
  4312 ;; This function is called by:
  4313 ;;		_MCP2515_RECEBE
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           	psect	text16
  4318  004BF8                     __ptext16:
  4319                           	callstack 0
  4320  004BF8                     _readMsgBuf:
  4321                           	callstack 19
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;MCP2515.c: 1123: unsigned char readMsgBuf(unsigned long *id, unsigned char *len, unsign
      +                          ed char buf[]);MCP2515.c: 1124: {;MCP2515.c: 1125:     if(readMsg() == (4))
  4325                           
  4326                           ;incstack = 0
  4327  004BF8  EC24  F02B         	call	_readMsg	;wreg free
  4328  004BFC  0A04               	xorlw	4
  4329  004BFE  A4D8               	btfss	status,2,c
  4330  004C00  D002               	goto	l13765
  4331                           
  4332                           ;MCP2515.c: 1126:  return (4);
  4333  004C02  0E04               	movlw	4
  4334  004C04  0012               	return	
  4335  004C06                     l13765:
  4336                           
  4337                           ;MCP2515.c: 1128:     if (m_nExtFlg)
  4338  004C06  5046               	movf	_m_nExtFlg^0,w,c
  4339  004C08  B4D8               	btfsc	status,2,c
  4340  004C0A  D002               	goto	l13769
  4341                           
  4342                           ;MCP2515.c: 1129:         m_nID |= 0x80000000;
  4343  004C0C  0101               	movlb	1	; () banked
  4344  004C0E  8FF9               	bsf	(_m_nID+3)& (0+255),7,b
  4345  004C10                     l13769:
  4346                           
  4347                           ;MCP2515.c: 1131:     if (m_nRtr)
  4348  004C10  503A               	movf	_m_nRtr^0,w,c
  4349  004C12  B4D8               	btfsc	status,2,c
  4350  004C14  D002               	goto	l13773
  4351                           
  4352                           ;MCP2515.c: 1132:         m_nID |= 0x40000000;
  4353  004C16  0101               	movlb	1	; () banked
  4354  004C18  8DF9               	bsf	(_m_nID+3)& (0+255),6,b
  4355  004C1A                     l13773:
  4356                           
  4357                           ;MCP2515.c: 1137:     *id = m_nID;
  4358  004C1A  C063  FFD9         	movff	readMsgBuf@id,fsr2l
  4359  004C1E  C064  FFDA         	movff	readMsgBuf@id+1,fsr2h
  4360  004C22  C1F6  FFDE         	movff	_m_nID,postinc2
  4361  004C26  C1F7  FFDE         	movff	_m_nID+1,postinc2
  4362  004C2A  C1F8  FFDE         	movff	_m_nID+2,postinc2
  4363  004C2E  C1F9  FFDE         	movff	_m_nID+3,postinc2
  4364                           
  4365                           ;MCP2515.c: 1138:     *len = m_nDlc;
  4366  004C32  C065  FFD9         	movff	readMsgBuf@len,fsr2l
  4367  004C36  C066  FFDA         	movff	readMsgBuf@len+1,fsr2h
  4368  004C3A  C03B  FFDF         	movff	_m_nDlc,indf2
  4369                           
  4370                           ;MCP2515.c: 1140:     for(int i = 0; i<m_nDlc; i++)
  4371  004C3E  0E00               	movlw	0
  4372  004C40  0100               	movlb	0	; () banked
  4373  004C42  6F6C               	movwf	(readMsgBuf@i+1)& (0+255),b
  4374  004C44  0E00               	movlw	0
  4375  004C46  6F6B               	movwf	readMsgBuf@i& (0+255),b
  4376  004C48  D00E               	goto	l13783
  4377  004C4A                     l13779:
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;MCP2515.c: 1141:         buf[i] = m_nDta[i];
  4381  004C4A  0EE1               	movlw	low _m_nDta
  4382  004C4C  256B               	addwf	readMsgBuf@i& (0+255),w,b
  4383  004C4E  6ED9               	movwf	fsr2l,c
  4384  004C50  0E01               	movlw	high _m_nDta
  4385  004C52  216C               	addwfc	(readMsgBuf@i+1)& (0+255),w,b
  4386  004C54  6EDA               	movwf	fsr2h,c
  4387  004C56  5167               	movf	readMsgBuf@buf& (0+255),w,b
  4388  004C58  256B               	addwf	readMsgBuf@i& (0+255),w,b
  4389  004C5A  6EE1               	movwf	fsr1l,c
  4390  004C5C  6AE2               	clrf	fsr1h,c
  4391  004C5E  CFDF FFE7          	movff	indf2,indf1
  4392                           
  4393                           ; BSR set to: 0
  4394  004C62  4B6B               	infsnz	readMsgBuf@i& (0+255),f,b
  4395  004C64  2B6C               	incf	(readMsgBuf@i+1)& (0+255),f,b
  4396  004C66                     l13783:
  4397                           
  4398                           ; BSR set to: 0
  4399  004C66  503B               	movf	_m_nDlc^0,w,c
  4400  004C68  6F68               	movwf	??_readMsgBuf& (0+255),b
  4401  004C6A  6B69               	clrf	(??_readMsgBuf+1)& (0+255),b
  4402  004C6C  5168               	movf	??_readMsgBuf& (0+255),w,b
  4403  004C6E  5D6B               	subwf	readMsgBuf@i& (0+255),w,b
  4404  004C70  516C               	movf	(readMsgBuf@i+1)& (0+255),w,b
  4405  004C72  0A80               	xorlw	128
  4406  004C74  6F6A               	movwf	(??_readMsgBuf+2)& (0+255),b
  4407  004C76  5169               	movf	(??_readMsgBuf+1)& (0+255),w,b
  4408  004C78  0A80               	xorlw	128
  4409  004C7A  596A               	subwfb	(??_readMsgBuf+2)& (0+255),w,b
  4410  004C7C  A0D8               	btfss	status,0,c
  4411  004C7E  D7E5               	goto	l13779
  4412                           
  4413                           ; BSR set to: 0
  4414                           ;MCP2515.c: 1143:     return (0);
  4415  004C80  0E00               	movlw	0
  4416  004C82  0012               	return		;funcret
  4417  004C84                     __end_of_readMsgBuf:
  4418                           	callstack 0
  4419                           
  4420 ;; *************** function _readMsg *****************
  4421 ;; Defined at:
  4422 ;;		line 1077 in file "MCP2515.c"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;		None
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;  stat            1   48[COMRAM] unsigned char 
  4427 ;;  res             1   47[COMRAM] unsigned char 
  4428 ;; Return value:  Size  Location     Type
  4429 ;;                  1    wreg      unsigned char 
  4430 ;; Registers used:
  4431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4432 ;; Tracked objects:
  4433 ;;		On entry : 3F/0
  4434 ;;		On exit  : 0/0
  4435 ;;		Unchanged: 0/0
  4436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4437 ;;      Params:         0       0       0       0       0       0       0       0       0
  4438 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4439 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4440 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4441 ;;Total ram usage:        2 bytes
  4442 ;; Hardware stack levels used:    1
  4443 ;; Hardware stack levels required when called:    7
  4444 ;; This function calls:
  4445 ;;		_mcp2515_modifyRegister
  4446 ;;		_mcp2515_readStatus
  4447 ;;		_mcp2515_read_canMsg
  4448 ;; This function is called by:
  4449 ;;		_readMsgBuf
  4450 ;; This function uses a non-reentrant model
  4451 ;;
  4452                           
  4453                           	psect	text17
  4454  005648                     __ptext17:
  4455                           	callstack 0
  4456  005648                     _readMsg:
  4457                           	callstack 19
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;MCP2515.c: 1079:     unsigned char stat, res;;MCP2515.c: 1081:     stat = mcp2515_readS
      +                          tatus();
  4461                           
  4462                           ;incstack = 0
  4463  005648  ECEC  F02E         	call	_mcp2515_readStatus	;wreg free
  4464  00564C  6E31               	movwf	readMsg@stat^0,c
  4465                           
  4466                           ;MCP2515.c: 1083:     if ( stat & (1<<0) )
  4467  00564E  A031               	btfss	readMsg@stat^0,0,c
  4468  005650  D00C               	goto	l1939
  4469                           
  4470                           ;MCP2515.c: 1084:     {;MCP2515.c: 1085:         mcp2515_read_canMsg( (0x61));
  4471  005652  0E61               	movlw	97
  4472  005654  ECC9  F028         	call	_mcp2515_read_canMsg
  4473                           
  4474                           ;MCP2515.c: 1086:         mcp2515_modifyRegister(0x2C, 0x01, 0);
  4475  005658  0E01               	movlw	1
  4476  00565A  6E1A               	movwf	mcp2515_modifyRegister@mask^0,c
  4477  00565C  0E00               	movlw	0
  4478  00565E  6E1B               	movwf	mcp2515_modifyRegister@data^0,c
  4479  005660  0E2C               	movlw	44
  4480  005662  EC46  F02E         	call	_mcp2515_modifyRegister
  4481  005666                     l13207:
  4482                           
  4483                           ;MCP2515.c: 1087:         res = (0);
  4484  005666  0E00               	movlw	0
  4485  005668  D00E               	goto	L1
  4486  00566A                     l1939:
  4487  00566A  A231               	btfss	readMsg@stat^0,1,c
  4488  00566C  D00B               	goto	l13215
  4489                           
  4490                           ;MCP2515.c: 1090:     {;MCP2515.c: 1091:         mcp2515_read_canMsg( (0x71));
  4491  00566E  0E71               	movlw	113
  4492  005670  ECC9  F028         	call	_mcp2515_read_canMsg
  4493                           
  4494                           ;MCP2515.c: 1092:         mcp2515_modifyRegister(0x2C, 0x02, 0);
  4495  005674  0E02               	movlw	2
  4496  005676  6E1A               	movwf	mcp2515_modifyRegister@mask^0,c
  4497  005678  0E00               	movlw	0
  4498  00567A  6E1B               	movwf	mcp2515_modifyRegister@data^0,c
  4499  00567C  0E2C               	movlw	44
  4500  00567E  EC46  F02E         	call	_mcp2515_modifyRegister
  4501  005682  D7F1               	goto	l13207
  4502  005684                     l13215:
  4503                           
  4504                           ;MCP2515.c: 1096:         res = (4);
  4505  005684  0E04               	movlw	4
  4506  005686                     L1:
  4507  005686  6E30               	movwf	readMsg@res^0,c
  4508                           
  4509                           ;MCP2515.c: 1098:     return res;
  4510  005688  5030               	movf	readMsg@res^0,w,c
  4511  00568A  0012               	return		;funcret
  4512  00568C                     __end_of_readMsg:
  4513                           	callstack 0
  4514                           
  4515 ;; *************** function _mcp2515_read_canMsg *****************
  4516 ;; Defined at:
  4517 ;;		line 689 in file "MCP2515.c"
  4518 ;; Parameters:    Size  Location     Type
  4519 ;;  buffer_sidh_    1    wreg     unsigned char 
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;  buffer_sidh_    1    0[BANK0 ] unsigned char 
  4522 ;;  mcp_addr        1    2[BANK0 ] unsigned char 
  4523 ;;  ctrl            1    1[BANK0 ] unsigned char 
  4524 ;; Return value:  Size  Location     Type
  4525 ;;                  1    wreg      void 
  4526 ;; Registers used:
  4527 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4528 ;; Tracked objects:
  4529 ;;		On entry : 0/0
  4530 ;;		On exit  : 0/0
  4531 ;;		Unchanged: 0/0
  4532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4533 ;;      Params:         0       0       0       0       0       0       0       0       0
  4534 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4535 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4536 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4537 ;;Total ram usage:        3 bytes
  4538 ;; Hardware stack levels used:    1
  4539 ;; Hardware stack levels required when called:    6
  4540 ;; This function calls:
  4541 ;;		_mcp2515_readRegister
  4542 ;;		_mcp2515_readRegisterS
  4543 ;;		_mcp2515_read_id
  4544 ;; This function is called by:
  4545 ;;		_readMsg
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549                           	psect	text18
  4550  005192                     __ptext18:
  4551                           	callstack 0
  4552  005192                     _mcp2515_read_canMsg:
  4553                           	callstack 19
  4554                           
  4555                           ;incstack = 0
  4556                           ;mcp2515_read_canMsg@buffer_sidh_addr stored from wreg
  4557  005192  0100               	movlb	0	; () banked
  4558  005194  6F60               	movwf	mcp2515_read_canMsg@buffer_sidh_addr& (0+255),b
  4559                           
  4560                           ;MCP2515.c: 689: void mcp2515_read_canMsg( unsigned char buffer_sidh_addr);MCP2515.c: 69
      +                          0: {;MCP2515.c: 691:     unsigned char mcp_addr, ctrl;;MCP2515.c: 693:     mcp_addr = bu
      +                          ffer_sidh_addr;
  4561  005196  C060  F062         	movff	mcp2515_read_canMsg@buffer_sidh_addr,mcp2515_read_canMsg@mcp_addr
  4562                           
  4563                           ;MCP2515.c: 695:     mcp2515_read_id( mcp_addr, &m_nExtFlg,&m_nID );
  4564  00519A  0E46               	movlw	low _m_nExtFlg
  4565  00519C  6E1F               	movwf	mcp2515_read_id@ext^0,c
  4566  00519E  0EF6               	movlw	low _m_nID
  4567  0051A0  6E20               	movwf	mcp2515_read_id@id^0,c
  4568  0051A2  0E01               	movlw	high _m_nID
  4569  0051A4  6E21               	movwf	(mcp2515_read_id@id+1)^0,c
  4570  0051A6  0100               	movlb	0	; () banked
  4571  0051A8  5162               	movf	mcp2515_read_canMsg@mcp_addr& (0+255),w,b
  4572  0051AA  EC2D  F019         	call	_mcp2515_read_id
  4573                           
  4574                           ;MCP2515.c: 697:     ctrl = mcp2515_readRegister( mcp_addr-1 );
  4575  0051AE  0100               	movlb	0	; () banked
  4576  0051B0  0562               	decf	mcp2515_read_canMsg@mcp_addr& (0+255),w,b
  4577  0051B2  EC74  F02E         	call	_mcp2515_readRegister
  4578  0051B6  0100               	movlb	0	; () banked
  4579  0051B8  6F61               	movwf	mcp2515_read_canMsg@ctrl& (0+255),b
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;MCP2515.c: 698:     m_nDlc = mcp2515_readRegister( mcp_addr+4 );
  4583  0051BA  5162               	movf	mcp2515_read_canMsg@mcp_addr& (0+255),w,b
  4584  0051BC  0F04               	addlw	4
  4585  0051BE  EC74  F02E         	call	_mcp2515_readRegister
  4586  0051C2  6E3B               	movwf	_m_nDlc^0,c
  4587                           
  4588                           ;MCP2515.c: 700:     if (ctrl & 0x08)
  4589  0051C4  0100               	movlb	0	; () banked
  4590  0051C6  A761               	btfss	mcp2515_read_canMsg@ctrl& (0+255),3,b
  4591  0051C8  D002               	goto	l12711
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;MCP2515.c: 701:         m_nRtr = 1;
  4595  0051CA  0E01               	movlw	1
  4596  0051CC  D001               	goto	L2
  4597  0051CE                     l12711:
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;MCP2515.c: 703:         m_nRtr = 0;
  4601  0051CE  0E00               	movlw	0
  4602  0051D0                     L2:
  4603  0051D0  6E3A               	movwf	_m_nRtr^0,c
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;MCP2515.c: 705:     m_nDlc &= 0x0F;
  4607  0051D2  0E0F               	movlw	15
  4608  0051D4  163B               	andwf	_m_nDlc^0,f,c
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;MCP2515.c: 706:     mcp2515_readRegisterS( mcp_addr+5, &(m_nDta[0]), m_nDlc );
  4612  0051D6  0EE1               	movlw	low _m_nDta
  4613  0051D8  6E1A               	movwf	mcp2515_readRegisterS@values^0,c
  4614  0051DA  0E01               	movlw	high _m_nDta
  4615  0051DC  6E1B               	movwf	(mcp2515_readRegisterS@values+1)^0,c
  4616  0051DE  C03B  F01C         	movff	_m_nDlc,mcp2515_readRegisterS@n
  4617  0051E2  5162               	movf	mcp2515_read_canMsg@mcp_addr& (0+255),w,b
  4618  0051E4  0F05               	addlw	5
  4619  0051E6  EC0A  F02C         	call	_mcp2515_readRegisterS
  4620  0051EA  0012               	return		;funcret
  4621  0051EC                     __end_of_mcp2515_read_canMsg:
  4622                           	callstack 0
  4623                           
  4624 ;; *************** function _mcp2515_read_id *****************
  4625 ;; Defined at:
  4626 ;;		line 646 in file "MCP2515.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;  mcp_addr        1    wreg     unsigned char 
  4629 ;;  ext             1   30[COMRAM] PTR unsigned char 
  4630 ;;		 -> m_nExtFlg(1), 
  4631 ;;  id              2   31[COMRAM] PTR unsigned long 
  4632 ;;		 -> m_nID(4), 
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;  mcp_addr        1   42[COMRAM] unsigned char 
  4635 ;;  tbufdata        4   43[COMRAM] unsigned char [4]
  4636 ;; Return value:  Size  Location     Type
  4637 ;;                  1    wreg      void 
  4638 ;; Registers used:
  4639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4640 ;; Tracked objects:
  4641 ;;		On entry : 3F/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4645 ;;      Params:         3       0       0       0       0       0       0       0       0
  4646 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4647 ;;      Temps:          9       0       0       0       0       0       0       0       0
  4648 ;;      Totals:        17       0       0       0       0       0       0       0       0
  4649 ;;Total ram usage:       17 bytes
  4650 ;; Hardware stack levels used:    1
  4651 ;; Hardware stack levels required when called:    5
  4652 ;; This function calls:
  4653 ;;		_mcp2515_readRegisterS
  4654 ;; This function is called by:
  4655 ;;		_mcp2515_read_canMsg
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           	psect	text19
  4660  00325A                     __ptext19:
  4661                           	callstack 0
  4662  00325A                     _mcp2515_read_id:
  4663                           	callstack 19
  4664                           
  4665                           ;incstack = 0
  4666                           ;mcp2515_read_id@mcp_addr stored from wreg
  4667  00325A  6E2B               	movwf	mcp2515_read_id@mcp_addr^0,c
  4668                           
  4669                           ;MCP2515.c: 646: void mcp2515_read_id( unsigned char mcp_addr, unsigned char* ext, unsig
      +                          ned long* id );MCP2515.c: 647: {;MCP2515.c: 648:     unsigned char tbufdata[4];;MCP2515.
      +                          c: 650:     *ext = 0;
  4670  00325C  501F               	movf	mcp2515_read_id@ext^0,w,c
  4671  00325E  6ED9               	movwf	fsr2l,c
  4672  003260  6ADA               	clrf	fsr2h,c
  4673  003262  0E00               	movlw	0
  4674  003264  6EDF               	movwf	indf2,c
  4675                           
  4676                           ;MCP2515.c: 651:     *id = 0;
  4677  003266  C020  FFD9         	movff	mcp2515_read_id@id,fsr2l
  4678  00326A  C021  FFDA         	movff	mcp2515_read_id@id+1,fsr2h
  4679  00326E  6ADE               	clrf	postinc2,c
  4680  003270  6ADE               	clrf	postinc2,c
  4681  003272  6ADE               	clrf	postinc2,c
  4682  003274  6ADD               	clrf	postdec2,c
  4683                           
  4684                           ;MCP2515.c: 653:     mcp2515_readRegisterS( mcp_addr, tbufdata, 4 );
  4685  003276  0E2C               	movlw	low mcp2515_read_id@tbufdata
  4686  003278  6E1A               	movwf	mcp2515_readRegisterS@values^0,c
  4687  00327A  6A1B               	clrf	(mcp2515_readRegisterS@values+1)^0,c
  4688  00327C  0E04               	movlw	4
  4689  00327E  6E1C               	movwf	mcp2515_readRegisterS@n^0,c
  4690  003280  502B               	movf	mcp2515_read_id@mcp_addr^0,w,c
  4691  003282  EC0A  F02C         	call	_mcp2515_readRegisterS
  4692                           
  4693                           ;MCP2515.c: 655:     *id =(unsigned long)((tbufdata[0]<<3) + (tbufdata[1]>>5));
  4694  003286  C02D  F022         	movff	mcp2515_read_id@tbufdata+1,??_mcp2515_read_id
  4695  00328A  0E05               	movlw	5
  4696  00328C  6E23               	movwf	(??_mcp2515_read_id+1)^0,c
  4697  00328E                     u13045:
  4698  00328E  90D8               	bcf	status,0,c
  4699  003290  3222               	rrcf	??_mcp2515_read_id^0,f,c
  4700  003292  2E23               	decfsz	(??_mcp2515_read_id+1)^0,f,c
  4701  003294  D7FC               	goto	u13045
  4702  003296  502C               	movf	mcp2515_read_id@tbufdata^0,w,c
  4703  003298  6E24               	movwf	(??_mcp2515_read_id+2)^0,c
  4704  00329A  6A25               	clrf	(??_mcp2515_read_id+3)^0,c
  4705  00329C  90D8               	bcf	status,0,c
  4706  00329E  3624               	rlcf	(??_mcp2515_read_id+2)^0,f,c
  4707  0032A0  3625               	rlcf	(??_mcp2515_read_id+3)^0,f,c
  4708  0032A2  90D8               	bcf	status,0,c
  4709  0032A4  3624               	rlcf	(??_mcp2515_read_id+2)^0,f,c
  4710  0032A6  3625               	rlcf	(??_mcp2515_read_id+3)^0,f,c
  4711  0032A8  90D8               	bcf	status,0,c
  4712  0032AA  3624               	rlcf	(??_mcp2515_read_id+2)^0,f,c
  4713  0032AC  3625               	rlcf	(??_mcp2515_read_id+3)^0,f,c
  4714  0032AE  5022               	movf	??_mcp2515_read_id^0,w,c
  4715  0032B0  2424               	addwf	(??_mcp2515_read_id+2)^0,w,c
  4716  0032B2  6E26               	movwf	(??_mcp2515_read_id+4)^0,c
  4717  0032B4  0E00               	movlw	0
  4718  0032B6  2025               	addwfc	(??_mcp2515_read_id+3)^0,w,c
  4719  0032B8  6E27               	movwf	(??_mcp2515_read_id+5)^0,c
  4720  0032BA  6A28               	clrf	(??_mcp2515_read_id+6)^0,c
  4721  0032BC  BE27               	btfsc	(??_mcp2515_read_id+5)^0,7,c
  4722  0032BE  0628               	decf	(??_mcp2515_read_id+6)^0,f,c
  4723  0032C0  5028               	movf	(??_mcp2515_read_id+6)^0,w,c
  4724  0032C2  6E29               	movwf	(??_mcp2515_read_id+7)^0,c
  4725  0032C4  C020  FFD9         	movff	mcp2515_read_id@id,fsr2l
  4726  0032C8  C021  FFDA         	movff	mcp2515_read_id@id+1,fsr2h
  4727  0032CC  C026  FFDE         	movff	??_mcp2515_read_id+4,postinc2
  4728  0032D0  C027  FFDE         	movff	??_mcp2515_read_id+5,postinc2
  4729  0032D4  C028  FFDE         	movff	??_mcp2515_read_id+6,postinc2
  4730  0032D8  C029  FFDE         	movff	??_mcp2515_read_id+7,postinc2
  4731                           
  4732                           ;MCP2515.c: 657:     if ( (tbufdata[1] & 0x08) == 0x08 )
  4733  0032DC  A62D               	btfss	(mcp2515_read_id@tbufdata+1)^0,3,c
  4734  0032DE  0012               	return	
  4735                           
  4736                           ;MCP2515.c: 658:     {;MCP2515.c: 660:         *id = (*id<<2) + (tbufdata[1] & 0x03);
  4737  0032E0  C020  FFD9         	movff	mcp2515_read_id@id,fsr2l
  4738  0032E4  C021  FFDA         	movff	mcp2515_read_id@id+1,fsr2h
  4739  0032E8  CFDE F022          	movff	postinc2,??_mcp2515_read_id
  4740  0032EC  CFDE F023          	movff	postinc2,??_mcp2515_read_id+1
  4741  0032F0  CFDE F024          	movff	postinc2,??_mcp2515_read_id+2
  4742  0032F4  CFDE F025          	movff	postinc2,??_mcp2515_read_id+3
  4743  0032F8  0E02               	movlw	2
  4744  0032FA                     u13065:
  4745  0032FA  90D8               	bcf	status,0,c
  4746  0032FC  3622               	rlcf	??_mcp2515_read_id^0,f,c
  4747  0032FE  3623               	rlcf	(??_mcp2515_read_id+1)^0,f,c
  4748  003300  3624               	rlcf	(??_mcp2515_read_id+2)^0,f,c
  4749  003302  3625               	rlcf	(??_mcp2515_read_id+3)^0,f,c
  4750  003304  2EE8               	decfsz	wreg,f,c
  4751  003306  D7F9               	goto	u13065
  4752  003308  C02D  F026         	movff	mcp2515_read_id@tbufdata+1,??_mcp2515_read_id+4
  4753  00330C  0E03               	movlw	3
  4754  00330E  1626               	andwf	(??_mcp2515_read_id+4)^0,f,c
  4755  003310  5026               	movf	(??_mcp2515_read_id+4)^0,w,c
  4756  003312  2422               	addwf	??_mcp2515_read_id^0,w,c
  4757  003314  6E27               	movwf	(??_mcp2515_read_id+5)^0,c
  4758  003316  0E00               	movlw	0
  4759  003318  2023               	addwfc	(??_mcp2515_read_id+1)^0,w,c
  4760  00331A  6E28               	movwf	(??_mcp2515_read_id+6)^0,c
  4761  00331C  0E00               	movlw	0
  4762  00331E  2024               	addwfc	(??_mcp2515_read_id+2)^0,w,c
  4763  003320  6E29               	movwf	(??_mcp2515_read_id+7)^0,c
  4764  003322  0E00               	movlw	0
  4765  003324  2025               	addwfc	(??_mcp2515_read_id+3)^0,w,c
  4766  003326  6E2A               	movwf	(??_mcp2515_read_id+8)^0,c
  4767  003328  C020  FFD9         	movff	mcp2515_read_id@id,fsr2l
  4768  00332C  C021  FFDA         	movff	mcp2515_read_id@id+1,fsr2h
  4769  003330  C027  FFDE         	movff	??_mcp2515_read_id+5,postinc2
  4770  003334  C028  FFDE         	movff	??_mcp2515_read_id+6,postinc2
  4771  003338  C029  FFDE         	movff	??_mcp2515_read_id+7,postinc2
  4772  00333C  C02A  FFDE         	movff	??_mcp2515_read_id+8,postinc2
  4773                           
  4774                           ;MCP2515.c: 661:         *id = (*id<<8) + tbufdata[2];
  4775  003340  502E               	movf	(mcp2515_read_id@tbufdata+2)^0,w,c
  4776  003342  C020  FFD9         	movff	mcp2515_read_id@id,fsr2l
  4777  003346  C021  FFDA         	movff	mcp2515_read_id@id+1,fsr2h
  4778  00334A  CFDE F022          	movff	postinc2,??_mcp2515_read_id
  4779  00334E  CFDE F023          	movff	postinc2,??_mcp2515_read_id+1
  4780  003352  CFDE F024          	movff	postinc2,??_mcp2515_read_id+2
  4781  003356  CFDE F025          	movff	postinc2,??_mcp2515_read_id+3
  4782  00335A  C024  F025         	movff	??_mcp2515_read_id+2,??_mcp2515_read_id+3
  4783  00335E  C023  F024         	movff	??_mcp2515_read_id+1,??_mcp2515_read_id+2
  4784  003362  C022  F023         	movff	??_mcp2515_read_id,??_mcp2515_read_id+1
  4785  003366  6A22               	clrf	??_mcp2515_read_id^0,c
  4786  003368  2422               	addwf	??_mcp2515_read_id^0,w,c
  4787  00336A  6E26               	movwf	(??_mcp2515_read_id+4)^0,c
  4788  00336C  0E00               	movlw	0
  4789  00336E  2023               	addwfc	(??_mcp2515_read_id+1)^0,w,c
  4790  003370  6E27               	movwf	(??_mcp2515_read_id+5)^0,c
  4791  003372  0E00               	movlw	0
  4792  003374  2024               	addwfc	(??_mcp2515_read_id+2)^0,w,c
  4793  003376  6E28               	movwf	(??_mcp2515_read_id+6)^0,c
  4794  003378  0E00               	movlw	0
  4795  00337A  2025               	addwfc	(??_mcp2515_read_id+3)^0,w,c
  4796  00337C  6E29               	movwf	(??_mcp2515_read_id+7)^0,c
  4797  00337E  C020  FFD9         	movff	mcp2515_read_id@id,fsr2l
  4798  003382  C021  FFDA         	movff	mcp2515_read_id@id+1,fsr2h
  4799  003386  C026  FFDE         	movff	??_mcp2515_read_id+4,postinc2
  4800  00338A  C027  FFDE         	movff	??_mcp2515_read_id+5,postinc2
  4801  00338E  C028  FFDE         	movff	??_mcp2515_read_id+6,postinc2
  4802  003392  C029  FFDE         	movff	??_mcp2515_read_id+7,postinc2
  4803                           
  4804                           ;MCP2515.c: 662:         *id = (*id<<8) + tbufdata[3];
  4805  003396  502F               	movf	(mcp2515_read_id@tbufdata+3)^0,w,c
  4806  003398  C020  FFD9         	movff	mcp2515_read_id@id,fsr2l
  4807  00339C  C021  FFDA         	movff	mcp2515_read_id@id+1,fsr2h
  4808  0033A0  CFDE F022          	movff	postinc2,??_mcp2515_read_id
  4809  0033A4  CFDE F023          	movff	postinc2,??_mcp2515_read_id+1
  4810  0033A8  CFDE F024          	movff	postinc2,??_mcp2515_read_id+2
  4811  0033AC  CFDE F025          	movff	postinc2,??_mcp2515_read_id+3
  4812  0033B0  C024  F025         	movff	??_mcp2515_read_id+2,??_mcp2515_read_id+3
  4813  0033B4  C023  F024         	movff	??_mcp2515_read_id+1,??_mcp2515_read_id+2
  4814  0033B8  C022  F023         	movff	??_mcp2515_read_id,??_mcp2515_read_id+1
  4815  0033BC  6A22               	clrf	??_mcp2515_read_id^0,c
  4816  0033BE  2422               	addwf	??_mcp2515_read_id^0,w,c
  4817  0033C0  6E26               	movwf	(??_mcp2515_read_id+4)^0,c
  4818  0033C2  0E00               	movlw	0
  4819  0033C4  2023               	addwfc	(??_mcp2515_read_id+1)^0,w,c
  4820  0033C6  6E27               	movwf	(??_mcp2515_read_id+5)^0,c
  4821  0033C8  0E00               	movlw	0
  4822  0033CA  2024               	addwfc	(??_mcp2515_read_id+2)^0,w,c
  4823  0033CC  6E28               	movwf	(??_mcp2515_read_id+6)^0,c
  4824  0033CE  0E00               	movlw	0
  4825  0033D0  2025               	addwfc	(??_mcp2515_read_id+3)^0,w,c
  4826  0033D2  6E29               	movwf	(??_mcp2515_read_id+7)^0,c
  4827  0033D4  C020  FFD9         	movff	mcp2515_read_id@id,fsr2l
  4828  0033D8  C021  FFDA         	movff	mcp2515_read_id@id+1,fsr2h
  4829  0033DC  C026  FFDE         	movff	??_mcp2515_read_id+4,postinc2
  4830  0033E0  C027  FFDE         	movff	??_mcp2515_read_id+5,postinc2
  4831  0033E4  C028  FFDE         	movff	??_mcp2515_read_id+6,postinc2
  4832  0033E8  C029  FFDE         	movff	??_mcp2515_read_id+7,postinc2
  4833                           
  4834                           ;MCP2515.c: 663:         *ext = 1;
  4835  0033EC  501F               	movf	mcp2515_read_id@ext^0,w,c
  4836  0033EE  6ED9               	movwf	fsr2l,c
  4837  0033F0  6ADA               	clrf	fsr2h,c
  4838  0033F2  0E01               	movlw	1
  4839  0033F4  6EDF               	movwf	indf2,c
  4840  0033F6  0012               	return		;funcret
  4841  0033F8                     __end_of_mcp2515_read_id:
  4842                           	callstack 0
  4843                           
  4844 ;; *************** function _mcp2515_readRegisterS *****************
  4845 ;; Defined at:
  4846 ;;		line 47 in file "MCP2515.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;  address         1    wreg     unsigned char 
  4849 ;;  values          2   25[COMRAM] PTR unsigned char 
  4850 ;;		 -> m_nDta(8), mcp2515_read_id@tbufdata(4), 
  4851 ;;  n               1   27[COMRAM] unsigned char 
  4852 ;; Auto vars:     Size  Location     Type
  4853 ;;  address         1   28[COMRAM] unsigned char 
  4854 ;;  i               1   29[COMRAM] unsigned char 
  4855 ;; Return value:  Size  Location     Type
  4856 ;;                  1    wreg      void 
  4857 ;; Registers used:
  4858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4859 ;; Tracked objects:
  4860 ;;		On entry : 0/0
  4861 ;;		On exit  : 0/0
  4862 ;;		Unchanged: 0/0
  4863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4864 ;;      Params:         3       0       0       0       0       0       0       0       0
  4865 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4866 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4867 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4868 ;;Total ram usage:        5 bytes
  4869 ;; Hardware stack levels used:    1
  4870 ;; Hardware stack levels required when called:    4
  4871 ;; This function calls:
  4872 ;;		_MPC2515_SPI
  4873 ;; This function is called by:
  4874 ;;		_mcp2515_read_id
  4875 ;;		_mcp2515_read_canMsg
  4876 ;; This function uses a non-reentrant model
  4877 ;;
  4878                           
  4879                           	psect	text20
  4880  005814                     __ptext20:
  4881                           	callstack 0
  4882  005814                     _mcp2515_readRegisterS:
  4883                           	callstack 19
  4884                           
  4885                           ;incstack = 0
  4886                           ;mcp2515_readRegisterS@address stored from wreg
  4887  005814  6E1D               	movwf	mcp2515_readRegisterS@address^0,c
  4888                           
  4889                           ;MCP2515.c: 47: void mcp2515_readRegisterS(unsigned char address, unsigned char values[]
      +                          , unsigned char n);MCP2515.c: 48: {;MCP2515.c: 49:     unsigned char i;;MCP2515.c: 51:  
      +                             LATBbits.LATB4 = 0;
  4890  005816  988A               	bcf	138,4,c	;volatile
  4891                           
  4892                           ;MCP2515.c: 52:     MPC2515_SPI(0x03);
  4893  005818  0E03               	movlw	3
  4894  00581A  EC23  F02F         	call	_MPC2515_SPI
  4895                           
  4896                           ;MCP2515.c: 53:     MPC2515_SPI(address);
  4897  00581E  501D               	movf	mcp2515_readRegisterS@address^0,w,c
  4898  005820  EC23  F02F         	call	_MPC2515_SPI
  4899                           
  4900                           ;MCP2515.c: 55:     for (i=0; i<n; i++)
  4901  005824  0E00               	movlw	0
  4902  005826  6E1E               	movwf	mcp2515_readRegisterS@i^0,c
  4903  005828  D00B               	goto	l11919
  4904  00582A                     l11915:
  4905                           
  4906                           ;MCP2515.c: 56:         values[i] = MPC2515_SPI(0xff);
  4907  00582A  501E               	movf	mcp2515_readRegisterS@i^0,w,c
  4908  00582C  241A               	addwf	mcp2515_readRegisterS@values^0,w,c
  4909  00582E  6ED9               	movwf	fsr2l,c
  4910  005830  0E00               	movlw	0
  4911  005832  201B               	addwfc	(mcp2515_readRegisterS@values+1)^0,w,c
  4912  005834  6EDA               	movwf	fsr2h,c
  4913  005836  0EFF               	movlw	255
  4914  005838  EC23  F02F         	call	_MPC2515_SPI
  4915  00583C  6EDF               	movwf	indf2,c
  4916  00583E  2A1E               	incf	mcp2515_readRegisterS@i^0,f,c
  4917  005840                     l11919:
  4918  005840  501C               	movf	mcp2515_readRegisterS@n^0,w,c
  4919  005842  5C1E               	subwf	mcp2515_readRegisterS@i^0,w,c
  4920  005844  A0D8               	btfss	status,0,c
  4921  005846  D7F1               	goto	l11915
  4922                           
  4923                           ;MCP2515.c: 58:     LATBbits.LATB4 = 1;
  4924  005848  888A               	bsf	138,4,c	;volatile
  4925  00584A  0012               	return		;funcret
  4926  00584C                     __end_of_mcp2515_readRegisterS:
  4927                           	callstack 0
  4928                           
  4929 ;; *************** function _mcp2515_readStatus *****************
  4930 ;; Defined at:
  4931 ;;		line 116 in file "MCP2515.c"
  4932 ;; Parameters:    Size  Location     Type
  4933 ;;		None
  4934 ;; Auto vars:     Size  Location     Type
  4935 ;;  i               1   25[COMRAM] unsigned char 
  4936 ;; Return value:  Size  Location     Type
  4937 ;;                  1    wreg      unsigned char 
  4938 ;; Registers used:
  4939 ;;		wreg, status,2, cstack
  4940 ;; Tracked objects:
  4941 ;;		On entry : 3F/0
  4942 ;;		On exit  : 0/0
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4945 ;;      Params:         0       0       0       0       0       0       0       0       0
  4946 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4947 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4948 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4949 ;;Total ram usage:        1 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; Hardware stack levels required when called:    4
  4952 ;; This function calls:
  4953 ;;		_MPC2515_SPI
  4954 ;; This function is called by:
  4955 ;;		_readMsg
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text21
  4960  005DD8                     __ptext21:
  4961                           	callstack 0
  4962  005DD8                     _mcp2515_readStatus:
  4963                           	callstack 21
  4964                           
  4965                           ; BSR set to: 0
  4966                           ;MCP2515.c: 118:     unsigned char i;;MCP2515.c: 120:     LATBbits.LATB4 = 0;
  4967                           
  4968                           ;incstack = 0
  4969  005DD8  988A               	bcf	138,4,c	;volatile
  4970                           
  4971                           ; BSR set to: 0
  4972                           ;MCP2515.c: 121:     MPC2515_SPI(0xA0);
  4973  005DDA  0EA0               	movlw	160
  4974  005DDC  EC23  F02F         	call	_MPC2515_SPI
  4975                           
  4976                           ;MCP2515.c: 122:     i = MPC2515_SPI(0xff);
  4977  005DE0  0EFF               	movlw	255
  4978  005DE2  EC23  F02F         	call	_MPC2515_SPI
  4979  005DE6  6E1A               	movwf	mcp2515_readStatus@i^0,c
  4980                           
  4981                           ;MCP2515.c: 123:     LATBbits.LATB4 = 1;
  4982  005DE8  888A               	bsf	138,4,c	;volatile
  4983                           
  4984                           ;MCP2515.c: 125:     return i;
  4985  005DEA  501A               	movf	mcp2515_readStatus@i^0,w,c
  4986  005DEC  0012               	return		;funcret
  4987  005DEE                     __end_of_mcp2515_readStatus:
  4988                           	callstack 0
  4989                           
  4990 ;; *************** function _escreve_inteiro_lcd *****************
  4991 ;; Defined at:
  4992 ;;		line 376 in file "bibliotecas/display_lcd.c"
  4993 ;; Parameters:    Size  Location     Type
  4994 ;;  valor           2   45[COMRAM] int 
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;  texto           7    0[BANK0 ] unsigned char [7]
  4997 ;; Return value:  Size  Location     Type
  4998 ;;                  1    wreg      void 
  4999 ;; Registers used:
  5000 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5001 ;; Tracked objects:
  5002 ;;		On entry : 0/0
  5003 ;;		On exit  : 0/0
  5004 ;;		Unchanged: 0/0
  5005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5006 ;;      Params:         2       0       0       0       0       0       0       0       0
  5007 ;;      Locals:         0       7       0       0       0       0       0       0       0
  5008 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5009 ;;      Totals:         2       7       0       0       0       0       0       0       0
  5010 ;;Total ram usage:        9 bytes
  5011 ;; Hardware stack levels used:    1
  5012 ;; Hardware stack levels required when called:    6
  5013 ;; This function calls:
  5014 ;;		_escreve_frase_ram_lcd
  5015 ;;		_itoa
  5016 ;; This function is called by:
  5017 ;;		_troca_de_tela
  5018 ;; This function uses a non-reentrant model
  5019 ;;
  5020                           
  5021                           	psect	text22
  5022  00584C                     __ptext22:
  5023                           	callstack 0
  5024  00584C                     _escreve_inteiro_lcd:
  5025                           	callstack 22
  5026                           
  5027                           ;display_lcd.c: 378: char texto[7] = "000000";
  5028                           
  5029                           ;incstack = 0
  5030  00584C  EE22  F0DA         	lfsr	2,escreve_inteiro_lcd@F3223
  5031  005850  EE10  F060         	lfsr	1,escreve_inteiro_lcd@texto
  5032  005854  0E06               	movlw	6
  5033  005856                     u15191:
  5034  005856  CFDB FFE3          	movff	plusw2,plusw1
  5035  00585A  06E8               	decf	wreg,f,c
  5036  00585C  E2FC               	bc	u15191
  5037                           
  5038                           ;display_lcd.c: 379: itoa(texto,valor, 10);
  5039  00585E  0E60               	movlw	low escreve_inteiro_lcd@texto
  5040  005860  6E28               	movwf	itoa@buf^0,c
  5041  005862  C02E  F029         	movff	escreve_inteiro_lcd@valor,itoa@val
  5042  005866  C02F  F02A         	movff	escreve_inteiro_lcd@valor+1,itoa@val+1
  5043  00586A  0E00               	movlw	0
  5044  00586C  6E2C               	movwf	(itoa@base+1)^0,c
  5045  00586E  0E0A               	movlw	10
  5046  005870  6E2B               	movwf	itoa@base^0,c
  5047  005872  EC77  F02C         	call	_itoa	;wreg free
  5048                           
  5049                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
  5050  005876  0E60               	movlw	low escreve_inteiro_lcd@texto
  5051  005878  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  5052  00587A  6A1D               	clrf	(escreve_frase_ram_lcd@buffer+1)^0,c
  5053  00587C  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
  5054  005880  0012               	return		;funcret
  5055  005882                     __end_of_escreve_inteiro_lcd:
  5056                           	callstack 0
  5057                           
  5058 ;; *************** function _itoa *****************
  5059 ;; Defined at:
  5060 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\itoa.c"
  5061 ;; Parameters:    Size  Location     Type
  5062 ;;  buf             1   39[COMRAM] PTR unsigned char 
  5063 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  5064 ;;  val             2   40[COMRAM] int 
  5065 ;;  base            2   42[COMRAM] int 
  5066 ;; Auto vars:     Size  Location     Type
  5067 ;;  cp              1    0        PTR unsigned char 
  5068 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  5069 ;; Return value:  Size  Location     Type
  5070 ;;                  1    wreg      PTR unsigned char 
  5071 ;; Registers used:
  5072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5073 ;; Tracked objects:
  5074 ;;		On entry : 0/0
  5075 ;;		On exit  : 0/0
  5076 ;;		Unchanged: 0/0
  5077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5078 ;;      Params:         5       0       0       0       0       0       0       0       0
  5079 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5080 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5081 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5082 ;;Total ram usage:        6 bytes
  5083 ;; Hardware stack levels used:    1
  5084 ;; Hardware stack levels required when called:    5
  5085 ;; This function calls:
  5086 ;;		_utoa
  5087 ;; This function is called by:
  5088 ;;		_escreve_inteiro_lcd
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092                           	psect	text23
  5093  0058EE                     __ptext23:
  5094                           	callstack 0
  5095  0058EE                     _itoa:
  5096                           	callstack 22
  5097                           
  5098                           ;incstack = 0
  5099  0058EE  AE2A               	btfss	(itoa@val+1)^0,7,c
  5100  0058F0  D00A               	goto	l13273
  5101  0058F2  5028               	movf	itoa@buf^0,w,c
  5102  0058F4  6ED9               	movwf	fsr2l,c
  5103  0058F6  6ADA               	clrf	fsr2h,c
  5104  0058F8  0E2D               	movlw	45
  5105  0058FA  6EDF               	movwf	indf2,c
  5106  0058FC  2A28               	incf	itoa@buf^0,f,c
  5107  0058FE  6C29               	negf	itoa@val^0,c
  5108  005900  1E2A               	comf	(itoa@val+1)^0,f,c
  5109  005902  B0D8               	btfsc	status,0,c
  5110  005904  2A2A               	incf	(itoa@val+1)^0,f,c
  5111  005906                     l13273:
  5112  005906  C028  F020         	movff	itoa@buf,utoa@buf
  5113  00590A  C029  F021         	movff	itoa@val,utoa@val
  5114  00590E  C02A  F022         	movff	itoa@val+1,utoa@val+1
  5115  005912  C02B  F023         	movff	itoa@base,utoa@base
  5116  005916  C02C  F024         	movff	itoa@base+1,utoa@base+1
  5117  00591A  ECDB  F024         	call	_utoa	;wreg free
  5118  00591E  0012               	return		;funcret
  5119  005920                     __end_of_itoa:
  5120                           	callstack 0
  5121                           
  5122 ;; *************** function _utoa *****************
  5123 ;; Defined at:
  5124 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\itoa.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;  buf             1   31[COMRAM] PTR unsigned char 
  5127 ;;		 -> escreve_inteiro_uart@valor_final(7), escreve_inteiro_lcd@texto(7), 
  5128 ;;  val             2   32[COMRAM] unsigned int 
  5129 ;;  base            2   34[COMRAM] int 
  5130 ;; Auto vars:     Size  Location     Type
  5131 ;;  v               2   36[COMRAM] unsigned int 
  5132 ;;  c               1   38[COMRAM] unsigned char 
  5133 ;; Return value:  Size  Location     Type
  5134 ;;                  1    wreg      PTR unsigned char 
  5135 ;; Registers used:
  5136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5137 ;; Tracked objects:
  5138 ;;		On entry : 0/0
  5139 ;;		On exit  : 0/0
  5140 ;;		Unchanged: 0/0
  5141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5142 ;;      Params:         5       0       0       0       0       0       0       0       0
  5143 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5144 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5145 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5146 ;;Total ram usage:        8 bytes
  5147 ;; Hardware stack levels used:    1
  5148 ;; Hardware stack levels required when called:    4
  5149 ;; This function calls:
  5150 ;;		___lwdiv
  5151 ;;		___lwmod
  5152 ;; This function is called by:
  5153 ;;		_itoa
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           	psect	text24
  5158  0049B6                     __ptext24:
  5159                           	callstack 0
  5160  0049B6                     _utoa:
  5161                           	callstack 22
  5162                           
  5163                           ;incstack = 0
  5164  0049B6  C021  F025         	movff	utoa@val,utoa@v
  5165  0049BA  C022  F026         	movff	utoa@val+1,utoa@v+1
  5166  0049BE                     l13237:
  5167  0049BE  C025  F019         	movff	utoa@v,___lwdiv@dividend
  5168  0049C2  C026  F01A         	movff	utoa@v+1,___lwdiv@dividend+1
  5169  0049C6  C023  F01B         	movff	utoa@base,___lwdiv@divisor
  5170  0049CA  C024  F01C         	movff	utoa@base+1,___lwdiv@divisor+1
  5171  0049CE  ECA5  F029         	call	___lwdiv	;wreg free
  5172  0049D2  C019  F025         	movff	?___lwdiv,utoa@v
  5173  0049D6  C01A  F026         	movff	?___lwdiv+1,utoa@v+1
  5174  0049DA  2A20               	incf	utoa@buf^0,f,c
  5175  0049DC  5025               	movf	utoa@v^0,w,c
  5176  0049DE  1026               	iorwf	(utoa@v+1)^0,w,c
  5177  0049E0  A4D8               	btfss	status,2,c
  5178  0049E2  D7ED               	goto	l13237
  5179  0049E4  5020               	movf	utoa@buf^0,w,c
  5180  0049E6  6ED9               	movwf	fsr2l,c
  5181  0049E8  6ADA               	clrf	fsr2h,c
  5182  0049EA  0E00               	movlw	0
  5183  0049EC  6EDF               	movwf	indf2,c
  5184  0049EE  0620               	decf	utoa@buf^0,f,c
  5185  0049F0                     l13247:
  5186  0049F0  C021  F019         	movff	utoa@val,___lwmod@dividend
  5187  0049F4  C022  F01A         	movff	utoa@val+1,___lwmod@dividend+1
  5188  0049F8  C023  F01B         	movff	utoa@base,___lwmod@divisor
  5189  0049FC  C024  F01C         	movff	utoa@base+1,___lwmod@divisor+1
  5190  004A00  EC8A  F02B         	call	___lwmod	;wreg free
  5191  004A04  5019               	movf	?___lwmod^0,w,c
  5192  004A06  6E27               	movwf	utoa@c^0,c
  5193  004A08  C021  F019         	movff	utoa@val,___lwdiv@dividend
  5194  004A0C  C022  F01A         	movff	utoa@val+1,___lwdiv@dividend+1
  5195  004A10  C023  F01B         	movff	utoa@base,___lwdiv@divisor
  5196  004A14  C024  F01C         	movff	utoa@base+1,___lwdiv@divisor+1
  5197  004A18  ECA5  F029         	call	___lwdiv	;wreg free
  5198  004A1C  C019  F021         	movff	?___lwdiv,utoa@val
  5199  004A20  C01A  F022         	movff	?___lwdiv+1,utoa@val+1
  5200  004A24  0E09               	movlw	9
  5201  004A26  6427               	cpfsgt	utoa@c^0,c
  5202  004A28  D002               	goto	l2719
  5203  004A2A  0E07               	movlw	7
  5204  004A2C  2627               	addwf	utoa@c^0,f,c
  5205  004A2E                     l2719:
  5206  004A2E  0E30               	movlw	48
  5207  004A30  2627               	addwf	utoa@c^0,f,c
  5208  004A32  5020               	movf	utoa@buf^0,w,c
  5209  004A34  6ED9               	movwf	fsr2l,c
  5210  004A36  6ADA               	clrf	fsr2h,c
  5211  004A38  C027  FFDF         	movff	utoa@c,indf2
  5212  004A3C  0620               	decf	utoa@buf^0,f,c
  5213  004A3E  5021               	movf	utoa@val^0,w,c
  5214  004A40  1022               	iorwf	(utoa@val+1)^0,w,c
  5215  004A42  A4D8               	btfss	status,2,c
  5216  004A44  D7D5               	goto	l13247
  5217                           
  5218                           ;	Return value of _utoa is never used
  5219  004A46  2A20               	incf	utoa@buf^0,f,c
  5220  004A48  0012               	return		;funcret
  5221  004A4A                     __end_of_utoa:
  5222                           	callstack 0
  5223                           
  5224 ;; *************** function ___lwmod *****************
  5225 ;; Defined at:
  5226 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\lwmod.c"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;  dividend        2   24[COMRAM] unsigned int 
  5229 ;;  divisor         2   26[COMRAM] unsigned int 
  5230 ;; Auto vars:     Size  Location     Type
  5231 ;;  counter         1   28[COMRAM] unsigned char 
  5232 ;; Return value:  Size  Location     Type
  5233 ;;                  2   24[COMRAM] unsigned int 
  5234 ;; Registers used:
  5235 ;;		wreg, status,2, status,0
  5236 ;; Tracked objects:
  5237 ;;		On entry : 0/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5241 ;;      Params:         4       0       0       0       0       0       0       0       0
  5242 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5243 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5244 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5245 ;;Total ram usage:        5 bytes
  5246 ;; Hardware stack levels used:    1
  5247 ;; Hardware stack levels required when called:    3
  5248 ;; This function calls:
  5249 ;;		Nothing
  5250 ;; This function is called by:
  5251 ;;		_utoa
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255                           	psect	text25
  5256  005714                     __ptext25:
  5257                           	callstack 0
  5258  005714                     ___lwmod:
  5259                           	callstack 22
  5260                           
  5261                           ;incstack = 0
  5262  005714  501B               	movf	___lwmod@divisor^0,w,c
  5263  005716  101C               	iorwf	(___lwmod@divisor+1)^0,w,c
  5264  005718  B4D8               	btfsc	status,2,c
  5265  00571A  D018               	goto	l2513
  5266  00571C  0E01               	movlw	1
  5267  00571E  6E1D               	movwf	___lwmod@counter^0,c
  5268  005720  D004               	goto	l12767
  5269  005722                     l12765:
  5270  005722  90D8               	bcf	status,0,c
  5271  005724  361B               	rlcf	___lwmod@divisor^0,f,c
  5272  005726  361C               	rlcf	(___lwmod@divisor+1)^0,f,c
  5273  005728  2A1D               	incf	___lwmod@counter^0,f,c
  5274  00572A                     l12767:
  5275  00572A  AE1C               	btfss	(___lwmod@divisor+1)^0,7,c
  5276  00572C  D7FA               	goto	l12765
  5277  00572E                     u13440:
  5278  00572E  501B               	movf	___lwmod@divisor^0,w,c
  5279  005730  5C19               	subwf	___lwmod@dividend^0,w,c
  5280  005732  501C               	movf	(___lwmod@divisor+1)^0,w,c
  5281  005734  581A               	subwfb	(___lwmod@dividend+1)^0,w,c
  5282  005736  A0D8               	btfss	status,0,c
  5283  005738  D004               	goto	l12773
  5284  00573A  501B               	movf	___lwmod@divisor^0,w,c
  5285  00573C  5E19               	subwf	___lwmod@dividend^0,f,c
  5286  00573E  501C               	movf	(___lwmod@divisor+1)^0,w,c
  5287  005740  5A1A               	subwfb	(___lwmod@dividend+1)^0,f,c
  5288  005742                     l12773:
  5289  005742  90D8               	bcf	status,0,c
  5290  005744  321C               	rrcf	(___lwmod@divisor+1)^0,f,c
  5291  005746  321B               	rrcf	___lwmod@divisor^0,f,c
  5292  005748  2E1D               	decfsz	___lwmod@counter^0,f,c
  5293  00574A  D7F1               	goto	u13440
  5294  00574C                     l2513:
  5295  00574C  C019  F019         	movff	___lwmod@dividend,?___lwmod
  5296  005750  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  5297  005754  0012               	return		;funcret
  5298  005756                     __end_of___lwmod:
  5299                           	callstack 0
  5300                           
  5301 ;; *************** function ___lwdiv *****************
  5302 ;; Defined at:
  5303 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;  dividend        2   24[COMRAM] unsigned int 
  5306 ;;  divisor         2   26[COMRAM] unsigned int 
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;  quotient        2   29[COMRAM] unsigned int 
  5309 ;;  counter         1   28[COMRAM] unsigned char 
  5310 ;; Return value:  Size  Location     Type
  5311 ;;                  2   24[COMRAM] unsigned int 
  5312 ;; Registers used:
  5313 ;;		wreg, status,2, status,0
  5314 ;; Tracked objects:
  5315 ;;		On entry : 0/0
  5316 ;;		On exit  : 0/0
  5317 ;;		Unchanged: 0/0
  5318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5319 ;;      Params:         4       0       0       0       0       0       0       0       0
  5320 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5321 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5322 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5323 ;;Total ram usage:        7 bytes
  5324 ;; Hardware stack levels used:    1
  5325 ;; Hardware stack levels required when called:    3
  5326 ;; This function calls:
  5327 ;;		Nothing
  5328 ;; This function is called by:
  5329 ;;		_utoa
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           	psect	text26
  5334  00534A                     __ptext26:
  5335                           	callstack 0
  5336  00534A                     ___lwdiv:
  5337                           	callstack 22
  5338                           
  5339                           ;incstack = 0
  5340  00534A  0E00               	movlw	0
  5341  00534C  6E1F               	movwf	(___lwdiv@quotient+1)^0,c
  5342  00534E  0E00               	movlw	0
  5343  005350  6E1E               	movwf	___lwdiv@quotient^0,c
  5344  005352  501B               	movf	___lwdiv@divisor^0,w,c
  5345  005354  101C               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5346  005356  B4D8               	btfsc	status,2,c
  5347  005358  D01C               	goto	l2503
  5348  00535A  0E01               	movlw	1
  5349  00535C  6E1D               	movwf	___lwdiv@counter^0,c
  5350  00535E  D004               	goto	l12747
  5351  005360                     l12745:
  5352  005360  90D8               	bcf	status,0,c
  5353  005362  361B               	rlcf	___lwdiv@divisor^0,f,c
  5354  005364  361C               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5355  005366  2A1D               	incf	___lwdiv@counter^0,f,c
  5356  005368                     l12747:
  5357  005368  AE1C               	btfss	(___lwdiv@divisor+1)^0,7,c
  5358  00536A  D7FA               	goto	l12745
  5359  00536C                     u13410:
  5360  00536C  90D8               	bcf	status,0,c
  5361  00536E  361E               	rlcf	___lwdiv@quotient^0,f,c
  5362  005370  361F               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5363  005372  501B               	movf	___lwdiv@divisor^0,w,c
  5364  005374  5C19               	subwf	___lwdiv@dividend^0,w,c
  5365  005376  501C               	movf	(___lwdiv@divisor+1)^0,w,c
  5366  005378  581A               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5367  00537A  A0D8               	btfss	status,0,c
  5368  00537C  D005               	goto	l12757
  5369  00537E  501B               	movf	___lwdiv@divisor^0,w,c
  5370  005380  5E19               	subwf	___lwdiv@dividend^0,f,c
  5371  005382  501C               	movf	(___lwdiv@divisor+1)^0,w,c
  5372  005384  5A1A               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5373  005386  801E               	bsf	___lwdiv@quotient^0,0,c
  5374  005388                     l12757:
  5375  005388  90D8               	bcf	status,0,c
  5376  00538A  321C               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5377  00538C  321B               	rrcf	___lwdiv@divisor^0,f,c
  5378  00538E  2E1D               	decfsz	___lwdiv@counter^0,f,c
  5379  005390  D7ED               	goto	u13410
  5380  005392                     l2503:
  5381  005392  C01E  F019         	movff	___lwdiv@quotient,?___lwdiv
  5382  005396  C01F  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5383  00539A  0012               	return		;funcret
  5384  00539C                     __end_of___lwdiv:
  5385                           	callstack 0
  5386                           
  5387 ;; *************** function _escreve_cmd_lcd *****************
  5388 ;; Defined at:
  5389 ;;		line 162 in file "bibliotecas/display_lcd.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;  comando         1    wreg     unsigned char 
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;  comando         1   26[COMRAM] unsigned char 
  5394 ;; Return value:  Size  Location     Type
  5395 ;;                  1    wreg      void 
  5396 ;; Registers used:
  5397 ;;		wreg, status,2, status,0, cstack
  5398 ;; Tracked objects:
  5399 ;;		On entry : 0/0
  5400 ;;		On exit  : 0/0
  5401 ;;		Unchanged: 0/0
  5402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5403 ;;      Params:         0       0       0       0       0       0       0       0       0
  5404 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5405 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5406 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5407 ;;Total ram usage:        1 bytes
  5408 ;; Hardware stack levels used:    1
  5409 ;; Hardware stack levels required when called:    4
  5410 ;; This function calls:
  5411 ;;		_delay
  5412 ;; This function is called by:
  5413 ;;		_init_lcd
  5414 ;;		_mensagem_inicial
  5415 ;;		_troca_de_tela
  5416 ;; This function uses a non-reentrant model
  5417 ;;
  5418                           
  5419                           	psect	text27
  5420  004C84                     __ptext27:
  5421                           	callstack 0
  5422  004C84                     _escreve_cmd_lcd:
  5423                           	callstack 25
  5424                           
  5425                           ;incstack = 0
  5426                           ;escreve_cmd_lcd@comando stored from wreg
  5427  004C84  6E1B               	movwf	escreve_cmd_lcd@comando^0,c
  5428                           
  5429                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
  5430  004C86  9483               	bcf	131,2,c	;volatile
  5431                           
  5432                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
  5433  004C88  9283               	bcf	131,1,c	;volatile
  5434                           
  5435                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
  5436  004C8A  9083               	bcf	131,0,c	;volatile
  5437                           
  5438                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
  5439  004C8C  A81B               	btfss	escreve_cmd_lcd@comando^0,4,c
  5440  004C8E  D002               	goto	l191
  5441  004C90  8883               	bsf	131,4,c	;volatile
  5442  004C92  D001               	goto	l13795
  5443  004C94                     l191:
  5444                           
  5445                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
  5446  004C94  9883               	bcf	131,4,c	;volatile
  5447  004C96                     l13795:
  5448                           
  5449                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
  5450  004C96  AA1B               	btfss	escreve_cmd_lcd@comando^0,5,c
  5451  004C98  D002               	goto	l193
  5452  004C9A  8A83               	bsf	131,5,c	;volatile
  5453  004C9C  D001               	goto	l13799
  5454  004C9E                     l193:
  5455                           
  5456                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
  5457  004C9E  9A83               	bcf	131,5,c	;volatile
  5458  004CA0                     l13799:
  5459                           
  5460                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
  5461  004CA0  AC1B               	btfss	escreve_cmd_lcd@comando^0,6,c
  5462  004CA2  D002               	goto	l195
  5463  004CA4  8C83               	bsf	131,6,c	;volatile
  5464  004CA6  D001               	goto	l13803
  5465  004CA8                     l195:
  5466                           
  5467                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
  5468  004CA8  9C83               	bcf	131,6,c	;volatile
  5469  004CAA                     l13803:
  5470                           
  5471                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
  5472  004CAA  AE1B               	btfss	escreve_cmd_lcd@comando^0,7,c
  5473  004CAC  D002               	goto	l197
  5474  004CAE  8E83               	bsf	131,7,c	;volatile
  5475  004CB0  D001               	goto	l198
  5476  004CB2                     l197:
  5477                           
  5478                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
  5479  004CB2  9E83               	bcf	131,7,c	;volatile
  5480  004CB4                     l198:
  5481                           
  5482                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
  5483  004CB4  8083               	bsf	131,0,c	;volatile
  5484                           
  5485                           ;display_lcd.c: 181: delay();
  5486  004CB6  EC65  F02E         	call	_delay	;wreg free
  5487                           
  5488                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
  5489  004CBA  9083               	bcf	131,0,c	;volatile
  5490                           
  5491                           ;display_lcd.c: 183: delay();
  5492  004CBC  EC65  F02E         	call	_delay	;wreg free
  5493                           
  5494                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
  5495  004CC0  A01B               	btfss	escreve_cmd_lcd@comando^0,0,c
  5496  004CC2  D002               	goto	l199
  5497  004CC4  8883               	bsf	131,4,c	;volatile
  5498  004CC6  D001               	goto	l200
  5499  004CC8                     l199:
  5500                           
  5501                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
  5502  004CC8  9883               	bcf	131,4,c	;volatile
  5503  004CCA                     l200:
  5504                           
  5505                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
  5506  004CCA  A21B               	btfss	escreve_cmd_lcd@comando^0,1,c
  5507  004CCC  D002               	goto	l201
  5508  004CCE  8A83               	bsf	131,5,c	;volatile
  5509  004CD0  D001               	goto	l202
  5510  004CD2                     l201:
  5511                           
  5512                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
  5513  004CD2  9A83               	bcf	131,5,c	;volatile
  5514  004CD4                     l202:
  5515                           
  5516                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
  5517  004CD4  A41B               	btfss	escreve_cmd_lcd@comando^0,2,c
  5518  004CD6  D002               	goto	l203
  5519  004CD8  8C83               	bsf	131,6,c	;volatile
  5520  004CDA  D001               	goto	l204
  5521  004CDC                     l203:
  5522                           
  5523                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
  5524  004CDC  9C83               	bcf	131,6,c	;volatile
  5525  004CDE                     l204:
  5526                           
  5527                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
  5528  004CDE  A61B               	btfss	escreve_cmd_lcd@comando^0,3,c
  5529  004CE0  D002               	goto	l205
  5530  004CE2  8E83               	bsf	131,7,c	;volatile
  5531  004CE4  D001               	goto	l206
  5532  004CE6                     l205:
  5533                           
  5534                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
  5535  004CE6  9E83               	bcf	131,7,c	;volatile
  5536  004CE8                     l206:
  5537                           
  5538                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
  5539  004CE8  8083               	bsf	131,0,c	;volatile
  5540                           
  5541                           ;display_lcd.c: 197: delay();
  5542  004CEA  EC65  F02E         	call	_delay	;wreg free
  5543                           
  5544                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
  5545  004CEE  9083               	bcf	131,0,c	;volatile
  5546                           
  5547                           ;display_lcd.c: 199: delay();
  5548  004CF0  EC65  F02E         	call	_delay	;wreg free
  5549                           
  5550                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
  5551  004CF4  041B               	decf	escreve_cmd_lcd@comando^0,w,c
  5552  004CF6  B4D8               	btfsc	status,2,c
  5553  004CF8  D008               	goto	u15180
  5554  004CFA  0E02               	movlw	2
  5555  004CFC  181B               	xorwf	escreve_cmd_lcd@comando^0,w,c
  5556  004CFE  B4D8               	btfsc	status,2,c
  5557  004D00  D004               	goto	u15180
  5558  004D02  0E03               	movlw	3
  5559  004D04  181B               	xorwf	escreve_cmd_lcd@comando^0,w,c
  5560  004D06  A4D8               	btfss	status,2,c
  5561  004D08  0012               	return	
  5562  004D0A                     u15180:
  5563                           
  5564                           ;display_lcd.c: 205: { delay(); }
  5565  004D0A  EC65  F02E         	call	_delay	;wreg free
  5566  004D0E  0012               	return		;funcret
  5567  004D10                     __end_of_escreve_cmd_lcd:
  5568                           	callstack 0
  5569                           
  5570 ;; *************** function _verifica_fence_externo *****************
  5571 ;; Defined at:
  5572 ;;		line 278 in file "main.c"
  5573 ;; Parameters:    Size  Location     Type
  5574 ;;		None
  5575 ;; Auto vars:     Size  Location     Type
  5576 ;;		None
  5577 ;; Return value:  Size  Location     Type
  5578 ;;                  1    wreg      void 
  5579 ;; Registers used:
  5580 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/1
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5586 ;;      Params:         0       0       0       0       0       0       0       0       0
  5587 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5588 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5589 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5590 ;;Total ram usage:        1 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; Hardware stack levels required when called:    7
  5593 ;; This function calls:
  5594 ;;		_armazena_latitude
  5595 ;;		_armazena_longitude
  5596 ;;		_calcula_diff_graus
  5597 ;;		_calcula_diff_minutos
  5598 ;;		_monta_sd
  5599 ;;		_verifica_diferenca_graus
  5600 ;;		_verifica_diferenca_minutos
  5601 ;;		_verifica_plausibilidade_lat
  5602 ;;		_verifica_plausibilidade_long
  5603 ;; This function is called by:
  5604 ;;		_disparo_gravacao
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           	psect	text28
  5609  004D9A                     __ptext28:
  5610                           	callstack 0
  5611  004D9A                     _verifica_fence_externo:
  5612                           	callstack 21
  5613                           
  5614                           ;main.c: 280: armazena_latitude();
  5615                           
  5616                           ;incstack = 0
  5617  004D9A  ECC7  F02E         	call	_armazena_latitude	;wreg free
  5618                           
  5619                           ;main.c: 281: armazena_longitude();
  5620  004D9E  ECBA  F02E         	call	_armazena_longitude	;wreg free
  5621                           
  5622                           ;main.c: 283: verifica_diferenca_graus(0);
  5623  004DA2  0E00               	movlw	0
  5624  004DA4  EC7E  F017         	call	_verifica_diferenca_graus
  5625                           
  5626                           ;main.c: 284: calcula_diff_graus(0);
  5627  004DA8  0E00               	movlw	0
  5628  004DAA  EC3C  F020         	call	_calcula_diff_graus
  5629                           
  5630                           ;main.c: 286: verifica_diferenca_graus(1);
  5631  004DAE  0E01               	movlw	1
  5632  004DB0  EC7E  F017         	call	_verifica_diferenca_graus
  5633                           
  5634                           ;main.c: 287: calcula_diff_graus(1);
  5635  004DB4  0E01               	movlw	1
  5636  004DB6  EC3C  F020         	call	_calcula_diff_graus
  5637                           
  5638                           ;main.c: 290: verifica_diferenca_minutos(0);
  5639  004DBA  0E00               	movlw	0
  5640  004DBC  ECC5  F015         	call	_verifica_diferenca_minutos
  5641                           
  5642                           ;main.c: 291: calcula_diff_minutos(0);
  5643  004DC0  0E00               	movlw	0
  5644  004DC2  ECA8  F020         	call	_calcula_diff_minutos
  5645                           
  5646                           ;main.c: 293: verifica_diferenca_minutos(1);
  5647  004DC6  0E01               	movlw	1
  5648  004DC8  ECC5  F015         	call	_verifica_diferenca_minutos
  5649                           
  5650                           ;main.c: 294: calcula_diff_minutos(1);
  5651  004DCC  0E01               	movlw	1
  5652  004DCE  ECA8  F020         	call	_calcula_diff_minutos
  5653                           
  5654                           ;main.c: 297: fence_flag[0].point = verifica_plausibilidade_long();
  5655  004DD2  EC92  F022         	call	_verifica_plausibilidade_long	;wreg free
  5656  004DD6  6E2F               	movwf	??_verifica_fence_externo^0,c
  5657  004DD8  5032               	movf	_fence_flag^0,w,c
  5658  004DDA  182F               	xorwf	??_verifica_fence_externo^0,w,c
  5659  004DDC  0BFE               	andlw	-2
  5660  004DDE  182F               	xorwf	??_verifica_fence_externo^0,w,c
  5661  004DE0  6E32               	movwf	_fence_flag^0,c
  5662                           
  5663                           ; BSR set to: 1
  5664                           ;main.c: 298: fence_flag[1].point = verifica_plausibilidade_lat();
  5665  004DE2  ECEA  F022         	call	_verifica_plausibilidade_lat	;wreg free
  5666  004DE6  6E2F               	movwf	??_verifica_fence_externo^0,c
  5667  004DE8  5033               	movf	(_fence_flag+1)^0,w,c
  5668  004DEA  182F               	xorwf	??_verifica_fence_externo^0,w,c
  5669  004DEC  0BFE               	andlw	-2
  5670  004DEE  182F               	xorwf	??_verifica_fence_externo^0,w,c
  5671  004DF0  6E33               	movwf	(_fence_flag+1)^0,c
  5672                           
  5673                           ; BSR set to: 1
  5674                           ;main.c: 300: if(fence_flag[0].point || fence_flag[1].point)
  5675  004DF2  B032               	btfsc	_fence_flag^0,0,c
  5676  004DF4  D002               	goto	u15260
  5677                           
  5678                           ; BSR set to: 1
  5679  004DF6  A033               	btfss	(_fence_flag+1)^0,0,c
  5680  004DF8  D009               	goto	l1436
  5681  004DFA                     u15260:
  5682                           
  5683                           ; BSR set to: 1
  5684                           ;main.c: 301: {;main.c: 302: fence_flag[2].point = 1;
  5685  004DFA  8034               	bsf	(_fence_flag+2)^0,0,c
  5686                           
  5687                           ; BSR set to: 1
  5688                           ;main.c: 303: monta_sd(4, "FORA");
  5689  004DFC  0E64               	movlw	low STR_24
  5690  004DFE  6E1D               	movwf	monta_sd@dado^0,c
  5691  004E00  0E62               	movlw	high STR_24
  5692  004E02  6E1E               	movwf	(monta_sd@dado+1)^0,c
  5693  004E04  0E04               	movlw	4
  5694  004E06  ECC2  F014         	call	_monta_sd
  5695                           
  5696                           ;main.c: 304: }
  5697  004E0A  0012               	return	
  5698  004E0C                     l1436:
  5699                           
  5700                           ; BSR set to: 1
  5701                           ;main.c: 305: else;main.c: 306: {;main.c: 307: fence_flag[2].point = 0;
  5702  004E0C  9034               	bcf	(_fence_flag+2)^0,0,c
  5703                           
  5704                           ; BSR set to: 1
  5705                           ;main.c: 308: monta_sd(4, "DENTRO");
  5706  004E0E  0E47               	movlw	low STR_25
  5707  004E10  6E1D               	movwf	monta_sd@dado^0,c
  5708  004E12  0E62               	movlw	high STR_25
  5709  004E14  6E1E               	movwf	(monta_sd@dado+1)^0,c
  5710  004E16  0E04               	movlw	4
  5711  004E18  ECC2  F014         	call	_monta_sd
  5712  004E1C  0012               	return		;funcret
  5713  004E1E                     __end_of_verifica_fence_externo:
  5714                           	callstack 0
  5715                           
  5716 ;; *************** function _verifica_plausibilidade_long *****************
  5717 ;; Defined at:
  5718 ;;		line 358 in file "bibliotecas/fence.c"
  5719 ;; Parameters:    Size  Location     Type
  5720 ;;		None
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;		None
  5723 ;; Return value:  Size  Location     Type
  5724 ;;                  1    wreg      unsigned char 
  5725 ;; Registers used:
  5726 ;;		wreg, status,2, status,0
  5727 ;; Tracked objects:
  5728 ;;		On entry : 0/1
  5729 ;;		On exit  : 3F/1
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5732 ;;      Params:         0       0       0       0       0       0       0       0       0
  5733 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5734 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5735 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5736 ;;Total ram usage:        0 bytes
  5737 ;; Hardware stack levels used:    1
  5738 ;; Hardware stack levels required when called:    3
  5739 ;; This function calls:
  5740 ;;		Nothing
  5741 ;; This function is called by:
  5742 ;;		_verifica_fence_externo
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746                           	psect	text29
  5747  004524                     __ptext29:
  5748                           	callstack 0
  5749  004524                     _verifica_plausibilidade_long:
  5750                           	callstack 24
  5751                           
  5752                           ;fence.c: 360: switch(temp_buff_long[0])
  5753                           
  5754                           ;incstack = 0
  5755  004524  D051               	goto	l10145
  5756  004526                     l10079:
  5757                           
  5758                           ; BSR set to: 2
  5759                           ;fence.c: 363: if(;fence.c: 364: ((poligono_ext[0].diff_long_min >= 0 &&;fence.c: 365: p
      +                          oligono_ext[1].diff_long_min <= 0) &&;fence.c: 367: (poligono_ext[0].diff_long_deg >= 0 
      +                          &&;fence.c: 368: poligono_ext[1].diff_long_deg <= 0)))
  5760  004526  0101               	movlb	1	; () banked
  5761  004528  BF6F               	btfsc	(_poligono_ext+61)& (0+255),7,b
  5762  00452A  D016               	goto	l10093
  5763                           
  5764                           ; BSR set to: 1
  5765  00452C  BFAD               	btfsc	(_poligono_ext+123)& (0+255),7,b
  5766  00452E  D007               	goto	u10040
  5767  004530  51AD               	movf	(_poligono_ext+123)& (0+255),w,b
  5768  004532  11AC               	iorwf	(_poligono_ext+122)& (0+255),w,b
  5769  004534  11AB               	iorwf	(_poligono_ext+121)& (0+255),w,b
  5770  004536  E110               	bnz	l10093
  5771  004538  05AA               	decf	(_poligono_ext+120)& (0+255),w,b
  5772  00453A  B0D8               	btfsc	status,0,c
  5773  00453C  D00D               	goto	l10093
  5774  00453E                     u10040:
  5775                           
  5776                           ; BSR set to: 1
  5777  00453E  BF4F               	btfsc	(_poligono_ext+29)& (0+255),7,b
  5778  004540  D00B               	goto	l10093
  5779                           
  5780                           ; BSR set to: 1
  5781  004542  BF8D               	btfsc	(_poligono_ext+91)& (0+255),7,b
  5782  004544  D007               	goto	u10060
  5783  004546  518D               	movf	(_poligono_ext+91)& (0+255),w,b
  5784  004548  118C               	iorwf	(_poligono_ext+90)& (0+255),w,b
  5785  00454A  118B               	iorwf	(_poligono_ext+89)& (0+255),w,b
  5786  00454C  E105               	bnz	l10093
  5787  00454E  058A               	decf	(_poligono_ext+88)& (0+255),w,b
  5788  004550  B0D8               	btfsc	status,0,c
  5789  004552  D002               	goto	l10093
  5790  004554                     u10060:
  5791                           
  5792                           ; BSR set to: 1
  5793                           ;fence.c: 369: {;fence.c: 370: return 0;
  5794  004554  0E00               	movlw	0
  5795  004556  0012               	return	
  5796  004558                     l10093:
  5797                           
  5798                           ; BSR set to: 1
  5799                           ;fence.c: 372: else if((poligono_ext[0].diff_long_min == 0 ||;fence.c: 373: poligono_ext
      +                          [1].diff_long_min == 0 ) &&;fence.c: 376: (poligono_ext[0].diff_long_deg == 0 ||;fence.c
      +                          : 377: poligono_ext[1].diff_long_deg == 0))
  5800  004558  516C               	movf	(_poligono_ext+58)& (0+255),w,b
  5801  00455A  116D               	iorwf	(_poligono_ext+59)& (0+255),w,b
  5802  00455C  116E               	iorwf	(_poligono_ext+60)& (0+255),w,b
  5803  00455E  116F               	iorwf	(_poligono_ext+61)& (0+255),w,b
  5804  004560  B4D8               	btfsc	status,2,c
  5805  004562  D006               	goto	u10080
  5806  004564                     u10070:
  5807                           
  5808                           ; BSR set to: 1
  5809  004564  51AA               	movf	(_poligono_ext+120)& (0+255),w,b
  5810  004566  11AB               	iorwf	(_poligono_ext+121)& (0+255),w,b
  5811  004568  11AC               	iorwf	(_poligono_ext+122)& (0+255),w,b
  5812  00456A  11AD               	iorwf	(_poligono_ext+123)& (0+255),w,b
  5813  00456C  A4D8               	btfss	status,2,c
  5814  00456E  D00C               	goto	l10107
  5815  004570                     u10080:
  5816                           
  5817                           ; BSR set to: 1
  5818  004570  514C               	movf	(_poligono_ext+26)& (0+255),w,b
  5819  004572  114D               	iorwf	(_poligono_ext+27)& (0+255),w,b
  5820  004574  114E               	iorwf	(_poligono_ext+28)& (0+255),w,b
  5821  004576  114F               	iorwf	(_poligono_ext+29)& (0+255),w,b
  5822  004578  B4D8               	btfsc	status,2,c
  5823  00457A  D7EC               	goto	u10060
  5824                           
  5825                           ; BSR set to: 1
  5826  00457C  518A               	movf	(_poligono_ext+88)& (0+255),w,b
  5827  00457E  118B               	iorwf	(_poligono_ext+89)& (0+255),w,b
  5828  004580  118C               	iorwf	(_poligono_ext+90)& (0+255),w,b
  5829  004582  118D               	iorwf	(_poligono_ext+91)& (0+255),w,b
  5830  004584  B4D8               	btfsc	status,2,c
  5831  004586  D7E6               	goto	u10060
  5832  004588                     l10107:
  5833                           
  5834                           ; BSR set to: 1
  5835                           ;fence.c: 381: else;fence.c: 382: {;fence.c: 383: return 1;
  5836  004588  0E01               	movlw	1
  5837  00458A  0012               	return	
  5838  00458C                     l10111:
  5839                           
  5840                           ; BSR set to: 2
  5841                           ;fence.c: 388: if(;fence.c: 389: (poligono_ext[0].diff_long_min <= 0 &&;fence.c: 390: po
      +                          ligono_ext[1].diff_long_min >= 0 ) &&;fence.c: 391: (poligono_ext[0].diff_lat_deg <= 0 &
      +                          &;fence.c: 392: poligono_ext[1].diff_lat_deg >= 0))
  5842  00458C  0101               	movlb	1	; () banked
  5843  00458E  BF6F               	btfsc	(_poligono_ext+61)& (0+255),7,b
  5844  004590  D007               	goto	u10110
  5845  004592  516F               	movf	(_poligono_ext+61)& (0+255),w,b
  5846  004594  116E               	iorwf	(_poligono_ext+60)& (0+255),w,b
  5847  004596  116D               	iorwf	(_poligono_ext+59)& (0+255),w,b
  5848  004598  E110               	bnz	l10125
  5849  00459A  056C               	decf	(_poligono_ext+58)& (0+255),w,b
  5850  00459C  B0D8               	btfsc	status,0,c
  5851  00459E  D00D               	goto	l10125
  5852  0045A0                     u10110:
  5853                           
  5854                           ; BSR set to: 1
  5855  0045A0  BFAD               	btfsc	(_poligono_ext+123)& (0+255),7,b
  5856  0045A2  D00B               	goto	l10125
  5857                           
  5858                           ; BSR set to: 1
  5859  0045A4  BF4B               	btfsc	(_poligono_ext+25)& (0+255),7,b
  5860  0045A6  D007               	goto	u10130
  5861  0045A8  514B               	movf	(_poligono_ext+25)& (0+255),w,b
  5862  0045AA  114A               	iorwf	(_poligono_ext+24)& (0+255),w,b
  5863  0045AC  1149               	iorwf	(_poligono_ext+23)& (0+255),w,b
  5864  0045AE  E105               	bnz	l10125
  5865  0045B0  0548               	decf	(_poligono_ext+22)& (0+255),w,b
  5866  0045B2  B0D8               	btfsc	status,0,c
  5867  0045B4  D002               	goto	l10125
  5868  0045B6                     u10130:
  5869                           
  5870                           ; BSR set to: 1
  5871  0045B6  AF89               	btfss	(_poligono_ext+87)& (0+255),7,b
  5872  0045B8  D7CD               	goto	u10060
  5873  0045BA                     l10125:
  5874                           
  5875                           ; BSR set to: 1
  5876                           ;fence.c: 396: else if((poligono_ext[0].diff_long_min == 0 ||;fence.c: 397: poligono_ext
      +                          [1].diff_long_min == 0) &&;fence.c: 398: (poligono_ext[0].diff_long_deg == 0 ||;fence.c:
      +                           399: poligono_ext[1].diff_long_deg == 0))
  5877  0045BA  516C               	movf	(_poligono_ext+58)& (0+255),w,b
  5878  0045BC  116D               	iorwf	(_poligono_ext+59)& (0+255),w,b
  5879  0045BE  116E               	iorwf	(_poligono_ext+60)& (0+255),w,b
  5880  0045C0  116F               	iorwf	(_poligono_ext+61)& (0+255),w,b
  5881  0045C2  A4D8               	btfss	status,2,c
  5882  0045C4  D7CF               	goto	u10070
  5883                           
  5884                           ; BSR set to: 1
  5885  0045C6  D7D4               	goto	u10080
  5886  0045C8                     l10145:
  5887  0045C8  0102               	movlb	2	; () banked
  5888  0045CA  519A               	movf	_temp_buff_long& (0+255),w,b
  5889                           
  5890                           ; Switch size 1, requested type "simple"
  5891                           ; Number of cases is 1, Range of values is 45 to 45
  5892                           ; switch strategies available:
  5893                           ; Name         Instructions Cycles
  5894                           ; simple_byte            4     3 (average)
  5895                           ;	Chosen strategy is simple_byte
  5896  0045CC  0A2D               	xorlw	45	; case 45
  5897  0045CE  B4D8               	btfsc	status,2,c
  5898  0045D0  D7AA               	goto	l10079
  5899  0045D2  D7DC               	goto	l10111
  5900  0045D4                     __end_of_verifica_plausibilidade_long:
  5901                           	callstack 0
  5902                           
  5903 ;; *************** function _verifica_plausibilidade_lat *****************
  5904 ;; Defined at:
  5905 ;;		line 420 in file "bibliotecas/fence.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;		None
  5908 ;; Auto vars:     Size  Location     Type
  5909 ;;		None
  5910 ;; Return value:  Size  Location     Type
  5911 ;;                  1    wreg      unsigned char 
  5912 ;; Registers used:
  5913 ;;		wreg, status,2, status,0
  5914 ;; Tracked objects:
  5915 ;;		On entry : 3F/1
  5916 ;;		On exit  : 3F/1
  5917 ;;		Unchanged: 0/0
  5918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5919 ;;      Params:         0       0       0       0       0       0       0       0       0
  5920 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5921 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5922 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5923 ;;Total ram usage:        0 bytes
  5924 ;; Hardware stack levels used:    1
  5925 ;; Hardware stack levels required when called:    3
  5926 ;; This function calls:
  5927 ;;		Nothing
  5928 ;; This function is called by:
  5929 ;;		_verifica_fence_externo
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           	psect	text30
  5934  0045D4                     __ptext30:
  5935                           	callstack 0
  5936  0045D4                     _verifica_plausibilidade_lat:
  5937                           	callstack 24
  5938                           
  5939                           ; BSR set to: 1
  5940                           ;fence.c: 422: switch(temp_buff_lat[0])
  5941                           
  5942                           ; BSR set to: 1
  5943                           ;incstack = 0
  5944  0045D4  D051               	goto	l10215
  5945  0045D6                     l10149:
  5946                           
  5947                           ; BSR set to: 2
  5948                           ;fence.c: 425: if(;fence.c: 426: (poligono_ext[0].diff_lat_min <= 0 &&;fence.c: 427: pol
      +                          igono_ext[1].diff_lat_min >= 0) &&;fence.c: 429: (poligono_ext[0].diff_lat_deg <= 0 &&;f
      +                          ence.c: 430: poligono_ext[1].diff_lat_deg >= 0))
  5949  0045D6  0101               	movlb	1	; () banked
  5950  0045D8  BF6B               	btfsc	(_poligono_ext+57)& (0+255),7,b
  5951  0045DA  D007               	goto	u10190
  5952  0045DC  516B               	movf	(_poligono_ext+57)& (0+255),w,b
  5953  0045DE  116A               	iorwf	(_poligono_ext+56)& (0+255),w,b
  5954  0045E0  1169               	iorwf	(_poligono_ext+55)& (0+255),w,b
  5955  0045E2  E112               	bnz	l10163
  5956  0045E4  0568               	decf	(_poligono_ext+54)& (0+255),w,b
  5957  0045E6  B0D8               	btfsc	status,0,c
  5958  0045E8  D00F               	goto	l10163
  5959  0045EA                     u10190:
  5960                           
  5961                           ; BSR set to: 1
  5962  0045EA  BFA9               	btfsc	(_poligono_ext+119)& (0+255),7,b
  5963  0045EC  D00D               	goto	l10163
  5964                           
  5965                           ; BSR set to: 1
  5966  0045EE  BF4B               	btfsc	(_poligono_ext+25)& (0+255),7,b
  5967  0045F0  D007               	goto	u10210
  5968  0045F2  514B               	movf	(_poligono_ext+25)& (0+255),w,b
  5969  0045F4  114A               	iorwf	(_poligono_ext+24)& (0+255),w,b
  5970  0045F6  1149               	iorwf	(_poligono_ext+23)& (0+255),w,b
  5971  0045F8  E107               	bnz	l10163
  5972  0045FA  0548               	decf	(_poligono_ext+22)& (0+255),w,b
  5973  0045FC  B0D8               	btfsc	status,0,c
  5974  0045FE  D004               	goto	l10163
  5975  004600                     u10210:
  5976                           
  5977                           ; BSR set to: 1
  5978  004600  BF89               	btfsc	(_poligono_ext+87)& (0+255),7,b
  5979  004602  D002               	goto	l10163
  5980  004604                     u10220:
  5981                           
  5982                           ; BSR set to: 1
  5983                           ;fence.c: 431: {;fence.c: 433: return 0;
  5984  004604  0E00               	movlw	0
  5985  004606  0012               	return	
  5986  004608                     l10163:
  5987                           
  5988                           ; BSR set to: 1
  5989                           ;fence.c: 435: else if(;fence.c: 436: (poligono_ext[0].diff_lat_min == 0 ||;fence.c: 437
      +                          : poligono_ext[1].diff_lat_min == 0) &&;fence.c: 438: (poligono_ext[0].diff_lat_deg == 0
      +                           ||;fence.c: 439: poligono_ext[1].diff_lat_deg == 0))
  5990  004608  5168               	movf	(_poligono_ext+54)& (0+255),w,b
  5991  00460A  1169               	iorwf	(_poligono_ext+55)& (0+255),w,b
  5992  00460C  116A               	iorwf	(_poligono_ext+56)& (0+255),w,b
  5993  00460E  116B               	iorwf	(_poligono_ext+57)& (0+255),w,b
  5994  004610  B4D8               	btfsc	status,2,c
  5995  004612  D006               	goto	u10240
  5996  004614                     u10230:
  5997                           
  5998                           ; BSR set to: 1
  5999  004614  51A6               	movf	(_poligono_ext+116)& (0+255),w,b
  6000  004616  11A7               	iorwf	(_poligono_ext+117)& (0+255),w,b
  6001  004618  11A8               	iorwf	(_poligono_ext+118)& (0+255),w,b
  6002  00461A  11A9               	iorwf	(_poligono_ext+119)& (0+255),w,b
  6003  00461C  A4D8               	btfss	status,2,c
  6004  00461E  D00C               	goto	l10177
  6005  004620                     u10240:
  6006                           
  6007                           ; BSR set to: 1
  6008  004620  5148               	movf	(_poligono_ext+22)& (0+255),w,b
  6009  004622  1149               	iorwf	(_poligono_ext+23)& (0+255),w,b
  6010  004624  114A               	iorwf	(_poligono_ext+24)& (0+255),w,b
  6011  004626  114B               	iorwf	(_poligono_ext+25)& (0+255),w,b
  6012  004628  B4D8               	btfsc	status,2,c
  6013  00462A  D7EC               	goto	u10220
  6014                           
  6015                           ; BSR set to: 1
  6016  00462C  5186               	movf	(_poligono_ext+84)& (0+255),w,b
  6017  00462E  1187               	iorwf	(_poligono_ext+85)& (0+255),w,b
  6018  004630  1188               	iorwf	(_poligono_ext+86)& (0+255),w,b
  6019  004632  1189               	iorwf	(_poligono_ext+87)& (0+255),w,b
  6020  004634  B4D8               	btfsc	status,2,c
  6021  004636  D7E6               	goto	u10220
  6022  004638                     l10177:
  6023                           
  6024                           ; BSR set to: 1
  6025                           ;fence.c: 444: else;fence.c: 445: {;fence.c: 446: return 1;
  6026  004638  0E01               	movlw	1
  6027  00463A  0012               	return	
  6028  00463C                     l10181:
  6029                           
  6030                           ; BSR set to: 2
  6031                           ;fence.c: 451: if((poligono_ext[0].diff_lat_min >= 0 &&;fence.c: 452: poligono_ext[1].di
      +                          ff_lat_min <= 0 ) &&;fence.c: 455: (poligono_ext[0].diff_lat_deg >= 0 &&;fence.c: 456: p
      +                          oligono_ext[1].diff_lat_deg <= 0);fence.c: 457: )
  6032  00463C  0101               	movlb	1	; () banked
  6033  00463E  BF6B               	btfsc	(_poligono_ext+57)& (0+255),7,b
  6034  004640  D014               	goto	l10195
  6035                           
  6036                           ; BSR set to: 1
  6037  004642  BFA9               	btfsc	(_poligono_ext+119)& (0+255),7,b
  6038  004644  D007               	goto	u10280
  6039  004646  51A9               	movf	(_poligono_ext+119)& (0+255),w,b
  6040  004648  11A8               	iorwf	(_poligono_ext+118)& (0+255),w,b
  6041  00464A  11A7               	iorwf	(_poligono_ext+117)& (0+255),w,b
  6042  00464C  E10E               	bnz	l10195
  6043  00464E  05A6               	decf	(_poligono_ext+116)& (0+255),w,b
  6044  004650  B0D8               	btfsc	status,0,c
  6045  004652  D00B               	goto	l10195
  6046  004654                     u10280:
  6047                           
  6048                           ; BSR set to: 1
  6049  004654  BF4B               	btfsc	(_poligono_ext+25)& (0+255),7,b
  6050  004656  D009               	goto	l10195
  6051                           
  6052                           ; BSR set to: 1
  6053  004658  BF89               	btfsc	(_poligono_ext+87)& (0+255),7,b
  6054  00465A  D7D4               	goto	u10220
  6055  00465C  5189               	movf	(_poligono_ext+87)& (0+255),w,b
  6056  00465E  1188               	iorwf	(_poligono_ext+86)& (0+255),w,b
  6057  004660  1187               	iorwf	(_poligono_ext+85)& (0+255),w,b
  6058  004662  E103               	bnz	l10195
  6059  004664  0586               	decf	(_poligono_ext+84)& (0+255),w,b
  6060  004666  A0D8               	btfss	status,0,c
  6061  004668  D7CD               	goto	u10220
  6062  00466A                     l10195:
  6063                           
  6064                           ; BSR set to: 1
  6065                           ;fence.c: 461: else if((poligono_ext[0].diff_lat_min == 0 ||;fence.c: 462: poligono_ext[
      +                          1].diff_lat_min == 0) &&;fence.c: 464: (poligono_ext[0].diff_lat_deg == 0 ||;fence.c: 46
      +                          5: poligono_ext[1].diff_lat_deg == 0))
  6066  00466A  5168               	movf	(_poligono_ext+54)& (0+255),w,b
  6067  00466C  1169               	iorwf	(_poligono_ext+55)& (0+255),w,b
  6068  00466E  116A               	iorwf	(_poligono_ext+56)& (0+255),w,b
  6069  004670  116B               	iorwf	(_poligono_ext+57)& (0+255),w,b
  6070  004672  A4D8               	btfss	status,2,c
  6071  004674  D7CF               	goto	u10230
  6072                           
  6073                           ; BSR set to: 1
  6074  004676  D7D4               	goto	u10240
  6075  004678                     l10215:
  6076                           
  6077                           ; BSR set to: 1
  6078  004678  0102               	movlb	2	; () banked
  6079  00467A  51A6               	movf	_temp_buff_lat& (0+255),w,b
  6080                           
  6081                           ; Switch size 1, requested type "simple"
  6082                           ; Number of cases is 1, Range of values is 45 to 45
  6083                           ; switch strategies available:
  6084                           ; Name         Instructions Cycles
  6085                           ; simple_byte            4     3 (average)
  6086                           ;	Chosen strategy is simple_byte
  6087  00467C  0A2D               	xorlw	45	; case 45
  6088  00467E  B4D8               	btfsc	status,2,c
  6089  004680  D7AA               	goto	l10149
  6090  004682  D7DC               	goto	l10181
  6091  004684                     __end_of_verifica_plausibilidade_lat:
  6092                           	callstack 0
  6093                           
  6094 ;; *************** function _verifica_diferenca_minutos *****************
  6095 ;; Defined at:
  6096 ;;		line 228 in file "bibliotecas/fence.c"
  6097 ;; Parameters:    Size  Location     Type
  6098 ;;  select_data     1    wreg     unsigned char 
  6099 ;; Auto vars:     Size  Location     Type
  6100 ;;  select_data     1   28[COMRAM] unsigned char 
  6101 ;;  i               1   33[COMRAM] unsigned char 
  6102 ;;  point           1   32[COMRAM] unsigned char 
  6103 ;;  j               1   31[COMRAM] unsigned char 
  6104 ;;  point_index_    1   30[COMRAM] unsigned char 
  6105 ;;  point_index_    1   29[COMRAM] unsigned char 
  6106 ;; Return value:  Size  Location     Type
  6107 ;;                  1    wreg      void 
  6108 ;; Registers used:
  6109 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6110 ;; Tracked objects:
  6111 ;;		On entry : 0/1
  6112 ;;		On exit  : 0/0
  6113 ;;		Unchanged: 0/0
  6114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6115 ;;      Params:         0       0       0       0       0       0       0       0       0
  6116 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6117 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6118 ;;      Totals:        10       0       0       0       0       0       0       0       0
  6119 ;;Total ram usage:       10 bytes
  6120 ;; Hardware stack levels used:    1
  6121 ;; Hardware stack levels required when called:    3
  6122 ;; This function calls:
  6123 ;;		Nothing
  6124 ;; This function is called by:
  6125 ;;		_verifica_fence_externo
  6126 ;; This function uses a non-reentrant model
  6127 ;;
  6128                           
  6129                           	psect	text31
  6130  002B8A                     __ptext31:
  6131                           	callstack 0
  6132  002B8A                     _verifica_diferenca_minutos:
  6133                           	callstack 24
  6134                           
  6135                           ; BSR set to: 1
  6136                           ;incstack = 0
  6137                           ;verifica_diferenca_minutos@select_data stored from wreg
  6138  002B8A  6E1D               	movwf	verifica_diferenca_minutos@select_data^0,c
  6139                           
  6140                           ;fence.c: 230: unsigned char point, point_index_lat ,point_index_long;;fence.c: 231: uns
      +                          igned char i, j;;fence.c: 233: point_index_lat = 0;
  6141  002B8C  0E00               	movlw	0
  6142  002B8E  6E1E               	movwf	verifica_diferenca_minutos@point_index_lat^0,c
  6143                           
  6144                           ;fence.c: 234: point_index_long = 0;
  6145  002B90  0E00               	movlw	0
  6146  002B92  6E1F               	movwf	verifica_diferenca_minutos@point_index_long^0,c
  6147                           
  6148                           ;fence.c: 235: point = 0;
  6149  002B94  0E00               	movlw	0
  6150  002B96  6E21               	movwf	verifica_diferenca_minutos@point^0,c
  6151                           
  6152                           ;fence.c: 236: switch(select_data)
  6153  002B98  D0CE               	goto	l10045
  6154  002B9A                     l9963:
  6155                           
  6156                           ;fence.c: 240: {;fence.c: 241: for(i=6; i<11; i++)
  6157  002B9A  0E06               	movlw	6
  6158  002B9C  6E22               	movwf	verifica_diferenca_minutos@i^0,c
  6159  002B9E                     l9969:
  6160                           
  6161                           ;fence.c: 242: {;fence.c: 243: if(point == 0 || point == 2)
  6162  002B9E  5021               	movf	verifica_diferenca_minutos@point^0,w,c
  6163  002BA0  B4D8               	btfsc	status,2,c
  6164  002BA2  D004               	goto	u9840
  6165  002BA4  0E02               	movlw	2
  6166  002BA6  1821               	xorwf	verifica_diferenca_minutos@point^0,w,c
  6167  002BA8  A4D8               	btfss	status,2,c
  6168  002BAA  D059               	goto	u9880
  6169  002BAC                     u9840:
  6170                           
  6171                           ;fence.c: 244: {;fence.c: 245: if(point == 2 && !point_index_lat)
  6172  002BAC  0E02               	movlw	2
  6173  002BAE  1821               	xorwf	verifica_diferenca_minutos@point^0,w,c
  6174  002BB0  A4D8               	btfss	status,2,c
  6175  002BB2  D003               	goto	l9979
  6176  002BB4  501E               	movf	verifica_diferenca_minutos@point_index_lat^0,w,c
  6177  002BB6  B4D8               	btfsc	status,2,c
  6178                           
  6179                           ;fence.c: 246: {;fence.c: 247: point_index_lat++;
  6180  002BB8  2A1E               	incf	verifica_diferenca_minutos@point_index_lat^0,f,c
  6181  002BBA                     l9979:
  6182                           
  6183                           ;fence.c: 248: };fence.c: 251: for(j= 0; i < 11; j++)
  6184  002BBA  0E00               	movlw	0
  6185  002BBC  6E20               	movwf	verifica_diferenca_minutos@j^0,c
  6186  002BBE                     l9981:
  6187  002BBE  0E0A               	movlw	10
  6188  002BC0  6422               	cpfsgt	verifica_diferenca_minutos@i^0,c
  6189  002BC2  D001               	goto	l9985
  6190  002BC4  D048               	goto	l9995
  6191  002BC6                     l9985:
  6192                           
  6193                           ;fence.c: 252: {;fence.c: 253: poligono_ext[point_index_lat].fence_lat_min[j] = fence_di
      +                          ff_lat[point][i];
  6194  002BC6  5021               	movf	verifica_diferenca_minutos@point^0,w,c
  6195  002BC8  0D0B               	mullw	11
  6196  002BCA  0EB9               	movlw	low _fence_diff_lat
  6197  002BCC  6E19               	movwf	??_verifica_diferenca_minutos^0,c
  6198  002BCE  0E60               	movlw	high _fence_diff_lat
  6199  002BD0  6E1A               	movwf	(??_verifica_diferenca_minutos+1)^0,c
  6200  002BD2  50F3               	movf	243,w,c
  6201  002BD4  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  6202  002BD6  50F4               	movf	244,w,c
  6203  002BD8  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  6204  002BDA  5022               	movf	verifica_diferenca_minutos@i^0,w,c
  6205  002BDC  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  6206  002BDE  0E00               	movlw	0
  6207  002BE0  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  6208  002BE2  C019  FFF6         	movff	??_verifica_diferenca_minutos,tblptrl
  6209  002BE6  C01A  FFF7         	movff	??_verifica_diferenca_minutos+1,tblptrh
  6210  002BEA                     	if	0	;tblptru may be non-zero
  6211  002BEA                     	endif
  6212  002BEA                     	if	0	;tblptru may be non-zero
  6213  002BEA                     	endif
  6214  002BEA  501E               	movf	verifica_diferenca_minutos@point_index_lat^0,w,c
  6215  002BEC  0D3E               	mullw	62
  6216  002BEE  0E32               	movlw	low _poligono_ext
  6217  002BF0  6E1B               	movwf	(??_verifica_diferenca_minutos+2)^0,c
  6218  002BF2  0E01               	movlw	high _poligono_ext
  6219  002BF4  6E1C               	movwf	(??_verifica_diferenca_minutos+3)^0,c
  6220  002BF6  0E1E               	movlw	30
  6221  002BF8  261B               	addwf	(??_verifica_diferenca_minutos+2)^0,f,c
  6222  002BFA  0E00               	movlw	0
  6223  002BFC  221C               	addwfc	(??_verifica_diferenca_minutos+3)^0,f,c
  6224  002BFE  50F3               	movf	243,w,c
  6225  002C00  261B               	addwf	(??_verifica_diferenca_minutos+2)^0,f,c
  6226  002C02  50F4               	movf	244,w,c
  6227  002C04  221C               	addwfc	(??_verifica_diferenca_minutos+3)^0,f,c
  6228  002C06  5020               	movf	verifica_diferenca_minutos@j^0,w,c
  6229  002C08  241B               	addwf	(??_verifica_diferenca_minutos+2)^0,w,c
  6230  002C0A  6ED9               	movwf	fsr2l,c
  6231  002C0C  0E00               	movlw	0
  6232  002C0E  201C               	addwfc	(??_verifica_diferenca_minutos+3)^0,w,c
  6233  002C10  6EDA               	movwf	fsr2h,c
  6234  002C12  0008               	tblrd		*
  6235  002C14  CFF5 FFDF          	movff	tablat,indf2
  6236                           
  6237                           ;fence.c: 254: poligono_ext[point_index_lat].point_lat_min[j] = temp_buff_lat[i];
  6238  002C18  0EA6               	movlw	low _temp_buff_lat
  6239  002C1A  2422               	addwf	verifica_diferenca_minutos@i^0,w,c
  6240  002C1C  6ED9               	movwf	fsr2l,c
  6241  002C1E  6ADA               	clrf	fsr2h,c
  6242  002C20  0E02               	movlw	high _temp_buff_lat
  6243  002C22  22DA               	addwfc	fsr2h,f,c
  6244  002C24  501E               	movf	verifica_diferenca_minutos@point_index_lat^0,w,c
  6245  002C26  0D3E               	mullw	62
  6246  002C28  0E32               	movlw	low _poligono_ext
  6247  002C2A  6E19               	movwf	??_verifica_diferenca_minutos^0,c
  6248  002C2C  0E01               	movlw	high _poligono_ext
  6249  002C2E  6E1A               	movwf	(??_verifica_diferenca_minutos+1)^0,c
  6250  002C30  0E2A               	movlw	42
  6251  002C32  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  6252  002C34  0E00               	movlw	0
  6253  002C36  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  6254  002C38  50F3               	movf	243,w,c
  6255  002C3A  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  6256  002C3C  50F4               	movf	244,w,c
  6257  002C3E  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  6258  002C40  5020               	movf	verifica_diferenca_minutos@j^0,w,c
  6259  002C42  2419               	addwf	??_verifica_diferenca_minutos^0,w,c
  6260  002C44  6EE1               	movwf	fsr1l,c
  6261  002C46  0E00               	movlw	0
  6262  002C48  201A               	addwfc	(??_verifica_diferenca_minutos+1)^0,w,c
  6263  002C4A  6EE2               	movwf	fsr1h,c
  6264  002C4C  CFDF FFE7          	movff	indf2,indf1
  6265                           
  6266                           ;fence.c: 255: i++;
  6267  002C50  2A22               	incf	verifica_diferenca_minutos@i^0,f,c
  6268  002C52  2A20               	incf	verifica_diferenca_minutos@j^0,f,c
  6269  002C54  D7B4               	goto	l9981
  6270  002C56                     l9995:
  6271  002C56  2A22               	incf	verifica_diferenca_minutos@i^0,f,c
  6272  002C58  0E0A               	movlw	10
  6273  002C5A  6422               	cpfsgt	verifica_diferenca_minutos@i^0,c
  6274  002C5C  D7A0               	goto	l9969
  6275  002C5E                     u9880:
  6276                           
  6277                           ;fence.c: 265: };fence.c: 266: };fence.c: 267: point++;
  6278  002C5E  2A21               	incf	verifica_diferenca_minutos@point^0,f,c
  6279  002C60                     l10001:
  6280  002C60  0E03               	movlw	3
  6281  002C62  6421               	cpfsgt	verifica_diferenca_minutos@point^0,c
  6282  002C64  D79A               	goto	l9963
  6283  002C66  0012               	return	
  6284  002C68                     l10003:
  6285                           
  6286                           ;fence.c: 273: {;fence.c: 274: for(i=7; i<12; i++)
  6287  002C68  0E07               	movlw	7
  6288  002C6A  6E22               	movwf	verifica_diferenca_minutos@i^0,c
  6289  002C6C                     l10009:
  6290                           
  6291                           ;fence.c: 275: {;fence.c: 276: if(point == 0 || point == 2)
  6292  002C6C  5021               	movf	verifica_diferenca_minutos@point^0,w,c
  6293  002C6E  B4D8               	btfsc	status,2,c
  6294  002C70  D004               	goto	u9910
  6295  002C72  0E02               	movlw	2
  6296  002C74  1821               	xorwf	verifica_diferenca_minutos@point^0,w,c
  6297  002C76  A4D8               	btfss	status,2,c
  6298  002C78  D059               	goto	u9950
  6299  002C7A                     u9910:
  6300                           
  6301                           ;fence.c: 277: {;fence.c: 278: if(point == 2 && !point_index_long)
  6302  002C7A  0E02               	movlw	2
  6303  002C7C  1821               	xorwf	verifica_diferenca_minutos@point^0,w,c
  6304  002C7E  A4D8               	btfss	status,2,c
  6305  002C80  D003               	goto	l10019
  6306  002C82  501F               	movf	verifica_diferenca_minutos@point_index_long^0,w,c
  6307  002C84  B4D8               	btfsc	status,2,c
  6308                           
  6309                           ;fence.c: 279: {;fence.c: 280: point_index_long++;
  6310  002C86  2A1F               	incf	verifica_diferenca_minutos@point_index_long^0,f,c
  6311  002C88                     l10019:
  6312                           
  6313                           ;fence.c: 281: };fence.c: 286: for(j= 0; i < 12; j++)
  6314  002C88  0E00               	movlw	0
  6315  002C8A  6E20               	movwf	verifica_diferenca_minutos@j^0,c
  6316  002C8C                     l10021:
  6317  002C8C  0E0B               	movlw	11
  6318  002C8E  6422               	cpfsgt	verifica_diferenca_minutos@i^0,c
  6319  002C90  D001               	goto	l10025
  6320  002C92  D048               	goto	l10035
  6321  002C94                     l10025:
  6322                           
  6323                           ;fence.c: 287: {;fence.c: 288: poligono_ext[point_index_long].fence_long_min[j] = fence_
      +                          diff_long[point][i];
  6324  002C94  5021               	movf	verifica_diferenca_minutos@point^0,w,c
  6325  002C96  0D0C               	mullw	12
  6326  002C98  0E89               	movlw	low _fence_diff_long
  6327  002C9A  6E19               	movwf	??_verifica_diferenca_minutos^0,c
  6328  002C9C  0E60               	movlw	high _fence_diff_long
  6329  002C9E  6E1A               	movwf	(??_verifica_diferenca_minutos+1)^0,c
  6330  002CA0  50F3               	movf	243,w,c
  6331  002CA2  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  6332  002CA4  50F4               	movf	244,w,c
  6333  002CA6  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  6334  002CA8  5022               	movf	verifica_diferenca_minutos@i^0,w,c
  6335  002CAA  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  6336  002CAC  0E00               	movlw	0
  6337  002CAE  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  6338  002CB0  C019  FFF6         	movff	??_verifica_diferenca_minutos,tblptrl
  6339  002CB4  C01A  FFF7         	movff	??_verifica_diferenca_minutos+1,tblptrh
  6340  002CB8                     	if	0	;tblptru may be non-zero
  6341  002CB8                     	endif
  6342  002CB8                     	if	0	;tblptru may be non-zero
  6343  002CB8                     	endif
  6344  002CB8  501F               	movf	verifica_diferenca_minutos@point_index_long^0,w,c
  6345  002CBA  0D3E               	mullw	62
  6346  002CBC  0E32               	movlw	low _poligono_ext
  6347  002CBE  6E1B               	movwf	(??_verifica_diferenca_minutos+2)^0,c
  6348  002CC0  0E01               	movlw	high _poligono_ext
  6349  002CC2  6E1C               	movwf	(??_verifica_diferenca_minutos+3)^0,c
  6350  002CC4  0E24               	movlw	36
  6351  002CC6  261B               	addwf	(??_verifica_diferenca_minutos+2)^0,f,c
  6352  002CC8  0E00               	movlw	0
  6353  002CCA  221C               	addwfc	(??_verifica_diferenca_minutos+3)^0,f,c
  6354  002CCC  50F3               	movf	243,w,c
  6355  002CCE  261B               	addwf	(??_verifica_diferenca_minutos+2)^0,f,c
  6356  002CD0  50F4               	movf	244,w,c
  6357  002CD2  221C               	addwfc	(??_verifica_diferenca_minutos+3)^0,f,c
  6358  002CD4  5020               	movf	verifica_diferenca_minutos@j^0,w,c
  6359  002CD6  241B               	addwf	(??_verifica_diferenca_minutos+2)^0,w,c
  6360  002CD8  6ED9               	movwf	fsr2l,c
  6361  002CDA  0E00               	movlw	0
  6362  002CDC  201C               	addwfc	(??_verifica_diferenca_minutos+3)^0,w,c
  6363  002CDE  6EDA               	movwf	fsr2h,c
  6364  002CE0  0008               	tblrd		*
  6365  002CE2  CFF5 FFDF          	movff	tablat,indf2
  6366                           
  6367                           ;fence.c: 289: poligono_ext[point_index_long].point_long_min[j] = temp_buff_long[i];
  6368  002CE6  0E9A               	movlw	low _temp_buff_long
  6369  002CE8  2422               	addwf	verifica_diferenca_minutos@i^0,w,c
  6370  002CEA  6ED9               	movwf	fsr2l,c
  6371  002CEC  6ADA               	clrf	fsr2h,c
  6372  002CEE  0E02               	movlw	high _temp_buff_long
  6373  002CF0  22DA               	addwfc	fsr2h,f,c
  6374  002CF2  501F               	movf	verifica_diferenca_minutos@point_index_long^0,w,c
  6375  002CF4  0D3E               	mullw	62
  6376  002CF6  0E32               	movlw	low _poligono_ext
  6377  002CF8  6E19               	movwf	??_verifica_diferenca_minutos^0,c
  6378  002CFA  0E01               	movlw	high _poligono_ext
  6379  002CFC  6E1A               	movwf	(??_verifica_diferenca_minutos+1)^0,c
  6380  002CFE  0E30               	movlw	48
  6381  002D00  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  6382  002D02  0E00               	movlw	0
  6383  002D04  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  6384  002D06  50F3               	movf	243,w,c
  6385  002D08  2619               	addwf	??_verifica_diferenca_minutos^0,f,c
  6386  002D0A  50F4               	movf	244,w,c
  6387  002D0C  221A               	addwfc	(??_verifica_diferenca_minutos+1)^0,f,c
  6388  002D0E  5020               	movf	verifica_diferenca_minutos@j^0,w,c
  6389  002D10  2419               	addwf	??_verifica_diferenca_minutos^0,w,c
  6390  002D12  6EE1               	movwf	fsr1l,c
  6391  002D14  0E00               	movlw	0
  6392  002D16  201A               	addwfc	(??_verifica_diferenca_minutos+1)^0,w,c
  6393  002D18  6EE2               	movwf	fsr1h,c
  6394  002D1A  CFDF FFE7          	movff	indf2,indf1
  6395                           
  6396                           ;fence.c: 290: i++;
  6397  002D1E  2A22               	incf	verifica_diferenca_minutos@i^0,f,c
  6398  002D20  2A20               	incf	verifica_diferenca_minutos@j^0,f,c
  6399  002D22  D7B4               	goto	l10021
  6400  002D24                     l10035:
  6401  002D24  2A22               	incf	verifica_diferenca_minutos@i^0,f,c
  6402  002D26  0E0B               	movlw	11
  6403  002D28  6422               	cpfsgt	verifica_diferenca_minutos@i^0,c
  6404  002D2A  D7A0               	goto	l10009
  6405  002D2C                     u9950:
  6406                           
  6407                           ;fence.c: 298: };fence.c: 300: };fence.c: 301: point++;
  6408  002D2C  2A21               	incf	verifica_diferenca_minutos@point^0,f,c
  6409  002D2E                     l10041:
  6410  002D2E  0E03               	movlw	3
  6411  002D30  6421               	cpfsgt	verifica_diferenca_minutos@point^0,c
  6412  002D32  D79A               	goto	l10003
  6413  002D34  0012               	return	
  6414  002D36                     l10045:
  6415  002D36  501D               	movf	verifica_diferenca_minutos@select_data^0,w,c
  6416                           
  6417                           ; Switch size 1, requested type "simple"
  6418                           ; Number of cases is 2, Range of values is 0 to 1
  6419                           ; switch strategies available:
  6420                           ; Name         Instructions Cycles
  6421                           ; simple_byte            7     4 (average)
  6422                           ;	Chosen strategy is simple_byte
  6423  002D38  0A00               	xorlw	0	; case 0
  6424  002D3A  B4D8               	btfsc	status,2,c
  6425  002D3C  D7F8               	goto	l10041
  6426  002D3E  0A01               	xorlw	1	; case 1
  6427  002D40  A4D8               	btfss	status,2,c
  6428  002D42  0012               	return	
  6429  002D44  D78D               	goto	l10001
  6430  002D46                     __end_of_verifica_diferenca_minutos:
  6431                           	callstack 0
  6432                           
  6433 ;; *************** function _verifica_diferenca_graus *****************
  6434 ;; Defined at:
  6435 ;;		line 80 in file "bibliotecas/fence.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;  select_data     1    wreg     unsigned char 
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;  select_data     1   28[COMRAM] unsigned char 
  6440 ;;  i               1   33[COMRAM] unsigned char 
  6441 ;;  point           1   32[COMRAM] unsigned char 
  6442 ;;  j               1   31[COMRAM] unsigned char 
  6443 ;;  point_index_    1   30[COMRAM] unsigned char 
  6444 ;;  point_index_    1   29[COMRAM] unsigned char 
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  1    wreg      void 
  6447 ;; Registers used:
  6448 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/1
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6454 ;;      Params:         0       0       0       0       0       0       0       0       0
  6455 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6456 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6457 ;;      Totals:        10       0       0       0       0       0       0       0       0
  6458 ;;Total ram usage:       10 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    3
  6461 ;; This function calls:
  6462 ;;		Nothing
  6463 ;; This function is called by:
  6464 ;;		_verifica_fence_externo
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           	psect	text32
  6469  002EFC                     __ptext32:
  6470                           	callstack 0
  6471  002EFC                     _verifica_diferenca_graus:
  6472                           	callstack 24
  6473                           
  6474                           ;incstack = 0
  6475                           ;verifica_diferenca_graus@select_data stored from wreg
  6476  002EFC  6E1D               	movwf	verifica_diferenca_graus@select_data^0,c
  6477                           
  6478                           ;fence.c: 83: unsigned char point, point_index_lat ,point_index_long;;fence.c: 84: unsig
      +                          ned char i, j;;fence.c: 85: point = 0;
  6479  002EFE  0E00               	movlw	0
  6480  002F00  6E21               	movwf	verifica_diferenca_graus@point^0,c
  6481                           
  6482                           ;fence.c: 86: point_index_long = 0;
  6483  002F02  0E00               	movlw	0
  6484  002F04  6E1F               	movwf	verifica_diferenca_graus@point_index_long^0,c
  6485                           
  6486                           ;fence.c: 87: point_index_lat = 0;
  6487  002F06  0E00               	movlw	0
  6488  002F08  6E1E               	movwf	verifica_diferenca_graus@point_index_lat^0,c
  6489                           
  6490                           ;fence.c: 89: switch(select_data)
  6491  002F0A  D0CA               	goto	l9929
  6492  002F0C                     l9847:
  6493                           
  6494                           ;fence.c: 93: {;fence.c: 94: for(i=1; i<5; i++)
  6495  002F0C  0E01               	movlw	1
  6496  002F0E  6E22               	movwf	verifica_diferenca_graus@i^0,c
  6497  002F10                     l9853:
  6498                           
  6499                           ;fence.c: 95: {;fence.c: 96: if(point == 0 || point == 2)
  6500  002F10  5021               	movf	verifica_diferenca_graus@point^0,w,c
  6501  002F12  B4D8               	btfsc	status,2,c
  6502  002F14  D004               	goto	u9640
  6503  002F16  0E02               	movlw	2
  6504  002F18  1821               	xorwf	verifica_diferenca_graus@point^0,w,c
  6505  002F1A  A4D8               	btfss	status,2,c
  6506  002F1C  D055               	goto	u9680
  6507  002F1E                     u9640:
  6508                           
  6509                           ;fence.c: 97: {;fence.c: 99: if(point == 2 && !point_index_lat)
  6510  002F1E  0E02               	movlw	2
  6511  002F20  1821               	xorwf	verifica_diferenca_graus@point^0,w,c
  6512  002F22  A4D8               	btfss	status,2,c
  6513  002F24  D003               	goto	l9863
  6514  002F26  501E               	movf	verifica_diferenca_graus@point_index_lat^0,w,c
  6515  002F28  B4D8               	btfsc	status,2,c
  6516                           
  6517                           ;fence.c: 100: {;fence.c: 101: point_index_lat++;
  6518  002F2A  2A1E               	incf	verifica_diferenca_graus@point_index_lat^0,f,c
  6519  002F2C                     l9863:
  6520                           
  6521                           ;fence.c: 102: };fence.c: 105: for(j= 0; i < 5; j++)
  6522  002F2C  0E00               	movlw	0
  6523  002F2E  6E20               	movwf	verifica_diferenca_graus@j^0,c
  6524  002F30                     l9865:
  6525  002F30  0E04               	movlw	4
  6526  002F32  6422               	cpfsgt	verifica_diferenca_graus@i^0,c
  6527  002F34  D001               	goto	l9869
  6528  002F36  D044               	goto	l9879
  6529  002F38                     l9869:
  6530                           
  6531                           ;fence.c: 106: {;fence.c: 107: poligono_ext[point_index_lat].point_lat_deg[j] = temp_buf
      +                          f_lat[i];
  6532  002F38  0EA6               	movlw	low _temp_buff_lat
  6533  002F3A  2422               	addwf	verifica_diferenca_graus@i^0,w,c
  6534  002F3C  6ED9               	movwf	fsr2l,c
  6535  002F3E  6ADA               	clrf	fsr2h,c
  6536  002F40  0E02               	movlw	high _temp_buff_lat
  6537  002F42  22DA               	addwfc	fsr2h,f,c
  6538  002F44  501E               	movf	verifica_diferenca_graus@point_index_lat^0,w,c
  6539  002F46  0D3E               	mullw	62
  6540  002F48  0E32               	movlw	low _poligono_ext
  6541  002F4A  6E19               	movwf	??_verifica_diferenca_graus^0,c
  6542  002F4C  0E01               	movlw	high _poligono_ext
  6543  002F4E  6E1A               	movwf	(??_verifica_diferenca_graus+1)^0,c
  6544  002F50  0E0B               	movlw	11
  6545  002F52  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  6546  002F54  0E00               	movlw	0
  6547  002F56  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  6548  002F58  50F3               	movf	243,w,c
  6549  002F5A  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  6550  002F5C  50F4               	movf	244,w,c
  6551  002F5E  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  6552  002F60  5020               	movf	verifica_diferenca_graus@j^0,w,c
  6553  002F62  2419               	addwf	??_verifica_diferenca_graus^0,w,c
  6554  002F64  6EE1               	movwf	fsr1l,c
  6555  002F66  0E00               	movlw	0
  6556  002F68  201A               	addwfc	(??_verifica_diferenca_graus+1)^0,w,c
  6557  002F6A  6EE2               	movwf	fsr1h,c
  6558  002F6C  CFDF FFE7          	movff	indf2,indf1
  6559                           
  6560                           ;fence.c: 108: poligono_ext[point_index_lat].fence_lat_deg[j] = fence_diff_lat[point][i]
      +                          ;
  6561  002F70  5021               	movf	verifica_diferenca_graus@point^0,w,c
  6562  002F72  0D0B               	mullw	11
  6563  002F74  0EB9               	movlw	low _fence_diff_lat
  6564  002F76  6E19               	movwf	??_verifica_diferenca_graus^0,c
  6565  002F78  0E60               	movlw	high _fence_diff_lat
  6566  002F7A  6E1A               	movwf	(??_verifica_diferenca_graus+1)^0,c
  6567  002F7C  50F3               	movf	243,w,c
  6568  002F7E  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  6569  002F80  50F4               	movf	244,w,c
  6570  002F82  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  6571  002F84  5022               	movf	verifica_diferenca_graus@i^0,w,c
  6572  002F86  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  6573  002F88  0E00               	movlw	0
  6574  002F8A  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  6575  002F8C  C019  FFF6         	movff	??_verifica_diferenca_graus,tblptrl
  6576  002F90  C01A  FFF7         	movff	??_verifica_diferenca_graus+1,tblptrh
  6577  002F94                     	if	0	;tblptru may be non-zero
  6578  002F94                     	endif
  6579  002F94                     	if	0	;tblptru may be non-zero
  6580  002F94                     	endif
  6581  002F94  501E               	movf	verifica_diferenca_graus@point_index_lat^0,w,c
  6582  002F96  0D3E               	mullw	62
  6583  002F98  0E32               	movlw	low _poligono_ext
  6584  002F9A  6E1B               	movwf	(??_verifica_diferenca_graus+2)^0,c
  6585  002F9C  0E01               	movlw	high _poligono_ext
  6586  002F9E  6E1C               	movwf	(??_verifica_diferenca_graus+3)^0,c
  6587  002FA0  50F3               	movf	243,w,c
  6588  002FA2  261B               	addwf	(??_verifica_diferenca_graus+2)^0,f,c
  6589  002FA4  50F4               	movf	244,w,c
  6590  002FA6  221C               	addwfc	(??_verifica_diferenca_graus+3)^0,f,c
  6591  002FA8  5020               	movf	verifica_diferenca_graus@j^0,w,c
  6592  002FAA  241B               	addwf	(??_verifica_diferenca_graus+2)^0,w,c
  6593  002FAC  6ED9               	movwf	fsr2l,c
  6594  002FAE  0E00               	movlw	0
  6595  002FB0  201C               	addwfc	(??_verifica_diferenca_graus+3)^0,w,c
  6596  002FB2  6EDA               	movwf	fsr2h,c
  6597  002FB4  0008               	tblrd		*
  6598  002FB6  CFF5 FFDF          	movff	tablat,indf2
  6599                           
  6600                           ;fence.c: 109: i++;
  6601  002FBA  2A22               	incf	verifica_diferenca_graus@i^0,f,c
  6602  002FBC  2A20               	incf	verifica_diferenca_graus@j^0,f,c
  6603  002FBE  D7B8               	goto	l9865
  6604  002FC0                     l9879:
  6605  002FC0  2A22               	incf	verifica_diferenca_graus@i^0,f,c
  6606  002FC2  0E04               	movlw	4
  6607  002FC4  6422               	cpfsgt	verifica_diferenca_graus@i^0,c
  6608  002FC6  D7A4               	goto	l9853
  6609  002FC8                     u9680:
  6610                           
  6611                           ;fence.c: 116: };fence.c: 117: };fence.c: 118: point++;
  6612  002FC8  2A21               	incf	verifica_diferenca_graus@point^0,f,c
  6613  002FCA                     l9885:
  6614  002FCA  0E03               	movlw	3
  6615  002FCC  6421               	cpfsgt	verifica_diferenca_graus@point^0,c
  6616  002FCE  D79E               	goto	l9847
  6617  002FD0  0012               	return	
  6618  002FD2                     l9887:
  6619                           
  6620                           ;fence.c: 124: {;fence.c: 125: for(i=1; i<6; i++)
  6621  002FD2  0E01               	movlw	1
  6622  002FD4  6E22               	movwf	verifica_diferenca_graus@i^0,c
  6623  002FD6                     l9893:
  6624                           
  6625                           ;fence.c: 126: {;fence.c: 127: if(point == 0 || point == 2)
  6626  002FD6  5021               	movf	verifica_diferenca_graus@point^0,w,c
  6627  002FD8  B4D8               	btfsc	status,2,c
  6628  002FDA  D004               	goto	u9710
  6629  002FDC  0E02               	movlw	2
  6630  002FDE  1821               	xorwf	verifica_diferenca_graus@point^0,w,c
  6631  002FE0  A4D8               	btfss	status,2,c
  6632  002FE2  D059               	goto	u9750
  6633  002FE4                     u9710:
  6634                           
  6635                           ;fence.c: 128: {;fence.c: 129: if(point == 2 && !point_index_long)
  6636  002FE4  0E02               	movlw	2
  6637  002FE6  1821               	xorwf	verifica_diferenca_graus@point^0,w,c
  6638  002FE8  A4D8               	btfss	status,2,c
  6639  002FEA  D003               	goto	l9903
  6640  002FEC  501F               	movf	verifica_diferenca_graus@point_index_long^0,w,c
  6641  002FEE  B4D8               	btfsc	status,2,c
  6642                           
  6643                           ;fence.c: 130: {;fence.c: 131: point_index_long++;
  6644  002FF0  2A1F               	incf	verifica_diferenca_graus@point_index_long^0,f,c
  6645  002FF2                     l9903:
  6646                           
  6647                           ;fence.c: 132: };fence.c: 133: for(j= 0; i < 6; j++)
  6648  002FF2  0E00               	movlw	0
  6649  002FF4  6E20               	movwf	verifica_diferenca_graus@j^0,c
  6650  002FF6                     l9905:
  6651  002FF6  0E05               	movlw	5
  6652  002FF8  6422               	cpfsgt	verifica_diferenca_graus@i^0,c
  6653  002FFA  D001               	goto	l9909
  6654  002FFC  D048               	goto	l9919
  6655  002FFE                     l9909:
  6656                           
  6657                           ;fence.c: 134: {;fence.c: 135: poligono_ext[point_index_long].point_long_deg[j] = temp_b
      +                          uff_long[i];
  6658  002FFE  0E9A               	movlw	low _temp_buff_long
  6659  003000  2422               	addwf	verifica_diferenca_graus@i^0,w,c
  6660  003002  6ED9               	movwf	fsr2l,c
  6661  003004  6ADA               	clrf	fsr2h,c
  6662  003006  0E02               	movlw	high _temp_buff_long
  6663  003008  22DA               	addwfc	fsr2h,f,c
  6664  00300A  501F               	movf	verifica_diferenca_graus@point_index_long^0,w,c
  6665  00300C  0D3E               	mullw	62
  6666  00300E  0E32               	movlw	low _poligono_ext
  6667  003010  6E19               	movwf	??_verifica_diferenca_graus^0,c
  6668  003012  0E01               	movlw	high _poligono_ext
  6669  003014  6E1A               	movwf	(??_verifica_diferenca_graus+1)^0,c
  6670  003016  0E10               	movlw	16
  6671  003018  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  6672  00301A  0E00               	movlw	0
  6673  00301C  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  6674  00301E  50F3               	movf	243,w,c
  6675  003020  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  6676  003022  50F4               	movf	244,w,c
  6677  003024  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  6678  003026  5020               	movf	verifica_diferenca_graus@j^0,w,c
  6679  003028  2419               	addwf	??_verifica_diferenca_graus^0,w,c
  6680  00302A  6EE1               	movwf	fsr1l,c
  6681  00302C  0E00               	movlw	0
  6682  00302E  201A               	addwfc	(??_verifica_diferenca_graus+1)^0,w,c
  6683  003030  6EE2               	movwf	fsr1h,c
  6684  003032  CFDF FFE7          	movff	indf2,indf1
  6685                           
  6686                           ;fence.c: 136: poligono_ext[point_index_long].fence_long_deg[j] = fence_diff_long[point]
      +                          [i];
  6687  003036  5021               	movf	verifica_diferenca_graus@point^0,w,c
  6688  003038  0D0C               	mullw	12
  6689  00303A  0E89               	movlw	low _fence_diff_long
  6690  00303C  6E19               	movwf	??_verifica_diferenca_graus^0,c
  6691  00303E  0E60               	movlw	high _fence_diff_long
  6692  003040  6E1A               	movwf	(??_verifica_diferenca_graus+1)^0,c
  6693  003042  50F3               	movf	243,w,c
  6694  003044  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  6695  003046  50F4               	movf	244,w,c
  6696  003048  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  6697  00304A  5022               	movf	verifica_diferenca_graus@i^0,w,c
  6698  00304C  2619               	addwf	??_verifica_diferenca_graus^0,f,c
  6699  00304E  0E00               	movlw	0
  6700  003050  221A               	addwfc	(??_verifica_diferenca_graus+1)^0,f,c
  6701  003052  C019  FFF6         	movff	??_verifica_diferenca_graus,tblptrl
  6702  003056  C01A  FFF7         	movff	??_verifica_diferenca_graus+1,tblptrh
  6703  00305A                     	if	0	;tblptru may be non-zero
  6704  00305A                     	endif
  6705  00305A                     	if	0	;tblptru may be non-zero
  6706  00305A                     	endif
  6707  00305A  501F               	movf	verifica_diferenca_graus@point_index_long^0,w,c
  6708  00305C  0D3E               	mullw	62
  6709  00305E  0E32               	movlw	low _poligono_ext
  6710  003060  6E1B               	movwf	(??_verifica_diferenca_graus+2)^0,c
  6711  003062  0E01               	movlw	high _poligono_ext
  6712  003064  6E1C               	movwf	(??_verifica_diferenca_graus+3)^0,c
  6713  003066  0E05               	movlw	5
  6714  003068  261B               	addwf	(??_verifica_diferenca_graus+2)^0,f,c
  6715  00306A  0E00               	movlw	0
  6716  00306C  221C               	addwfc	(??_verifica_diferenca_graus+3)^0,f,c
  6717  00306E  50F3               	movf	243,w,c
  6718  003070  261B               	addwf	(??_verifica_diferenca_graus+2)^0,f,c
  6719  003072  50F4               	movf	244,w,c
  6720  003074  221C               	addwfc	(??_verifica_diferenca_graus+3)^0,f,c
  6721  003076  5020               	movf	verifica_diferenca_graus@j^0,w,c
  6722  003078  241B               	addwf	(??_verifica_diferenca_graus+2)^0,w,c
  6723  00307A  6ED9               	movwf	fsr2l,c
  6724  00307C  0E00               	movlw	0
  6725  00307E  201C               	addwfc	(??_verifica_diferenca_graus+3)^0,w,c
  6726  003080  6EDA               	movwf	fsr2h,c
  6727  003082  0008               	tblrd		*
  6728  003084  CFF5 FFDF          	movff	tablat,indf2
  6729                           
  6730                           ;fence.c: 138: i++;
  6731  003088  2A22               	incf	verifica_diferenca_graus@i^0,f,c
  6732  00308A  2A20               	incf	verifica_diferenca_graus@j^0,f,c
  6733  00308C  D7B4               	goto	l9905
  6734  00308E                     l9919:
  6735  00308E  2A22               	incf	verifica_diferenca_graus@i^0,f,c
  6736  003090  0E05               	movlw	5
  6737  003092  6422               	cpfsgt	verifica_diferenca_graus@i^0,c
  6738  003094  D7A0               	goto	l9893
  6739  003096                     u9750:
  6740                           
  6741                           ;fence.c: 145: };fence.c: 147: };fence.c: 149: point++;
  6742  003096  2A21               	incf	verifica_diferenca_graus@point^0,f,c
  6743  003098                     l9925:
  6744  003098  0E03               	movlw	3
  6745  00309A  6421               	cpfsgt	verifica_diferenca_graus@point^0,c
  6746  00309C  D79A               	goto	l9887
  6747  00309E  0012               	return	
  6748  0030A0                     l9929:
  6749  0030A0  501D               	movf	verifica_diferenca_graus@select_data^0,w,c
  6750                           
  6751                           ; Switch size 1, requested type "simple"
  6752                           ; Number of cases is 2, Range of values is 0 to 1
  6753                           ; switch strategies available:
  6754                           ; Name         Instructions Cycles
  6755                           ; simple_byte            7     4 (average)
  6756                           ;	Chosen strategy is simple_byte
  6757  0030A2  0A00               	xorlw	0	; case 0
  6758  0030A4  B4D8               	btfsc	status,2,c
  6759  0030A6  D7F8               	goto	l9925
  6760  0030A8  0A01               	xorlw	1	; case 1
  6761  0030AA  A4D8               	btfss	status,2,c
  6762  0030AC  0012               	return	
  6763  0030AE  D78D               	goto	l9885
  6764  0030B0                     __end_of_verifica_diferenca_graus:
  6765                           	callstack 0
  6766                           
  6767 ;; *************** function _calcula_diff_minutos *****************
  6768 ;; Defined at:
  6769 ;;		line 314 in file "bibliotecas/fence.c"
  6770 ;; Parameters:    Size  Location     Type
  6771 ;;  select_data     1    wreg     unsigned char 
  6772 ;; Auto vars:     Size  Location     Type
  6773 ;;  select_data     1   43[COMRAM] unsigned char 
  6774 ;;  count           1   45[COMRAM] unsigned char 
  6775 ;;  point           1   44[COMRAM] unsigned char 
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  1    wreg      void 
  6778 ;; Registers used:
  6779 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/1
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6785 ;;      Params:         0       0       0       0       0       0       0       0       0
  6786 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6787 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6788 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6789 ;;Total ram usage:        3 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:    6
  6792 ;; This function calls:
  6793 ;;		_diff_calc
  6794 ;; This function is called by:
  6795 ;;		_verifica_fence_externo
  6796 ;; This function uses a non-reentrant model
  6797 ;;
  6798                           
  6799                           	psect	text33
  6800  004150                     __ptext33:
  6801                           	callstack 0
  6802  004150                     _calcula_diff_minutos:
  6803                           	callstack 21
  6804                           
  6805                           ;incstack = 0
  6806                           ;calcula_diff_minutos@select_data stored from wreg
  6807  004150  6E2C               	movwf	calcula_diff_minutos@select_data^0,c
  6808                           
  6809                           ;fence.c: 316: unsigned char point, count;;fence.c: 319: switch(select_data)
  6810  004152  D05E               	goto	l13745
  6811  004154                     l13719:
  6812                           
  6813                           ;fence.c: 323: {;fence.c: 324: if(point == 0 || point == 2)
  6814  004154  502D               	movf	calcula_diff_minutos@point^0,w,c
  6815  004156  B4D8               	btfsc	status,2,c
  6816  004158  D004               	goto	u14990
  6817  00415A  0E02               	movlw	2
  6818  00415C  182D               	xorwf	calcula_diff_minutos@point^0,w,c
  6819  00415E  A4D8               	btfss	status,2,c
  6820  004160  D023               	goto	l13727
  6821  004162                     u14990:
  6822                           
  6823                           ;fence.c: 325: {;fence.c: 326: poligono_ext[count].diff_lat_min = diff_calc(poligono_ext
      +                          [count].fence_lat_min, poligono_ext[count].point_lat_min );
  6824  004162  502E               	movf	calcula_diff_minutos@count^0,w,c
  6825  004164  0D3E               	mullw	62
  6826  004166  0E50               	movlw	low (_poligono_ext+30)
  6827  004168  24F3               	addwf	243,w,c
  6828  00416A  6E26               	movwf	diff_calc@p_buff_fence^0,c
  6829  00416C  0E01               	movlw	high (_poligono_ext+30)
  6830  00416E  20F4               	addwfc	prodh,w,c
  6831  004170  6E27               	movwf	(diff_calc@p_buff_fence+1)^0,c
  6832  004172  502E               	movf	calcula_diff_minutos@count^0,w,c
  6833  004174  0D3E               	mullw	62
  6834  004176  0E5C               	movlw	low (_poligono_ext+42)
  6835  004178  24F3               	addwf	243,w,c
  6836  00417A  6E28               	movwf	diff_calc@p_buff_point^0,c
  6837  00417C  0E01               	movlw	high (_poligono_ext+42)
  6838  00417E  20F4               	addwfc	prodh,w,c
  6839  004180  6E29               	movwf	(diff_calc@p_buff_point+1)^0,c
  6840  004182  EC23  F029         	call	_diff_calc	;wreg free
  6841  004186  502E               	movf	calcula_diff_minutos@count^0,w,c
  6842  004188  0D3E               	mullw	62
  6843  00418A  0E68               	movlw	low (_poligono_ext+54)
  6844  00418C  24F3               	addwf	243,w,c
  6845  00418E  6ED9               	movwf	fsr2l,c
  6846  004190  0E01               	movlw	high (_poligono_ext+54)
  6847  004192  20F4               	addwfc	prodh,w,c
  6848  004194  6EDA               	movwf	fsr2h,c
  6849  004196  C026  FFDE         	movff	?_diff_calc,postinc2
  6850  00419A  C027  FFDE         	movff	?_diff_calc+1,postinc2
  6851  00419E  C028  FFDE         	movff	?_diff_calc+2,postinc2
  6852  0041A2  C029  FFDE         	movff	?_diff_calc+3,postinc2
  6853                           
  6854                           ;fence.c: 328: count++;
  6855  0041A6  2A2E               	incf	calcula_diff_minutos@count^0,f,c
  6856  0041A8                     l13727:
  6857                           
  6858                           ;fence.c: 329: };fence.c: 330: point++;
  6859  0041A8  2A2D               	incf	calcula_diff_minutos@point^0,f,c
  6860  0041AA                     l13729:
  6861  0041AA  0E03               	movlw	3
  6862  0041AC  642D               	cpfsgt	calcula_diff_minutos@point^0,c
  6863  0041AE  D7D2               	goto	l13719
  6864  0041B0  0012               	return	
  6865  0041B2                     l13731:
  6866                           
  6867                           ;fence.c: 336: {;fence.c: 337: if(point == 0 || point == 2)
  6868  0041B2  502D               	movf	calcula_diff_minutos@point^0,w,c
  6869  0041B4  B4D8               	btfsc	status,2,c
  6870  0041B6  D004               	goto	u15020
  6871  0041B8  0E02               	movlw	2
  6872  0041BA  182D               	xorwf	calcula_diff_minutos@point^0,w,c
  6873  0041BC  A4D8               	btfss	status,2,c
  6874  0041BE  D023               	goto	l13739
  6875  0041C0                     u15020:
  6876                           
  6877                           ;fence.c: 338: {;fence.c: 339: poligono_ext[count].diff_long_min =diff_calc(poligono_ext
      +                          [count].fence_long_min, poligono_ext[count].point_long_min );
  6878  0041C0  502E               	movf	calcula_diff_minutos@count^0,w,c
  6879  0041C2  0D3E               	mullw	62
  6880  0041C4  0E56               	movlw	low (_poligono_ext+36)
  6881  0041C6  24F3               	addwf	243,w,c
  6882  0041C8  6E26               	movwf	diff_calc@p_buff_fence^0,c
  6883  0041CA  0E01               	movlw	high (_poligono_ext+36)
  6884  0041CC  20F4               	addwfc	prodh,w,c
  6885  0041CE  6E27               	movwf	(diff_calc@p_buff_fence+1)^0,c
  6886  0041D0  502E               	movf	calcula_diff_minutos@count^0,w,c
  6887  0041D2  0D3E               	mullw	62
  6888  0041D4  0E62               	movlw	low (_poligono_ext+48)
  6889  0041D6  24F3               	addwf	243,w,c
  6890  0041D8  6E28               	movwf	diff_calc@p_buff_point^0,c
  6891  0041DA  0E01               	movlw	high (_poligono_ext+48)
  6892  0041DC  20F4               	addwfc	prodh,w,c
  6893  0041DE  6E29               	movwf	(diff_calc@p_buff_point+1)^0,c
  6894  0041E0  EC23  F029         	call	_diff_calc	;wreg free
  6895  0041E4  502E               	movf	calcula_diff_minutos@count^0,w,c
  6896  0041E6  0D3E               	mullw	62
  6897  0041E8  0E6C               	movlw	low (_poligono_ext+58)
  6898  0041EA  24F3               	addwf	243,w,c
  6899  0041EC  6ED9               	movwf	fsr2l,c
  6900  0041EE  0E01               	movlw	high (_poligono_ext+58)
  6901  0041F0  20F4               	addwfc	prodh,w,c
  6902  0041F2  6EDA               	movwf	fsr2h,c
  6903  0041F4  C026  FFDE         	movff	?_diff_calc,postinc2
  6904  0041F8  C027  FFDE         	movff	?_diff_calc+1,postinc2
  6905  0041FC  C028  FFDE         	movff	?_diff_calc+2,postinc2
  6906  004200  C029  FFDE         	movff	?_diff_calc+3,postinc2
  6907                           
  6908                           ;fence.c: 341: count++;
  6909  004204  2A2E               	incf	calcula_diff_minutos@count^0,f,c
  6910  004206                     l13739:
  6911                           
  6912                           ;fence.c: 342: };fence.c: 343: point++;
  6913  004206  2A2D               	incf	calcula_diff_minutos@point^0,f,c
  6914  004208                     l13741:
  6915  004208  0E03               	movlw	3
  6916  00420A  642D               	cpfsgt	calcula_diff_minutos@point^0,c
  6917  00420C  D7D2               	goto	l13731
  6918  00420E  0012               	return	
  6919  004210                     l13745:
  6920  004210  502C               	movf	calcula_diff_minutos@select_data^0,w,c
  6921                           
  6922                           ; Switch size 1, requested type "simple"
  6923                           ; Number of cases is 2, Range of values is 0 to 1
  6924                           ; switch strategies available:
  6925                           ; Name         Instructions Cycles
  6926                           ; simple_byte            7     4 (average)
  6927                           ;	Chosen strategy is simple_byte
  6928  004212  0A00               	xorlw	0	; case 0
  6929  004214  B4D8               	btfsc	status,2,c
  6930  004216  D7F8               	goto	l13741
  6931  004218  0A01               	xorlw	1	; case 1
  6932  00421A  A4D8               	btfss	status,2,c
  6933  00421C  0012               	return	
  6934  00421E  D7C5               	goto	l13729
  6935  004220                     __end_of_calcula_diff_minutos:
  6936                           	callstack 0
  6937                           
  6938 ;; *************** function _calcula_diff_graus *****************
  6939 ;; Defined at:
  6940 ;;		line 166 in file "bibliotecas/fence.c"
  6941 ;; Parameters:    Size  Location     Type
  6942 ;;  select_data     1    wreg     unsigned char 
  6943 ;; Auto vars:     Size  Location     Type
  6944 ;;  select_data     1   43[COMRAM] unsigned char 
  6945 ;;  count           1   45[COMRAM] unsigned char 
  6946 ;;  point           1   44[COMRAM] unsigned char 
  6947 ;; Return value:  Size  Location     Type
  6948 ;;                  1    wreg      void 
  6949 ;; Registers used:
  6950 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6951 ;; Tracked objects:
  6952 ;;		On entry : 0/1
  6953 ;;		On exit  : 0/0
  6954 ;;		Unchanged: 0/0
  6955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6956 ;;      Params:         0       0       0       0       0       0       0       0       0
  6957 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6958 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6959 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6960 ;;Total ram usage:        3 bytes
  6961 ;; Hardware stack levels used:    1
  6962 ;; Hardware stack levels required when called:    6
  6963 ;; This function calls:
  6964 ;;		_diff_calc
  6965 ;; This function is called by:
  6966 ;;		_verifica_fence_externo
  6967 ;; This function uses a non-reentrant model
  6968 ;;
  6969                           
  6970                           	psect	text34
  6971  004078                     __ptext34:
  6972                           	callstack 0
  6973  004078                     _calcula_diff_graus:
  6974                           	callstack 21
  6975                           
  6976                           ;incstack = 0
  6977                           ;calcula_diff_graus@select_data stored from wreg
  6978  004078  6E2C               	movwf	calcula_diff_graus@select_data^0,c
  6979                           
  6980                           ;fence.c: 168: unsigned char point, count;;fence.c: 171: point = 0;
  6981  00407A  0E00               	movlw	0
  6982  00407C  6E2D               	movwf	calcula_diff_graus@point^0,c
  6983                           
  6984                           ;fence.c: 172: count = 0;
  6985  00407E  0E00               	movlw	0
  6986  004080  6E2E               	movwf	calcula_diff_graus@count^0,c
  6987                           
  6988                           ;fence.c: 174: switch(select_data)
  6989  004082  D05E               	goto	l13715
  6990  004084                     l13689:
  6991                           
  6992                           ;fence.c: 178: {;fence.c: 179: if(point == 0 || point == 2)
  6993  004084  502D               	movf	calcula_diff_graus@point^0,w,c
  6994  004086  B4D8               	btfsc	status,2,c
  6995  004088  D004               	goto	u14930
  6996  00408A  0E02               	movlw	2
  6997  00408C  182D               	xorwf	calcula_diff_graus@point^0,w,c
  6998  00408E  A4D8               	btfss	status,2,c
  6999  004090  D023               	goto	l13697
  7000  004092                     u14930:
  7001                           
  7002                           ;fence.c: 180: {;fence.c: 184: poligono_ext[count].diff_lat_deg = diff_calc(poligono_ext
      +                          [count].fence_lat_deg, poligono_ext[count].point_lat_deg);
  7003  004092  502E               	movf	calcula_diff_graus@count^0,w,c
  7004  004094  0D3E               	mullw	62
  7005  004096  0E32               	movlw	low _poligono_ext
  7006  004098  24F3               	addwf	243,w,c
  7007  00409A  6E26               	movwf	diff_calc@p_buff_fence^0,c
  7008  00409C  0E01               	movlw	high _poligono_ext
  7009  00409E  20F4               	addwfc	prodh,w,c
  7010  0040A0  6E27               	movwf	(diff_calc@p_buff_fence+1)^0,c
  7011  0040A2  502E               	movf	calcula_diff_graus@count^0,w,c
  7012  0040A4  0D3E               	mullw	62
  7013  0040A6  0E3D               	movlw	low (_poligono_ext+11)
  7014  0040A8  24F3               	addwf	243,w,c
  7015  0040AA  6E28               	movwf	diff_calc@p_buff_point^0,c
  7016  0040AC  0E01               	movlw	high (_poligono_ext+11)
  7017  0040AE  20F4               	addwfc	prodh,w,c
  7018  0040B0  6E29               	movwf	(diff_calc@p_buff_point+1)^0,c
  7019  0040B2  EC23  F029         	call	_diff_calc	;wreg free
  7020  0040B6  502E               	movf	calcula_diff_graus@count^0,w,c
  7021  0040B8  0D3E               	mullw	62
  7022  0040BA  0E48               	movlw	low (_poligono_ext+22)
  7023  0040BC  24F3               	addwf	243,w,c
  7024  0040BE  6ED9               	movwf	fsr2l,c
  7025  0040C0  0E01               	movlw	high (_poligono_ext+22)
  7026  0040C2  20F4               	addwfc	prodh,w,c
  7027  0040C4  6EDA               	movwf	fsr2h,c
  7028  0040C6  C026  FFDE         	movff	?_diff_calc,postinc2
  7029  0040CA  C027  FFDE         	movff	?_diff_calc+1,postinc2
  7030  0040CE  C028  FFDE         	movff	?_diff_calc+2,postinc2
  7031  0040D2  C029  FFDE         	movff	?_diff_calc+3,postinc2
  7032                           
  7033                           ;fence.c: 189: count++;
  7034  0040D6  2A2E               	incf	calcula_diff_graus@count^0,f,c
  7035  0040D8                     l13697:
  7036                           
  7037                           ;fence.c: 190: };fence.c: 191: point++;
  7038  0040D8  2A2D               	incf	calcula_diff_graus@point^0,f,c
  7039  0040DA                     l13699:
  7040  0040DA  0E03               	movlw	3
  7041  0040DC  642D               	cpfsgt	calcula_diff_graus@point^0,c
  7042  0040DE  D7D2               	goto	l13689
  7043  0040E0  0012               	return	
  7044  0040E2                     l13701:
  7045                           
  7046                           ;fence.c: 199: {;fence.c: 200: if(point == 0 || point == 2)
  7047  0040E2  502D               	movf	calcula_diff_graus@point^0,w,c
  7048  0040E4  B4D8               	btfsc	status,2,c
  7049  0040E6  D004               	goto	u14960
  7050  0040E8  0E02               	movlw	2
  7051  0040EA  182D               	xorwf	calcula_diff_graus@point^0,w,c
  7052  0040EC  A4D8               	btfss	status,2,c
  7053  0040EE  D023               	goto	l13709
  7054  0040F0                     u14960:
  7055                           
  7056                           ;fence.c: 201: {;fence.c: 202: poligono_ext[count].diff_long_deg = diff_calc(poligono_ex
      +                          t[count].fence_long_deg, poligono_ext[count].point_long_deg);
  7057  0040F0  502E               	movf	calcula_diff_graus@count^0,w,c
  7058  0040F2  0D3E               	mullw	62
  7059  0040F4  0E37               	movlw	low (_poligono_ext+5)
  7060  0040F6  24F3               	addwf	243,w,c
  7061  0040F8  6E26               	movwf	diff_calc@p_buff_fence^0,c
  7062  0040FA  0E01               	movlw	high (_poligono_ext+5)
  7063  0040FC  20F4               	addwfc	prodh,w,c
  7064  0040FE  6E27               	movwf	(diff_calc@p_buff_fence+1)^0,c
  7065  004100  502E               	movf	calcula_diff_graus@count^0,w,c
  7066  004102  0D3E               	mullw	62
  7067  004104  0E42               	movlw	low (_poligono_ext+16)
  7068  004106  24F3               	addwf	243,w,c
  7069  004108  6E28               	movwf	diff_calc@p_buff_point^0,c
  7070  00410A  0E01               	movlw	high (_poligono_ext+16)
  7071  00410C  20F4               	addwfc	prodh,w,c
  7072  00410E  6E29               	movwf	(diff_calc@p_buff_point+1)^0,c
  7073  004110  EC23  F029         	call	_diff_calc	;wreg free
  7074  004114  502E               	movf	calcula_diff_graus@count^0,w,c
  7075  004116  0D3E               	mullw	62
  7076  004118  0E4C               	movlw	low (_poligono_ext+26)
  7077  00411A  24F3               	addwf	243,w,c
  7078  00411C  6ED9               	movwf	fsr2l,c
  7079  00411E  0E01               	movlw	high (_poligono_ext+26)
  7080  004120  20F4               	addwfc	prodh,w,c
  7081  004122  6EDA               	movwf	fsr2h,c
  7082  004124  C026  FFDE         	movff	?_diff_calc,postinc2
  7083  004128  C027  FFDE         	movff	?_diff_calc+1,postinc2
  7084  00412C  C028  FFDE         	movff	?_diff_calc+2,postinc2
  7085  004130  C029  FFDE         	movff	?_diff_calc+3,postinc2
  7086                           
  7087                           ;fence.c: 207: count++;
  7088  004134  2A2E               	incf	calcula_diff_graus@count^0,f,c
  7089  004136                     l13709:
  7090                           
  7091                           ;fence.c: 208: };fence.c: 209: point++;
  7092  004136  2A2D               	incf	calcula_diff_graus@point^0,f,c
  7093  004138                     l13711:
  7094  004138  0E03               	movlw	3
  7095  00413A  642D               	cpfsgt	calcula_diff_graus@point^0,c
  7096  00413C  D7D2               	goto	l13701
  7097  00413E  0012               	return	
  7098  004140                     l13715:
  7099  004140  502C               	movf	calcula_diff_graus@select_data^0,w,c
  7100                           
  7101                           ; Switch size 1, requested type "simple"
  7102                           ; Number of cases is 2, Range of values is 0 to 1
  7103                           ; switch strategies available:
  7104                           ; Name         Instructions Cycles
  7105                           ; simple_byte            7     4 (average)
  7106                           ;	Chosen strategy is simple_byte
  7107  004142  0A00               	xorlw	0	; case 0
  7108  004144  B4D8               	btfsc	status,2,c
  7109  004146  D7F8               	goto	l13711
  7110  004148  0A01               	xorlw	1	; case 1
  7111  00414A  A4D8               	btfss	status,2,c
  7112  00414C  0012               	return	
  7113  00414E  D7C5               	goto	l13699
  7114  004150                     __end_of_calcula_diff_graus:
  7115                           	callstack 0
  7116                           
  7117 ;; *************** function _diff_calc *****************
  7118 ;; Defined at:
  7119 ;;		line 483 in file "bibliotecas/fence.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;  p_buff_fence    2   37[COMRAM] PTR unsigned char 
  7122 ;;		 -> poligono_ext(124), 
  7123 ;;  p_buff_point    2   39[COMRAM] PTR unsigned char 
  7124 ;;		 -> poligono_ext(124), 
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;  point          12   12[BANK0 ] unsigned char [12]
  7127 ;;  fence          12    0[BANK0 ] unsigned char [12]
  7128 ;; Return value:  Size  Location     Type
  7129 ;;                  4   37[COMRAM] long 
  7130 ;; Registers used:
  7131 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7132 ;; Tracked objects:
  7133 ;;		On entry : 0/1
  7134 ;;		On exit  : 0/0
  7135 ;;		Unchanged: 0/0
  7136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7137 ;;      Params:         4       0       0       0       0       0       0       0       0
  7138 ;;      Locals:         0      24       0       0       0       0       0       0       0
  7139 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7140 ;;      Totals:         6      24       0       0       0       0       0       0       0
  7141 ;;Total ram usage:       30 bytes
  7142 ;; Hardware stack levels used:    1
  7143 ;; Hardware stack levels required when called:    5
  7144 ;; This function calls:
  7145 ;;		_atoi
  7146 ;;		_strcpy
  7147 ;; This function is called by:
  7148 ;;		_calcula_diff_graus
  7149 ;;		_calcula_diff_minutos
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           	psect	text35
  7154  005246                     __ptext35:
  7155                           	callstack 0
  7156  005246                     _diff_calc:
  7157                           	callstack 21
  7158                           
  7159                           ;fence.c: 485: unsigned char fence[12];;fence.c: 486: unsigned char point[12];;fence.c: 
      +                          488: strcpy(fence, p_buff_fence);
  7160                           
  7161                           ;incstack = 0
  7162  005246  0E60               	movlw	low diff_calc@fence
  7163  005248  6E1B               	movwf	strcpy@to^0,c
  7164  00524A  6A1C               	clrf	(strcpy@to+1)^0,c
  7165  00524C  C026  F01D         	movff	diff_calc@p_buff_fence,strcpy@from
  7166  005250  C027  F01E         	movff	diff_calc@p_buff_fence+1,strcpy@from+1
  7167  005254  ECA8  F02C         	call	_strcpy	;wreg free
  7168                           
  7169                           ;fence.c: 489: strcpy(point, p_buff_point);
  7170  005258  0E6C               	movlw	low diff_calc@point
  7171  00525A  6E1B               	movwf	strcpy@to^0,c
  7172  00525C  6A1C               	clrf	(strcpy@to+1)^0,c
  7173  00525E  C028  F01D         	movff	diff_calc@p_buff_point,strcpy@from
  7174  005262  C029  F01E         	movff	diff_calc@p_buff_point+1,strcpy@from+1
  7175  005266  ECA8  F02C         	call	_strcpy	;wreg free
  7176                           
  7177                           ;fence.c: 490: return ((atoi(fence))-(atoi(point)));
  7178  00526A  0E60               	movlw	low diff_calc@fence
  7179  00526C  6E1F               	movwf	atoi@s^0,c
  7180  00526E  ECDA  F021         	call	_atoi	;wreg free
  7181  005272  C01F  F02A         	movff	?_atoi,??_diff_calc
  7182  005276  C020  F02B         	movff	?_atoi+1,??_diff_calc+1
  7183  00527A  0E6C               	movlw	low diff_calc@point
  7184  00527C  6E1F               	movwf	atoi@s^0,c
  7185  00527E  ECDA  F021         	call	_atoi	;wreg free
  7186  005282  501F               	movf	?_atoi^0,w,c
  7187  005284  5E2A               	subwf	??_diff_calc^0,f,c
  7188  005286  5020               	movf	(?_atoi+1)^0,w,c
  7189  005288  5A2B               	subwfb	(??_diff_calc+1)^0,f,c
  7190  00528A  C02A  F026         	movff	??_diff_calc,?_diff_calc
  7191  00528E  C02B  F027         	movff	??_diff_calc+1,?_diff_calc+1
  7192  005292  0E00               	movlw	0
  7193  005294  BE27               	btfsc	(?_diff_calc+1)^0,7,c
  7194  005296  0EFF               	movlw	-1
  7195  005298  6E28               	movwf	(?_diff_calc+2)^0,c
  7196  00529A  6E29               	movwf	(?_diff_calc+3)^0,c
  7197  00529C  0012               	return		;funcret
  7198  00529E                     __end_of_diff_calc:
  7199                           	callstack 0
  7200                           
  7201 ;; *************** function _atoi *****************
  7202 ;; Defined at:
  7203 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\atoi.c"
  7204 ;; Parameters:    Size  Location     Type
  7205 ;;  s               1   30[COMRAM] PTR const unsigned char 
  7206 ;;		 -> diff_calc@point(12), diff_calc@fence(12), 
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;  a               2   35[COMRAM] int 
  7209 ;;  sign            1   34[COMRAM] unsigned char 
  7210 ;; Return value:  Size  Location     Type
  7211 ;;                  2   30[COMRAM] int 
  7212 ;; Registers used:
  7213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/1
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7219 ;;      Params:         2       0       0       0       0       0       0       0       0
  7220 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7221 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7222 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7223 ;;Total ram usage:        7 bytes
  7224 ;; Hardware stack levels used:    1
  7225 ;; Hardware stack levels required when called:    4
  7226 ;; This function calls:
  7227 ;;		___wmul
  7228 ;;		_isdigit
  7229 ;; This function is called by:
  7230 ;;		_diff_calc
  7231 ;; This function uses a non-reentrant model
  7232 ;;
  7233                           
  7234                           	psect	text36
  7235  0043B4                     __ptext36:
  7236                           	callstack 0
  7237  0043B4                     _atoi:
  7238                           	callstack 21
  7239                           
  7240                           ;incstack = 0
  7241  0043B4  D001               	goto	l12453
  7242  0043B6                     l12451:
  7243  0043B6  2A1F               	incf	atoi@s^0,f,c
  7244  0043B8                     l12453:
  7245  0043B8  501F               	movf	atoi@s^0,w,c
  7246  0043BA  6ED9               	movwf	fsr2l,c
  7247  0043BC  6ADA               	clrf	fsr2h,c
  7248  0043BE  0E20               	movlw	32
  7249  0043C0  18DE               	xorwf	postinc2,w,c
  7250  0043C2  B4D8               	btfsc	status,2,c
  7251  0043C4  D7F8               	goto	l12451
  7252  0043C6  501F               	movf	atoi@s^0,w,c
  7253  0043C8  6ED9               	movwf	fsr2l,c
  7254  0043CA  6ADA               	clrf	fsr2h,c
  7255  0043CC  0E09               	movlw	9
  7256  0043CE  18DE               	xorwf	postinc2,w,c
  7257  0043D0  B4D8               	btfsc	status,2,c
  7258  0043D2  D7F1               	goto	l12451
  7259  0043D4  0E00               	movlw	0
  7260  0043D6  6E25               	movwf	(atoi@a+1)^0,c
  7261  0043D8  0E00               	movlw	0
  7262  0043DA  6E24               	movwf	atoi@a^0,c
  7263  0043DC  0E00               	movlw	0
  7264  0043DE  6E23               	movwf	atoi@sign^0,c
  7265  0043E0  501F               	movf	atoi@s^0,w,c
  7266  0043E2  6ED9               	movwf	fsr2l,c
  7267  0043E4  6ADA               	clrf	fsr2h,c
  7268  0043E6  0E2D               	movlw	45
  7269  0043E8  18DE               	xorwf	postinc2,w,c
  7270  0043EA  A4D8               	btfss	status,2,c
  7271  0043EC  D002               	goto	l12463
  7272  0043EE  2A23               	incf	atoi@sign^0,f,c
  7273  0043F0  D007               	goto	u13310
  7274  0043F2                     l12463:
  7275  0043F2  501F               	movf	atoi@s^0,w,c
  7276  0043F4  6ED9               	movwf	fsr2l,c
  7277  0043F6  6ADA               	clrf	fsr2h,c
  7278  0043F8  0E2B               	movlw	43
  7279  0043FA  18DE               	xorwf	postinc2,w,c
  7280  0043FC  A4D8               	btfss	status,2,c
  7281  0043FE  D01C               	goto	l12471
  7282  004400                     u13310:
  7283  004400  2A1F               	incf	atoi@s^0,f,c
  7284  004402  D01A               	goto	l12471
  7285  004404                     l12467:
  7286  004404  C024  F019         	movff	atoi@a,___wmul@multiplier
  7287  004408  C025  F01A         	movff	atoi@a+1,___wmul@multiplier+1
  7288  00440C  0E00               	movlw	0
  7289  00440E  6E1C               	movwf	(___wmul@multiplicand+1)^0,c
  7290  004410  0E0A               	movlw	10
  7291  004412  6E1B               	movwf	___wmul@multiplicand^0,c
  7292  004414  EC65  F02D         	call	___wmul	;wreg free
  7293  004418  501F               	movf	atoi@s^0,w,c
  7294  00441A  6ED9               	movwf	fsr2l,c
  7295  00441C  6ADA               	clrf	fsr2h,c
  7296  00441E  50DF               	movf	indf2,w,c
  7297  004420  6E21               	movwf	??_atoi^0,c
  7298  004422  5021               	movf	??_atoi^0,w,c
  7299  004424  2619               	addwf	?___wmul^0,f,c
  7300  004426  0E00               	movlw	0
  7301  004428  221A               	addwfc	(?___wmul+1)^0,f,c
  7302  00442A  0ED0               	movlw	208
  7303  00442C  2419               	addwf	?___wmul^0,w,c
  7304  00442E  6E24               	movwf	atoi@a^0,c
  7305  004430  0EFF               	movlw	255
  7306  004432  201A               	addwfc	(?___wmul+1)^0,w,c
  7307  004434  6E25               	movwf	(atoi@a+1)^0,c
  7308  004436  D7E4               	goto	u13310
  7309  004438                     l12471:
  7310  004438  501F               	movf	atoi@s^0,w,c
  7311  00443A  6ED9               	movwf	fsr2l,c
  7312  00443C  6ADA               	clrf	fsr2h,c
  7313  00443E  50DF               	movf	indf2,w,c
  7314  004440  EC56  F02E         	call	_isdigit
  7315  004444  B0D8               	btfsc	status,0,c
  7316  004446  D7DE               	goto	l12467
  7317  004448  5023               	movf	atoi@sign^0,w,c
  7318  00444A  B4D8               	btfsc	status,2,c
  7319  00444C  D00D               	goto	l2701
  7320  00444E  C024  F021         	movff	atoi@a,??_atoi
  7321  004452  C025  F022         	movff	atoi@a+1,??_atoi+1
  7322  004456  1E21               	comf	??_atoi^0,f,c
  7323  004458  1E22               	comf	(??_atoi+1)^0,f,c
  7324  00445A  4A21               	infsnz	??_atoi^0,f,c
  7325  00445C  2A22               	incf	(??_atoi+1)^0,f,c
  7326  00445E  C021  F01F         	movff	??_atoi,?_atoi
  7327  004462  C022  F020         	movff	??_atoi+1,?_atoi+1
  7328  004466  0012               	return	
  7329  004468                     l2701:
  7330  004468  C024  F01F         	movff	atoi@a,?_atoi
  7331  00446C  C025  F020         	movff	atoi@a+1,?_atoi+1
  7332  004470  0012               	return		;funcret
  7333  004472                     __end_of_atoi:
  7334                           	callstack 0
  7335                           
  7336 ;; *************** function _isdigit *****************
  7337 ;; Defined at:
  7338 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\isdigit.c"
  7339 ;; Parameters:    Size  Location     Type
  7340 ;;  c               1    wreg     unsigned char 
  7341 ;; Auto vars:     Size  Location     Type
  7342 ;;  c               1   26[COMRAM] unsigned char 
  7343 ;; Return value:  Size  Location     Type
  7344 ;;		None               void
  7345 ;; Registers used:
  7346 ;;		wreg, status,2, status,0
  7347 ;; Tracked objects:
  7348 ;;		On entry : 0/1
  7349 ;;		On exit  : 0/0
  7350 ;;		Unchanged: 0/0
  7351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7352 ;;      Params:         0       0       0       0       0       0       0       0       0
  7353 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7354 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7355 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7356 ;;Total ram usage:        3 bytes
  7357 ;; Hardware stack levels used:    1
  7358 ;; Hardware stack levels required when called:    3
  7359 ;; This function calls:
  7360 ;;		Nothing
  7361 ;; This function is called by:
  7362 ;;		_atoi
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           	psect	text37
  7367  005CAC                     __ptext37:
  7368                           	callstack 0
  7369  005CAC                     _isdigit:
  7370                           	callstack 21
  7371                           
  7372                           ;incstack = 0
  7373                           ;isdigit@c stored from wreg
  7374  005CAC  6E1B               	movwf	isdigit@c^0,c
  7375  005CAE  0E00               	movlw	0
  7376  005CB0  6E1A               	movwf	_isdigit$3625^0,c
  7377  005CB2  0E3A               	movlw	58
  7378  005CB4  601B               	cpfslt	isdigit@c^0,c
  7379  005CB6  D005               	goto	l12319
  7380  005CB8  0E2F               	movlw	47
  7381  005CBA  641B               	cpfsgt	isdigit@c^0,c
  7382  005CBC  D002               	goto	l12319
  7383  005CBE  0E01               	movlw	1
  7384  005CC0  6E1A               	movwf	_isdigit$3625^0,c
  7385  005CC2                     l12319:
  7386  005CC2  C01A  F019         	movff	_isdigit$3625,??_isdigit
  7387  005CC6  3019               	rrcf	??_isdigit^0,w,c
  7388  005CC8  0012               	return		;funcret
  7389  005CCA                     __end_of_isdigit:
  7390                           	callstack 0
  7391                           
  7392 ;; *************** function _armazena_longitude *****************
  7393 ;; Defined at:
  7394 ;;		line 56 in file "bibliotecas/fence.c"
  7395 ;; Parameters:    Size  Location     Type
  7396 ;;		None
  7397 ;; Auto vars:     Size  Location     Type
  7398 ;;		None
  7399 ;; Return value:  Size  Location     Type
  7400 ;;                  1    wreg      void 
  7401 ;; Registers used:
  7402 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7403 ;; Tracked objects:
  7404 ;;		On entry : 0/1
  7405 ;;		On exit  : 0/0
  7406 ;;		Unchanged: 0/0
  7407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7408 ;;      Params:         0       0       0       0       0       0       0       0       0
  7409 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7410 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7411 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7412 ;;Total ram usage:        0 bytes
  7413 ;; Hardware stack levels used:    1
  7414 ;; Hardware stack levels required when called:    4
  7415 ;; This function calls:
  7416 ;;		_Longitude
  7417 ;;		_strcpy
  7418 ;; This function is called by:
  7419 ;;		_verifica_fence_externo
  7420 ;; This function uses a non-reentrant model
  7421 ;;
  7422                           
  7423                           	psect	text38
  7424  005D74                     __ptext38:
  7425                           	callstack 0
  7426  005D74                     _armazena_longitude:
  7427                           	callstack 23
  7428                           
  7429                           ;fence.c: 58: strcpy(temp_buff_long, Longitude());
  7430                           
  7431                           ;incstack = 0
  7432  005D74  0E9A               	movlw	low _temp_buff_long
  7433  005D76  6E1B               	movwf	strcpy@to^0,c
  7434  005D78  0E02               	movlw	high _temp_buff_long
  7435  005D7A  6E1C               	movwf	(strcpy@to+1)^0,c
  7436  005D7C  EC64  F02F         	call	_Longitude	;wreg free
  7437  005D80  C019  F01D         	movff	?_Longitude,strcpy@from
  7438  005D84  C01A  F01E         	movff	?_Longitude+1,strcpy@from+1
  7439  005D88  ECA8  F02C         	call	_strcpy	;wreg free
  7440  005D8C  0012               	return		;funcret
  7441  005D8E                     __end_of_armazena_longitude:
  7442                           	callstack 0
  7443                           
  7444 ;; *************** function _Longitude *****************
  7445 ;; Defined at:
  7446 ;;		line 190 in file "bibliotecas/GPS.c"
  7447 ;; Parameters:    Size  Location     Type
  7448 ;;		None
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;		None
  7451 ;; Return value:  Size  Location     Type
  7452 ;;                  2   24[COMRAM] PTR unsigned char 
  7453 ;; Registers used:
  7454 ;;		wreg, status,2, status,0
  7455 ;; Tracked objects:
  7456 ;;		On entry : 0/0
  7457 ;;		On exit  : 0/0
  7458 ;;		Unchanged: 0/0
  7459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7460 ;;      Params:         2       0       0       0       0       0       0       0       0
  7461 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7462 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7463 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7464 ;;Total ram usage:        2 bytes
  7465 ;; Hardware stack levels used:    1
  7466 ;; Hardware stack levels required when called:    3
  7467 ;; This function calls:
  7468 ;;		Nothing
  7469 ;; This function is called by:
  7470 ;;		_troca_de_tela
  7471 ;;		_armazena_longitude
  7472 ;; This function uses a non-reentrant model
  7473 ;;
  7474                           
  7475                           	psect	text39
  7476  005EC8                     __ptext39:
  7477                           	callstack 0
  7478  005EC8                     _Longitude:
  7479                           	callstack 25
  7480                           
  7481                           ;GPS.c: 193: return rawLongitude;
  7482                           
  7483                           ;incstack = 0
  7484  005EC8  0E80               	movlw	low _rawLongitude
  7485  005ECA  6E19               	movwf	?_Longitude^0,c
  7486  005ECC  0E02               	movlw	high _rawLongitude
  7487  005ECE  6E1A               	movwf	(?_Longitude+1)^0,c
  7488  005ED0  0012               	return		;funcret
  7489  005ED2                     __end_of_Longitude:
  7490                           	callstack 0
  7491                           
  7492 ;; *************** function _armazena_latitude *****************
  7493 ;; Defined at:
  7494 ;;		line 68 in file "bibliotecas/fence.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;		None
  7497 ;; Auto vars:     Size  Location     Type
  7498 ;;		None
  7499 ;; Return value:  Size  Location     Type
  7500 ;;                  1    wreg      void 
  7501 ;; Registers used:
  7502 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7503 ;; Tracked objects:
  7504 ;;		On entry : 0/1
  7505 ;;		On exit  : 0/0
  7506 ;;		Unchanged: 0/0
  7507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7508 ;;      Params:         0       0       0       0       0       0       0       0       0
  7509 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7510 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7511 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7512 ;;Total ram usage:        0 bytes
  7513 ;; Hardware stack levels used:    1
  7514 ;; Hardware stack levels required when called:    4
  7515 ;; This function calls:
  7516 ;;		_Latitude
  7517 ;;		_strcpy
  7518 ;; This function is called by:
  7519 ;;		_verifica_fence_externo
  7520 ;; This function uses a non-reentrant model
  7521 ;;
  7522                           
  7523                           	psect	text40
  7524  005D8E                     __ptext40:
  7525                           	callstack 0
  7526  005D8E                     _armazena_latitude:
  7527                           	callstack 23
  7528                           
  7529                           ;fence.c: 70: strcpy(temp_buff_lat, Latitude());
  7530                           
  7531                           ;incstack = 0
  7532  005D8E  0EA6               	movlw	low _temp_buff_lat
  7533  005D90  6E1B               	movwf	strcpy@to^0,c
  7534  005D92  0E02               	movlw	high _temp_buff_lat
  7535  005D94  6E1C               	movwf	(strcpy@to+1)^0,c
  7536  005D96  EC69  F02F         	call	_Latitude	;wreg free
  7537  005D9A  C019  F01D         	movff	?_Latitude,strcpy@from
  7538  005D9E  C01A  F01E         	movff	?_Latitude+1,strcpy@from+1
  7539  005DA2  ECA8  F02C         	call	_strcpy	;wreg free
  7540  005DA6  0012               	return		;funcret
  7541  005DA8                     __end_of_armazena_latitude:
  7542                           	callstack 0
  7543                           
  7544 ;; *************** function _strcpy *****************
  7545 ;; Defined at:
  7546 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strcpy.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;  to              2   26[COMRAM] PTR unsigned char 
  7549 ;;		 -> diff_calc@point(12), diff_calc@fence(12), temp_buff_lat(11), temp_buff_long(12), 
  7550 ;;  from            2   28[COMRAM] PTR const unsigned char 
  7551 ;;		 -> poligono_ext(124), rawLongitude(13), rawLatitude(13), 
  7552 ;; Auto vars:     Size  Location     Type
  7553 ;;  cp              2   30[COMRAM] PTR unsigned char 
  7554 ;;		 -> diff_calc@point(12), diff_calc@fence(12), temp_buff_lat(11), temp_buff_long(12), 
  7555 ;; Return value:  Size  Location     Type
  7556 ;;                  2   26[COMRAM] PTR unsigned char 
  7557 ;; Registers used:
  7558 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  7559 ;; Tracked objects:
  7560 ;;		On entry : 0/1
  7561 ;;		On exit  : 0/0
  7562 ;;		Unchanged: 0/0
  7563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7564 ;;      Params:         4       0       0       0       0       0       0       0       0
  7565 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7566 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7567 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7568 ;;Total ram usage:        6 bytes
  7569 ;; Hardware stack levels used:    1
  7570 ;; Hardware stack levels required when called:    3
  7571 ;; This function calls:
  7572 ;;		Nothing
  7573 ;; This function is called by:
  7574 ;;		_armazena_longitude
  7575 ;;		_armazena_latitude
  7576 ;;		_diff_calc
  7577 ;; This function uses a non-reentrant model
  7578 ;;
  7579                           
  7580                           	psect	text41
  7581  005950                     __ptext41:
  7582                           	callstack 0
  7583  005950                     _strcpy:
  7584                           	callstack 22
  7585                           
  7586                           ;incstack = 0
  7587  005950  C01B  F01F         	movff	strcpy@to,strcpy@cp
  7588  005954  C01C  F020         	movff	strcpy@to+1,strcpy@cp+1
  7589  005958  D004               	goto	l12447
  7590  00595A                     l12445:
  7591  00595A  4A1F               	infsnz	strcpy@cp^0,f,c
  7592  00595C  2A20               	incf	(strcpy@cp+1)^0,f,c
  7593  00595E  4A1D               	infsnz	strcpy@from^0,f,c
  7594  005960  2A1E               	incf	(strcpy@from+1)^0,f,c
  7595  005962                     l12447:
  7596  005962  C01D  FFD9         	movff	strcpy@from,fsr2l
  7597  005966  C01E  FFDA         	movff	strcpy@from+1,fsr2h
  7598  00596A  C01F  FFE1         	movff	strcpy@cp,fsr1l
  7599  00596E  C020  FFE2         	movff	strcpy@cp+1,fsr1h
  7600  005972  CFDF FFE7          	movff	indf2,indf1
  7601  005976  50E7               	movf	indf1,w,c
  7602  005978  B4D8               	btfsc	status,2,c
  7603  00597A  0012               	return	
  7604  00597C  D7EE               	goto	l12445
  7605  00597E                     __end_of_strcpy:
  7606                           	callstack 0
  7607                           
  7608 ;; *************** function _Latitude *****************
  7609 ;; Defined at:
  7610 ;;		line 184 in file "bibliotecas/GPS.c"
  7611 ;; Parameters:    Size  Location     Type
  7612 ;;		None
  7613 ;; Auto vars:     Size  Location     Type
  7614 ;;		None
  7615 ;; Return value:  Size  Location     Type
  7616 ;;                  2   24[COMRAM] PTR unsigned char 
  7617 ;; Registers used:
  7618 ;;		wreg, status,2, status,0
  7619 ;; Tracked objects:
  7620 ;;		On entry : 0/0
  7621 ;;		On exit  : 0/0
  7622 ;;		Unchanged: 0/0
  7623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7624 ;;      Params:         2       0       0       0       0       0       0       0       0
  7625 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7626 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7627 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7628 ;;Total ram usage:        2 bytes
  7629 ;; Hardware stack levels used:    1
  7630 ;; Hardware stack levels required when called:    3
  7631 ;; This function calls:
  7632 ;;		Nothing
  7633 ;; This function is called by:
  7634 ;;		_troca_de_tela
  7635 ;;		_armazena_latitude
  7636 ;; This function uses a non-reentrant model
  7637 ;;
  7638                           
  7639                           	psect	text42
  7640  005ED2                     __ptext42:
  7641                           	callstack 0
  7642  005ED2                     _Latitude:
  7643                           	callstack 25
  7644                           
  7645                           ;GPS.c: 187: return rawLatitude;
  7646                           
  7647                           ;incstack = 0
  7648  005ED2  0E8D               	movlw	low _rawLatitude
  7649  005ED4  6E19               	movwf	?_Latitude^0,c
  7650  005ED6  0E02               	movlw	high _rawLatitude
  7651  005ED8  6E1A               	movwf	(?_Latitude+1)^0,c
  7652  005EDA  0012               	return		;funcret
  7653  005EDC                     __end_of_Latitude:
  7654                           	callstack 0
  7655                           
  7656 ;; *************** function _recebe_dados_gps *****************
  7657 ;; Defined at:
  7658 ;;		line 522 in file "main.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;		None
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;  flag_gps        1   44[COMRAM] unsigned char 
  7663 ;; Return value:  Size  Location     Type
  7664 ;;                  1    wreg      void 
  7665 ;; Registers used:
  7666 ;;		wreg, status,2, status,0, cstack
  7667 ;; Tracked objects:
  7668 ;;		On entry : 3F/1
  7669 ;;		On exit  : 0/0
  7670 ;;		Unchanged: 0/0
  7671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7672 ;;      Params:         0       0       0       0       0       0       0       0       0
  7673 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7674 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7675 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7676 ;;Total ram usage:        1 bytes
  7677 ;; Hardware stack levels used:    1
  7678 ;; Hardware stack levels required when called:    6
  7679 ;; This function calls:
  7680 ;;		_desliga_SPI
  7681 ;;		_desliga_uart
  7682 ;;		_inicializa_SPI
  7683 ;;		_inicializa_uart
  7684 ;;		_verifica_recep_gps
  7685 ;; This function is called by:
  7686 ;;		_disparo_gravacao
  7687 ;; This function uses a non-reentrant model
  7688 ;;
  7689                           
  7690                           	psect	text43
  7691  005A7C                     __ptext43:
  7692                           	callstack 0
  7693  005A7C                     _recebe_dados_gps:
  7694                           	callstack 22
  7695                           
  7696                           ; BSR set to: 1
  7697                           ;main.c: 524: unsigned char flag_gps = 0;
  7698                           
  7699                           ;incstack = 0
  7700  005A7C  0E00               	movlw	0
  7701  005A7E  6E2D               	movwf	recebe_dados_gps@flag_gps^0,c
  7702                           
  7703                           ; BSR set to: 1
  7704                           ;main.c: 525: desliga_SPI();
  7705  005A80  EC47  F02F         	call	_desliga_SPI	;wreg free
  7706                           
  7707                           ; BSR set to: 1
  7708                           ;main.c: 526: PORTBbits.RB3 = 1;
  7709  005A84  8681               	bsf	129,3,c	;volatile
  7710                           
  7711                           ; BSR set to: 1
  7712                           ;main.c: 527: inicializa_uart();
  7713  005A86  ECC0  F02D         	call	_inicializa_uart	;wreg free
  7714                           
  7715                           ;main.c: 530: while(!flag_gps)
  7716  005A8A  D003               	goto	l13927
  7717  005A8C                     l13925:
  7718                           
  7719                           ;main.c: 531: {;main.c: 532: flag_gps = verifica_recep_gps();
  7720  005A8C  EC8A  F02D         	call	_verifica_recep_gps	;wreg free
  7721  005A90  6E2D               	movwf	recebe_dados_gps@flag_gps^0,c
  7722  005A92                     l13927:
  7723  005A92  502D               	movf	recebe_dados_gps@flag_gps^0,w,c
  7724  005A94  B4D8               	btfsc	status,2,c
  7725  005A96  D7FA               	goto	l13925
  7726                           
  7727                           ;main.c: 533: };main.c: 535: PORTBbits.RB3 = 0;
  7728  005A98  9681               	bcf	129,3,c	;volatile
  7729                           
  7730                           ;main.c: 536: desliga_uart();
  7731  005A9A  EC39  F02F         	call	_desliga_uart	;wreg free
  7732                           
  7733                           ;main.c: 537: inicializa_SPI();
  7734  005A9E  EC26  F02E         	call	_inicializa_SPI	;wreg free
  7735  005AA2  0012               	return		;funcret
  7736  005AA4                     __end_of_recebe_dados_gps:
  7737                           	callstack 0
  7738                           
  7739 ;; *************** function _verifica_recep_gps *****************
  7740 ;; Defined at:
  7741 ;;		line 235 in file "bibliotecas/GPS.c"
  7742 ;; Parameters:    Size  Location     Type
  7743 ;;		None
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;		None
  7746 ;; Return value:  Size  Location     Type
  7747 ;;                  1    wreg      unsigned char 
  7748 ;; Registers used:
  7749 ;;		wreg
  7750 ;; Tracked objects:
  7751 ;;		On entry : 3E/0
  7752 ;;		On exit  : 3F/1
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7755 ;;      Params:         0       0       0       0       0       0       0       0       0
  7756 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7757 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7758 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7759 ;;Total ram usage:        0 bytes
  7760 ;; Hardware stack levels used:    1
  7761 ;; Hardware stack levels required when called:    3
  7762 ;; This function calls:
  7763 ;;		Nothing
  7764 ;; This function is called by:
  7765 ;;		_recebe_dados_gps
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           	psect	text44
  7770  005B14                     __ptext44:
  7771                           	callstack 0
  7772  005B14                     _verifica_recep_gps:
  7773                           	callstack 24
  7774                           
  7775                           ;GPS.c: 238: if(gps_flag[0].flag && gps_flag[1].flag && gps_flag[2].flag && gps_flag[3].
      +                          flag && gps_flag[4].flag)
  7776                           
  7777                           ;incstack = 0
  7778  005B14  0101               	movlb	1	; () banked
  7779  005B16  B118               	btfsc	_gps_flag& (0+255),0,b
  7780                           
  7781                           ; BSR set to: 1
  7782  005B18  A119               	btfss	(_gps_flag+1)& (0+255),0,b
  7783  005B1A  D00C               	goto	l9391
  7784                           
  7785                           ; BSR set to: 1
  7786  005B1C  B11A               	btfsc	(_gps_flag+2)& (0+255),0,b
  7787                           
  7788                           ; BSR set to: 1
  7789  005B1E  A11B               	btfss	(_gps_flag+3)& (0+255),0,b
  7790  005B20  D009               	goto	l9391
  7791                           
  7792                           ; BSR set to: 1
  7793  005B22  A11C               	btfss	(_gps_flag+4)& (0+255),0,b
  7794  005B24  D007               	goto	l9391
  7795                           
  7796                           ; BSR set to: 1
  7797                           ;GPS.c: 239: {;GPS.c: 240: gps_flag[0].flag = 0;
  7798  005B26  9118               	bcf	_gps_flag& (0+255),0,b
  7799                           
  7800                           ;GPS.c: 241: gps_flag[1].flag = 0;
  7801  005B28  9119               	bcf	(_gps_flag+1)& (0+255),0,b
  7802                           
  7803                           ;GPS.c: 242: gps_flag[2].flag = 0;
  7804  005B2A  911A               	bcf	(_gps_flag+2)& (0+255),0,b
  7805                           
  7806                           ;GPS.c: 243: gps_flag[3].flag = 0;
  7807  005B2C  911B               	bcf	(_gps_flag+3)& (0+255),0,b
  7808                           
  7809                           ;GPS.c: 244: gps_flag[4].flag = 0;
  7810  005B2E  911C               	bcf	(_gps_flag+4)& (0+255),0,b
  7811                           
  7812                           ; BSR set to: 1
  7813                           ;GPS.c: 245: return 1;
  7814  005B30  0E01               	movlw	1
  7815  005B32  0012               	return	
  7816  005B34                     l9391:
  7817                           
  7818                           ; BSR set to: 1
  7819                           ;GPS.c: 247: else;GPS.c: 248: {;GPS.c: 250: return 0;
  7820  005B34  0E00               	movlw	0
  7821                           
  7822                           ; BSR set to: 1
  7823  005B36  0012               	return		;funcret
  7824  005B38                     __end_of_verifica_recep_gps:
  7825                           	callstack 0
  7826                           
  7827 ;; *************** function _inicializa_uart *****************
  7828 ;; Defined at:
  7829 ;;		line 206 in file "bibliotecas/uart.c"
  7830 ;; Parameters:    Size  Location     Type
  7831 ;;		None
  7832 ;; Auto vars:     Size  Location     Type
  7833 ;;		None
  7834 ;; Return value:  Size  Location     Type
  7835 ;;                  1    wreg      void 
  7836 ;; Registers used:
  7837 ;;		wreg, status,2, status,0, cstack
  7838 ;; Tracked objects:
  7839 ;;		On entry : 3F/1
  7840 ;;		On exit  : 3F/0
  7841 ;;		Unchanged: 0/0
  7842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7843 ;;      Params:         0       0       0       0       0       0       0       0       0
  7844 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7845 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7846 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7847 ;;Total ram usage:        0 bytes
  7848 ;; Hardware stack levels used:    1
  7849 ;; Hardware stack levels required when called:    5
  7850 ;; This function calls:
  7851 ;;		_configura_baudrate_uart
  7852 ;; This function is called by:
  7853 ;;		_recebe_dados_gps
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           	psect	text45
  7858  005B80                     __ptext45:
  7859                           	callstack 0
  7860  005B80                     _inicializa_uart:
  7861                           	callstack 22
  7862                           
  7863                           ; BSR set to: 1
  7864                           ;uart.c: 208: TRISCbits.RC6 = 0;
  7865                           
  7866                           ; BSR set to: 1
  7867                           ;incstack = 0
  7868  005B80  9C94               	bcf	148,6,c	;volatile
  7869                           
  7870                           ;uart.c: 209: TRISCbits.RC7 = 0;
  7871  005B82  9E94               	bcf	148,7,c	;volatile
  7872                           
  7873                           ; BSR set to: 1
  7874                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  7875  005B84  0E80               	movlw	128
  7876  005B86  6E27               	movwf	configura_baudrate_uart@baudrate^0,c
  7877  005B88  0E25               	movlw	37
  7878  005B8A  6E28               	movwf	(configura_baudrate_uart@baudrate+1)^0,c
  7879  005B8C  0E00               	movlw	0
  7880  005B8E  6E29               	movwf	(configura_baudrate_uart@baudrate+2)^0,c
  7881  005B90  0E00               	movlw	0
  7882  005B92  6E2A               	movwf	(configura_baudrate_uart@baudrate+3)^0,c
  7883  005B94  ECB7  F01F         	call	_configura_baudrate_uart	;wreg free
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;uart.c: 213: TXSTA = 0x20;
  7887  005B98  0E20               	movlw	32
  7888  005B9A  6EAC               	movwf	172,c	;volatile
  7889                           
  7890                           ; BSR set to: 0
  7891                           ;uart.c: 214: RCSTA = 0x90;
  7892  005B9C  0E90               	movlw	144
  7893  005B9E  6EAB               	movwf	171,c	;volatile
  7894                           
  7895                           ; BSR set to: 0
  7896  005BA0  0012               	return		;funcret
  7897  005BA2                     __end_of_inicializa_uart:
  7898                           	callstack 0
  7899                           
  7900 ;; *************** function _configura_baudrate_uart *****************
  7901 ;; Defined at:
  7902 ;;		line 50 in file "bibliotecas/uart.c"
  7903 ;; Parameters:    Size  Location     Type
  7904 ;;  baudrate        4   38[COMRAM] const long 
  7905 ;; Auto vars:     Size  Location     Type
  7906 ;;  x               2   42[COMRAM] unsigned int 
  7907 ;; Return value:  Size  Location     Type
  7908 ;;                  1    wreg      unsigned char 
  7909 ;; Registers used:
  7910 ;;		wreg, status,2, status,0, cstack
  7911 ;; Tracked objects:
  7912 ;;		On entry : 3F/1
  7913 ;;		On exit  : 3F/0
  7914 ;;		Unchanged: 0/0
  7915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7916 ;;      Params:         4       0       0       0       0       0       0       0       0
  7917 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7918 ;;      Temps:          0       8       0       0       0       0       0       0       0
  7919 ;;      Totals:         6       8       0       0       0       0       0       0       0
  7920 ;;Total ram usage:       14 bytes
  7921 ;; Hardware stack levels used:    1
  7922 ;; Hardware stack levels required when called:    4
  7923 ;; This function calls:
  7924 ;;		___aldiv
  7925 ;; This function is called by:
  7926 ;;		_inicializa_uart
  7927 ;; This function uses a non-reentrant model
  7928 ;;
  7929                           
  7930                           	psect	text46
  7931  003F6E                     __ptext46:
  7932                           	callstack 0
  7933  003F6E                     _configura_baudrate_uart:
  7934                           	callstack 22
  7935                           
  7936                           ; BSR set to: 1
  7937                           ;uart.c: 52: unsigned int x;;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  7938                           
  7939                           ; BSR set to: 0
  7940                           ;incstack = 0
  7941  003F6E  C027  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  7942  003F72  C028  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  7943  003F76  C029  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  7944  003F7A  C02A  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  7945  003F7E  0E06               	movlw	6
  7946  003F80                     u14065:
  7947  003F80  90D8               	bcf	status,0,c
  7948  003F82  0100               	movlb	0	; () banked
  7949  003F84  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  7950  003F86  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  7951  003F88  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  7952  003F8A  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  7953  003F8C  2EE8               	decfsz	wreg,f,c
  7954  003F8E  D7F8               	goto	u14065
  7955  003F90  5160               	movf	??_configura_baudrate_uart& (0+255),w,b
  7956  003F92  0800               	sublw	0
  7957  003F94  6E19               	movwf	___aldiv@dividend^0,c
  7958  003F96  0E6C               	movlw	108
  7959  003F98  5561               	subfwb	(??_configura_baudrate_uart+1)& (0+255),w,b
  7960  003F9A  6E1A               	movwf	(___aldiv@dividend+1)^0,c
  7961  003F9C  0EDC               	movlw	220
  7962  003F9E  5562               	subfwb	(??_configura_baudrate_uart+2)& (0+255),w,b
  7963  003FA0  6E1B               	movwf	(___aldiv@dividend+2)^0,c
  7964  003FA2  0E02               	movlw	2
  7965  003FA4  5563               	subfwb	(??_configura_baudrate_uart+3)& (0+255),w,b
  7966  003FA6  6E1C               	movwf	(___aldiv@dividend+3)^0,c
  7967  003FA8  C027  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  7968  003FAC  C028  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  7969  003FB0  C029  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  7970  003FB4  C02A  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  7971  003FB8  0E06               	movlw	6
  7972  003FBA                     u14075:
  7973  003FBA  90D8               	bcf	status,0,c
  7974  003FBC  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  7975  003FBE  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  7976  003FC0  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  7977  003FC2  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  7978  003FC4  2EE8               	decfsz	wreg,f,c
  7979  003FC6  D7F9               	goto	u14075
  7980  003FC8  C064  F01D         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  7981  003FCC  C065  F01E         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  7982  003FD0  C066  F01F         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  7983  003FD4  C067  F020         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  7984  003FD8  EC10  F021         	call	___aldiv	;wreg free
  7985  003FDC  C019  F02B         	movff	?___aldiv,configura_baudrate_uart@x
  7986  003FE0  C01A  F02C         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  7987                           
  7988                           ; BSR set to: 0
  7989                           ;uart.c: 55: if(x > 255)
  7990  003FE4  042C               	decf	(configura_baudrate_uart@x+1)^0,w,c
  7991  003FE6  A0D8               	btfss	status,0,c
  7992  003FE8  D03B               	goto	l13129
  7993                           
  7994                           ; BSR set to: 0
  7995                           ;uart.c: 56: {;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  7996  003FEA  C027  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  7997  003FEE  C028  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  7998  003FF2  C029  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  7999  003FF6  C02A  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  8000  003FFA  0E04               	movlw	4
  8001  003FFC                     u14095:
  8002  003FFC  90D8               	bcf	status,0,c
  8003  003FFE  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  8004  004000  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  8005  004002  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  8006  004004  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  8007  004006  2EE8               	decfsz	wreg,f,c
  8008  004008  D7F9               	goto	u14095
  8009  00400A  5160               	movf	??_configura_baudrate_uart& (0+255),w,b
  8010  00400C  0800               	sublw	0
  8011  00400E  6E19               	movwf	___aldiv@dividend^0,c
  8012  004010  0E6C               	movlw	108
  8013  004012  5561               	subfwb	(??_configura_baudrate_uart+1)& (0+255),w,b
  8014  004014  6E1A               	movwf	(___aldiv@dividend+1)^0,c
  8015  004016  0EDC               	movlw	220
  8016  004018  5562               	subfwb	(??_configura_baudrate_uart+2)& (0+255),w,b
  8017  00401A  6E1B               	movwf	(___aldiv@dividend+2)^0,c
  8018  00401C  0E02               	movlw	2
  8019  00401E  5563               	subfwb	(??_configura_baudrate_uart+3)& (0+255),w,b
  8020  004020  6E1C               	movwf	(___aldiv@dividend+3)^0,c
  8021  004022  C027  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  8022  004026  C028  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  8023  00402A  C029  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  8024  00402E  C02A  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  8025  004032  0E04               	movlw	4
  8026  004034                     u14105:
  8027  004034  90D8               	bcf	status,0,c
  8028  004036  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  8029  004038  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  8030  00403A  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  8031  00403C  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  8032  00403E  2EE8               	decfsz	wreg,f,c
  8033  004040  D7F9               	goto	u14105
  8034  004042  C064  F01D         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  8035  004046  C065  F01E         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  8036  00404A  C066  F01F         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  8037  00404E  C067  F020         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  8038  004052  EC10  F021         	call	___aldiv	;wreg free
  8039  004056  C019  F02B         	movff	?___aldiv,configura_baudrate_uart@x
  8040  00405A  C01A  F02C         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  8041                           
  8042                           ; BSR set to: 0
  8043                           ;uart.c: 58: BRGH = 1;
  8044  00405E  84AC               	bsf	4012,2,c	;volatile
  8045  004060                     l13129:
  8046                           
  8047                           ; BSR set to: 0
  8048                           ;uart.c: 59: };uart.c: 60: if(x < 256)
  8049  004060  042C               	decf	(configura_baudrate_uart@x+1)^0,w,c
  8050  004062  B0D8               	btfsc	status,0,c
  8051  004064  0012               	return	
  8052                           
  8053                           ; BSR set to: 0
  8054                           ;uart.c: 61: {;uart.c: 62: SPBRG = x;
  8055  004066  C02B  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  8056                           
  8057                           ;uart.c: 63: SYNC = 0;
  8058  00406A  98AC               	bcf	4012,4,c	;volatile
  8059                           
  8060                           ;uart.c: 64: SPEN = 1;
  8061  00406C  8EAB               	bsf	4011,7,c	;volatile
  8062                           
  8063                           ;uart.c: 65: TRISCbits.RC7 = 1;
  8064  00406E  8E94               	bsf	148,7,c	;volatile
  8065                           
  8066                           ;uart.c: 66: TRISCbits.RC6 = 0;
  8067  004070  9C94               	bcf	148,6,c	;volatile
  8068                           
  8069                           ;uart.c: 67: CREN = 1;
  8070  004072  88AB               	bsf	4011,4,c	;volatile
  8071                           
  8072                           ;uart.c: 68: TXEN = 1;
  8073  004074  8AAC               	bsf	4012,5,c	;volatile
  8074                           
  8075                           ; BSR set to: 0
  8076                           
  8077                           ;uart.c: 70: return (1);;	Return value of _configura_baudrate_uart is never used
  8078  004076  0012               	return		;funcret
  8079  004078                     __end_of_configura_baudrate_uart:
  8080                           	callstack 0
  8081                           
  8082 ;; *************** function ___aldiv *****************
  8083 ;; Defined at:
  8084 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\aldiv.c"
  8085 ;; Parameters:    Size  Location     Type
  8086 ;;  dividend        4   24[COMRAM] long 
  8087 ;;  divisor         4   28[COMRAM] long 
  8088 ;; Auto vars:     Size  Location     Type
  8089 ;;  quotient        4   34[COMRAM] long 
  8090 ;;  sign            1   33[COMRAM] unsigned char 
  8091 ;;  counter         1   32[COMRAM] unsigned char 
  8092 ;; Return value:  Size  Location     Type
  8093 ;;                  4   24[COMRAM] long 
  8094 ;; Registers used:
  8095 ;;		wreg, status,2, status,0
  8096 ;; Tracked objects:
  8097 ;;		On entry : 3F/0
  8098 ;;		On exit  : 3F/0
  8099 ;;		Unchanged: 3F/0
  8100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8101 ;;      Params:         8       0       0       0       0       0       0       0       0
  8102 ;;      Locals:         6       0       0       0       0       0       0       0       0
  8103 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8104 ;;      Totals:        14       0       0       0       0       0       0       0       0
  8105 ;;Total ram usage:       14 bytes
  8106 ;; Hardware stack levels used:    1
  8107 ;; Hardware stack levels required when called:    3
  8108 ;; This function calls:
  8109 ;;		Nothing
  8110 ;; This function is called by:
  8111 ;;		_configura_baudrate_uart
  8112 ;; This function uses a non-reentrant model
  8113 ;;
  8114                           
  8115                           	psect	text47
  8116  004220                     __ptext47:
  8117                           	callstack 0
  8118  004220                     ___aldiv:
  8119                           	callstack 22
  8120                           
  8121                           ; BSR set to: 0
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;incstack = 0
  8125  004220  0E00               	movlw	0
  8126  004222  6E22               	movwf	___aldiv@sign^0,c
  8127                           
  8128                           ; BSR set to: 0
  8129  004224  AE20               	btfss	(___aldiv@divisor+3)^0,7,c
  8130  004226  D00A               	goto	l8689
  8131                           
  8132                           ; BSR set to: 0
  8133  004228  1E20               	comf	(___aldiv@divisor+3)^0,f,c
  8134  00422A  1E1F               	comf	(___aldiv@divisor+2)^0,f,c
  8135  00422C  1E1E               	comf	(___aldiv@divisor+1)^0,f,c
  8136  00422E  6C1D               	negf	___aldiv@divisor^0,c
  8137  004230  0E00               	movlw	0
  8138  004232  221E               	addwfc	(___aldiv@divisor+1)^0,f,c
  8139  004234  221F               	addwfc	(___aldiv@divisor+2)^0,f,c
  8140  004236  2220               	addwfc	(___aldiv@divisor+3)^0,f,c
  8141                           
  8142                           ; BSR set to: 0
  8143  004238  0E01               	movlw	1
  8144  00423A  6E22               	movwf	___aldiv@sign^0,c
  8145  00423C                     l8689:
  8146                           
  8147                           ; BSR set to: 0
  8148  00423C  AE1C               	btfss	(___aldiv@dividend+3)^0,7,c
  8149  00423E  D00A               	goto	l8695
  8150                           
  8151                           ; BSR set to: 0
  8152  004240  1E1C               	comf	(___aldiv@dividend+3)^0,f,c
  8153  004242  1E1B               	comf	(___aldiv@dividend+2)^0,f,c
  8154  004244  1E1A               	comf	(___aldiv@dividend+1)^0,f,c
  8155  004246  6C19               	negf	___aldiv@dividend^0,c
  8156  004248  0E00               	movlw	0
  8157  00424A  221A               	addwfc	(___aldiv@dividend+1)^0,f,c
  8158  00424C  221B               	addwfc	(___aldiv@dividend+2)^0,f,c
  8159  00424E  221C               	addwfc	(___aldiv@dividend+3)^0,f,c
  8160                           
  8161                           ; BSR set to: 0
  8162  004250  0E01               	movlw	1
  8163  004252  1A22               	xorwf	___aldiv@sign^0,f,c
  8164  004254                     l8695:
  8165                           
  8166                           ; BSR set to: 0
  8167  004254  0E00               	movlw	0
  8168  004256  6E23               	movwf	___aldiv@quotient^0,c
  8169  004258  0E00               	movlw	0
  8170  00425A  6E24               	movwf	(___aldiv@quotient+1)^0,c
  8171  00425C  0E00               	movlw	0
  8172  00425E  6E25               	movwf	(___aldiv@quotient+2)^0,c
  8173  004260  0E00               	movlw	0
  8174  004262  6E26               	movwf	(___aldiv@quotient+3)^0,c
  8175                           
  8176                           ; BSR set to: 0
  8177  004264  501D               	movf	___aldiv@divisor^0,w,c
  8178  004266  101E               	iorwf	(___aldiv@divisor+1)^0,w,c
  8179  004268  101F               	iorwf	(___aldiv@divisor+2)^0,w,c
  8180  00426A  1020               	iorwf	(___aldiv@divisor+3)^0,w,c
  8181  00426C  B4D8               	btfsc	status,2,c
  8182  00426E  D02A               	goto	l8717
  8183                           
  8184                           ; BSR set to: 0
  8185  004270  0E01               	movlw	1
  8186  004272  6E21               	movwf	___aldiv@counter^0,c
  8187  004274  D006               	goto	l8703
  8188  004276                     l8701:
  8189                           
  8190                           ; BSR set to: 0
  8191  004276  90D8               	bcf	status,0,c
  8192  004278  361D               	rlcf	___aldiv@divisor^0,f,c
  8193  00427A  361E               	rlcf	(___aldiv@divisor+1)^0,f,c
  8194  00427C  361F               	rlcf	(___aldiv@divisor+2)^0,f,c
  8195  00427E  3620               	rlcf	(___aldiv@divisor+3)^0,f,c
  8196  004280  2A21               	incf	___aldiv@counter^0,f,c
  8197  004282                     l8703:
  8198                           
  8199                           ; BSR set to: 0
  8200  004282  AE20               	btfss	(___aldiv@divisor+3)^0,7,c
  8201  004284  D7F8               	goto	l8701
  8202  004286                     u7860:
  8203                           
  8204                           ; BSR set to: 0
  8205  004286  90D8               	bcf	status,0,c
  8206  004288  3623               	rlcf	___aldiv@quotient^0,f,c
  8207  00428A  3624               	rlcf	(___aldiv@quotient+1)^0,f,c
  8208  00428C  3625               	rlcf	(___aldiv@quotient+2)^0,f,c
  8209  00428E  3626               	rlcf	(___aldiv@quotient+3)^0,f,c
  8210                           
  8211                           ; BSR set to: 0
  8212  004290  501D               	movf	___aldiv@divisor^0,w,c
  8213  004292  5C19               	subwf	___aldiv@dividend^0,w,c
  8214  004294  501E               	movf	(___aldiv@divisor+1)^0,w,c
  8215  004296  581A               	subwfb	(___aldiv@dividend+1)^0,w,c
  8216  004298  501F               	movf	(___aldiv@divisor+2)^0,w,c
  8217  00429A  581B               	subwfb	(___aldiv@dividend+2)^0,w,c
  8218  00429C  5020               	movf	(___aldiv@divisor+3)^0,w,c
  8219  00429E  581C               	subwfb	(___aldiv@dividend+3)^0,w,c
  8220  0042A0  A0D8               	btfss	status,0,c
  8221  0042A2  D009               	goto	l8713
  8222                           
  8223                           ; BSR set to: 0
  8224  0042A4  501D               	movf	___aldiv@divisor^0,w,c
  8225  0042A6  5E19               	subwf	___aldiv@dividend^0,f,c
  8226  0042A8  501E               	movf	(___aldiv@divisor+1)^0,w,c
  8227  0042AA  5A1A               	subwfb	(___aldiv@dividend+1)^0,f,c
  8228  0042AC  501F               	movf	(___aldiv@divisor+2)^0,w,c
  8229  0042AE  5A1B               	subwfb	(___aldiv@dividend+2)^0,f,c
  8230  0042B0  5020               	movf	(___aldiv@divisor+3)^0,w,c
  8231  0042B2  5A1C               	subwfb	(___aldiv@dividend+3)^0,f,c
  8232                           
  8233                           ; BSR set to: 0
  8234  0042B4  8023               	bsf	___aldiv@quotient^0,0,c
  8235  0042B6                     l8713:
  8236                           
  8237                           ; BSR set to: 0
  8238  0042B6  90D8               	bcf	status,0,c
  8239  0042B8  3220               	rrcf	(___aldiv@divisor+3)^0,f,c
  8240  0042BA  321F               	rrcf	(___aldiv@divisor+2)^0,f,c
  8241  0042BC  321E               	rrcf	(___aldiv@divisor+1)^0,f,c
  8242  0042BE  321D               	rrcf	___aldiv@divisor^0,f,c
  8243                           
  8244                           ; BSR set to: 0
  8245  0042C0  2E21               	decfsz	___aldiv@counter^0,f,c
  8246  0042C2  D7E1               	goto	u7860
  8247  0042C4                     l8717:
  8248                           
  8249                           ; BSR set to: 0
  8250  0042C4  5022               	movf	___aldiv@sign^0,w,c
  8251  0042C6  B4D8               	btfsc	status,2,c
  8252  0042C8  D008               	goto	l8721
  8253                           
  8254                           ; BSR set to: 0
  8255  0042CA  1E26               	comf	(___aldiv@quotient+3)^0,f,c
  8256  0042CC  1E25               	comf	(___aldiv@quotient+2)^0,f,c
  8257  0042CE  1E24               	comf	(___aldiv@quotient+1)^0,f,c
  8258  0042D0  6C23               	negf	___aldiv@quotient^0,c
  8259  0042D2  0E00               	movlw	0
  8260  0042D4  2224               	addwfc	(___aldiv@quotient+1)^0,f,c
  8261  0042D6  2225               	addwfc	(___aldiv@quotient+2)^0,f,c
  8262  0042D8  2226               	addwfc	(___aldiv@quotient+3)^0,f,c
  8263  0042DA                     l8721:
  8264                           
  8265                           ; BSR set to: 0
  8266  0042DA  C023  F019         	movff	___aldiv@quotient,?___aldiv
  8267  0042DE  C024  F01A         	movff	___aldiv@quotient+1,?___aldiv+1
  8268  0042E2  C025  F01B         	movff	___aldiv@quotient+2,?___aldiv+2
  8269  0042E6  C026  F01C         	movff	___aldiv@quotient+3,?___aldiv+3
  8270                           
  8271                           ; BSR set to: 0
  8272  0042EA  0012               	return		;funcret
  8273  0042EC                     __end_of___aldiv:
  8274                           	callstack 0
  8275                           
  8276 ;; *************** function _inicializa_SPI *****************
  8277 ;; Defined at:
  8278 ;;		line 48 in file "bibliotecas/SPI.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;		None
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;		None
  8283 ;; Return value:  Size  Location     Type
  8284 ;;                  1    wreg      void 
  8285 ;; Registers used:
  8286 ;;		wreg, status,2, status,0
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8292 ;;      Params:         0       0       0       0       0       0       0       0       0
  8293 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8294 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8295 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8296 ;;Total ram usage:        0 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; Hardware stack levels required when called:    3
  8299 ;; This function calls:
  8300 ;;		Nothing
  8301 ;; This function is called by:
  8302 ;;		_recebe_dados_gps
  8303 ;; This function uses a non-reentrant model
  8304 ;;
  8305                           
  8306                           	psect	text48
  8307  005C4C                     __ptext48:
  8308                           	callstack 0
  8309  005C4C                     _inicializa_SPI:
  8310                           	callstack 24
  8311                           
  8312                           ;SPI.c: 50: TRISBbits.RB1 = 0;
  8313                           
  8314                           ; BSR set to: 0
  8315                           ;incstack = 0
  8316  005C4C  9293               	bcf	147,1,c	;volatile
  8317                           
  8318                           ;SPI.c: 51: TRISBbits.RB5 = 0;
  8319  005C4E  9A93               	bcf	147,5,c	;volatile
  8320                           
  8321                           ;SPI.c: 52: TRISBbits.RB0 = 1;
  8322  005C50  8093               	bsf	147,0,c	;volatile
  8323                           
  8324                           ;SPI.c: 53: TRISCbits.RC7 = 0;
  8325  005C52  9E94               	bcf	148,7,c	;volatile
  8326                           
  8327                           ;SPI.c: 55: LATBbits.LATB5 = 1;
  8328  005C54  8A8A               	bsf	138,5,c	;volatile
  8329                           
  8330                           ;SPI.c: 56: SSPSTAT &= 0x3F;
  8331  005C56  0E3F               	movlw	63
  8332  005C58  16C7               	andwf	199,f,c	;volatile
  8333                           
  8334                           ;SPI.c: 57: SSPCON1 = 0x00;
  8335  005C5A  0E00               	movlw	0
  8336  005C5C  6EC6               	movwf	198,c	;volatile
  8337                           
  8338                           ;SPI.c: 59: SSPSTATbits.SMP = 0;
  8339  005C5E  9EC7               	bcf	199,7,c	;volatile
  8340                           
  8341                           ;SPI.c: 60: SSPSTATbits.CKE = 1;
  8342  005C60  8CC7               	bsf	199,6,c	;volatile
  8343                           
  8344                           ;SPI.c: 61: SSPCON1bits.CKP = 0;
  8345  005C62  98C6               	bcf	198,4,c	;volatile
  8346                           
  8347                           ;SPI.c: 63: SSPCON1 = 0b00000011;
  8348  005C64  0E03               	movlw	3
  8349  005C66  6EC6               	movwf	198,c	;volatile
  8350                           
  8351                           ;SPI.c: 65: SSPCON1bits.SSPEN = 1;
  8352  005C68  8AC6               	bsf	198,5,c	;volatile
  8353  005C6A  0012               	return		;funcret
  8354  005C6C                     __end_of_inicializa_SPI:
  8355                           	callstack 0
  8356                           
  8357 ;; *************** function _desliga_uart *****************
  8358 ;; Defined at:
  8359 ;;		line 219 in file "bibliotecas/uart.c"
  8360 ;; Parameters:    Size  Location     Type
  8361 ;;		None
  8362 ;; Auto vars:     Size  Location     Type
  8363 ;;		None
  8364 ;; Return value:  Size  Location     Type
  8365 ;;                  1    wreg      void 
  8366 ;; Registers used:
  8367 ;;		wreg, status,2
  8368 ;; Tracked objects:
  8369 ;;		On entry : 3E/0
  8370 ;;		On exit  : 3E/0
  8371 ;;		Unchanged: 3E/0
  8372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8373 ;;      Params:         0       0       0       0       0       0       0       0       0
  8374 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8375 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8376 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8377 ;;Total ram usage:        0 bytes
  8378 ;; Hardware stack levels used:    1
  8379 ;; Hardware stack levels required when called:    3
  8380 ;; This function calls:
  8381 ;;		Nothing
  8382 ;; This function is called by:
  8383 ;;		_verifica_dados_operacionais
  8384 ;;		_recebe_dados_gps
  8385 ;; This function uses a non-reentrant model
  8386 ;;
  8387                           
  8388                           	psect	text49
  8389  005E72                     __ptext49:
  8390                           	callstack 0
  8391  005E72                     _desliga_uart:
  8392                           	callstack 25
  8393                           
  8394                           ;uart.c: 221: TRISCbits.RC6 = 1;
  8395                           
  8396                           ;incstack = 0
  8397  005E72  8C94               	bsf	148,6,c	;volatile
  8398                           
  8399                           ;uart.c: 222: TRISCbits.RC7 = 1;
  8400  005E74  8E94               	bsf	148,7,c	;volatile
  8401                           
  8402                           ;uart.c: 225: TXSTA = 0x00;
  8403  005E76  0E00               	movlw	0
  8404  005E78  6EAC               	movwf	172,c	;volatile
  8405                           
  8406                           ;uart.c: 227: RCSTA = 0x00;
  8407  005E7A  0E00               	movlw	0
  8408  005E7C  6EAB               	movwf	171,c	;volatile
  8409  005E7E  0012               	return		;funcret
  8410  005E80                     __end_of_desliga_uart:
  8411                           	callstack 0
  8412                           
  8413 ;; *************** function _desliga_SPI *****************
  8414 ;; Defined at:
  8415 ;;		line 68 in file "bibliotecas/SPI.c"
  8416 ;; Parameters:    Size  Location     Type
  8417 ;;		None
  8418 ;; Auto vars:     Size  Location     Type
  8419 ;;		None
  8420 ;; Return value:  Size  Location     Type
  8421 ;;                  1    wreg      void 
  8422 ;; Registers used:
  8423 ;;		wreg, status,2
  8424 ;; Tracked objects:
  8425 ;;		On entry : 3F/1
  8426 ;;		On exit  : 3F/1
  8427 ;;		Unchanged: 3F/0
  8428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8429 ;;      Params:         0       0       0       0       0       0       0       0       0
  8430 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8431 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8432 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8433 ;;Total ram usage:        0 bytes
  8434 ;; Hardware stack levels used:    1
  8435 ;; Hardware stack levels required when called:    3
  8436 ;; This function calls:
  8437 ;;		Nothing
  8438 ;; This function is called by:
  8439 ;;		_recebe_dados_gps
  8440 ;; This function uses a non-reentrant model
  8441 ;;
  8442                           
  8443                           	psect	text50
  8444  005E8E                     __ptext50:
  8445                           	callstack 0
  8446  005E8E                     _desliga_SPI:
  8447                           	callstack 24
  8448                           
  8449                           ; BSR set to: 1
  8450                           ;SPI.c: 70: SSPSTAT = 0x00;
  8451                           
  8452                           ;incstack = 0
  8453  005E8E  0E00               	movlw	0
  8454  005E90  6EC7               	movwf	199,c	;volatile
  8455                           
  8456                           ;SPI.c: 71: SSPCON1 = 0x00;
  8457  005E92  0E00               	movlw	0
  8458  005E94  6EC6               	movwf	198,c	;volatile
  8459                           
  8460                           ; BSR set to: 1
  8461                           ;SPI.c: 72: SSPCON1bits.SSPEN = 0;
  8462  005E96  9AC6               	bcf	198,5,c	;volatile
  8463                           
  8464                           ; BSR set to: 1
  8465  005E98  0012               	return		;funcret
  8466  005E9A                     __end_of_desliga_SPI:
  8467                           	callstack 0
  8468                           
  8469 ;; *************** function _fix *****************
  8470 ;; Defined at:
  8471 ;;		line 196 in file "bibliotecas/GPS.c"
  8472 ;; Parameters:    Size  Location     Type
  8473 ;;		None
  8474 ;; Auto vars:     Size  Location     Type
  8475 ;;		None
  8476 ;; Return value:  Size  Location     Type
  8477 ;;                  2   24[COMRAM] PTR unsigned char 
  8478 ;; Registers used:
  8479 ;;		wreg, status,2, status,0
  8480 ;; Tracked objects:
  8481 ;;		On entry : 0/0
  8482 ;;		On exit  : 0/0
  8483 ;;		Unchanged: 0/0
  8484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8485 ;;      Params:         2       0       0       0       0       0       0       0       0
  8486 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8487 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8488 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8489 ;;Total ram usage:        2 bytes
  8490 ;; Hardware stack levels used:    1
  8491 ;; Hardware stack levels required when called:    3
  8492 ;; This function calls:
  8493 ;;		Nothing
  8494 ;; This function is called by:
  8495 ;;		_disparo_gravacao
  8496 ;;		_troca_de_tela
  8497 ;; This function uses a non-reentrant model
  8498 ;;
  8499                           
  8500                           	psect	text51
  8501  005EDC                     __ptext51:
  8502                           	callstack 0
  8503  005EDC                     _fix:
  8504                           	callstack 25
  8505                           
  8506                           ;GPS.c: 198: return rawFix;
  8507                           
  8508                           ; BSR set to: 1
  8509                           ;incstack = 0
  8510  005EDC  0EFA               	movlw	low _rawFix
  8511  005EDE  6E19               	movwf	?_fix^0,c
  8512  005EE0  0E01               	movlw	high _rawFix
  8513  005EE2  6E1A               	movwf	(?_fix+1)^0,c
  8514  005EE4  0012               	return		;funcret
  8515  005EE6                     __end_of_fix:
  8516                           	callstack 0
  8517                           
  8518 ;; *************** function _escrita_sdcard *****************
  8519 ;; Defined at:
  8520 ;;		line 207 in file "bibliotecas/SDCard.c"
  8521 ;; Parameters:    Size  Location     Type
  8522 ;;		None
  8523 ;; Auto vars:     Size  Location     Type
  8524 ;;  fix_gps         3    0        PTR unsigned char 
  8525 ;;  bw              2    0        unsigned short 
  8526 ;;  j               1    0        unsigned char 
  8527 ;;  i               1    0        unsigned char 
  8528 ;; Return value:  Size  Location     Type
  8529 ;;                  1    wreg      void 
  8530 ;; Registers used:
  8531 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8532 ;; Tracked objects:
  8533 ;;		On entry : 0/1
  8534 ;;		On exit  : 0/0
  8535 ;;		Unchanged: 0/0
  8536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8537 ;;      Params:         0       0       0       0       0       0       0       0       0
  8538 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8539 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8540 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8541 ;;Total ram usage:        0 bytes
  8542 ;; Hardware stack levels used:    1
  8543 ;; Hardware stack levels required when called:   15
  8544 ;; This function calls:
  8545 ;;		_dados_gps_to_sd
  8546 ;;		_data_nome
  8547 ;;		_f_close
  8548 ;;		_f_lseek
  8549 ;;		_f_mount
  8550 ;;		_f_open
  8551 ;;		_fprintf
  8552 ;;		_hora_nome
  8553 ;;		_strcat
  8554 ;; This function is called by:
  8555 ;;		_disparo_gravacao
  8556 ;; This function uses a non-reentrant model
  8557 ;;
  8558                           
  8559                           	psect	text52
  8560  003AE6                     __ptext52:
  8561                           	callstack 0
  8562  003AE6                     _escrita_sdcard:
  8563                           	callstack 13
  8564                           
  8565                           ;SDCard.c: 209: unsigned char *fix_gps;;SDCard.c: 210: unsigned char i, j;;SDCard.c: 211
      +                          : static unsigned char f_fix = 0;;SDCard.c: 212: WORD bw;;SDCard.c: 213: PORTBbits.RB3 =
      +                           0;
  8566                           
  8567                           ;incstack = 0
  8568  003AE6  9681               	bcf	129,3,c	;volatile
  8569                           
  8570                           ;SDCard.c: 216: dados_gps_to_sd();
  8571  003AE8  EC7A  F029         	call	_dados_gps_to_sd	;wreg free
  8572                           
  8573                           ;SDCard.c: 217: f_mount(0,&fs);
  8574  003AEC  0EE1               	movlw	low _fs
  8575  003AEE  6E19               	movwf	f_mount@fs^0,c
  8576  003AF0  0E02               	movlw	high _fs
  8577  003AF2  6E1A               	movwf	(f_mount@fs+1)^0,c
  8578  003AF4  0E00               	movlw	0
  8579  003AF6  ECB9  F02A         	call	_f_mount
  8580                           
  8581                           ;SDCard.c: 219: if(!f_fix)
  8582  003AFA  5042               	movf	escrita_sdcard@f_fix^0,w,c
  8583  003AFC  A4D8               	btfss	status,2,c
  8584  003AFE  D021               	goto	l13857
  8585                           
  8586                           ;SDCard.c: 220: {;SDCard.c: 222: if(string_dado.data_name[0] != ' ' && string_dado.hora_
      +                          name[0] != ' ')
  8587  003B00  0E20               	movlw	32
  8588  003B02  0102               	movlb	2	; () banked
  8589  003B04  1925               	xorwf	(_string_dado+18)& (0+255),w,b
  8590  003B06  B4D8               	btfsc	status,2,c
  8591  003B08  D01C               	goto	l13857
  8592                           
  8593                           ; BSR set to: 2
  8594  003B0A  0E20               	movlw	32
  8595  003B0C  1927               	xorwf	(_string_dado+20)& (0+255),w,b
  8596  003B0E  B4D8               	btfsc	status,2,c
  8597  003B10  D018               	goto	l13857
  8598                           
  8599                           ; BSR set to: 2
  8600                           ;SDCard.c: 223: {;SDCard.c: 224: data_nome(string_dado.data);
  8601  003B12  0E13               	movlw	low _string_dado
  8602  003B14  6E19               	movwf	data_nome@p_buff^0,c
  8603  003B16  0E02               	movlw	high _string_dado
  8604  003B18  6E1A               	movwf	(data_nome@p_buff+1)^0,c
  8605  003B1A  EC15  F02D         	call	_data_nome	;wreg free
  8606                           
  8607                           ;SDCard.c: 225: hora_nome(string_dado.hora);
  8608  003B1E  0E1A               	movlw	low (_string_dado+7)
  8609  003B20  6E19               	movwf	hora_nome@p_buff^0,c
  8610  003B22  0E02               	movlw	high (_string_dado+7)
  8611  003B24  6E1A               	movwf	(hora_nome@p_buff+1)^0,c
  8612  003B26  ECEB  F02C         	call	_hora_nome	;wreg free
  8613                           
  8614                           ; BSR set to: 2
  8615                           ;SDCard.c: 226: strcat(filename, ".tlm");
  8616  003B2A  0E6C               	movlw	low _filename
  8617  003B2C  6E19               	movwf	strcat@to^0,c
  8618  003B2E  0E02               	movlw	high _filename
  8619  003B30  6E1A               	movwf	(strcat@to+1)^0,c
  8620  003B32  0E69               	movlw	low STR_13
  8621  003B34  6E1B               	movwf	strcat@from^0,c
  8622  003B36  0E62               	movlw	high STR_13
  8623  003B38  6E1C               	movwf	(strcat@from+1)^0,c
  8624  003B3A  EC46  F02B         	call	_strcat	;wreg free
  8625                           
  8626                           ; BSR set to: 2
  8627                           ;SDCard.c: 227: f_fix = 1;
  8628  003B3E  0E01               	movlw	1
  8629  003B40  6E42               	movwf	escrita_sdcard@f_fix^0,c
  8630  003B42                     l13857:
  8631                           
  8632                           ;SDCard.c: 228: };SDCard.c: 231: };SDCard.c: 232: if(f_fix)
  8633  003B42  5042               	movf	escrita_sdcard@f_fix^0,w,c
  8634  003B44  B4D8               	btfsc	status,2,c
  8635  003B46  D061               	goto	l13871
  8636                           
  8637                           ;SDCard.c: 233: {;SDCard.c: 235: if (f_open(&fil, filename, 0x02 ) == FR_OK)
  8638  003B48  0EAE               	movlw	low _fil
  8639  003B4A  0100               	movlb	0	; () banked
  8640  003B4C  6FC0               	movwf	f_open@fp& (0+255),b
  8641  003B4E  0E01               	movlw	high _fil
  8642  003B50  6FC1               	movwf	(f_open@fp+1)& (0+255),b
  8643  003B52  0E6C               	movlw	low _filename
  8644  003B54  6FC2               	movwf	f_open@path& (0+255),b
  8645  003B56  0E02               	movlw	high _filename
  8646  003B58  6FC3               	movwf	(f_open@path+1)& (0+255),b
  8647  003B5A  0E02               	movlw	2
  8648  003B5C  6FC4               	movwf	f_open@mode& (0+255),b
  8649  003B5E  EC76  F009         	call	_f_open	;wreg free
  8650  003B62  0900               	iorlw	0
  8651  003B64  A4D8               	btfss	status,2,c
  8652  003B66  D044               	goto	l13867
  8653                           
  8654                           ; BSR set to: 0
  8655                           ;SDCard.c: 236: {;SDCard.c: 238: f_lseek(&fil, ((&fil)->fsize));
  8656  003B68  0EAE               	movlw	low _fil
  8657  003B6A  6FAE               	movwf	f_lseek@fp& (0+255),b
  8658  003B6C  0E01               	movlw	high _fil
  8659  003B6E  6FAF               	movwf	(f_lseek@fp+1)& (0+255),b
  8660  003B70  C1B8  F0B0         	movff	_fil+10,f_lseek@ofs
  8661  003B74  C1B9  F0B1         	movff	_fil+11,f_lseek@ofs+1
  8662  003B78  C1BA  F0B2         	movff	_fil+12,f_lseek@ofs+2
  8663  003B7C  C1BB  F0B3         	movff	_fil+13,f_lseek@ofs+3
  8664  003B80  EC72  F005         	call	_f_lseek	;wreg free
  8665                           
  8666                           ; BSR set to: 0
  8667                           ;SDCard.c: 239: fprintf(&fil, "\nv%s;lt%s;lo%s;r%s;c%s;k%s;h%s;d%s;f%s", "string_dado.ve
      +                          l", string_dado.lt, string_dado.lo, "string_dado.rpm", "string_dado.comb", "string_dado.
      +                          odometro_total", string_dado.hora, "string_dado.dtc", string_dado.fence);
  8668  003B84  0EAE               	movlw	low _fil
  8669  003B86  6FD9               	movwf	fprintf@fil& (0+255),b
  8670  003B88  0E01               	movlw	high _fil
  8671  003B8A  6FDA               	movwf	(fprintf@fil+1)& (0+255),b
  8672  003B8C  0E07               	movlw	low STR_14
  8673  003B8E  6FDB               	movwf	fprintf@str& (0+255),b
  8674  003B90  0E61               	movlw	high STR_14
  8675  003B92  6FDC               	movwf	(fprintf@str+1)& (0+255),b
  8676  003B94  0E90               	movlw	low STR_15
  8677  003B96  6FDD               	movwf	(?_fprintf+4)& (0+255),b
  8678  003B98  0E61               	movlw	high STR_15
  8679  003B9A  6FDE               	movwf	(?_fprintf+5)& (0+255),b
  8680  003B9C  0E29               	movlw	low (_string_dado+22)
  8681  003B9E  6FDF               	movwf	(?_fprintf+6)& (0+255),b
  8682  003BA0  0E02               	movlw	high (_string_dado+22)
  8683  003BA2  6FE0               	movwf	(?_fprintf+7)& (0+255),b
  8684  003BA4  0E36               	movlw	low (_string_dado+35)
  8685  003BA6  6FE1               	movwf	(?_fprintf+8)& (0+255),b
  8686  003BA8  0E02               	movlw	high (_string_dado+35)
  8687  003BAA  6FE2               	movwf	(?_fprintf+9)& (0+255),b
  8688  003BAC  0EA0               	movlw	low STR_16
  8689  003BAE  6FE3               	movwf	(?_fprintf+10)& (0+255),b
  8690  003BB0  0E61               	movlw	high STR_16
  8691  003BB2  6FE4               	movwf	(?_fprintf+11)& (0+255),b
  8692  003BB4  0E6F               	movlw	low STR_17
  8693  003BB6  6FE5               	movwf	(?_fprintf+12)& (0+255),b
  8694  003BB8  0E61               	movlw	high STR_17
  8695  003BBA  6FE6               	movwf	(?_fprintf+13)& (0+255),b
  8696  003BBC  0E2E               	movlw	low STR_18
  8697  003BBE  6FE7               	movwf	(?_fprintf+14)& (0+255),b
  8698  003BC0  0E61               	movlw	high STR_18
  8699  003BC2  6FE8               	movwf	(?_fprintf+15)& (0+255),b
  8700  003BC4  0E1A               	movlw	low (_string_dado+7)
  8701  003BC6  6FE9               	movwf	(?_fprintf+16)& (0+255),b
  8702  003BC8  0E02               	movlw	high (_string_dado+7)
  8703  003BCA  6FEA               	movwf	(?_fprintf+17)& (0+255),b
  8704  003BCC  0E80               	movlw	low STR_19
  8705  003BCE  6FEB               	movwf	(?_fprintf+18)& (0+255),b
  8706  003BD0  0E61               	movlw	high STR_19
  8707  003BD2  6FEC               	movwf	(?_fprintf+19)& (0+255),b
  8708  003BD4  0E52               	movlw	low (_string_dado+63)
  8709  003BD6  6FED               	movwf	(?_fprintf+20)& (0+255),b
  8710  003BD8  0E02               	movlw	high (_string_dado+63)
  8711  003BDA  6FEE               	movwf	(?_fprintf+21)& (0+255),b
  8712  003BDC  ECB7  F007         	call	_fprintf	;wreg free
  8713  003BE0                     l13865:
  8714                           
  8715                           ;SDCard.c: 242: f_close(&fil);
  8716  003BE0  0EAE               	movlw	low _fil
  8717  003BE2  0100               	movlb	0	; () banked
  8718  003BE4  6F93               	movwf	f_close@fp& (0+255),b
  8719  003BE6  0E01               	movlw	high _fil
  8720  003BE8  6F94               	movwf	(f_close@fp+1)& (0+255),b
  8721  003BEA  EC00  F02D         	call	_f_close	;wreg free
  8722                           
  8723                           ;SDCard.c: 243: }
  8724  003BEE  D00D               	goto	l13871
  8725  003BF0                     l13867:
  8726                           
  8727                           ; BSR set to: 0
  8728                           ;SDCard.c: 244: else;SDCard.c: 245: {;SDCard.c: 246: f_open(&fil, filename, 0x08 );
  8729  003BF0  0EAE               	movlw	low _fil
  8730  003BF2  6FC0               	movwf	f_open@fp& (0+255),b
  8731  003BF4  0E01               	movlw	high _fil
  8732  003BF6  6FC1               	movwf	(f_open@fp+1)& (0+255),b
  8733  003BF8  0E6C               	movlw	low _filename
  8734  003BFA  6FC2               	movwf	f_open@path& (0+255),b
  8735  003BFC  0E02               	movlw	high _filename
  8736  003BFE  6FC3               	movwf	(f_open@path+1)& (0+255),b
  8737  003C00  0E08               	movlw	8
  8738  003C02  6FC4               	movwf	f_open@mode& (0+255),b
  8739  003C04  EC76  F009         	call	_f_open	;wreg free
  8740  003C08  D7EB               	goto	l13865
  8741  003C0A                     l13871:
  8742                           
  8743                           ;SDCard.c: 249: };SDCard.c: 250: };SDCard.c: 251: PORTBbits.RB3 = 1;
  8744  003C0A  8681               	bsf	129,3,c	;volatile
  8745  003C0C  0012               	return		;funcret
  8746  003C0E                     __end_of_escrita_sdcard:
  8747                           	callstack 0
  8748                           
  8749 ;; *************** function _strcat *****************
  8750 ;; Defined at:
  8751 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strcat.c"
  8752 ;; Parameters:    Size  Location     Type
  8753 ;;  to              2   24[COMRAM] PTR unsigned char 
  8754 ;;		 -> filename(20), 
  8755 ;;  from            2   26[COMRAM] PTR const unsigned char 
  8756 ;;		 -> STR_13(5), 
  8757 ;; Auto vars:     Size  Location     Type
  8758 ;;  cp              2   28[COMRAM] PTR unsigned char 
  8759 ;;		 -> filename(20), 
  8760 ;; Return value:  Size  Location     Type
  8761 ;;                  2   24[COMRAM] PTR unsigned char 
  8762 ;; Registers used:
  8763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8764 ;; Tracked objects:
  8765 ;;		On entry : 3F/2
  8766 ;;		On exit  : 3F/2
  8767 ;;		Unchanged: 3F/0
  8768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8769 ;;      Params:         4       0       0       0       0       0       0       0       0
  8770 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8771 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8772 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8773 ;;Total ram usage:        6 bytes
  8774 ;; Hardware stack levels used:    1
  8775 ;; Hardware stack levels required when called:    3
  8776 ;; This function calls:
  8777 ;;		Nothing
  8778 ;; This function is called by:
  8779 ;;		_escrita_sdcard
  8780 ;; This function uses a non-reentrant model
  8781 ;;
  8782                           
  8783                           	psect	text53
  8784  00568C                     __ptext53:
  8785                           	callstack 0
  8786  00568C                     _strcat:
  8787                           	callstack 24
  8788                           
  8789                           ; BSR set to: 2
  8790                           
  8791                           ;incstack = 0
  8792  00568C  C019  F01D         	movff	strcat@to,strcat@cp
  8793  005690  C01A  F01E         	movff	strcat@to+1,strcat@cp+1
  8794  005694  D002               	goto	l13433
  8795  005696                     l13431:
  8796                           
  8797                           ; BSR set to: 2
  8798  005696  4A1D               	infsnz	strcat@cp^0,f,c
  8799  005698  2A1E               	incf	(strcat@cp+1)^0,f,c
  8800  00569A                     l13433:
  8801                           
  8802                           ; BSR set to: 2
  8803  00569A  C01D  FFD9         	movff	strcat@cp,fsr2l
  8804  00569E  C01E  FFDA         	movff	strcat@cp+1,fsr2h
  8805  0056A2  50DF               	movf	indf2,w,c
  8806  0056A4  B4D8               	btfsc	status,2,c
  8807  0056A6  D005               	goto	l13437
  8808  0056A8  D7F6               	goto	l13431
  8809  0056AA                     l13435:
  8810                           
  8811                           ; BSR set to: 2
  8812  0056AA  4A1D               	infsnz	strcat@cp^0,f,c
  8813  0056AC  2A1E               	incf	(strcat@cp+1)^0,f,c
  8814  0056AE  4A1B               	infsnz	strcat@from^0,f,c
  8815  0056B0  2A1C               	incf	(strcat@from+1)^0,f,c
  8816  0056B2                     l13437:
  8817                           
  8818                           ; BSR set to: 2
  8819  0056B2  C01B  FFF6         	movff	strcat@from,tblptrl
  8820  0056B6  C01C  FFF7         	movff	strcat@from+1,tblptrh
  8821  0056BA                     	if	0	;tblptru may be non-zero
  8822  0056BA                     	endif
  8823  0056BA                     	if	0	;tblptru may be non-zero
  8824  0056BA                     	endif
  8825  0056BA  C01D  FFD9         	movff	strcat@cp,fsr2l
  8826  0056BE  C01E  FFDA         	movff	strcat@cp+1,fsr2h
  8827  0056C2  0008               	tblrd		*
  8828  0056C4  CFF5 FFDF          	movff	tablat,indf2
  8829  0056C8  50DF               	movf	indf2,w,c
  8830  0056CA  B4D8               	btfsc	status,2,c
  8831  0056CC  0012               	return	
  8832  0056CE  D7ED               	goto	l13435
  8833  0056D0                     __end_of_strcat:
  8834                           	callstack 0
  8835                           
  8836 ;; *************** function _hora_nome *****************
  8837 ;; Defined at:
  8838 ;;		line 387 in file "bibliotecas/SDCard.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;  p_buff          2   24[COMRAM] PTR unsigned char 
  8841 ;;		 -> string_dado(69), 
  8842 ;; Auto vars:     Size  Location     Type
  8843 ;;  i               1   26[COMRAM] unsigned char 
  8844 ;; Return value:  Size  Location     Type
  8845 ;;                  1    wreg      void 
  8846 ;; Registers used:
  8847 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8848 ;; Tracked objects:
  8849 ;;		On entry : 3F/2
  8850 ;;		On exit  : 3F/2
  8851 ;;		Unchanged: 3F/0
  8852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8853 ;;      Params:         2       0       0       0       0       0       0       0       0
  8854 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8855 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8856 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8857 ;;Total ram usage:        3 bytes
  8858 ;; Hardware stack levels used:    1
  8859 ;; Hardware stack levels required when called:    3
  8860 ;; This function calls:
  8861 ;;		Nothing
  8862 ;; This function is called by:
  8863 ;;		_escrita_sdcard
  8864 ;; This function uses a non-reentrant model
  8865 ;;
  8866                           
  8867                           	psect	text54
  8868  0059D6                     __ptext54:
  8869                           	callstack 0
  8870  0059D6                     _hora_nome:
  8871                           	callstack 24
  8872                           
  8873                           ; BSR set to: 2
  8874                           ;SDCard.c: 389: unsigned char i;;SDCard.c: 390: for(i=4; i<8;i++)
  8875                           
  8876                           ; BSR set to: 2
  8877                           ;incstack = 0
  8878  0059D6  0E04               	movlw	4
  8879  0059D8  6E1B               	movwf	hora_nome@i^0,c
  8880  0059DA                     l13421:
  8881                           
  8882                           ; BSR set to: 2
  8883                           ;SDCard.c: 391: {;SDCard.c: 392: filename[i] = *p_buff;
  8884  0059DA  C019  FFD9         	movff	hora_nome@p_buff,fsr2l
  8885  0059DE  C01A  FFDA         	movff	hora_nome@p_buff+1,fsr2h
  8886  0059E2  0E6C               	movlw	low _filename
  8887  0059E4  241B               	addwf	hora_nome@i^0,w,c
  8888  0059E6  6EE1               	movwf	fsr1l,c
  8889  0059E8  6AE2               	clrf	fsr1h,c
  8890  0059EA  0E02               	movlw	high _filename
  8891  0059EC  22E2               	addwfc	fsr1h,f,c
  8892  0059EE  CFDF FFE7          	movff	indf2,indf1
  8893                           
  8894                           ; BSR set to: 2
  8895                           ;SDCard.c: 393: p_buff++;
  8896  0059F2  4A19               	infsnz	hora_nome@p_buff^0,f,c
  8897  0059F4  2A1A               	incf	(hora_nome@p_buff+1)^0,f,c
  8898                           
  8899                           ; BSR set to: 2
  8900  0059F6  2A1B               	incf	hora_nome@i^0,f,c
  8901                           
  8902                           ; BSR set to: 2
  8903  0059F8  0E07               	movlw	7
  8904  0059FA  641B               	cpfsgt	hora_nome@i^0,c
  8905  0059FC  D7EE               	goto	l13421
  8906  0059FE  0012               	return	
  8907  005A00                     __end_of_hora_nome:
  8908                           	callstack 0
  8909                           
  8910 ;; *************** function _fprintf *****************
  8911 ;; Defined at:
  8912 ;;		line 1816 in file "bibliotecas/tff.c"
  8913 ;; Parameters:    Size  Location     Type
  8914 ;;  fil             2  121[BANK0 ] PTR struct _FIL
  8915 ;;		 -> fil(28), 
  8916 ;;  str             2  123[BANK0 ] PTR const unsigned char 
  8917 ;;		 -> STR_14(39), 
  8918 ;; Auto vars:     Size  Location     Type
  8919 ;;  s              16    0[BANK2 ] unsigned char [16]
  8920 ;;  val             4   24[BANK2 ] unsigned long 
  8921 ;;  i               2   31[BANK2 ] int 
  8922 ;;  cc              2   29[BANK2 ] int 
  8923 ;;  w               2   20[BANK2 ] int 
  8924 ;;  res             2   16[BANK2 ] int 
  8925 ;;  c               1   33[BANK2 ] unsigned char 
  8926 ;;  arp             1   28[BANK2 ] PTR void [1]
  8927 ;;		 -> ?_fprintf(2), 
  8928 ;;  r               1   23[BANK2 ] unsigned char 
  8929 ;;  f               1   22[BANK2 ] unsigned char 
  8930 ;; Return value:  Size  Location     Type
  8931 ;;                  2  121[BANK0 ] int 
  8932 ;; Registers used:
  8933 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8934 ;; Tracked objects:
  8935 ;;		On entry : 3F/0
  8936 ;;		On exit  : 3F/2
  8937 ;;		Unchanged: 0/0
  8938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8939 ;;      Params:         0      22       0       0       0       0       0       0       0
  8940 ;;      Locals:         0       0       0      34       0       0       0       0       0
  8941 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8942 ;;      Totals:         0      24       0      34       0       0       0       0       0
  8943 ;;Total ram usage:       58 bytes
  8944 ;; Hardware stack levels used:    1
  8945 ;; Hardware stack levels required when called:   14
  8946 ;; This function calls:
  8947 ;;		___lldiv
  8948 ;;		___llmod
  8949 ;;		___wmul
  8950 ;;		_fputc
  8951 ;;		_fputs
  8952 ;; This function is called by:
  8953 ;;		_escrita_sdcard
  8954 ;; This function uses a non-reentrant model
  8955 ;;
  8956                           
  8957                           	psect	text55
  8958  000F6E                     __ptext55:
  8959                           	callstack 0
  8960  000F6E                     _fprintf:
  8961                           	callstack 13
  8962                           
  8963                           ; BSR set to: 0
  8964                           ;tff.c: 1822: va_list arp;;tff.c: 1823: UCHAR c, f, r;;tff.c: 1824: ULONG val;;tff.c: 18
      +                          25: char s[16];;tff.c: 1826: int i, w, res, cc;;tff.c: 1829: *arp = __va_start();
  8965                           
  8966                           ; BSR set to: 2
  8967                           ;incstack = 0
  8968  000F6E  0EDD               	movlw	low (?_fprintf+4)
  8969  000F70  0102               	movlb	2	; () banked
  8970  000F72  6FCD               	movwf	fprintf@arp& (0+255),b
  8971                           
  8972                           ; BSR set to: 2
  8973                           ;tff.c: 1831: for (cc = res = 0; cc != -1; res += cc) {
  8974  000F74  0E00               	movlw	0
  8975  000F76  6FC2               	movwf	(fprintf@res+1)& (0+255),b
  8976  000F78  0E00               	movlw	0
  8977  000F7A  6FC1               	movwf	fprintf@res& (0+255),b
  8978  000F7C  C2C1  F2CE         	movff	fprintf@res,fprintf@cc
  8979  000F80  C2C2  F2CF         	movff	fprintf@res+1,fprintf@cc+1
  8980  000F84                     l13523:
  8981                           
  8982                           ; BSR set to: 2
  8983  000F84  29CE               	incf	fprintf@cc& (0+255),w,b
  8984  000F86  E103               	bnz	l13527
  8985  000F88  29CF               	incf	(fprintf@cc+1)& (0+255),w,b
  8986  000F8A  B4D8               	btfsc	status,2,c
  8987  000F8C  0012               	return	
  8988  000F8E                     l13527:
  8989                           
  8990                           ; BSR set to: 2
  8991                           ;tff.c: 1832: c = *str++;
  8992  000F8E  C0DB  FFF6         	movff	fprintf@str,tblptrl
  8993  000F92  C0DC  FFF7         	movff	fprintf@str+1,tblptrh
  8994  000F96                     	if	0	;tblptru may be non-zero
  8995  000F96                     	endif
  8996  000F96                     	if	0	;tblptru may be non-zero
  8997  000F96                     	endif
  8998  000F96  0008               	tblrd		*
  8999  000F98  CFF5 F2D2          	movff	tablat,fprintf@c
  9000                           
  9001                           ; BSR set to: 2
  9002  000F9C  0100               	movlb	0	; () banked
  9003  000F9E  4BDB               	infsnz	fprintf@str& (0+255),f,b
  9004  000FA0  2BDC               	incf	(fprintf@str+1)& (0+255),f,b
  9005                           
  9006                           ; BSR set to: 0
  9007                           ;tff.c: 1833: if (c == 0) break;
  9008  000FA2  0102               	movlb	2	; () banked
  9009  000FA4  51D2               	movf	fprintf@c& (0+255),w,b
  9010  000FA6  B4D8               	btfsc	status,2,c
  9011  000FA8  0012               	return	
  9012                           
  9013                           ; BSR set to: 2
  9014                           ;tff.c: 1834: if (c != '%') {
  9015  000FAA  0E25               	movlw	37
  9016  000FAC  19D2               	xorwf	fprintf@c& (0+255),w,b
  9017  000FAE  B4D8               	btfsc	status,2,c
  9018  000FB0  D019               	goto	l13543
  9019                           
  9020                           ; BSR set to: 2
  9021                           ;tff.c: 1835: cc = fputc(c, fil);
  9022  000FB2  C2D2  F0CC         	movff	fprintf@c,fputc@chr
  9023  000FB6  0100               	movlb	0	; () banked
  9024  000FB8  6BCD               	clrf	(fputc@chr+1)& (0+255),b
  9025  000FBA  C0D9  F0CE         	movff	fprintf@fil,fputc@fil
  9026  000FBE  C0DA  F0CF         	movff	fprintf@fil+1,fputc@fil+1
  9027  000FC2  ECCC  F02B         	call	_fputc	;wreg free
  9028  000FC6  C0CC  F2CE         	movff	?_fputc,fprintf@cc
  9029  000FCA  C0CD  F2CF         	movff	?_fputc+1,fprintf@cc+1
  9030                           
  9031                           ; BSR set to: 0
  9032                           ;tff.c: 1836: if (cc != -1) cc = 1;
  9033  000FCE  0102               	movlb	2	; () banked
  9034  000FD0  29CE               	incf	fprintf@cc& (0+255),w,b
  9035  000FD2  E103               	bnz	u14680
  9036  000FD4  29CF               	incf	(fprintf@cc+1)& (0+255),w,b
  9037  000FD6  B4D8               	btfsc	status,2,c
  9038  000FD8  D183               	goto	l13667
  9039  000FDA                     u14680:
  9040                           
  9041                           ; BSR set to: 2
  9042  000FDA  0E00               	movlw	0
  9043  000FDC  6FCF               	movwf	(fprintf@cc+1)& (0+255),b
  9044  000FDE  0E01               	movlw	1
  9045  000FE0  6FCE               	movwf	fprintf@cc& (0+255),b
  9046  000FE2  D17E               	goto	l13667
  9047  000FE4                     l13543:
  9048                           
  9049                           ; BSR set to: 2
  9050                           ;tff.c: 1838: };tff.c: 1839: w = f = 0;
  9051  000FE4  0E00               	movlw	0
  9052  000FE6  6FC7               	movwf	fprintf@f& (0+255),b
  9053  000FE8  C2C7  F2C5         	movff	fprintf@f,fprintf@w
  9054  000FEC  6BC6               	clrf	(fprintf@w+1)& (0+255),b
  9055                           
  9056                           ; BSR set to: 2
  9057                           ;tff.c: 1840: c = *str++;
  9058  000FEE  C0DB  FFF6         	movff	fprintf@str,tblptrl
  9059  000FF2  C0DC  FFF7         	movff	fprintf@str+1,tblptrh
  9060  000FF6                     	if	0	;tblptru may be non-zero
  9061  000FF6                     	endif
  9062  000FF6                     	if	0	;tblptru may be non-zero
  9063  000FF6                     	endif
  9064  000FF6  0008               	tblrd		*
  9065  000FF8  CFF5 F2D2          	movff	tablat,fprintf@c
  9066                           
  9067                           ; BSR set to: 2
  9068  000FFC  0100               	movlb	0	; () banked
  9069  000FFE  4BDB               	infsnz	fprintf@str& (0+255),f,b
  9070  001000  2BDC               	incf	(fprintf@str+1)& (0+255),f,b
  9071                           
  9072                           ; BSR set to: 0
  9073                           ;tff.c: 1841: if (c == '0') {
  9074  001002  0E30               	movlw	48
  9075  001004  0102               	movlb	2	; () banked
  9076  001006  19D2               	xorwf	fprintf@c& (0+255),w,b
  9077  001008  A4D8               	btfss	status,2,c
  9078  00100A  D023               	goto	l13563
  9079                           
  9080                           ; BSR set to: 2
  9081                           ;tff.c: 1842: f = 1; c = *str++;
  9082  00100C  0E01               	movlw	1
  9083  00100E  6FC7               	movwf	fprintf@f& (0+255),b
  9084  001010                     l13553:
  9085                           
  9086                           ; BSR set to: 2
  9087  001010  C0DB  FFF6         	movff	fprintf@str,tblptrl
  9088  001014  C0DC  FFF7         	movff	fprintf@str+1,tblptrh
  9089  001018                     	if	0	;tblptru may be non-zero
  9090  001018                     	endif
  9091  001018                     	if	0	;tblptru may be non-zero
  9092  001018                     	endif
  9093  001018  0008               	tblrd		*
  9094  00101A  CFF5 F2D2          	movff	tablat,fprintf@c
  9095                           
  9096                           ; BSR set to: 2
  9097  00101E  0100               	movlb	0	; () banked
  9098  001020  4BDB               	infsnz	fprintf@str& (0+255),f,b
  9099  001022  2BDC               	incf	(fprintf@str+1)& (0+255),f,b
  9100  001024  D016               	goto	l13563
  9101  001026                     l13557:
  9102                           
  9103                           ; BSR set to: 2
  9104                           ;tff.c: 1845: w = w * 10 + (c - '0');
  9105  001026  C2C5  F019         	movff	fprintf@w,___wmul@multiplier
  9106  00102A  C2C6  F01A         	movff	fprintf@w+1,___wmul@multiplier+1
  9107  00102E  0E00               	movlw	0
  9108  001030  6E1C               	movwf	(___wmul@multiplicand+1)^0,c
  9109  001032  0E0A               	movlw	10
  9110  001034  6E1B               	movwf	___wmul@multiplicand^0,c
  9111  001036  EC65  F02D         	call	___wmul	;wreg free
  9112  00103A  0102               	movlb	2	; () banked
  9113  00103C  51D2               	movf	fprintf@c& (0+255),w,b
  9114  00103E  2619               	addwf	?___wmul^0,f,c
  9115  001040  0E00               	movlw	0
  9116  001042  221A               	addwfc	(?___wmul+1)^0,f,c
  9117  001044  0ED0               	movlw	208
  9118  001046  2419               	addwf	?___wmul^0,w,c
  9119  001048  6FC5               	movwf	fprintf@w& (0+255),b
  9120  00104A  0EFF               	movlw	255
  9121  00104C  201A               	addwfc	(?___wmul+1)^0,w,c
  9122  00104E  6FC6               	movwf	(fprintf@w+1)& (0+255),b
  9123  001050  D7DF               	goto	l13553
  9124  001052                     l13563:
  9125  001052  0E2F               	movlw	47
  9126  001054  0102               	movlb	2	; () banked
  9127  001056  65D2               	cpfsgt	fprintf@c& (0+255),b
  9128  001058  D003               	goto	u14710
  9129                           
  9130                           ; BSR set to: 2
  9131  00105A  0E39               	movlw	57
  9132  00105C  65D2               	cpfsgt	fprintf@c& (0+255),b
  9133  00105E  D7E3               	goto	l13557
  9134  001060                     u14710:
  9135                           
  9136                           ; BSR set to: 2
  9137                           ;tff.c: 1847: };tff.c: 1848: if (c == 'l') {
  9138  001060  0E6C               	movlw	108
  9139  001062  19D2               	xorwf	fprintf@c& (0+255),w,b
  9140  001064  A4D8               	btfss	status,2,c
  9141  001066  D00B               	goto	l13575
  9142                           
  9143                           ; BSR set to: 2
  9144                           ;tff.c: 1849: f |= 2; c = *str++;
  9145  001068  83C7               	bsf	fprintf@f& (0+255),1,b
  9146                           
  9147                           ; BSR set to: 2
  9148  00106A  C0DB  FFF6         	movff	fprintf@str,tblptrl
  9149  00106E  C0DC  FFF7         	movff	fprintf@str+1,tblptrh
  9150  001072                     	if	0	;tblptru may be non-zero
  9151  001072                     	endif
  9152  001072                     	if	0	;tblptru may be non-zero
  9153  001072                     	endif
  9154  001072  0008               	tblrd		*
  9155  001074  CFF5 F2D2          	movff	tablat,fprintf@c
  9156                           
  9157                           ; BSR set to: 2
  9158  001078  0100               	movlb	0	; () banked
  9159  00107A  4BDB               	infsnz	fprintf@str& (0+255),f,b
  9160  00107C  2BDC               	incf	(fprintf@str+1)& (0+255),f,b
  9161  00107E                     l13575:
  9162                           
  9163                           ;tff.c: 1850: };tff.c: 1851: if (c == 's') {
  9164  00107E  0E73               	movlw	115
  9165  001080  0102               	movlb	2	; () banked
  9166  001082  19D2               	xorwf	fprintf@c& (0+255),w,b
  9167  001084  A4D8               	btfss	status,2,c
  9168  001086  D015               	goto	l13581
  9169                           
  9170                           ; BSR set to: 2
  9171                           ;tff.c: 1852: cc = fputs((*(char* *)__va_arg((*(char* **)arp), (char*)0)), fil);
  9172  001088  51CD               	movf	fprintf@arp& (0+255),w,b
  9173  00108A  6ED9               	movwf	fsr2l,c
  9174  00108C  6ADA               	clrf	fsr2h,c
  9175  00108E  CFDE F0D3          	movff	postinc2,fputs@str
  9176  001092  CFDD F0D4          	movff	postdec2,fputs@str+1
  9177  001096  C0D9  F0D5         	movff	fprintf@fil,fputs@fil
  9178  00109A  C0DA  F0D6         	movff	fprintf@fil+1,fputs@fil+1
  9179  00109E  EC88  F026         	call	_fputs	;wreg free
  9180  0010A2  C0D3  F2CE         	movff	?_fputs,fprintf@cc
  9181  0010A6  C0D4  F2CF         	movff	?_fputs+1,fprintf@cc+1
  9182  0010AA  0E02               	movlw	2
  9183  0010AC  0102               	movlb	2	; () banked
  9184  0010AE  27CD               	addwf	fprintf@arp& (0+255),f,b
  9185                           
  9186                           ;tff.c: 1853: continue;
  9187  0010B0  D117               	goto	l13667
  9188  0010B2                     l13581:
  9189                           
  9190                           ; BSR set to: 2
  9191                           ;tff.c: 1854: };tff.c: 1855: if (c == 'c') {
  9192  0010B2  0E63               	movlw	99
  9193  0010B4  19D2               	xorwf	fprintf@c& (0+255),w,b
  9194  0010B6  A4D8               	btfss	status,2,c
  9195  0010B8  D01D               	goto	l13591
  9196                           
  9197                           ; BSR set to: 2
  9198                           ;tff.c: 1856: cc = fputc((*(char *)__va_arg((*(char **)arp), (char)0)), fil);
  9199  0010BA  51CD               	movf	fprintf@arp& (0+255),w,b
  9200  0010BC  6ED9               	movwf	fsr2l,c
  9201  0010BE  6ADA               	clrf	fsr2h,c
  9202  0010C0  50DF               	movf	indf2,w,c
  9203  0010C2  0100               	movlb	0	; () banked
  9204  0010C4  6FEF               	movwf	??_fprintf& (0+255),b
  9205  0010C6  51EF               	movf	??_fprintf& (0+255),w,b
  9206  0010C8  6FCC               	movwf	fputc@chr& (0+255),b
  9207  0010CA  6BCD               	clrf	(fputc@chr+1)& (0+255),b
  9208  0010CC  C0D9  F0CE         	movff	fprintf@fil,fputc@fil
  9209  0010D0  C0DA  F0CF         	movff	fprintf@fil+1,fputc@fil+1
  9210  0010D4  ECCC  F02B         	call	_fputc	;wreg free
  9211  0010D8  C0CC  F2CE         	movff	?_fputc,fprintf@cc
  9212  0010DC  C0CD  F2CF         	movff	?_fputc+1,fprintf@cc+1
  9213                           
  9214                           ; BSR set to: 0
  9215  0010E0  0E02               	movlw	2
  9216  0010E2  0102               	movlb	2	; () banked
  9217  0010E4  27CD               	addwf	fprintf@arp& (0+255),f,b
  9218                           
  9219                           ; BSR set to: 2
  9220                           ;tff.c: 1857: if (cc != -1) cc = 1;
  9221  0010E6  29CE               	incf	fprintf@cc& (0+255),w,b
  9222  0010E8  E104               	bnz	u14750
  9223  0010EA  29CF               	incf	(fprintf@cc+1)& (0+255),w,b
  9224  0010EC  A4D8               	btfss	status,2,c
  9225  0010EE  D775               	goto	u14680
  9226  0010F0  D0F7               	goto	l13667
  9227  0010F2                     u14750:
  9228  0010F2  D773               	goto	u14680
  9229  0010F4                     l13591:
  9230                           
  9231                           ; BSR set to: 2
  9232                           ;tff.c: 1859: };tff.c: 1860: r = 0;
  9233  0010F4  0E00               	movlw	0
  9234  0010F6  6FC8               	movwf	fprintf@r& (0+255),b
  9235                           
  9236                           ; BSR set to: 2
  9237                           ;tff.c: 1861: if (c == 'd') r = 10;
  9238  0010F8  0E64               	movlw	100
  9239  0010FA  19D2               	xorwf	fprintf@c& (0+255),w,b
  9240  0010FC  A4D8               	btfss	status,2,c
  9241  0010FE  D002               	goto	l13597
  9242                           
  9243                           ; BSR set to: 2
  9244  001100  0E0A               	movlw	10
  9245  001102  6FC8               	movwf	fprintf@r& (0+255),b
  9246  001104                     l13597:
  9247                           
  9248                           ; BSR set to: 2
  9249                           ;tff.c: 1862: if (c == 'u') r = 10;
  9250  001104  0E75               	movlw	117
  9251  001106  19D2               	xorwf	fprintf@c& (0+255),w,b
  9252  001108  A4D8               	btfss	status,2,c
  9253  00110A  D002               	goto	l13601
  9254                           
  9255                           ; BSR set to: 2
  9256  00110C  0E0A               	movlw	10
  9257  00110E  6FC8               	movwf	fprintf@r& (0+255),b
  9258  001110                     l13601:
  9259                           
  9260                           ; BSR set to: 2
  9261                           ;tff.c: 1863: if (c == 'X') r = 16;
  9262  001110  0E58               	movlw	88
  9263  001112  19D2               	xorwf	fprintf@c& (0+255),w,b
  9264  001114  A4D8               	btfss	status,2,c
  9265  001116  D002               	goto	l1155
  9266                           
  9267                           ; BSR set to: 2
  9268  001118  0E10               	movlw	16
  9269  00111A  6FC8               	movwf	fprintf@r& (0+255),b
  9270  00111C                     l1155:
  9271                           
  9272                           ; BSR set to: 2
  9273                           ;tff.c: 1864: if (r == 0) break;
  9274  00111C  51C8               	movf	fprintf@r& (0+255),w,b
  9275  00111E  B4D8               	btfsc	status,2,c
  9276  001120  0012               	return	
  9277                           
  9278                           ; BSR set to: 2
  9279                           ;tff.c: 1865: if (f & 2) {
  9280  001122  A3C7               	btfss	fprintf@f& (0+255),1,b
  9281  001124  D00D               	goto	l13611
  9282                           
  9283                           ; BSR set to: 2
  9284                           ;tff.c: 1866: val = (ULONG)(*(long *)__va_arg((*(long **)arp), (long)0));
  9285  001126  51CD               	movf	fprintf@arp& (0+255),w,b
  9286  001128  6ED9               	movwf	fsr2l,c
  9287  00112A  6ADA               	clrf	fsr2h,c
  9288  00112C  CFDE F2C9          	movff	postinc2,fprintf@val
  9289  001130  CFDE F2CA          	movff	postinc2,fprintf@val+1
  9290  001134  CFDE F2CB          	movff	postinc2,fprintf@val+2
  9291  001138  CFDE F2CC          	movff	postinc2,fprintf@val+3
  9292                           
  9293                           ; BSR set to: 2
  9294  00113C  0E04               	movlw	4
  9295  00113E  D01F               	goto	L3
  9296  001140                     l13611:
  9297                           
  9298                           ; BSR set to: 2
  9299                           ;tff.c: 1868: val = (c == 'd') ? (ULONG)(long)(*(int *)__va_arg((*(int **)arp), (int)0))
      +                           : (ULONG)(*(unsigned int *)__va_arg((*(unsigned int **)arp), (unsigned int)0));
  9300  001140  0E64               	movlw	100
  9301  001142  19D2               	xorwf	fprintf@c& (0+255),w,b
  9302  001144  B4D8               	btfsc	status,2,c
  9303  001146  D00E               	goto	l13617
  9304                           
  9305                           ; BSR set to: 2
  9306  001148  51CD               	movf	fprintf@arp& (0+255),w,b
  9307  00114A  6ED9               	movwf	fsr2l,c
  9308  00114C  6ADA               	clrf	fsr2h,c
  9309  00114E  CFDE F0EF          	movff	postinc2,??_fprintf
  9310  001152  CFDD F0F0          	movff	postdec2,??_fprintf+1
  9311  001156  C0EF  F2C9         	movff	??_fprintf,fprintf@val
  9312  00115A  C0F0  F2CA         	movff	??_fprintf+1,fprintf@val+1
  9313  00115E  6BCB               	clrf	(fprintf@val+2)& (0+255),b
  9314  001160  6BCC               	clrf	(fprintf@val+3)& (0+255),b
  9315  001162  D00C               	goto	l13619
  9316  001164                     l13617:
  9317                           
  9318                           ; BSR set to: 2
  9319  001164  51CD               	movf	fprintf@arp& (0+255),w,b
  9320  001166  6ED9               	movwf	fsr2l,c
  9321  001168  6ADA               	clrf	fsr2h,c
  9322  00116A  CFDE F2C9          	movff	postinc2,fprintf@val
  9323  00116E  CFDD F2CA          	movff	postdec2,fprintf@val+1
  9324  001172  0E00               	movlw	0
  9325  001174  BFCA               	btfsc	(fprintf@val+1)& (0+255),7,b
  9326  001176  0EFF               	movlw	-1
  9327  001178  6FCB               	movwf	(fprintf@val+2)& (0+255),b
  9328  00117A  6FCC               	movwf	(fprintf@val+3)& (0+255),b
  9329  00117C                     l13619:
  9330                           
  9331                           ; BSR set to: 2
  9332  00117C  0E02               	movlw	2
  9333  00117E                     L3:
  9334  00117E  27CD               	addwf	fprintf@arp& (0+255),f,b
  9335                           
  9336                           ; BSR set to: 2
  9337                           ;tff.c: 1869: };tff.c: 1871: if (c == 'd') {
  9338  001180  0E64               	movlw	100
  9339  001182  19D2               	xorwf	fprintf@c& (0+255),w,b
  9340  001184  A4D8               	btfss	status,2,c
  9341  001186  D00E               	goto	l13629
  9342                           
  9343                           ; BSR set to: 2
  9344                           ;tff.c: 1872: if (val >= 0x80000000) {
  9345  001188  0E80               	movlw	128
  9346  00118A  5DCC               	subwf	(fprintf@val+3)& (0+255),w,b
  9347  00118C  A0D8               	btfss	status,0,c
  9348  00118E  D00A               	goto	l13629
  9349                           
  9350                           ; BSR set to: 2
  9351                           ;tff.c: 1873: val = 0 - val;
  9352  001190  6DC9               	negf	fprintf@val& (0+255),b
  9353  001192  1FCA               	comf	(fprintf@val+1)& (0+255),f,b
  9354  001194  B0D8               	btfsc	status,0,c
  9355  001196  2BCA               	incf	(fprintf@val+1)& (0+255),f,b
  9356  001198  1FCB               	comf	(fprintf@val+2)& (0+255),f,b
  9357  00119A  B0D8               	btfsc	status,0,c
  9358  00119C  2BCB               	incf	(fprintf@val+2)& (0+255),f,b
  9359  00119E  0E00               	movlw	0
  9360  0011A0  57CC               	subfwb	(fprintf@val+3)& (0+255),f,b
  9361                           
  9362                           ; BSR set to: 2
  9363                           ;tff.c: 1874: f |= 4;
  9364  0011A2  85C7               	bsf	fprintf@f& (0+255),2,b
  9365  0011A4                     l13629:
  9366                           
  9367                           ; BSR set to: 2
  9368                           ;tff.c: 1875: };tff.c: 1876: };tff.c: 1877: i = sizeof(s) - 1; s[i] = 0;
  9369  0011A4  0E00               	movlw	0
  9370  0011A6  6FD1               	movwf	(fprintf@i+1)& (0+255),b
  9371  0011A8  0E0F               	movlw	15
  9372  0011AA  6FD0               	movwf	fprintf@i& (0+255),b
  9373                           
  9374                           ; BSR set to: 2
  9375  0011AC  0E00               	movlw	0
  9376  0011AE  6FC0               	movwf	(fprintf@s+15)& (0+255),b
  9377  0011B0                     l13633:
  9378                           
  9379                           ; BSR set to: 2
  9380                           ;tff.c: 1879: c = (UCHAR)(val % r + '0');
  9381  0011B0  C2C9  F019         	movff	fprintf@val,___llmod@dividend
  9382  0011B4  C2CA  F01A         	movff	fprintf@val+1,___llmod@dividend+1
  9383  0011B8  C2CB  F01B         	movff	fprintf@val+2,___llmod@dividend+2
  9384  0011BC  C2CC  F01C         	movff	fprintf@val+3,___llmod@dividend+3
  9385  0011C0  51C8               	movf	fprintf@r& (0+255),w,b
  9386  0011C2  6E1D               	movwf	___llmod@divisor^0,c
  9387  0011C4  6A1E               	clrf	(___llmod@divisor+1)^0,c
  9388  0011C6  6A1F               	clrf	(___llmod@divisor+2)^0,c
  9389  0011C8  6A20               	clrf	(___llmod@divisor+3)^0,c
  9390  0011CA  EC37  F028         	call	___llmod	;wreg free
  9391  0011CE  5019               	movf	?___llmod^0,w,c
  9392  0011D0  0F30               	addlw	48
  9393  0011D2  6FD2               	movwf	fprintf@c& (0+255),b
  9394                           
  9395                           ; BSR set to: 2
  9396                           ;tff.c: 1880: if (c > '9') c += 7;
  9397  0011D4  0E39               	movlw	57
  9398  0011D6  65D2               	cpfsgt	fprintf@c& (0+255),b
  9399  0011D8  D002               	goto	l13639
  9400                           
  9401                           ; BSR set to: 2
  9402  0011DA  0E07               	movlw	7
  9403  0011DC  27D2               	addwf	fprintf@c& (0+255),f,b
  9404  0011DE                     l13639:
  9405                           
  9406                           ; BSR set to: 2
  9407                           ;tff.c: 1881: s[--i] = c;
  9408  0011DE  07D0               	decf	fprintf@i& (0+255),f,b
  9409  0011E0  A0D8               	btfss	status,0,c
  9410  0011E2  07D1               	decf	(fprintf@i+1)& (0+255),f,b
  9411  0011E4  0EB1               	movlw	low fprintf@s
  9412  0011E6  25D0               	addwf	fprintf@i& (0+255),w,b
  9413  0011E8  6ED9               	movwf	fsr2l,c
  9414  0011EA  0E02               	movlw	high fprintf@s
  9415  0011EC  21D1               	addwfc	(fprintf@i+1)& (0+255),w,b
  9416  0011EE  6EDA               	movwf	fsr2h,c
  9417  0011F0  C2D2  FFDF         	movff	fprintf@c,indf2
  9418                           
  9419                           ; BSR set to: 2
  9420                           ;tff.c: 1882: val /= r;
  9421  0011F4  C2C9  F019         	movff	fprintf@val,___lldiv@dividend
  9422  0011F8  C2CA  F01A         	movff	fprintf@val+1,___lldiv@dividend+1
  9423  0011FC  C2CB  F01B         	movff	fprintf@val+2,___lldiv@dividend+2
  9424  001200  C2CC  F01C         	movff	fprintf@val+3,___lldiv@dividend+3
  9425  001204  51C8               	movf	fprintf@r& (0+255),w,b
  9426  001206  6E1D               	movwf	___lldiv@divisor^0,c
  9427  001208  6A1E               	clrf	(___lldiv@divisor+1)^0,c
  9428  00120A  6A1F               	clrf	(___lldiv@divisor+2)^0,c
  9429  00120C  6A20               	clrf	(___lldiv@divisor+3)^0,c
  9430  00120E  EC50  F027         	call	___lldiv	;wreg free
  9431  001212  C019  F2C9         	movff	?___lldiv,fprintf@val
  9432  001216  C01A  F2CA         	movff	?___lldiv+1,fprintf@val+1
  9433  00121A  C01B  F2CB         	movff	?___lldiv+2,fprintf@val+2
  9434  00121E  C01C  F2CC         	movff	?___lldiv+3,fprintf@val+3
  9435                           
  9436                           ;tff.c: 1883: } while (i && val);
  9437  001222  0102               	movlb	2	; () banked
  9438  001224  51D0               	movf	fprintf@i& (0+255),w,b
  9439  001226  11D1               	iorwf	(fprintf@i+1)& (0+255),w,b
  9440  001228  B4D8               	btfsc	status,2,c
  9441  00122A  D006               	goto	u14860
  9442                           
  9443                           ; BSR set to: 2
  9444  00122C  51C9               	movf	fprintf@val& (0+255),w,b
  9445  00122E  11CA               	iorwf	(fprintf@val+1)& (0+255),w,b
  9446  001230  11CB               	iorwf	(fprintf@val+2)& (0+255),w,b
  9447  001232  11CC               	iorwf	(fprintf@val+3)& (0+255),w,b
  9448  001234  A4D8               	btfss	status,2,c
  9449  001236  D7BC               	goto	l13633
  9450  001238                     u14860:
  9451                           
  9452                           ; BSR set to: 2
  9453                           ;tff.c: 1884: if (i && (f & 4)) s[--i] = '-';
  9454  001238  51D0               	movf	fprintf@i& (0+255),w,b
  9455  00123A  11D1               	iorwf	(fprintf@i+1)& (0+255),w,b
  9456  00123C  A4D8               	btfss	status,2,c
  9457                           
  9458                           ; BSR set to: 2
  9459  00123E  A5C7               	btfss	fprintf@f& (0+255),2,b
  9460  001240  D00B               	goto	l13653
  9461                           
  9462                           ; BSR set to: 2
  9463  001242  07D0               	decf	fprintf@i& (0+255),f,b
  9464  001244  A0D8               	btfss	status,0,c
  9465  001246  07D1               	decf	(fprintf@i+1)& (0+255),f,b
  9466  001248  0EB1               	movlw	low fprintf@s
  9467  00124A  25D0               	addwf	fprintf@i& (0+255),w,b
  9468  00124C  6ED9               	movwf	fsr2l,c
  9469  00124E  0E02               	movlw	high fprintf@s
  9470  001250  21D1               	addwfc	(fprintf@i+1)& (0+255),w,b
  9471  001252  6EDA               	movwf	fsr2h,c
  9472  001254  0E2D               	movlw	45
  9473  001256  6EDF               	movwf	indf2,c
  9474  001258                     l13653:
  9475                           
  9476                           ; BSR set to: 2
  9477                           ;tff.c: 1885: w = sizeof(s) - 1 - w;
  9478  001258  51C5               	movf	fprintf@w& (0+255),w,b
  9479  00125A  080F               	sublw	15
  9480  00125C  6FC5               	movwf	fprintf@w& (0+255),b
  9481  00125E  51C6               	movf	(fprintf@w+1)& (0+255),w,b
  9482  001260  A0D8               	btfss	status,0,c
  9483  001262  2AE8               	incf	wreg,f,c
  9484  001264  0800               	sublw	0
  9485  001266  6FC6               	movwf	(fprintf@w+1)& (0+255),b
  9486                           
  9487                           ;tff.c: 1886: while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
  9488  001268  D016               	goto	l13661
  9489  00126A                     l1172:
  9490                           
  9491                           ; BSR set to: 0
  9492  00126A  0102               	movlb	2	; () banked
  9493  00126C  B1C7               	btfsc	fprintf@f& (0+255),0,b
  9494  00126E  D004               	goto	l13657
  9495                           
  9496                           ; BSR set to: 2
  9497  001270  0E00               	movlw	0
  9498  001272  6FC4               	movwf	(_fprintf$2155+1)& (0+255),b
  9499  001274  0E20               	movlw	32
  9500  001276  D003               	goto	L4
  9501  001278                     l13657:
  9502                           
  9503                           ; BSR set to: 2
  9504  001278  0E00               	movlw	0
  9505  00127A  6FC4               	movwf	(_fprintf$2155+1)& (0+255),b
  9506  00127C  0E30               	movlw	48
  9507  00127E                     L4:
  9508  00127E  6FC3               	movwf	_fprintf$2155& (0+255),b
  9509                           
  9510                           ; BSR set to: 2
  9511  001280  07D0               	decf	fprintf@i& (0+255),f,b
  9512  001282  A0D8               	btfss	status,0,c
  9513  001284  07D1               	decf	(fprintf@i+1)& (0+255),f,b
  9514  001286  0EB1               	movlw	low fprintf@s
  9515  001288  25D0               	addwf	fprintf@i& (0+255),w,b
  9516  00128A  6ED9               	movwf	fsr2l,c
  9517  00128C  0E02               	movlw	high fprintf@s
  9518  00128E  21D1               	addwfc	(fprintf@i+1)& (0+255),w,b
  9519  001290  6EDA               	movwf	fsr2h,c
  9520  001292  C2C3  FFDF         	movff	_fprintf$2155,indf2
  9521  001296                     l13661:
  9522                           
  9523                           ; BSR set to: 2
  9524  001296  51D0               	movf	fprintf@i& (0+255),w,b
  9525  001298  11D1               	iorwf	(fprintf@i+1)& (0+255),w,b
  9526  00129A  B4D8               	btfsc	status,2,c
  9527  00129C  D00D               	goto	u14910
  9528                           
  9529                           ; BSR set to: 2
  9530  00129E  51D0               	movf	fprintf@i& (0+255),w,b
  9531  0012A0  5DC5               	subwf	fprintf@w& (0+255),w,b
  9532  0012A2  51C6               	movf	(fprintf@w+1)& (0+255),w,b
  9533  0012A4  0A80               	xorlw	128
  9534  0012A6  0100               	movlb	0	; () banked
  9535  0012A8  6FEF               	movwf	??_fprintf& (0+255),b
  9536  0012AA  0102               	movlb	2	; () banked
  9537  0012AC  51D1               	movf	(fprintf@i+1)& (0+255),w,b
  9538  0012AE  0A80               	xorlw	128
  9539  0012B0  0100               	movlb	0	; () banked
  9540  0012B2  59EF               	subwfb	??_fprintf& (0+255),w,b
  9541  0012B4  A0D8               	btfss	status,0,c
  9542  0012B6  D7D9               	goto	l1172
  9543  0012B8                     u14910:
  9544                           
  9545                           ;tff.c: 1887: cc = fputs(&s[i], fil);
  9546  0012B8  0EB1               	movlw	low fprintf@s
  9547  0012BA  0102               	movlb	2	; () banked
  9548  0012BC  25D0               	addwf	fprintf@i& (0+255),w,b
  9549  0012BE  0100               	movlb	0	; () banked
  9550  0012C0  6FD3               	movwf	fputs@str& (0+255),b
  9551  0012C2  0E02               	movlw	high fprintf@s
  9552  0012C4  0102               	movlb	2	; () banked
  9553  0012C6  21D1               	addwfc	(fprintf@i+1)& (0+255),w,b
  9554  0012C8  0100               	movlb	0	; () banked
  9555  0012CA  6FD4               	movwf	(fputs@str+1)& (0+255),b
  9556  0012CC  C0D9  F0D5         	movff	fprintf@fil,fputs@fil
  9557  0012D0  C0DA  F0D6         	movff	fprintf@fil+1,fputs@fil+1
  9558  0012D4  EC88  F026         	call	_fputs	;wreg free
  9559  0012D8  C0D3  F2CE         	movff	?_fputs,fprintf@cc
  9560  0012DC  C0D4  F2CF         	movff	?_fputs+1,fprintf@cc+1
  9561  0012E0                     l13667:
  9562  0012E0  0102               	movlb	2	; () banked
  9563  0012E2  51CE               	movf	fprintf@cc& (0+255),w,b
  9564  0012E4  27C1               	addwf	fprintf@res& (0+255),f,b
  9565  0012E6  51CF               	movf	(fprintf@cc+1)& (0+255),w,b
  9566  0012E8  23C2               	addwfc	(fprintf@res+1)& (0+255),f,b
  9567  0012EA  D64C               	goto	l13523
  9568  0012EC                     __end_of_fprintf:
  9569                           	callstack 0
  9570                           
  9571 ;; *************** function _fputs *****************
  9572 ;; Defined at:
  9573 ;;		line 1796 in file "bibliotecas/tff.c"
  9574 ;; Parameters:    Size  Location     Type
  9575 ;;  str             2  115[BANK0 ] PTR const unsigned char 
  9576 ;;		 -> fprintf@s(16), ?_fprintf(2), STR_19(16), STR_18(27), 
  9577 ;;		 -> STR_17(17), STR_16(16), STR_15(16), string_dado(69), 
  9578 ;;  fil             2  117[BANK0 ] PTR struct _FIL
  9579 ;;		 -> fil(28), 
  9580 ;; Auto vars:     Size  Location     Type
  9581 ;;  n               2  119[BANK0 ] int 
  9582 ;; Return value:  Size  Location     Type
  9583 ;;                  2  115[BANK0 ] int 
  9584 ;; Registers used:
  9585 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9586 ;; Tracked objects:
  9587 ;;		On entry : 3D/2
  9588 ;;		On exit  : 0/0
  9589 ;;		Unchanged: 0/0
  9590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9591 ;;      Params:         0       4       0       0       0       0       0       0       0
  9592 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9593 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9594 ;;      Totals:         1       6       0       0       0       0       0       0       0
  9595 ;;Total ram usage:        7 bytes
  9596 ;; Hardware stack levels used:    1
  9597 ;; Hardware stack levels required when called:   13
  9598 ;; This function calls:
  9599 ;;		_fputc
  9600 ;; This function is called by:
  9601 ;;		_fprintf
  9602 ;; This function uses a non-reentrant model
  9603 ;;
  9604                           
  9605                           	psect	text56
  9606  004D10                     __ptext56:
  9607                           	callstack 0
  9608  004D10                     _fputs:
  9609                           	callstack 13
  9610                           
  9611                           ;tff.c: 1801: int n;;tff.c: 1804: for (n = 0; *str; str++, n++) {
  9612                           
  9613                           ; BSR set to: 2
  9614                           ;incstack = 0
  9615  004D10  0E00               	movlw	0
  9616  004D12  0100               	movlb	0	; () banked
  9617  004D14  6FD8               	movwf	(fputs@n+1)& (0+255),b
  9618  004D16  0E00               	movlw	0
  9619  004D18  6FD7               	movwf	fputs@n& (0+255),b
  9620  004D1A  D027               	goto	l13119
  9621  004D1C                     l13113:
  9622                           
  9623                           ;tff.c: 1805: if (fputc(*str, fil) == -1) return -1;
  9624  004D1C  C0D3  FFF6         	movff	fputs@str,tblptrl
  9625  004D20  C0D4  FFF7         	movff	fputs@str+1,tblptrh
  9626  004D24  6AF8               	clrf	tblptru,c
  9627  004D26  0E07               	movlw	(high __ramtop+-1)
  9628  004D28  64F7               	cpfsgt	tblptrh,c
  9629  004D2A  D003               	bra	u14027
  9630  004D2C  0008               	tblrd		*
  9631  004D2E  50F5               	movf	tablat,w,c
  9632  004D30  D005               	bra	u14020
  9633  004D32                     u14027:
  9634  004D32  CFF6 FFE1          	movff	tblptrl,fsr1l
  9635  004D36  CFF7 FFE2          	movff	tblptrh,fsr1h
  9636  004D3A  50E7               	movf	indf1,w,c
  9637  004D3C                     u14020:
  9638  004D3C  6E31               	movwf	??_fputs^0,c
  9639  004D3E  5031               	movf	??_fputs^0,w,c
  9640  004D40  0100               	movlb	0	; () banked
  9641  004D42  6FCC               	movwf	fputc@chr& (0+255),b
  9642  004D44  6BCD               	clrf	(fputc@chr+1)& (0+255),b
  9643  004D46  C0D5  F0CE         	movff	fputs@fil,fputc@fil
  9644  004D4A  C0D6  F0CF         	movff	fputs@fil+1,fputc@fil+1
  9645  004D4E  ECCC  F02B         	call	_fputc	;wreg free
  9646  004D52  29CC               	incf	?_fputc& (0+255),w,b
  9647  004D54  E106               	bnz	l13117
  9648  004D56  29CD               	incf	(?_fputc+1)& (0+255),w,b
  9649  004D58  A4D8               	btfss	status,2,c
  9650  004D5A  D003               	goto	l13117
  9651                           
  9652                           ; BSR set to: 0
  9653  004D5C  69D3               	setf	?_fputs& (0+255),b
  9654  004D5E  69D4               	setf	(?_fputs+1)& (0+255),b
  9655  004D60  0012               	return	
  9656  004D62                     l13117:
  9657                           
  9658                           ; BSR set to: 0
  9659  004D62  4BD3               	infsnz	fputs@str& (0+255),f,b
  9660  004D64  2BD4               	incf	(fputs@str+1)& (0+255),f,b
  9661  004D66  4BD7               	infsnz	fputs@n& (0+255),f,b
  9662  004D68  2BD8               	incf	(fputs@n+1)& (0+255),f,b
  9663  004D6A                     l13119:
  9664                           
  9665                           ; BSR set to: 0
  9666  004D6A  C0D3  FFF6         	movff	fputs@str,tblptrl
  9667  004D6E  C0D4  FFF7         	movff	fputs@str+1,tblptrh
  9668  004D72  6AF8               	clrf	tblptru,c
  9669  004D74  0E07               	movlw	(high __ramtop+-1)
  9670  004D76  64F7               	cpfsgt	tblptrh,c
  9671  004D78  D003               	bra	u14047
  9672  004D7A  0008               	tblrd		*
  9673  004D7C  50F5               	movf	tablat,w,c
  9674  004D7E  D005               	bra	u14040
  9675  004D80                     u14047:
  9676  004D80  CFF6 FFE1          	movff	tblptrl,fsr1l
  9677  004D84  CFF7 FFE2          	movff	tblptrh,fsr1h
  9678  004D88  50E7               	movf	indf1,w,c
  9679  004D8A                     u14040:
  9680  004D8A  0900               	iorlw	0
  9681  004D8C  A4D8               	btfss	status,2,c
  9682  004D8E  D7C6               	goto	l13113
  9683                           
  9684                           ;tff.c: 1806: };tff.c: 1807: return n;
  9685  004D90  C0D7  F0D3         	movff	fputs@n,?_fputs
  9686  004D94  C0D8  F0D4         	movff	fputs@n+1,?_fputs+1
  9687  004D98  0012               	return		;funcret
  9688  004D9A                     __end_of_fputs:
  9689                           	callstack 0
  9690                           
  9691 ;; *************** function _fputc *****************
  9692 ;; Defined at:
  9693 ;;		line 1769 in file "bibliotecas/tff.c"
  9694 ;; Parameters:    Size  Location     Type
  9695 ;;  chr             2  108[BANK0 ] int 
  9696 ;;  fil             2  110[BANK0 ] PTR struct _FIL
  9697 ;;		 -> fil(28), 
  9698 ;; Auto vars:     Size  Location     Type
  9699 ;;  bw              2  113[BANK0 ] unsigned int 
  9700 ;;  c               1  112[BANK0 ] unsigned char 
  9701 ;; Return value:  Size  Location     Type
  9702 ;;                  2  108[BANK0 ] int 
  9703 ;; Registers used:
  9704 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9705 ;; Tracked objects:
  9706 ;;		On entry : 3F/0
  9707 ;;		On exit  : 3F/0
  9708 ;;		Unchanged: 0/0
  9709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9710 ;;      Params:         0       4       0       0       0       0       0       0       0
  9711 ;;      Locals:         0       3       0       0       0       0       0       0       0
  9712 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9713 ;;      Totals:         0       7       0       0       0       0       0       0       0
  9714 ;;Total ram usage:        7 bytes
  9715 ;; Hardware stack levels used:    1
  9716 ;; Hardware stack levels required when called:   12
  9717 ;; This function calls:
  9718 ;;		_f_write
  9719 ;; This function is called by:
  9720 ;;		_fputs
  9721 ;;		_fprintf
  9722 ;; This function uses a non-reentrant model
  9723 ;;
  9724                           
  9725                           	psect	text57
  9726  005798                     __ptext57:
  9727                           	callstack 0
  9728  005798                     _fputc:
  9729                           	callstack 13
  9730                           
  9731                           ; BSR set to: 0
  9732                           ;tff.c: 1774: UINT bw;;tff.c: 1775: char c;;tff.c: 1781: if (!fil) {
  9733                           
  9734                           ;incstack = 0
  9735  005798  51CE               	movf	fputc@fil& (0+255),w,b
  9736  00579A  11CF               	iorwf	(fputc@fil+1)& (0+255),w,b
  9737  00579C  A4D8               	btfss	status,2,c
  9738  00579E  D005               	goto	l1122
  9739  0057A0                     u13250:
  9740                           
  9741                           ; BSR set to: 0
  9742                           ;tff.c: 1783: return chr;
  9743  0057A0  C0CC  F0CC         	movff	fputc@chr,?_fputc
  9744  0057A4  C0CD  F0CD         	movff	fputc@chr+1,?_fputc+1
  9745  0057A8  0012               	return	
  9746  0057AA                     l1122:
  9747                           
  9748                           ; BSR set to: 0
  9749                           ;tff.c: 1784: };tff.c: 1785: c = (char)chr;
  9750  0057AA  C0CC  F0D0         	movff	fputc@chr,fputc@c
  9751                           
  9752                           ; BSR set to: 0
  9753                           ;tff.c: 1786: f_write(fil, &c, 1, &bw);
  9754  0057AE  C0CE  F0AE         	movff	fputc@fil,f_write@fp
  9755  0057B2  C0CF  F0AF         	movff	fputc@fil+1,f_write@fp+1
  9756  0057B6  0ED0               	movlw	low fputc@c
  9757  0057B8  6FB0               	movwf	f_write@buff& (0+255),b
  9758  0057BA  0E00               	movlw	0
  9759  0057BC  6FB2               	movwf	(f_write@btw+1)& (0+255),b
  9760  0057BE  0E01               	movlw	1
  9761  0057C0  6FB1               	movwf	f_write@btw& (0+255),b
  9762  0057C2  0ED1               	movlw	low fputc@bw
  9763  0057C4  6FB3               	movwf	f_write@bw& (0+255),b
  9764  0057C6  EC09  F000         	call	_f_write	;wreg free
  9765                           
  9766                           ; BSR set to: 0
  9767                           ;tff.c: 1787: return bw ? chr : -1;
  9768  0057CA  51D1               	movf	fputc@bw& (0+255),w,b
  9769  0057CC  11D2               	iorwf	(fputc@bw+1)& (0+255),w,b
  9770  0057CE  A4D8               	btfss	status,2,c
  9771  0057D0  D7E7               	goto	u13250
  9772                           
  9773                           ; BSR set to: 0
  9774  0057D2  69CC               	setf	?_fputc& (0+255),b
  9775  0057D4  69CD               	setf	(?_fputc+1)& (0+255),b
  9776                           
  9777                           ; BSR set to: 0
  9778  0057D6  0012               	return		;funcret
  9779  0057D8                     __end_of_fputc:
  9780                           	callstack 0
  9781                           
  9782 ;; *************** function _f_write *****************
  9783 ;; Defined at:
  9784 ;;		line 999 in file "bibliotecas/tff.c"
  9785 ;; Parameters:    Size  Location     Type
  9786 ;;  fp              2   78[BANK0 ] PTR struct _FIL
  9787 ;;		 -> fil(28), 
  9788 ;;  buff            1   80[BANK0 ] PTR const void 
  9789 ;;		 -> fputc@c(1), 
  9790 ;;  btw             2   81[BANK0 ] unsigned int 
  9791 ;;  bw              1   83[BANK0 ] PTR unsigned int 
  9792 ;;		 -> fputc@bw(2), 
  9793 ;; Auto vars:     Size  Location     Type
  9794 ;;  sect            4   98[BANK0 ] unsigned long 
  9795 ;;  wcnt            2  106[BANK0 ] unsigned int 
  9796 ;;  clust           2  104[BANK0 ] unsigned short 
  9797 ;;  cc              2  102[BANK0 ] unsigned int 
  9798 ;;  wbuff           1   97[BANK0 ] PTR const unsigned char 
  9799 ;;		 -> fputc@c(1), 
  9800 ;;  res             1   96[BANK0 ] enum E155
  9801 ;; Return value:  Size  Location     Type
  9802 ;;                  1    wreg      enum E155
  9803 ;; Registers used:
  9804 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9805 ;; Tracked objects:
  9806 ;;		On entry : 3F/0
  9807 ;;		On exit  : 3F/0
  9808 ;;		Unchanged: 0/0
  9809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9810 ;;      Params:         0       6       0       0       0       0       0       0       0
  9811 ;;      Locals:         0      12       0       0       0       0       0       0       0
  9812 ;;      Temps:          0      12       0       0       0       0       0       0       0
  9813 ;;      Totals:         0      30       0       0       0       0       0       0       0
  9814 ;;Total ram usage:       30 bytes
  9815 ;; Hardware stack levels used:    1
  9816 ;; Hardware stack levels required when called:   11
  9817 ;; This function calls:
  9818 ;;		_clust2sect
  9819 ;;		_create_chain
  9820 ;;		_disk_write
  9821 ;;		_memcpy
  9822 ;;		_move_window
  9823 ;;		_validate
  9824 ;; This function is called by:
  9825 ;;		_fputc
  9826 ;; This function uses a non-reentrant model
  9827 ;;
  9828                           
  9829                           	psect	text58
  9830  000012                     __ptext58:
  9831                           	callstack 0
  9832  000012                     _f_write:
  9833                           	callstack 13
  9834                           
  9835                           ; BSR set to: 0
  9836                           ;tff.c: 1006: FRESULT res;;tff.c: 1007: DWORD sect;;tff.c: 1008: UINT wcnt, cc;;tff.c: 1
      +                          009: CLUST clust;;tff.c: 1010: const BYTE *wbuff = buff;
  9837                           
  9838                           ; BSR set to: 0
  9839                           ;incstack = 0
  9840  000012  C0B0  F0C1         	movff	f_write@buff,f_write@wbuff
  9841                           
  9842                           ; BSR set to: 0
  9843                           ;tff.c: 1013: *bw = 0;
  9844  000016  51B3               	movf	f_write@bw& (0+255),w,b
  9845  000018  6ED9               	movwf	fsr2l,c
  9846  00001A  6ADA               	clrf	fsr2h,c
  9847  00001C  0E00               	movlw	0
  9848  00001E  6EDE               	movwf	postinc2,c
  9849  000020  0E00               	movlw	0
  9850  000022  6EDD               	movwf	postdec2,c
  9851                           
  9852                           ; BSR set to: 0
  9853                           ;tff.c: 1014: res = validate(fp->fs, fp->id);
  9854  000024  EE20 F004          	lfsr	2,4
  9855  000028  51AE               	movf	f_write@fp& (0+255),w,b
  9856  00002A  26D9               	addwf	fsr2l,f,c
  9857  00002C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9858  00002E  22DA               	addwfc	fsr2h,f,c
  9859  000030  CFDE F01F          	movff	postinc2,validate@fs
  9860  000034  CFDD F020          	movff	postdec2,validate@fs+1
  9861  000038  C0AE  FFD9         	movff	f_write@fp,fsr2l
  9862  00003C  C0AF  FFDA         	movff	f_write@fp+1,fsr2h
  9863  000040  CFDE F021          	movff	postinc2,validate@id
  9864  000044  CFDD F022          	movff	postdec2,validate@id+1
  9865  000048  ECDD  F02A         	call	_validate	;wreg free
  9866  00004C  0100               	movlb	0	; () banked
  9867  00004E  6FC0               	movwf	f_write@res& (0+255),b
  9868                           
  9869                           ; BSR set to: 0
  9870                           ;tff.c: 1015: if (res != FR_OK) return res;
  9871  000050  51C0               	movf	f_write@res& (0+255),w,b
  9872  000052  A4D8               	btfss	status,2,c
  9873  000054  0012               	return	
  9874                           
  9875                           ; BSR set to: 0
  9876                           ;tff.c: 1016: if (fp->flag & 0x80) return FR_RW_ERROR;
  9877  000056  EE20 F002          	lfsr	2,2
  9878  00005A  51AE               	movf	f_write@fp& (0+255),w,b
  9879  00005C  26D9               	addwf	fsr2l,f,c
  9880  00005E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9881  000060  22DA               	addwfc	fsr2h,f,c
  9882  000062  BEDF               	btfsc	indf2,7,c
  9883  000064  0012               	return	
  9884                           
  9885                           ; BSR set to: 0
  9886                           ;tff.c: 1017: if (!(fp->flag & 0x02)) return FR_DENIED;
  9887  000066  EE20 F002          	lfsr	2,2
  9888  00006A  51AE               	movf	f_write@fp& (0+255),w,b
  9889  00006C  26D9               	addwf	fsr2l,f,c
  9890  00006E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9891  000070  22DA               	addwfc	fsr2h,f,c
  9892  000072  A2DF               	btfss	indf2,1,c
  9893  000074  0012               	return	
  9894                           
  9895                           ; BSR set to: 0
  9896                           ;tff.c: 1018: if (fp->fsize + btw < fp->fsize) return FR_OK;
  9897  000076  EE20 F00A          	lfsr	2,10
  9898  00007A  51AE               	movf	f_write@fp& (0+255),w,b
  9899  00007C  26D9               	addwf	fsr2l,f,c
  9900  00007E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9901  000080  22DA               	addwfc	fsr2h,f,c
  9902  000082  EE10 F00A          	lfsr	1,10
  9903  000086  51AE               	movf	f_write@fp& (0+255),w,b
  9904  000088  26E1               	addwf	fsr1l,f,c
  9905  00008A  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9906  00008C  22E2               	addwfc	fsr1h,f,c
  9907  00008E  CFE6 F0B8          	movff	postinc1,??_f_write+4
  9908  000092  CFE6 F0B9          	movff	postinc1,??_f_write+5
  9909  000096  CFE6 F0BA          	movff	postinc1,??_f_write+6
  9910  00009A  CFE6 F0BB          	movff	postinc1,??_f_write+7
  9911  00009E  51B1               	movf	f_write@btw& (0+255),w,b
  9912  0000A0  25B8               	addwf	(??_f_write+4)& (0+255),w,b
  9913  0000A2  6FBC               	movwf	(??_f_write+8)& (0+255),b
  9914  0000A4  51B2               	movf	(f_write@btw+1)& (0+255),w,b
  9915  0000A6  21B9               	addwfc	(??_f_write+5)& (0+255),w,b
  9916  0000A8  6FBD               	movwf	(??_f_write+9)& (0+255),b
  9917  0000AA  0E00               	movlw	0
  9918  0000AC  21BA               	addwfc	(??_f_write+6)& (0+255),w,b
  9919  0000AE  6FBE               	movwf	(??_f_write+10)& (0+255),b
  9920  0000B0  0E00               	movlw	0
  9921  0000B2  21BB               	addwfc	(??_f_write+7)& (0+255),w,b
  9922  0000B4  6FBF               	movwf	(??_f_write+11)& (0+255),b
  9923  0000B6  50DE               	movf	postinc2,w,c
  9924  0000B8  5DBC               	subwf	(??_f_write+8)& (0+255),w,b
  9925  0000BA  50DE               	movf	postinc2,w,c
  9926  0000BC  59BD               	subwfb	(??_f_write+9)& (0+255),w,b
  9927  0000BE  50DE               	movf	postinc2,w,c
  9928  0000C0  59BE               	subwfb	(??_f_write+10)& (0+255),w,b
  9929  0000C2  50DE               	movf	postinc2,w,c
  9930  0000C4  59BF               	subwfb	(??_f_write+11)& (0+255),w,b
  9931  0000C6  A0D8               	btfss	status,0,c
  9932  0000C8  0012               	return	
  9933  0000CA  D228               	goto	l12245
  9934  0000CC                     l12169:
  9935                           
  9936                           ; BSR set to: 0
  9937                           ;tff.c: 1022: if ((fp->fptr % 512U) == 0) {
  9938  0000CC  EE20 F006          	lfsr	2,6
  9939  0000D0  51AE               	movf	f_write@fp& (0+255),w,b
  9940  0000D2  26D9               	addwf	fsr2l,f,c
  9941  0000D4  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9942  0000D6  22DA               	addwfc	fsr2h,f,c
  9943  0000D8  0EFF               	movlw	255
  9944  0000DA  14DE               	andwf	postinc2,w,c
  9945  0000DC  6FB4               	movwf	??_f_write& (0+255),b
  9946  0000DE  0E01               	movlw	1
  9947  0000E0  14DE               	andwf	postinc2,w,c
  9948  0000E2  6FB5               	movwf	(??_f_write+1)& (0+255),b
  9949  0000E4  0E00               	movlw	0
  9950  0000E6  14DE               	andwf	postinc2,w,c
  9951  0000E8  6FB6               	movwf	(??_f_write+2)& (0+255),b
  9952  0000EA  0E00               	movlw	0
  9953  0000EC  14DE               	andwf	postinc2,w,c
  9954  0000EE  6FB7               	movwf	(??_f_write+3)& (0+255),b
  9955  0000F0  51B4               	movf	??_f_write& (0+255),w,b
  9956  0000F2  11B5               	iorwf	(??_f_write+1)& (0+255),w,b
  9957  0000F4  11B6               	iorwf	(??_f_write+2)& (0+255),w,b
  9958  0000F6  11B7               	iorwf	(??_f_write+3)& (0+255),w,b
  9959  0000F8  A4D8               	btfss	status,2,c
  9960  0000FA  D15B               	goto	l12221
  9961                           
  9962                           ; BSR set to: 0
  9963                           ;tff.c: 1023: if (fp->csect >= fp->fs->csize) {
  9964  0000FC  EE20 F004          	lfsr	2,4
  9965  000100  51AE               	movf	f_write@fp& (0+255),w,b
  9966  000102  26D9               	addwf	fsr2l,f,c
  9967  000104  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9968  000106  22DA               	addwfc	fsr2h,f,c
  9969  000108  EE10 F01D          	lfsr	1,29
  9970  00010C  50DE               	movf	postinc2,w,c
  9971  00010E  26E1               	addwf	fsr1l,f,c
  9972  000110  50DD               	movf	postdec2,w,c
  9973  000112  22E2               	addwfc	fsr1h,f,c
  9974  000114  EE20 F003          	lfsr	2,3
  9975  000118  51AE               	movf	f_write@fp& (0+255),w,b
  9976  00011A  26D9               	addwf	fsr2l,f,c
  9977  00011C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9978  00011E  22DA               	addwfc	fsr2h,f,c
  9979  000120  50E6               	movf	postinc1,w,c
  9980  000122  5CDE               	subwf	postinc2,w,c
  9981  000124  A0D8               	btfss	status,0,c
  9982  000126  D06B               	goto	l12193
  9983                           
  9984                           ; BSR set to: 0
  9985                           ;tff.c: 1024: if (fp->fptr == 0) {
  9986  000128  EE20 F006          	lfsr	2,6
  9987  00012C  51AE               	movf	f_write@fp& (0+255),w,b
  9988  00012E  26D9               	addwf	fsr2l,f,c
  9989  000130  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  9990  000132  22DA               	addwfc	fsr2h,f,c
  9991  000134  50DE               	movf	postinc2,w,c
  9992  000136  10DE               	iorwf	postinc2,w,c
  9993  000138  10DE               	iorwf	postinc2,w,c
  9994  00013A  10DE               	iorwf	postinc2,w,c
  9995  00013C  A4D8               	btfss	status,2,c
  9996  00013E  D023               	goto	l12181
  9997                           
  9998                           ; BSR set to: 0
  9999                           ;tff.c: 1025: clust = fp->org_clust;
 10000  000140  EE20 F00E          	lfsr	2,14
 10001  000144  51AE               	movf	f_write@fp& (0+255),w,b
 10002  000146  26D9               	addwf	fsr2l,f,c
 10003  000148  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10004  00014A  22DA               	addwfc	fsr2h,f,c
 10005  00014C  CFDE F0C8          	movff	postinc2,f_write@clust
 10006  000150  CFDD F0C9          	movff	postdec2,f_write@clust+1
 10007                           
 10008                           ; BSR set to: 0
 10009                           ;tff.c: 1026: if (clust == 0)
 10010  000154  51C8               	movf	f_write@clust& (0+255),w,b
 10011  000156  11C9               	iorwf	(f_write@clust+1)& (0+255),w,b
 10012  000158  A4D8               	btfss	status,2,c
 10013  00015A  D025               	goto	l12183
 10014                           
 10015                           ; BSR set to: 0
 10016                           ;tff.c: 1027: fp->org_clust = clust = create_chain(0);
 10017  00015C  0E00               	movlw	0
 10018  00015E  6FA1               	movwf	(create_chain@clust+1)& (0+255),b
 10019  000160  0E00               	movlw	0
 10020  000162  6FA0               	movwf	create_chain@clust& (0+255),b
 10021  000164  ECFC  F019         	call	_create_chain	;wreg free
 10022  000168  C0A0  F0C8         	movff	?_create_chain,f_write@clust
 10023  00016C  C0A1  F0C9         	movff	?_create_chain+1,f_write@clust+1
 10024  000170  EE20 F00E          	lfsr	2,14
 10025  000174  51AE               	movf	f_write@fp& (0+255),w,b
 10026  000176  26D9               	addwf	fsr2l,f,c
 10027  000178  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10028  00017A  22DA               	addwfc	fsr2h,f,c
 10029  00017C  C0C8  FFDE         	movff	f_write@clust,postinc2
 10030  000180  C0C9  FFDD         	movff	f_write@clust+1,postdec2
 10031  000184  D010               	goto	l12183
 10032  000186                     l12181:
 10033                           
 10034                           ; BSR set to: 0
 10035                           ;tff.c: 1029: clust = create_chain(fp->curr_clust);
 10036  000186  EE20 F010          	lfsr	2,16
 10037  00018A  51AE               	movf	f_write@fp& (0+255),w,b
 10038  00018C  26D9               	addwf	fsr2l,f,c
 10039  00018E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10040  000190  22DA               	addwfc	fsr2h,f,c
 10041  000192  CFDE F0A0          	movff	postinc2,create_chain@clust
 10042  000196  CFDD F0A1          	movff	postdec2,create_chain@clust+1
 10043  00019A  ECFC  F019         	call	_create_chain	;wreg free
 10044  00019E  C0A0  F0C8         	movff	?_create_chain,f_write@clust
 10045  0001A2  C0A1  F0C9         	movff	?_create_chain+1,f_write@clust+1
 10046  0001A6                     l12183:
 10047                           
 10048                           ; BSR set to: 0
 10049                           ;tff.c: 1030: };tff.c: 1031: if (clust == 0) break;
 10050  0001A6  51C8               	movf	f_write@clust& (0+255),w,b
 10051  0001A8  11C9               	iorwf	(f_write@clust+1)& (0+255),w,b
 10052  0001AA  B4D8               	btfsc	status,2,c
 10053  0001AC  D1BB               	goto	u12990
 10054                           
 10055                           ; BSR set to: 0
 10056                           ;tff.c: 1032: if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
 10057  0001AE  05C8               	decf	f_write@clust& (0+255),w,b
 10058  0001B0  11C9               	iorwf	(f_write@clust+1)& (0+255),w,b
 10059  0001B2  B4D8               	btfsc	status,2,c
 10060  0001B4  D1EA               	goto	l12255
 10061                           
 10062                           ; BSR set to: 0
 10063  0001B6  EE20 F004          	lfsr	2,4
 10064  0001BA  51AE               	movf	f_write@fp& (0+255),w,b
 10065  0001BC  26D9               	addwf	fsr2l,f,c
 10066  0001BE  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10067  0001C0  22DA               	addwfc	fsr2h,f,c
 10068  0001C2  EE10 F016          	lfsr	1,22
 10069  0001C6  50DE               	movf	postinc2,w,c
 10070  0001C8  26E1               	addwf	fsr1l,f,c
 10071  0001CA  50DD               	movf	postdec2,w,c
 10072  0001CC  22E2               	addwfc	fsr1h,f,c
 10073  0001CE  50E6               	movf	postinc1,w,c
 10074  0001D0  5DC8               	subwf	f_write@clust& (0+255),w,b
 10075  0001D2  50E6               	movf	postinc1,w,c
 10076  0001D4  59C9               	subwfb	(f_write@clust+1)& (0+255),w,b
 10077  0001D6  B0D8               	btfsc	status,0,c
 10078  0001D8  D1D8               	goto	l12255
 10079                           
 10080                           ; BSR set to: 0
 10081                           ;tff.c: 1033: fp->curr_clust = clust;
 10082  0001DA  EE20 F010          	lfsr	2,16
 10083  0001DE  51AE               	movf	f_write@fp& (0+255),w,b
 10084  0001E0  26D9               	addwf	fsr2l,f,c
 10085  0001E2  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10086  0001E4  22DA               	addwfc	fsr2h,f,c
 10087  0001E6  C0C8  FFDE         	movff	f_write@clust,postinc2
 10088  0001EA  C0C9  FFDD         	movff	f_write@clust+1,postdec2
 10089                           
 10090                           ;tff.c: 1034: fp->csect = 0;
 10091  0001EE  EE20 F003          	lfsr	2,3
 10092  0001F2  51AE               	movf	f_write@fp& (0+255),w,b
 10093  0001F4  26D9               	addwf	fsr2l,f,c
 10094  0001F6  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10095  0001F8  22DA               	addwfc	fsr2h,f,c
 10096  0001FA  0E00               	movlw	0
 10097  0001FC  6EDF               	movwf	indf2,c
 10098  0001FE                     l12193:
 10099                           
 10100                           ; BSR set to: 0
 10101                           ;tff.c: 1035: };tff.c: 1036: sect = clust2sect(fp->curr_clust) + fp->csect;
 10102  0001FE  EE20 F010          	lfsr	2,16
 10103  000202  51AE               	movf	f_write@fp& (0+255),w,b
 10104  000204  26D9               	addwf	fsr2l,f,c
 10105  000206  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10106  000208  22DA               	addwfc	fsr2h,f,c
 10107  00020A  CFDE F025          	movff	postinc2,clust2sect@clust
 10108  00020E  CFDD F026          	movff	postdec2,clust2sect@clust+1
 10109  000212  EC39  F022         	call	_clust2sect	;wreg free
 10110  000216  EE20 F003          	lfsr	2,3
 10111  00021A  51AE               	movf	f_write@fp& (0+255),w,b
 10112  00021C  26D9               	addwf	fsr2l,f,c
 10113  00021E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10114  000220  22DA               	addwfc	fsr2h,f,c
 10115  000222  50DF               	movf	indf2,w,c
 10116  000224  6FB4               	movwf	??_f_write& (0+255),b
 10117  000226  51B4               	movf	??_f_write& (0+255),w,b
 10118  000228  2425               	addwf	?_clust2sect^0,w,c
 10119  00022A  6FC2               	movwf	f_write@sect& (0+255),b
 10120  00022C  0E00               	movlw	0
 10121  00022E  2026               	addwfc	(?_clust2sect+1)^0,w,c
 10122  000230  6FC3               	movwf	(f_write@sect+1)& (0+255),b
 10123  000232  0E00               	movlw	0
 10124  000234  2027               	addwfc	(?_clust2sect+2)^0,w,c
 10125  000236  6FC4               	movwf	(f_write@sect+2)& (0+255),b
 10126  000238  0E00               	movlw	0
 10127  00023A  2028               	addwfc	(?_clust2sect+3)^0,w,c
 10128  00023C  6FC5               	movwf	(f_write@sect+3)& (0+255),b
 10129                           
 10130                           ; BSR set to: 0
 10131                           ;tff.c: 1037: cc = btw / 512U;
 10132  00023E  C0B1  F0B4         	movff	f_write@btw,??_f_write
 10133  000242  C0B2  F0B5         	movff	f_write@btw+1,??_f_write+1
 10134  000246  0E09               	movlw	9
 10135  000248  6FB6               	movwf	(??_f_write+2)& (0+255),b
 10136  00024A                     u12905:
 10137  00024A  90D8               	bcf	status,0,c
 10138  00024C  33B5               	rrcf	(??_f_write+1)& (0+255),f,b
 10139  00024E  33B4               	rrcf	??_f_write& (0+255),f,b
 10140  000250  2FB6               	decfsz	(??_f_write+2)& (0+255),f,b
 10141  000252  D7FB               	goto	u12905
 10142  000254  C0B4  F0C6         	movff	??_f_write,f_write@cc
 10143  000258  C0B5  F0C7         	movff	??_f_write+1,f_write@cc+1
 10144                           
 10145                           ; BSR set to: 0
 10146                           ;tff.c: 1038: if (cc) {
 10147  00025C  51C6               	movf	f_write@cc& (0+255),w,b
 10148  00025E  11C7               	iorwf	(f_write@cc+1)& (0+255),w,b
 10149  000260  B4D8               	btfsc	status,2,c
 10150  000262  D069               	goto	l12211
 10151                           
 10152                           ; BSR set to: 0
 10153                           ;tff.c: 1039: if (fp->csect + cc > fp->fs->csize)
 10154  000264  EE20 F003          	lfsr	2,3
 10155  000268  51AE               	movf	f_write@fp& (0+255),w,b
 10156  00026A  26D9               	addwf	fsr2l,f,c
 10157  00026C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10158  00026E  22DA               	addwfc	fsr2h,f,c
 10159  000270  50DF               	movf	indf2,w,c
 10160  000272  6FB4               	movwf	??_f_write& (0+255),b
 10161  000274  51B4               	movf	??_f_write& (0+255),w,b
 10162  000276  25C6               	addwf	f_write@cc& (0+255),w,b
 10163  000278  6FB5               	movwf	(??_f_write+1)& (0+255),b
 10164  00027A  0E00               	movlw	0
 10165  00027C  21C7               	addwfc	(f_write@cc+1)& (0+255),w,b
 10166  00027E  6FB6               	movwf	(??_f_write+2)& (0+255),b
 10167  000280  EE20 F004          	lfsr	2,4
 10168  000284  51AE               	movf	f_write@fp& (0+255),w,b
 10169  000286  26D9               	addwf	fsr2l,f,c
 10170  000288  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10171  00028A  22DA               	addwfc	fsr2h,f,c
 10172  00028C  EE10 F01D          	lfsr	1,29
 10173  000290  50DE               	movf	postinc2,w,c
 10174  000292  26E1               	addwf	fsr1l,f,c
 10175  000294  50DD               	movf	postdec2,w,c
 10176  000296  22E2               	addwfc	fsr1h,f,c
 10177  000298  50E7               	movf	indf1,w,c
 10178  00029A  6FB7               	movwf	(??_f_write+3)& (0+255),b
 10179  00029C  6BB8               	clrf	(??_f_write+4)& (0+255),b
 10180  00029E  51B5               	movf	(??_f_write+1)& (0+255),w,b
 10181  0002A0  5DB7               	subwf	(??_f_write+3)& (0+255),w,b
 10182  0002A2  51B6               	movf	(??_f_write+2)& (0+255),w,b
 10183  0002A4  59B8               	subwfb	(??_f_write+4)& (0+255),w,b
 10184  0002A6  B0D8               	btfsc	status,0,c
 10185  0002A8  D01C               	goto	l12203
 10186                           
 10187                           ; BSR set to: 0
 10188                           ;tff.c: 1040: cc = fp->fs->csize - fp->csect;
 10189  0002AA  EE20 F004          	lfsr	2,4
 10190  0002AE  51AE               	movf	f_write@fp& (0+255),w,b
 10191  0002B0  26D9               	addwf	fsr2l,f,c
 10192  0002B2  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10193  0002B4  22DA               	addwfc	fsr2h,f,c
 10194  0002B6  EE10 F01D          	lfsr	1,29
 10195  0002BA  50DE               	movf	postinc2,w,c
 10196  0002BC  26E1               	addwf	fsr1l,f,c
 10197  0002BE  50DD               	movf	postdec2,w,c
 10198  0002C0  22E2               	addwfc	fsr1h,f,c
 10199  0002C2  50E7               	movf	indf1,w,c
 10200  0002C4  6FB4               	movwf	??_f_write& (0+255),b
 10201  0002C6  EE20 F003          	lfsr	2,3
 10202  0002CA  51AE               	movf	f_write@fp& (0+255),w,b
 10203  0002CC  26D9               	addwf	fsr2l,f,c
 10204  0002CE  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10205  0002D0  22DA               	addwfc	fsr2h,f,c
 10206  0002D2  50DF               	movf	indf2,w,c
 10207  0002D4  6FB5               	movwf	(??_f_write+1)& (0+255),b
 10208  0002D6  51B5               	movf	(??_f_write+1)& (0+255),w,b
 10209  0002D8  5DB4               	subwf	??_f_write& (0+255),w,b
 10210  0002DA  6FC6               	movwf	f_write@cc& (0+255),b
 10211  0002DC  6BC7               	clrf	(f_write@cc+1)& (0+255),b
 10212  0002DE  A0D8               	btfss	status,0,c
 10213  0002E0  07C7               	decf	(f_write@cc+1)& (0+255),f,b
 10214  0002E2                     l12203:
 10215                           
 10216                           ; BSR set to: 0
 10217                           ;tff.c: 1041: if (disk_write(0, wbuff, sect, (BYTE)cc) != RES_OK)
 10218  0002E2  C0C1  F068         	movff	f_write@wbuff,disk_write@buff
 10219  0002E6  6B69               	clrf	(disk_write@buff+1)& (0+255),b
 10220  0002E8  C0C2  F06A         	movff	f_write@sect,disk_write@sector
 10221  0002EC  C0C3  F06B         	movff	f_write@sect+1,disk_write@sector+1
 10222  0002F0  C0C4  F06C         	movff	f_write@sect+2,disk_write@sector+2
 10223  0002F4  C0C5  F06D         	movff	f_write@sect+3,disk_write@sector+3
 10224  0002F8  C0C6  F06E         	movff	f_write@cc,disk_write@count
 10225  0002FC  0E00               	movlw	0
 10226  0002FE  EC47  F02A         	call	_disk_write
 10227  000302  0900               	iorlw	0
 10228  000304  A4D8               	btfss	status,2,c
 10229  000306  D141               	goto	l12255
 10230                           
 10231                           ; BSR set to: 0
 10232                           ;tff.c: 1043: fp->csect += (BYTE)cc;
 10233  000308  EE20 F003          	lfsr	2,3
 10234  00030C  51AE               	movf	f_write@fp& (0+255),w,b
 10235  00030E  26D9               	addwf	fsr2l,f,c
 10236  000310  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10237  000312  22DA               	addwfc	fsr2h,f,c
 10238  000314  51C6               	movf	f_write@cc& (0+255),w,b
 10239  000316  26DF               	addwf	indf2,f,c
 10240                           
 10241                           ; BSR set to: 0
 10242                           ;tff.c: 1044: wcnt = 512U * cc;
 10243  000318  C0C6  F0B4         	movff	f_write@cc,??_f_write
 10244  00031C  C0C7  F0B5         	movff	f_write@cc+1,??_f_write+1
 10245  000320  0E09               	movlw	9
 10246  000322                     u12945:
 10247  000322  90D8               	bcf	status,0,c
 10248  000324  37B4               	rlcf	??_f_write& (0+255),f,b
 10249  000326  37B5               	rlcf	(??_f_write+1)& (0+255),f,b
 10250  000328  2EE8               	decfsz	wreg,f,c
 10251  00032A  D7FB               	goto	u12945
 10252  00032C  C0B4  F0CA         	movff	??_f_write,f_write@wcnt
 10253  000330  C0B5  F0CB         	movff	??_f_write+1,f_write@wcnt+1
 10254                           
 10255                           ;tff.c: 1045: continue;
 10256  000334  D0D9               	goto	l12237
 10257  000336                     l12211:
 10258                           
 10259                           ; BSR set to: 0
 10260                           ;tff.c: 1046: };tff.c: 1047: if (fp->fptr >= fp->fsize) {
 10261  000336  EE20 F00A          	lfsr	2,10
 10262  00033A  51AE               	movf	f_write@fp& (0+255),w,b
 10263  00033C  26D9               	addwf	fsr2l,f,c
 10264  00033E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10265  000340  22DA               	addwfc	fsr2h,f,c
 10266  000342  EE10 F006          	lfsr	1,6
 10267  000346  51AE               	movf	f_write@fp& (0+255),w,b
 10268  000348  26E1               	addwf	fsr1l,f,c
 10269  00034A  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10270  00034C  22E2               	addwfc	fsr1h,f,c
 10271  00034E  50DE               	movf	postinc2,w,c
 10272  000350  5CE6               	subwf	postinc1,w,c
 10273  000352  50DE               	movf	postinc2,w,c
 10274  000354  58E6               	subwfb	postinc1,w,c
 10275  000356  50DE               	movf	postinc2,w,c
 10276  000358  58E6               	subwfb	postinc1,w,c
 10277  00035A  50DE               	movf	postinc2,w,c
 10278  00035C  58E6               	subwfb	postinc1,w,c
 10279  00035E  A0D8               	btfss	status,0,c
 10280  000360  D021               	goto	l12219
 10281                           
 10282                           ; BSR set to: 0
 10283                           ;tff.c: 1048: if (!move_window(0)) goto fw_error;
 10284  000362  0E00               	movlw	0
 10285  000364  6F73               	movwf	move_window@sector& (0+255),b
 10286  000366  0E00               	movlw	0
 10287  000368  6F74               	movwf	(move_window@sector+1)& (0+255),b
 10288  00036A  0E00               	movlw	0
 10289  00036C  6F75               	movwf	(move_window@sector+2)& (0+255),b
 10290  00036E  0E00               	movlw	0
 10291  000370  6F76               	movwf	(move_window@sector+3)& (0+255),b
 10292  000372  EC58  F018         	call	_move_window	;wreg free
 10293  000376  0900               	iorlw	0
 10294  000378  B4D8               	btfsc	status,2,c
 10295  00037A  D107               	goto	l12255
 10296                           
 10297                           ; BSR set to: 0
 10298                           ;tff.c: 1049: fp->fs->winsect = sect;
 10299  00037C  EE20 F004          	lfsr	2,4
 10300  000380  51AE               	movf	f_write@fp& (0+255),w,b
 10301  000382  26D9               	addwf	fsr2l,f,c
 10302  000384  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10303  000386  22DA               	addwfc	fsr2h,f,c
 10304  000388  EE10 F004          	lfsr	1,4
 10305  00038C  50DE               	movf	postinc2,w,c
 10306  00038E  26E1               	addwf	fsr1l,f,c
 10307  000390  50DD               	movf	postdec2,w,c
 10308  000392  22E2               	addwfc	fsr1h,f,c
 10309  000394  C0C2  FFE6         	movff	f_write@sect,postinc1
 10310  000398  C0C3  FFE6         	movff	f_write@sect+1,postinc1
 10311  00039C  C0C4  FFE6         	movff	f_write@sect+2,postinc1
 10312  0003A0  C0C5  FFE6         	movff	f_write@sect+3,postinc1
 10313  0003A4                     l12219:
 10314                           
 10315                           ; BSR set to: 0
 10316                           ;tff.c: 1050: };tff.c: 1051: fp->csect++;
 10317  0003A4  EE20 F003          	lfsr	2,3
 10318  0003A8  51AE               	movf	f_write@fp& (0+255),w,b
 10319  0003AA  26D9               	addwf	fsr2l,f,c
 10320  0003AC  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10321  0003AE  22DA               	addwfc	fsr2h,f,c
 10322  0003B0  2ADF               	incf	indf2,f,c
 10323  0003B2                     l12221:
 10324                           
 10325                           ; BSR set to: 0
 10326                           ;tff.c: 1052: };tff.c: 1053: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
 10327  0003B2  EE20 F010          	lfsr	2,16
 10328  0003B6  51AE               	movf	f_write@fp& (0+255),w,b
 10329  0003B8  26D9               	addwf	fsr2l,f,c
 10330  0003BA  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10331  0003BC  22DA               	addwfc	fsr2h,f,c
 10332  0003BE  CFDE F025          	movff	postinc2,clust2sect@clust
 10333  0003C2  CFDD F026          	movff	postdec2,clust2sect@clust+1
 10334  0003C6  EC39  F022         	call	_clust2sect	;wreg free
 10335  0003CA  EE20 F003          	lfsr	2,3
 10336  0003CE  51AE               	movf	f_write@fp& (0+255),w,b
 10337  0003D0  26D9               	addwf	fsr2l,f,c
 10338  0003D2  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10339  0003D4  22DA               	addwfc	fsr2h,f,c
 10340  0003D6  50DF               	movf	indf2,w,c
 10341  0003D8  6FB4               	movwf	??_f_write& (0+255),b
 10342  0003DA  51B4               	movf	??_f_write& (0+255),w,b
 10343  0003DC  2425               	addwf	?_clust2sect^0,w,c
 10344  0003DE  6FB5               	movwf	(??_f_write+1)& (0+255),b
 10345  0003E0  0E00               	movlw	0
 10346  0003E2  2026               	addwfc	(?_clust2sect+1)^0,w,c
 10347  0003E4  6FB6               	movwf	(??_f_write+2)& (0+255),b
 10348  0003E6  0E00               	movlw	0
 10349  0003E8  2027               	addwfc	(?_clust2sect+2)^0,w,c
 10350  0003EA  6FB7               	movwf	(??_f_write+3)& (0+255),b
 10351  0003EC  0E00               	movlw	0
 10352  0003EE  2028               	addwfc	(?_clust2sect+3)^0,w,c
 10353  0003F0  6FB8               	movwf	(??_f_write+4)& (0+255),b
 10354  0003F2  0EFF               	movlw	255
 10355  0003F4  25B5               	addwf	(??_f_write+1)& (0+255),w,b
 10356  0003F6  6FC2               	movwf	f_write@sect& (0+255),b
 10357  0003F8  0EFF               	movlw	255
 10358  0003FA  21B6               	addwfc	(??_f_write+2)& (0+255),w,b
 10359  0003FC  6FC3               	movwf	(f_write@sect+1)& (0+255),b
 10360  0003FE  0EFF               	movlw	255
 10361  000400  21B7               	addwfc	(??_f_write+3)& (0+255),w,b
 10362  000402  6FC4               	movwf	(f_write@sect+2)& (0+255),b
 10363  000404  0EFF               	movlw	255
 10364  000406  21B8               	addwfc	(??_f_write+4)& (0+255),w,b
 10365  000408  6FC5               	movwf	(f_write@sect+3)& (0+255),b
 10366                           
 10367                           ; BSR set to: 0
 10368                           ;tff.c: 1054: if (!move_window(sect)) goto fw_error;
 10369  00040A  C0C2  F073         	movff	f_write@sect,move_window@sector
 10370  00040E  C0C3  F074         	movff	f_write@sect+1,move_window@sector+1
 10371  000412  C0C4  F075         	movff	f_write@sect+2,move_window@sector+2
 10372  000416  C0C5  F076         	movff	f_write@sect+3,move_window@sector+3
 10373  00041A  EC58  F018         	call	_move_window	;wreg free
 10374  00041E  0900               	iorlw	0
 10375  000420  B4D8               	btfsc	status,2,c
 10376  000422  D0B3               	goto	l12255
 10377                           
 10378                           ; BSR set to: 0
 10379                           ;tff.c: 1055: wcnt = 512U - (fp->fptr % 512U);
 10380  000424  0EFF               	movlw	255
 10381  000426  6FB4               	movwf	??_f_write& (0+255),b
 10382  000428  0E01               	movlw	1
 10383  00042A  6FB5               	movwf	(??_f_write+1)& (0+255),b
 10384  00042C  EE20 F006          	lfsr	2,6
 10385  000430  51AE               	movf	f_write@fp& (0+255),w,b
 10386  000432  26D9               	addwf	fsr2l,f,c
 10387  000434  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10388  000436  22DA               	addwfc	fsr2h,f,c
 10389  000438  CFDE F0B6          	movff	postinc2,??_f_write+2
 10390  00043C  CFDD F0B7          	movff	postdec2,??_f_write+3
 10391  000440  51B4               	movf	??_f_write& (0+255),w,b
 10392  000442  17B6               	andwf	(??_f_write+2)& (0+255),f,b
 10393  000444  51B5               	movf	(??_f_write+1)& (0+255),w,b
 10394  000446  17B7               	andwf	(??_f_write+3)& (0+255),f,b
 10395  000448  51B6               	movf	(??_f_write+2)& (0+255),w,b
 10396  00044A  0800               	sublw	0
 10397  00044C  6FCA               	movwf	f_write@wcnt& (0+255),b
 10398  00044E  51B7               	movf	(??_f_write+3)& (0+255),w,b
 10399  000450  A0D8               	btfss	status,0,c
 10400  000452  2AE8               	incf	wreg,f,c
 10401  000454  0802               	sublw	2
 10402  000456  6FCB               	movwf	(f_write@wcnt+1)& (0+255),b
 10403                           
 10404                           ; BSR set to: 0
 10405                           ;tff.c: 1056: if (wcnt > btw) wcnt = btw;
 10406  000458  51CA               	movf	f_write@wcnt& (0+255),w,b
 10407  00045A  5DB1               	subwf	f_write@btw& (0+255),w,b
 10408  00045C  51CB               	movf	(f_write@wcnt+1)& (0+255),w,b
 10409  00045E  59B2               	subwfb	(f_write@btw+1)& (0+255),w,b
 10410  000460  B0D8               	btfsc	status,0,c
 10411  000462  D004               	goto	l12233
 10412                           
 10413                           ; BSR set to: 0
 10414  000464  C0B1  F0CA         	movff	f_write@btw,f_write@wcnt
 10415  000468  C0B2  F0CB         	movff	f_write@btw+1,f_write@wcnt+1
 10416  00046C                     l12233:
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;tff.c: 1057: memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
 10420  00046C  0EFF               	movlw	255
 10421  00046E  6FB4               	movwf	??_f_write& (0+255),b
 10422  000470  0E01               	movlw	1
 10423  000472  6FB5               	movwf	(??_f_write+1)& (0+255),b
 10424  000474  EE20 F006          	lfsr	2,6
 10425  000478  51AE               	movf	f_write@fp& (0+255),w,b
 10426  00047A  26D9               	addwf	fsr2l,f,c
 10427  00047C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10428  00047E  22DA               	addwfc	fsr2h,f,c
 10429  000480  CFDE F0B6          	movff	postinc2,??_f_write+2
 10430  000484  CFDD F0B7          	movff	postdec2,??_f_write+3
 10431  000488  51B4               	movf	??_f_write& (0+255),w,b
 10432  00048A  17B6               	andwf	(??_f_write+2)& (0+255),f,b
 10433  00048C  51B5               	movf	(??_f_write+1)& (0+255),w,b
 10434  00048E  17B7               	andwf	(??_f_write+3)& (0+255),f,b
 10435  000490  EE20 F004          	lfsr	2,4
 10436  000494  51AE               	movf	f_write@fp& (0+255),w,b
 10437  000496  26D9               	addwf	fsr2l,f,c
 10438  000498  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10439  00049A  22DA               	addwfc	fsr2h,f,c
 10440  00049C  CFDE F0B8          	movff	postinc2,??_f_write+4
 10441  0004A0  CFDD F0B9          	movff	postdec2,??_f_write+5
 10442  0004A4  51B6               	movf	(??_f_write+2)& (0+255),w,b
 10443  0004A6  27B8               	addwf	(??_f_write+4)& (0+255),f,b
 10444  0004A8  51B7               	movf	(??_f_write+3)& (0+255),w,b
 10445  0004AA  23B9               	addwfc	(??_f_write+5)& (0+255),f,b
 10446  0004AC  0E20               	movlw	32
 10447  0004AE  25B8               	addwf	(??_f_write+4)& (0+255),w,b
 10448  0004B0  6E19               	movwf	memcpy@d1^0,c
 10449  0004B2  0E00               	movlw	0
 10450  0004B4  21B9               	addwfc	(??_f_write+5)& (0+255),w,b
 10451  0004B6  6E1A               	movwf	(memcpy@d1+1)^0,c
 10452  0004B8  C0C1  F01B         	movff	f_write@wbuff,memcpy@s1
 10453  0004BC  6A1C               	clrf	(memcpy@s1+1)^0,c
 10454  0004BE  C0CA  F01D         	movff	f_write@wcnt,memcpy@n
 10455  0004C2  C0CB  F01E         	movff	f_write@wcnt+1,memcpy@n+1
 10456  0004C6  EC68  F02B         	call	_memcpy	;wreg free
 10457                           
 10458                           ;tff.c: 1058: fp->fs->winflag = 1;
 10459  0004CA  0100               	movlb	0	; () banked
 10460  0004CC  EE20 F004          	lfsr	2,4
 10461  0004D0  51AE               	movf	f_write@fp& (0+255),w,b
 10462  0004D2  26D9               	addwf	fsr2l,f,c
 10463  0004D4  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10464  0004D6  22DA               	addwfc	fsr2h,f,c
 10465  0004D8  EE10 F01F          	lfsr	1,31
 10466  0004DC  50DE               	movf	postinc2,w,c
 10467  0004DE  26E1               	addwf	fsr1l,f,c
 10468  0004E0  50DD               	movf	postdec2,w,c
 10469  0004E2  22E2               	addwfc	fsr1h,f,c
 10470  0004E4  0E01               	movlw	1
 10471  0004E6  6EE7               	movwf	indf1,c
 10472  0004E8                     l12237:
 10473                           
 10474                           ; BSR set to: 0
 10475  0004E8  51CA               	movf	f_write@wcnt& (0+255),w,b
 10476  0004EA  27C1               	addwf	f_write@wbuff& (0+255),f,b
 10477                           
 10478                           ; BSR set to: 0
 10479  0004EC  EE20 F006          	lfsr	2,6
 10480  0004F0  51AE               	movf	f_write@fp& (0+255),w,b
 10481  0004F2  26D9               	addwf	fsr2l,f,c
 10482  0004F4  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10483  0004F6  22DA               	addwfc	fsr2h,f,c
 10484  0004F8  51CA               	movf	f_write@wcnt& (0+255),w,b
 10485  0004FA  26DE               	addwf	postinc2,f,c
 10486  0004FC  51CB               	movf	(f_write@wcnt+1)& (0+255),w,b
 10487  0004FE  22DE               	addwfc	postinc2,f,c
 10488  000500  0E00               	movlw	0
 10489  000502  22DE               	addwfc	postinc2,f,c
 10490  000504  22DE               	addwfc	postinc2,f,c
 10491                           
 10492                           ; BSR set to: 0
 10493  000506  51B3               	movf	f_write@bw& (0+255),w,b
 10494  000508  6ED9               	movwf	fsr2l,c
 10495  00050A  6ADA               	clrf	fsr2h,c
 10496  00050C  51CA               	movf	f_write@wcnt& (0+255),w,b
 10497  00050E  26DE               	addwf	postinc2,f,c
 10498  000510  51CB               	movf	(f_write@wcnt+1)& (0+255),w,b
 10499  000512  22DD               	addwfc	postdec2,f,c
 10500                           
 10501                           ; BSR set to: 0
 10502  000514  51CA               	movf	f_write@wcnt& (0+255),w,b
 10503  000516  5FB1               	subwf	f_write@btw& (0+255),f,b
 10504  000518  51CB               	movf	(f_write@wcnt+1)& (0+255),w,b
 10505  00051A  5BB2               	subwfb	(f_write@btw+1)& (0+255),f,b
 10506  00051C                     l12245:
 10507                           
 10508                           ; BSR set to: 0
 10509  00051C  51B1               	movf	f_write@btw& (0+255),w,b
 10510  00051E  11B2               	iorwf	(f_write@btw+1)& (0+255),w,b
 10511  000520  A4D8               	btfss	status,2,c
 10512  000522  D5D4               	goto	l12169
 10513  000524                     u12990:
 10514                           
 10515                           ; BSR set to: 0
 10516                           ;tff.c: 1059: };tff.c: 1061: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
 10517  000524  EE20 F006          	lfsr	2,6
 10518  000528  51AE               	movf	f_write@fp& (0+255),w,b
 10519  00052A  26D9               	addwf	fsr2l,f,c
 10520  00052C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10521  00052E  22DA               	addwfc	fsr2h,f,c
 10522  000530  EE10 F00A          	lfsr	1,10
 10523  000534  51AE               	movf	f_write@fp& (0+255),w,b
 10524  000536  26E1               	addwf	fsr1l,f,c
 10525  000538  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10526  00053A  22E2               	addwfc	fsr1h,f,c
 10527  00053C  50DE               	movf	postinc2,w,c
 10528  00053E  5CE6               	subwf	postinc1,w,c
 10529  000540  50DE               	movf	postinc2,w,c
 10530  000542  58E6               	subwfb	postinc1,w,c
 10531  000544  50DE               	movf	postinc2,w,c
 10532  000546  58E6               	subwfb	postinc1,w,c
 10533  000548  50DE               	movf	postinc2,w,c
 10534  00054A  58E6               	subwfb	postinc1,w,c
 10535  00054C  B0D8               	btfsc	status,0,c
 10536  00054E  D014               	goto	l12251
 10537                           
 10538                           ; BSR set to: 0
 10539  000550  EE20 F006          	lfsr	2,6
 10540  000554  51AE               	movf	f_write@fp& (0+255),w,b
 10541  000556  26D9               	addwf	fsr2l,f,c
 10542  000558  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10543  00055A  22DA               	addwfc	fsr2h,f,c
 10544  00055C  EE10 F00A          	lfsr	1,10
 10545  000560  51AE               	movf	f_write@fp& (0+255),w,b
 10546  000562  26E1               	addwf	fsr1l,f,c
 10547  000564  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10548  000566  22E2               	addwfc	fsr1h,f,c
 10549  000568  CFDE FFE6          	movff	postinc2,postinc1
 10550  00056C  CFDE FFE6          	movff	postinc2,postinc1
 10551  000570  CFDE FFE6          	movff	postinc2,postinc1
 10552  000574  CFDE FFE6          	movff	postinc2,postinc1
 10553  000578                     l12251:
 10554                           
 10555                           ; BSR set to: 0
 10556                           ;tff.c: 1062: fp->flag |= 0x20;
 10557  000578  EE20 F002          	lfsr	2,2
 10558  00057C  51AE               	movf	f_write@fp& (0+255),w,b
 10559  00057E  26D9               	addwf	fsr2l,f,c
 10560  000580  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10561  000582  22DA               	addwfc	fsr2h,f,c
 10562  000584  0E00               	movlw	0
 10563  000586  8ADB               	bsf	plusw2,5,c
 10564  000588  0012               	return	
 10565  00058A                     l12255:
 10566                           
 10567                           ; BSR set to: 0
 10568                           ;tff.c: 1066: fp->flag |= 0x80;
 10569  00058A  EE20 F002          	lfsr	2,2
 10570  00058E  51AE               	movf	f_write@fp& (0+255),w,b
 10571  000590  26D9               	addwf	fsr2l,f,c
 10572  000592  51AF               	movf	(f_write@fp+1)& (0+255),w,b
 10573  000594  22DA               	addwfc	fsr2h,f,c
 10574  000596  0E00               	movlw	0
 10575  000598  8EDB               	bsf	plusw2,7,c
 10576                           
 10577                           ; BSR set to: 0
 10578  00059A  0012               	return		;funcret
 10579  00059C                     __end_of_f_write:
 10580                           	callstack 0
 10581                           
 10582 ;; *************** function ___llmod *****************
 10583 ;; Defined at:
 10584 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\llmod.c"
 10585 ;; Parameters:    Size  Location     Type
 10586 ;;  dividend        4   24[COMRAM] unsigned long 
 10587 ;;  divisor         4   28[COMRAM] unsigned long 
 10588 ;; Auto vars:     Size  Location     Type
 10589 ;;  counter         1   32[COMRAM] unsigned char 
 10590 ;; Return value:  Size  Location     Type
 10591 ;;                  4   24[COMRAM] unsigned long 
 10592 ;; Registers used:
 10593 ;;		wreg, status,2, status,0
 10594 ;; Tracked objects:
 10595 ;;		On entry : 3F/2
 10596 ;;		On exit  : 3F/2
 10597 ;;		Unchanged: 3F/0
 10598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10599 ;;      Params:         8       0       0       0       0       0       0       0       0
 10600 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10601 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10602 ;;      Totals:         9       0       0       0       0       0       0       0       0
 10603 ;;Total ram usage:        9 bytes
 10604 ;; Hardware stack levels used:    1
 10605 ;; Hardware stack levels required when called:    3
 10606 ;; This function calls:
 10607 ;;		Nothing
 10608 ;; This function is called by:
 10609 ;;		_fprintf
 10610 ;; This function uses a non-reentrant model
 10611 ;;
 10612                           
 10613                           	psect	text59
 10614  00506E                     __ptext59:
 10615                           	callstack 0
 10616  00506E                     ___llmod:
 10617                           	callstack 23
 10618                           
 10619                           ; BSR set to: 2
 10620                           
 10621                           ; BSR set to: 0
 10622                           ;incstack = 0
 10623  00506E  501D               	movf	___llmod@divisor^0,w,c
 10624  005070  101E               	iorwf	(___llmod@divisor+1)^0,w,c
 10625  005072  101F               	iorwf	(___llmod@divisor+2)^0,w,c
 10626  005074  1020               	iorwf	(___llmod@divisor+3)^0,w,c
 10627  005076  B4D8               	btfsc	status,2,c
 10628  005078  D024               	goto	l2432
 10629                           
 10630                           ; BSR set to: 2
 10631  00507A  0E01               	movlw	1
 10632  00507C  6E21               	movwf	___llmod@counter^0,c
 10633  00507E  D006               	goto	l13225
 10634  005080                     l13223:
 10635                           
 10636                           ; BSR set to: 2
 10637  005080  90D8               	bcf	status,0,c
 10638  005082  361D               	rlcf	___llmod@divisor^0,f,c
 10639  005084  361E               	rlcf	(___llmod@divisor+1)^0,f,c
 10640  005086  361F               	rlcf	(___llmod@divisor+2)^0,f,c
 10641  005088  3620               	rlcf	(___llmod@divisor+3)^0,f,c
 10642  00508A  2A21               	incf	___llmod@counter^0,f,c
 10643  00508C                     l13225:
 10644                           
 10645                           ; BSR set to: 2
 10646  00508C  AE20               	btfss	(___llmod@divisor+3)^0,7,c
 10647  00508E  D7F8               	goto	l13223
 10648  005090                     u14180:
 10649                           
 10650                           ; BSR set to: 2
 10651  005090  501D               	movf	___llmod@divisor^0,w,c
 10652  005092  5C19               	subwf	___llmod@dividend^0,w,c
 10653  005094  501E               	movf	(___llmod@divisor+1)^0,w,c
 10654  005096  581A               	subwfb	(___llmod@dividend+1)^0,w,c
 10655  005098  501F               	movf	(___llmod@divisor+2)^0,w,c
 10656  00509A  581B               	subwfb	(___llmod@dividend+2)^0,w,c
 10657  00509C  5020               	movf	(___llmod@divisor+3)^0,w,c
 10658  00509E  581C               	subwfb	(___llmod@dividend+3)^0,w,c
 10659  0050A0  A0D8               	btfss	status,0,c
 10660  0050A2  D008               	goto	l13231
 10661                           
 10662                           ; BSR set to: 2
 10663  0050A4  501D               	movf	___llmod@divisor^0,w,c
 10664  0050A6  5E19               	subwf	___llmod@dividend^0,f,c
 10665  0050A8  501E               	movf	(___llmod@divisor+1)^0,w,c
 10666  0050AA  5A1A               	subwfb	(___llmod@dividend+1)^0,f,c
 10667  0050AC  501F               	movf	(___llmod@divisor+2)^0,w,c
 10668  0050AE  5A1B               	subwfb	(___llmod@dividend+2)^0,f,c
 10669  0050B0  5020               	movf	(___llmod@divisor+3)^0,w,c
 10670  0050B2  5A1C               	subwfb	(___llmod@dividend+3)^0,f,c
 10671  0050B4                     l13231:
 10672                           
 10673                           ; BSR set to: 2
 10674  0050B4  90D8               	bcf	status,0,c
 10675  0050B6  3220               	rrcf	(___llmod@divisor+3)^0,f,c
 10676  0050B8  321F               	rrcf	(___llmod@divisor+2)^0,f,c
 10677  0050BA  321E               	rrcf	(___llmod@divisor+1)^0,f,c
 10678  0050BC  321D               	rrcf	___llmod@divisor^0,f,c
 10679                           
 10680                           ; BSR set to: 2
 10681  0050BE  2E21               	decfsz	___llmod@counter^0,f,c
 10682  0050C0  D7E7               	goto	u14180
 10683  0050C2                     l2432:
 10684                           
 10685                           ; BSR set to: 2
 10686  0050C2  C019  F019         	movff	___llmod@dividend,?___llmod
 10687  0050C6  C01A  F01A         	movff	___llmod@dividend+1,?___llmod+1
 10688  0050CA  C01B  F01B         	movff	___llmod@dividend+2,?___llmod+2
 10689  0050CE  C01C  F01C         	movff	___llmod@dividend+3,?___llmod+3
 10690                           
 10691                           ; BSR set to: 2
 10692  0050D2  0012               	return		;funcret
 10693  0050D4                     __end_of___llmod:
 10694                           	callstack 0
 10695                           
 10696 ;; *************** function _f_open *****************
 10697 ;; Defined at:
 10698 ;;		line 833 in file "bibliotecas/tff.c"
 10699 ;; Parameters:    Size  Location     Type
 10700 ;;  fp              2   96[BANK0 ] PTR struct _FIL
 10701 ;;		 -> fil(28), 
 10702 ;;  path            2   98[BANK0 ] PTR const unsigned char 
 10703 ;;		 -> STR_20(13), filename(20), 
 10704 ;;  mode            1  100[BANK0 ] unsigned char 
 10705 ;; Auto vars:     Size  Location     Type
 10706 ;;  dw              4  119[BANK0 ] unsigned long 
 10707 ;;  rs              2  117[BANK0 ] unsigned short 
 10708 ;;  dj             14  126[BANK0 ] struct _DIR_E
 10709 ;;  fn             12  105[BANK0 ] unsigned char [12]
 10710 ;;  dir             2  124[BANK0 ] PTR unsigned char 
 10711 ;;		 -> NULL(0), fs(544), 
 10712 ;;  res             1  123[BANK0 ] enum E155
 10713 ;; Return value:  Size  Location     Type
 10714 ;;                  1    wreg      enum E3239
 10715 ;; Registers used:
 10716 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10717 ;; Tracked objects:
 10718 ;;		On entry : 3F/0
 10719 ;;		On exit  : 3F/0
 10720 ;;		Unchanged: 0/0
 10721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10722 ;;      Params:         0       5       0       0       0       0       0       0       0
 10723 ;;      Locals:         0      35       0       0       0       0       0       0       0
 10724 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10725 ;;      Totals:         0      44       0       0       0       0       0       0       0
 10726 ;;Total ram usage:       44 bytes
 10727 ;; Hardware stack levels used:    1
 10728 ;; Hardware stack levels required when called:   12
 10729 ;; This function calls:
 10730 ;;		_auto_mount
 10731 ;;		_get_fattime
 10732 ;;		_memcpy
 10733 ;;		_memset
 10734 ;;		_move_window
 10735 ;;		_remove_chain
 10736 ;;		_reserve_direntry
 10737 ;;		_trace_path
 10738 ;; This function is called by:
 10739 ;;		_escrita_sdcard
 10740 ;; This function uses a non-reentrant model
 10741 ;;
 10742                           
 10743                           	psect	text60
 10744  0012EC                     __ptext60:
 10745                           	callstack 0
 10746  0012EC                     _f_open:
 10747                           	callstack 15
 10748                           
 10749                           ; BSR set to: 0
 10750                           ;tff.c: 839: FRESULT res;;tff.c: 840: DIR_E dj;;tff.c: 841: BYTE *dir;;tff.c: 842: char 
      +                          fn[8+3+1];;tff.c: 845: fp->fs = (0);
 10751                           
 10752                           ; BSR set to: 2
 10753                           ;incstack = 0
 10754  0012EC  EE20 F004          	lfsr	2,4
 10755  0012F0  51C0               	movf	f_open@fp& (0+255),w,b
 10756  0012F2  26D9               	addwf	fsr2l,f,c
 10757  0012F4  51C1               	movf	(f_open@fp+1)& (0+255),w,b
 10758  0012F6  22DA               	addwfc	fsr2h,f,c
 10759  0012F8  0E00               	movlw	0
 10760  0012FA  6EDE               	movwf	postinc2,c
 10761  0012FC  0E00               	movlw	0
 10762  0012FE  6EDD               	movwf	postdec2,c
 10763                           
 10764                           ; BSR set to: 0
 10765                           ;tff.c: 847: mode &= (0x01|0x02|0x08|0x10|0x04);
 10766  001300  0E1F               	movlw	31
 10767  001302  17C4               	andwf	f_open@mode& (0+255),f,b
 10768                           
 10769                           ; BSR set to: 0
 10770                           ;tff.c: 848: res = auto_mount(&path, (BYTE)(mode & (0x02|0x08|0x10|0x04)));
 10771  001304  0EC2               	movlw	low f_open@path
 10772  001306  6F7B               	movwf	auto_mount@path& (0+255),b
 10773  001308  51C4               	movf	f_open@mode& (0+255),w,b
 10774  00130A  0B1E               	andlw	30
 10775  00130C  6F7C               	movwf	auto_mount@chk_wp& (0+255),b
 10776  00130E  ECCE  F002         	call	_auto_mount	;wreg free
 10777  001312  0100               	movlb	0	; () banked
 10778  001314  6FDB               	movwf	f_open@res& (0+255),b
 10779                           
 10780                           ; BSR set to: 0
 10781                           ;tff.c: 853: if (res != FR_OK) return res;
 10782  001316  51DB               	movf	f_open@res& (0+255),w,b
 10783  001318  B4D8               	btfsc	status,2,c
 10784  00131A  D002               	goto	l13293
 10785  00131C                     u14240:
 10786                           
 10787                           ; BSR set to: 0
 10788  00131C  51DB               	movf	f_open@res& (0+255),w,b
 10789  00131E  0012               	return	
 10790  001320                     l13293:
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;tff.c: 854: res = trace_path(&dj, fn, path, &dir);
 10794  001320  0EDE               	movlw	low f_open@dj
 10795  001322  6FA8               	movwf	trace_path@dj& (0+255),b
 10796  001324  0EC9               	movlw	low f_open@fn
 10797  001326  6FA9               	movwf	trace_path@fn& (0+255),b
 10798  001328  C0C2  F0AA         	movff	f_open@path,trace_path@path
 10799  00132C  C0C3  F0AB         	movff	f_open@path+1,trace_path@path+1
 10800  001330  0EDC               	movlw	low f_open@dir
 10801  001332  6FAC               	movwf	trace_path@dir& (0+255),b
 10802  001334  ECEC  F00D         	call	_trace_path	;wreg free
 10803  001338  6FDB               	movwf	f_open@res& (0+255),b
 10804                           
 10805                           ; BSR set to: 0
 10806                           ;tff.c: 858: if (mode & (0x08|0x10|0x04)) {
 10807  00133A  C0C4  F0C5         	movff	f_open@mode,??_f_open
 10808  00133E  0E1C               	movlw	28
 10809  001340  17C5               	andwf	??_f_open& (0+255),f,b
 10810  001342  B4D8               	btfsc	status,2,c
 10811  001344  D0DD               	goto	l13355
 10812                           
 10813                           ; BSR set to: 0
 10814                           ;tff.c: 859: CLUST rs;;tff.c: 860: DWORD dw;;tff.c: 861: if (res != FR_OK) {
 10815  001346  51DB               	movf	f_open@res& (0+255),w,b
 10816  001348  B4D8               	btfsc	status,2,c
 10817  00134A  D034               	goto	l980
 10818                           
 10819                           ; BSR set to: 0
 10820                           ;tff.c: 862: if (res != FR_NO_FILE) return res;
 10821  00134C  0E02               	movlw	2
 10822  00134E  19DB               	xorwf	f_open@res& (0+255),w,b
 10823  001350  A4D8               	btfss	status,2,c
 10824  001352  D7E4               	goto	u14240
 10825                           
 10826                           ; BSR set to: 0
 10827                           ;tff.c: 863: res = reserve_direntry(&dj, &dir);
 10828  001354  0EDE               	movlw	low f_open@dj
 10829  001356  6FAE               	movwf	reserve_direntry@dj& (0+255),b
 10830  001358  0EDC               	movlw	low f_open@dir
 10831  00135A  6FAF               	movwf	reserve_direntry@dir& (0+255),b
 10832  00135C  EC28  F00F         	call	_reserve_direntry	;wreg free
 10833  001360  6FDB               	movwf	f_open@res& (0+255),b
 10834                           
 10835                           ; BSR set to: 0
 10836                           ;tff.c: 864: if (res != FR_OK) return res;
 10837  001362  51DB               	movf	f_open@res& (0+255),w,b
 10838  001364  A4D8               	btfss	status,2,c
 10839  001366  D7DA               	goto	u14240
 10840                           
 10841                           ; BSR set to: 0
 10842                           ;tff.c: 865: memset(dir, 0, 32);
 10843  001368  C0DC  F019         	movff	f_open@dir,memset@p1
 10844  00136C  C0DD  F01A         	movff	f_open@dir+1,memset@p1+1
 10845  001370  0E00               	movlw	0
 10846  001372  6E1C               	movwf	(memset@c+1)^0,c
 10847  001374  0E00               	movlw	0
 10848  001376  6E1B               	movwf	memset@c^0,c
 10849  001378  0E00               	movlw	0
 10850  00137A  6E1E               	movwf	(memset@n+1)^0,c
 10851  00137C  0E20               	movlw	32
 10852  00137E  6E1D               	movwf	memset@n^0,c
 10853  001380  ECBF  F02C         	call	_memset	;wreg free
 10854                           
 10855                           ;tff.c: 866: memcpy(&dir[0], fn, 8+3);
 10856  001384  C0DC  F019         	movff	f_open@dir,memcpy@d1
 10857  001388  C0DD  F01A         	movff	f_open@dir+1,memcpy@d1+1
 10858  00138C  0EC9               	movlw	low f_open@fn
 10859  00138E  6E1B               	movwf	memcpy@s1^0,c
 10860  001390  6A1C               	clrf	(memcpy@s1+1)^0,c
 10861  001392  0E00               	movlw	0
 10862  001394  6E1E               	movwf	(memcpy@n+1)^0,c
 10863  001396  0E0B               	movlw	11
 10864  001398  6E1D               	movwf	memcpy@n^0,c
 10865  00139A  EC68  F02B         	call	_memcpy	;wreg free
 10866                           
 10867                           ;tff.c: 867: dir[12] = fn[11];
 10868  00139E  0100               	movlb	0	; () banked
 10869  0013A0  EE20 F00C          	lfsr	2,12
 10870  0013A4  51DC               	movf	f_open@dir& (0+255),w,b
 10871  0013A6  26D9               	addwf	fsr2l,f,c
 10872  0013A8  51DD               	movf	(f_open@dir+1)& (0+255),w,b
 10873  0013AA  22DA               	addwfc	fsr2h,f,c
 10874  0013AC  C0D4  FFDF         	movff	f_open@fn+11,indf2
 10875                           
 10876                           ; BSR set to: 0
 10877                           ;tff.c: 868: mode |= 0x08;
 10878  0013B0  87C4               	bsf	f_open@mode& (0+255),3,b
 10879                           
 10880                           ;tff.c: 869: }
 10881  0013B2  D07A               	goto	l13343
 10882  0013B4                     l980:
 10883                           
 10884                           ; BSR set to: 0
 10885                           ;tff.c: 870: else {;tff.c: 871: if (mode & 0x04)
 10886  0013B4  A5C4               	btfss	f_open@mode& (0+255),2,b
 10887  0013B6  D002               	goto	l13323
 10888                           
 10889                           ; BSR set to: 0
 10890                           ;tff.c: 872: return FR_EXIST;
 10891  0013B8  0E07               	movlw	7
 10892  0013BA  0012               	return	
 10893  0013BC                     l13323:
 10894                           
 10895                           ; BSR set to: 0
 10896                           ;tff.c: 873: if (!dir || (dir[11] & (0x01|0x10)))
 10897  0013BC  51DC               	movf	f_open@dir& (0+255),w,b
 10898  0013BE  11DD               	iorwf	(f_open@dir+1)& (0+255),w,b
 10899  0013C0  B4D8               	btfsc	status,2,c
 10900  0013C2  D00C               	goto	u14310
 10901                           
 10902                           ; BSR set to: 0
 10903  0013C4  EE20 F00B          	lfsr	2,11
 10904  0013C8  51DC               	movf	f_open@dir& (0+255),w,b
 10905  0013CA  26D9               	addwf	fsr2l,f,c
 10906  0013CC  51DD               	movf	(f_open@dir+1)& (0+255),w,b
 10907  0013CE  22DA               	addwfc	fsr2h,f,c
 10908  0013D0  50DF               	movf	indf2,w,c
 10909  0013D2  6FC5               	movwf	??_f_open& (0+255),b
 10910  0013D4  0E11               	movlw	17
 10911  0013D6  17C5               	andwf	??_f_open& (0+255),f,b
 10912  0013D8  B4D8               	btfsc	status,2,c
 10913  0013DA  D002               	goto	l985
 10914  0013DC                     u14310:
 10915                           
 10916                           ; BSR set to: 0
 10917                           ;tff.c: 874: return FR_DENIED;
 10918  0013DC  0E06               	movlw	6
 10919  0013DE  0012               	return	
 10920  0013E0                     l985:
 10921                           
 10922                           ; BSR set to: 0
 10923                           ;tff.c: 875: if (mode & 0x08) {
 10924  0013E0  A7C4               	btfss	f_open@mode& (0+255),3,b
 10925  0013E2  D062               	goto	l13343
 10926                           
 10927                           ; BSR set to: 0
 10928                           ;tff.c: 880: rs = (WORD)(*(WORD*)(BYTE*)(&dir[26]));
 10929  0013E4  EE20 F01A          	lfsr	2,26
 10930  0013E8  51DC               	movf	f_open@dir& (0+255),w,b
 10931  0013EA  26D9               	addwf	fsr2l,f,c
 10932  0013EC  51DD               	movf	(f_open@dir+1)& (0+255),w,b
 10933  0013EE  22DA               	addwfc	fsr2h,f,c
 10934  0013F0  CFDE F0D5          	movff	postinc2,f_open@rs
 10935  0013F4  CFDD F0D6          	movff	postdec2,f_open@rs+1
 10936                           
 10937                           ;tff.c: 882: *(WORD*)(BYTE*)(&dir[26])=(WORD)(0);
 10938  0013F8  EE20 F01A          	lfsr	2,26
 10939  0013FC  51DC               	movf	f_open@dir& (0+255),w,b
 10940  0013FE  26D9               	addwf	fsr2l,f,c
 10941  001400  51DD               	movf	(f_open@dir+1)& (0+255),w,b
 10942  001402  22DA               	addwfc	fsr2h,f,c
 10943  001404  0E00               	movlw	0
 10944  001406  6EDE               	movwf	postinc2,c
 10945  001408  0E00               	movlw	0
 10946  00140A  6EDD               	movwf	postdec2,c
 10947                           
 10948                           ;tff.c: 883: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(0);
 10949  00140C  EE20 F01C          	lfsr	2,28
 10950  001410  51DC               	movf	f_open@dir& (0+255),w,b
 10951  001412  26D9               	addwf	fsr2l,f,c
 10952  001414  51DD               	movf	(f_open@dir+1)& (0+255),w,b
 10953  001416  22DA               	addwfc	fsr2h,f,c
 10954  001418  6ADE               	clrf	postinc2,c
 10955  00141A  6ADE               	clrf	postinc2,c
 10956  00141C  6ADE               	clrf	postinc2,c
 10957  00141E  6ADD               	clrf	postdec2,c
 10958                           
 10959                           ;tff.c: 884: dj.fs->winflag = 1;
 10960  001420  EE20 F01F          	lfsr	2,31
 10961  001424  51E2               	movf	(f_open@dj+4)& (0+255),w,b
 10962  001426  26D9               	addwf	fsr2l,f,c
 10963  001428  51E3               	movf	(f_open@dj+5)& (0+255),w,b
 10964  00142A  22DA               	addwfc	fsr2h,f,c
 10965  00142C  0E01               	movlw	1
 10966  00142E  6EDF               	movwf	indf2,c
 10967                           
 10968                           ;tff.c: 885: dw = dj.fs->winsect;
 10969  001430  EE20 F004          	lfsr	2,4
 10970  001434  51E2               	movf	(f_open@dj+4)& (0+255),w,b
 10971  001436  26D9               	addwf	fsr2l,f,c
 10972  001438  51E3               	movf	(f_open@dj+5)& (0+255),w,b
 10973  00143A  22DA               	addwfc	fsr2h,f,c
 10974  00143C  CFDE F0D7          	movff	postinc2,f_open@dw
 10975  001440  CFDE F0D8          	movff	postinc2,f_open@dw+1
 10976  001444  CFDE F0D9          	movff	postinc2,f_open@dw+2
 10977  001448  CFDE F0DA          	movff	postinc2,f_open@dw+3
 10978                           
 10979                           ; BSR set to: 0
 10980                           ;tff.c: 886: if (!remove_chain(rs) || !move_window(dw))
 10981  00144C  C0D5  F0A0         	movff	f_open@rs,remove_chain@clust
 10982  001450  C0D6  F0A1         	movff	f_open@rs+1,remove_chain@clust+1
 10983  001454  EC8D  F024         	call	_remove_chain	;wreg free
 10984  001458  0900               	iorlw	0
 10985  00145A  B4D8               	btfsc	status,2,c
 10986  00145C  D00D               	goto	u14340
 10987                           
 10988                           ; BSR set to: 0
 10989  00145E  C0D7  F073         	movff	f_open@dw,move_window@sector
 10990  001462  C0D8  F074         	movff	f_open@dw+1,move_window@sector+1
 10991  001466  C0D9  F075         	movff	f_open@dw+2,move_window@sector+2
 10992  00146A  C0DA  F076         	movff	f_open@dw+3,move_window@sector+3
 10993  00146E  EC58  F018         	call	_move_window	;wreg free
 10994  001472  0900               	iorlw	0
 10995  001474  A4D8               	btfss	status,2,c
 10996  001476  D002               	goto	l13341
 10997  001478                     u14340:
 10998                           
 10999                           ; BSR set to: 0
 11000                           ;tff.c: 887: return FR_RW_ERROR;
 11001  001478  0E08               	movlw	8
 11002  00147A  0012               	return	
 11003  00147C                     l13341:
 11004                           
 11005                           ; BSR set to: 0
 11006                           ;tff.c: 888: dj.fs->last_clust = rs - 1;
 11007  00147C  0EFF               	movlw	255
 11008  00147E  6FC5               	movwf	??_f_open& (0+255),b
 11009  001480  0EFF               	movlw	255
 11010  001482  6FC6               	movwf	(??_f_open+1)& (0+255),b
 11011  001484  C0D5  F0C7         	movff	f_open@rs,??_f_open+2
 11012  001488  C0D6  F0C8         	movff	f_open@rs+1,??_f_open+3
 11013  00148C  51C5               	movf	??_f_open& (0+255),w,b
 11014  00148E  27C7               	addwf	(??_f_open+2)& (0+255),f,b
 11015  001490  51C6               	movf	(??_f_open+1)& (0+255),w,b
 11016  001492  23C8               	addwfc	(??_f_open+3)& (0+255),f,b
 11017  001494  EE20 F018          	lfsr	2,24
 11018  001498  51E2               	movf	(f_open@dj+4)& (0+255),w,b
 11019  00149A  26D9               	addwf	fsr2l,f,c
 11020  00149C  51E3               	movf	(f_open@dj+5)& (0+255),w,b
 11021  00149E  22DA               	addwfc	fsr2h,f,c
 11022  0014A0  C0C7  FFDE         	movff	??_f_open+2,postinc2
 11023  0014A4  C0C8  FFDD         	movff	??_f_open+3,postdec2
 11024  0014A8                     l13343:
 11025                           
 11026                           ; BSR set to: 0
 11027                           ;tff.c: 889: };tff.c: 890: };tff.c: 891: if (mode & 0x08) {
 11028  0014A8  A7C4               	btfss	f_open@mode& (0+255),3,b
 11029  0014AA  D045               	goto	l13375
 11030                           
 11031                           ; BSR set to: 0
 11032                           ;tff.c: 892: dir[11] = 0;
 11033  0014AC  EE20 F00B          	lfsr	2,11
 11034  0014B0  51DC               	movf	f_open@dir& (0+255),w,b
 11035  0014B2  26D9               	addwf	fsr2l,f,c
 11036  0014B4  51DD               	movf	(f_open@dir+1)& (0+255),w,b
 11037  0014B6  22DA               	addwfc	fsr2h,f,c
 11038  0014B8  0E00               	movlw	0
 11039  0014BA  6EDF               	movwf	indf2,c
 11040                           
 11041                           ; BSR set to: 0
 11042                           ;tff.c: 893: dw = get_fattime();
 11043  0014BC  EC21  F01C         	call	_get_fattime	;wreg free
 11044  0014C0  C01D  F0D7         	movff	?_get_fattime,f_open@dw
 11045  0014C4  C01E  F0D8         	movff	?_get_fattime+1,f_open@dw+1
 11046  0014C8  C01F  F0D9         	movff	?_get_fattime+2,f_open@dw+2
 11047  0014CC  C020  F0DA         	movff	?_get_fattime+3,f_open@dw+3
 11048                           
 11049                           ; BSR set to: 0
 11050                           ;tff.c: 894: *(DWORD*)(BYTE*)(&dir[14])=(DWORD)(dw);
 11051  0014D0  EE20 F00E          	lfsr	2,14
 11052  0014D4  51DC               	movf	f_open@dir& (0+255),w,b
 11053  0014D6  26D9               	addwf	fsr2l,f,c
 11054  0014D8  51DD               	movf	(f_open@dir+1)& (0+255),w,b
 11055  0014DA  22DA               	addwfc	fsr2h,f,c
 11056  0014DC  C0D7  FFDE         	movff	f_open@dw,postinc2
 11057  0014E0  C0D8  FFDE         	movff	f_open@dw+1,postinc2
 11058  0014E4  C0D9  FFDE         	movff	f_open@dw+2,postinc2
 11059  0014E8  C0DA  FFDE         	movff	f_open@dw+3,postinc2
 11060                           
 11061                           ; BSR set to: 0
 11062                           ;tff.c: 895: dj.fs->winflag = 1;
 11063  0014EC  EE20 F01F          	lfsr	2,31
 11064  0014F0  51E2               	movf	(f_open@dj+4)& (0+255),w,b
 11065  0014F2  26D9               	addwf	fsr2l,f,c
 11066  0014F4  51E3               	movf	(f_open@dj+5)& (0+255),w,b
 11067  0014F6  22DA               	addwfc	fsr2h,f,c
 11068  0014F8  0E01               	movlw	1
 11069  0014FA  6EDF               	movwf	indf2,c
 11070                           
 11071                           ; BSR set to: 0
 11072                           ;tff.c: 896: mode |= 0x20;
 11073  0014FC  8BC4               	bsf	f_open@mode& (0+255),5,b
 11074  0014FE  D01B               	goto	l13375
 11075  001500                     l13355:
 11076                           
 11077                           ; BSR set to: 0
 11078                           ;tff.c: 900: else {;tff.c: 902: if (res != FR_OK) return res;
 11079  001500  51DB               	movf	f_open@res& (0+255),w,b
 11080  001502  A4D8               	btfss	status,2,c
 11081  001504  D70B               	goto	u14240
 11082                           
 11083                           ; BSR set to: 0
 11084                           ;tff.c: 903: if (!dir || (dir[11] & 0x10))
 11085  001506  51DC               	movf	f_open@dir& (0+255),w,b
 11086  001508  11DD               	iorwf	(f_open@dir+1)& (0+255),w,b
 11087  00150A  B4D8               	btfsc	status,2,c
 11088  00150C  D008               	goto	u14380
 11089                           
 11090                           ; BSR set to: 0
 11091  00150E  EE20 F00B          	lfsr	2,11
 11092  001512  51DC               	movf	f_open@dir& (0+255),w,b
 11093  001514  26D9               	addwf	fsr2l,f,c
 11094  001516  51DD               	movf	(f_open@dir+1)& (0+255),w,b
 11095  001518  22DA               	addwfc	fsr2h,f,c
 11096  00151A  A8DF               	btfss	indf2,4,c
 11097  00151C  D002               	goto	l995
 11098  00151E                     u14380:
 11099                           
 11100                           ; BSR set to: 0
 11101                           ;tff.c: 904: return FR_NO_FILE;
 11102  00151E  0E02               	movlw	2
 11103  001520  0012               	return	
 11104  001522                     l995:
 11105                           
 11106                           ; BSR set to: 0
 11107                           ;tff.c: 906: if ((mode & 0x02) && (dir[11] & 0x01))
 11108  001522  A3C4               	btfss	f_open@mode& (0+255),1,b
 11109  001524  D008               	goto	l13375
 11110                           
 11111                           ; BSR set to: 0
 11112  001526  EE20 F00B          	lfsr	2,11
 11113  00152A  51DC               	movf	f_open@dir& (0+255),w,b
 11114  00152C  26D9               	addwf	fsr2l,f,c
 11115  00152E  51DD               	movf	(f_open@dir+1)& (0+255),w,b
 11116  001530  22DA               	addwfc	fsr2h,f,c
 11117  001532  B0DF               	btfsc	indf2,0,c
 11118  001534  D753               	goto	u14310
 11119  001536                     l13375:
 11120                           
 11121                           ; BSR set to: 0
 11122                           ;tff.c: 908: };tff.c: 909: fp->dir_sect = dj.fs->winsect;
 11123  001536  EE20 F004          	lfsr	2,4
 11124  00153A  51E2               	movf	(f_open@dj+4)& (0+255),w,b
 11125  00153C  26D9               	addwf	fsr2l,f,c
 11126  00153E  51E3               	movf	(f_open@dj+5)& (0+255),w,b
 11127  001540  22DA               	addwfc	fsr2h,f,c
 11128  001542  EE10 F016          	lfsr	1,22
 11129  001546  51C0               	movf	f_open@fp& (0+255),w,b
 11130  001548  26E1               	addwf	fsr1l,f,c
 11131  00154A  51C1               	movf	(f_open@fp+1)& (0+255),w,b
 11132  00154C  22E2               	addwfc	fsr1h,f,c
 11133  00154E  CFDE FFE6          	movff	postinc2,postinc1
 11134  001552  CFDE FFE6          	movff	postinc2,postinc1
 11135  001556  CFDE FFE6          	movff	postinc2,postinc1
 11136  00155A  CFDE FFE6          	movff	postinc2,postinc1
 11137                           
 11138                           ; BSR set to: 0
 11139                           ;tff.c: 910: fp->dir_ptr = dir;
 11140  00155E  EE20 F01A          	lfsr	2,26
 11141  001562  51C0               	movf	f_open@fp& (0+255),w,b
 11142  001564  26D9               	addwf	fsr2l,f,c
 11143  001566  51C1               	movf	(f_open@fp+1)& (0+255),w,b
 11144  001568  22DA               	addwfc	fsr2h,f,c
 11145  00156A  C0DC  FFDE         	movff	f_open@dir,postinc2
 11146  00156E  C0DD  FFDD         	movff	f_open@dir+1,postdec2
 11147                           
 11148                           ; BSR set to: 0
 11149                           ;tff.c: 912: fp->flag = mode;
 11150  001572  EE20 F002          	lfsr	2,2
 11151  001576  51C0               	movf	f_open@fp& (0+255),w,b
 11152  001578  26D9               	addwf	fsr2l,f,c
 11153  00157A  51C1               	movf	(f_open@fp+1)& (0+255),w,b
 11154  00157C  22DA               	addwfc	fsr2h,f,c
 11155  00157E  C0C4  FFDF         	movff	f_open@mode,indf2
 11156                           
 11157                           ;tff.c: 913: fp->org_clust =;tff.c: 917: (WORD)(*(WORD*)(BYTE*)(&dir[26]));
 11158  001582  EE20 F01A          	lfsr	2,26
 11159  001586  51DC               	movf	f_open@dir& (0+255),w,b
 11160  001588  26D9               	addwf	fsr2l,f,c
 11161  00158A  51DD               	movf	(f_open@dir+1)& (0+255),w,b
 11162  00158C  22DA               	addwfc	fsr2h,f,c
 11163  00158E  EE10 F00E          	lfsr	1,14
 11164  001592  51C0               	movf	f_open@fp& (0+255),w,b
 11165  001594  26E1               	addwf	fsr1l,f,c
 11166  001596  51C1               	movf	(f_open@fp+1)& (0+255),w,b
 11167  001598  22E2               	addwfc	fsr1h,f,c
 11168  00159A  CFDE FFE6          	movff	postinc2,postinc1
 11169  00159E  CFDD FFE5          	movff	postdec2,postdec1
 11170                           
 11171                           ;tff.c: 918: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(&dir[28]));
 11172  0015A2  EE20 F01C          	lfsr	2,28
 11173  0015A6  51DC               	movf	f_open@dir& (0+255),w,b
 11174  0015A8  26D9               	addwf	fsr2l,f,c
 11175  0015AA  51DD               	movf	(f_open@dir+1)& (0+255),w,b
 11176  0015AC  22DA               	addwfc	fsr2h,f,c
 11177  0015AE  EE10 F00A          	lfsr	1,10
 11178  0015B2  51C0               	movf	f_open@fp& (0+255),w,b
 11179  0015B4  26E1               	addwf	fsr1l,f,c
 11180  0015B6  51C1               	movf	(f_open@fp+1)& (0+255),w,b
 11181  0015B8  22E2               	addwfc	fsr1h,f,c
 11182  0015BA  CFDE FFE6          	movff	postinc2,postinc1
 11183  0015BE  CFDE FFE6          	movff	postinc2,postinc1
 11184  0015C2  CFDE FFE6          	movff	postinc2,postinc1
 11185  0015C6  CFDE FFE6          	movff	postinc2,postinc1
 11186                           
 11187                           ; BSR set to: 0
 11188                           ;tff.c: 919: fp->fptr = 0; fp->csect = 255;
 11189  0015CA  EE20 F006          	lfsr	2,6
 11190  0015CE  51C0               	movf	f_open@fp& (0+255),w,b
 11191  0015D0  26D9               	addwf	fsr2l,f,c
 11192  0015D2  51C1               	movf	(f_open@fp+1)& (0+255),w,b
 11193  0015D4  22DA               	addwfc	fsr2h,f,c
 11194  0015D6  6ADE               	clrf	postinc2,c
 11195  0015D8  6ADE               	clrf	postinc2,c
 11196  0015DA  6ADE               	clrf	postinc2,c
 11197  0015DC  6ADD               	clrf	postdec2,c
 11198                           
 11199                           ; BSR set to: 0
 11200  0015DE  EE20 F003          	lfsr	2,3
 11201  0015E2  51C0               	movf	f_open@fp& (0+255),w,b
 11202  0015E4  26D9               	addwf	fsr2l,f,c
 11203  0015E6  51C1               	movf	(f_open@fp+1)& (0+255),w,b
 11204  0015E8  22DA               	addwfc	fsr2h,f,c
 11205  0015EA  0EFF               	movlw	255
 11206  0015EC  6EDF               	movwf	indf2,c
 11207                           
 11208                           ; BSR set to: 0
 11209                           ;tff.c: 920: fp->fs = dj.fs; fp->id = dj.fs->id;
 11210  0015EE  EE20 F004          	lfsr	2,4
 11211  0015F2  51C0               	movf	f_open@fp& (0+255),w,b
 11212  0015F4  26D9               	addwf	fsr2l,f,c
 11213  0015F6  51C1               	movf	(f_open@fp+1)& (0+255),w,b
 11214  0015F8  22DA               	addwfc	fsr2h,f,c
 11215  0015FA  C0E2  FFDE         	movff	f_open@dj+4,postinc2
 11216  0015FE  C0E3  FFDD         	movff	f_open@dj+5,postdec2
 11217                           
 11218                           ; BSR set to: 0
 11219  001602  C0E2  FFD9         	movff	f_open@dj+4,fsr2l
 11220  001606  C0E3  FFDA         	movff	f_open@dj+5,fsr2h
 11221  00160A  C0C0  FFE1         	movff	f_open@fp,fsr1l
 11222  00160E  C0C1  FFE2         	movff	f_open@fp+1,fsr1h
 11223  001612  CFDE FFE6          	movff	postinc2,postinc1
 11224  001616  CFDD FFE5          	movff	postdec2,postdec1
 11225                           
 11226                           ; BSR set to: 0
 11227                           ;tff.c: 922: return FR_OK;
 11228  00161A  0E00               	movlw	0
 11229                           
 11230                           ; BSR set to: 0
 11231  00161C  0012               	return		;funcret
 11232  00161E                     __end_of_f_open:
 11233                           	callstack 0
 11234                           
 11235 ;; *************** function _trace_path *****************
 11236 ;; Defined at:
 11237 ;;		line 502 in file "bibliotecas/tff.c"
 11238 ;; Parameters:    Size  Location     Type
 11239 ;;  dj              1   72[BANK0 ] PTR struct _DIR_E
 11240 ;;		 -> f_open@dj(14), 
 11241 ;;  fn              1   73[BANK0 ] PTR unsigned char 
 11242 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
 11243 ;;  path            2   74[BANK0 ] PTR const unsigned char 
 11244 ;;		 -> STR_20(13), filename(20), 
 11245 ;;  dir             1   76[BANK0 ] PTR PTR unsigned char 
 11246 ;;		 -> f_opendir@dir(2), f_open@dir(2), 
 11247 ;; Auto vars:     Size  Location     Type
 11248 ;;  dptr            2   90[BANK0 ] PTR unsigned char 
 11249 ;;		 -> fs.win(512), NULL(0), fs(544), 
 11250 ;;  clust           2   87[BANK0 ] unsigned short 
 11251 ;;  fs              2   85[BANK0 ] PTR struct _FATFS
 11252 ;;		 -> NULL(0), fs(544), 
 11253 ;;  ds              1   89[BANK0 ] unsigned char 
 11254 ;; Return value:  Size  Location     Type
 11255 ;;                  1    wreg      enum E155
 11256 ;; Registers used:
 11257 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11258 ;; Tracked objects:
 11259 ;;		On entry : 3F/0
 11260 ;;		On exit  : 3F/0
 11261 ;;		Unchanged: 0/0
 11262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11263 ;;      Params:         0       5       0       0       0       0       0       0       0
 11264 ;;      Locals:         0      11       0       0       0       0       0       0       0
 11265 ;;      Temps:          0       4       0       0       0       0       0       0       0
 11266 ;;      Totals:         0      20       0       0       0       0       0       0       0
 11267 ;;Total ram usage:       20 bytes
 11268 ;; Hardware stack levels used:    1
 11269 ;; Hardware stack levels required when called:   11
 11270 ;; This function calls:
 11271 ;;		_clust2sect
 11272 ;;		_make_dirfile
 11273 ;;		_memcmp
 11274 ;;		_move_window
 11275 ;;		_next_dir_entry
 11276 ;; This function is called by:
 11277 ;;		_f_open
 11278 ;; This function uses a non-reentrant model
 11279 ;;
 11280                           
 11281                           	psect	text61
 11282  001BD8                     __ptext61:
 11283                           	callstack 0
 11284  001BD8                     _trace_path:
 11285                           	callstack 15
 11286                           
 11287                           ; BSR set to: 0
 11288                           ;tff.c: 512: FATFS *fs = FatFs;
 11289                           
 11290                           ; BSR set to: 0
 11291                           ;incstack = 0
 11292  001BD8  C037  F0B5         	movff	_FatFs,trace_path@fs
 11293  001BDC  C038  F0B6         	movff	_FatFs+1,trace_path@fs+1
 11294                           
 11295                           ; BSR set to: 0
 11296                           ;tff.c: 515: dj->fs = fs;
 11297  001BE0  51A8               	movf	trace_path@dj& (0+255),w,b
 11298  001BE2  6ED9               	movwf	fsr2l,c
 11299  001BE4  6ADA               	clrf	fsr2h,c
 11300  001BE6  0E04               	movlw	4
 11301  001BE8  26D9               	addwf	fsr2l,f,c
 11302  001BEA  C0B5  FFDE         	movff	trace_path@fs,postinc2
 11303  001BEE  C0B6  FFDD         	movff	trace_path@fs+1,postdec2
 11304                           
 11305                           ; BSR set to: 0
 11306                           ;tff.c: 516: clust = fs->dirbase;
 11307  001BF2  EE20 F00C          	lfsr	2,12
 11308  001BF6  51B5               	movf	trace_path@fs& (0+255),w,b
 11309  001BF8  26D9               	addwf	fsr2l,f,c
 11310  001BFA  51B6               	movf	(trace_path@fs+1)& (0+255),w,b
 11311  001BFC  22DA               	addwfc	fsr2h,f,c
 11312  001BFE  CFDE F0B7          	movff	postinc2,trace_path@clust
 11313  001C02  CFDD F0B8          	movff	postdec2,trace_path@clust+1
 11314                           
 11315                           ; BSR set to: 0
 11316                           ;tff.c: 523: {;tff.c: 524: dj->clust = dj->sclust = 0;
 11317  001C06  51A8               	movf	trace_path@dj& (0+255),w,b
 11318  001C08  6ED9               	movwf	fsr2l,c
 11319  001C0A  6ADA               	clrf	fsr2h,c
 11320  001C0C  0E06               	movlw	6
 11321  001C0E  26D9               	addwf	fsr2l,f,c
 11322  001C10  0E00               	movlw	0
 11323  001C12  6EDE               	movwf	postinc2,c
 11324  001C14  0E00               	movlw	0
 11325  001C16  6EDD               	movwf	postdec2,c
 11326  001C18  51A8               	movf	trace_path@dj& (0+255),w,b
 11327  001C1A  6EE1               	movwf	fsr1l,c
 11328  001C1C  6AE2               	clrf	fsr1h,c
 11329  001C1E  0E08               	movlw	8
 11330  001C20  26E1               	addwf	fsr1l,f,c
 11331  001C22  CFDE FFE6          	movff	postinc2,postinc1
 11332  001C26  CFDD FFE5          	movff	postdec2,postdec1
 11333                           
 11334                           ; BSR set to: 0
 11335                           ;tff.c: 525: dj->sect = clust;
 11336  001C2A  51B7               	movf	trace_path@clust& (0+255),w,b
 11337  001C2C  6FAD               	movwf	??_trace_path& (0+255),b
 11338  001C2E  51B8               	movf	(trace_path@clust+1)& (0+255),w,b
 11339  001C30  6FAE               	movwf	(??_trace_path+1)& (0+255),b
 11340  001C32  6BAF               	clrf	(??_trace_path+2)& (0+255),b
 11341  001C34  6BB0               	clrf	(??_trace_path+3)& (0+255),b
 11342  001C36  51A8               	movf	trace_path@dj& (0+255),w,b
 11343  001C38  6ED9               	movwf	fsr2l,c
 11344  001C3A  6ADA               	clrf	fsr2h,c
 11345  001C3C  0E0A               	movlw	10
 11346  001C3E  26D9               	addwf	fsr2l,f,c
 11347  001C40  C0AD  FFDE         	movff	??_trace_path,postinc2
 11348  001C44  C0AE  FFDE         	movff	??_trace_path+1,postinc2
 11349  001C48  C0AF  FFDE         	movff	??_trace_path+2,postinc2
 11350  001C4C  C0B0  FFDE         	movff	??_trace_path+3,postinc2
 11351                           
 11352                           ; BSR set to: 0
 11353                           ;tff.c: 526: };tff.c: 527: dj->index = 0;
 11354  001C50  51A8               	movf	trace_path@dj& (0+255),w,b
 11355  001C52  6ED9               	movwf	fsr2l,c
 11356  001C54  6ADA               	clrf	fsr2h,c
 11357  001C56  0E02               	movlw	2
 11358  001C58  26D9               	addwf	fsr2l,f,c
 11359  001C5A  0E00               	movlw	0
 11360  001C5C  6EDE               	movwf	postinc2,c
 11361  001C5E  0E00               	movlw	0
 11362  001C60  6EDD               	movwf	postdec2,c
 11363                           
 11364                           ; BSR set to: 0
 11365                           ;tff.c: 529: if (*path == '\0') {
 11366  001C62  C0AA  FFF6         	movff	trace_path@path,tblptrl
 11367  001C66  C0AB  FFF7         	movff	trace_path@path+1,tblptrh
 11368  001C6A  6AF8               	clrf	tblptru,c
 11369  001C6C  0E07               	movlw	(high __ramtop+-1)
 11370  001C6E  64F7               	cpfsgt	tblptrh,c
 11371  001C70  D003               	bra	u13517
 11372  001C72  0008               	tblrd		*
 11373  001C74  50F5               	movf	tablat,w,c
 11374  001C76  D005               	bra	u13510
 11375  001C78                     u13517:
 11376  001C78  CFF6 FFE1          	movff	tblptrl,fsr1l
 11377  001C7C  CFF7 FFE2          	movff	tblptrh,fsr1h
 11378  001C80  50E7               	movf	indf1,w,c
 11379  001C82                     u13510:
 11380  001C82  0900               	iorlw	0
 11381  001C84  A4D8               	btfss	status,2,c
 11382  001C86  D00A               	goto	l12827
 11383                           
 11384                           ;tff.c: 530: *dir = (0); return FR_OK;
 11385  001C88  0100               	movlb	0	; () banked
 11386  001C8A  51AC               	movf	trace_path@dir& (0+255),w,b
 11387  001C8C  6ED9               	movwf	fsr2l,c
 11388  001C8E  6ADA               	clrf	fsr2h,c
 11389  001C90  0E00               	movlw	0
 11390  001C92  6EDE               	movwf	postinc2,c
 11391  001C94  0E00               	movlw	0
 11392  001C96  6EDD               	movwf	postdec2,c
 11393  001C98                     l12823:
 11394                           
 11395                           ; BSR set to: 0
 11396  001C98  0E00               	movlw	0
 11397  001C9A  0012               	return	
 11398  001C9C                     l12827:
 11399                           
 11400                           ;tff.c: 534: ds = make_dirfile(&path, fn);
 11401  001C9C  0EAA               	movlw	low trace_path@path
 11402  001C9E  6E21               	movwf	make_dirfile@path^0,c
 11403  001CA0  C0A9  F022         	movff	trace_path@fn,make_dirfile@dirname
 11404  001CA4  EC74  F01B         	call	_make_dirfile	;wreg free
 11405  001CA8  0100               	movlb	0	; () banked
 11406  001CAA  6FB9               	movwf	trace_path@ds& (0+255),b
 11407                           
 11408                           ; BSR set to: 0
 11409                           ;tff.c: 535: if (ds == 1) return FR_INVALID_NAME;
 11410  001CAC  05B9               	decf	trace_path@ds& (0+255),w,b
 11411  001CAE  A4D8               	btfss	status,2,c
 11412  001CB0  D002               	goto	l12835
 11413                           
 11414                           ; BSR set to: 0
 11415  001CB2  0E04               	movlw	4
 11416  001CB4  0012               	return	
 11417  001CB6                     l12835:
 11418                           
 11419                           ; BSR set to: 0
 11420                           ;tff.c: 537: if (!move_window(dj->sect)) return FR_RW_ERROR;
 11421  001CB6  51A8               	movf	trace_path@dj& (0+255),w,b
 11422  001CB8  6ED9               	movwf	fsr2l,c
 11423  001CBA  6ADA               	clrf	fsr2h,c
 11424  001CBC  0E0A               	movlw	10
 11425  001CBE  26D9               	addwf	fsr2l,f,c
 11426  001CC0  CFDE F073          	movff	postinc2,move_window@sector
 11427  001CC4  CFDE F074          	movff	postinc2,move_window@sector+1
 11428  001CC8  CFDE F075          	movff	postinc2,move_window@sector+2
 11429  001CCC  CFDE F076          	movff	postinc2,move_window@sector+3
 11430  001CD0  EC58  F018         	call	_move_window	;wreg free
 11431  001CD4  0900               	iorlw	0
 11432  001CD6  A4D8               	btfss	status,2,c
 11433  001CD8  D002               	goto	l12841
 11434                           
 11435                           ; BSR set to: 0
 11436  001CDA  0E08               	movlw	8
 11437  001CDC  0012               	return	
 11438  001CDE                     l12841:
 11439                           
 11440                           ; BSR set to: 0
 11441                           ;tff.c: 538: dptr = &fs->win[(dj->index & 15) * 32];
 11442  001CDE  51A8               	movf	trace_path@dj& (0+255),w,b
 11443  001CE0  6ED9               	movwf	fsr2l,c
 11444  001CE2  6ADA               	clrf	fsr2h,c
 11445  001CE4  0E02               	movlw	2
 11446  001CE6  26D9               	addwf	fsr2l,f,c
 11447  001CE8  CFDE F0AD          	movff	postinc2,??_trace_path
 11448  001CEC  CFDD F0AE          	movff	postdec2,??_trace_path+1
 11449  001CF0  0E0F               	movlw	15
 11450  001CF2  17AD               	andwf	??_trace_path& (0+255),f,b
 11451  001CF4  0E00               	movlw	0
 11452  001CF6  17AE               	andwf	(??_trace_path+1)& (0+255),f,b
 11453  001CF8  0E05               	movlw	5
 11454  001CFA                     u13555:
 11455  001CFA  90D8               	bcf	status,0,c
 11456  001CFC  37AD               	rlcf	??_trace_path& (0+255),f,b
 11457  001CFE  37AE               	rlcf	(??_trace_path+1)& (0+255),f,b
 11458  001D00  2EE8               	decfsz	wreg,f,c
 11459  001D02  D7FB               	goto	u13555
 11460  001D04  C0B5  F0AF         	movff	trace_path@fs,??_trace_path+2
 11461  001D08  C0B6  F0B0         	movff	trace_path@fs+1,??_trace_path+3
 11462  001D0C  51AD               	movf	??_trace_path& (0+255),w,b
 11463  001D0E  27AF               	addwf	(??_trace_path+2)& (0+255),f,b
 11464  001D10  51AE               	movf	(??_trace_path+1)& (0+255),w,b
 11465  001D12  23B0               	addwfc	(??_trace_path+3)& (0+255),f,b
 11466  001D14  0E20               	movlw	32
 11467  001D16  25AF               	addwf	(??_trace_path+2)& (0+255),w,b
 11468  001D18  6FBA               	movwf	trace_path@dptr& (0+255),b
 11469  001D1A  0E00               	movlw	0
 11470  001D1C  21B0               	addwfc	(??_trace_path+3)& (0+255),w,b
 11471  001D1E  6FBB               	movwf	(trace_path@dptr+1)& (0+255),b
 11472                           
 11473                           ; BSR set to: 0
 11474                           ;tff.c: 539: if (dptr[0] == 0)
 11475  001D20  C0BA  FFD9         	movff	trace_path@dptr,fsr2l
 11476  001D24  C0BB  FFDA         	movff	trace_path@dptr+1,fsr2h
 11477  001D28  50DF               	movf	indf2,w,c
 11478  001D2A  A4D8               	btfss	status,2,c
 11479  001D2C  D00D               	goto	l12853
 11480                           
 11481                           ; BSR set to: 0
 11482                           ;tff.c: 540: return !ds ? FR_NO_FILE : FR_NO_PATH;
 11483  001D2E  51B9               	movf	trace_path@ds& (0+255),w,b
 11484  001D30  B4D8               	btfsc	status,2,c
 11485  001D32  D004               	goto	l12849
 11486                           
 11487                           ; BSR set to: 0
 11488  001D34  0E00               	movlw	0
 11489  001D36  6FB2               	movwf	(_trace_path$1709+1)& (0+255),b
 11490  001D38  0E03               	movlw	3
 11491  001D3A  D003               	goto	L5
 11492  001D3C                     l12849:
 11493                           
 11494                           ; BSR set to: 0
 11495  001D3C  0E00               	movlw	0
 11496  001D3E  6FB2               	movwf	(_trace_path$1709+1)& (0+255),b
 11497  001D40  0E02               	movlw	2
 11498  001D42                     L5:
 11499  001D42  6FB1               	movwf	_trace_path$1709& (0+255),b
 11500                           
 11501                           ; BSR set to: 0
 11502  001D44  51B1               	movf	_trace_path$1709& (0+255),w,b
 11503  001D46  0012               	return	
 11504  001D48                     l12853:
 11505                           
 11506                           ; BSR set to: 0
 11507                           ;tff.c: 541: if (dptr[0] != 0xE5;tff.c: 542: && !(dptr[11] & 0x08);tff.c: 543: && !memcm
      +                          p(&dptr[0], fn, 8+3) ) break;
 11508  001D48  C0BA  FFD9         	movff	trace_path@dptr,fsr2l
 11509  001D4C  C0BB  FFDA         	movff	trace_path@dptr+1,fsr2h
 11510  001D50  0EE5               	movlw	229
 11511  001D52  18DE               	xorwf	postinc2,w,c
 11512  001D54  B4D8               	btfsc	status,2,c
 11513  001D56  D019               	goto	l12861
 11514                           
 11515                           ; BSR set to: 0
 11516  001D58  EE20 F00B          	lfsr	2,11
 11517  001D5C  51BA               	movf	trace_path@dptr& (0+255),w,b
 11518  001D5E  26D9               	addwf	fsr2l,f,c
 11519  001D60  51BB               	movf	(trace_path@dptr+1)& (0+255),w,b
 11520  001D62  22DA               	addwfc	fsr2h,f,c
 11521  001D64  B6DF               	btfsc	indf2,3,c
 11522  001D66  D011               	goto	l12861
 11523                           
 11524                           ; BSR set to: 0
 11525  001D68  C0BA  F019         	movff	trace_path@dptr,memcmp@s1
 11526  001D6C  C0BB  F01A         	movff	trace_path@dptr+1,memcmp@s1+1
 11527  001D70  C0A9  F01B         	movff	trace_path@fn,memcmp@s2
 11528  001D74  6A1C               	clrf	(memcmp@s2+1)^0,c
 11529  001D76  0E00               	movlw	0
 11530  001D78  6E1E               	movwf	(memcmp@n+1)^0,c
 11531  001D7A  0E0B               	movlw	11
 11532  001D7C  6E1D               	movwf	memcmp@n^0,c
 11533  001D7E  EC25  F025         	call	_memcmp	;wreg free
 11534  001D82  5019               	movf	?_memcmp^0,w,c
 11535  001D84  101A               	iorwf	(?_memcmp+1)^0,w,c
 11536  001D86  B4D8               	btfsc	status,2,c
 11537  001D88  D014               	goto	l12871
 11538  001D8A                     l12861:
 11539                           
 11540                           ;tff.c: 544: if (!next_dir_entry(dj))
 11541  001D8A  C0A8  F031         	movff	trace_path@dj,next_dir_entry@dj
 11542  001D8E  ECC2  F01A         	call	_next_dir_entry	;wreg free
 11543  001D92  0900               	iorlw	0
 11544  001D94  A4D8               	btfss	status,2,c
 11545  001D96  D78F               	goto	l12835
 11546                           
 11547                           ; BSR set to: 0
 11548                           ;tff.c: 545: return !ds ? FR_NO_FILE : FR_NO_PATH;
 11549  001D98  51B9               	movf	trace_path@ds& (0+255),w,b
 11550  001D9A  B4D8               	btfsc	status,2,c
 11551  001D9C  D004               	goto	l12867
 11552                           
 11553                           ; BSR set to: 0
 11554  001D9E  0E00               	movlw	0
 11555  001DA0  6FB4               	movwf	(_trace_path$1711+1)& (0+255),b
 11556  001DA2  0E03               	movlw	3
 11557  001DA4  D003               	goto	L6
 11558  001DA6                     l12867:
 11559                           
 11560                           ; BSR set to: 0
 11561  001DA6  0E00               	movlw	0
 11562  001DA8  6FB4               	movwf	(_trace_path$1711+1)& (0+255),b
 11563  001DAA  0E02               	movlw	2
 11564  001DAC                     L6:
 11565  001DAC  6FB3               	movwf	_trace_path$1711& (0+255),b
 11566                           
 11567                           ; BSR set to: 0
 11568  001DAE  51B3               	movf	_trace_path$1711& (0+255),w,b
 11569  001DB0  0012               	return	
 11570  001DB2                     l12871:
 11571                           
 11572                           ;tff.c: 547: if (!ds) { *dir = dptr; return FR_OK; }
 11573  001DB2  0100               	movlb	0	; () banked
 11574  001DB4  51B9               	movf	trace_path@ds& (0+255),w,b
 11575  001DB6  A4D8               	btfss	status,2,c
 11576  001DB8  D008               	goto	l12879
 11577                           
 11578                           ; BSR set to: 0
 11579  001DBA  51AC               	movf	trace_path@dir& (0+255),w,b
 11580  001DBC  6ED9               	movwf	fsr2l,c
 11581  001DBE  6ADA               	clrf	fsr2h,c
 11582  001DC0  C0BA  FFDE         	movff	trace_path@dptr,postinc2
 11583  001DC4  C0BB  FFDD         	movff	trace_path@dptr+1,postdec2
 11584  001DC8  D767               	goto	l12823
 11585  001DCA                     l12879:
 11586                           
 11587                           ; BSR set to: 0
 11588                           ;tff.c: 548: if (!(dptr[11] & 0x10)) return FR_NO_PATH;
 11589  001DCA  EE20 F00B          	lfsr	2,11
 11590  001DCE  51BA               	movf	trace_path@dptr& (0+255),w,b
 11591  001DD0  26D9               	addwf	fsr2l,f,c
 11592  001DD2  51BB               	movf	(trace_path@dptr+1)& (0+255),w,b
 11593  001DD4  22DA               	addwfc	fsr2h,f,c
 11594  001DD6  B8DF               	btfsc	indf2,4,c
 11595  001DD8  D002               	goto	l12885
 11596                           
 11597                           ; BSR set to: 0
 11598  001DDA  0E03               	movlw	3
 11599  001DDC  0012               	return	
 11600  001DDE                     l12885:
 11601                           
 11602                           ; BSR set to: 0
 11603                           ;tff.c: 549: clust =;tff.c: 553: (WORD)(*(WORD*)(BYTE*)(&dptr[26]));
 11604  001DDE  EE20 F01A          	lfsr	2,26
 11605  001DE2  51BA               	movf	trace_path@dptr& (0+255),w,b
 11606  001DE4  26D9               	addwf	fsr2l,f,c
 11607  001DE6  51BB               	movf	(trace_path@dptr+1)& (0+255),w,b
 11608  001DE8  22DA               	addwfc	fsr2h,f,c
 11609  001DEA  CFDE F0B7          	movff	postinc2,trace_path@clust
 11610  001DEE  CFDD F0B8          	movff	postdec2,trace_path@clust+1
 11611                           
 11612                           ; BSR set to: 0
 11613                           ;tff.c: 554: dj->clust = dj->sclust = clust;
 11614  001DF2  51A8               	movf	trace_path@dj& (0+255),w,b
 11615  001DF4  6ED9               	movwf	fsr2l,c
 11616  001DF6  6ADA               	clrf	fsr2h,c
 11617  001DF8  0E06               	movlw	6
 11618  001DFA  26D9               	addwf	fsr2l,f,c
 11619  001DFC  C0B7  FFDE         	movff	trace_path@clust,postinc2
 11620  001E00  C0B8  FFDD         	movff	trace_path@clust+1,postdec2
 11621  001E04  51A8               	movf	trace_path@dj& (0+255),w,b
 11622  001E06  6EE1               	movwf	fsr1l,c
 11623  001E08  6AE2               	clrf	fsr1h,c
 11624  001E0A  0E08               	movlw	8
 11625  001E0C  26E1               	addwf	fsr1l,f,c
 11626  001E0E  CFDE FFE6          	movff	postinc2,postinc1
 11627  001E12  CFDD FFE5          	movff	postdec2,postdec1
 11628                           
 11629                           ; BSR set to: 0
 11630                           ;tff.c: 555: dj->sect = clust2sect(clust);
 11631  001E16  C0B7  F025         	movff	trace_path@clust,clust2sect@clust
 11632  001E1A  C0B8  F026         	movff	trace_path@clust+1,clust2sect@clust+1
 11633  001E1E  EC39  F022         	call	_clust2sect	;wreg free
 11634  001E22  51A8               	movf	trace_path@dj& (0+255),w,b
 11635  001E24  6ED9               	movwf	fsr2l,c
 11636  001E26  6ADA               	clrf	fsr2h,c
 11637  001E28  0E0A               	movlw	10
 11638  001E2A  26D9               	addwf	fsr2l,f,c
 11639  001E2C  C025  FFDE         	movff	?_clust2sect,postinc2
 11640  001E30  C026  FFDE         	movff	?_clust2sect+1,postinc2
 11641  001E34  C027  FFDE         	movff	?_clust2sect+2,postinc2
 11642  001E38  C028  FFDE         	movff	?_clust2sect+3,postinc2
 11643                           
 11644                           ; BSR set to: 0
 11645                           ;tff.c: 556: dj->index = 2;
 11646  001E3C  51A8               	movf	trace_path@dj& (0+255),w,b
 11647  001E3E  6ED9               	movwf	fsr2l,c
 11648  001E40  6ADA               	clrf	fsr2h,c
 11649  001E42  0E02               	movlw	2
 11650  001E44  26D9               	addwf	fsr2l,f,c
 11651  001E46  0E02               	movlw	2
 11652  001E48  6EDE               	movwf	postinc2,c
 11653  001E4A  0E00               	movlw	0
 11654  001E4C  6EDD               	movwf	postdec2,c
 11655                           
 11656                           ;tff.c: 557: }
 11657  001E4E  D726               	goto	l12827
 11658  001E50                     __end_of_trace_path:
 11659                           	callstack 0
 11660                           
 11661 ;; *************** function _make_dirfile *****************
 11662 ;; Defined at:
 11663 ;;		line 439 in file "bibliotecas/tff.c"
 11664 ;; Parameters:    Size  Location     Type
 11665 ;;  path            1   32[COMRAM] PTR PTR const unsigned c
 11666 ;;		 -> trace_path@path(2), 
 11667 ;;  dirname         1   33[COMRAM] PTR unsigned char 
 11668 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
 11669 ;; Auto vars:     Size  Location     Type
 11670 ;;  c               1   42[COMRAM] unsigned char 
 11671 ;;  n               1   41[COMRAM] unsigned char 
 11672 ;;  a               1   40[COMRAM] unsigned char 
 11673 ;;  t               1   39[COMRAM] unsigned char 
 11674 ;;  b               1   38[COMRAM] unsigned char 
 11675 ;; Return value:  Size  Location     Type
 11676 ;;                  1    wreg      unsigned char 
 11677 ;; Registers used:
 11678 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11679 ;; Tracked objects:
 11680 ;;		On entry : 0/0
 11681 ;;		On exit  : 0/0
 11682 ;;		Unchanged: 0/0
 11683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11684 ;;      Params:         2       0       0       0       0       0       0       0       0
 11685 ;;      Locals:         7       0       0       0       0       0       0       0       0
 11686 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11687 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11688 ;;Total ram usage:       11 bytes
 11689 ;; Hardware stack levels used:    1
 11690 ;; Hardware stack levels required when called:    4
 11691 ;; This function calls:
 11692 ;;		_memset
 11693 ;; This function is called by:
 11694 ;;		_trace_path
 11695 ;; This function uses a non-reentrant model
 11696 ;;
 11697                           
 11698                           	psect	text62
 11699  0036E8                     __ptext62:
 11700                           	callstack 0
 11701  0036E8                     _make_dirfile:
 11702                           	callstack 21
 11703                           
 11704                           ;tff.c: 444: BYTE n, t, c, a, b;;tff.c: 447: memset(dirname, ' ', 8+3);
 11705                           
 11706                           ; BSR set to: 0
 11707                           ;incstack = 0
 11708  0036E8  C022  F019         	movff	make_dirfile@dirname,memset@p1
 11709  0036EC  6A1A               	clrf	(memset@p1+1)^0,c
 11710  0036EE  0E00               	movlw	0
 11711  0036F0  6E1C               	movwf	(memset@c+1)^0,c
 11712  0036F2  0E20               	movlw	32
 11713  0036F4  6E1B               	movwf	memset@c^0,c
 11714  0036F6  0E00               	movlw	0
 11715  0036F8  6E1E               	movwf	(memset@n+1)^0,c
 11716  0036FA  0E0B               	movlw	11
 11717  0036FC  6E1D               	movwf	memset@n^0,c
 11718  0036FE  ECBF  F02C         	call	_memset	;wreg free
 11719                           
 11720                           ;tff.c: 448: a = 0; b = 0x18;
 11721  003702  0E00               	movlw	0
 11722  003704  6E29               	movwf	make_dirfile@a^0,c
 11723  003706  0E18               	movlw	24
 11724  003708  6E27               	movwf	make_dirfile@b^0,c
 11725                           
 11726                           ;tff.c: 449: n = 0; t = 8;
 11727  00370A  0E00               	movlw	0
 11728  00370C  6E2A               	movwf	make_dirfile@n^0,c
 11729  00370E  0E08               	movlw	8
 11730  003710  6E28               	movwf	make_dirfile@t^0,c
 11731  003712                     l8233:
 11732                           
 11733                           ;tff.c: 451: c = *(*path)++;
 11734  003712  5021               	movf	make_dirfile@path^0,w,c
 11735  003714  6ED9               	movwf	fsr2l,c
 11736  003716  6ADA               	clrf	fsr2h,c
 11737  003718  CFDF F023          	movff	indf2,??_make_dirfile
 11738  00371C  0E01               	movlw	1
 11739  00371E  26DE               	addwf	postinc2,f,c
 11740  003720  CFDF F024          	movff	indf2,??_make_dirfile+1
 11741  003724  0E00               	movlw	0
 11742  003726  22DD               	addwfc	postdec2,f,c
 11743  003728  C023  FFF6         	movff	??_make_dirfile,tblptrl
 11744  00372C  C024  FFF7         	movff	??_make_dirfile+1,tblptrh
 11745  003730  6AF8               	clrf	tblptru,c
 11746  003732  0E07               	movlw	(high __ramtop+-1)
 11747  003734  64F7               	cpfsgt	tblptrh,c
 11748  003736  D003               	bra	u7357
 11749  003738  0008               	tblrd		*
 11750  00373A  50F5               	movf	tablat,w,c
 11751  00373C  D005               	bra	u7350
 11752  00373E                     u7357:
 11753  00373E  CFF6 FFE1          	movff	tblptrl,fsr1l
 11754  003742  CFF7 FFE2          	movff	tblptrh,fsr1h
 11755  003746  50E7               	movf	indf1,w,c
 11756  003748                     u7350:
 11757  003748  6E2B               	movwf	make_dirfile@c^0,c
 11758                           
 11759                           ;tff.c: 452: if (c == '\0' || c == '/') {
 11760  00374A  502B               	movf	make_dirfile@c^0,w,c
 11761  00374C  B4D8               	btfsc	status,2,c
 11762  00374E  D004               	goto	u7370
 11763  003750  0E2F               	movlw	47
 11764  003752  182B               	xorwf	make_dirfile@c^0,w,c
 11765  003754  A4D8               	btfss	status,2,c
 11766  003756  D012               	goto	l8253
 11767  003758                     u7370:
 11768                           
 11769                           ;tff.c: 453: if (n == 0) break;
 11770  003758  502A               	movf	make_dirfile@n^0,w,c
 11771  00375A  B4D8               	btfsc	status,2,c
 11772  00375C  D070               	goto	l8341
 11773  00375E  5029               	movf	make_dirfile@a^0,w,c
 11774  003760  1427               	andwf	make_dirfile@b^0,w,c
 11775  003762  6E23               	movwf	??_make_dirfile^0,c
 11776  003764  5023               	movf	??_make_dirfile^0,w,c
 11777  003766  6E25               	movwf	_make_dirfile$1662^0,c
 11778  003768  6A26               	clrf	(_make_dirfile$1662+1)^0,c
 11779  00376A  5022               	movf	make_dirfile@dirname^0,w,c
 11780  00376C  6ED9               	movwf	fsr2l,c
 11781  00376E  6ADA               	clrf	fsr2h,c
 11782  003770  0E0B               	movlw	11
 11783  003772  26D9               	addwf	fsr2l,f,c
 11784  003774  C025  FFDF         	movff	_make_dirfile$1662,indf2
 11785                           
 11786                           ;tff.c: 455: return c;
 11787  003778  502B               	movf	make_dirfile@c^0,w,c
 11788  00377A  0012               	return	
 11789  00377C                     l8253:
 11790                           
 11791                           ;tff.c: 456: };tff.c: 457: if (c <= ' ' || c == 0x7F) break;
 11792  00377C  0E20               	movlw	32
 11793  00377E  642B               	cpfsgt	make_dirfile@c^0,c
 11794  003780  D05E               	goto	l8341
 11795  003782  0E7F               	movlw	127
 11796  003784  182B               	xorwf	make_dirfile@c^0,w,c
 11797  003786  B4D8               	btfsc	status,2,c
 11798  003788  D05A               	goto	l8341
 11799                           
 11800                           ;tff.c: 458: if (c == '.') {
 11801  00378A  0E2E               	movlw	46
 11802  00378C  182B               	xorwf	make_dirfile@c^0,w,c
 11803  00378E  A4D8               	btfss	status,2,c
 11804  003790  D00C               	goto	l8283
 11805                           
 11806                           ;tff.c: 459: if (!(a & 1) && n >= 1 && n <= 8) {
 11807  003792  B029               	btfsc	make_dirfile@a^0,0,c
 11808  003794  D054               	goto	l8341
 11809  003796  502A               	movf	make_dirfile@n^0,w,c
 11810  003798  B4D8               	btfsc	status,2,c
 11811  00379A  D051               	goto	l8341
 11812  00379C  0E09               	movlw	9
 11813  00379E  602A               	cpfslt	make_dirfile@n^0,c
 11814  0037A0  D04E               	goto	l8341
 11815                           
 11816                           ;tff.c: 460: n = 8; t = 11; continue;
 11817  0037A2  0E08               	movlw	8
 11818  0037A4  6E2A               	movwf	make_dirfile@n^0,c
 11819  0037A6  0E0B               	movlw	11
 11820  0037A8  D7B3               	goto	L7
 11821  0037AA                     l8283:
 11822                           
 11823                           ;tff.c: 470: };tff.c: 471: if (c == '"') break;
 11824  0037AA  0E22               	movlw	34
 11825  0037AC  182B               	xorwf	make_dirfile@c^0,w,c
 11826  0037AE  B4D8               	btfsc	status,2,c
 11827  0037B0  D046               	goto	l8341
 11828                           
 11829                           ;tff.c: 472: if (c <= ')') goto md_l1;
 11830  0037B2  0E2A               	movlw	42
 11831  0037B4  602B               	cpfslt	make_dirfile@c^0,c
 11832  0037B6  D001               	goto	l8291
 11833  0037B8  D035               	goto	l868
 11834  0037BA                     l8291:
 11835                           
 11836                           ;tff.c: 473: if (c <= ',') break;
 11837  0037BA  0E2D               	movlw	45
 11838  0037BC  602B               	cpfslt	make_dirfile@c^0,c
 11839  0037BE  D001               	goto	l8295
 11840  0037C0  D03E               	goto	l8341
 11841  0037C2                     l8295:
 11842                           
 11843                           ;tff.c: 474: if (c <= '9') goto md_l1;
 11844  0037C2  0E3A               	movlw	58
 11845  0037C4  602B               	cpfslt	make_dirfile@c^0,c
 11846  0037C6  D001               	goto	l8299
 11847  0037C8  D02D               	goto	l868
 11848  0037CA                     l8299:
 11849                           
 11850                           ;tff.c: 475: if (c <= '?') break;
 11851  0037CA  0E40               	movlw	64
 11852  0037CC  602B               	cpfslt	make_dirfile@c^0,c
 11853  0037CE  D001               	goto	l871
 11854  0037D0  D036               	goto	l8341
 11855  0037D2                     l871:
 11856                           
 11857                           ;tff.c: 476: if (!(a & 1)) {
 11858  0037D2  B029               	btfsc	make_dirfile@a^0,0,c
 11859  0037D4  D027               	goto	l868
 11860                           
 11861                           ;tff.c: 477: if (c == '|') break;
 11862  0037D6  0E7C               	movlw	124
 11863  0037D8  182B               	xorwf	make_dirfile@c^0,w,c
 11864  0037DA  B4D8               	btfsc	status,2,c
 11865  0037DC  D030               	goto	l8341
 11866                           
 11867                           ;tff.c: 478: if (c >= '[' && c <= ']') break;
 11868  0037DE  0E5A               	movlw	90
 11869  0037E0  642B               	cpfsgt	make_dirfile@c^0,c
 11870  0037E2  D004               	goto	l8313
 11871  0037E4  0E5E               	movlw	94
 11872  0037E6  602B               	cpfslt	make_dirfile@c^0,c
 11873  0037E8  D001               	goto	l8313
 11874  0037EA  D029               	goto	l8341
 11875  0037EC                     l8313:
 11876  0037EC  0E40               	movlw	64
 11877  0037EE  642B               	cpfsgt	make_dirfile@c^0,c
 11878  0037F0  D00A               	goto	l8323
 11879  0037F2  0E5B               	movlw	91
 11880  0037F4  602B               	cpfslt	make_dirfile@c^0,c
 11881  0037F6  D007               	goto	l8323
 11882                           
 11883                           ;tff.c: 480: (t == 8) ? (b &= 0xF7) : (b &= 0xEF);
 11884  0037F8  0E08               	movlw	8
 11885  0037FA  1828               	xorwf	make_dirfile@t^0,w,c
 11886  0037FC  A4D8               	btfss	status,2,c
 11887  0037FE  D002               	goto	l8321
 11888  003800  9627               	bcf	make_dirfile@b^0,3,c
 11889  003802  D001               	goto	l8323
 11890  003804                     l8321:
 11891  003804  9827               	bcf	make_dirfile@b^0,4,c
 11892  003806                     l8323:
 11893                           
 11894                           ;tff.c: 481: if (c >= 'a' && c <= 'z') {
 11895  003806  0E60               	movlw	96
 11896  003808  642B               	cpfsgt	make_dirfile@c^0,c
 11897  00380A  D00C               	goto	l868
 11898  00380C  0E7B               	movlw	123
 11899  00380E  602B               	cpfslt	make_dirfile@c^0,c
 11900  003810  D009               	goto	l868
 11901                           
 11902                           ;tff.c: 483: if (1) (t == 8) ? (a |= 0x08) : (a |= 0x10);
 11903  003812  0E20               	movlw	32
 11904  003814  5E2B               	subwf	make_dirfile@c^0,f,c
 11905  003816  0E08               	movlw	8
 11906  003818  1828               	xorwf	make_dirfile@t^0,w,c
 11907  00381A  A4D8               	btfss	status,2,c
 11908  00381C  D002               	goto	l8331
 11909  00381E  8629               	bsf	make_dirfile@a^0,3,c
 11910  003820  D001               	goto	l868
 11911  003822                     l8331:
 11912  003822  8829               	bsf	make_dirfile@a^0,4,c
 11913  003824                     l868:
 11914                           
 11915                           ;tff.c: 487: a &= 0xFE;
 11916  003824  9029               	bcf	make_dirfile@a^0,0,c
 11917                           
 11918                           ;tff.c: 489: if (n >= t) break;
 11919  003826  5028               	movf	make_dirfile@t^0,w,c
 11920  003828  5C2A               	subwf	make_dirfile@n^0,w,c
 11921  00382A  B0D8               	btfsc	status,0,c
 11922  00382C  D008               	goto	l8341
 11923                           
 11924                           ;tff.c: 490: dirname[n++] = c;
 11925  00382E  5022               	movf	make_dirfile@dirname^0,w,c
 11926  003830  242A               	addwf	make_dirfile@n^0,w,c
 11927  003832  6ED9               	movwf	fsr2l,c
 11928  003834  6ADA               	clrf	fsr2h,c
 11929  003836  C02B  FFDF         	movff	make_dirfile@c,indf2
 11930  00383A  2A2A               	incf	make_dirfile@n^0,f,c
 11931  00383C  D76A               	goto	l8233
 11932  00383E                     l8341:
 11933                           
 11934                           ;tff.c: 492: return 1;
 11935  00383E  0E01               	movlw	1
 11936  003840  0012               	return		;funcret
 11937  003842                     __end_of_make_dirfile:
 11938                           	callstack 0
 11939                           
 11940 ;; *************** function _reserve_direntry *****************
 11941 ;; Defined at:
 11942 ;;		line 568 in file "bibliotecas/tff.c"
 11943 ;; Parameters:    Size  Location     Type
 11944 ;;  dj              1   78[BANK0 ] PTR struct _DIR_E
 11945 ;;		 -> f_open@dj(14), 
 11946 ;;  dir             1   79[BANK0 ] PTR PTR unsigned char 
 11947 ;;		 -> f_open@dir(2), 
 11948 ;; Auto vars:     Size  Location     Type
 11949 ;;  sector          4   84[BANK0 ] unsigned long 
 11950 ;;  fs              2   94[BANK0 ] PTR struct _FATFS
 11951 ;;		 -> NULL(0), fs(544), 
 11952 ;;  clust           2   92[BANK0 ] unsigned short 
 11953 ;;  dptr            2   89[BANK0 ] PTR unsigned char 
 11954 ;;		 -> fs.win(512), NULL(0), fs(544), 
 11955 ;;  c               1   91[BANK0 ] unsigned char 
 11956 ;;  n               1   88[BANK0 ] unsigned char 
 11957 ;; Return value:  Size  Location     Type
 11958 ;;                  1    wreg      enum E155
 11959 ;; Registers used:
 11960 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11961 ;; Tracked objects:
 11962 ;;		On entry : 3F/0
 11963 ;;		On exit  : 3F/0
 11964 ;;		Unchanged: 0/0
 11965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11966 ;;      Params:         0       2       0       0       0       0       0       0       0
 11967 ;;      Locals:         0      12       0       0       0       0       0       0       0
 11968 ;;      Temps:          0       4       0       0       0       0       0       0       0
 11969 ;;      Totals:         0      18       0       0       0       0       0       0       0
 11970 ;;Total ram usage:       18 bytes
 11971 ;; Hardware stack levels used:    1
 11972 ;; Hardware stack levels required when called:   11
 11973 ;; This function calls:
 11974 ;;		_clust2sect
 11975 ;;		_create_chain
 11976 ;;		_disk_write
 11977 ;;		_memset
 11978 ;;		_move_window
 11979 ;;		_next_dir_entry
 11980 ;; This function is called by:
 11981 ;;		_f_open
 11982 ;; This function uses a non-reentrant model
 11983 ;;
 11984                           
 11985                           	psect	text63
 11986  001E50                     __ptext63:
 11987                           	callstack 0
 11988  001E50                     _reserve_direntry:
 11989                           	callstack 15
 11990                           
 11991                           ; BSR set to: 0
 11992                           ;tff.c: 573: CLUST clust;;tff.c: 574: DWORD sector;;tff.c: 575: BYTE c, n, *dptr;;tff.c:
      +                           576: FATFS *fs = dj->fs;
 11993                           
 11994                           ;incstack = 0
 11995  001E50  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 11996  001E52  6ED9               	movwf	fsr2l,c
 11997  001E54  6ADA               	clrf	fsr2h,c
 11998  001E56  0E04               	movlw	4
 11999  001E58  26D9               	addwf	fsr2l,f,c
 12000  001E5A  CFDE F0BE          	movff	postinc2,reserve_direntry@fs
 12001  001E5E  CFDD F0BF          	movff	postdec2,reserve_direntry@fs+1
 12002                           
 12003                           ;tff.c: 580: clust = dj->sclust;
 12004  001E62  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 12005  001E64  6ED9               	movwf	fsr2l,c
 12006  001E66  6ADA               	clrf	fsr2h,c
 12007  001E68  0E06               	movlw	6
 12008  001E6A  26D9               	addwf	fsr2l,f,c
 12009  001E6C  CFDE F0BC          	movff	postinc2,reserve_direntry@clust
 12010  001E70  CFDD F0BD          	movff	postdec2,reserve_direntry@clust+1
 12011                           
 12012                           ; BSR set to: 0
 12013                           ;tff.c: 581: if (clust != 0) {
 12014  001E74  51BC               	movf	reserve_direntry@clust& (0+255),w,b
 12015  001E76  11BD               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 12016  001E78  B4D8               	btfsc	status,2,c
 12017  001E7A  D01D               	goto	l12901
 12018                           
 12019                           ; BSR set to: 0
 12020                           ;tff.c: 582: dj->clust = clust;
 12021  001E7C  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 12022  001E7E  6ED9               	movwf	fsr2l,c
 12023  001E80  6ADA               	clrf	fsr2h,c
 12024  001E82  0E08               	movlw	8
 12025  001E84  26D9               	addwf	fsr2l,f,c
 12026  001E86  C0BC  FFDE         	movff	reserve_direntry@clust,postinc2
 12027  001E8A  C0BD  FFDD         	movff	reserve_direntry@clust+1,postdec2
 12028                           
 12029                           ; BSR set to: 0
 12030                           ;tff.c: 583: dj->sect = clust2sect(clust);
 12031  001E8E  C0BC  F025         	movff	reserve_direntry@clust,clust2sect@clust
 12032  001E92  C0BD  F026         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 12033  001E96  EC39  F022         	call	_clust2sect	;wreg free
 12034  001E9A  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 12035  001E9C  6ED9               	movwf	fsr2l,c
 12036  001E9E  6ADA               	clrf	fsr2h,c
 12037  001EA0  0E0A               	movlw	10
 12038  001EA2  26D9               	addwf	fsr2l,f,c
 12039  001EA4  C025  FFDE         	movff	?_clust2sect,postinc2
 12040  001EA8  C026  FFDE         	movff	?_clust2sect+1,postinc2
 12041  001EAC  C027  FFDE         	movff	?_clust2sect+2,postinc2
 12042  001EB0  C028  FFDE         	movff	?_clust2sect+3,postinc2
 12043                           
 12044                           ;tff.c: 584: } else {
 12045  001EB4  D013               	goto	l12903
 12046  001EB6                     l12901:
 12047                           
 12048                           ; BSR set to: 0
 12049                           ;tff.c: 585: dj->sect = fs->dirbase;
 12050  001EB6  EE20 F00C          	lfsr	2,12
 12051  001EBA  51BE               	movf	reserve_direntry@fs& (0+255),w,b
 12052  001EBC  26D9               	addwf	fsr2l,f,c
 12053  001EBE  51BF               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12054  001EC0  22DA               	addwfc	fsr2h,f,c
 12055  001EC2  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 12056  001EC4  6EE1               	movwf	fsr1l,c
 12057  001EC6  6AE2               	clrf	fsr1h,c
 12058  001EC8  0E0A               	movlw	10
 12059  001ECA  26E1               	addwf	fsr1l,f,c
 12060  001ECC  CFDE FFE6          	movff	postinc2,postinc1
 12061  001ED0  CFDE FFE6          	movff	postinc2,postinc1
 12062  001ED4  CFDE FFE6          	movff	postinc2,postinc1
 12063  001ED8  CFDE FFE6          	movff	postinc2,postinc1
 12064  001EDC                     l12903:
 12065                           
 12066                           ; BSR set to: 0
 12067                           ;tff.c: 586: };tff.c: 587: dj->index = 0;
 12068  001EDC  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 12069  001EDE  6ED9               	movwf	fsr2l,c
 12070  001EE0  6ADA               	clrf	fsr2h,c
 12071  001EE2  0E02               	movlw	2
 12072  001EE4  26D9               	addwf	fsr2l,f,c
 12073  001EE6  0E00               	movlw	0
 12074  001EE8  6EDE               	movwf	postinc2,c
 12075  001EEA  0E00               	movlw	0
 12076  001EEC  6EDD               	movwf	postdec2,c
 12077  001EEE                     l12905:
 12078                           
 12079                           ; BSR set to: 0
 12080                           ;tff.c: 590: if (!move_window(dj->sect)) return FR_RW_ERROR;
 12081  001EEE  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 12082  001EF0  6ED9               	movwf	fsr2l,c
 12083  001EF2  6ADA               	clrf	fsr2h,c
 12084  001EF4  0E0A               	movlw	10
 12085  001EF6  26D9               	addwf	fsr2l,f,c
 12086  001EF8  CFDE F073          	movff	postinc2,move_window@sector
 12087  001EFC  CFDE F074          	movff	postinc2,move_window@sector+1
 12088  001F00  CFDE F075          	movff	postinc2,move_window@sector+2
 12089  001F04  CFDE F076          	movff	postinc2,move_window@sector+3
 12090  001F08  EC58  F018         	call	_move_window	;wreg free
 12091  001F0C  0900               	iorlw	0
 12092  001F0E  A4D8               	btfss	status,2,c
 12093  001F10  D002               	goto	l12911
 12094  001F12                     u13660:
 12095                           
 12096                           ; BSR set to: 0
 12097  001F12  0E08               	movlw	8
 12098  001F14  0012               	return	
 12099  001F16                     l12911:
 12100                           
 12101                           ; BSR set to: 0
 12102                           ;tff.c: 591: dptr = &fs->win[(dj->index & 15) * 32];
 12103  001F16  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 12104  001F18  6ED9               	movwf	fsr2l,c
 12105  001F1A  6ADA               	clrf	fsr2h,c
 12106  001F1C  0E02               	movlw	2
 12107  001F1E  26D9               	addwf	fsr2l,f,c
 12108  001F20  CFDE F0B0          	movff	postinc2,??_reserve_direntry
 12109  001F24  CFDD F0B1          	movff	postdec2,??_reserve_direntry+1
 12110  001F28  0E0F               	movlw	15
 12111  001F2A  17B0               	andwf	??_reserve_direntry& (0+255),f,b
 12112  001F2C  0E00               	movlw	0
 12113  001F2E  17B1               	andwf	(??_reserve_direntry+1)& (0+255),f,b
 12114  001F30  0E05               	movlw	5
 12115  001F32                     u13675:
 12116  001F32  90D8               	bcf	status,0,c
 12117  001F34  37B0               	rlcf	??_reserve_direntry& (0+255),f,b
 12118  001F36  37B1               	rlcf	(??_reserve_direntry+1)& (0+255),f,b
 12119  001F38  2EE8               	decfsz	wreg,f,c
 12120  001F3A  D7FB               	goto	u13675
 12121  001F3C  C0BE  F0B2         	movff	reserve_direntry@fs,??_reserve_direntry+2
 12122  001F40  C0BF  F0B3         	movff	reserve_direntry@fs+1,??_reserve_direntry+3
 12123  001F44  51B0               	movf	??_reserve_direntry& (0+255),w,b
 12124  001F46  27B2               	addwf	(??_reserve_direntry+2)& (0+255),f,b
 12125  001F48  51B1               	movf	(??_reserve_direntry+1)& (0+255),w,b
 12126  001F4A  23B3               	addwfc	(??_reserve_direntry+3)& (0+255),f,b
 12127  001F4C  0E20               	movlw	32
 12128  001F4E  25B2               	addwf	(??_reserve_direntry+2)& (0+255),w,b
 12129  001F50  6FB9               	movwf	reserve_direntry@dptr& (0+255),b
 12130  001F52  0E00               	movlw	0
 12131  001F54  21B3               	addwfc	(??_reserve_direntry+3)& (0+255),w,b
 12132  001F56  6FBA               	movwf	(reserve_direntry@dptr+1)& (0+255),b
 12133                           
 12134                           ; BSR set to: 0
 12135                           ;tff.c: 592: c = dptr[0];
 12136  001F58  C0B9  FFD9         	movff	reserve_direntry@dptr,fsr2l
 12137  001F5C  C0BA  FFDA         	movff	reserve_direntry@dptr+1,fsr2h
 12138  001F60  50DF               	movf	indf2,w,c
 12139  001F62  6FBB               	movwf	reserve_direntry@c& (0+255),b
 12140                           
 12141                           ; BSR set to: 0
 12142                           ;tff.c: 593: if (c == 0 || c == 0xE5) {
 12143  001F64  51BB               	movf	reserve_direntry@c& (0+255),w,b
 12144  001F66  B4D8               	btfsc	status,2,c
 12145  001F68  D004               	goto	u13690
 12146                           
 12147                           ; BSR set to: 0
 12148  001F6A  0EE5               	movlw	229
 12149  001F6C  19BB               	xorwf	reserve_direntry@c& (0+255),w,b
 12150  001F6E  A4D8               	btfss	status,2,c
 12151  001F70  D009               	goto	l12925
 12152  001F72                     u13690:
 12153                           
 12154                           ; BSR set to: 0
 12155                           ;tff.c: 594: *dir = dptr; return FR_OK;
 12156  001F72  51AF               	movf	reserve_direntry@dir& (0+255),w,b
 12157  001F74  6ED9               	movwf	fsr2l,c
 12158  001F76  6ADA               	clrf	fsr2h,c
 12159  001F78  C0B9  FFDE         	movff	reserve_direntry@dptr,postinc2
 12160  001F7C  C0BA  FFDD         	movff	reserve_direntry@dptr+1,postdec2
 12161  001F80                     l12921:
 12162                           
 12163                           ; BSR set to: 0
 12164  001F80  0E00               	movlw	0
 12165  001F82  0012               	return	
 12166  001F84                     l12925:
 12167                           
 12168                           ; BSR set to: 0
 12169                           ;tff.c: 595: };tff.c: 596: } while (next_dir_entry(dj));
 12170  001F84  C0AE  F031         	movff	reserve_direntry@dj,next_dir_entry@dj
 12171  001F88  ECC2  F01A         	call	_next_dir_entry	;wreg free
 12172  001F8C  0900               	iorlw	0
 12173  001F8E  A4D8               	btfss	status,2,c
 12174  001F90  D7AE               	goto	l12905
 12175                           
 12176                           ; BSR set to: 0
 12177                           ;tff.c: 600: if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
 12178  001F92  51BC               	movf	reserve_direntry@clust& (0+255),w,b
 12179  001F94  11BD               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 12180  001F96  B4D8               	btfsc	status,2,c
 12181  001F98  D013               	goto	u13720
 12182                           
 12183                           ; BSR set to: 0
 12184  001F9A  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 12185  001F9C  6ED9               	movwf	fsr2l,c
 12186  001F9E  6ADA               	clrf	fsr2h,c
 12187  001FA0  0E08               	movlw	8
 12188  001FA2  26D9               	addwf	fsr2l,f,c
 12189  001FA4  CFDE F0A0          	movff	postinc2,create_chain@clust
 12190  001FA8  CFDD F0A1          	movff	postdec2,create_chain@clust+1
 12191  001FAC  ECFC  F019         	call	_create_chain	;wreg free
 12192  001FB0  C0A0  F0BC         	movff	?_create_chain,reserve_direntry@clust
 12193  001FB4  C0A1  F0BD         	movff	?_create_chain+1,reserve_direntry@clust+1
 12194  001FB8  51BC               	movf	reserve_direntry@clust& (0+255),w,b
 12195  001FBA  11BD               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 12196  001FBC  A4D8               	btfss	status,2,c
 12197  001FBE  D002               	goto	l12935
 12198  001FC0                     u13720:
 12199                           
 12200                           ; BSR set to: 0
 12201  001FC0  0E06               	movlw	6
 12202  001FC2  0012               	return	
 12203  001FC4                     l12935:
 12204                           
 12205                           ; BSR set to: 0
 12206                           ;tff.c: 601: if (clust == 1 || !move_window(0)) return FR_RW_ERROR;
 12207  001FC4  05BC               	decf	reserve_direntry@clust& (0+255),w,b
 12208  001FC6  11BD               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 12209  001FC8  B4D8               	btfsc	status,2,c
 12210  001FCA  D7A3               	goto	u13660
 12211                           
 12212                           ; BSR set to: 0
 12213  001FCC  0E00               	movlw	0
 12214  001FCE  6F73               	movwf	move_window@sector& (0+255),b
 12215  001FD0  0E00               	movlw	0
 12216  001FD2  6F74               	movwf	(move_window@sector+1)& (0+255),b
 12217  001FD4  0E00               	movlw	0
 12218  001FD6  6F75               	movwf	(move_window@sector+2)& (0+255),b
 12219  001FD8  0E00               	movlw	0
 12220  001FDA  6F76               	movwf	(move_window@sector+3)& (0+255),b
 12221  001FDC  EC58  F018         	call	_move_window	;wreg free
 12222  001FE0  0900               	iorlw	0
 12223  001FE2  B4D8               	btfsc	status,2,c
 12224  001FE4  D796               	goto	u13660
 12225                           
 12226                           ; BSR set to: 0
 12227                           ;tff.c: 603: fs->winsect = sector = clust2sect(clust);
 12228  001FE6  C0BC  F025         	movff	reserve_direntry@clust,clust2sect@clust
 12229  001FEA  C0BD  F026         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 12230  001FEE  EC39  F022         	call	_clust2sect	;wreg free
 12231  001FF2  C025  F0B4         	movff	?_clust2sect,reserve_direntry@sector
 12232  001FF6  C026  F0B5         	movff	?_clust2sect+1,reserve_direntry@sector+1
 12233  001FFA  C027  F0B6         	movff	?_clust2sect+2,reserve_direntry@sector+2
 12234  001FFE  C028  F0B7         	movff	?_clust2sect+3,reserve_direntry@sector+3
 12235  002002  EE20 F004          	lfsr	2,4
 12236  002006  51BE               	movf	reserve_direntry@fs& (0+255),w,b
 12237  002008  26D9               	addwf	fsr2l,f,c
 12238  00200A  51BF               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12239  00200C  22DA               	addwfc	fsr2h,f,c
 12240  00200E  C0B4  FFDE         	movff	reserve_direntry@sector,postinc2
 12241  002012  C0B5  FFDE         	movff	reserve_direntry@sector+1,postinc2
 12242  002016  C0B6  FFDE         	movff	reserve_direntry@sector+2,postinc2
 12243  00201A  C0B7  FFDE         	movff	reserve_direntry@sector+3,postinc2
 12244                           
 12245                           ;tff.c: 604: memset(fs->win, 0, 512U);
 12246  00201E  0E20               	movlw	32
 12247  002020  25BE               	addwf	reserve_direntry@fs& (0+255),w,b
 12248  002022  6E19               	movwf	memset@p1^0,c
 12249  002024  0E00               	movlw	0
 12250  002026  21BF               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 12251  002028  6E1A               	movwf	(memset@p1+1)^0,c
 12252  00202A  0E00               	movlw	0
 12253  00202C  6E1C               	movwf	(memset@c+1)^0,c
 12254  00202E  0E00               	movlw	0
 12255  002030  6E1B               	movwf	memset@c^0,c
 12256  002032  0E02               	movlw	2
 12257  002034  6E1E               	movwf	(memset@n+1)^0,c
 12258  002036  0E00               	movlw	0
 12259  002038  6E1D               	movwf	memset@n^0,c
 12260  00203A  ECBF  F02C         	call	_memset	;wreg free
 12261                           
 12262                           ;tff.c: 605: for (n = fs->csize; n; n--) {
 12263  00203E  0100               	movlb	0	; () banked
 12264  002040  EE20 F01D          	lfsr	2,29
 12265  002044  51BE               	movf	reserve_direntry@fs& (0+255),w,b
 12266  002046  26D9               	addwf	fsr2l,f,c
 12267  002048  51BF               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12268  00204A  22DA               	addwfc	fsr2h,f,c
 12269  00204C  50DF               	movf	indf2,w,c
 12270  00204E  6FB8               	movwf	reserve_direntry@n& (0+255),b
 12271  002050  D01D               	goto	l12957
 12272  002052                     l12947:
 12273                           
 12274                           ; BSR set to: 0
 12275                           ;tff.c: 606: if (disk_write(0, fs->win, sector, 1) != RES_OK)
 12276  002052  0E20               	movlw	32
 12277  002054  25BE               	addwf	reserve_direntry@fs& (0+255),w,b
 12278  002056  6F68               	movwf	disk_write@buff& (0+255),b
 12279  002058  0E00               	movlw	0
 12280  00205A  21BF               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 12281  00205C  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 12282  00205E  C0B4  F06A         	movff	reserve_direntry@sector,disk_write@sector
 12283  002062  C0B5  F06B         	movff	reserve_direntry@sector+1,disk_write@sector+1
 12284  002066  C0B6  F06C         	movff	reserve_direntry@sector+2,disk_write@sector+2
 12285  00206A  C0B7  F06D         	movff	reserve_direntry@sector+3,disk_write@sector+3
 12286  00206E  0E01               	movlw	1
 12287  002070  6F6E               	movwf	disk_write@count& (0+255),b
 12288  002072  0E00               	movlw	0
 12289  002074  EC47  F02A         	call	_disk_write
 12290  002078  0900               	iorlw	0
 12291  00207A  A4D8               	btfss	status,2,c
 12292  00207C  D74A               	goto	u13660
 12293                           
 12294                           ; BSR set to: 0
 12295                           ;tff.c: 608: sector++;
 12296  00207E  0E01               	movlw	1
 12297  002080  27B4               	addwf	reserve_direntry@sector& (0+255),f,b
 12298  002082  0E00               	movlw	0
 12299  002084  23B5               	addwfc	(reserve_direntry@sector+1)& (0+255),f,b
 12300  002086  23B6               	addwfc	(reserve_direntry@sector+2)& (0+255),f,b
 12301  002088  23B7               	addwfc	(reserve_direntry@sector+3)& (0+255),f,b
 12302                           
 12303                           ; BSR set to: 0
 12304  00208A  07B8               	decf	reserve_direntry@n& (0+255),f,b
 12305  00208C                     l12957:
 12306                           
 12307                           ; BSR set to: 0
 12308  00208C  51B8               	movf	reserve_direntry@n& (0+255),w,b
 12309  00208E  A4D8               	btfss	status,2,c
 12310  002090  D7E0               	goto	l12947
 12311                           
 12312                           ; BSR set to: 0
 12313                           ;tff.c: 609: };tff.c: 610: fs->winflag = 1;
 12314  002092  EE20 F01F          	lfsr	2,31
 12315  002096  51BE               	movf	reserve_direntry@fs& (0+255),w,b
 12316  002098  26D9               	addwf	fsr2l,f,c
 12317  00209A  51BF               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 12318  00209C  22DA               	addwfc	fsr2h,f,c
 12319  00209E  0E01               	movlw	1
 12320  0020A0  6EDF               	movwf	indf2,c
 12321                           
 12322                           ;tff.c: 611: *dir = fs->win;
 12323  0020A2  0E20               	movlw	32
 12324  0020A4  25BE               	addwf	reserve_direntry@fs& (0+255),w,b
 12325  0020A6  6FB0               	movwf	??_reserve_direntry& (0+255),b
 12326  0020A8  0E00               	movlw	0
 12327  0020AA  21BF               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 12328  0020AC  6FB1               	movwf	(??_reserve_direntry+1)& (0+255),b
 12329  0020AE  51AF               	movf	reserve_direntry@dir& (0+255),w,b
 12330  0020B0  6ED9               	movwf	fsr2l,c
 12331  0020B2  6ADA               	clrf	fsr2h,c
 12332  0020B4  C0B0  FFDE         	movff	??_reserve_direntry,postinc2
 12333  0020B8  C0B1  FFDD         	movff	??_reserve_direntry+1,postdec2
 12334  0020BC  D761               	goto	l12921
 12335  0020BE                     __end_of_reserve_direntry:
 12336                           	callstack 0
 12337                           
 12338 ;; *************** function _next_dir_entry *****************
 12339 ;; Defined at:
 12340 ;;		line 359 in file "bibliotecas/tff.c"
 12341 ;; Parameters:    Size  Location     Type
 12342 ;;  dj              1   48[COMRAM] PTR struct _DIR_E
 12343 ;;		 -> f_open@dj(14), 
 12344 ;; Auto vars:     Size  Location     Type
 12345 ;;  idx             2   70[BANK0 ] unsigned short 
 12346 ;;  clust           2   68[BANK0 ] unsigned short 
 12347 ;; Return value:  Size  Location     Type
 12348 ;;                  1    wreg      enum E105
 12349 ;; Registers used:
 12350 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12351 ;; Tracked objects:
 12352 ;;		On entry : 0/0
 12353 ;;		On exit  : 3F/0
 12354 ;;		Unchanged: 0/0
 12355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12356 ;;      Params:         1       0       0       0       0       0       0       0       0
 12357 ;;      Locals:         0       4       0       0       0       0       0       0       0
 12358 ;;      Temps:          0       7       0       0       0       0       0       0       0
 12359 ;;      Totals:         1      11       0       0       0       0       0       0       0
 12360 ;;Total ram usage:       12 bytes
 12361 ;; Hardware stack levels used:    1
 12362 ;; Hardware stack levels required when called:   10
 12363 ;; This function calls:
 12364 ;;		_clust2sect
 12365 ;;		_get_cluster
 12366 ;; This function is called by:
 12367 ;;		_trace_path
 12368 ;;		_reserve_direntry
 12369 ;; This function uses a non-reentrant model
 12370 ;;
 12371                           
 12372                           	psect	text64
 12373  003584                     __ptext64:
 12374                           	callstack 0
 12375  003584                     _next_dir_entry:
 12376                           	callstack 15
 12377                           
 12378                           ;tff.c: 363: CLUST clust;;tff.c: 364: WORD idx;;tff.c: 367: idx = dj->index + 1;
 12379                           
 12380                           ; BSR set to: 0
 12381                           ;incstack = 0
 12382  003584  5031               	movf	next_dir_entry@dj^0,w,c
 12383  003586  6ED9               	movwf	fsr2l,c
 12384  003588  6ADA               	clrf	fsr2h,c
 12385  00358A  0E02               	movlw	2
 12386  00358C  26D9               	addwf	fsr2l,f,c
 12387  00358E  CFDE F09D          	movff	postinc2,??_next_dir_entry
 12388  003592  CFDD F09E          	movff	postdec2,??_next_dir_entry+1
 12389  003596  0E01               	movlw	1
 12390  003598  0100               	movlb	0	; () banked
 12391  00359A  259D               	addwf	??_next_dir_entry& (0+255),w,b
 12392  00359C  6FA6               	movwf	next_dir_entry@idx& (0+255),b
 12393  00359E  0E00               	movlw	0
 12394  0035A0  219E               	addwfc	(??_next_dir_entry+1)& (0+255),w,b
 12395  0035A2  6FA7               	movwf	(next_dir_entry@idx+1)& (0+255),b
 12396                           
 12397                           ; BSR set to: 0
 12398                           ;tff.c: 368: if ((idx & 15) == 0) {
 12399  0035A4  C0A6  F09D         	movff	next_dir_entry@idx,??_next_dir_entry
 12400  0035A8  0E0F               	movlw	15
 12401  0035AA  179D               	andwf	??_next_dir_entry& (0+255),f,b
 12402  0035AC  A4D8               	btfss	status,2,c
 12403  0035AE  D091               	goto	l12397
 12404                           
 12405                           ; BSR set to: 0
 12406                           ;tff.c: 369: dj->sect++;
 12407  0035B0  5031               	movf	next_dir_entry@dj^0,w,c
 12408  0035B2  6ED9               	movwf	fsr2l,c
 12409  0035B4  6ADA               	clrf	fsr2h,c
 12410  0035B6  0E0A               	movlw	10
 12411  0035B8  26D9               	addwf	fsr2l,f,c
 12412  0035BA  2ADE               	incf	postinc2,f,c
 12413  0035BC  0E00               	movlw	0
 12414  0035BE  22DE               	addwfc	postinc2,f,c
 12415  0035C0  22DE               	addwfc	postinc2,f,c
 12416  0035C2  22DE               	addwfc	postinc2,f,c
 12417                           
 12418                           ;tff.c: 370: if (dj->clust == 0) {
 12419  0035C4  5031               	movf	next_dir_entry@dj^0,w,c
 12420  0035C6  6ED9               	movwf	fsr2l,c
 12421  0035C8  6ADA               	clrf	fsr2h,c
 12422  0035CA  0E08               	movlw	8
 12423  0035CC  26D9               	addwf	fsr2l,f,c
 12424  0035CE  50DE               	movf	postinc2,w,c
 12425  0035D0  10DE               	iorwf	postinc2,w,c
 12426  0035D2  A4D8               	btfss	status,2,c
 12427  0035D4  D013               	goto	l12381
 12428                           
 12429                           ; BSR set to: 0
 12430                           ;tff.c: 371: if (idx >= dj->fs->n_rootdir) return FALSE;
 12431  0035D6  5031               	movf	next_dir_entry@dj^0,w,c
 12432  0035D8  6ED9               	movwf	fsr2l,c
 12433  0035DA  6ADA               	clrf	fsr2h,c
 12434  0035DC  0E04               	movlw	4
 12435  0035DE  26D9               	addwf	fsr2l,f,c
 12436  0035E0  EE10 F002          	lfsr	1,2
 12437  0035E4  50DE               	movf	postinc2,w,c
 12438  0035E6  26E1               	addwf	fsr1l,f,c
 12439  0035E8  50DD               	movf	postdec2,w,c
 12440  0035EA  22E2               	addwfc	fsr1h,f,c
 12441  0035EC  50E6               	movf	postinc1,w,c
 12442  0035EE  5DA6               	subwf	next_dir_entry@idx& (0+255),w,b
 12443  0035F0  50E6               	movf	postinc1,w,c
 12444  0035F2  59A7               	subwfb	(next_dir_entry@idx+1)& (0+255),w,b
 12445  0035F4  A0D8               	btfss	status,0,c
 12446  0035F6  D06D               	goto	l12397
 12447  0035F8                     u13130:
 12448                           
 12449                           ; BSR set to: 0
 12450  0035F8  0E00               	movlw	0
 12451  0035FA  0012               	return	
 12452  0035FC                     l12381:
 12453                           
 12454                           ; BSR set to: 0
 12455                           ;tff.c: 373: if (((idx / 16) & (dj->fs->csize - 1)) == 0) {
 12456  0035FC  C0A6  F09D         	movff	next_dir_entry@idx,??_next_dir_entry
 12457  003600  C0A7  F09E         	movff	next_dir_entry@idx+1,??_next_dir_entry+1
 12458  003604  0E04               	movlw	4
 12459  003606  6F9F               	movwf	(??_next_dir_entry+2)& (0+255),b
 12460  003608                     u13145:
 12461  003608  90D8               	bcf	status,0,c
 12462  00360A  339E               	rrcf	(??_next_dir_entry+1)& (0+255),f,b
 12463  00360C  339D               	rrcf	??_next_dir_entry& (0+255),f,b
 12464  00360E  2F9F               	decfsz	(??_next_dir_entry+2)& (0+255),f,b
 12465  003610  D7FB               	goto	u13145
 12466  003612  0EFF               	movlw	255
 12467  003614  6FA0               	movwf	(??_next_dir_entry+3)& (0+255),b
 12468  003616  0EFF               	movlw	255
 12469  003618  6FA1               	movwf	(??_next_dir_entry+4)& (0+255),b
 12470  00361A  5031               	movf	next_dir_entry@dj^0,w,c
 12471  00361C  6ED9               	movwf	fsr2l,c
 12472  00361E  6ADA               	clrf	fsr2h,c
 12473  003620  0E04               	movlw	4
 12474  003622  26D9               	addwf	fsr2l,f,c
 12475  003624  EE10 F01D          	lfsr	1,29
 12476  003628  50DE               	movf	postinc2,w,c
 12477  00362A  26E1               	addwf	fsr1l,f,c
 12478  00362C  50DD               	movf	postdec2,w,c
 12479  00362E  22E2               	addwfc	fsr1h,f,c
 12480  003630  50E7               	movf	indf1,w,c
 12481  003632  6FA2               	movwf	(??_next_dir_entry+5)& (0+255),b
 12482  003634  6BA3               	clrf	(??_next_dir_entry+6)& (0+255),b
 12483  003636  51A0               	movf	(??_next_dir_entry+3)& (0+255),w,b
 12484  003638  27A2               	addwf	(??_next_dir_entry+5)& (0+255),f,b
 12485  00363A  51A1               	movf	(??_next_dir_entry+4)& (0+255),w,b
 12486  00363C  23A3               	addwfc	(??_next_dir_entry+6)& (0+255),f,b
 12487  00363E  519D               	movf	??_next_dir_entry& (0+255),w,b
 12488  003640  17A2               	andwf	(??_next_dir_entry+5)& (0+255),f,b
 12489  003642  519E               	movf	(??_next_dir_entry+1)& (0+255),w,b
 12490  003644  17A3               	andwf	(??_next_dir_entry+6)& (0+255),f,b
 12491  003646  51A2               	movf	(??_next_dir_entry+5)& (0+255),w,b
 12492  003648  11A3               	iorwf	(??_next_dir_entry+6)& (0+255),w,b
 12493  00364A  A4D8               	btfss	status,2,c
 12494  00364C  D042               	goto	l12397
 12495                           
 12496                           ; BSR set to: 0
 12497                           ;tff.c: 374: clust = get_cluster(dj->clust);
 12498  00364E  5031               	movf	next_dir_entry@dj^0,w,c
 12499  003650  6ED9               	movwf	fsr2l,c
 12500  003652  6ADA               	clrf	fsr2h,c
 12501  003654  0E08               	movlw	8
 12502  003656  26D9               	addwf	fsr2l,f,c
 12503  003658  CFDE F088          	movff	postinc2,get_cluster@clust
 12504  00365C  CFDD F089          	movff	postdec2,get_cluster@clust+1
 12505  003660  ECA7  F012         	call	_get_cluster	;wreg free
 12506  003664  C088  F0A4         	movff	?_get_cluster,next_dir_entry@clust
 12507  003668  C089  F0A5         	movff	?_get_cluster+1,next_dir_entry@clust+1
 12508                           
 12509                           ; BSR set to: 0
 12510                           ;tff.c: 375: if (clust < 2 || clust >= dj->fs->max_clust)
 12511  00366C  51A5               	movf	(next_dir_entry@clust+1)& (0+255),w,b
 12512  00366E  E104               	bnz	u13160
 12513  003670  0E02               	movlw	2
 12514  003672  5DA4               	subwf	next_dir_entry@clust& (0+255),w,b
 12515  003674  A0D8               	btfss	status,0,c
 12516  003676  D7C0               	goto	u13130
 12517  003678                     u13160:
 12518                           
 12519                           ; BSR set to: 0
 12520  003678  5031               	movf	next_dir_entry@dj^0,w,c
 12521  00367A  6ED9               	movwf	fsr2l,c
 12522  00367C  6ADA               	clrf	fsr2h,c
 12523  00367E  0E04               	movlw	4
 12524  003680  26D9               	addwf	fsr2l,f,c
 12525  003682  EE10 F016          	lfsr	1,22
 12526  003686  50DE               	movf	postinc2,w,c
 12527  003688  26E1               	addwf	fsr1l,f,c
 12528  00368A  50DD               	movf	postdec2,w,c
 12529  00368C  22E2               	addwfc	fsr1h,f,c
 12530  00368E  50E6               	movf	postinc1,w,c
 12531  003690  5DA4               	subwf	next_dir_entry@clust& (0+255),w,b
 12532  003692  50E6               	movf	postinc1,w,c
 12533  003694  59A5               	subwfb	(next_dir_entry@clust+1)& (0+255),w,b
 12534  003696  B0D8               	btfsc	status,0,c
 12535  003698  D7AF               	goto	u13130
 12536                           
 12537                           ; BSR set to: 0
 12538                           ;tff.c: 377: dj->clust = clust;
 12539  00369A  5031               	movf	next_dir_entry@dj^0,w,c
 12540  00369C  6ED9               	movwf	fsr2l,c
 12541  00369E  6ADA               	clrf	fsr2h,c
 12542  0036A0  0E08               	movlw	8
 12543  0036A2  26D9               	addwf	fsr2l,f,c
 12544  0036A4  C0A4  FFDE         	movff	next_dir_entry@clust,postinc2
 12545  0036A8  C0A5  FFDD         	movff	next_dir_entry@clust+1,postdec2
 12546                           
 12547                           ; BSR set to: 0
 12548                           ;tff.c: 378: dj->sect = clust2sect(clust);
 12549  0036AC  C0A4  F025         	movff	next_dir_entry@clust,clust2sect@clust
 12550  0036B0  C0A5  F026         	movff	next_dir_entry@clust+1,clust2sect@clust+1
 12551  0036B4  EC39  F022         	call	_clust2sect	;wreg free
 12552  0036B8  5031               	movf	next_dir_entry@dj^0,w,c
 12553  0036BA  6ED9               	movwf	fsr2l,c
 12554  0036BC  6ADA               	clrf	fsr2h,c
 12555  0036BE  0E0A               	movlw	10
 12556  0036C0  26D9               	addwf	fsr2l,f,c
 12557  0036C2  C025  FFDE         	movff	?_clust2sect,postinc2
 12558  0036C6  C026  FFDE         	movff	?_clust2sect+1,postinc2
 12559  0036CA  C027  FFDE         	movff	?_clust2sect+2,postinc2
 12560  0036CE  C028  FFDE         	movff	?_clust2sect+3,postinc2
 12561  0036D2                     l12397:
 12562                           
 12563                           ; BSR set to: 0
 12564                           ;tff.c: 379: };tff.c: 380: };tff.c: 381: };tff.c: 382: dj->index = idx;
 12565  0036D2  5031               	movf	next_dir_entry@dj^0,w,c
 12566  0036D4  6ED9               	movwf	fsr2l,c
 12567  0036D6  6ADA               	clrf	fsr2h,c
 12568  0036D8  0E02               	movlw	2
 12569  0036DA  26D9               	addwf	fsr2l,f,c
 12570  0036DC  C0A6  FFDE         	movff	next_dir_entry@idx,postinc2
 12571  0036E0  C0A7  FFDD         	movff	next_dir_entry@idx+1,postdec2
 12572                           
 12573                           ; BSR set to: 0
 12574                           ;tff.c: 383: return TRUE;
 12575  0036E4  0E01               	movlw	1
 12576                           
 12577                           ; BSR set to: 0
 12578  0036E6  0012               	return		;funcret
 12579  0036E8                     __end_of_next_dir_entry:
 12580                           	callstack 0
 12581                           
 12582 ;; *************** function _clust2sect *****************
 12583 ;; Defined at:
 12584 ;;		line 339 in file "bibliotecas/tff.c"
 12585 ;; Parameters:    Size  Location     Type
 12586 ;;  clust           2   36[COMRAM] unsigned short 
 12587 ;; Auto vars:     Size  Location     Type
 12588 ;;  fs              2   45[COMRAM] PTR struct _FATFS
 12589 ;;		 -> NULL(0), fs(544), 
 12590 ;; Return value:  Size  Location     Type
 12591 ;;                  4   36[COMRAM] unsigned long 
 12592 ;; Registers used:
 12593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12594 ;; Tracked objects:
 12595 ;;		On entry : 3F/0
 12596 ;;		On exit  : 3F/0
 12597 ;;		Unchanged: 3F/0
 12598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12599 ;;      Params:         4       0       0       0       0       0       0       0       0
 12600 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12601 ;;      Temps:          5       0       0       0       0       0       0       0       0
 12602 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12603 ;;Total ram usage:       11 bytes
 12604 ;; Hardware stack levels used:    1
 12605 ;; Hardware stack levels required when called:    4
 12606 ;; This function calls:
 12607 ;;		___lmul
 12608 ;; This function is called by:
 12609 ;;		_next_dir_entry
 12610 ;;		_trace_path
 12611 ;;		_reserve_direntry
 12612 ;;		_f_write
 12613 ;;		_f_read
 12614 ;; This function uses a non-reentrant model
 12615 ;;
 12616                           
 12617                           	psect	text65
 12618  004472                     __ptext65:
 12619                           	callstack 0
 12620  004472                     _clust2sect:
 12621                           	callstack 19
 12622                           
 12623                           ; BSR set to: 0
 12624                           ;tff.c: 343: FATFS *fs = FatFs;
 12625                           
 12626                           ; BSR set to: 0
 12627                           ;incstack = 0
 12628  004472  C037  F02E         	movff	_FatFs,clust2sect@fs
 12629  004476  C038  F02F         	movff	_FatFs+1,clust2sect@fs+1
 12630                           
 12631                           ;tff.c: 346: clust -= 2;
 12632  00447A  0E02               	movlw	2
 12633  00447C  5E25               	subwf	clust2sect@clust^0,f,c
 12634  00447E  0E00               	movlw	0
 12635  004480  5A26               	subwfb	(clust2sect@clust+1)^0,f,c
 12636                           
 12637                           ; BSR set to: 0
 12638                           ;tff.c: 347: if (clust >= (fs->max_clust - 2)) return 0;
 12639  004482  0EFE               	movlw	254
 12640  004484  6E29               	movwf	??_clust2sect^0,c
 12641  004486  0EFF               	movlw	255
 12642  004488  6E2A               	movwf	(??_clust2sect+1)^0,c
 12643  00448A  EE20 F016          	lfsr	2,22
 12644  00448E  502E               	movf	clust2sect@fs^0,w,c
 12645  004490  26D9               	addwf	fsr2l,f,c
 12646  004492  502F               	movf	(clust2sect@fs+1)^0,w,c
 12647  004494  22DA               	addwfc	fsr2h,f,c
 12648  004496  CFDE F02B          	movff	postinc2,??_clust2sect+2
 12649  00449A  CFDD F02C          	movff	postdec2,??_clust2sect+3
 12650  00449E  5029               	movf	??_clust2sect^0,w,c
 12651  0044A0  262B               	addwf	(??_clust2sect+2)^0,f,c
 12652  0044A2  502A               	movf	(??_clust2sect+1)^0,w,c
 12653  0044A4  222C               	addwfc	(??_clust2sect+3)^0,f,c
 12654  0044A6  502B               	movf	(??_clust2sect+2)^0,w,c
 12655  0044A8  5C25               	subwf	clust2sect@clust^0,w,c
 12656  0044AA  502C               	movf	(??_clust2sect+3)^0,w,c
 12657  0044AC  5826               	subwfb	(clust2sect@clust+1)^0,w,c
 12658  0044AE  A0D8               	btfss	status,0,c
 12659  0044B0  D009               	goto	l11873
 12660                           
 12661                           ; BSR set to: 0
 12662  0044B2  0E00               	movlw	0
 12663  0044B4  6E25               	movwf	?_clust2sect^0,c
 12664  0044B6  0E00               	movlw	0
 12665  0044B8  6E26               	movwf	(?_clust2sect+1)^0,c
 12666  0044BA  0E00               	movlw	0
 12667  0044BC  6E27               	movwf	(?_clust2sect+2)^0,c
 12668  0044BE  0E00               	movlw	0
 12669  0044C0  6E28               	movwf	(?_clust2sect+3)^0,c
 12670  0044C2  0012               	return	
 12671  0044C4                     l11873:
 12672                           
 12673                           ; BSR set to: 0
 12674                           ;tff.c: 348: return (DWORD)clust * fs->csize + fs->database;
 12675  0044C4  EE20 F010          	lfsr	2,16
 12676  0044C8  502E               	movf	clust2sect@fs^0,w,c
 12677  0044CA  26D9               	addwf	fsr2l,f,c
 12678  0044CC  502F               	movf	(clust2sect@fs+1)^0,w,c
 12679  0044CE  22DA               	addwfc	fsr2h,f,c
 12680  0044D0  CFDE F029          	movff	postinc2,??_clust2sect
 12681  0044D4  CFDE F02A          	movff	postinc2,??_clust2sect+1
 12682  0044D8  CFDE F02B          	movff	postinc2,??_clust2sect+2
 12683  0044DC  CFDE F02C          	movff	postinc2,??_clust2sect+3
 12684  0044E0  C025  F019         	movff	clust2sect@clust,___lmul@multiplier
 12685  0044E4  C026  F01A         	movff	clust2sect@clust+1,___lmul@multiplier+1
 12686  0044E8  6A1B               	clrf	(___lmul@multiplier+2)^0,c
 12687  0044EA  6A1C               	clrf	(___lmul@multiplier+3)^0,c
 12688  0044EC  EE20 F01D          	lfsr	2,29
 12689  0044F0  502E               	movf	clust2sect@fs^0,w,c
 12690  0044F2  26D9               	addwf	fsr2l,f,c
 12691  0044F4  502F               	movf	(clust2sect@fs+1)^0,w,c
 12692  0044F6  22DA               	addwfc	fsr2h,f,c
 12693  0044F8  50DF               	movf	indf2,w,c
 12694  0044FA  6E2D               	movwf	(??_clust2sect+4)^0,c
 12695  0044FC  502D               	movf	(??_clust2sect+4)^0,w,c
 12696  0044FE  6E1D               	movwf	___lmul@multiplicand^0,c
 12697  004500  6A1E               	clrf	(___lmul@multiplicand+1)^0,c
 12698  004502  6A1F               	clrf	(___lmul@multiplicand+2)^0,c
 12699  004504  6A20               	clrf	(___lmul@multiplicand+3)^0,c
 12700  004506  EC4F  F029         	call	___lmul	;wreg free
 12701  00450A  5029               	movf	??_clust2sect^0,w,c
 12702  00450C  2419               	addwf	?___lmul^0,w,c
 12703  00450E  6E25               	movwf	?_clust2sect^0,c
 12704  004510  502A               	movf	(??_clust2sect+1)^0,w,c
 12705  004512  201A               	addwfc	(?___lmul+1)^0,w,c
 12706  004514  6E26               	movwf	(?_clust2sect+1)^0,c
 12707  004516  502B               	movf	(??_clust2sect+2)^0,w,c
 12708  004518  201B               	addwfc	(?___lmul+2)^0,w,c
 12709  00451A  6E27               	movwf	(?_clust2sect+2)^0,c
 12710  00451C  502C               	movf	(??_clust2sect+3)^0,w,c
 12711  00451E  201C               	addwfc	(?___lmul+3)^0,w,c
 12712  004520  6E28               	movwf	(?_clust2sect+3)^0,c
 12713                           
 12714                           ; BSR set to: 0
 12715  004522  0012               	return		;funcret
 12716  004524                     __end_of_clust2sect:
 12717                           	callstack 0
 12718                           
 12719 ;; *************** function _remove_chain *****************
 12720 ;; Defined at:
 12721 ;;		line 250 in file "bibliotecas/tff.c"
 12722 ;; Parameters:    Size  Location     Type
 12723 ;;  clust           2   64[BANK0 ] unsigned short 
 12724 ;; Auto vars:     Size  Location     Type
 12725 ;;  fs              2   70[BANK0 ] PTR struct _FATFS
 12726 ;;		 -> NULL(0), fs(544), 
 12727 ;;  nxt             2   68[BANK0 ] unsigned short 
 12728 ;; Return value:  Size  Location     Type
 12729 ;;                  1    wreg      enum E105
 12730 ;; Registers used:
 12731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12732 ;; Tracked objects:
 12733 ;;		On entry : 3F/0
 12734 ;;		On exit  : 3F/0
 12735 ;;		Unchanged: 0/0
 12736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12737 ;;      Params:         0       2       0       0       0       0       0       0       0
 12738 ;;      Locals:         0       4       0       0       0       0       0       0       0
 12739 ;;      Temps:          0       2       0       0       0       0       0       0       0
 12740 ;;      Totals:         0       8       0       0       0       0       0       0       0
 12741 ;;Total ram usage:        8 bytes
 12742 ;; Hardware stack levels used:    1
 12743 ;; Hardware stack levels required when called:   10
 12744 ;; This function calls:
 12745 ;;		_get_cluster
 12746 ;;		_put_cluster
 12747 ;; This function is called by:
 12748 ;;		_f_open
 12749 ;; This function uses a non-reentrant model
 12750 ;;
 12751                           
 12752                           	psect	text66
 12753  00491A                     __ptext66:
 12754                           	callstack 0
 12755  00491A                     _remove_chain:
 12756                           	callstack 16
 12757                           
 12758                           ; BSR set to: 0
 12759                           ;tff.c: 254: CLUST nxt;;tff.c: 255: FATFS *fs = FatFs;
 12760                           
 12761                           ; BSR set to: 0
 12762                           ;incstack = 0
 12763  00491A  C037  F0A6         	movff	_FatFs,remove_chain@fs
 12764  00491E  C038  F0A7         	movff	_FatFs+1,remove_chain@fs+1
 12765                           
 12766                           ;tff.c: 258: while (clust >= 2 && clust < fs->max_clust) {
 12767  004922  D035               	goto	l12799
 12768  004924                     l12779:
 12769                           
 12770                           ; BSR set to: 0
 12771                           ;tff.c: 259: nxt = get_cluster(clust);
 12772  004924  C0A0  F088         	movff	remove_chain@clust,get_cluster@clust
 12773  004928  C0A1  F089         	movff	remove_chain@clust+1,get_cluster@clust+1
 12774  00492C  ECA7  F012         	call	_get_cluster	;wreg free
 12775  004930  C088  F0A4         	movff	?_get_cluster,remove_chain@nxt
 12776  004934  C089  F0A5         	movff	?_get_cluster+1,remove_chain@nxt+1
 12777                           
 12778                           ; BSR set to: 0
 12779                           ;tff.c: 260: if (nxt == 1) return FALSE;
 12780  004938  05A4               	decf	remove_chain@nxt& (0+255),w,b
 12781  00493A  11A5               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
 12782  00493C  A4D8               	btfss	status,2,c
 12783  00493E  D002               	goto	l12787
 12784  004940                     u13460:
 12785                           
 12786                           ; BSR set to: 0
 12787  004940  0E00               	movlw	0
 12788  004942  0012               	return	
 12789  004944                     l12787:
 12790                           
 12791                           ; BSR set to: 0
 12792                           ;tff.c: 261: if (!put_cluster(clust, 0)) return FALSE;
 12793  004944  C0A0  F088         	movff	remove_chain@clust,put_cluster@clust
 12794  004948  C0A1  F089         	movff	remove_chain@clust+1,put_cluster@clust+1
 12795  00494C  0E00               	movlw	0
 12796  00494E  6F8B               	movwf	(put_cluster@val+1)& (0+255),b
 12797  004950  0E00               	movlw	0
 12798  004952  6F8A               	movwf	put_cluster@val& (0+255),b
 12799  004954  EC5F  F010         	call	_put_cluster	;wreg free
 12800  004958  0900               	iorlw	0
 12801  00495A  B4D8               	btfsc	status,2,c
 12802  00495C  D7F1               	goto	u13460
 12803                           
 12804                           ; BSR set to: 0
 12805                           ;tff.c: 262: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 12806  00495E  EE20 F01A          	lfsr	2,26
 12807  004962  51A6               	movf	remove_chain@fs& (0+255),w,b
 12808  004964  26D9               	addwf	fsr2l,f,c
 12809  004966  51A7               	movf	(remove_chain@fs+1)& (0+255),w,b
 12810  004968  22DA               	addwfc	fsr2h,f,c
 12811  00496A  28DE               	incf	postinc2,w,c
 12812  00496C  E103               	bnz	u13480
 12813  00496E  28DE               	incf	postinc2,w,c
 12814  004970  B4D8               	btfsc	status,2,c
 12815  004972  D009               	goto	l12797
 12816  004974                     u13480:
 12817                           
 12818                           ; BSR set to: 0
 12819                           ;tff.c: 263: fs->free_clust++;
 12820  004974  EE20 F01A          	lfsr	2,26
 12821  004978  51A6               	movf	remove_chain@fs& (0+255),w,b
 12822  00497A  26D9               	addwf	fsr2l,f,c
 12823  00497C  51A7               	movf	(remove_chain@fs+1)& (0+255),w,b
 12824  00497E  22DA               	addwfc	fsr2h,f,c
 12825  004980  2ADE               	incf	postinc2,f,c
 12826  004982  0E00               	movlw	0
 12827  004984  22DD               	addwfc	postdec2,f,c
 12828  004986                     l12797:
 12829                           
 12830                           ; BSR set to: 0
 12831                           ;tff.c: 267: };tff.c: 268: clust = nxt;
 12832  004986  C0A4  F0A0         	movff	remove_chain@nxt,remove_chain@clust
 12833  00498A  C0A5  F0A1         	movff	remove_chain@nxt+1,remove_chain@clust+1
 12834  00498E                     l12799:
 12835                           
 12836                           ; BSR set to: 0
 12837  00498E  51A1               	movf	(remove_chain@clust+1)& (0+255),w,b
 12838  004990  E104               	bnz	u13490
 12839  004992  0E02               	movlw	2
 12840  004994  5DA0               	subwf	remove_chain@clust& (0+255),w,b
 12841  004996  A0D8               	btfss	status,0,c
 12842  004998  D00C               	goto	u13500
 12843  00499A                     u13490:
 12844                           
 12845                           ; BSR set to: 0
 12846  00499A  EE20 F016          	lfsr	2,22
 12847  00499E  51A6               	movf	remove_chain@fs& (0+255),w,b
 12848  0049A0  26D9               	addwf	fsr2l,f,c
 12849  0049A2  51A7               	movf	(remove_chain@fs+1)& (0+255),w,b
 12850  0049A4  22DA               	addwfc	fsr2h,f,c
 12851  0049A6  50DE               	movf	postinc2,w,c
 12852  0049A8  5DA0               	subwf	remove_chain@clust& (0+255),w,b
 12853  0049AA  50DE               	movf	postinc2,w,c
 12854  0049AC  59A1               	subwfb	(remove_chain@clust+1)& (0+255),w,b
 12855  0049AE  A0D8               	btfss	status,0,c
 12856  0049B0  D7B9               	goto	l12779
 12857  0049B2                     u13500:
 12858                           
 12859                           ; BSR set to: 0
 12860                           ;tff.c: 269: };tff.c: 270: return TRUE;
 12861  0049B2  0E01               	movlw	1
 12862                           
 12863                           ; BSR set to: 0
 12864  0049B4  0012               	return		;funcret
 12865  0049B6                     __end_of_remove_chain:
 12866                           	callstack 0
 12867                           
 12868 ;; *************** function _memcpy *****************
 12869 ;; Defined at:
 12870 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\memcpy.c"
 12871 ;; Parameters:    Size  Location     Type
 12872 ;;  d1              2   24[COMRAM] PTR void 
 12873 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 12874 ;;  s1              2   26[COMRAM] PTR const void 
 12875 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 12876 ;;		 -> fs(544), 
 12877 ;;  n               2   28[COMRAM] unsigned int 
 12878 ;; Auto vars:     Size  Location     Type
 12879 ;;  s               2   33[COMRAM] PTR const unsigned char 
 12880 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 12881 ;;		 -> fs(544), 
 12882 ;;  d               2   31[COMRAM] PTR unsigned char 
 12883 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 12884 ;;  tmp             1   30[COMRAM] unsigned char 
 12885 ;; Return value:  Size  Location     Type
 12886 ;;                  2   24[COMRAM] PTR void 
 12887 ;; Registers used:
 12888 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12889 ;; Tracked objects:
 12890 ;;		On entry : 0/0
 12891 ;;		On exit  : 0/0
 12892 ;;		Unchanged: 0/0
 12893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12894 ;;      Params:         6       0       0       0       0       0       0       0       0
 12895 ;;      Locals:         5       0       0       0       0       0       0       0       0
 12896 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12897 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12898 ;;Total ram usage:       11 bytes
 12899 ;; Hardware stack levels used:    1
 12900 ;; Hardware stack levels required when called:    3
 12901 ;; This function calls:
 12902 ;;		Nothing
 12903 ;; This function is called by:
 12904 ;;		_f_open
 12905 ;;		_f_write
 12906 ;;		_f_read
 12907 ;; This function uses a non-reentrant model
 12908 ;;
 12909                           
 12910                           	psect	text67
 12911  0056D0                     __ptext67:
 12912                           	callstack 0
 12913  0056D0                     _memcpy:
 12914                           	callstack 20
 12915                           
 12916                           ; BSR set to: 0
 12917                           ;incstack = 0
 12918  0056D0  C01B  F022         	movff	memcpy@s1,memcpy@s
 12919  0056D4  C01C  F023         	movff	memcpy@s1+1,memcpy@s+1
 12920  0056D8  C019  F020         	movff	memcpy@d1,memcpy@d
 12921  0056DC  C01A  F021         	movff	memcpy@d1+1,memcpy@d+1
 12922  0056E0  D010               	goto	l11907
 12923  0056E2                     l11899:
 12924  0056E2  C022  FFD9         	movff	memcpy@s,fsr2l
 12925  0056E6  C023  FFDA         	movff	memcpy@s+1,fsr2h
 12926  0056EA  50DF               	movf	indf2,w,c
 12927  0056EC  6E1F               	movwf	memcpy@tmp^0,c
 12928  0056EE  4A22               	infsnz	memcpy@s^0,f,c
 12929  0056F0  2A23               	incf	(memcpy@s+1)^0,f,c
 12930  0056F2  C020  FFD9         	movff	memcpy@d,fsr2l
 12931  0056F6  C021  FFDA         	movff	memcpy@d+1,fsr2h
 12932  0056FA  C01F  FFDF         	movff	memcpy@tmp,indf2
 12933  0056FE  4A20               	infsnz	memcpy@d^0,f,c
 12934  005700  2A21               	incf	(memcpy@d+1)^0,f,c
 12935  005702                     l11907:
 12936  005702  061D               	decf	memcpy@n^0,f,c
 12937  005704  A0D8               	btfss	status,0,c
 12938  005706  061E               	decf	(memcpy@n+1)^0,f,c
 12939  005708  281D               	incf	memcpy@n^0,w,c
 12940  00570A  E1EB               	bnz	l11899
 12941  00570C  281E               	incf	(memcpy@n+1)^0,w,c
 12942  00570E  B4D8               	btfsc	status,2,c
 12943  005710  0012               	return	
 12944  005712  D7E7               	goto	l11899
 12945  005714                     __end_of_memcpy:
 12946                           	callstack 0
 12947                           
 12948 ;; *************** function _auto_mount *****************
 12949 ;; Defined at:
 12950 ;;		line 652 in file "bibliotecas/tff.c"
 12951 ;; Parameters:    Size  Location     Type
 12952 ;;  path            1   27[BANK0 ] PTR PTR const unsigned c
 12953 ;;		 -> f_opendir@path(2), f_open@path(2), 
 12954 ;;  chk_wp          1   28[BANK0 ] unsigned char 
 12955 ;; Auto vars:     Size  Location     Type
 12956 ;;  fatsize         4   67[BANK0 ] unsigned long 
 12957 ;;  totalsect       4   59[BANK0 ] unsigned long 
 12958 ;;  bootsect        4   55[BANK0 ] unsigned long 
 12959 ;;  maxclust        4   51[BANK0 ] unsigned long 
 12960 ;;  fs              2   71[BANK0 ] PTR struct _FATFS
 12961 ;;		 -> NULL(0), fs(544), 
 12962 ;;  p               2   63[BANK0 ] PTR const unsigned char 
 12963 ;;		 -> STR_20(13), filename(20), 
 12964 ;;  stat            1   66[BANK0 ] unsigned char 
 12965 ;;  fmt             1   65[BANK0 ] unsigned char 
 12966 ;; Return value:  Size  Location     Type
 12967 ;;                  1    wreg      enum E155
 12968 ;; Registers used:
 12969 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12970 ;; Tracked objects:
 12971 ;;		On entry : 3F/0
 12972 ;;		On exit  : 3E/0
 12973 ;;		Unchanged: 0/0
 12974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12975 ;;      Params:         0       2       0       0       0       0       0       0       0
 12976 ;;      Locals:         0      22       0       0       0       0       0       0       0
 12977 ;;      Temps:          0      22       0       0       0       0       0       0       0
 12978 ;;      Totals:         0      46       0       0       0       0       0       0       0
 12979 ;;Total ram usage:       46 bytes
 12980 ;; Hardware stack levels used:    1
 12981 ;; Hardware stack levels required when called:    9
 12982 ;; This function calls:
 12983 ;;		___lldiv
 12984 ;;		___lmul
 12985 ;;		_check_fs
 12986 ;;		_disk_initialize
 12987 ;;		_disk_status
 12988 ;;		_memset
 12989 ;; This function is called by:
 12990 ;;		_f_open
 12991 ;; This function uses a non-reentrant model
 12992 ;;
 12993                           
 12994                           	psect	text68
 12995  00059C                     __ptext68:
 12996                           	callstack 0
 12997  00059C                     _auto_mount:
 12998                           	callstack 17
 12999                           
 13000                           ; BSR set to: 0
 13001                           ;tff.c: 657: BYTE fmt;;tff.c: 658: DSTATUS stat;;tff.c: 659: DWORD bootsect, fatsize, to
      +                          talsect, maxclust;;tff.c: 660: const char *p = *path;
 13002                           
 13003                           ;incstack = 0
 13004  00059C  517B               	movf	auto_mount@path& (0+255),w,b
 13005  00059E  6ED9               	movwf	fsr2l,c
 13006  0005A0  6ADA               	clrf	fsr2h,c
 13007  0005A2  CFDE F09F          	movff	postinc2,auto_mount@p
 13008  0005A6  CFDD F0A0          	movff	postdec2,auto_mount@p+1
 13009                           
 13010                           ;tff.c: 661: FATFS *fs;;tff.c: 664: while (*p == ' ') p++;
 13011  0005AA  D003               	goto	l12969
 13012  0005AC                     l12967:
 13013  0005AC  0100               	movlb	0	; () banked
 13014  0005AE  4B9F               	infsnz	auto_mount@p& (0+255),f,b
 13015  0005B0  2BA0               	incf	(auto_mount@p+1)& (0+255),f,b
 13016  0005B2                     l12969:
 13017                           
 13018                           ; BSR set to: 0
 13019  0005B2  C09F  FFF6         	movff	auto_mount@p,tblptrl
 13020  0005B6  C0A0  FFF7         	movff	auto_mount@p+1,tblptrh
 13021  0005BA  6AF8               	clrf	tblptru,c
 13022  0005BC  0E07               	movlw	(high __ramtop+-1)
 13023  0005BE  64F7               	cpfsgt	tblptrh,c
 13024  0005C0  D003               	bra	u13777
 13025  0005C2  0008               	tblrd		*
 13026  0005C4  50F5               	movf	tablat,w,c
 13027  0005C6  D005               	bra	u13770
 13028  0005C8                     u13777:
 13029  0005C8  CFF6 FFE1          	movff	tblptrl,fsr1l
 13030  0005CC  CFF7 FFE2          	movff	tblptrh,fsr1h
 13031  0005D0  50E7               	movf	indf1,w,c
 13032  0005D2                     u13770:
 13033  0005D2  0A20               	xorlw	32
 13034  0005D4  B4D8               	btfsc	status,2,c
 13035  0005D6  D7EA               	goto	l12967
 13036                           
 13037                           ;tff.c: 665: if (*p == '/') p++;
 13038  0005D8  C09F  FFF6         	movff	auto_mount@p,tblptrl
 13039  0005DC  C0A0  FFF7         	movff	auto_mount@p+1,tblptrh
 13040  0005E0  6AF8               	clrf	tblptru,c
 13041  0005E2  0E07               	movlw	(high __ramtop+-1)
 13042  0005E4  64F7               	cpfsgt	tblptrh,c
 13043  0005E6  D003               	bra	u13797
 13044  0005E8  0008               	tblrd		*
 13045  0005EA  50F5               	movf	tablat,w,c
 13046  0005EC  D005               	bra	u13790
 13047  0005EE                     u13797:
 13048  0005EE  CFF6 FFE1          	movff	tblptrl,fsr1l
 13049  0005F2  CFF7 FFE2          	movff	tblptrh,fsr1h
 13050  0005F6  50E7               	movf	indf1,w,c
 13051  0005F8                     u13790:
 13052  0005F8  0A2F               	xorlw	47
 13053  0005FA  A4D8               	btfss	status,2,c
 13054  0005FC  D003               	goto	l12975
 13055  0005FE  0100               	movlb	0	; () banked
 13056  000600  4B9F               	infsnz	auto_mount@p& (0+255),f,b
 13057  000602  2BA0               	incf	(auto_mount@p+1)& (0+255),f,b
 13058  000604                     l12975:
 13059                           
 13060                           ;tff.c: 666: *path = p;
 13061  000604  0100               	movlb	0	; () banked
 13062  000606  517B               	movf	auto_mount@path& (0+255),w,b
 13063  000608  6ED9               	movwf	fsr2l,c
 13064  00060A  6ADA               	clrf	fsr2h,c
 13065  00060C  C09F  FFDE         	movff	auto_mount@p,postinc2
 13066  000610  C0A0  FFDD         	movff	auto_mount@p+1,postdec2
 13067                           
 13068                           ; BSR set to: 0
 13069                           ;tff.c: 669: fs = FatFs;
 13070  000614  C037  F0A7         	movff	_FatFs,auto_mount@fs
 13071  000618  C038  F0A8         	movff	_FatFs+1,auto_mount@fs+1
 13072                           
 13073                           ; BSR set to: 0
 13074                           ;tff.c: 670: if (!fs) return FR_NOT_ENABLED;
 13075  00061C  51A7               	movf	auto_mount@fs& (0+255),w,b
 13076  00061E  11A8               	iorwf	(auto_mount@fs+1)& (0+255),w,b
 13077  000620  A4D8               	btfss	status,2,c
 13078  000622  D002               	goto	l12985
 13079                           
 13080                           ; BSR set to: 0
 13081  000624  0E0A               	movlw	10
 13082  000626  0012               	return	
 13083  000628                     l12985:
 13084                           
 13085                           ; BSR set to: 0
 13086                           ;tff.c: 672: if (fs->fs_type) {
 13087  000628  EE20 F01C          	lfsr	2,28
 13088  00062C  51A7               	movf	auto_mount@fs& (0+255),w,b
 13089  00062E  26D9               	addwf	fsr2l,f,c
 13090  000630  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13091  000632  22DA               	addwfc	fsr2h,f,c
 13092  000634  50DF               	movf	indf2,w,c
 13093  000636  B4D8               	btfsc	status,2,c
 13094  000638  D00F               	goto	l13003
 13095                           
 13096                           ; BSR set to: 0
 13097                           ;tff.c: 673: stat = disk_status(0);
 13098  00063A  0E00               	movlw	0
 13099  00063C  EC90  F02C         	call	_disk_status
 13100  000640  0100               	movlb	0	; () banked
 13101  000642  6FA2               	movwf	auto_mount@stat& (0+255),b
 13102                           
 13103                           ; BSR set to: 0
 13104                           ;tff.c: 674: if (!(stat & 0x01)) {
 13105  000644  B1A2               	btfsc	auto_mount@stat& (0+255),0,b
 13106  000646  D008               	goto	l13003
 13107                           
 13108                           ; BSR set to: 0
 13109                           ;tff.c: 676: if (chk_wp && (stat & 0x04))
 13110  000648  517C               	movf	auto_mount@chk_wp& (0+255),w,b
 13111  00064A  A4D8               	btfss	status,2,c
 13112                           
 13113                           ; BSR set to: 0
 13114  00064C  A5A2               	btfss	auto_mount@stat& (0+255),2,b
 13115  00064E  D002               	goto	l12999
 13116  000650                     u13850:
 13117                           
 13118                           ; BSR set to: 0
 13119                           ;tff.c: 677: return FR_WRITE_PROTECTED;
 13120  000650  0E09               	movlw	9
 13121  000652  0012               	return	
 13122  000654                     l12999:
 13123                           
 13124                           ; BSR set to: 0
 13125                           ;tff.c: 679: return FR_OK;
 13126  000654  0E00               	movlw	0
 13127  000656  0012               	return	
 13128  000658                     l13003:
 13129                           
 13130                           ; BSR set to: 0
 13131                           ;tff.c: 680: };tff.c: 681: };tff.c: 685: memset(fs, 0, sizeof(FATFS));
 13132  000658  C0A7  F019         	movff	auto_mount@fs,memset@p1
 13133  00065C  C0A8  F01A         	movff	auto_mount@fs+1,memset@p1+1
 13134  000660  0E00               	movlw	0
 13135  000662  6E1C               	movwf	(memset@c+1)^0,c
 13136  000664  0E00               	movlw	0
 13137  000666  6E1B               	movwf	memset@c^0,c
 13138  000668  0E02               	movlw	2
 13139  00066A  6E1E               	movwf	(memset@n+1)^0,c
 13140  00066C  0E20               	movlw	32
 13141  00066E  6E1D               	movwf	memset@n^0,c
 13142  000670  ECBF  F02C         	call	_memset	;wreg free
 13143                           
 13144                           ;tff.c: 686: stat = disk_initialize(0);
 13145  000674  0E00               	movlw	0
 13146  000676  EC52  F02D         	call	_disk_initialize
 13147  00067A  0100               	movlb	0	; () banked
 13148  00067C  6FA2               	movwf	auto_mount@stat& (0+255),b
 13149                           
 13150                           ; BSR set to: 0
 13151                           ;tff.c: 687: if (stat & 0x01)
 13152  00067E  A1A2               	btfss	auto_mount@stat& (0+255),0,b
 13153  000680  D002               	goto	l13013
 13154                           
 13155                           ; BSR set to: 0
 13156                           ;tff.c: 688: return FR_NOT_READY;
 13157  000682  0E01               	movlw	1
 13158  000684  0012               	return	
 13159  000686                     l13013:
 13160                           
 13161                           ; BSR set to: 0
 13162                           ;tff.c: 690: if (chk_wp && (stat & 0x04))
 13163  000686  517C               	movf	auto_mount@chk_wp& (0+255),w,b
 13164  000688  B4D8               	btfsc	status,2,c
 13165  00068A  D002               	goto	l13021
 13166                           
 13167                           ; BSR set to: 0
 13168  00068C  B5A2               	btfsc	auto_mount@stat& (0+255),2,b
 13169  00068E  D7E0               	goto	u13850
 13170  000690                     l13021:
 13171                           
 13172                           ; BSR set to: 0
 13173                           ;tff.c: 695: fmt = check_fs(bootsect = 0);
 13174  000690  0E00               	movlw	0
 13175  000692  6F97               	movwf	auto_mount@bootsect& (0+255),b
 13176  000694  0E00               	movlw	0
 13177  000696  6F98               	movwf	(auto_mount@bootsect+1)& (0+255),b
 13178  000698  0E00               	movlw	0
 13179  00069A  6F99               	movwf	(auto_mount@bootsect+2)& (0+255),b
 13180  00069C  0E00               	movlw	0
 13181  00069E  6F9A               	movwf	(auto_mount@bootsect+3)& (0+255),b
 13182  0006A0  C097  F073         	movff	auto_mount@bootsect,check_fs@sect
 13183  0006A4  C098  F074         	movff	auto_mount@bootsect+1,check_fs@sect+1
 13184  0006A8  C099  F075         	movff	auto_mount@bootsect+2,check_fs@sect+2
 13185  0006AC  C09A  F076         	movff	auto_mount@bootsect+3,check_fs@sect+3
 13186  0006B0  EC0F  F027         	call	_check_fs	;wreg free
 13187  0006B4  0100               	movlb	0	; () banked
 13188  0006B6  6FA1               	movwf	auto_mount@fmt& (0+255),b
 13189                           
 13190                           ; BSR set to: 0
 13191                           ;tff.c: 697: if (fmt == 1) {
 13192  0006B8  05A1               	decf	auto_mount@fmt& (0+255),w,b
 13193  0006BA  A4D8               	btfss	status,2,c
 13194  0006BC  D023               	goto	l13031
 13195                           
 13196                           ; BSR set to: 0
 13197                           ;tff.c: 699: if (fs->win[446+4]) {
 13198  0006BE  EE21 F0E2          	lfsr	2,482
 13199  0006C2  51A7               	movf	auto_mount@fs& (0+255),w,b
 13200  0006C4  26D9               	addwf	fsr2l,f,c
 13201  0006C6  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13202  0006C8  22DA               	addwfc	fsr2h,f,c
 13203  0006CA  50DF               	movf	indf2,w,c
 13204  0006CC  B4D8               	btfsc	status,2,c
 13205  0006CE  D01A               	goto	l13031
 13206                           
 13207                           ; BSR set to: 0
 13208                           ;tff.c: 700: bootsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[446+8]));
 13209  0006D0  EE21 F0E6          	lfsr	2,486
 13210  0006D4  51A7               	movf	auto_mount@fs& (0+255),w,b
 13211  0006D6  26D9               	addwf	fsr2l,f,c
 13212  0006D8  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13213  0006DA  22DA               	addwfc	fsr2h,f,c
 13214  0006DC  CFDE F097          	movff	postinc2,auto_mount@bootsect
 13215  0006E0  CFDE F098          	movff	postinc2,auto_mount@bootsect+1
 13216  0006E4  CFDE F099          	movff	postinc2,auto_mount@bootsect+2
 13217  0006E8  CFDE F09A          	movff	postinc2,auto_mount@bootsect+3
 13218                           
 13219                           ; BSR set to: 0
 13220                           ;tff.c: 701: fmt = check_fs(bootsect);
 13221  0006EC  C097  F073         	movff	auto_mount@bootsect,check_fs@sect
 13222  0006F0  C098  F074         	movff	auto_mount@bootsect+1,check_fs@sect+1
 13223  0006F4  C099  F075         	movff	auto_mount@bootsect+2,check_fs@sect+2
 13224  0006F8  C09A  F076         	movff	auto_mount@bootsect+3,check_fs@sect+3
 13225  0006FC  EC0F  F027         	call	_check_fs	;wreg free
 13226  000700  0100               	movlb	0	; () banked
 13227  000702  6FA1               	movwf	auto_mount@fmt& (0+255),b
 13228  000704                     l13031:
 13229                           
 13230                           ; BSR set to: 0
 13231                           ;tff.c: 702: };tff.c: 703: };tff.c: 704: if (fmt || (WORD)(*(WORD*)(BYTE*)(&fs->win[11])
      +                          ) != 512U)
 13232  000704  51A1               	movf	auto_mount@fmt& (0+255),w,b
 13233  000706  A4D8               	btfss	status,2,c
 13234  000708  D00C               	goto	u13920
 13235                           
 13236                           ; BSR set to: 0
 13237  00070A  EE20 F02B          	lfsr	2,43
 13238  00070E  51A7               	movf	auto_mount@fs& (0+255),w,b
 13239  000710  26D9               	addwf	fsr2l,f,c
 13240  000712  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13241  000714  22DA               	addwfc	fsr2h,f,c
 13242  000716  50DE               	movf	postinc2,w,c
 13243  000718  E104               	bnz	u13920
 13244  00071A  0E02               	movlw	2
 13245  00071C  18DE               	xorwf	postinc2,w,c
 13246  00071E  B4D8               	btfsc	status,2,c
 13247  000720  D002               	goto	l13039
 13248  000722                     u13920:
 13249                           
 13250                           ; BSR set to: 0
 13251                           ;tff.c: 705: return FR_NO_FILESYSTEM;
 13252  000722  0E0B               	movlw	11
 13253  000724  0012               	return	
 13254  000726                     l13039:
 13255                           
 13256                           ; BSR set to: 0
 13257                           ;tff.c: 708: fatsize = (WORD)(*(WORD*)(BYTE*)(&fs->win[22]));
 13258  000726  EE20 F036          	lfsr	2,54
 13259  00072A  51A7               	movf	auto_mount@fs& (0+255),w,b
 13260  00072C  26D9               	addwf	fsr2l,f,c
 13261  00072E  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13262  000730  22DA               	addwfc	fsr2h,f,c
 13263  000732  CFDE F07D          	movff	postinc2,??_auto_mount
 13264  000736  CFDD F07E          	movff	postdec2,??_auto_mount+1
 13265  00073A  C07D  F0A3         	movff	??_auto_mount,auto_mount@fatsize
 13266  00073E  C07E  F0A4         	movff	??_auto_mount+1,auto_mount@fatsize+1
 13267  000742  6BA5               	clrf	(auto_mount@fatsize+2)& (0+255),b
 13268  000744  6BA6               	clrf	(auto_mount@fatsize+3)& (0+255),b
 13269                           
 13270                           ; BSR set to: 0
 13271                           ;tff.c: 709: if (!fatsize) fatsize = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[36]));
 13272  000746  51A3               	movf	auto_mount@fatsize& (0+255),w,b
 13273  000748  11A4               	iorwf	(auto_mount@fatsize+1)& (0+255),w,b
 13274  00074A  11A5               	iorwf	(auto_mount@fatsize+2)& (0+255),w,b
 13275  00074C  11A6               	iorwf	(auto_mount@fatsize+3)& (0+255),w,b
 13276  00074E  A4D8               	btfss	status,2,c
 13277  000750  D00E               	goto	l955
 13278                           
 13279                           ; BSR set to: 0
 13280  000752  EE20 F044          	lfsr	2,68
 13281  000756  51A7               	movf	auto_mount@fs& (0+255),w,b
 13282  000758  26D9               	addwf	fsr2l,f,c
 13283  00075A  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13284  00075C  22DA               	addwfc	fsr2h,f,c
 13285  00075E  CFDE F0A3          	movff	postinc2,auto_mount@fatsize
 13286  000762  CFDE F0A4          	movff	postinc2,auto_mount@fatsize+1
 13287  000766  CFDE F0A5          	movff	postinc2,auto_mount@fatsize+2
 13288  00076A  CFDE F0A6          	movff	postinc2,auto_mount@fatsize+3
 13289  00076E                     l955:
 13290                           
 13291                           ; BSR set to: 0
 13292                           ;tff.c: 710: fs->sects_fat = (CLUST)fatsize;
 13293  00076E  EE20 F014          	lfsr	2,20
 13294  000772  51A7               	movf	auto_mount@fs& (0+255),w,b
 13295  000774  26D9               	addwf	fsr2l,f,c
 13296  000776  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13297  000778  22DA               	addwfc	fsr2h,f,c
 13298  00077A  C0A3  FFDE         	movff	auto_mount@fatsize,postinc2
 13299  00077E  C0A4  FFDD         	movff	auto_mount@fatsize+1,postdec2
 13300                           
 13301                           ; BSR set to: 0
 13302                           ;tff.c: 711: fs->n_fats = fs->win[16];
 13303  000782  EE20 F030          	lfsr	2,48
 13304  000786  51A7               	movf	auto_mount@fs& (0+255),w,b
 13305  000788  26D9               	addwf	fsr2l,f,c
 13306  00078A  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13307  00078C  22DA               	addwfc	fsr2h,f,c
 13308  00078E  EE10 F01E          	lfsr	1,30
 13309  000792  51A7               	movf	auto_mount@fs& (0+255),w,b
 13310  000794  26E1               	addwf	fsr1l,f,c
 13311  000796  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13312  000798  22E2               	addwfc	fsr1h,f,c
 13313  00079A  CFDF FFE7          	movff	indf2,indf1
 13314                           
 13315                           ; BSR set to: 0
 13316                           ;tff.c: 712: fatsize *= fs->n_fats;
 13317  00079E  C0A3  F019         	movff	auto_mount@fatsize,___lmul@multiplier
 13318  0007A2  C0A4  F01A         	movff	auto_mount@fatsize+1,___lmul@multiplier+1
 13319  0007A6  C0A5  F01B         	movff	auto_mount@fatsize+2,___lmul@multiplier+2
 13320  0007AA  C0A6  F01C         	movff	auto_mount@fatsize+3,___lmul@multiplier+3
 13321  0007AE  EE20 F01E          	lfsr	2,30
 13322  0007B2  51A7               	movf	auto_mount@fs& (0+255),w,b
 13323  0007B4  26D9               	addwf	fsr2l,f,c
 13324  0007B6  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13325  0007B8  22DA               	addwfc	fsr2h,f,c
 13326  0007BA  50DF               	movf	indf2,w,c
 13327  0007BC  6F7D               	movwf	??_auto_mount& (0+255),b
 13328  0007BE  517D               	movf	??_auto_mount& (0+255),w,b
 13329  0007C0  6E1D               	movwf	___lmul@multiplicand^0,c
 13330  0007C2  6A1E               	clrf	(___lmul@multiplicand+1)^0,c
 13331  0007C4  6A1F               	clrf	(___lmul@multiplicand+2)^0,c
 13332  0007C6  6A20               	clrf	(___lmul@multiplicand+3)^0,c
 13333  0007C8  EC4F  F029         	call	___lmul	;wreg free
 13334  0007CC  C019  F0A3         	movff	?___lmul,auto_mount@fatsize
 13335  0007D0  C01A  F0A4         	movff	?___lmul+1,auto_mount@fatsize+1
 13336  0007D4  C01B  F0A5         	movff	?___lmul+2,auto_mount@fatsize+2
 13337  0007D8  C01C  F0A6         	movff	?___lmul+3,auto_mount@fatsize+3
 13338                           
 13339                           ; BSR set to: 0
 13340                           ;tff.c: 713: fs->fatbase = bootsect + (WORD)(*(WORD*)(BYTE*)(&fs->win[14]));
 13341  0007DC  EE20 F02E          	lfsr	2,46
 13342  0007E0  51A7               	movf	auto_mount@fs& (0+255),w,b
 13343  0007E2  26D9               	addwf	fsr2l,f,c
 13344  0007E4  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13345  0007E6  22DA               	addwfc	fsr2h,f,c
 13346  0007E8  CFDE F07D          	movff	postinc2,??_auto_mount
 13347  0007EC  CFDD F07E          	movff	postdec2,??_auto_mount+1
 13348  0007F0  517D               	movf	??_auto_mount& (0+255),w,b
 13349  0007F2  2597               	addwf	auto_mount@bootsect& (0+255),w,b
 13350  0007F4  6F7F               	movwf	(??_auto_mount+2)& (0+255),b
 13351  0007F6  517E               	movf	(??_auto_mount+1)& (0+255),w,b
 13352  0007F8  2198               	addwfc	(auto_mount@bootsect+1)& (0+255),w,b
 13353  0007FA  6F80               	movwf	(??_auto_mount+3)& (0+255),b
 13354  0007FC  0E00               	movlw	0
 13355  0007FE  2199               	addwfc	(auto_mount@bootsect+2)& (0+255),w,b
 13356  000800  6F81               	movwf	(??_auto_mount+4)& (0+255),b
 13357  000802  0E00               	movlw	0
 13358  000804  219A               	addwfc	(auto_mount@bootsect+3)& (0+255),w,b
 13359  000806  6F82               	movwf	(??_auto_mount+5)& (0+255),b
 13360  000808  EE20 F008          	lfsr	2,8
 13361  00080C  51A7               	movf	auto_mount@fs& (0+255),w,b
 13362  00080E  26D9               	addwf	fsr2l,f,c
 13363  000810  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13364  000812  22DA               	addwfc	fsr2h,f,c
 13365  000814  C07F  FFDE         	movff	??_auto_mount+2,postinc2
 13366  000818  C080  FFDE         	movff	??_auto_mount+3,postinc2
 13367  00081C  C081  FFDE         	movff	??_auto_mount+4,postinc2
 13368  000820  C082  FFDE         	movff	??_auto_mount+5,postinc2
 13369                           
 13370                           ; BSR set to: 0
 13371                           ;tff.c: 714: fs->csize = fs->win[13];
 13372  000824  EE20 F02D          	lfsr	2,45
 13373  000828  51A7               	movf	auto_mount@fs& (0+255),w,b
 13374  00082A  26D9               	addwf	fsr2l,f,c
 13375  00082C  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13376  00082E  22DA               	addwfc	fsr2h,f,c
 13377  000830  EE10 F01D          	lfsr	1,29
 13378  000834  51A7               	movf	auto_mount@fs& (0+255),w,b
 13379  000836  26E1               	addwf	fsr1l,f,c
 13380  000838  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13381  00083A  22E2               	addwfc	fsr1h,f,c
 13382  00083C  CFDF FFE7          	movff	indf2,indf1
 13383                           
 13384                           ; BSR set to: 0
 13385                           ;tff.c: 715: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(&fs->win[17]));
 13386  000840  EE20 F031          	lfsr	2,49
 13387  000844  51A7               	movf	auto_mount@fs& (0+255),w,b
 13388  000846  26D9               	addwf	fsr2l,f,c
 13389  000848  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13390  00084A  22DA               	addwfc	fsr2h,f,c
 13391  00084C  EE10 F002          	lfsr	1,2
 13392  000850  51A7               	movf	auto_mount@fs& (0+255),w,b
 13393  000852  26E1               	addwf	fsr1l,f,c
 13394  000854  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13395  000856  22E2               	addwfc	fsr1h,f,c
 13396  000858  CFDE FFE6          	movff	postinc2,postinc1
 13397  00085C  CFDD FFE5          	movff	postdec2,postdec1
 13398                           
 13399                           ; BSR set to: 0
 13400                           ;tff.c: 716: totalsect = (WORD)(*(WORD*)(BYTE*)(&fs->win[19]));
 13401  000860  EE20 F033          	lfsr	2,51
 13402  000864  51A7               	movf	auto_mount@fs& (0+255),w,b
 13403  000866  26D9               	addwf	fsr2l,f,c
 13404  000868  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13405  00086A  22DA               	addwfc	fsr2h,f,c
 13406  00086C  CFDE F07D          	movff	postinc2,??_auto_mount
 13407  000870  CFDD F07E          	movff	postdec2,??_auto_mount+1
 13408  000874  C07D  F09B         	movff	??_auto_mount,auto_mount@totalsect
 13409  000878  C07E  F09C         	movff	??_auto_mount+1,auto_mount@totalsect+1
 13410  00087C  6B9D               	clrf	(auto_mount@totalsect+2)& (0+255),b
 13411  00087E  6B9E               	clrf	(auto_mount@totalsect+3)& (0+255),b
 13412                           
 13413                           ; BSR set to: 0
 13414                           ;tff.c: 717: if (!totalsect) totalsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[32]));
 13415  000880  519B               	movf	auto_mount@totalsect& (0+255),w,b
 13416  000882  119C               	iorwf	(auto_mount@totalsect+1)& (0+255),w,b
 13417  000884  119D               	iorwf	(auto_mount@totalsect+2)& (0+255),w,b
 13418  000886  119E               	iorwf	(auto_mount@totalsect+3)& (0+255),w,b
 13419  000888  A4D8               	btfss	status,2,c
 13420  00088A  D00E               	goto	l13061
 13421                           
 13422                           ; BSR set to: 0
 13423  00088C  EE20 F040          	lfsr	2,64
 13424  000890  51A7               	movf	auto_mount@fs& (0+255),w,b
 13425  000892  26D9               	addwf	fsr2l,f,c
 13426  000894  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13427  000896  22DA               	addwfc	fsr2h,f,c
 13428  000898  CFDE F09B          	movff	postinc2,auto_mount@totalsect
 13429  00089C  CFDE F09C          	movff	postinc2,auto_mount@totalsect+1
 13430  0008A0  CFDE F09D          	movff	postinc2,auto_mount@totalsect+2
 13431  0008A4  CFDE F09E          	movff	postinc2,auto_mount@totalsect+3
 13432  0008A8                     l13061:
 13433                           
 13434                           ; BSR set to: 0
 13435                           ;tff.c: 718: fs->max_clust = maxclust = (totalsect;tff.c: 719: - (WORD)(*(WORD*)(BYTE*)(
      +                          &fs->win[14])) - fatsize - fs->n_rootdir / 16;tff.c: 720: ) / fs->csize + 2;
 13436  0008A8  EE20 F002          	lfsr	2,2
 13437  0008AC  51A7               	movf	auto_mount@fs& (0+255),w,b
 13438  0008AE  26D9               	addwf	fsr2l,f,c
 13439  0008B0  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13440  0008B2  22DA               	addwfc	fsr2h,f,c
 13441  0008B4  CFDE F07D          	movff	postinc2,??_auto_mount
 13442  0008B8  CFDD F07E          	movff	postdec2,??_auto_mount+1
 13443  0008BC  0E04               	movlw	4
 13444  0008BE  6F7F               	movwf	(??_auto_mount+2)& (0+255),b
 13445  0008C0                     u13955:
 13446  0008C0  90D8               	bcf	status,0,c
 13447  0008C2  337E               	rrcf	(??_auto_mount+1)& (0+255),f,b
 13448  0008C4  337D               	rrcf	??_auto_mount& (0+255),f,b
 13449  0008C6  2F7F               	decfsz	(??_auto_mount+2)& (0+255),f,b
 13450  0008C8  D7FB               	goto	u13955
 13451  0008CA  517D               	movf	??_auto_mount& (0+255),w,b
 13452  0008CC  6F80               	movwf	(??_auto_mount+3)& (0+255),b
 13453  0008CE  517E               	movf	(??_auto_mount+1)& (0+255),w,b
 13454  0008D0  6F81               	movwf	(??_auto_mount+4)& (0+255),b
 13455  0008D2  6B82               	clrf	(??_auto_mount+5)& (0+255),b
 13456  0008D4  6B83               	clrf	(??_auto_mount+6)& (0+255),b
 13457  0008D6  EE20 F02E          	lfsr	2,46
 13458  0008DA  51A7               	movf	auto_mount@fs& (0+255),w,b
 13459  0008DC  26D9               	addwf	fsr2l,f,c
 13460  0008DE  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13461  0008E0  22DA               	addwfc	fsr2h,f,c
 13462  0008E2  CFDE F084          	movff	postinc2,??_auto_mount+7
 13463  0008E6  CFDD F085          	movff	postdec2,??_auto_mount+8
 13464  0008EA  5184               	movf	(??_auto_mount+7)& (0+255),w,b
 13465  0008EC  6F86               	movwf	(??_auto_mount+9)& (0+255),b
 13466  0008EE  5185               	movf	(??_auto_mount+8)& (0+255),w,b
 13467  0008F0  6F87               	movwf	(??_auto_mount+10)& (0+255),b
 13468  0008F2  6B88               	clrf	(??_auto_mount+11)& (0+255),b
 13469  0008F4  6B89               	clrf	(??_auto_mount+12)& (0+255),b
 13470  0008F6  1F86               	comf	(??_auto_mount+9)& (0+255),f,b
 13471  0008F8  1F87               	comf	(??_auto_mount+10)& (0+255),f,b
 13472  0008FA  1F88               	comf	(??_auto_mount+11)& (0+255),f,b
 13473  0008FC  1F89               	comf	(??_auto_mount+12)& (0+255),f,b
 13474  0008FE  2B86               	incf	(??_auto_mount+9)& (0+255),f,b
 13475  000900  0E00               	movlw	0
 13476  000902  2387               	addwfc	(??_auto_mount+10)& (0+255),f,b
 13477  000904  2388               	addwfc	(??_auto_mount+11)& (0+255),f,b
 13478  000906  2389               	addwfc	(??_auto_mount+12)& (0+255),f,b
 13479  000908  51A3               	movf	auto_mount@fatsize& (0+255),w,b
 13480  00090A  5D86               	subwf	(??_auto_mount+9)& (0+255),w,b
 13481  00090C  6F8A               	movwf	(??_auto_mount+13)& (0+255),b
 13482  00090E  51A4               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 13483  000910  5987               	subwfb	(??_auto_mount+10)& (0+255),w,b
 13484  000912  6F8B               	movwf	(??_auto_mount+14)& (0+255),b
 13485  000914  51A5               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 13486  000916  5988               	subwfb	(??_auto_mount+11)& (0+255),w,b
 13487  000918  6F8C               	movwf	(??_auto_mount+15)& (0+255),b
 13488  00091A  51A6               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 13489  00091C  5989               	subwfb	(??_auto_mount+12)& (0+255),w,b
 13490  00091E  6F8D               	movwf	(??_auto_mount+16)& (0+255),b
 13491  000920  5180               	movf	(??_auto_mount+3)& (0+255),w,b
 13492  000922  5D8A               	subwf	(??_auto_mount+13)& (0+255),w,b
 13493  000924  6F8E               	movwf	(??_auto_mount+17)& (0+255),b
 13494  000926  5181               	movf	(??_auto_mount+4)& (0+255),w,b
 13495  000928  598B               	subwfb	(??_auto_mount+14)& (0+255),w,b
 13496  00092A  6F8F               	movwf	(??_auto_mount+18)& (0+255),b
 13497  00092C  5182               	movf	(??_auto_mount+5)& (0+255),w,b
 13498  00092E  598C               	subwfb	(??_auto_mount+15)& (0+255),w,b
 13499  000930  6F90               	movwf	(??_auto_mount+19)& (0+255),b
 13500  000932  5183               	movf	(??_auto_mount+6)& (0+255),w,b
 13501  000934  598D               	subwfb	(??_auto_mount+16)& (0+255),w,b
 13502  000936  6F91               	movwf	(??_auto_mount+20)& (0+255),b
 13503  000938  519B               	movf	auto_mount@totalsect& (0+255),w,b
 13504  00093A  258E               	addwf	(??_auto_mount+17)& (0+255),w,b
 13505  00093C  6E19               	movwf	___lldiv@dividend^0,c
 13506  00093E  519C               	movf	(auto_mount@totalsect+1)& (0+255),w,b
 13507  000940  218F               	addwfc	(??_auto_mount+18)& (0+255),w,b
 13508  000942  6E1A               	movwf	(___lldiv@dividend+1)^0,c
 13509  000944  519D               	movf	(auto_mount@totalsect+2)& (0+255),w,b
 13510  000946  2190               	addwfc	(??_auto_mount+19)& (0+255),w,b
 13511  000948  6E1B               	movwf	(___lldiv@dividend+2)^0,c
 13512  00094A  519E               	movf	(auto_mount@totalsect+3)& (0+255),w,b
 13513  00094C  2191               	addwfc	(??_auto_mount+20)& (0+255),w,b
 13514  00094E  6E1C               	movwf	(___lldiv@dividend+3)^0,c
 13515  000950  EE20 F01D          	lfsr	2,29
 13516  000954  51A7               	movf	auto_mount@fs& (0+255),w,b
 13517  000956  26D9               	addwf	fsr2l,f,c
 13518  000958  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13519  00095A  22DA               	addwfc	fsr2h,f,c
 13520  00095C  50DF               	movf	indf2,w,c
 13521  00095E  6F92               	movwf	(??_auto_mount+21)& (0+255),b
 13522  000960  5192               	movf	(??_auto_mount+21)& (0+255),w,b
 13523  000962  6E1D               	movwf	___lldiv@divisor^0,c
 13524  000964  6A1E               	clrf	(___lldiv@divisor+1)^0,c
 13525  000966  6A1F               	clrf	(___lldiv@divisor+2)^0,c
 13526  000968  6A20               	clrf	(___lldiv@divisor+3)^0,c
 13527  00096A  EC50  F027         	call	___lldiv	;wreg free
 13528  00096E  0E02               	movlw	2
 13529  000970  2419               	addwf	?___lldiv^0,w,c
 13530  000972  0100               	movlb	0	; () banked
 13531  000974  6F93               	movwf	auto_mount@maxclust& (0+255),b
 13532  000976  0E00               	movlw	0
 13533  000978  201A               	addwfc	(?___lldiv+1)^0,w,c
 13534  00097A  6F94               	movwf	(auto_mount@maxclust+1)& (0+255),b
 13535  00097C  0E00               	movlw	0
 13536  00097E  201B               	addwfc	(?___lldiv+2)^0,w,c
 13537  000980  6F95               	movwf	(auto_mount@maxclust+2)& (0+255),b
 13538  000982  0E00               	movlw	0
 13539  000984  201C               	addwfc	(?___lldiv+3)^0,w,c
 13540  000986  6F96               	movwf	(auto_mount@maxclust+3)& (0+255),b
 13541  000988  EE20 F016          	lfsr	2,22
 13542  00098C  51A7               	movf	auto_mount@fs& (0+255),w,b
 13543  00098E  26D9               	addwf	fsr2l,f,c
 13544  000990  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13545  000992  22DA               	addwfc	fsr2h,f,c
 13546  000994  C093  FFDE         	movff	auto_mount@maxclust,postinc2
 13547  000998  C094  FFDD         	movff	auto_mount@maxclust+1,postdec2
 13548                           
 13549                           ; BSR set to: 0
 13550                           ;tff.c: 722: fmt = 1;
 13551  00099C  0E01               	movlw	1
 13552  00099E  6FA1               	movwf	auto_mount@fmt& (0+255),b
 13553                           
 13554                           ; BSR set to: 0
 13555                           ;tff.c: 723: if (maxclust >= 0xFF7) fmt = 2;
 13556  0009A0  5196               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 13557  0009A2  1195               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 13558  0009A4  E106               	bnz	u13960
 13559  0009A6  0EF7               	movlw	247
 13560  0009A8  5D93               	subwf	auto_mount@maxclust& (0+255),w,b
 13561  0009AA  0E0F               	movlw	15
 13562  0009AC  5994               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 13563  0009AE  A0D8               	btfss	status,0,c
 13564  0009B0  D002               	goto	l13069
 13565  0009B2                     u13960:
 13566                           
 13567                           ; BSR set to: 0
 13568  0009B2  0E02               	movlw	2
 13569  0009B4  6FA1               	movwf	auto_mount@fmt& (0+255),b
 13570  0009B6                     l13069:
 13571                           
 13572                           ; BSR set to: 0
 13573                           ;tff.c: 724: if (maxclust >= 0xFFF7)
 13574  0009B6  5196               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 13575  0009B8  1195               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 13576  0009BA  E107               	bnz	u13970
 13577  0009BC  0EF7               	movlw	247
 13578  0009BE  5D93               	subwf	auto_mount@maxclust& (0+255),w,b
 13579  0009C0  0EFF               	movlw	255
 13580  0009C2  5994               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 13581  0009C4  B0D8               	btfsc	status,0,c
 13582  0009C6  D6AD               	goto	u13920
 13583  0009C8  D001               	goto	l13075
 13584  0009CA                     u13970:
 13585  0009CA  D6AB               	goto	u13920
 13586  0009CC                     l13075:
 13587                           
 13588                           ; BSR set to: 0
 13589                           ;tff.c: 733: fs->dirbase = fs->fatbase + fatsize;
 13590  0009CC  EE20 F008          	lfsr	2,8
 13591  0009D0  51A7               	movf	auto_mount@fs& (0+255),w,b
 13592  0009D2  26D9               	addwf	fsr2l,f,c
 13593  0009D4  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13594  0009D6  22DA               	addwfc	fsr2h,f,c
 13595  0009D8  CFDE F07D          	movff	postinc2,??_auto_mount
 13596  0009DC  CFDE F07E          	movff	postinc2,??_auto_mount+1
 13597  0009E0  CFDE F07F          	movff	postinc2,??_auto_mount+2
 13598  0009E4  CFDE F080          	movff	postinc2,??_auto_mount+3
 13599  0009E8  51A3               	movf	auto_mount@fatsize& (0+255),w,b
 13600  0009EA  257D               	addwf	??_auto_mount& (0+255),w,b
 13601  0009EC  6F81               	movwf	(??_auto_mount+4)& (0+255),b
 13602  0009EE  51A4               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 13603  0009F0  217E               	addwfc	(??_auto_mount+1)& (0+255),w,b
 13604  0009F2  6F82               	movwf	(??_auto_mount+5)& (0+255),b
 13605  0009F4  51A5               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 13606  0009F6  217F               	addwfc	(??_auto_mount+2)& (0+255),w,b
 13607  0009F8  6F83               	movwf	(??_auto_mount+6)& (0+255),b
 13608  0009FA  51A6               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 13609  0009FC  2180               	addwfc	(??_auto_mount+3)& (0+255),w,b
 13610  0009FE  6F84               	movwf	(??_auto_mount+7)& (0+255),b
 13611  000A00  EE20 F00C          	lfsr	2,12
 13612  000A04  51A7               	movf	auto_mount@fs& (0+255),w,b
 13613  000A06  26D9               	addwf	fsr2l,f,c
 13614  000A08  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13615  000A0A  22DA               	addwfc	fsr2h,f,c
 13616  000A0C  C081  FFDE         	movff	??_auto_mount+4,postinc2
 13617  000A10  C082  FFDE         	movff	??_auto_mount+5,postinc2
 13618  000A14  C083  FFDE         	movff	??_auto_mount+6,postinc2
 13619  000A18  C084  FFDE         	movff	??_auto_mount+7,postinc2
 13620                           
 13621                           ;tff.c: 734: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;
 13622  000A1C  EE20 F008          	lfsr	2,8
 13623  000A20  51A7               	movf	auto_mount@fs& (0+255),w,b
 13624  000A22  26D9               	addwf	fsr2l,f,c
 13625  000A24  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13626  000A26  22DA               	addwfc	fsr2h,f,c
 13627  000A28  CFDE F07D          	movff	postinc2,??_auto_mount
 13628  000A2C  CFDE F07E          	movff	postinc2,??_auto_mount+1
 13629  000A30  CFDE F07F          	movff	postinc2,??_auto_mount+2
 13630  000A34  CFDE F080          	movff	postinc2,??_auto_mount+3
 13631  000A38  EE20 F002          	lfsr	2,2
 13632  000A3C  51A7               	movf	auto_mount@fs& (0+255),w,b
 13633  000A3E  26D9               	addwf	fsr2l,f,c
 13634  000A40  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13635  000A42  22DA               	addwfc	fsr2h,f,c
 13636  000A44  CFDE F081          	movff	postinc2,??_auto_mount+4
 13637  000A48  CFDD F082          	movff	postdec2,??_auto_mount+5
 13638  000A4C  0E04               	movlw	4
 13639  000A4E  6F83               	movwf	(??_auto_mount+6)& (0+255),b
 13640  000A50                     u13985:
 13641  000A50  90D8               	bcf	status,0,c
 13642  000A52  3382               	rrcf	(??_auto_mount+5)& (0+255),f,b
 13643  000A54  3381               	rrcf	(??_auto_mount+4)& (0+255),f,b
 13644  000A56  2F83               	decfsz	(??_auto_mount+6)& (0+255),f,b
 13645  000A58  D7FB               	goto	u13985
 13646  000A5A  5181               	movf	(??_auto_mount+4)& (0+255),w,b
 13647  000A5C  257D               	addwf	??_auto_mount& (0+255),w,b
 13648  000A5E  6F84               	movwf	(??_auto_mount+7)& (0+255),b
 13649  000A60  5182               	movf	(??_auto_mount+5)& (0+255),w,b
 13650  000A62  217E               	addwfc	(??_auto_mount+1)& (0+255),w,b
 13651  000A64  6F85               	movwf	(??_auto_mount+8)& (0+255),b
 13652  000A66  0E00               	movlw	0
 13653  000A68  217F               	addwfc	(??_auto_mount+2)& (0+255),w,b
 13654  000A6A  6F86               	movwf	(??_auto_mount+9)& (0+255),b
 13655  000A6C  0E00               	movlw	0
 13656  000A6E  2180               	addwfc	(??_auto_mount+3)& (0+255),w,b
 13657  000A70  6F87               	movwf	(??_auto_mount+10)& (0+255),b
 13658  000A72  51A3               	movf	auto_mount@fatsize& (0+255),w,b
 13659  000A74  2584               	addwf	(??_auto_mount+7)& (0+255),w,b
 13660  000A76  6F88               	movwf	(??_auto_mount+11)& (0+255),b
 13661  000A78  51A4               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 13662  000A7A  2185               	addwfc	(??_auto_mount+8)& (0+255),w,b
 13663  000A7C  6F89               	movwf	(??_auto_mount+12)& (0+255),b
 13664  000A7E  51A5               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 13665  000A80  2186               	addwfc	(??_auto_mount+9)& (0+255),w,b
 13666  000A82  6F8A               	movwf	(??_auto_mount+13)& (0+255),b
 13667  000A84  51A6               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 13668  000A86  2187               	addwfc	(??_auto_mount+10)& (0+255),w,b
 13669  000A88  6F8B               	movwf	(??_auto_mount+14)& (0+255),b
 13670  000A8A  EE20 F010          	lfsr	2,16
 13671  000A8E  51A7               	movf	auto_mount@fs& (0+255),w,b
 13672  000A90  26D9               	addwf	fsr2l,f,c
 13673  000A92  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13674  000A94  22DA               	addwfc	fsr2h,f,c
 13675  000A96  C088  FFDE         	movff	??_auto_mount+11,postinc2
 13676  000A9A  C089  FFDE         	movff	??_auto_mount+12,postinc2
 13677  000A9E  C08A  FFDE         	movff	??_auto_mount+13,postinc2
 13678  000AA2  C08B  FFDE         	movff	??_auto_mount+14,postinc2
 13679                           
 13680                           ;tff.c: 738: fs->free_clust = (CLUST)0xFFFFFFFF;
 13681  000AA6  EE20 F01A          	lfsr	2,26
 13682  000AAA  51A7               	movf	auto_mount@fs& (0+255),w,b
 13683  000AAC  26D9               	addwf	fsr2l,f,c
 13684  000AAE  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13685  000AB0  22DA               	addwfc	fsr2h,f,c
 13686  000AB2  0EFF               	movlw	255
 13687  000AB4  6EDE               	movwf	postinc2,c
 13688  000AB6  0EFF               	movlw	255
 13689  000AB8  6EDD               	movwf	postdec2,c
 13690                           
 13691                           ;tff.c: 754: fs->fs_type = fmt;
 13692  000ABA  EE20 F01C          	lfsr	2,28
 13693  000ABE  51A7               	movf	auto_mount@fs& (0+255),w,b
 13694  000AC0  26D9               	addwf	fsr2l,f,c
 13695  000AC2  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 13696  000AC4  22DA               	addwfc	fsr2h,f,c
 13697  000AC6  C0A1  FFDF         	movff	auto_mount@fmt,indf2
 13698                           
 13699                           ; BSR set to: 0
 13700                           ;tff.c: 755: fs->id = ++fsid;
 13701  000ACA  0101               	movlb	1	; () banked
 13702  000ACC  4B2A               	infsnz	_fsid& (0+255),f,b
 13703  000ACE  2B2B               	incf	(_fsid+1)& (0+255),f,b
 13704  000AD0  C0A7  FFD9         	movff	auto_mount@fs,fsr2l
 13705  000AD4  C0A8  FFDA         	movff	auto_mount@fs+1,fsr2h
 13706  000AD8  C12A  FFDE         	movff	_fsid,postinc2
 13707  000ADC  C12B  FFDD         	movff	_fsid+1,postdec2
 13708                           
 13709                           ;tff.c: 756: return FR_OK;
 13710  000AE0  0E00               	movlw	0
 13711  000AE2  0012               	return		;funcret
 13712  000AE4                     __end_of_auto_mount:
 13713                           	callstack 0
 13714                           
 13715 ;; *************** function _memset *****************
 13716 ;; Defined at:
 13717 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\memset.c"
 13718 ;; Parameters:    Size  Location     Type
 13719 ;;  p1              2   24[COMRAM] PTR void 
 13720 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 13721 ;;  c               2   26[COMRAM] int 
 13722 ;;  n               2   28[COMRAM] unsigned int 
 13723 ;; Auto vars:     Size  Location     Type
 13724 ;;  p               2   30[COMRAM] PTR unsigned char 
 13725 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 13726 ;; Return value:  Size  Location     Type
 13727 ;;                  2   24[COMRAM] PTR void 
 13728 ;; Registers used:
 13729 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13730 ;; Tracked objects:
 13731 ;;		On entry : 0/0
 13732 ;;		On exit  : 0/0
 13733 ;;		Unchanged: 0/0
 13734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13735 ;;      Params:         6       0       0       0       0       0       0       0       0
 13736 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13737 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13738 ;;      Totals:         8       0       0       0       0       0       0       0       0
 13739 ;;Total ram usage:        8 bytes
 13740 ;; Hardware stack levels used:    1
 13741 ;; Hardware stack levels required when called:    3
 13742 ;; This function calls:
 13743 ;;		Nothing
 13744 ;; This function is called by:
 13745 ;;		_make_dirfile
 13746 ;;		_reserve_direntry
 13747 ;;		_auto_mount
 13748 ;;		_f_open
 13749 ;; This function uses a non-reentrant model
 13750 ;;
 13751                           
 13752                           	psect	text69
 13753  00597E                     __ptext69:
 13754                           	callstack 0
 13755  00597E                     _memset:
 13756                           	callstack 21
 13757                           
 13758                           ;incstack = 0
 13759  00597E  C019  F01F         	movff	memset@p1,memset@p
 13760  005982  C01A  F020         	movff	memset@p1+1,memset@p+1
 13761  005986  D008               	goto	l7939
 13762  005988                     l7935:
 13763  005988  C01F  FFD9         	movff	memset@p,fsr2l
 13764  00598C  C020  FFDA         	movff	memset@p+1,fsr2h
 13765  005990  C01B  FFDF         	movff	memset@c,indf2
 13766  005994  4A1F               	infsnz	memset@p^0,f,c
 13767  005996  2A20               	incf	(memset@p+1)^0,f,c
 13768  005998                     l7939:
 13769  005998  061D               	decf	memset@n^0,f,c
 13770  00599A  A0D8               	btfss	status,0,c
 13771  00599C  061E               	decf	(memset@n+1)^0,f,c
 13772  00599E  281D               	incf	memset@n^0,w,c
 13773  0059A0  E1F3               	bnz	l7935
 13774  0059A2  281E               	incf	(memset@n+1)^0,w,c
 13775  0059A4  B4D8               	btfsc	status,2,c
 13776  0059A6  0012               	return	
 13777  0059A8  D7EF               	goto	l7935
 13778  0059AA                     __end_of_memset:
 13779                           	callstack 0
 13780                           
 13781 ;; *************** function _disk_initialize *****************
 13782 ;; Defined at:
 13783 ;;		line 59 in file "bibliotecas/diskio.c"
 13784 ;; Parameters:    Size  Location     Type
 13785 ;;  pdrv            1    wreg     unsigned char 
 13786 ;; Auto vars:     Size  Location     Type
 13787 ;;  pdrv            1   44[COMRAM] unsigned char 
 13788 ;;  result          2    0        int 
 13789 ;;  stat            1   45[COMRAM] unsigned char 
 13790 ;; Return value:  Size  Location     Type
 13791 ;;                  1    wreg      unsigned char 
 13792 ;; Registers used:
 13793 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13794 ;; Tracked objects:
 13795 ;;		On entry : 0/0
 13796 ;;		On exit  : 0/0
 13797 ;;		Unchanged: 0/0
 13798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13799 ;;      Params:         0       0       0       0       0       0       0       0       0
 13800 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13801 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13802 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13803 ;;Total ram usage:        2 bytes
 13804 ;; Hardware stack levels used:    1
 13805 ;; Hardware stack levels required when called:    8
 13806 ;; This function calls:
 13807 ;;		_sdc_disk_initialize
 13808 ;; This function is called by:
 13809 ;;		_auto_mount
 13810 ;; This function uses a non-reentrant model
 13811 ;;
 13812                           
 13813                           	psect	text70
 13814  005AA4                     __ptext70:
 13815                           	callstack 0
 13816  005AA4                     _disk_initialize:
 13817                           	callstack 17
 13818                           
 13819                           ;incstack = 0
 13820                           ;disk_initialize@pdrv stored from wreg
 13821  005AA4  6E2D               	movwf	disk_initialize@pdrv^0,c
 13822                           
 13823                           ;diskio.c: 63: DSTATUS stat;;diskio.c: 64: int result;;diskio.c: 66: switch (pdrv) {
 13824  005AA6  D005               	goto	l12343
 13825  005AA8                     l12325:
 13826                           
 13827                           ;diskio.c: 68: stat = sdc_disk_initialize();
 13828  005AA8  EC0F  F00B         	call	_sdc_disk_initialize	;wreg free
 13829  005AAC  6E2E               	movwf	disk_initialize@stat^0,c
 13830  005AAE                     l12327:
 13831                           
 13832                           ;diskio.c: 72: return stat;
 13833  005AAE  502E               	movf	disk_initialize@stat^0,w,c
 13834  005AB0  0012               	return	
 13835  005AB2                     l12343:
 13836  005AB2  502D               	movf	disk_initialize@pdrv^0,w,c
 13837                           
 13838                           ; Switch size 1, requested type "simple"
 13839                           ; Number of cases is 3, Range of values is 0 to 2
 13840                           ; switch strategies available:
 13841                           ; Name         Instructions Cycles
 13842                           ; simple_byte           10     6 (average)
 13843                           ;	Chosen strategy is simple_byte
 13844  005AB4  0A00               	xorlw	0	; case 0
 13845  005AB6  B4D8               	btfsc	status,2,c
 13846  005AB8  D7F7               	goto	l12325
 13847  005ABA  0A01               	xorlw	1	; case 1
 13848  005ABC  B4D8               	btfsc	status,2,c
 13849  005ABE  D7F4               	goto	l12325
 13850  005AC0  0A03               	xorlw	3	; case 2
 13851  005AC2  B4D8               	btfsc	status,2,c
 13852  005AC4  D7F4               	goto	l12327
 13853                           
 13854                           ;diskio.c: 88: return 0x01;
 13855  005AC6  0E01               	movlw	1
 13856  005AC8  0012               	return		;funcret
 13857  005ACA                     __end_of_disk_initialize:
 13858                           	callstack 0
 13859                           
 13860 ;; *************** function _sdc_disk_initialize *****************
 13861 ;; Defined at:
 13862 ;;		line 275 in file "bibliotecas/diskio.c"
 13863 ;; Parameters:    Size  Location     Type
 13864 ;;		None
 13865 ;; Auto vars:     Size  Location     Type
 13866 ;;  count2          2    9[BANK0 ] int 
 13867 ;;  crc_number      2    5[BANK0 ] int 
 13868 ;;  count1          2    3[BANK0 ] int 
 13869 ;;  i               2    0        int 
 13870 ;;  buff            1   11[BANK0 ] unsigned char 
 13871 ;;  ocr             1    8[BANK0 ] unsigned char 
 13872 ;;  buff_i          1    7[BANK0 ] unsigned char 
 13873 ;;  stat            1    2[BANK0 ] unsigned char 
 13874 ;; Return value:  Size  Location     Type
 13875 ;;                  1    wreg      unsigned char 
 13876 ;; Registers used:
 13877 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13878 ;; Tracked objects:
 13879 ;;		On entry : 0/0
 13880 ;;		On exit  : 3F/0
 13881 ;;		Unchanged: 0/0
 13882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13883 ;;      Params:         0       0       0       0       0       0       0       0       0
 13884 ;;      Locals:         0      12       0       0       0       0       0       0       0
 13885 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13886 ;;      Totals:         1      12       0       0       0       0       0       0       0
 13887 ;;Total ram usage:       13 bytes
 13888 ;; Hardware stack levels used:    1
 13889 ;; Hardware stack levels required when called:    7
 13890 ;; This function calls:
 13891 ;;		_command
 13892 ;;		_dummy_clocks
 13893 ;;		_escreve_frase_ram_lcd
 13894 ;;		_posicao_cursor_lcd
 13895 ;;		_proceed
 13896 ;;		_response
 13897 ;;		_sdc_reset
 13898 ;; This function is called by:
 13899 ;;		_disk_initialize
 13900 ;; This function uses a non-reentrant model
 13901 ;;
 13902                           
 13903                           	psect	text71
 13904  00161E                     __ptext71:
 13905                           	callstack 0
 13906  00161E                     _sdc_disk_initialize:
 13907                           	callstack 17
 13908                           
 13909                           ;incstack = 0
 13910  00161E  0E00               	movlw	0
 13911  001620  0100               	movlb	0	; () banked
 13912  001622  6F64               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 13913  001624  0E00               	movlw	0
 13914  001626  6F63               	movwf	sdc_disk_initialize@count1& (0+255),b
 13915  001628  0E00               	movlw	0
 13916  00162A  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 13917  00162C  0E00               	movlw	0
 13918  00162E  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 13919                           
 13920                           ;diskio.c: 280: BYTE buff = 0;
 13921  001630  0E00               	movlw	0
 13922  001632  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 13923                           
 13924                           ; BSR set to: 0
 13925                           ;diskio.c: 281: BYTE buff_i;;diskio.c: 282: int crc_number;;diskio.c: 283: _delay((unsig
      +                          ned long)((1)*(48000000/4000.0)));
 13926  001634  0E10               	movlw	16
 13927  001636  6E2C               	movwf	??_sdc_disk_initialize^0,c
 13928  001638  0E94               	movlw	148
 13929  00163A                     u16257:
 13930  00163A  2EE8               	decfsz	wreg,f,c
 13931  00163C  D7FE               	bra	u16257
 13932  00163E  2E2C               	decfsz	??_sdc_disk_initialize^0,f,c
 13933  001640  D7FC               	bra	u16257
 13934  001642  D000               	nop2	
 13935                           
 13936                           ;diskio.c: 284: dummy_clocks(100);
 13937  001644  0E64               	movlw	100
 13938  001646  ECEC  F02B         	call	_dummy_clocks
 13939                           
 13940                           ;diskio.c: 287: sdc_reset();
 13941  00164A  EC6E  F025         	call	_sdc_reset	;wreg free
 13942                           
 13943                           ;diskio.c: 288: command(0X48, 0x000001AA, 0x87);
 13944  00164E  0EAA               	movlw	170
 13945  001650  6E1E               	movwf	command@arg^0,c
 13946  001652  0E01               	movlw	1
 13947  001654  6E1F               	movwf	(command@arg+1)^0,c
 13948  001656  0E00               	movlw	0
 13949  001658  6E20               	movwf	(command@arg+2)^0,c
 13950  00165A  0E00               	movlw	0
 13951  00165C  6E21               	movwf	(command@arg+3)^0,c
 13952  00165E  0E87               	movlw	135
 13953  001660  6E22               	movwf	command@CRC^0,c
 13954  001662  0E48               	movlw	72
 13955  001664  ECF6  F028         	call	_command
 13956                           
 13957                           ;diskio.c: 289: proceed();
 13958  001668  EC53  F02F         	call	_proceed	;wreg free
 13959  00166C                     l11945:
 13960                           
 13961                           ;diskio.c: 291: buff_i = response();
 13962  00166C  EC4D  F02F         	call	_response	;wreg free
 13963  001670  0100               	movlb	0	; () banked
 13964  001672  6F67               	movwf	sdc_disk_initialize@buff_i& (0+255),b
 13965                           
 13966                           ; BSR set to: 0
 13967                           ;diskio.c: 292: if(buff_i == 1)
 13968  001674  0567               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
 13969  001676  A4D8               	btfss	status,2,c
 13970  001678  D004               	goto	l11951
 13971                           
 13972                           ; BSR set to: 0
 13973                           ;diskio.c: 293: {;diskio.c: 294: crc_number = buff_i<<8;
 13974  00167A  5167               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 13975  00167C  6F66               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
 13976  00167E  6B65               	clrf	sdc_disk_initialize@crc_number& (0+255),b
 13977                           
 13978                           ;diskio.c: 295: }
 13979  001680  D006               	goto	l11955
 13980  001682                     l11951:
 13981                           
 13982                           ; BSR set to: 0
 13983                           ;diskio.c: 296: else if(buff_i==0xAA)
 13984  001682  0EAA               	movlw	170
 13985  001684  1967               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
 13986  001686  A4D8               	btfss	status,2,c
 13987  001688  D002               	goto	l11955
 13988                           
 13989                           ; BSR set to: 0
 13990                           ;diskio.c: 297: {;diskio.c: 298: crc_number |= buff_i;
 13991  00168A  5167               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 13992  00168C  1365               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
 13993  00168E                     l11955:
 13994                           
 13995                           ; BSR set to: 0
 13996                           ;diskio.c: 299: };diskio.c: 300: count1++;
 13997  00168E  4B63               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
 13998  001690  2B64               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
 13999                           
 14000                           ; BSR set to: 0
 14001                           ;diskio.c: 301: }while(crc_number != 0x1AA && count1<1000);
 14002  001692  0EAA               	movlw	170
 14003  001694  1965               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 14004  001696  E103               	bnz	u12540
 14005  001698  0566               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 14006  00169A  B4D8               	btfsc	status,2,c
 14007  00169C  D008               	goto	u12550
 14008  00169E                     u12540:
 14009                           
 14010                           ; BSR set to: 0
 14011  00169E  BF64               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
 14012  0016A0  D7E5               	goto	l11945
 14013  0016A2  0EE8               	movlw	232
 14014  0016A4  5D63               	subwf	sdc_disk_initialize@count1& (0+255),w,b
 14015  0016A6  0E03               	movlw	3
 14016  0016A8  5964               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
 14017  0016AA  A0D8               	btfss	status,0,c
 14018  0016AC  D7DF               	goto	l11945
 14019  0016AE                     u12550:
 14020                           
 14021                           ; BSR set to: 0
 14022                           ;diskio.c: 306: if (crc_number == 0x1AA)
 14023  0016AE  0EAA               	movlw	170
 14024  0016B0  1965               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 14025  0016B2  E102               	bnz	u12561
 14026  0016B4  0566               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 14027  0016B6  A4D8               	btfss	status,2,c
 14028  0016B8                     u12561:
 14029  0016B8  D09E               	goto	l12033
 14030  0016BA                     u12560:
 14031                           
 14032                           ; BSR set to: 0
 14033                           ;diskio.c: 310: count2 = 0;
 14034                           
 14035                           ; BSR set to: 0
 14036                           ;diskio.c: 309: do{
 14037  0016BA  0E00               	movlw	0
 14038  0016BC  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14039  0016BE  0E00               	movlw	0
 14040  0016C0  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 14041  0016C2                     
 14042                           ; BSR set to: 0
 14043                           ;diskio.c: 319: dummy_clocks(10);
 14044                           
 14045                           ; BSR set to: 0
 14046  0016C2  0E0A               	movlw	10
 14047  0016C4  ECEC  F02B         	call	_dummy_clocks
 14048                           
 14049                           ;diskio.c: 320: command(0X77, 0X00000000, 0X00);
 14050  0016C8  0E00               	movlw	0
 14051  0016CA  6E1E               	movwf	command@arg^0,c
 14052  0016CC  0E00               	movlw	0
 14053  0016CE  6E1F               	movwf	(command@arg+1)^0,c
 14054  0016D0  0E00               	movlw	0
 14055  0016D2  6E20               	movwf	(command@arg+2)^0,c
 14056  0016D4  0E00               	movlw	0
 14057  0016D6  6E21               	movwf	(command@arg+3)^0,c
 14058  0016D8  0E00               	movlw	0
 14059  0016DA  6E22               	movwf	command@CRC^0,c
 14060  0016DC  0E77               	movlw	119
 14061  0016DE  ECF6  F028         	call	_command
 14062                           
 14063                           ;diskio.c: 323: proceed();
 14064  0016E2  EC53  F02F         	call	_proceed	;wreg free
 14065  0016E6                     l11975:
 14066                           
 14067                           ;diskio.c: 325: buff = response();
 14068  0016E6  EC4D  F02F         	call	_response	;wreg free
 14069  0016EA  0100               	movlb	0	; () banked
 14070  0016EC  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 14071                           
 14072                           ; BSR set to: 0
 14073                           ;diskio.c: 326: count2++;
 14074  0016EE  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14075  0016F0  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14076                           
 14077                           ;diskio.c: 327: }while((buff!=0X01)&&(count2<10));
 14078  0016F2  056B               	decf	sdc_disk_initialize@buff& (0+255),w,b
 14079  0016F4  B4D8               	btfsc	status,2,c
 14080  0016F6  D008               	goto	u12580
 14081                           
 14082                           ; BSR set to: 0
 14083  0016F8  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 14084  0016FA  D7F5               	goto	l11975
 14085  0016FC  516A               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 14086  0016FE  E104               	bnz	u12580
 14087  001700  0E0A               	movlw	10
 14088  001702  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 14089  001704  A0D8               	btfss	status,0,c
 14090  001706  D7EF               	goto	l11975
 14091  001708                     u12580:
 14092                           
 14093                           ; BSR set to: 0
 14094                           ;diskio.c: 328: count2 = 0;
 14095  001708  0E00               	movlw	0
 14096  00170A  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14097  00170C  0E00               	movlw	0
 14098  00170E  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 14099                           
 14100                           ; BSR set to: 0
 14101                           ;diskio.c: 332: dummy_clocks(10);
 14102  001710  0E0A               	movlw	10
 14103  001712  ECEC  F02B         	call	_dummy_clocks
 14104                           
 14105                           ;diskio.c: 333: command(0X69, 0X40000000 , 0x00);
 14106  001716  0E00               	movlw	0
 14107  001718  6E1E               	movwf	command@arg^0,c
 14108  00171A  0E00               	movlw	0
 14109  00171C  6E1F               	movwf	(command@arg+1)^0,c
 14110  00171E  0E00               	movlw	0
 14111  001720  6E20               	movwf	(command@arg+2)^0,c
 14112  001722  0E40               	movlw	64
 14113  001724  6E21               	movwf	(command@arg+3)^0,c
 14114  001726  0E00               	movlw	0
 14115  001728  6E22               	movwf	command@CRC^0,c
 14116  00172A  0E69               	movlw	105
 14117  00172C  ECF6  F028         	call	_command
 14118                           
 14119                           ;diskio.c: 334: proceed();
 14120  001730  EC53  F02F         	call	_proceed	;wreg free
 14121                           
 14122                           ;diskio.c: 335: buff = response();
 14123  001734  EC4D  F02F         	call	_response	;wreg free
 14124  001738  0100               	movlb	0	; () banked
 14125  00173A  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 14126                           
 14127                           ; BSR set to: 0
 14128                           ;diskio.c: 336: count2++;
 14129  00173C  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14130  00173E  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14131                           
 14132                           ; BSR set to: 0
 14133                           ;diskio.c: 337: }while(buff!=0X00);
 14134  001740  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14135  001742  A4D8               	btfss	status,2,c
 14136  001744  D7BE               	goto	l11965
 14137                           
 14138                           ; BSR set to: 0
 14139                           ;diskio.c: 342: dummy_clocks(10);
 14140                           
 14141                           ; BSR set to: 0
 14142  001746  0E0A               	movlw	10
 14143  001748  ECEC  F02B         	call	_dummy_clocks
 14144                           
 14145                           ;diskio.c: 343: command(0X7A, 0X00000000, 0XFF);
 14146  00174C  0E00               	movlw	0
 14147  00174E  6E1E               	movwf	command@arg^0,c
 14148  001750  0E00               	movlw	0
 14149  001752  6E1F               	movwf	(command@arg+1)^0,c
 14150  001754  0E00               	movlw	0
 14151  001756  6E20               	movwf	(command@arg+2)^0,c
 14152  001758  0E00               	movlw	0
 14153  00175A  6E21               	movwf	(command@arg+3)^0,c
 14154  00175C  0EFF               	movlw	255
 14155  00175E  6E22               	movwf	command@CRC^0,c
 14156  001760  0E7A               	movlw	122
 14157  001762  ECF6  F028         	call	_command
 14158                           
 14159                           ;diskio.c: 344: proceed();
 14160  001766  EC53  F02F         	call	_proceed	;wreg free
 14161  00176A                     l11999:
 14162                           
 14163                           ;diskio.c: 346: buff = response();
 14164  00176A  EC4D  F02F         	call	_response	;wreg free
 14165  00176E  0100               	movlb	0	; () banked
 14166  001770  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 14167                           
 14168                           ; BSR set to: 0
 14169                           ;diskio.c: 347: ocr = (buff << 1) & 0b10000000;
 14170  001772  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14171  001774  256B               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 14172  001776  0B80               	andlw	128
 14173  001778  6F68               	movwf	sdc_disk_initialize@ocr& (0+255),b
 14174                           
 14175                           ; BSR set to: 0
 14176                           ;diskio.c: 348: count2++;
 14177  00177A  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14178  00177C  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14179                           
 14180                           ; BSR set to: 0
 14181                           ;diskio.c: 349: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 14182  00177E  5168               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 14183  001780  B4D8               	btfsc	status,2,c
 14184  001782  D00B               	goto	u12620
 14185                           
 14186                           ; BSR set to: 0
 14187  001784  0568               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 14188  001786  B4D8               	btfsc	status,2,c
 14189  001788  D008               	goto	u12620
 14190                           
 14191                           ; BSR set to: 0
 14192  00178A  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 14193  00178C  D7EE               	goto	l11999
 14194  00178E  516A               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 14195  001790  E104               	bnz	u12620
 14196  001792  0E0A               	movlw	10
 14197  001794  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 14198  001796  A0D8               	btfss	status,0,c
 14199  001798  D7E8               	goto	l11999
 14200  00179A                     u12620:
 14201                           
 14202                           ; BSR set to: 0
 14203                           ;diskio.c: 350: }while(ocr != 0X00 && ocr !=0x01);
 14204  00179A  5168               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 14205  00179C  B4D8               	btfsc	status,2,c
 14206  00179E  D003               	goto	u12640
 14207                           
 14208                           ; BSR set to: 0
 14209  0017A0  0568               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 14210  0017A2  A4D8               	btfss	status,2,c
 14211  0017A4  D78A               	goto	u12560
 14212  0017A6                     u12640:
 14213                           
 14214                           ; BSR set to: 0
 14215                           ;diskio.c: 355: _delay((unsigned long)((1)*(48000000/4000.0)));
 14216                           
 14217                           ; BSR set to: 0
 14218  0017A6  0E10               	movlw	16
 14219  0017A8  6E2C               	movwf	??_sdc_disk_initialize^0,c
 14220  0017AA  0E94               	movlw	148
 14221  0017AC                     u16267:
 14222  0017AC  2EE8               	decfsz	wreg,f,c
 14223  0017AE  D7FE               	bra	u16267
 14224  0017B0  2E2C               	decfsz	??_sdc_disk_initialize^0,f,c
 14225  0017B2  D7FC               	bra	u16267
 14226  0017B4  D000               	nop2	
 14227                           
 14228                           ;diskio.c: 356: stat = 0X00;
 14229  0017B6  0E00               	movlw	0
 14230  0017B8  0100               	movlb	0	; () banked
 14231  0017BA  6F62               	movwf	sdc_disk_initialize@stat& (0+255),b
 14232                           
 14233                           ; BSR set to: 0
 14234                           ;diskio.c: 358: if(!ocr)
 14235  0017BC  5168               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 14236  0017BE  A4D8               	btfss	status,2,c
 14237  0017C0  D0AC               	goto	u12740
 14238                           
 14239                           ; BSR set to: 0
 14240                           ;diskio.c: 359: {;diskio.c: 361: dummy_clocks(10);
 14241  0017C2  0E0A               	movlw	10
 14242  0017C4  ECEC  F02B         	call	_dummy_clocks
 14243                           
 14244                           ;diskio.c: 362: command(0x50, 0x00000200,0XFF);
 14245  0017C8  0E00               	movlw	0
 14246  0017CA  6E1E               	movwf	command@arg^0,c
 14247  0017CC  0E02               	movlw	2
 14248  0017CE  6E1F               	movwf	(command@arg+1)^0,c
 14249  0017D0  0E00               	movlw	0
 14250  0017D2  6E20               	movwf	(command@arg+2)^0,c
 14251  0017D4  0E00               	movlw	0
 14252  0017D6  6E21               	movwf	(command@arg+3)^0,c
 14253  0017D8  0EFF               	movlw	255
 14254  0017DA  6E22               	movwf	command@CRC^0,c
 14255  0017DC  0E50               	movlw	80
 14256  0017DE  ECF6  F028         	call	_command
 14257                           
 14258                           ;diskio.c: 363: proceed();
 14259  0017E2  EC53  F02F         	call	_proceed	;wreg free
 14260  0017E6                     
 14261                           ;diskio.c: 367: buff = response();
 14262  0017E6  EC4D  F02F         	call	_response	;wreg free
 14263  0017EA  0100               	movlb	0	; () banked
 14264  0017EC  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 14265                           
 14266                           ; BSR set to: 0
 14267                           ;diskio.c: 368: }while(buff!=0X00);
 14268  0017EE  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14269  0017F0  B4D8               	btfsc	status,2,c
 14270  0017F2  D093               	goto	u12740
 14271  0017F4  D7F8               	goto	l12027
 14272  0017F6                     l12033:
 14273                           
 14274                           ; BSR set to: 0
 14275                           ;diskio.c: 373: else;diskio.c: 374: {;diskio.c: 376: count2 = 0;
 14276  0017F6  0E00               	movlw	0
 14277  0017F8  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14278  0017FA  0E00               	movlw	0
 14279  0017FC  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 14280                           
 14281                           ; BSR set to: 0
 14282                           ;diskio.c: 378: dummy_clocks(1);
 14283                           
 14284                           ; BSR set to: 0
 14285  0017FE  0E01               	movlw	1
 14286  001800  ECEC  F02B         	call	_dummy_clocks
 14287                           
 14288                           ;diskio.c: 379: command(0X69, 0X00000000, 0XFF);
 14289  001804  0E00               	movlw	0
 14290  001806  6E1E               	movwf	command@arg^0,c
 14291  001808  0E00               	movlw	0
 14292  00180A  6E1F               	movwf	(command@arg+1)^0,c
 14293  00180C  0E00               	movlw	0
 14294  00180E  6E20               	movwf	(command@arg+2)^0,c
 14295  001810  0E00               	movlw	0
 14296  001812  6E21               	movwf	(command@arg+3)^0,c
 14297  001814  0EFF               	movlw	255
 14298  001816  6E22               	movwf	command@CRC^0,c
 14299  001818  0E69               	movlw	105
 14300  00181A  ECF6  F028         	call	_command
 14301                           
 14302                           ;diskio.c: 380: proceed();
 14303  00181E  EC53  F02F         	call	_proceed	;wreg free
 14304  001822                     l12043:
 14305                           
 14306                           ;diskio.c: 382: buff = response();
 14307  001822  EC4D  F02F         	call	_response	;wreg free
 14308  001826  0100               	movlb	0	; () banked
 14309  001828  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 14310                           
 14311                           ; BSR set to: 0
 14312                           ;diskio.c: 383: count2++;
 14313  00182A  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14314  00182C  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14315                           
 14316                           ; BSR set to: 0
 14317                           ;diskio.c: 384: if(buff==0x00)
 14318  00182E  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14319  001830  A4D8               	btfss	status,2,c
 14320  001832  D00B               	goto	l12053
 14321                           
 14322                           ; BSR set to: 0
 14323                           ;diskio.c: 385: {;diskio.c: 386: posicao_cursor_lcd(1,0);
 14324  001834  0E00               	movlw	0
 14325  001836  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
 14326  001838  0E01               	movlw	1
 14327  00183A  EC9A  F028         	call	_posicao_cursor_lcd
 14328                           
 14329                           ;diskio.c: 387: escreve_frase_ram_lcd("SD VER. 1");
 14330  00183E  0E2D               	movlw	low STR_3
 14331  001840  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
 14332  001842  0E62               	movlw	high STR_3
 14333  001844  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 14334  001846  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
 14335  00184A                     l12053:
 14336                           
 14337                           ;diskio.c: 388: };diskio.c: 389: _delay((unsigned long)((1)*(48000000/4000.0)));
 14338  00184A  0E10               	movlw	16
 14339  00184C  6E2C               	movwf	??_sdc_disk_initialize^0,c
 14340  00184E  0E94               	movlw	148
 14341  001850                     u16277:
 14342  001850  2EE8               	decfsz	wreg,f,c
 14343  001852  D7FE               	bra	u16277
 14344  001854  2E2C               	decfsz	??_sdc_disk_initialize^0,f,c
 14345  001856  D7FC               	bra	u16277
 14346  001858  D000               	nop2	
 14347                           
 14348                           ;diskio.c: 390: }while(buff!=0X00 && count2<10000);
 14349  00185A  0100               	movlb	0	; () banked
 14350  00185C  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14351  00185E  B4D8               	btfsc	status,2,c
 14352  001860  D008               	goto	u12690
 14353                           
 14354                           ; BSR set to: 0
 14355  001862  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 14356  001864  D7DE               	goto	l12043
 14357  001866  0E10               	movlw	16
 14358  001868  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 14359  00186A  0E27               	movlw	39
 14360  00186C  596A               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 14361  00186E  A0D8               	btfss	status,0,c
 14362  001870  D7D8               	goto	l12043
 14363  001872                     u12690:
 14364                           
 14365                           ; BSR set to: 0
 14366                           ;diskio.c: 393: if(count2==10)
 14367                           
 14368                           ; BSR set to: 0
 14369  001872  0E0A               	movlw	10
 14370  001874  1969               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 14371  001876  116A               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 14372  001878  A4D8               	btfss	status,2,c
 14373  00187A  D036               	goto	u12730
 14374                           
 14375                           ; BSR set to: 0
 14376                           ;diskio.c: 394: {;diskio.c: 395: count2 = 0;
 14377  00187C  0E00               	movlw	0
 14378  00187E  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 14379  001880  0E00               	movlw	0
 14380  001882  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 14381                           
 14382                           ; BSR set to: 0
 14383                           ;diskio.c: 396: dummy_clocks(10);
 14384  001884  0E0A               	movlw	10
 14385  001886  ECEC  F02B         	call	_dummy_clocks
 14386                           
 14387                           ;diskio.c: 397: command(0X41, 0X00000000, 0XFF);
 14388  00188A  0E00               	movlw	0
 14389  00188C  6E1E               	movwf	command@arg^0,c
 14390  00188E  0E00               	movlw	0
 14391  001890  6E1F               	movwf	(command@arg+1)^0,c
 14392  001892  0E00               	movlw	0
 14393  001894  6E20               	movwf	(command@arg+2)^0,c
 14394  001896  0E00               	movlw	0
 14395  001898  6E21               	movwf	(command@arg+3)^0,c
 14396  00189A  0EFF               	movlw	255
 14397  00189C  6E22               	movwf	command@CRC^0,c
 14398  00189E  0E41               	movlw	65
 14399  0018A0  ECF6  F028         	call	_command
 14400                           
 14401                           ;diskio.c: 398: proceed();
 14402  0018A4  EC53  F02F         	call	_proceed	;wreg free
 14403  0018A8                     l12069:
 14404                           
 14405                           ;diskio.c: 400: buff = response();
 14406  0018A8  EC4D  F02F         	call	_response	;wreg free
 14407  0018AC  0100               	movlb	0	; () banked
 14408  0018AE  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 14409                           
 14410                           ; BSR set to: 0
 14411                           ;diskio.c: 401: count2++;
 14412  0018B0  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 14413  0018B2  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 14414                           
 14415                           ; BSR set to: 0
 14416                           ;diskio.c: 402: if(buff==0x00)
 14417  0018B4  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14418  0018B6  A4D8               	btfss	status,2,c
 14419  0018B8  D00B               	goto	l12079
 14420                           
 14421                           ; BSR set to: 0
 14422                           ;diskio.c: 403: {;diskio.c: 404: posicao_cursor_lcd(1,0);
 14423  0018BA  0E00               	movlw	0
 14424  0018BC  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
 14425  0018BE  0E01               	movlw	1
 14426  0018C0  EC9A  F028         	call	_posicao_cursor_lcd
 14427                           
 14428                           ;diskio.c: 405: escreve_frase_ram_lcd("MMC Ver. 3");
 14429  0018C4  0E03               	movlw	low STR_4
 14430  0018C6  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
 14431  0018C8  0E62               	movlw	high STR_4
 14432  0018CA  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 14433  0018CC  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
 14434  0018D0                     l12079:
 14435                           
 14436                           ;diskio.c: 406: };diskio.c: 408: }while(buff!=0X00 && count2<10000);
 14437  0018D0  0100               	movlb	0	; () banked
 14438  0018D2  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14439  0018D4  B4D8               	btfsc	status,2,c
 14440  0018D6  D008               	goto	u12730
 14441                           
 14442                           ; BSR set to: 0
 14443  0018D8  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 14444  0018DA  D7E6               	goto	l12069
 14445  0018DC  0E10               	movlw	16
 14446  0018DE  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 14447  0018E0  0E27               	movlw	39
 14448  0018E2  596A               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 14449  0018E4  A0D8               	btfss	status,0,c
 14450  0018E6  D7E0               	goto	l12069
 14451  0018E8                     u12730:
 14452                           
 14453                           ; BSR set to: 0
 14454                           ;diskio.c: 409: };diskio.c: 412: dummy_clocks(10);
 14455  0018E8  0E0A               	movlw	10
 14456  0018EA  ECEC  F02B         	call	_dummy_clocks
 14457                           
 14458                           ;diskio.c: 413: command(0X50,0X00000200,0XFF);
 14459  0018EE  0E00               	movlw	0
 14460  0018F0  6E1E               	movwf	command@arg^0,c
 14461  0018F2  0E02               	movlw	2
 14462  0018F4  6E1F               	movwf	(command@arg+1)^0,c
 14463  0018F6  0E00               	movlw	0
 14464  0018F8  6E20               	movwf	(command@arg+2)^0,c
 14465  0018FA  0E00               	movlw	0
 14466  0018FC  6E21               	movwf	(command@arg+3)^0,c
 14467  0018FE  0EFF               	movlw	255
 14468  001900  6E22               	movwf	command@CRC^0,c
 14469  001902  0E50               	movlw	80
 14470  001904  ECF6  F028         	call	_command
 14471                           
 14472                           ;diskio.c: 414: proceed();
 14473  001908  EC53  F02F         	call	_proceed	;wreg free
 14474  00190C                     
 14475                           ;diskio.c: 418: buff = response();
 14476  00190C  EC4D  F02F         	call	_response	;wreg free
 14477  001910  0100               	movlb	0	; () banked
 14478  001912  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 14479                           
 14480                           ; BSR set to: 0
 14481                           ;diskio.c: 419: }while(buff!=0X00);
 14482  001914  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 14483  001916  A4D8               	btfss	status,2,c
 14484  001918  D7F9               	goto	l12087
 14485  00191A                     u12740:
 14486                           
 14487                           ; BSR set to: 0
 14488                           ;diskio.c: 421: };diskio.c: 425: return stat;
 14489  00191A  5162               	movf	sdc_disk_initialize@stat& (0+255),w,b
 14490                           
 14491                           ; BSR set to: 0
 14492  00191C  0012               	return		;funcret
 14493  00191E                     __end_of_sdc_disk_initialize:
 14494                           	callstack 0
 14495                           
 14496 ;; *************** function _sdc_reset *****************
 14497 ;; Defined at:
 14498 ;;		line 238 in file "bibliotecas/diskio.c"
 14499 ;; Parameters:    Size  Location     Type
 14500 ;;		None
 14501 ;; Auto vars:     Size  Location     Type
 14502 ;;  teste          10    0        unsigned char [10]
 14503 ;;  count           2   40[COMRAM] int 
 14504 ;;  count_nosd      2   38[COMRAM] int 
 14505 ;;  i               2    0        int 
 14506 ;;  receive         2    0        unsigned int 
 14507 ;;  buff            1   42[COMRAM] unsigned char 
 14508 ;;  stat            1    0        unsigned char 
 14509 ;; Return value:  Size  Location     Type
 14510 ;;                  1    wreg      void 
 14511 ;; Registers used:
 14512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14513 ;; Tracked objects:
 14514 ;;		On entry : 0/0
 14515 ;;		On exit  : 0/0
 14516 ;;		Unchanged: 0/0
 14517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14518 ;;      Params:         0       0       0       0       0       0       0       0       0
 14519 ;;      Locals:         7       0       0       0       0       0       0       0       0
 14520 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14521 ;;      Totals:         7       0       0       0       0       0       0       0       0
 14522 ;;Total ram usage:        7 bytes
 14523 ;; Hardware stack levels used:    1
 14524 ;; Hardware stack levels required when called:    6
 14525 ;; This function calls:
 14526 ;;		_command
 14527 ;;		_escreve_frase_ram_lcd
 14528 ;;		_posicao_cursor_lcd
 14529 ;;		_proceed
 14530 ;;		_response
 14531 ;; This function is called by:
 14532 ;;		_sdc_disk_initialize
 14533 ;; This function uses a non-reentrant model
 14534 ;;
 14535                           
 14536                           	psect	text72
 14537  004ADC                     __ptext72:
 14538                           	callstack 0
 14539  004ADC                     _sdc_reset:
 14540                           	callstack 17
 14541                           
 14542                           ; BSR set to: 0
 14543                           ;incstack = 0
 14544  004ADC  0E00               	movlw	0
 14545  004ADE  6E2A               	movwf	(sdc_reset@count+1)^0,c
 14546  004AE0  0E00               	movlw	0
 14547  004AE2  6E29               	movwf	sdc_reset@count^0,c
 14548  004AE4  0E00               	movlw	0
 14549  004AE6  6E28               	movwf	(sdc_reset@count_nosd+1)^0,c
 14550  004AE8  0E00               	movlw	0
 14551  004AEA  6E27               	movwf	sdc_reset@count_nosd^0,c
 14552  004AEC                     l11763:
 14553                           
 14554                           ;diskio.c: 248: command(0x40, 0X00000000, 0X95);
 14555  004AEC  0E00               	movlw	0
 14556  004AEE  6E1E               	movwf	command@arg^0,c
 14557  004AF0  0E00               	movlw	0
 14558  004AF2  6E1F               	movwf	(command@arg+1)^0,c
 14559  004AF4  0E00               	movlw	0
 14560  004AF6  6E20               	movwf	(command@arg+2)^0,c
 14561  004AF8  0E00               	movlw	0
 14562  004AFA  6E21               	movwf	(command@arg+3)^0,c
 14563  004AFC  0E95               	movlw	149
 14564  004AFE  6E22               	movwf	command@CRC^0,c
 14565  004B00  0E40               	movlw	64
 14566  004B02  ECF6  F028         	call	_command
 14567                           
 14568                           ;diskio.c: 249: proceed();
 14569  004B06  EC53  F02F         	call	_proceed	;wreg free
 14570  004B0A                     l11767:
 14571                           
 14572                           ;diskio.c: 251: buff = response();
 14573  004B0A  EC4D  F02F         	call	_response	;wreg free
 14574  004B0E  6E2B               	movwf	sdc_reset@buff^0,c
 14575                           
 14576                           ;diskio.c: 252: count++;
 14577  004B10  4A29               	infsnz	sdc_reset@count^0,f,c
 14578  004B12  2A2A               	incf	(sdc_reset@count+1)^0,f,c
 14579                           
 14580                           ;diskio.c: 253: }while(buff!=0X01 && count<10);
 14581  004B14  042B               	decf	sdc_reset@buff^0,w,c
 14582  004B16  B4D8               	btfsc	status,2,c
 14583  004B18  D008               	goto	u12270
 14584  004B1A  BE2A               	btfsc	(sdc_reset@count+1)^0,7,c
 14585  004B1C  D7F6               	goto	l11767
 14586  004B1E  502A               	movf	(sdc_reset@count+1)^0,w,c
 14587  004B20  E104               	bnz	u12270
 14588  004B22  0E0A               	movlw	10
 14589  004B24  5C29               	subwf	sdc_reset@count^0,w,c
 14590  004B26  A0D8               	btfss	status,0,c
 14591  004B28  D7F0               	goto	l11767
 14592  004B2A                     u12270:
 14593                           
 14594                           ;diskio.c: 254: count = 0;
 14595  004B2A  0E00               	movlw	0
 14596  004B2C  6E2A               	movwf	(sdc_reset@count+1)^0,c
 14597  004B2E  0E00               	movlw	0
 14598  004B30  6E29               	movwf	sdc_reset@count^0,c
 14599                           
 14600                           ;diskio.c: 255: if(buff != 0x01)
 14601  004B32  042B               	decf	sdc_reset@buff^0,w,c
 14602  004B34  B4D8               	btfsc	status,2,c
 14603  004B36  D016               	goto	l11785
 14604                           
 14605                           ;diskio.c: 256: {;diskio.c: 257: posicao_cursor_lcd(1,0);
 14606  004B38  0E00               	movlw	0
 14607  004B3A  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
 14608  004B3C  0E01               	movlw	1
 14609  004B3E  EC9A  F028         	call	_posicao_cursor_lcd
 14610                           
 14611                           ;diskio.c: 258: escreve_frase_ram_lcd("Sem Cartao");
 14612  004B42  0E0E               	movlw	low STR_1
 14613  004B44  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
 14614  004B46  0E62               	movlw	high STR_1
 14615  004B48  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 14616  004B4A  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
 14617                           
 14618                           ;diskio.c: 259: posicao_cursor_lcd(2,0);
 14619  004B4E  0E00               	movlw	0
 14620  004B50  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
 14621  004B52  0E02               	movlw	2
 14622  004B54  EC9A  F028         	call	_posicao_cursor_lcd
 14623                           
 14624                           ;diskio.c: 260: escreve_frase_ram_lcd("Insira o Cartao");
 14625  004B58  0EB0               	movlw	low STR_2
 14626  004B5A  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
 14627  004B5C  0E61               	movlw	high STR_2
 14628  004B5E  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 14629  004B60  ECCE  F029         	call	_escreve_frase_ram_lcd	;wreg free
 14630  004B64                     l11785:
 14631                           
 14632                           ;diskio.c: 261: };diskio.c: 263: }while(buff!=0X01);
 14633  004B64  042B               	decf	sdc_reset@buff^0,w,c
 14634  004B66  B4D8               	btfsc	status,2,c
 14635  004B68  0012               	return	
 14636  004B6A  D7C0               	goto	l11763
 14637  004B6C                     __end_of_sdc_reset:
 14638                           	callstack 0
 14639                           
 14640 ;; *************** function _posicao_cursor_lcd *****************
 14641 ;; Defined at:
 14642 ;;		line 271 in file "bibliotecas/display_lcd.c"
 14643 ;; Parameters:    Size  Location     Type
 14644 ;;  linha           1    wreg     unsigned char 
 14645 ;;  coluna          1   27[COMRAM] unsigned char 
 14646 ;; Auto vars:     Size  Location     Type
 14647 ;;  linha           1   28[COMRAM] unsigned char 
 14648 ;;  endereco        1   29[COMRAM] unsigned char 
 14649 ;; Return value:  Size  Location     Type
 14650 ;;                  1    wreg      void 
 14651 ;; Registers used:
 14652 ;;		wreg, status,2, status,0, cstack
 14653 ;; Tracked objects:
 14654 ;;		On entry : 0/0
 14655 ;;		On exit  : 0/0
 14656 ;;		Unchanged: 0/0
 14657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14658 ;;      Params:         1       0       0       0       0       0       0       0       0
 14659 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14660 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14661 ;;      Totals:         3       0       0       0       0       0       0       0       0
 14662 ;;Total ram usage:        3 bytes
 14663 ;; Hardware stack levels used:    1
 14664 ;; Hardware stack levels required when called:    5
 14665 ;; This function calls:
 14666 ;;		_endereco_cursor_lcd
 14667 ;; This function is called by:
 14668 ;;		_sdc_reset
 14669 ;;		_sdc_disk_initialize
 14670 ;;		_mensagem_inicial
 14671 ;;		_troca_de_tela
 14672 ;; This function uses a non-reentrant model
 14673 ;;
 14674                           
 14675                           	psect	text73
 14676  005134                     __ptext73:
 14677                           	callstack 0
 14678  005134                     _posicao_cursor_lcd:
 14679                           	callstack 24
 14680                           
 14681                           ;incstack = 0
 14682                           ;posicao_cursor_lcd@linha stored from wreg
 14683  005134  6E1D               	movwf	posicao_cursor_lcd@linha^0,c
 14684                           
 14685                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 14686  005136  0E11               	movlw	17
 14687  005138  601C               	cpfslt	posicao_cursor_lcd@coluna^0,c
 14688  00513A  0012               	return	
 14689  00513C  D01B               	goto	l11625
 14690  00513E                     l232:
 14691                           
 14692                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 14693  00513E  C01C  F01E         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 14694                           
 14695                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 14696  005142  501E               	movf	posicao_cursor_lcd@endereco^0,w,c
 14697  005144  EC02  F028         	call	_endereco_cursor_lcd
 14698                           
 14699                           ;display_lcd.c: 284: break;
 14700  005148  D022               	goto	l11627
 14701  00514A                     l11609:
 14702                           
 14703                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 14704  00514A  501C               	movf	posicao_cursor_lcd@coluna^0,w,c
 14705  00514C  0F40               	addlw	64
 14706  00514E  6E1E               	movwf	posicao_cursor_lcd@endereco^0,c
 14707                           
 14708                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 14709  005150  501E               	movf	posicao_cursor_lcd@endereco^0,w,c
 14710  005152  EC02  F028         	call	_endereco_cursor_lcd
 14711                           
 14712                           ;display_lcd.c: 289: break;
 14713  005156  D01B               	goto	l11627
 14714  005158                     l11613:
 14715                           
 14716                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 14717  005158  501C               	movf	posicao_cursor_lcd@coluna^0,w,c
 14718  00515A  0F14               	addlw	20
 14719  00515C  6E1E               	movwf	posicao_cursor_lcd@endereco^0,c
 14720                           
 14721                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 14722  00515E  501E               	movf	posicao_cursor_lcd@endereco^0,w,c
 14723  005160  EC02  F028         	call	_endereco_cursor_lcd
 14724                           
 14725                           ;display_lcd.c: 294: break;
 14726  005164  D014               	goto	l11627
 14727  005166                     l11617:
 14728                           
 14729                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 14730  005166  501C               	movf	posicao_cursor_lcd@coluna^0,w,c
 14731  005168  0F54               	addlw	84
 14732  00516A  6E1E               	movwf	posicao_cursor_lcd@endereco^0,c
 14733                           
 14734                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 14735  00516C  501E               	movf	posicao_cursor_lcd@endereco^0,w,c
 14736  00516E  EC02  F028         	call	_endereco_cursor_lcd
 14737                           
 14738                           ;display_lcd.c: 303: break;
 14739                           
 14740                           ;display_lcd.c: 299: break;
 14741  005172  D00D               	goto	l11627
 14742  005174                     l11625:
 14743  005174  501D               	movf	posicao_cursor_lcd@linha^0,w,c
 14744                           
 14745                           ; Switch size 1, requested type "simple"
 14746                           ; Number of cases is 4, Range of values is 1 to 4
 14747                           ; switch strategies available:
 14748                           ; Name         Instructions Cycles
 14749                           ; simple_byte           13     7 (average)
 14750                           ;	Chosen strategy is simple_byte
 14751  005176  0A01               	xorlw	1	; case 1
 14752  005178  B4D8               	btfsc	status,2,c
 14753  00517A  D7E1               	goto	l232
 14754  00517C  0A03               	xorlw	3	; case 2
 14755  00517E  B4D8               	btfsc	status,2,c
 14756  005180  D7E4               	goto	l11609
 14757  005182  0A01               	xorlw	1	; case 3
 14758  005184  B4D8               	btfsc	status,2,c
 14759  005186  D7E8               	goto	l11613
 14760  005188  0A07               	xorlw	7	; case 4
 14761  00518A  B4D8               	btfsc	status,2,c
 14762  00518C  D7EC               	goto	l11617
 14763  00518E                     l11627:
 14764                           
 14765                           ;display_lcd.c: 306: coluna++;
 14766  00518E  2A1C               	incf	posicao_cursor_lcd@coluna^0,f,c
 14767                           
 14768                           ;display_lcd.c: 307: }
 14769  005190  0012               	return	
 14770  005192                     __end_of_posicao_cursor_lcd:
 14771                           	callstack 0
 14772                           
 14773 ;; *************** function _endereco_cursor_lcd *****************
 14774 ;; Defined at:
 14775 ;;		line 218 in file "bibliotecas/display_lcd.c"
 14776 ;; Parameters:    Size  Location     Type
 14777 ;;  endereco        1    wreg     unsigned char 
 14778 ;; Auto vars:     Size  Location     Type
 14779 ;;  endereco        1   26[COMRAM] unsigned char 
 14780 ;; Return value:  Size  Location     Type
 14781 ;;                  1    wreg      void 
 14782 ;; Registers used:
 14783 ;;		wreg, status,2, status,0, cstack
 14784 ;; Tracked objects:
 14785 ;;		On entry : 0/0
 14786 ;;		On exit  : 0/0
 14787 ;;		Unchanged: 0/0
 14788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14789 ;;      Params:         0       0       0       0       0       0       0       0       0
 14790 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14791 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14792 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14793 ;;Total ram usage:        1 bytes
 14794 ;; Hardware stack levels used:    1
 14795 ;; Hardware stack levels required when called:    4
 14796 ;; This function calls:
 14797 ;;		_delay
 14798 ;; This function is called by:
 14799 ;;		_posicao_cursor_lcd
 14800 ;; This function uses a non-reentrant model
 14801 ;;
 14802                           
 14803                           	psect	text74
 14804  005004                     __ptext74:
 14805                           	callstack 0
 14806  005004                     _endereco_cursor_lcd:
 14807                           	callstack 24
 14808                           
 14809                           ;incstack = 0
 14810                           ;endereco_cursor_lcd@endereco stored from wreg
 14811  005004  6E1B               	movwf	endereco_cursor_lcd@endereco^0,c
 14812                           
 14813                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 14814  005006  9483               	bcf	131,2,c	;volatile
 14815                           
 14816                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 14817  005008  9283               	bcf	131,1,c	;volatile
 14818                           
 14819                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 14820  00500A  9083               	bcf	131,0,c	;volatile
 14821                           
 14822                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 14823  00500C  8E83               	bsf	131,7,c	;volatile
 14824                           
 14825                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 14826  00500E  A81B               	btfss	endereco_cursor_lcd@endereco^0,4,c
 14827  005010  D002               	goto	l213
 14828  005012  8883               	bsf	131,4,c	;volatile
 14829  005014  D001               	goto	l11463
 14830  005016                     l213:
 14831                           
 14832                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 14833  005016  9883               	bcf	131,4,c	;volatile
 14834  005018                     l11463:
 14835                           
 14836                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 14837  005018  AA1B               	btfss	endereco_cursor_lcd@endereco^0,5,c
 14838  00501A  D002               	goto	l215
 14839  00501C  8A83               	bsf	131,5,c	;volatile
 14840  00501E  D001               	goto	l11467
 14841  005020                     l215:
 14842                           
 14843                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 14844  005020  9A83               	bcf	131,5,c	;volatile
 14845  005022                     l11467:
 14846                           
 14847                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 14848  005022  AC1B               	btfss	endereco_cursor_lcd@endereco^0,6,c
 14849  005024  D002               	goto	l217
 14850  005026  8C83               	bsf	131,6,c	;volatile
 14851  005028  D001               	goto	l218
 14852  00502A                     l217:
 14853                           
 14854                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 14855  00502A  9C83               	bcf	131,6,c	;volatile
 14856  00502C                     l218:
 14857                           
 14858                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 14859  00502C  8083               	bsf	131,0,c	;volatile
 14860                           
 14861                           ;display_lcd.c: 236: delay();
 14862  00502E  EC65  F02E         	call	_delay	;wreg free
 14863                           
 14864                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 14865  005032  9083               	bcf	131,0,c	;volatile
 14866                           
 14867                           ;display_lcd.c: 238: delay();
 14868  005034  EC65  F02E         	call	_delay	;wreg free
 14869                           
 14870                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 14871  005038  A01B               	btfss	endereco_cursor_lcd@endereco^0,0,c
 14872  00503A  D002               	goto	l219
 14873  00503C  8883               	bsf	131,4,c	;volatile
 14874  00503E  D001               	goto	l220
 14875  005040                     l219:
 14876                           
 14877                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 14878  005040  9883               	bcf	131,4,c	;volatile
 14879  005042                     l220:
 14880                           
 14881                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 14882  005042  A21B               	btfss	endereco_cursor_lcd@endereco^0,1,c
 14883  005044  D002               	goto	l221
 14884  005046  8A83               	bsf	131,5,c	;volatile
 14885  005048  D001               	goto	l222
 14886  00504A                     l221:
 14887                           
 14888                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 14889  00504A  9A83               	bcf	131,5,c	;volatile
 14890  00504C                     l222:
 14891                           
 14892                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 14893  00504C  A41B               	btfss	endereco_cursor_lcd@endereco^0,2,c
 14894  00504E  D002               	goto	l223
 14895  005050  8C83               	bsf	131,6,c	;volatile
 14896  005052  D001               	goto	l224
 14897  005054                     l223:
 14898                           
 14899                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 14900  005054  9C83               	bcf	131,6,c	;volatile
 14901  005056                     l224:
 14902                           
 14903                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 14904  005056  A61B               	btfss	endereco_cursor_lcd@endereco^0,3,c
 14905  005058  D002               	goto	l225
 14906  00505A  8E83               	bsf	131,7,c	;volatile
 14907  00505C  D001               	goto	l226
 14908  00505E                     l225:
 14909                           
 14910                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 14911  00505E  9E83               	bcf	131,7,c	;volatile
 14912  005060                     l226:
 14913                           
 14914                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 14915  005060  8083               	bsf	131,0,c	;volatile
 14916                           
 14917                           ;display_lcd.c: 252: delay();
 14918  005062  EC65  F02E         	call	_delay	;wreg free
 14919                           
 14920                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 14921  005066  9083               	bcf	131,0,c	;volatile
 14922                           
 14923                           ;display_lcd.c: 254: delay();
 14924  005068  EC65  F02E         	call	_delay	;wreg free
 14925  00506C  0012               	return		;funcret
 14926  00506E                     __end_of_endereco_cursor_lcd:
 14927                           	callstack 0
 14928                           
 14929 ;; *************** function _escreve_frase_ram_lcd *****************
 14930 ;; Defined at:
 14931 ;;		line 445 in file "bibliotecas/display_lcd.c"
 14932 ;; Parameters:    Size  Location     Type
 14933 ;;  buffer          2   27[COMRAM] PTR unsigned char 
 14934 ;;		 -> STR_33(2), STR_32(7), STR_31(14), STR_30(17), 
 14935 ;;		 -> STR_29(4), STR_28(4), STR_27(5), STR_26(5), 
 14936 ;;		 -> STR_23(11), mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), NULL(0), 
 14937 ;;		 -> STR_12(9), STR_11(10), STR_10(10), STR_9(14), 
 14938 ;;		 -> STR_8(21), STR_7(15), rawFix(2), rawLongitude(13), 
 14939 ;;		 -> rawLatitude(13), escreve_inteiro_lcd@texto(7), STR_4(11), STR_3(10), 
 14940 ;;		 -> STR_2(16), STR_1(11), 
 14941 ;; Auto vars:     Size  Location     Type
 14942 ;;		None
 14943 ;; Return value:  Size  Location     Type
 14944 ;;                  1    wreg      void 
 14945 ;; Registers used:
 14946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14947 ;; Tracked objects:
 14948 ;;		On entry : 0/0
 14949 ;;		On exit  : 0/0
 14950 ;;		Unchanged: 0/0
 14951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14952 ;;      Params:         2       0       0       0       0       0       0       0       0
 14953 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14954 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14955 ;;      Totals:         2       0       0       0       0       0       0       0       0
 14956 ;;Total ram usage:        2 bytes
 14957 ;; Hardware stack levels used:    1
 14958 ;; Hardware stack levels required when called:    5
 14959 ;; This function calls:
 14960 ;;		_escreve_caractere_lcd
 14961 ;; This function is called by:
 14962 ;;		_sdc_reset
 14963 ;;		_sdc_disk_initialize
 14964 ;;		_escreve_inteiro_lcd
 14965 ;;		_mensagem_inicial
 14966 ;;		_troca_de_tela
 14967 ;; This function uses a non-reentrant model
 14968 ;;
 14969                           
 14970                           	psect	text75
 14971  00539C                     __ptext75:
 14972                           	callstack 0
 14973  00539C                     _escreve_frase_ram_lcd:
 14974                           	callstack 24
 14975                           
 14976                           ;display_lcd.c: 447: while(*buffer)
 14977                           
 14978                           ;incstack = 0
 14979  00539C  D014               	goto	l11637
 14980  00539E                     l11633:
 14981                           
 14982                           ;display_lcd.c: 448: {;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 14983  00539E  C01C  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 14984  0053A2  C01D  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 14985  0053A6  6AF8               	clrf	tblptru,c
 14986  0053A8  0E07               	movlw	(high __ramtop+-1)
 14987  0053AA  64F7               	cpfsgt	tblptrh,c
 14988  0053AC  D003               	bra	u12037
 14989  0053AE  0008               	tblrd		*
 14990  0053B0  50F5               	movf	tablat,w,c
 14991  0053B2  D005               	bra	u12030
 14992  0053B4                     u12037:
 14993  0053B4  CFF6 FFE1          	movff	tblptrl,fsr1l
 14994  0053B8  CFF7 FFE2          	movff	tblptrh,fsr1h
 14995  0053BC  50E7               	movf	indf1,w,c
 14996  0053BE                     u12030:
 14997  0053BE  EC91  F027         	call	_escreve_caractere_lcd
 14998                           
 14999                           ;display_lcd.c: 450: buffer++;
 15000  0053C2  4A1C               	infsnz	escreve_frase_ram_lcd@buffer^0,f,c
 15001  0053C4  2A1D               	incf	(escreve_frase_ram_lcd@buffer+1)^0,f,c
 15002  0053C6                     l11637:
 15003  0053C6  C01C  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 15004  0053CA  C01D  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 15005  0053CE  6AF8               	clrf	tblptru,c
 15006  0053D0  0E07               	movlw	(high __ramtop+-1)
 15007  0053D2  64F7               	cpfsgt	tblptrh,c
 15008  0053D4  D003               	bra	u12047
 15009  0053D6  0008               	tblrd		*
 15010  0053D8  50F5               	movf	tablat,w,c
 15011  0053DA  D005               	bra	u12040
 15012  0053DC                     u12047:
 15013  0053DC  CFF6 FFE1          	movff	tblptrl,fsr1l
 15014  0053E0  CFF7 FFE2          	movff	tblptrh,fsr1h
 15015  0053E4  50E7               	movf	indf1,w,c
 15016  0053E6                     u12040:
 15017  0053E6  0900               	iorlw	0
 15018  0053E8  B4D8               	btfsc	status,2,c
 15019  0053EA  0012               	return	
 15020  0053EC  D7D8               	goto	l11633
 15021  0053EE                     __end_of_escreve_frase_ram_lcd:
 15022                           	callstack 0
 15023                           
 15024 ;; *************** function _escreve_caractere_lcd *****************
 15025 ;; Defined at:
 15026 ;;		line 323 in file "bibliotecas/display_lcd.c"
 15027 ;; Parameters:    Size  Location     Type
 15028 ;;  data            1    wreg     unsigned char 
 15029 ;; Auto vars:     Size  Location     Type
 15030 ;;  data            1   26[COMRAM] unsigned char 
 15031 ;; Return value:  Size  Location     Type
 15032 ;;                  1    wreg      void 
 15033 ;; Registers used:
 15034 ;;		wreg, status,2, status,0, cstack
 15035 ;; Tracked objects:
 15036 ;;		On entry : 0/0
 15037 ;;		On exit  : 0/0
 15038 ;;		Unchanged: 0/0
 15039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15040 ;;      Params:         0       0       0       0       0       0       0       0       0
 15041 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15042 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15043 ;;      Totals:         1       0       0       0       0       0       0       0       0
 15044 ;;Total ram usage:        1 bytes
 15045 ;; Hardware stack levels used:    1
 15046 ;; Hardware stack levels required when called:    4
 15047 ;; This function calls:
 15048 ;;		_delay
 15049 ;; This function is called by:
 15050 ;;		_escreve_frase_ram_lcd
 15051 ;; This function uses a non-reentrant model
 15052 ;;
 15053                           
 15054                           	psect	text76
 15055  004F22                     __ptext76:
 15056                           	callstack 0
 15057  004F22                     _escreve_caractere_lcd:
 15058                           	callstack 24
 15059                           
 15060                           ;incstack = 0
 15061                           ;escreve_caractere_lcd@data stored from wreg
 15062  004F22  6E1B               	movwf	escreve_caractere_lcd@data^0,c
 15063                           
 15064                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 15065  004F24  9483               	bcf	131,2,c	;volatile
 15066                           
 15067                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 15068  004F26  8283               	bsf	131,1,c	;volatile
 15069                           
 15070                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 15071  004F28  9083               	bcf	131,0,c	;volatile
 15072                           
 15073                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 15074  004F2A  A81B               	btfss	escreve_caractere_lcd@data^0,4,c
 15075  004F2C  D002               	goto	l242
 15076  004F2E  8883               	bsf	131,4,c	;volatile
 15077  004F30  D001               	goto	l11495
 15078  004F32                     l242:
 15079                           
 15080                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 15081  004F32  9883               	bcf	131,4,c	;volatile
 15082  004F34                     l11495:
 15083                           
 15084                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 15085  004F34  AA1B               	btfss	escreve_caractere_lcd@data^0,5,c
 15086  004F36  D002               	goto	l244
 15087  004F38  8A83               	bsf	131,5,c	;volatile
 15088  004F3A  D001               	goto	l11499
 15089  004F3C                     l244:
 15090                           
 15091                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 15092  004F3C  9A83               	bcf	131,5,c	;volatile
 15093  004F3E                     l11499:
 15094                           
 15095                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 15096  004F3E  AC1B               	btfss	escreve_caractere_lcd@data^0,6,c
 15097  004F40  D002               	goto	l246
 15098  004F42  8C83               	bsf	131,6,c	;volatile
 15099  004F44  D001               	goto	l11503
 15100  004F46                     l246:
 15101                           
 15102                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 15103  004F46  9C83               	bcf	131,6,c	;volatile
 15104  004F48                     l11503:
 15105                           
 15106                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 15107  004F48  AE1B               	btfss	escreve_caractere_lcd@data^0,7,c
 15108  004F4A  D002               	goto	l248
 15109  004F4C  8E83               	bsf	131,7,c	;volatile
 15110  004F4E  D001               	goto	l249
 15111  004F50                     l248:
 15112                           
 15113                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 15114  004F50  9E83               	bcf	131,7,c	;volatile
 15115  004F52                     l249:
 15116                           
 15117                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 15118  004F52  8083               	bsf	131,0,c	;volatile
 15119                           
 15120                           ;display_lcd.c: 342: delay();
 15121  004F54  EC65  F02E         	call	_delay	;wreg free
 15122                           
 15123                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 15124  004F58  9083               	bcf	131,0,c	;volatile
 15125                           
 15126                           ;display_lcd.c: 344: delay();
 15127  004F5A  EC65  F02E         	call	_delay	;wreg free
 15128                           
 15129                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 15130  004F5E  A01B               	btfss	escreve_caractere_lcd@data^0,0,c
 15131  004F60  D002               	goto	l250
 15132  004F62  8883               	bsf	131,4,c	;volatile
 15133  004F64  D001               	goto	l251
 15134  004F66                     l250:
 15135                           
 15136                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 15137  004F66  9883               	bcf	131,4,c	;volatile
 15138  004F68                     l251:
 15139                           
 15140                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 15141  004F68  A21B               	btfss	escreve_caractere_lcd@data^0,1,c
 15142  004F6A  D002               	goto	l252
 15143  004F6C  8A83               	bsf	131,5,c	;volatile
 15144  004F6E  D001               	goto	l253
 15145  004F70                     l252:
 15146                           
 15147                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 15148  004F70  9A83               	bcf	131,5,c	;volatile
 15149  004F72                     l253:
 15150                           
 15151                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 15152  004F72  A41B               	btfss	escreve_caractere_lcd@data^0,2,c
 15153  004F74  D002               	goto	l254
 15154  004F76  8C83               	bsf	131,6,c	;volatile
 15155  004F78  D001               	goto	l255
 15156  004F7A                     l254:
 15157                           
 15158                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 15159  004F7A  9C83               	bcf	131,6,c	;volatile
 15160  004F7C                     l255:
 15161                           
 15162                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 15163  004F7C  A61B               	btfss	escreve_caractere_lcd@data^0,3,c
 15164  004F7E  D002               	goto	l256
 15165  004F80  8E83               	bsf	131,7,c	;volatile
 15166  004F82  D001               	goto	l257
 15167  004F84                     l256:
 15168                           
 15169                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 15170  004F84  9E83               	bcf	131,7,c	;volatile
 15171  004F86                     l257:
 15172                           
 15173                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 15174  004F86  8083               	bsf	131,0,c	;volatile
 15175                           
 15176                           ;display_lcd.c: 359: delay();
 15177  004F88  EC65  F02E         	call	_delay	;wreg free
 15178                           
 15179                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 15180  004F8C  9083               	bcf	131,0,c	;volatile
 15181                           
 15182                           ;display_lcd.c: 361: delay();
 15183  004F8E  EC65  F02E         	call	_delay	;wreg free
 15184  004F92  0012               	return		;funcret
 15185  004F94                     __end_of_escreve_caractere_lcd:
 15186                           	callstack 0
 15187                           
 15188 ;; *************** function _delay *****************
 15189 ;; Defined at:
 15190 ;;		line 45 in file "bibliotecas/display_lcd.c"
 15191 ;; Parameters:    Size  Location     Type
 15192 ;;		None
 15193 ;; Auto vars:     Size  Location     Type
 15194 ;;  contador_int    1   25[COMRAM] unsigned char 
 15195 ;;  contador_ext    1   24[COMRAM] unsigned char 
 15196 ;; Return value:  Size  Location     Type
 15197 ;;                  1    wreg      void 
 15198 ;; Registers used:
 15199 ;;		wreg, status,2, status,0
 15200 ;; Tracked objects:
 15201 ;;		On entry : 0/0
 15202 ;;		On exit  : 0/0
 15203 ;;		Unchanged: 0/0
 15204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15205 ;;      Params:         0       0       0       0       0       0       0       0       0
 15206 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15207 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15208 ;;      Totals:         2       0       0       0       0       0       0       0       0
 15209 ;;Total ram usage:        2 bytes
 15210 ;; Hardware stack levels used:    1
 15211 ;; Hardware stack levels required when called:    3
 15212 ;; This function calls:
 15213 ;;		Nothing
 15214 ;; This function is called by:
 15215 ;;		_init_lcd
 15216 ;;		_escreve_cmd_lcd
 15217 ;;		_endereco_cursor_lcd
 15218 ;;		_escreve_caractere_lcd
 15219 ;; This function uses a non-reentrant model
 15220 ;;
 15221                           
 15222                           	psect	text77
 15223  005CCA                     __ptext77:
 15224                           	callstack 0
 15225  005CCA                     _delay:
 15226                           	callstack 24
 15227                           
 15228                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;;display_lcd.c: 49: for(con
      +                          tador_ext = 0; contador_ext<100; contador_ext++)
 15229                           
 15230                           ;incstack = 0
 15231  005CCA  0E00               	movlw	0
 15232  005CCC  6E19               	movwf	delay@contador_ext^0,c
 15233  005CCE                     l181:
 15234                           
 15235                           ;display_lcd.c: 50: {;display_lcd.c: 51: __nop();
 15236  005CCE  F000               	nop	
 15237                           
 15238                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 15239  005CD0  0E00               	movlw	0
 15240  005CD2  6E1A               	movwf	delay@contador_int^0,c
 15241  005CD4                     l183:
 15242                           
 15243                           ;display_lcd.c: 53: {;display_lcd.c: 54: __nop();
 15244  005CD4  F000               	nop	
 15245  005CD6  2A1A               	incf	delay@contador_int^0,f,c
 15246  005CD8  0E31               	movlw	49
 15247  005CDA  641A               	cpfsgt	delay@contador_int^0,c
 15248  005CDC  D7FB               	goto	l183
 15249  005CDE  2A19               	incf	delay@contador_ext^0,f,c
 15250  005CE0  0E63               	movlw	99
 15251  005CE2  6419               	cpfsgt	delay@contador_ext^0,c
 15252  005CE4  D7F4               	goto	l181
 15253  005CE6  0012               	return	
 15254  005CE8                     __end_of_delay:
 15255                           	callstack 0
 15256                           
 15257 ;; *************** function _check_fs *****************
 15258 ;; Defined at:
 15259 ;;		line 624 in file "bibliotecas/tff.c"
 15260 ;; Parameters:    Size  Location     Type
 15261 ;;  sect            4   19[BANK0 ] unsigned long 
 15262 ;; Auto vars:     Size  Location     Type
 15263 ;;  fs              2   25[BANK0 ] PTR struct _FATFS
 15264 ;;		 -> NULL(0), fs(544), 
 15265 ;; Return value:  Size  Location     Type
 15266 ;;                  1    wreg      unsigned char 
 15267 ;; Registers used:
 15268 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15269 ;; Tracked objects:
 15270 ;;		On entry : 3F/0
 15271 ;;		On exit  : 0/0
 15272 ;;		Unchanged: 0/0
 15273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15274 ;;      Params:         0       4       0       0       0       0       0       0       0
 15275 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15276 ;;      Temps:          0       2       0       0       0       0       0       0       0
 15277 ;;      Totals:         0       8       0       0       0       0       0       0       0
 15278 ;;Total ram usage:        8 bytes
 15279 ;; Hardware stack levels used:    1
 15280 ;; Hardware stack levels required when called:    8
 15281 ;; This function calls:
 15282 ;;		_disk_read
 15283 ;;		_memcmp
 15284 ;; This function is called by:
 15285 ;;		_auto_mount
 15286 ;; This function uses a non-reentrant model
 15287 ;;
 15288                           
 15289                           	psect	text78
 15290  004E1E                     __ptext78:
 15291                           	callstack 0
 15292  004E1E                     _check_fs:
 15293                           	callstack 17
 15294                           
 15295                           ; BSR set to: 0
 15296                           ;tff.c: 628: FATFS *fs = FatFs;
 15297                           
 15298                           ;incstack = 0
 15299  004E1E  C037  F079         	movff	_FatFs,check_fs@fs
 15300  004E22  C038  F07A         	movff	_FatFs+1,check_fs@fs+1
 15301                           
 15302                           ; BSR set to: 0
 15303                           ;tff.c: 630: if (disk_read(0, fs->win, sect, 1) != RES_OK)
 15304  004E26  0E20               	movlw	32
 15305  004E28  2579               	addwf	check_fs@fs& (0+255),w,b
 15306  004E2A  6F68               	movwf	disk_read@buff& (0+255),b
 15307  004E2C  0E00               	movlw	0
 15308  004E2E  217A               	addwfc	(check_fs@fs+1)& (0+255),w,b
 15309  004E30  6F69               	movwf	(disk_read@buff+1)& (0+255),b
 15310  004E32  C073  F06A         	movff	check_fs@sect,disk_read@sector
 15311  004E36  C074  F06B         	movff	check_fs@sect+1,disk_read@sector+1
 15312  004E3A  C075  F06C         	movff	check_fs@sect+2,disk_read@sector+2
 15313  004E3E  C076  F06D         	movff	check_fs@sect+3,disk_read@sector+3
 15314  004E42  0E01               	movlw	1
 15315  004E44  6F6E               	movwf	disk_read@count& (0+255),b
 15316  004E46  0E00               	movlw	0
 15317  004E48  ECCA  F027         	call	_disk_read
 15318  004E4C  0900               	iorlw	0
 15319  004E4E  B4D8               	btfsc	status,2,c
 15320  004E50  D002               	goto	l12411
 15321  004E52                     u13180:
 15322  004E52                     l12407:
 15323                           
 15324                           ; BSR set to: 0
 15325                           ;tff.c: 631: return 2;
 15326  004E52  0E02               	movlw	2
 15327  004E54  0012               	return	
 15328  004E56                     l12411:
 15329                           
 15330                           ; BSR set to: 0
 15331                           ;tff.c: 632: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 15332  004E56  EE22 F01E          	lfsr	2,542
 15333  004E5A  5179               	movf	check_fs@fs& (0+255),w,b
 15334  004E5C  26D9               	addwf	fsr2l,f,c
 15335  004E5E  517A               	movf	(check_fs@fs+1)& (0+255),w,b
 15336  004E60  22DA               	addwfc	fsr2h,f,c
 15337  004E62  0E55               	movlw	85
 15338  004E64  18DE               	xorwf	postinc2,w,c
 15339  004E66  E1F5               	bnz	l12407
 15340  004E68  0EAA               	movlw	170
 15341  004E6A  18DE               	xorwf	postinc2,w,c
 15342  004E6C  A4D8               	btfss	status,2,c
 15343  004E6E  D7F1               	goto	u13180
 15344                           
 15345                           ; BSR set to: 0
 15346                           ;tff.c: 635: if (!memcmp(&fs->win[54], "FAT", 3))
 15347  004E70  0E56               	movlw	86
 15348  004E72  2579               	addwf	check_fs@fs& (0+255),w,b
 15349  004E74  6E19               	movwf	memcmp@s1^0,c
 15350  004E76  0E00               	movlw	0
 15351  004E78  217A               	addwfc	(check_fs@fs+1)& (0+255),w,b
 15352  004E7A  6E1A               	movwf	(memcmp@s1+1)^0,c
 15353  004E7C  0E76               	movlw	low STR_21
 15354  004E7E  6E1B               	movwf	memcmp@s2^0,c
 15355  004E80  0E62               	movlw	high STR_21
 15356  004E82  6E1C               	movwf	(memcmp@s2+1)^0,c
 15357  004E84  0E00               	movlw	0
 15358  004E86  6E1E               	movwf	(memcmp@n+1)^0,c
 15359  004E88  0E03               	movlw	3
 15360  004E8A  6E1D               	movwf	memcmp@n^0,c
 15361  004E8C  EC25  F025         	call	_memcmp	;wreg free
 15362  004E90  5019               	movf	?_memcmp^0,w,c
 15363  004E92  101A               	iorwf	(?_memcmp+1)^0,w,c
 15364  004E94  A4D8               	btfss	status,2,c
 15365  004E96  D002               	goto	l12423
 15366                           
 15367                           ;tff.c: 636: return 0;
 15368  004E98  0E00               	movlw	0
 15369  004E9A  0012               	return	
 15370  004E9C                     l12423:
 15371                           
 15372                           ;tff.c: 641: return 1;
 15373  004E9C  0E01               	movlw	1
 15374  004E9E  0012               	return		;funcret
 15375  004EA0                     __end_of_check_fs:
 15376                           	callstack 0
 15377                           
 15378 ;; *************** function _memcmp *****************
 15379 ;; Defined at:
 15380 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\memcmp.c"
 15381 ;; Parameters:    Size  Location     Type
 15382 ;;  s1              2   24[COMRAM] PTR const void 
 15383 ;;		 -> fs.win(512), NULL(0), fs(544), 
 15384 ;;  s2              2   26[COMRAM] PTR const void 
 15385 ;;		 -> f_opendir@fn(12), f_open@fn(12), STR_21(4), 
 15386 ;;  n               2   28[COMRAM] unsigned int 
 15387 ;; Auto vars:     Size  Location     Type
 15388 ;;		None
 15389 ;; Return value:  Size  Location     Type
 15390 ;;                  2   24[COMRAM] int 
 15391 ;; Registers used:
 15392 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15393 ;; Tracked objects:
 15394 ;;		On entry : 3F/0
 15395 ;;		On exit  : 0/0
 15396 ;;		Unchanged: 0/0
 15397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15398 ;;      Params:         6       0       0       0       0       0       0       0       0
 15399 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15400 ;;      Temps:          2       0       0       0       0       0       0       0       0
 15401 ;;      Totals:         8       0       0       0       0       0       0       0       0
 15402 ;;Total ram usage:        8 bytes
 15403 ;; Hardware stack levels used:    1
 15404 ;; Hardware stack levels required when called:    3
 15405 ;; This function calls:
 15406 ;;		Nothing
 15407 ;; This function is called by:
 15408 ;;		_trace_path
 15409 ;;		_check_fs
 15410 ;; This function uses a non-reentrant model
 15411 ;;
 15412                           
 15413                           	psect	text79
 15414  004A4A                     __ptext79:
 15415                           	callstack 0
 15416  004A4A                     _memcmp:
 15417                           	callstack 22
 15418                           
 15419                           ; BSR set to: 0
 15420                           
 15421                           ;incstack = 0
 15422  004A4A  D03B               	goto	l12141
 15423  004A4C                     l12133:
 15424  004A4C  C019  FFD9         	movff	memcmp@s1,fsr2l
 15425  004A50  C01A  FFDA         	movff	memcmp@s1+1,fsr2h
 15426  004A54  50DF               	movf	indf2,w,c
 15427  004A56  6E1F               	movwf	??_memcmp^0,c
 15428  004A58  C01B  FFF6         	movff	memcmp@s2,tblptrl
 15429  004A5C  C01C  FFF7         	movff	memcmp@s2+1,tblptrh
 15430  004A60  6AF8               	clrf	tblptru,c
 15431  004A62  0E07               	movlw	(high __ramtop+-1)
 15432  004A64  64F7               	cpfsgt	tblptrh,c
 15433  004A66  D003               	bra	u12757
 15434  004A68  0008               	tblrd		*
 15435  004A6A  50F5               	movf	tablat,w,c
 15436  004A6C  D005               	bra	u12750
 15437  004A6E                     u12757:
 15438  004A6E  CFF6 FFE1          	movff	tblptrl,fsr1l
 15439  004A72  CFF7 FFE2          	movff	tblptrh,fsr1h
 15440  004A76  50E7               	movf	indf1,w,c
 15441  004A78                     u12750:
 15442  004A78  181F               	xorwf	??_memcmp^0,w,c
 15443  004A7A  B4D8               	btfsc	status,2,c
 15444  004A7C  D01E               	goto	l12139
 15445  004A7E  C019  FFD9         	movff	memcmp@s1,fsr2l
 15446  004A82  C01A  FFDA         	movff	memcmp@s1+1,fsr2h
 15447  004A86  50DF               	movf	indf2,w,c
 15448  004A88  6E1F               	movwf	??_memcmp^0,c
 15449  004A8A  C01B  FFF6         	movff	memcmp@s2,tblptrl
 15450  004A8E  C01C  FFF7         	movff	memcmp@s2+1,tblptrh
 15451  004A92  6AF8               	clrf	tblptru,c
 15452  004A94  0E07               	movlw	(high __ramtop+-1)
 15453  004A96  64F7               	cpfsgt	tblptrh,c
 15454  004A98  D003               	bra	u12777
 15455  004A9A  0008               	tblrd		*
 15456  004A9C  50F5               	movf	tablat,w,c
 15457  004A9E  D005               	bra	u12770
 15458  004AA0                     u12777:
 15459  004AA0  CFF6 FFE1          	movff	tblptrl,fsr1l
 15460  004AA4  CFF7 FFE2          	movff	tblptrh,fsr1h
 15461  004AA8  50E7               	movf	indf1,w,c
 15462  004AAA                     u12770:
 15463  004AAA  6E20               	movwf	(??_memcmp+1)^0,c
 15464  004AAC  5020               	movf	(??_memcmp+1)^0,w,c
 15465  004AAE  5C1F               	subwf	??_memcmp^0,w,c
 15466  004AB0  6E19               	movwf	?_memcmp^0,c
 15467  004AB2  6A1A               	clrf	(?_memcmp+1)^0,c
 15468  004AB4  A0D8               	btfss	status,0,c
 15469  004AB6  061A               	decf	(?_memcmp+1)^0,f,c
 15470  004AB8  0012               	return	
 15471  004ABA                     l12139:
 15472  004ABA  4A19               	infsnz	memcmp@s1^0,f,c
 15473  004ABC  2A1A               	incf	(memcmp@s1+1)^0,f,c
 15474  004ABE  4A1B               	infsnz	memcmp@s2^0,f,c
 15475  004AC0  2A1C               	incf	(memcmp@s2+1)^0,f,c
 15476  004AC2                     l12141:
 15477  004AC2  061D               	decf	memcmp@n^0,f,c
 15478  004AC4  A0D8               	btfss	status,0,c
 15479  004AC6  061E               	decf	(memcmp@n+1)^0,f,c
 15480  004AC8  281D               	incf	memcmp@n^0,w,c
 15481  004ACA  E1C0               	bnz	l12133
 15482  004ACC  281E               	incf	(memcmp@n+1)^0,w,c
 15483  004ACE  A4D8               	btfss	status,2,c
 15484  004AD0  D7BD               	goto	l12133
 15485  004AD2  0E00               	movlw	0
 15486  004AD4  6E1A               	movwf	(?_memcmp+1)^0,c
 15487  004AD6  0E00               	movlw	0
 15488  004AD8  6E19               	movwf	?_memcmp^0,c
 15489  004ADA  0012               	return		;funcret
 15490  004ADC                     __end_of_memcmp:
 15491                           	callstack 0
 15492                           
 15493 ;; *************** function ___lmul *****************
 15494 ;; Defined at:
 15495 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\Umul32.c"
 15496 ;; Parameters:    Size  Location     Type
 15497 ;;  multiplier      4   24[COMRAM] unsigned long 
 15498 ;;  multiplicand    4   28[COMRAM] unsigned long 
 15499 ;; Auto vars:     Size  Location     Type
 15500 ;;  product         4   32[COMRAM] unsigned long 
 15501 ;; Return value:  Size  Location     Type
 15502 ;;                  4   24[COMRAM] unsigned long 
 15503 ;; Registers used:
 15504 ;;		wreg, status,2, status,0
 15505 ;; Tracked objects:
 15506 ;;		On entry : 3F/0
 15507 ;;		On exit  : 3F/0
 15508 ;;		Unchanged: 3F/0
 15509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15510 ;;      Params:         8       0       0       0       0       0       0       0       0
 15511 ;;      Locals:         4       0       0       0       0       0       0       0       0
 15512 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15513 ;;      Totals:        12       0       0       0       0       0       0       0       0
 15514 ;;Total ram usage:       12 bytes
 15515 ;; Hardware stack levels used:    1
 15516 ;; Hardware stack levels required when called:    3
 15517 ;; This function calls:
 15518 ;;		Nothing
 15519 ;; This function is called by:
 15520 ;;		_clust2sect
 15521 ;;		_auto_mount
 15522 ;; This function uses a non-reentrant model
 15523 ;;
 15524                           
 15525                           	psect	text80
 15526  00529E                     __ptext80:
 15527                           	callstack 0
 15528  00529E                     ___lmul:
 15529                           	callstack 19
 15530                           
 15531                           ; BSR set to: 0
 15532                           
 15533                           ;incstack = 0
 15534  00529E  0E00               	movlw	0
 15535  0052A0  6E21               	movwf	___lmul@product^0,c
 15536  0052A2  0E00               	movlw	0
 15537  0052A4  6E22               	movwf	(___lmul@product+1)^0,c
 15538  0052A6  0E00               	movlw	0
 15539  0052A8  6E23               	movwf	(___lmul@product+2)^0,c
 15540  0052AA  0E00               	movlw	0
 15541  0052AC  6E24               	movwf	(___lmul@product+3)^0,c
 15542  0052AE                     l11753:
 15543                           
 15544                           ; BSR set to: 0
 15545  0052AE  A019               	btfss	___lmul@multiplier^0,0,c
 15546  0052B0  D008               	goto	l11757
 15547                           
 15548                           ; BSR set to: 0
 15549  0052B2  501D               	movf	___lmul@multiplicand^0,w,c
 15550  0052B4  2621               	addwf	___lmul@product^0,f,c
 15551  0052B6  501E               	movf	(___lmul@multiplicand+1)^0,w,c
 15552  0052B8  2222               	addwfc	(___lmul@product+1)^0,f,c
 15553  0052BA  501F               	movf	(___lmul@multiplicand+2)^0,w,c
 15554  0052BC  2223               	addwfc	(___lmul@product+2)^0,f,c
 15555  0052BE  5020               	movf	(___lmul@multiplicand+3)^0,w,c
 15556  0052C0  2224               	addwfc	(___lmul@product+3)^0,f,c
 15557  0052C2                     l11757:
 15558                           
 15559                           ; BSR set to: 0
 15560  0052C2  90D8               	bcf	status,0,c
 15561  0052C4  361D               	rlcf	___lmul@multiplicand^0,f,c
 15562  0052C6  361E               	rlcf	(___lmul@multiplicand+1)^0,f,c
 15563  0052C8  361F               	rlcf	(___lmul@multiplicand+2)^0,f,c
 15564  0052CA  3620               	rlcf	(___lmul@multiplicand+3)^0,f,c
 15565                           
 15566                           ; BSR set to: 0
 15567  0052CC  90D8               	bcf	status,0,c
 15568  0052CE  321C               	rrcf	(___lmul@multiplier+3)^0,f,c
 15569  0052D0  321B               	rrcf	(___lmul@multiplier+2)^0,f,c
 15570  0052D2  321A               	rrcf	(___lmul@multiplier+1)^0,f,c
 15571  0052D4  3219               	rrcf	___lmul@multiplier^0,f,c
 15572  0052D6  5019               	movf	___lmul@multiplier^0,w,c
 15573  0052D8  101A               	iorwf	(___lmul@multiplier+1)^0,w,c
 15574  0052DA  101B               	iorwf	(___lmul@multiplier+2)^0,w,c
 15575  0052DC  101C               	iorwf	(___lmul@multiplier+3)^0,w,c
 15576  0052DE  A4D8               	btfss	status,2,c
 15577  0052E0  D7E6               	goto	l11753
 15578                           
 15579                           ; BSR set to: 0
 15580  0052E2  C021  F019         	movff	___lmul@product,?___lmul
 15581  0052E6  C022  F01A         	movff	___lmul@product+1,?___lmul+1
 15582  0052EA  C023  F01B         	movff	___lmul@product+2,?___lmul+2
 15583  0052EE  C024  F01C         	movff	___lmul@product+3,?___lmul+3
 15584                           
 15585                           ; BSR set to: 0
 15586  0052F2  0012               	return		;funcret
 15587  0052F4                     __end_of___lmul:
 15588                           	callstack 0
 15589                           
 15590 ;; *************** function _f_mount *****************
 15591 ;; Defined at:
 15592 ;;		line 794 in file "bibliotecas/tff.c"
 15593 ;; Parameters:    Size  Location     Type
 15594 ;;  drv             1    wreg     unsigned char 
 15595 ;;  fs              2   24[COMRAM] PTR struct _FATFS
 15596 ;;		 -> fs(544), 
 15597 ;; Auto vars:     Size  Location     Type
 15598 ;;  drv             1   26[COMRAM] unsigned char 
 15599 ;; Return value:  Size  Location     Type
 15600 ;;                  1    wreg      enum E3239
 15601 ;; Registers used:
 15602 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15603 ;; Tracked objects:
 15604 ;;		On entry : 0/1
 15605 ;;		On exit  : 0/0
 15606 ;;		Unchanged: 0/0
 15607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15608 ;;      Params:         2       0       0       0       0       0       0       0       0
 15609 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15610 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15611 ;;      Totals:         3       0       0       0       0       0       0       0       0
 15612 ;;Total ram usage:        3 bytes
 15613 ;; Hardware stack levels used:    1
 15614 ;; Hardware stack levels required when called:    3
 15615 ;; This function calls:
 15616 ;;		Nothing
 15617 ;; This function is called by:
 15618 ;;		_escrita_sdcard
 15619 ;; This function uses a non-reentrant model
 15620 ;;
 15621                           
 15622                           	psect	text81
 15623  005572                     __ptext81:
 15624                           	callstack 0
 15625  005572                     _f_mount:
 15626                           	callstack 24
 15627                           
 15628                           ; BSR set to: 0
 15629                           ;incstack = 0
 15630                           ;f_mount@drv stored from wreg
 15631  005572  6E1B               	movwf	f_mount@drv^0,c
 15632                           
 15633                           ;tff.c: 799: if (drv) return FR_INVALID_DRIVE;
 15634  005574  501B               	movf	f_mount@drv^0,w,c
 15635  005576  B4D8               	btfsc	status,2,c
 15636  005578  D002               	goto	l9421
 15637  00557A  0E05               	movlw	5
 15638  00557C  0012               	return	
 15639  00557E                     l9421:
 15640                           
 15641                           ;tff.c: 801: if (FatFs) FatFs->fs_type = 0;
 15642  00557E  5037               	movf	_FatFs^0,w,c
 15643  005580  1038               	iorwf	(_FatFs+1)^0,w,c
 15644  005582  B4D8               	btfsc	status,2,c
 15645  005584  D008               	goto	l9425
 15646  005586  EE20 F01C          	lfsr	2,28
 15647  00558A  5037               	movf	_FatFs^0,w,c
 15648  00558C  26D9               	addwf	fsr2l,f,c
 15649  00558E  5038               	movf	(_FatFs+1)^0,w,c
 15650  005590  22DA               	addwfc	fsr2h,f,c
 15651  005592  0E00               	movlw	0
 15652  005594  6EDF               	movwf	indf2,c
 15653  005596                     l9425:
 15654                           
 15655                           ;tff.c: 803: FatFs = fs;
 15656  005596  C019  F037         	movff	f_mount@fs,_FatFs
 15657  00559A  C01A  F038         	movff	f_mount@fs+1,_FatFs+1
 15658                           
 15659                           ;tff.c: 804: if (fs) fs->fs_type = 0;
 15660  00559E  5019               	movf	f_mount@fs^0,w,c
 15661  0055A0  101A               	iorwf	(f_mount@fs+1)^0,w,c
 15662  0055A2  B4D8               	btfsc	status,2,c
 15663  0055A4  D008               	goto	l9431
 15664  0055A6  EE20 F01C          	lfsr	2,28
 15665  0055AA  5019               	movf	f_mount@fs^0,w,c
 15666  0055AC  26D9               	addwf	fsr2l,f,c
 15667  0055AE  501A               	movf	(f_mount@fs+1)^0,w,c
 15668  0055B0  22DA               	addwfc	fsr2h,f,c
 15669  0055B2  0E00               	movlw	0
 15670  0055B4  6EDF               	movwf	indf2,c
 15671  0055B6                     l9431:
 15672                           
 15673                           ;tff.c: 806: return FR_OK;
 15674  0055B6  0E00               	movlw	0
 15675  0055B8  0012               	return		;funcret
 15676  0055BA                     __end_of_f_mount:
 15677                           	callstack 0
 15678                           
 15679 ;; *************** function _f_lseek *****************
 15680 ;; Defined at:
 15681 ;;		line 1140 in file "bibliotecas/tff.c"
 15682 ;; Parameters:    Size  Location     Type
 15683 ;;  fp              2   78[BANK0 ] PTR struct _FIL
 15684 ;;		 -> fil(28), 
 15685 ;;  ofs             4   80[BANK0 ] unsigned long 
 15686 ;; Auto vars:     Size  Location     Type
 15687 ;;  csize           4  105[BANK0 ] unsigned long 
 15688 ;;  ifptr           4  101[BANK0 ] unsigned long 
 15689 ;;  clust           2  109[BANK0 ] unsigned short 
 15690 ;;  res             1  100[BANK0 ] enum E155
 15691 ;; Return value:  Size  Location     Type
 15692 ;;                  1    wreg      enum E3239
 15693 ;; Registers used:
 15694 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15695 ;; Tracked objects:
 15696 ;;		On entry : 3F/0
 15697 ;;		On exit  : 3F/0
 15698 ;;		Unchanged: 0/0
 15699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15700 ;;      Params:         0       6       0       0       0       0       0       0       0
 15701 ;;      Locals:         0      11       0       0       0       0       0       0       0
 15702 ;;      Temps:          0      16       0       0       0       0       0       0       0
 15703 ;;      Totals:         0      33       0       0       0       0       0       0       0
 15704 ;;Total ram usage:       33 bytes
 15705 ;; Hardware stack levels used:    1
 15706 ;; Hardware stack levels required when called:   11
 15707 ;; This function calls:
 15708 ;;		___lldiv
 15709 ;;		_create_chain
 15710 ;;		_get_cluster
 15711 ;;		_validate
 15712 ;; This function is called by:
 15713 ;;		_escrita_sdcard
 15714 ;; This function uses a non-reentrant model
 15715 ;;
 15716                           
 15717                           	psect	text82
 15718  000AE4                     __ptext82:
 15719                           	callstack 0
 15720  000AE4                     _f_lseek:
 15721                           	callstack 16
 15722                           
 15723                           ; BSR set to: 0
 15724                           ;tff.c: 1145: FRESULT res;;tff.c: 1146: CLUST clust;;tff.c: 1147: DWORD csize, ifptr;;tf
      +                          f.c: 1150: res = validate(fp->fs, fp->id);
 15725                           
 15726                           ;incstack = 0
 15727  000AE4  EE20 F004          	lfsr	2,4
 15728  000AE8  51AE               	movf	f_lseek@fp& (0+255),w,b
 15729  000AEA  26D9               	addwf	fsr2l,f,c
 15730  000AEC  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15731  000AEE  22DA               	addwfc	fsr2h,f,c
 15732  000AF0  CFDE F01F          	movff	postinc2,validate@fs
 15733  000AF4  CFDD F020          	movff	postdec2,validate@fs+1
 15734  000AF8  C0AE  FFD9         	movff	f_lseek@fp,fsr2l
 15735  000AFC  C0AF  FFDA         	movff	f_lseek@fp+1,fsr2h
 15736  000B00  CFDE F021          	movff	postinc2,validate@id
 15737  000B04  CFDD F022          	movff	postdec2,validate@id+1
 15738  000B08  ECDD  F02A         	call	_validate	;wreg free
 15739  000B0C  0100               	movlb	0	; () banked
 15740  000B0E  6FC4               	movwf	f_lseek@res& (0+255),b
 15741                           
 15742                           ; BSR set to: 0
 15743                           ;tff.c: 1151: if (res != FR_OK) return res;
 15744  000B10  51C4               	movf	f_lseek@res& (0+255),w,b
 15745  000B12  A4D8               	btfss	status,2,c
 15746  000B14  0012               	return	
 15747                           
 15748                           ; BSR set to: 0
 15749                           ;tff.c: 1152: if (fp->flag & 0x80) return FR_RW_ERROR;
 15750  000B16  EE20 F002          	lfsr	2,2
 15751  000B1A  51AE               	movf	f_lseek@fp& (0+255),w,b
 15752  000B1C  26D9               	addwf	fsr2l,f,c
 15753  000B1E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15754  000B20  22DA               	addwfc	fsr2h,f,c
 15755  000B22  BEDF               	btfsc	indf2,7,c
 15756  000B24  0012               	return	
 15757                           
 15758                           ; BSR set to: 0
 15759                           ;tff.c: 1153: if (ofs > fp->fsize;tff.c: 1155: && !(fp->flag & 0x02);tff.c: 1157: ) ofs 
      +                          = fp->fsize;
 15760  000B26  EE20 F00A          	lfsr	2,10
 15761  000B2A  51AE               	movf	f_lseek@fp& (0+255),w,b
 15762  000B2C  26D9               	addwf	fsr2l,f,c
 15763  000B2E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15764  000B30  22DA               	addwfc	fsr2h,f,c
 15765  000B32  51B0               	movf	f_lseek@ofs& (0+255),w,b
 15766  000B34  5CDE               	subwf	postinc2,w,c
 15767  000B36  51B1               	movf	(f_lseek@ofs+1)& (0+255),w,b
 15768  000B38  58DE               	subwfb	postinc2,w,c
 15769  000B3A  51B2               	movf	(f_lseek@ofs+2)& (0+255),w,b
 15770  000B3C  58DE               	subwfb	postinc2,w,c
 15771  000B3E  51B3               	movf	(f_lseek@ofs+3)& (0+255),w,b
 15772  000B40  58DE               	subwfb	postinc2,w,c
 15773  000B42  B0D8               	btfsc	status,0,c
 15774  000B44  D016               	goto	l1069
 15775                           
 15776                           ; BSR set to: 0
 15777  000B46  EE20 F002          	lfsr	2,2
 15778  000B4A  51AE               	movf	f_lseek@fp& (0+255),w,b
 15779  000B4C  26D9               	addwf	fsr2l,f,c
 15780  000B4E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15781  000B50  22DA               	addwfc	fsr2h,f,c
 15782  000B52  B2DF               	btfsc	indf2,1,c
 15783  000B54  D00E               	goto	l1069
 15784                           
 15785                           ; BSR set to: 0
 15786  000B56  EE20 F00A          	lfsr	2,10
 15787  000B5A  51AE               	movf	f_lseek@fp& (0+255),w,b
 15788  000B5C  26D9               	addwf	fsr2l,f,c
 15789  000B5E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15790  000B60  22DA               	addwfc	fsr2h,f,c
 15791  000B62  CFDE F0B0          	movff	postinc2,f_lseek@ofs
 15792  000B66  CFDE F0B1          	movff	postinc2,f_lseek@ofs+1
 15793  000B6A  CFDE F0B2          	movff	postinc2,f_lseek@ofs+2
 15794  000B6E  CFDE F0B3          	movff	postinc2,f_lseek@ofs+3
 15795  000B72                     l1069:
 15796                           
 15797                           ; BSR set to: 0
 15798                           ;tff.c: 1159: ifptr = fp->fptr;
 15799  000B72  EE20 F006          	lfsr	2,6
 15800  000B76  51AE               	movf	f_lseek@fp& (0+255),w,b
 15801  000B78  26D9               	addwf	fsr2l,f,c
 15802  000B7A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15803  000B7C  22DA               	addwfc	fsr2h,f,c
 15804  000B7E  CFDE F0C5          	movff	postinc2,f_lseek@ifptr
 15805  000B82  CFDE F0C6          	movff	postinc2,f_lseek@ifptr+1
 15806  000B86  CFDE F0C7          	movff	postinc2,f_lseek@ifptr+2
 15807  000B8A  CFDE F0C8          	movff	postinc2,f_lseek@ifptr+3
 15808                           
 15809                           ;tff.c: 1160: fp->fptr = 0; fp->csect = 255;
 15810  000B8E  EE20 F006          	lfsr	2,6
 15811  000B92  51AE               	movf	f_lseek@fp& (0+255),w,b
 15812  000B94  26D9               	addwf	fsr2l,f,c
 15813  000B96  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15814  000B98  22DA               	addwfc	fsr2h,f,c
 15815  000B9A  6ADE               	clrf	postinc2,c
 15816  000B9C  6ADE               	clrf	postinc2,c
 15817  000B9E  6ADE               	clrf	postinc2,c
 15818  000BA0  6ADD               	clrf	postdec2,c
 15819  000BA2  EE20 F003          	lfsr	2,3
 15820  000BA6  51AE               	movf	f_lseek@fp& (0+255),w,b
 15821  000BA8  26D9               	addwf	fsr2l,f,c
 15822  000BAA  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15823  000BAC  22DA               	addwfc	fsr2h,f,c
 15824  000BAE  0EFF               	movlw	255
 15825  000BB0  6EDF               	movwf	indf2,c
 15826                           
 15827                           ; BSR set to: 0
 15828                           ;tff.c: 1161: if (ofs > 0) {
 15829  000BB2  51B0               	movf	f_lseek@ofs& (0+255),w,b
 15830  000BB4  11B1               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 15831  000BB6  11B2               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 15832  000BB8  11B3               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 15833  000BBA  B4D8               	btfsc	status,2,c
 15834  000BBC  D19C               	goto	l13507
 15835                           
 15836                           ; BSR set to: 0
 15837                           ;tff.c: 1162: csize = (DWORD)fp->fs->csize * 512U;
 15838  000BBE  EE20 F004          	lfsr	2,4
 15839  000BC2  51AE               	movf	f_lseek@fp& (0+255),w,b
 15840  000BC4  26D9               	addwf	fsr2l,f,c
 15841  000BC6  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15842  000BC8  22DA               	addwfc	fsr2h,f,c
 15843  000BCA  EE10 F01D          	lfsr	1,29
 15844  000BCE  50DE               	movf	postinc2,w,c
 15845  000BD0  26E1               	addwf	fsr1l,f,c
 15846  000BD2  50DD               	movf	postdec2,w,c
 15847  000BD4  22E2               	addwfc	fsr1h,f,c
 15848  000BD6  50E7               	movf	indf1,w,c
 15849  000BD8  6FB4               	movwf	??_f_lseek& (0+255),b
 15850  000BDA  C0B4  F0B5         	movff	??_f_lseek,??_f_lseek+1
 15851  000BDE  6BB6               	clrf	(??_f_lseek+2)& (0+255),b
 15852  000BE0  6BB7               	clrf	(??_f_lseek+3)& (0+255),b
 15853  000BE2  6BB8               	clrf	(??_f_lseek+4)& (0+255),b
 15854  000BE4  0E09               	movlw	9
 15855  000BE6                     u14515:
 15856  000BE6  90D8               	bcf	status,0,c
 15857  000BE8  37B5               	rlcf	(??_f_lseek+1)& (0+255),f,b
 15858  000BEA  37B6               	rlcf	(??_f_lseek+2)& (0+255),f,b
 15859  000BEC  37B7               	rlcf	(??_f_lseek+3)& (0+255),f,b
 15860  000BEE  37B8               	rlcf	(??_f_lseek+4)& (0+255),f,b
 15861  000BF0  2EE8               	decfsz	wreg,f,c
 15862  000BF2  D7F9               	goto	u14515
 15863  000BF4  C0B5  F0C9         	movff	??_f_lseek+1,f_lseek@csize
 15864  000BF8  C0B6  F0CA         	movff	??_f_lseek+2,f_lseek@csize+1
 15865  000BFC  C0B7  F0CB         	movff	??_f_lseek+3,f_lseek@csize+2
 15866  000C00  C0B8  F0CC         	movff	??_f_lseek+4,f_lseek@csize+3
 15867                           
 15868                           ; BSR set to: 0
 15869                           ;tff.c: 1163: if (ifptr > 0 &&;tff.c: 1164: (ofs - 1) / csize >= (ifptr - 1) / csize) {
 15870  000C04  51C5               	movf	f_lseek@ifptr& (0+255),w,b
 15871  000C06  11C6               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 15872  000C08  11C7               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 15873  000C0A  11C8               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 15874  000C0C  B4D8               	btfsc	status,2,c
 15875  000C0E  D093               	goto	l13465
 15876                           
 15877                           ; BSR set to: 0
 15878  000C10  0EFF               	movlw	255
 15879  000C12  25B0               	addwf	f_lseek@ofs& (0+255),w,b
 15880  000C14  6E19               	movwf	___lldiv@dividend^0,c
 15881  000C16  0EFF               	movlw	255
 15882  000C18  21B1               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 15883  000C1A  6E1A               	movwf	(___lldiv@dividend+1)^0,c
 15884  000C1C  0EFF               	movlw	255
 15885  000C1E  21B2               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 15886  000C20  6E1B               	movwf	(___lldiv@dividend+2)^0,c
 15887  000C22  0EFF               	movlw	255
 15888  000C24  21B3               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 15889  000C26  6E1C               	movwf	(___lldiv@dividend+3)^0,c
 15890  000C28  C0C9  F01D         	movff	f_lseek@csize,___lldiv@divisor
 15891  000C2C  C0CA  F01E         	movff	f_lseek@csize+1,___lldiv@divisor+1
 15892  000C30  C0CB  F01F         	movff	f_lseek@csize+2,___lldiv@divisor+2
 15893  000C34  C0CC  F020         	movff	f_lseek@csize+3,___lldiv@divisor+3
 15894  000C38  EC50  F027         	call	___lldiv	;wreg free
 15895  000C3C  C019  F0B4         	movff	?___lldiv,??_f_lseek
 15896  000C40  C01A  F0B5         	movff	?___lldiv+1,??_f_lseek+1
 15897  000C44  C01B  F0B6         	movff	?___lldiv+2,??_f_lseek+2
 15898  000C48  C01C  F0B7         	movff	?___lldiv+3,??_f_lseek+3
 15899  000C4C  0EFF               	movlw	255
 15900  000C4E  0100               	movlb	0	; () banked
 15901  000C50  25C5               	addwf	f_lseek@ifptr& (0+255),w,b
 15902  000C52  6E19               	movwf	___lldiv@dividend^0,c
 15903  000C54  0EFF               	movlw	255
 15904  000C56  21C6               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 15905  000C58  6E1A               	movwf	(___lldiv@dividend+1)^0,c
 15906  000C5A  0EFF               	movlw	255
 15907  000C5C  21C7               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 15908  000C5E  6E1B               	movwf	(___lldiv@dividend+2)^0,c
 15909  000C60  0EFF               	movlw	255
 15910  000C62  21C8               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 15911  000C64  6E1C               	movwf	(___lldiv@dividend+3)^0,c
 15912  000C66  C0C9  F01D         	movff	f_lseek@csize,___lldiv@divisor
 15913  000C6A  C0CA  F01E         	movff	f_lseek@csize+1,___lldiv@divisor+1
 15914  000C6E  C0CB  F01F         	movff	f_lseek@csize+2,___lldiv@divisor+2
 15915  000C72  C0CC  F020         	movff	f_lseek@csize+3,___lldiv@divisor+3
 15916  000C76  EC50  F027         	call	___lldiv	;wreg free
 15917  000C7A  5019               	movf	?___lldiv^0,w,c
 15918  000C7C  0100               	movlb	0	; () banked
 15919  000C7E  5DB4               	subwf	??_f_lseek& (0+255),w,b
 15920  000C80  501A               	movf	(?___lldiv+1)^0,w,c
 15921  000C82  59B5               	subwfb	(??_f_lseek+1)& (0+255),w,b
 15922  000C84  501B               	movf	(?___lldiv+2)^0,w,c
 15923  000C86  59B6               	subwfb	(??_f_lseek+2)& (0+255),w,b
 15924  000C88  501C               	movf	(?___lldiv+3)^0,w,c
 15925  000C8A  59B7               	subwfb	(??_f_lseek+3)& (0+255),w,b
 15926  000C8C  A0D8               	btfss	status,0,c
 15927  000C8E  D053               	goto	l13465
 15928                           
 15929                           ; BSR set to: 0
 15930                           ;tff.c: 1165: fp->fptr = (ifptr - 1) & ~(csize - 1);
 15931  000C90  0EFF               	movlw	255
 15932  000C92  25C9               	addwf	f_lseek@csize& (0+255),w,b
 15933  000C94  6FB4               	movwf	??_f_lseek& (0+255),b
 15934  000C96  0EFF               	movlw	255
 15935  000C98  21CA               	addwfc	(f_lseek@csize+1)& (0+255),w,b
 15936  000C9A  6FB5               	movwf	(??_f_lseek+1)& (0+255),b
 15937  000C9C  0EFF               	movlw	255
 15938  000C9E  21CB               	addwfc	(f_lseek@csize+2)& (0+255),w,b
 15939  000CA0  6FB6               	movwf	(??_f_lseek+2)& (0+255),b
 15940  000CA2  0EFF               	movlw	255
 15941  000CA4  21CC               	addwfc	(f_lseek@csize+3)& (0+255),w,b
 15942  000CA6  6FB7               	movwf	(??_f_lseek+3)& (0+255),b
 15943  000CA8  1DB4               	comf	??_f_lseek& (0+255),w,b
 15944  000CAA  6FB8               	movwf	(??_f_lseek+4)& (0+255),b
 15945  000CAC  1DB5               	comf	(??_f_lseek+1)& (0+255),w,b
 15946  000CAE  6FB9               	movwf	(??_f_lseek+5)& (0+255),b
 15947  000CB0  1DB6               	comf	(??_f_lseek+2)& (0+255),w,b
 15948  000CB2  6FBA               	movwf	(??_f_lseek+6)& (0+255),b
 15949  000CB4  1DB7               	comf	(??_f_lseek+3)& (0+255),w,b
 15950  000CB6  6FBB               	movwf	(??_f_lseek+7)& (0+255),b
 15951  000CB8  0EFF               	movlw	255
 15952  000CBA  25C5               	addwf	f_lseek@ifptr& (0+255),w,b
 15953  000CBC  6FBC               	movwf	(??_f_lseek+8)& (0+255),b
 15954  000CBE  0EFF               	movlw	255
 15955  000CC0  21C6               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 15956  000CC2  6FBD               	movwf	(??_f_lseek+9)& (0+255),b
 15957  000CC4  0EFF               	movlw	255
 15958  000CC6  21C7               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 15959  000CC8  6FBE               	movwf	(??_f_lseek+10)& (0+255),b
 15960  000CCA  0EFF               	movlw	255
 15961  000CCC  21C8               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 15962  000CCE  6FBF               	movwf	(??_f_lseek+11)& (0+255),b
 15963  000CD0  51B8               	movf	(??_f_lseek+4)& (0+255),w,b
 15964  000CD2  15BC               	andwf	(??_f_lseek+8)& (0+255),w,b
 15965  000CD4  6FC0               	movwf	(??_f_lseek+12)& (0+255),b
 15966  000CD6  51B9               	movf	(??_f_lseek+5)& (0+255),w,b
 15967  000CD8  15BD               	andwf	(??_f_lseek+9)& (0+255),w,b
 15968  000CDA  6FC1               	movwf	(??_f_lseek+13)& (0+255),b
 15969  000CDC  51BA               	movf	(??_f_lseek+6)& (0+255),w,b
 15970  000CDE  15BE               	andwf	(??_f_lseek+10)& (0+255),w,b
 15971  000CE0  6FC2               	movwf	(??_f_lseek+14)& (0+255),b
 15972  000CE2  51BB               	movf	(??_f_lseek+7)& (0+255),w,b
 15973  000CE4  15BF               	andwf	(??_f_lseek+11)& (0+255),w,b
 15974  000CE6  6FC3               	movwf	(??_f_lseek+15)& (0+255),b
 15975  000CE8  EE20 F006          	lfsr	2,6
 15976  000CEC  51AE               	movf	f_lseek@fp& (0+255),w,b
 15977  000CEE  26D9               	addwf	fsr2l,f,c
 15978  000CF0  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15979  000CF2  22DA               	addwfc	fsr2h,f,c
 15980  000CF4  C0C0  FFDE         	movff	??_f_lseek+12,postinc2
 15981  000CF8  C0C1  FFDE         	movff	??_f_lseek+13,postinc2
 15982  000CFC  C0C2  FFDE         	movff	??_f_lseek+14,postinc2
 15983  000D00  C0C3  FFDE         	movff	??_f_lseek+15,postinc2
 15984                           
 15985                           ;tff.c: 1166: ofs -= fp->fptr;
 15986  000D04  EE20 F006          	lfsr	2,6
 15987  000D08  51AE               	movf	f_lseek@fp& (0+255),w,b
 15988  000D0A  26D9               	addwf	fsr2l,f,c
 15989  000D0C  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 15990  000D0E  22DA               	addwfc	fsr2h,f,c
 15991  000D10  50DE               	movf	postinc2,w,c
 15992  000D12  5FB0               	subwf	f_lseek@ofs& (0+255),f,b
 15993  000D14  50DE               	movf	postinc2,w,c
 15994  000D16  5BB1               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 15995  000D18  50DE               	movf	postinc2,w,c
 15996  000D1A  5BB2               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 15997  000D1C  50DD               	movf	postdec2,w,c
 15998  000D1E  5BB3               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 15999                           
 16000                           ;tff.c: 1167: clust = fp->curr_clust;
 16001  000D20  EE20 F010          	lfsr	2,16
 16002  000D24  51AE               	movf	f_lseek@fp& (0+255),w,b
 16003  000D26  26D9               	addwf	fsr2l,f,c
 16004  000D28  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 16005  000D2A  22DA               	addwfc	fsr2h,f,c
 16006  000D2C  CFDE F0CD          	movff	postinc2,f_lseek@clust
 16007  000D30  CFDD F0CE          	movff	postdec2,f_lseek@clust+1
 16008                           
 16009                           ;tff.c: 1168: } else {
 16010  000D34  D030               	goto	l13477
 16011  000D36                     l13465:
 16012                           
 16013                           ; BSR set to: 0
 16014                           ;tff.c: 1169: clust = fp->org_clust;
 16015  000D36  EE20 F00E          	lfsr	2,14
 16016  000D3A  51AE               	movf	f_lseek@fp& (0+255),w,b
 16017  000D3C  26D9               	addwf	fsr2l,f,c
 16018  000D3E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 16019  000D40  22DA               	addwfc	fsr2h,f,c
 16020  000D42  CFDE F0CD          	movff	postinc2,f_lseek@clust
 16021  000D46  CFDD F0CE          	movff	postdec2,f_lseek@clust+1
 16022                           
 16023                           ; BSR set to: 0
 16024                           ;tff.c: 1171: if (clust == 0) {
 16025  000D4A  51CD               	movf	f_lseek@clust& (0+255),w,b
 16026  000D4C  11CE               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 16027  000D4E  A4D8               	btfss	status,2,c
 16028  000D50  D018               	goto	l1073
 16029                           
 16030                           ; BSR set to: 0
 16031                           ;tff.c: 1172: clust = create_chain(0);
 16032  000D52  0E00               	movlw	0
 16033  000D54  6FA1               	movwf	(create_chain@clust+1)& (0+255),b
 16034  000D56  0E00               	movlw	0
 16035  000D58  6FA0               	movwf	create_chain@clust& (0+255),b
 16036  000D5A  ECFC  F019         	call	_create_chain	;wreg free
 16037  000D5E  C0A0  F0CD         	movff	?_create_chain,f_lseek@clust
 16038  000D62  C0A1  F0CE         	movff	?_create_chain+1,f_lseek@clust+1
 16039                           
 16040                           ; BSR set to: 0
 16041                           ;tff.c: 1173: if (clust == 1) goto fk_error;
 16042  000D66  05CD               	decf	f_lseek@clust& (0+255),w,b
 16043  000D68  11CE               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 16044  000D6A  B4D8               	btfsc	status,2,c
 16045  000D6C  D0F7               	goto	l13515
 16046                           
 16047                           ; BSR set to: 0
 16048                           ;tff.c: 1174: fp->org_clust = clust;
 16049  000D6E  EE20 F00E          	lfsr	2,14
 16050  000D72  51AE               	movf	f_lseek@fp& (0+255),w,b
 16051  000D74  26D9               	addwf	fsr2l,f,c
 16052  000D76  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 16053  000D78  22DA               	addwfc	fsr2h,f,c
 16054  000D7A  C0CD  FFDE         	movff	f_lseek@clust,postinc2
 16055  000D7E  C0CE  FFDD         	movff	f_lseek@clust+1,postdec2
 16056  000D82                     l1073:
 16057                           
 16058                           ; BSR set to: 0
 16059                           ;tff.c: 1175: };tff.c: 1177: fp->curr_clust = clust;
 16060  000D82  EE20 F010          	lfsr	2,16
 16061  000D86  51AE               	movf	f_lseek@fp& (0+255),w,b
 16062  000D88  26D9               	addwf	fsr2l,f,c
 16063  000D8A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 16064  000D8C  22DA               	addwfc	fsr2h,f,c
 16065  000D8E  C0CD  FFDE         	movff	f_lseek@clust,postinc2
 16066  000D92  C0CE  FFDD         	movff	f_lseek@clust+1,postdec2
 16067  000D96                     l13477:
 16068                           
 16069                           ; BSR set to: 0
 16070                           ;tff.c: 1178: };tff.c: 1179: if (clust != 0) {
 16071  000D96  51CD               	movf	f_lseek@clust& (0+255),w,b
 16072  000D98  11CE               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 16073  000D9A  A4D8               	btfss	status,2,c
 16074  000D9C  D062               	goto	l13499
 16075  000D9E  D0AB               	goto	l13507
 16076  000DA0                     l13481:
 16077                           
 16078                           ; BSR set to: 0
 16079                           ;tff.c: 1182: if (fp->flag & 0x02) {
 16080  000DA0  EE20 F002          	lfsr	2,2
 16081  000DA4  51AE               	movf	f_lseek@fp& (0+255),w,b
 16082  000DA6  26D9               	addwf	fsr2l,f,c
 16083  000DA8  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 16084  000DAA  22DA               	addwfc	fsr2h,f,c
 16085  000DAC  A2DF               	btfss	indf2,1,c
 16086  000DAE  D017               	goto	l13489
 16087                           
 16088                           ; BSR set to: 0
 16089                           ;tff.c: 1183: clust = create_chain(clust);
 16090  000DB0  C0CD  F0A0         	movff	f_lseek@clust,create_chain@clust
 16091  000DB4  C0CE  F0A1         	movff	f_lseek@clust+1,create_chain@clust+1
 16092  000DB8  ECFC  F019         	call	_create_chain	;wreg free
 16093  000DBC  C0A0  F0CD         	movff	?_create_chain,f_lseek@clust
 16094  000DC0  C0A1  F0CE         	movff	?_create_chain+1,f_lseek@clust+1
 16095                           
 16096                           ; BSR set to: 0
 16097                           ;tff.c: 1184: if (clust == 0) {
 16098  000DC4  51CD               	movf	f_lseek@clust& (0+255),w,b
 16099  000DC6  11CE               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 16100  000DC8  A4D8               	btfss	status,2,c
 16101  000DCA  D013               	goto	l13491
 16102                           
 16103                           ; BSR set to: 0
 16104                           ;tff.c: 1185: ofs = csize; break;
 16105  000DCC  C0C9  F0B0         	movff	f_lseek@csize,f_lseek@ofs
 16106  000DD0  C0CA  F0B1         	movff	f_lseek@csize+1,f_lseek@ofs+1
 16107  000DD4  C0CB  F0B2         	movff	f_lseek@csize+2,f_lseek@ofs+2
 16108  000DD8  C0CC  F0B3         	movff	f_lseek@csize+3,f_lseek@ofs+3
 16109  000DDC  D04C               	goto	u14610
 16110  000DDE                     l13489:
 16111                           
 16112                           ; BSR set to: 0
 16113                           ;tff.c: 1189: clust = get_cluster(clust);
 16114  000DDE  C0CD  F088         	movff	f_lseek@clust,get_cluster@clust
 16115  000DE2  C0CE  F089         	movff	f_lseek@clust+1,get_cluster@clust+1
 16116  000DE6  ECA7  F012         	call	_get_cluster	;wreg free
 16117  000DEA  C088  F0CD         	movff	?_get_cluster,f_lseek@clust
 16118  000DEE  C089  F0CE         	movff	?_get_cluster+1,f_lseek@clust+1
 16119  000DF2                     l13491:
 16120                           
 16121                           ; BSR set to: 0
 16122                           ;tff.c: 1190: if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
 16123  000DF2  51CE               	movf	(f_lseek@clust+1)& (0+255),w,b
 16124  000DF4  E104               	bnz	u14590
 16125  000DF6  0E02               	movlw	2
 16126  000DF8  5DCD               	subwf	f_lseek@clust& (0+255),w,b
 16127  000DFA  A0D8               	btfss	status,0,c
 16128  000DFC  D0AF               	goto	l13515
 16129  000DFE                     u14590:
 16130                           
 16131                           ; BSR set to: 0
 16132  000DFE  EE20 F004          	lfsr	2,4
 16133  000E02  51AE               	movf	f_lseek@fp& (0+255),w,b
 16134  000E04  26D9               	addwf	fsr2l,f,c
 16135  000E06  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 16136  000E08  22DA               	addwfc	fsr2h,f,c
 16137  000E0A  EE10 F016          	lfsr	1,22
 16138  000E0E  50DE               	movf	postinc2,w,c
 16139  000E10  26E1               	addwf	fsr1l,f,c
 16140  000E12  50DD               	movf	postdec2,w,c
 16141  000E14  22E2               	addwfc	fsr1h,f,c
 16142  000E16  50E6               	movf	postinc1,w,c
 16143  000E18  5DCD               	subwf	f_lseek@clust& (0+255),w,b
 16144  000E1A  50E6               	movf	postinc1,w,c
 16145  000E1C  59CE               	subwfb	(f_lseek@clust+1)& (0+255),w,b
 16146  000E1E  B0D8               	btfsc	status,0,c
 16147  000E20  D09D               	goto	l13515
 16148                           
 16149                           ; BSR set to: 0
 16150                           ;tff.c: 1191: fp->curr_clust = clust;
 16151  000E22  EE20 F010          	lfsr	2,16
 16152  000E26  51AE               	movf	f_lseek@fp& (0+255),w,b
 16153  000E28  26D9               	addwf	fsr2l,f,c
 16154  000E2A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 16155  000E2C  22DA               	addwfc	fsr2h,f,c
 16156  000E2E  C0CD  FFDE         	movff	f_lseek@clust,postinc2
 16157  000E32  C0CE  FFDD         	movff	f_lseek@clust+1,postdec2
 16158                           
 16159                           ;tff.c: 1192: fp->fptr += csize;
 16160  000E36  EE20 F006          	lfsr	2,6
 16161  000E3A  51AE               	movf	f_lseek@fp& (0+255),w,b
 16162  000E3C  26D9               	addwf	fsr2l,f,c
 16163  000E3E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 16164  000E40  22DA               	addwfc	fsr2h,f,c
 16165  000E42  51C9               	movf	f_lseek@csize& (0+255),w,b
 16166  000E44  26DE               	addwf	postinc2,f,c
 16167  000E46  51CA               	movf	(f_lseek@csize+1)& (0+255),w,b
 16168  000E48  22DE               	addwfc	postinc2,f,c
 16169  000E4A  51CB               	movf	(f_lseek@csize+2)& (0+255),w,b
 16170  000E4C  22DE               	addwfc	postinc2,f,c
 16171  000E4E  51CC               	movf	(f_lseek@csize+3)& (0+255),w,b
 16172  000E50  22DE               	addwfc	postinc2,f,c
 16173                           
 16174                           ; BSR set to: 0
 16175                           ;tff.c: 1193: ofs -= csize;
 16176  000E52  51C9               	movf	f_lseek@csize& (0+255),w,b
 16177  000E54  5FB0               	subwf	f_lseek@ofs& (0+255),f,b
 16178  000E56  51CA               	movf	(f_lseek@csize+1)& (0+255),w,b
 16179  000E58  5BB1               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 16180  000E5A  51CB               	movf	(f_lseek@csize+2)& (0+255),w,b
 16181  000E5C  5BB2               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 16182  000E5E  51CC               	movf	(f_lseek@csize+3)& (0+255),w,b
 16183  000E60  5BB3               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 16184  000E62                     l13499:
 16185                           
 16186                           ; BSR set to: 0
 16187  000E62  51B0               	movf	f_lseek@ofs& (0+255),w,b
 16188  000E64  5DC9               	subwf	f_lseek@csize& (0+255),w,b
 16189  000E66  51B1               	movf	(f_lseek@ofs+1)& (0+255),w,b
 16190  000E68  59CA               	subwfb	(f_lseek@csize+1)& (0+255),w,b
 16191  000E6A  51B2               	movf	(f_lseek@ofs+2)& (0+255),w,b
 16192  000E6C  59CB               	subwfb	(f_lseek@csize+2)& (0+255),w,b
 16193  000E6E  51B3               	movf	(f_lseek@ofs+3)& (0+255),w,b
 16194  000E70  59CC               	subwfb	(f_lseek@csize+3)& (0+255),w,b
 16195  000E72  A0D8               	btfss	status,0,c
 16196  000E74  D795               	goto	l13481
 16197  000E76                     u14610:
 16198                           
 16199                           ; BSR set to: 0
 16200                           ;tff.c: 1194: };tff.c: 1195: fp->fptr += ofs;
 16201  000E76  EE20 F006          	lfsr	2,6
 16202  000E7A  51AE               	movf	f_lseek@fp& (0+255),w,b
 16203  000E7C  26D9               	addwf	fsr2l,f,c
 16204  000E7E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 16205  000E80  22DA               	addwfc	fsr2h,f,c
 16206  000E82  51B0               	movf	f_lseek@ofs& (0+255),w,b
 16207  000E84  26DE               	addwf	postinc2,f,c
 16208  000E86  51B1               	movf	(f_lseek@ofs+1)& (0+255),w,b
 16209  000E88  22DE               	addwfc	postinc2,f,c
 16210  000E8A  51B2               	movf	(f_lseek@ofs+2)& (0+255),w,b
 16211  000E8C  22DE               	addwfc	postinc2,f,c
 16212  000E8E  51B3               	movf	(f_lseek@ofs+3)& (0+255),w,b
 16213  000E90  22DE               	addwfc	postinc2,f,c
 16214                           
 16215                           ;tff.c: 1196: fp->csect = (BYTE)(ofs / 512U);
 16216  000E92  EE20 F003          	lfsr	2,3
 16217  000E96  51AE               	movf	f_lseek@fp& (0+255),w,b
 16218  000E98  26D9               	addwf	fsr2l,f,c
 16219  000E9A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 16220  000E9C  22DA               	addwfc	fsr2h,f,c
 16221  000E9E  C0B0  F0B4         	movff	f_lseek@ofs,??_f_lseek
 16222  000EA2  C0B1  F0B5         	movff	f_lseek@ofs+1,??_f_lseek+1
 16223  000EA6  C0B2  F0B6         	movff	f_lseek@ofs+2,??_f_lseek+2
 16224  000EAA  C0B3  F0B7         	movff	f_lseek@ofs+3,??_f_lseek+3
 16225  000EAE  0E0A               	movlw	10
 16226  000EB0  D005               	goto	u14620
 16227  000EB2                     u14625:
 16228  000EB2  90D8               	bcf	status,0,c
 16229  000EB4  33B7               	rrcf	(??_f_lseek+3)& (0+255),f,b
 16230  000EB6  33B6               	rrcf	(??_f_lseek+2)& (0+255),f,b
 16231  000EB8  33B5               	rrcf	(??_f_lseek+1)& (0+255),f,b
 16232  000EBA  33B4               	rrcf	??_f_lseek& (0+255),f,b
 16233  000EBC                     u14620:
 16234  000EBC  2EE8               	decfsz	wreg,f,c
 16235  000EBE  D7F9               	goto	u14625
 16236  000EC0  51B4               	movf	??_f_lseek& (0+255),w,b
 16237  000EC2  6EDF               	movwf	indf2,c
 16238                           
 16239                           ; BSR set to: 0
 16240                           ;tff.c: 1197: if (ofs % 512U) fp->csect++;
 16241  000EC4  0EFF               	movlw	255
 16242  000EC6  15B0               	andwf	f_lseek@ofs& (0+255),w,b
 16243  000EC8  6FB4               	movwf	??_f_lseek& (0+255),b
 16244  000ECA  0E01               	movlw	1
 16245  000ECC  15B1               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 16246  000ECE  6FB5               	movwf	(??_f_lseek+1)& (0+255),b
 16247  000ED0  0E00               	movlw	0
 16248  000ED2  15B2               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 16249  000ED4  6FB6               	movwf	(??_f_lseek+2)& (0+255),b
 16250  000ED6  0E00               	movlw	0
 16251  000ED8  15B3               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 16252  000EDA  6FB7               	movwf	(??_f_lseek+3)& (0+255),b
 16253  000EDC  51B4               	movf	??_f_lseek& (0+255),w,b
 16254  000EDE  11B5               	iorwf	(??_f_lseek+1)& (0+255),w,b
 16255  000EE0  11B6               	iorwf	(??_f_lseek+2)& (0+255),w,b
 16256  000EE2  11B7               	iorwf	(??_f_lseek+3)& (0+255),w,b
 16257  000EE4  B4D8               	btfsc	status,2,c
 16258  000EE6  D007               	goto	l13507
 16259                           
 16260                           ; BSR set to: 0
 16261  000EE8  EE20 F003          	lfsr	2,3
 16262  000EEC  51AE               	movf	f_lseek@fp& (0+255),w,b
 16263  000EEE  26D9               	addwf	fsr2l,f,c
 16264  000EF0  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 16265  000EF2  22DA               	addwfc	fsr2h,f,c
 16266  000EF4  2ADF               	incf	indf2,f,c
 16267  000EF6                     l13507:
 16268                           
 16269                           ; BSR set to: 0
 16270                           ;tff.c: 1198: };tff.c: 1199: };tff.c: 1202: if (fp->fptr > fp->fsize) {
 16271  000EF6  EE20 F006          	lfsr	2,6
 16272  000EFA  51AE               	movf	f_lseek@fp& (0+255),w,b
 16273  000EFC  26D9               	addwf	fsr2l,f,c
 16274  000EFE  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 16275  000F00  22DA               	addwfc	fsr2h,f,c
 16276  000F02  EE10 F00A          	lfsr	1,10
 16277  000F06  51AE               	movf	f_lseek@fp& (0+255),w,b
 16278  000F08  26E1               	addwf	fsr1l,f,c
 16279  000F0A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 16280  000F0C  22E2               	addwfc	fsr1h,f,c
 16281  000F0E  50DE               	movf	postinc2,w,c
 16282  000F10  5CE6               	subwf	postinc1,w,c
 16283  000F12  50DE               	movf	postinc2,w,c
 16284  000F14  58E6               	subwfb	postinc1,w,c
 16285  000F16  50DE               	movf	postinc2,w,c
 16286  000F18  58E6               	subwfb	postinc1,w,c
 16287  000F1A  50DE               	movf	postinc2,w,c
 16288  000F1C  58E6               	subwfb	postinc1,w,c
 16289  000F1E  B0D8               	btfsc	status,0,c
 16290  000F20  0012               	return	
 16291                           
 16292                           ; BSR set to: 0
 16293                           ;tff.c: 1203: fp->fsize = fp->fptr;
 16294  000F22  EE20 F006          	lfsr	2,6
 16295  000F26  51AE               	movf	f_lseek@fp& (0+255),w,b
 16296  000F28  26D9               	addwf	fsr2l,f,c
 16297  000F2A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 16298  000F2C  22DA               	addwfc	fsr2h,f,c
 16299  000F2E  EE10 F00A          	lfsr	1,10
 16300  000F32  51AE               	movf	f_lseek@fp& (0+255),w,b
 16301  000F34  26E1               	addwf	fsr1l,f,c
 16302  000F36  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 16303  000F38  22E2               	addwfc	fsr1h,f,c
 16304  000F3A  CFDE FFE6          	movff	postinc2,postinc1
 16305  000F3E  CFDE FFE6          	movff	postinc2,postinc1
 16306  000F42  CFDE FFE6          	movff	postinc2,postinc1
 16307  000F46  CFDE FFE6          	movff	postinc2,postinc1
 16308                           
 16309                           ; BSR set to: 0
 16310                           ;tff.c: 1204: fp->flag |= 0x20;
 16311  000F4A  EE20 F002          	lfsr	2,2
 16312  000F4E  51AE               	movf	f_lseek@fp& (0+255),w,b
 16313  000F50  26D9               	addwf	fsr2l,f,c
 16314  000F52  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 16315  000F54  22DA               	addwfc	fsr2h,f,c
 16316  000F56  0E00               	movlw	0
 16317  000F58  8ADB               	bsf	plusw2,5,c
 16318  000F5A  0012               	return	
 16319  000F5C                     l13515:
 16320                           
 16321                           ; BSR set to: 0
 16322                           ;tff.c: 1211: fp->flag |= 0x80;
 16323  000F5C  EE20 F002          	lfsr	2,2
 16324  000F60  51AE               	movf	f_lseek@fp& (0+255),w,b
 16325  000F62  26D9               	addwf	fsr2l,f,c
 16326  000F64  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 16327  000F66  22DA               	addwfc	fsr2h,f,c
 16328  000F68  0E00               	movlw	0
 16329  000F6A  8EDB               	bsf	plusw2,7,c
 16330                           
 16331                           ; BSR set to: 0
 16332  000F6C  0012               	return		;funcret
 16333  000F6E                     __end_of_f_lseek:
 16334                           	callstack 0
 16335                           
 16336 ;; *************** function _create_chain *****************
 16337 ;; Defined at:
 16338 ;;		line 283 in file "bibliotecas/tff.c"
 16339 ;; Parameters:    Size  Location     Type
 16340 ;;  clust           2   64[BANK0 ] unsigned short 
 16341 ;; Auto vars:     Size  Location     Type
 16342 ;;  ncl             2   76[BANK0 ] unsigned short 
 16343 ;;  scl             2   74[BANK0 ] unsigned short 
 16344 ;;  cstat           2   72[BANK0 ] unsigned short 
 16345 ;;  fs              2   70[BANK0 ] PTR struct _FATFS
 16346 ;;		 -> NULL(0), fs(544), 
 16347 ;;  mcl             2   68[BANK0 ] unsigned short 
 16348 ;; Return value:  Size  Location     Type
 16349 ;;                  2   64[BANK0 ] unsigned short 
 16350 ;; Registers used:
 16351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16352 ;; Tracked objects:
 16353 ;;		On entry : 3F/0
 16354 ;;		On exit  : 3F/0
 16355 ;;		Unchanged: 0/0
 16356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16357 ;;      Params:         0       2       0       0       0       0       0       0       0
 16358 ;;      Locals:         0      10       0       0       0       0       0       0       0
 16359 ;;      Temps:          0       2       0       0       0       0       0       0       0
 16360 ;;      Totals:         0      14       0       0       0       0       0       0       0
 16361 ;;Total ram usage:       14 bytes
 16362 ;; Hardware stack levels used:    1
 16363 ;; Hardware stack levels required when called:   10
 16364 ;; This function calls:
 16365 ;;		_get_cluster
 16366 ;;		_put_cluster
 16367 ;; This function is called by:
 16368 ;;		_reserve_direntry
 16369 ;;		_f_write
 16370 ;;		_f_lseek
 16371 ;; This function uses a non-reentrant model
 16372 ;;
 16373                           
 16374                           	psect	text83
 16375  0033F8                     __ptext83:
 16376                           	callstack 0
 16377  0033F8                     _create_chain:
 16378                           	callstack 13
 16379                           
 16380                           ; BSR set to: 0
 16381                           ;tff.c: 287: CLUST cstat, ncl, scl, mcl;;tff.c: 288: FATFS *fs = FatFs;
 16382                           
 16383                           ; BSR set to: 0
 16384                           ;incstack = 0
 16385  0033F8  C037  F0A6         	movff	_FatFs,create_chain@fs
 16386  0033FC  C038  F0A7         	movff	_FatFs+1,create_chain@fs+1
 16387                           
 16388                           ; BSR set to: 0
 16389                           ;tff.c: 291: mcl = fs->max_clust;
 16390  003400  EE20 F016          	lfsr	2,22
 16391  003404  51A6               	movf	create_chain@fs& (0+255),w,b
 16392  003406  26D9               	addwf	fsr2l,f,c
 16393  003408  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 16394  00340A  22DA               	addwfc	fsr2h,f,c
 16395  00340C  CFDE F0A4          	movff	postinc2,create_chain@mcl
 16396  003410  CFDD F0A5          	movff	postdec2,create_chain@mcl+1
 16397                           
 16398                           ; BSR set to: 0
 16399                           ;tff.c: 292: if (clust == 0) {
 16400  003414  51A0               	movf	create_chain@clust& (0+255),w,b
 16401  003416  11A1               	iorwf	(create_chain@clust+1)& (0+255),w,b
 16402  003418  A4D8               	btfss	status,2,c
 16403  00341A  D01B               	goto	l11801
 16404                           
 16405                           ; BSR set to: 0
 16406                           ;tff.c: 293: scl = fs->last_clust;
 16407  00341C  EE20 F018          	lfsr	2,24
 16408  003420  51A6               	movf	create_chain@fs& (0+255),w,b
 16409  003422  26D9               	addwf	fsr2l,f,c
 16410  003424  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 16411  003426  22DA               	addwfc	fsr2h,f,c
 16412  003428  CFDE F0AA          	movff	postinc2,create_chain@scl
 16413  00342C  CFDD F0AB          	movff	postdec2,create_chain@scl+1
 16414                           
 16415                           ; BSR set to: 0
 16416                           ;tff.c: 294: if (scl < 2 || scl >= mcl) scl = 1;
 16417  003430  51AB               	movf	(create_chain@scl+1)& (0+255),w,b
 16418  003432  E104               	bnz	u12310
 16419  003434  0E02               	movlw	2
 16420  003436  5DAA               	subwf	create_chain@scl& (0+255),w,b
 16421  003438  A0D8               	btfss	status,0,c
 16422  00343A  D006               	goto	u12320
 16423  00343C                     u12310:
 16424                           
 16425                           ; BSR set to: 0
 16426  00343C  51A4               	movf	create_chain@mcl& (0+255),w,b
 16427  00343E  5DAA               	subwf	create_chain@scl& (0+255),w,b
 16428  003440  51A5               	movf	(create_chain@mcl+1)& (0+255),w,b
 16429  003442  59AB               	subwfb	(create_chain@scl+1)& (0+255),w,b
 16430  003444  A0D8               	btfss	status,0,c
 16431  003446  D029               	goto	l794
 16432  003448                     u12320:
 16433                           
 16434                           ; BSR set to: 0
 16435  003448  0E00               	movlw	0
 16436  00344A  6FAB               	movwf	(create_chain@scl+1)& (0+255),b
 16437  00344C  0E01               	movlw	1
 16438  00344E  6FAA               	movwf	create_chain@scl& (0+255),b
 16439  003450  D024               	goto	l794
 16440  003452                     l11801:
 16441                           
 16442                           ; BSR set to: 0
 16443                           ;tff.c: 296: else {;tff.c: 297: cstat = get_cluster(clust);
 16444  003452  C0A0  F088         	movff	create_chain@clust,get_cluster@clust
 16445  003456  C0A1  F089         	movff	create_chain@clust+1,get_cluster@clust+1
 16446  00345A  ECA7  F012         	call	_get_cluster	;wreg free
 16447  00345E  C088  F0A8         	movff	?_get_cluster,create_chain@cstat
 16448  003462  C089  F0A9         	movff	?_get_cluster+1,create_chain@cstat+1
 16449                           
 16450                           ; BSR set to: 0
 16451                           ;tff.c: 298: if (cstat < 2) return 1;
 16452  003466  51A9               	movf	(create_chain@cstat+1)& (0+255),w,b
 16453  003468  E109               	bnz	l11809
 16454  00346A  0E02               	movlw	2
 16455  00346C  5DA8               	subwf	create_chain@cstat& (0+255),w,b
 16456  00346E  B0D8               	btfsc	status,0,c
 16457  003470  D005               	goto	l11809
 16458  003472                     u12330:
 16459                           
 16460                           ; BSR set to: 0
 16461  003472  0E00               	movlw	0
 16462  003474  6FA1               	movwf	(?_create_chain+1)& (0+255),b
 16463  003476  0E01               	movlw	1
 16464  003478  6FA0               	movwf	?_create_chain& (0+255),b
 16465  00347A  0012               	return	
 16466  00347C                     l11809:
 16467                           
 16468                           ; BSR set to: 0
 16469                           ;tff.c: 299: if (cstat < mcl) return cstat;
 16470  00347C  51A4               	movf	create_chain@mcl& (0+255),w,b
 16471  00347E  5DA8               	subwf	create_chain@cstat& (0+255),w,b
 16472  003480  51A5               	movf	(create_chain@mcl+1)& (0+255),w,b
 16473  003482  59A9               	subwfb	(create_chain@cstat+1)& (0+255),w,b
 16474  003484  B0D8               	btfsc	status,0,c
 16475  003486  D005               	goto	l797
 16476                           
 16477                           ; BSR set to: 0
 16478  003488  C0A8  F0A0         	movff	create_chain@cstat,?_create_chain
 16479  00348C  C0A9  F0A1         	movff	create_chain@cstat+1,?_create_chain+1
 16480  003490  0012               	return	
 16481  003492                     l797:
 16482                           
 16483                           ; BSR set to: 0
 16484                           ;tff.c: 300: scl = clust;
 16485  003492  C0A0  F0AA         	movff	create_chain@clust,create_chain@scl
 16486  003496  C0A1  F0AB         	movff	create_chain@clust+1,create_chain@scl+1
 16487  00349A                     l794:
 16488                           
 16489                           ; BSR set to: 0
 16490                           ;tff.c: 301: };tff.c: 303: ncl = scl;
 16491  00349A  C0AA  F0AC         	movff	create_chain@scl,create_chain@ncl
 16492  00349E  C0AB  F0AD         	movff	create_chain@scl+1,create_chain@ncl+1
 16493  0034A2                     l11813:
 16494                           
 16495                           ; BSR set to: 0
 16496                           ;tff.c: 305: ncl++;
 16497  0034A2  4BAC               	infsnz	create_chain@ncl& (0+255),f,b
 16498  0034A4  2BAD               	incf	(create_chain@ncl+1)& (0+255),f,b
 16499                           
 16500                           ; BSR set to: 0
 16501                           ;tff.c: 306: if (ncl >= mcl) {
 16502  0034A6  51A4               	movf	create_chain@mcl& (0+255),w,b
 16503  0034A8  5DAC               	subwf	create_chain@ncl& (0+255),w,b
 16504  0034AA  51A5               	movf	(create_chain@mcl+1)& (0+255),w,b
 16505  0034AC  59AD               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 16506  0034AE  A0D8               	btfss	status,0,c
 16507  0034B0  D00F               	goto	l11825
 16508                           
 16509                           ; BSR set to: 0
 16510                           ;tff.c: 307: ncl = 2;
 16511  0034B2  0E00               	movlw	0
 16512  0034B4  6FAD               	movwf	(create_chain@ncl+1)& (0+255),b
 16513  0034B6  0E02               	movlw	2
 16514  0034B8  6FAC               	movwf	create_chain@ncl& (0+255),b
 16515                           
 16516                           ; BSR set to: 0
 16517                           ;tff.c: 308: if (ncl > scl) return 0;
 16518  0034BA  51AB               	movf	(create_chain@scl+1)& (0+255),w,b
 16519  0034BC  E109               	bnz	l11825
 16520  0034BE  0E02               	movlw	2
 16521  0034C0  5DAA               	subwf	create_chain@scl& (0+255),w,b
 16522  0034C2  B0D8               	btfsc	status,0,c
 16523  0034C4  D005               	goto	l11825
 16524  0034C6                     u12360:
 16525                           
 16526                           ; BSR set to: 0
 16527  0034C6  0E00               	movlw	0
 16528  0034C8  6FA1               	movwf	(?_create_chain+1)& (0+255),b
 16529  0034CA  0E00               	movlw	0
 16530  0034CC  6FA0               	movwf	?_create_chain& (0+255),b
 16531  0034CE  0012               	return	
 16532  0034D0                     l11825:
 16533                           
 16534                           ; BSR set to: 0
 16535                           ;tff.c: 309: };tff.c: 310: cstat = get_cluster(ncl);
 16536  0034D0  C0AC  F088         	movff	create_chain@ncl,get_cluster@clust
 16537  0034D4  C0AD  F089         	movff	create_chain@ncl+1,get_cluster@clust+1
 16538  0034D8  ECA7  F012         	call	_get_cluster	;wreg free
 16539  0034DC  C088  F0A8         	movff	?_get_cluster,create_chain@cstat
 16540  0034E0  C089  F0A9         	movff	?_get_cluster+1,create_chain@cstat+1
 16541                           
 16542                           ; BSR set to: 0
 16543                           ;tff.c: 311: if (cstat == 0) break;
 16544  0034E4  51A8               	movf	create_chain@cstat& (0+255),w,b
 16545  0034E6  11A9               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 16546  0034E8  B4D8               	btfsc	status,2,c
 16547  0034EA  D00C               	goto	l11843
 16548                           
 16549                           ; BSR set to: 0
 16550                           ;tff.c: 312: if (cstat == 1) return 1;
 16551  0034EC  05A8               	decf	create_chain@cstat& (0+255),w,b
 16552  0034EE  11A9               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 16553  0034F0  B4D8               	btfsc	status,2,c
 16554  0034F2  D7BF               	goto	u12330
 16555                           
 16556                           ; BSR set to: 0
 16557                           ;tff.c: 313: if (ncl == scl) return 0;
 16558  0034F4  51AA               	movf	create_chain@scl& (0+255),w,b
 16559  0034F6  19AC               	xorwf	create_chain@ncl& (0+255),w,b
 16560  0034F8  E1D4               	bnz	l11813
 16561  0034FA  51AB               	movf	(create_chain@scl+1)& (0+255),w,b
 16562  0034FC  19AD               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 16563  0034FE  B4D8               	btfsc	status,2,c
 16564  003500  D7E2               	goto	u12360
 16565  003502  D7CF               	goto	l11813
 16566  003504                     l11843:
 16567                           
 16568                           ; BSR set to: 0
 16569                           ;tff.c: 316: if (!put_cluster(ncl, (CLUST)0x0FFFFFFF)) return 1;
 16570  003504  C0AC  F088         	movff	create_chain@ncl,put_cluster@clust
 16571  003508  C0AD  F089         	movff	create_chain@ncl+1,put_cluster@clust+1
 16572  00350C  0EFF               	movlw	255
 16573  00350E  6F8B               	movwf	(put_cluster@val+1)& (0+255),b
 16574  003510  698A               	setf	put_cluster@val& (0+255),b
 16575  003512  EC5F  F010         	call	_put_cluster	;wreg free
 16576  003516  0900               	iorlw	0
 16577  003518  B4D8               	btfsc	status,2,c
 16578  00351A  D7AB               	goto	u12330
 16579                           
 16580                           ; BSR set to: 0
 16581                           ;tff.c: 317: if (clust != 0 && !put_cluster(clust, ncl)) return 1;
 16582  00351C  51A0               	movf	create_chain@clust& (0+255),w,b
 16583  00351E  11A1               	iorwf	(create_chain@clust+1)& (0+255),w,b
 16584  003520  B4D8               	btfsc	status,2,c
 16585  003522  D00D               	goto	l11857
 16586                           
 16587                           ; BSR set to: 0
 16588  003524  C0A0  F088         	movff	create_chain@clust,put_cluster@clust
 16589  003528  C0A1  F089         	movff	create_chain@clust+1,put_cluster@clust+1
 16590  00352C  C0AC  F08A         	movff	create_chain@ncl,put_cluster@val
 16591  003530  C0AD  F08B         	movff	create_chain@ncl+1,put_cluster@val+1
 16592  003534  EC5F  F010         	call	_put_cluster	;wreg free
 16593  003538  0900               	iorlw	0
 16594  00353A  B4D8               	btfsc	status,2,c
 16595  00353C  D79A               	goto	u12330
 16596  00353E                     l11857:
 16597                           
 16598                           ; BSR set to: 0
 16599                           ;tff.c: 319: fs->last_clust = ncl;
 16600  00353E  EE20 F018          	lfsr	2,24
 16601  003542  51A6               	movf	create_chain@fs& (0+255),w,b
 16602  003544  26D9               	addwf	fsr2l,f,c
 16603  003546  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 16604  003548  22DA               	addwfc	fsr2h,f,c
 16605  00354A  C0AC  FFDE         	movff	create_chain@ncl,postinc2
 16606  00354E  C0AD  FFDD         	movff	create_chain@ncl+1,postdec2
 16607                           
 16608                           ;tff.c: 320: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 16609  003552  EE20 F01A          	lfsr	2,26
 16610  003556  51A6               	movf	create_chain@fs& (0+255),w,b
 16611  003558  26D9               	addwf	fsr2l,f,c
 16612  00355A  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 16613  00355C  22DA               	addwfc	fsr2h,f,c
 16614  00355E  28DE               	incf	postinc2,w,c
 16615  003560  E103               	bnz	u12430
 16616  003562  28DE               	incf	postinc2,w,c
 16617  003564  B4D8               	btfsc	status,2,c
 16618  003566  D009               	goto	l11861
 16619  003568                     u12430:
 16620                           
 16621                           ; BSR set to: 0
 16622                           ;tff.c: 321: fs->free_clust--;
 16623  003568  EE20 F01A          	lfsr	2,26
 16624  00356C  51A6               	movf	create_chain@fs& (0+255),w,b
 16625  00356E  26D9               	addwf	fsr2l,f,c
 16626  003570  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 16627  003572  22DA               	addwfc	fsr2h,f,c
 16628  003574  06DE               	decf	postinc2,f,c
 16629  003576  0E00               	movlw	0
 16630  003578  5ADD               	subwfb	postdec2,f,c
 16631  00357A                     l11861:
 16632                           
 16633                           ; BSR set to: 0
 16634                           ;tff.c: 325: };tff.c: 327: return ncl;
 16635  00357A  C0AC  F0A0         	movff	create_chain@ncl,?_create_chain
 16636  00357E  C0AD  F0A1         	movff	create_chain@ncl+1,?_create_chain+1
 16637                           
 16638                           ; BSR set to: 0
 16639  003582  0012               	return		;funcret
 16640  003584                     __end_of_create_chain:
 16641                           	callstack 0
 16642                           
 16643 ;; *************** function _put_cluster *****************
 16644 ;; Defined at:
 16645 ;;		line 198 in file "bibliotecas/tff.c"
 16646 ;; Parameters:    Size  Location     Type
 16647 ;;  clust           2   40[BANK0 ] unsigned short 
 16648 ;;  val             2   42[BANK0 ] unsigned short 
 16649 ;; Auto vars:     Size  Location     Type
 16650 ;;  fatsect         4   54[BANK0 ] unsigned long 
 16651 ;;  fs              2   62[BANK0 ] PTR struct _FATFS
 16652 ;;		 -> NULL(0), fs(544), 
 16653 ;;  p               2   60[BANK0 ] PTR unsigned char 
 16654 ;;		 -> fs.win(512), NULL(0), fs(544), 
 16655 ;;  bc              2   58[BANK0 ] unsigned short 
 16656 ;; Return value:  Size  Location     Type
 16657 ;;                  1    wreg      enum E105
 16658 ;; Registers used:
 16659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16660 ;; Tracked objects:
 16661 ;;		On entry : 3F/0
 16662 ;;		On exit  : 3F/0
 16663 ;;		Unchanged: 0/0
 16664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16665 ;;      Params:         0       4       0       0       0       0       0       0       0
 16666 ;;      Locals:         0      14       0       0       0       0       0       0       0
 16667 ;;      Temps:          0       6       0       0       0       0       0       0       0
 16668 ;;      Totals:         0      24       0       0       0       0       0       0       0
 16669 ;;Total ram usage:       24 bytes
 16670 ;; Hardware stack levels used:    1
 16671 ;; Hardware stack levels required when called:    9
 16672 ;; This function calls:
 16673 ;;		___wmul
 16674 ;;		_move_window
 16675 ;; This function is called by:
 16676 ;;		_remove_chain
 16677 ;;		_create_chain
 16678 ;; This function uses a non-reentrant model
 16679 ;;
 16680                           
 16681                           	psect	text84
 16682  0020BE                     __ptext84:
 16683                           	callstack 0
 16684  0020BE                     _put_cluster:
 16685                           	callstack 13
 16686                           
 16687                           ; BSR set to: 0
 16688                           ;tff.c: 203: WORD bc;;tff.c: 204: BYTE *p;;tff.c: 205: DWORD fatsect;;tff.c: 206: FATFS 
      +                          *fs = FatFs;
 16689                           
 16690                           ; BSR set to: 0
 16691                           ;incstack = 0
 16692  0020BE  C037  F09E         	movff	_FatFs,put_cluster@fs
 16693  0020C2  C038  F09F         	movff	_FatFs+1,put_cluster@fs+1
 16694                           
 16695                           ; BSR set to: 0
 16696                           ;tff.c: 209: fatsect = fs->fatbase;
 16697  0020C6  EE20 F008          	lfsr	2,8
 16698  0020CA  519E               	movf	put_cluster@fs& (0+255),w,b
 16699  0020CC  26D9               	addwf	fsr2l,f,c
 16700  0020CE  519F               	movf	(put_cluster@fs+1)& (0+255),w,b
 16701  0020D0  22DA               	addwfc	fsr2h,f,c
 16702  0020D2  CFDE F096          	movff	postinc2,put_cluster@fatsect
 16703  0020D6  CFDE F097          	movff	postinc2,put_cluster@fatsect+1
 16704  0020DA  CFDE F098          	movff	postinc2,put_cluster@fatsect+2
 16705  0020DE  CFDE F099          	movff	postinc2,put_cluster@fatsect+3
 16706                           
 16707                           ;tff.c: 210: switch (fs->fs_type) {
 16708  0020E2  D108               	goto	l11741
 16709  0020E4                     l11689:
 16710                           
 16711                           ; BSR set to: 0
 16712                           ;tff.c: 212: bc = (WORD)clust * 3 / 2;
 16713  0020E4  C088  F019         	movff	put_cluster@clust,___wmul@multiplier
 16714  0020E8  C089  F01A         	movff	put_cluster@clust+1,___wmul@multiplier+1
 16715  0020EC  0E00               	movlw	0
 16716  0020EE  6E1C               	movwf	(___wmul@multiplicand+1)^0,c
 16717  0020F0  0E03               	movlw	3
 16718  0020F2  6E1B               	movwf	___wmul@multiplicand^0,c
 16719  0020F4  EC65  F02D         	call	___wmul	;wreg free
 16720  0020F8  90D8               	bcf	status,0,c
 16721  0020FA  301A               	rrcf	(?___wmul+1)^0,w,c
 16722  0020FC  0100               	movlb	0	; () banked
 16723  0020FE  6F8C               	movwf	??_put_cluster& (0+255),b
 16724  002100  3019               	rrcf	?___wmul^0,w,c
 16725  002102  6F9A               	movwf	put_cluster@bc& (0+255),b
 16726  002104  C08C  F09B         	movff	??_put_cluster,put_cluster@bc+1
 16727                           
 16728                           ; BSR set to: 0
 16729                           ;tff.c: 213: if (!move_window(fatsect + bc / 512U)) return FALSE;
 16730  002108  C09A  F08C         	movff	put_cluster@bc,??_put_cluster
 16731  00210C  C09B  F08D         	movff	put_cluster@bc+1,??_put_cluster+1
 16732  002110  0E09               	movlw	9
 16733  002112  6F8E               	movwf	(??_put_cluster+2)& (0+255),b
 16734  002114                     u12155:
 16735  002114  90D8               	bcf	status,0,c
 16736  002116  338D               	rrcf	(??_put_cluster+1)& (0+255),f,b
 16737  002118  338C               	rrcf	??_put_cluster& (0+255),f,b
 16738  00211A  2F8E               	decfsz	(??_put_cluster+2)& (0+255),f,b
 16739  00211C  D7FB               	goto	u12155
 16740  00211E  518C               	movf	??_put_cluster& (0+255),w,b
 16741  002120  2596               	addwf	put_cluster@fatsect& (0+255),w,b
 16742  002122  6F73               	movwf	move_window@sector& (0+255),b
 16743  002124  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 16744  002126  2197               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 16745  002128  6F74               	movwf	(move_window@sector+1)& (0+255),b
 16746  00212A  0E00               	movlw	0
 16747  00212C  2198               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 16748  00212E  6F75               	movwf	(move_window@sector+2)& (0+255),b
 16749  002130  0E00               	movlw	0
 16750  002132  2199               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 16751  002134  6F76               	movwf	(move_window@sector+3)& (0+255),b
 16752  002136  EC58  F018         	call	_move_window	;wreg free
 16753  00213A  0900               	iorlw	0
 16754  00213C  A4D8               	btfss	status,2,c
 16755  00213E  D002               	goto	l11697
 16756  002140                     u12160:
 16757                           
 16758                           ; BSR set to: 0
 16759  002140  0E00               	movlw	0
 16760  002142  0012               	return	
 16761  002144                     l11697:
 16762                           
 16763                           ; BSR set to: 0
 16764                           ;tff.c: 214: p = &fs->win[bc % 512U];
 16765  002144  0EFF               	movlw	255
 16766  002146  6F8C               	movwf	??_put_cluster& (0+255),b
 16767  002148  0E01               	movlw	1
 16768  00214A  6F8D               	movwf	(??_put_cluster+1)& (0+255),b
 16769  00214C  C09A  F08E         	movff	put_cluster@bc,??_put_cluster+2
 16770  002150  C09B  F08F         	movff	put_cluster@bc+1,??_put_cluster+3
 16771  002154  518C               	movf	??_put_cluster& (0+255),w,b
 16772  002156  178E               	andwf	(??_put_cluster+2)& (0+255),f,b
 16773  002158  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 16774  00215A  178F               	andwf	(??_put_cluster+3)& (0+255),f,b
 16775  00215C  C09E  F090         	movff	put_cluster@fs,??_put_cluster+4
 16776  002160  C09F  F091         	movff	put_cluster@fs+1,??_put_cluster+5
 16777  002164  518E               	movf	(??_put_cluster+2)& (0+255),w,b
 16778  002166  2790               	addwf	(??_put_cluster+4)& (0+255),f,b
 16779  002168  518F               	movf	(??_put_cluster+3)& (0+255),w,b
 16780  00216A  2391               	addwfc	(??_put_cluster+5)& (0+255),f,b
 16781  00216C  0E20               	movlw	32
 16782  00216E  2590               	addwf	(??_put_cluster+4)& (0+255),w,b
 16783  002170  6F9C               	movwf	put_cluster@p& (0+255),b
 16784  002172  0E00               	movlw	0
 16785  002174  2191               	addwfc	(??_put_cluster+5)& (0+255),w,b
 16786  002176  6F9D               	movwf	(put_cluster@p+1)& (0+255),b
 16787                           
 16788                           ; BSR set to: 0
 16789                           ;tff.c: 215: *p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 16790  002178  B188               	btfsc	put_cluster@clust& (0+255),0,b
 16791  00217A  D004               	goto	l11703
 16792                           
 16793                           ; BSR set to: 0
 16794  00217C  C08A  F092         	movff	put_cluster@val,_put_cluster$1552
 16795  002180  6B93               	clrf	(_put_cluster$1552+1)& (0+255),b
 16796  002182  D01A               	goto	l11705
 16797  002184                     l11703:
 16798                           
 16799                           ; BSR set to: 0
 16800  002184  518A               	movf	put_cluster@val& (0+255),w,b
 16801  002186  6F8C               	movwf	??_put_cluster& (0+255),b
 16802  002188  6B8D               	clrf	(??_put_cluster+1)& (0+255),b
 16803  00218A  3B8C               	swapf	??_put_cluster& (0+255),f,b
 16804  00218C  3B8D               	swapf	(??_put_cluster+1)& (0+255),f,b
 16805  00218E  0EF0               	movlw	240
 16806  002190  178D               	andwf	(??_put_cluster+1)& (0+255),f,b
 16807  002192  518C               	movf	??_put_cluster& (0+255),w,b
 16808  002194  0B0F               	andlw	15
 16809  002196  138D               	iorwf	(??_put_cluster+1)& (0+255),f,b
 16810  002198  0EF0               	movlw	240
 16811  00219A  178C               	andwf	??_put_cluster& (0+255),f,b
 16812  00219C  C09C  FFD9         	movff	put_cluster@p,fsr2l
 16813  0021A0  C09D  FFDA         	movff	put_cluster@p+1,fsr2h
 16814  0021A4  50DF               	movf	indf2,w,c
 16815  0021A6  0B0F               	andlw	15
 16816  0021A8  6F8E               	movwf	(??_put_cluster+2)& (0+255),b
 16817  0021AA  6B8F               	clrf	(??_put_cluster+3)& (0+255),b
 16818  0021AC  518C               	movf	??_put_cluster& (0+255),w,b
 16819  0021AE  118E               	iorwf	(??_put_cluster+2)& (0+255),w,b
 16820  0021B0  6F92               	movwf	_put_cluster$1552& (0+255),b
 16821  0021B2  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 16822  0021B4  118F               	iorwf	(??_put_cluster+3)& (0+255),w,b
 16823  0021B6  6F93               	movwf	(_put_cluster$1552+1)& (0+255),b
 16824  0021B8                     l11705:
 16825                           
 16826                           ; BSR set to: 0
 16827  0021B8  C09C  FFD9         	movff	put_cluster@p,fsr2l
 16828  0021BC  C09D  FFDA         	movff	put_cluster@p+1,fsr2h
 16829  0021C0  C092  FFDF         	movff	_put_cluster$1552,indf2
 16830                           
 16831                           ; BSR set to: 0
 16832                           ;tff.c: 216: bc++;
 16833  0021C4  4B9A               	infsnz	put_cluster@bc& (0+255),f,b
 16834  0021C6  2B9B               	incf	(put_cluster@bc+1)& (0+255),f,b
 16835                           
 16836                           ; BSR set to: 0
 16837                           ;tff.c: 217: fs->winflag = 1;
 16838  0021C8  EE20 F01F          	lfsr	2,31
 16839  0021CC  519E               	movf	put_cluster@fs& (0+255),w,b
 16840  0021CE  26D9               	addwf	fsr2l,f,c
 16841  0021D0  519F               	movf	(put_cluster@fs+1)& (0+255),w,b
 16842  0021D2  22DA               	addwfc	fsr2h,f,c
 16843  0021D4  0E01               	movlw	1
 16844  0021D6  6EDF               	movwf	indf2,c
 16845                           
 16846                           ; BSR set to: 0
 16847                           ;tff.c: 218: if (!move_window(fatsect + bc / 512U)) return FALSE;
 16848  0021D8  C09A  F08C         	movff	put_cluster@bc,??_put_cluster
 16849  0021DC  C09B  F08D         	movff	put_cluster@bc+1,??_put_cluster+1
 16850  0021E0  0E09               	movlw	9
 16851  0021E2  6F8E               	movwf	(??_put_cluster+2)& (0+255),b
 16852  0021E4                     u12185:
 16853  0021E4  90D8               	bcf	status,0,c
 16854  0021E6  338D               	rrcf	(??_put_cluster+1)& (0+255),f,b
 16855  0021E8  338C               	rrcf	??_put_cluster& (0+255),f,b
 16856  0021EA  2F8E               	decfsz	(??_put_cluster+2)& (0+255),f,b
 16857  0021EC  D7FB               	goto	u12185
 16858  0021EE  518C               	movf	??_put_cluster& (0+255),w,b
 16859  0021F0  2596               	addwf	put_cluster@fatsect& (0+255),w,b
 16860  0021F2  6F73               	movwf	move_window@sector& (0+255),b
 16861  0021F4  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 16862  0021F6  2197               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 16863  0021F8  6F74               	movwf	(move_window@sector+1)& (0+255),b
 16864  0021FA  0E00               	movlw	0
 16865  0021FC  2198               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 16866  0021FE  6F75               	movwf	(move_window@sector+2)& (0+255),b
 16867  002200  0E00               	movlw	0
 16868  002202  2199               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 16869  002204  6F76               	movwf	(move_window@sector+3)& (0+255),b
 16870  002206  EC58  F018         	call	_move_window	;wreg free
 16871  00220A  0900               	iorlw	0
 16872  00220C  B4D8               	btfsc	status,2,c
 16873  00220E  D798               	goto	u12160
 16874                           
 16875                           ; BSR set to: 0
 16876                           ;tff.c: 219: p = &fs->win[bc % 512U];
 16877  002210  0EFF               	movlw	255
 16878  002212  6F8C               	movwf	??_put_cluster& (0+255),b
 16879  002214  0E01               	movlw	1
 16880  002216  6F8D               	movwf	(??_put_cluster+1)& (0+255),b
 16881  002218  C09A  F08E         	movff	put_cluster@bc,??_put_cluster+2
 16882  00221C  C09B  F08F         	movff	put_cluster@bc+1,??_put_cluster+3
 16883  002220  518C               	movf	??_put_cluster& (0+255),w,b
 16884  002222  178E               	andwf	(??_put_cluster+2)& (0+255),f,b
 16885  002224  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 16886  002226  178F               	andwf	(??_put_cluster+3)& (0+255),f,b
 16887  002228  C09E  F090         	movff	put_cluster@fs,??_put_cluster+4
 16888  00222C  C09F  F091         	movff	put_cluster@fs+1,??_put_cluster+5
 16889  002230  518E               	movf	(??_put_cluster+2)& (0+255),w,b
 16890  002232  2790               	addwf	(??_put_cluster+4)& (0+255),f,b
 16891  002234  518F               	movf	(??_put_cluster+3)& (0+255),w,b
 16892  002236  2391               	addwfc	(??_put_cluster+5)& (0+255),f,b
 16893  002238  0E20               	movlw	32
 16894  00223A  2590               	addwf	(??_put_cluster+4)& (0+255),w,b
 16895  00223C  6F9C               	movwf	put_cluster@p& (0+255),b
 16896  00223E  0E00               	movlw	0
 16897  002240  2191               	addwfc	(??_put_cluster+5)& (0+255),w,b
 16898  002242  6F9D               	movwf	(put_cluster@p+1)& (0+255),b
 16899                           
 16900                           ; BSR set to: 0
 16901                           ;tff.c: 220: *p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x
      +                          0F));
 16902  002244  B188               	btfsc	put_cluster@clust& (0+255),0,b
 16903  002246  D00E               	goto	l11723
 16904                           
 16905                           ; BSR set to: 0
 16906  002248  C08B  F08C         	movff	put_cluster@val+1,??_put_cluster
 16907  00224C  0E0F               	movlw	15
 16908  00224E  178C               	andwf	??_put_cluster& (0+255),f,b
 16909  002250  C09C  FFD9         	movff	put_cluster@p,fsr2l
 16910  002254  C09D  FFDA         	movff	put_cluster@p+1,fsr2h
 16911  002258  50DF               	movf	indf2,w,c
 16912  00225A  0BF0               	andlw	240
 16913  00225C  118C               	iorwf	??_put_cluster& (0+255),w,b
 16914  00225E  6F8D               	movwf	(??_put_cluster+1)& (0+255),b
 16915  002260  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 16916  002262  D00C               	goto	L8
 16917  002264                     l11723:
 16918                           
 16919                           ; BSR set to: 0
 16920  002264  C08A  F08C         	movff	put_cluster@val,??_put_cluster
 16921  002268  C08B  F08D         	movff	put_cluster@val+1,??_put_cluster+1
 16922  00226C  0E04               	movlw	4
 16923  00226E  6F8E               	movwf	(??_put_cluster+2)& (0+255),b
 16924  002270                     u12215:
 16925  002270  90D8               	bcf	status,0,c
 16926  002272  338D               	rrcf	(??_put_cluster+1)& (0+255),f,b
 16927  002274  338C               	rrcf	??_put_cluster& (0+255),f,b
 16928  002276  2F8E               	decfsz	(??_put_cluster+2)& (0+255),f,b
 16929  002278  D7FB               	goto	u12215
 16930  00227A  518C               	movf	??_put_cluster& (0+255),w,b
 16931  00227C                     L8:
 16932  00227C  6F94               	movwf	_put_cluster$1553& (0+255),b
 16933  00227E  6B95               	clrf	(_put_cluster$1553+1)& (0+255),b
 16934                           
 16935                           ; BSR set to: 0
 16936  002280  C09C  FFD9         	movff	put_cluster@p,fsr2l
 16937  002284  C09D  FFDA         	movff	put_cluster@p+1,fsr2h
 16938  002288  C094  FFDF         	movff	_put_cluster$1553,indf2
 16939                           
 16940                           ;tff.c: 221: break;
 16941  00228C  D041               	goto	l11743
 16942  00228E                     l11727:
 16943                           
 16944                           ; BSR set to: 0
 16945                           ;tff.c: 224: if (!move_window(fatsect + clust / 256)) return FALSE;
 16946  00228E  5189               	movf	(put_cluster@clust+1)& (0+255),w,b
 16947  002290  2596               	addwf	put_cluster@fatsect& (0+255),w,b
 16948  002292  6F73               	movwf	move_window@sector& (0+255),b
 16949  002294  0E00               	movlw	0
 16950  002296  2197               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 16951  002298  6F74               	movwf	(move_window@sector+1)& (0+255),b
 16952  00229A  0E00               	movlw	0
 16953  00229C  2198               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 16954  00229E  6F75               	movwf	(move_window@sector+2)& (0+255),b
 16955  0022A0  0E00               	movlw	0
 16956  0022A2  2199               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 16957  0022A4  6F76               	movwf	(move_window@sector+3)& (0+255),b
 16958  0022A6  EC58  F018         	call	_move_window	;wreg free
 16959  0022AA  0900               	iorlw	0
 16960  0022AC  B4D8               	btfsc	status,2,c
 16961  0022AE  D748               	goto	u12160
 16962                           
 16963                           ; BSR set to: 0
 16964                           ;tff.c: 225: *(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U])=(WORD)((WORD)val);
 16965  0022B0  0EFF               	movlw	255
 16966  0022B2  6F8C               	movwf	??_put_cluster& (0+255),b
 16967  0022B4  0E01               	movlw	1
 16968  0022B6  6F8D               	movwf	(??_put_cluster+1)& (0+255),b
 16969  0022B8  C088  F08E         	movff	put_cluster@clust,??_put_cluster+2
 16970  0022BC  C089  F08F         	movff	put_cluster@clust+1,??_put_cluster+3
 16971  0022C0  90D8               	bcf	status,0,c
 16972  0022C2  378E               	rlcf	(??_put_cluster+2)& (0+255),f,b
 16973  0022C4  378F               	rlcf	(??_put_cluster+3)& (0+255),f,b
 16974  0022C6  518C               	movf	??_put_cluster& (0+255),w,b
 16975  0022C8  178E               	andwf	(??_put_cluster+2)& (0+255),f,b
 16976  0022CA  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 16977  0022CC  178F               	andwf	(??_put_cluster+3)& (0+255),f,b
 16978  0022CE  C09E  F090         	movff	put_cluster@fs,??_put_cluster+4
 16979  0022D2  C09F  F091         	movff	put_cluster@fs+1,??_put_cluster+5
 16980  0022D6  518E               	movf	(??_put_cluster+2)& (0+255),w,b
 16981  0022D8  2790               	addwf	(??_put_cluster+4)& (0+255),f,b
 16982  0022DA  518F               	movf	(??_put_cluster+3)& (0+255),w,b
 16983  0022DC  2391               	addwfc	(??_put_cluster+5)& (0+255),f,b
 16984  0022DE  0E20               	movlw	32
 16985  0022E0  2590               	addwf	(??_put_cluster+4)& (0+255),w,b
 16986  0022E2  6ED9               	movwf	fsr2l,c
 16987  0022E4  0E00               	movlw	0
 16988  0022E6  2191               	addwfc	(??_put_cluster+5)& (0+255),w,b
 16989  0022E8  6EDA               	movwf	fsr2h,c
 16990  0022EA  C08A  FFDE         	movff	put_cluster@val,postinc2
 16991  0022EE  C08B  FFDD         	movff	put_cluster@val+1,postdec2
 16992                           
 16993                           ;tff.c: 226: break;
 16994  0022F2  D00E               	goto	l11743
 16995  0022F4                     l11741:
 16996                           
 16997                           ; BSR set to: 0
 16998  0022F4  EE20 F01C          	lfsr	2,28
 16999  0022F8  519E               	movf	put_cluster@fs& (0+255),w,b
 17000  0022FA  26D9               	addwf	fsr2l,f,c
 17001  0022FC  519F               	movf	(put_cluster@fs+1)& (0+255),w,b
 17002  0022FE  22DA               	addwfc	fsr2h,f,c
 17003  002300  50DF               	movf	indf2,w,c
 17004                           
 17005                           ; Switch size 1, requested type "simple"
 17006                           ; Number of cases is 2, Range of values is 1 to 2
 17007                           ; switch strategies available:
 17008                           ; Name         Instructions Cycles
 17009                           ; simple_byte            7     4 (average)
 17010                           ;	Chosen strategy is simple_byte
 17011  002302  0A01               	xorlw	1	; case 1
 17012  002304  B4D8               	btfsc	status,2,c
 17013  002306  D6EE               	goto	l11689
 17014  002308  0A03               	xorlw	3	; case 2
 17015  00230A  B4D8               	btfsc	status,2,c
 17016  00230C  D7C0               	goto	l11727
 17017  00230E  D718               	goto	u12160
 17018  002310                     l11743:
 17019                           
 17020                           ; BSR set to: 0
 17021                           ;tff.c: 236: fs->winflag = 1;
 17022  002310  EE20 F01F          	lfsr	2,31
 17023  002314  519E               	movf	put_cluster@fs& (0+255),w,b
 17024  002316  26D9               	addwf	fsr2l,f,c
 17025  002318  519F               	movf	(put_cluster@fs+1)& (0+255),w,b
 17026  00231A  22DA               	addwfc	fsr2h,f,c
 17027  00231C  0E01               	movlw	1
 17028  00231E  6EDF               	movwf	indf2,c
 17029                           
 17030                           ; BSR set to: 0
 17031                           ;tff.c: 237: return TRUE;
 17032  002320  0E01               	movlw	1
 17033                           
 17034                           ; BSR set to: 0
 17035  002322  0012               	return		;funcret
 17036  002324                     __end_of_put_cluster:
 17037                           	callstack 0
 17038                           
 17039 ;; *************** function _get_cluster *****************
 17040 ;; Defined at:
 17041 ;;		line 155 in file "bibliotecas/tff.c"
 17042 ;; Parameters:    Size  Location     Type
 17043 ;;  clust           2   40[BANK0 ] unsigned short 
 17044 ;; Auto vars:     Size  Location     Type
 17045 ;;  fatsect         4   53[BANK0 ] unsigned long 
 17046 ;;  fs              2   59[BANK0 ] PTR struct _FATFS
 17047 ;;		 -> NULL(0), fs(544), 
 17048 ;;  bc              2   57[BANK0 ] unsigned short 
 17049 ;;  wc              2   51[BANK0 ] unsigned short 
 17050 ;; Return value:  Size  Location     Type
 17051 ;;                  2   40[BANK0 ] unsigned short 
 17052 ;; Registers used:
 17053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17054 ;; Tracked objects:
 17055 ;;		On entry : 3F/0
 17056 ;;		On exit  : 3F/0
 17057 ;;		Unchanged: 0/0
 17058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17059 ;;      Params:         0       2       0       0       0       0       0       0       0
 17060 ;;      Locals:         0      10       0       0       0       0       0       0       0
 17061 ;;      Temps:          0       9       0       0       0       0       0       0       0
 17062 ;;      Totals:         0      21       0       0       0       0       0       0       0
 17063 ;;Total ram usage:       21 bytes
 17064 ;; Hardware stack levels used:    1
 17065 ;; Hardware stack levels required when called:    9
 17066 ;; This function calls:
 17067 ;;		___wmul
 17068 ;;		_move_window
 17069 ;; This function is called by:
 17070 ;;		_remove_chain
 17071 ;;		_create_chain
 17072 ;;		_next_dir_entry
 17073 ;;		_f_lseek
 17074 ;;		_f_read
 17075 ;; This function uses a non-reentrant model
 17076 ;;
 17077                           
 17078                           	psect	text85
 17079  00254E                     __ptext85:
 17080                           	callstack 0
 17081  00254E                     _get_cluster:
 17082                           	callstack 13
 17083                           
 17084                           ; BSR set to: 0
 17085                           ;tff.c: 159: WORD wc, bc;;tff.c: 160: DWORD fatsect;;tff.c: 161: FATFS *fs = FatFs;
 17086                           
 17087                           ; BSR set to: 0
 17088                           ;incstack = 0
 17089  00254E  C037  F09B         	movff	_FatFs,get_cluster@fs
 17090  002552  C038  F09C         	movff	_FatFs+1,get_cluster@fs+1
 17091                           
 17092                           ;tff.c: 164: if (clust >= 2 && clust < fs->max_clust) {
 17093  002556  5189               	movf	(get_cluster@clust+1)& (0+255),w,b
 17094  002558  E104               	bnz	u12060
 17095  00255A  0E02               	movlw	2
 17096  00255C  5D88               	subwf	get_cluster@clust& (0+255),w,b
 17097  00255E  A0D8               	btfss	status,0,c
 17098  002560  D102               	goto	l11681
 17099  002562                     u12060:
 17100                           
 17101                           ; BSR set to: 0
 17102  002562  EE20 F016          	lfsr	2,22
 17103  002566  519B               	movf	get_cluster@fs& (0+255),w,b
 17104  002568  26D9               	addwf	fsr2l,f,c
 17105  00256A  519C               	movf	(get_cluster@fs+1)& (0+255),w,b
 17106  00256C  22DA               	addwfc	fsr2h,f,c
 17107  00256E  50DE               	movf	postinc2,w,c
 17108  002570  5D88               	subwf	get_cluster@clust& (0+255),w,b
 17109  002572  50DE               	movf	postinc2,w,c
 17110  002574  5989               	subwfb	(get_cluster@clust+1)& (0+255),w,b
 17111  002576  B0D8               	btfsc	status,0,c
 17112  002578  D0F6               	goto	l11681
 17113                           
 17114                           ; BSR set to: 0
 17115                           ;tff.c: 165: fatsect = fs->fatbase;
 17116  00257A  EE20 F008          	lfsr	2,8
 17117  00257E  519B               	movf	get_cluster@fs& (0+255),w,b
 17118  002580  26D9               	addwf	fsr2l,f,c
 17119  002582  519C               	movf	(get_cluster@fs+1)& (0+255),w,b
 17120  002584  22DA               	addwfc	fsr2h,f,c
 17121  002586  CFDE F095          	movff	postinc2,get_cluster@fatsect
 17122  00258A  CFDE F096          	movff	postinc2,get_cluster@fatsect+1
 17123  00258E  CFDE F097          	movff	postinc2,get_cluster@fatsect+2
 17124  002592  CFDE F098          	movff	postinc2,get_cluster@fatsect+3
 17125                           
 17126                           ;tff.c: 166: switch (fs->fs_type) {
 17127  002596  D0DA               	goto	l11679
 17128  002598                     l11645:
 17129                           
 17130                           ; BSR set to: 0
 17131                           ;tff.c: 168: bc = (WORD)clust * 3 / 2;
 17132  002598  C088  F019         	movff	get_cluster@clust,___wmul@multiplier
 17133  00259C  C089  F01A         	movff	get_cluster@clust+1,___wmul@multiplier+1
 17134  0025A0  0E00               	movlw	0
 17135  0025A2  6E1C               	movwf	(___wmul@multiplicand+1)^0,c
 17136  0025A4  0E03               	movlw	3
 17137  0025A6  6E1B               	movwf	___wmul@multiplicand^0,c
 17138  0025A8  EC65  F02D         	call	___wmul	;wreg free
 17139  0025AC  90D8               	bcf	status,0,c
 17140  0025AE  301A               	rrcf	(?___wmul+1)^0,w,c
 17141  0025B0  0100               	movlb	0	; () banked
 17142  0025B2  6F8A               	movwf	??_get_cluster& (0+255),b
 17143  0025B4  3019               	rrcf	?___wmul^0,w,c
 17144  0025B6  6F99               	movwf	get_cluster@bc& (0+255),b
 17145  0025B8  C08A  F09A         	movff	??_get_cluster,get_cluster@bc+1
 17146                           
 17147                           ; BSR set to: 0
 17148                           ;tff.c: 169: if (!move_window(fatsect + bc / 512U)) break;
 17149  0025BC  C099  F08A         	movff	get_cluster@bc,??_get_cluster
 17150  0025C0  C09A  F08B         	movff	get_cluster@bc+1,??_get_cluster+1
 17151  0025C4  0E09               	movlw	9
 17152  0025C6  6F8C               	movwf	(??_get_cluster+2)& (0+255),b
 17153  0025C8                     u12085:
 17154  0025C8  90D8               	bcf	status,0,c
 17155  0025CA  338B               	rrcf	(??_get_cluster+1)& (0+255),f,b
 17156  0025CC  338A               	rrcf	??_get_cluster& (0+255),f,b
 17157  0025CE  2F8C               	decfsz	(??_get_cluster+2)& (0+255),f,b
 17158  0025D0  D7FB               	goto	u12085
 17159  0025D2  518A               	movf	??_get_cluster& (0+255),w,b
 17160  0025D4  2595               	addwf	get_cluster@fatsect& (0+255),w,b
 17161  0025D6  6F73               	movwf	move_window@sector& (0+255),b
 17162  0025D8  518B               	movf	(??_get_cluster+1)& (0+255),w,b
 17163  0025DA  2196               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 17164  0025DC  6F74               	movwf	(move_window@sector+1)& (0+255),b
 17165  0025DE  0E00               	movlw	0
 17166  0025E0  2197               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 17167  0025E2  6F75               	movwf	(move_window@sector+2)& (0+255),b
 17168  0025E4  0E00               	movlw	0
 17169  0025E6  2198               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 17170  0025E8  6F76               	movwf	(move_window@sector+3)& (0+255),b
 17171  0025EA  EC58  F018         	call	_move_window	;wreg free
 17172  0025EE  0900               	iorlw	0
 17173  0025F0  B4D8               	btfsc	status,2,c
 17174  0025F2  D0B9               	goto	l11681
 17175                           
 17176                           ; BSR set to: 0
 17177                           ;tff.c: 170: wc = fs->win[bc % 512U]; bc++;
 17178  0025F4  0EFF               	movlw	255
 17179  0025F6  6F8A               	movwf	??_get_cluster& (0+255),b
 17180  0025F8  0E01               	movlw	1
 17181  0025FA  6F8B               	movwf	(??_get_cluster+1)& (0+255),b
 17182  0025FC  C099  F08C         	movff	get_cluster@bc,??_get_cluster+2
 17183  002600  C09A  F08D         	movff	get_cluster@bc+1,??_get_cluster+3
 17184  002604  518A               	movf	??_get_cluster& (0+255),w,b
 17185  002606  178C               	andwf	(??_get_cluster+2)& (0+255),f,b
 17186  002608  518B               	movf	(??_get_cluster+1)& (0+255),w,b
 17187  00260A  178D               	andwf	(??_get_cluster+3)& (0+255),f,b
 17188  00260C  C09B  F08E         	movff	get_cluster@fs,??_get_cluster+4
 17189  002610  C09C  F08F         	movff	get_cluster@fs+1,??_get_cluster+5
 17190  002614  518C               	movf	(??_get_cluster+2)& (0+255),w,b
 17191  002616  278E               	addwf	(??_get_cluster+4)& (0+255),f,b
 17192  002618  518D               	movf	(??_get_cluster+3)& (0+255),w,b
 17193  00261A  238F               	addwfc	(??_get_cluster+5)& (0+255),f,b
 17194  00261C  0E20               	movlw	32
 17195  00261E  258E               	addwf	(??_get_cluster+4)& (0+255),w,b
 17196  002620  6ED9               	movwf	fsr2l,c
 17197  002622  0E00               	movlw	0
 17198  002624  218F               	addwfc	(??_get_cluster+5)& (0+255),w,b
 17199  002626  6EDA               	movwf	fsr2h,c
 17200  002628  50DF               	movf	indf2,w,c
 17201  00262A  6F90               	movwf	(??_get_cluster+6)& (0+255),b
 17202  00262C  5190               	movf	(??_get_cluster+6)& (0+255),w,b
 17203  00262E  6F93               	movwf	get_cluster@wc& (0+255),b
 17204  002630  6B94               	clrf	(get_cluster@wc+1)& (0+255),b
 17205                           
 17206                           ; BSR set to: 0
 17207  002632  4B99               	infsnz	get_cluster@bc& (0+255),f,b
 17208  002634  2B9A               	incf	(get_cluster@bc+1)& (0+255),f,b
 17209                           
 17210                           ; BSR set to: 0
 17211                           ;tff.c: 171: if (!move_window(fatsect + bc / 512U)) break;
 17212  002636  C099  F08A         	movff	get_cluster@bc,??_get_cluster
 17213  00263A  C09A  F08B         	movff	get_cluster@bc+1,??_get_cluster+1
 17214  00263E  0E09               	movlw	9
 17215  002640  6F8C               	movwf	(??_get_cluster+2)& (0+255),b
 17216  002642                     u12105:
 17217  002642  90D8               	bcf	status,0,c
 17218  002644  338B               	rrcf	(??_get_cluster+1)& (0+255),f,b
 17219  002646  338A               	rrcf	??_get_cluster& (0+255),f,b
 17220  002648  2F8C               	decfsz	(??_get_cluster+2)& (0+255),f,b
 17221  00264A  D7FB               	goto	u12105
 17222  00264C  518A               	movf	??_get_cluster& (0+255),w,b
 17223  00264E  2595               	addwf	get_cluster@fatsect& (0+255),w,b
 17224  002650  6F73               	movwf	move_window@sector& (0+255),b
 17225  002652  518B               	movf	(??_get_cluster+1)& (0+255),w,b
 17226  002654  2196               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 17227  002656  6F74               	movwf	(move_window@sector+1)& (0+255),b
 17228  002658  0E00               	movlw	0
 17229  00265A  2197               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 17230  00265C  6F75               	movwf	(move_window@sector+2)& (0+255),b
 17231  00265E  0E00               	movlw	0
 17232  002660  2198               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 17233  002662  6F76               	movwf	(move_window@sector+3)& (0+255),b
 17234  002664  EC58  F018         	call	_move_window	;wreg free
 17235  002668  0900               	iorlw	0
 17236  00266A  B4D8               	btfsc	status,2,c
 17237  00266C  D07C               	goto	l11681
 17238                           
 17239                           ; BSR set to: 0
 17240                           ;tff.c: 172: wc |= (WORD)fs->win[bc % 512U] << 8;
 17241  00266E  0EFF               	movlw	255
 17242  002670  6F8A               	movwf	??_get_cluster& (0+255),b
 17243  002672  0E01               	movlw	1
 17244  002674  6F8B               	movwf	(??_get_cluster+1)& (0+255),b
 17245  002676  C099  F08C         	movff	get_cluster@bc,??_get_cluster+2
 17246  00267A  C09A  F08D         	movff	get_cluster@bc+1,??_get_cluster+3
 17247  00267E  518A               	movf	??_get_cluster& (0+255),w,b
 17248  002680  178C               	andwf	(??_get_cluster+2)& (0+255),f,b
 17249  002682  518B               	movf	(??_get_cluster+1)& (0+255),w,b
 17250  002684  178D               	andwf	(??_get_cluster+3)& (0+255),f,b
 17251  002686  C09B  F08E         	movff	get_cluster@fs,??_get_cluster+4
 17252  00268A  C09C  F08F         	movff	get_cluster@fs+1,??_get_cluster+5
 17253  00268E  518C               	movf	(??_get_cluster+2)& (0+255),w,b
 17254  002690  278E               	addwf	(??_get_cluster+4)& (0+255),f,b
 17255  002692  518D               	movf	(??_get_cluster+3)& (0+255),w,b
 17256  002694  238F               	addwfc	(??_get_cluster+5)& (0+255),f,b
 17257  002696  0E20               	movlw	32
 17258  002698  258E               	addwf	(??_get_cluster+4)& (0+255),w,b
 17259  00269A  6ED9               	movwf	fsr2l,c
 17260  00269C  0E00               	movlw	0
 17261  00269E  218F               	addwfc	(??_get_cluster+5)& (0+255),w,b
 17262  0026A0  6EDA               	movwf	fsr2h,c
 17263  0026A2  50DF               	movf	indf2,w,c
 17264  0026A4  6F90               	movwf	(??_get_cluster+6)& (0+255),b
 17265  0026A6  5190               	movf	(??_get_cluster+6)& (0+255),w,b
 17266  0026A8  6F92               	movwf	(??_get_cluster+8)& (0+255),b
 17267  0026AA  6B91               	clrf	(??_get_cluster+7)& (0+255),b
 17268  0026AC  5191               	movf	(??_get_cluster+7)& (0+255),w,b
 17269  0026AE  1393               	iorwf	get_cluster@wc& (0+255),f,b
 17270  0026B0  5192               	movf	(??_get_cluster+8)& (0+255),w,b
 17271  0026B2  1394               	iorwf	(get_cluster@wc+1)& (0+255),f,b
 17272                           
 17273                           ; BSR set to: 0
 17274                           ;tff.c: 173: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
 17275  0026B4  B188               	btfsc	get_cluster@clust& (0+255),0,b
 17276  0026B6  D007               	goto	l11665
 17277                           
 17278                           ; BSR set to: 0
 17279  0026B8  0EFF               	movlw	255
 17280  0026BA  1593               	andwf	get_cluster@wc& (0+255),w,b
 17281  0026BC  6F88               	movwf	?_get_cluster& (0+255),b
 17282  0026BE  0E0F               	movlw	15
 17283  0026C0  1594               	andwf	(get_cluster@wc+1)& (0+255),w,b
 17284  0026C2  6F89               	movwf	(?_get_cluster+1)& (0+255),b
 17285  0026C4  0012               	return	
 17286  0026C6                     l11665:
 17287                           
 17288                           ; BSR set to: 0
 17289  0026C6  C093  F08A         	movff	get_cluster@wc,??_get_cluster
 17290  0026CA  C094  F08B         	movff	get_cluster@wc+1,??_get_cluster+1
 17291  0026CE  0E04               	movlw	4
 17292  0026D0  6F8C               	movwf	(??_get_cluster+2)& (0+255),b
 17293  0026D2                     u12135:
 17294  0026D2  90D8               	bcf	status,0,c
 17295  0026D4  338B               	rrcf	(??_get_cluster+1)& (0+255),f,b
 17296  0026D6  338A               	rrcf	??_get_cluster& (0+255),f,b
 17297  0026D8  2F8C               	decfsz	(??_get_cluster+2)& (0+255),f,b
 17298  0026DA  D7FB               	goto	u12135
 17299  0026DC  C08A  F088         	movff	??_get_cluster,?_get_cluster
 17300  0026E0  C08B  F089         	movff	??_get_cluster+1,?_get_cluster+1
 17301  0026E4  0012               	return	
 17302  0026E6                     l11669:
 17303                           
 17304                           ; BSR set to: 0
 17305                           ;tff.c: 176: if (!move_window(fatsect + clust / 256)) break;
 17306  0026E6  5189               	movf	(get_cluster@clust+1)& (0+255),w,b
 17307  0026E8  2595               	addwf	get_cluster@fatsect& (0+255),w,b
 17308  0026EA  6F73               	movwf	move_window@sector& (0+255),b
 17309  0026EC  0E00               	movlw	0
 17310  0026EE  2196               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 17311  0026F0  6F74               	movwf	(move_window@sector+1)& (0+255),b
 17312  0026F2  0E00               	movlw	0
 17313  0026F4  2197               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 17314  0026F6  6F75               	movwf	(move_window@sector+2)& (0+255),b
 17315  0026F8  0E00               	movlw	0
 17316  0026FA  2198               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 17317  0026FC  6F76               	movwf	(move_window@sector+3)& (0+255),b
 17318  0026FE  EC58  F018         	call	_move_window	;wreg free
 17319  002702  0900               	iorlw	0
 17320  002704  B4D8               	btfsc	status,2,c
 17321  002706  D02F               	goto	l11681
 17322                           
 17323                           ; BSR set to: 0
 17324                           ;tff.c: 177: return (WORD)(*(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U]));
 17325  002708  0EFF               	movlw	255
 17326  00270A  6F8A               	movwf	??_get_cluster& (0+255),b
 17327  00270C  0E01               	movlw	1
 17328  00270E  6F8B               	movwf	(??_get_cluster+1)& (0+255),b
 17329  002710  C088  F08C         	movff	get_cluster@clust,??_get_cluster+2
 17330  002714  C089  F08D         	movff	get_cluster@clust+1,??_get_cluster+3
 17331  002718  90D8               	bcf	status,0,c
 17332  00271A  378C               	rlcf	(??_get_cluster+2)& (0+255),f,b
 17333  00271C  378D               	rlcf	(??_get_cluster+3)& (0+255),f,b
 17334  00271E  518A               	movf	??_get_cluster& (0+255),w,b
 17335  002720  178C               	andwf	(??_get_cluster+2)& (0+255),f,b
 17336  002722  518B               	movf	(??_get_cluster+1)& (0+255),w,b
 17337  002724  178D               	andwf	(??_get_cluster+3)& (0+255),f,b
 17338  002726  C09B  F08E         	movff	get_cluster@fs,??_get_cluster+4
 17339  00272A  C09C  F08F         	movff	get_cluster@fs+1,??_get_cluster+5
 17340  00272E  518C               	movf	(??_get_cluster+2)& (0+255),w,b
 17341  002730  278E               	addwf	(??_get_cluster+4)& (0+255),f,b
 17342  002732  518D               	movf	(??_get_cluster+3)& (0+255),w,b
 17343  002734  238F               	addwfc	(??_get_cluster+5)& (0+255),f,b
 17344  002736  0E20               	movlw	32
 17345  002738  258E               	addwf	(??_get_cluster+4)& (0+255),w,b
 17346  00273A  6ED9               	movwf	fsr2l,c
 17347  00273C  0E00               	movlw	0
 17348  00273E  218F               	addwfc	(??_get_cluster+5)& (0+255),w,b
 17349  002740  6EDA               	movwf	fsr2h,c
 17350  002742  CFDE F088          	movff	postinc2,?_get_cluster
 17351  002746  CFDD F089          	movff	postdec2,?_get_cluster+1
 17352  00274A  0012               	return	
 17353  00274C                     l11679:
 17354                           
 17355                           ; BSR set to: 0
 17356  00274C  EE20 F01C          	lfsr	2,28
 17357  002750  519B               	movf	get_cluster@fs& (0+255),w,b
 17358  002752  26D9               	addwf	fsr2l,f,c
 17359  002754  519C               	movf	(get_cluster@fs+1)& (0+255),w,b
 17360  002756  22DA               	addwfc	fsr2h,f,c
 17361  002758  50DF               	movf	indf2,w,c
 17362                           
 17363                           ; Switch size 1, requested type "simple"
 17364                           ; Number of cases is 2, Range of values is 1 to 2
 17365                           ; switch strategies available:
 17366                           ; Name         Instructions Cycles
 17367                           ; simple_byte            7     4 (average)
 17368                           ;	Chosen strategy is simple_byte
 17369  00275A  0A01               	xorlw	1	; case 1
 17370  00275C  B4D8               	btfsc	status,2,c
 17371  00275E  D71C               	goto	l11645
 17372  002760  0A03               	xorlw	3	; case 2
 17373  002762  B4D8               	btfsc	status,2,c
 17374  002764  D7C0               	goto	l11669
 17375  002766                     l11681:
 17376                           
 17377                           ; BSR set to: 0
 17378                           ;tff.c: 184: };tff.c: 186: return 1;
 17379  002766  0E00               	movlw	0
 17380  002768  6F89               	movwf	(?_get_cluster+1)& (0+255),b
 17381  00276A  0E01               	movlw	1
 17382  00276C  6F88               	movwf	?_get_cluster& (0+255),b
 17383                           
 17384                           ; BSR set to: 0
 17385  00276E  0012               	return		;funcret
 17386  002770                     __end_of_get_cluster:
 17387                           	callstack 0
 17388                           
 17389 ;; *************** function ___wmul *****************
 17390 ;; Defined at:
 17391 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\Umul16.c"
 17392 ;; Parameters:    Size  Location     Type
 17393 ;;  multiplier      2   24[COMRAM] unsigned int 
 17394 ;;  multiplicand    2   26[COMRAM] unsigned int 
 17395 ;; Auto vars:     Size  Location     Type
 17396 ;;  product         2   28[COMRAM] unsigned int 
 17397 ;; Return value:  Size  Location     Type
 17398 ;;                  2   24[COMRAM] unsigned int 
 17399 ;; Registers used:
 17400 ;;		wreg, status,2, status,0, prodl, prodh
 17401 ;; Tracked objects:
 17402 ;;		On entry : 0/1
 17403 ;;		On exit  : 0/0
 17404 ;;		Unchanged: 0/0
 17405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17406 ;;      Params:         4       0       0       0       0       0       0       0       0
 17407 ;;      Locals:         2       0       0       0       0       0       0       0       0
 17408 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17409 ;;      Totals:         6       0       0       0       0       0       0       0       0
 17410 ;;Total ram usage:        6 bytes
 17411 ;; Hardware stack levels used:    1
 17412 ;; Hardware stack levels required when called:    3
 17413 ;; This function calls:
 17414 ;;		Nothing
 17415 ;; This function is called by:
 17416 ;;		_get_cluster
 17417 ;;		_put_cluster
 17418 ;;		_fprintf
 17419 ;;		_atoi
 17420 ;; This function uses a non-reentrant model
 17421 ;;
 17422                           
 17423                           	psect	text86
 17424  005ACA                     __ptext86:
 17425                           	callstack 0
 17426  005ACA                     ___wmul:
 17427                           	callstack 21
 17428                           
 17429                           ; BSR set to: 0
 17430                           ;incstack = 0
 17431  005ACA  5019               	movf	___wmul@multiplier^0,w,c
 17432  005ACC  021B               	mulwf	___wmul@multiplicand^0,c
 17433  005ACE  CFF3 F01D          	movff	prodl,___wmul@product
 17434  005AD2  CFF4 F01E          	movff	prodh,___wmul@product+1
 17435  005AD6  5019               	movf	___wmul@multiplier^0,w,c
 17436  005AD8  021C               	mulwf	(___wmul@multiplicand+1)^0,c
 17437  005ADA  50F3               	movf	243,w,c
 17438  005ADC  261E               	addwf	(___wmul@product+1)^0,f,c
 17439  005ADE  501A               	movf	(___wmul@multiplier+1)^0,w,c
 17440  005AE0  021B               	mulwf	___wmul@multiplicand^0,c
 17441  005AE2  50F3               	movf	243,w,c
 17442  005AE4  261E               	addwf	(___wmul@product+1)^0,f,c
 17443  005AE6  C01D  F019         	movff	___wmul@product,?___wmul
 17444  005AEA  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
 17445  005AEE  0012               	return		;funcret
 17446  005AF0                     __end_of___wmul:
 17447                           	callstack 0
 17448                           
 17449 ;; *************** function ___lldiv *****************
 17450 ;; Defined at:
 17451 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\__lldiv.c"
 17452 ;; Parameters:    Size  Location     Type
 17453 ;;  dividend        4   24[COMRAM] unsigned long 
 17454 ;;  divisor         4   28[COMRAM] unsigned long 
 17455 ;; Auto vars:     Size  Location     Type
 17456 ;;  quotient        4   32[COMRAM] unsigned long 
 17457 ;;  counter         1   36[COMRAM] unsigned char 
 17458 ;; Return value:  Size  Location     Type
 17459 ;;                  4   24[COMRAM] unsigned long 
 17460 ;; Registers used:
 17461 ;;		wreg, status,2, status,0
 17462 ;; Tracked objects:
 17463 ;;		On entry : 3D/2
 17464 ;;		On exit  : 3D/0
 17465 ;;		Unchanged: 3D/0
 17466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17467 ;;      Params:         8       0       0       0       0       0       0       0       0
 17468 ;;      Locals:         5       0       0       0       0       0       0       0       0
 17469 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17470 ;;      Totals:        13       0       0       0       0       0       0       0       0
 17471 ;;Total ram usage:       13 bytes
 17472 ;; Hardware stack levels used:    1
 17473 ;; Hardware stack levels required when called:    3
 17474 ;; This function calls:
 17475 ;;		Nothing
 17476 ;; This function is called by:
 17477 ;;		_auto_mount
 17478 ;;		_f_lseek
 17479 ;;		_fprintf
 17480 ;; This function uses a non-reentrant model
 17481 ;;
 17482                           
 17483                           	psect	text87
 17484  004EA0                     __ptext87:
 17485                           	callstack 0
 17486  004EA0                     ___lldiv:
 17487                           	callstack 23
 17488                           
 17489                           ;incstack = 0
 17490  004EA0  0E00               	movlw	0
 17491  004EA2  6E21               	movwf	___lldiv@quotient^0,c
 17492  004EA4  0E00               	movlw	0
 17493  004EA6  6E22               	movwf	(___lldiv@quotient+1)^0,c
 17494  004EA8  0E00               	movlw	0
 17495  004EAA  6E23               	movwf	(___lldiv@quotient+2)^0,c
 17496  004EAC  0E00               	movlw	0
 17497  004EAE  6E24               	movwf	(___lldiv@quotient+3)^0,c
 17498  004EB0  501D               	movf	___lldiv@divisor^0,w,c
 17499  004EB2  101E               	iorwf	(___lldiv@divisor+1)^0,w,c
 17500  004EB4  101F               	iorwf	(___lldiv@divisor+2)^0,w,c
 17501  004EB6  1020               	iorwf	(___lldiv@divisor+3)^0,w,c
 17502  004EB8  B4D8               	btfsc	status,2,c
 17503  004EBA  D02A               	goto	l2051
 17504  004EBC  0E01               	movlw	1
 17505  004EBE  6E25               	movwf	___lldiv@counter^0,c
 17506  004EC0  D006               	goto	l12725
 17507  004EC2                     l12723:
 17508  004EC2  90D8               	bcf	status,0,c
 17509  004EC4  361D               	rlcf	___lldiv@divisor^0,f,c
 17510  004EC6  361E               	rlcf	(___lldiv@divisor+1)^0,f,c
 17511  004EC8  361F               	rlcf	(___lldiv@divisor+2)^0,f,c
 17512  004ECA  3620               	rlcf	(___lldiv@divisor+3)^0,f,c
 17513  004ECC  2A25               	incf	___lldiv@counter^0,f,c
 17514  004ECE                     l12725:
 17515  004ECE  AE20               	btfss	(___lldiv@divisor+3)^0,7,c
 17516  004ED0  D7F8               	goto	l12723
 17517  004ED2                     u13380:
 17518  004ED2  90D8               	bcf	status,0,c
 17519  004ED4  3621               	rlcf	___lldiv@quotient^0,f,c
 17520  004ED6  3622               	rlcf	(___lldiv@quotient+1)^0,f,c
 17521  004ED8  3623               	rlcf	(___lldiv@quotient+2)^0,f,c
 17522  004EDA  3624               	rlcf	(___lldiv@quotient+3)^0,f,c
 17523  004EDC  501D               	movf	___lldiv@divisor^0,w,c
 17524  004EDE  5C19               	subwf	___lldiv@dividend^0,w,c
 17525  004EE0  501E               	movf	(___lldiv@divisor+1)^0,w,c
 17526  004EE2  581A               	subwfb	(___lldiv@dividend+1)^0,w,c
 17527  004EE4  501F               	movf	(___lldiv@divisor+2)^0,w,c
 17528  004EE6  581B               	subwfb	(___lldiv@dividend+2)^0,w,c
 17529  004EE8  5020               	movf	(___lldiv@divisor+3)^0,w,c
 17530  004EEA  581C               	subwfb	(___lldiv@dividend+3)^0,w,c
 17531  004EEC  A0D8               	btfss	status,0,c
 17532  004EEE  D009               	goto	l12735
 17533  004EF0  501D               	movf	___lldiv@divisor^0,w,c
 17534  004EF2  5E19               	subwf	___lldiv@dividend^0,f,c
 17535  004EF4  501E               	movf	(___lldiv@divisor+1)^0,w,c
 17536  004EF6  5A1A               	subwfb	(___lldiv@dividend+1)^0,f,c
 17537  004EF8  501F               	movf	(___lldiv@divisor+2)^0,w,c
 17538  004EFA  5A1B               	subwfb	(___lldiv@dividend+2)^0,f,c
 17539  004EFC  5020               	movf	(___lldiv@divisor+3)^0,w,c
 17540  004EFE  5A1C               	subwfb	(___lldiv@dividend+3)^0,f,c
 17541  004F00  8021               	bsf	___lldiv@quotient^0,0,c
 17542  004F02                     l12735:
 17543  004F02  90D8               	bcf	status,0,c
 17544  004F04  3220               	rrcf	(___lldiv@divisor+3)^0,f,c
 17545  004F06  321F               	rrcf	(___lldiv@divisor+2)^0,f,c
 17546  004F08  321E               	rrcf	(___lldiv@divisor+1)^0,f,c
 17547  004F0A  321D               	rrcf	___lldiv@divisor^0,f,c
 17548  004F0C  2E25               	decfsz	___lldiv@counter^0,f,c
 17549  004F0E  D7E1               	goto	u13380
 17550  004F10                     l2051:
 17551  004F10  C021  F019         	movff	___lldiv@quotient,?___lldiv
 17552  004F14  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
 17553  004F18  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
 17554  004F1C  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
 17555  004F20  0012               	return		;funcret
 17556  004F22                     __end_of___lldiv:
 17557                           	callstack 0
 17558                           
 17559 ;; *************** function _f_close *****************
 17560 ;; Defined at:
 17561 ;;		line 1116 in file "bibliotecas/tff.c"
 17562 ;; Parameters:    Size  Location     Type
 17563 ;;  fp              2   51[BANK0 ] PTR struct _FIL
 17564 ;;		 -> fil(28), 
 17565 ;; Auto vars:     Size  Location     Type
 17566 ;;  res             1   48[COMRAM] enum E155
 17567 ;; Return value:  Size  Location     Type
 17568 ;;                  1    wreg      enum E3239
 17569 ;; Registers used:
 17570 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17571 ;; Tracked objects:
 17572 ;;		On entry : 3F/0
 17573 ;;		On exit  : 3F/0
 17574 ;;		Unchanged: 0/0
 17575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17576 ;;      Params:         0       2       0       0       0       0       0       0       0
 17577 ;;      Locals:         1       0       0       0       0       0       0       0       0
 17578 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17579 ;;      Totals:         1       2       0       0       0       0       0       0       0
 17580 ;;Total ram usage:        3 bytes
 17581 ;; Hardware stack levels used:    1
 17582 ;; Hardware stack levels required when called:   11
 17583 ;; This function calls:
 17584 ;;		_f_sync
 17585 ;; This function is called by:
 17586 ;;		_escrita_sdcard
 17587 ;; This function uses a non-reentrant model
 17588 ;;
 17589                           
 17590                           	psect	text88
 17591  005A00                     __ptext88:
 17592                           	callstack 0
 17593  005A00                     _f_close:
 17594                           	callstack 16
 17595                           
 17596                           ; BSR set to: 0
 17597                           ;tff.c: 1120: FRESULT res;;tff.c: 1124: res = f_sync(fp);
 17598                           
 17599                           ;incstack = 0
 17600  005A00  C093  F08A         	movff	f_close@fp,f_sync@fp
 17601  005A04  C094  F08B         	movff	f_close@fp+1,f_sync@fp+1
 17602  005A08  EC07  F01E         	call	_f_sync	;wreg free
 17603  005A0C  6E31               	movwf	f_close@res^0,c
 17604                           
 17605                           ; BSR set to: 0
 17606                           ;tff.c: 1128: if (res == FR_OK) fp->fs = (0);
 17607  005A0E  5031               	movf	f_close@res^0,w,c
 17608  005A10  A4D8               	btfss	status,2,c
 17609  005A12  0012               	return	
 17610                           
 17611                           ; BSR set to: 0
 17612  005A14  EE20 F004          	lfsr	2,4
 17613  005A18  5193               	movf	f_close@fp& (0+255),w,b
 17614  005A1A  26D9               	addwf	fsr2l,f,c
 17615  005A1C  5194               	movf	(f_close@fp+1)& (0+255),w,b
 17616  005A1E  22DA               	addwfc	fsr2h,f,c
 17617  005A20  0E00               	movlw	0
 17618  005A22  6EDE               	movwf	postinc2,c
 17619  005A24  0E00               	movlw	0
 17620  005A26  6EDD               	movwf	postdec2,c
 17621                           
 17622                           ; BSR set to: 0
 17623  005A28  0012               	return		;funcret
 17624  005A2A                     __end_of_f_close:
 17625                           	callstack 0
 17626                           
 17627 ;; *************** function _f_sync *****************
 17628 ;; Defined at:
 17629 ;;		line 1077 in file "bibliotecas/tff.c"
 17630 ;; Parameters:    Size  Location     Type
 17631 ;;  fp              2   42[BANK0 ] PTR struct _FIL
 17632 ;;		 -> fil(28), 
 17633 ;; Auto vars:     Size  Location     Type
 17634 ;;  tim             4   44[BANK0 ] unsigned long 
 17635 ;;  dir             2   49[BANK0 ] PTR unsigned char 
 17636 ;;		 -> NULL(0), fs(544), 
 17637 ;;  res             1   48[BANK0 ] enum E155
 17638 ;; Return value:  Size  Location     Type
 17639 ;;                  1    wreg      enum E155
 17640 ;; Registers used:
 17641 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17642 ;; Tracked objects:
 17643 ;;		On entry : 3F/0
 17644 ;;		On exit  : 3F/0
 17645 ;;		Unchanged: 0/0
 17646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17647 ;;      Params:         0       2       0       0       0       0       0       0       0
 17648 ;;      Locals:         0       7       0       0       0       0       0       0       0
 17649 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17650 ;;      Totals:         0       9       0       0       0       0       0       0       0
 17651 ;;Total ram usage:        9 bytes
 17652 ;; Hardware stack levels used:    1
 17653 ;; Hardware stack levels required when called:   10
 17654 ;; This function calls:
 17655 ;;		_get_fattime
 17656 ;;		_move_window
 17657 ;;		_sync
 17658 ;;		_validate
 17659 ;; This function is called by:
 17660 ;;		_f_close
 17661 ;; This function uses a non-reentrant model
 17662 ;;
 17663                           
 17664                           	psect	text89
 17665  003C0E                     __ptext89:
 17666                           	callstack 0
 17667  003C0E                     _f_sync:
 17668                           	callstack 16
 17669                           
 17670                           ; BSR set to: 0
 17671                           ;tff.c: 1081: FRESULT res;;tff.c: 1082: DWORD tim;;tff.c: 1083: BYTE *dir;;tff.c: 1086: 
      +                          res = validate(fp->fs, fp->id);
 17672                           
 17673                           ; BSR set to: 0
 17674                           ;incstack = 0
 17675  003C0E  EE20 F004          	lfsr	2,4
 17676  003C12  518A               	movf	f_sync@fp& (0+255),w,b
 17677  003C14  26D9               	addwf	fsr2l,f,c
 17678  003C16  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 17679  003C18  22DA               	addwfc	fsr2h,f,c
 17680  003C1A  CFDE F01F          	movff	postinc2,validate@fs
 17681  003C1E  CFDD F020          	movff	postdec2,validate@fs+1
 17682  003C22  C08A  FFD9         	movff	f_sync@fp,fsr2l
 17683  003C26  C08B  FFDA         	movff	f_sync@fp+1,fsr2h
 17684  003C2A  CFDE F021          	movff	postinc2,validate@id
 17685  003C2E  CFDD F022          	movff	postdec2,validate@id+1
 17686  003C32  ECDD  F02A         	call	_validate	;wreg free
 17687  003C36  0100               	movlb	0	; () banked
 17688  003C38  6F90               	movwf	f_sync@res& (0+255),b
 17689                           
 17690                           ; BSR set to: 0
 17691                           ;tff.c: 1087: if (res == FR_OK) {
 17692  003C3A  5190               	movf	f_sync@res& (0+255),w,b
 17693  003C3C  A4D8               	btfss	status,2,c
 17694  003C3E  D077               	goto	l13107
 17695                           
 17696                           ; BSR set to: 0
 17697                           ;tff.c: 1088: if (fp->flag & 0x20) {
 17698  003C40  EE20 F002          	lfsr	2,2
 17699  003C44  518A               	movf	f_sync@fp& (0+255),w,b
 17700  003C46  26D9               	addwf	fsr2l,f,c
 17701  003C48  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 17702  003C4A  22DA               	addwfc	fsr2h,f,c
 17703  003C4C  AADF               	btfss	indf2,5,c
 17704  003C4E  D06F               	goto	l13107
 17705                           
 17706                           ; BSR set to: 0
 17707                           ;tff.c: 1090: if (!move_window(fp->dir_sect))
 17708  003C50  EE20 F016          	lfsr	2,22
 17709  003C54  518A               	movf	f_sync@fp& (0+255),w,b
 17710  003C56  26D9               	addwf	fsr2l,f,c
 17711  003C58  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 17712  003C5A  22DA               	addwfc	fsr2h,f,c
 17713  003C5C  CFDE F073          	movff	postinc2,move_window@sector
 17714  003C60  CFDE F074          	movff	postinc2,move_window@sector+1
 17715  003C64  CFDE F075          	movff	postinc2,move_window@sector+2
 17716  003C68  CFDE F076          	movff	postinc2,move_window@sector+3
 17717  003C6C  EC58  F018         	call	_move_window	;wreg free
 17718  003C70  0900               	iorlw	0
 17719  003C72  A4D8               	btfss	status,2,c
 17720  003C74  D002               	goto	l13093
 17721                           
 17722                           ; BSR set to: 0
 17723                           ;tff.c: 1091: return FR_RW_ERROR;
 17724  003C76  0E08               	movlw	8
 17725  003C78  0012               	return	
 17726  003C7A                     l13093:
 17727                           
 17728                           ; BSR set to: 0
 17729                           ;tff.c: 1092: dir = fp->dir_ptr;
 17730  003C7A  EE20 F01A          	lfsr	2,26
 17731  003C7E  518A               	movf	f_sync@fp& (0+255),w,b
 17732  003C80  26D9               	addwf	fsr2l,f,c
 17733  003C82  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 17734  003C84  22DA               	addwfc	fsr2h,f,c
 17735  003C86  CFDE F091          	movff	postinc2,f_sync@dir
 17736  003C8A  CFDD F092          	movff	postdec2,f_sync@dir+1
 17737                           
 17738                           ;tff.c: 1093: dir[11] |= 0x20;
 17739  003C8E  EE20 F00B          	lfsr	2,11
 17740  003C92  5191               	movf	f_sync@dir& (0+255),w,b
 17741  003C94  26D9               	addwf	fsr2l,f,c
 17742  003C96  5192               	movf	(f_sync@dir+1)& (0+255),w,b
 17743  003C98  22DA               	addwfc	fsr2h,f,c
 17744  003C9A  0E00               	movlw	0
 17745  003C9C  8ADB               	bsf	plusw2,5,c
 17746                           
 17747                           ; BSR set to: 0
 17748                           ;tff.c: 1094: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(fp->fsize);
 17749  003C9E  EE20 F00A          	lfsr	2,10
 17750  003CA2  518A               	movf	f_sync@fp& (0+255),w,b
 17751  003CA4  26D9               	addwf	fsr2l,f,c
 17752  003CA6  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 17753  003CA8  22DA               	addwfc	fsr2h,f,c
 17754  003CAA  EE10 F01C          	lfsr	1,28
 17755  003CAE  5191               	movf	f_sync@dir& (0+255),w,b
 17756  003CB0  26E1               	addwf	fsr1l,f,c
 17757  003CB2  5192               	movf	(f_sync@dir+1)& (0+255),w,b
 17758  003CB4  22E2               	addwfc	fsr1h,f,c
 17759  003CB6  CFDE FFE6          	movff	postinc2,postinc1
 17760  003CBA  CFDE FFE6          	movff	postinc2,postinc1
 17761  003CBE  CFDE FFE6          	movff	postinc2,postinc1
 17762  003CC2  CFDE FFE6          	movff	postinc2,postinc1
 17763                           
 17764                           ; BSR set to: 0
 17765                           ;tff.c: 1095: *(WORD*)(BYTE*)(&dir[26])=(WORD)(fp->org_clust);
 17766  003CC6  EE20 F00E          	lfsr	2,14
 17767  003CCA  518A               	movf	f_sync@fp& (0+255),w,b
 17768  003CCC  26D9               	addwf	fsr2l,f,c
 17769  003CCE  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 17770  003CD0  22DA               	addwfc	fsr2h,f,c
 17771  003CD2  EE10 F01A          	lfsr	1,26
 17772  003CD6  5191               	movf	f_sync@dir& (0+255),w,b
 17773  003CD8  26E1               	addwf	fsr1l,f,c
 17774  003CDA  5192               	movf	(f_sync@dir+1)& (0+255),w,b
 17775  003CDC  22E2               	addwfc	fsr1h,f,c
 17776  003CDE  CFDE FFE6          	movff	postinc2,postinc1
 17777  003CE2  CFDD FFE5          	movff	postdec2,postdec1
 17778                           
 17779                           ; BSR set to: 0
 17780                           ;tff.c: 1099: tim = get_fattime();
 17781  003CE6  EC21  F01C         	call	_get_fattime	;wreg free
 17782  003CEA  C01D  F08C         	movff	?_get_fattime,f_sync@tim
 17783  003CEE  C01E  F08D         	movff	?_get_fattime+1,f_sync@tim+1
 17784  003CF2  C01F  F08E         	movff	?_get_fattime+2,f_sync@tim+2
 17785  003CF6  C020  F08F         	movff	?_get_fattime+3,f_sync@tim+3
 17786                           
 17787                           ; BSR set to: 0
 17788                           ;tff.c: 1100: *(DWORD*)(BYTE*)(&dir[22])=(DWORD)(tim);
 17789  003CFA  EE20 F016          	lfsr	2,22
 17790  003CFE  5191               	movf	f_sync@dir& (0+255),w,b
 17791  003D00  26D9               	addwf	fsr2l,f,c
 17792  003D02  5192               	movf	(f_sync@dir+1)& (0+255),w,b
 17793  003D04  22DA               	addwfc	fsr2h,f,c
 17794  003D06  C08C  FFDE         	movff	f_sync@tim,postinc2
 17795  003D0A  C08D  FFDE         	movff	f_sync@tim+1,postinc2
 17796  003D0E  C08E  FFDE         	movff	f_sync@tim+2,postinc2
 17797  003D12  C08F  FFDE         	movff	f_sync@tim+3,postinc2
 17798                           
 17799                           ; BSR set to: 0
 17800                           ;tff.c: 1101: fp->flag &= (BYTE)~0x20;
 17801  003D16  EE20 F002          	lfsr	2,2
 17802  003D1A  518A               	movf	f_sync@fp& (0+255),w,b
 17803  003D1C  26D9               	addwf	fsr2l,f,c
 17804  003D1E  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 17805  003D20  22DA               	addwfc	fsr2h,f,c
 17806  003D22  0EDF               	movlw	223
 17807  003D24  16DF               	andwf	indf2,f,c
 17808                           
 17809                           ; BSR set to: 0
 17810                           ;tff.c: 1102: res = sync();
 17811  003D26  ECF7  F029         	call	_sync	;wreg free
 17812  003D2A  0100               	movlb	0	; () banked
 17813  003D2C  6F90               	movwf	f_sync@res& (0+255),b
 17814  003D2E                     l13107:
 17815                           
 17816                           ; BSR set to: 0
 17817                           ;tff.c: 1103: };tff.c: 1104: };tff.c: 1105: return res;
 17818  003D2E  5190               	movf	f_sync@res& (0+255),w,b
 17819                           
 17820                           ; BSR set to: 0
 17821  003D30  0012               	return		;funcret
 17822  003D32                     __end_of_f_sync:
 17823                           	callstack 0
 17824                           
 17825 ;; *************** function _validate *****************
 17826 ;; Defined at:
 17827 ;;		line 767 in file "bibliotecas/tff.c"
 17828 ;; Parameters:    Size  Location     Type
 17829 ;;  fs              2   30[COMRAM] PTR const struct _FATFS
 17830 ;;		 -> NULL(0), fs(544), 
 17831 ;;  id              2   32[COMRAM] unsigned short 
 17832 ;; Auto vars:     Size  Location     Type
 17833 ;;		None
 17834 ;; Return value:  Size  Location     Type
 17835 ;;                  1    wreg      enum E155
 17836 ;; Registers used:
 17837 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17838 ;; Tracked objects:
 17839 ;;		On entry : 3F/0
 17840 ;;		On exit  : 0/0
 17841 ;;		Unchanged: 0/0
 17842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17843 ;;      Params:         4       0       0       0       0       0       0       0       0
 17844 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17845 ;;      Temps:          2       0       0       0       0       0       0       0       0
 17846 ;;      Totals:         6       0       0       0       0       0       0       0       0
 17847 ;;Total ram usage:        6 bytes
 17848 ;; Hardware stack levels used:    1
 17849 ;; Hardware stack levels required when called:    5
 17850 ;; This function calls:
 17851 ;;		_disk_status
 17852 ;; This function is called by:
 17853 ;;		_f_write
 17854 ;;		_f_sync
 17855 ;;		_f_lseek
 17856 ;;		_f_read
 17857 ;; This function uses a non-reentrant model
 17858 ;;
 17859                           
 17860                           	psect	text90
 17861  0055BA                     __ptext90:
 17862                           	callstack 0
 17863  0055BA                     _validate:
 17864                           	callstack 18
 17865                           
 17866                           ; BSR set to: 0
 17867                           ;tff.c: 772: if (!fs || !fs->fs_type || fs->id != id)
 17868                           
 17869                           ; BSR set to: 0
 17870                           ;incstack = 0
 17871  0055BA  501F               	movf	validate@fs^0,w,c
 17872  0055BC  1020               	iorwf	(validate@fs+1)^0,w,c
 17873  0055BE  B4D8               	btfsc	status,2,c
 17874  0055C0  D014               	goto	u12470
 17875                           
 17876                           ; BSR set to: 0
 17877  0055C2  EE20 F01C          	lfsr	2,28
 17878  0055C6  501F               	movf	validate@fs^0,w,c
 17879  0055C8  26D9               	addwf	fsr2l,f,c
 17880  0055CA  5020               	movf	(validate@fs+1)^0,w,c
 17881  0055CC  22DA               	addwfc	fsr2h,f,c
 17882  0055CE  50DF               	movf	indf2,w,c
 17883  0055D0  B4D8               	btfsc	status,2,c
 17884  0055D2  D00B               	goto	u12470
 17885                           
 17886                           ; BSR set to: 0
 17887  0055D4  C01F  FFD9         	movff	validate@fs,fsr2l
 17888  0055D8  C020  FFDA         	movff	validate@fs+1,fsr2h
 17889  0055DC  5021               	movf	validate@id^0,w,c
 17890  0055DE  18DE               	xorwf	postinc2,w,c
 17891  0055E0  E104               	bnz	u12470
 17892  0055E2  5022               	movf	(validate@id+1)^0,w,c
 17893  0055E4  18DE               	xorwf	postinc2,w,c
 17894  0055E6  B4D8               	btfsc	status,2,c
 17895  0055E8  D002               	goto	l11887
 17896  0055EA                     u12470:
 17897                           
 17898                           ; BSR set to: 0
 17899                           ;tff.c: 773: return FR_INVALID_OBJECT;
 17900  0055EA  0E0C               	movlw	12
 17901  0055EC  0012               	return	
 17902  0055EE                     l11887:
 17903                           
 17904                           ; BSR set to: 0
 17905                           ;tff.c: 774: if (disk_status(0) & 0x01)
 17906  0055EE  0E00               	movlw	0
 17907  0055F0  EC90  F02C         	call	_disk_status
 17908  0055F4  6E23               	movwf	??_validate^0,c
 17909  0055F6  A023               	btfss	??_validate^0,0,c
 17910  0055F8  D002               	goto	l11893
 17911                           
 17912                           ;tff.c: 775: return FR_NOT_READY;
 17913  0055FA  0E01               	movlw	1
 17914  0055FC  0012               	return	
 17915  0055FE                     l11893:
 17916                           
 17917                           ;tff.c: 777: return FR_OK;
 17918  0055FE  0E00               	movlw	0
 17919  005600  0012               	return		;funcret
 17920  005602                     __end_of_validate:
 17921                           	callstack 0
 17922                           
 17923 ;; *************** function _disk_status *****************
 17924 ;; Defined at:
 17925 ;;		line 27 in file "bibliotecas/diskio.c"
 17926 ;; Parameters:    Size  Location     Type
 17927 ;;  pdrv            1    wreg     unsigned char 
 17928 ;; Auto vars:     Size  Location     Type
 17929 ;;  pdrv            1   28[COMRAM] unsigned char 
 17930 ;;  result          2    0        int 
 17931 ;;  stat            1   29[COMRAM] unsigned char 
 17932 ;; Return value:  Size  Location     Type
 17933 ;;                  1    wreg      unsigned char 
 17934 ;; Registers used:
 17935 ;;		wreg, status,2, status,0, cstack
 17936 ;; Tracked objects:
 17937 ;;		On entry : 3F/0
 17938 ;;		On exit  : 0/0
 17939 ;;		Unchanged: 0/0
 17940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17941 ;;      Params:         0       0       0       0       0       0       0       0       0
 17942 ;;      Locals:         4       0       0       0       0       0       0       0       0
 17943 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17944 ;;      Totals:         4       0       0       0       0       0       0       0       0
 17945 ;;Total ram usage:        4 bytes
 17946 ;; Hardware stack levels used:    1
 17947 ;; Hardware stack levels required when called:    4
 17948 ;; This function calls:
 17949 ;;		_sdc_disk_status
 17950 ;; This function is called by:
 17951 ;;		_auto_mount
 17952 ;;		_validate
 17953 ;; This function uses a non-reentrant model
 17954 ;;
 17955                           
 17956                           	psect	text91
 17957  005920                     __ptext91:
 17958                           	callstack 0
 17959  005920                     _disk_status:
 17960                           	callstack 18
 17961                           
 17962                           ;incstack = 0
 17963                           ;disk_status@pdrv stored from wreg
 17964  005920  6E1D               	movwf	disk_status@pdrv^0,c
 17965                           
 17966                           ;diskio.c: 31: DSTATUS stat;;diskio.c: 32: int result;;diskio.c: 34: switch (pdrv) {
 17967  005922  D00A               	goto	l11595
 17968  005924                     l11577:
 17969                           
 17970                           ;diskio.c: 36: stat = sdc_disk_status(pdrv);
 17971  005924  501D               	movf	disk_status@pdrv^0,w,c
 17972  005926  EC13  F02F         	call	_sdc_disk_status
 17973  00592A  6E1E               	movwf	disk_status@stat^0,c
 17974  00592C                     l11579:
 17975                           
 17976                           ;diskio.c: 39: return stat;
 17977  00592C  501E               	movf	disk_status@stat^0,w,c
 17978  00592E  0012               	return	
 17979  005930                     l11583:
 17980  005930  501D               	movf	disk_status@pdrv^0,w,c
 17981  005932  EC13  F02F         	call	_sdc_disk_status
 17982  005936  D7FA               	goto	l11579
 17983  005938                     l11595:
 17984  005938  501D               	movf	disk_status@pdrv^0,w,c
 17985                           
 17986                           ; Switch size 1, requested type "simple"
 17987                           ; Number of cases is 3, Range of values is 0 to 2
 17988                           ; switch strategies available:
 17989                           ; Name         Instructions Cycles
 17990                           ; simple_byte           10     6 (average)
 17991                           ;	Chosen strategy is simple_byte
 17992  00593A  0A00               	xorlw	0	; case 0
 17993  00593C  B4D8               	btfsc	status,2,c
 17994  00593E  D7F2               	goto	l11577
 17995  005940  0A01               	xorlw	1	; case 1
 17996  005942  B4D8               	btfsc	status,2,c
 17997  005944  D7F5               	goto	l11583
 17998  005946  0A03               	xorlw	3	; case 2
 17999  005948  B4D8               	btfsc	status,2,c
 18000  00594A  D7F0               	goto	l11579
 18001                           
 18002                           ;diskio.c: 50: return 0x01;
 18003  00594C  0E01               	movlw	1
 18004  00594E  0012               	return		;funcret
 18005  005950                     __end_of_disk_status:
 18006                           	callstack 0
 18007                           
 18008 ;; *************** function _sdc_disk_status *****************
 18009 ;; Defined at:
 18010 ;;		line 588 in file "bibliotecas/diskio.c"
 18011 ;; Parameters:    Size  Location     Type
 18012 ;;  pdrv            1    wreg     unsigned char 
 18013 ;; Auto vars:     Size  Location     Type
 18014 ;;  pdrv            1   25[COMRAM] unsigned char 
 18015 ;;  stat            1    0        unsigned char 
 18016 ;;  cont            1    0        unsigned char 
 18017 ;;  buff            1    0        unsigned char 
 18018 ;; Return value:  Size  Location     Type
 18019 ;;                  1    wreg      unsigned char 
 18020 ;; Registers used:
 18021 ;;		wreg, status,2
 18022 ;; Tracked objects:
 18023 ;;		On entry : 0/0
 18024 ;;		On exit  : 0/0
 18025 ;;		Unchanged: 0/0
 18026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18027 ;;      Params:         0       0       0       0       0       0       0       0       0
 18028 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18029 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18030 ;;      Totals:         2       0       0       0       0       0       0       0       0
 18031 ;;Total ram usage:        2 bytes
 18032 ;; Hardware stack levels used:    1
 18033 ;; Hardware stack levels required when called:    3
 18034 ;; This function calls:
 18035 ;;		Nothing
 18036 ;; This function is called by:
 18037 ;;		_disk_status
 18038 ;; This function uses a non-reentrant model
 18039 ;;
 18040                           
 18041                           	psect	text92
 18042  005E26                     __ptext92:
 18043                           	callstack 0
 18044  005E26                     _sdc_disk_status:
 18045                           	callstack 18
 18046                           
 18047                           ;incstack = 0
 18048                           ;sdc_disk_status@pdrv stored from wreg
 18049  005E26  6E1A               	movwf	sdc_disk_status@pdrv^0,c
 18050                           
 18051                           ;diskio.c: 591: unsigned char buff, cont;;diskio.c: 593: if (pdrv != 0) return 0x01;
 18052  005E28  501A               	movf	sdc_disk_status@pdrv^0,w,c
 18053  005E2A  B4D8               	btfsc	status,2,c
 18054  005E2C  D002               	goto	l11453
 18055  005E2E  0E01               	movlw	1
 18056  005E30  0012               	return	
 18057  005E32                     l11453:
 18058                           
 18059                           ;diskio.c: 595: return FR_OK;
 18060  005E32  0E00               	movlw	0
 18061  005E34  0012               	return		;funcret
 18062  005E36                     __end_of_sdc_disk_status:
 18063                           	callstack 0
 18064                           
 18065 ;; *************** function _sync *****************
 18066 ;; Defined at:
 18067 ;;		line 119 in file "bibliotecas/tff.c"
 18068 ;; Parameters:    Size  Location     Type
 18069 ;;		None
 18070 ;; Auto vars:     Size  Location     Type
 18071 ;;  fs              2   40[BANK0 ] PTR struct _FATFS
 18072 ;;		 -> NULL(0), fs(544), 
 18073 ;; Return value:  Size  Location     Type
 18074 ;;                  1    wreg      enum E155
 18075 ;; Registers used:
 18076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18077 ;; Tracked objects:
 18078 ;;		On entry : 3F/0
 18079 ;;		On exit  : 0/0
 18080 ;;		Unchanged: 0/0
 18081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18082 ;;      Params:         0       0       0       0       0       0       0       0       0
 18083 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18084 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18085 ;;      Totals:         0       2       0       0       0       0       0       0       0
 18086 ;;Total ram usage:        2 bytes
 18087 ;; Hardware stack levels used:    1
 18088 ;; Hardware stack levels required when called:    9
 18089 ;; This function calls:
 18090 ;;		_disk_ioctl
 18091 ;;		_move_window
 18092 ;; This function is called by:
 18093 ;;		_f_sync
 18094 ;; This function uses a non-reentrant model
 18095 ;;
 18096                           
 18097                           	psect	text93
 18098  0053EE                     __ptext93:
 18099                           	callstack 0
 18100  0053EE                     _sync:
 18101                           	callstack 16
 18102                           
 18103                           ; BSR set to: 0
 18104                           ;tff.c: 121: FATFS *fs = FatFs;
 18105                           
 18106                           ;incstack = 0
 18107  0053EE  C037  F088         	movff	_FatFs,sync@fs
 18108  0053F2  C038  F089         	movff	_FatFs+1,sync@fs+1
 18109                           
 18110                           ; BSR set to: 0
 18111                           ;tff.c: 124: fs->winflag = 1;
 18112  0053F6  EE20 F01F          	lfsr	2,31
 18113  0053FA  5188               	movf	sync@fs& (0+255),w,b
 18114  0053FC  26D9               	addwf	fsr2l,f,c
 18115  0053FE  5189               	movf	(sync@fs+1)& (0+255),w,b
 18116  005400  22DA               	addwfc	fsr2h,f,c
 18117  005402  0E01               	movlw	1
 18118  005404  6EDF               	movwf	indf2,c
 18119                           
 18120                           ; BSR set to: 0
 18121                           ;tff.c: 125: if (!move_window(0)) return FR_RW_ERROR;
 18122  005406  0E00               	movlw	0
 18123  005408  6F73               	movwf	move_window@sector& (0+255),b
 18124  00540A  0E00               	movlw	0
 18125  00540C  6F74               	movwf	(move_window@sector+1)& (0+255),b
 18126  00540E  0E00               	movlw	0
 18127  005410  6F75               	movwf	(move_window@sector+2)& (0+255),b
 18128  005412  0E00               	movlw	0
 18129  005414  6F76               	movwf	(move_window@sector+3)& (0+255),b
 18130  005416  EC58  F018         	call	_move_window	;wreg free
 18131  00541A  0900               	iorlw	0
 18132  00541C  A4D8               	btfss	status,2,c
 18133  00541E  D002               	goto	l12359
 18134  005420                     u13090:
 18135  005420  0E08               	movlw	8
 18136  005422  0012               	return	
 18137  005424                     l12359:
 18138                           
 18139                           ; BSR set to: 0
 18140                           ;tff.c: 141: if (disk_ioctl(0, 0, (0)) != RES_OK)
 18141  005424  0E00               	movlw	0
 18142  005426  6E19               	movwf	disk_ioctl@cmd^0,c
 18143  005428  0E00               	movlw	0
 18144  00542A  6E1A               	movwf	disk_ioctl@buff^0,c
 18145  00542C  0E00               	movlw	0
 18146  00542E  6E1B               	movwf	(disk_ioctl@buff+1)^0,c
 18147  005430  0E00               	movlw	0
 18148  005432  EC36  F02E         	call	_disk_ioctl
 18149  005436  0900               	iorlw	0
 18150  005438  A4D8               	btfss	status,2,c
 18151  00543A  D7F2               	goto	u13090
 18152                           
 18153                           ;tff.c: 143: return FR_OK;
 18154  00543C  0E00               	movlw	0
 18155  00543E  0012               	return		;funcret
 18156  005440                     __end_of_sync:
 18157                           	callstack 0
 18158                           
 18159 ;; *************** function _move_window *****************
 18160 ;; Defined at:
 18161 ;;		line 77 in file "bibliotecas/tff.c"
 18162 ;; Parameters:    Size  Location     Type
 18163 ;;  sector          4   19[BANK0 ] unsigned long 
 18164 ;; Auto vars:     Size  Location     Type
 18165 ;;  n               1   33[BANK0 ] unsigned char 
 18166 ;;  wsect           4   34[BANK0 ] unsigned long 
 18167 ;;  fs              2   38[BANK0 ] PTR struct _FATFS
 18168 ;;		 -> NULL(0), fs(544), 
 18169 ;; Return value:  Size  Location     Type
 18170 ;;                  1    wreg      enum E105
 18171 ;; Registers used:
 18172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18173 ;; Tracked objects:
 18174 ;;		On entry : 3F/0
 18175 ;;		On exit  : 3F/0
 18176 ;;		Unchanged: 0/0
 18177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18178 ;;      Params:         0       4       0       0       0       0       0       0       0
 18179 ;;      Locals:         0       7       0       0       0       0       0       0       0
 18180 ;;      Temps:          0      10       0       0       0       0       0       0       0
 18181 ;;      Totals:         0      21       0       0       0       0       0       0       0
 18182 ;;Total ram usage:       21 bytes
 18183 ;; Hardware stack levels used:    1
 18184 ;; Hardware stack levels required when called:    8
 18185 ;; This function calls:
 18186 ;;		_disk_read
 18187 ;;		_disk_write
 18188 ;; This function is called by:
 18189 ;;		_sync
 18190 ;;		_get_cluster
 18191 ;;		_put_cluster
 18192 ;;		_trace_path
 18193 ;;		_reserve_direntry
 18194 ;;		_f_open
 18195 ;;		_f_write
 18196 ;;		_f_sync
 18197 ;;		_f_read
 18198 ;; This function uses a non-reentrant model
 18199 ;;
 18200                           
 18201                           	psect	text94
 18202  0030B0                     __ptext94:
 18203                           	callstack 0
 18204  0030B0                     _move_window:
 18205                           	callstack 15
 18206                           
 18207                           ; BSR set to: 0
 18208                           ;tff.c: 81: DWORD wsect;;tff.c: 82: FATFS *fs = FatFs;
 18209                           
 18210                           ;incstack = 0
 18211  0030B0  C037  F086         	movff	_FatFs,move_window@fs
 18212  0030B4  C038  F087         	movff	_FatFs+1,move_window@fs+1
 18213                           
 18214                           ; BSR set to: 0
 18215                           ;tff.c: 85: wsect = fs->winsect;
 18216  0030B8  EE20 F004          	lfsr	2,4
 18217  0030BC  5186               	movf	move_window@fs& (0+255),w,b
 18218  0030BE  26D9               	addwf	fsr2l,f,c
 18219  0030C0  5187               	movf	(move_window@fs+1)& (0+255),w,b
 18220  0030C2  22DA               	addwfc	fsr2h,f,c
 18221  0030C4  CFDE F082          	movff	postinc2,move_window@wsect
 18222  0030C8  CFDE F083          	movff	postinc2,move_window@wsect+1
 18223  0030CC  CFDE F084          	movff	postinc2,move_window@wsect+2
 18224  0030D0  CFDE F085          	movff	postinc2,move_window@wsect+3
 18225                           
 18226                           ; BSR set to: 0
 18227                           ;tff.c: 86: if (wsect != sector) {
 18228  0030D4  5173               	movf	move_window@sector& (0+255),w,b
 18229  0030D6  1982               	xorwf	move_window@wsect& (0+255),w,b
 18230  0030D8  E10A               	bnz	u11950
 18231  0030DA  5174               	movf	(move_window@sector+1)& (0+255),w,b
 18232  0030DC  1983               	xorwf	(move_window@wsect+1)& (0+255),w,b
 18233  0030DE  E107               	bnz	u11950
 18234  0030E0  5175               	movf	(move_window@sector+2)& (0+255),w,b
 18235  0030E2  1984               	xorwf	(move_window@wsect+2)& (0+255),w,b
 18236  0030E4  E104               	bnz	u11950
 18237  0030E6  5176               	movf	(move_window@sector+3)& (0+255),w,b
 18238  0030E8  1985               	xorwf	(move_window@wsect+3)& (0+255),w,b
 18239  0030EA  B4D8               	btfsc	status,2,c
 18240  0030EC  D0B4               	goto	l11565
 18241  0030EE                     u11950:
 18242                           
 18243                           ; BSR set to: 0
 18244                           ;tff.c: 88: BYTE n;;tff.c: 89: if (fs->winflag) {
 18245  0030EE  EE20 F01F          	lfsr	2,31
 18246  0030F2  5186               	movf	move_window@fs& (0+255),w,b
 18247  0030F4  26D9               	addwf	fsr2l,f,c
 18248  0030F6  5187               	movf	(move_window@fs+1)& (0+255),w,b
 18249  0030F8  22DA               	addwfc	fsr2h,f,c
 18250  0030FA  50DF               	movf	indf2,w,c
 18251  0030FC  B4D8               	btfsc	status,2,c
 18252  0030FE  D081               	goto	l11555
 18253                           
 18254                           ; BSR set to: 0
 18255                           ;tff.c: 90: if (disk_write(0, fs->win, wsect, 1) != RES_OK)
 18256  003100  0E20               	movlw	32
 18257  003102  2586               	addwf	move_window@fs& (0+255),w,b
 18258  003104  6F68               	movwf	disk_write@buff& (0+255),b
 18259  003106  0E00               	movlw	0
 18260  003108  2187               	addwfc	(move_window@fs+1)& (0+255),w,b
 18261  00310A  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 18262  00310C  C082  F06A         	movff	move_window@wsect,disk_write@sector
 18263  003110  C083  F06B         	movff	move_window@wsect+1,disk_write@sector+1
 18264  003114  C084  F06C         	movff	move_window@wsect+2,disk_write@sector+2
 18265  003118  C085  F06D         	movff	move_window@wsect+3,disk_write@sector+3
 18266  00311C  0E01               	movlw	1
 18267  00311E  6F6E               	movwf	disk_write@count& (0+255),b
 18268  003120  0E00               	movlw	0
 18269  003122  EC47  F02A         	call	_disk_write
 18270  003126  0900               	iorlw	0
 18271  003128  B4D8               	btfsc	status,2,c
 18272  00312A  D002               	goto	l11539
 18273  00312C                     u11970:
 18274                           
 18275                           ; BSR set to: 0
 18276                           ;tff.c: 91: return FALSE;
 18277  00312C  0E00               	movlw	0
 18278  00312E  0012               	return	
 18279  003130                     l11539:
 18280                           
 18281                           ; BSR set to: 0
 18282                           ;tff.c: 92: fs->winflag = 0;
 18283  003130  EE20 F01F          	lfsr	2,31
 18284  003134  5186               	movf	move_window@fs& (0+255),w,b
 18285  003136  26D9               	addwf	fsr2l,f,c
 18286  003138  5187               	movf	(move_window@fs+1)& (0+255),w,b
 18287  00313A  22DA               	addwfc	fsr2h,f,c
 18288  00313C  0E00               	movlw	0
 18289  00313E  6EDF               	movwf	indf2,c
 18290                           
 18291                           ;tff.c: 93: if (wsect < (fs->fatbase + fs->sects_fat)) {
 18292  003140  EE20 F008          	lfsr	2,8
 18293  003144  5186               	movf	move_window@fs& (0+255),w,b
 18294  003146  26D9               	addwf	fsr2l,f,c
 18295  003148  5187               	movf	(move_window@fs+1)& (0+255),w,b
 18296  00314A  22DA               	addwfc	fsr2h,f,c
 18297  00314C  CFDE F077          	movff	postinc2,??_move_window
 18298  003150  CFDE F078          	movff	postinc2,??_move_window+1
 18299  003154  CFDE F079          	movff	postinc2,??_move_window+2
 18300  003158  CFDE F07A          	movff	postinc2,??_move_window+3
 18301  00315C  EE20 F014          	lfsr	2,20
 18302  003160  5186               	movf	move_window@fs& (0+255),w,b
 18303  003162  26D9               	addwf	fsr2l,f,c
 18304  003164  5187               	movf	(move_window@fs+1)& (0+255),w,b
 18305  003166  22DA               	addwfc	fsr2h,f,c
 18306  003168  CFDE F07B          	movff	postinc2,??_move_window+4
 18307  00316C  CFDD F07C          	movff	postdec2,??_move_window+5
 18308  003170  517B               	movf	(??_move_window+4)& (0+255),w,b
 18309  003172  2577               	addwf	??_move_window& (0+255),w,b
 18310  003174  6F7D               	movwf	(??_move_window+6)& (0+255),b
 18311  003176  517C               	movf	(??_move_window+5)& (0+255),w,b
 18312  003178  2178               	addwfc	(??_move_window+1)& (0+255),w,b
 18313  00317A  6F7E               	movwf	(??_move_window+7)& (0+255),b
 18314  00317C  0E00               	movlw	0
 18315  00317E  2179               	addwfc	(??_move_window+2)& (0+255),w,b
 18316  003180  6F7F               	movwf	(??_move_window+8)& (0+255),b
 18317  003182  0E00               	movlw	0
 18318  003184  217A               	addwfc	(??_move_window+3)& (0+255),w,b
 18319  003186  6F80               	movwf	(??_move_window+9)& (0+255),b
 18320  003188  517D               	movf	(??_move_window+6)& (0+255),w,b
 18321  00318A  5D82               	subwf	move_window@wsect& (0+255),w,b
 18322  00318C  517E               	movf	(??_move_window+7)& (0+255),w,b
 18323  00318E  5983               	subwfb	(move_window@wsect+1)& (0+255),w,b
 18324  003190  517F               	movf	(??_move_window+8)& (0+255),w,b
 18325  003192  5984               	subwfb	(move_window@wsect+2)& (0+255),w,b
 18326  003194  5180               	movf	(??_move_window+9)& (0+255),w,b
 18327  003196  5985               	subwfb	(move_window@wsect+3)& (0+255),w,b
 18328  003198  B0D8               	btfsc	status,0,c
 18329  00319A  D033               	goto	l11555
 18330                           
 18331                           ; BSR set to: 0
 18332                           ;tff.c: 94: for (n = fs->n_fats; n >= 2; n--) {
 18333  00319C  EE20 F01E          	lfsr	2,30
 18334  0031A0  5186               	movf	move_window@fs& (0+255),w,b
 18335  0031A2  26D9               	addwf	fsr2l,f,c
 18336  0031A4  5187               	movf	(move_window@fs+1)& (0+255),w,b
 18337  0031A6  22DA               	addwfc	fsr2h,f,c
 18338  0031A8  50DF               	movf	indf2,w,c
 18339  0031AA  6F81               	movwf	move_window@n& (0+255),b
 18340  0031AC                     l11543:
 18341                           
 18342                           ; BSR set to: 0
 18343  0031AC  0E02               	movlw	2
 18344  0031AE  6181               	cpfslt	move_window@n& (0+255),b
 18345  0031B0  D001               	goto	l11547
 18346  0031B2  D027               	goto	l11555
 18347  0031B4                     l11547:
 18348                           
 18349                           ; BSR set to: 0
 18350                           ;tff.c: 95: wsect += fs->sects_fat;
 18351  0031B4  EE20 F014          	lfsr	2,20
 18352  0031B8  5186               	movf	move_window@fs& (0+255),w,b
 18353  0031BA  26D9               	addwf	fsr2l,f,c
 18354  0031BC  5187               	movf	(move_window@fs+1)& (0+255),w,b
 18355  0031BE  22DA               	addwfc	fsr2h,f,c
 18356  0031C0  CFDE F077          	movff	postinc2,??_move_window
 18357  0031C4  CFDD F078          	movff	postdec2,??_move_window+1
 18358  0031C8  5177               	movf	??_move_window& (0+255),w,b
 18359  0031CA  2782               	addwf	move_window@wsect& (0+255),f,b
 18360  0031CC  5178               	movf	(??_move_window+1)& (0+255),w,b
 18361  0031CE  2383               	addwfc	(move_window@wsect+1)& (0+255),f,b
 18362  0031D0  0E00               	movlw	0
 18363  0031D2  2384               	addwfc	(move_window@wsect+2)& (0+255),f,b
 18364  0031D4  0E00               	movlw	0
 18365  0031D6  2385               	addwfc	(move_window@wsect+3)& (0+255),f,b
 18366                           
 18367                           ; BSR set to: 0
 18368                           ;tff.c: 96: disk_write(0, fs->win, wsect, 1);
 18369  0031D8  0E20               	movlw	32
 18370  0031DA  2586               	addwf	move_window@fs& (0+255),w,b
 18371  0031DC  6F68               	movwf	disk_write@buff& (0+255),b
 18372  0031DE  0E00               	movlw	0
 18373  0031E0  2187               	addwfc	(move_window@fs+1)& (0+255),w,b
 18374  0031E2  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 18375  0031E4  C082  F06A         	movff	move_window@wsect,disk_write@sector
 18376  0031E8  C083  F06B         	movff	move_window@wsect+1,disk_write@sector+1
 18377  0031EC  C084  F06C         	movff	move_window@wsect+2,disk_write@sector+2
 18378  0031F0  C085  F06D         	movff	move_window@wsect+3,disk_write@sector+3
 18379  0031F4  0E01               	movlw	1
 18380  0031F6  6F6E               	movwf	disk_write@count& (0+255),b
 18381  0031F8  0E00               	movlw	0
 18382  0031FA  EC47  F02A         	call	_disk_write
 18383                           
 18384                           ; BSR set to: 0
 18385  0031FE  0781               	decf	move_window@n& (0+255),f,b
 18386  003200  D7D5               	goto	l11543
 18387  003202                     l11555:
 18388                           
 18389                           ; BSR set to: 0
 18390                           ;tff.c: 97: };tff.c: 98: };tff.c: 99: };tff.c: 101: if (sector) {
 18391  003202  5173               	movf	move_window@sector& (0+255),w,b
 18392  003204  1174               	iorwf	(move_window@sector+1)& (0+255),w,b
 18393  003206  1175               	iorwf	(move_window@sector+2)& (0+255),w,b
 18394  003208  1176               	iorwf	(move_window@sector+3)& (0+255),w,b
 18395  00320A  B4D8               	btfsc	status,2,c
 18396  00320C  D024               	goto	l11565
 18397                           
 18398                           ; BSR set to: 0
 18399                           ;tff.c: 102: if (disk_read(0, fs->win, sector, 1) != RES_OK)
 18400  00320E  0E20               	movlw	32
 18401  003210  2586               	addwf	move_window@fs& (0+255),w,b
 18402  003212  6F68               	movwf	disk_read@buff& (0+255),b
 18403  003214  0E00               	movlw	0
 18404  003216  2187               	addwfc	(move_window@fs+1)& (0+255),w,b
 18405  003218  6F69               	movwf	(disk_read@buff+1)& (0+255),b
 18406  00321A  C073  F06A         	movff	move_window@sector,disk_read@sector
 18407  00321E  C074  F06B         	movff	move_window@sector+1,disk_read@sector+1
 18408  003222  C075  F06C         	movff	move_window@sector+2,disk_read@sector+2
 18409  003226  C076  F06D         	movff	move_window@sector+3,disk_read@sector+3
 18410  00322A  0E01               	movlw	1
 18411  00322C  6F6E               	movwf	disk_read@count& (0+255),b
 18412  00322E  0E00               	movlw	0
 18413  003230  ECCA  F027         	call	_disk_read
 18414  003234  0900               	iorlw	0
 18415  003236  A4D8               	btfss	status,2,c
 18416  003238  D779               	goto	u11970
 18417                           
 18418                           ; BSR set to: 0
 18419                           ;tff.c: 104: fs->winsect = sector;
 18420  00323A  EE20 F004          	lfsr	2,4
 18421  00323E  5186               	movf	move_window@fs& (0+255),w,b
 18422  003240  26D9               	addwf	fsr2l,f,c
 18423  003242  5187               	movf	(move_window@fs+1)& (0+255),w,b
 18424  003244  22DA               	addwfc	fsr2h,f,c
 18425  003246  C073  FFDE         	movff	move_window@sector,postinc2
 18426  00324A  C074  FFDE         	movff	move_window@sector+1,postinc2
 18427  00324E  C075  FFDE         	movff	move_window@sector+2,postinc2
 18428  003252  C076  FFDE         	movff	move_window@sector+3,postinc2
 18429  003256                     l11565:
 18430                           
 18431                           ; BSR set to: 0
 18432                           ;tff.c: 105: };tff.c: 106: };tff.c: 107: return TRUE;
 18433  003256  0E01               	movlw	1
 18434                           
 18435                           ; BSR set to: 0
 18436  003258  0012               	return		;funcret
 18437  00325A                     __end_of_move_window:
 18438                           	callstack 0
 18439                           
 18440 ;; *************** function _disk_write *****************
 18441 ;; Defined at:
 18442 ;;		line 150 in file "bibliotecas/diskio.c"
 18443 ;; Parameters:    Size  Location     Type
 18444 ;;  pdrv            1    wreg     unsigned char 
 18445 ;;  buff            2    8[BANK0 ] PTR const unsigned char 
 18446 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 18447 ;;  sector          4   10[BANK0 ] unsigned long 
 18448 ;;  count           1   14[BANK0 ] unsigned char 
 18449 ;; Auto vars:     Size  Location     Type
 18450 ;;  pdrv            1   15[BANK0 ] unsigned char 
 18451 ;;  result          2   16[BANK0 ] int 
 18452 ;;  res             1   18[BANK0 ] enum E25
 18453 ;; Return value:  Size  Location     Type
 18454 ;;                  1    wreg      enum E25
 18455 ;; Registers used:
 18456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18457 ;; Tracked objects:
 18458 ;;		On entry : 3F/0
 18459 ;;		On exit  : 3F/0
 18460 ;;		Unchanged: 0/0
 18461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18462 ;;      Params:         0       7       0       0       0       0       0       0       0
 18463 ;;      Locals:         0       4       0       0       0       0       0       0       0
 18464 ;;      Temps:          1       0       0       0       0       0       0       0       0
 18465 ;;      Totals:         1      11       0       0       0       0       0       0       0
 18466 ;;Total ram usage:       12 bytes
 18467 ;; Hardware stack levels used:    1
 18468 ;; Hardware stack levels required when called:    7
 18469 ;; This function calls:
 18470 ;;		_sdc_disk_write
 18471 ;; This function is called by:
 18472 ;;		_move_window
 18473 ;;		_reserve_direntry
 18474 ;;		_f_write
 18475 ;; This function uses a non-reentrant model
 18476 ;;
 18477                           
 18478                           	psect	text95
 18479  00548E                     __ptext95:
 18480                           	callstack 0
 18481  00548E                     _disk_write:
 18482                           	callstack 15
 18483                           
 18484                           ; BSR set to: 0
 18485                           ;incstack = 0
 18486                           ;disk_write@pdrv stored from wreg
 18487  00548E  6F6F               	movwf	disk_write@pdrv& (0+255),b
 18488                           
 18489                           ;diskio.c: 157: DRESULT res;;diskio.c: 158: int result;;diskio.c: 160: switch (pdrv) {
 18490  005490  D018               	goto	l11419
 18491  005492                     l11397:
 18492                           
 18493                           ; BSR set to: 0
 18494                           ;diskio.c: 163: result = sdc_disk_write(buff, sector, count);
 18495  005492  C068  F025         	movff	disk_write@buff,sdc_disk_write@p_buff
 18496  005496  C069  F026         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 18497  00549A  C06A  F027         	movff	disk_write@sector,sdc_disk_write@sector
 18498  00549E  C06B  F028         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 18499  0054A2  C06C  F029         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 18500  0054A6  C06D  F02A         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 18501  0054AA  C06E  F02B         	movff	disk_write@count,sdc_disk_write@count
 18502  0054AE  ECA3  F016         	call	_sdc_disk_write	;wreg free
 18503  0054B2  6E30               	movwf	??_disk_write^0,c
 18504  0054B4  5030               	movf	??_disk_write^0,w,c
 18505  0054B6  6F70               	movwf	disk_write@result& (0+255),b
 18506  0054B8  6B71               	clrf	(disk_write@result+1)& (0+255),b
 18507                           
 18508                           ; BSR set to: 0
 18509                           ;diskio.c: 165: res = result;
 18510  0054BA  C070  F072         	movff	disk_write@result,disk_write@res
 18511  0054BE                     l11401:
 18512                           
 18513                           ; BSR set to: 0
 18514                           ;diskio.c: 168: return res;
 18515  0054BE  5172               	movf	disk_write@res& (0+255),w,b
 18516  0054C0  0012               	return	
 18517  0054C2                     l11419:
 18518  0054C2  0100               	movlb	0	; () banked
 18519  0054C4  516F               	movf	disk_write@pdrv& (0+255),w,b
 18520                           
 18521                           ; Switch size 1, requested type "simple"
 18522                           ; Number of cases is 3, Range of values is 0 to 2
 18523                           ; switch strategies available:
 18524                           ; Name         Instructions Cycles
 18525                           ; simple_byte           10     6 (average)
 18526                           ;	Chosen strategy is simple_byte
 18527  0054C6  0A00               	xorlw	0	; case 0
 18528  0054C8  B4D8               	btfsc	status,2,c
 18529  0054CA  D7E3               	goto	l11397
 18530  0054CC  0A01               	xorlw	1	; case 1
 18531  0054CE  B4D8               	btfsc	status,2,c
 18532  0054D0  D7E0               	goto	l11397
 18533  0054D2  0A03               	xorlw	3	; case 2
 18534  0054D4  B4D8               	btfsc	status,2,c
 18535  0054D6  D7F3               	goto	l11401
 18536                           
 18537                           ; BSR set to: 0
 18538                           ;diskio.c: 189: return RES_PARERR;
 18539  0054D8  0E04               	movlw	4
 18540                           
 18541                           ; BSR set to: 0
 18542  0054DA  0012               	return		;funcret
 18543  0054DC                     __end_of_disk_write:
 18544                           	callstack 0
 18545                           
 18546 ;; *************** function _sdc_disk_write *****************
 18547 ;; Defined at:
 18548 ;;		line 509 in file "bibliotecas/diskio.c"
 18549 ;; Parameters:    Size  Location     Type
 18550 ;;  p_buff          2   36[COMRAM] PTR const unsigned char 
 18551 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 18552 ;;  sector          4   38[COMRAM] unsigned long 
 18553 ;;  count           1   42[COMRAM] unsigned char 
 18554 ;; Auto vars:     Size  Location     Type
 18555 ;;  j               2    5[BANK0 ] int 
 18556 ;;  count1          2    2[BANK0 ] int 
 18557 ;;  i               2    0        int 
 18558 ;;  buff            1    7[BANK0 ] unsigned char 
 18559 ;;  res             1    4[BANK0 ] enum E25
 18560 ;; Return value:  Size  Location     Type
 18561 ;;                  1    wreg      enum E25
 18562 ;; Registers used:
 18563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18564 ;; Tracked objects:
 18565 ;;		On entry : 0/0
 18566 ;;		On exit  : 3F/0
 18567 ;;		Unchanged: 0/0
 18568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18569 ;;      Params:         7       0       0       0       0       0       0       0       0
 18570 ;;      Locals:         0       8       0       0       0       0       0       0       0
 18571 ;;      Temps:          4       0       0       0       0       0       0       0       0
 18572 ;;      Totals:        11       8       0       0       0       0       0       0       0
 18573 ;;Total ram usage:       19 bytes
 18574 ;; Hardware stack levels used:    1
 18575 ;; Hardware stack levels required when called:    6
 18576 ;; This function calls:
 18577 ;;		_command
 18578 ;;		_dummy_clocks
 18579 ;;		_escreve_SPI
 18580 ;;		_leitura_SPI
 18581 ;;		_proceed
 18582 ;;		_response
 18583 ;; This function is called by:
 18584 ;;		_disk_write
 18585 ;; This function uses a non-reentrant model
 18586 ;;
 18587                           
 18588                           	psect	text96
 18589  002D46                     __ptext96:
 18590                           	callstack 0
 18591  002D46                     _sdc_disk_write:
 18592                           	callstack 15
 18593                           
 18594                           ; BSR set to: 0
 18595                           ;incstack = 0
 18596  002D46  0E00               	movlw	0
 18597  002D48  0100               	movlb	0	; () banked
 18598  002D4A  6F63               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 18599  002D4C  0E00               	movlw	0
 18600  002D4E  6F62               	movwf	sdc_disk_write@count1& (0+255),b
 18601                           
 18602                           ; BSR set to: 0
 18603                           ;diskio.c: 515: if(count>1)
 18604  002D50  0E01               	movlw	1
 18605  002D52  642B               	cpfsgt	sdc_disk_write@count^0,c
 18606  002D54  D069               	goto	l144
 18607                           
 18608                           ; BSR set to: 0
 18609                           ;diskio.c: 516: {;diskio.c: 517: LATCbits.LATC7 = 0;
 18610  002D56  9E8B               	bcf	139,7,c	;volatile
 18611                           
 18612                           ;diskio.c: 518: LATBbits.LATB5 = 0;
 18613  002D58  9A8A               	bcf	138,5,c	;volatile
 18614                           
 18615                           ; BSR set to: 0
 18616                           ;diskio.c: 519: dummy_clocks(10);
 18617  002D5A  0E0A               	movlw	10
 18618  002D5C  ECEC  F02B         	call	_dummy_clocks
 18619                           
 18620                           ;diskio.c: 520: command(0X57, count, 0XFF);
 18621  002D60  502B               	movf	sdc_disk_write@count^0,w,c
 18622  002D62  6E1E               	movwf	command@arg^0,c
 18623  002D64  6A1F               	clrf	(command@arg+1)^0,c
 18624  002D66  6A20               	clrf	(command@arg+2)^0,c
 18625  002D68  6A21               	clrf	(command@arg+3)^0,c
 18626  002D6A  0EFF               	movlw	255
 18627  002D6C  6E22               	movwf	command@CRC^0,c
 18628  002D6E  0E57               	movlw	87
 18629  002D70  ECF6  F028         	call	_command
 18630                           
 18631                           ;diskio.c: 521: proceed();
 18632  002D74  EC53  F02F         	call	_proceed	;wreg free
 18633  002D78                     l11285:
 18634                           
 18635                           ;diskio.c: 523: buff = response();
 18636  002D78  EC4D  F02F         	call	_response	;wreg free
 18637  002D7C  0100               	movlb	0	; () banked
 18638  002D7E  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 18639                           
 18640                           ; BSR set to: 0
 18641                           ;diskio.c: 524: }while(buff!=0X00);
 18642  002D80  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 18643  002D82  A4D8               	btfss	status,2,c
 18644  002D84  D7F9               	goto	l11285
 18645                           
 18646                           ; BSR set to: 0
 18647                           ;diskio.c: 526: dummy_clocks(10);
 18648  002D86  0E0A               	movlw	10
 18649  002D88  ECEC  F02B         	call	_dummy_clocks
 18650                           
 18651                           ;diskio.c: 527: command(0X59, sector*512, 0XFF);
 18652  002D8C  C027  F02C         	movff	sdc_disk_write@sector,??_sdc_disk_write
 18653  002D90  C028  F02D         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 18654  002D94  C029  F02E         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 18655  002D98  C02A  F02F         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 18656  002D9C  0E09               	movlw	9
 18657  002D9E                     u11705:
 18658  002D9E  90D8               	bcf	status,0,c
 18659  002DA0  362C               	rlcf	??_sdc_disk_write^0,f,c
 18660  002DA2  362D               	rlcf	(??_sdc_disk_write+1)^0,f,c
 18661  002DA4  362E               	rlcf	(??_sdc_disk_write+2)^0,f,c
 18662  002DA6  362F               	rlcf	(??_sdc_disk_write+3)^0,f,c
 18663  002DA8  2EE8               	decfsz	wreg,f,c
 18664  002DAA  D7F9               	goto	u11705
 18665  002DAC  C02C  F01E         	movff	??_sdc_disk_write,command@arg
 18666  002DB0  C02D  F01F         	movff	??_sdc_disk_write+1,command@arg+1
 18667  002DB4  C02E  F020         	movff	??_sdc_disk_write+2,command@arg+2
 18668  002DB8  C02F  F021         	movff	??_sdc_disk_write+3,command@arg+3
 18669  002DBC  0EFF               	movlw	255
 18670  002DBE  6E22               	movwf	command@CRC^0,c
 18671  002DC0  0E59               	movlw	89
 18672  002DC2  ECF6  F028         	call	_command
 18673                           
 18674                           ;diskio.c: 528: proceed();
 18675  002DC6  EC53  F02F         	call	_proceed	;wreg free
 18676  002DCA                     l11293:
 18677                           
 18678                           ;diskio.c: 530: buff = response();
 18679  002DCA  EC4D  F02F         	call	_response	;wreg free
 18680  002DCE  0100               	movlb	0	; () banked
 18681  002DD0  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 18682                           
 18683                           ; BSR set to: 0
 18684                           ;diskio.c: 531: }while(buff!=0X00);
 18685  002DD2  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 18686  002DD4  A4D8               	btfss	status,2,c
 18687  002DD6  D7F9               	goto	l11293
 18688                           
 18689                           ; BSR set to: 0
 18690                           ;diskio.c: 533: dummy_clocks(1);
 18691  002DD8  0E01               	movlw	1
 18692  002DDA  ECEC  F02B         	call	_dummy_clocks
 18693                           
 18694                           ;diskio.c: 534: escreve_SPI(0XFC);
 18695  002DDE  0EFC               	movlw	252
 18696  002DE0  EC1B  F02F         	call	_escreve_SPI
 18697                           
 18698                           ;diskio.c: 535: for(j=0;j<512;j++)
 18699  002DE4  0E00               	movlw	0
 18700  002DE6  0100               	movlb	0	; () banked
 18701  002DE8  6F66               	movwf	(sdc_disk_write@j+1)& (0+255),b
 18702  002DEA  0E00               	movlw	0
 18703  002DEC  6F65               	movwf	sdc_disk_write@j& (0+255),b
 18704  002DEE                     l11307:
 18705                           
 18706                           ; BSR set to: 0
 18707                           ;diskio.c: 536: {;diskio.c: 537: escreve_SPI(*p_buff);
 18708  002DEE  C025  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 18709  002DF2  C026  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 18710  002DF6  50DF               	movf	indf2,w,c
 18711  002DF8  EC1B  F02F         	call	_escreve_SPI
 18712                           
 18713                           ;diskio.c: 538: p_buff++;
 18714  002DFC  4A25               	infsnz	sdc_disk_write@p_buff^0,f,c
 18715  002DFE  2A26               	incf	(sdc_disk_write@p_buff+1)^0,f,c
 18716  002E00  0100               	movlb	0	; () banked
 18717  002E02  4B65               	infsnz	sdc_disk_write@j& (0+255),f,b
 18718  002E04  2B66               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 18719                           
 18720                           ; BSR set to: 0
 18721  002E06  BF66               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 18722  002E08  D7F2               	goto	l11307
 18723  002E0A  0E02               	movlw	2
 18724  002E0C  5D66               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 18725  002E0E  A0D8               	btfss	status,0,c
 18726  002E10  D7EE               	goto	l11307
 18727                           
 18728                           ; BSR set to: 0
 18729                           ;diskio.c: 539: };diskio.c: 540: leitura_SPI();
 18730  002E12  EC59  F02F         	call	_leitura_SPI	;wreg free
 18731                           
 18732                           ;diskio.c: 541: leitura_SPI();
 18733  002E16  EC59  F02F         	call	_leitura_SPI	;wreg free
 18734                           
 18735                           ;diskio.c: 543: dummy_clocks(1);
 18736  002E1A  0E01               	movlw	1
 18737  002E1C  ECEC  F02B         	call	_dummy_clocks
 18738                           
 18739                           ;diskio.c: 544: escreve_SPI(0XFD);
 18740  002E20  0EFD               	movlw	253
 18741  002E22  EC1B  F02F         	call	_escreve_SPI
 18742                           
 18743                           ;diskio.c: 546: }
 18744  002E26  D067               	goto	u11760
 18745  002E28                     l144:
 18746                           
 18747                           ; BSR set to: 0
 18748                           ;diskio.c: 547: else;diskio.c: 548: {;diskio.c: 549: LATCbits.LATC7 = 0;
 18749  002E28  9E8B               	bcf	139,7,c	;volatile
 18750                           
 18751                           ;diskio.c: 550: LATBbits.LATB5 = 0;
 18752  002E2A  9A8A               	bcf	138,5,c	;volatile
 18753                           
 18754                           ; BSR set to: 0
 18755                           ;diskio.c: 551: dummy_clocks(10);
 18756  002E2C  0E0A               	movlw	10
 18757  002E2E  ECEC  F02B         	call	_dummy_clocks
 18758                           
 18759                           ;diskio.c: 552: command(0X58, sector*512, 0X00);
 18760  002E32  C027  F02C         	movff	sdc_disk_write@sector,??_sdc_disk_write
 18761  002E36  C028  F02D         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 18762  002E3A  C029  F02E         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 18763  002E3E  C02A  F02F         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 18764  002E42  0E09               	movlw	9
 18765  002E44                     u11735:
 18766  002E44  90D8               	bcf	status,0,c
 18767  002E46  362C               	rlcf	??_sdc_disk_write^0,f,c
 18768  002E48  362D               	rlcf	(??_sdc_disk_write+1)^0,f,c
 18769  002E4A  362E               	rlcf	(??_sdc_disk_write+2)^0,f,c
 18770  002E4C  362F               	rlcf	(??_sdc_disk_write+3)^0,f,c
 18771  002E4E  2EE8               	decfsz	wreg,f,c
 18772  002E50  D7F9               	goto	u11735
 18773  002E52  C02C  F01E         	movff	??_sdc_disk_write,command@arg
 18774  002E56  C02D  F01F         	movff	??_sdc_disk_write+1,command@arg+1
 18775  002E5A  C02E  F020         	movff	??_sdc_disk_write+2,command@arg+2
 18776  002E5E  C02F  F021         	movff	??_sdc_disk_write+3,command@arg+3
 18777  002E62  0E00               	movlw	0
 18778  002E64  6E22               	movwf	command@CRC^0,c
 18779  002E66  0E58               	movlw	88
 18780  002E68  ECF6  F028         	call	_command
 18781                           
 18782                           ;diskio.c: 553: proceed();
 18783  002E6C  EC53  F02F         	call	_proceed	;wreg free
 18784  002E70                     l11325:
 18785                           
 18786                           ;diskio.c: 555: buff = response();
 18787  002E70  EC4D  F02F         	call	_response	;wreg free
 18788  002E74  0100               	movlb	0	; () banked
 18789  002E76  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 18790                           
 18791                           ; BSR set to: 0
 18792                           ;diskio.c: 556: }while(buff!=0X00);
 18793  002E78  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 18794  002E7A  A4D8               	btfss	status,2,c
 18795  002E7C  D7F9               	goto	l11325
 18796                           
 18797                           ; BSR set to: 0
 18798                           ;diskio.c: 558: LATBbits.LATB5 = 0;
 18799  002E7E  9A8A               	bcf	138,5,c	;volatile
 18800                           
 18801                           ;diskio.c: 559: LATCbits.LATC7 = 0;
 18802  002E80  9E8B               	bcf	139,7,c	;volatile
 18803                           
 18804                           ; BSR set to: 0
 18805                           ;diskio.c: 560: dummy_clocks(1);
 18806  002E82  0E01               	movlw	1
 18807  002E84  ECEC  F02B         	call	_dummy_clocks
 18808                           
 18809                           ;diskio.c: 561: escreve_SPI(0XFE);
 18810  002E88  0EFE               	movlw	254
 18811  002E8A  EC1B  F02F         	call	_escreve_SPI
 18812                           
 18813                           ;diskio.c: 562: for(j=0;j<512;j++)
 18814  002E8E  0E00               	movlw	0
 18815  002E90  0100               	movlb	0	; () banked
 18816  002E92  6F66               	movwf	(sdc_disk_write@j+1)& (0+255),b
 18817  002E94  0E00               	movlw	0
 18818  002E96  6F65               	movwf	sdc_disk_write@j& (0+255),b
 18819  002E98                     l11339:
 18820                           
 18821                           ; BSR set to: 0
 18822                           ;diskio.c: 563: {;diskio.c: 564: escreve_SPI(*p_buff);
 18823  002E98  C025  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 18824  002E9C  C026  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 18825  002EA0  50DF               	movf	indf2,w,c
 18826  002EA2  EC1B  F02F         	call	_escreve_SPI
 18827                           
 18828                           ;diskio.c: 565: p_buff++;
 18829  002EA6  4A25               	infsnz	sdc_disk_write@p_buff^0,f,c
 18830  002EA8  2A26               	incf	(sdc_disk_write@p_buff+1)^0,f,c
 18831  002EAA  0100               	movlb	0	; () banked
 18832  002EAC  4B65               	infsnz	sdc_disk_write@j& (0+255),f,b
 18833  002EAE  2B66               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 18834                           
 18835                           ; BSR set to: 0
 18836  002EB0  BF66               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 18837  002EB2  D7F2               	goto	l11339
 18838  002EB4  0E02               	movlw	2
 18839  002EB6  5D66               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 18840  002EB8  A0D8               	btfss	status,0,c
 18841  002EBA  D7EE               	goto	l11339
 18842                           
 18843                           ; BSR set to: 0
 18844                           ;diskio.c: 566: };diskio.c: 567: leitura_SPI();
 18845  002EBC  EC59  F02F         	call	_leitura_SPI	;wreg free
 18846                           
 18847                           ;diskio.c: 568: leitura_SPI();
 18848  002EC0  EC59  F02F         	call	_leitura_SPI	;wreg free
 18849                           
 18850                           ;diskio.c: 570: dummy_clocks(10);
 18851  002EC4  0E0A               	movlw	10
 18852  002EC6  ECEC  F02B         	call	_dummy_clocks
 18853                           
 18854                           ;diskio.c: 571: command(0X4D,0X00000000,0X00);
 18855  002ECA  0E00               	movlw	0
 18856  002ECC  6E1E               	movwf	command@arg^0,c
 18857  002ECE  0E00               	movlw	0
 18858  002ED0  6E1F               	movwf	(command@arg+1)^0,c
 18859  002ED2  0E00               	movlw	0
 18860  002ED4  6E20               	movwf	(command@arg+2)^0,c
 18861  002ED6  0E00               	movlw	0
 18862  002ED8  6E21               	movwf	(command@arg+3)^0,c
 18863  002EDA  0E00               	movlw	0
 18864  002EDC  6E22               	movwf	command@CRC^0,c
 18865  002EDE  0E4D               	movlw	77
 18866  002EE0  ECF6  F028         	call	_command
 18867                           
 18868                           ;diskio.c: 572: proceed();
 18869  002EE4  EC53  F02F         	call	_proceed	;wreg free
 18870  002EE8                     l11355:
 18871                           
 18872                           ;diskio.c: 574: buff = response();
 18873  002EE8  EC4D  F02F         	call	_response	;wreg free
 18874  002EEC  0100               	movlb	0	; () banked
 18875  002EEE  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 18876                           
 18877                           ; BSR set to: 0
 18878                           ;diskio.c: 575: }while(buff!=0X00 );
 18879  002EF0  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 18880  002EF2  A4D8               	btfss	status,2,c
 18881  002EF4  D7F9               	goto	l11355
 18882  002EF6                     u11760:
 18883                           
 18884                           ;diskio.c: 576: };diskio.c: 577: return res;
 18885  002EF6  0100               	movlb	0	; () banked
 18886  002EF8  5164               	movf	sdc_disk_write@res& (0+255),w,b
 18887                           
 18888                           ; BSR set to: 0
 18889  002EFA  0012               	return		;funcret
 18890  002EFC                     __end_of_sdc_disk_write:
 18891                           	callstack 0
 18892                           
 18893 ;; *************** function _disk_read *****************
 18894 ;; Defined at:
 18895 ;;		line 97 in file "bibliotecas/diskio.c"
 18896 ;; Parameters:    Size  Location     Type
 18897 ;;  pdrv            1    wreg     unsigned char 
 18898 ;;  buff            2    8[BANK0 ] PTR unsigned char 
 18899 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 18900 ;;  sector          4   10[BANK0 ] unsigned long 
 18901 ;;  count           1   14[BANK0 ] unsigned char 
 18902 ;; Auto vars:     Size  Location     Type
 18903 ;;  pdrv            1   15[BANK0 ] unsigned char 
 18904 ;;  result          2   16[BANK0 ] int 
 18905 ;;  res             1   18[BANK0 ] enum E25
 18906 ;; Return value:  Size  Location     Type
 18907 ;;                  1    wreg      enum E25
 18908 ;; Registers used:
 18909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18910 ;; Tracked objects:
 18911 ;;		On entry : 3F/0
 18912 ;;		On exit  : 3F/0
 18913 ;;		Unchanged: 0/0
 18914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18915 ;;      Params:         0       7       0       0       0       0       0       0       0
 18916 ;;      Locals:         0       4       0       0       0       0       0       0       0
 18917 ;;      Temps:          1       0       0       0       0       0       0       0       0
 18918 ;;      Totals:         1      11       0       0       0       0       0       0       0
 18919 ;;Total ram usage:       12 bytes
 18920 ;; Hardware stack levels used:    1
 18921 ;; Hardware stack levels required when called:    7
 18922 ;; This function calls:
 18923 ;;		_sdc_disk_read
 18924 ;; This function is called by:
 18925 ;;		_move_window
 18926 ;;		_check_fs
 18927 ;;		_f_read
 18928 ;; This function uses a non-reentrant model
 18929 ;;
 18930                           
 18931                           	psect	text97
 18932  004F94                     __ptext97:
 18933                           	callstack 0
 18934  004F94                     _disk_read:
 18935                           	callstack 15
 18936                           
 18937                           ; BSR set to: 0
 18938                           ;incstack = 0
 18939                           ;disk_read@pdrv stored from wreg
 18940  004F94  6F6F               	movwf	disk_read@pdrv& (0+255),b
 18941                           
 18942                           ;diskio.c: 104: DRESULT res;;diskio.c: 105: int result;;diskio.c: 107: switch (pdrv) {
 18943  004F96  D029               	goto	l11389
 18944  004F98                     l11365:
 18945                           
 18946                           ; BSR set to: 0
 18947                           ;diskio.c: 111: result = sdc_disk_read(buff, sector, count);
 18948  004F98  C068  F025         	movff	disk_read@buff,sdc_disk_read@p_buff
 18949  004F9C  C069  F026         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 18950  004FA0  C06A  F027         	movff	disk_read@sector,sdc_disk_read@sector
 18951  004FA4  C06B  F028         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 18952  004FA8  C06C  F029         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 18953  004FAC  C06D  F02A         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 18954  004FB0  C06E  F02B         	movff	disk_read@count,sdc_disk_read@count
 18955  004FB4  EC99  F01E         	call	_sdc_disk_read	;wreg free
 18956  004FB8  6E30               	movwf	??_disk_read^0,c
 18957  004FBA  5030               	movf	??_disk_read^0,w,c
 18958  004FBC  6F70               	movwf	disk_read@result& (0+255),b
 18959  004FBE  6B71               	clrf	(disk_read@result+1)& (0+255),b
 18960                           
 18961                           ; BSR set to: 0
 18962                           ;diskio.c: 115: res = result;
 18963  004FC0  C070  F072         	movff	disk_read@result,disk_read@res
 18964  004FC4                     l11369:
 18965                           
 18966                           ; BSR set to: 0
 18967                           ;diskio.c: 117: return res;
 18968  004FC4  5172               	movf	disk_read@res& (0+255),w,b
 18969  004FC6  0012               	return	
 18970  004FC8                     l11373:
 18971                           
 18972                           ; BSR set to: 0
 18973                           ;diskio.c: 122: result = sdc_disk_read(buff, sector, count);
 18974  004FC8  C068  F025         	movff	disk_read@buff,sdc_disk_read@p_buff
 18975  004FCC  C069  F026         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 18976  004FD0  C06A  F027         	movff	disk_read@sector,sdc_disk_read@sector
 18977  004FD4  C06B  F028         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 18978  004FD8  C06C  F029         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 18979  004FDC  C06D  F02A         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 18980  004FE0  C06E  F02B         	movff	disk_read@count,sdc_disk_read@count
 18981  004FE4  EC99  F01E         	call	_sdc_disk_read	;wreg free
 18982  004FE8  D7E7               	goto	L33
 18983  004FEA                     l11389:
 18984  004FEA  0100               	movlb	0	; () banked
 18985  004FEC  516F               	movf	disk_read@pdrv& (0+255),w,b
 18986                           
 18987                           ; Switch size 1, requested type "simple"
 18988                           ; Number of cases is 3, Range of values is 0 to 2
 18989                           ; switch strategies available:
 18990                           ; Name         Instructions Cycles
 18991                           ; simple_byte           10     6 (average)
 18992                           ;	Chosen strategy is simple_byte
 18993  004FEE  0A00               	xorlw	0	; case 0
 18994  004FF0  B4D8               	btfsc	status,2,c
 18995  004FF2  D7D2               	goto	l11365
 18996  004FF4  0A01               	xorlw	1	; case 1
 18997  004FF6  B4D8               	btfsc	status,2,c
 18998  004FF8  D7E7               	goto	l11373
 18999  004FFA  0A03               	xorlw	3	; case 2
 19000  004FFC  B4D8               	btfsc	status,2,c
 19001  004FFE  D7E2               	goto	l11369
 19002                           
 19003                           ; BSR set to: 0
 19004                           ;diskio.c: 141: return RES_PARERR;
 19005  005000  0E04               	movlw	4
 19006                           
 19007                           ; BSR set to: 0
 19008  005002  0012               	return		;funcret
 19009  005004                     __end_of_disk_read:
 19010                           	callstack 0
 19011                           
 19012 ;; *************** function _sdc_disk_read *****************
 19013 ;; Defined at:
 19014 ;;		line 439 in file "bibliotecas/diskio.c"
 19015 ;; Parameters:    Size  Location     Type
 19016 ;;  p_buff          2   36[COMRAM] PTR unsigned char 
 19017 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 19018 ;;  sector          4   38[COMRAM] unsigned long 
 19019 ;;  count           1   42[COMRAM] unsigned char 
 19020 ;; Auto vars:     Size  Location     Type
 19021 ;;  start_add       4    1[BANK0 ] unsigned long 
 19022 ;;  length          2    5[BANK0 ] int 
 19023 ;;  count1          2    0        int 
 19024 ;;  i               2    0        int 
 19025 ;;  buff            1    7[BANK0 ] unsigned char 
 19026 ;;  ptr             1    0        unsigned char 
 19027 ;;  res             1    0        enum E25
 19028 ;; Return value:  Size  Location     Type
 19029 ;;                  1    wreg      enum E25
 19030 ;; Registers used:
 19031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19032 ;; Tracked objects:
 19033 ;;		On entry : 0/0
 19034 ;;		On exit  : 3F/0
 19035 ;;		Unchanged: 0/0
 19036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19037 ;;      Params:         7       0       0       0       0       0       0       0       0
 19038 ;;      Locals:         0       8       0       0       0       0       0       0       0
 19039 ;;      Temps:          4       0       0       0       0       0       0       0       0
 19040 ;;      Totals:        11       8       0       0       0       0       0       0       0
 19041 ;;Total ram usage:       19 bytes
 19042 ;; Hardware stack levels used:    1
 19043 ;; Hardware stack levels required when called:    6
 19044 ;; This function calls:
 19045 ;;		_command
 19046 ;;		_dummy_clocks
 19047 ;;		_proceed
 19048 ;;		_response
 19049 ;; This function is called by:
 19050 ;;		_disk_read
 19051 ;; This function uses a non-reentrant model
 19052 ;;
 19053                           
 19054                           	psect	text98
 19055  003D32                     __ptext98:
 19056                           	callstack 0
 19057  003D32                     _sdc_disk_read:
 19058                           	callstack 15
 19059                           
 19060                           ;diskio.c: 448: unsigned long int start_add;;diskio.c: 449: int length,i, count1;;diskio
      +                          .c: 450: dummy_clocks(10);
 19061                           
 19062                           ; BSR set to: 0
 19063                           ;incstack = 0
 19064  003D32  0E0A               	movlw	10
 19065  003D34  ECEC  F02B         	call	_dummy_clocks
 19066                           
 19067                           ;diskio.c: 452: start_add = sector*512;
 19068  003D38  C027  F02C         	movff	sdc_disk_read@sector,??_sdc_disk_read
 19069  003D3C  C028  F02D         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 19070  003D40  C029  F02E         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 19071  003D44  C02A  F02F         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 19072  003D48  0E09               	movlw	9
 19073  003D4A                     u11615:
 19074  003D4A  90D8               	bcf	status,0,c
 19075  003D4C  362C               	rlcf	??_sdc_disk_read^0,f,c
 19076  003D4E  362D               	rlcf	(??_sdc_disk_read+1)^0,f,c
 19077  003D50  362E               	rlcf	(??_sdc_disk_read+2)^0,f,c
 19078  003D52  362F               	rlcf	(??_sdc_disk_read+3)^0,f,c
 19079  003D54  2EE8               	decfsz	wreg,f,c
 19080  003D56  D7F9               	goto	u11615
 19081  003D58  C02C  F061         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 19082  003D5C  C02D  F062         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 19083  003D60  C02E  F063         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 19084  003D64  C02F  F064         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 19085                           
 19086                           ;diskio.c: 455: if(sector != 1)
 19087  003D68  0427               	decf	sdc_disk_read@sector^0,w,c
 19088  003D6A  1028               	iorwf	(sdc_disk_read@sector+1)^0,w,c
 19089  003D6C  1029               	iorwf	(sdc_disk_read@sector+2)^0,w,c
 19090  003D6E  102A               	iorwf	(sdc_disk_read@sector+3)^0,w,c
 19091  003D70  B4D8               	btfsc	status,2,c
 19092  003D72  D01C               	goto	l11235
 19093                           
 19094                           ;diskio.c: 456: {;diskio.c: 457: dummy_clocks(10);
 19095  003D74  0E0A               	movlw	10
 19096  003D76  ECEC  F02B         	call	_dummy_clocks
 19097                           
 19098                           ;diskio.c: 458: command(0X52,start_add ,0X00);
 19099  003D7A  C061  F01E         	movff	sdc_disk_read@start_add,command@arg
 19100  003D7E  C062  F01F         	movff	sdc_disk_read@start_add+1,command@arg+1
 19101  003D82  C063  F020         	movff	sdc_disk_read@start_add+2,command@arg+2
 19102  003D86  C064  F021         	movff	sdc_disk_read@start_add+3,command@arg+3
 19103  003D8A  0E00               	movlw	0
 19104  003D8C  6E22               	movwf	command@CRC^0,c
 19105  003D8E  0E52               	movlw	82
 19106  003D90  ECF6  F028         	call	_command
 19107                           
 19108                           ;diskio.c: 459: proceed();
 19109  003D94  EC53  F02F         	call	_proceed	;wreg free
 19110  003D98                     l11229:
 19111                           
 19112                           ;diskio.c: 461: buff = response();
 19113  003D98  EC4D  F02F         	call	_response	;wreg free
 19114  003D9C  0100               	movlb	0	; () banked
 19115  003D9E  6F67               	movwf	sdc_disk_read@buff& (0+255),b
 19116                           
 19117                           ; BSR set to: 0
 19118                           ;diskio.c: 462: }while(buff!=0X00);
 19119  003DA0  5167               	movf	sdc_disk_read@buff& (0+255),w,b
 19120  003DA2  A4D8               	btfss	status,2,c
 19121  003DA4  D7F9               	goto	l11229
 19122  003DA6                     u11630:
 19123                           
 19124                           ; BSR set to: 0
 19125                           ;diskio.c: 463: proceed();
 19126  003DA6  EC53  F02F         	call	_proceed	;wreg free
 19127                           
 19128                           ;diskio.c: 464: }
 19129  003DAA  D01E               	goto	l11247
 19130  003DAC                     l11235:
 19131                           
 19132                           ;diskio.c: 465: else;diskio.c: 466: {;diskio.c: 467: dummy_clocks(10);
 19133  003DAC  0E0A               	movlw	10
 19134  003DAE  ECEC  F02B         	call	_dummy_clocks
 19135                           
 19136                           ;diskio.c: 468: command(0X51,sector ,0X00);
 19137  003DB2  C027  F01E         	movff	sdc_disk_read@sector,command@arg
 19138  003DB6  C028  F01F         	movff	sdc_disk_read@sector+1,command@arg+1
 19139  003DBA  C029  F020         	movff	sdc_disk_read@sector+2,command@arg+2
 19140  003DBE  C02A  F021         	movff	sdc_disk_read@sector+3,command@arg+3
 19141  003DC2  0E00               	movlw	0
 19142  003DC4  6E22               	movwf	command@CRC^0,c
 19143  003DC6  0E51               	movlw	81
 19144  003DC8  ECF6  F028         	call	_command
 19145                           
 19146                           ;diskio.c: 469: proceed();
 19147  003DCC  EC53  F02F         	call	_proceed	;wreg free
 19148  003DD0                     l11239:
 19149                           
 19150                           ;diskio.c: 471: buff = response();
 19151  003DD0  EC4D  F02F         	call	_response	;wreg free
 19152  003DD4  0100               	movlb	0	; () banked
 19153  003DD6  6F67               	movwf	sdc_disk_read@buff& (0+255),b
 19154                           
 19155                           ; BSR set to: 0
 19156                           ;diskio.c: 472: }while(buff!=0X00);
 19157  003DD8  5167               	movf	sdc_disk_read@buff& (0+255),w,b
 19158  003DDA  B4D8               	btfsc	status,2,c
 19159  003DDC  D7E4               	goto	u11630
 19160  003DDE  D7F8               	goto	l11239
 19161  003DE0                     l11245:
 19162                           
 19163                           ; BSR set to: 0
 19164                           ;diskio.c: 479: {;diskio.c: 480: buff = response();
 19165  003DE0  EC4D  F02F         	call	_response	;wreg free
 19166  003DE4  0100               	movlb	0	; () banked
 19167  003DE6  6F67               	movwf	sdc_disk_read@buff& (0+255),b
 19168  003DE8                     l11247:
 19169  003DE8  0EFE               	movlw	254
 19170  003DEA  0100               	movlb	0	; () banked
 19171  003DEC  1967               	xorwf	sdc_disk_read@buff& (0+255),w,b
 19172  003DEE  A4D8               	btfss	status,2,c
 19173  003DF0  D7F7               	goto	l11245
 19174                           
 19175                           ; BSR set to: 0
 19176                           ;diskio.c: 481: };diskio.c: 483: length = 0;
 19177  003DF2  0E00               	movlw	0
 19178  003DF4  6F66               	movwf	(sdc_disk_read@length+1)& (0+255),b
 19179  003DF6  0E00               	movlw	0
 19180  003DF8  6F65               	movwf	sdc_disk_read@length& (0+255),b
 19181                           
 19182                           ;diskio.c: 484: while ( length < 512 )
 19183  003DFA  D00C               	goto	l11255
 19184  003DFC                     l11251:
 19185                           
 19186                           ; BSR set to: 0
 19187                           ;diskio.c: 485: {;diskio.c: 486: p_buff[length] = response();
 19188  003DFC  5165               	movf	sdc_disk_read@length& (0+255),w,b
 19189  003DFE  2425               	addwf	sdc_disk_read@p_buff^0,w,c
 19190  003E00  6ED9               	movwf	fsr2l,c
 19191  003E02  5166               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 19192  003E04  2026               	addwfc	(sdc_disk_read@p_buff+1)^0,w,c
 19193  003E06  6EDA               	movwf	fsr2h,c
 19194  003E08  EC4D  F02F         	call	_response	;wreg free
 19195  003E0C  6EDF               	movwf	indf2,c
 19196                           
 19197                           ;diskio.c: 487: length++;
 19198  003E0E  0100               	movlb	0	; () banked
 19199  003E10  4B65               	infsnz	sdc_disk_read@length& (0+255),f,b
 19200  003E12  2B66               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 19201  003E14                     l11255:
 19202                           
 19203                           ; BSR set to: 0
 19204  003E14  BF66               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 19205  003E16  D7F2               	goto	l11251
 19206  003E18  0E02               	movlw	2
 19207  003E1A  5D66               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 19208  003E1C  A0D8               	btfss	status,0,c
 19209  003E1E  D7EE               	goto	l11251
 19210                           
 19211                           ; BSR set to: 0
 19212                           ;diskio.c: 491: dummy_clocks(10);
 19213                           
 19214                           ; BSR set to: 0
 19215  003E20  0E0A               	movlw	10
 19216  003E22  ECEC  F02B         	call	_dummy_clocks
 19217                           
 19218                           ;diskio.c: 493: command(0X4C,0X00000000,0X00);
 19219  003E26  0E00               	movlw	0
 19220  003E28  6E1E               	movwf	command@arg^0,c
 19221  003E2A  0E00               	movlw	0
 19222  003E2C  6E1F               	movwf	(command@arg+1)^0,c
 19223  003E2E  0E00               	movlw	0
 19224  003E30  6E20               	movwf	(command@arg+2)^0,c
 19225  003E32  0E00               	movlw	0
 19226  003E34  6E21               	movwf	(command@arg+3)^0,c
 19227  003E36  0E00               	movlw	0
 19228  003E38  6E22               	movwf	command@CRC^0,c
 19229  003E3A  0E4C               	movlw	76
 19230  003E3C  ECF6  F028         	call	_command
 19231                           
 19232                           ;diskio.c: 494: proceed();
 19233  003E40  EC53  F02F         	call	_proceed	;wreg free
 19234  003E44                     l11265:
 19235                           
 19236                           ;diskio.c: 496: buff = response();
 19237  003E44  EC4D  F02F         	call	_response	;wreg free
 19238  003E48  0100               	movlb	0	; () banked
 19239  003E4A  6F67               	movwf	sdc_disk_read@buff& (0+255),b
 19240                           
 19241                           ; BSR set to: 0
 19242                           ;diskio.c: 497: }while(buff!=0xFF);
 19243  003E4C  2967               	incf	sdc_disk_read@buff& (0+255),w,b
 19244  003E4E  A4D8               	btfss	status,2,c
 19245  003E50  D7F9               	goto	l11265
 19246                           
 19247                           ; BSR set to: 0
 19248                           ;diskio.c: 500: return RES_OK;
 19249                           
 19250                           ; BSR set to: 0
 19251  003E52  0E00               	movlw	0
 19252                           
 19253                           ; BSR set to: 0
 19254  003E54  0012               	return		;funcret
 19255  003E56                     __end_of_sdc_disk_read:
 19256                           	callstack 0
 19257                           
 19258 ;; *************** function _response *****************
 19259 ;; Defined at:
 19260 ;;		line 60 in file "bibliotecas/SDCard.c"
 19261 ;; Parameters:    Size  Location     Type
 19262 ;;		None
 19263 ;; Auto vars:     Size  Location     Type
 19264 ;;  buff            1   24[COMRAM] unsigned char 
 19265 ;; Return value:  Size  Location     Type
 19266 ;;                  1    wreg      unsigned char 
 19267 ;; Registers used:
 19268 ;;		wreg, status,2, cstack
 19269 ;; Tracked objects:
 19270 ;;		On entry : 0/0
 19271 ;;		On exit  : 0/0
 19272 ;;		Unchanged: 0/0
 19273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19274 ;;      Params:         0       0       0       0       0       0       0       0       0
 19275 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19276 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19277 ;;      Totals:         1       0       0       0       0       0       0       0       0
 19278 ;;Total ram usage:        1 bytes
 19279 ;; Hardware stack levels used:    1
 19280 ;; Hardware stack levels required when called:    4
 19281 ;; This function calls:
 19282 ;;		_leitura_SPI
 19283 ;; This function is called by:
 19284 ;;		_sdc_reset
 19285 ;;		_sdc_disk_initialize
 19286 ;;		_sdc_disk_read
 19287 ;;		_sdc_disk_write
 19288 ;; This function uses a non-reentrant model
 19289 ;;
 19290                           
 19291                           	psect	text99
 19292  005E9A                     __ptext99:
 19293                           	callstack 0
 19294  005E9A                     _response:
 19295                           	callstack 16
 19296                           
 19297                           ;SDCard.c: 62: unsigned char buff;;SDCard.c: 63: LATBbits.LATB5 = 0;
 19298                           
 19299                           ; BSR set to: 0
 19300                           ;incstack = 0
 19301  005E9A  9A8A               	bcf	138,5,c	;volatile
 19302                           
 19303                           ;SDCard.c: 64: buff= leitura_SPI();
 19304  005E9C  EC59  F02F         	call	_leitura_SPI	;wreg free
 19305  005EA0  6E19               	movwf	response@buff^0,c
 19306                           
 19307                           ;SDCard.c: 65: return buff;
 19308  005EA2  5019               	movf	response@buff^0,w,c
 19309  005EA4  0012               	return		;funcret
 19310  005EA6                     __end_of_response:
 19311                           	callstack 0
 19312                           
 19313 ;; *************** function _proceed *****************
 19314 ;; Defined at:
 19315 ;;		line 93 in file "bibliotecas/SDCard.c"
 19316 ;; Parameters:    Size  Location     Type
 19317 ;;		None
 19318 ;; Auto vars:     Size  Location     Type
 19319 ;;		None
 19320 ;; Return value:  Size  Location     Type
 19321 ;;                  1    wreg      void 
 19322 ;; Registers used:
 19323 ;;		wreg, cstack
 19324 ;; Tracked objects:
 19325 ;;		On entry : 0/0
 19326 ;;		On exit  : 0/0
 19327 ;;		Unchanged: 0/0
 19328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19329 ;;      Params:         0       0       0       0       0       0       0       0       0
 19330 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19331 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19332 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19333 ;;Total ram usage:        0 bytes
 19334 ;; Hardware stack levels used:    1
 19335 ;; Hardware stack levels required when called:    4
 19336 ;; This function calls:
 19337 ;;		_escreve_SPI
 19338 ;; This function is called by:
 19339 ;;		_sdc_reset
 19340 ;;		_sdc_disk_initialize
 19341 ;;		_sdc_disk_read
 19342 ;;		_sdc_disk_write
 19343 ;; This function uses a non-reentrant model
 19344 ;;
 19345                           
 19346                           	psect	text100
 19347  005EA6                     __ptext100:
 19348                           	callstack 0
 19349  005EA6                     _proceed:
 19350                           	callstack 16
 19351                           
 19352                           ;SDCard.c: 95: LATBbits.LATB5 = 0;
 19353                           
 19354                           ;incstack = 0
 19355  005EA6  9A8A               	bcf	138,5,c	;volatile
 19356                           
 19357                           ;SDCard.c: 96: escreve_SPI(0xFF);
 19358  005EA8  0EFF               	movlw	255
 19359  005EAA  EC1B  F02F         	call	_escreve_SPI
 19360                           
 19361                           ;SDCard.c: 97: LATBbits.LATB5 = 1;
 19362  005EAE  8A8A               	bsf	138,5,c	;volatile
 19363  005EB0  0012               	return		;funcret
 19364  005EB2                     __end_of_proceed:
 19365                           	callstack 0
 19366                           
 19367 ;; *************** function _command *****************
 19368 ;; Defined at:
 19369 ;;		line 126 in file "bibliotecas/SDCard.c"
 19370 ;; Parameters:    Size  Location     Type
 19371 ;;  CMD             1    wreg     unsigned char 
 19372 ;;  arg             4   29[COMRAM] unsigned long 
 19373 ;;  CRC             1   33[COMRAM] unsigned char 
 19374 ;; Auto vars:     Size  Location     Type
 19375 ;;  CMD             1   34[COMRAM] unsigned char 
 19376 ;;  argument        1   35[COMRAM] unsigned char 
 19377 ;; Return value:  Size  Location     Type
 19378 ;;                  1    wreg      void 
 19379 ;; Registers used:
 19380 ;;		wreg, status,2, status,0, cstack
 19381 ;; Tracked objects:
 19382 ;;		On entry : 0/0
 19383 ;;		On exit  : 0/0
 19384 ;;		Unchanged: 0/0
 19385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19386 ;;      Params:         5       0       0       0       0       0       0       0       0
 19387 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19388 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19389 ;;      Totals:         7       0       0       0       0       0       0       0       0
 19390 ;;Total ram usage:        7 bytes
 19391 ;; Hardware stack levels used:    1
 19392 ;; Hardware stack levels required when called:    5
 19393 ;; This function calls:
 19394 ;;		_dummy_clocks
 19395 ;;		_escreve_SPI
 19396 ;;		_wait_ready
 19397 ;; This function is called by:
 19398 ;;		_sdc_reset
 19399 ;;		_sdc_disk_initialize
 19400 ;;		_sdc_disk_read
 19401 ;;		_sdc_disk_write
 19402 ;; This function uses a non-reentrant model
 19403 ;;
 19404                           
 19405                           	psect	text101
 19406  0051EC                     __ptext101:
 19407                           	callstack 0
 19408  0051EC                     _command:
 19409                           	callstack 15
 19410                           
 19411                           ;incstack = 0
 19412                           ;command@CMD stored from wreg
 19413  0051EC  6E23               	movwf	command@CMD^0,c
 19414                           
 19415                           ;SDCard.c: 128: unsigned char argument;;SDCard.c: 130: if (wait_ready() != 0xFF)
 19416  0051EE  EC41  F02C         	call	_wait_ready	;wreg free
 19417  0051F2  0AFF               	xorlw	255
 19418  0051F4  A4D8               	btfss	status,2,c
 19419  0051F6  D004               	goto	l588
 19420  0051F8  D008               	goto	u11600
 19421  0051FA                     l11179:
 19422                           
 19423                           ;SDCard.c: 133: {;SDCard.c: 134: dummy_clocks(10);
 19424  0051FA  0E0A               	movlw	10
 19425  0051FC  ECEC  F02B         	call	_dummy_clocks
 19426  005200                     l588:
 19427  005200  EC41  F02C         	call	_wait_ready	;wreg free
 19428  005204  0AFF               	xorlw	255
 19429  005206  A4D8               	btfss	status,2,c
 19430  005208  D7F8               	goto	l11179
 19431  00520A                     u11600:
 19432                           
 19433                           ;SDCard.c: 135: };SDCard.c: 136: };SDCard.c: 137: escreve_SPI(0xFF);
 19434  00520A  0EFF               	movlw	255
 19435  00520C  EC1B  F02F         	call	_escreve_SPI
 19436                           
 19437                           ;SDCard.c: 138: escreve_SPI(CMD);
 19438  005210  5023               	movf	command@CMD^0,w,c
 19439  005212  EC1B  F02F         	call	_escreve_SPI
 19440                           
 19441                           ;SDCard.c: 139: argument = arg>>24;
 19442  005216  C021  F024         	movff	command@arg+3,command@argument
 19443                           
 19444                           ;SDCard.c: 140: escreve_SPI(argument);
 19445  00521A  5024               	movf	command@argument^0,w,c
 19446  00521C  EC1B  F02F         	call	_escreve_SPI
 19447                           
 19448                           ;SDCard.c: 141: argument = arg>>16;
 19449  005220  C020  F024         	movff	command@arg+2,command@argument
 19450                           
 19451                           ;SDCard.c: 142: escreve_SPI(argument);
 19452  005224  5024               	movf	command@argument^0,w,c
 19453  005226  EC1B  F02F         	call	_escreve_SPI
 19454                           
 19455                           ;SDCard.c: 143: argument = arg>>8;
 19456  00522A  C01F  F024         	movff	command@arg+1,command@argument
 19457                           
 19458                           ;SDCard.c: 144: escreve_SPI(argument);
 19459  00522E  5024               	movf	command@argument^0,w,c
 19460  005230  EC1B  F02F         	call	_escreve_SPI
 19461                           
 19462                           ;SDCard.c: 145: argument = arg;
 19463  005234  C01E  F024         	movff	command@arg,command@argument
 19464                           
 19465                           ;SDCard.c: 146: escreve_SPI(argument);
 19466  005238  5024               	movf	command@argument^0,w,c
 19467  00523A  EC1B  F02F         	call	_escreve_SPI
 19468                           
 19469                           ;SDCard.c: 147: escreve_SPI(CRC);
 19470  00523E  5022               	movf	command@CRC^0,w,c
 19471  005240  EC1B  F02F         	call	_escreve_SPI
 19472  005244  0012               	return		;funcret
 19473  005246                     __end_of_command:
 19474                           	callstack 0
 19475                           
 19476 ;; *************** function _wait_ready *****************
 19477 ;; Defined at:
 19478 ;;		line 106 in file "bibliotecas/SDCard.c"
 19479 ;; Parameters:    Size  Location     Type
 19480 ;;		None
 19481 ;; Auto vars:     Size  Location     Type
 19482 ;;  msg            10    0        unsigned char [10]
 19483 ;;  timeout         4   24[COMRAM] unsigned long 
 19484 ;;  res             1   28[COMRAM] unsigned char 
 19485 ;; Return value:  Size  Location     Type
 19486 ;;                  1    wreg      unsigned char 
 19487 ;; Registers used:
 19488 ;;		wreg, status,2, status,0, cstack
 19489 ;; Tracked objects:
 19490 ;;		On entry : 0/0
 19491 ;;		On exit  : 0/0
 19492 ;;		Unchanged: 0/0
 19493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19494 ;;      Params:         0       0       0       0       0       0       0       0       0
 19495 ;;      Locals:         5       0       0       0       0       0       0       0       0
 19496 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19497 ;;      Totals:         5       0       0       0       0       0       0       0       0
 19498 ;;Total ram usage:        5 bytes
 19499 ;; Hardware stack levels used:    1
 19500 ;; Hardware stack levels required when called:    4
 19501 ;; This function calls:
 19502 ;;		_leitura_SPI
 19503 ;; This function is called by:
 19504 ;;		_command
 19505 ;; This function uses a non-reentrant model
 19506 ;;
 19507                           
 19508                           	psect	text102
 19509  005882                     __ptext102:
 19510                           	callstack 0
 19511  005882                     _wait_ready:
 19512                           	callstack 15
 19513                           
 19514                           ;SDCard.c: 108: BYTE res;;SDCard.c: 109: DWORD timeout = 0x7FFF;
 19515                           
 19516                           ;incstack = 0
 19517  005882  0EFF               	movlw	255
 19518  005884  6E19               	movwf	wait_ready@timeout^0,c
 19519  005886  0E7F               	movlw	127
 19520  005888  6E1A               	movwf	(wait_ready@timeout+1)^0,c
 19521  00588A  0E00               	movlw	0
 19522  00588C  6E1B               	movwf	(wait_ready@timeout+2)^0,c
 19523  00588E  0E00               	movlw	0
 19524  005890  6E1C               	movwf	(wait_ready@timeout+3)^0,c
 19525  005892                     l11165:
 19526                           
 19527                           ;SDCard.c: 113: res = leitura_SPI();
 19528  005892  EC59  F02F         	call	_leitura_SPI	;wreg free
 19529  005896  6E1D               	movwf	wait_ready@res^0,c
 19530                           
 19531                           ;SDCard.c: 114: while ((res != 0xFF) && (--timeout));
 19532  005898  281D               	incf	wait_ready@res^0,w,c
 19533  00589A  B4D8               	btfsc	status,2,c
 19534  00589C  D00B               	goto	u11580
 19535  00589E  0619               	decf	wait_ready@timeout^0,f,c
 19536  0058A0  0E00               	movlw	0
 19537  0058A2  5A1A               	subwfb	(wait_ready@timeout+1)^0,f,c
 19538  0058A4  5A1B               	subwfb	(wait_ready@timeout+2)^0,f,c
 19539  0058A6  5A1C               	subwfb	(wait_ready@timeout+3)^0,f,c
 19540  0058A8  5019               	movf	wait_ready@timeout^0,w,c
 19541  0058AA  101A               	iorwf	(wait_ready@timeout+1)^0,w,c
 19542  0058AC  101B               	iorwf	(wait_ready@timeout+2)^0,w,c
 19543  0058AE  101C               	iorwf	(wait_ready@timeout+3)^0,w,c
 19544  0058B0  A4D8               	btfss	status,2,c
 19545  0058B2  D7EF               	goto	l11165
 19546  0058B4                     u11580:
 19547                           
 19548                           ;SDCard.c: 116: return res;
 19549  0058B4  501D               	movf	wait_ready@res^0,w,c
 19550  0058B6  0012               	return		;funcret
 19551  0058B8                     __end_of_wait_ready:
 19552                           	callstack 0
 19553                           
 19554 ;; *************** function _escreve_SPI *****************
 19555 ;; Defined at:
 19556 ;;		line 97 in file "bibliotecas/SPI.c"
 19557 ;; Parameters:    Size  Location     Type
 19558 ;;  dado            1    wreg     unsigned char 
 19559 ;; Auto vars:     Size  Location     Type
 19560 ;;  dado            1   25[COMRAM] unsigned char 
 19561 ;;  TempVar         1    0        unsigned char 
 19562 ;; Return value:  Size  Location     Type
 19563 ;;                  1    wreg      void 
 19564 ;; Registers used:
 19565 ;;		wreg
 19566 ;; Tracked objects:
 19567 ;;		On entry : 0/0
 19568 ;;		On exit  : 0/0
 19569 ;;		Unchanged: 0/0
 19570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19571 ;;      Params:         0       0       0       0       0       0       0       0       0
 19572 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19573 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19574 ;;      Totals:         2       0       0       0       0       0       0       0       0
 19575 ;;Total ram usage:        2 bytes
 19576 ;; Hardware stack levels used:    1
 19577 ;; Hardware stack levels required when called:    3
 19578 ;; This function calls:
 19579 ;;		Nothing
 19580 ;; This function is called by:
 19581 ;;		_sdc_disk_write
 19582 ;;		_proceed
 19583 ;;		_command
 19584 ;; This function uses a non-reentrant model
 19585 ;;
 19586                           
 19587                           	psect	text103
 19588  005E36                     __ptext103:
 19589                           	callstack 0
 19590  005E36                     _escreve_SPI:
 19591                           	callstack 16
 19592                           
 19593                           ;incstack = 0
 19594                           ;escreve_SPI@dado stored from wreg
 19595  005E36  6E1A               	movwf	escreve_SPI@dado^0,c
 19596  005E38  50C9               	movf	201,w,c	;volatile
 19597                           
 19598                           ;SPI.c: 101: PIR1bits.SSPIF = 0;
 19599  005E3A  969E               	bcf	158,3,c	;volatile
 19600                           
 19601                           ;SPI.c: 103: SSPBUF = dado;
 19602  005E3C  C01A  FFC9         	movff	escreve_SPI@dado,4041	;volatile
 19603  005E40                     l687:
 19604  005E40  B69E               	btfsc	158,3,c	;volatile
 19605  005E42  0012               	return	
 19606  005E44  D7FD               	goto	l687
 19607  005E46                     __end_of_escreve_SPI:
 19608                           	callstack 0
 19609                           
 19610 ;; *************** function _dummy_clocks *****************
 19611 ;; Defined at:
 19612 ;;		line 75 in file "bibliotecas/SDCard.c"
 19613 ;; Parameters:    Size  Location     Type
 19614 ;;  n               1    wreg     unsigned char 
 19615 ;; Auto vars:     Size  Location     Type
 19616 ;;  n               1   26[COMRAM] unsigned char 
 19617 ;;  i               2   27[COMRAM] unsigned int 
 19618 ;; Return value:  Size  Location     Type
 19619 ;;                  1    wreg      void 
 19620 ;; Registers used:
 19621 ;;		wreg, status,2, status,0, cstack
 19622 ;; Tracked objects:
 19623 ;;		On entry : 0/0
 19624 ;;		On exit  : 0/0
 19625 ;;		Unchanged: 0/0
 19626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19627 ;;      Params:         0       0       0       0       0       0       0       0       0
 19628 ;;      Locals:         3       0       0       0       0       0       0       0       0
 19629 ;;      Temps:          2       0       0       0       0       0       0       0       0
 19630 ;;      Totals:         5       0       0       0       0       0       0       0       0
 19631 ;;Total ram usage:        5 bytes
 19632 ;; Hardware stack levels used:    1
 19633 ;; Hardware stack levels required when called:    4
 19634 ;; This function calls:
 19635 ;;		_leitura_SPI
 19636 ;; This function is called by:
 19637 ;;		_sdc_disk_initialize
 19638 ;;		_sdc_disk_read
 19639 ;;		_sdc_disk_write
 19640 ;;		_command
 19641 ;; This function uses a non-reentrant model
 19642 ;;
 19643                           
 19644                           	psect	text104
 19645  0057D8                     __ptext104:
 19646                           	callstack 0
 19647  0057D8                     _dummy_clocks:
 19648                           	callstack 16
 19649                           
 19650                           ;incstack = 0
 19651                           ;dummy_clocks@n stored from wreg
 19652  0057D8  6E1B               	movwf	dummy_clocks@n^0,c
 19653                           
 19654                           ;SDCard.c: 77: unsigned int i;;SDCard.c: 78: _delay((unsigned long)((1)*(48000000/4000.0
      +                          )));
 19655  0057DA  0E10               	movlw	16
 19656  0057DC  6E19               	movwf	??_dummy_clocks^0,c
 19657  0057DE  0E94               	movlw	148
 19658  0057E0                     u16287:
 19659  0057E0  2EE8               	decfsz	wreg,f,c
 19660  0057E2  D7FE               	bra	u16287
 19661  0057E4  2E19               	decfsz	??_dummy_clocks^0,f,c
 19662  0057E6  D7FC               	bra	u16287
 19663  0057E8  D000               	nop2	
 19664                           
 19665                           ;SDCard.c: 79: for(i=0;i<n;i++)
 19666  0057EA  0E00               	movlw	0
 19667  0057EC  6E1D               	movwf	(dummy_clocks@i+1)^0,c
 19668  0057EE  0E00               	movlw	0
 19669  0057F0  6E1C               	movwf	dummy_clocks@i^0,c
 19670  0057F2  D006               	goto	l11157
 19671  0057F4                     l572:
 19672                           
 19673                           ;SDCard.c: 80: {;SDCard.c: 81: LATBbits.LATB5 = 1;
 19674  0057F4  8A8A               	bsf	138,5,c	;volatile
 19675                           
 19676                           ;SDCard.c: 82: leitura_SPI();
 19677  0057F6  EC59  F02F         	call	_leitura_SPI	;wreg free
 19678                           
 19679                           ;SDCard.c: 83: LATBbits.LATB5 = 0;
 19680  0057FA  9A8A               	bcf	138,5,c	;volatile
 19681  0057FC  4A1C               	infsnz	dummy_clocks@i^0,f,c
 19682  0057FE  2A1D               	incf	(dummy_clocks@i+1)^0,f,c
 19683  005800                     l11157:
 19684  005800  501B               	movf	dummy_clocks@n^0,w,c
 19685  005802  6E19               	movwf	??_dummy_clocks^0,c
 19686  005804  6A1A               	clrf	(??_dummy_clocks+1)^0,c
 19687  005806  5019               	movf	??_dummy_clocks^0,w,c
 19688  005808  5C1C               	subwf	dummy_clocks@i^0,w,c
 19689  00580A  501A               	movf	(??_dummy_clocks+1)^0,w,c
 19690  00580C  581D               	subwfb	(dummy_clocks@i+1)^0,w,c
 19691  00580E  B0D8               	btfsc	status,0,c
 19692  005810  0012               	return	
 19693  005812  D7F0               	goto	l572
 19694  005814                     __end_of_dummy_clocks:
 19695                           	callstack 0
 19696                           
 19697 ;; *************** function _leitura_SPI *****************
 19698 ;; Defined at:
 19699 ;;		line 82 in file "bibliotecas/SPI.c"
 19700 ;; Parameters:    Size  Location     Type
 19701 ;;		None
 19702 ;; Auto vars:     Size  Location     Type
 19703 ;;		None
 19704 ;; Return value:  Size  Location     Type
 19705 ;;                  1    wreg      unsigned char 
 19706 ;; Registers used:
 19707 ;;		wreg, status,2
 19708 ;; Tracked objects:
 19709 ;;		On entry : 0/0
 19710 ;;		On exit  : 0/0
 19711 ;;		Unchanged: 0/0
 19712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19713 ;;      Params:         0       0       0       0       0       0       0       0       0
 19714 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19715 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19716 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19717 ;;Total ram usage:        0 bytes
 19718 ;; Hardware stack levels used:    1
 19719 ;; Hardware stack levels required when called:    3
 19720 ;; This function calls:
 19721 ;;		Nothing
 19722 ;; This function is called by:
 19723 ;;		_sdc_disk_write
 19724 ;;		_response
 19725 ;;		_dummy_clocks
 19726 ;;		_wait_ready
 19727 ;; This function uses a non-reentrant model
 19728 ;;
 19729                           
 19730                           	psect	text105
 19731  005EB2                     __ptext105:
 19732                           	callstack 0
 19733  005EB2                     _leitura_SPI:
 19734                           	callstack 16
 19735                           
 19736                           ;SPI.c: 84: SSPBUF = 0xFF;
 19737                           
 19738                           ;incstack = 0
 19739  005EB2  68C9               	setf	201,c	;volatile
 19740                           
 19741                           ;SPI.c: 85: SSPSTATbits.BF = 0;
 19742  005EB4  90C7               	bcf	199,0,c	;volatile
 19743  005EB6                     l681:
 19744  005EB6  A0C7               	btfss	199,0,c	;volatile
 19745  005EB8  D7FE               	goto	l681
 19746                           
 19747                           ;SPI.c: 87: return (SSPBUF);
 19748  005EBA  50C9               	movf	201,w,c	;volatile
 19749  005EBC  0012               	return		;funcret
 19750  005EBE                     __end_of_leitura_SPI:
 19751                           	callstack 0
 19752                           
 19753 ;; *************** function _disk_ioctl *****************
 19754 ;; Defined at:
 19755 ;;		line 198 in file "bibliotecas/diskio.c"
 19756 ;; Parameters:    Size  Location     Type
 19757 ;;  pdrv            1    wreg     unsigned char 
 19758 ;;  cmd             1   24[COMRAM] unsigned char 
 19759 ;;  buff            2   25[COMRAM] PTR void 
 19760 ;;		 -> NULL(0), 
 19761 ;; Auto vars:     Size  Location     Type
 19762 ;;  pdrv            1   27[COMRAM] unsigned char 
 19763 ;;  result          2    0        int 
 19764 ;;  res             1   28[COMRAM] enum E25
 19765 ;; Return value:  Size  Location     Type
 19766 ;;                  1    wreg      enum E25
 19767 ;; Registers used:
 19768 ;;		wreg, status,2, status,0
 19769 ;; Tracked objects:
 19770 ;;		On entry : 3F/0
 19771 ;;		On exit  : 0/0
 19772 ;;		Unchanged: 0/0
 19773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19774 ;;      Params:         3       0       0       0       0       0       0       0       0
 19775 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19776 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19777 ;;      Totals:         5       0       0       0       0       0       0       0       0
 19778 ;;Total ram usage:        5 bytes
 19779 ;; Hardware stack levels used:    1
 19780 ;; Hardware stack levels required when called:    3
 19781 ;; This function calls:
 19782 ;;		Nothing
 19783 ;; This function is called by:
 19784 ;;		_sync
 19785 ;; This function uses a non-reentrant model
 19786 ;;
 19787                           
 19788                           	psect	text106
 19789  005C6C                     __ptext106:
 19790                           	callstack 0
 19791  005C6C                     _disk_ioctl:
 19792                           	callstack 21
 19793                           
 19794                           ;incstack = 0
 19795                           ;disk_ioctl@pdrv stored from wreg
 19796  005C6C  6E1C               	movwf	disk_ioctl@pdrv^0,c
 19797                           
 19798                           ;diskio.c: 204: DRESULT res;;diskio.c: 205: int result;;diskio.c: 207: switch (pdrv) {
 19799  005C6E  D002               	goto	l12101
 19800  005C70                     l68:
 19801                           
 19802                           ;diskio.c: 212: return res;
 19803  005C70  501D               	movf	disk_ioctl@res^0,w,c
 19804  005C72  0012               	return	
 19805  005C74                     l12101:
 19806  005C74  501C               	movf	disk_ioctl@pdrv^0,w,c
 19807                           
 19808                           ; Switch size 1, requested type "simple"
 19809                           ; Number of cases is 3, Range of values is 0 to 2
 19810                           ; switch strategies available:
 19811                           ; Name         Instructions Cycles
 19812                           ; simple_byte           10     6 (average)
 19813                           ;	Chosen strategy is simple_byte
 19814  005C76  0A00               	xorlw	0	; case 0
 19815  005C78  B4D8               	btfsc	status,2,c
 19816  005C7A  D7FA               	goto	l68
 19817  005C7C  0A01               	xorlw	1	; case 1
 19818  005C7E  B4D8               	btfsc	status,2,c
 19819  005C80  D7F7               	goto	l68
 19820  005C82  0A03               	xorlw	3	; case 2
 19821  005C84  B4D8               	btfsc	status,2,c
 19822  005C86  D7F4               	goto	l68
 19823                           
 19824                           ;diskio.c: 227: return RES_PARERR;
 19825  005C88  0E04               	movlw	4
 19826  005C8A  0012               	return		;funcret
 19827  005C8C                     __end_of_disk_ioctl:
 19828                           	callstack 0
 19829                           
 19830 ;; *************** function _get_fattime *****************
 19831 ;; Defined at:
 19832 ;;		line 810 in file "bibliotecas/tff.c"
 19833 ;; Parameters:    Size  Location     Type
 19834 ;;		None
 19835 ;; Auto vars:     Size  Location     Type
 19836 ;;  f_time         10   32[COMRAM] struct .
 19837 ;; Return value:  Size  Location     Type
 19838 ;;                  4   28[COMRAM] unsigned long 
 19839 ;; Registers used:
 19840 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19841 ;; Tracked objects:
 19842 ;;		On entry : 3F/0
 19843 ;;		On exit  : 3F/0
 19844 ;;		Unchanged: 0/0
 19845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19846 ;;      Params:         4       0       0       0       0       0       0       0       0
 19847 ;;      Locals:        10       0       0       0       0       0       0       0       0
 19848 ;;      Temps:          0      38       0       0       0       0       0       0       0
 19849 ;;      Totals:        14      38       0       0       0       0       0       0       0
 19850 ;;Total ram usage:       52 bytes
 19851 ;; Hardware stack levels used:    1
 19852 ;; Hardware stack levels required when called:    4
 19853 ;; This function calls:
 19854 ;;		_GPSDay
 19855 ;;		_GPSHour
 19856 ;;		_GPSMinute
 19857 ;;		_GPSMonth
 19858 ;;		_GPSSecond
 19859 ;;		_GPSyear
 19860 ;; This function is called by:
 19861 ;;		_f_open
 19862 ;;		_f_sync
 19863 ;; This function uses a non-reentrant model
 19864 ;;
 19865                           
 19866                           	psect	text107
 19867  003842                     __ptext107:
 19868                           	callstack 0
 19869  003842                     _get_fattime:
 19870                           	callstack 22
 19871                           
 19872                           ; BSR set to: 0
 19873                           ;tff.c: 812: fat_time f_time;;tff.c: 814: f_time.hora = GPSHour() - 3;
 19874                           
 19875                           ;incstack = 0
 19876  003842  EC9C  F02D         	call	_GPSHour	;wreg free
 19877  003846  0EFD               	movlw	253
 19878  003848  2419               	addwf	?_GPSHour^0,w,c
 19879  00384A  6E21               	movwf	get_fattime@f_time^0,c
 19880  00384C  0EFF               	movlw	255
 19881  00384E  201A               	addwfc	(?_GPSHour+1)^0,w,c
 19882  003850  6E22               	movwf	(get_fattime@f_time+1)^0,c
 19883                           
 19884                           ;tff.c: 815: f_time.min = GPSMinute();
 19885  003852  EC04  F02E         	call	_GPSMinute	;wreg free
 19886  003856  C019  F023         	movff	?_GPSMinute,get_fattime@f_time+2
 19887  00385A  C01A  F024         	movff	?_GPSMinute+1,get_fattime@f_time+3
 19888                           
 19889                           ;tff.c: 816: f_time.seg = GPSSecond();
 19890  00385E  ECE2  F02D         	call	_GPSSecond	;wreg free
 19891  003862  C019  F025         	movff	?_GPSSecond,get_fattime@f_time+4
 19892  003866  C01A  F026         	movff	?_GPSSecond+1,get_fattime@f_time+5
 19893                           
 19894                           ;tff.c: 817: f_time.ano = GPSyear() + 2000;
 19895  00386A  ECD1  F02D         	call	_GPSyear	;wreg free
 19896  00386E  0ED0               	movlw	208
 19897  003870  2419               	addwf	?_GPSyear^0,w,c
 19898  003872  6E29               	movwf	(get_fattime@f_time+8)^0,c
 19899  003874  0E07               	movlw	7
 19900  003876  201A               	addwfc	(?_GPSyear+1)^0,w,c
 19901  003878  6E2A               	movwf	(get_fattime@f_time+9)^0,c
 19902                           
 19903                           ;tff.c: 818: f_time.mes = GPSMonth();
 19904  00387A  ECF3  F02D         	call	_GPSMonth	;wreg free
 19905  00387E  5019               	movf	?_GPSMonth^0,w,c
 19906  003880  6E28               	movwf	(get_fattime@f_time+7)^0,c
 19907                           
 19908                           ;tff.c: 819: f_time.dia = GPSDay();
 19909  003882  EC15  F02E         	call	_GPSDay	;wreg free
 19910  003886  5019               	movf	?_GPSDay^0,w,c
 19911  003888  6E27               	movwf	(get_fattime@f_time+6)^0,c
 19912                           
 19913                           ; BSR set to: 1
 19914                           ;tff.c: 821: return (DWORD)(f_time.ano - 60) << 25 |;tff.c: 822: (DWORD)(f_time.mes) << 
      +                          21 |;tff.c: 823: (DWORD)(f_time.dia) << 16 |;tff.c: 824: (DWORD)(f_time.hora) << 11 |;tf
      +                          f.c: 825: (DWORD)(f_time.min) << 5 |;tff.c: 826: (DWORD)(f_time.seg) >> 1;
 19915  00388A  90D8               	bcf	status,0,c
 19916  00388C  3026               	rrcf	(get_fattime@f_time+5)^0,w,c
 19917  00388E  0100               	movlb	0	; () banked
 19918  003890  6F61               	movwf	(??_get_fattime+1)& (0+255),b
 19919  003892  3025               	rrcf	(get_fattime@f_time+4)^0,w,c
 19920  003894  6F60               	movwf	??_get_fattime& (0+255),b
 19921  003896  5023               	movf	(get_fattime@f_time+2)^0,w,c
 19922  003898  6F62               	movwf	(??_get_fattime+2)& (0+255),b
 19923  00389A  5024               	movf	(get_fattime@f_time+3)^0,w,c
 19924  00389C  6F63               	movwf	(??_get_fattime+3)& (0+255),b
 19925  00389E  6B64               	clrf	(??_get_fattime+4)& (0+255),b
 19926  0038A0  6B65               	clrf	(??_get_fattime+5)& (0+255),b
 19927  0038A2  0E05               	movlw	5
 19928  0038A4                     u13215:
 19929  0038A4  90D8               	bcf	status,0,c
 19930  0038A6  3762               	rlcf	(??_get_fattime+2)& (0+255),f,b
 19931  0038A8  3763               	rlcf	(??_get_fattime+3)& (0+255),f,b
 19932  0038AA  3764               	rlcf	(??_get_fattime+4)& (0+255),f,b
 19933  0038AC  3765               	rlcf	(??_get_fattime+5)& (0+255),f,b
 19934  0038AE  2EE8               	decfsz	wreg,f,c
 19935  0038B0  D7F9               	goto	u13215
 19936  0038B2  5021               	movf	get_fattime@f_time^0,w,c
 19937  0038B4  6F66               	movwf	(??_get_fattime+6)& (0+255),b
 19938  0038B6  5022               	movf	(get_fattime@f_time+1)^0,w,c
 19939  0038B8  6F67               	movwf	(??_get_fattime+7)& (0+255),b
 19940  0038BA  6B68               	clrf	(??_get_fattime+8)& (0+255),b
 19941  0038BC  6B69               	clrf	(??_get_fattime+9)& (0+255),b
 19942  0038BE  0E0B               	movlw	11
 19943  0038C0                     u13225:
 19944  0038C0  90D8               	bcf	status,0,c
 19945  0038C2  3766               	rlcf	(??_get_fattime+6)& (0+255),f,b
 19946  0038C4  3767               	rlcf	(??_get_fattime+7)& (0+255),f,b
 19947  0038C6  3768               	rlcf	(??_get_fattime+8)& (0+255),f,b
 19948  0038C8  3769               	rlcf	(??_get_fattime+9)& (0+255),f,b
 19949  0038CA  2EE8               	decfsz	wreg,f,c
 19950  0038CC  D7F9               	goto	u13225
 19951  0038CE  C027  F06A         	movff	get_fattime@f_time+6,??_get_fattime+10
 19952  0038D2  6B6B               	clrf	(??_get_fattime+11)& (0+255),b
 19953  0038D4  6B6C               	clrf	(??_get_fattime+12)& (0+255),b
 19954  0038D6  6B6D               	clrf	(??_get_fattime+13)& (0+255),b
 19955  0038D8  C06B  F06D         	movff	??_get_fattime+11,??_get_fattime+13
 19956  0038DC  C06A  F06C         	movff	??_get_fattime+10,??_get_fattime+12
 19957  0038E0  6B6B               	clrf	(??_get_fattime+11)& (0+255),b
 19958  0038E2  6B6A               	clrf	(??_get_fattime+10)& (0+255),b
 19959  0038E4  C028  F06E         	movff	get_fattime@f_time+7,??_get_fattime+14
 19960  0038E8  6B6F               	clrf	(??_get_fattime+15)& (0+255),b
 19961  0038EA  6B70               	clrf	(??_get_fattime+16)& (0+255),b
 19962  0038EC  6B71               	clrf	(??_get_fattime+17)& (0+255),b
 19963  0038EE  0E15               	movlw	21
 19964  0038F0                     u13235:
 19965  0038F0  90D8               	bcf	status,0,c
 19966  0038F2  376E               	rlcf	(??_get_fattime+14)& (0+255),f,b
 19967  0038F4  376F               	rlcf	(??_get_fattime+15)& (0+255),f,b
 19968  0038F6  3770               	rlcf	(??_get_fattime+16)& (0+255),f,b
 19969  0038F8  3771               	rlcf	(??_get_fattime+17)& (0+255),f,b
 19970  0038FA  2EE8               	decfsz	wreg,f,c
 19971  0038FC  D7F9               	goto	u13235
 19972  0038FE  0EC4               	movlw	196
 19973  003900  2429               	addwf	(get_fattime@f_time+8)^0,w,c
 19974  003902  6F72               	movwf	(??_get_fattime+18)& (0+255),b
 19975  003904  0EFF               	movlw	255
 19976  003906  202A               	addwfc	(get_fattime@f_time+9)^0,w,c
 19977  003908  6F73               	movwf	(??_get_fattime+19)& (0+255),b
 19978  00390A  6B74               	clrf	(??_get_fattime+20)& (0+255),b
 19979  00390C  6B75               	clrf	(??_get_fattime+21)& (0+255),b
 19980  00390E  0E19               	movlw	25
 19981  003910                     u13245:
 19982  003910  90D8               	bcf	status,0,c
 19983  003912  3772               	rlcf	(??_get_fattime+18)& (0+255),f,b
 19984  003914  3773               	rlcf	(??_get_fattime+19)& (0+255),f,b
 19985  003916  3774               	rlcf	(??_get_fattime+20)& (0+255),f,b
 19986  003918  3775               	rlcf	(??_get_fattime+21)& (0+255),f,b
 19987  00391A  2EE8               	decfsz	wreg,f,c
 19988  00391C  D7F9               	goto	u13245
 19989  00391E  516E               	movf	(??_get_fattime+14)& (0+255),w,b
 19990  003920  1172               	iorwf	(??_get_fattime+18)& (0+255),w,b
 19991  003922  6F76               	movwf	(??_get_fattime+22)& (0+255),b
 19992  003924  516F               	movf	(??_get_fattime+15)& (0+255),w,b
 19993  003926  1173               	iorwf	(??_get_fattime+19)& (0+255),w,b
 19994  003928  6F77               	movwf	(??_get_fattime+23)& (0+255),b
 19995  00392A  5170               	movf	(??_get_fattime+16)& (0+255),w,b
 19996  00392C  1174               	iorwf	(??_get_fattime+20)& (0+255),w,b
 19997  00392E  6F78               	movwf	(??_get_fattime+24)& (0+255),b
 19998  003930  5171               	movf	(??_get_fattime+17)& (0+255),w,b
 19999  003932  1175               	iorwf	(??_get_fattime+21)& (0+255),w,b
 20000  003934  6F79               	movwf	(??_get_fattime+25)& (0+255),b
 20001  003936  516A               	movf	(??_get_fattime+10)& (0+255),w,b
 20002  003938  1176               	iorwf	(??_get_fattime+22)& (0+255),w,b
 20003  00393A  6F7A               	movwf	(??_get_fattime+26)& (0+255),b
 20004  00393C  516B               	movf	(??_get_fattime+11)& (0+255),w,b
 20005  00393E  1177               	iorwf	(??_get_fattime+23)& (0+255),w,b
 20006  003940  6F7B               	movwf	(??_get_fattime+27)& (0+255),b
 20007  003942  516C               	movf	(??_get_fattime+12)& (0+255),w,b
 20008  003944  1178               	iorwf	(??_get_fattime+24)& (0+255),w,b
 20009  003946  6F7C               	movwf	(??_get_fattime+28)& (0+255),b
 20010  003948  516D               	movf	(??_get_fattime+13)& (0+255),w,b
 20011  00394A  1179               	iorwf	(??_get_fattime+25)& (0+255),w,b
 20012  00394C  6F7D               	movwf	(??_get_fattime+29)& (0+255),b
 20013  00394E  5166               	movf	(??_get_fattime+6)& (0+255),w,b
 20014  003950  117A               	iorwf	(??_get_fattime+26)& (0+255),w,b
 20015  003952  6F7E               	movwf	(??_get_fattime+30)& (0+255),b
 20016  003954  5167               	movf	(??_get_fattime+7)& (0+255),w,b
 20017  003956  117B               	iorwf	(??_get_fattime+27)& (0+255),w,b
 20018  003958  6F7F               	movwf	(??_get_fattime+31)& (0+255),b
 20019  00395A  5168               	movf	(??_get_fattime+8)& (0+255),w,b
 20020  00395C  117C               	iorwf	(??_get_fattime+28)& (0+255),w,b
 20021  00395E  6F80               	movwf	(??_get_fattime+32)& (0+255),b
 20022  003960  5169               	movf	(??_get_fattime+9)& (0+255),w,b
 20023  003962  117D               	iorwf	(??_get_fattime+29)& (0+255),w,b
 20024  003964  6F81               	movwf	(??_get_fattime+33)& (0+255),b
 20025  003966  5162               	movf	(??_get_fattime+2)& (0+255),w,b
 20026  003968  117E               	iorwf	(??_get_fattime+30)& (0+255),w,b
 20027  00396A  6F82               	movwf	(??_get_fattime+34)& (0+255),b
 20028  00396C  5163               	movf	(??_get_fattime+3)& (0+255),w,b
 20029  00396E  117F               	iorwf	(??_get_fattime+31)& (0+255),w,b
 20030  003970  6F83               	movwf	(??_get_fattime+35)& (0+255),b
 20031  003972  5164               	movf	(??_get_fattime+4)& (0+255),w,b
 20032  003974  1180               	iorwf	(??_get_fattime+32)& (0+255),w,b
 20033  003976  6F84               	movwf	(??_get_fattime+36)& (0+255),b
 20034  003978  5165               	movf	(??_get_fattime+5)& (0+255),w,b
 20035  00397A  1181               	iorwf	(??_get_fattime+33)& (0+255),w,b
 20036  00397C  6F85               	movwf	(??_get_fattime+37)& (0+255),b
 20037  00397E  5160               	movf	??_get_fattime& (0+255),w,b
 20038  003980  1182               	iorwf	(??_get_fattime+34)& (0+255),w,b
 20039  003982  6E1D               	movwf	?_get_fattime^0,c
 20040  003984  5161               	movf	(??_get_fattime+1)& (0+255),w,b
 20041  003986  1183               	iorwf	(??_get_fattime+35)& (0+255),w,b
 20042  003988  6E1E               	movwf	(?_get_fattime+1)^0,c
 20043  00398A  0E00               	movlw	0
 20044  00398C  1184               	iorwf	(??_get_fattime+36)& (0+255),w,b
 20045  00398E  6E1F               	movwf	(?_get_fattime+2)^0,c
 20046  003990  0E00               	movlw	0
 20047  003992  1185               	iorwf	(??_get_fattime+37)& (0+255),w,b
 20048  003994  6E20               	movwf	(?_get_fattime+3)^0,c
 20049                           
 20050                           ; BSR set to: 0
 20051  003996  0012               	return		;funcret
 20052  003998                     __end_of_get_fattime:
 20053                           	callstack 0
 20054                           
 20055 ;; *************** function _GPSyear *****************
 20056 ;; Defined at:
 20057 ;;		line 178 in file "bibliotecas/GPS.c"
 20058 ;; Parameters:    Size  Location     Type
 20059 ;;		None
 20060 ;; Auto vars:     Size  Location     Type
 20061 ;;		None
 20062 ;; Return value:  Size  Location     Type
 20063 ;;                  2   24[COMRAM] unsigned int 
 20064 ;; Registers used:
 20065 ;;		wreg, status,2, status,0, prodl, prodh
 20066 ;; Tracked objects:
 20067 ;;		On entry : 3F/1
 20068 ;;		On exit  : 3F/1
 20069 ;;		Unchanged: 0/0
 20070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20071 ;;      Params:         2       0       0       0       0       0       0       0       0
 20072 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20073 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20074 ;;      Totals:         4       0       0       0       0       0       0       0       0
 20075 ;;Total ram usage:        4 bytes
 20076 ;; Hardware stack levels used:    1
 20077 ;; Hardware stack levels required when called:    3
 20078 ;; This function calls:
 20079 ;;		Nothing
 20080 ;; This function is called by:
 20081 ;;		_get_fattime
 20082 ;; This function uses a non-reentrant model
 20083 ;;
 20084                           
 20085                           	psect	text108
 20086  005BA2                     __ptext108:
 20087                           	callstack 0
 20088  005BA2                     _GPSyear:
 20089                           	callstack 22
 20090                           
 20091                           ; BSR set to: 1
 20092                           ;GPS.c: 180: return ((rawDate[4] - '0') * 10 + (rawDate[5] - '0'));
 20093                           
 20094                           ; BSR set to: 0
 20095                           ;incstack = 0
 20096  005BA2  51ED               	movf	(_rawDate+4)& (0+255),w,b
 20097  005BA4  0D0A               	mullw	10
 20098  005BA6  CFF3 F01B          	movff	prodl,??_GPSyear
 20099  005BAA  CFF4 F01C          	movff	prodh,??_GPSyear+1
 20100  005BAE  51EE               	movf	(_rawDate+5)& (0+255),w,b
 20101  005BB0  261B               	addwf	??_GPSyear^0,f,c
 20102  005BB2  0E00               	movlw	0
 20103  005BB4  221C               	addwfc	(??_GPSyear+1)^0,f,c
 20104  005BB6  0EF0               	movlw	240
 20105  005BB8  241B               	addwf	??_GPSyear^0,w,c
 20106  005BBA  6E19               	movwf	?_GPSyear^0,c
 20107  005BBC  0EFD               	movlw	253
 20108  005BBE  201C               	addwfc	(??_GPSyear+1)^0,w,c
 20109  005BC0  6E1A               	movwf	(?_GPSyear+1)^0,c
 20110                           
 20111                           ; BSR set to: 1
 20112  005BC2  0012               	return		;funcret
 20113  005BC4                     __end_of_GPSyear:
 20114                           	callstack 0
 20115                           
 20116 ;; *************** function _GPSSecond *****************
 20117 ;; Defined at:
 20118 ;;		line 157 in file "bibliotecas/GPS.c"
 20119 ;; Parameters:    Size  Location     Type
 20120 ;;		None
 20121 ;; Auto vars:     Size  Location     Type
 20122 ;;		None
 20123 ;; Return value:  Size  Location     Type
 20124 ;;                  2   24[COMRAM] unsigned int 
 20125 ;; Registers used:
 20126 ;;		wreg, status,2, status,0, prodl, prodh
 20127 ;; Tracked objects:
 20128 ;;		On entry : 3F/1
 20129 ;;		On exit  : 3F/1
 20130 ;;		Unchanged: 0/0
 20131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20132 ;;      Params:         2       0       0       0       0       0       0       0       0
 20133 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20134 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20135 ;;      Totals:         4       0       0       0       0       0       0       0       0
 20136 ;;Total ram usage:        4 bytes
 20137 ;; Hardware stack levels used:    1
 20138 ;; Hardware stack levels required when called:    3
 20139 ;; This function calls:
 20140 ;;		Nothing
 20141 ;; This function is called by:
 20142 ;;		_get_fattime
 20143 ;; This function uses a non-reentrant model
 20144 ;;
 20145                           
 20146                           	psect	text109
 20147  005BC4                     __ptext109:
 20148                           	callstack 0
 20149  005BC4                     _GPSSecond:
 20150                           	callstack 22
 20151                           
 20152                           ; BSR set to: 1
 20153                           ;GPS.c: 159: return ((rawTime[4] - '0') * 10 + (rawTime[5] - '0'));
 20154                           
 20155                           ; BSR set to: 1
 20156                           ;incstack = 0
 20157  005BC4  51DA               	movf	(_rawTime+4)& (0+255),w,b
 20158  005BC6  0D0A               	mullw	10
 20159  005BC8  CFF3 F01B          	movff	prodl,??_GPSSecond
 20160  005BCC  CFF4 F01C          	movff	prodh,??_GPSSecond+1
 20161  005BD0  51DB               	movf	(_rawTime+5)& (0+255),w,b
 20162  005BD2  261B               	addwf	??_GPSSecond^0,f,c
 20163  005BD4  0E00               	movlw	0
 20164  005BD6  221C               	addwfc	(??_GPSSecond+1)^0,f,c
 20165  005BD8  0EF0               	movlw	240
 20166  005BDA  241B               	addwf	??_GPSSecond^0,w,c
 20167  005BDC  6E19               	movwf	?_GPSSecond^0,c
 20168  005BDE  0EFD               	movlw	253
 20169  005BE0  201C               	addwfc	(??_GPSSecond+1)^0,w,c
 20170  005BE2  6E1A               	movwf	(?_GPSSecond+1)^0,c
 20171                           
 20172                           ; BSR set to: 1
 20173  005BE4  0012               	return		;funcret
 20174  005BE6                     __end_of_GPSSecond:
 20175                           	callstack 0
 20176                           
 20177 ;; *************** function _GPSMonth *****************
 20178 ;; Defined at:
 20179 ;;		line 174 in file "bibliotecas/GPS.c"
 20180 ;; Parameters:    Size  Location     Type
 20181 ;;		None
 20182 ;; Auto vars:     Size  Location     Type
 20183 ;;		None
 20184 ;; Return value:  Size  Location     Type
 20185 ;;                  2   24[COMRAM] unsigned int 
 20186 ;; Registers used:
 20187 ;;		wreg, status,2, status,0, prodl, prodh
 20188 ;; Tracked objects:
 20189 ;;		On entry : 3F/1
 20190 ;;		On exit  : 3F/1
 20191 ;;		Unchanged: 0/0
 20192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20193 ;;      Params:         2       0       0       0       0       0       0       0       0
 20194 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20195 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20196 ;;      Totals:         4       0       0       0       0       0       0       0       0
 20197 ;;Total ram usage:        4 bytes
 20198 ;; Hardware stack levels used:    1
 20199 ;; Hardware stack levels required when called:    3
 20200 ;; This function calls:
 20201 ;;		Nothing
 20202 ;; This function is called by:
 20203 ;;		_get_fattime
 20204 ;; This function uses a non-reentrant model
 20205 ;;
 20206                           
 20207                           	psect	text110
 20208  005BE6                     __ptext110:
 20209                           	callstack 0
 20210  005BE6                     _GPSMonth:
 20211                           	callstack 22
 20212                           
 20213                           ; BSR set to: 1
 20214                           ;GPS.c: 176: return ((rawDate[2] - '0') * 10 + (rawDate[3] - '0'));
 20215                           
 20216                           ; BSR set to: 1
 20217                           ;incstack = 0
 20218  005BE6  51EB               	movf	(_rawDate+2)& (0+255),w,b
 20219  005BE8  0D0A               	mullw	10
 20220  005BEA  CFF3 F01B          	movff	prodl,??_GPSMonth
 20221  005BEE  CFF4 F01C          	movff	prodh,??_GPSMonth+1
 20222  005BF2  51EC               	movf	(_rawDate+3)& (0+255),w,b
 20223  005BF4  261B               	addwf	??_GPSMonth^0,f,c
 20224  005BF6  0E00               	movlw	0
 20225  005BF8  221C               	addwfc	(??_GPSMonth+1)^0,f,c
 20226  005BFA  0EF0               	movlw	240
 20227  005BFC  241B               	addwf	??_GPSMonth^0,w,c
 20228  005BFE  6E19               	movwf	?_GPSMonth^0,c
 20229  005C00  0EFD               	movlw	253
 20230  005C02  201C               	addwfc	(??_GPSMonth+1)^0,w,c
 20231  005C04  6E1A               	movwf	(?_GPSMonth+1)^0,c
 20232                           
 20233                           ; BSR set to: 1
 20234  005C06  0012               	return		;funcret
 20235  005C08                     __end_of_GPSMonth:
 20236                           	callstack 0
 20237                           
 20238 ;; *************** function _GPSMinute *****************
 20239 ;; Defined at:
 20240 ;;		line 161 in file "bibliotecas/GPS.c"
 20241 ;; Parameters:    Size  Location     Type
 20242 ;;		None
 20243 ;; Auto vars:     Size  Location     Type
 20244 ;;		None
 20245 ;; Return value:  Size  Location     Type
 20246 ;;                  2   24[COMRAM] unsigned int 
 20247 ;; Registers used:
 20248 ;;		wreg, status,2, status,0, prodl, prodh
 20249 ;; Tracked objects:
 20250 ;;		On entry : 3F/1
 20251 ;;		On exit  : 3F/1
 20252 ;;		Unchanged: 0/0
 20253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20254 ;;      Params:         2       0       0       0       0       0       0       0       0
 20255 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20256 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20257 ;;      Totals:         4       0       0       0       0       0       0       0       0
 20258 ;;Total ram usage:        4 bytes
 20259 ;; Hardware stack levels used:    1
 20260 ;; Hardware stack levels required when called:    3
 20261 ;; This function calls:
 20262 ;;		Nothing
 20263 ;; This function is called by:
 20264 ;;		_get_fattime
 20265 ;; This function uses a non-reentrant model
 20266 ;;
 20267                           
 20268                           	psect	text111
 20269  005C08                     __ptext111:
 20270                           	callstack 0
 20271  005C08                     _GPSMinute:
 20272                           	callstack 22
 20273                           
 20274                           ; BSR set to: 1
 20275                           ;GPS.c: 163: return ((rawTime[2] - '0') * 10 + (rawTime[3] - '0'));
 20276                           
 20277                           ; BSR set to: 1
 20278                           ;incstack = 0
 20279  005C08  51D8               	movf	(_rawTime+2)& (0+255),w,b
 20280  005C0A  0D0A               	mullw	10
 20281  005C0C  CFF3 F01B          	movff	prodl,??_GPSMinute
 20282  005C10  CFF4 F01C          	movff	prodh,??_GPSMinute+1
 20283  005C14  51D9               	movf	(_rawTime+3)& (0+255),w,b
 20284  005C16  261B               	addwf	??_GPSMinute^0,f,c
 20285  005C18  0E00               	movlw	0
 20286  005C1A  221C               	addwfc	(??_GPSMinute+1)^0,f,c
 20287  005C1C  0EF0               	movlw	240
 20288  005C1E  241B               	addwf	??_GPSMinute^0,w,c
 20289  005C20  6E19               	movwf	?_GPSMinute^0,c
 20290  005C22  0EFD               	movlw	253
 20291  005C24  201C               	addwfc	(??_GPSMinute+1)^0,w,c
 20292  005C26  6E1A               	movwf	(?_GPSMinute+1)^0,c
 20293                           
 20294                           ; BSR set to: 1
 20295  005C28  0012               	return		;funcret
 20296  005C2A                     __end_of_GPSMinute:
 20297                           	callstack 0
 20298                           
 20299 ;; *************** function _GPSHour *****************
 20300 ;; Defined at:
 20301 ;;		line 165 in file "bibliotecas/GPS.c"
 20302 ;; Parameters:    Size  Location     Type
 20303 ;;		None
 20304 ;; Auto vars:     Size  Location     Type
 20305 ;;		None
 20306 ;; Return value:  Size  Location     Type
 20307 ;;                  2   24[COMRAM] unsigned int 
 20308 ;; Registers used:
 20309 ;;		wreg, status,2, status,0, prodl, prodh
 20310 ;; Tracked objects:
 20311 ;;		On entry : 3F/0
 20312 ;;		On exit  : 3F/1
 20313 ;;		Unchanged: 0/0
 20314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20315 ;;      Params:         2       0       0       0       0       0       0       0       0
 20316 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20317 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20318 ;;      Totals:         4       0       0       0       0       0       0       0       0
 20319 ;;Total ram usage:        4 bytes
 20320 ;; Hardware stack levels used:    1
 20321 ;; Hardware stack levels required when called:    3
 20322 ;; This function calls:
 20323 ;;		Nothing
 20324 ;; This function is called by:
 20325 ;;		_get_fattime
 20326 ;; This function uses a non-reentrant model
 20327 ;;
 20328                           
 20329                           	psect	text112
 20330  005B38                     __ptext112:
 20331                           	callstack 0
 20332  005B38                     _GPSHour:
 20333                           	callstack 22
 20334                           
 20335                           ; BSR set to: 0
 20336                           ;GPS.c: 167: return (((rawTime[0] - '0') * 10 + (rawTime[1] - '0')));
 20337                           
 20338                           ; BSR set to: 1
 20339                           ;incstack = 0
 20340  005B38  0101               	movlb	1	; () banked
 20341  005B3A  51D6               	movf	_rawTime& (0+255),w,b
 20342  005B3C  0D0A               	mullw	10
 20343  005B3E  CFF3 F01B          	movff	prodl,??_GPSHour
 20344  005B42  CFF4 F01C          	movff	prodh,??_GPSHour+1
 20345  005B46  51D7               	movf	(_rawTime+1)& (0+255),w,b
 20346  005B48  261B               	addwf	??_GPSHour^0,f,c
 20347  005B4A  0E00               	movlw	0
 20348  005B4C  221C               	addwfc	(??_GPSHour+1)^0,f,c
 20349  005B4E  0EF0               	movlw	240
 20350  005B50  241B               	addwf	??_GPSHour^0,w,c
 20351  005B52  6E19               	movwf	?_GPSHour^0,c
 20352  005B54  0EFD               	movlw	253
 20353  005B56  201C               	addwfc	(??_GPSHour+1)^0,w,c
 20354  005B58  6E1A               	movwf	(?_GPSHour+1)^0,c
 20355                           
 20356                           ; BSR set to: 1
 20357  005B5A  0012               	return		;funcret
 20358  005B5C                     __end_of_GPSHour:
 20359                           	callstack 0
 20360                           
 20361 ;; *************** function _GPSDay *****************
 20362 ;; Defined at:
 20363 ;;		line 170 in file "bibliotecas/GPS.c"
 20364 ;; Parameters:    Size  Location     Type
 20365 ;;		None
 20366 ;; Auto vars:     Size  Location     Type
 20367 ;;		None
 20368 ;; Return value:  Size  Location     Type
 20369 ;;                  2   24[COMRAM] unsigned int 
 20370 ;; Registers used:
 20371 ;;		wreg, status,2, status,0, prodl, prodh
 20372 ;; Tracked objects:
 20373 ;;		On entry : 3F/1
 20374 ;;		On exit  : 3F/1
 20375 ;;		Unchanged: 0/0
 20376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20377 ;;      Params:         2       0       0       0       0       0       0       0       0
 20378 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20379 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20380 ;;      Totals:         4       0       0       0       0       0       0       0       0
 20381 ;;Total ram usage:        4 bytes
 20382 ;; Hardware stack levels used:    1
 20383 ;; Hardware stack levels required when called:    3
 20384 ;; This function calls:
 20385 ;;		Nothing
 20386 ;; This function is called by:
 20387 ;;		_get_fattime
 20388 ;; This function uses a non-reentrant model
 20389 ;;
 20390                           
 20391                           	psect	text113
 20392  005C2A                     __ptext113:
 20393                           	callstack 0
 20394  005C2A                     _GPSDay:
 20395                           	callstack 22
 20396                           
 20397                           ; BSR set to: 1
 20398                           ;GPS.c: 172: return ((rawDate[0] - '0') * 10 + (rawDate[1] - '0'));
 20399                           
 20400                           ; BSR set to: 1
 20401                           ;incstack = 0
 20402  005C2A  51E9               	movf	_rawDate& (0+255),w,b
 20403  005C2C  0D0A               	mullw	10
 20404  005C2E  CFF3 F01B          	movff	prodl,??_GPSDay
 20405  005C32  CFF4 F01C          	movff	prodh,??_GPSDay+1
 20406  005C36  51EA               	movf	(_rawDate+1)& (0+255),w,b
 20407  005C38  261B               	addwf	??_GPSDay^0,f,c
 20408  005C3A  0E00               	movlw	0
 20409  005C3C  221C               	addwfc	(??_GPSDay+1)^0,f,c
 20410  005C3E  0EF0               	movlw	240
 20411  005C40  241B               	addwf	??_GPSDay^0,w,c
 20412  005C42  6E19               	movwf	?_GPSDay^0,c
 20413  005C44  0EFD               	movlw	253
 20414  005C46  201C               	addwfc	(??_GPSDay+1)^0,w,c
 20415  005C48  6E1A               	movwf	(?_GPSDay+1)^0,c
 20416                           
 20417                           ; BSR set to: 1
 20418  005C4A  0012               	return		;funcret
 20419  005C4C                     __end_of_GPSDay:
 20420                           	callstack 0
 20421                           
 20422 ;; *************** function _data_nome *****************
 20423 ;; Defined at:
 20424 ;;		line 376 in file "bibliotecas/SDCard.c"
 20425 ;; Parameters:    Size  Location     Type
 20426 ;;  p_buff          2   24[COMRAM] PTR unsigned char 
 20427 ;;		 -> string_dado(69), 
 20428 ;; Auto vars:     Size  Location     Type
 20429 ;;  i               1   26[COMRAM] unsigned char 
 20430 ;; Return value:  Size  Location     Type
 20431 ;;                  1    wreg      void 
 20432 ;; Registers used:
 20433 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 20434 ;; Tracked objects:
 20435 ;;		On entry : 3F/2
 20436 ;;		On exit  : 3F/2
 20437 ;;		Unchanged: 3F/0
 20438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20439 ;;      Params:         2       0       0       0       0       0       0       0       0
 20440 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20441 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20442 ;;      Totals:         3       0       0       0       0       0       0       0       0
 20443 ;;Total ram usage:        3 bytes
 20444 ;; Hardware stack levels used:    1
 20445 ;; Hardware stack levels required when called:    3
 20446 ;; This function calls:
 20447 ;;		Nothing
 20448 ;; This function is called by:
 20449 ;;		_escrita_sdcard
 20450 ;; This function uses a non-reentrant model
 20451 ;;
 20452                           
 20453                           	psect	text114
 20454  005A2A                     __ptext114:
 20455                           	callstack 0
 20456  005A2A                     _data_nome:
 20457                           	callstack 24
 20458                           
 20459                           ; BSR set to: 2
 20460                           ;SDCard.c: 378: unsigned char i;;SDCard.c: 379: for(i=0; i<4;i++)
 20461                           
 20462                           ; BSR set to: 1
 20463                           ;incstack = 0
 20464  005A2A  0E00               	movlw	0
 20465  005A2C  6E1B               	movwf	data_nome@i^0,c
 20466  005A2E                     l13407:
 20467                           
 20468                           ; BSR set to: 2
 20469                           ;SDCard.c: 380: {;SDCard.c: 381: filename[i] = *p_buff;
 20470  005A2E  C019  FFD9         	movff	data_nome@p_buff,fsr2l
 20471  005A32  C01A  FFDA         	movff	data_nome@p_buff+1,fsr2h
 20472  005A36  0E6C               	movlw	low _filename
 20473  005A38  241B               	addwf	data_nome@i^0,w,c
 20474  005A3A  6EE1               	movwf	fsr1l,c
 20475  005A3C  6AE2               	clrf	fsr1h,c
 20476  005A3E  0E02               	movlw	high _filename
 20477  005A40  22E2               	addwfc	fsr1h,f,c
 20478  005A42  CFDF FFE7          	movff	indf2,indf1
 20479                           
 20480                           ; BSR set to: 2
 20481                           ;SDCard.c: 382: p_buff++;
 20482  005A46  4A19               	infsnz	data_nome@p_buff^0,f,c
 20483  005A48  2A1A               	incf	(data_nome@p_buff+1)^0,f,c
 20484                           
 20485                           ; BSR set to: 2
 20486  005A4A  2A1B               	incf	data_nome@i^0,f,c
 20487                           
 20488                           ; BSR set to: 2
 20489  005A4C  0E03               	movlw	3
 20490  005A4E  641B               	cpfsgt	data_nome@i^0,c
 20491  005A50  D7EE               	goto	l13407
 20492  005A52  0012               	return	
 20493  005A54                     __end_of_data_nome:
 20494                           	callstack 0
 20495                           
 20496 ;; *************** function _dados_gps_to_sd *****************
 20497 ;; Defined at:
 20498 ;;		line 223 in file "bibliotecas/GPS.c"
 20499 ;; Parameters:    Size  Location     Type
 20500 ;;		None
 20501 ;; Auto vars:     Size  Location     Type
 20502 ;;		None
 20503 ;; Return value:  Size  Location     Type
 20504 ;;                  1    wreg      void 
 20505 ;; Registers used:
 20506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20507 ;; Tracked objects:
 20508 ;;		On entry : 0/1
 20509 ;;		On exit  : 0/0
 20510 ;;		Unchanged: 0/0
 20511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20512 ;;      Params:         0       0       0       0       0       0       0       0       0
 20513 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20514 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20515 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20516 ;;Total ram usage:        0 bytes
 20517 ;; Hardware stack levels used:    1
 20518 ;; Hardware stack levels required when called:    5
 20519 ;; This function calls:
 20520 ;;		_monta_sd
 20521 ;; This function is called by:
 20522 ;;		_escrita_sdcard
 20523 ;; This function uses a non-reentrant model
 20524 ;;
 20525                           
 20526                           	psect	text115
 20527  0052F4                     __ptext115:
 20528                           	callstack 0
 20529  0052F4                     _dados_gps_to_sd:
 20530                           	callstack 22
 20531                           
 20532                           ;GPS.c: 225: monta_sd(0, rawTime);
 20533                           
 20534                           ; BSR set to: 2
 20535                           ;incstack = 0
 20536  0052F4  0ED6               	movlw	low _rawTime
 20537  0052F6  6E1D               	movwf	monta_sd@dado^0,c
 20538  0052F8  0E01               	movlw	high _rawTime
 20539  0052FA  6E1E               	movwf	(monta_sd@dado+1)^0,c
 20540  0052FC  0E00               	movlw	0
 20541  0052FE  ECC2  F014         	call	_monta_sd
 20542                           
 20543                           ;GPS.c: 226: monta_sd(1, rawDate);
 20544  005302  0EE9               	movlw	low _rawDate
 20545  005304  6E1D               	movwf	monta_sd@dado^0,c
 20546  005306  0E01               	movlw	high _rawDate
 20547  005308  6E1E               	movwf	(monta_sd@dado+1)^0,c
 20548  00530A  0E01               	movlw	1
 20549  00530C  ECC2  F014         	call	_monta_sd
 20550                           
 20551                           ;GPS.c: 227: monta_sd(2, rawLatitude);
 20552  005310  0E8D               	movlw	low _rawLatitude
 20553  005312  6E1D               	movwf	monta_sd@dado^0,c
 20554  005314  0E02               	movlw	high _rawLatitude
 20555  005316  6E1E               	movwf	(monta_sd@dado+1)^0,c
 20556  005318  0E02               	movlw	2
 20557  00531A  ECC2  F014         	call	_monta_sd
 20558                           
 20559                           ;GPS.c: 228: monta_sd(3, rawLongitude);
 20560  00531E  0E80               	movlw	low _rawLongitude
 20561  005320  6E1D               	movwf	monta_sd@dado^0,c
 20562  005322  0E02               	movlw	high _rawLongitude
 20563  005324  6E1E               	movwf	(monta_sd@dado+1)^0,c
 20564  005326  0E03               	movlw	3
 20565  005328  ECC2  F014         	call	_monta_sd
 20566                           
 20567                           ;GPS.c: 229: monta_sd(5, rawTime);
 20568  00532C  0ED6               	movlw	low _rawTime
 20569  00532E  6E1D               	movwf	monta_sd@dado^0,c
 20570  005330  0E01               	movlw	high _rawTime
 20571  005332  6E1E               	movwf	(monta_sd@dado+1)^0,c
 20572  005334  0E05               	movlw	5
 20573  005336  ECC2  F014         	call	_monta_sd
 20574                           
 20575                           ;GPS.c: 230: monta_sd(6, rawDate);
 20576  00533A  0EE9               	movlw	low _rawDate
 20577  00533C  6E1D               	movwf	monta_sd@dado^0,c
 20578  00533E  0E01               	movlw	high _rawDate
 20579  005340  6E1E               	movwf	(monta_sd@dado+1)^0,c
 20580  005342  0E06               	movlw	6
 20581  005344  ECC2  F014         	call	_monta_sd
 20582  005348  0012               	return		;funcret
 20583  00534A                     __end_of_dados_gps_to_sd:
 20584                           	callstack 0
 20585                           
 20586 ;; *************** function _monta_sd *****************
 20587 ;; Defined at:
 20588 ;;		line 307 in file "bibliotecas/SDCard.c"
 20589 ;; Parameters:    Size  Location     Type
 20590 ;;  index           1    wreg     unsigned char 
 20591 ;;  dado            2   28[COMRAM] PTR unsigned char 
 20592 ;;		 -> STR_25(7), STR_24(5), rawDate(7), rawLongitude(13), 
 20593 ;;		 -> rawLatitude(13), rawTime(11), 
 20594 ;; Auto vars:     Size  Location     Type
 20595 ;;  index           1   30[COMRAM] unsigned char 
 20596 ;;  i               1   32[COMRAM] unsigned char 
 20597 ;;  size            1   31[COMRAM] unsigned char 
 20598 ;; Return value:  Size  Location     Type
 20599 ;;                  1    wreg      void 
 20600 ;; Registers used:
 20601 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20602 ;; Tracked objects:
 20603 ;;		On entry : 0/1
 20604 ;;		On exit  : 0/0
 20605 ;;		Unchanged: 0/0
 20606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20607 ;;      Params:         2       0       0       0       0       0       0       0       0
 20608 ;;      Locals:         3       0       0       0       0       0       0       0       0
 20609 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20610 ;;      Totals:         5       0       0       0       0       0       0       0       0
 20611 ;;Total ram usage:        5 bytes
 20612 ;; Hardware stack levels used:    1
 20613 ;; Hardware stack levels required when called:    4
 20614 ;; This function calls:
 20615 ;;		_strlen
 20616 ;; This function is called by:
 20617 ;;		_dados_gps_to_sd
 20618 ;;		_verifica_fence_externo
 20619 ;; This function uses a non-reentrant model
 20620 ;;
 20621                           
 20622                           	psect	text116
 20623  002984                     __ptext116:
 20624                           	callstack 0
 20625  002984                     _monta_sd:
 20626                           	callstack 23
 20627                           
 20628                           ;incstack = 0
 20629                           ;monta_sd@index stored from wreg
 20630  002984  6E1F               	movwf	monta_sd@index^0,c
 20631                           
 20632                           ;SDCard.c: 309: unsigned char i, size;;SDCard.c: 310: size = strlen(dado);
 20633  002986  C01D  F019         	movff	monta_sd@dado,strlen@s
 20634  00298A  C01E  F01A         	movff	monta_sd@dado+1,strlen@s+1
 20635  00298E  ECAB  F02B         	call	_strlen	;wreg free
 20636  002992  5019               	movf	?_strlen^0,w,c
 20637  002994  6E20               	movwf	monta_sd@size^0,c
 20638                           
 20639                           ;SDCard.c: 311: switch(index)
 20640  002996  D0E2               	goto	l8869
 20641  002998                     l8773:
 20642                           
 20643                           ;SDCard.c: 314: for(i=0; i<6;i++)
 20644  002998  0E00               	movlw	0
 20645  00299A  6E21               	movwf	monta_sd@i^0,c
 20646  00299C                     l8779:
 20647                           
 20648                           ;SDCard.c: 315: {;SDCard.c: 316: string_dado.hora[i] = *dado;
 20649  00299C  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 20650  0029A0  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 20651  0029A4  6AF8               	clrf	tblptru,c
 20652  0029A6  0E1A               	movlw	low (_string_dado+7)
 20653  0029A8  2421               	addwf	monta_sd@i^0,w,c
 20654  0029AA  6ED9               	movwf	fsr2l,c
 20655  0029AC  6ADA               	clrf	fsr2h,c
 20656  0029AE  0E02               	movlw	high (_string_dado+7)
 20657  0029B0  22DA               	addwfc	fsr2h,f,c
 20658  0029B2  0E07               	movlw	(high __ramtop+-1)
 20659  0029B4  64F7               	cpfsgt	tblptrh,c
 20660  0029B6  D003               	bra	u7957
 20661  0029B8  0008               	tblrd		*
 20662  0029BA  50F5               	movf	tablat,w,c
 20663  0029BC  D005               	bra	u7950
 20664  0029BE                     u7957:
 20665  0029BE  CFF6 FFE1          	movff	tblptrl,fsr1l
 20666  0029C2  CFF7 FFE2          	movff	tblptrh,fsr1h
 20667  0029C6  50E7               	movf	indf1,w,c
 20668  0029C8                     u7950:
 20669  0029C8  6EDF               	movwf	indf2,c
 20670                           
 20671                           ;SDCard.c: 317: dado++;
 20672  0029CA  4A1D               	infsnz	monta_sd@dado^0,f,c
 20673  0029CC  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 20674  0029CE  2A21               	incf	monta_sd@i^0,f,c
 20675  0029D0  0E05               	movlw	5
 20676  0029D2  6421               	cpfsgt	monta_sd@i^0,c
 20677  0029D4  D7E3               	goto	l8779
 20678  0029D6  0012               	return	
 20679  0029D8                     l8787:
 20680                           
 20681                           ;SDCard.c: 322: for(i=0; i<6;i++)
 20682  0029D8  0E00               	movlw	0
 20683  0029DA  6E21               	movwf	monta_sd@i^0,c
 20684  0029DC                     l8793:
 20685                           
 20686                           ;SDCard.c: 323: {;SDCard.c: 324: string_dado.data[i] = *dado;
 20687  0029DC  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 20688  0029E0  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 20689  0029E4  6AF8               	clrf	tblptru,c
 20690  0029E6  0E13               	movlw	low _string_dado
 20691  0029E8  2421               	addwf	monta_sd@i^0,w,c
 20692  0029EA  6ED9               	movwf	fsr2l,c
 20693  0029EC  6ADA               	clrf	fsr2h,c
 20694  0029EE  0E02               	movlw	high _string_dado
 20695  0029F0  22DA               	addwfc	fsr2h,f,c
 20696  0029F2  0E07               	movlw	(high __ramtop+-1)
 20697  0029F4  64F7               	cpfsgt	tblptrh,c
 20698  0029F6  D003               	bra	u7977
 20699  0029F8  0008               	tblrd		*
 20700  0029FA  50F5               	movf	tablat,w,c
 20701  0029FC  D005               	bra	u7970
 20702  0029FE                     u7977:
 20703  0029FE  CFF6 FFE1          	movff	tblptrl,fsr1l
 20704  002A02  CFF7 FFE2          	movff	tblptrh,fsr1h
 20705  002A06  50E7               	movf	indf1,w,c
 20706  002A08                     u7970:
 20707  002A08  6EDF               	movwf	indf2,c
 20708                           
 20709                           ;SDCard.c: 325: dado++;
 20710  002A0A  4A1D               	infsnz	monta_sd@dado^0,f,c
 20711  002A0C  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 20712  002A0E  2A21               	incf	monta_sd@i^0,f,c
 20713  002A10  0E05               	movlw	5
 20714  002A12  6421               	cpfsgt	monta_sd@i^0,c
 20715  002A14  D7E3               	goto	l8793
 20716  002A16  0012               	return	
 20717  002A18                     l8801:
 20718                           
 20719                           ;SDCard.c: 330: for(i=0; i<13;i++)
 20720  002A18  0E00               	movlw	0
 20721  002A1A  6E21               	movwf	monta_sd@i^0,c
 20722  002A1C                     l8807:
 20723                           
 20724                           ;SDCard.c: 331: {;SDCard.c: 332: string_dado.lt[i] = *dado;
 20725  002A1C  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 20726  002A20  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 20727  002A24  6AF8               	clrf	tblptru,c
 20728  002A26  0E29               	movlw	low (_string_dado+22)
 20729  002A28  2421               	addwf	monta_sd@i^0,w,c
 20730  002A2A  6ED9               	movwf	fsr2l,c
 20731  002A2C  6ADA               	clrf	fsr2h,c
 20732  002A2E  0E02               	movlw	high (_string_dado+22)
 20733  002A30  22DA               	addwfc	fsr2h,f,c
 20734  002A32  0E07               	movlw	(high __ramtop+-1)
 20735  002A34  64F7               	cpfsgt	tblptrh,c
 20736  002A36  D003               	bra	u7997
 20737  002A38  0008               	tblrd		*
 20738  002A3A  50F5               	movf	tablat,w,c
 20739  002A3C  D005               	bra	u7990
 20740  002A3E                     u7997:
 20741  002A3E  CFF6 FFE1          	movff	tblptrl,fsr1l
 20742  002A42  CFF7 FFE2          	movff	tblptrh,fsr1h
 20743  002A46  50E7               	movf	indf1,w,c
 20744  002A48                     u7990:
 20745  002A48  6EDF               	movwf	indf2,c
 20746                           
 20747                           ;SDCard.c: 333: dado++;
 20748  002A4A  4A1D               	infsnz	monta_sd@dado^0,f,c
 20749  002A4C  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 20750  002A4E  2A21               	incf	monta_sd@i^0,f,c
 20751  002A50  0E0C               	movlw	12
 20752  002A52  6421               	cpfsgt	monta_sd@i^0,c
 20753  002A54  D7E3               	goto	l8807
 20754  002A56  0012               	return	
 20755  002A58                     l8815:
 20756                           
 20757                           ;SDCard.c: 338: for(i=0; i<13;i++)
 20758  002A58  0E00               	movlw	0
 20759  002A5A  6E21               	movwf	monta_sd@i^0,c
 20760  002A5C                     l8821:
 20761                           
 20762                           ;SDCard.c: 339: {;SDCard.c: 340: string_dado.lo[i] = *dado;
 20763  002A5C  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 20764  002A60  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 20765  002A64  6AF8               	clrf	tblptru,c
 20766  002A66  0E36               	movlw	low (_string_dado+35)
 20767  002A68  2421               	addwf	monta_sd@i^0,w,c
 20768  002A6A  6ED9               	movwf	fsr2l,c
 20769  002A6C  6ADA               	clrf	fsr2h,c
 20770  002A6E  0E02               	movlw	high (_string_dado+35)
 20771  002A70  22DA               	addwfc	fsr2h,f,c
 20772  002A72  0E07               	movlw	(high __ramtop+-1)
 20773  002A74  64F7               	cpfsgt	tblptrh,c
 20774  002A76  D003               	bra	u8017
 20775  002A78  0008               	tblrd		*
 20776  002A7A  50F5               	movf	tablat,w,c
 20777  002A7C  D005               	bra	u8010
 20778  002A7E                     u8017:
 20779  002A7E  CFF6 FFE1          	movff	tblptrl,fsr1l
 20780  002A82  CFF7 FFE2          	movff	tblptrh,fsr1h
 20781  002A86  50E7               	movf	indf1,w,c
 20782  002A88                     u8010:
 20783  002A88  6EDF               	movwf	indf2,c
 20784                           
 20785                           ;SDCard.c: 341: dado++;
 20786  002A8A  4A1D               	infsnz	monta_sd@dado^0,f,c
 20787  002A8C  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 20788  002A8E  2A21               	incf	monta_sd@i^0,f,c
 20789  002A90  0E0C               	movlw	12
 20790  002A92  6421               	cpfsgt	monta_sd@i^0,c
 20791  002A94  D7E3               	goto	l8821
 20792  002A96  0012               	return	
 20793  002A98                     l8829:
 20794                           
 20795                           ;SDCard.c: 346: for(i=0; i<size;i++)
 20796  002A98  0E00               	movlw	0
 20797  002A9A  6E21               	movwf	monta_sd@i^0,c
 20798  002A9C  D01A               	goto	l8837
 20799  002A9E                     l8831:
 20800                           
 20801                           ;SDCard.c: 347: {;SDCard.c: 348: string_dado.fence[i] = *dado;
 20802  002A9E  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 20803  002AA2  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 20804  002AA6  6AF8               	clrf	tblptru,c
 20805  002AA8  0E52               	movlw	low (_string_dado+63)
 20806  002AAA  2421               	addwf	monta_sd@i^0,w,c
 20807  002AAC  6ED9               	movwf	fsr2l,c
 20808  002AAE  6ADA               	clrf	fsr2h,c
 20809  002AB0  0E02               	movlw	high (_string_dado+63)
 20810  002AB2  22DA               	addwfc	fsr2h,f,c
 20811  002AB4  0E07               	movlw	(high __ramtop+-1)
 20812  002AB6  64F7               	cpfsgt	tblptrh,c
 20813  002AB8  D003               	bra	u8037
 20814  002ABA  0008               	tblrd		*
 20815  002ABC  50F5               	movf	tablat,w,c
 20816  002ABE  D005               	bra	u8030
 20817  002AC0                     u8037:
 20818  002AC0  CFF6 FFE1          	movff	tblptrl,fsr1l
 20819  002AC4  CFF7 FFE2          	movff	tblptrh,fsr1h
 20820  002AC8  50E7               	movf	indf1,w,c
 20821  002ACA                     u8030:
 20822  002ACA  6EDF               	movwf	indf2,c
 20823                           
 20824                           ;SDCard.c: 349: dado++;
 20825  002ACC  4A1D               	infsnz	monta_sd@dado^0,f,c
 20826  002ACE  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 20827  002AD0  2A21               	incf	monta_sd@i^0,f,c
 20828  002AD2                     l8837:
 20829  002AD2  5020               	movf	monta_sd@size^0,w,c
 20830  002AD4  5C21               	subwf	monta_sd@i^0,w,c
 20831  002AD6  B0D8               	btfsc	status,0,c
 20832  002AD8  0012               	return	
 20833  002ADA  D7E1               	goto	l8831
 20834  002ADC                     l8839:
 20835                           
 20836                           ;SDCard.c: 354: for(i=0; i<4;i++)
 20837  002ADC  0E00               	movlw	0
 20838  002ADE  6E21               	movwf	monta_sd@i^0,c
 20839  002AE0                     l8845:
 20840                           
 20841                           ;SDCard.c: 355: {;SDCard.c: 356: string_dado.hora_name[i] = *dado;
 20842  002AE0  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 20843  002AE4  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 20844  002AE8  6AF8               	clrf	tblptru,c
 20845  002AEA  0E27               	movlw	low (_string_dado+20)
 20846  002AEC  2421               	addwf	monta_sd@i^0,w,c
 20847  002AEE  6ED9               	movwf	fsr2l,c
 20848  002AF0  6ADA               	clrf	fsr2h,c
 20849  002AF2  0E02               	movlw	high (_string_dado+20)
 20850  002AF4  22DA               	addwfc	fsr2h,f,c
 20851  002AF6  0E07               	movlw	(high __ramtop+-1)
 20852  002AF8  64F7               	cpfsgt	tblptrh,c
 20853  002AFA  D003               	bra	u8057
 20854  002AFC  0008               	tblrd		*
 20855  002AFE  50F5               	movf	tablat,w,c
 20856  002B00  D005               	bra	u8050
 20857  002B02                     u8057:
 20858  002B02  CFF6 FFE1          	movff	tblptrl,fsr1l
 20859  002B06  CFF7 FFE2          	movff	tblptrh,fsr1h
 20860  002B0A  50E7               	movf	indf1,w,c
 20861  002B0C                     u8050:
 20862  002B0C  6EDF               	movwf	indf2,c
 20863                           
 20864                           ;SDCard.c: 357: dado++;
 20865  002B0E  4A1D               	infsnz	monta_sd@dado^0,f,c
 20866  002B10  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 20867  002B12  2A21               	incf	monta_sd@i^0,f,c
 20868  002B14  0E03               	movlw	3
 20869  002B16  6421               	cpfsgt	monta_sd@i^0,c
 20870  002B18  D7E3               	goto	l8845
 20871  002B1A  0012               	return	
 20872  002B1C                     l8853:
 20873                           
 20874                           ;SDCard.c: 363: for(i=0; i<6;i++)
 20875  002B1C  0E00               	movlw	0
 20876  002B1E  6E21               	movwf	monta_sd@i^0,c
 20877  002B20                     l8859:
 20878                           
 20879                           ;SDCard.c: 364: {;SDCard.c: 365: string_dado.data_name[i] = *dado;
 20880  002B20  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 20881  002B24  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 20882  002B28  6AF8               	clrf	tblptru,c
 20883  002B2A  0E25               	movlw	low (_string_dado+18)
 20884  002B2C  2421               	addwf	monta_sd@i^0,w,c
 20885  002B2E  6ED9               	movwf	fsr2l,c
 20886  002B30  6ADA               	clrf	fsr2h,c
 20887  002B32  0E02               	movlw	high (_string_dado+18)
 20888  002B34  22DA               	addwfc	fsr2h,f,c
 20889  002B36  0E07               	movlw	(high __ramtop+-1)
 20890  002B38  64F7               	cpfsgt	tblptrh,c
 20891  002B3A  D003               	bra	u8077
 20892  002B3C  0008               	tblrd		*
 20893  002B3E  50F5               	movf	tablat,w,c
 20894  002B40  D005               	bra	u8070
 20895  002B42                     u8077:
 20896  002B42  CFF6 FFE1          	movff	tblptrl,fsr1l
 20897  002B46  CFF7 FFE2          	movff	tblptrh,fsr1h
 20898  002B4A  50E7               	movf	indf1,w,c
 20899  002B4C                     u8070:
 20900  002B4C  6EDF               	movwf	indf2,c
 20901                           
 20902                           ;SDCard.c: 366: dado++;
 20903  002B4E  4A1D               	infsnz	monta_sd@dado^0,f,c
 20904  002B50  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 20905  002B52  2A21               	incf	monta_sd@i^0,f,c
 20906  002B54  0E05               	movlw	5
 20907  002B56  6421               	cpfsgt	monta_sd@i^0,c
 20908  002B58  D7E3               	goto	l8859
 20909  002B5A  0012               	return	
 20910  002B5C                     l8869:
 20911  002B5C  501F               	movf	monta_sd@index^0,w,c
 20912                           
 20913                           ; Switch size 1, requested type "simple"
 20914                           ; Number of cases is 7, Range of values is 0 to 6
 20915                           ; switch strategies available:
 20916                           ; Name         Instructions Cycles
 20917                           ; simple_byte           22    12 (average)
 20918                           ;	Chosen strategy is simple_byte
 20919  002B5E  0A00               	xorlw	0	; case 0
 20920  002B60  B4D8               	btfsc	status,2,c
 20921  002B62  D71A               	goto	l8773
 20922  002B64  0A01               	xorlw	1	; case 1
 20923  002B66  B4D8               	btfsc	status,2,c
 20924  002B68  D737               	goto	l8787
 20925  002B6A  0A03               	xorlw	3	; case 2
 20926  002B6C  B4D8               	btfsc	status,2,c
 20927  002B6E  D754               	goto	l8801
 20928  002B70  0A01               	xorlw	1	; case 3
 20929  002B72  B4D8               	btfsc	status,2,c
 20930  002B74  D771               	goto	l8815
 20931  002B76  0A07               	xorlw	7	; case 4
 20932  002B78  B4D8               	btfsc	status,2,c
 20933  002B7A  D78E               	goto	l8829
 20934  002B7C  0A01               	xorlw	1	; case 5
 20935  002B7E  B4D8               	btfsc	status,2,c
 20936  002B80  D7AD               	goto	l8839
 20937  002B82  0A03               	xorlw	3	; case 6
 20938  002B84  A4D8               	btfss	status,2,c
 20939  002B86  0012               	return	
 20940  002B88  D7C9               	goto	l8853
 20941  002B8A                     __end_of_monta_sd:
 20942                           	callstack 0
 20943                           
 20944 ;; *************** function _strlen *****************
 20945 ;; Defined at:
 20946 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strlen.c"
 20947 ;; Parameters:    Size  Location     Type
 20948 ;;  s               2   24[COMRAM] PTR const unsigned char 
 20949 ;;		 -> STR_25(7), STR_24(5), rawDate(7), rawLongitude(13), 
 20950 ;;		 -> rawLatitude(13), rawTime(11), 
 20951 ;; Auto vars:     Size  Location     Type
 20952 ;;  cp              2   26[COMRAM] PTR const unsigned char 
 20953 ;;		 -> STR_25(7), STR_24(5), rawDate(7), rawLongitude(13), 
 20954 ;;		 -> rawLatitude(13), rawTime(11), 
 20955 ;; Return value:  Size  Location     Type
 20956 ;;                  2   24[COMRAM] unsigned int 
 20957 ;; Registers used:
 20958 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
 20959 ;; Tracked objects:
 20960 ;;		On entry : 0/1
 20961 ;;		On exit  : 0/0
 20962 ;;		Unchanged: 0/0
 20963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20964 ;;      Params:         2       0       0       0       0       0       0       0       0
 20965 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20966 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20967 ;;      Totals:         4       0       0       0       0       0       0       0       0
 20968 ;;Total ram usage:        4 bytes
 20969 ;; Hardware stack levels used:    1
 20970 ;; Hardware stack levels required when called:    3
 20971 ;; This function calls:
 20972 ;;		Nothing
 20973 ;; This function is called by:
 20974 ;;		_monta_sd
 20975 ;; This function uses a non-reentrant model
 20976 ;;
 20977                           
 20978                           	psect	text117
 20979  005756                     __ptext117:
 20980                           	callstack 0
 20981  005756                     _strlen:
 20982                           	callstack 23
 20983                           
 20984                           ;incstack = 0
 20985  005756  C019  F01B         	movff	strlen@s,strlen@cp
 20986  00575A  C01A  F01C         	movff	strlen@s+1,strlen@cp+1
 20987  00575E  D002               	goto	l8163
 20988  005760                     l8161:
 20989  005760  4A1B               	infsnz	strlen@cp^0,f,c
 20990  005762  2A1C               	incf	(strlen@cp+1)^0,f,c
 20991  005764                     l8163:
 20992  005764  C01B  FFF6         	movff	strlen@cp,tblptrl
 20993  005768  C01C  FFF7         	movff	strlen@cp+1,tblptrh
 20994  00576C  6AF8               	clrf	tblptru,c
 20995  00576E  0E07               	movlw	(high __ramtop+-1)
 20996  005770  64F7               	cpfsgt	tblptrh,c
 20997  005772  D003               	bra	u7247
 20998  005774  0008               	tblrd		*
 20999  005776  50F5               	movf	tablat,w,c
 21000  005778  D005               	bra	u7240
 21001  00577A                     u7247:
 21002  00577A  CFF6 FFE1          	movff	tblptrl,fsr1l
 21003  00577E  CFF7 FFE2          	movff	tblptrh,fsr1h
 21004  005782  50E7               	movf	indf1,w,c
 21005  005784                     u7240:
 21006  005784  0900               	iorlw	0
 21007  005786  A4D8               	btfss	status,2,c
 21008  005788  D7EB               	goto	l8161
 21009  00578A  5019               	movf	strlen@s^0,w,c
 21010  00578C  5C1B               	subwf	strlen@cp^0,w,c
 21011  00578E  6E19               	movwf	?_strlen^0,c
 21012  005790  501A               	movf	(strlen@s+1)^0,w,c
 21013  005792  581C               	subwfb	(strlen@cp+1)^0,w,c
 21014  005794  6E1A               	movwf	(?_strlen+1)^0,c
 21015  005796  0012               	return		;funcret
 21016  005798                     __end_of_strlen:
 21017                           	callstack 0
 21018                           
 21019 ;; *************** function _MCP2515_INIT *****************
 21020 ;; Defined at:
 21021 ;;		line 1268 in file "MCP2515.c"
 21022 ;; Parameters:    Size  Location     Type
 21023 ;;		None
 21024 ;; Auto vars:     Size  Location     Type
 21025 ;;		None
 21026 ;; Return value:  Size  Location     Type
 21027 ;;                  1    wreg      void 
 21028 ;; Registers used:
 21029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21030 ;; Tracked objects:
 21031 ;;		On entry : 0/1
 21032 ;;		On exit  : 0/0
 21033 ;;		Unchanged: 0/0
 21034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21035 ;;      Params:         0       0       0       0       0       0       0       0       0
 21036 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21037 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21038 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21039 ;;Total ram usage:        0 bytes
 21040 ;; Hardware stack levels used:    1
 21041 ;; Hardware stack levels required when called:    9
 21042 ;; This function calls:
 21043 ;;		_SPI1_Initialize
 21044 ;;		_begin
 21045 ;;		_setMode
 21046 ;; This function is called by:
 21047 ;;		_disparo_gravacao
 21048 ;; This function uses a non-reentrant model
 21049 ;;
 21050                           
 21051                           	psect	text118
 21052  005D22                     __ptext118:
 21053                           	callstack 0
 21054  005D22                     _MCP2515_INIT:
 21055                           	callstack 19
 21056                           
 21057                           ;MCP2515.c: 1270:     SPI1_Initialize();
 21058                           
 21059                           ;incstack = 0
 21060  005D22  ECAE  F02D         	call	_SPI1_Initialize	;wreg free
 21061                           
 21062                           ;MCP2515.c: 1271:     begin(3, 13, 2);
 21063  005D26  0E0D               	movlw	13
 21064  005D28  0100               	movlb	0	; () banked
 21065  005D2A  6F70               	movwf	begin@speedset& (0+255),b
 21066  005D2C  0E02               	movlw	2
 21067  005D2E  6F71               	movwf	begin@clockset& (0+255),b
 21068  005D30  0E03               	movlw	3
 21069  005D32  ECF7  F02E         	call	_begin
 21070                           
 21071                           ; BSR set to: 0
 21072                           ;MCP2515.c: 1272:     setMode(0);
 21073  005D36  0E00               	movlw	0
 21074  005D38  EC40  F02F         	call	_setMode
 21075  005D3C  0012               	return		;funcret
 21076  005D3E                     __end_of_MCP2515_INIT:
 21077                           	callstack 0
 21078                           
 21079 ;; *************** function _setMode *****************
 21080 ;; Defined at:
 21081 ;;		line 132 in file "MCP2515.c"
 21082 ;; Parameters:    Size  Location     Type
 21083 ;;  opMode          1    wreg     unsigned char 
 21084 ;; Auto vars:     Size  Location     Type
 21085 ;;  opMode          1   30[COMRAM] unsigned char 
 21086 ;; Return value:  Size  Location     Type
 21087 ;;                  1    wreg      unsigned char 
 21088 ;; Registers used:
 21089 ;;		wreg, status,2, status,0, cstack
 21090 ;; Tracked objects:
 21091 ;;		On entry : 3F/0
 21092 ;;		On exit  : 0/0
 21093 ;;		Unchanged: 0/0
 21094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21095 ;;      Params:         0       0       0       0       0       0       0       0       0
 21096 ;;      Locals:         1       0       0       0       0       0       0       0       0
 21097 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21098 ;;      Totals:         1       0       0       0       0       0       0       0       0
 21099 ;;Total ram usage:        1 bytes
 21100 ;; Hardware stack levels used:    1
 21101 ;; Hardware stack levels required when called:    6
 21102 ;; This function calls:
 21103 ;;		_mcp2515_setCANCTRL_Mode
 21104 ;; This function is called by:
 21105 ;;		_MCP2515_INIT
 21106 ;; This function uses a non-reentrant model
 21107 ;;
 21108                           
 21109                           	psect	text119
 21110  005E80                     __ptext119:
 21111                           	callstack 0
 21112  005E80                     _setMode:
 21113                           	callstack 21
 21114                           
 21115                           ;incstack = 0
 21116                           ;setMode@opMode stored from wreg
 21117  005E80  6E1F               	movwf	setMode@opMode^0,c
 21118                           
 21119                           ;MCP2515.c: 132: unsigned char setMode(unsigned char opMode);MCP2515.c: 133: {;MCP2515.c
      +                          : 134:     mcpMode = opMode;
 21120  005E82  C01F  F039         	movff	setMode@opMode,_mcpMode
 21121                           
 21122                           ;MCP2515.c: 135:     return mcp2515_setCANCTRL_Mode(mcpMode);;	Return value of _setMode 
      +                          is never used
 21123  005E86  5039               	movf	_mcpMode^0,w,c
 21124  005E88  ECD5  F02C         	call	_mcp2515_setCANCTRL_Mode
 21125  005E8C  0012               	return		;funcret
 21126  005E8E                     __end_of_setMode:
 21127                           	callstack 0
 21128                           
 21129 ;; *************** function _begin *****************
 21130 ;; Defined at:
 21131 ;;		line 738 in file "MCP2515.c"
 21132 ;; Parameters:    Size  Location     Type
 21133 ;;  idmodeset       1    wreg     unsigned char 
 21134 ;;  speedset        1   16[BANK0 ] unsigned char 
 21135 ;;  clockset        1   17[BANK0 ] unsigned char 
 21136 ;; Auto vars:     Size  Location     Type
 21137 ;;  idmodeset       1   18[BANK0 ] unsigned char 
 21138 ;;  res             1    0        unsigned char 
 21139 ;; Return value:  Size  Location     Type
 21140 ;;                  1    wreg      unsigned char 
 21141 ;; Registers used:
 21142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21143 ;; Tracked objects:
 21144 ;;		On entry : 3F/0
 21145 ;;		On exit  : 3F/0
 21146 ;;		Unchanged: 0/0
 21147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21148 ;;      Params:         0       2       0       0       0       0       0       0       0
 21149 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21150 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21151 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21152 ;;Total ram usage:        4 bytes
 21153 ;; Hardware stack levels used:    1
 21154 ;; Hardware stack levels required when called:    8
 21155 ;; This function calls:
 21156 ;;		_mcp2515_init
 21157 ;; This function is called by:
 21158 ;;		_MCP2515_INIT
 21159 ;; This function uses a non-reentrant model
 21160 ;;
 21161                           
 21162                           	psect	text120
 21163  005DEE                     __ptext120:
 21164                           	callstack 0
 21165  005DEE                     _begin:
 21166                           	callstack 19
 21167                           
 21168                           ;incstack = 0
 21169                           ;begin@idmodeset stored from wreg
 21170  005DEE  6F72               	movwf	begin@idmodeset& (0+255),b
 21171  005DF0  C070  F02E         	movff	begin@speedset,mcp2515_init@canSpeed
 21172  005DF4  C071  F02F         	movff	begin@clockset,mcp2515_init@canClock
 21173  005DF8  0100               	movlb	0	; () banked
 21174  005DFA  5172               	movf	begin@idmodeset& (0+255),w,b
 21175  005DFC  EC76  F021         	call	_mcp2515_init
 21176                           
 21177                           ; BSR set to: 0
 21178  005E00  0012               	return		;funcret
 21179  005E02                     __end_of_begin:
 21180                           	callstack 0
 21181                           
 21182 ;; *************** function _mcp2515_init *****************
 21183 ;; Defined at:
 21184 ;;		line 474 in file "MCP2515.c"
 21185 ;; Parameters:    Size  Location     Type
 21186 ;;  canIDMode       1    wreg     unsigned char 
 21187 ;;  canSpeed        1   45[COMRAM] unsigned char 
 21188 ;;  canClock        1   46[COMRAM] unsigned char 
 21189 ;; Auto vars:     Size  Location     Type
 21190 ;;  canIDMode       1   14[BANK0 ] unsigned char 
 21191 ;;  res             1   15[BANK0 ] unsigned char 
 21192 ;; Return value:  Size  Location     Type
 21193 ;;                  1    wreg      unsigned char 
 21194 ;; Registers used:
 21195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21196 ;; Tracked objects:
 21197 ;;		On entry : 3F/0
 21198 ;;		On exit  : 3F/0
 21199 ;;		Unchanged: 0/0
 21200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21201 ;;      Params:         2       0       0       0       0       0       0       0       0
 21202 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21203 ;;      Temps:          2       0       0       0       0       0       0       0       0
 21204 ;;      Totals:         4       2       0       0       0       0       0       0       0
 21205 ;;Total ram usage:        6 bytes
 21206 ;; Hardware stack levels used:    1
 21207 ;; Hardware stack levels required when called:    7
 21208 ;; This function calls:
 21209 ;;		_mcp2515_configRate
 21210 ;;		_mcp2515_initCANBuffers
 21211 ;;		_mcp2515_modifyRegister
 21212 ;;		_mcp2515_reset
 21213 ;;		_mcp2515_setCANCTRL_Mode
 21214 ;;		_mcp2515_setRegister
 21215 ;; This function is called by:
 21216 ;;		_begin
 21217 ;; This function uses a non-reentrant model
 21218 ;;
 21219                           
 21220                           	psect	text121
 21221  0042EC                     __ptext121:
 21222                           	callstack 0
 21223  0042EC                     _mcp2515_init:
 21224                           	callstack 19
 21225                           
 21226                           ; BSR set to: 0
 21227                           ;incstack = 0
 21228                           ;mcp2515_init@canIDMode stored from wreg
 21229  0042EC  6F6E               	movwf	mcp2515_init@canIDMode& (0+255),b
 21230                           
 21231                           ;MCP2515.c: 474: unsigned char mcp2515_init(unsigned char canIDMode, unsigned char canSp
      +                          eed, unsigned char canClock);MCP2515.c: 475: {;MCP2515.c: 477:   unsigned char res;;MCP2
      +                          515.c: 479:     mcp2515_reset();
 21232  0042EE  EC9F  F02E         	call	_mcp2515_reset	;wreg free
 21233                           
 21234                           ;MCP2515.c: 481:     mcpMode = 0x40;
 21235  0042F2  0E40               	movlw	64
 21236  0042F4  6E39               	movwf	_mcpMode^0,c
 21237                           
 21238                           ;MCP2515.c: 483:     res = mcp2515_setCANCTRL_Mode(0x80);
 21239  0042F6  0E80               	movlw	128
 21240  0042F8  ECD5  F02C         	call	_mcp2515_setCANCTRL_Mode
 21241  0042FC  0100               	movlb	0	; () banked
 21242  0042FE  6F6F               	movwf	mcp2515_init@res& (0+255),b
 21243                           
 21244                           ; BSR set to: 0
 21245                           ;MCP2515.c: 484:     if(res > 0)
 21246  004300  516F               	movf	mcp2515_init@res& (0+255),w,b
 21247  004302  B4D8               	btfsc	status,2,c
 21248  004304  D003               	goto	l13151
 21249  004306                     u14120:
 21250                           
 21251                           ;MCP2515.c: 485:     {;MCP2515.c: 489:       return res;
 21252  004306  0100               	movlb	0	; () banked
 21253  004308  516F               	movf	mcp2515_init@res& (0+255),w,b
 21254  00430A  0012               	return	
 21255  00430C                     l13151:
 21256                           
 21257                           ; BSR set to: 0
 21258                           ;MCP2515.c: 496:     if(mcp2515_configRate(canSpeed, canClock))
 21259  00430C  C02F  F01C         	movff	mcp2515_init@canClock,mcp2515_configRate@canClock
 21260  004310  502E               	movf	mcp2515_init@canSpeed^0,w,c
 21261  004312  ECB8  F013         	call	_mcp2515_configRate
 21262  004316  0900               	iorlw	0
 21263  004318  A4D8               	btfss	status,2,c
 21264  00431A  D7F5               	goto	u14120
 21265                           
 21266                           ;MCP2515.c: 507:     if ( res == (0) ) {
 21267  00431C  0100               	movlb	0	; () banked
 21268  00431E  516F               	movf	mcp2515_init@res& (0+255),w,b
 21269  004320  A4D8               	btfss	status,2,c
 21270  004322  D7F1               	goto	u14120
 21271                           
 21272                           ; BSR set to: 0
 21273                           ;MCP2515.c: 510:         mcp2515_initCANBuffers();
 21274  004324  ECCC  F01C         	call	_mcp2515_initCANBuffers	;wreg free
 21275                           
 21276                           ;MCP2515.c: 513:         mcp2515_setRegister(0x2B, 0x01 | 0x02);
 21277  004328  0E03               	movlw	3
 21278  00432A  6E1A               	movwf	mcp2515_setRegister@value^0,c
 21279  00432C  0E2B               	movlw	43
 21280  00432E  ECD4  F02E         	call	_mcp2515_setRegister
 21281                           
 21282                           ;MCP2515.c: 516:  mcp2515_setRegister(0x0C,0x30 | 0x0C);
 21283  004332  0E3C               	movlw	60
 21284  004334  6E1A               	movwf	mcp2515_setRegister@value^0,c
 21285  004336  0E0C               	movlw	12
 21286  004338  ECD4  F02E         	call	_mcp2515_setRegister
 21287                           
 21288                           ;MCP2515.c: 518:  mcp2515_setRegister(0x0D,0x00);
 21289  00433C  0E00               	movlw	0
 21290  00433E  6E1A               	movwf	mcp2515_setRegister@value^0,c
 21291  004340  0E0D               	movlw	13
 21292  004342  ECD4  F02E         	call	_mcp2515_setRegister
 21293                           
 21294                           ;MCP2515.c: 520:         switch(canIDMode)
 21295  004346  D020               	goto	l13179
 21296  004348                     l13167:
 21297                           
 21298                           ; BSR set to: 0
 21299                           ;MCP2515.c: 523:             mcp2515_modifyRegister(0x60,
 21300  004348  0E64               	movlw	100
 21301  00434A  6E1A               	movwf	mcp2515_modifyRegister@mask^0,c
 21302  00434C  0E64               	movlw	100
 21303  00434E  6E1B               	movwf	mcp2515_modifyRegister@data^0,c
 21304  004350  0E60               	movlw	96
 21305  004352  EC46  F02E         	call	_mcp2515_modifyRegister
 21306                           
 21307                           ;MCP2515.c: 526:             mcp2515_modifyRegister(0x70, 0x60,
 21308  004356  0E60               	movlw	96
 21309  004358  6E1A               	movwf	mcp2515_modifyRegister@mask^0,c
 21310  00435A  0E60               	movlw	96
 21311  00435C  6E1B               	movwf	mcp2515_modifyRegister@data^0,c
 21312  00435E  0E70               	movlw	112
 21313  004360  EC46  F02E         	call	_mcp2515_modifyRegister
 21314                           
 21315                           ;MCP2515.c: 528:             break;
 21316  004364  D021               	goto	l13181
 21317  004366                     l13169:
 21318                           
 21319                           ; BSR set to: 0
 21320                           ;MCP2515.c: 547:             mcp2515_modifyRegister(0x60,
 21321  004366  0E64               	movlw	100
 21322  004368  6E1A               	movwf	mcp2515_modifyRegister@mask^0,c
 21323  00436A  0E04               	movlw	4
 21324  00436C  6E1B               	movwf	mcp2515_modifyRegister@data^0,c
 21325  00436E  0E60               	movlw	96
 21326  004370  EC46  F02E         	call	_mcp2515_modifyRegister
 21327                           
 21328                           ;MCP2515.c: 550:             mcp2515_modifyRegister(0x70, 0x60,
 21329  004374  0E60               	movlw	96
 21330  004376  6E1A               	movwf	mcp2515_modifyRegister@mask^0,c
 21331  004378  0E00               	movlw	0
 21332  00437A  6E1B               	movwf	mcp2515_modifyRegister@data^0,c
 21333  00437C  0E70               	movlw	112
 21334  00437E  EC46  F02E         	call	_mcp2515_modifyRegister
 21335                           
 21336                           ;MCP2515.c: 552:             break;
 21337  004382  D012               	goto	l13181
 21338  004384                     l13171:
 21339                           
 21340                           ; BSR set to: 0
 21341                           ;MCP2515.c: 558:             return (1);
 21342  004384  0E01               	movlw	1
 21343  004386  0012               	return	
 21344  004388                     l13179:
 21345  004388  0100               	movlb	0	; () banked
 21346  00438A  516E               	movf	mcp2515_init@canIDMode& (0+255),w,b
 21347  00438C  6E30               	movwf	??_mcp2515_init^0,c
 21348  00438E  6A31               	clrf	(??_mcp2515_init+1)^0,c
 21349                           
 21350                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21351                           ; Switch size 1, requested type "simple"
 21352                           ; Number of cases is 1, Range of values is 0 to 0
 21353                           ; switch strategies available:
 21354                           ; Name         Instructions Cycles
 21355                           ; simple_byte            4     3 (average)
 21356                           ;	Chosen strategy is simple_byte
 21357  004390  5031               	movf	(??_mcp2515_init+1)^0,w,c
 21358  004392  0A00               	xorlw	0	; case 0
 21359  004394  A4D8               	btfss	status,2,c
 21360  004396  D7F6               	goto	l13171
 21361                           
 21362                           ; BSR set to: 0
 21363                           ; Switch size 1, requested type "simple"
 21364                           ; Number of cases is 2, Range of values is 0 to 3
 21365                           ; switch strategies available:
 21366                           ; Name         Instructions Cycles
 21367                           ; simple_byte            7     4 (average)
 21368                           ;	Chosen strategy is simple_byte
 21369  004398  5030               	movf	??_mcp2515_init^0,w,c
 21370  00439A  0A00               	xorlw	0	; case 0
 21371  00439C  B4D8               	btfsc	status,2,c
 21372  00439E  D7E3               	goto	l13169
 21373  0043A0  0A03               	xorlw	3	; case 3
 21374  0043A2  B4D8               	btfsc	status,2,c
 21375  0043A4  D7D1               	goto	l13167
 21376  0043A6  D7EE               	goto	l13171
 21377  0043A8                     l13181:
 21378                           
 21379                           ;MCP2515.c: 563:         res = mcp2515_setCANCTRL_Mode(mcpMode);
 21380  0043A8  5039               	movf	_mcpMode^0,w,c
 21381  0043AA  ECD5  F02C         	call	_mcp2515_setCANCTRL_Mode
 21382  0043AE  0100               	movlb	0	; () banked
 21383  0043B0  6F6F               	movwf	mcp2515_init@res& (0+255),b
 21384  0043B2  D7A9               	goto	u14120
 21385  0043B4                     __end_of_mcp2515_init:
 21386                           	callstack 0
 21387                           
 21388 ;; *************** function _mcp2515_setCANCTRL_Mode *****************
 21389 ;; Defined at:
 21390 ;;		line 142 in file "MCP2515.c"
 21391 ;; Parameters:    Size  Location     Type
 21392 ;;  newmode         1    wreg     unsigned char 
 21393 ;; Auto vars:     Size  Location     Type
 21394 ;;  newmode         1   29[COMRAM] unsigned char 
 21395 ;;  i               1   28[COMRAM] unsigned char 
 21396 ;; Return value:  Size  Location     Type
 21397 ;;                  1    wreg      unsigned char 
 21398 ;; Registers used:
 21399 ;;		wreg, status,2, status,0, cstack
 21400 ;; Tracked objects:
 21401 ;;		On entry : 0/0
 21402 ;;		On exit  : 0/0
 21403 ;;		Unchanged: 0/0
 21404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21405 ;;      Params:         0       0       0       0       0       0       0       0       0
 21406 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21407 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21408 ;;      Totals:         2       0       0       0       0       0       0       0       0
 21409 ;;Total ram usage:        2 bytes
 21410 ;; Hardware stack levels used:    1
 21411 ;; Hardware stack levels required when called:    5
 21412 ;; This function calls:
 21413 ;;		_mcp2515_modifyRegister
 21414 ;;		_mcp2515_readRegister
 21415 ;; This function is called by:
 21416 ;;		_setMode
 21417 ;;		_mcp2515_init
 21418 ;; This function uses a non-reentrant model
 21419 ;;
 21420                           
 21421                           	psect	text122
 21422  0059AA                     __ptext122:
 21423                           	callstack 0
 21424  0059AA                     _mcp2515_setCANCTRL_Mode:
 21425                           	callstack 21
 21426                           
 21427                           ; BSR set to: 0
 21428                           ;incstack = 0
 21429                           ;mcp2515_setCANCTRL_Mode@newmode stored from wreg
 21430  0059AA  6E1E               	movwf	mcp2515_setCANCTRL_Mode@newmode^0,c
 21431                           
 21432                           ;MCP2515.c: 142: unsigned char mcp2515_setCANCTRL_Mode(unsigned char newmode);MCP2515.c:
      +                           143: {;MCP2515.c: 144:     unsigned char i;;MCP2515.c: 146:     mcp2515_modifyRegister(
      +                          0x0F, 0xE0, newmode);
 21433  0059AC  0EE0               	movlw	224
 21434  0059AE  6E1A               	movwf	mcp2515_modifyRegister@mask^0,c
 21435  0059B0  C01E  F01B         	movff	mcp2515_setCANCTRL_Mode@newmode,mcp2515_modifyRegister@data
 21436  0059B4  0E0F               	movlw	15
 21437  0059B6  EC46  F02E         	call	_mcp2515_modifyRegister
 21438                           
 21439                           ;MCP2515.c: 148:     i = mcp2515_readRegister(0x0F);
 21440  0059BA  0E0F               	movlw	15
 21441  0059BC  EC74  F02E         	call	_mcp2515_readRegister
 21442  0059C0  6E1D               	movwf	mcp2515_setCANCTRL_Mode@i^0,c
 21443                           
 21444                           ;MCP2515.c: 149:     i &= 0xE0;
 21445  0059C2  0EE0               	movlw	224
 21446  0059C4  161D               	andwf	mcp2515_setCANCTRL_Mode@i^0,f,c
 21447                           
 21448                           ;MCP2515.c: 151:     if ( i == newmode )
 21449  0059C6  501E               	movf	mcp2515_setCANCTRL_Mode@newmode^0,w,c
 21450  0059C8  181D               	xorwf	mcp2515_setCANCTRL_Mode@i^0,w,c
 21451  0059CA  A4D8               	btfss	status,2,c
 21452  0059CC  D002               	goto	l12505
 21453                           
 21454                           ;MCP2515.c: 152:         return (0);
 21455  0059CE  0E00               	movlw	0
 21456  0059D0  0012               	return	
 21457  0059D2                     l12505:
 21458                           
 21459                           ;MCP2515.c: 154:     return (1);
 21460  0059D2  0E01               	movlw	1
 21461  0059D4  0012               	return		;funcret
 21462  0059D6                     __end_of_mcp2515_setCANCTRL_Mode:
 21463                           	callstack 0
 21464                           
 21465 ;; *************** function _mcp2515_readRegister *****************
 21466 ;; Defined at:
 21467 ;;		line 28 in file "MCP2515.c"
 21468 ;; Parameters:    Size  Location     Type
 21469 ;;  address         1    wreg     unsigned char 
 21470 ;; Auto vars:     Size  Location     Type
 21471 ;;  address         1   25[COMRAM] unsigned char 
 21472 ;;  ret             1   26[COMRAM] unsigned char 
 21473 ;; Return value:  Size  Location     Type
 21474 ;;                  1    wreg      unsigned char 
 21475 ;; Registers used:
 21476 ;;		wreg, status,2, cstack
 21477 ;; Tracked objects:
 21478 ;;		On entry : 0/0
 21479 ;;		On exit  : 0/0
 21480 ;;		Unchanged: 0/0
 21481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21482 ;;      Params:         0       0       0       0       0       0       0       0       0
 21483 ;;      Locals:         2       0       0       0       0       0       0       0       0
 21484 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21485 ;;      Totals:         2       0       0       0       0       0       0       0       0
 21486 ;;Total ram usage:        2 bytes
 21487 ;; Hardware stack levels used:    1
 21488 ;; Hardware stack levels required when called:    4
 21489 ;; This function calls:
 21490 ;;		_MPC2515_SPI
 21491 ;; This function is called by:
 21492 ;;		_mcp2515_setCANCTRL_Mode
 21493 ;;		_mcp2515_read_canMsg
 21494 ;;		_mcp2515_getNextFreeTXBuf
 21495 ;; This function uses a non-reentrant model
 21496 ;;
 21497                           
 21498                           	psect	text123
 21499  005CE8                     __ptext123:
 21500                           	callstack 0
 21501  005CE8                     _mcp2515_readRegister:
 21502                           	callstack 20
 21503                           
 21504                           ;incstack = 0
 21505                           ;mcp2515_readRegister@address stored from wreg
 21506  005CE8  6E1A               	movwf	mcp2515_readRegister@address^0,c
 21507                           
 21508                           ;MCP2515.c: 28: unsigned char mcp2515_readRegister(unsigned char address);MCP2515.c: 29:
      +                           {;MCP2515.c: 30:     unsigned char ret;;MCP2515.c: 33:     LATBbits.LATB4 = 0;
 21509  005CEA  988A               	bcf	138,4,c	;volatile
 21510                           
 21511                           ;MCP2515.c: 34:     MPC2515_SPI(0x03);
 21512  005CEC  0E03               	movlw	3
 21513  005CEE  EC23  F02F         	call	_MPC2515_SPI
 21514                           
 21515                           ;MCP2515.c: 35:     MPC2515_SPI(address);
 21516  005CF2  501A               	movf	mcp2515_readRegister@address^0,w,c
 21517  005CF4  EC23  F02F         	call	_MPC2515_SPI
 21518                           
 21519                           ;MCP2515.c: 36:     ret = MPC2515_SPI(0xff);
 21520  005CF8  0EFF               	movlw	255
 21521  005CFA  EC23  F02F         	call	_MPC2515_SPI
 21522  005CFE  6E1B               	movwf	mcp2515_readRegister@ret^0,c
 21523                           
 21524                           ;MCP2515.c: 37:     LATBbits.LATB4 = 1;
 21525  005D00  888A               	bsf	138,4,c	;volatile
 21526                           
 21527                           ;MCP2515.c: 40:     return ret;
 21528  005D02  501B               	movf	mcp2515_readRegister@ret^0,w,c
 21529  005D04  0012               	return		;funcret
 21530  005D06                     __end_of_mcp2515_readRegister:
 21531                           	callstack 0
 21532                           
 21533 ;; *************** function _mcp2515_modifyRegister *****************
 21534 ;; Defined at:
 21535 ;;		line 100 in file "MCP2515.c"
 21536 ;; Parameters:    Size  Location     Type
 21537 ;;  address         1    wreg     unsigned char 
 21538 ;;  mask            1   25[COMRAM] unsigned char 
 21539 ;;  data            1   26[COMRAM] unsigned char 
 21540 ;; Auto vars:     Size  Location     Type
 21541 ;;  address         1   27[COMRAM] unsigned char 
 21542 ;; Return value:  Size  Location     Type
 21543 ;;                  1    wreg      void 
 21544 ;; Registers used:
 21545 ;;		wreg, status,2, cstack
 21546 ;; Tracked objects:
 21547 ;;		On entry : 0/0
 21548 ;;		On exit  : 0/0
 21549 ;;		Unchanged: 0/0
 21550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21551 ;;      Params:         2       0       0       0       0       0       0       0       0
 21552 ;;      Locals:         1       0       0       0       0       0       0       0       0
 21553 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21554 ;;      Totals:         3       0       0       0       0       0       0       0       0
 21555 ;;Total ram usage:        3 bytes
 21556 ;; Hardware stack levels used:    1
 21557 ;; Hardware stack levels required when called:    4
 21558 ;; This function calls:
 21559 ;;		_MPC2515_SPI
 21560 ;; This function is called by:
 21561 ;;		_mcp2515_setCANCTRL_Mode
 21562 ;;		_mcp2515_init
 21563 ;;		_readMsg
 21564 ;; This function uses a non-reentrant model
 21565 ;;
 21566                           
 21567                           	psect	text124
 21568  005C8C                     __ptext124:
 21569                           	callstack 0
 21570  005C8C                     _mcp2515_modifyRegister:
 21571                           	callstack 21
 21572                           
 21573                           ;incstack = 0
 21574                           ;mcp2515_modifyRegister@address stored from wreg
 21575  005C8C  6E1C               	movwf	mcp2515_modifyRegister@address^0,c
 21576                           
 21577                           ;MCP2515.c: 100: void mcp2515_modifyRegister(unsigned char address, unsigned char mask, 
      +                          unsigned char data);MCP2515.c: 101: {;MCP2515.c: 103:     LATBbits.LATB4 = 0;
 21578  005C8E  988A               	bcf	138,4,c	;volatile
 21579                           
 21580                           ;MCP2515.c: 104:     MPC2515_SPI(0x05);
 21581  005C90  0E05               	movlw	5
 21582  005C92  EC23  F02F         	call	_MPC2515_SPI
 21583                           
 21584                           ;MCP2515.c: 105:     MPC2515_SPI(address);
 21585  005C96  501C               	movf	mcp2515_modifyRegister@address^0,w,c
 21586  005C98  EC23  F02F         	call	_MPC2515_SPI
 21587                           
 21588                           ;MCP2515.c: 106:     MPC2515_SPI(mask);
 21589  005C9C  501A               	movf	mcp2515_modifyRegister@mask^0,w,c
 21590  005C9E  EC23  F02F         	call	_MPC2515_SPI
 21591                           
 21592                           ;MCP2515.c: 107:     MPC2515_SPI(data);
 21593  005CA2  501B               	movf	mcp2515_modifyRegister@data^0,w,c
 21594  005CA4  EC23  F02F         	call	_MPC2515_SPI
 21595                           
 21596                           ;MCP2515.c: 108:     LATBbits.LATB4 = 1;
 21597  005CA8  888A               	bsf	138,4,c	;volatile
 21598  005CAA  0012               	return		;funcret
 21599  005CAC                     __end_of_mcp2515_modifyRegister:
 21600                           	callstack 0
 21601                           
 21602 ;; *************** function _mcp2515_reset *****************
 21603 ;; Defined at:
 21604 ;;		line 16 in file "MCP2515.c"
 21605 ;; Parameters:    Size  Location     Type
 21606 ;;		None
 21607 ;; Auto vars:     Size  Location     Type
 21608 ;;		None
 21609 ;; Return value:  Size  Location     Type
 21610 ;;                  1    wreg      void 
 21611 ;; Registers used:
 21612 ;;		wreg, status,2, cstack
 21613 ;; Tracked objects:
 21614 ;;		On entry : 0/0
 21615 ;;		On exit  : 0/0
 21616 ;;		Unchanged: 0/0
 21617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21618 ;;      Params:         0       0       0       0       0       0       0       0       0
 21619 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21620 ;;      Temps:          1       0       0       0       0       0       0       0       0
 21621 ;;      Totals:         1       0       0       0       0       0       0       0       0
 21622 ;;Total ram usage:        1 bytes
 21623 ;; Hardware stack levels used:    1
 21624 ;; Hardware stack levels required when called:    4
 21625 ;; This function calls:
 21626 ;;		_MPC2515_SPI
 21627 ;; This function is called by:
 21628 ;;		_mcp2515_init
 21629 ;; This function uses a non-reentrant model
 21630 ;;
 21631                           
 21632                           	psect	text125
 21633  005D3E                     __ptext125:
 21634                           	callstack 0
 21635  005D3E                     _mcp2515_reset:
 21636                           	callstack 21
 21637                           
 21638                           ;MCP2515.c: 18:     LATBbits.LATB4 = 0;
 21639                           
 21640                           ;incstack = 0
 21641  005D3E  988A               	bcf	138,4,c	;volatile
 21642                           
 21643                           ;MCP2515.c: 19:     MPC2515_SPI(0xC0);
 21644  005D40  0EC0               	movlw	192
 21645  005D42  EC23  F02F         	call	_MPC2515_SPI
 21646                           
 21647                           ;MCP2515.c: 20:     LATBbits.LATB4 = 1;
 21648  005D46  888A               	bsf	138,4,c	;volatile
 21649                           
 21650                           ;MCP2515.c: 21:     _delay((unsigned long)((10)*(20000000/4000.0)));
 21651  005D48  0E41               	movlw	65
 21652  005D4A  6E1A               	movwf	??_mcp2515_reset^0,c
 21653  005D4C  0EEE               	movlw	238
 21654  005D4E                     u16297:
 21655  005D4E  2EE8               	decfsz	wreg,f,c
 21656  005D50  D7FE               	bra	u16297
 21657  005D52  2E1A               	decfsz	??_mcp2515_reset^0,f,c
 21658  005D54  D7FC               	bra	u16297
 21659  005D56  D000               	nop2	
 21660  005D58  0012               	return		;funcret
 21661  005D5A                     __end_of_mcp2515_reset:
 21662                           	callstack 0
 21663                           
 21664 ;; *************** function _mcp2515_initCANBuffers *****************
 21665 ;; Defined at:
 21666 ;;		line 432 in file "MCP2515.c"
 21667 ;; Parameters:    Size  Location     Type
 21668 ;;		None
 21669 ;; Auto vars:     Size  Location     Type
 21670 ;;  ulFilt          4   10[BANK0 ] unsigned long 
 21671 ;;  ulMask          4    3[BANK0 ] unsigned long 
 21672 ;;  ext             1    9[BANK0 ] unsigned char 
 21673 ;;  std             1    0        unsigned char 
 21674 ;;  i               1    7[BANK0 ] unsigned char 
 21675 ;;  a3              1    2[BANK0 ] unsigned char 
 21676 ;;  a2              1    1[BANK0 ] unsigned char 
 21677 ;;  a1              1    0[BANK0 ] unsigned char 
 21678 ;; Return value:  Size  Location     Type
 21679 ;;                  1    wreg      void 
 21680 ;; Registers used:
 21681 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21682 ;; Tracked objects:
 21683 ;;		On entry : 3F/0
 21684 ;;		On exit  : 0/0
 21685 ;;		Unchanged: 0/0
 21686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21687 ;;      Params:         0       0       0       0       0       0       0       0       0
 21688 ;;      Locals:         0      14       0       0       0       0       0       0       0
 21689 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21690 ;;      Totals:         0      14       0       0       0       0       0       0       0
 21691 ;;Total ram usage:       14 bytes
 21692 ;; Hardware stack levels used:    1
 21693 ;; Hardware stack levels required when called:    6
 21694 ;; This function calls:
 21695 ;;		_mcp2515_setRegister
 21696 ;;		_mcp2515_write_mf
 21697 ;; This function is called by:
 21698 ;;		_mcp2515_init
 21699 ;; This function uses a non-reentrant model
 21700 ;;
 21701                           
 21702                           	psect	text126
 21703  003998                     __ptext126:
 21704                           	callstack 0
 21705  003998                     _mcp2515_initCANBuffers:
 21706                           	callstack 19
 21707                           
 21708                           ; BSR set to: 0
 21709                           ;MCP2515.c: 437:     unsigned char ext = 1;
 21710                           
 21711                           ;incstack = 0
 21712  003998  0E01               	movlw	1
 21713  00399A  6F69               	movwf	mcp2515_initCANBuffers@ext& (0+255),b
 21714                           
 21715                           ;MCP2515.c: 438:     unsigned long ulMask = 0x00, ulFilt = 0x00;
 21716  00399C  0E00               	movlw	0
 21717  00399E  6F63               	movwf	mcp2515_initCANBuffers@ulMask& (0+255),b
 21718  0039A0  0E00               	movlw	0
 21719  0039A2  6F64               	movwf	(mcp2515_initCANBuffers@ulMask+1)& (0+255),b
 21720  0039A4  0E00               	movlw	0
 21721  0039A6  6F65               	movwf	(mcp2515_initCANBuffers@ulMask+2)& (0+255),b
 21722  0039A8  0E00               	movlw	0
 21723  0039AA  6F66               	movwf	(mcp2515_initCANBuffers@ulMask+3)& (0+255),b
 21724  0039AC  0E00               	movlw	0
 21725  0039AE  6F6A               	movwf	mcp2515_initCANBuffers@ulFilt& (0+255),b
 21726  0039B0  0E00               	movlw	0
 21727  0039B2  6F6B               	movwf	(mcp2515_initCANBuffers@ulFilt+1)& (0+255),b
 21728  0039B4  0E00               	movlw	0
 21729  0039B6  6F6C               	movwf	(mcp2515_initCANBuffers@ulFilt+2)& (0+255),b
 21730  0039B8  0E00               	movlw	0
 21731  0039BA  6F6D               	movwf	(mcp2515_initCANBuffers@ulFilt+3)& (0+255),b
 21732                           
 21733                           ; BSR set to: 0
 21734                           ;MCP2515.c: 441:     mcp2515_write_mf(0x20, ext, ulMask);
 21735  0039BC  0E01               	movlw	1
 21736  0039BE  6E1F               	movwf	mcp2515_write_mf@ext^0,c
 21737  0039C0  0E00               	movlw	0
 21738  0039C2  6E20               	movwf	mcp2515_write_mf@id^0,c
 21739  0039C4  0E00               	movlw	0
 21740  0039C6  6E21               	movwf	(mcp2515_write_mf@id+1)^0,c
 21741  0039C8  0E00               	movlw	0
 21742  0039CA  6E22               	movwf	(mcp2515_write_mf@id+2)^0,c
 21743  0039CC  0E00               	movlw	0
 21744  0039CE  6E23               	movwf	(mcp2515_write_mf@id+3)^0,c
 21745  0039D0  0E20               	movlw	32
 21746  0039D2  EC42  F023         	call	_mcp2515_write_mf
 21747                           
 21748                           ;MCP2515.c: 442:     mcp2515_write_mf(0x24, ext, ulMask);
 21749  0039D6  0E01               	movlw	1
 21750  0039D8  6E1F               	movwf	mcp2515_write_mf@ext^0,c
 21751  0039DA  0E00               	movlw	0
 21752  0039DC  6E20               	movwf	mcp2515_write_mf@id^0,c
 21753  0039DE  0E00               	movlw	0
 21754  0039E0  6E21               	movwf	(mcp2515_write_mf@id+1)^0,c
 21755  0039E2  0E00               	movlw	0
 21756  0039E4  6E22               	movwf	(mcp2515_write_mf@id+2)^0,c
 21757  0039E6  0E00               	movlw	0
 21758  0039E8  6E23               	movwf	(mcp2515_write_mf@id+3)^0,c
 21759  0039EA  0E24               	movlw	36
 21760  0039EC  EC42  F023         	call	_mcp2515_write_mf
 21761                           
 21762                           ;MCP2515.c: 445:     mcp2515_write_mf(0x00, ext, ulFilt);
 21763  0039F0  0E01               	movlw	1
 21764  0039F2  6E1F               	movwf	mcp2515_write_mf@ext^0,c
 21765  0039F4  0E00               	movlw	0
 21766  0039F6  6E20               	movwf	mcp2515_write_mf@id^0,c
 21767  0039F8  0E00               	movlw	0
 21768  0039FA  6E21               	movwf	(mcp2515_write_mf@id+1)^0,c
 21769  0039FC  0E00               	movlw	0
 21770  0039FE  6E22               	movwf	(mcp2515_write_mf@id+2)^0,c
 21771  003A00  0E00               	movlw	0
 21772  003A02  6E23               	movwf	(mcp2515_write_mf@id+3)^0,c
 21773  003A04  0E00               	movlw	0
 21774  003A06  EC42  F023         	call	_mcp2515_write_mf
 21775                           
 21776                           ;MCP2515.c: 446:     mcp2515_write_mf(0x04, std, ulFilt);
 21777  003A0A  0E00               	movlw	0
 21778  003A0C  6E1F               	movwf	mcp2515_write_mf@ext^0,c
 21779  003A0E  0E00               	movlw	0
 21780  003A10  6E20               	movwf	mcp2515_write_mf@id^0,c
 21781  003A12  0E00               	movlw	0
 21782  003A14  6E21               	movwf	(mcp2515_write_mf@id+1)^0,c
 21783  003A16  0E00               	movlw	0
 21784  003A18  6E22               	movwf	(mcp2515_write_mf@id+2)^0,c
 21785  003A1A  0E00               	movlw	0
 21786  003A1C  6E23               	movwf	(mcp2515_write_mf@id+3)^0,c
 21787  003A1E  0E04               	movlw	4
 21788  003A20  EC42  F023         	call	_mcp2515_write_mf
 21789                           
 21790                           ;MCP2515.c: 447:     mcp2515_write_mf(0x08, ext, ulFilt);
 21791  003A24  0E01               	movlw	1
 21792  003A26  6E1F               	movwf	mcp2515_write_mf@ext^0,c
 21793  003A28  0E00               	movlw	0
 21794  003A2A  6E20               	movwf	mcp2515_write_mf@id^0,c
 21795  003A2C  0E00               	movlw	0
 21796  003A2E  6E21               	movwf	(mcp2515_write_mf@id+1)^0,c
 21797  003A30  0E00               	movlw	0
 21798  003A32  6E22               	movwf	(mcp2515_write_mf@id+2)^0,c
 21799  003A34  0E00               	movlw	0
 21800  003A36  6E23               	movwf	(mcp2515_write_mf@id+3)^0,c
 21801  003A38  0E08               	movlw	8
 21802  003A3A  EC42  F023         	call	_mcp2515_write_mf
 21803                           
 21804                           ;MCP2515.c: 448:     mcp2515_write_mf(0x10, std, ulFilt);
 21805  003A3E  0E00               	movlw	0
 21806  003A40  6E1F               	movwf	mcp2515_write_mf@ext^0,c
 21807  003A42  0E00               	movlw	0
 21808  003A44  6E20               	movwf	mcp2515_write_mf@id^0,c
 21809  003A46  0E00               	movlw	0
 21810  003A48  6E21               	movwf	(mcp2515_write_mf@id+1)^0,c
 21811  003A4A  0E00               	movlw	0
 21812  003A4C  6E22               	movwf	(mcp2515_write_mf@id+2)^0,c
 21813  003A4E  0E00               	movlw	0
 21814  003A50  6E23               	movwf	(mcp2515_write_mf@id+3)^0,c
 21815  003A52  0E10               	movlw	16
 21816  003A54  EC42  F023         	call	_mcp2515_write_mf
 21817                           
 21818                           ;MCP2515.c: 449:     mcp2515_write_mf(0x14, ext, ulFilt);
 21819  003A58  0E01               	movlw	1
 21820  003A5A  6E1F               	movwf	mcp2515_write_mf@ext^0,c
 21821  003A5C  0E00               	movlw	0
 21822  003A5E  6E20               	movwf	mcp2515_write_mf@id^0,c
 21823  003A60  0E00               	movlw	0
 21824  003A62  6E21               	movwf	(mcp2515_write_mf@id+1)^0,c
 21825  003A64  0E00               	movlw	0
 21826  003A66  6E22               	movwf	(mcp2515_write_mf@id+2)^0,c
 21827  003A68  0E00               	movlw	0
 21828  003A6A  6E23               	movwf	(mcp2515_write_mf@id+3)^0,c
 21829  003A6C  0E14               	movlw	20
 21830  003A6E  EC42  F023         	call	_mcp2515_write_mf
 21831                           
 21832                           ;MCP2515.c: 450:     mcp2515_write_mf(0x18, std, ulFilt);
 21833  003A72  0E00               	movlw	0
 21834  003A74  6E1F               	movwf	mcp2515_write_mf@ext^0,c
 21835  003A76  0E00               	movlw	0
 21836  003A78  6E20               	movwf	mcp2515_write_mf@id^0,c
 21837  003A7A  0E00               	movlw	0
 21838  003A7C  6E21               	movwf	(mcp2515_write_mf@id+1)^0,c
 21839  003A7E  0E00               	movlw	0
 21840  003A80  6E22               	movwf	(mcp2515_write_mf@id+2)^0,c
 21841  003A82  0E00               	movlw	0
 21842  003A84  6E23               	movwf	(mcp2515_write_mf@id+3)^0,c
 21843  003A86  0E18               	movlw	24
 21844  003A88  EC42  F023         	call	_mcp2515_write_mf
 21845                           
 21846                           ;MCP2515.c: 455:     a1 = 0x30;
 21847  003A8C  0E30               	movlw	48
 21848  003A8E  0100               	movlb	0	; () banked
 21849  003A90  6F60               	movwf	mcp2515_initCANBuffers@a1& (0+255),b
 21850                           
 21851                           ;MCP2515.c: 456:     a2 = 0x40;
 21852  003A92  0E40               	movlw	64
 21853  003A94  6F61               	movwf	mcp2515_initCANBuffers@a2& (0+255),b
 21854                           
 21855                           ;MCP2515.c: 457:     a3 = 0x50;
 21856  003A96  0E50               	movlw	80
 21857  003A98  6F62               	movwf	mcp2515_initCANBuffers@a3& (0+255),b
 21858                           
 21859                           ;MCP2515.c: 458:     for (i = 0; i < 14; i++) {
 21860  003A9A  0E00               	movlw	0
 21861  003A9C  6F67               	movwf	mcp2515_initCANBuffers@i& (0+255),b
 21862  003A9E                     l12685:
 21863                           
 21864                           ; BSR set to: 0
 21865                           ;MCP2515.c: 459:         mcp2515_setRegister(a1, 0);
 21866  003A9E  0E00               	movlw	0
 21867  003AA0  6E1A               	movwf	mcp2515_setRegister@value^0,c
 21868  003AA2  5160               	movf	mcp2515_initCANBuffers@a1& (0+255),w,b
 21869  003AA4  ECD4  F02E         	call	_mcp2515_setRegister
 21870                           
 21871                           ;MCP2515.c: 460:         mcp2515_setRegister(a2, 0);
 21872  003AA8  0E00               	movlw	0
 21873  003AAA  6E1A               	movwf	mcp2515_setRegister@value^0,c
 21874  003AAC  0100               	movlb	0	; () banked
 21875  003AAE  5161               	movf	mcp2515_initCANBuffers@a2& (0+255),w,b
 21876  003AB0  ECD4  F02E         	call	_mcp2515_setRegister
 21877                           
 21878                           ;MCP2515.c: 461:         mcp2515_setRegister(a3, 0);
 21879  003AB4  0E00               	movlw	0
 21880  003AB6  6E1A               	movwf	mcp2515_setRegister@value^0,c
 21881  003AB8  0100               	movlb	0	; () banked
 21882  003ABA  5162               	movf	mcp2515_initCANBuffers@a3& (0+255),w,b
 21883  003ABC  ECD4  F02E         	call	_mcp2515_setRegister
 21884                           
 21885                           ;MCP2515.c: 462:         a1++;
 21886  003AC0  0100               	movlb	0	; () banked
 21887  003AC2  2B60               	incf	mcp2515_initCANBuffers@a1& (0+255),f,b
 21888                           
 21889                           ; BSR set to: 0
 21890                           ;MCP2515.c: 463:         a2++;
 21891  003AC4  2B61               	incf	mcp2515_initCANBuffers@a2& (0+255),f,b
 21892                           
 21893                           ; BSR set to: 0
 21894                           ;MCP2515.c: 464:         a3++;
 21895  003AC6  2B62               	incf	mcp2515_initCANBuffers@a3& (0+255),f,b
 21896                           
 21897                           ; BSR set to: 0
 21898                           ;MCP2515.c: 465:     }
 21899  003AC8  2B67               	incf	mcp2515_initCANBuffers@i& (0+255),f,b
 21900                           
 21901                           ; BSR set to: 0
 21902  003ACA  0E0D               	movlw	13
 21903  003ACC  6567               	cpfsgt	mcp2515_initCANBuffers@i& (0+255),b
 21904  003ACE  D7E7               	goto	l12685
 21905                           
 21906                           ; BSR set to: 0
 21907                           ;MCP2515.c: 466:     mcp2515_setRegister(0x60, 0);
 21908  003AD0  0E00               	movlw	0
 21909  003AD2  6E1A               	movwf	mcp2515_setRegister@value^0,c
 21910  003AD4  0E60               	movlw	96
 21911  003AD6  ECD4  F02E         	call	_mcp2515_setRegister
 21912                           
 21913                           ;MCP2515.c: 467:     mcp2515_setRegister(0x70, 0);
 21914  003ADA  0E00               	movlw	0
 21915  003ADC  6E1A               	movwf	mcp2515_setRegister@value^0,c
 21916  003ADE  0E70               	movlw	112
 21917  003AE0  ECD4  F02E         	call	_mcp2515_setRegister
 21918  003AE4  0012               	return		;funcret
 21919  003AE6                     __end_of_mcp2515_initCANBuffers:
 21920                           	callstack 0
 21921                           
 21922 ;; *************** function _mcp2515_write_mf *****************
 21923 ;; Defined at:
 21924 ;;		line 613 in file "MCP2515.c"
 21925 ;; Parameters:    Size  Location     Type
 21926 ;;  mcp_addr        1    wreg     unsigned char 
 21927 ;;  ext             1   30[COMRAM] unsigned char 
 21928 ;;  id              4   31[COMRAM] unsigned long 
 21929 ;; Auto vars:     Size  Location     Type
 21930 ;;  mcp_addr        1   38[COMRAM] unsigned char 
 21931 ;;  tbufdata        4   39[COMRAM] unsigned char [4]
 21932 ;;  canid           2   43[COMRAM] unsigned short 
 21933 ;; Return value:  Size  Location     Type
 21934 ;;                  1    wreg      void 
 21935 ;; Registers used:
 21936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21937 ;; Tracked objects:
 21938 ;;		On entry : 0/0
 21939 ;;		On exit  : 0/0
 21940 ;;		Unchanged: 0/0
 21941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21942 ;;      Params:         5       0       0       0       0       0       0       0       0
 21943 ;;      Locals:         7       0       0       0       0       0       0       0       0
 21944 ;;      Temps:          3       0       0       0       0       0       0       0       0
 21945 ;;      Totals:        15       0       0       0       0       0       0       0       0
 21946 ;;Total ram usage:       15 bytes
 21947 ;; Hardware stack levels used:    1
 21948 ;; Hardware stack levels required when called:    5
 21949 ;; This function calls:
 21950 ;;		_mcp2515_setRegisterS
 21951 ;; This function is called by:
 21952 ;;		_mcp2515_initCANBuffers
 21953 ;; This function uses a non-reentrant model
 21954 ;;
 21955                           
 21956                           	psect	text127
 21957  004684                     __ptext127:
 21958                           	callstack 0
 21959  004684                     _mcp2515_write_mf:
 21960                           	callstack 19
 21961                           
 21962                           ;incstack = 0
 21963                           ;mcp2515_write_mf@mcp_addr stored from wreg
 21964  004684  6E27               	movwf	mcp2515_write_mf@mcp_addr^0,c
 21965                           
 21966                           ;MCP2515.c: 613: void mcp2515_write_mf( unsigned char mcp_addr, unsigned char ext, unsig
      +                          ned long id );MCP2515.c: 614: {;MCP2515.c: 615:     uint16_t canid;;MCP2515.c: 616:     
      +                          unsigned char tbufdata[4];;MCP2515.c: 618:     canid = (uint16_t)(id & 0x0FFFF);
 21967  004686  C020  F02C         	movff	mcp2515_write_mf@id,mcp2515_write_mf@canid
 21968  00468A  C021  F02D         	movff	mcp2515_write_mf@id+1,mcp2515_write_mf@canid+1
 21969                           
 21970                           ;MCP2515.c: 620:     if ( ext == 1)
 21971  00468E  041F               	decf	mcp2515_write_mf@ext^0,w,c
 21972  004690  A4D8               	btfss	status,2,c
 21973  004692  D023               	goto	l1829
 21974                           
 21975                           ;MCP2515.c: 621:     {;MCP2515.c: 622:         tbufdata[3] = (unsigned char) (canid & 0x
      +                          FF);
 21976  004694  C02C  F02B         	movff	mcp2515_write_mf@canid,mcp2515_write_mf@tbufdata+3
 21977                           
 21978                           ;MCP2515.c: 623:         tbufdata[2] = (unsigned char) (canid >> 8);
 21979  004698  C02D  F02A         	movff	mcp2515_write_mf@canid+1,mcp2515_write_mf@tbufdata+2
 21980                           
 21981                           ;MCP2515.c: 624:         canid = (uint16_t)(id >> 16);
 21982  00469C  C022  F02C         	movff	mcp2515_write_mf@id+2,mcp2515_write_mf@canid
 21983  0046A0  C023  F02D         	movff	mcp2515_write_mf@id+3,mcp2515_write_mf@canid+1
 21984                           
 21985                           ;MCP2515.c: 625:         tbufdata[1] = (unsigned char) (canid & 0x03);
 21986  0046A4  502C               	movf	mcp2515_write_mf@canid^0,w,c
 21987  0046A6  0B03               	andlw	3
 21988  0046A8  6E29               	movwf	(mcp2515_write_mf@tbufdata+1)^0,c
 21989                           
 21990                           ;MCP2515.c: 626:         tbufdata[1] += (unsigned char) ((canid & 0x1C) << 3);
 21991  0046AA  C02C  F024         	movff	mcp2515_write_mf@canid,??_mcp2515_write_mf
 21992  0046AE  0E1C               	movlw	28
 21993  0046B0  1624               	andwf	??_mcp2515_write_mf^0,f,c
 21994  0046B2  90D8               	bcf	status,0,c
 21995  0046B4  3624               	rlcf	??_mcp2515_write_mf^0,f,c
 21996  0046B6  90D8               	bcf	status,0,c
 21997  0046B8  3624               	rlcf	??_mcp2515_write_mf^0,f,c
 21998  0046BA  90D8               	bcf	status,0,c
 21999  0046BC  3424               	rlcf	??_mcp2515_write_mf^0,w,c
 22000  0046BE  2629               	addwf	(mcp2515_write_mf@tbufdata+1)^0,f,c
 22001                           
 22002                           ;MCP2515.c: 627:         tbufdata[1] |= 0x08;
 22003  0046C0  8629               	bsf	(mcp2515_write_mf@tbufdata+1)^0,3,c
 22004                           
 22005                           ;MCP2515.c: 628:         tbufdata[0] = (unsigned char) (canid >> 5 );
 22006  0046C2  C02C  F024         	movff	mcp2515_write_mf@canid,??_mcp2515_write_mf
 22007  0046C6  C02D  F025         	movff	mcp2515_write_mf@canid+1,??_mcp2515_write_mf+1
 22008  0046CA  0E05               	movlw	5
 22009  0046CC  6E26               	movwf	(??_mcp2515_write_mf+2)^0,c
 22010  0046CE                     u13025:
 22011  0046CE  90D8               	bcf	status,0,c
 22012  0046D0  3225               	rrcf	(??_mcp2515_write_mf+1)^0,f,c
 22013  0046D2  3224               	rrcf	??_mcp2515_write_mf^0,f,c
 22014  0046D4  2E26               	decfsz	(??_mcp2515_write_mf+2)^0,f,c
 22015  0046D6  D7FB               	goto	u13025
 22016  0046D8  D021               	goto	L9
 22017  0046DA                     l1829:
 22018                           
 22019                           ;MCP2515.c: 631:     {;MCP2515.c: 632:         tbufdata[3] = (unsigned char) (canid & 0x
      +                          FF);
 22020  0046DA  C02C  F02B         	movff	mcp2515_write_mf@canid,mcp2515_write_mf@tbufdata+3
 22021                           
 22022                           ;MCP2515.c: 633:         tbufdata[2] = (unsigned char) (canid >> 8);
 22023  0046DE  C02D  F02A         	movff	mcp2515_write_mf@canid+1,mcp2515_write_mf@tbufdata+2
 22024                           
 22025                           ;MCP2515.c: 634:         canid = (uint16_t)(id >> 16);
 22026  0046E2  C022  F02C         	movff	mcp2515_write_mf@id+2,mcp2515_write_mf@canid
 22027  0046E6  C023  F02D         	movff	mcp2515_write_mf@id+3,mcp2515_write_mf@canid+1
 22028                           
 22029                           ;MCP2515.c: 635:         tbufdata[1] = (unsigned char) ((canid & 0x07) << 5);
 22030  0046EA  C02C  F024         	movff	mcp2515_write_mf@canid,??_mcp2515_write_mf
 22031  0046EE  0E07               	movlw	7
 22032  0046F0  1624               	andwf	??_mcp2515_write_mf^0,f,c
 22033  0046F2  0E05               	movlw	5
 22034  0046F4  6E25               	movwf	(??_mcp2515_write_mf+1)^0,c
 22035  0046F6                     u13035:
 22036  0046F6  90D8               	bcf	status,0,c
 22037  0046F8  3624               	rlcf	??_mcp2515_write_mf^0,f,c
 22038  0046FA  2E25               	decfsz	(??_mcp2515_write_mf+1)^0,f,c
 22039  0046FC  D7FC               	goto	u13035
 22040  0046FE  5024               	movf	??_mcp2515_write_mf^0,w,c
 22041  004700  6E29               	movwf	(mcp2515_write_mf@tbufdata+1)^0,c
 22042                           
 22043                           ;MCP2515.c: 636:         tbufdata[0] = (unsigned char) (canid >> 3 );
 22044  004702  C02C  F024         	movff	mcp2515_write_mf@canid,??_mcp2515_write_mf
 22045  004706  C02D  F025         	movff	mcp2515_write_mf@canid+1,??_mcp2515_write_mf+1
 22046  00470A  90D8               	bcf	status,0,c
 22047  00470C  3225               	rrcf	(??_mcp2515_write_mf+1)^0,f,c
 22048  00470E  3224               	rrcf	??_mcp2515_write_mf^0,f,c
 22049  004710  90D8               	bcf	status,0,c
 22050  004712  3225               	rrcf	(??_mcp2515_write_mf+1)^0,f,c
 22051  004714  3224               	rrcf	??_mcp2515_write_mf^0,f,c
 22052  004716  90D8               	bcf	status,0,c
 22053  004718  3225               	rrcf	(??_mcp2515_write_mf+1)^0,f,c
 22054  00471A  3224               	rrcf	??_mcp2515_write_mf^0,f,c
 22055  00471C                     L9:
 22056  00471C  5024               	movf	??_mcp2515_write_mf^0,w,c
 22057  00471E  6E28               	movwf	mcp2515_write_mf@tbufdata^0,c
 22058                           
 22059                           ;MCP2515.c: 639:     mcp2515_setRegisterS( mcp_addr, tbufdata, 4 );
 22060  004720  0E28               	movlw	low mcp2515_write_mf@tbufdata
 22061  004722  6E1A               	movwf	mcp2515_setRegisterS@values^0,c
 22062  004724  6A1B               	clrf	(mcp2515_setRegisterS@values+1)^0,c
 22063  004726  0E04               	movlw	4
 22064  004728  6E1C               	movwf	mcp2515_setRegisterS@n^0,c
 22065  00472A  5027               	movf	mcp2515_write_mf@mcp_addr^0,w,c
 22066  00472C  EC5C  F02C         	call	_mcp2515_setRegisterS
 22067  004730  0012               	return		;funcret
 22068  004732                     __end_of_mcp2515_write_mf:
 22069                           	callstack 0
 22070                           
 22071 ;; *************** function _mcp2515_setRegisterS *****************
 22072 ;; Defined at:
 22073 ;;		line 81 in file "MCP2515.c"
 22074 ;; Parameters:    Size  Location     Type
 22075 ;;  address         1    wreg     unsigned char 
 22076 ;;  values          2   25[COMRAM] PTR unsigned char 
 22077 ;;		 -> m_nDta(8), mcp2515_write_mf@tbufdata(4), mcp2515_write_id@tbufdata(4), 
 22078 ;;  n               1   27[COMRAM] unsigned char 
 22079 ;; Auto vars:     Size  Location     Type
 22080 ;;  address         1   28[COMRAM] unsigned char 
 22081 ;;  i               1   29[COMRAM] unsigned char 
 22082 ;; Return value:  Size  Location     Type
 22083 ;;                  1    wreg      void 
 22084 ;; Registers used:
 22085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22086 ;; Tracked objects:
 22087 ;;		On entry : 0/0
 22088 ;;		On exit  : 0/0
 22089 ;;		Unchanged: 0/0
 22090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22091 ;;      Params:         3       0       0       0       0       0       0       0       0
 22092 ;;      Locals:         2       0       0       0       0       0       0       0       0
 22093 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22094 ;;      Totals:         5       0       0       0       0       0       0       0       0
 22095 ;;Total ram usage:        5 bytes
 22096 ;; Hardware stack levels used:    1
 22097 ;; Hardware stack levels required when called:    4
 22098 ;; This function calls:
 22099 ;;		_MPC2515_SPI
 22100 ;; This function is called by:
 22101 ;;		_mcp2515_write_mf
 22102 ;; This function uses a non-reentrant model
 22103 ;;
 22104                           
 22105                           	psect	text128
 22106  0058B8                     __ptext128:
 22107                           	callstack 0
 22108  0058B8                     _mcp2515_setRegisterS:
 22109                           	callstack 19
 22110                           
 22111                           ;incstack = 0
 22112                           ;mcp2515_setRegisterS@address stored from wreg
 22113  0058B8  6E1D               	movwf	mcp2515_setRegisterS@address^0,c
 22114                           
 22115                           ;MCP2515.c: 81: void mcp2515_setRegisterS(unsigned char address, unsigned char values[],
      +                           unsigned char n);MCP2515.c: 82: {;MCP2515.c: 83:     unsigned char i;;MCP2515.c: 85:   
      +                            LATBbits.LATB4 = 0;
 22116  0058BA  988A               	bcf	138,4,c	;volatile
 22117                           
 22118                           ;MCP2515.c: 86:     MPC2515_SPI(0x02);
 22119  0058BC  0E02               	movlw	2
 22120  0058BE  EC23  F02F         	call	_MPC2515_SPI
 22121                           
 22122                           ;MCP2515.c: 87:     MPC2515_SPI(address);
 22123  0058C2  501D               	movf	mcp2515_setRegisterS@address^0,w,c
 22124  0058C4  EC23  F02F         	call	_MPC2515_SPI
 22125                           
 22126                           ;MCP2515.c: 89:     for (i=0; i<n; i++)
 22127  0058C8  0E00               	movlw	0
 22128  0058CA  6E1E               	movwf	mcp2515_setRegisterS@i^0,c
 22129  0058CC  D00A               	goto	l11931
 22130  0058CE                     l11927:
 22131                           
 22132                           ;MCP2515.c: 90:         MPC2515_SPI(values[i]);
 22133  0058CE  501E               	movf	mcp2515_setRegisterS@i^0,w,c
 22134  0058D0  241A               	addwf	mcp2515_setRegisterS@values^0,w,c
 22135  0058D2  6ED9               	movwf	fsr2l,c
 22136  0058D4  0E00               	movlw	0
 22137  0058D6  201B               	addwfc	(mcp2515_setRegisterS@values+1)^0,w,c
 22138  0058D8  6EDA               	movwf	fsr2h,c
 22139  0058DA  50DF               	movf	indf2,w,c
 22140  0058DC  EC23  F02F         	call	_MPC2515_SPI
 22141  0058E0  2A1E               	incf	mcp2515_setRegisterS@i^0,f,c
 22142  0058E2                     l11931:
 22143  0058E2  501C               	movf	mcp2515_setRegisterS@n^0,w,c
 22144  0058E4  5C1E               	subwf	mcp2515_setRegisterS@i^0,w,c
 22145  0058E6  A0D8               	btfss	status,0,c
 22146  0058E8  D7F2               	goto	l11927
 22147                           
 22148                           ;MCP2515.c: 92:     LATBbits.LATB4 = 1;
 22149  0058EA  888A               	bsf	138,4,c	;volatile
 22150  0058EC  0012               	return		;funcret
 22151  0058EE                     __end_of_mcp2515_setRegisterS:
 22152                           	callstack 0
 22153                           
 22154 ;; *************** function _mcp2515_configRate *****************
 22155 ;; Defined at:
 22156 ;;		line 161 in file "MCP2515.c"
 22157 ;; Parameters:    Size  Location     Type
 22158 ;;  canSpeed        1    wreg     unsigned char 
 22159 ;;  canClock        1   27[COMRAM] unsigned char 
 22160 ;; Auto vars:     Size  Location     Type
 22161 ;;  canSpeed        1   31[COMRAM] unsigned char 
 22162 ;;  cfg3            1   34[COMRAM] unsigned char 
 22163 ;;  cfg2            1   33[COMRAM] unsigned char 
 22164 ;;  cfg1            1   32[COMRAM] unsigned char 
 22165 ;;  set             1    0        unsigned char 
 22166 ;; Return value:  Size  Location     Type
 22167 ;;                  1    wreg      unsigned char 
 22168 ;; Registers used:
 22169 ;;		wreg, status,2, status,0, cstack
 22170 ;; Tracked objects:
 22171 ;;		On entry : 3F/0
 22172 ;;		On exit  : 0/0
 22173 ;;		Unchanged: 0/0
 22174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22175 ;;      Params:         1       0       0       0       0       0       0       0       0
 22176 ;;      Locals:         5       0       0       0       0       0       0       0       0
 22177 ;;      Temps:          2       0       0       0       0       0       0       0       0
 22178 ;;      Totals:         8       0       0       0       0       0       0       0       0
 22179 ;;Total ram usage:        8 bytes
 22180 ;; Hardware stack levels used:    1
 22181 ;; Hardware stack levels required when called:    5
 22182 ;; This function calls:
 22183 ;;		_mcp2515_setRegister
 22184 ;; This function is called by:
 22185 ;;		_mcp2515_init
 22186 ;; This function uses a non-reentrant model
 22187 ;;
 22188                           
 22189                           	psect	text129
 22190  002770                     __ptext129:
 22191                           	callstack 0
 22192  002770                     _mcp2515_configRate:
 22193                           	callstack 20
 22194                           
 22195                           ;incstack = 0
 22196                           ;mcp2515_configRate@canSpeed stored from wreg
 22197  002770  6E20               	movwf	mcp2515_configRate@canSpeed^0,c
 22198                           
 22199                           ;MCP2515.c: 165:     switch (canClock)
 22200  002772  D0E5               	goto	l12633
 22201  002774                     l12511:
 22202                           
 22203                           ;MCP2515.c: 171:             cfg1 = (0xA7);
 22204  002774  0EA7               	movlw	167
 22205  002776  D003               	goto	L11
 22206  002778                     l12513:
 22207                           
 22208                           ;MCP2515.c: 177:             cfg1 = (0x93);
 22209  002778  0E93               	movlw	147
 22210  00277A  D001               	goto	L11
 22211  00277C                     l12515:
 22212                           
 22213                           ;MCP2515.c: 183:             cfg1 = (0x89);
 22214  00277C  0E89               	movlw	137
 22215  00277E                     L11:
 22216  00277E  6E21               	movwf	mcp2515_configRate@cfg1^0,c
 22217  002780                     
 22218                           ;MCP2515.c: 184:             cfg2 = (0xF6);
 22219  002780  0EF6               	movlw	246
 22220  002782  6E22               	movwf	mcp2515_configRate@cfg2^0,c
 22221                           
 22222                           ;MCP2515.c: 185:             cfg3 = (0x84);
 22223  002784  0E84               	movlw	132
 22224  002786  D004               	goto	L13
 22225  002788                     l12517:
 22226                           
 22227                           ;MCP2515.c: 189:             cfg1 = (0x87);
 22228  002788  0E87               	movlw	135
 22229  00278A  D06B               	goto	L26
 22230  00278C                     l12519:
 22231                           
 22232                           ;MCP2515.c: 195:             cfg1 = (0x85);
 22233  00278C  0E85               	movlw	133
 22234  00278E  D7F7               	goto	L11
 22235  002790                     L13:
 22236  002790  6E23               	movwf	mcp2515_configRate@cfg3^0,c
 22237                           
 22238                           ;MCP2515.c: 198:             break;
 22239  002792  D0E7               	goto	l12635
 22240  002794                     l12521:
 22241                           
 22242                           ;MCP2515.c: 201:             cfg1 = (0x84);
 22243  002794  0E84               	movlw	132
 22244  002796  D7F3               	goto	L11
 22245  002798                     l12523:
 22246                           
 22247                           ;MCP2515.c: 207:             cfg1 = (0x84);
 22248  002798  0E84               	movlw	132
 22249  00279A  D063               	goto	L26
 22250  00279C                     l12525:
 22251                           
 22252                           ;MCP2515.c: 213:             cfg1 = (0x84);
 22253  00279C  0E84               	movlw	132
 22254  00279E  6E21               	movwf	mcp2515_configRate@cfg1^0,c
 22255                           
 22256                           ;MCP2515.c: 214:             cfg2 = (0xD3);
 22257  0027A0  0ED3               	movlw	211
 22258  0027A2  D09A               	goto	L27
 22259  0027A4                     l12527:
 22260                           
 22261                           ;MCP2515.c: 219:             cfg1 = (0x81);
 22262  0027A4  0E81               	movlw	129
 22263  0027A6  D7EB               	goto	L11
 22264  0027A8                     l12529:
 22265                           
 22266                           ;MCP2515.c: 225:             cfg1 = (0x81);
 22267  0027A8  0E81               	movlw	129
 22268  0027AA  D05B               	goto	L26
 22269  0027AC                     l12531:
 22270                           
 22271                           ;MCP2515.c: 231:             cfg1 = (0x80);
 22272  0027AC  0E80               	movlw	128
 22273  0027AE  D7E7               	goto	L11
 22274  0027B0                     l12533:
 22275                           
 22276                           ;MCP2515.c: 237:             cfg1 = (0x80);
 22277  0027B0  0E80               	movlw	128
 22278  0027B2  D057               	goto	L26
 22279  0027B4                     l12535:
 22280                           
 22281                           ;MCP2515.c: 243:             cfg1 = (0x00);
 22282  0027B4  0E00               	movlw	0
 22283  0027B6  6E21               	movwf	mcp2515_configRate@cfg1^0,c
 22284                           
 22285                           ;MCP2515.c: 244:             cfg2 = (0xD1);
 22286  0027B8  0ED1               	movlw	209
 22287  0027BA  D08E               	goto	L27
 22288  0027BC                     l12537:
 22289                           
 22290                           ;MCP2515.c: 249:             cfg1 = (0x00);
 22291  0027BC  0E00               	movlw	0
 22292  0027BE  6E21               	movwf	mcp2515_configRate@cfg1^0,c
 22293                           
 22294                           ;MCP2515.c: 250:             cfg2 = (0xC0);
 22295  0027C0  0EC0               	movlw	192
 22296  0027C2  6E22               	movwf	mcp2515_configRate@cfg2^0,c
 22297                           
 22298                           ;MCP2515.c: 251:             cfg3 = (0x80);
 22299  0027C4  0E80               	movlw	128
 22300  0027C6  D7E4               	goto	L13
 22301  0027C8                     l12539:
 22302                           
 22303                           ;MCP2515.c: 256:      return (1);
 22304  0027C8  0E01               	movlw	1
 22305  0027CA  0012               	return	
 22306  0027CC                     l12549:
 22307  0027CC  5020               	movf	mcp2515_configRate@canSpeed^0,w,c
 22308  0027CE  6E1D               	movwf	??_mcp2515_configRate^0,c
 22309  0027D0  6A1E               	clrf	(??_mcp2515_configRate+1)^0,c
 22310                           
 22311                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22312                           ; Switch size 1, requested type "simple"
 22313                           ; Number of cases is 1, Range of values is 0 to 0
 22314                           ; switch strategies available:
 22315                           ; Name         Instructions Cycles
 22316                           ; simple_byte            4     3 (average)
 22317                           ;	Chosen strategy is simple_byte
 22318  0027D2  501E               	movf	(??_mcp2515_configRate+1)^0,w,c
 22319  0027D4  0A00               	xorlw	0	; case 0
 22320  0027D6  A4D8               	btfss	status,2,c
 22321  0027D8  D7F7               	goto	l12539
 22322                           
 22323                           ; Switch size 1, requested type "simple"
 22324                           ; Number of cases is 14, Range of values is 1 to 14
 22325                           ; switch strategies available:
 22326                           ; Name         Instructions Cycles
 22327                           ; simple_byte           43    22 (average)
 22328                           ;	Chosen strategy is simple_byte
 22329  0027DA  501D               	movf	??_mcp2515_configRate^0,w,c
 22330  0027DC  0A01               	xorlw	1	; case 1
 22331  0027DE  B4D8               	btfsc	status,2,c
 22332  0027E0  D7C9               	goto	l12511
 22333  0027E2  0A03               	xorlw	3	; case 2
 22334  0027E4  B4D8               	btfsc	status,2,c
 22335  0027E6  D7C8               	goto	l12513
 22336  0027E8  0A01               	xorlw	1	; case 3
 22337  0027EA  B4D8               	btfsc	status,2,c
 22338  0027EC  D7C7               	goto	l12515
 22339  0027EE  0A07               	xorlw	7	; case 4
 22340  0027F0  B4D8               	btfsc	status,2,c
 22341  0027F2  D7CA               	goto	l12517
 22342  0027F4  0A01               	xorlw	1	; case 5
 22343  0027F6  B4D8               	btfsc	status,2,c
 22344  0027F8  D7C9               	goto	l12519
 22345  0027FA  0A03               	xorlw	3	; case 6
 22346  0027FC  B4D8               	btfsc	status,2,c
 22347  0027FE  D7CA               	goto	l12521
 22348  002800  0A01               	xorlw	1	; case 7
 22349  002802  B4D8               	btfsc	status,2,c
 22350  002804  D7C9               	goto	l12523
 22351  002806  0A0F               	xorlw	15	; case 8
 22352  002808  B4D8               	btfsc	status,2,c
 22353  00280A  D7C8               	goto	l12525
 22354  00280C  0A01               	xorlw	1	; case 9
 22355  00280E  B4D8               	btfsc	status,2,c
 22356  002810  D7C9               	goto	l12527
 22357  002812  0A03               	xorlw	3	; case 10
 22358  002814  B4D8               	btfsc	status,2,c
 22359  002816  D7C8               	goto	l12529
 22360  002818  0A01               	xorlw	1	; case 11
 22361  00281A  B4D8               	btfsc	status,2,c
 22362  00281C  D7C7               	goto	l12531
 22363  00281E  0A07               	xorlw	7	; case 12
 22364  002820  B4D8               	btfsc	status,2,c
 22365  002822  D7C6               	goto	l12533
 22366  002824  0A01               	xorlw	1	; case 13
 22367  002826  B4D8               	btfsc	status,2,c
 22368  002828  D7C5               	goto	l12535
 22369  00282A  0A03               	xorlw	3	; case 14
 22370  00282C  B4D8               	btfsc	status,2,c
 22371  00282E  D7C6               	goto	l12537
 22372  002830  D7CB               	goto	l12539
 22373  002832                     l12551:
 22374                           
 22375                           ;MCP2515.c: 265:             cfg1 = (0x3F);
 22376  002832  0E3F               	movlw	63
 22377  002834  6E21               	movwf	mcp2515_configRate@cfg1^0,c
 22378                           
 22379                           ;MCP2515.c: 266:             cfg2 = (0xFF);
 22380  002836  6822               	setf	mcp2515_configRate@cfg2^0,c
 22381                           
 22382                           ;MCP2515.c: 267:             cfg3 = (0x87);
 22383  002838  0E87               	movlw	135
 22384  00283A  D7AA               	goto	L13
 22385  00283C                     l12555:
 22386                           
 22387                           ;MCP2515.c: 271:             cfg1 = (0x67);
 22388  00283C  0E67               	movlw	103
 22389  00283E  D79F               	goto	L11
 22390  002840                     l12557:
 22391                           
 22392                           ;MCP2515.c: 277:             cfg1 = (0x53);
 22393  002840  0E53               	movlw	83
 22394  002842  D79D               	goto	L11
 22395  002844                     l12559:
 22396                           
 22397                           ;MCP2515.c: 283:             cfg1 = (0x4E);
 22398  002844  0E4E               	movlw	78
 22399  002846  D00D               	goto	L26
 22400  002848                     l12561:
 22401                           
 22402                           ;MCP2515.c: 289:             cfg1 = (0x49);
 22403  002848  0E49               	movlw	73
 22404  00284A  D799               	goto	L11
 22405  00284C                     l12565:
 22406                           
 22407                           ;MCP2515.c: 300:             cfg1 = (0x44);
 22408  00284C  0E44               	movlw	68
 22409  00284E  D797               	goto	L11
 22410  002850                     l12567:
 22411                           
 22412                           ;MCP2515.c: 306:             cfg1 = (0x44);
 22413  002850  0E44               	movlw	68
 22414  002852  D007               	goto	L26
 22415  002854                     l12569:
 22416                           
 22417                           ;MCP2515.c: 312:             cfg1 = (0x43);
 22418  002854  0E43               	movlw	67
 22419  002856  D005               	goto	L26
 22420  002858                     l12571:
 22421                           
 22422                           ;MCP2515.c: 318:             cfg1 = (0x41);
 22423  002858  0E41               	movlw	65
 22424  00285A  D791               	goto	L11
 22425  00285C                     l12573:
 22426                           
 22427                           ;MCP2515.c: 324:             cfg1 = (0x41);
 22428  00285C  0E41               	movlw	65
 22429  00285E  D001               	goto	L26
 22430  002860                     l12575:
 22431                           
 22432                           ;MCP2515.c: 330:             cfg1 = (0x40);
 22433  002860  0E40               	movlw	64
 22434  002862                     L26:
 22435  002862  6E21               	movwf	mcp2515_configRate@cfg1^0,c
 22436                           
 22437                           ;MCP2515.c: 331:             cfg2 = (0xE5);
 22438  002864  0EE5               	movlw	229
 22439  002866  6E22               	movwf	mcp2515_configRate@cfg2^0,c
 22440                           
 22441                           ;MCP2515.c: 332:             cfg3 = (0x83);
 22442  002868  0E83               	movlw	131
 22443  00286A  D792               	goto	L13
 22444  00286C                     l12577:
 22445                           
 22446                           ;MCP2515.c: 336:             cfg1 = (0x00);
 22447  00286C  0E00               	movlw	0
 22448  00286E  6E21               	movwf	mcp2515_configRate@cfg1^0,c
 22449                           
 22450                           ;MCP2515.c: 337:             cfg2 = (0xCA);
 22451  002870  0ECA               	movlw	202
 22452  002872  D032               	goto	L27
 22453  002874                     l12589:
 22454  002874  5020               	movf	mcp2515_configRate@canSpeed^0,w,c
 22455  002876  6E1D               	movwf	??_mcp2515_configRate^0,c
 22456  002878  6A1E               	clrf	(??_mcp2515_configRate+1)^0,c
 22457                           
 22458                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22459                           ; Switch size 1, requested type "simple"
 22460                           ; Number of cases is 1, Range of values is 0 to 0
 22461                           ; switch strategies available:
 22462                           ; Name         Instructions Cycles
 22463                           ; simple_byte            4     3 (average)
 22464                           ;	Chosen strategy is simple_byte
 22465  00287A  501E               	movf	(??_mcp2515_configRate+1)^0,w,c
 22466  00287C  0A00               	xorlw	0	; case 0
 22467  00287E  A4D8               	btfss	status,2,c
 22468  002880  D7A3               	goto	l12539
 22469                           
 22470                           ; Switch size 1, requested type "simple"
 22471                           ; Number of cases is 13, Range of values is 1 to 14
 22472                           ; switch strategies available:
 22473                           ; Name         Instructions Cycles
 22474                           ; simple_byte           40    21 (average)
 22475                           ;	Chosen strategy is simple_byte
 22476  002882  501D               	movf	??_mcp2515_configRate^0,w,c
 22477  002884  0A01               	xorlw	1	; case 1
 22478  002886  B4D8               	btfsc	status,2,c
 22479  002888  D7D4               	goto	l12551
 22480  00288A  0A03               	xorlw	3	; case 2
 22481  00288C  B4D8               	btfsc	status,2,c
 22482  00288E  D7D6               	goto	l12555
 22483  002890  0A01               	xorlw	1	; case 3
 22484  002892  B4D8               	btfsc	status,2,c
 22485  002894  D7D5               	goto	l12557
 22486  002896  0A06               	xorlw	6	; case 5
 22487  002898  B4D8               	btfsc	status,2,c
 22488  00289A  D7D4               	goto	l12559
 22489  00289C  0A03               	xorlw	3	; case 6
 22490  00289E  B4D8               	btfsc	status,2,c
 22491  0028A0  D7D3               	goto	l12561
 22492  0028A2  0A01               	xorlw	1	; case 7
 22493  0028A4  B4D8               	btfsc	status,2,c
 22494  0028A6  D76C               	goto	L23
 22495  0028A8  0A0F               	xorlw	15	; case 8
 22496  0028AA  B4D8               	btfsc	status,2,c
 22497  0028AC  D7CF               	goto	l12565
 22498  0028AE  0A01               	xorlw	1	; case 9
 22499  0028B0  B4D8               	btfsc	status,2,c
 22500  0028B2  D7CE               	goto	l12567
 22501  0028B4  0A03               	xorlw	3	; case 10
 22502  0028B6  B4D8               	btfsc	status,2,c
 22503  0028B8  D7CD               	goto	l12569
 22504  0028BA  0A01               	xorlw	1	; case 11
 22505  0028BC  B4D8               	btfsc	status,2,c
 22506  0028BE  D7CC               	goto	l12571
 22507  0028C0  0A07               	xorlw	7	; case 12
 22508  0028C2  B4D8               	btfsc	status,2,c
 22509  0028C4  D7CB               	goto	l12573
 22510  0028C6  0A01               	xorlw	1	; case 13
 22511  0028C8  B4D8               	btfsc	status,2,c
 22512  0028CA  D7CA               	goto	l12575
 22513  0028CC  0A03               	xorlw	3	; case 14
 22514  0028CE  B4D8               	btfsc	status,2,c
 22515  0028D0  D7CD               	goto	l12577
 22516  0028D2  D77A               	goto	l12539
 22517  0028D4                     l12591:
 22518                           
 22519                           ;MCP2515.c: 352:             cfg1 = (0x18);
 22520  0028D4  0E18               	movlw	24
 22521  0028D6  D763               	goto	L29
 22522  0028D8                     L27:
 22523  0028D8  6E22               	movwf	mcp2515_configRate@cfg2^0,c
 22524                           
 22525                           ;MCP2515.c: 354:             cfg3 = (0x81);
 22526  0028DA  0E81               	movlw	129
 22527  0028DC  D759               	goto	L13
 22528  0028DE                     l12595:
 22529                           
 22530                           ;MCP2515.c: 364:             cfg1 = (0xC4);
 22531  0028DE  0EC4               	movlw	196
 22532  0028E0  D7A9               	goto	L15
 22533  0028E2                     l12603:
 22534                           
 22535                           ;MCP2515.c: 382:             cfg1 = (0x44);
 22536  0028E2  0E44               	movlw	68
 22537  0028E4  D75C               	goto	L29
 22538  0028E6                     l12607:
 22539                           
 22540                           ;MCP2515.c: 394:             cfg1 = (0x40);
 22541  0028E6  0E40               	movlw	64
 22542  0028E8  D74A               	goto	L11
 22543  0028EA                     l12609:
 22544                           
 22545                           ;MCP2515.c: 400:             cfg1 = (0x00);
 22546  0028EA  0E00               	movlw	0
 22547  0028EC  6E21               	movwf	mcp2515_configRate@cfg1^0,c
 22548                           
 22549                           ;MCP2515.c: 401:             cfg2 = (0xD9);
 22550  0028EE  0ED9               	movlw	217
 22551  0028F0  6E22               	movwf	mcp2515_configRate@cfg2^0,c
 22552                           
 22553                           ;MCP2515.c: 402:             cfg3 = (0x82);
 22554  0028F2  0E82               	movlw	130
 22555  0028F4  D74D               	goto	L13
 22556  0028F6                     l12621:
 22557  0028F6  5020               	movf	mcp2515_configRate@canSpeed^0,w,c
 22558  0028F8  6E1D               	movwf	??_mcp2515_configRate^0,c
 22559  0028FA  6A1E               	clrf	(??_mcp2515_configRate+1)^0,c
 22560                           
 22561                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22562                           ; Switch size 1, requested type "simple"
 22563                           ; Number of cases is 1, Range of values is 0 to 0
 22564                           ; switch strategies available:
 22565                           ; Name         Instructions Cycles
 22566                           ; simple_byte            4     3 (average)
 22567                           ;	Chosen strategy is simple_byte
 22568  0028FC  501E               	movf	(??_mcp2515_configRate+1)^0,w,c
 22569  0028FE  0A00               	xorlw	0	; case 0
 22570  002900  A4D8               	btfss	status,2,c
 22571  002902  D762               	goto	l12539
 22572                           
 22573                           ; Switch size 1, requested type "simple"
 22574                           ; Number of cases is 9, Range of values is 6 to 14
 22575                           ; switch strategies available:
 22576                           ; Name         Instructions Cycles
 22577                           ; simple_byte           28    15 (average)
 22578                           ;	Chosen strategy is simple_byte
 22579  002904  501D               	movf	??_mcp2515_configRate^0,w,c
 22580  002906  0A06               	xorlw	6	; case 6
 22581  002908  B4D8               	btfsc	status,2,c
 22582  00290A  D7E4               	goto	l12591
 22583  00290C  0A01               	xorlw	1	; case 7
 22584  00290E  B4D8               	btfsc	status,2,c
 22585  002910  D79B               	goto	l12561
 22586  002912  0A0F               	xorlw	15	; case 8
 22587  002914  B4D8               	btfsc	status,2,c
 22588  002916  D7E3               	goto	l12595
 22589  002918  0A01               	xorlw	1	; case 9
 22590  00291A  B4D8               	btfsc	status,2,c
 22591  00291C  D797               	goto	l12565
 22592  00291E  0A03               	xorlw	3	; case 10
 22593  002920  B4D8               	btfsc	status,2,c
 22594  002922  D796               	goto	l12567
 22595  002924  0A01               	xorlw	1	; case 11
 22596  002926  B4D8               	btfsc	status,2,c
 22597  002928  D7DC               	goto	l12603
 22598  00292A  0A07               	xorlw	7	; case 12
 22599  00292C  B4D8               	btfsc	status,2,c
 22600  00292E  D794               	goto	l12571
 22601  002930  0A01               	xorlw	1	; case 13
 22602  002932  B4D8               	btfsc	status,2,c
 22603  002934  D7D8               	goto	l12607
 22604  002936  0A03               	xorlw	3	; case 14
 22605  002938  B4D8               	btfsc	status,2,c
 22606  00293A  D7D7               	goto	l12609
 22607  00293C  D745               	goto	l12539
 22608  00293E                     l12633:
 22609  00293E  501C               	movf	mcp2515_configRate@canClock^0,w,c
 22610  002940  6E1D               	movwf	??_mcp2515_configRate^0,c
 22611  002942  6A1E               	clrf	(??_mcp2515_configRate+1)^0,c
 22612                           
 22613                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22614                           ; Switch size 1, requested type "simple"
 22615                           ; Number of cases is 1, Range of values is 0 to 0
 22616                           ; switch strategies available:
 22617                           ; Name         Instructions Cycles
 22618                           ; simple_byte            4     3 (average)
 22619                           ;	Chosen strategy is simple_byte
 22620  002944  501E               	movf	(??_mcp2515_configRate+1)^0,w,c
 22621  002946  0A00               	xorlw	0	; case 0
 22622  002948  A4D8               	btfss	status,2,c
 22623  00294A  D73E               	goto	l12539
 22624                           
 22625                           ; Switch size 1, requested type "simple"
 22626                           ; Number of cases is 3, Range of values is 0 to 2
 22627                           ; switch strategies available:
 22628                           ; Name         Instructions Cycles
 22629                           ; simple_byte           10     6 (average)
 22630                           ;	Chosen strategy is simple_byte
 22631  00294C  501D               	movf	??_mcp2515_configRate^0,w,c
 22632  00294E  0A00               	xorlw	0	; case 0
 22633  002950  B4D8               	btfsc	status,2,c
 22634  002952  D7D1               	goto	l12621
 22635  002954  0A01               	xorlw	1	; case 1
 22636  002956  B4D8               	btfsc	status,2,c
 22637  002958  D78D               	goto	l12589
 22638  00295A  0A03               	xorlw	3	; case 2
 22639  00295C  B4D8               	btfsc	status,2,c
 22640  00295E  D736               	goto	l12549
 22641  002960  D733               	goto	l12539
 22642  002962                     l12635:
 22643                           
 22644                           ;MCP2515.c: 419:         mcp2515_setRegister(0x2A, cfg1);
 22645                           
 22646                           ;MCP2515.c: 418:     if (set) {
 22647  002962  C021  F01A         	movff	mcp2515_configRate@cfg1,mcp2515_setRegister@value
 22648  002966  0E2A               	movlw	42
 22649  002968  ECD4  F02E         	call	_mcp2515_setRegister
 22650                           
 22651                           ;MCP2515.c: 420:         mcp2515_setRegister(0x29, cfg2);
 22652  00296C  C022  F01A         	movff	mcp2515_configRate@cfg2,mcp2515_setRegister@value
 22653  002970  0E29               	movlw	41
 22654  002972  ECD4  F02E         	call	_mcp2515_setRegister
 22655                           
 22656                           ;MCP2515.c: 421:         mcp2515_setRegister(0x28, cfg3);
 22657  002976  C023  F01A         	movff	mcp2515_configRate@cfg3,mcp2515_setRegister@value
 22658  00297A  0E28               	movlw	40
 22659  00297C  ECD4  F02E         	call	_mcp2515_setRegister
 22660                           
 22661                           ;MCP2515.c: 422:         return (0);
 22662  002980  0E00               	movlw	0
 22663  002982  0012               	return		;funcret
 22664  002984                     __end_of_mcp2515_configRate:
 22665                           	callstack 0
 22666                           
 22667 ;; *************** function _mcp2515_setRegister *****************
 22668 ;; Defined at:
 22669 ;;		line 66 in file "MCP2515.c"
 22670 ;; Parameters:    Size  Location     Type
 22671 ;;  address         1    wreg     unsigned char 
 22672 ;;  value           1   25[COMRAM] unsigned char 
 22673 ;; Auto vars:     Size  Location     Type
 22674 ;;  address         1   26[COMRAM] unsigned char 
 22675 ;; Return value:  Size  Location     Type
 22676 ;;                  1    wreg      void 
 22677 ;; Registers used:
 22678 ;;		wreg, status,2, cstack
 22679 ;; Tracked objects:
 22680 ;;		On entry : 0/0
 22681 ;;		On exit  : 0/0
 22682 ;;		Unchanged: 0/0
 22683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22684 ;;      Params:         1       0       0       0       0       0       0       0       0
 22685 ;;      Locals:         1       0       0       0       0       0       0       0       0
 22686 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22687 ;;      Totals:         2       0       0       0       0       0       0       0       0
 22688 ;;Total ram usage:        2 bytes
 22689 ;; Hardware stack levels used:    1
 22690 ;; Hardware stack levels required when called:    4
 22691 ;; This function calls:
 22692 ;;		_MPC2515_SPI
 22693 ;; This function is called by:
 22694 ;;		_mcp2515_configRate
 22695 ;;		_mcp2515_initCANBuffers
 22696 ;;		_mcp2515_init
 22697 ;; This function uses a non-reentrant model
 22698 ;;
 22699                           
 22700                           	psect	text130
 22701  005DA8                     __ptext130:
 22702                           	callstack 0
 22703  005DA8                     _mcp2515_setRegister:
 22704                           	callstack 21
 22705                           
 22706                           ;incstack = 0
 22707                           ;mcp2515_setRegister@address stored from wreg
 22708  005DA8  6E1B               	movwf	mcp2515_setRegister@address^0,c
 22709                           
 22710                           ;MCP2515.c: 66: void mcp2515_setRegister(unsigned char address, unsigned char value);MCP
      +                          2515.c: 67: {;MCP2515.c: 69:     LATBbits.LATB4 = 0;
 22711  005DAA  988A               	bcf	138,4,c	;volatile
 22712                           
 22713                           ;MCP2515.c: 70:     MPC2515_SPI(0x02);
 22714  005DAC  0E02               	movlw	2
 22715  005DAE  EC23  F02F         	call	_MPC2515_SPI
 22716                           
 22717                           ;MCP2515.c: 71:     MPC2515_SPI(address);
 22718  005DB2  501B               	movf	mcp2515_setRegister@address^0,w,c
 22719  005DB4  EC23  F02F         	call	_MPC2515_SPI
 22720                           
 22721                           ;MCP2515.c: 72:     MPC2515_SPI(value);
 22722  005DB8  501A               	movf	mcp2515_setRegister@value^0,w,c
 22723  005DBA  EC23  F02F         	call	_MPC2515_SPI
 22724                           
 22725                           ;MCP2515.c: 73:     LATBbits.LATB4 = 1;
 22726  005DBE  888A               	bsf	138,4,c	;volatile
 22727  005DC0  0012               	return		;funcret
 22728  005DC2                     __end_of_mcp2515_setRegister:
 22729                           	callstack 0
 22730                           
 22731 ;; *************** function _MPC2515_SPI *****************
 22732 ;; Defined at:
 22733 ;;		line 1317 in file "MCP2515.c"
 22734 ;; Parameters:    Size  Location     Type
 22735 ;;  data            1    wreg     unsigned char 
 22736 ;; Auto vars:     Size  Location     Type
 22737 ;;  data            1   24[COMRAM] unsigned char 
 22738 ;; Return value:  Size  Location     Type
 22739 ;;                  1    wreg      unsigned char 
 22740 ;; Registers used:
 22741 ;;		wreg, status,2
 22742 ;; Tracked objects:
 22743 ;;		On entry : 0/0
 22744 ;;		On exit  : 0/0
 22745 ;;		Unchanged: 0/0
 22746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22747 ;;      Params:         0       0       0       0       0       0       0       0       0
 22748 ;;      Locals:         1       0       0       0       0       0       0       0       0
 22749 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22750 ;;      Totals:         1       0       0       0       0       0       0       0       0
 22751 ;;Total ram usage:        1 bytes
 22752 ;; Hardware stack levels used:    1
 22753 ;; Hardware stack levels required when called:    3
 22754 ;; This function calls:
 22755 ;;		Nothing
 22756 ;; This function is called by:
 22757 ;;		_mcp2515_reset
 22758 ;;		_mcp2515_readRegister
 22759 ;;		_mcp2515_readRegisterS
 22760 ;;		_mcp2515_setRegister
 22761 ;;		_mcp2515_setRegisterS
 22762 ;;		_mcp2515_modifyRegister
 22763 ;;		_mcp2515_readStatus
 22764 ;; This function uses a non-reentrant model
 22765 ;;
 22766                           
 22767                           	psect	text131
 22768  005E46                     __ptext131:
 22769                           	callstack 0
 22770  005E46                     _MPC2515_SPI:
 22771                           	callstack 19
 22772                           
 22773                           ;incstack = 0
 22774                           ;MPC2515_SPI@data stored from wreg
 22775  005E46  6E19               	movwf	MPC2515_SPI@data^0,c
 22776                           
 22777                           ;MCP2515.c: 1317: uint8_t MPC2515_SPI(uint8_t data);MCP2515.c: 1318: {;MCP2515.c: 1319: 
      +                              SSPBUF = data;
 22778  005E48  C019  FFC9         	movff	MPC2515_SPI@data,4041	;volatile
 22779  005E4C                     l2018:
 22780  005E4C  A69E               	btfss	158,3,c	;volatile
 22781  005E4E  D7FE               	goto	l2018
 22782                           
 22783                           ;MCP2515.c: 1321:     PIR1bits.SSPIF = 0;
 22784  005E50  969E               	bcf	158,3,c	;volatile
 22785                           
 22786                           ;MCP2515.c: 1322:     return SSPBUF;
 22787  005E52  50C9               	movf	201,w,c	;volatile
 22788  005E54  0012               	return		;funcret
 22789  005E56                     __end_of_MPC2515_SPI:
 22790                           	callstack 0
 22791                           
 22792 ;; *************** function _SPI1_Initialize *****************
 22793 ;; Defined at:
 22794 ;;		line 1289 in file "MCP2515.c"
 22795 ;; Parameters:    Size  Location     Type
 22796 ;;		None
 22797 ;; Auto vars:     Size  Location     Type
 22798 ;;		None
 22799 ;; Return value:  Size  Location     Type
 22800 ;;                  1    wreg      void 
 22801 ;; Registers used:
 22802 ;;		wreg, status,2
 22803 ;; Tracked objects:
 22804 ;;		On entry : 0/1
 22805 ;;		On exit  : 0/0
 22806 ;;		Unchanged: 0/0
 22807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22808 ;;      Params:         0       0       0       0       0       0       0       0       0
 22809 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22810 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22811 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22812 ;;Total ram usage:        0 bytes
 22813 ;; Hardware stack levels used:    1
 22814 ;; Hardware stack levels required when called:    3
 22815 ;; This function calls:
 22816 ;;		Nothing
 22817 ;; This function is called by:
 22818 ;;		_MCP2515_INIT
 22819 ;; This function uses a non-reentrant model
 22820 ;;
 22821                           
 22822                           	psect	text132
 22823  005B5C                     __ptext132:
 22824                           	callstack 0
 22825  005B5C                     _SPI1_Initialize:
 22826                           	callstack 24
 22827                           
 22828                           ;MCP2515.c: 1292:     TRISBbits.TRISB0 = 1;
 22829                           
 22830                           ;incstack = 0
 22831  005B5C  8093               	bsf	147,0,c	;volatile
 22832                           
 22833                           ;MCP2515.c: 1293:     TRISBbits.TRISB1 = 0;
 22834  005B5E  9293               	bcf	147,1,c	;volatile
 22835                           
 22836                           ;MCP2515.c: 1294:     TRISAbits.TRISA5 = 0;
 22837  005B60  9A92               	bcf	146,5,c	;volatile
 22838                           
 22839                           ;MCP2515.c: 1295:     TRISCbits.TRISC7 = 0;
 22840  005B62  9E94               	bcf	148,7,c	;volatile
 22841                           
 22842                           ;MCP2515.c: 1299:     SSPSTAT = 0x40;
 22843  005B64  0E40               	movlw	64
 22844  005B66  6EC7               	movwf	199,c	;volatile
 22845                           
 22846                           ;MCP2515.c: 1300:     SSPCON1 = 0x22;
 22847  005B68  0E22               	movlw	34
 22848  005B6A  6EC6               	movwf	198,c	;volatile
 22849                           
 22850                           ;MCP2515.c: 1301:     SSPADD = 0x27;
 22851  005B6C  0E27               	movlw	39
 22852  005B6E  6EC8               	movwf	200,c	;volatile
 22853                           
 22854                           ;MCP2515.c: 1303:     PIR1bits.SSPIF=0;
 22855  005B70  969E               	bcf	158,3,c	;volatile
 22856                           
 22857                           ;MCP2515.c: 1307:     ADCON0=0;
 22858  005B72  0E00               	movlw	0
 22859  005B74  6EC2               	movwf	194,c	;volatile
 22860                           
 22861                           ;MCP2515.c: 1309:     ADCON1=0x0F;
 22862  005B76  0E0F               	movlw	15
 22863  005B78  6EC1               	movwf	193,c	;volatile
 22864                           
 22865                           ;MCP2515.c: 1311:     SSPCON1bits.SSPEN = 1;
 22866  005B7A  8AC6               	bsf	198,5,c	;volatile
 22867                           
 22868                           ;MCP2515.c: 1313:     INTCON2bits.RBPU=0;
 22869  005B7C  9EF1               	bcf	241,7,c	;volatile
 22870  005B7E  0012               	return		;funcret
 22871  005B80                     __end_of_SPI1_Initialize:
 22872                           	callstack 0
 22873                           
 22874 ;; *************** function _isr *****************
 22875 ;; Defined at:
 22876 ;;		line 110 in file "main.c"
 22877 ;; Parameters:    Size  Location     Type
 22878 ;;		None
 22879 ;; Auto vars:     Size  Location     Type
 22880 ;;  cont            1   23[COMRAM] unsigned char 
 22881 ;; Return value:  Size  Location     Type
 22882 ;;                  1    wreg      void 
 22883 ;; Registers used:
 22884 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22885 ;; Tracked objects:
 22886 ;;		On entry : 0/0
 22887 ;;		On exit  : 0/0
 22888 ;;		Unchanged: 0/0
 22889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22890 ;;      Params:         0       0       0       0       0       0       0       0       0
 22891 ;;      Locals:         1       0       0       0       0       0       0       0       0
 22892 ;;      Temps:         12       0       0       0       0       0       0       0       0
 22893 ;;      Totals:        13       0       0       0       0       0       0       0       0
 22894 ;;Total ram usage:       13 bytes
 22895 ;; Hardware stack levels used:    1
 22896 ;; Hardware stack levels required when called:    2
 22897 ;; This function calls:
 22898 ;;		_GPSRead
 22899 ;;		_recebe_dado_uart
 22900 ;;		i2_write_timer_zero
 22901 ;; This function is called by:
 22902 ;;		Interrupt level 2
 22903 ;; This function uses a non-reentrant model
 22904 ;;
 22905                           
 22906                           	psect	intcode
 22907  000008                     __pintcode:
 22908                           	callstack 0
 22909  000008                     _isr:
 22910                           	callstack 13
 22911                           
 22912                           ;incstack = 0
 22913  000008  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 22914  00000A  ED2B  F01F         	call	int_func,f	;refresh shadow registers
 22915                           
 22916                           	psect	intcode_body
 22917  003E56                     __pintcode_body:
 22918                           	callstack 13
 22919  003E56                     int_func:
 22920                           	callstack 13
 22921  003E56  0006               	pop		; remove dummy address from shadow register refresh
 22922  003E58  CFE1 F00E          	movff	fsr1l,??_isr+2
 22923  003E5C  CFE2 F00F          	movff	fsr1h,??_isr+3
 22924  003E60  CFD9 F010          	movff	fsr2l,??_isr+4
 22925  003E64  CFDA F011          	movff	fsr2h,??_isr+5
 22926  003E68  CFF3 F012          	movff	prodl,??_isr+6
 22927  003E6C  CFF4 F013          	movff	prodh,??_isr+7
 22928  003E70  CFF6 F014          	movff	tblptrl,??_isr+8
 22929  003E74  CFF7 F015          	movff	tblptrh,??_isr+9
 22930  003E78  CFF8 F016          	movff	tblptru,??_isr+10
 22931  003E7C  CFF5 F017          	movff	tablat,??_isr+11
 22932                           
 22933                           ;main.c: 112: unsigned char cont;;main.c: 115: if (PIE1bits.RCIE && PIR1bits.RCIF)
 22934  003E80  BA9D               	btfsc	157,5,c	;volatile
 22935  003E82  AA9E               	btfss	158,5,c	;volatile
 22936  003E84  D014               	goto	i2l14469
 22937                           
 22938                           ;main.c: 116: {;main.c: 117: PIR1bits.RCIF = 0;
 22939  003E86  9A9E               	bcf	158,5,c	;volatile
 22940                           
 22941                           ;main.c: 118: data_uart_recebe = recebe_dado_uart();
 22942  003E88  EC0A  F02F         	call	_recebe_dado_uart	;wreg free
 22943  003E8C  6E40               	movwf	_data_uart_recebe^0,c
 22944                           
 22945                           ;main.c: 119: GPSRead(data_uart_recebe);
 22946  003E8E  5040               	movf	_data_uart_recebe^0,w,c
 22947  003E90  EC92  F011         	call	_GPSRead
 22948                           
 22949                           ;main.c: 121: PORTBbits.RB2 = !PORTBbits.RB2;
 22950  003E94  B481               	btfsc	129,2,c	;volatile
 22951  003E96  D003               	goto	i2u1608_40
 22952  003E98  6A0C               	clrf	??_isr^0,c
 22953  003E9A  2A0C               	incf	??_isr^0,f,c
 22954  003E9C  D001               	goto	i2u1609_48
 22955  003E9E                     i2u1608_40:
 22956  003E9E  6A0C               	clrf	??_isr^0,c
 22957  003EA0                     i2u1609_48:
 22958  003EA0  460C               	rlncf	??_isr^0,f,c
 22959  003EA2  460C               	rlncf	??_isr^0,f,c
 22960  003EA4  5081               	movf	129,w,c	;volatile
 22961  003EA6  180C               	xorwf	??_isr^0,w,c
 22962  003EA8  0BFB               	andlw	-5
 22963  003EAA  180C               	xorwf	??_isr^0,w,c
 22964  003EAC  6E81               	movwf	129,c	;volatile
 22965  003EAE                     i2l14469:
 22966                           
 22967                           ;main.c: 122: };main.c: 125: unsigned char cont;;main.c: 127: if (TMR0IF && T0IF)
 22968  003EAE  B4F2               	btfsc	4082,2,c	;volatile
 22969  003EB0  A4F2               	btfss	4082,2,c	;volatile
 22970  003EB2  D043               	goto	i2l14507
 22971                           
 22972                           ;main.c: 128: {;main.c: 129: INTCONbits.TMR0IF = 0;
 22973  003EB4  94F2               	bcf	242,2,c	;volatile
 22974                           
 22975                           ;main.c: 130: sinaliza_int_timer = 1;
 22976  003EB6  0E01               	movlw	1
 22977  003EB8  6E3F               	movwf	_sinaliza_int_timer^0,c
 22978                           
 22979                           ;main.c: 132: for(cont= 0; cont<4;cont++)
 22980  003EBA  0E00               	movlw	0
 22981  003EBC  6E18               	movwf	isr@cont^0,c
 22982  003EBE                     i2l14481:
 22983                           
 22984                           ;main.c: 133: {;main.c: 134: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 22985  003EBE  5018               	movf	isr@cont^0,w,c
 22986  003EC0  0D02               	mullw	2
 22987  003EC2  0E00               	movlw	low _tempo_tarefa
 22988  003EC4  24F3               	addwf	243,w,c
 22989  003EC6  6ED9               	movwf	fsr2l,c
 22990  003EC8  0E01               	movlw	high _tempo_tarefa
 22991  003ECA  20F4               	addwfc	prodh,w,c
 22992  003ECC  6EDA               	movwf	fsr2h,c
 22993  003ECE  50DE               	movf	postinc2,w,c
 22994  003ED0  10DE               	iorwf	postinc2,w,c
 22995  003ED2  B4D8               	btfsc	status,2,c
 22996  003ED4  D00B               	goto	i2l14485
 22997  003ED6  5018               	movf	isr@cont^0,w,c
 22998  003ED8  0D02               	mullw	2
 22999  003EDA  0E00               	movlw	low _tempo_tarefa
 23000  003EDC  24F3               	addwf	243,w,c
 23001  003EDE  6ED9               	movwf	fsr2l,c
 23002  003EE0  0E01               	movlw	high _tempo_tarefa
 23003  003EE2  20F4               	addwfc	prodh,w,c
 23004  003EE4  6EDA               	movwf	fsr2h,c
 23005  003EE6  06DE               	decf	postinc2,f,c
 23006  003EE8  0E00               	movlw	0
 23007  003EEA  5ADD               	subwfb	postdec2,f,c
 23008  003EEC                     i2l14485:
 23009  003EEC  2A18               	incf	isr@cont^0,f,c
 23010  003EEE  0E03               	movlw	3
 23011  003EF0  6418               	cpfsgt	isr@cont^0,c
 23012  003EF2  D7E5               	goto	i2l14481
 23013                           
 23014                           ;main.c: 136: };main.c: 137: if(time_sd > 0) time_sd--;
 23015  003EF4  0101               	movlb	1	; () banked
 23016  003EF6  5126               	movf	_time_sd& (0+255),w,b
 23017  003EF8  1127               	iorwf	(_time_sd+1)& (0+255),w,b
 23018  003EFA  B4D8               	btfsc	status,2,c
 23019  003EFC  D003               	goto	i2l14493
 23020                           
 23021                           ; BSR set to: 1
 23022  003EFE  0726               	decf	_time_sd& (0+255),f,b
 23023  003F00  A0D8               	btfss	status,0,c
 23024  003F02  0727               	decf	(_time_sd+1)& (0+255),f,b
 23025  003F04                     i2l14493:
 23026                           
 23027                           ; BSR set to: 1
 23028                           ;main.c: 138: if(time_atualizacao > 0) time_atualizacao--;
 23029  003F04  5035               	movf	_time_atualizacao^0,w,c
 23030  003F06  1036               	iorwf	(_time_atualizacao+1)^0,w,c
 23031  003F08  B4D8               	btfsc	status,2,c
 23032  003F0A  D003               	goto	i2l14497
 23033                           
 23034                           ; BSR set to: 1
 23035  003F0C  0635               	decf	_time_atualizacao^0,f,c
 23036  003F0E  A0D8               	btfss	status,0,c
 23037  003F10  0636               	decf	(_time_atualizacao+1)^0,f,c
 23038  003F12                     i2l14497:
 23039                           
 23040                           ; BSR set to: 1
 23041                           ;main.c: 140: if(tarefa_em_execucao == 1)
 23042  003F12  043E               	decf	_tarefa_em_execucao^0,w,c	;volatile
 23043  003F14  A4D8               	btfss	status,2,c
 23044  003F16  D00B               	goto	i2l14505
 23045                           
 23046                           ; BSR set to: 1
 23047                           ;main.c: 141: {;main.c: 142: timeout_tarefa--;
 23048  003F18  0728               	decf	_timeout_tarefa& (0+255),f,b
 23049  003F1A  A0D8               	btfss	status,0,c
 23050  003F1C  0729               	decf	(_timeout_tarefa+1)& (0+255),f,b
 23051                           
 23052                           ; BSR set to: 1
 23053                           ;main.c: 143: if(!timeout_tarefa)
 23054  003F1E  5128               	movf	_timeout_tarefa& (0+255),w,b
 23055  003F20  1129               	iorwf	(_timeout_tarefa+1)& (0+255),w,b
 23056  003F22  A4D8               	btfss	status,2,c
 23057  003F24  D004               	goto	i2l14505
 23058                           
 23059                           ; BSR set to: 1
 23060                           ;main.c: 144: {;main.c: 146: PCLATH = 0;
 23061  003F26  0E00               	movlw	0
 23062  003F28  6EFA               	movwf	250,c	;volatile
 23063                           
 23064                           ;main.c: 147: PCL = 0;
 23065  003F2A  0E00               	movlw	0
 23066  003F2C  6EF9               	movwf	249,c	;volatile
 23067  003F2E                     i2l14505:
 23068                           
 23069                           ; BSR set to: 1
 23070                           ;main.c: 148: };main.c: 149: };main.c: 153: write_timer_zero(0x45);
 23071  003F2E  0E00               	movlw	0
 23072  003F30  6E02               	movwf	(i2write_timer_zero@timer0+1)^0,c
 23073  003F32  0E45               	movlw	69
 23074  003F34  6E01               	movwf	i2write_timer_zero@timer0^0,c
 23075  003F36  EC73  F02F         	call	i2_write_timer_zero	;wreg free
 23076  003F3A                     i2l14507:
 23077                           
 23078                           ;main.c: 154: };main.c: 156: if (INT0IF && INT0IE)
 23079  003F3A  B2F2               	btfsc	4082,1,c	;volatile
 23080  003F3C  A8F2               	btfss	4082,4,c	;volatile
 23081  003F3E  D001               	goto	i2l1408
 23082                           
 23083                           ;main.c: 157: {;main.c: 158: INT0IF = 0;
 23084  003F40  92F2               	bcf	4082,1,c	;volatile
 23085  003F42                     i2l1408:
 23086  003F42  C017  FFF5         	movff	??_isr+11,tablat
 23087  003F46  C016  FFF8         	movff	??_isr+10,tblptru
 23088  003F4A  C015  FFF7         	movff	??_isr+9,tblptrh
 23089  003F4E  C014  FFF6         	movff	??_isr+8,tblptrl
 23090  003F52  C013  FFF4         	movff	??_isr+7,prodh
 23091  003F56  C012  FFF3         	movff	??_isr+6,prodl
 23092  003F5A  C011  FFDA         	movff	??_isr+5,fsr2h
 23093  003F5E  C010  FFD9         	movff	??_isr+4,fsr2l
 23094  003F62  C00F  FFE2         	movff	??_isr+3,fsr1h
 23095  003F66  C00E  FFE1         	movff	??_isr+2,fsr1l
 23096  003F6A  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 23097  003F6C  0011               	retfie		f
 23098  003F6E                     __end_of_isr:
 23099                           	callstack 0
 23100                           
 23101 ;; *************** function i2_write_timer_zero *****************
 23102 ;; Defined at:
 23103 ;;		line 134 in file "bibliotecas/hardware.c"
 23104 ;; Parameters:    Size  Location     Type
 23105 ;;  timer0          2    0[COMRAM] unsigned int 
 23106 ;; Auto vars:     Size  Location     Type
 23107 ;;		None
 23108 ;; Return value:  Size  Location     Type
 23109 ;;                  1    wreg      void 
 23110 ;; Registers used:
 23111 ;;		None
 23112 ;; Tracked objects:
 23113 ;;		On entry : 3F/1
 23114 ;;		On exit  : 3F/1
 23115 ;;		Unchanged: 3F/0
 23116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23117 ;;      Params:         2       0       0       0       0       0       0       0       0
 23118 ;;      Locals:         0       0       0       0       0       0       0       0       0
 23119 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23120 ;;      Totals:         2       0       0       0       0       0       0       0       0
 23121 ;;Total ram usage:        2 bytes
 23122 ;; Hardware stack levels used:    1
 23123 ;; This function calls:
 23124 ;;		Nothing
 23125 ;; This function is called by:
 23126 ;;		_isr
 23127 ;; This function uses a non-reentrant model
 23128 ;;
 23129                           
 23130                           	psect	text134
 23131  005EE6                     __ptext134:
 23132                           	callstack 0
 23133  005EE6                     i2_write_timer_zero:
 23134                           	callstack 14
 23135                           
 23136                           ; BSR set to: 1
 23137                           ;hardware.c: 142: TMR0 = timer0;
 23138                           
 23139                           ;incstack = 0
 23140  005EE6  C001  FFD6         	movff	i2write_timer_zero@timer0,4054	;volatile
 23141  005EEA  C002  FFD7         	movff	i2write_timer_zero@timer0+1,4055	;volatile
 23142                           
 23143                           ; BSR set to: 1
 23144  005EEE  0012               	return		;funcret
 23145  005EF0                     __end_ofi2_write_timer_zero:
 23146                           	callstack 0
 23147                           
 23148 ;; *************** function _recebe_dado_uart *****************
 23149 ;; Defined at:
 23150 ;;		line 138 in file "bibliotecas/uart.c"
 23151 ;; Parameters:    Size  Location     Type
 23152 ;;		None
 23153 ;; Auto vars:     Size  Location     Type
 23154 ;;		None
 23155 ;; Return value:  Size  Location     Type
 23156 ;;                  1    wreg      unsigned char 
 23157 ;; Registers used:
 23158 ;;		wreg, status,2
 23159 ;; Tracked objects:
 23160 ;;		On entry : 0/0
 23161 ;;		On exit  : 0/0
 23162 ;;		Unchanged: 0/0
 23163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23164 ;;      Params:         0       0       0       0       0       0       0       0       0
 23165 ;;      Locals:         0       0       0       0       0       0       0       0       0
 23166 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23167 ;;      Totals:         0       0       0       0       0       0       0       0       0
 23168 ;;Total ram usage:        0 bytes
 23169 ;; Hardware stack levels used:    1
 23170 ;; This function calls:
 23171 ;;		Nothing
 23172 ;; This function is called by:
 23173 ;;		_isr
 23174 ;; This function uses a non-reentrant model
 23175 ;;
 23176                           
 23177                           	psect	text135
 23178  005E14                     __ptext135:
 23179                           	callstack 0
 23180  005E14                     _recebe_dado_uart:
 23181                           	callstack 14
 23182                           
 23183                           ;uart.c: 140: while(RCIF==0);
 23184                           
 23185                           ; BSR set to: 1
 23186                           ;incstack = 0
 23187  005E14  AA9E               	btfss	3998,5,c	;volatile
 23188  005E16  D7FE               	goto	_recebe_dado_uart
 23189                           
 23190                           ;uart.c: 141: if(RCSTAbits.OERR)
 23191  005E18  A2AB               	btfss	171,1,c	;volatile
 23192  005E1A  D003               	goto	i2l10901
 23193                           
 23194                           ;uart.c: 142: {;uart.c: 143: CREN = 0;
 23195  005E1C  98AB               	bcf	4011,4,c	;volatile
 23196                           
 23197                           ;uart.c: 144: __nop();
 23198  005E1E  F000               	nop	
 23199                           
 23200                           ;uart.c: 145: CREN=1;
 23201  005E20  88AB               	bsf	4011,4,c	;volatile
 23202  005E22                     i2l10901:
 23203                           
 23204                           ;uart.c: 146: };uart.c: 147: return(RCREG);
 23205  005E22  50AE               	movf	174,w,c	;volatile
 23206  005E24  0012               	return		;funcret
 23207  005E26                     __end_of_recebe_dado_uart:
 23208                           	callstack 0
 23209                           
 23210 ;; *************** function _GPSRead *****************
 23211 ;; Defined at:
 23212 ;;		line 49 in file "bibliotecas/GPS.c"
 23213 ;; Parameters:    Size  Location     Type
 23214 ;;  buff            1    wreg     unsigned char 
 23215 ;; Auto vars:     Size  Location     Type
 23216 ;;  buff            1    9[COMRAM] unsigned char 
 23217 ;;  c               1   10[COMRAM] unsigned char 
 23218 ;; Return value:  Size  Location     Type
 23219 ;;                  2  348[None  ] int 
 23220 ;; Registers used:
 23221 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23222 ;; Tracked objects:
 23223 ;;		On entry : 0/0
 23224 ;;		On exit  : 0/0
 23225 ;;		Unchanged: 0/0
 23226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23227 ;;      Params:         0       0       0       0       0       0       0       0       0
 23228 ;;      Locals:         2       0       0       0       0       0       0       0       0
 23229 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23230 ;;      Totals:         2       0       0       0       0       0       0       0       0
 23231 ;;Total ram usage:        2 bytes
 23232 ;; Hardware stack levels used:    1
 23233 ;; Hardware stack levels required when called:    1
 23234 ;; This function calls:
 23235 ;;		_strcmp
 23236 ;;		_stringcpy
 23237 ;; This function is called by:
 23238 ;;		_isr
 23239 ;; This function uses a non-reentrant model
 23240 ;;
 23241                           
 23242                           	psect	text136
 23243  002324                     __ptext136:
 23244                           	callstack 0
 23245  002324                     _GPSRead:
 23246                           	callstack 13
 23247                           
 23248                           ;incstack = 0
 23249                           ;GPSRead@buff stored from wreg
 23250  002324  6E0A               	movwf	GPSRead@buff^0,c
 23251                           
 23252                           ;GPS.c: 51: uint8_t c = buff;
 23253  002326  C00A  F00B         	movff	GPSRead@buff,GPSRead@c
 23254                           
 23255                           ;GPS.c: 53: switch(c) {
 23256  00232A  D106               	goto	i2l14307
 23257  00232C                     i2l14203:
 23258                           
 23259                           ;GPS.c: 55: if(SentenceType == 1)
 23260  00232C  0444               	decf	_SentenceType^0,w,c
 23261  00232E  A4D8               	btfss	status,2,c
 23262  002330  D005               	goto	i2l14207
 23263                           
 23264                           ;GPS.c: 56: GPRMC_ok = 1;
 23265  002332  0E00               	movlw	0
 23266  002334  0101               	movlb	1	; () banked
 23267  002336  6F2F               	movwf	(_GPRMC_ok+1)& (0+255),b
 23268  002338  0E01               	movlw	1
 23269  00233A  6F2E               	movwf	_GPRMC_ok& (0+255),b
 23270  00233C                     i2l14207:
 23271                           
 23272                           ;GPS.c: 57: if(SentenceType == 2)
 23273  00233C  0E02               	movlw	2
 23274  00233E  1844               	xorwf	_SentenceType^0,w,c
 23275  002340  A4D8               	btfss	status,2,c
 23276  002342  D005               	goto	i2l14211
 23277                           
 23278                           ;GPS.c: 58: GPGGA_ok = 1;
 23279  002344  0E00               	movlw	0
 23280  002346  0101               	movlb	1	; () banked
 23281  002348  6F2D               	movwf	(_GPGGA_ok+1)& (0+255),b
 23282  00234A  0E01               	movlw	1
 23283  00234C  6F2C               	movwf	_GPGGA_ok& (0+255),b
 23284  00234E                     i2l14211:
 23285                           
 23286                           ;GPS.c: 59: if(GPRMC_ok && GPGGA_ok) {
 23287  00234E  0101               	movlb	1	; () banked
 23288  002350  512E               	movf	_GPRMC_ok& (0+255),w,b
 23289  002352  112F               	iorwf	(_GPRMC_ok+1)& (0+255),w,b
 23290  002354  B4D8               	btfsc	status,2,c
 23291  002356  0012               	return	
 23292                           
 23293                           ; BSR set to: 1
 23294  002358  512C               	movf	_GPGGA_ok& (0+255),w,b
 23295  00235A  112D               	iorwf	(_GPGGA_ok+1)& (0+255),w,b
 23296  00235C  B4D8               	btfsc	status,2,c
 23297  00235E  0012               	return	
 23298                           
 23299                           ; BSR set to: 1
 23300                           ;GPS.c: 60: GPRMC_ok = GPGGA_ok = 0;
 23301  002360  0E00               	movlw	0
 23302  002362  6F2D               	movwf	(_GPGGA_ok+1)& (0+255),b
 23303  002364  0E00               	movlw	0
 23304  002366  6F2C               	movwf	_GPGGA_ok& (0+255),b
 23305  002368  C12C  F12E         	movff	_GPGGA_ok,_GPRMC_ok
 23306  00236C  C12D  F12F         	movff	_GPGGA_ok+1,_GPRMC_ok+1
 23307  002370  0012               	return	
 23308  002372                     i2l14219:
 23309                           
 23310                           ;GPS.c: 66: Term = char_number = 0;
 23311  002372  0E00               	movlw	0
 23312  002374  6E45               	movwf	_char_number^0,c
 23313  002376  C045  F043         	movff	_char_number,_Term
 23314                           
 23315                           ;GPS.c: 67: break;
 23316  00237A  0012               	return	
 23317  00237C                     i2l14221:
 23318                           
 23319                           ;GPS.c: 70: buffer[char_number] = '\0';
 23320  00237C  0ECA               	movlw	low _buffer
 23321  00237E  2445               	addwf	_char_number^0,w,c
 23322  002380  6ED9               	movwf	fsr2l,c
 23323  002382  6ADA               	clrf	fsr2h,c
 23324  002384  0E01               	movlw	high _buffer
 23325  002386  22DA               	addwfc	fsr2h,f,c
 23326  002388  0E00               	movlw	0
 23327  00238A  6EDF               	movwf	indf2,c
 23328                           
 23329                           ;GPS.c: 71: if(Term == 0) {
 23330  00238C  5043               	movf	_Term^0,w,c
 23331  00238E  A4D8               	btfss	status,2,c
 23332  002390  D030               	goto	i2l14237
 23333                           
 23334                           ;GPS.c: 72: stringcpy(buffer, sentence, 0);
 23335  002392  0ECA               	movlw	low _buffer
 23336  002394  6E01               	movwf	stringcpy@str1^0,c
 23337  002396  0E01               	movlw	high _buffer
 23338  002398  6E02               	movwf	(stringcpy@str1+1)^0,c
 23339  00239A  0EF0               	movlw	low _sentence
 23340  00239C  6E03               	movwf	stringcpy@str2^0,c
 23341  00239E  0E01               	movlw	high _sentence
 23342  0023A0  6E04               	movwf	(stringcpy@str2+1)^0,c
 23343  0023A2  0E00               	movlw	0
 23344  0023A4  6E06               	movwf	(stringcpy@dir+1)^0,c
 23345  0023A6  0E00               	movlw	0
 23346  0023A8  6E05               	movwf	stringcpy@dir^0,c
 23347  0023AA  EC01  F02B         	call	_stringcpy	;wreg free
 23348                           
 23349                           ;GPS.c: 73: if(strcmp(sentence, "GPRMC") == 0)
 23350  0023AE  0EF0               	movlw	low _sentence
 23351  0023B0  6E01               	movwf	strcmp@s1^0,c
 23352  0023B2  0E01               	movlw	high _sentence
 23353  0023B4  6E02               	movwf	(strcmp@s1+1)^0,c
 23354  0023B6  0E54               	movlw	low STR_5
 23355  0023B8  6E03               	movwf	strcmp@s2^0,c
 23356  0023BA  0E62               	movlw	high STR_5
 23357  0023BC  6E04               	movwf	(strcmp@s2+1)^0,c
 23358  0023BE  EC94  F02A         	call	_strcmp	;wreg free
 23359  0023C2  5001               	movf	?_strcmp^0,w,c
 23360  0023C4  1002               	iorwf	(?_strcmp+1)^0,w,c
 23361  0023C6  A4D8               	btfss	status,2,c
 23362  0023C8  D002               	goto	i2l14231
 23363                           
 23364                           ;GPS.c: 74: SentenceType = 1;
 23365  0023CA  0E01               	movlw	1
 23366  0023CC  D011               	goto	L30
 23367  0023CE                     i2l14231:
 23368                           
 23369                           ;GPS.c: 75: else if(strcmp(sentence, "GPGGA") == 0)
 23370  0023CE  0EF0               	movlw	low _sentence
 23371  0023D0  6E01               	movwf	strcmp@s1^0,c
 23372  0023D2  0E01               	movlw	high _sentence
 23373  0023D4  6E02               	movwf	(strcmp@s1+1)^0,c
 23374  0023D6  0E4E               	movlw	low STR_6
 23375  0023D8  6E03               	movwf	strcmp@s2^0,c
 23376  0023DA  0E62               	movlw	high STR_6
 23377  0023DC  6E04               	movwf	(strcmp@s2+1)^0,c
 23378  0023DE  EC94  F02A         	call	_strcmp	;wreg free
 23379  0023E2  5001               	movf	?_strcmp^0,w,c
 23380  0023E4  1002               	iorwf	(?_strcmp+1)^0,w,c
 23381  0023E6  A4D8               	btfss	status,2,c
 23382  0023E8  D002               	goto	i2l14235
 23383                           
 23384                           ;GPS.c: 76: SentenceType = 2;
 23385  0023EA  0E02               	movlw	2
 23386  0023EC  D001               	goto	L30
 23387  0023EE                     i2l14235:
 23388                           
 23389                           ;GPS.c: 77: else;GPS.c: 78: SentenceType = 3;
 23390  0023EE  0E03               	movlw	3
 23391  0023F0                     L30:
 23392  0023F0  6E44               	movwf	_SentenceType^0,c
 23393  0023F2                     i2l14237:
 23394                           
 23395                           ;GPS.c: 79: };GPS.c: 82: if(Term == 1 && SentenceType == 1) {
 23396  0023F2  0443               	decf	_Term^0,w,c
 23397  0023F4  A4D8               	btfss	status,2,c
 23398  0023F6  D013               	goto	i2l14245
 23399  0023F8  0444               	decf	_SentenceType^0,w,c
 23400  0023FA  A4D8               	btfss	status,2,c
 23401  0023FC  D010               	goto	i2l14245
 23402                           
 23403                           ;GPS.c: 83: stringcpy(buffer, rawTime, 0);
 23404  0023FE  0ECA               	movlw	low _buffer
 23405  002400  6E01               	movwf	stringcpy@str1^0,c
 23406  002402  0E01               	movlw	high _buffer
 23407  002404  6E02               	movwf	(stringcpy@str1+1)^0,c
 23408  002406  0ED6               	movlw	low _rawTime
 23409  002408  6E03               	movwf	stringcpy@str2^0,c
 23410  00240A  0E01               	movlw	high _rawTime
 23411  00240C  6E04               	movwf	(stringcpy@str2+1)^0,c
 23412  00240E  0E00               	movlw	0
 23413  002410  6E06               	movwf	(stringcpy@dir+1)^0,c
 23414  002412  0E00               	movlw	0
 23415  002414  6E05               	movwf	stringcpy@dir^0,c
 23416  002416  EC01  F02B         	call	_stringcpy	;wreg free
 23417                           
 23418                           ;GPS.c: 84: gps_flag[0].flag = 1;
 23419  00241A  0101               	movlb	1	; () banked
 23420  00241C  8118               	bsf	_gps_flag& (0+255),0,b
 23421  00241E                     i2l14245:
 23422                           
 23423                           ;GPS.c: 85: };GPS.c: 88: if((Term == 3) && (SentenceType == 1)) {
 23424  00241E  0E03               	movlw	3
 23425  002420  1843               	xorwf	_Term^0,w,c
 23426  002422  A4D8               	btfss	status,2,c
 23427  002424  D013               	goto	i2l14253
 23428  002426  0444               	decf	_SentenceType^0,w,c
 23429  002428  A4D8               	btfss	status,2,c
 23430  00242A  D010               	goto	i2l14253
 23431                           
 23432                           ;GPS.c: 89: stringcpy(buffer, rawLatitude, 1);
 23433  00242C  0ECA               	movlw	low _buffer
 23434  00242E  6E01               	movwf	stringcpy@str1^0,c
 23435  002430  0E01               	movlw	high _buffer
 23436  002432  6E02               	movwf	(stringcpy@str1+1)^0,c
 23437  002434  0E8D               	movlw	low _rawLatitude
 23438  002436  6E03               	movwf	stringcpy@str2^0,c
 23439  002438  0E02               	movlw	high _rawLatitude
 23440  00243A  6E04               	movwf	(stringcpy@str2+1)^0,c
 23441  00243C  0E00               	movlw	0
 23442  00243E  6E06               	movwf	(stringcpy@dir+1)^0,c
 23443  002440  0E01               	movlw	1
 23444  002442  6E05               	movwf	stringcpy@dir^0,c
 23445  002444  EC01  F02B         	call	_stringcpy	;wreg free
 23446                           
 23447                           ;GPS.c: 90: gps_flag[1].flag = 1;
 23448  002448  0101               	movlb	1	; () banked
 23449  00244A  8119               	bsf	(_gps_flag+1)& (0+255),0,b
 23450  00244C                     i2l14253:
 23451                           
 23452                           ;GPS.c: 91: };GPS.c: 93: if((Term == 4) && (SentenceType == 1)) {
 23453  00244C  0E04               	movlw	4
 23454  00244E  1843               	xorwf	_Term^0,w,c
 23455  002450  A4D8               	btfss	status,2,c
 23456  002452  D00D               	goto	i2l14263
 23457  002454  0444               	decf	_SentenceType^0,w,c
 23458  002456  A4D8               	btfss	status,2,c
 23459  002458  D00A               	goto	i2l14263
 23460                           
 23461                           ;GPS.c: 94: if(buffer[0] == 'N')
 23462  00245A  0E4E               	movlw	78
 23463  00245C  0101               	movlb	1	; () banked
 23464  00245E  19CA               	xorwf	_buffer& (0+255),w,b
 23465  002460  A4D8               	btfss	status,2,c
 23466  002462  D002               	goto	i2l14261
 23467                           
 23468                           ; BSR set to: 1
 23469                           ;GPS.c: 95: rawLatitude[0] = '0';
 23470  002464  0E30               	movlw	48
 23471  002466  D001               	goto	L31
 23472  002468                     i2l14261:
 23473                           
 23474                           ; BSR set to: 1
 23475                           ;GPS.c: 96: else;GPS.c: 97: rawLatitude[0] = '-';
 23476  002468  0E2D               	movlw	45
 23477  00246A                     L31:
 23478  00246A  0102               	movlb	2	; () banked
 23479  00246C  6F8D               	movwf	_rawLatitude& (0+255),b
 23480  00246E                     i2l14263:
 23481                           
 23482                           ;GPS.c: 98: };GPS.c: 101: if((Term == 5) && (SentenceType == 1)) {
 23483  00246E  0E05               	movlw	5
 23484  002470  1843               	xorwf	_Term^0,w,c
 23485  002472  A4D8               	btfss	status,2,c
 23486  002474  D013               	goto	i2l14271
 23487  002476  0444               	decf	_SentenceType^0,w,c
 23488  002478  A4D8               	btfss	status,2,c
 23489  00247A  D010               	goto	i2l14271
 23490                           
 23491                           ;GPS.c: 102: stringcpy(buffer, rawLongitude, 1);
 23492  00247C  0ECA               	movlw	low _buffer
 23493  00247E  6E01               	movwf	stringcpy@str1^0,c
 23494  002480  0E01               	movlw	high _buffer
 23495  002482  6E02               	movwf	(stringcpy@str1+1)^0,c
 23496  002484  0E80               	movlw	low _rawLongitude
 23497  002486  6E03               	movwf	stringcpy@str2^0,c
 23498  002488  0E02               	movlw	high _rawLongitude
 23499  00248A  6E04               	movwf	(stringcpy@str2+1)^0,c
 23500  00248C  0E00               	movlw	0
 23501  00248E  6E06               	movwf	(stringcpy@dir+1)^0,c
 23502  002490  0E01               	movlw	1
 23503  002492  6E05               	movwf	stringcpy@dir^0,c
 23504  002494  EC01  F02B         	call	_stringcpy	;wreg free
 23505                           
 23506                           ;GPS.c: 103: gps_flag[2].flag = 1;
 23507  002498  0101               	movlb	1	; () banked
 23508  00249A  811A               	bsf	(_gps_flag+2)& (0+255),0,b
 23509  00249C                     i2l14271:
 23510                           
 23511                           ;GPS.c: 104: };GPS.c: 106: if((Term == 6) && (SentenceType == 1)) {
 23512  00249C  0E06               	movlw	6
 23513  00249E  1843               	xorwf	_Term^0,w,c
 23514  0024A0  A4D8               	btfss	status,2,c
 23515  0024A2  D00D               	goto	i2l14281
 23516  0024A4  0444               	decf	_SentenceType^0,w,c
 23517  0024A6  A4D8               	btfss	status,2,c
 23518  0024A8  D00A               	goto	i2l14281
 23519                           
 23520                           ;GPS.c: 107: if(buffer[0] == 'E')
 23521  0024AA  0E45               	movlw	69
 23522  0024AC  0101               	movlb	1	; () banked
 23523  0024AE  19CA               	xorwf	_buffer& (0+255),w,b
 23524  0024B0  A4D8               	btfss	status,2,c
 23525  0024B2  D002               	goto	i2l14279
 23526                           
 23527                           ; BSR set to: 1
 23528                           ;GPS.c: 108: rawLongitude[0] = '0';
 23529  0024B4  0E30               	movlw	48
 23530  0024B6  D001               	goto	L32
 23531  0024B8                     i2l14279:
 23532                           
 23533                           ; BSR set to: 1
 23534                           ;GPS.c: 109: else;GPS.c: 110: rawLongitude[0] = '-';
 23535  0024B8  0E2D               	movlw	45
 23536  0024BA                     L32:
 23537  0024BA  0102               	movlb	2	; () banked
 23538  0024BC  6F80               	movwf	_rawLongitude& (0+255),b
 23539  0024BE                     i2l14281:
 23540                           
 23541                           ;GPS.c: 111: };GPS.c: 124: if(Term == 9 && SentenceType == 1) {
 23542  0024BE  0E09               	movlw	9
 23543  0024C0  1843               	xorwf	_Term^0,w,c
 23544  0024C2  A4D8               	btfss	status,2,c
 23545  0024C4  D013               	goto	i2l14289
 23546  0024C6  0444               	decf	_SentenceType^0,w,c
 23547  0024C8  A4D8               	btfss	status,2,c
 23548  0024CA  D010               	goto	i2l14289
 23549                           
 23550                           ;GPS.c: 125: stringcpy(buffer, rawDate, 0);
 23551  0024CC  0ECA               	movlw	low _buffer
 23552  0024CE  6E01               	movwf	stringcpy@str1^0,c
 23553  0024D0  0E01               	movlw	high _buffer
 23554  0024D2  6E02               	movwf	(stringcpy@str1+1)^0,c
 23555  0024D4  0EE9               	movlw	low _rawDate
 23556  0024D6  6E03               	movwf	stringcpy@str2^0,c
 23557  0024D8  0E01               	movlw	high _rawDate
 23558  0024DA  6E04               	movwf	(stringcpy@str2+1)^0,c
 23559  0024DC  0E00               	movlw	0
 23560  0024DE  6E06               	movwf	(stringcpy@dir+1)^0,c
 23561  0024E0  0E00               	movlw	0
 23562  0024E2  6E05               	movwf	stringcpy@dir^0,c
 23563  0024E4  EC01  F02B         	call	_stringcpy	;wreg free
 23564                           
 23565                           ;GPS.c: 126: gps_flag[3].flag = 1;
 23566  0024E8  0101               	movlb	1	; () banked
 23567  0024EA  811B               	bsf	(_gps_flag+3)& (0+255),0,b
 23568  0024EC                     i2l14289:
 23569                           
 23570                           ;GPS.c: 127: };GPS.c: 140: if((Term == 6) && (SentenceType == 2)) {
 23571  0024EC  0E06               	movlw	6
 23572  0024EE  1843               	xorwf	_Term^0,w,c
 23573  0024F0  A4D8               	btfss	status,2,c
 23574  0024F2  D014               	goto	i2l14297
 23575  0024F4  0E02               	movlw	2
 23576  0024F6  1844               	xorwf	_SentenceType^0,w,c
 23577  0024F8  A4D8               	btfss	status,2,c
 23578  0024FA  D010               	goto	i2l14297
 23579                           
 23580                           ;GPS.c: 141: stringcpy(buffer, rawFix, 0);
 23581  0024FC  0ECA               	movlw	low _buffer
 23582  0024FE  6E01               	movwf	stringcpy@str1^0,c
 23583  002500  0E01               	movlw	high _buffer
 23584  002502  6E02               	movwf	(stringcpy@str1+1)^0,c
 23585  002504  0EFA               	movlw	low _rawFix
 23586  002506  6E03               	movwf	stringcpy@str2^0,c
 23587  002508  0E01               	movlw	high _rawFix
 23588  00250A  6E04               	movwf	(stringcpy@str2+1)^0,c
 23589  00250C  0E00               	movlw	0
 23590  00250E  6E06               	movwf	(stringcpy@dir+1)^0,c
 23591  002510  0E00               	movlw	0
 23592  002512  6E05               	movwf	stringcpy@dir^0,c
 23593  002514  EC01  F02B         	call	_stringcpy	;wreg free
 23594                           
 23595                           ;GPS.c: 142: gps_flag[4].flag = 1;
 23596  002518  0101               	movlb	1	; () banked
 23597  00251A  811C               	bsf	(_gps_flag+4)& (0+255),0,b
 23598  00251C                     i2l14297:
 23599                           
 23600                           ;GPS.c: 144: };GPS.c: 145: Term++;
 23601  00251C  2A43               	incf	_Term^0,f,c
 23602                           
 23603                           ;GPS.c: 146: char_number = 0;
 23604  00251E  0E00               	movlw	0
 23605  002520  6E45               	movwf	_char_number^0,c
 23606                           
 23607                           ;GPS.c: 147: break;
 23608  002522  0012               	return	
 23609  002524                     i2l14301:
 23610                           
 23611                           ;GPS.c: 150: buffer[char_number++] = c;
 23612  002524  0ECA               	movlw	low _buffer
 23613  002526  2445               	addwf	_char_number^0,w,c
 23614  002528  6ED9               	movwf	fsr2l,c
 23615  00252A  6ADA               	clrf	fsr2h,c
 23616  00252C  0E01               	movlw	high _buffer
 23617  00252E  22DA               	addwfc	fsr2h,f,c
 23618  002530  C00B  FFDF         	movff	GPSRead@c,indf2
 23619  002534  2A45               	incf	_char_number^0,f,c
 23620                           
 23621                           ;GPS.c: 151: break;
 23622  002536  0012               	return	
 23623  002538                     i2l14307:
 23624  002538  500B               	movf	GPSRead@c^0,w,c
 23625                           
 23626                           ; Switch size 1, requested type "simple"
 23627                           ; Number of cases is 3, Range of values is 13 to 44
 23628                           ; switch strategies available:
 23629                           ; Name         Instructions Cycles
 23630                           ; simple_byte           10     6 (average)
 23631                           ;	Chosen strategy is simple_byte
 23632  00253A  0A0D               	xorlw	13	; case 13
 23633  00253C  B4D8               	btfsc	status,2,c
 23634  00253E  D6F6               	goto	i2l14203
 23635  002540  0A29               	xorlw	41	; case 36
 23636  002542  B4D8               	btfsc	status,2,c
 23637  002544  D716               	goto	i2l14219
 23638  002546  0A08               	xorlw	8	; case 44
 23639  002548  B4D8               	btfsc	status,2,c
 23640  00254A  D718               	goto	i2l14221
 23641  00254C  D7EB               	goto	i2l14301
 23642  00254E                     __end_of_GPSRead:
 23643                           	callstack 0
 23644                           
 23645 ;; *************** function _stringcpy *****************
 23646 ;; Defined at:
 23647 ;;		line 40 in file "bibliotecas/GPS.c"
 23648 ;; Parameters:    Size  Location     Type
 23649 ;;  str1            2    0[COMRAM] PTR unsigned char 
 23650 ;;		 -> buffer(12), 
 23651 ;;  str2            2    2[COMRAM] PTR unsigned char 
 23652 ;;		 -> rawFix(2), rawDate(7), rawLongitude(13), rawLatitude(13), 
 23653 ;;		 -> rawTime(11), sentence(6), 
 23654 ;;  dir             2    4[COMRAM] int 
 23655 ;; Auto vars:     Size  Location     Type
 23656 ;;  chr             1    8[COMRAM] unsigned char 
 23657 ;; Return value:  Size  Location     Type
 23658 ;;                  1    wreg      void 
 23659 ;; Registers used:
 23660 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 23661 ;; Tracked objects:
 23662 ;;		On entry : 0/0
 23663 ;;		On exit  : 0/0
 23664 ;;		Unchanged: 0/0
 23665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23666 ;;      Params:         6       0       0       0       0       0       0       0       0
 23667 ;;      Locals:         1       0       0       0       0       0       0       0       0
 23668 ;;      Temps:          2       0       0       0       0       0       0       0       0
 23669 ;;      Totals:         9       0       0       0       0       0       0       0       0
 23670 ;;Total ram usage:        9 bytes
 23671 ;; Hardware stack levels used:    1
 23672 ;; This function calls:
 23673 ;;		Nothing
 23674 ;; This function is called by:
 23675 ;;		_GPSRead
 23676 ;; This function uses a non-reentrant model
 23677 ;;
 23678                           
 23679                           	psect	text137
 23680  005602                     __ptext137:
 23681                           	callstack 0
 23682  005602                     _stringcpy:
 23683                           	callstack 13
 23684                           
 23685                           ;GPS.c: 42: uint8_t chr = 0;
 23686                           
 23687                           ;incstack = 0
 23688  005602  0E00               	movlw	0
 23689  005604  6E09               	movwf	stringcpy@chr^0,c
 23690  005606                     i2l13973:
 23691                           
 23692                           ;GPS.c: 45: str2[chr + dir] = str1[chr];
 23693  005606  5009               	movf	stringcpy@chr^0,w,c
 23694  005608  2401               	addwf	stringcpy@str1^0,w,c
 23695  00560A  6ED9               	movwf	fsr2l,c
 23696  00560C  0E00               	movlw	0
 23697  00560E  2002               	addwfc	(stringcpy@str1+1)^0,w,c
 23698  005610  6EDA               	movwf	fsr2h,c
 23699  005612  5009               	movf	stringcpy@chr^0,w,c
 23700  005614  2403               	addwf	stringcpy@str2^0,w,c
 23701  005616  6E07               	movwf	??_stringcpy^0,c
 23702  005618  0E00               	movlw	0
 23703  00561A  2004               	addwfc	(stringcpy@str2+1)^0,w,c
 23704  00561C  6E08               	movwf	(??_stringcpy+1)^0,c
 23705  00561E  5005               	movf	stringcpy@dir^0,w,c
 23706  005620  2407               	addwf	??_stringcpy^0,w,c
 23707  005622  6EE1               	movwf	fsr1l,c
 23708  005624  5006               	movf	(stringcpy@dir+1)^0,w,c
 23709  005626  2008               	addwfc	(??_stringcpy+1)^0,w,c
 23710  005628  6EE2               	movwf	fsr1h,c
 23711  00562A  CFDF FFE7          	movff	indf2,indf1
 23712                           
 23713                           ;GPS.c: 46: } while(str1[chr++] != '\0');
 23714  00562E  2A09               	incf	stringcpy@chr^0,f,c
 23715  005630  0409               	decf	stringcpy@chr^0,w,c
 23716  005632  6E07               	movwf	??_stringcpy^0,c
 23717  005634  5007               	movf	??_stringcpy^0,w,c
 23718  005636  2401               	addwf	stringcpy@str1^0,w,c
 23719  005638  6ED9               	movwf	fsr2l,c
 23720  00563A  0E00               	movlw	0
 23721  00563C  2002               	addwfc	(stringcpy@str1+1)^0,w,c
 23722  00563E  6EDA               	movwf	fsr2h,c
 23723  005640  50DF               	movf	indf2,w,c
 23724  005642  B4D8               	btfsc	status,2,c
 23725  005644  0012               	return	
 23726  005646  D7DF               	goto	i2l13973
 23727  005648                     __end_of_stringcpy:
 23728                           	callstack 0
 23729                           
 23730 ;; *************** function _strcmp *****************
 23731 ;; Defined at:
 23732 ;;		line 33 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strcmp.c"
 23733 ;; Parameters:    Size  Location     Type
 23734 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 23735 ;;		 -> sentence(6), 
 23736 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 23737 ;;		 -> STR_6(6), STR_5(6), 
 23738 ;; Auto vars:     Size  Location     Type
 23739 ;;  r               1    6[COMRAM] char 
 23740 ;; Return value:  Size  Location     Type
 23741 ;;                  2    0[COMRAM] int 
 23742 ;; Registers used:
 23743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 23744 ;; Tracked objects:
 23745 ;;		On entry : 0/0
 23746 ;;		On exit  : 0/0
 23747 ;;		Unchanged: 0/0
 23748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23749 ;;      Params:         4       0       0       0       0       0       0       0       0
 23750 ;;      Locals:         1       0       0       0       0       0       0       0       0
 23751 ;;      Temps:          2       0       0       0       0       0       0       0       0
 23752 ;;      Totals:         7       0       0       0       0       0       0       0       0
 23753 ;;Total ram usage:        7 bytes
 23754 ;; Hardware stack levels used:    1
 23755 ;; This function calls:
 23756 ;;		Nothing
 23757 ;; This function is called by:
 23758 ;;		_GPSRead
 23759 ;; This function uses a non-reentrant model
 23760 ;;
 23761                           
 23762                           	psect	text138
 23763  005528                     __ptext138:
 23764                           	callstack 0
 23765  005528                     _strcmp:
 23766                           	callstack 13
 23767                           
 23768                           ;incstack = 0
 23769  005528  D004               	goto	i2l13981
 23770  00552A                     i2l13979:
 23771  00552A  4A01               	infsnz	strcmp@s1^0,f,c
 23772  00552C  2A02               	incf	(strcmp@s1+1)^0,f,c
 23773  00552E  4A03               	infsnz	strcmp@s2^0,f,c
 23774  005530  2A04               	incf	(strcmp@s2+1)^0,f,c
 23775  005532                     i2l13981:
 23776  005532  C003  FFF6         	movff	strcmp@s2,tblptrl
 23777  005536  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 23778  00553A                     	if	0	;tblptru may be non-zero
 23779  00553A                     	endif
 23780  00553A                     	if	0	;tblptru may be non-zero
 23781  00553A                     	endif
 23782  00553A  0008               	tblrd		*
 23783  00553C  CFF5 F005          	movff	tablat,??_strcmp
 23784  005540  C001  FFD9         	movff	strcmp@s1,fsr2l
 23785  005544  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 23786  005548  50DF               	movf	indf2,w,c
 23787  00554A  6E06               	movwf	(??_strcmp+1)^0,c
 23788  00554C  5005               	movf	??_strcmp^0,w,c
 23789  00554E  5C06               	subwf	(??_strcmp+1)^0,w,c
 23790  005550  6E07               	movwf	strcmp@r^0,c
 23791  005552  5007               	movf	strcmp@r^0,w,c
 23792  005554  A4D8               	btfss	status,2,c
 23793  005556  D007               	goto	i2u1534_40
 23794  005558  C001  FFD9         	movff	strcmp@s1,fsr2l
 23795  00555C  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 23796  005560  50DF               	movf	indf2,w,c
 23797  005562  A4D8               	btfss	status,2,c
 23798  005564  D7E2               	goto	i2l13979
 23799  005566                     i2u1534_40:
 23800  005566  5007               	movf	strcmp@r^0,w,c
 23801  005568  6E01               	movwf	?_strcmp^0,c
 23802  00556A  6A02               	clrf	(?_strcmp+1)^0,c
 23803  00556C  BE01               	btfsc	?_strcmp^0,7,c
 23804  00556E  0602               	decf	(?_strcmp+1)^0,f,c
 23805  005570  0012               	return		;funcret
 23806  005572                     __end_of_strcmp:
 23807                           	callstack 0
 23808                           
 23809                           	psect	text139
 23810  000000                     __ptext139:
 23811                           	callstack 0
 23812                           
 23813                           	psect	rparam
 23814  0000                     
 23815                           	psect	temp
 23816  000047                     btemp:
 23817                           	callstack 0
 23818  000047                     	ds	1
 23819  0000                     int$flags	set	btemp
 23820  0000                     wtemp8	set	btemp+1
 23821  0000                     ttemp5	set	btemp+1
 23822  0000                     ttemp6	set	btemp+4
 23823  0000                     ttemp7	set	btemp+8
 23824                           
 23825                           	psect	idloc
 23826                           
 23827                           ;Config register IDLOC0 @ 0x200000
 23828                           ;	unspecified, using default values
 23829  200000                     	org	2097152
 23830  200000  FF                 	db	255
 23831                           
 23832                           ;Config register IDLOC1 @ 0x200001
 23833                           ;	unspecified, using default values
 23834  200001                     	org	2097153
 23835  200001  FF                 	db	255
 23836                           
 23837                           ;Config register IDLOC2 @ 0x200002
 23838                           ;	unspecified, using default values
 23839  200002                     	org	2097154
 23840  200002  FF                 	db	255
 23841                           
 23842                           ;Config register IDLOC3 @ 0x200003
 23843                           ;	unspecified, using default values
 23844  200003                     	org	2097155
 23845  200003  FF                 	db	255
 23846                           
 23847                           ;Config register IDLOC4 @ 0x200004
 23848                           ;	unspecified, using default values
 23849  200004                     	org	2097156
 23850  200004  FF                 	db	255
 23851                           
 23852                           ;Config register IDLOC5 @ 0x200005
 23853                           ;	unspecified, using default values
 23854  200005                     	org	2097157
 23855  200005  FF                 	db	255
 23856                           
 23857                           ;Config register IDLOC6 @ 0x200006
 23858                           ;	unspecified, using default values
 23859  200006                     	org	2097158
 23860  200006  FF                 	db	255
 23861                           
 23862                           ;Config register IDLOC7 @ 0x200007
 23863                           ;	unspecified, using default values
 23864  200007                     	org	2097159
 23865  200007  FF                 	db	255
 23866                           
 23867                           	psect	config
 23868                           
 23869                           ;Config register CONFIG1L @ 0x300000
 23870                           ;	unspecified, using default values
 23871                           ;	PLL Prescaler Selection bits
 23872                           ;	PLLDIV = 0x0, unprogrammed default
 23873                           ;	System Clock Postscaler Selection bits
 23874                           ;	CPUDIV = 0x0, unprogrammed default
 23875                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
 23876                           ;	USBDIV = 0x0, unprogrammed default
 23877  300000                     	org	3145728
 23878  300000  00                 	db	0
 23879                           
 23880                           ;Config register CONFIG1H @ 0x300001
 23881                           ;	unspecified, using default values
 23882                           ;	Oscillator Selection bits
 23883                           ;	FOSC = 0x5, unprogrammed default
 23884                           ;	Fail-Safe Clock Monitor Enable bit
 23885                           ;	FCMEN = 0x0, unprogrammed default
 23886                           ;	Internal/External Oscillator Switchover bit
 23887                           ;	IESO = 0x0, unprogrammed default
 23888  300001                     	org	3145729
 23889  300001  05                 	db	5
 23890                           
 23891                           ;Config register CONFIG2L @ 0x300002
 23892                           ;	unspecified, using default values
 23893                           ;	Power-up Timer Enable bit
 23894                           ;	PWRT = 0x1, unprogrammed default
 23895                           ;	Brown-out Reset Enable bits
 23896                           ;	BOR = 0x3, unprogrammed default
 23897                           ;	Brown-out Reset Voltage bits
 23898                           ;	BORV = 0x3, unprogrammed default
 23899                           ;	USB Voltage Regulator Enable bit
 23900                           ;	VREGEN = 0x0, unprogrammed default
 23901  300002                     	org	3145730
 23902  300002  1F                 	db	31
 23903                           
 23904                           ;Config register CONFIG2H @ 0x300003
 23905                           ;	unspecified, using default values
 23906                           ;	Watchdog Timer Enable bit
 23907                           ;	WDT = 0x1, unprogrammed default
 23908                           ;	Watchdog Timer Postscale Select bits
 23909                           ;	WDTPS = 0xF, unprogrammed default
 23910  300003                     	org	3145731
 23911  300003  1F                 	db	31
 23912                           
 23913                           ; Padding undefined space
 23914  300004                     	org	3145732
 23915  300004  FF                 	db	255
 23916                           
 23917                           ;Config register CONFIG3H @ 0x300005
 23918                           ;	unspecified, using default values
 23919                           ;	CCP2 MUX bit
 23920                           ;	CCP2MX = 0x1, unprogrammed default
 23921                           ;	PORTB A/D Enable bit
 23922                           ;	PBADEN = 0x1, unprogrammed default
 23923                           ;	Low-Power Timer 1 Oscillator Enable bit
 23924                           ;	LPT1OSC = 0x0, unprogrammed default
 23925                           ;	MCLR Pin Enable bit
 23926                           ;	MCLRE = 0x1, unprogrammed default
 23927  300005                     	org	3145733
 23928  300005  83                 	db	131
 23929                           
 23930                           ;Config register CONFIG4L @ 0x300006
 23931                           ;	unspecified, using default values
 23932                           ;	Stack Full/Underflow Reset Enable bit
 23933                           ;	STVREN = 0x1, unprogrammed default
 23934                           ;	Single-Supply ICSP Enable bit
 23935                           ;	LVP = 0x1, unprogrammed default
 23936                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
 23937                           ;	ICPRT = 0x0, unprogrammed default
 23938                           ;	Extended Instruction Set Enable bit
 23939                           ;	XINST = 0x0, unprogrammed default
 23940                           ;	Background Debugger Enable bit
 23941                           ;	DEBUG = 0x1, unprogrammed default
 23942  300006                     	org	3145734
 23943  300006  85                 	db	133
 23944                           
 23945                           ; Padding undefined space
 23946  300007                     	org	3145735
 23947  300007  FF                 	db	255
 23948                           
 23949                           ;Config register CONFIG5L @ 0x300008
 23950                           ;	unspecified, using default values
 23951                           ;	Code Protection bit
 23952                           ;	CP0 = 0x1, unprogrammed default
 23953                           ;	Code Protection bit
 23954                           ;	CP1 = 0x1, unprogrammed default
 23955                           ;	Code Protection bit
 23956                           ;	CP2 = 0x1, unprogrammed default
 23957                           ;	Code Protection bit
 23958                           ;	CP3 = 0x1, unprogrammed default
 23959  300008                     	org	3145736
 23960  300008  0F                 	db	15
 23961                           
 23962                           ;Config register CONFIG5H @ 0x300009
 23963                           ;	unspecified, using default values
 23964                           ;	Boot Block Code Protection bit
 23965                           ;	CPB = 0x1, unprogrammed default
 23966                           ;	Data EEPROM Code Protection bit
 23967                           ;	CPD = 0x1, unprogrammed default
 23968  300009                     	org	3145737
 23969  300009  C0                 	db	192
 23970                           
 23971                           ;Config register CONFIG6L @ 0x30000A
 23972                           ;	unspecified, using default values
 23973                           ;	Write Protection bit
 23974                           ;	WRT0 = 0x1, unprogrammed default
 23975                           ;	Write Protection bit
 23976                           ;	WRT1 = 0x1, unprogrammed default
 23977                           ;	Write Protection bit
 23978                           ;	WRT2 = 0x1, unprogrammed default
 23979                           ;	Write Protection bit
 23980                           ;	WRT3 = 0x1, unprogrammed default
 23981  30000A                     	org	3145738
 23982  30000A  0F                 	db	15
 23983                           
 23984                           ;Config register CONFIG6H @ 0x30000B
 23985                           ;	unspecified, using default values
 23986                           ;	Configuration Register Write Protection bit
 23987                           ;	WRTC = 0x1, unprogrammed default
 23988                           ;	Boot Block Write Protection bit
 23989                           ;	WRTB = 0x1, unprogrammed default
 23990                           ;	Data EEPROM Write Protection bit
 23991                           ;	WRTD = 0x1, unprogrammed default
 23992  30000B                     	org	3145739
 23993  30000B  E0                 	db	224
 23994                           
 23995                           ;Config register CONFIG7L @ 0x30000C
 23996                           ;	unspecified, using default values
 23997                           ;	Table Read Protection bit
 23998                           ;	EBTR0 = 0x1, unprogrammed default
 23999                           ;	Table Read Protection bit
 24000                           ;	EBTR1 = 0x1, unprogrammed default
 24001                           ;	Table Read Protection bit
 24002                           ;	EBTR2 = 0x1, unprogrammed default
 24003                           ;	Table Read Protection bit
 24004                           ;	EBTR3 = 0x1, unprogrammed default
 24005  30000C                     	org	3145740
 24006  30000C  0F                 	db	15
 24007                           
 24008                           ;Config register CONFIG7H @ 0x30000D
 24009                           ;	unspecified, using default values
 24010                           ;	Boot Block Table Read Protection bit
 24011                           ;	EBTRB = 0x1, unprogrammed default
 24012  30000D                     	org	3145741
 24013  30000D  40                 	db	64
 24014                           tosu	equ	0xFFF
 24015                           tosh	equ	0xFFE
 24016                           tosl	equ	0xFFD
 24017                           stkptr	equ	0xFFC
 24018                           pclatu	equ	0xFFB
 24019                           pclath	equ	0xFFA
 24020                           pcl	equ	0xFF9
 24021                           tblptru	equ	0xFF8
 24022                           tblptrh	equ	0xFF7
 24023                           tblptrl	equ	0xFF6
 24024                           tablat	equ	0xFF5
 24025                           prodh	equ	0xFF4
 24026                           prodl	equ	0xFF3
 24027                           indf0	equ	0xFEF
 24028                           postinc0	equ	0xFEE
 24029                           postdec0	equ	0xFED
 24030                           preinc0	equ	0xFEC
 24031                           plusw0	equ	0xFEB
 24032                           fsr0h	equ	0xFEA
 24033                           fsr0l	equ	0xFE9
 24034                           wreg	equ	0xFE8
 24035                           indf1	equ	0xFE7
 24036                           postinc1	equ	0xFE6
 24037                           postdec1	equ	0xFE5
 24038                           preinc1	equ	0xFE4
 24039                           plusw1	equ	0xFE3
 24040                           fsr1h	equ	0xFE2
 24041                           fsr1l	equ	0xFE1
 24042                           bsr	equ	0xFE0
 24043                           indf2	equ	0xFDF
 24044                           postinc2	equ	0xFDE
 24045                           postdec2	equ	0xFDD
 24046                           preinc2	equ	0xFDC
 24047                           plusw2	equ	0xFDB
 24048                           fsr2h	equ	0xFDA
 24049                           fsr2l	equ	0xFD9
 24050                           status	equ	0xFD8

Data Sizes:
    Strings     376
    Constant    126
    Data        18
    BSS         1000
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      70
    BANK0           160    151     158
    BANK1           256      0     255
    BANK2           256     34     225
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$4089	PTR FTN()void  size(2) Largest target is 1
		 -> troca_de_tela(), disparo_gravacao(), verifica_dados_operacionais(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_25(CODE[7]), STR_24(CODE[5]), rawDate(BANK1[7]), rawLongitude(BANK2[13]), 
		 -> rawLatitude(BANK2[13]), rawTime(BANK1[11]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_25(CODE[7]), STR_24(CODE[5]), rawDate(BANK1[7]), rawLongitude(BANK2[13]), 
		 -> rawLatitude(BANK2[13]), rawTime(BANK1[11]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 124
		 -> poligono_ext(BANK1[124]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 12
		 -> diff_calc@point(BANK0[12]), diff_calc@fence(BANK0[12]), temp_buff_lat(BANK2[11]), temp_buff_long(BANK2[12]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 12
		 -> diff_calc@point(BANK0[12]), diff_calc@fence(BANK0[12]), temp_buff_lat(BANK2[11]), temp_buff_long(BANK2[12]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_6(CODE[6]), STR_5(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 6
		 -> sentence(BANK1[6]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_13(CODE[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 20
		 -> filename(BANK2[20]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 20
		 -> filename(BANK2[20]), 

    memset@p1	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memset@p	PTR unsigned char  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d1	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    memcpy@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK0[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK0[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), STR_21(CODE[4]), 

    memcmp@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 12
		 -> diff_calc@point(BANK0[12]), diff_calc@fence(BANK0[12]), 

    MCP2515_RECEBE@buf	PTR unsigned char  size(1) Largest target is 4
		 -> verifica_dados_operacionais@rpm(BANK0[4]), 

    MCP2515_RECEBE@len	PTR unsigned char  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    MCP2515_RECEBE@id	PTR unsigned long  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    readMsgBuf@buf	PTR unsigned char  size(1) Largest target is 4
		 -> verifica_dados_operacionais@rpm(BANK0[4]), 

    readMsgBuf@len	PTR unsigned char  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    readMsgBuf@id	PTR unsigned long  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), 

    mcp2515_read_id@id	PTR unsigned long  size(2) Largest target is 4
		 -> m_nID(BANK1[4]), 

    mcp2515_read_id@ext	PTR unsigned char  size(1) Largest target is 1
		 -> m_nExtFlg(COMRAM[1]), 

    mcp2515_setRegisterS@values	PTR unsigned char  size(2) Largest target is 8
		 -> m_nDta(BANK1[8]), mcp2515_write_mf@tbufdata(COMRAM[4]), mcp2515_write_id@tbufdata(COMRAM[4]), 

    mcp2515_readRegisterS@values	PTR unsigned char  size(2) Largest target is 8
		 -> m_nDta(BANK1[8]), mcp2515_read_id@tbufdata(COMRAM[4]), 

    diff_calc@p_buff_point	PTR unsigned char  size(2) Largest target is 124
		 -> poligono_ext(BANK1[124]), 

    diff_calc@p_buff_fence	PTR unsigned char  size(2) Largest target is 124
		 -> poligono_ext(BANK1[124]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 12
		 -> diff_calc@point(BANK0[12]), diff_calc@fence(BANK0[12]), temp_buff_lat(BANK2[11]), temp_buff_long(BANK2[12]), 

    point_buff_gps_long	PTR unsigned char  size(2) Largest target is 13
		 -> NULL(NULL[0]), rawLongitude(BANK2[13]), 

    point_buff_gps_lat	PTR unsigned char  size(2) Largest target is 13
		 -> NULL(NULL[0]), rawLatitude(BANK2[13]), 

    disparo_gravacao@fix_gps	PTR unsigned char  size(2) Largest target is 2
		 -> rawFix(BANK1[2]), 

    p_tarefas	PTR FTN()void [4] size(2) Largest target is 1
		 -> troca_de_tela(), disparo_gravacao(), verifica_dados_operacionais(), 

    fprintf@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fprintf@str	PTR const unsigned char  size(2) Largest target is 39
		 -> STR_14(CODE[39]), 

    fprintf@arp	PTR void [1] size(1) Largest target is 2
		 -> ?_fprintf(BANK0[2]), 

    fputs@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fputs@str	PTR const unsigned char  size(2) Largest target is 69
		 -> fprintf@s(BANK2[16]), ?_fprintf(BANK0[2]), STR_19(CODE[16]), STR_18(CODE[27]), 
		 -> STR_17(CODE[17]), STR_16(CODE[16]), STR_15(CODE[16]), string_dado(BANK2[69]), 

    fputc@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    sp__fgets	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_readdir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_opendir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@bw	PTR unsigned int  size(1) Largest target is 2
		 -> fputc@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(1) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_write@wbuff	PTR const unsigned char  size(1) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__memcpy	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_20(CODE[13]), filename(BANK2[20]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> fs(BIGRAM[544]), 

    validate@fs	PTR const struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@path	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> f_opendir@path(COMRAM[2]), f_open@path(BANK0[2]), 

    auto_mount@p	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_20(CODE[13]), filename(BANK2[20]), 

    check_fs@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dir	PTR PTR unsigned char  size(1) Largest target is 2
		 -> f_open@dir(BANK0[2]), 

    reserve_direntry@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj	PTR struct _DIR_E size(1) Largest target is 15
		 -> f_open@dj(BANK0[14]), 

    reserve_direntry@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), 

    trace_path@dir	PTR PTR unsigned char  size(1) Largest target is 2
		 -> f_opendir@dir(COMRAM[2]), f_open@dir(BANK0[2]), 

    trace_path@path	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_20(CODE[13]), filename(BANK2[20]), 

    trace_path@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dj	PTR struct _DIR_E size(1) Largest target is 15
		 -> f_open@dj(BANK0[14]), 

    trace_path@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@path	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> trace_path@path(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@dirname	PTR unsigned char  size(1) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), 

    S1395_DIR_E$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj	PTR struct _DIR_E size(1) Largest target is 15
		 -> f_open@dj(BANK0[14]), 

    clust2sect@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    create_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    remove_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@p	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    get_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sync@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    FatFs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    move_window@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    hora_nome@p_buff	PTR unsigned char  size(2) Largest target is 69
		 -> string_dado(BANK2[69]), 

    data_nome@p_buff	PTR unsigned char  size(2) Largest target is 69
		 -> string_dado(BANK2[69]), 

    monta_sd@dado	PTR unsigned char  size(2) Largest target is 13
		 -> STR_25(CODE[7]), STR_24(CODE[5]), rawDate(BANK1[7]), rawLongitude(BANK2[13]), 
		 -> rawLatitude(BANK2[13]), rawTime(BANK1[11]), 

    sp__leitura_sdcard	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK2[20]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 20
		 -> filename(BANK2[20]), 

    S712_FIL$dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    S712_FIL$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__fix	PTR unsigned char  size(2) Largest target is 2
		 -> rawFix(BANK1[2]), 

    sp__Longitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLongitude(BANK2[13]), 

    sp__Latitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLatitude(BANK2[13]), 

    stringcpy@str1	PTR unsigned char  size(2) Largest target is 12
		 -> buffer(BANK1[12]), 

    stringcpy@str2	PTR unsigned char  size(2) Largest target is 13
		 -> rawFix(BANK1[2]), rawDate(BANK1[7]), rawLongitude(BANK2[13]), rawLatitude(BANK2[13]), 
		 -> rawTime(BANK1[11]), sentence(BANK1[6]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 21
		 -> STR_33(CODE[2]), STR_32(CODE[7]), STR_31(CODE[14]), STR_30(CODE[17]), 
		 -> STR_29(CODE[4]), STR_28(CODE[4]), STR_27(CODE[5]), STR_26(CODE[5]), 
		 -> STR_23(CODE[11]), mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), NULL(NULL[0]), 
		 -> STR_12(CODE[9]), STR_11(CODE[10]), STR_10(CODE[10]), STR_9(CODE[14]), 
		 -> STR_8(CODE[21]), STR_7(CODE[15]), rawFix(BANK1[2]), rawLongitude(BANK2[13]), 
		 -> rawLatitude(BANK2[13]), escreve_inteiro_lcd@texto(BANK0[7]), STR_4(CODE[11]), STR_3(CODE[10]), 
		 -> STR_2(CODE[16]), STR_1(CODE[11]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), escreve_inteiro_lcd@texto(BANK0[7]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK2[20]), fs(BIGRAM[544]), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _readMsgBuf->_readMsg
    _mcp2515_read_canMsg->_mcp2515_read_id
    _mcp2515_read_id->_mcp2515_readRegisterS
    _mcp2515_readRegisterS->_MPC2515_SPI
    _mcp2515_readStatus->_MPC2515_SPI
    _troca_de_tela->_escreve_inteiro_lcd
    _escreve_inteiro_lcd->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _escreve_cmd_lcd->_delay
    _verifica_fence_externo->_calcula_diff_graus
    _verifica_fence_externo->_calcula_diff_minutos
    _calcula_diff_minutos->_diff_calc
    _calcula_diff_graus->_diff_calc
    _diff_calc->_atoi
    _atoi->___wmul
    _armazena_longitude->_strcpy
    _armazena_latitude->_strcpy
    _strcpy->_Latitude
    _strcpy->_Longitude
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _escrita_sdcard->_f_close
    _fprintf->_fputs
    _f_write->_disk_write
    _trace_path->_next_dir_entry
    _make_dirfile->_memset
    _reserve_direntry->_next_dir_entry
    _clust2sect->___lmul
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_command
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _check_fs->_disk_read
    _validate->_disk_status
    _disk_status->_sdc_disk_status
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_command
    _proceed->_escreve_SPI
    _command->_dummy_clocks
    _command->_wait_ready
    _get_fattime->_GPSDay
    _get_fattime->_GPSHour
    _get_fattime->_GPSMinute
    _get_fattime->_GPSMonth
    _get_fattime->_GPSSecond
    _get_fattime->_GPSyear
    _dados_gps_to_sd->_monta_sd
    _monta_sd->_strlen
    _setMode->_mcp2515_setCANCTRL_Mode
    _begin->_mcp2515_init
    _mcp2515_setCANCTRL_Mode->_mcp2515_modifyRegister
    _mcp2515_readRegister->_MPC2515_SPI
    _mcp2515_modifyRegister->_MPC2515_SPI
    _mcp2515_reset->_MPC2515_SPI
    _mcp2515_initCANBuffers->_mcp2515_write_mf
    _mcp2515_write_mf->_mcp2515_setRegisterS
    _mcp2515_setRegisterS->_MPC2515_SPI
    _mcp2515_configRate->_mcp2515_setRegister
    _mcp2515_setRegister->_MPC2515_SPI

Critical Paths under _isr in COMRAM

    _isr->_GPSRead
    _GPSRead->_stringcpy

Critical Paths under _main in BANK0

    _main->_escalonador
    _escalonador->_disparo_gravacao
    _verifica_dados_operacionais->_MCP2515_RECEBE
    _MCP2515_RECEBE->_readMsgBuf
    _readMsg->_mcp2515_read_canMsg
    _troca_de_tela->_escreve_inteiro_lcd
    _calcula_diff_minutos->_diff_calc
    _calcula_diff_graus->_diff_calc
    _inicializa_uart->_configura_baudrate_uart
    _escrita_sdcard->_fprintf
    _fprintf->_fputs
    _fputs->_fputc
    _fputc->_f_write
    _f_write->_create_chain
    _f_open->_reserve_direntry
    _trace_path->_next_dir_entry
    _reserve_direntry->_create_chain
    _next_dir_entry->_get_cluster
    _remove_chain->_put_cluster
    _auto_mount->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _check_fs->_disk_read
    _f_lseek->_create_chain
    _create_chain->_put_cluster
    _put_cluster->_move_window
    _get_cluster->_move_window
    _f_close->_f_sync
    _f_sync->_sync
    _sync->_move_window
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _disk_read->_sdc_disk_read
    _MCP2515_INIT->_begin
    _begin->_mcp2515_init
    _mcp2515_init->_mcp2515_initCANBuffers

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _escrita_sdcard->_fprintf

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  472488
                        _escalonador
                 _inicializa_tarefas
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    6763
                                             30 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             27 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     148
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     148
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     2     0      2     148
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  464964
                                            148 BANK0      3     3      0
                   _disparo_gravacao *
                      _troca_de_tela *
        _verifica_dados_operacionais *
 ---------------------------------------------------------------------------------
 (2) _verifica_dados_operacionais                          4     4      0    5363
                                             19 BANK0      4     4      0
                     _MCP2515_RECEBE
                       _desliga_uart
 ---------------------------------------------------------------------------------
 (3) _MCP2515_RECEBE                                       6     1      5    5326
                                             13 BANK0      6     1      5
                         _readMsgBuf
 ---------------------------------------------------------------------------------
 (4) _readMsgBuf                                          10     5      5    4867
                                              3 BANK0     10     5      5
                            _readMsg
 ---------------------------------------------------------------------------------
 (5) _readMsg                                              2     2      0    4405
                                             47 COMRAM     2     2      0
             _mcp2515_modifyRegister
                 _mcp2515_readStatus
                _mcp2515_read_canMsg
 ---------------------------------------------------------------------------------
 (6) _mcp2515_read_canMsg                                  3     3      0    2151
                                              0 BANK0      3     3      0
               _mcp2515_readRegister
              _mcp2515_readRegisterS
                    _mcp2515_read_id
 ---------------------------------------------------------------------------------
 (7) _mcp2515_read_id                                     17    14      3    1311
                                             30 COMRAM    17    14      3
              _mcp2515_readRegisterS
 ---------------------------------------------------------------------------------
 (8) _mcp2515_readRegisterS                                5     2      3     552
                                             25 COMRAM     5     2      3
                        _MPC2515_SPI
 ---------------------------------------------------------------------------------
 (6) _mcp2515_readStatus                                   1     1      0      65
                                             25 COMRAM     1     1      0
                        _MPC2515_SPI
 ---------------------------------------------------------------------------------
 (2) _troca_de_tela                                        1     1      0   13708
                                             47 COMRAM     1     1      0
                           _Latitude
                          _Longitude
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                                _fix
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_inteiro_lcd                                  9     7      2    7025
                                             45 COMRAM     2     0      2
                                              0 BANK0      7     7      0
              _escreve_frase_ram_lcd
                               _itoa
 ---------------------------------------------------------------------------------
 (4) _itoa                                                 6     1      5    3556
                                             39 COMRAM     6     1      5
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                 8     3      5    2843
                                             31 COMRAM     8     3      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     972
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4    1161
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             26 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _disparo_gravacao                                     3     3      0  445670
                                            145 BANK0      3     3      0
                       _MCP2515_INIT
                     _escrita_sdcard
                                _fix
                   _recebe_dados_gps
             _verifica_fence_externo
 ---------------------------------------------------------------------------------
 (3) _verifica_fence_externo                               1     1      0   12792
                                             46 COMRAM     1     1      0
                  _armazena_latitude
                 _armazena_longitude
                 _calcula_diff_graus
               _calcula_diff_minutos
                           _monta_sd
           _verifica_diferenca_graus
         _verifica_diferenca_minutos
        _verifica_plausibilidade_lat
       _verifica_plausibilidade_long
 ---------------------------------------------------------------------------------
 (4) _verifica_plausibilidade_long                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _verifica_plausibilidade_lat                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _verifica_diferenca_minutos                          10    10      0     743
                                             24 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (4) _verifica_diferenca_graus                            10    10      0     743
                                             24 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (4) _calcula_diff_minutos                                 3     3      0    4093
                                             43 COMRAM     3     3      0
                          _diff_calc
 ---------------------------------------------------------------------------------
 (4) _calcula_diff_graus                                   3     3      0    4099
                                             43 COMRAM     3     3      0
                          _diff_calc
 ---------------------------------------------------------------------------------
 (5) _diff_calc                                           30    26      4    3678
                                             37 COMRAM     6     2      4
                                              0 BANK0     24    24      0
                               _atoi
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _atoi                                                 7     5      2    1895
                                             30 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              3     3      0      99
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _armazena_longitude                                   0     0      0     829
                          _Longitude
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _Longitude                                            2     0      2       0
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _armazena_latitude                                    0     0      0     829
                           _Latitude
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               6     2      4     829
                                             26 COMRAM     6     2      4
                           _Latitude (ARG)
                          _Longitude (ARG)
 ---------------------------------------------------------------------------------
 (3) _Latitude                                             2     0      2       0
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _recebe_dados_gps                                     1     1      0     954
                                             44 COMRAM     1     1      0
                        _desliga_SPI
                       _desliga_uart
                     _inicializa_SPI
                    _inicializa_uart
                 _verifica_recep_gps
 ---------------------------------------------------------------------------------
 (4) _verifica_recep_gps                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _inicializa_uart                                      0     0      0     917
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (5) _configura_baudrate_uart                             14    10      4     917
                                             38 COMRAM     6     2      4
                                              0 BANK0      8     8      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (6) ___aldiv                                             14     6      8     604
                                             24 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (4) _inicializa_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _desliga_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _desliga_SPI                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fix                                                  2     0      2       0
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _escrita_sdcard                                       7     7      0  414440
                    _dados_gps_to_sd
                          _data_nome
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _fprintf
                          _hora_nome
                             _strcat
 ---------------------------------------------------------------------------------
 (4) _strcat                                               6     2      4     323
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _hora_nome                                            3     1      2     223
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _fprintf                                             58    36     22  127636
                                            121 BANK0     24     2     22
                                              0 BANK2     34    34      0
                            ___lldiv
                            ___llmod
                             ___wmul
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (5) _fputs                                                7     3      4   61563
                                             48 COMRAM     1     1      0
                                            115 BANK0      6     2      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                7     3      4   61070
                                            108 BANK0      7     3      4
                            _f_write
 ---------------------------------------------------------------------------------
 (7) _f_write                                             30    24      6   60258
                                             78 BANK0     30    24      6
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     412
                                             24 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (4) _f_open                                              44    39      5  199284
                                             96 BANK0     44    39      5
                         _auto_mount
                        _get_fattime
                             _memcpy
                             _memset
                        _move_window
                       _remove_chain
                   _reserve_direntry
                         _trace_path
 ---------------------------------------------------------------------------------
 (5) _trace_path                                          20    15      5   38318
                                             72 BANK0     20    15      5
                         _clust2sect
                       _make_dirfile
                             _memcmp
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _make_dirfile                                        11     9      2    2102
                                             32 COMRAM    11     9      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _reserve_direntry                                    18    16      2   76223
                                             78 BANK0     18    16      2
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memset
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (6) _next_dir_entry                                      12    11      1   18492
                                             48 COMRAM     1     0      1
                                             61 BANK0     11    11      0
                         _clust2sect
                        _get_cluster
 ---------------------------------------------------------------------------------
 (8) _clust2sect                                          11     7      4    1435
                                             36 COMRAM    11     7      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _remove_chain                                         8     6      2   33174
                                             64 BANK0      8     6      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (8) _memcpy                                              11     5      6     970
                                             24 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (5) _auto_mount                                          46    44      2   32093
                                             27 BANK0     46    44      2
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                             _memset
 ---------------------------------------------------------------------------------
 (7) _memset                                               8     2      6    1008
                                             24 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _disk_initialize                                      4     4      0   20654
                                             44 COMRAM     2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (7) _sdc_disk_initialize                                 13    13      0   20524
                                             43 COMRAM     1     1      0
                                              0 BANK0     12    12      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (8) _sdc_reset                                           20    20      0    9828
                                             36 COMRAM     7     7      0
                            _command
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    3357
                                             27 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             26 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2849
                                             27 COMRAM     2     0      2
              _escreve_caractere_lcd
                                _fix (ARG)
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             26 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _check_fs                                             8     4      4    6616
                                             19 BANK0      8     4      4
                          _disk_read
                             _memcmp
 ---------------------------------------------------------------------------------
 (6) _memcmp                                               8     2      6     701
                                             24 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (9) ___lmul                                              12     4      8     516
                                             24 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) _f_mount                                              3     1      2     290
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _f_lseek                                             33    27      6   54580
                                             78 BANK0     33    27      6
                            ___lldiv
                       _create_chain
                        _get_cluster
                           _validate
 ---------------------------------------------------------------------------------
 (8) _create_chain                                        14    12      2   34237
                                             64 BANK0     14    12      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (9) _put_cluster                                         24    20      4   16553
                                             40 BANK0     24    20      4
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (9) _get_cluster                                         21    19      2   16243
                                             40 BANK0     21    19      2
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1282
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     901
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) _f_close                                              3     1      2   30425
                                             48 COMRAM     1     1      0
                                             51 BANK0      2     0      2
                             _f_sync
 ---------------------------------------------------------------------------------
 (5) _f_sync                                               9     7      2   30002
                                             42 BANK0      9     7      2
                        _get_fattime
                        _move_window
                               _sync
                           _validate
 ---------------------------------------------------------------------------------
 (8) _validate                                             6     2      4    1178
                                             30 COMRAM     6     2      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (9) _disk_status                                          4     4      0     226
                                             26 COMRAM     4     4      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_status                                     4     4      0      34
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _sync                                                 2     2      0   14103
                                             40 BANK0      2     2      0
                         _disk_ioctl
                        _move_window
 ---------------------------------------------------------------------------------
 (8) _move_window                                         21    17      4   13765
                                             19 BANK0     21    17      4
                          _disk_read
                         _disk_write
 ---------------------------------------------------------------------------------
 (9) _disk_write                                          12     5      7    6087
                                             47 COMRAM     1     1      0
                                              8 BANK0     11     4      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_write                                     19    12      7    4623
                                             36 COMRAM    11     4      7
                                              0 BANK0      8     8      0
                            _command
                       _dummy_clocks
                        _escreve_SPI
                        _leitura_SPI
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (9) _disk_read                                           12     5      7    5608
                                             47 COMRAM     1     1      0
                                              8 BANK0     11     4      7
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (10) _sdc_disk_read                                      24    17      7    4459
                                             36 COMRAM    11     4      7
                                              0 BANK0      8     8      0
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (11) _response                                            1     1      0      34
                                             24 COMRAM     1     1      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (11) _proceed                                             0     0      0      34
                        _escreve_SPI
 ---------------------------------------------------------------------------------
 (11) _command                                             7     2      5    3412
                                             29 COMRAM     7     2      5
                       _dummy_clocks
                        _escreve_SPI
                         _wait_ready
 ---------------------------------------------------------------------------------
 (12) _wait_ready                                         15    15      0      99
                                             24 COMRAM     5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _escreve_SPI                                         2     2      0      34
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) _dummy_clocks                                        5     5      0      68
                                             24 COMRAM     5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _leitura_SPI                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _disk_ioctl                                           7     4      3     304
                                             24 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (5) _get_fattime                                         52    48      4     389
                                             28 COMRAM    14    10      4
                                              0 BANK0     38    38      0
                             _GPSDay
                            _GPSHour
                          _GPSMinute
                           _GPSMonth
                          _GPSSecond
                            _GPSyear
 ---------------------------------------------------------------------------------
 (6) _GPSyear                                              4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _GPSSecond                                            4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _GPSMonth                                             4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _GPSMinute                                            4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _GPSHour                                              4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _GPSDay                                               4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _data_nome                                            3     1      2     223
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _dados_gps_to_sd                                      0     0      0    1456
                           _monta_sd
 ---------------------------------------------------------------------------------
 (4) _monta_sd                                             5     3      2    1456
                                             28 COMRAM     5     3      2
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               4     2      2     166
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _MCP2515_INIT                                         0     0      0   17450
                    _SPI1_Initialize
                              _begin
                            _setMode
 ---------------------------------------------------------------------------------
 (4) _setMode                                              1     1      0    2310
                                             30 COMRAM     1     1      0
            _mcp2515_setCANCTRL_Mode
 ---------------------------------------------------------------------------------
 (4) _begin                                                4     2      2   15140
                                             16 BANK0      4     2      2
                       _mcp2515_init
 ---------------------------------------------------------------------------------
 (5) _mcp2515_init                                         6     4      2   14833
                                             45 COMRAM     4     2      2
                                             14 BANK0      2     2      0
                 _mcp2515_configRate
             _mcp2515_initCANBuffers
             _mcp2515_modifyRegister
                      _mcp2515_reset
            _mcp2515_setCANCTRL_Mode
                _mcp2515_setRegister
 ---------------------------------------------------------------------------------
 (5) _mcp2515_setCANCTRL_Mode                              2     2      0    2279
                                             28 COMRAM     2     2      0
             _mcp2515_modifyRegister
               _mcp2515_readRegister
 ---------------------------------------------------------------------------------
 (7) _mcp2515_readRegister                                 2     2      0      96
                                             25 COMRAM     2     2      0
                        _MPC2515_SPI
 ---------------------------------------------------------------------------------
 (6) _mcp2515_modifyRegister                               3     1      2    2084
                                             25 COMRAM     3     1      2
                        _MPC2515_SPI
 ---------------------------------------------------------------------------------
 (6) _mcp2515_reset                                        1     1      0      31
                                             25 COMRAM     1     1      0
                        _MPC2515_SPI
 ---------------------------------------------------------------------------------
 (6) _mcp2515_initCANBuffers                              14    14      0    6963
                                              0 BANK0     14    14      0
                _mcp2515_setRegister
                   _mcp2515_write_mf
 ---------------------------------------------------------------------------------
 (7) _mcp2515_write_mf                                    15    10      5    5123
                                             30 COMRAM    15    10      5
               _mcp2515_setRegisterS
 ---------------------------------------------------------------------------------
 (8) _mcp2515_setRegisterS                                 5     2      3     652
                                             25 COMRAM     5     2      3
                        _MPC2515_SPI
 ---------------------------------------------------------------------------------
 (6) _mcp2515_configRate                                   8     7      1    1827
                                             27 COMRAM     8     7      1
                _mcp2515_setRegister
 ---------------------------------------------------------------------------------
 (6) _mcp2515_setRegister                                  2     1      1    1153
                                             25 COMRAM     2     1      1
                        _MPC2515_SPI
 ---------------------------------------------------------------------------------
 (9) _MPC2515_SPI                                          1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _isr                                                13    13      0    2607
                                             11 COMRAM    13    13      0
                            _GPSRead
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (17) i2_write_timer_zero                                  2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (17) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _GPSRead                                             2     2      0    2429
                                              9 COMRAM     2     2      0
                             _strcmp
                          _stringcpy
 ---------------------------------------------------------------------------------
 (18) _stringcpy                                           9     3      6    1840
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (18) _strcmp                                              7     3      4     493
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _escalonador
     _disparo_gravacao *
       _MCP2515_INIT
         _SPI1_Initialize
         _begin
           _mcp2515_init
             _mcp2515_configRate
               _mcp2515_setRegister
                 _MPC2515_SPI
             _mcp2515_initCANBuffers
               _mcp2515_setRegister
                 _MPC2515_SPI
               _mcp2515_write_mf
                 _mcp2515_setRegisterS
                   _MPC2515_SPI
             _mcp2515_modifyRegister
               _MPC2515_SPI
             _mcp2515_reset
               _MPC2515_SPI
             _mcp2515_setCANCTRL_Mode
               _mcp2515_modifyRegister
                 _MPC2515_SPI
               _mcp2515_readRegister
                 _MPC2515_SPI
             _mcp2515_setRegister
               _MPC2515_SPI
         _setMode
           _mcp2515_setCANCTRL_Mode
             _mcp2515_modifyRegister
               _MPC2515_SPI
             _mcp2515_readRegister
               _MPC2515_SPI
       _escrita_sdcard
         _dados_gps_to_sd
           _monta_sd
             _strlen
         _data_nome
         _f_close
           _f_sync
             _get_fattime
               _GPSDay
               _GPSHour
               _GPSMinute
               _GPSMonth
               _GPSSecond
               _GPSyear
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _sync
               _disk_ioctl
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
         _f_lseek
           ___lldiv
           _create_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _get_cluster
             ___wmul
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
           _validate
             _disk_status
               _sdc_disk_status
         _f_mount
         _f_open
           _auto_mount
             ___lldiv
             ___lmul
             _check_fs
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcmp
             _disk_initialize
               _sdc_disk_initialize
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_frase_ram_lcd
                   _escreve_caractere_lcd
                     _delay
                   _fix (ARG)
                 _posicao_cursor_lcd
                   _endereco_cursor_lcd
                     _delay
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
                 _sdc_reset
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                     _fix (ARG)
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _disk_status
               _sdc_disk_status
             _memset
           _get_fattime
             _GPSDay
             _GPSHour
             _GPSMinute
             _GPSMonth
             _GPSSecond
             _GPSyear
           _memcpy
           _memset
           _move_window
             _disk_read
               _sdc_disk_read
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
           _remove_chain
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _put_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
           _reserve_direntry
             _clust2sect
               ___lmul
             _create_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _disk_write
               _sdc_disk_write
                 _command
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _wait_ready
                     _leitura_SPI
                 _dummy_clocks
                   _leitura_SPI
                 _escreve_SPI
                 _leitura_SPI
                 _proceed
                   _escreve_SPI
                 _response
                   _leitura_SPI
             _memset
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
           _trace_path
             _clust2sect
               ___lmul
             _make_dirfile
               _memset
             _memcmp
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _next_dir_entry
               _clust2sect
                 ___lmul
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
         _fprintf
           ___lldiv
           ___llmod
           ___wmul
           _fputc
             _f_write
               _clust2sect
                 ___lmul
               _create_chain
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                 _put_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memcpy
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _validate
                 _disk_status
                   _sdc_disk_status
           _fputs
             _fputc
               _f_write
                 _clust2sect
                   ___lmul
                 _create_chain
                   _get_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                   _put_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _memcpy
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                 _validate
                   _disk_status
                     _sdc_disk_status
         _hora_nome
         _strcat
       _fix
       _recebe_dados_gps
         _desliga_SPI
         _desliga_uart
         _inicializa_SPI
         _inicializa_uart
           _configura_baudrate_uart
             ___aldiv
         _verifica_recep_gps
       _verifica_fence_externo
         _armazena_latitude
           _Latitude
           _strcpy
             _Latitude (ARG)
             _Longitude (ARG)
         _armazena_longitude
           _Longitude
           _strcpy
             _Latitude (ARG)
             _Longitude (ARG)
         _calcula_diff_graus
           _diff_calc
             _atoi
               ___wmul
               _isdigit
             _strcpy
               _Latitude (ARG)
               _Longitude (ARG)
         _calcula_diff_minutos
           _diff_calc
             _atoi
               ___wmul
               _isdigit
             _strcpy
               _Latitude (ARG)
               _Longitude (ARG)
         _monta_sd
           _strlen
         _verifica_diferenca_graus
         _verifica_diferenca_minutos
         _verifica_plausibilidade_lat
         _verifica_plausibilidade_long
     _troca_de_tela *
       _Latitude
       _Longitude
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
         _fix (ARG)
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
           _fix (ARG)
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       _fix
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
     _verifica_dados_operacionais *
       _MCP2515_RECEBE
         _readMsgBuf
           _readMsg
             _mcp2515_modifyRegister
               _MPC2515_SPI
             _mcp2515_readStatus
               _MPC2515_SPI
             _mcp2515_read_canMsg
               _mcp2515_readRegister
                 _MPC2515_SPI
               _mcp2515_readRegisterS
                 _MPC2515_SPI
               _mcp2515_read_id
                 _mcp2515_readRegisterS
                   _MPC2515_SPI
       _desliga_uart
   _inicializa_tarefas
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
       _fix (ARG)
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _GPSRead
     _strcmp
     _stringcpy
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     220      21       26.6%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     22      E1       9       87.9%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     97      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     31      46       1       74.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2C4      20        0.0%
DATA                 0      0     4E4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Thu May 05 14:53:26 2022

                         next_dir_entry@idx 00A6                    __end_of_mensagem_inicial 4BF8  
                       next_dir_entry@clust 00A4                                 _SSPSTATbits 000FC7  
                          ??_init_interrupt 0019                                          l68 5C70  
              __size_of_escreve_inteiro_lcd 0036                    _verifica_diferenca_graus 2EFC  
                                        _fs 02E1                               begin@clockset 0071  
                       ___wmul@multiplicand 001B                                 _put_cluster 20BE  
                      ??_mcp2515_configRate 001D                            disk_write@sector 006A  
                              ?_escalonador 0001                              create_chain@fs 00A6  
                          disk_write@result 0070                          _mcp2515_readStatus 5DD8  
                          ?_inicializa_uart 0001                                         l200 4CCA  
                                       l201 4CD2                                         l202 4CD4  
                                       l203 4CDC                                         l220 5042  
                                       l204 4CDE                                         l221 504A  
                                       l213 5016                                         l205 4CE6  
                                       l222 504C                                         l206 4CE8  
                                       l223 5054                                         l215 5020  
                    __size_of_troca_de_tela 02BA                                         l144 2E28  
                                       l224 5056                                         l232 513E  
                                       l225 505E                                         l217 502A  
                                       l250 4F66                                         l242 4F32  
                                       l226 5060                                         l218 502C  
                                       l251 4F68                                         l219 5040  
                                       l252 4F70                                         l244 4F3C  
                                       l181 5CCE                                         l253 4F72  
                                       l254 4F7A                                         l246 4F46  
                                       l183 5CD4                                         l255 4F7C  
                                       l191 4C94                                         l256 4F84  
                                       l248 4F50                                         l257 4F86  
                                       l249 4F52                                         l193 4C9E  
                                       l195 4CA8                                         l197 4CB2  
                                       l198 4CB4                                         l199 4CC8  
                                       l572 57F4                                         l681 5EB6  
                                       l588 5200                                         l687 5E40  
                                       l871 37D2                                         l794 349A  
                                       l955 076E                                         l868 3824  
                                       l980 13B4                                         l797 3492  
                                       l985 13E0                                         l995 1522  
                                       _PCL 000FF9                                         _PR2 000FCB  
                                       _fil 01AE                            ??_init_oscilador 0019  
                                       _fix 5EDC                                         _isr 0008  
                              disk_read@res 0072                                         prod 000FF3  
                            ??_create_chain 00A2                                         tosl 000FFD  
                                       wreg 000FE8                       mcp2515_setRegisterS@i 001E  
                     mcp2515_setRegisterS@n 001C                         ?_mcp2515_readStatus 0001  
                 __size_of_write_timer_zero 000A                              begin@idmodeset 0072  
                           create_chain@mcl 00A4                             create_chain@ncl 00AC  
                           create_chain@scl 00AA                         _mcp2515_read_canMsg 5192  
                   ??_escreve_frase_ram_lcd 001E                                        l1122 57AA  
           verifica_diferenca_minutos@point 0021                                        l1073 0D82  
                                      l2018 5E4C                                        l2051 4F10  
                                      l1155 111C                                        l1172 126A  
                                      l1069 0B72                                        l1436 4E0C  
                                      l2503 5392                                        l2432 50C2  
                                      l2513 574C                                        l1458 1920  
                                      l1476 1AD0                                        l2701 4468  
                                      l1829 46DA                                        l2719 4A2E  
                                      ?_fix 0019                                        l1939 566A  
                                      l8161 5760                                        l8321 3804  
                                      l8313 37EC                                        l8233 3712  
                                      l8163 5764                                        l8331 3822  
                                      l8323 3806                                        ?_isr 0001  
                                      l8341 383E                                        l8253 377C  
                                      l8291 37BA                                        l8283 37AA  
                                      l9421 557E                                        l8701 4276  
                                      l9431 55B6                                        l8295 37C2  
                                      l8703 4282                                        l8801 2A18  
                                      l9425 5596                                        l8721 42DA  
                                      l8713 42B6                                        l8299 37CA  
                                      l8821 2A5C                                        l8717 42C4  
                                      l8831 2A9E                                        l8815 2A58  
                                      l8807 2A1C                                        l7935 5988  
                                      l9391 5B34                                        l7939 5998  
                                      l8853 2B1C                                        l8845 2AE0  
                                      l8837 2AD2                                        l8829 2A98  
                                      l8773 2998                                        l8839 2ADC  
                                      l8695 4254                                        l9903 2FF2  
                                      l8793 29DC                                        l8689 423C  
                                      l9905 2FF6                       _escreve_caractere_lcd 4F22  
                                      l8859 2B20                                        l8787 29D8  
                                      l8779 299C                                        l8869 2B5C  
                                      l9925 3098                                        l9909 2FFE  
                                      l9853 2F10                                        l9919 308E  
                                      l9863 2F2C                                        l9847 2F0C  
                                      STR_1 620E                                        STR_2 61B0  
                                      l9865 2F30                                        l9929 30A0  
                                      STR_3 622D                                        STR_4 6203  
                                      l9963 2B9A                                        STR_5 6254  
                                      STR_6 624E                                        l9893 2FD6  
                                      l9885 2FCA                                        l9869 2F38  
                                      l9981 2BBE                                        STR_7 61C0  
                                      STR_8 6149                                        l9887 2FD2  
                                      l9879 2FC0                                        STR_9 61DD  
                                      l9985 2BC6                                        l9969 2B9E  
                                      l9995 2C56                                        l9979 2BBA  
                            timer_dois@flag 00FC                                        _BRGH 007D62  
                           __end_of_GPSRead 254E                                        _CREN 007D5C  
                                      _T0IF 007F92                                ?_escreve_SPI 0001  
                           __end_of_GPSHour 5B5C                                        _LATB 000F8A  
                                      _PIE1 000F9D                                        u8010 2A88  
                                      _RCIF 007CF5                                        u8030 2ACA  
                                      u7240 5784                                        u8017 2A7E  
                                      u8050 2B0C                                        u8037 2AC0  
                                      u8070 2B4C                                        u7350 3748  
                                      u7247 577A                                        u8057 2B02  
                                      u7370 3758                                        u8077 2B42  
                                      u7357 373E                               begin@speedset 0070  
                                      u7860 4286                                        u7950 29C8  
                                      u9710 2FE4                                        u9640 2F1E  
                                      u7970 2A08                                        u7957 29BE  
                                      u7990 2A48                                        u9750 3096  
                                      u9910 2C7A                                        u9680 2FC8  
                                      u9840 2BAC                                        u7977 29FE  
                                      u7997 2A3E                                        u9950 2D2C  
                                      u9880 2C5E                                        _TMR0 000FD6  
                                      _TMR2 000FCC                                        _SPEN 007D5F  
                                      _TXEN 007D65                                        _SYNC 007D64  
                              trace_path@dj 00A8                                trace_path@fn 00A9  
                              trace_path@ds 00B9                                trace_path@fs 00B5  
                             ?_make_dirfile 0021                             __end_of_GPSyear 5BC4  
                   ?_mcp2515_initCANBuffers 0001                                        _Term 0043  
              __end_of_mcp2515_setRegisterS 58EE                                        _atoi 43B4  
                                      _main 5AF0                                        _fsid 012A  
                                      _itoa 58EE                     __end_of_fence_diff_long 60B9  
                                      fsr1h 000FE2                                        fsr2h 000FDA  
                                      indf1 000FE7                                        indf2 000FDF  
                                      fsr1l 000FE1                                        fsr2l 000FD9  
                                      btemp 0047                                        _utoa 49B6  
                                      _sync 53EE                               disk_ioctl@cmd 0019  
                             disk_read@buff 0068                               disk_ioctl@res 001D  
                             disk_read@pdrv 006F                                        prodh 000FF4  
                                      prodl 000FF3                                        start 000E  
                      _mcp2515_readRegister 5CE8                  __end_of_calcula_diff_graus 4150  
                      __end_of_MCP2515_INIT 5D3E                        ??_mcp2515_readStatus 001A  
                   ?_verifica_fence_externo 0001                   sdc_disk_initialize@buff_i 0067  
                              ___param_bank 000000                   sdc_disk_initialize@count1 0063  
                 sdc_disk_initialize@count2 0069                        ?_mcp2515_read_canMsg 0001  
                               _string_dado 0213                                       ??_fix 001B  
                                     ??_isr 000C                     __size_of_escrita_sdcard 0128  
                        __size_of_GPSMinute 0022                          __size_of_GPSSecond 0022  
          __size_of_configura_baudrate_uart 010A                                       l10001 2C60  
                                     l10003 2C68                                       l10021 2C8C  
                                     l10111 458C                                       l10041 2D2E  
                                     l10025 2C94                                       l10009 2C6C  
                                     l10035 2D24                                       l10019 2C88  
                                     l10107 4588                                       l10045 2D36  
                                     l10125 45BA                                       l10215 4678  
                                     l10145 45C8                                       l10163 4608  
             calcula_diff_graus@select_data 002C                                       l12101 5C74  
                                     l10181 463C                                       l10149 45D6  
                                     l10093 4558                                       l10079 4526  
                                     l11401 54BE                                       l12033 17F6  
                                     l10177 4638                                       l11251 3DFC  
                                     l11235 3DAC                                       l11307 2DEE  
                                     l12043 1822                                       l12027 17E6  
                                     l13003 0658                                       l12203 02E2  
                                     l12211 0336                                       l10195 466A  
                                     l11157 5800                                       l11165 5892  
                                     l11245 3DE0                                       l11229 3D98  
                                     l11325 2E70                                       l12133 4A4C  
                                     l12141 4AC2                                       l12053 184A  
                                     l13021 0690                                       l13013 0686  
                                     l12221 03B2                                       l11255 3E14  
                                     l11239 3DD0                                       l11247 3DE8  
                                     l11503 4F48                                       l13031 0704  
                                     l11265 3E44                                       l12233 046C  
                                     l13113 4D1C                                       l11179 51FA  
                                     l11355 2EE8                                       l11339 2E98  
                                     l11419 54C2                                       l13107 3D2E  
                                     l12139 4ABA                                       l12411 4E56  
                                     l12251 0578                                       l12219 03A4  
                                     l14011 551A                                       l11373 4FC8  
                                     l11365 4F98                                       l11293 2DCA  
                                     l11285 2D78                                       l11453 5E32  
                                     l11613 5158                                       l12069 18A8  
                                     l12325 5AA8                                       l13061 08A8  
                                     l12237 04E8                                       l12181 0186  
                                     l12245 051C                                       l13117 4D62  
                                     l12511 2774                                       l13151 430C  
                                     l11543 31AC                                       l11703 2184  
                                     l12423 4E9C                                       l12407 4E52  
                                     l11463 5018                                       l12087 190C  
                                     l12079 18D0                                       l12327 5AAE  
                                     l12343 5AB2                                       l13039 0726  
                                     l13231 50B4                                       l13223 5080  
                                     l12255 058A                                       l12183 01A6  
                                     l13119 4D6A                                       l12319 5CC2  
                                     l13215 5684                                       l13207 5666  
                                     l14103 1ACA                                       l12521 2794  
                                     l12513 2778                                       l12505 59D2  
                                     l11369 4FC4                                       l11705 21B8  
                                     l11801 3452                                       l11633 539E  
                                     l11617 5166                                       l11609 514A  
                                     l11625 5174                                       l13225 508C  
                                     l12193 01FE                                       l12169 00CC  
                                     l13129 4060                                       l14009 5516  
                                     l12603 28E2                                       l12531 27AC  
                                     l12523 2798                                       l12515 277C  
                                     l13171 4384                                       l11547 31B4  
                                     l11539 3130                                       l11555 3202  
                                     l11723 2264                                       l11467 5022  
                                     l11627 518E                                       l13075 09CC  
                                     l13323 13BC                                       l12451 43B6  
                                     l12621 28F6                                       l12533 27B0  
                                     l12525 279C                                       l12517 2788  
                                     l13181 43A8                                       l11389 4FEA  
                                     l11397 5492                                       l11565 3256  
                                     l13093 3C7A                                       l11645 2598  
                                     l11741 22F4                                       l11813 34A2  
                                     l11637 53C6                                       l13069 09B6  
                                     l12381 35FC                                       l13341 147C  
                                     l13421 59DA                                       l12445 595A  
                                     l12453 43B8                                       l13237 49BE  
                                     l14117 1B2C                                       l14029 1958  
                                     l12607 28E6                                       l12551 2832  
                                     l12535 27B4                                       l12527 27A4  
                                     l12519 278C                                       l13167 4348  
                                     l13407 5A2E                                       l12359 5424  
                                     l11583 5930                                       l11727 228E  
                                     l11743 2310                                       l11495 4F34  
                                     l13343 14A8                                       l13431 5696  
                                     l12447 5962                                       l12471 4438  
                                     l12463 43F2                                       l13247 49F0  
                                     l12711 51CE                                       l14143 1BC0  
                                     l14047 19AE                                       l12609 28EA  
                                     l12561 2848                                       l12537 27BC  
                                     l12529 27A8                                       l12633 293E  
                                     l13169 4366                                       l11577 5924  
                                     l11665 26C6                                       l11681 2766  
                                     l11825 34D0                                       l11809 347C  
                                     l11753 52AE                                       l13601 1110  
                                     l13433 569A                                       l13273 5906  
                                     l14065 1A16                                       l14049 19B2  
                                     l12571 2858                                       l12555 283C  
                                     l12539 27C8                                       l12635 2962  
                                     l11931 58E2                                       l13179 4388  
                                     l11579 592C                                       l11595 5938  
                                     l12723 4EC2                                       l11843 3504  
                                     l13515 0F5C                                       l13507 0EF6  
                                     l11499 4F3E                                       l11763 4AEC  
                                     l11907 5702                                       l13355 1500  
                                     l13611 1140                                       l13523 0F84  
                                     l13435 56AA                                       l12467 4404  
                                     l11915 582A                                       l14091 1A98  
                                     l14147 1BC6                                       l12573 285C  
                                     l12565 284C                                       l12557 2840  
                                     l12549 27CC                                       l12725 4ECE  
                                     l11669 26E6                                       l11861 357A  
                                     l11757 52C2                                       l12397 36D2  
                                     l12901 1EB6                                       l13293 1320  
                                     l13437 56B2                                       l13701 40E2  
                                     l14093 1A9C                                       l12591 28D4  
                                     l12575 2860                                       l12567 2850  
                                     l12559 2844                                       l11927 58CE  
                                     l12735 4F02                                       l11679 274C  
                                     l11767 4B0A                                       l11951 1682  
                                     l12911 1F16                                       l12903 1EDC  
                                     l12823 1C98                                       l13375 1536  
                                     l13543 0FE4                                       l13527 0F8E  
                                     l13711 4138                                       l11919 5840  
                                     l14423 4738                                       l12577 286C  
                                     l12569 2854                                       l11697 2144  
                                     l11689 20E4                                       l11857 353E  
                                     l13481 0DA0                                       l13465 0D36  
                                     l11785 4B64                                       l11945 166C  
                                     l11873 44C4                                       l12921 1F80  
                                     l12905 1EEE                                       l12841 1CDE  
                                     l13633 11B0                                       l13617 1164  
                                     l13553 1010                                       l12745 5360  
                                     l12595 28DE                                       l13491 0DF2  
                                     l11955 168E                                       l12835 1CB6  
                                     l12827 1C9C                                       l13619 117C  
                                     l13563 1052                                       l13715 4140  
                                     l13731 41B2                                       l13803 4CAA  
                                     l12747 5368                                       l14435 47CE  
                                     l12589 2874                                       l12685 3A9E  
                                     l11893 55FE                                       l13477 0D96  
                                     l11965 16C2                                       l12925 1F84  
                                     l12861 1D8A                                       l12853 1D48  
                                     l13661 1296                                       l13653 1258  
                                     l13629 11A4                                       l13581 10B2  
                                     l13557 1026                                       l13709 4136  
                                     l13741 4208                                       l12757 5388  
                                     l12773 5742                                       l12765 5722  
                                     l14525 5B04                                       l11887 55EE  
                                     l11975 16E6                                       l12935 1FC4  
                                     l12871 1DB2                                       l13639 11DE  
                                     l13591 10F4                                       l13575 107E  
                                     l13727 41A8                                       l13719 4154  
                                     l12767 572A                                       l13489 0DDE  
                                     l12849 1D3C                                       l13657 1278  
                                     l13729 41AA                                       l13745 4210  
                                     l13913 5474                                       l13499 0E62  
                                     l11899 56E2                                       l12787 4944  
                                     l12779 4924                                       l12947 2052  
                                     l12867 1DA6                                       l13667 12E0  
                                     l13739 4206                                       l12797 4986  
                                     l12957 208C                                       l12885 1DDE  
                                     l13597 1104                                       l13925 5A8C  
                                     l13773 4C1A                                       l13765 4C06  
                                     l13909 5462                                       l11999 176A  
                                     l12975 0604                                       l12967 05AC  
                                     l12799 498E                                       l12879 1DCA  
                                     l13871 3C0A                                       l13927 5A92  
                                     l13783 4C66                                       l12985 0628  
                                     l12969 05B2                                       l13865 3BE0  
                                     l13857 3B42                                       l13697 40D8  
                                     l13689 4084                                       l13769 4C10  
                                     l13867 3BF0                                       l13699 40DA  
                                     l13795 4C96                                       l13779 4C4A  
                                     l12999 0654                                       l13799 4CA0  
                           __end_of___aldiv 42EC                                       ?_atoi 001F  
                                     ?_main 0001                                       ?_itoa 0028  
                                     STR_10 6223                                       STR_11 6219  
                                     STR_12 6237                                       STR_20 61EB  
                                     STR_21 6276                                       STR_13 6269  
                                     STR_22 627A                                       STR_30 615E  
                                     STR_14 6107                                       STR_23 61F8  
                                     STR_31 61CF                                       STR_15 6190  
                                     STR_24 6264                                       STR_32 6240  
                                     STR_16 61A0                                       STR_33 627D  
                                     STR_25 6247                                       STR_17 616F  
                                     STR_26 625F                                       STR_18 612E  
                                     STR_27 625A                                       STR_19 6180  
                                     STR_28 6272                                       STR_29 626E  
                              ?_leitura_SPI 0001                             __end_of___lldiv 4F22  
                                     u10110 45A0                                       ?_utoa 0020  
                                     u10040 453E                                       u10210 4600  
                                     u10130 45B6                                       ?_sync 0001  
                                     u10220 4604                                       u10060 4554  
                                     u10230 4614                                       u10070 4564  
                                     u10240 4620                                       u10080 4570  
                                     u12030 53BE                                       u10190 45EA  
                                     u12040 53E6                                       u10280 4654  
                                     _T0CON 000FD5                                       u12105 2642  
                                     u12060 2562                                       u12037 53B4  
                                     u12310 343C                                       u12135 26D2  
                                     u12215 2270                                       u12047 53DC  
                                     u11600 520A                                       u12160 2140  
                                     u12320 3448                                       u13025 46CE  
                           __end_of___llmod 50D4                                       u12330 3472  
                                     u13130 35F8                                       u13035 46F6  
                                     u12155 2114                                       u14020 4D3C  
                                     u12085 25C8                                       u13045 328E  
                                     u11630 3DA6                                       u12430 3568  
                                     u12270 4B2A                                       u13310 4400  
                                     u13215 38A4                                       u11615 3D4A  
                                     u14120 4306                                       u12360 34C6  
                                     u13160 3678                                       u14040 4D8A  
                                     _T2CON 000FCA                                       u13225 38C0  
                                     u11705 2D9E                                       u12185 21E4  
                                     u13145 3608                                       u14105 4034  
                                     u13065 32FA                                       u13090 5420  
                                     u13250 57A0                                       u13410 536C  
                                     u13235 38F0                                       u14027 4D32  
                                     u11580 58B4                                       u13180 4E52  
                                     u12620 179A                                       u12540 169E  
                                     u13500 49B2                                       u15020 41C0  
                                     u13245 3910                                       u12470 55EA  
                                     u12550 16AE                                       u13510 1C82  
                                     u14310 13DC                                       u11735 2E44  
                                     u14047 4D80                                       u11760 2EF6  
                                     u12640 17A6                                       u12560 16BA  
                                     u14240 131C                                       u13440 572E  
                                     u12561 16B8                                       u14065 3F80  
                                     u12730 18E8                                       u14075 3FBA  
                                     u13380 4ED2                                       u12740 191A  
                                     u12580 1708                                       u13460 4940  
                                     u14340 1478                                       u14180 5090  
                 __size_of_mcp2515_write_mf 00AE                                       u13517 1C78  
                                     u11950 30EE                                       u12750 4A78  
                                     u14095 3FFC                                       u13480 4974  
                                     u13720 1FC0                                       u15400 192E  
                                     u16040 4B7A                                       u12905 024A  
                                     u11970 312C                                       u14610 0E76  
                                     u12770 4AAA                                       u12690 1872  
                                     u13490 499A                                       u16050 4B92  
                                     u14515 0BE6                                       u13555 1CFA  
                                     u14620 0EBC                                       u13660 1F12  
                                     u14380 151E                                       u15260 4DFA  
                                     u15180 4D0A                                       u16028 478C  
                                     u12757 4A6E                                       u16029 47A0  
                                     u14710 1060                                       u15191 5856  
                                     u13920 0722                                       u15520 1ADC  
                                     u15440 19BA                                       u14625 0EB2  
                                     u12777 4AA0                                       u12945 0322  
                                     u16217 4BCE                                       u13850 0650  
                                     u13770 05D2                                       u13690 1F72  
                                     u15450 19C2                                       u13675 1F32  
                                     u16227 489E                                       u15540 1AF8  
                                     u16237 48BA                                       u14590 0DFE  
                                     u13790 05F8                                       u12990 0524  
                                     u14910 12B8                                       u14750 10F2  
                                     u15550 1B18                                       u15390 1928  
                                     u16247 48D6                                       u13960 09B2  
                                     u14680 0FDA                                       u16257 163A  
                                     u13777 05C8                                       u13970 09CA  
                                     u14930 4092                                       u15570 1B7E  
                                     u16267 17AC                                       u13955 08C0  
                                     u14860 1238                                       u15580 1BB4  
                                     u15548 1AFA                                       u16277 1850  
                                     u13797 05EE                                       u15590 1BCE  
                                     u15558 1B1A                                       u16287 57E0  
                                     u14960 40F0                                       u16297 5D4E  
                                     u13985 0A50                                       u15578 1B80  
                                     u15596 1BD0                                       u15588 1BB6  
                                     u14990 4162                             __end_of___lwdiv 539C  
                                     _MCPCS 00F7                             __end_of___lwmod 5756  
                          __end_of_GPSMonth 5C08                                       _RCREG 000FAE  
                                     _RCSTA 000FAB                                       _SPBRG 000FAF  
               ?_verifica_diferenca_minutos 0001                                       _TRISA 000F92  
                                     _TRISB 000F93                                       _TRISC 000F94  
                                     _TRISD 000F95                                       _TRISE 000F96  
                           __end_of_f_close 5A2A                               trace_path@dir 00AC  
                                     _TXSTA 000FAC                                       _FatFs 0037  
                           __end_of_f_lseek 0F6E                         ___lmul@multiplicand 001D  
                __size_of_config_timer_dois 000E                             __end_of_f_mount 55BA  
                           __end_of_f_write 059C                  __size_of_config_timer_zero 001A  
                             get_cluster@bc 0099                               get_cluster@fs 009B  
                             get_cluster@wc 0093                             __end_of_command 5246  
                                     _begin 5DEE                                       _delay 5CCA  
                                     _m_nID 01F6                             clust2sect@clust 0025  
                     mcp2515_init@canIDMode 006E                             __end_of_readMsg 568C  
                           __end_of_fprintf 12EC                                       _fputc 5798  
                                     _fputs 4D10                             __end_of_isdigit 5CCA  
                  __size_of_escreve_cmd_lcd 008C                                       atoi@a 0024  
                                     atoi@s 001F              __end_of_mcp2515_initCANBuffers 3AE6  
                           __end_of_setMode 5E8E                         _mcp2515_setRegister 5DA8  
                            ??_make_dirfile 0023                              disk_ioctl@buff 001A  
                                     pclath 000FFA                              disk_read@count 006E  
                                     tablat 000FF5                              disk_ioctl@pdrv 001C  
                          ?_dados_gps_to_sd 0001                             __end_of_proceed 5EB2  
                                     plusw1 000FE3                                       plusw2 000FDB  
                  recebe_dados_gps@flag_gps 002D                                       ttemp5 0048  
                                     ttemp6 004B                                       ttemp7 004F  
                     _mcp2515_readRegisterS 5814                                       utoa@c 0027  
                                     utoa@v 0025                                       status 000FD8  
             mcp2515_modifyRegister@address 001C                               _troca_de_tela 191E  
                                     wtemp8 0048                          _armazena_longitude 5D74  
                     ?_mcp2515_readRegister 0001                    __size_of_SPI1_Initialize 0024  
                             disk_write@res 0072              __end_of_verifica_fence_externo 4E1E  
                           __initialization 47D8                       ??_mcp2515_read_canMsg 0030  
                       disk_initialize@pdrv 002D                         ?_armazena_longitude 0001  
                       disk_initialize@stat 002E                                __end_of_atoi 4472  
                              __end_of_main 5B14                                clust2sect@fs 002E  
                              __end_of_itoa 5920                                __end_of_utoa 4A4A  
                              __end_of_sync 5440                          _inicializa_tarefas 50D4  
                           escalonador@cont 00F6                        ?_mcp2515_setRegister 001A  
                          __end_of_Latitude 5EDC                         reserve_direntry@dir 00AF  
                         create_chain@clust 00A0                                 auto_mount@p 009F  
                         create_chain@cstat 00A8                               sdc_reset@buff 002B  
                                    ??_atoi 0021                                      ??_main 0032  
                                    ??_itoa 002D                       __size_of_mcp2515_init 00C8  
                                    ??_utoa 0025                                      ??_sync 0031  
                             __activetblptr 000002                         ?_inicializa_tarefas 0001  
                      __end_of_desliga_uart 5E80                                   ??_GPSRead 000A  
                                 ??_GPSHour 001B                              _next_dir_entry 3584  
                      ??_armazena_longitude 0021                        __size_of_desliga_SPI 000C  
                         get_fattime@f_time 0021                                   ??_GPSyear 001B  
                                    ?_begin 0070                            ??_sdc_disk_write 002C  
                                    ?_delay 0001                      ?_escreve_caractere_lcd 0001  
                                    _ADCON0 000FC2                                      _ADCON1 000FC1  
                                    ?_fputc 00CC                            ___llmod@dividend 0019  
                                    ?_fputs 00D3                          auto_mount@bootsect 0097  
                   _mcp2515_setCANCTRL_Mode 59AA                                      _INT0IE 007F94  
                                    _INT0IF 007F91                               ?_dummy_clocks 0001  
                         __end_of_GPSMinute 5C2A                                      i2l1408 3F42  
                         __end_of_GPSSecond 5BE6                                      _PCLATH 000FFA  
                                    _INTCON 000FF2                        __size_of_MPC2515_SPI 0010  
                                    _GPSDay 5C2A                     __size_of_inicializa_SPI 0020  
                            ?_troca_de_tela 0001                                      _TMR0IF 007F92  
                        auto_mount@maxclust 0093                    __end_of_recebe_dado_uart 5E26  
                                    _SPPCFG 000F63                                      _SPPCON 000F65  
                                    _SSPADD 000FC8                                      _SSPBUF 000FC9  
                  __end_of_recebe_dados_gps 5AA4                    __size_of_sdc_disk_status 0010  
                          __end_of_check_fs 4EA0                        ??_inicializa_tarefas 0019  
                         ?_disparo_gravacao 0001                              trace_path@dptr 00BA  
                            trace_path@path 00AA                  mcp2515_modifyRegister@data 001B  
                mcp2515_modifyRegister@mask 001A                      reserve_direntry@sector 00B4  
                  __size_of_disk_initialize 0026                  __end_of_posicao_cursor_lcd 5192  
                            _MCP2515_RECEBE 5440                          ??_disparo_gravacao 00F1  
                               readMsgBuf@i 006B                                 readMsg@stat 0031  
                            auto_mount@path 007B                                ?_move_window 0073  
                      __end_of_create_chain 3584                                _dado_arquivo 0258  
                    __size_of_init_hardware 0016                              auto_mount@stat 00A2  
                      __size_of_get_fattime 0156                                put_cluster@p 009C  
                              _mcp2515_init 42EC                ?_verifica_dados_operacionais 0001  
                      __size_of_get_cluster 0222                                      ___lmul 529E  
                                 ??___aldiv 0021                        __size_of_disk_status 0030  
                                    ___wmul 5ACA                       ??_mcp2515_setRegister 001B  
                        __size_of_Longitude 000A                                   ??___lldiv 0021  
                                    _f_open 12EC                                   ??___llmod 0021  
                                    _m_nDlc 003B                                      _m_nDta 01E1  
                                 ??___lwdiv 001D                                      _f_sync 3C0E  
                                 ??___lwmod 001D                                      _buffer 01CA  
                                    _m_nRtr 003A                                      _estado 00FA  
                                    _memcmp 4A4A                                      _memcpy 56D0  
                          __end_of_init_lcd 491A                                      _memset 597E  
                                 ??_f_close 0031                                      _rawFix 01FA  
                                    clear_0 4830                                      clear_1 4842  
                                    clear_2 484E                                      clear_3 4868  
                                 ??_f_lseek 00B4                                   ??_f_mount 001B  
                  configura_baudrate_uart@x 002B                                   ??_f_write 00B4  
                                    _strcat 568C                                      _strcmp 5528  
                       _sdc_disk_initialize 161E                                   ??_command 0023  
                               GPSRead@buff 000A                                      _strcpy 5950  
                                    _strlen 5756                        _mcp2515_setRegisterS 58B8  
                          put_cluster@clust 0088                                      fputc@c 00D0  
                        get_cluster@fatsect 0095                            __end_of_monta_sd 2B8A  
                  __end_of_reserve_direntry 20BE                                   ??_readMsg 0030  
                          __end_of_validate 5602                      __end_of_next_dir_entry 36E8  
                                 ??_fprintf 00EF                                      fputs@n 00D7  
                                 ??_isdigit 0019                        __size_of_escalonador 00A6  
                          __end_of_response 5EA6                                   ??_setMode 001F  
                              __mediumconst 6088                             disk_read@sector 006A  
                           disk_read@result 0070                                      tblptrh 000FF7  
                                    tblptrl 000FF6                    __size_of_mcp2515_read_id 019E  
                                    tblptru 000FF8                                   ??_proceed 001B  
                mcp2515_configRate@canClock 001C                            _write_timer_zero 5EBE  
                                    sync@fs 0088                  mcp2515_configRate@canSpeed 0020  
                 escreve_caractere_lcd@data 001B                              ??_dummy_clocks 0019  
                       _escreve_inteiro_lcd 584C                      ?_mcp2515_readRegisterS 001A  
                           sdc_disk_write@j 0065                       __size_of_MCP2515_INIT 001C  
                                __accesstop 0060                     __end_of__initialization 486E  
                    ??_mcp2515_readRegister 001A                        ?_sdc_disk_initialize 0001  
                            disk_write@buff 0068                              disk_write@pdrv 006F  
                      __size_of_escreve_SPI 0010                      __end_of_MCP2515_RECEBE 548E  
                             ___rparam_used 000001                  ??_verifica_diferenca_graus 0019  
                         ??_escreve_cmd_lcd 001B                ?_verifica_plausibilidade_lat 0001  
              __end_of_calcula_diff_minutos 4220                    mcp2515_setRegister@value 001A  
                                 ?_GPSMonth 0019                              __pcstackCOMRAM 0001  
               __end_of_endereco_cursor_lcd 506E                                __pidataBANK0 5EFB  
                              __pidataBANK1 5EF8                                __pidataBANK2 5E56  
                             __end_of_begin 5E02                           ?_mensagem_inicial 0001  
                   _configura_baudrate_uart 3F6E                               __end_of_delay 5CE8  
                            _escrita_sdcard 3AE6                             hora_nome@p_buff 0019  
                             __end_of_fputc 57D8                               __end_of_fputs 4D9A  
                         ??_SPI1_Initialize 0019                        ?_escreve_inteiro_lcd 002E  
             ??_verifica_dados_operacionais 0032                      mcp2515_configRate@cfg1 0021  
                    mcp2515_configRate@cfg2 0022                      mcp2515_configRate@cfg3 0023  
                        __size_of_data_nome 002A                          ??_mensagem_inicial 001F  
                        __size_of_diff_calc 0058                        __end_of_make_dirfile 3842  
                              ?_put_cluster 0088                           reserve_direntry@c 00BB  
                     ?_mcp2515_setRegisterS 001A                           reserve_direntry@n 00B8  
                          _mcp2515_write_mf 4684                          _tarefa_em_execucao 003E  
                __end_ofi2_write_timer_zero 5EF0                             ?_next_dir_entry 0031  
                    __size_of_sdc_disk_read 0124             configura_baudrate_uart@baudrate 0027  
                      reserve_direntry@dptr 00B9                        __size_of_leitura_SPI 000C  
                             _init_hardware 5DC2                   ??_mcp2515_setCANCTRL_Mode 001D  
                              _MCP2515_INIT 5D22                                auto_mount@fs 00A7  
                        __size_of_disk_read 0070                  __end_of_verifica_recep_gps 5B38  
                                   ??_begin 0032                                     ??_delay 0019  
                            sdc_reset@count 0029                                     ??_fputc 0031  
                                   ??_fputs 0031                             ??_troca_de_tela 0030  
                         __end_of_Longitude 5ED2                      __size_of_mcp2515_reset 001C  
              mensagem_inicial@msg_linha_um 0060                                  __pbssBANK0 00F7  
                                __pbssBANK1 0100                                  __pbssBANK2 0200  
            __size_of_escreve_frase_ram_lcd 0052                                     ?_GPSDay 0019  
             __end_of_escreve_frase_ram_lcd 53EE                       ??_sdc_disk_initialize 002C  
                                 ?_Latitude 0019                             ?_MCP2515_RECEBE 006D  
                        __size_of_hora_nome 002A                   escreve_inteiro_uart@F3215 02D3  
                                ??_GPSMonth 001B                             mcp2515_init@res 006F  
             ??_verifica_plausibilidade_lat 0019                      __end_of_escrita_sdcard 3C0E  
                        __size_of_sdc_reset 0090                          troca_de_tela@state 003D  
                                   ?___lmul 0019                           ??_sdc_disk_status 0019  
                             make_dirfile@a 0029                               make_dirfile@b 0027  
                             make_dirfile@c 002B                               make_dirfile@n 002A  
                             make_dirfile@t 0028                                     ?___wmul 0019  
                     mensagem_inicial@F3670 60F6                       mensagem_inicial@F3672 60E5  
                         mcp2515_read_id@id 0020                       ??_escreve_inteiro_lcd 0030  
                                   ?_f_open 00C0                                  _fence_flag 0032  
                                   ?_f_sync 008A                           ??_disk_initialize 002D  
                     __size_of_desliga_uart 000E                                     ?_memcmp 0019  
                                   ?_memcpy 0019                     calcula_diff_graus@count 002E  
                                   ?_memset 0019                              ___lmul@product 0021  
               mcp2515_read_canMsg@mcp_addr 0062                     calcula_diff_graus@point 002D  
               __size_of_mcp2515_configRate 0214                                     ?_strcat 0019  
                                   ?_strcmp 0001                                     ?_strcpy 001B  
                                   ?_strlen 0019                          _calcula_diff_graus 4078  
                                   i2l10901 5E22                                     i2l14211 234E  
                                   i2l14203 232C                                     i2l14301 2524  
                                   i2l14221 237C                                     i2l14231 23CE  
                                   i2l14207 233C                                     i2l14235 23EE  
                                   i2l14219 2372                                     i2l14307 2538  
                                   i2l14261 2468                                     i2l14253 244C  
                                   i2l14245 241E                                     i2l14237 23F2  
                                   i2l14271 249C                                     i2l14263 246E  
                                   i2l14281 24BE                                     i2l14505 3F2E  
                                   i2l14507 3F3A                                     i2l14279 24B8  
                                   i2l14297 251C                                     i2l14289 24EC  
                                   i2l14481 3EBE                                     i2l14493 3F04  
                                   i2l14485 3EEC                                     i2l14469 3EAE  
                                   i2l14497 3F12                                     i2l13981 5532  
                                   i2l13973 5606                                     i2l13979 552A  
                                   _INTCON2 000FF1                                     _INTCON3 000FF0  
                       mcp2515_readStatus@i 001A                              ?_init_hardware 0001  
                                 ?_check_fs 0073                                  _disk_ioctl 5C6C  
                                   _GPSRead 2324                                     _GPSHour 5B38  
                                _disk_write 548E                                     _GPSyear 5BA2  
                            remove_chain@fs 00A6                         ?_calcula_diff_graus 0001  
      __size_of_verifica_dados_operacionais 0028                                     _SSPCON1 000FC6  
                  __size_of_inicializa_uart 0022                                     _SSPSTAT 000FC7  
                                _clust2sect 4472                              _inicializa_SPI 5C4C  
                           trace_path@clust 00B7                           __end_of_data_nome 5A54  
                         __end_of_diff_calc 529E                           ??_mcp2515_read_id 0022  
                           __size_of_GPSDay 0022                                  ??_Latitude 001B  
                             ?_remove_chain 00A0                       __size_of_create_chain 018C  
                                 ?_init_lcd 0001                          __size_of_stringcpy 0046  
                  ??_mcp2515_modifyRegister 001C                   calcula_diff_minutos@count 002E  
                             _sdc_disk_read 3D32                   calcula_diff_minutos@point 002D  
                              _desliga_uart 5E72                                readMsgBuf@id 0063  
                                _auto_mount 059C                                     __Hparam 0000  
                 ??_configura_baudrate_uart 0060    verifica_diferenca_graus@point_index_long 001F  
           __end_of_mcp2515_setCANCTRL_Mode 59D6                                     __Lparam 0000  
                                 ?_monta_sd 001D                                   ?_validate 001F  
                             setMode@opMode 001F                             ?_escrita_sdcard 0001  
                         __end_of_disk_read 5004                 __size_of_mcp2515_readStatus 0016  
                             put_cluster@bc 009A                                   ?_response 0001  
   verifica_diferenca_graus@point_index_lat 001E                               put_cluster@fs 009E  
                      ??_calcula_diff_graus 002C                            _sinaliza_mcp2515 0041  
                                   ___aldiv 4220                                  f_close@res 0031  
                           __size_of___lmul 0056                                  _readMsgBuf 4BF8  
                                   ___lldiv 4EA0                               _mcp2515_reset 5D3E  
                           __size_of___wmul 0026                                     ___llmod 506E  
                      __size_of_move_window 01AA                                  check_fs@fs 0079  
                                   ___lwdiv 534A                                     ___lwmod 5714  
                           __size_of_f_open 0332                             __size_of_f_sync 0124  
                      __end_of_dummy_clocks 5814                                     _f_close 5A00  
                    ??_mcp2515_setRegisterS 001D                                     __pcinit 47D8  
                           __size_of_memcmp 0092                             __size_of_memcpy 0044  
                           __size_of_memset 002C                                     _f_lseek 0AE4  
                                _init_ports 5D06                                     __ramtop 0800  
                                   _f_mount 5572                                     __ptext0 5AF0  
                                   __ptext1 4B6C                                     __ptext2 487C  
                                   __ptext3 5DC2                                     __ptext4 5D06  
                                   __ptext5 5EF0                                     __ptext6 5E02  
                                   __ptext7 5D5A                                     __ptext8 5EBE  
                                   __ptext9 5E64                                     _f_write 0012  
                                   _command 51EC                                   _T0CONbits 000FD5  
                       auto_mount@totalsect 009B                                     _mcpMode 0039  
                           __size_of_strcat 0044                             __size_of_strcmp 004A  
                           __size_of_strcpy 002E                             __size_of_strlen 0042  
                                data_nome@i 001B                 endereco_cursor_lcd@endereco 001B  
                         __end_of_hora_nome 5A00                                     _readMsg 5648  
                                   _fprintf 0F6E                                __size_of_fix 000A  
                                   _rawDate 01E9                                     _isdigit 5CAC  
                              __size_of_isr 3F66        __size_of_verifica_plausibilidade_lat 00B0  
                   ??_escreve_caractere_lcd 001B                                  ??_check_fs 0077  
                                   _rawTime 01D6                            ___aldiv@dividend 0019  
                      _calcula_diff_minutos 4150                                     _setMode 5E80  
                              stringcpy@chr 0009                                stringcpy@dir 0005  
                                   _time_sd 0126                                _create_chain 33F8  
                                   _proceed 5EA6                     __size_of_init_interrupt 0012  
                        _point_buff_gps_lat 0122                           __end_of_sdc_reset 4B6C  
           calcula_diff_minutos@select_data 002C                      __end_of_inicializa_SPI 5C6C  
                                f_lseek@ofs 00B0                              __pintcode_body 3E56  
                                f_lseek@res 00C4                        end_of_initialization 486E  
      __end_of_verifica_plausibilidade_long 45D4       __size_of_verifica_plausibilidade_long 00B0  
              _verifica_plausibilidade_long 4524                mcp2515_readRegisterS@address 001D  
                                f_open@mode 00C4                                  f_open@path 00C2  
                            ??_remove_chain 00A2                                     isr@cont 0018  
                                   memcmp@n 001D                                     memcpy@d 0020  
                                   memcpy@n 001D                                     memcpy@s 0022  
                   __size_of_init_oscilador 0008                                     fputc@bw 00D1  
                                   itoa@buf 0028                                     memset@c 001B  
                                   itoa@val 0029                                     memset@n 001D  
                                   memset@p 001F                               __Lmediumconst 6088  
                                ??_init_lcd 001C                                     int_func 3E56  
               __end_of_mcp2515_read_canMsg 51EC                           ?_recebe_dado_uart 0001  
          __end_of_verifica_diferenca_graus 30B0                             disk_status@pdrv 001D  
                           disk_status@stat 001E                              ?_sdc_disk_read 0025  
                         ?_recebe_dados_gps 0001                                   i2u1534_40 5566  
                                 i2u1608_40 3E9E                                   i2u1609_48 3EA0  
                                 _GPSMinute 5C08                                   _GPSSecond 5BC4  
                    write_timer_zero@timer0 0019                             ___lldiv@divisor 001D  
                             _rawSatellites 011D                                  f_mount@drv 001B  
                        ??_recebe_dado_uart 0001                             ___lldiv@counter 0025  
                                ??_monta_sd 001F                          ??_recebe_dados_gps 002D  
                                ??_validate 0023                       __size_of_make_dirfile 015A  
                  __size_of_dados_gps_to_sd 0056                              _fence_diff_lat 60B9  
                                ??_response 0019                                   _RCSTAbits 000FAB  
                  __end_of_write_timer_zero 5EC8                            ___aldiv@quotient 0023  
                            ?_mcp2515_reset 0001                                     postdec1 000FE5  
                                   postdec2 000FDD                                     postinc0 000FEE  
                                   postinc1 000FE6                                     postinc2 000FDE  
                         MCP2515_RECEBE@buf 0071                           MCP2515_RECEBE@len 006F  
                                   utoa@buf 0020                                     utoa@val 0021  
                                _wait_ready 5882                    mcp2515_initCANBuffers@a1 0060  
                  mcp2515_initCANBuffers@a2 0061                    mcp2515_initCANBuffers@a3 0062  
                                   strcmp@r 0007                                     strlen@s 0019  
                                 _PORTBbits 000F81                   __size_of_disparo_gravacao 004C  
                                 _PORTDbits 000F83                                   _PORTEbits 000F84  
                           ??_init_hardware 001B                                  _trace_path 1BD8  
                        _posicao_cursor_lcd 5134                           __end_of_stringcpy 5648  
                             ??_desliga_SPI 0019                        __size_of_put_cluster 0266  
                     ?_calcula_diff_minutos 0001             __end_of_configura_baudrate_uart 4078  
                               ?_disk_ioctl 0019                           ?_reserve_direntry 00AE  
                                f_write@btw 00B1                                  f_write@res 00C0  
                                 _TRISAbits 000F92                                   _TRISBbits 000F93  
                               ?_disk_write 0068                                   _TRISCbits 000F94  
                                 _TRISDbits 000F95                            next_dir_entry@dj 0031  
                   ??_mcp2515_readRegisterS 001D                               ??_MPC2515_SPI 0019  
                           _escreve_cmd_lcd 4C84                          ??_reserve_direntry 00B0  
               __size_of_armazena_longitude 001A                         ?_posicao_cursor_lcd 001C  
                           ?_inicializa_SPI 0001                             disk_write@count 006E  
                               ?_clust2sect 0025                            _put_cluster$1552 0092  
                          _put_cluster$1553 0094                     mcp2515_readRegister@ret 001B  
            verifica_dados_operacionais@rpm 0073                                  command@CMD 0023  
                                command@CRC 0022                                  command@arg 001E  
                              _make_dirfile 36E8               ?_verifica_plausibilidade_long 0001  
                           _SPI1_Initialize 5B5C                              __end_of_GPSDay 5C4C  
                  __end_of_mcp2515_write_mf 4732                               ??_get_fattime 0060  
                         ??_inicializa_uart 002D                 __size_of_inicializa_tarefas 0060  
           __size_of_mcp2515_modifyRegister 0020                                  ?_GPSMinute 0019  
                                ?_GPSSecond 0019                 __end_of_mcp2515_setRegister 5DC2  
                             ??_get_cluster 008A                      __end_of_fence_diff_lat 60E5  
                             ??_disk_status 001B                                 ?_auto_mount 007B  
                         _make_dirfile$1662 0025                             command@argument 0024  
                      ??_posicao_cursor_lcd 001D                           __size_of_GPSMonth 0022  
                               ?_readMsgBuf 0063                              __end_of___lmul 52F4  
                            _temp_buff_long 029A                            ??_next_dir_entry 009D  
                            __end_of___wmul 5AF0                              __end_of_f_open 161E  
                 mcp2515_initCANBuffers@ext 0069                               ??_escalonador 00F4  
                               ?_init_ports 0001                              __end_of_f_sync 3D32  
                         _armazena_latitude 5D8E                              __end_of_memcmp 4ADC  
                            __end_of_memcpy 5714                              __end_of_memset 59AA  
                      mcp2515_init@canClock 002F                          ?_armazena_latitude 0001  
                            __end_of_strcat 56D0                              __end_of_strcmp 5572  
                  ??_mcp2515_initCANBuffers 002E                              __end_of_strcpy 597E  
                            __end_of_strlen 5798                            _time_atualizacao 0035  
                      mcp2515_init@canSpeed 002E                         start_initialization 47D8  
                               __end_of_fix 5EE6                                 __end_of_isr 3F6E  
                 __size_of_mensagem_inicial 008C                          reserve_direntry@dj 00AE  
                       ??_armazena_latitude 0021                          reserve_direntry@fs 00BE  
                          ??_MCP2515_RECEBE 0072                         __end_of_desliga_SPI 5E9A  
                             ??_escreve_SPI 0019                    ??_verifica_fence_externo 002F  
                                  ??_GPSDay 001B                             _sdc_disk_status 5E26  
                           ??_sdc_disk_read 002C                           auto_mount@fatsize 00A3  
                        i2_write_timer_zero 5EE6                         __end_of_MPC2515_SPI 5E56  
                           ___llmod@divisor 001D                             data_nome@p_buff 0019  
                                 _Longitude 5EC8                             _disk_initialize 5AA4  
             mcp2515_getNextFreeTXBuf@F3700 01FC                             ___llmod@counter 0021  
                     mcp2515_write_mf@canid 002C               __size_of_mcp2515_readRegister 001E  
                        _verifica_recep_gps 5B14                           __size_of_Latitude 000A  
                     reserve_direntry@clust 00BC                     __size_of_sdc_disk_write 01B6  
               mcp2515_setRegisterS@address 001D                            _data_uart_recebe 0040  
                         wait_ready@timeout 0019                             ??_mcp2515_reset 001A  
                     __size_of_dummy_clocks 003C                                  readMsg@res 0030  
                             auto_mount@fmt 00A1                         __size_of_disk_ioctl 0020  
     verifica_diferenca_minutos@select_data 001D                         ?i2_write_timer_zero 0001  
                                hora_nome@i 001B                         __size_of_disk_write 004E  
                                  ??___lmul 0021                                  fprintf@fil 00D9  
                                fprintf@arp 02CD                                    ??___wmul 001D  
                                fprintf@res 02C1                                  fprintf@val 02C9  
                                fprintf@str 00DB                         __end_of_get_fattime 3998  
                                  ??_f_open 00C5                   __end_of_armazena_latitude 5DA8  
                       ?_verifica_recep_gps 0001                                    ??_f_sync 0031  
                               ?_wait_ready 0001                                 __pdataBANK0 00FD  
                               __pdataBANK1 01FC                                 __pdataBANK2 02D3  
                       __end_of_get_cluster 2770                                    ??_memcmp 001F  
                       __end_of_disk_status 5950                                    ??_memcpy 001F  
                       __size_of_clust2sect 00B2                                    ??_memset 001F  
                    sdc_disk_read@start_add 0061                        __end_of_remove_chain 49B6  
                         ??_dados_gps_to_sd 0022                     sdc_disk_initialize@buff 006B  
                             ??_leitura_SPI 0019                     __end_of_escreve_cmd_lcd 4D10  
                                  ??_strcat 001D                                    ??_strcmp 0005  
                                  ??_strcpy 001F                                    ??_strlen 001B  
                   sdc_disk_initialize@stat 0062                                 ?_trace_path 00A8  
                    ??_calcula_diff_minutos 002C                      _mcp2515_modifyRegister 5C8C  
         __size_of_verifica_diferenca_graus 01B4                                _fprintf$2155 02C3  
              __size_of_endereco_cursor_lcd 006A                   ?_verifica_diferenca_graus 0001  
                               __pbssBIGRAM 02E1                               monta_sd@index 001F  
                           _mcp2515_read_id 325A                                 __pbssCOMRAM 0032  
                           _trace_path$1711 00B3                             _trace_path$1709 00B1  
              ??_verifica_diferenca_minutos 0019                                    ?_GPSRead 0001  
                                  ?_GPSHour 0019                               __pcstackBANK0 0060  
                             __pcstackBANK2 02B1                              _init_interrupt 5E02  
                       __size_of_auto_mount 0548                        ??i2_write_timer_zero 0003  
                       __end_of_escalonador 47D8                 __end_of_sdc_disk_initialize 191E  
                                  ?_GPSyear 0019                           __size_of_check_fs 0082  
                   __end_of_SPI1_Initialize 5B80                                _isdigit$3625 001A  
                     diff_calc@p_buff_fence 0026                                check_fs@sect 0073  
                               _char_number 0045                        ??_verifica_recep_gps 0019  
                     diff_calc@p_buff_point 0028                         __size_of_readMsgBuf 008C  
                              _dummy_clocks 57D8                              _init_oscilador 5EF0  
                     __end_of_troca_de_tela 1BD8                             MPC2515_SPI@data 0019  
                                  GPSRead@c 000B                            ??_escrita_sdcard 0032  
                       __size_of_init_ports 001C                                  ?_Longitude 0019  
                     _escreve_frase_ram_lcd 539C                                 ??_GPSMinute 001B  
                               ??_GPSSecond 001B                                   _data_buff 0130  
                                 _data_hoje 00FB                 __end_of_escreve_inteiro_lcd 5882  
                                 _data_nome 5A2A                         __end_of_escreve_SPI 5E46  
                         __size_of_init_lcd 009E                                   _diff_calc 5246  
                          ___lwdiv@dividend 0019                           delay@contador_int 001A  
                         delay@contador_ext 0019              ??_verifica_plausibilidade_long 0019  
       __end_of_verifica_dados_operacionais 5A7C                 _verifica_dados_operacionais 5A54  
                                 __pintcode 0008                               __pmediumconst 6088  
                                  ?___aldiv 0019                                   __ptext100 5EA6  
                                 __ptext101 51EC                                   __ptext110 5BE6  
                                 __ptext102 5882                                   __ptext111 5C08  
                                 __ptext103 5E36                                   __ptext120 5DEE  
                                 __ptext112 5B38                                   __ptext104 57D8  
                                 __ptext121 42EC                                   __ptext113 5C2A  
                                 __ptext105 5EB2                                   __ptext130 5DA8  
                                 __ptext122 59AA                                   __ptext114 5A2A  
                                 __ptext106 5C6C                                   __ptext131 5E46  
                                 __ptext123 5CE8                                   __ptext115 52F4  
                                 __ptext107 3842                                   __ptext132 5B5C  
                                 __ptext124 5C8C                                   __ptext116 2984  
                                 __ptext108 5BA2                                   __ptext125 5D3E  
                                 __ptext117 5756                                   __ptext109 5BC4  
                                 __ptext134 5EE6                                   __ptext126 3998  
                                 __ptext118 5D22                                   __ptext135 5E14  
                                 __ptext127 4684                                   __ptext119 5E80  
                                 __ptext136 2324                                   __ptext128 58B8  
                                 __ptext137 5602                                   __ptext129 2770  
                                 __ptext138 5528                                   __ptext139 0000  
                         __size_of_monta_sd 0206                                    ?___lldiv 0019  
                                  ?___llmod 0019                           __size_of_validate 0048  
                __end_of_mcp2515_configRate 2984                                    ?___lwdiv 0019  
                                  ?___lwmod 0019         __size_of_verifica_diferenca_minutos 01BC  
                                 _m_nExtFlg 0046                           __size_of_response 000C  
                                  ?_f_close 0093                                   _disk_read 4F94  
                        mcp2515_read_id@ext 001F         verifica_diferenca_graus@select_data 001D  
                        _sinaliza_int_timer 003F                                    ?_f_lseek 00AE  
                                  ?_f_mount 0019                            _disparo_gravacao 54DC  
                                  ?_f_write 00AE                    ?_mcp2515_setCANCTRL_Mode 0001  
                                  ?_command 001E                      __end_of_init_interrupt 5E14  
                                 _m_nfilhit 00F8                                    ?_readMsg 0001  
                                  ?_fprintf 00D9                                    ?_isdigit 0001  
                               _desliga_SPI 5E8E                         sdc_disk_read@p_buff 0025  
                   troca_de_tela@last_state 003C                         sdc_disk_read@length 0065  
           __size_of_mcp2515_initCANBuffers 014E                                    ?_setMode 0001  
                       sdc_disk_read@sector 0027                     __end_of_sdc_disk_status 5E36  
            __size_of_escreve_caractere_lcd 0072               __end_of_escreve_caractere_lcd 4F94  
                                  ?_proceed 0001                                   f_close@fp 0093  
                            __size_of_begin 0014                         __end_of_leitura_SPI 5EBE  
                                 _hora_nome 59D6                            ___lwdiv@quotient 001E  
                            __size_of_delay 001E                                 _MPC2515_SPI 5E46  
                   __end_of_disk_initialize 5ACA                      __end_of_init_oscilador 5EF8  
                            __size_of_fputc 0040                              __size_of_fputs 008A  
                       make_dirfile@dirname 0022                                  validate@id 0021  
                                validate@fs 001F                                   _p_tarefas 0110  
                                 _rawCourse 0207             __size_of_verifica_fence_externo 0084  
                          make_dirfile@path 0021                                    _GPGGA_ok 012C  
                                 _sdc_reset 4ADC                         __size_of_wait_ready 0036  
                           ___aldiv@divisor 001D               verifica_diferenca_graus@point 0021  
                           ___aldiv@counter 0021                              ___wmul@product 001D  
               mcp2515_readRegister@address 001A                                    _LATBbits 000F8A  
                                 f_lseek@fp 00AE                                    _LATCbits 000F8B  
       __end_of_verifica_plausibilidade_lat 4684                 _verifica_plausibilidade_lat 45D4  
                                  _GPRMC_ok 012E                                   f_open@dir 00DC  
                                 f_open@res 00DB                                    _PIE1bits 000F9D  
                               _get_fattime 3842                                _rawLongitude 0280  
                __end_of_mcp2515_readStatus 5DEE                                  ?_data_nome 0019  
                       __size_of_trace_path 0278                                 _get_cluster 254E  
                                ?_diff_calc 0026                                    _GPSMonth 5BE6  
                               _disk_status 5920                               ??_move_window 0077  
                                 f_mount@fs 0019                                    _PIR1bits 000F9E  
               mcp2515_readRegisterS@values 001A                               ?_mcp2515_init 002E  
                             move_window@fs 0086                            MCP2515_RECEBE@id 006D  
               __size_of_calcula_diff_graus 00D8                     mcp2515_initCANBuffers@i 0067  
                         ?_write_timer_zero 0019                             remove_chain@nxt 00A4  
                __size_of_armazena_latitude 001A                                   f_sync@dir 0091  
                                 f_sync@res 0090                                   f_sync@tim 008C  
                   __end_of_mcp2515_read_id 33F8                    posicao_cursor_lcd@coluna 001C  
                                ?_disk_read 0068                          ??_write_timer_zero 001B  
                                 f_write@cc 00C6                  posicao_cursor_lcd@endereco 001E  
                  mcp2515_write_mf@mcp_addr 0027                                   f_write@bw 00B3  
                                 f_write@fp 00AE                   __size_of_recebe_dado_uart 0012  
                               _escalonador 4732                mcp2515_initCANBuffers@ulFilt 006A  
                         ___wmul@multiplier 0019                   __size_of_recebe_dados_gps 0028  
              mcp2515_initCANBuffers@ulMask 0063                            ?_escreve_cmd_lcd 0001  
                    mcp2515_readRegisterS@i 001E                      mcp2515_readRegisterS@n 001C  
               escreve_frase_ram_lcd@buffer 001C               __size_of_mcp2515_setRegisterS 0036  
                          ??_inicializa_SPI 0019                             ?_init_interrupt 0001  
                              ??_disk_ioctl 001C                 verifica_diferenca_minutos@i 0022  
               verifica_diferenca_minutos@j 0020                                ??_disk_write 0030  
       mcp2515_read_canMsg@buffer_sidh_addr 0060                    mcp2515_write_mf@tbufdata 0028  
                              f_lseek@clust 00CD                             _inicializa_uart 5B80  
                              f_lseek@csize 00C9                                f_lseek@ifptr 00C5  
                                 _stringcpy 5602                            __size_of_GPSRead 022A  
                          _mensagem_inicial 4B6C                            __size_of_GPSHour 0024  
                                ?_hora_nome 0019                               _temp_buff_lat 02A6  
                          ?_SPI1_Initialize 0001                             ?_init_oscilador 0001  
                              ??_clust2sect 0029                            __size_of_GPSyear 0022  
                         ___lmul@multiplier 0019                                 _INTCON2bits 000FF1  
            __size_of_mcp2515_readRegisterS 0038                                   copy_data0 47EC  
             __end_of_mcp2515_readRegisterS 584C                                 _escreve_SPI 5E36  
                             _flag_anomalia 00F9                                  ?_sdc_reset 0001  
                       sdc_reset@count_nosd 0027                                    _Latitude 5ED2  
                  ?_configura_baudrate_uart 0027                      ?_escreve_frase_ram_lcd 001C  
                               ??_Longitude 001B                               readMsgBuf@buf 0067  
                             readMsgBuf@len 0065                            auto_mount@chk_wp 007C  
                         move_window@sector 0073                              _sdc_disk_write 2D46  
                 __size_of_reserve_direntry 026E                           ?_mcp2515_write_mf 001F  
                  escreve_inteiro_lcd@F3223 02DA                                ??_auto_mount 007D  
                    _mcp2515_initCANBuffers 3998                     mcp2515_read_id@mcp_addr 002B  
                mcp2515_setRegister@address 001B                                    __Hrparam 0000  
                            ??_mcp2515_init 0030                                   memcpy@tmp 001F  
                                  __Lrparam 0000                     mcp2515_read_canMsg@ctrl 0061  
                        ??_mcp2515_write_mf 0024                                   fprintf@cc 02CE  
                        __end_of_disk_ioctl 5C8C                       __size_of_remove_chain 009C  
              __size_of_mcp2515_read_canMsg 005A                                ??_readMsgBuf 0068  
                            put_cluster@val 008A                            get_cluster@clust 0088  
                        __end_of_disk_write 54DC                  mcp2515_setRegisterS@values 001A  
                              _SentenceType 0044                            __size_of___aldiv 00CC  
                    sdc_disk_initialize@ocr 0068                                monta_sd@dado 001D  
                    _verifica_fence_externo 4D9A                            __size_of___lldiv 0082  
                          __size_of___llmod 0066                     mcp2515_read_id@tbufdata 002C  
                             ??_put_cluster 008C                            __size_of___lwdiv 0052  
                              monta_sd@size 0020                            __size_of___lwmod 0042  
                              ??_init_ports 0019                         __end_of_move_window 325A  
                        __end_of_clust2sect 4524                    escreve_inteiro_lcd@valor 002E  
                          __size_of_f_close 002A                    escreve_inteiro_lcd@texto 0060  
                          __size_of_f_lseek 048A                            __size_of_f_mount 0048  
                               _leitura_SPI 5EB2                            __size_of_f_write 058A  
        __end_of_verifica_diferenca_minutos 2D46                  _verifica_diferenca_minutos 2B8A  
                          __size_of_command 005A                    mcp2515_setCANCTRL_Mode@i 001D  
                __end_of_armazena_longitude 5D8E                       __end_of_init_hardware 5DD8  
                                  _check_fs 4E1E                                  strcat@from 001B  
                          __size_of_readMsg 0044                               ?_MCP2515_INIT 0001  
                          __size_of_fprintf 037E                            __size_of_isdigit 001E  
                           ___lwdiv@divisor 001B                            ?_sdc_disk_status 0001  
                                ?_stringcpy 0001                               _time_recovery 0124  
                          __size_of_setMode 000E                             ___lwdiv@counter 001D  
                        __end_of_auto_mount 0AE4                                    __ptext10 50D4  
                                  __ptext11 4732                                    __ptext20 5814  
                                  __ptext12 191E                                    __ptext21 5DD8  
                                  __ptext13 54DC                                    __ptext30 45D4  
                                  __ptext22 584C                                    __ptext14 5A54  
                                  __ptext31 2B8A                                    __ptext23 58EE  
                                  __ptext15 5440                                    __ptext40 5D8E  
                                  __ptext32 2EFC                                    __ptext24 49B6  
                                  __ptext16 4BF8                                    __ptext41 5950  
                                  __ptext33 4150                                    __ptext25 5714  
                                  __ptext17 5648                                    __ptext50 5E8E  
                                  __ptext42 5ED2                                    __ptext34 4078  
                                  __ptext26 534A                                    __ptext18 5192  
                                  __ptext51 5EDC                                    __ptext43 5A7C  
                                  __ptext35 5246                                    __ptext27 4C84  
                                  __ptext19 325A                                    __ptext60 12EC  
                                  __ptext52 3AE6                                    __ptext44 5B14  
                                  __ptext36 43B4                                    __ptext28 4D9A  
                                  __ptext61 1BD8                                    __ptext53 568C  
                                  __ptext45 5B80                                    __ptext37 5CAC  
                                  __ptext29 4524                                    __ptext70 5AA4  
                                  __ptext62 36E8                                    __ptext54 59D6  
                                  __ptext46 3F6E                                    __ptext38 5D74  
                                  __ptext71 161E                                    __ptext63 1E50  
                                  __ptext55 0F6E                                    __ptext47 4220  
                                  __ptext39 5EC8                                    __ptext80 529E  
                                  __ptext72 4ADC                                    __ptext64 3584  
                                  __ptext56 4D10                                    __ptext48 5C4C  
                                  __ptext81 5572                                    __ptext73 5134  
                                  __ptext65 4472                                    __ptext57 5798  
                                  __ptext49 5E72                                    __ptext90 55BA  
                                  __ptext82 0AE4                                    __ptext74 5004  
                                  __ptext66 491A                                    __ptext58 0012  
                                  __ptext91 5920                                    __ptext83 33F8  
                                  __ptext75 539C                                    __ptext67 56D0  
                                  __ptext59 506E                                    __ptext92 5E26  
                                  __ptext84 20BE                                    __ptext76 4F22  
                                  __ptext68 059C                                    __ptext93 53EE  
                                  __ptext85 254E                                    __ptext77 5CCA  
                                  __ptext69 597E                                    __ptext94 30B0  
                                  __ptext86 5ACA                                    __ptext78 4E1E  
                                  __ptext95 548E                                    __ptext87 4EA0  
                                  __ptext79 4A4A                                    __ptext96 2D46  
                                  __ptext88 5A00                                    __ptext97 4F94  
                                  __ptext89 3C0E                                    __ptext98 3D32  
                                  __ptext99 5E9A                            __size_of_proceed 000C  
                                  _filename 026C                                 _rawAltitude 0200  
                          ?_disk_initialize 0001                              _timeout_tarefa 0128  
                        sdc_disk_read@count 002B                                  strcpy@from 001D  
                       escrita_sdcard@f_fix 0042                  __end_of_inicializa_tarefas 5134  
                        __end_of_readMsgBuf 4C84                    i2write_timer_zero@timer0 0001  
                    __end_of_sdc_disk_write 2EFC                                   monta_sd@i 0021  
                                  _gps_flag 0118                                 _rawLatitude 028D  
                                  _init_lcd 487C                               __size_of_atoi 00BE  
                             __size_of_main 0024                                _remove_chain 491A  
                             __size_of_itoa 0032                               __size_of_utoa 0094  
                             __size_of_sync 0052                         _endereco_cursor_lcd 5004  
                        __end_of_init_ports 5D22                                    _rawSpeed 020D  
                               ??_data_nome 001B                               dummy_clocks@i 001C  
                                  f_open@dj 00DE                               dummy_clocks@n 001B  
                                  f_open@fn 00C9                                    f_open@fp 00C0  
                                  f_open@dw 00D7                                 ??_diff_calc 002A  
                                  f_open@rs 00D5                             _dados_gps_to_sd 52F4  
                                  _monta_sd 2984                                    _validate 55BA  
                                  _sentence 01F0                                move_window@n 0081  
                             stringcpy@str1 0001                               stringcpy@str2 0003  
                                  _response 5E9A                                    f_sync@fp 008A  
                       _point_buff_gps_long 0120                 __size_of_posicao_cursor_lcd 005E  
                                  int$flags 0047                     posicao_cursor_lcd@linha 001D  
                                  atoi@sign 0023                                ??_wait_ready 0019  
              __size_of_mcp2515_setRegister 001A                     ?_mcp2515_modifyRegister 001A  
            mcp2515_setCANCTRL_Mode@newmode 001E                            ?_mcp2515_read_id 001F  
                               ??_disk_read 0030                     __end_of_inicializa_uart 5BA2  
                              ??_trace_path 00AD                __end_of_mcp2515_readRegister 5D06  
                 verifica_diferenca_graus@i 0022                   verifica_diferenca_graus@j 0020  
                      ?_endereco_cursor_lcd 0001                              ??_MCP2515_INIT 0032  
                        put_cluster@fatsect 0096                                  _INTCONbits 000FF2  
                                  memcmp@s1 0019                                    memcmp@s2 001B  
                          move_window@wsect 0082                                    memcpy@d1 0019  
                       mcp2515_write_mf@ext 001F                                    memcpy@s1 001B  
                       __end_of_put_cluster 2324                                    fprintf@c 02D2  
                                  fprintf@f 02C7                                    fprintf@i 02D0  
                                  fprintf@r 02C8                                    fprintf@s 02B1  
                                  fprintf@w 02C5                                    fputc@chr 00CC  
                                  itoa@base 002B                                    fputc@fil 00CE  
                                  isdigit@c 001B                                    memset@p1 0019  
                               ??_hora_nome 001B                           _config_timer_dois 5E64  
                              _tempo_backup 0108                                    fputs@fil 00D5  
                                  fputs@str 00D3                           _config_timer_zero 5D5A  
                              _poligono_ext 0132                               wait_ready@res 001D  
                                  intlevel2 0000                          ?_config_timer_dois 0001  
                  mensagem_inicial@msg_dois 0071                                 ??_sdc_reset 0025  
                        ?_config_timer_zero 0001                                _tempo_tarefa 0100  
                           ?_sdc_disk_write 0025                            ___lwmod@dividend 0019  
                        __end_of_wait_ready 58B8                    __end_of_disparo_gravacao 5528  
                          ___lldiv@dividend 0019                           sdc_disk_read@buff 0067  
                     __end_of_sdc_disk_read 3E56                         sdc_disk_status@pdrv 001A  
                             ?_desliga_uart 0001                         ??_config_timer_dois 0019  
                                _OSCCONbits 000FD3                          __end_of_trace_path 1E50  
                       ??_config_timer_zero 001B                                 _move_window 30B0  
                           _fence_diff_long 6089                       __end_of_mcp2515_reset 5D5A  
            __end_of_mcp2515_modifyRegister 5CAC                              diff_calc@fence 0060  
                            diff_calc@point 006C                        sdc_disk_write@count1 0062  
verifica_diferenca_minutos@point_index_long 001F                          mcp2515_write_mf@id 0020  
                      sdc_disk_write@p_buff 0025                            _recebe_dado_uart 5E14  
                                  utoa@base 0023                        sdc_disk_write@sector 0027  
                     ??_endereco_cursor_lcd 001B                            _recebe_dados_gps 5A7C  
                              response@buff 0019                                    strcat@cp 001D  
                                  strcat@to 0019                                    strcmp@s1 0001  
                                  strcmp@s2 0003                                ?_desliga_SPI 0001  
                          ___lldiv@quotient 0021                             ___lwmod@divisor 001B  
                                  strcpy@cp 001F                                    strlen@cp 001B  
                                  strcpy@to 001B                             ___lwmod@counter 001D  
                         remove_chain@clust 00A0               __size_of_calcula_diff_minutos 00D0  
                 __end_of_config_timer_dois 5E72                                ___aldiv@sign 0022  
                             ?_create_chain 00A0                   __end_of_config_timer_zero 5D74  
                      __end_of_mcp2515_init 43B4                                 ??_stringcpy 0007  
                        _mcp2515_configRate 2770                 __size_ofi2_write_timer_zero 000A  
                               _SSPCON1bits 000FC6                     __size_of_next_dir_entry 0164  
                              ?_MPC2515_SPI 0001                      escreve_cmd_lcd@comando 001B  
 verifica_diferenca_minutos@point_index_lat 001E                         sdc_disk_write@count 002B  
               __size_of_verifica_recep_gps 0024               sdc_disk_initialize@crc_number 0065  
                   __end_of_dados_gps_to_sd 534A            __size_of_mcp2515_setCANCTRL_Mode 002C  
                       ?_mcp2515_configRate 001C                          sdc_disk_write@buff 0067  
              __size_of_sdc_disk_initialize 0300                                f_write@clust 00C8  
                            ??_desliga_uart 0019                          leitura_sdcard@size 00FD  
                              f_write@wbuff 00C1                                ?_get_fattime 001D  
                          _reserve_direntry 1E50                     disparo_gravacao@fix_gps 00F2  
                               f_write@buff 00B0                           sdc_disk_write@res 0064  
                              ?_get_cluster 0088                                 f_write@sect 00C2  
                               f_write@wcnt 00CA                                ?_disk_status 0001  
             __end_ofmensagem_inicial@F3670 6107               __end_ofmensagem_inicial@F3672 60F6  
                           escreve_SPI@dado 001A                     __size_of_MCP2515_RECEBE 004E  
