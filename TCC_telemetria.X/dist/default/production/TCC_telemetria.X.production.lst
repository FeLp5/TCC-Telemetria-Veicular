

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Wed May 11 15:01:37 2022

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=3
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=3
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=3
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=3
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=3
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=2
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=3
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=3
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=2
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=2
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=2
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1,group=3
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   129                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   130                           	psect	text110,global,reloc=2,class=CODE,delta=1
   131                           	psect	text111,global,reloc=2,class=CODE,delta=1
   132                           	psect	text112,global,reloc=2,class=CODE,delta=1
   133                           	psect	text113,global,reloc=2,class=CODE,delta=1
   134                           	psect	text114,global,reloc=2,class=CODE,delta=1,group=3
   135                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1,group=3
   137                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   138                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   139                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   140                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   141  0000                     
   142                           ; Version 2.30
   143                           ; Generated 26/08/2020 GMT
   144                           ; 
   145                           ; Copyright © 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   146                           ; All rights reserved.
   147                           ; 
   148                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   149                           ; 
   150                           ; Redistribution and use in source and binary forms, with or without modification, are
   151                           ; permitted provided that the following conditions are met:
   152                           ; 
   153                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   154                           ;        conditions and the following disclaimer.
   155                           ; 
   156                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   157                           ;        of conditions and the following disclaimer in the documentation and/or other
   158                           ;        materials provided with the distribution. Publication is not required when
   159                           ;        this file is used in an embedded application.
   160                           ; 
   161                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   162                           ;        software without specific prior written permission.
   163                           ; 
   164                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   165                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   166                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   167                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   168                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   169                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   170                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   171                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   172                           ; 
   173                           ; 
   174                           ; Code-generator required, PIC18F4550 Definitions
   175                           ; 
   176                           ; SFR Addresses
   177  0000                     
   178 ;; Function _Speed is unused but had its address taken
   179  0000                     
   180                           	psect	idataCOMRAM
   181  0054BC                     __pidataCOMRAM:
   182                           	callstack 0
   183                           
   184                           ;initializer for leitura_sdcard@size
   185  0054BC  58                 	db	88
   186                           
   187                           	psect	idataBANK1
   188  005420                     __pidataBANK1:
   189                           	callstack 0
   190                           
   191                           ;initializer for escreve_inteiro_uart@F3215
   192  005420  30                 	db	48
   193  005421  30                 	db	48
   194  005422  30                 	db	48
   195  005423  30                 	db	48
   196  005424  30                 	db	48
   197  005425  30                 	db	48
   198  005426  00                 	db	0
   199                           
   200                           ;initializer for escreve_inteiro_lcd@F3223
   201  005427  30                 	db	48
   202  005428  30                 	db	48
   203  005429  30                 	db	48
   204  00542A  30                 	db	48
   205  00542B  30                 	db	48
   206  00542C  30                 	db	48
   207  00542D  00                 	db	0
   208                           
   209                           	psect	mediumconst
   210  0060DA                     __pmediumconst:
   211                           	callstack 0
   212  0060DA  00                 	db	0
   213  0060DB                     mensagem_inicial@F3656:
   214                           	callstack 0
   215  0060DB  54                 	db	84
   216  0060DC  43                 	db	67
   217  0060DD  43                 	db	67
   218  0060DE  2D                 	db	45
   219  0060DF  2D                 	db	45
   220  0060E0  54                 	db	84
   221  0060E1  45                 	db	69
   222  0060E2  4C                 	db	76
   223  0060E3  45                 	db	69
   224  0060E4  4D                 	db	77
   225  0060E5  54                 	db	84
   226  0060E6  52                 	db	82
   227  0060E7  49                 	db	73
   228  0060E8  41                 	db	65
   229  0060E9  00                 	db	0
   230  0060EA  00                 	db	0
   231  0060EB  00                 	db	0
   232  0060EC                     __end_ofmensagem_inicial@F3656:
   233                           	callstack 0
   234  0060EC                     mensagem_inicial@F3654:
   235                           	callstack 0
   236  0060EC  46                 	db	70
   237  0060ED  41                 	db	65
   238  0060EE  54                 	db	84
   239  0060EF  45                 	db	69
   240  0060F0  43                 	db	67
   241  0060F1  20                 	db	32
   242  0060F2  53                 	db	83
   243  0060F3  54                 	db	84
   244  0060F4  20                 	db	32
   245  0060F5  41                 	db	65
   246  0060F6  4E                 	db	78
   247  0060F7  44                 	db	68
   248  0060F8  52                 	db	82
   249  0060F9  45                 	db	69
   250  0060FA  00                 	db	0
   251  0060FB  00                 	db	0
   252  0060FC  00                 	db	0
   253  0060FD                     __end_ofmensagem_inicial@F3654:
   254                           	callstack 0
   255  0060FD                     _fence_diff_long:
   256                           	callstack 0
   257  0060FD  2D                 	db	45
   258  0060FE  30                 	db	48
   259  0060FF  34                 	db	52
   260  006100  36                 	db	54
   261  006101  33                 	db	51
   262  006102  30                 	db	48
   263  006103  35                 	db	53
   264  006104  32                 	db	50
   265  006105  31                 	db	49
   266  006106  30                 	db	48
   267  006107  31                 	db	49
   268  006108  2D                 	db	45
   269  006109  30                 	db	48
   270  00610A  34                 	db	52
   271  00610B  35                 	db	53
   272  00610C  33                 	db	51
   273  00610D  30                 	db	48
   274  00610E  30                 	db	48
   275  00610F  38                 	db	56
   276  006110  34                 	db	52
   277  006111  32                 	db	50
   278  006112  34                 	db	52
   279  006113  2D                 	db	45
   280  006114  30                 	db	48
   281  006115  34                 	db	52
   282  006116  35                 	db	53
   283  006117  33                 	db	51
   284  006118  30                 	db	48
   285  006119  30                 	db	48
   286  00611A  38                 	db	56
   287  00611B  34                 	db	52
   288  00611C  32                 	db	50
   289  00611D  34                 	db	52
   290  00611E  2D                 	db	45
   291  00611F  30                 	db	48
   292  006120  34                 	db	52
   293  006121  36                 	db	54
   294  006122  33                 	db	51
   295  006123  30                 	db	48
   296  006124  35                 	db	53
   297  006125  32                 	db	50
   298  006126  31                 	db	49
   299  006127  30                 	db	48
   300  006128  31                 	db	49
   301  006129                     __end_of_fence_diff_long:
   302                           	callstack 0
   303  006129                     _fence_diff_lat:
   304                           	callstack 0
   305  006129  2D                 	db	45
   306  00612A  32                 	db	50
   307  00612B  33                 	db	51
   308  00612C  34                 	db	52
   309  00612D  31                 	db	49
   310  00612E  35                 	db	53
   311  00612F  38                 	db	56
   312  006130  39                 	db	57
   313  006131  36                 	db	54
   314  006132  31                 	db	49
   315  006133  2D                 	db	45
   316  006134  32                 	db	50
   317  006135  33                 	db	51
   318  006136  34                 	db	52
   319  006137  31                 	db	49
   320  006138  35                 	db	53
   321  006139  38                 	db	56
   322  00613A  39                 	db	57
   323  00613B  36                 	db	54
   324  00613C  31                 	db	49
   325  00613D  2D                 	db	45
   326  00613E  32                 	db	50
   327  00613F  33                 	db	51
   328  006140  34                 	db	52
   329  006141  32                 	db	50
   330  006142  30                 	db	48
   331  006143  30                 	db	48
   332  006144  31                 	db	49
   333  006145  37                 	db	55
   334  006146  39                 	db	57
   335  006147  2D                 	db	45
   336  006148  32                 	db	50
   337  006149  33                 	db	51
   338  00614A  34                 	db	52
   339  00614B  32                 	db	50
   340  00614C  30                 	db	48
   341  00614D  30                 	db	48
   342  00614E  31                 	db	49
   343  00614F  37                 	db	55
   344  006150  39                 	db	57
   345  006151                     __end_of_fence_diff_lat:
   346                           	callstack 0
   347  0000                     _TMR0	set	4054
   348  0000                     _PORTEbits	set	3972
   349  0000                     _PCL	set	4089
   350  0000                     _PCLATH	set	4090
   351  0000                     _PIE1bits	set	3997
   352  0000                     _RCSTA	set	4011
   353  0000                     _TXSTA	set	4012
   354  0000                     _RCREG	set	4014
   355  0000                     _RCSTAbits	set	4011
   356  0000                     _SPBRG	set	4015
   357  0000                     _PIR1bits	set	3998
   358  0000                     _SSPBUF	set	4041
   359  0000                     _SSPCON1bits	set	4038
   360  0000                     _SSPSTATbits	set	4039
   361  0000                     _SSPCON1	set	4038
   362  0000                     _SSPSTAT	set	4039
   363  0000                     _TRISCbits	set	3988
   364  0000                     _TRISBbits	set	3987
   365  0000                     _PORTBbits	set	3969
   366  0000                     _PR2	set	4043
   367  0000                     _TMR2	set	4044
   368  0000                     _T2CON	set	4042
   369  0000                     _OSCCONbits	set	4051
   370  0000                     _TRISE	set	3990
   371  0000                     _TRISC	set	3988
   372  0000                     _TRISA	set	3986
   373  0000                     _TRISD	set	3989
   374  0000                     _LATB	set	3978
   375  0000                     _TRISB	set	3987
   376  0000                     _ADCON1	set	4033
   377  0000                     _T0CONbits	set	4053
   378  0000                     _INTCONbits	set	4082
   379  0000                     _PIE1	set	3997
   380  0000                     _INTCON3	set	4080
   381  0000                     _INTCON2	set	4081
   382  0000                     _INTCON	set	4082
   383  0000                     _SPPCFG	set	3939
   384  0000                     _SPPCON	set	3941
   385  0000                     _T0CON	set	4053
   386  0000                     _PORTDbits	set	3971
   387  0000                     _TRISDbits	set	3989
   388  0000                     _LATBbits	set	3978
   389  0000                     _LATCbits	set	3979
   390  0000                     _INT0IE	set	32660
   391  0000                     _INT0IF	set	32657
   392  0000                     _T0IF	set	32658
   393  0000                     _TMR0IF	set	32658
   394  0000                     _RCIF	set	31989
   395  0000                     _TXEN	set	32101
   396  0000                     _CREN	set	32092
   397  0000                     _SPEN	set	32095
   398  0000                     _SYNC	set	32100
   399  0000                     _BRGH	set	32098
   400  006151                     STR_17:
   401  006151  76                 	db	118	;'v'
   402  006152  25                 	db	37
   403  006153  73                 	db	115	;'s'
   404  006154  3B                 	db	59	;';'
   405  006155  6C                 	db	108	;'l'
   406  006156  74                 	db	116	;'t'
   407  006157  25                 	db	37
   408  006158  6C                 	db	108	;'l'
   409  006159  64                 	db	100	;'d'
   410  00615A  3B                 	db	59	;';'
   411  00615B  6C                 	db	108	;'l'
   412  00615C  6F                 	db	111	;'o'
   413  00615D  25                 	db	37
   414  00615E  73                 	db	115	;'s'
   415  00615F  3B                 	db	59	;';'
   416  006160  72                 	db	114	;'r'
   417  006161  25                 	db	37
   418  006162  73                 	db	115	;'s'
   419  006163  3B                 	db	59	;';'
   420  006164  63                 	db	99	;'c'
   421  006165  25                 	db	37
   422  006166  73                 	db	115	;'s'
   423  006167  3B                 	db	59	;';'
   424  006168  6B                 	db	107	;'k'
   425  006169  25                 	db	37
   426  00616A  73                 	db	115	;'s'
   427  00616B  3B                 	db	59	;';'
   428  00616C  68                 	db	104	;'h'
   429  00616D  25                 	db	37
   430  00616E  73                 	db	115	;'s'
   431  00616F  3B                 	db	59	;';'
   432  006170  64                 	db	100	;'d'
   433  006171  25                 	db	37
   434  006172  73                 	db	115	;'s'
   435  006173  3B                 	db	59	;';'
   436  006174  66                 	db	102	;'f'
   437  006175  25                 	db	37
   438  006176  73                 	db	115	;'s'
   439  006177  0A                 	db	10
   440  006178  00                 	db	0
   441  006179  6F                 	db	111	;'o'
   442  00617A  20                 	db	32
   443  00617B  53                 	db	83	;'S'
   444  00617C  69                 	db	105	;'i'
   445  00617D  73                 	db	115	;'s'
   446  00617E  74                 	db	116	;'t'
   447  00617F  65                 	db	101	;'e'
   448  006180  6D                 	db	109	;'m'
   449  006181  61                 	db	97	;'a'
   450  006182  20                 	db	32
   451  006183  64                 	db	100	;'d'
   452  006184  65                 	db	101	;'e'
   453  006185  20                 	db	32
   454  006186  61                 	db	97	;'a'
   455  006187  72                 	db	114	;'r'
   456  006188  71                 	db	113	;'q'
   457  006189  75                 	db	117	;'u'
   458  00618A  69                 	db	105	;'i'
   459  00618B  76                 	db	118	;'v'
   460  00618C  6F                 	db	111	;'o'
   461  00618D  00                 	db	0
   462  00618E                     STR_2:
   463  00618E  49                 	db	73	;'I'
   464  00618F  6E                 	db	110	;'n'
   465  006190  73                 	db	115	;'s'
   466  006191  69                 	db	105	;'i'
   467  006192  72                 	db	114	;'r'
   468  006193  61                 	db	97	;'a'
   469  006194  20                 	db	32
   470  006195  6F                 	db	111	;'o'
   471  006196  20                 	db	32
   472  006197  43                 	db	67	;'C'
   473  006198  61                 	db	97	;'a'
   474  006199  72                 	db	114	;'r'
   475  00619A  74                 	db	116	;'t'
   476  00619B  61                 	db	97	;'a'
   477  00619C  6F                 	db	111	;'o'
   478  00619D  00                 	db	0
   479  00619E  45                 	db	69	;'E'
   480  00619F  72                 	db	114	;'r'
   481  0061A0  72                 	db	114	;'r'
   482  0061A1  6F                 	db	111	;'o'
   483  0061A2  20                 	db	32
   484  0061A3  61                 	db	97	;'a'
   485  0061A4  6F                 	db	111	;'o'
   486  0061A5  20                 	db	32
   487  0061A6  6D                 	db	109	;'m'
   488  0061A7  6F                 	db	111	;'o'
   489  0061A8  6E                 	db	110	;'n'
   490  0061A9  74                 	db	116	;'t'
   491  0061AA  61                 	db	97	;'a'
   492  0061AB  72                 	db	114	;'r'
   493  0061AC  00                 	db	0
   494  0061AD  45                 	db	69	;'E'
   495  0061AE  72                 	db	114	;'r'
   496  0061AF  72                 	db	114	;'r'
   497  0061B0  6F                 	db	111	;'o'
   498  0061B1  20                 	db	32
   499  0061B2  61                 	db	97	;'a'
   500  0061B3  6F                 	db	111	;'o'
   501  0061B4  20                 	db	32
   502  0061B5  63                 	db	99	;'c'
   503  0061B6  72                 	db	114	;'r'
   504  0061B7  69                 	db	105	;'i'
   505  0061B8  61                 	db	97	;'a'
   506  0061B9  72                 	db	114	;'r'
   507  0061BA  00                 	db	0
   508  0061BB  65                 	db	101	;'e'
   509  0061BC  78                 	db	120	;'x'
   510  0061BD  74                 	db	116	;'t'
   511  0061BE  66                 	db	102	;'f'
   512  0061BF  65                 	db	101	;'e'
   513  0061C0  6E                 	db	110	;'n'
   514  0061C1  63                 	db	99	;'c'
   515  0061C2  65                 	db	101	;'e'
   516  0061C3  2E                 	db	46
   517  0061C4  74                 	db	116	;'t'
   518  0061C5  78                 	db	120	;'x'
   519  0061C6  74                 	db	116	;'t'
   520  0061C7  00                 	db	0
   521  0061C8                     STR_8:
   522  0061C8  2D                 	db	45
   523  0061C9  30                 	db	48	;'0'
   524  0061CA  34                 	db	52	;'4'
   525  0061CB  36                 	db	54	;'6'
   526  0061CC  33                 	db	51	;'3'
   527  0061CD  30                 	db	48	;'0'
   528  0061CE  2E                 	db	46
   529  0061CF  32                 	db	50	;'2'
   530  0061D0  34                 	db	52	;'4'
   531  0061D1  35                 	db	53	;'5'
   532  0061D2  38                 	db	56	;'8'
   533  0061D3  30                 	db	48	;'0'
   534  0061D4  00                 	db	0
   535  0061D5                     STR_7:
   536  0061D5  2D                 	db	45
   537  0061D6  32                 	db	50	;'2'
   538  0061D7  33                 	db	51	;'3'
   539  0061D8  34                 	db	52	;'4'
   540  0061D9  32                 	db	50	;'2'
   541  0061DA  2E                 	db	46
   542  0061DB  30                 	db	48	;'0'
   543  0061DC  31                 	db	49	;'1'
   544  0061DD  36                 	db	54	;'6'
   545  0061DE  37                 	db	55	;'7'
   546  0061DF  33                 	db	51	;'3'
   547  0061E0  00                 	db	0
   548  0061E1                     STR_25:
   549  0061E1  41                 	db	65	;'A'
   550  0061E2  47                 	db	71	;'G'
   551  0061E3  55                 	db	85	;'U'
   552  0061E4  41                 	db	65	;'A'
   553  0061E5  52                 	db	82	;'R'
   554  0061E6  44                 	db	68	;'D'
   555  0061E7  45                 	db	69	;'E'
   556  0061E8  2E                 	db	46
   557  0061E9  2E                 	db	46
   558  0061EA  2E                 	db	46
   559  0061EB  00                 	db	0
   560  0061EC                     STR_4:
   561  0061EC  4D                 	db	77	;'M'
   562  0061ED  4D                 	db	77	;'M'
   563  0061EE  43                 	db	67	;'C'
   564  0061EF  20                 	db	32
   565  0061F0  56                 	db	86	;'V'
   566  0061F1  65                 	db	101	;'e'
   567  0061F2  72                 	db	114	;'r'
   568  0061F3  2E                 	db	46
   569  0061F4  20                 	db	32
   570  0061F5  33                 	db	51	;'3'
   571  0061F6  00                 	db	0
   572  0061F7                     STR_1:
   573  0061F7  53                 	db	83	;'S'
   574  0061F8  65                 	db	101	;'e'
   575  0061F9  6D                 	db	109	;'m'
   576  0061FA  20                 	db	32
   577  0061FB  43                 	db	67	;'C'
   578  0061FC  61                 	db	97	;'a'
   579  0061FD  72                 	db	114	;'r'
   580  0061FE  74                 	db	116	;'t'
   581  0061FF  61                 	db	97	;'a'
   582  006200  6F                 	db	111	;'o'
   583  006201  00                 	db	0
   584  006202  56                 	db	86	;'V'
   585  006203  65                 	db	101	;'e'
   586  006204  72                 	db	114	;'r'
   587  006205  69                 	db	105	;'i'
   588  006206  66                 	db	102	;'f'
   589  006207  69                 	db	105	;'i'
   590  006208  71                 	db	113	;'q'
   591  006209  75                 	db	117	;'u'
   592  00620A  65                 	db	101	;'e'
   593  00620B  00                 	db	0
   594  00620C  6F                 	db	111	;'o'
   595  00620D  20                 	db	32
   596  00620E  61                 	db	97	;'a'
   597  00620F  72                 	db	114	;'r'
   598  006210  71                 	db	113	;'q'
   599  006211  75                 	db	117	;'u'
   600  006212  69                 	db	105	;'i'
   601  006213  76                 	db	118	;'v'
   602  006214  6F                 	db	111	;'o'
   603  006215  00                 	db	0
   604  006216                     STR_3:
   605  006216  53                 	db	83	;'S'
   606  006217  44                 	db	68	;'D'
   607  006218  20                 	db	32
   608  006219  56                 	db	86	;'V'
   609  00621A  45                 	db	69	;'E'
   610  00621B  52                 	db	82	;'R'
   611  00621C  2E                 	db	46
   612  00621D  20                 	db	32
   613  00621E  31                 	db	49	;'1'
   614  00621F  00                 	db	0
   615  006220                     STR_35:
   616  006220  42                 	db	66	;'B'
   617  006221  31                 	db	49	;'1'
   618  006222  3A                 	db	58	;':'
   619  006223  46                 	db	70	;'F'
   620  006224  45                 	db	69	;'E'
   621  006225  4E                 	db	78	;'N'
   622  006226  43                 	db	67	;'C'
   623  006227  45                 	db	69	;'E'
   624  006228  00                 	db	0
   625  006229  6F                 	db	111	;'o'
   626  00622A  20                 	db	32
   627  00622B  63                 	db	99	;'c'
   628  00622C  61                 	db	97	;'a'
   629  00622D  72                 	db	114	;'r'
   630  00622E  74                 	db	116	;'t'
   631  00622F  61                 	db	97	;'a'
   632  006230  6F                 	db	111	;'o'
   633  006231  00                 	db	0
   634  006232                     STR_36:
   635  006232  42                 	db	66	;'B'
   636  006233  32                 	db	50	;'2'
   637  006234  3A                 	db	58	;':'
   638  006235  4C                 	db	76	;'L'
   639  006236  54                 	db	84	;'T'
   640  006237  4C                 	db	76	;'L'
   641  006238  4F                 	db	79	;'O'
   642  006239  00                 	db	0
   643  00623A                     STR_28:
   644  00623A  46                 	db	70	;'F'
   645  00623B  45                 	db	69	;'E'
   646  00623C  4E                 	db	78	;'N'
   647  00623D  43                 	db	67	;'C'
   648  00623E  45                 	db	69	;'E'
   649  00623F  3A                 	db	58	;':'
   650  006240  00                 	db	0
   651  006241                     STR_27:
   652  006241  44                 	db	68	;'D'
   653  006242  45                 	db	69	;'E'
   654  006243  4E                 	db	78	;'N'
   655  006244  54                 	db	84	;'T'
   656  006245  52                 	db	82	;'R'
   657  006246  4F                 	db	79	;'O'
   658  006247  00                 	db	0
   659  006248                     STR_15:
   660  006248  74                 	db	116	;'t'
   661  006249  65                 	db	101	;'e'
   662  00624A  73                 	db	115	;'s'
   663  00624B  74                 	db	116	;'t'
   664  00624C  65                 	db	101	;'e'
   665  00624D  00                 	db	0
   666  00624E                     STR_6:
   667  00624E  47                 	db	71	;'G'
   668  00624F  50                 	db	80	;'P'
   669  006250  47                 	db	71	;'G'
   670  006251  47                 	db	71	;'G'
   671  006252  41                 	db	65	;'A'
   672  006253  00                 	db	0
   673  006254                     STR_5:
   674  006254  47                 	db	71	;'G'
   675  006255  50                 	db	80	;'P'
   676  006256  52                 	db	82	;'R'
   677  006257  4D                 	db	77	;'M'
   678  006258  43                 	db	67	;'C'
   679  006259  00                 	db	0
   680  00625A                     STR_32:
   681  00625A  46                 	db	70	;'F'
   682  00625B  49                 	db	73	;'I'
   683  00625C  58                 	db	88	;'X'
   684  00625D  3A                 	db	58	;':'
   685  00625E  00                 	db	0
   686  00625F                     STR_26:
   687  00625F  46                 	db	70	;'F'
   688  006260  4F                 	db	79	;'O'
   689  006261  52                 	db	82	;'R'
   690  006262  41                 	db	65	;'A'
   691  006263  00                 	db	0
   692  006264                     STR_16:
   693  006264  2E                 	db	46
   694  006265  74                 	db	116	;'t'
   695  006266  6C                 	db	108	;'l'
   696  006267  6D                 	db	109	;'m'
   697  006268  00                 	db	0
   698  006269                     STR_34:
   699  006269  6C                 	db	108	;'l'
   700  00626A  6F                 	db	111	;'o'
   701  00626B  3A                 	db	58	;':'
   702  00626C  00                 	db	0
   703  00626D                     STR_33:
   704  00626D  6C                 	db	108	;'l'
   705  00626E  74                 	db	116	;'t'
   706  00626F  3A                 	db	58	;':'
   707  006270  00                 	db	0
   708  006271                     STR_23:
   709  006271  46                 	db	70	;'F'
   710  006272  41                 	db	65	;'A'
   711  006273  54                 	db	84	;'T'
   712  006274  00                 	db	0
   713  006275                     STR_21:
   714  006275  4E                 	db	78	;'N'
   715  006276  2F                 	db	47
   716  006277  41                 	db	65	;'A'
   717  006278  00                 	db	0
   718  006279  0D                 	db	13
   719  00627A  0A                 	db	10
   720  00627B  00                 	db	0
   721  00627C                     STR_31:
   722  00627C  7C                 	db	124
   723  00627D  00                 	db	0
   724  00627E  00                 	db	0	; dummy byte at the end
   725  0000                     
   726                           ; #config settings
   727                           
   728                           	psect	cinit
   729  00449E                     __pcinit:
   730                           	callstack 0
   731  00449E                     start_initialization:
   732                           	callstack 0
   733  00449E                     __initialization:
   734                           	callstack 0
   735                           
   736                           ; Initialize objects allocated to BANK1 (14 bytes)
   737                           ; load TBLPTR registers with __pidataBANK1
   738  00449E  0E20               	movlw	low __pidataBANK1
   739  0044A0  6EF6               	movwf	tblptrl,c
   740  0044A2  0E54               	movlw	high __pidataBANK1
   741  0044A4  6EF7               	movwf	tblptrh,c
   742  0044A6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   743  0044A8  6EF8               	movwf	tblptru,c
   744  0044AA  EE01  F0D9         	lfsr	0,__pdataBANK1
   745  0044AE  EE10 F00E          	lfsr	1,14
   746  0044B2                     copy_data0:
   747  0044B2  0009               	tblrd		*+
   748  0044B4  CFF5 FFEE          	movff	tablat,postinc0
   749  0044B8  50E5               	movf	postdec1,w,c
   750  0044BA  50E1               	movf	fsr1l,w,c
   751  0044BC  E1FA               	bnz	copy_data0
   752                           
   753                           ; Initialize objects allocated to COMRAM (1 bytes)
   754                           ; load TBLPTR registers with __pidataCOMRAM
   755  0044BE  0EBC               	movlw	low __pidataCOMRAM
   756  0044C0  6EF6               	movwf	tblptrl,c
   757  0044C2  0E54               	movlw	high __pidataCOMRAM
   758  0044C4  6EF7               	movwf	tblptrh,c
   759  0044C6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   760  0044C8  6EF8               	movwf	tblptru,c
   761  0044CA  0009               	tblrd		*+	;fetch initializer
   762  0044CC  CFF5 F046          	movff	tablat,__pdataCOMRAM
   763                           
   764                           ; Clear objects allocated to BIGRAM (544 bytes)
   765  0044D0  EE02  F060         	lfsr	0,__pbssBIGRAM
   766  0044D4  EE12 F020          	lfsr	1,544
   767  0044D8                     clear_0:
   768  0044D8  6AEE               	clrf	postinc0,c
   769  0044DA  50E5               	movf	postdec1,w,c
   770  0044DC  50E1               	movf	fsr1l,w,c
   771  0044DE  E1FC               	bnz	clear_0
   772  0044E0  50E2               	movf	fsr1h,w,c
   773  0044E2  E1FA               	bnz	clear_0
   774                           
   775                           ; Clear objects allocated to BANK2 (62 bytes)
   776  0044E4  EE02  F000         	lfsr	0,__pbssBANK2
   777  0044E8  0E3E               	movlw	62
   778  0044EA                     clear_1:
   779  0044EA  6AEE               	clrf	postinc0,c
   780  0044EC  06E8               	decf	wreg,f,c
   781  0044EE  E1FD               	bnz	clear_1
   782                           
   783                           ; Clear objects allocated to BANK1 (217 bytes)
   784  0044F0  EE01  F000         	lfsr	0,__pbssBANK1
   785  0044F4  0ED9               	movlw	217
   786  0044F6                     clear_2:
   787  0044F6  6AEE               	clrf	postinc0,c
   788  0044F8  06E8               	decf	wreg,f,c
   789  0044FA  E1FD               	bnz	clear_2
   790                           
   791                           ; Clear objects allocated to BANK0 (6 bytes)
   792  0044FC  0100               	movlb	0
   793  0044FE  6BFD               	clrf	(__pbssBANK0+5)& (0+255),b
   794  004500  6BFC               	clrf	(__pbssBANK0+4)& (0+255),b
   795  004502  6BFB               	clrf	(__pbssBANK0+3)& (0+255),b
   796  004504  6BFA               	clrf	(__pbssBANK0+2)& (0+255),b
   797  004506  6BF9               	clrf	(__pbssBANK0+1)& (0+255),b
   798  004508  6BF8               	clrf	__pbssBANK0& (0+255),b
   799                           
   800                           ; Clear objects allocated to COMRAM (20 bytes)
   801  00450A  EE00  F032         	lfsr	0,__pbssCOMRAM
   802  00450E  0E14               	movlw	20
   803  004510                     clear_3:
   804  004510  6AEE               	clrf	postinc0,c
   805  004512  06E8               	decf	wreg,f,c
   806  004514  E1FD               	bnz	clear_3
   807  004516                     end_of_initialization:
   808                           	callstack 0
   809  004516                     __end_of__initialization:
   810                           	callstack 0
   811  004516  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   812  004518  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   813  00451A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   814  00451C  6EF8               	movwf	tblptru,c
   815  00451E  0100               	movlb	0
   816  004520  EF9C  F028         	goto	_main	;jump to C main() function
   817                           
   818                           	psect	bssCOMRAM
   819  000032                     __pbssCOMRAM:
   820                           	callstack 0
   821  000032                     _temp_buff_long:
   822                           	callstack 0
   823  000032                     	ds	2
   824  000034                     _temp_buff_lat:
   825                           	callstack 0
   826  000034                     	ds	2
   827  000036                     _time_atualizacao:
   828                           	callstack 0
   829  000036                     	ds	2
   830  000038                     _FatFs:
   831                           	callstack 0
   832  000038                     	ds	2
   833  00003A                     troca_de_tela@last_state:
   834                           	callstack 0
   835  00003A                     	ds	1
   836  00003B                     troca_de_tela@state:
   837                           	callstack 0
   838  00003B                     	ds	1
   839  00003C                     _tarefa_em_execucao:
   840                           	callstack 0
   841  00003C                     	ds	1
   842  00003D                     _sinaliza_int_timer:
   843                           	callstack 0
   844  00003D                     	ds	1
   845  00003E                     _data_uart_recebe:
   846                           	callstack 0
   847  00003E                     	ds	1
   848  00003F                     _sinaliza_mcp2515:
   849                           	callstack 0
   850  00003F                     	ds	1
   851  000040                     escrita_sdcard@f_fix:
   852                           	callstack 0
   853  000040                     	ds	1
   854  000041                     _data_hoje:
   855                           	callstack 0
   856  000041                     	ds	1
   857  000042                     	ds	1
   858  000043                     _Term:
   859                           	callstack 0
   860  000043                     	ds	1
   861  000044                     _SentenceType:
   862                           	callstack 0
   863  000044                     	ds	1
   864  000045                     _char_number:
   865                           	callstack 0
   866  000045                     	ds	1
   867                           
   868                           	psect	dataCOMRAM
   869  000046                     __pdataCOMRAM:
   870                           	callstack 0
   871  000046                     	ds	1
   872                           
   873                           	psect	bssBANK0
   874  0000F8                     __pbssBANK0:
   875                           	callstack 0
   876  0000F8                     _point_buff_gps_lat:
   877                           	callstack 0
   878  0000F8                     	ds	2
   879  0000FA                     _time_sd:
   880                           	callstack 0
   881  0000FA                     	ds	2
   882  0000FC                     _flag_anomalia:
   883                           	callstack 0
   884  0000FC                     	ds	1
   885  0000FD                     _estado:
   886                           	callstack 0
   887  0000FD                     	ds	1
   888                           
   889                           	psect	bssBANK1
   890  000100                     __pbssBANK1:
   891                           	callstack 0
   892  000100                     _poligono_ext:
   893                           	callstack 0
   894  000100                     	ds	16
   895  000110                     _tempo_tarefa:
   896                           	callstack 0
   897  000110                     	ds	8
   898  000118                     _tempo_backup:
   899                           	callstack 0
   900  000118                     	ds	8
   901  000120                     _p_tarefas:
   902                           	callstack 0
   903  000120                     	ds	8
   904  000128                     _rawAltitude:
   905                           	callstack 0
   906  000128                     	ds	7
   907  00012F                     _rawCourse:
   908                           	callstack 0
   909  00012F                     	ds	6
   910  000135                     _gps_flag:
   911                           	callstack 0
   912  000135                     	ds	6
   913  00013B                     _fence_flag:
   914                           	callstack 0
   915  00013B                     	ds	3
   916  00013E                     _rawSatellites:
   917                           	callstack 0
   918  00013E                     	ds	3
   919  000141                     _point_buff_gps_long:
   920                           	callstack 0
   921  000141                     	ds	2
   922  000143                     _time_recovery:
   923                           	callstack 0
   924  000143                     	ds	2
   925  000145                     _timeout_tarefa:
   926                           	callstack 0
   927  000145                     	ds	2
   928  000147                     _fsid:
   929                           	callstack 0
   930  000147                     	ds	2
   931  000149                     _GPGGA_ok:
   932                           	callstack 0
   933  000149                     	ds	2
   934  00014B                     _GPRMC_ok:
   935                           	callstack 0
   936  00014B                     	ds	2
   937  00014D                     _data_buff:
   938                           	callstack 0
   939  00014D                     	ds	2
   940  00014F                     _fil:
   941                           	callstack 0
   942  00014F                     	ds	28
   943  00016B                     _dado_arquivo:
   944                           	callstack 0
   945  00016B                     	ds	20
   946  00017F                     _filename:
   947                           	callstack 0
   948  00017F                     	ds	20
   949  000193                     _rawLongitude:
   950                           	callstack 0
   951  000193                     	ds	13
   952  0001A0                     _rawLatitude:
   953                           	callstack 0
   954  0001A0                     	ds	13
   955  0001AD                     _buffer:
   956                           	callstack 0
   957  0001AD                     	ds	12
   958  0001B9                     _rawTime:
   959                           	callstack 0
   960  0001B9                     	ds	11
   961  0001C4                     _rawDate:
   962                           	callstack 0
   963  0001C4                     	ds	7
   964  0001CB                     _rawSpeed:
   965                           	callstack 0
   966  0001CB                     	ds	6
   967  0001D1                     _sentence:
   968                           	callstack 0
   969  0001D1                     	ds	6
   970  0001D7                     _rawFix:
   971                           	callstack 0
   972  0001D7                     	ds	2
   973                           
   974                           	psect	dataBANK1
   975  0001D9                     __pdataBANK1:
   976                           	callstack 0
   977  0001D9                     	ds	7
   978  0001E0                     escreve_inteiro_lcd@F3223:
   979                           	callstack 0
   980  0001E0                     	ds	7
   981                           
   982                           	psect	bssBANK2
   983  000200                     __pbssBANK2:
   984                           	callstack 0
   985  000200                     _string_dado:
   986                           	callstack 0
   987  000200                     	ds	62
   988                           
   989                           	psect	bssBIGRAM
   990  000260                     __pbssBIGRAM:
   991                           	callstack 0
   992  000260                     _fs:
   993                           	callstack 0
   994  000260                     	ds	544
   995                           
   996                           	psect	cstackBANK2
   997  00023E                     __pcstackBANK2:
   998                           	callstack 0
   999  00023E                     fprintf@s:
  1000                           	callstack 0
  1001                           
  1002                           ; 16 bytes @ 0x0
  1003  00023E                     	ds	16
  1004  00024E                     fprintf@res:
  1005                           	callstack 0
  1006                           
  1007                           ; 2 bytes @ 0x10
  1008  00024E                     	ds	2
  1009  000250                     _fprintf$2154:
  1010                           	callstack 0
  1011                           
  1012                           ; 2 bytes @ 0x12
  1013  000250                     	ds	2
  1014  000252                     fprintf@w:
  1015                           	callstack 0
  1016                           
  1017                           ; 2 bytes @ 0x14
  1018  000252                     	ds	2
  1019  000254                     fprintf@f:
  1020                           	callstack 0
  1021                           
  1022                           ; 1 bytes @ 0x16
  1023  000254                     	ds	1
  1024  000255                     fprintf@r:
  1025                           	callstack 0
  1026                           
  1027                           ; 1 bytes @ 0x17
  1028  000255                     	ds	1
  1029  000256                     fprintf@val:
  1030                           	callstack 0
  1031                           
  1032                           ; 4 bytes @ 0x18
  1033  000256                     	ds	4
  1034  00025A                     fprintf@arp:
  1035                           	callstack 0
  1036                           
  1037                           ; 1 bytes @ 0x1C
  1038  00025A                     	ds	1
  1039  00025B                     fprintf@cc:
  1040                           	callstack 0
  1041                           
  1042                           ; 2 bytes @ 0x1D
  1043  00025B                     	ds	2
  1044  00025D                     fprintf@i:
  1045                           	callstack 0
  1046                           
  1047                           ; 2 bytes @ 0x1F
  1048  00025D                     	ds	2
  1049  00025F                     fprintf@c:
  1050                           	callstack 0
  1051                           
  1052                           ; 1 bytes @ 0x21
  1053  00025F                     	ds	1
  1054                           
  1055                           	psect	cstackBANK0
  1056  000060                     __pcstackBANK0:
  1057                           	callstack 0
  1058  000060                     ??___ftmul:
  1059  000060                     ??_get_fattime:
  1060  000060                     ??_configura_baudrate_uart:
  1061  000060                     atol@sign:
  1062                           	callstack 0
  1063  000060                     ltoa@buf:
  1064                           	callstack 0
  1065  000060                     mensagem_inicial@msg_linha_um:
  1066                           	callstack 0
  1067                           
  1068                           ; 17 bytes @ 0x0
  1069  000060                     	ds	1
  1070  000061                     sdc_disk_read@start_add:
  1071                           	callstack 0
  1072  000061                     atol@a:
  1073                           	callstack 0
  1074  000061                     ltoa@val:
  1075                           	callstack 0
  1076                           
  1077                           ; 4 bytes @ 0x1
  1078  000061                     	ds	1
  1079  000062                     sdc_disk_initialize@stat:
  1080                           	callstack 0
  1081  000062                     sdc_disk_write@count1:
  1082                           	callstack 0
  1083                           
  1084                           ; 2 bytes @ 0x2
  1085  000062                     	ds	1
  1086  000063                     ___ftmul@exp:
  1087                           	callstack 0
  1088  000063                     sdc_disk_initialize@count1:
  1089                           	callstack 0
  1090                           
  1091                           ; 2 bytes @ 0x3
  1092  000063                     	ds	1
  1093  000064                     sdc_disk_write@res:
  1094                           	callstack 0
  1095  000064                     ___ftmul@f3_as_product:
  1096                           	callstack 0
  1097                           
  1098                           ; 3 bytes @ 0x4
  1099  000064                     	ds	1
  1100  000065                     atol@c:
  1101                           	callstack 0
  1102  000065                     sdc_disk_initialize@crc_number:
  1103                           	callstack 0
  1104  000065                     sdc_disk_read@length:
  1105                           	callstack 0
  1106  000065                     sdc_disk_write@j:
  1107                           	callstack 0
  1108  000065                     ltoa@base:
  1109                           	callstack 0
  1110                           
  1111                           ; 2 bytes @ 0x5
  1112  000065                     	ds	1
  1113  000066                     convert_to_int_point@convert_str:
  1114                           	callstack 0
  1115                           
  1116                           ; 10 bytes @ 0x6
  1117  000066                     	ds	1
  1118  000067                     sdc_disk_initialize@buff_i:
  1119                           	callstack 0
  1120  000067                     sdc_disk_read@buff:
  1121                           	callstack 0
  1122  000067                     sdc_disk_write@buff:
  1123                           	callstack 0
  1124  000067                     ___ftmul@cntr:
  1125                           	callstack 0
  1126                           
  1127                           ; 1 bytes @ 0x7
  1128  000067                     	ds	1
  1129  000068                     sdc_disk_initialize@ocr:
  1130                           	callstack 0
  1131  000068                     ___ftmul@sign:
  1132                           	callstack 0
  1133  000068                     disk_read@buff:
  1134                           	callstack 0
  1135  000068                     disk_write@buff:
  1136                           	callstack 0
  1137  000068                     escreve_inteiro_lcd@valor:
  1138                           	callstack 0
  1139                           
  1140                           ; 4 bytes @ 0x8
  1141  000068                     	ds	1
  1142  000069                     sdc_disk_initialize@count2:
  1143                           	callstack 0
  1144  000069                     ___ftge@ff1:
  1145                           	callstack 0
  1146                           
  1147                           ; 3 bytes @ 0x9
  1148  000069                     	ds	1
  1149  00006A                     disk_read@sector:
  1150                           	callstack 0
  1151  00006A                     disk_write@sector:
  1152                           	callstack 0
  1153                           
  1154                           ; 4 bytes @ 0xA
  1155  00006A                     	ds	1
  1156  00006B                     sdc_disk_initialize@buff:
  1157                           	callstack 0
  1158                           
  1159                           ; 1 bytes @ 0xB
  1160  00006B                     	ds	1
  1161  00006C                     ___ftge@ff2:
  1162                           	callstack 0
  1163  00006C                     escreve_inteiro_lcd@texto:
  1164                           	callstack 0
  1165                           
  1166                           ; 7 bytes @ 0xC
  1167  00006C                     	ds	2
  1168  00006E                     disk_read@count:
  1169                           	callstack 0
  1170  00006E                     disk_write@count:
  1171                           	callstack 0
  1172                           
  1173                           ; 1 bytes @ 0xE
  1174  00006E                     	ds	1
  1175  00006F                     ??___ftge:
  1176  00006F                     disk_read@pdrv:
  1177                           	callstack 0
  1178  00006F                     disk_write@pdrv:
  1179                           	callstack 0
  1180                           
  1181                           ; 1 bytes @ 0xF
  1182  00006F                     	ds	1
  1183  000070                     disk_read@result:
  1184                           	callstack 0
  1185  000070                     disk_write@result:
  1186                           	callstack 0
  1187  000070                     convert_to_int_point@temp_str:
  1188                           	callstack 0
  1189                           
  1190                           ; 12 bytes @ 0x10
  1191  000070                     	ds	1
  1192  000071                     mensagem_inicial@msg_dois:
  1193                           	callstack 0
  1194                           
  1195                           ; 17 bytes @ 0x11
  1196  000071                     	ds	1
  1197  000072                     disk_read@res:
  1198                           	callstack 0
  1199  000072                     disk_write@res:
  1200                           	callstack 0
  1201                           
  1202                           ; 1 bytes @ 0x12
  1203  000072                     	ds	1
  1204  000073                     ??_troca_de_tela:
  1205  000073                     move_window@sector:
  1206                           	callstack 0
  1207  000073                     check_fs@sect:
  1208                           	callstack 0
  1209                           
  1210                           ; 4 bytes @ 0x13
  1211  000073                     	ds	4
  1212  000077                     ??_move_window:
  1213  000077                     
  1214                           ; 1 bytes @ 0x17
  1215  000077                     	ds	2
  1216  000079                     check_fs@fs:
  1217                           	callstack 0
  1218                           
  1219                           ; 2 bytes @ 0x19
  1220  000079                     	ds	2
  1221  00007B                     auto_mount@path:
  1222                           	callstack 0
  1223                           
  1224                           ; 1 bytes @ 0x1B
  1225  00007B                     	ds	1
  1226  00007C                     auto_mount@chk_wp:
  1227                           	callstack 0
  1228  00007C                     convert_to_int_point@j:
  1229                           	callstack 0
  1230                           
  1231                           ; 2 bytes @ 0x1C
  1232  00007C                     	ds	1
  1233  00007D                     ??_auto_mount:
  1234                           
  1235                           ; 1 bytes @ 0x1D
  1236  00007D                     	ds	1
  1237  00007E                     convert_to_int_point@i:
  1238                           	callstack 0
  1239                           
  1240                           ; 2 bytes @ 0x1E
  1241  00007E                     	ds	2
  1242  000080                     ??_verifica_diferenca:
  1243                           
  1244                           ; 1 bytes @ 0x20
  1245  000080                     	ds	1
  1246  000081                     move_window@n:
  1247                           	callstack 0
  1248                           
  1249                           ; 1 bytes @ 0x21
  1250  000081                     	ds	1
  1251  000082                     move_window@wsect:
  1252                           	callstack 0
  1253                           
  1254                           ; 4 bytes @ 0x22
  1255  000082                     	ds	2
  1256  000084                     ??_verifica_fence_externo:
  1257                           
  1258                           ; 1 bytes @ 0x24
  1259  000084                     	ds	2
  1260  000086                     move_window@fs:
  1261                           	callstack 0
  1262                           
  1263                           ; 2 bytes @ 0x26
  1264  000086                     	ds	2
  1265  000088                     ?_get_cluster:
  1266                           	callstack 0
  1267  000088                     sync@fs:
  1268                           	callstack 0
  1269  000088                     get_cluster@clust:
  1270                           	callstack 0
  1271  000088                     put_cluster@clust:
  1272                           	callstack 0
  1273                           
  1274                           ; 2 bytes @ 0x28
  1275  000088                     	ds	2
  1276  00008A                     ??_get_cluster:
  1277  00008A                     put_cluster@val:
  1278                           	callstack 0
  1279  00008A                     f_sync@fp:
  1280                           	callstack 0
  1281                           
  1282                           ; 2 bytes @ 0x2A
  1283  00008A                     	ds	2
  1284  00008C                     ??_put_cluster:
  1285  00008C                     f_sync@tim:
  1286                           	callstack 0
  1287                           
  1288                           ; 4 bytes @ 0x2C
  1289  00008C                     	ds	4
  1290  000090                     f_sync@res:
  1291                           	callstack 0
  1292                           
  1293                           ; 1 bytes @ 0x30
  1294  000090                     	ds	1
  1295  000091                     f_sync@dir:
  1296                           	callstack 0
  1297                           
  1298                           ; 2 bytes @ 0x31
  1299  000091                     	ds	1
  1300  000092                     _put_cluster$1551:
  1301                           	callstack 0
  1302                           
  1303                           ; 2 bytes @ 0x32
  1304  000092                     	ds	1
  1305  000093                     get_cluster@wc:
  1306                           	callstack 0
  1307  000093                     f_close@fp:
  1308                           	callstack 0
  1309  000093                     auto_mount@maxclust:
  1310                           	callstack 0
  1311                           
  1312                           ; 4 bytes @ 0x33
  1313  000093                     	ds	1
  1314  000094                     _put_cluster$1552:
  1315                           	callstack 0
  1316                           
  1317                           ; 2 bytes @ 0x34
  1318  000094                     	ds	1
  1319  000095                     get_cluster@fatsect:
  1320                           	callstack 0
  1321                           
  1322                           ; 4 bytes @ 0x35
  1323  000095                     	ds	1
  1324  000096                     put_cluster@fatsect:
  1325                           	callstack 0
  1326                           
  1327                           ; 4 bytes @ 0x36
  1328  000096                     	ds	1
  1329  000097                     auto_mount@bootsect:
  1330                           	callstack 0
  1331                           
  1332                           ; 4 bytes @ 0x37
  1333  000097                     	ds	2
  1334  000099                     get_cluster@bc:
  1335                           	callstack 0
  1336                           
  1337                           ; 2 bytes @ 0x39
  1338  000099                     	ds	1
  1339  00009A                     put_cluster@bc:
  1340                           	callstack 0
  1341                           
  1342                           ; 2 bytes @ 0x3A
  1343  00009A                     	ds	1
  1344  00009B                     get_cluster@fs:
  1345                           	callstack 0
  1346  00009B                     auto_mount@totalsect:
  1347                           	callstack 0
  1348                           
  1349                           ; 4 bytes @ 0x3B
  1350  00009B                     	ds	1
  1351  00009C                     put_cluster@p:
  1352                           	callstack 0
  1353                           
  1354                           ; 2 bytes @ 0x3C
  1355  00009C                     	ds	1
  1356  00009D                     ??_next_dir_entry:
  1357                           
  1358                           ; 1 bytes @ 0x3D
  1359  00009D                     	ds	1
  1360  00009E                     put_cluster@fs:
  1361                           	callstack 0
  1362                           
  1363                           ; 2 bytes @ 0x3E
  1364  00009E                     	ds	1
  1365  00009F                     auto_mount@p:
  1366                           	callstack 0
  1367                           
  1368                           ; 2 bytes @ 0x3F
  1369  00009F                     	ds	1
  1370  0000A0                     ?_create_chain:
  1371                           	callstack 0
  1372  0000A0                     remove_chain@clust:
  1373                           	callstack 0
  1374  0000A0                     create_chain@clust:
  1375                           	callstack 0
  1376                           
  1377                           ; 2 bytes @ 0x40
  1378  0000A0                     	ds	1
  1379  0000A1                     auto_mount@fmt:
  1380                           	callstack 0
  1381                           
  1382                           ; 1 bytes @ 0x41
  1383  0000A1                     	ds	1
  1384  0000A2                     auto_mount@stat:
  1385                           	callstack 0
  1386                           
  1387                           ; 1 bytes @ 0x42
  1388  0000A2                     	ds	1
  1389  0000A3                     auto_mount@fatsize:
  1390                           	callstack 0
  1391                           
  1392                           ; 4 bytes @ 0x43
  1393  0000A3                     	ds	1
  1394  0000A4                     remove_chain@nxt:
  1395                           	callstack 0
  1396  0000A4                     create_chain@mcl:
  1397                           	callstack 0
  1398  0000A4                     next_dir_entry@clust:
  1399                           	callstack 0
  1400                           
  1401                           ; 2 bytes @ 0x44
  1402  0000A4                     	ds	2
  1403  0000A6                     remove_chain@fs:
  1404                           	callstack 0
  1405  0000A6                     create_chain@fs:
  1406                           	callstack 0
  1407  0000A6                     next_dir_entry@idx:
  1408                           	callstack 0
  1409                           
  1410                           ; 2 bytes @ 0x46
  1411  0000A6                     	ds	1
  1412  0000A7                     auto_mount@fs:
  1413                           	callstack 0
  1414                           
  1415                           ; 2 bytes @ 0x47
  1416  0000A7                     	ds	1
  1417  0000A8                     trace_path@dj:
  1418                           	callstack 0
  1419  0000A8                     create_chain@cstat:
  1420                           	callstack 0
  1421                           
  1422                           ; 2 bytes @ 0x48
  1423  0000A8                     	ds	1
  1424  0000A9                     trace_path@fn:
  1425                           	callstack 0
  1426                           
  1427                           ; 1 bytes @ 0x49
  1428  0000A9                     	ds	1
  1429  0000AA                     create_chain@scl:
  1430                           	callstack 0
  1431  0000AA                     trace_path@path:
  1432                           	callstack 0
  1433                           
  1434                           ; 2 bytes @ 0x4A
  1435  0000AA                     	ds	2
  1436  0000AC                     trace_path@dir:
  1437                           	callstack 0
  1438  0000AC                     create_chain@ncl:
  1439                           	callstack 0
  1440                           
  1441                           ; 2 bytes @ 0x4C
  1442  0000AC                     	ds	1
  1443  0000AD                     ??_trace_path:
  1444                           
  1445                           ; 1 bytes @ 0x4D
  1446  0000AD                     	ds	1
  1447  0000AE                     reserve_direntry@dj:
  1448                           	callstack 0
  1449  0000AE                     f_write@fp:
  1450                           	callstack 0
  1451  0000AE                     f_lseek@fp:
  1452                           	callstack 0
  1453                           
  1454                           ; 2 bytes @ 0x4E
  1455  0000AE                     	ds	1
  1456  0000AF                     reserve_direntry@dir:
  1457                           	callstack 0
  1458                           
  1459                           ; 1 bytes @ 0x4F
  1460  0000AF                     	ds	1
  1461  0000B0                     ??_reserve_direntry:
  1462  0000B0                     f_write@buff:
  1463                           	callstack 0
  1464  0000B0                     f_lseek@ofs:
  1465                           	callstack 0
  1466                           
  1467                           ; 4 bytes @ 0x50
  1468  0000B0                     	ds	1
  1469  0000B1                     _trace_path$1708:
  1470                           	callstack 0
  1471  0000B1                     f_write@btw:
  1472                           	callstack 0
  1473                           
  1474                           ; 2 bytes @ 0x51
  1475  0000B1                     	ds	2
  1476  0000B3                     f_write@bw:
  1477                           	callstack 0
  1478  0000B3                     _trace_path$1710:
  1479                           	callstack 0
  1480                           
  1481                           ; 2 bytes @ 0x53
  1482  0000B3                     	ds	1
  1483  0000B4                     ??_f_lseek:
  1484  0000B4                     ??_f_write:
  1485  0000B4                     reserve_direntry@sector:
  1486                           	callstack 0
  1487                           
  1488                           ; 4 bytes @ 0x54
  1489  0000B4                     	ds	1
  1490  0000B5                     trace_path@fs:
  1491                           	callstack 0
  1492                           
  1493                           ; 2 bytes @ 0x55
  1494  0000B5                     	ds	2
  1495  0000B7                     trace_path@clust:
  1496                           	callstack 0
  1497                           
  1498                           ; 2 bytes @ 0x57
  1499  0000B7                     	ds	1
  1500  0000B8                     reserve_direntry@n:
  1501                           	callstack 0
  1502                           
  1503                           ; 1 bytes @ 0x58
  1504  0000B8                     	ds	1
  1505  0000B9                     trace_path@ds:
  1506                           	callstack 0
  1507  0000B9                     reserve_direntry@dptr:
  1508                           	callstack 0
  1509                           
  1510                           ; 2 bytes @ 0x59
  1511  0000B9                     	ds	1
  1512  0000BA                     trace_path@dptr:
  1513                           	callstack 0
  1514                           
  1515                           ; 2 bytes @ 0x5A
  1516  0000BA                     	ds	1
  1517  0000BB                     reserve_direntry@c:
  1518                           	callstack 0
  1519                           
  1520                           ; 1 bytes @ 0x5B
  1521  0000BB                     	ds	1
  1522  0000BC                     reserve_direntry@clust:
  1523                           	callstack 0
  1524                           
  1525                           ; 2 bytes @ 0x5C
  1526  0000BC                     	ds	2
  1527  0000BE                     reserve_direntry@fs:
  1528                           	callstack 0
  1529                           
  1530                           ; 2 bytes @ 0x5E
  1531  0000BE                     	ds	2
  1532  0000C0                     f_write@res:
  1533                           	callstack 0
  1534  0000C0                     f_open@fp:
  1535                           	callstack 0
  1536                           
  1537                           ; 2 bytes @ 0x60
  1538  0000C0                     	ds	1
  1539  0000C1                     f_write@wbuff:
  1540                           	callstack 0
  1541                           
  1542                           ; 1 bytes @ 0x61
  1543  0000C1                     	ds	1
  1544  0000C2                     f_open@path:
  1545                           	callstack 0
  1546  0000C2                     f_write@sect:
  1547                           	callstack 0
  1548                           
  1549                           ; 4 bytes @ 0x62
  1550  0000C2                     	ds	2
  1551  0000C4                     f_open@mode:
  1552                           	callstack 0
  1553  0000C4                     f_lseek@res:
  1554                           	callstack 0
  1555                           
  1556                           ; 1 bytes @ 0x64
  1557  0000C4                     	ds	1
  1558  0000C5                     ??_f_open:
  1559  0000C5                     f_lseek@ifptr:
  1560                           	callstack 0
  1561                           
  1562                           ; 4 bytes @ 0x65
  1563  0000C5                     	ds	1
  1564  0000C6                     f_write@cc:
  1565                           	callstack 0
  1566                           
  1567                           ; 2 bytes @ 0x66
  1568  0000C6                     	ds	2
  1569  0000C8                     f_write@clust:
  1570                           	callstack 0
  1571                           
  1572                           ; 2 bytes @ 0x68
  1573  0000C8                     	ds	1
  1574  0000C9                     f_lseek@csize:
  1575                           	callstack 0
  1576  0000C9                     f_open@fn:
  1577                           	callstack 0
  1578                           
  1579                           ; 12 bytes @ 0x69
  1580  0000C9                     	ds	1
  1581  0000CA                     f_write@wcnt:
  1582                           	callstack 0
  1583                           
  1584                           ; 2 bytes @ 0x6A
  1585  0000CA                     	ds	2
  1586  0000CC                     ?_fputc:
  1587                           	callstack 0
  1588  0000CC                     fputc@chr:
  1589                           	callstack 0
  1590                           
  1591                           ; 2 bytes @ 0x6C
  1592  0000CC                     	ds	1
  1593  0000CD                     f_lseek@clust:
  1594                           	callstack 0
  1595                           
  1596                           ; 2 bytes @ 0x6D
  1597  0000CD                     	ds	1
  1598  0000CE                     fputc@fil:
  1599                           	callstack 0
  1600                           
  1601                           ; 2 bytes @ 0x6E
  1602  0000CE                     	ds	2
  1603  0000D0                     fputc@c:
  1604                           	callstack 0
  1605                           
  1606                           ; 1 bytes @ 0x70
  1607  0000D0                     	ds	1
  1608  0000D1                     fputc@bw:
  1609                           	callstack 0
  1610                           
  1611                           ; 2 bytes @ 0x71
  1612  0000D1                     	ds	2
  1613  0000D3                     ?_fputs:
  1614                           	callstack 0
  1615  0000D3                     fputs@str:
  1616                           	callstack 0
  1617                           
  1618                           ; 2 bytes @ 0x73
  1619  0000D3                     	ds	2
  1620  0000D5                     f_open@rs:
  1621                           	callstack 0
  1622  0000D5                     fputs@fil:
  1623                           	callstack 0
  1624                           
  1625                           ; 2 bytes @ 0x75
  1626  0000D5                     	ds	2
  1627  0000D7                     fputs@n:
  1628                           	callstack 0
  1629  0000D7                     f_open@dw:
  1630                           	callstack 0
  1631                           
  1632                           ; 4 bytes @ 0x77
  1633  0000D7                     	ds	2
  1634  0000D9                     ?_fprintf:
  1635                           	callstack 0
  1636  0000D9                     fprintf@fil:
  1637                           	callstack 0
  1638                           
  1639                           ; 2 bytes @ 0x79
  1640  0000D9                     	ds	2
  1641  0000DB                     f_open@res:
  1642                           	callstack 0
  1643  0000DB                     fprintf@str:
  1644                           	callstack 0
  1645                           
  1646                           ; 2 bytes @ 0x7B
  1647  0000DB                     	ds	1
  1648  0000DC                     f_open@dir:
  1649                           	callstack 0
  1650                           
  1651                           ; 2 bytes @ 0x7C
  1652  0000DC                     	ds	2
  1653  0000DE                     f_open@dj:
  1654                           	callstack 0
  1655                           
  1656                           ; 14 bytes @ 0x7E
  1657  0000DE                     	ds	17
  1658  0000EF                     ??_fprintf:
  1659                           
  1660                           ; 1 bytes @ 0x8F
  1661  0000EF                     	ds	3
  1662  0000F2                     
  1663                           ; 1 bytes @ 0x92
  1664  0000F2                     	ds	1
  1665  0000F3                     disparo_gravacao@fix_gps:
  1666                           	callstack 0
  1667                           
  1668                           ; 2 bytes @ 0x93
  1669  0000F3                     	ds	2
  1670  0000F5                     
  1671                           ; 1 bytes @ 0x95
  1672  0000F5                     	ds	2
  1673  0000F7                     escalonador@cont:
  1674                           	callstack 0
  1675                           
  1676                           ; 1 bytes @ 0x97
  1677  0000F7                     	ds	1
  1678                           
  1679                           	psect	cstackCOMRAM
  1680  000001                     __pcstackCOMRAM:
  1681                           	callstack 0
  1682  000001                     ?_strcmp:
  1683                           	callstack 0
  1684  000001                     stringcpy@str1:
  1685                           	callstack 0
  1686  000001                     strcmp@s1:
  1687                           	callstack 0
  1688  000001                     i2write_timer_zero@timer0:
  1689                           	callstack 0
  1690                           
  1691                           ; 2 bytes @ 0x0
  1692  000001                     	ds	2
  1693  000003                     stringcpy@str2:
  1694                           	callstack 0
  1695  000003                     strcmp@s2:
  1696                           	callstack 0
  1697                           
  1698                           ; 2 bytes @ 0x2
  1699  000003                     	ds	2
  1700  000005                     ??_strcmp:
  1701  000005                     stringcpy@dir:
  1702                           	callstack 0
  1703                           
  1704                           ; 2 bytes @ 0x4
  1705  000005                     	ds	2
  1706  000007                     ??_stringcpy:
  1707  000007                     strcmp@r:
  1708                           	callstack 0
  1709                           
  1710                           ; 1 bytes @ 0x6
  1711  000007                     	ds	2
  1712  000009                     stringcpy@chr:
  1713                           	callstack 0
  1714                           
  1715                           ; 1 bytes @ 0x8
  1716  000009                     	ds	1
  1717  00000A                     GPSRead@buff:
  1718                           	callstack 0
  1719                           
  1720                           ; 1 bytes @ 0x9
  1721  00000A                     	ds	1
  1722  00000B                     GPSRead@c:
  1723                           	callstack 0
  1724                           
  1725                           ; 1 bytes @ 0xA
  1726  00000B                     	ds	1
  1727  00000C                     ??_isr:
  1728                           
  1729                           ; 1 bytes @ 0xB
  1730  00000C                     	ds	12
  1731  000018                     isr@cont:
  1732                           	callstack 0
  1733                           
  1734                           ; 1 bytes @ 0x17
  1735  000018                     	ds	1
  1736  000019                     ??_dummy_clocks:
  1737  000019                     ??_isdigit:
  1738  000019                     ?_fix:
  1739                           	callstack 0
  1740  000019                     ?_strlen:
  1741                           	callstack 0
  1742  000019                     ?_memcmp:
  1743                           	callstack 0
  1744  000019                     ?_GPSSecond:
  1745                           	callstack 0
  1746  000019                     ?_GPSMinute:
  1747                           	callstack 0
  1748  000019                     ?_GPSHour:
  1749                           	callstack 0
  1750  000019                     ?_GPSDay:
  1751                           	callstack 0
  1752  000019                     ?_GPSMonth:
  1753                           	callstack 0
  1754  000019                     ?_GPSyear:
  1755                           	callstack 0
  1756  000019                     ?___wmul:
  1757                           	callstack 0
  1758  000019                     ?___ftpack:
  1759                           	callstack 0
  1760  000019                     ?___lmul:
  1761                           	callstack 0
  1762  000019                     ?___lldiv:
  1763                           	callstack 0
  1764  000019                     ?___aldiv:
  1765                           	callstack 0
  1766  000019                     ?___llmod:
  1767                           	callstack 0
  1768  000019                     disk_ioctl@cmd:
  1769                           	callstack 0
  1770  000019                     delay@contador_ext:
  1771                           	callstack 0
  1772  000019                     response@buff:
  1773                           	callstack 0
  1774  000019                     write_timer_zero@timer0:
  1775                           	callstack 0
  1776  000019                     f_mount@fs:
  1777                           	callstack 0
  1778  000019                     ___wmul@multiplier:
  1779                           	callstack 0
  1780  000019                     memcmp@s1:
  1781                           	callstack 0
  1782  000019                     memcpy@d1:
  1783                           	callstack 0
  1784  000019                     memset@p1:
  1785                           	callstack 0
  1786  000019                     strcat@to:
  1787                           	callstack 0
  1788  000019                     strcpy@to:
  1789                           	callstack 0
  1790  000019                     strlen@s:
  1791                           	callstack 0
  1792  000019                     ___ftpack@arg:
  1793                           	callstack 0
  1794  000019                     wait_ready@timeout:
  1795                           	callstack 0
  1796  000019                     ___lmul@multiplier:
  1797                           	callstack 0
  1798  000019                     ___lldiv@dividend:
  1799                           	callstack 0
  1800  000019                     ___aldiv@dividend:
  1801                           	callstack 0
  1802  000019                     ___llmod@dividend:
  1803                           	callstack 0
  1804                           
  1805                           ; 4 bytes @ 0x18
  1806  000019                     	ds	1
  1807  00001A                     sdc_disk_status@pdrv:
  1808                           	callstack 0
  1809  00001A                     delay@contador_int:
  1810                           	callstack 0
  1811  00001A                     escreve_SPI@dado:
  1812                           	callstack 0
  1813  00001A                     _isdigit$3149:
  1814                           	callstack 0
  1815  00001A                     disk_ioctl@buff:
  1816                           	callstack 0
  1817                           
  1818                           ; 2 bytes @ 0x19
  1819  00001A                     	ds	1
  1820  00001B                     ??_GPSSecond:
  1821  00001B                     ??_GPSMinute:
  1822  00001B                     ??_GPSHour:
  1823  00001B                     ??_GPSDay:
  1824  00001B                     ??_GPSMonth:
  1825  00001B                     ??_GPSyear:
  1826  00001B                     escreve_cmd_lcd@comando:
  1827                           	callstack 0
  1828  00001B                     endereco_cursor_lcd@endereco:
  1829                           	callstack 0
  1830  00001B                     escreve_caractere_lcd@data:
  1831                           	callstack 0
  1832  00001B                     dummy_clocks@n:
  1833                           	callstack 0
  1834  00001B                     f_mount@drv:
  1835                           	callstack 0
  1836  00001B                     isdigit@c:
  1837                           	callstack 0
  1838  00001B                     ___wmul@multiplicand:
  1839                           	callstack 0
  1840  00001B                     memcmp@s2:
  1841                           	callstack 0
  1842  00001B                     memcpy@s1:
  1843                           	callstack 0
  1844  00001B                     memset@c:
  1845                           	callstack 0
  1846  00001B                     strcat@from:
  1847                           	callstack 0
  1848  00001B                     strcpy@from:
  1849                           	callstack 0
  1850  00001B                     strlen@cp:
  1851                           	callstack 0
  1852                           
  1853                           ; 2 bytes @ 0x1A
  1854  00001B                     	ds	1
  1855  00001C                     ??_init_lcd:
  1856  00001C                     disk_ioctl@pdrv:
  1857                           	callstack 0
  1858  00001C                     posicao_cursor_lcd@coluna:
  1859                           	callstack 0
  1860  00001C                     ___ftpack@exp:
  1861                           	callstack 0
  1862  00001C                     escreve_frase_ram_lcd@buffer:
  1863                           	callstack 0
  1864  00001C                     dummy_clocks@i:
  1865                           	callstack 0
  1866                           
  1867                           ; 2 bytes @ 0x1B
  1868  00001C                     	ds	1
  1869  00001D                     ?_get_fattime:
  1870                           	callstack 0
  1871  00001D                     disk_status@pdrv:
  1872                           	callstack 0
  1873  00001D                     disk_ioctl@res:
  1874                           	callstack 0
  1875  00001D                     posicao_cursor_lcd@linha:
  1876                           	callstack 0
  1877  00001D                     wait_ready@res:
  1878                           	callstack 0
  1879  00001D                     ___ftpack@sign:
  1880                           	callstack 0
  1881  00001D                     monta_sd@dado:
  1882                           	callstack 0
  1883  00001D                     ___wmul@product:
  1884                           	callstack 0
  1885  00001D                     memcmp@n:
  1886                           	callstack 0
  1887  00001D                     memcpy@n:
  1888                           	callstack 0
  1889  00001D                     memset@n:
  1890                           	callstack 0
  1891  00001D                     strcat@cp:
  1892                           	callstack 0
  1893  00001D                     strcpy@cp:
  1894                           	callstack 0
  1895  00001D                     ___lmul@multiplicand:
  1896                           	callstack 0
  1897  00001D                     ___lldiv@divisor:
  1898                           	callstack 0
  1899  00001D                     ___aldiv@divisor:
  1900                           	callstack 0
  1901  00001D                     ___llmod@divisor:
  1902                           	callstack 0
  1903                           
  1904                           ; 4 bytes @ 0x1C
  1905  00001D                     	ds	1
  1906  00001E                     ??___ftpack:
  1907  00001E                     disk_status@stat:
  1908                           	callstack 0
  1909  00001E                     posicao_cursor_lcd@endereco:
  1910                           	callstack 0
  1911  00001E                     command@arg:
  1912                           	callstack 0
  1913                           
  1914                           ; 4 bytes @ 0x1D
  1915  00001E                     	ds	1
  1916  00001F                     ??_memcmp:
  1917  00001F                     ??_mensagem_inicial:
  1918  00001F                     ?_Latitude:
  1919                           	callstack 0
  1920  00001F                     ?_Longitude:
  1921                           	callstack 0
  1922  00001F                     ?_atoi:
  1923                           	callstack 0
  1924  00001F                     monta_sd@index:
  1925                           	callstack 0
  1926  00001F                     memcpy@tmp:
  1927                           	callstack 0
  1928  00001F                     validate@fs:
  1929                           	callstack 0
  1930  00001F                     atoi@s:
  1931                           	callstack 0
  1932  00001F                     memset@p:
  1933                           	callstack 0
  1934                           
  1935                           ; 2 bytes @ 0x1E
  1936  00001F                     	ds	1
  1937  000020                     monta_sd@size:
  1938                           	callstack 0
  1939  000020                     memcpy@d:
  1940                           	callstack 0
  1941                           
  1942                           ; 2 bytes @ 0x1F
  1943  000020                     	ds	1
  1944  000021                     ??_atoi:
  1945  000021                     monta_sd@i:
  1946                           	callstack 0
  1947  000021                     make_dirfile@path:
  1948                           	callstack 0
  1949  000021                     ___aldiv@counter:
  1950                           	callstack 0
  1951  000021                     ___llmod@counter:
  1952                           	callstack 0
  1953  000021                     validate@id:
  1954                           	callstack 0
  1955  000021                     ___lmul@product:
  1956                           	callstack 0
  1957  000021                     ___lldiv@quotient:
  1958                           	callstack 0
  1959  000021                     get_fattime@f_time:
  1960                           	callstack 0
  1961                           
  1962                           ; 10 bytes @ 0x20
  1963  000021                     	ds	1
  1964  000022                     command@CRC:
  1965                           	callstack 0
  1966  000022                     make_dirfile@dirname:
  1967                           	callstack 0
  1968  000022                     ___aldiv@sign:
  1969                           	callstack 0
  1970  000022                     memcpy@s:
  1971                           	callstack 0
  1972                           
  1973                           ; 2 bytes @ 0x21
  1974  000022                     	ds	1
  1975  000023                     ??_make_dirfile:
  1976  000023                     ??_validate:
  1977  000023                     command@CMD:
  1978                           	callstack 0
  1979  000023                     atoi@sign:
  1980                           	callstack 0
  1981  000023                     ___aldiv@quotient:
  1982                           	callstack 0
  1983                           
  1984                           ; 4 bytes @ 0x22
  1985  000023                     	ds	1
  1986  000024                     command@argument:
  1987                           	callstack 0
  1988  000024                     atoi@a:
  1989                           	callstack 0
  1990                           
  1991                           ; 2 bytes @ 0x23
  1992  000024                     	ds	1
  1993  000025                     ?_atol:
  1994                           	callstack 0
  1995  000025                     ?_clust2sect:
  1996                           	callstack 0
  1997  000025                     ___lldiv@counter:
  1998                           	callstack 0
  1999  000025                     sdc_disk_read@p_buff:
  2000                           	callstack 0
  2001  000025                     sdc_disk_write@p_buff:
  2002                           	callstack 0
  2003  000025                     clust2sect@clust:
  2004                           	callstack 0
  2005  000025                     _make_dirfile$1661:
  2006                           	callstack 0
  2007  000025                     atol@s:
  2008                           	callstack 0
  2009                           
  2010                           ; 2 bytes @ 0x24
  2011  000025                     	ds	1
  2012  000026                     ?___awtoft:
  2013                           	callstack 0
  2014  000026                     ultoa@buf:
  2015                           	callstack 0
  2016  000026                     ___awtoft@c:
  2017                           	callstack 0
  2018                           
  2019                           ; 2 bytes @ 0x25
  2020  000026                     	ds	1
  2021  000027                     make_dirfile@b:
  2022                           	callstack 0
  2023  000027                     sdc_reset@count_nosd:
  2024                           	callstack 0
  2025  000027                     sdc_disk_read@sector:
  2026                           	callstack 0
  2027  000027                     sdc_disk_write@sector:
  2028                           	callstack 0
  2029  000027                     configura_baudrate_uart@baudrate:
  2030                           	callstack 0
  2031  000027                     ultoa@val:
  2032                           	callstack 0
  2033                           
  2034                           ; 4 bytes @ 0x26
  2035  000027                     	ds	1
  2036  000028                     make_dirfile@t:
  2037                           	callstack 0
  2038                           
  2039                           ; 1 bytes @ 0x27
  2040  000028                     	ds	1
  2041  000029                     ??_atol:
  2042  000029                     ??_clust2sect:
  2043  000029                     make_dirfile@a:
  2044                           	callstack 0
  2045  000029                     ___awtoft@sign:
  2046                           	callstack 0
  2047  000029                     sdc_reset@count:
  2048                           	callstack 0
  2049                           
  2050                           ; 2 bytes @ 0x28
  2051  000029                     	ds	1
  2052  00002A                     ?___ftmul:
  2053                           	callstack 0
  2054  00002A                     make_dirfile@n:
  2055                           	callstack 0
  2056  00002A                     ___ftmul@f1:
  2057                           	callstack 0
  2058                           
  2059                           ; 3 bytes @ 0x29
  2060  00002A                     	ds	1
  2061  00002B                     sdc_reset@buff:
  2062                           	callstack 0
  2063  00002B                     sdc_disk_read@count:
  2064                           	callstack 0
  2065  00002B                     sdc_disk_write@count:
  2066                           	callstack 0
  2067  00002B                     make_dirfile@c:
  2068                           	callstack 0
  2069  00002B                     configura_baudrate_uart@x:
  2070                           	callstack 0
  2071  00002B                     ultoa@base:
  2072                           	callstack 0
  2073                           
  2074                           ; 2 bytes @ 0x2A
  2075  00002B                     	ds	1
  2076  00002C                     ??_sdc_disk_initialize:
  2077  00002C                     ??_sdc_disk_read:
  2078  00002C                     ??_sdc_disk_write:
  2079                           
  2080                           ; 1 bytes @ 0x2B
  2081  00002C                     	ds	1
  2082  00002D                     ?_convert_to_int:
  2083                           	callstack 0
  2084  00002D                     ?_convert_to_int_point:
  2085                           	callstack 0
  2086  00002D                     disk_initialize@pdrv:
  2087                           	callstack 0
  2088  00002D                     convert_to_int@p_buff:
  2089                           	callstack 0
  2090  00002D                     convert_to_int_point@p_buff:
  2091                           	callstack 0
  2092  00002D                     ___ftmul@f2:
  2093                           	callstack 0
  2094  00002D                     ultoa@v:
  2095                           	callstack 0
  2096                           
  2097                           ; 4 bytes @ 0x2C
  2098  00002D                     	ds	1
  2099  00002E                     disk_initialize@stat:
  2100                           	callstack 0
  2101  00002E                     clust2sect@fs:
  2102                           	callstack 0
  2103                           
  2104                           ; 2 bytes @ 0x2D
  2105  00002E                     	ds	2
  2106  000030                     ??_disk_read:
  2107  000030                     ??_disk_write:
  2108                           
  2109                           ; 1 bytes @ 0x2F
  2110  000030                     	ds	1
  2111  000031                     ??_fputs:
  2112  000031                     next_dir_entry@dj:
  2113                           	callstack 0
  2114  000031                     f_close@res:
  2115                           	callstack 0
  2116  000031                     ultoa@c:
  2117                           	callstack 0
  2118                           
  2119                           ; 1 bytes @ 0x30
  2120  000031                     	ds	1
  2121  000032                     
  2122                           ; 1 bytes @ 0x31
  2123 ;;
  2124 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2125 ;;
  2126 ;; *************** function _main *****************
  2127 ;; Defined at:
  2128 ;;		line 225 in file "main.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;		None
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;		None
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    wreg      void 
  2135 ;; Registers used:
  2136 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 3F/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2142 ;;      Params:         0       0       0       0       0       0       0       0       0
  2143 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2144 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2145 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2146 ;;Total ram usage:        0 bytes
  2147 ;; Hardware stack levels required when called:   19
  2148 ;; This function calls:
  2149 ;;		_escalonador
  2150 ;;		_inicializa_tarefas
  2151 ;;		_inicializa_uart
  2152 ;;		_init_hardware
  2153 ;;		_init_lcd
  2154 ;;		_mensagem_inicial
  2155 ;; This function is called by:
  2156 ;;		Startup code after reset
  2157 ;; This function uses a non-reentrant model
  2158 ;;
  2159                           
  2160                           	psect	text0
  2161  005138                     __ptext0:
  2162                           	callstack 0
  2163  005138                     _main:
  2164                           	callstack 12
  2165                           
  2166                           ;main.c: 227: init_hardware();
  2167                           
  2168                           ;incstack = 0
  2169  005138  ECE3  F029         	call	_init_hardware	;wreg free
  2170                           
  2171                           ;main.c: 228: T0CONbits.TMR0ON = 0;
  2172  00513C  9ED5               	bcf	213,7,c	;volatile
  2173                           
  2174                           ;main.c: 229: init_lcd();
  2175  00513E  EC05  F020         	call	_init_lcd	;wreg free
  2176                           
  2177                           ;main.c: 230: mensagem_inicial();
  2178  005142  EC7E  F021         	call	_mensagem_inicial	;wreg free
  2179                           
  2180                           ;main.c: 231: inicializa_tarefas();
  2181  005146  EC3F  F025         	call	_inicializa_tarefas	;wreg free
  2182                           
  2183                           ; BSR set to: 1
  2184                           ;main.c: 232: inicializa_uart();
  2185  00514A  ECF9  F028         	call	_inicializa_uart	;wreg free
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;main.c: 234: T0CONbits.TMR0ON = 1;
  2189  00514E  8ED5               	bsf	213,7,c	;volatile
  2190  005150                     l12375:
  2191                           
  2192                           ;main.c: 236: {;main.c: 238: if ((sinaliza_int_timer == 1) && (4))
  2193  005150  043D               	decf	_sinaliza_int_timer^0,w,c
  2194  005152  A4D8               	btfss	status,2,c
  2195  005154  D7FD               	goto	l12375
  2196                           
  2197                           ;main.c: 239: {;main.c: 240: sinaliza_int_timer = 0;
  2198  005156  0E00               	movlw	0
  2199  005158  6E3D               	movwf	_sinaliza_int_timer^0,c
  2200                           
  2201                           ;main.c: 241: escalonador();
  2202  00515A  ECB2  F01F         	call	_escalonador	;wreg free
  2203  00515E  D7F8               	goto	l12375
  2204  005160                     __end_of_main:
  2205                           	callstack 0
  2206                           
  2207 ;; *************** function _mensagem_inicial *****************
  2208 ;; Defined at:
  2209 ;;		line 251 in file "main.c"
  2210 ;; Parameters:    Size  Location     Type
  2211 ;;		None
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;  msg_dois       17   17[BANK0 ] const unsigned char [17]
  2214 ;;  msg_linha_um   17    0[BANK0 ] const unsigned char [17]
  2215 ;; Return value:  Size  Location     Type
  2216 ;;                  1    wreg      void 
  2217 ;; Registers used:
  2218 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2219 ;; Tracked objects:
  2220 ;;		On entry : 0/0
  2221 ;;		On exit  : 0/0
  2222 ;;		Unchanged: 0/0
  2223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2224 ;;      Params:         0       0       0       0       0       0       0       0       0
  2225 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2226 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2227 ;;      Totals:         2      34       0       0       0       0       0       0       0
  2228 ;;Total ram usage:       36 bytes
  2229 ;; Hardware stack levels used:    1
  2230 ;; Hardware stack levels required when called:    6
  2231 ;; This function calls:
  2232 ;;		_escreve_cmd_lcd
  2233 ;;		_escreve_frase_ram_lcd
  2234 ;;		_posicao_cursor_lcd
  2235 ;; This function is called by:
  2236 ;;		_main
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	text1
  2241  0042FC                     __ptext1:
  2242                           	callstack 0
  2243  0042FC                     _mensagem_inicial:
  2244                           	callstack 24
  2245                           
  2246                           ;main.c: 253: const unsigned char msg_linha_um[17] = "FATEC ST ANDRE";
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;incstack = 0
  2250  0042FC  0EEC               	movlw	low mensagem_inicial@F3654
  2251  0042FE  6EF6               	movwf	tblptrl,c
  2252  004300                     	if	1	;There is more than 1 active tblptr byte
  2253  004300  0E60               	movlw	high mensagem_inicial@F3654
  2254  004302  6EF7               	movwf	tblptrh,c
  2255  004304                     	endif
  2256  004304                     	if	0	;There are less than 3 active tblptr bytes
  2257  004304                     	endif
  2258  004304  EE20  F060         	lfsr	2,mensagem_inicial@msg_linha_um
  2259  004308  0E10               	movlw	16
  2260  00430A                     u14890:
  2261  00430A  0009               	tblrd		*+
  2262  00430C  CFF5 FFDE          	movff	tablat,postinc2
  2263  004310  06E8               	decf	wreg,f,c
  2264  004312  E2FB               	bc	u14890
  2265                           
  2266                           ;main.c: 254: const unsigned char msg_dois[17] = "TCC--TELEMTRIA";
  2267  004314  0EDB               	movlw	low mensagem_inicial@F3656
  2268  004316  6EF6               	movwf	tblptrl,c
  2269  004318                     	if	1	;There is more than 1 active tblptr byte
  2270  004318  0E60               	movlw	high mensagem_inicial@F3656
  2271  00431A  6EF7               	movwf	tblptrh,c
  2272  00431C                     	endif
  2273  00431C                     	if	0	;There are less than 3 active tblptr bytes
  2274  00431C                     	endif
  2275  00431C  EE20  F071         	lfsr	2,mensagem_inicial@msg_dois
  2276  004320  0E10               	movlw	16
  2277  004322                     u14900:
  2278  004322  0009               	tblrd		*+
  2279  004324  CFF5 FFDE          	movff	tablat,postinc2
  2280  004328  06E8               	decf	wreg,f,c
  2281  00432A  E2FB               	bc	u14900
  2282                           
  2283                           ;main.c: 256: posicao_cursor_lcd(1,0);
  2284  00432C  0E00               	movlw	0
  2285  00432E  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  2286  004330  0E01               	movlw	1
  2287  004332  EC6F  F025         	call	_posicao_cursor_lcd
  2288                           
  2289                           ;main.c: 257: escreve_frase_ram_lcd(msg_linha_um);
  2290  004336  0E60               	movlw	low mensagem_inicial@msg_linha_um
  2291  004338  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  2292  00433A  6A1D               	clrf	(escreve_frase_ram_lcd@buffer+1)^0,c
  2293  00433C  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  2294                           
  2295                           ;main.c: 259: posicao_cursor_lcd(2,0);
  2296  004340  0E00               	movlw	0
  2297  004342  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  2298  004344  0E02               	movlw	2
  2299  004346  EC6F  F025         	call	_posicao_cursor_lcd
  2300                           
  2301                           ;main.c: 260: escreve_frase_ram_lcd(msg_dois);
  2302  00434A  0E71               	movlw	low mensagem_inicial@msg_dois
  2303  00434C  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  2304  00434E  6A1D               	clrf	(escreve_frase_ram_lcd@buffer+1)^0,c
  2305  004350  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  2306                           
  2307                           ;main.c: 261: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2308  004354  0E3D               	movlw	61
  2309  004356  6E20               	movwf	(??_mensagem_inicial+1)^0,c
  2310  004358  0EE1               	movlw	225
  2311  00435A  6E1F               	movwf	??_mensagem_inicial^0,c
  2312  00435C  0E40               	movlw	64
  2313  00435E                     u15067:
  2314  00435E  2EE8               	decfsz	wreg,f,c
  2315  004360  D7FE               	bra	u15067
  2316  004362  2E1F               	decfsz	??_mensagem_inicial^0,f,c
  2317  004364  D7FC               	bra	u15067
  2318  004366  2E20               	decfsz	(??_mensagem_inicial+1)^0,f,c
  2319  004368  D7FA               	bra	u15067
  2320                           
  2321                           ;main.c: 262: escreve_cmd_lcd(0b00000001);
  2322  00436A  0E01               	movlw	1
  2323  00436C  ECC4  F021         	call	_escreve_cmd_lcd
  2324                           
  2325                           ;main.c: 263: posicao_cursor_lcd(1,0);
  2326  004370  0E00               	movlw	0
  2327  004372  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  2328  004374  0E01               	movlw	1
  2329  004376  EC6F  F025         	call	_posicao_cursor_lcd
  2330                           
  2331                           ;main.c: 264: escreve_frase_ram_lcd("AGUARDE...");
  2332  00437A  0EE1               	movlw	low STR_25
  2333  00437C  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  2334  00437E  0E61               	movlw	high STR_25
  2335  004380  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  2336  004382  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  2337  004386  0012               	return		;funcret
  2338  004388                     __end_of_mensagem_inicial:
  2339                           	callstack 0
  2340                           
  2341 ;; *************** function _init_lcd *****************
  2342 ;; Defined at:
  2343 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;		None
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;		None
  2348 ;; Return value:  Size  Location     Type
  2349 ;;                  1    wreg      void 
  2350 ;; Registers used:
  2351 ;;		wreg, status,2, status,0, cstack
  2352 ;; Tracked objects:
  2353 ;;		On entry : 0/0
  2354 ;;		On exit  : 0/0
  2355 ;;		Unchanged: 0/0
  2356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2357 ;;      Params:         0       0       0       0       0       0       0       0       0
  2358 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2359 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2360 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2361 ;;Total ram usage:        1 bytes
  2362 ;; Hardware stack levels used:    1
  2363 ;; Hardware stack levels required when called:    5
  2364 ;; This function calls:
  2365 ;;		_delay
  2366 ;;		_escreve_cmd_lcd
  2367 ;; This function is called by:
  2368 ;;		_main
  2369 ;; This function uses a non-reentrant model
  2370 ;;
  2371                           
  2372                           	psect	text2
  2373  00400A                     __ptext2:
  2374                           	callstack 0
  2375  00400A                     _init_lcd:
  2376                           	callstack 25
  2377                           
  2378                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2379                           
  2380                           ;incstack = 0
  2381  00400A  9495               	bcf	149,2,c	;volatile
  2382                           
  2383                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2384  00400C  9295               	bcf	149,1,c	;volatile
  2385                           
  2386                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2387  00400E  9095               	bcf	149,0,c	;volatile
  2388                           
  2389                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2390  004010  9895               	bcf	149,4,c	;volatile
  2391                           
  2392                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2393  004012  9A95               	bcf	149,5,c	;volatile
  2394                           
  2395                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2396  004014  9C95               	bcf	149,6,c	;volatile
  2397                           
  2398                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2399  004016  9E95               	bcf	149,7,c	;volatile
  2400                           
  2401                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2402  004018  9483               	bcf	131,2,c	;volatile
  2403                           
  2404                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2405  00401A  9283               	bcf	131,1,c	;volatile
  2406                           
  2407                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2408  00401C  9083               	bcf	131,0,c	;volatile
  2409                           
  2410                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2411  00401E  9E83               	bcf	131,7,c	;volatile
  2412                           
  2413                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2414  004020  9C83               	bcf	131,6,c	;volatile
  2415                           
  2416                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2417  004022  8A83               	bsf	131,5,c	;volatile
  2418                           
  2419                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2420  004024  8883               	bsf	131,4,c	;volatile
  2421                           
  2422                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2423  004026  0EEA               	movlw	234
  2424  004028  6E1C               	movwf	??_init_lcd^0,c
  2425  00402A  0EC3               	movlw	195
  2426  00402C                     u15077:
  2427  00402C  2EE8               	decfsz	wreg,f,c
  2428  00402E  D7FE               	bra	u15077
  2429  004030  2E1C               	decfsz	??_init_lcd^0,f,c
  2430  004032  D7FC               	bra	u15077
  2431  004034  F000               	nop	
  2432                           
  2433                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2434  004036  8083               	bsf	131,0,c	;volatile
  2435                           
  2436                           ;display_lcd.c: 108: delay();
  2437  004038  ECAC  F029         	call	_delay	;wreg free
  2438                           
  2439                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2440  00403C  9083               	bcf	131,0,c	;volatile
  2441                           
  2442                           ;display_lcd.c: 110: delay();
  2443  00403E  ECAC  F029         	call	_delay	;wreg free
  2444                           
  2445                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2446  004042  0E4E               	movlw	78
  2447  004044  6E1C               	movwf	??_init_lcd^0,c
  2448  004046  0EEB               	movlw	235
  2449  004048                     u15087:
  2450  004048  2EE8               	decfsz	wreg,f,c
  2451  00404A  D7FE               	bra	u15087
  2452  00404C  2E1C               	decfsz	??_init_lcd^0,f,c
  2453  00404E  D7FC               	bra	u15087
  2454  004050  F000               	nop	
  2455                           
  2456                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2457  004052  8083               	bsf	131,0,c	;volatile
  2458                           
  2459                           ;display_lcd.c: 119: delay();
  2460  004054  ECAC  F029         	call	_delay	;wreg free
  2461                           
  2462                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2463  004058  9083               	bcf	131,0,c	;volatile
  2464                           
  2465                           ;display_lcd.c: 121: delay();
  2466  00405A  ECAC  F029         	call	_delay	;wreg free
  2467                           
  2468                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2469  00405E  0E4E               	movlw	78
  2470  004060  6E1C               	movwf	??_init_lcd^0,c
  2471  004062  0EEB               	movlw	235
  2472  004064                     u15097:
  2473  004064  2EE8               	decfsz	wreg,f,c
  2474  004066  D7FE               	bra	u15097
  2475  004068  2E1C               	decfsz	??_init_lcd^0,f,c
  2476  00406A  D7FC               	bra	u15097
  2477  00406C  F000               	nop	
  2478                           
  2479                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2480  00406E  8083               	bsf	131,0,c	;volatile
  2481                           
  2482                           ;display_lcd.c: 130: delay();
  2483  004070  ECAC  F029         	call	_delay	;wreg free
  2484                           
  2485                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2486  004074  9083               	bcf	131,0,c	;volatile
  2487                           
  2488                           ;display_lcd.c: 132: delay();
  2489  004076  ECAC  F029         	call	_delay	;wreg free
  2490                           
  2491                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2492  00407A  9E83               	bcf	131,7,c	;volatile
  2493                           
  2494                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2495  00407C  9C83               	bcf	131,6,c	;volatile
  2496                           
  2497                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2498  00407E  8A83               	bsf	131,5,c	;volatile
  2499                           
  2500                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2501  004080  9883               	bcf	131,4,c	;volatile
  2502                           
  2503                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2504  004082  8083               	bsf	131,0,c	;volatile
  2505                           
  2506                           ;display_lcd.c: 143: delay();
  2507  004084  ECAC  F029         	call	_delay	;wreg free
  2508                           
  2509                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2510  004088  9083               	bcf	131,0,c	;volatile
  2511                           
  2512                           ;display_lcd.c: 145: delay();
  2513  00408A  ECAC  F029         	call	_delay	;wreg free
  2514                           
  2515                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2516  00408E  0E28               	movlw	40
  2517  004090  ECC4  F021         	call	_escreve_cmd_lcd
  2518                           
  2519                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2520  004094  0E06               	movlw	6
  2521  004096  ECC4  F021         	call	_escreve_cmd_lcd
  2522                           
  2523                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2524  00409A  0E0E               	movlw	14
  2525  00409C  ECC4  F021         	call	_escreve_cmd_lcd
  2526                           
  2527                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2528  0040A0  0E01               	movlw	1
  2529  0040A2  ECC4  F021         	call	_escreve_cmd_lcd
  2530  0040A6  0012               	return		;funcret
  2531  0040A8                     __end_of_init_lcd:
  2532                           	callstack 0
  2533                           
  2534 ;; *************** function _init_hardware *****************
  2535 ;; Defined at:
  2536 ;;		line 52 in file "bibliotecas/hardware.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;		None
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;		None
  2541 ;; Return value:  Size  Location     Type
  2542 ;;                  1    wreg      void 
  2543 ;; Registers used:
  2544 ;;		wreg, status,2, cstack
  2545 ;; Tracked objects:
  2546 ;;		On entry : 0/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2550 ;;      Params:         0       0       0       0       0       0       0       0       0
  2551 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2552 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2553 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2554 ;;Total ram usage:        0 bytes
  2555 ;; Hardware stack levels used:    1
  2556 ;; Hardware stack levels required when called:    5
  2557 ;; This function calls:
  2558 ;;		_config_timer_dois
  2559 ;;		_config_timer_zero
  2560 ;;		_init_interrupt
  2561 ;;		_init_oscilador
  2562 ;;		_init_ports
  2563 ;; This function is called by:
  2564 ;;		_main
  2565 ;; This function uses a non-reentrant model
  2566 ;;
  2567                           
  2568                           	psect	text3
  2569  0053C6                     __ptext3:
  2570                           	callstack 0
  2571  0053C6                     _init_hardware:
  2572                           	callstack 25
  2573                           
  2574                           ;hardware.c: 55: init_oscilador();
  2575                           
  2576                           ;incstack = 0
  2577  0053C6  EC5A  F02A         	call	_init_oscilador	;wreg free
  2578                           
  2579                           ;hardware.c: 58: init_ports();
  2580  0053CA  ECBB  F029         	call	_init_ports	;wreg free
  2581                           
  2582                           ;hardware.c: 61: config_timer_zero();
  2583  0053CE  ECC9  F029         	call	_config_timer_zero	;wreg free
  2584                           
  2585                           ;hardware.c: 64: config_timer_dois();
  2586  0053D2  EC17  F02A         	call	_config_timer_dois	;wreg free
  2587                           
  2588                           ;hardware.c: 67: init_interrupt();
  2589  0053D6  ECEE  F029         	call	_init_interrupt	;wreg free
  2590  0053DA  0012               	return		;funcret
  2591  0053DC                     __end_of_init_hardware:
  2592                           	callstack 0
  2593                           
  2594 ;; *************** function _init_ports *****************
  2595 ;; Defined at:
  2596 ;;		line 151 in file "bibliotecas/hardware.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;		None
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;		None
  2601 ;; Return value:  Size  Location     Type
  2602 ;;                  1    wreg      void 
  2603 ;; Registers used:
  2604 ;;		wreg, status,2
  2605 ;; Tracked objects:
  2606 ;;		On entry : 0/0
  2607 ;;		On exit  : 0/0
  2608 ;;		Unchanged: 0/0
  2609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2610 ;;      Params:         0       0       0       0       0       0       0       0       0
  2611 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2612 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2613 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2614 ;;Total ram usage:        0 bytes
  2615 ;; Hardware stack levels used:    1
  2616 ;; Hardware stack levels required when called:    3
  2617 ;; This function calls:
  2618 ;;		Nothing
  2619 ;; This function is called by:
  2620 ;;		_init_hardware
  2621 ;; This function uses a non-reentrant model
  2622 ;;
  2623                           
  2624                           	psect	text4
  2625  005376                     __ptext4:
  2626                           	callstack 0
  2627  005376                     _init_ports:
  2628                           	callstack 26
  2629                           
  2630                           ;hardware.c: 153: ADCON1 = 0X0F;
  2631                           
  2632                           ;incstack = 0
  2633  005376  0E0F               	movlw	15
  2634  005378  6EC1               	movwf	193,c	;volatile
  2635                           
  2636                           ;hardware.c: 154: TRISB = 0b00000001;
  2637  00537A  0E01               	movlw	1
  2638  00537C  6E93               	movwf	147,c	;volatile
  2639                           
  2640                           ;hardware.c: 155: LATB = 0xFF;
  2641  00537E  688A               	setf	138,c	;volatile
  2642                           
  2643                           ;hardware.c: 156: TRISD = 0x00;
  2644  005380  0E00               	movlw	0
  2645  005382  6E95               	movwf	149,c	;volatile
  2646                           
  2647                           ;hardware.c: 157: TRISA = 0b00000111;
  2648  005384  0E07               	movlw	7
  2649  005386  6E92               	movwf	146,c	;volatile
  2650                           
  2651                           ;hardware.c: 158: TRISC = 0x01111111;
  2652  005388  0E11               	movlw	17
  2653  00538A  6E94               	movwf	148,c	;volatile
  2654                           
  2655                           ;hardware.c: 159: TRISE = 0b00000011;
  2656  00538C  0E03               	movlw	3
  2657  00538E  6E96               	movwf	150,c	;volatile
  2658  005390  0012               	return		;funcret
  2659  005392                     __end_of_init_ports:
  2660                           	callstack 0
  2661                           
  2662 ;; *************** function _init_oscilador *****************
  2663 ;; Defined at:
  2664 ;;		line 169 in file "bibliotecas/hardware.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;		None
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;		None
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  1    wreg      void 
  2671 ;; Registers used:
  2672 ;;		None
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2678 ;;      Params:         0       0       0       0       0       0       0       0       0
  2679 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2681 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2682 ;;Total ram usage:        0 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; Hardware stack levels required when called:    3
  2685 ;; This function calls:
  2686 ;;		Nothing
  2687 ;; This function is called by:
  2688 ;;		_init_hardware
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           	psect	text5
  2693  0054B4                     __ptext5:
  2694                           	callstack 0
  2695  0054B4                     _init_oscilador:
  2696                           	callstack 26
  2697                           
  2698                           ;hardware.c: 172: OSCCONbits.IRCF0 = 1;
  2699                           
  2700                           ;incstack = 0
  2701  0054B4  88D3               	bsf	211,4,c	;volatile
  2702                           
  2703                           ;hardware.c: 173: OSCCONbits.IRCF1 = 1;
  2704  0054B6  8AD3               	bsf	211,5,c	;volatile
  2705                           
  2706                           ;hardware.c: 174: OSCCONbits.IRCF2 = 1;
  2707  0054B8  8CD3               	bsf	211,6,c	;volatile
  2708  0054BA  0012               	return		;funcret
  2709  0054BC                     __end_of_init_oscilador:
  2710                           	callstack 0
  2711                           
  2712 ;; *************** function _init_interrupt *****************
  2713 ;; Defined at:
  2714 ;;		line 94 in file "bibliotecas/hardware.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;		None
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;		None
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      void 
  2721 ;; Registers used:
  2722 ;;		wreg, status,2
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2728 ;;      Params:         0       0       0       0       0       0       0       0       0
  2729 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2730 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2731 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2732 ;;Total ram usage:        0 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    3
  2735 ;; This function calls:
  2736 ;;		Nothing
  2737 ;; This function is called by:
  2738 ;;		_init_hardware
  2739 ;; This function uses a non-reentrant model
  2740 ;;
  2741                           
  2742                           	psect	text6
  2743  0053DC                     __ptext6:
  2744                           	callstack 0
  2745  0053DC                     _init_interrupt:
  2746                           	callstack 26
  2747                           
  2748                           ;hardware.c: 96: INTCON = 0b10110000;
  2749                           
  2750                           ;incstack = 0
  2751  0053DC  0EB0               	movlw	176
  2752  0053DE  6EF2               	movwf	242,c	;volatile
  2753                           
  2754                           ;hardware.c: 97: INTCON2 = 0b00000000;
  2755  0053E0  0E00               	movlw	0
  2756  0053E2  6EF1               	movwf	241,c	;volatile
  2757                           
  2758                           ;hardware.c: 98: INTCON3 = 0b00000000;
  2759  0053E4  0E00               	movlw	0
  2760  0053E6  6EF0               	movwf	240,c	;volatile
  2761                           
  2762                           ;hardware.c: 100: PIE1 = 0b00101000;
  2763  0053E8  0E28               	movlw	40
  2764  0053EA  6E9D               	movwf	157,c	;volatile
  2765  0053EC  0012               	return		;funcret
  2766  0053EE                     __end_of_init_interrupt:
  2767                           	callstack 0
  2768                           
  2769 ;; *************** function _config_timer_zero *****************
  2770 ;; Defined at:
  2771 ;;		line 79 in file "bibliotecas/hardware.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;		None
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;		None
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      void 
  2778 ;; Registers used:
  2779 ;;		wreg, status,2, cstack
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2785 ;;      Params:         0       0       0       0       0       0       0       0       0
  2786 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2787 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2788 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2789 ;;Total ram usage:        0 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; Hardware stack levels required when called:    4
  2792 ;; This function calls:
  2793 ;;		_write_timer_zero
  2794 ;; This function is called by:
  2795 ;;		_init_hardware
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           	psect	text7
  2800  005392                     __ptext7:
  2801                           	callstack 0
  2802  005392                     _config_timer_zero:
  2803                           	callstack 25
  2804                           
  2805                           ;hardware.c: 81: T0CON = 0b11000101;
  2806                           
  2807                           ;incstack = 0
  2808  005392  0EC5               	movlw	197
  2809  005394  6ED5               	movwf	213,c	;volatile
  2810                           
  2811                           ;hardware.c: 82: SPPCON = 0b00000000;
  2812  005396  0E00               	movlw	0
  2813  005398  6E65               	movwf	101,c	;volatile
  2814                           
  2815                           ;hardware.c: 83: SPPCFG = 0b00000000;
  2816  00539A  0E00               	movlw	0
  2817  00539C  6E63               	movwf	99,c	;volatile
  2818                           
  2819                           ;hardware.c: 84: write_timer_zero(0x45);
  2820  00539E  0E00               	movlw	0
  2821  0053A0  6E1A               	movwf	(write_timer_zero@timer0+1)^0,c
  2822  0053A2  0E45               	movlw	69
  2823  0053A4  6E19               	movwf	write_timer_zero@timer0^0,c
  2824  0053A6  EC4B  F02A         	call	_write_timer_zero	;wreg free
  2825  0053AA  0012               	return		;funcret
  2826  0053AC                     __end_of_config_timer_zero:
  2827                           	callstack 0
  2828                           
  2829 ;; *************** function _write_timer_zero *****************
  2830 ;; Defined at:
  2831 ;;		line 134 in file "bibliotecas/hardware.c"
  2832 ;; Parameters:    Size  Location     Type
  2833 ;;  timer0          2   24[COMRAM] unsigned int 
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;		None
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  1    wreg      void 
  2838 ;; Registers used:
  2839 ;;		None
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2845 ;;      Params:         2       0       0       0       0       0       0       0       0
  2846 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2847 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2848 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2849 ;;Total ram usage:        2 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:    3
  2852 ;; This function calls:
  2853 ;;		Nothing
  2854 ;; This function is called by:
  2855 ;;		_config_timer_zero
  2856 ;; This function uses a non-reentrant model
  2857 ;;
  2858                           
  2859                           	psect	text8
  2860  005496                     __ptext8:
  2861                           	callstack 0
  2862  005496                     _write_timer_zero:
  2863                           	callstack 25
  2864                           
  2865                           ;hardware.c: 142: TMR0 = timer0;
  2866                           
  2867                           ;incstack = 0
  2868  005496  C019  FFD6         	movff	write_timer_zero@timer0,4054	;volatile
  2869  00549A  C01A  FFD7         	movff	write_timer_zero@timer0+1,4055	;volatile
  2870  00549E  0012               	return		;funcret
  2871  0054A0                     __end_of_write_timer_zero:
  2872                           	callstack 0
  2873                           
  2874 ;; *************** function _config_timer_dois *****************
  2875 ;; Defined at:
  2876 ;;		line 198 in file "bibliotecas/hardware.c"
  2877 ;; Parameters:    Size  Location     Type
  2878 ;;		None
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;		None
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      void 
  2883 ;; Registers used:
  2884 ;;		wreg, status,2
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2890 ;;      Params:         0       0       0       0       0       0       0       0       0
  2891 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2892 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2893 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2894 ;;Total ram usage:        0 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    3
  2897 ;; This function calls:
  2898 ;;		Nothing
  2899 ;; This function is called by:
  2900 ;;		_init_hardware
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904                           	psect	text9
  2905  00542E                     __ptext9:
  2906                           	callstack 0
  2907  00542E                     _config_timer_dois:
  2908                           	callstack 26
  2909                           
  2910                           ;hardware.c: 200: T2CON = 0b00000100;
  2911                           
  2912                           ;incstack = 0
  2913  00542E  0E04               	movlw	4
  2914  005430  6ECA               	movwf	202,c	;volatile
  2915                           
  2916                           ;hardware.c: 201: TMR2 = 0;
  2917  005432  0E00               	movlw	0
  2918  005434  6ECC               	movwf	204,c	;volatile
  2919                           
  2920                           ;hardware.c: 202: PR2 = 0x01;
  2921  005436  0E01               	movlw	1
  2922  005438  6ECB               	movwf	203,c	;volatile
  2923  00543A  0012               	return		;funcret
  2924  00543C                     __end_of_config_timer_dois:
  2925                           	callstack 0
  2926                           
  2927 ;; *************** function _inicializa_tarefas *****************
  2928 ;; Defined at:
  2929 ;;		line 172 in file "main.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;		None
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;		None
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		wreg, status,2, status,0
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 3F/1
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2943 ;;      Params:         0       0       0       0       0       0       0       0       0
  2944 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2945 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2946 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2947 ;;Total ram usage:        0 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; Hardware stack levels required when called:    3
  2950 ;; This function calls:
  2951 ;;		Nothing
  2952 ;; This function is called by:
  2953 ;;		_main
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           	psect	text10
  2958  004A7E                     __ptext10:
  2959                           	callstack 0
  2960  004A7E                     _inicializa_tarefas:
  2961                           	callstack 27
  2962                           
  2963                           ;main.c: 175: p_tarefas[0] = verifica_dados_operacionais;
  2964                           
  2965                           ;incstack = 0
  2966  004A7E  0EE4               	movlw	low _verifica_dados_operacionais
  2967  004A80  0101               	movlb	1	; () banked
  2968  004A82  6F20               	movwf	_p_tarefas& (0+255),b
  2969  004A84  0E48               	movlw	high _verifica_dados_operacionais
  2970  004A86  6F21               	movwf	(_p_tarefas+1)& (0+255),b
  2971                           
  2972                           ;main.c: 176: p_tarefas[1] = disparo_gravacao;
  2973  004A88  0ECC               	movlw	low _disparo_gravacao
  2974  004A8A  6F22               	movwf	(_p_tarefas+2)& (0+255),b
  2975  004A8C  0E4F               	movlw	high _disparo_gravacao
  2976  004A8E  6F23               	movwf	(_p_tarefas+3)& (0+255),b
  2977                           
  2978                           ;main.c: 178: p_tarefas[2] = troca_de_tela;
  2979  004A90  0E80               	movlw	low _troca_de_tela
  2980  004A92  6F24               	movwf	(_p_tarefas+4)& (0+255),b
  2981  004A94  0E20               	movlw	high _troca_de_tela
  2982  004A96  6F25               	movwf	(_p_tarefas+5)& (0+255),b
  2983                           
  2984                           ; BSR set to: 1
  2985                           ;main.c: 182: tempo_backup[0] = 500;
  2986  004A98  0E01               	movlw	1
  2987  004A9A  6F19               	movwf	(_tempo_backup+1)& (0+255),b
  2988  004A9C  0EF4               	movlw	244
  2989  004A9E  6F18               	movwf	_tempo_backup& (0+255),b
  2990                           
  2991                           ; BSR set to: 1
  2992                           ;main.c: 183: tempo_backup[1] = 1000;
  2993  004AA0  0E03               	movlw	3
  2994  004AA2  6F1B               	movwf	(_tempo_backup+3)& (0+255),b
  2995  004AA4  0EE8               	movlw	232
  2996  004AA6  6F1A               	movwf	(_tempo_backup+2)& (0+255),b
  2997                           
  2998                           ; BSR set to: 1
  2999                           ;main.c: 184: tempo_backup[2] = 2000;
  3000  004AA8  0E07               	movlw	7
  3001  004AAA  6F1D               	movwf	(_tempo_backup+5)& (0+255),b
  3002  004AAC  0ED0               	movlw	208
  3003  004AAE  6F1C               	movwf	(_tempo_backup+4)& (0+255),b
  3004                           
  3005                           ; BSR set to: 1
  3006                           ;main.c: 185: tempo_backup[3] = 1000;
  3007  004AB0  0E03               	movlw	3
  3008  004AB2  6F1F               	movwf	(_tempo_backup+7)& (0+255),b
  3009  004AB4  0EE8               	movlw	232
  3010  004AB6  6F1E               	movwf	(_tempo_backup+6)& (0+255),b
  3011                           
  3012                           ; BSR set to: 1
  3013                           ;main.c: 188: tempo_tarefa[0] = 500;
  3014  004AB8  0E01               	movlw	1
  3015  004ABA  6F11               	movwf	(_tempo_tarefa+1)& (0+255),b
  3016  004ABC  0EF4               	movlw	244
  3017  004ABE  6F10               	movwf	_tempo_tarefa& (0+255),b
  3018                           
  3019                           ; BSR set to: 1
  3020                           ;main.c: 189: tempo_tarefa[1] = 1000;
  3021  004AC0  0E03               	movlw	3
  3022  004AC2  6F13               	movwf	(_tempo_tarefa+3)& (0+255),b
  3023  004AC4  0EE8               	movlw	232
  3024  004AC6  6F12               	movwf	(_tempo_tarefa+2)& (0+255),b
  3025                           
  3026                           ; BSR set to: 1
  3027                           ;main.c: 190: tempo_tarefa[2] = 5000;
  3028  004AC8  0E13               	movlw	19
  3029  004ACA  6F15               	movwf	(_tempo_tarefa+5)& (0+255),b
  3030  004ACC  0E88               	movlw	136
  3031  004ACE  6F14               	movwf	(_tempo_tarefa+4)& (0+255),b
  3032                           
  3033                           ; BSR set to: 1
  3034                           ;main.c: 191: tempo_tarefa[3] = 5000;
  3035  004AD0  0E13               	movlw	19
  3036  004AD2  6F17               	movwf	(_tempo_tarefa+7)& (0+255),b
  3037  004AD4  0E88               	movlw	136
  3038  004AD6  6F16               	movwf	(_tempo_tarefa+6)& (0+255),b
  3039                           
  3040                           ; BSR set to: 1
  3041                           ;main.c: 193: tarefa_em_execucao = 0;
  3042  004AD8  0E00               	movlw	0
  3043  004ADA  6E3C               	movwf	_tarefa_em_execucao^0,c	;volatile
  3044                           
  3045                           ; BSR set to: 1
  3046  004ADC  0012               	return		;funcret
  3047  004ADE                     __end_of_inicializa_tarefas:
  3048                           	callstack 0
  3049                           
  3050 ;; *************** function _escalonador *****************
  3051 ;; Defined at:
  3052 ;;		line 204 in file "main.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;		None
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;  cont            1  151[BANK0 ] unsigned char 
  3057 ;; Return value:  Size  Location     Type
  3058 ;;                  1    wreg      void 
  3059 ;; Registers used:
  3060 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 3F/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3066 ;;      Params:         0       0       0       0       0       0       0       0       0
  3067 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3068 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3069 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3070 ;;Total ram usage:        3 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:   18
  3073 ;; This function calls:
  3074 ;;		_disparo_gravacao
  3075 ;;		_troca_de_tela
  3076 ;;		_verifica_dados_operacionais
  3077 ;; This function is called by:
  3078 ;;		_main
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           	psect	text11
  3083  003F64                     __ptext11:
  3084                           	callstack 0
  3085  003F64                     _escalonador:
  3086                           	callstack 12
  3087                           
  3088                           ;main.c: 206: unsigned char cont;;main.c: 207: for(cont = 0; cont<4;cont++)
  3089                           
  3090                           ; BSR set to: 1
  3091                           ;incstack = 0
  3092  003F64  0E00               	movlw	0
  3093  003F66  0100               	movlb	0	; () banked
  3094  003F68  6FF7               	movwf	escalonador@cont& (0+255),b
  3095  003F6A                     l12271:
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;main.c: 208: {;main.c: 209: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3099  003F6A  51F7               	movf	escalonador@cont& (0+255),w,b
  3100  003F6C  0D02               	mullw	2
  3101  003F6E  0E20               	movlw	low _p_tarefas
  3102  003F70  24F3               	addwf	243,w,c
  3103  003F72  6ED9               	movwf	fsr2l,c
  3104  003F74  0E01               	movlw	high _p_tarefas
  3105  003F76  20F4               	addwfc	prodh,w,c
  3106  003F78  6EDA               	movwf	fsr2h,c
  3107  003F7A  50DE               	movf	postinc2,w,c
  3108  003F7C  10DE               	iorwf	postinc2,w,c
  3109  003F7E  B4D8               	btfsc	status,2,c
  3110  003F80  D03F               	goto	l12283
  3111                           
  3112                           ; BSR set to: 0
  3113  003F82  51F7               	movf	escalonador@cont& (0+255),w,b
  3114  003F84  0D02               	mullw	2
  3115  003F86  0E10               	movlw	low _tempo_tarefa
  3116  003F88  24F3               	addwf	243,w,c
  3117  003F8A  6ED9               	movwf	fsr2l,c
  3118  003F8C  0E01               	movlw	high _tempo_tarefa
  3119  003F8E  20F4               	addwfc	prodh,w,c
  3120  003F90  6EDA               	movwf	fsr2h,c
  3121  003F92  50DE               	movf	postinc2,w,c
  3122  003F94  10DE               	iorwf	postinc2,w,c
  3123  003F96  A4D8               	btfss	status,2,c
  3124  003F98  D033               	goto	l12283
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;main.c: 210: {;main.c: 211: tarefa_em_execucao = 1;
  3128  003F9A  0E01               	movlw	1
  3129  003F9C  6E3C               	movwf	_tarefa_em_execucao^0,c	;volatile
  3130                           
  3131                           ;main.c: 212: timeout_tarefa = 65000;
  3132  003F9E  0EFD               	movlw	253
  3133  003FA0  0101               	movlb	1	; () banked
  3134  003FA2  6F46               	movwf	(_timeout_tarefa+1)& (0+255),b
  3135  003FA4  0EE8               	movlw	232
  3136  003FA6  6F45               	movwf	_timeout_tarefa& (0+255),b
  3137                           
  3138                           ; BSR set to: 1
  3139                           ;main.c: 213: p_tarefas[cont]();
  3140  003FA8  0100               	movlb	0	; () banked
  3141  003FAA  51F7               	movf	escalonador@cont& (0+255),w,b
  3142  003FAC  0D02               	mullw	2
  3143  003FAE  0E20               	movlw	low _p_tarefas
  3144  003FB0  24F3               	addwf	243,w,c
  3145  003FB2  6ED9               	movwf	fsr2l,c
  3146  003FB4  0E01               	movlw	high _p_tarefas
  3147  003FB6  20F4               	addwfc	prodh,w,c
  3148  003FB8  6EDA               	movwf	fsr2h,c
  3149  003FBA  D801               	call	u14878
  3150  003FBC  D00A               	goto	u14879
  3151  003FBE                     u14878:
  3152  003FBE  0005               	push	
  3153  003FC0  6EFA               	movwf	pclath,c
  3154  003FC2  50DE               	movf	postinc2,w,c
  3155  003FC4  6EFD               	movwf	tosl,c
  3156  003FC6  50DE               	movf	postinc2,w,c
  3157  003FC8  6EFE               	movwf	tosh,c
  3158  003FCA  50F8               	movf	tblptru,w,c
  3159  003FCC  6EFF               	movwf	tosu,c
  3160  003FCE  50FA               	movf	pclath,w,c
  3161  003FD0  0012               	return		;indir
  3162  003FD2                     u14879:
  3163                           
  3164                           ;main.c: 214: tarefa_em_execucao = 0;
  3165  003FD2  0E00               	movlw	0
  3166  003FD4  6E3C               	movwf	_tarefa_em_execucao^0,c	;volatile
  3167                           
  3168                           ;main.c: 215: tempo_tarefa[cont] = tempo_backup[cont];
  3169  003FD6  0100               	movlb	0	; () banked
  3170  003FD8  51F7               	movf	escalonador@cont& (0+255),w,b
  3171  003FDA  0D02               	mullw	2
  3172  003FDC  0E18               	movlw	low _tempo_backup
  3173  003FDE  24F3               	addwf	243,w,c
  3174  003FE0  6ED9               	movwf	fsr2l,c
  3175  003FE2  0E01               	movlw	high _tempo_backup
  3176  003FE4  20F4               	addwfc	prodh,w,c
  3177  003FE6  6EDA               	movwf	fsr2h,c
  3178  003FE8  51F7               	movf	escalonador@cont& (0+255),w,b
  3179  003FEA  0D02               	mullw	2
  3180  003FEC  0E10               	movlw	low _tempo_tarefa
  3181  003FEE  24F3               	addwf	243,w,c
  3182  003FF0  6EE1               	movwf	fsr1l,c
  3183  003FF2  0E01               	movlw	high _tempo_tarefa
  3184  003FF4  20F4               	addwfc	prodh,w,c
  3185  003FF6  6EE2               	movwf	fsr1h,c
  3186  003FF8  CFDE FFE6          	movff	postinc2,postinc1
  3187  003FFC  CFDD FFE5          	movff	postdec2,postdec1
  3188  004000                     l12283:
  3189                           
  3190                           ; BSR set to: 0
  3191  004000  2BF7               	incf	escalonador@cont& (0+255),f,b
  3192                           
  3193                           ; BSR set to: 0
  3194  004002  0E03               	movlw	3
  3195  004004  65F7               	cpfsgt	escalonador@cont& (0+255),b
  3196  004006  D7B1               	goto	l12271
  3197  004008  0012               	return	
  3198  00400A                     __end_of_escalonador:
  3199                           	callstack 0
  3200                           
  3201 ;; *************** function _troca_de_tela *****************
  3202 ;; Defined at:
  3203 ;;		line 379 in file "main.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;		None
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;		None
  3208 ;; Return value:  Size  Location     Type
  3209 ;;                  1    wreg      void 
  3210 ;; Registers used:
  3211 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3212 ;; Tracked objects:
  3213 ;;		On entry : 3F/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3217 ;;      Params:         0       0       0       0       0       0       0       0       0
  3218 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3219 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3220 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3221 ;;Total ram usage:        1 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; Hardware stack levels required when called:    7
  3224 ;; This function calls:
  3225 ;;		_Latitude
  3226 ;;		_Longitude
  3227 ;;		_escreve_cmd_lcd
  3228 ;;		_escreve_frase_ram_lcd
  3229 ;;		_escreve_inteiro_lcd
  3230 ;;		_fix
  3231 ;;		_posicao_cursor_lcd
  3232 ;; This function is called by:
  3233 ;;		_inicializa_tarefas
  3234 ;;		_escalonador
  3235 ;; This function uses a non-reentrant model
  3236 ;;
  3237                           
  3238                           	psect	text12
  3239  002080                     __ptext12:
  3240                           	callstack 0
  3241  002080                     _troca_de_tela:
  3242                           	callstack 22
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 382: static unsigned char state = 0;;main.c: 383: static unsigned char last_sta
      +                          te = 0;;;main.c: 388: if(!PORTEbits.RE0 || (state == 1 ))
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;incstack = 0
  3249  002080  A084               	btfss	132,0,c	;volatile
  3250  002082  D003               	goto	u14310
  3251                           
  3252                           ; BSR set to: 0
  3253  002084  043B               	decf	troca_de_tela@state^0,w,c
  3254  002086  A4D8               	btfss	status,2,c
  3255  002088  D091               	goto	l11931
  3256  00208A                     u14310:
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;main.c: 389: {;main.c: 391: if(!time_atualizacao)
  3260  00208A  5036               	movf	_time_atualizacao^0,w,c
  3261  00208C  1037               	iorwf	(_time_atualizacao+1)^0,w,c
  3262  00208E  A4D8               	btfss	status,2,c
  3263  002090  D011               	goto	l11891
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;main.c: 392: {;main.c: 393: posicao_cursor_lcd(2,8);
  3267  002092  0E08               	movlw	8
  3268  002094  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3269  002096  0E02               	movlw	2
  3270  002098  EC6F  F025         	call	_posicao_cursor_lcd
  3271                           
  3272                           ;main.c: 394: escreve_frase_ram_lcd(fix());
  3273  00209C  EC50  F02A         	call	_fix	;wreg free
  3274  0020A0  C019  F01C         	movff	?_fix,escreve_frase_ram_lcd@buffer
  3275  0020A4  C01A  F01D         	movff	?_fix+1,escreve_frase_ram_lcd@buffer+1
  3276  0020A8  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  3277                           
  3278                           ;main.c: 395: time_atualizacao = 10000;
  3279  0020AC  0E27               	movlw	39
  3280  0020AE  6E37               	movwf	(_time_atualizacao+1)^0,c
  3281  0020B0  0E10               	movlw	16
  3282  0020B2  6E36               	movwf	_time_atualizacao^0,c
  3283  0020B4                     l11891:
  3284                           
  3285                           ;main.c: 396: };main.c: 398: if(last_state != 1)
  3286  0020B4  043A               	decf	troca_de_tela@last_state^0,w,c
  3287  0020B6  B4D8               	btfsc	status,2,c
  3288  0020B8  D077               	goto	l11929
  3289                           
  3290                           ;main.c: 399: {;main.c: 400: state = 1;
  3291  0020BA  0E01               	movlw	1
  3292  0020BC  6E3B               	movwf	troca_de_tela@state^0,c
  3293                           
  3294                           ;main.c: 401: escreve_cmd_lcd(0b00000001);
  3295  0020BE  0E01               	movlw	1
  3296  0020C0  ECC4  F021         	call	_escreve_cmd_lcd
  3297                           
  3298                           ;main.c: 402: posicao_cursor_lcd(1,0);
  3299  0020C4  0E00               	movlw	0
  3300  0020C6  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3301  0020C8  0E01               	movlw	1
  3302  0020CA  EC6F  F025         	call	_posicao_cursor_lcd
  3303                           
  3304                           ;main.c: 403: escreve_frase_ram_lcd("FENCE:");
  3305  0020CE  0E3A               	movlw	low STR_28
  3306  0020D0  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3307  0020D2  0E62               	movlw	high STR_28
  3308  0020D4  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3309  0020D6  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  3310                           
  3311                           ;main.c: 405: if(!fence_flag[2].point)
  3312  0020DA  0101               	movlb	1	; () banked
  3313  0020DC  B13D               	btfsc	(_fence_flag+2)& (0+255),0,b
  3314  0020DE  D00C               	goto	l11907
  3315                           
  3316                           ; BSR set to: 1
  3317                           ;main.c: 406: {;main.c: 407: posicao_cursor_lcd(1,8);
  3318  0020E0  0E08               	movlw	8
  3319  0020E2  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3320  0020E4  0E01               	movlw	1
  3321  0020E6  EC6F  F025         	call	_posicao_cursor_lcd
  3322                           
  3323                           ;main.c: 408: escreve_frase_ram_lcd("DENTRO");
  3324  0020EA  0E41               	movlw	low STR_27
  3325  0020EC  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3326  0020EE  0E62               	movlw	high STR_27
  3327  0020F0  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3328  0020F2  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  3329                           
  3330                           ;main.c: 409: }
  3331  0020F6  D040               	goto	l11921
  3332  0020F8                     l11907:
  3333                           
  3334                           ; BSR set to: 1
  3335                           ;main.c: 410: else;main.c: 411: {;main.c: 412: posicao_cursor_lcd(1,8);
  3336  0020F8  0E08               	movlw	8
  3337  0020FA  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3338  0020FC  0E01               	movlw	1
  3339  0020FE  EC6F  F025         	call	_posicao_cursor_lcd
  3340                           
  3341                           ;main.c: 413: escreve_frase_ram_lcd("FORA");
  3342  002102  0E5F               	movlw	low STR_26
  3343  002104  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3344  002106  0E62               	movlw	high STR_26
  3345  002108  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3346  00210A  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  3347                           
  3348                           ;main.c: 414: posicao_cursor_lcd(1,13);
  3349  00210E  0E0D               	movlw	13
  3350  002110  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3351  002112  0E01               	movlw	1
  3352  002114  EC6F  F025         	call	_posicao_cursor_lcd
  3353                           
  3354                           ;main.c: 415: escreve_inteiro_lcd(fence_flag[0].point);
  3355  002118  0101               	movlb	1	; () banked
  3356  00211A  A13B               	btfss	_fence_flag& (0+255),0,b
  3357  00211C  D004               	goto	u14350
  3358  00211E  0100               	movlb	0	; () banked
  3359  002120  6B73               	clrf	??_troca_de_tela& (0+255),b
  3360  002122  2B73               	incf	??_troca_de_tela& (0+255),f,b
  3361  002124  D002               	goto	u14358
  3362  002126                     u14350:
  3363  002126  0100               	movlb	0	; () banked
  3364  002128  6B73               	clrf	??_troca_de_tela& (0+255),b
  3365  00212A                     u14358:
  3366  00212A  5173               	movf	??_troca_de_tela& (0+255),w,b
  3367  00212C  6F68               	movwf	escreve_inteiro_lcd@valor& (0+255),b
  3368  00212E  6B69               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  3369  002130  6B6A               	clrf	(escreve_inteiro_lcd@valor+2)& (0+255),b
  3370  002132  6B6B               	clrf	(escreve_inteiro_lcd@valor+3)& (0+255),b
  3371  002134  ECC7  F027         	call	_escreve_inteiro_lcd	;wreg free
  3372                           
  3373                           ;main.c: 416: posicao_cursor_lcd(1,14);
  3374  002138  0E0E               	movlw	14
  3375  00213A  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3376  00213C  0E01               	movlw	1
  3377  00213E  EC6F  F025         	call	_posicao_cursor_lcd
  3378                           
  3379                           ;main.c: 417: escreve_frase_ram_lcd("|");
  3380  002142  0E7C               	movlw	low STR_31
  3381  002144  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3382  002146  0E62               	movlw	high STR_31
  3383  002148  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3384  00214A  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  3385                           
  3386                           ;main.c: 418: posicao_cursor_lcd(1,15);
  3387  00214E  0E0F               	movlw	15
  3388  002150  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3389  002152  0E01               	movlw	1
  3390  002154  EC6F  F025         	call	_posicao_cursor_lcd
  3391                           
  3392                           ;main.c: 419: escreve_inteiro_lcd(fence_flag[1].point);
  3393  002158  0101               	movlb	1	; () banked
  3394  00215A  A13C               	btfss	(_fence_flag+1)& (0+255),0,b
  3395  00215C  D004               	goto	u14360
  3396  00215E  0100               	movlb	0	; () banked
  3397  002160  6B73               	clrf	??_troca_de_tela& (0+255),b
  3398  002162  2B73               	incf	??_troca_de_tela& (0+255),f,b
  3399  002164  D002               	goto	u14368
  3400  002166                     u14360:
  3401  002166  0100               	movlb	0	; () banked
  3402  002168  6B73               	clrf	??_troca_de_tela& (0+255),b
  3403  00216A                     u14368:
  3404  00216A  5173               	movf	??_troca_de_tela& (0+255),w,b
  3405  00216C  6F68               	movwf	escreve_inteiro_lcd@valor& (0+255),b
  3406  00216E  6B69               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  3407  002170  6B6A               	clrf	(escreve_inteiro_lcd@valor+2)& (0+255),b
  3408  002172  6B6B               	clrf	(escreve_inteiro_lcd@valor+3)& (0+255),b
  3409  002174  ECC7  F027         	call	_escreve_inteiro_lcd	;wreg free
  3410  002178                     l11921:
  3411                           
  3412                           ;main.c: 420: };main.c: 422: posicao_cursor_lcd(2,0);
  3413  002178  0E00               	movlw	0
  3414  00217A  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3415  00217C  0E02               	movlw	2
  3416  00217E  EC6F  F025         	call	_posicao_cursor_lcd
  3417                           
  3418                           ;main.c: 423: escreve_frase_ram_lcd("FIX:");
  3419  002182  0E5A               	movlw	low STR_32
  3420  002184  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3421  002186  0E62               	movlw	high STR_32
  3422  002188  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3423  00218A  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  3424                           
  3425                           ;main.c: 424: posicao_cursor_lcd(2,8);
  3426  00218E  0E08               	movlw	8
  3427  002190  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3428  002192  0E02               	movlw	2
  3429  002194  EC6F  F025         	call	_posicao_cursor_lcd
  3430                           
  3431                           ;main.c: 425: escreve_frase_ram_lcd(fix());
  3432  002198  EC50  F02A         	call	_fix	;wreg free
  3433  00219C  C019  F01C         	movff	?_fix,escreve_frase_ram_lcd@buffer
  3434  0021A0  C01A  F01D         	movff	?_fix+1,escreve_frase_ram_lcd@buffer+1
  3435  0021A4  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  3436  0021A8                     l11929:
  3437                           
  3438                           ;main.c: 426: };main.c: 427: last_state = 1;
  3439  0021A8  0E01               	movlw	1
  3440  0021AA  6E3A               	movwf	troca_de_tela@last_state^0,c
  3441  0021AC                     l11931:
  3442                           
  3443                           ;main.c: 429: };main.c: 432: if(!PORTEbits.RE1 || (state == 2))
  3444  0021AC  A284               	btfss	132,1,c	;volatile
  3445  0021AE  D004               	goto	u14380
  3446  0021B0  0E02               	movlw	2
  3447  0021B2  183B               	xorwf	troca_de_tela@state^0,w,c
  3448  0021B4  A4D8               	btfss	status,2,c
  3449  0021B6  D06D               	goto	l11977
  3450  0021B8                     u14380:
  3451                           
  3452                           ;main.c: 433: {;main.c: 434: if(!time_atualizacao)
  3453  0021B8  5036               	movf	_time_atualizacao^0,w,c
  3454  0021BA  1037               	iorwf	(_time_atualizacao+1)^0,w,c
  3455  0021BC  A4D8               	btfss	status,2,c
  3456  0021BE  D026               	goto	l11949
  3457                           
  3458                           ;main.c: 435: {;main.c: 436: point_buff_gps_lat = Latitude();
  3459  0021C0  EC9D  F029         	call	_Latitude	;wreg free
  3460  0021C4  C01F  F0F8         	movff	?_Latitude,_point_buff_gps_lat
  3461  0021C8  C020  F0F9         	movff	?_Latitude+1,_point_buff_gps_lat+1
  3462                           
  3463                           ;main.c: 437: point_buff_gps_long = Longitude();
  3464  0021CC  EC8E  F029         	call	_Longitude	;wreg free
  3465  0021D0  C01F  F141         	movff	?_Longitude,_point_buff_gps_long
  3466  0021D4  C020  F142         	movff	?_Longitude+1,_point_buff_gps_long+1
  3467                           
  3468                           ;main.c: 438: posicao_cursor_lcd(1,4);
  3469  0021D8  0E04               	movlw	4
  3470  0021DA  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3471  0021DC  0E01               	movlw	1
  3472  0021DE  EC6F  F025         	call	_posicao_cursor_lcd
  3473                           
  3474                           ;main.c: 439: escreve_frase_ram_lcd(point_buff_gps_lat);
  3475  0021E2  C0F8  F01C         	movff	_point_buff_gps_lat,escreve_frase_ram_lcd@buffer
  3476  0021E6  C0F9  F01D         	movff	_point_buff_gps_lat+1,escreve_frase_ram_lcd@buffer+1
  3477  0021EA  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  3478                           
  3479                           ;main.c: 440: posicao_cursor_lcd(2,4);
  3480  0021EE  0E04               	movlw	4
  3481  0021F0  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3482  0021F2  0E02               	movlw	2
  3483  0021F4  EC6F  F025         	call	_posicao_cursor_lcd
  3484                           
  3485                           ;main.c: 441: escreve_frase_ram_lcd(point_buff_gps_long);
  3486  0021F8  C141  F01C         	movff	_point_buff_gps_long,escreve_frase_ram_lcd@buffer
  3487  0021FC  C142  F01D         	movff	_point_buff_gps_long+1,escreve_frase_ram_lcd@buffer+1
  3488  002200  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  3489                           
  3490                           ;main.c: 442: time_atualizacao = 2000;
  3491  002204  0E07               	movlw	7
  3492  002206  6E37               	movwf	(_time_atualizacao+1)^0,c
  3493  002208  0ED0               	movlw	208
  3494  00220A  6E36               	movwf	_time_atualizacao^0,c
  3495  00220C                     l11949:
  3496                           
  3497                           ;main.c: 443: };main.c: 446: if(last_state != 2)
  3498  00220C  0E02               	movlw	2
  3499  00220E  183A               	xorwf	troca_de_tela@last_state^0,w,c
  3500  002210  B4D8               	btfsc	status,2,c
  3501  002212  D03D               	goto	l11975
  3502                           
  3503                           ;main.c: 447: {;main.c: 448: state = 2;
  3504  002214  0E02               	movlw	2
  3505  002216  6E3B               	movwf	troca_de_tela@state^0,c
  3506                           
  3507                           ;main.c: 449: escreve_cmd_lcd(0b00000001);
  3508  002218  0E01               	movlw	1
  3509  00221A  ECC4  F021         	call	_escreve_cmd_lcd
  3510                           
  3511                           ;main.c: 450: point_buff_gps_lat = Latitude();
  3512  00221E  EC9D  F029         	call	_Latitude	;wreg free
  3513  002222  C01F  F0F8         	movff	?_Latitude,_point_buff_gps_lat
  3514  002226  C020  F0F9         	movff	?_Latitude+1,_point_buff_gps_lat+1
  3515                           
  3516                           ;main.c: 451: point_buff_gps_long = Longitude();
  3517  00222A  EC8E  F029         	call	_Longitude	;wreg free
  3518  00222E  C01F  F141         	movff	?_Longitude,_point_buff_gps_long
  3519  002232  C020  F142         	movff	?_Longitude+1,_point_buff_gps_long+1
  3520                           
  3521                           ;main.c: 452: posicao_cursor_lcd(1,0);
  3522  002236  0E00               	movlw	0
  3523  002238  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3524  00223A  0E01               	movlw	1
  3525  00223C  EC6F  F025         	call	_posicao_cursor_lcd
  3526                           
  3527                           ;main.c: 453: escreve_frase_ram_lcd("lt:");
  3528  002240  0E6D               	movlw	low STR_33
  3529  002242  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3530  002244  0E62               	movlw	high STR_33
  3531  002246  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3532  002248  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  3533                           
  3534                           ;main.c: 454: posicao_cursor_lcd(1,4);
  3535  00224C  0E04               	movlw	4
  3536  00224E  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3537  002250  0E01               	movlw	1
  3538  002252  EC6F  F025         	call	_posicao_cursor_lcd
  3539                           
  3540                           ;main.c: 455: escreve_frase_ram_lcd(point_buff_gps_lat);
  3541  002256  C0F8  F01C         	movff	_point_buff_gps_lat,escreve_frase_ram_lcd@buffer
  3542  00225A  C0F9  F01D         	movff	_point_buff_gps_lat+1,escreve_frase_ram_lcd@buffer+1
  3543  00225E  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  3544                           
  3545                           ;main.c: 456: posicao_cursor_lcd(2,0);
  3546  002262  0E00               	movlw	0
  3547  002264  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3548  002266  0E02               	movlw	2
  3549  002268  EC6F  F025         	call	_posicao_cursor_lcd
  3550                           
  3551                           ;main.c: 457: escreve_frase_ram_lcd("lo:");
  3552  00226C  0E69               	movlw	low STR_34
  3553  00226E  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3554  002270  0E62               	movlw	high STR_34
  3555  002272  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3556  002274  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  3557                           
  3558                           ;main.c: 458: posicao_cursor_lcd(2,4);
  3559  002278  0E04               	movlw	4
  3560  00227A  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3561  00227C  0E02               	movlw	2
  3562  00227E  EC6F  F025         	call	_posicao_cursor_lcd
  3563                           
  3564                           ;main.c: 459: escreve_frase_ram_lcd(point_buff_gps_long);
  3565  002282  C141  F01C         	movff	_point_buff_gps_long,escreve_frase_ram_lcd@buffer
  3566  002286  C142  F01D         	movff	_point_buff_gps_long+1,escreve_frase_ram_lcd@buffer+1
  3567  00228A  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  3568  00228E                     l11975:
  3569                           
  3570                           ;main.c: 460: };main.c: 461: last_state = 2;
  3571  00228E  0E02               	movlw	2
  3572  002290  6E3A               	movwf	troca_de_tela@last_state^0,c
  3573  002292                     l11977:
  3574                           
  3575                           ;main.c: 462: };main.c: 477: if(!state)
  3576  002292  503B               	movf	troca_de_tela@state^0,w,c
  3577  002294  A4D8               	btfss	status,2,c
  3578  002296  0012               	return	
  3579                           
  3580                           ;main.c: 478: {;main.c: 479: if(last_state != 4)
  3581  002298  0E04               	movlw	4
  3582  00229A  183A               	xorwf	troca_de_tela@last_state^0,w,c
  3583  00229C  B4D8               	btfsc	status,2,c
  3584  00229E  D019               	goto	l11987
  3585                           
  3586                           ;main.c: 480: {;main.c: 481: escreve_cmd_lcd(0b00000001);
  3587  0022A0  0E01               	movlw	1
  3588  0022A2  ECC4  F021         	call	_escreve_cmd_lcd
  3589                           
  3590                           ;main.c: 482: posicao_cursor_lcd(1,0);
  3591  0022A6  0E00               	movlw	0
  3592  0022A8  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3593  0022AA  0E01               	movlw	1
  3594  0022AC  EC6F  F025         	call	_posicao_cursor_lcd
  3595                           
  3596                           ;main.c: 483: escreve_frase_ram_lcd("B1:FENCE");
  3597  0022B0  0E20               	movlw	low STR_35
  3598  0022B2  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3599  0022B4  0E62               	movlw	high STR_35
  3600  0022B6  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3601  0022B8  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  3602                           
  3603                           ;main.c: 484: posicao_cursor_lcd(2,0);
  3604  0022BC  0E00               	movlw	0
  3605  0022BE  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
  3606  0022C0  0E02               	movlw	2
  3607  0022C2  EC6F  F025         	call	_posicao_cursor_lcd
  3608                           
  3609                           ;main.c: 485: escreve_frase_ram_lcd("B2:LTLO");
  3610  0022C6  0E32               	movlw	low STR_36
  3611  0022C8  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  3612  0022CA  0E62               	movlw	high STR_36
  3613  0022CC  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
  3614  0022CE  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  3615  0022D2                     l11987:
  3616                           
  3617                           ;main.c: 487: };main.c: 488: last_state = 4;
  3618  0022D2  0E04               	movlw	4
  3619  0022D4  6E3A               	movwf	troca_de_tela@last_state^0,c
  3620  0022D6  0012               	return		;funcret
  3621  0022D8                     __end_of_troca_de_tela:
  3622                           	callstack 0
  3623                           
  3624 ;; *************** function _disparo_gravacao *****************
  3625 ;; Defined at:
  3626 ;;		line 347 in file "main.c"
  3627 ;; Parameters:    Size  Location     Type
  3628 ;;		None
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;  fix_gps         2  147[BANK0 ] PTR unsigned char 
  3631 ;;		 -> rawFix(2), 
  3632 ;; Return value:  Size  Location     Type
  3633 ;;                  1    wreg      void 
  3634 ;; Registers used:
  3635 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3636 ;; Tracked objects:
  3637 ;;		On entry : 3F/0
  3638 ;;		On exit  : 3F/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3641 ;;      Params:         0       0       0       0       0       0       0       0       0
  3642 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3643 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3644 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3645 ;;Total ram usage:        3 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; Hardware stack levels required when called:   17
  3648 ;; This function calls:
  3649 ;;		_fix
  3650 ;;		_grava_sd
  3651 ;;		_verifica_fence_externo
  3652 ;; This function is called by:
  3653 ;;		_inicializa_tarefas
  3654 ;;		_escalonador
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           	psect	text13
  3659  004FCC                     __ptext13:
  3660                           	callstack 0
  3661  004FCC                     _disparo_gravacao:
  3662                           	callstack 12
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;main.c: 349: unsigned char *fix_gps;;main.c: 353: if(!time_sd)
  3666                           
  3667                           ;incstack = 0
  3668  004FCC  51FA               	movf	_time_sd& (0+255),w,b
  3669  004FCE  11FB               	iorwf	(_time_sd+1)& (0+255),w,b
  3670  004FD0  A4D8               	btfss	status,2,c
  3671  004FD2  0012               	return	
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;main.c: 354: {;main.c: 355: sinaliza_mcp2515.trigger = 0;
  3675  004FD4  903F               	bcf	_sinaliza_mcp2515^0,0,c
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;main.c: 356: fix_gps = fix();
  3679  004FD6  EC50  F02A         	call	_fix	;wreg free
  3680  004FDA  C019  F0F3         	movff	?_fix,disparo_gravacao@fix_gps
  3681  004FDE  C01A  F0F4         	movff	?_fix+1,disparo_gravacao@fix_gps+1
  3682                           
  3683                           ;main.c: 357: if(fix_gps[0] == '0')
  3684  004FE2  C0F3  FFD9         	movff	disparo_gravacao@fix_gps,fsr2l
  3685  004FE6  C0F4  FFDA         	movff	disparo_gravacao@fix_gps+1,fsr2h
  3686  004FEA  0E30               	movlw	48
  3687  004FEC  18DE               	xorwf	postinc2,w,c
  3688  004FEE  A4D8               	btfss	status,2,c
  3689  004FF0  D004               	goto	l11875
  3690                           
  3691                           ;main.c: 358: {;main.c: 359: verifica_fence_externo();
  3692  004FF2  ECA6  F024         	call	_verifica_fence_externo	;wreg free
  3693                           
  3694                           ;main.c: 360: grava_sd();
  3695  004FF6  ECD6  F029         	call	_grava_sd	;wreg free
  3696  004FFA                     l11875:
  3697                           
  3698                           ;main.c: 362: };main.c: 363: time_sd = 1000;
  3699  004FFA  0E03               	movlw	3
  3700  004FFC  0100               	movlb	0	; () banked
  3701  004FFE  6FFB               	movwf	(_time_sd+1)& (0+255),b
  3702  005000  0EE8               	movlw	232
  3703  005002  6FFA               	movwf	_time_sd& (0+255),b
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;main.c: 364: sinaliza_mcp2515.trigger = 1;
  3707  005004  803F               	bsf	_sinaliza_mcp2515^0,0,c
  3708                           
  3709                           ; BSR set to: 0
  3710  005006  0012               	return		;funcret
  3711  005008                     __end_of_disparo_gravacao:
  3712                           	callstack 0
  3713                           
  3714 ;; *************** function _verifica_dados_operacionais *****************
  3715 ;; Defined at:
  3716 ;;		line 321 in file "main.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;		None
  3719 ;; Auto vars:     Size  Location     Type
  3720 ;;  flag_gps        1    0        unsigned char 
  3721 ;; Return value:  Size  Location     Type
  3722 ;;                  1    wreg      void 
  3723 ;; Registers used:
  3724 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3725 ;; Tracked objects:
  3726 ;;		On entry : 3F/0
  3727 ;;		On exit  : 3F/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3730 ;;      Params:         0       0       0       0       0       0       0       0       0
  3731 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3732 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3733 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3734 ;;Total ram usage:        1 bytes
  3735 ;; Hardware stack levels used:    1
  3736 ;; Hardware stack levels required when called:    8
  3737 ;; This function calls:
  3738 ;;		___awtoft
  3739 ;;		___ftge
  3740 ;;		___ftmul
  3741 ;;		_atoi
  3742 ;;		_verifica_fence_externo
  3743 ;; This function is called by:
  3744 ;;		_inicializa_tarefas
  3745 ;;		_escalonador
  3746 ;; This function uses a non-reentrant model
  3747 ;;
  3748                           
  3749                           	psect	text14
  3750  0048E4                     __ptext14:
  3751                           	callstack 0
  3752  0048E4                     _verifica_dados_operacionais:
  3753                           	callstack 21
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;main.c: 326: if(sinaliza_mcp2515.trigger)
  3757                           
  3758                           ; BSR set to: 0
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;incstack = 0
  3762  0048E4  A03F               	btfss	_sinaliza_mcp2515^0,0,c
  3763  0048E6  0012               	return	
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;main.c: 327: {;main.c: 328: verifica_fence_externo();
  3767  0048E8  ECA6  F024         	call	_verifica_fence_externo	;wreg free
  3768                           
  3769                           ;main.c: 329: if((atoi(Speed)*1.852) > 50)
  3770  0048EC  0E00               	movlw	0
  3771  0048EE  0100               	movlb	0	; () banked
  3772  0048F0  6F69               	movwf	___ftge@ff1& (0+255),b
  3773  0048F2  0E48               	movlw	72
  3774  0048F4  6F6A               	movwf	(___ftge@ff1+1)& (0+255),b
  3775  0048F6  0E42               	movlw	66
  3776  0048F8  6F6B               	movwf	(___ftge@ff1+2)& (0+255),b
  3777  0048FA  0E0E               	movlw	14
  3778  0048FC  6E2D               	movwf	___ftmul@f2^0,c
  3779  0048FE  0EED               	movlw	237
  3780  004900  6E2E               	movwf	(___ftmul@f2+1)^0,c
  3781  004902  0E3F               	movlw	63
  3782  004904  6E2F               	movwf	(___ftmul@f2+2)^0,c
  3783  004906  0E00               	movlw	0
  3784  004908  6E1F               	movwf	atoi@s^0,c
  3785  00490A  0E00               	movlw	0
  3786  00490C  6E20               	movwf	(atoi@s+1)^0,c
  3787  00490E  EC36  F01E         	call	_atoi	;wreg free
  3788  004912  C01F  F026         	movff	?_atoi,___awtoft@c
  3789  004916  C020  F027         	movff	?_atoi+1,___awtoft@c+1
  3790  00491A  EC22  F028         	call	___awtoft	;wreg free
  3791  00491E  C026  F02A         	movff	?___awtoft,___ftmul@f1
  3792  004922  C027  F02B         	movff	?___awtoft+1,___ftmul@f1+1
  3793  004926  C028  F02C         	movff	?___awtoft+2,___ftmul@f1+2
  3794  00492A  EC47  F01D         	call	___ftmul	;wreg free
  3795  00492E  C02A  F06C         	movff	?___ftmul,___ftge@ff2
  3796  004932  C02B  F06D         	movff	?___ftmul+1,___ftge@ff2+1
  3797  004936  C02C  F06E         	movff	?___ftmul+2,___ftge@ff2+2
  3798  00493A  EC56  F023         	call	___ftge	;wreg free
  3799  00493E  B0D8               	btfsc	status,0,c
  3800  004940  0012               	return	
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;main.c: 330: {;main.c: 331: time_sd = 0;
  3804  004942  0E00               	movlw	0
  3805  004944  6FFB               	movwf	(_time_sd+1)& (0+255),b
  3806  004946  0E00               	movlw	0
  3807  004948  6FFA               	movwf	_time_sd& (0+255),b
  3808                           
  3809                           ; BSR set to: 0
  3810  00494A  0012               	return		;funcret
  3811  00494C                     __end_of_verifica_dados_operacionais:
  3812                           	callstack 0
  3813                           
  3814 ;; *************** function _atoi *****************
  3815 ;; Defined at:
  3816 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\atoi.c"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;  s               2   30[COMRAM] PTR const unsigned char 
  3819 ;; Auto vars:     Size  Location     Type
  3820 ;;  a               2   35[COMRAM] int 
  3821 ;;  sign            1   34[COMRAM] unsigned char 
  3822 ;; Return value:  Size  Location     Type
  3823 ;;                  2   30[COMRAM] int 
  3824 ;; Registers used:
  3825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3826 ;; Tracked objects:
  3827 ;;		On entry : 3F/0
  3828 ;;		On exit  : 0/0
  3829 ;;		Unchanged: 0/0
  3830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3831 ;;      Params:         2       0       0       0       0       0       0       0       0
  3832 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3833 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3834 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3835 ;;Total ram usage:        7 bytes
  3836 ;; Hardware stack levels used:    1
  3837 ;; Hardware stack levels required when called:    4
  3838 ;; This function calls:
  3839 ;;		___wmul
  3840 ;;		_isdigit
  3841 ;; This function is called by:
  3842 ;;		_verifica_dados_operacionais
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           	psect	text15
  3847  003C6C                     __ptext15:
  3848                           	callstack 0
  3849  003C6C                     _atoi:
  3850                           	callstack 24
  3851                           
  3852                           ; BSR set to: 0
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;incstack = 0
  3856  003C6C  D002               	goto	l11717
  3857  003C6E                     l11715:
  3858                           
  3859                           ; BSR set to: 0
  3860  003C6E  4A1F               	infsnz	atoi@s^0,f,c
  3861  003C70  2A20               	incf	(atoi@s+1)^0,f,c
  3862  003C72                     l11717:
  3863                           
  3864                           ; BSR set to: 0
  3865  003C72  C01F  FFD9         	movff	atoi@s,fsr2l
  3866  003C76  C020  FFDA         	movff	atoi@s+1,fsr2h
  3867  003C7A  0E20               	movlw	32
  3868  003C7C  18DE               	xorwf	postinc2,w,c
  3869  003C7E  B4D8               	btfsc	status,2,c
  3870  003C80  D7F6               	goto	l11715
  3871                           
  3872                           ; BSR set to: 0
  3873  003C82  C01F  FFD9         	movff	atoi@s,fsr2l
  3874  003C86  C020  FFDA         	movff	atoi@s+1,fsr2h
  3875  003C8A  0E09               	movlw	9
  3876  003C8C  18DE               	xorwf	postinc2,w,c
  3877  003C8E  B4D8               	btfsc	status,2,c
  3878  003C90  D7EE               	goto	l11715
  3879                           
  3880                           ; BSR set to: 0
  3881  003C92  0E00               	movlw	0
  3882  003C94  6E25               	movwf	(atoi@a+1)^0,c
  3883  003C96  0E00               	movlw	0
  3884  003C98  6E24               	movwf	atoi@a^0,c
  3885  003C9A  0E00               	movlw	0
  3886  003C9C  6E23               	movwf	atoi@sign^0,c
  3887                           
  3888                           ; BSR set to: 0
  3889  003C9E  C01F  FFD9         	movff	atoi@s,fsr2l
  3890  003CA2  C020  FFDA         	movff	atoi@s+1,fsr2h
  3891  003CA6  0E2D               	movlw	45
  3892  003CA8  18DE               	xorwf	postinc2,w,c
  3893  003CAA  A4D8               	btfss	status,2,c
  3894  003CAC  D002               	goto	l11727
  3895                           
  3896                           ; BSR set to: 0
  3897  003CAE  2A23               	incf	atoi@sign^0,f,c
  3898  003CB0  D023               	goto	l11733
  3899  003CB2                     l11727:
  3900                           
  3901                           ; BSR set to: 0
  3902  003CB2  C01F  FFD9         	movff	atoi@s,fsr2l
  3903  003CB6  C020  FFDA         	movff	atoi@s+1,fsr2h
  3904  003CBA  0E2B               	movlw	43
  3905  003CBC  18DE               	xorwf	postinc2,w,c
  3906  003CBE  A4D8               	btfss	status,2,c
  3907  003CC0  D01D               	goto	l11735
  3908  003CC2  D01A               	goto	l11733
  3909  003CC4                     l11731:
  3910  003CC4  C024  F019         	movff	atoi@a,___wmul@multiplier
  3911  003CC8  C025  F01A         	movff	atoi@a+1,___wmul@multiplier+1
  3912  003CCC  0E00               	movlw	0
  3913  003CCE  6E1C               	movwf	(___wmul@multiplicand+1)^0,c
  3914  003CD0  0E0A               	movlw	10
  3915  003CD2  6E1B               	movwf	___wmul@multiplicand^0,c
  3916  003CD4  ECC3  F028         	call	___wmul	;wreg free
  3917  003CD8  C01F  FFD9         	movff	atoi@s,fsr2l
  3918  003CDC  C020  FFDA         	movff	atoi@s+1,fsr2h
  3919  003CE0  50DF               	movf	indf2,w,c
  3920  003CE2  6E21               	movwf	??_atoi^0,c
  3921  003CE4  5021               	movf	??_atoi^0,w,c
  3922  003CE6  2619               	addwf	?___wmul^0,f,c
  3923  003CE8  0E00               	movlw	0
  3924  003CEA  221A               	addwfc	(?___wmul+1)^0,f,c
  3925  003CEC  0ED0               	movlw	208
  3926  003CEE  2419               	addwf	?___wmul^0,w,c
  3927  003CF0  6E24               	movwf	atoi@a^0,c
  3928  003CF2  0EFF               	movlw	255
  3929  003CF4  201A               	addwfc	(?___wmul+1)^0,w,c
  3930  003CF6  6E25               	movwf	(atoi@a+1)^0,c
  3931  003CF8                     l11733:
  3932  003CF8  4A1F               	infsnz	atoi@s^0,f,c
  3933  003CFA  2A20               	incf	(atoi@s+1)^0,f,c
  3934  003CFC                     l11735:
  3935  003CFC  C01F  FFD9         	movff	atoi@s,fsr2l
  3936  003D00  C020  FFDA         	movff	atoi@s+1,fsr2h
  3937  003D04  50DF               	movf	indf2,w,c
  3938  003D06  EC7F  F029         	call	_isdigit
  3939  003D0A  B0D8               	btfsc	status,0,c
  3940  003D0C  D7DB               	goto	l11731
  3941  003D0E  5023               	movf	atoi@sign^0,w,c
  3942  003D10  B4D8               	btfsc	status,2,c
  3943  003D12  D00D               	goto	l2231
  3944  003D14  C024  F021         	movff	atoi@a,??_atoi
  3945  003D18  C025  F022         	movff	atoi@a+1,??_atoi+1
  3946  003D1C  1E21               	comf	??_atoi^0,f,c
  3947  003D1E  1E22               	comf	(??_atoi+1)^0,f,c
  3948  003D20  4A21               	infsnz	??_atoi^0,f,c
  3949  003D22  2A22               	incf	(??_atoi+1)^0,f,c
  3950  003D24  C021  F01F         	movff	??_atoi,?_atoi
  3951  003D28  C022  F020         	movff	??_atoi+1,?_atoi+1
  3952  003D2C  0012               	return	
  3953  003D2E                     l2231:
  3954  003D2E  C024  F01F         	movff	atoi@a,?_atoi
  3955  003D32  C025  F020         	movff	atoi@a+1,?_atoi+1
  3956  003D36  0012               	return		;funcret
  3957  003D38                     __end_of_atoi:
  3958                           	callstack 0
  3959                           
  3960 ;; *************** function ___ftmul *****************
  3961 ;; Defined at:
  3962 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\ftmul.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;  f1              3   41[COMRAM] float 
  3965 ;;  f2              3   44[COMRAM] float 
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;  f3_as_produc    3    4[BANK0 ] unsigned um
  3968 ;;  sign            1    8[BANK0 ] unsigned char 
  3969 ;;  cntr            1    7[BANK0 ] unsigned char 
  3970 ;;  exp             1    3[BANK0 ] unsigned char 
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  3   41[COMRAM] float 
  3973 ;; Registers used:
  3974 ;;		wreg, status,2, status,0, cstack
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3980 ;;      Params:         6       0       0       0       0       0       0       0       0
  3981 ;;      Locals:         0       6       0       0       0       0       0       0       0
  3982 ;;      Temps:          0       3       0       0       0       0       0       0       0
  3983 ;;      Totals:         6       9       0       0       0       0       0       0       0
  3984 ;;Total ram usage:       15 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    4
  3987 ;; This function calls:
  3988 ;;		___ftpack
  3989 ;; This function is called by:
  3990 ;;		_verifica_dados_operacionais
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           	psect	text16
  3995  003A8E                     __ptext16:
  3996                           	callstack 0
  3997  003A8E                     ___ftmul:
  3998                           	callstack 24
  3999                           
  4000                           ;incstack = 0
  4001  003A8E  C02C  F060         	movff	___ftmul@f1+2,??___ftmul
  4002  003A92  0100               	movlb	0	; () banked
  4003  003A94  6B61               	clrf	(??___ftmul+1)& (0+255),b
  4004  003A96  6B62               	clrf	(??___ftmul+2)& (0+255),b
  4005  003A98  342B               	rlcf	(___ftmul@f1+1)^0,w,c
  4006  003A9A  3760               	rlcf	??___ftmul& (0+255),f,b
  4007  003A9C  E301               	bnc	u14131
  4008  003A9E  8161               	bsf	(??___ftmul+1)& (0+255),0,b
  4009  003AA0                     u14131:
  4010  003AA0  5160               	movf	??___ftmul& (0+255),w,b
  4011  003AA2  6F63               	movwf	___ftmul@exp& (0+255),b
  4012  003AA4  5163               	movf	___ftmul@exp& (0+255),w,b
  4013  003AA6  A4D8               	btfss	status,2,c
  4014  003AA8  D007               	goto	l11763
  4015                           
  4016                           ; BSR set to: 0
  4017  003AAA  0E00               	movlw	0
  4018  003AAC  6E2A               	movwf	?___ftmul^0,c
  4019  003AAE  0E00               	movlw	0
  4020  003AB0  6E2B               	movwf	(?___ftmul+1)^0,c
  4021  003AB2  0E00               	movlw	0
  4022  003AB4  6E2C               	movwf	(?___ftmul+2)^0,c
  4023  003AB6  0012               	return	
  4024  003AB8                     l11763:
  4025                           
  4026                           ; BSR set to: 0
  4027  003AB8  C02F  F060         	movff	___ftmul@f2+2,??___ftmul
  4028  003ABC  6B61               	clrf	(??___ftmul+1)& (0+255),b
  4029  003ABE  6B62               	clrf	(??___ftmul+2)& (0+255),b
  4030  003AC0  342E               	rlcf	(___ftmul@f2+1)^0,w,c
  4031  003AC2  3760               	rlcf	??___ftmul& (0+255),f,b
  4032  003AC4  E301               	bnc	u14151
  4033  003AC6  8161               	bsf	(??___ftmul+1)& (0+255),0,b
  4034  003AC8                     u14151:
  4035  003AC8  5160               	movf	??___ftmul& (0+255),w,b
  4036  003ACA  6F68               	movwf	___ftmul@sign& (0+255),b
  4037  003ACC  5168               	movf	___ftmul@sign& (0+255),w,b
  4038  003ACE  A4D8               	btfss	status,2,c
  4039  003AD0  D007               	goto	l11769
  4040                           
  4041                           ; BSR set to: 0
  4042  003AD2  0E00               	movlw	0
  4043  003AD4  6E2A               	movwf	?___ftmul^0,c
  4044  003AD6  0E00               	movlw	0
  4045  003AD8  6E2B               	movwf	(?___ftmul+1)^0,c
  4046  003ADA  0E00               	movlw	0
  4047  003ADC  6E2C               	movwf	(?___ftmul+2)^0,c
  4048  003ADE  0012               	return	
  4049  003AE0                     l11769:
  4050                           
  4051                           ; BSR set to: 0
  4052  003AE0  5168               	movf	___ftmul@sign& (0+255),w,b
  4053  003AE2  0F7B               	addlw	123
  4054  003AE4  2763               	addwf	___ftmul@exp& (0+255),f,b
  4055                           
  4056                           ; BSR set to: 0
  4057  003AE6  C02C  F068         	movff	___ftmul@f1+2,___ftmul@sign
  4058  003AEA  502F               	movf	(___ftmul@f2+2)^0,w,c
  4059  003AEC  1B68               	xorwf	___ftmul@sign& (0+255),f,b
  4060  003AEE  0E80               	movlw	128
  4061  003AF0  1768               	andwf	___ftmul@sign& (0+255),f,b
  4062                           
  4063                           ; BSR set to: 0
  4064  003AF2  8E2B               	bsf	(___ftmul@f1+1)^0,7,c
  4065                           
  4066                           ; BSR set to: 0
  4067  003AF4  8E2E               	bsf	(___ftmul@f2+1)^0,7,c
  4068                           
  4069                           ; BSR set to: 0
  4070  003AF6  0EFF               	movlw	255
  4071  003AF8  162D               	andwf	___ftmul@f2^0,f,c
  4072  003AFA  0EFF               	movlw	255
  4073  003AFC  162E               	andwf	(___ftmul@f2+1)^0,f,c
  4074  003AFE  0E00               	movlw	0
  4075  003B00  162F               	andwf	(___ftmul@f2+2)^0,f,c
  4076                           
  4077                           ; BSR set to: 0
  4078  003B02  0E00               	movlw	0
  4079  003B04  6F64               	movwf	___ftmul@f3_as_product& (0+255),b
  4080  003B06  0E00               	movlw	0
  4081  003B08  6F65               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4082  003B0A  0E00               	movlw	0
  4083  003B0C  6F66               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4084                           
  4085                           ; BSR set to: 0
  4086  003B0E  0E07               	movlw	7
  4087  003B10  6F67               	movwf	___ftmul@cntr& (0+255),b
  4088  003B12                     l11783:
  4089                           
  4090                           ; BSR set to: 0
  4091  003B12  A02A               	btfss	___ftmul@f1^0,0,c
  4092  003B14  D006               	goto	l11787
  4093                           
  4094                           ; BSR set to: 0
  4095  003B16  502D               	movf	___ftmul@f2^0,w,c
  4096  003B18  2764               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4097  003B1A  502E               	movf	(___ftmul@f2+1)^0,w,c
  4098  003B1C  2365               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4099  003B1E  502F               	movf	(___ftmul@f2+2)^0,w,c
  4100  003B20  2366               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4101  003B22                     l11787:
  4102                           
  4103                           ; BSR set to: 0
  4104  003B22  90D8               	bcf	status,0,c
  4105  003B24  322C               	rrcf	(___ftmul@f1+2)^0,f,c
  4106  003B26  322B               	rrcf	(___ftmul@f1+1)^0,f,c
  4107  003B28  322A               	rrcf	___ftmul@f1^0,f,c
  4108  003B2A  90D8               	bcf	status,0,c
  4109  003B2C  362D               	rlcf	___ftmul@f2^0,f,c
  4110  003B2E  362E               	rlcf	(___ftmul@f2+1)^0,f,c
  4111  003B30  362F               	rlcf	(___ftmul@f2+2)^0,f,c
  4112                           
  4113                           ; BSR set to: 0
  4114  003B32  2F67               	decfsz	___ftmul@cntr& (0+255),f,b
  4115  003B34  D7EE               	goto	l11783
  4116                           
  4117                           ; BSR set to: 0
  4118  003B36  0E09               	movlw	9
  4119  003B38  6F67               	movwf	___ftmul@cntr& (0+255),b
  4120  003B3A                     l11793:
  4121                           
  4122                           ; BSR set to: 0
  4123  003B3A  A02A               	btfss	___ftmul@f1^0,0,c
  4124  003B3C  D006               	goto	l11797
  4125                           
  4126                           ; BSR set to: 0
  4127  003B3E  502D               	movf	___ftmul@f2^0,w,c
  4128  003B40  2764               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4129  003B42  502E               	movf	(___ftmul@f2+1)^0,w,c
  4130  003B44  2365               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4131  003B46  502F               	movf	(___ftmul@f2+2)^0,w,c
  4132  003B48  2366               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4133  003B4A                     l11797:
  4134                           
  4135                           ; BSR set to: 0
  4136  003B4A  90D8               	bcf	status,0,c
  4137  003B4C  322C               	rrcf	(___ftmul@f1+2)^0,f,c
  4138  003B4E  322B               	rrcf	(___ftmul@f1+1)^0,f,c
  4139  003B50  322A               	rrcf	___ftmul@f1^0,f,c
  4140  003B52  90D8               	bcf	status,0,c
  4141  003B54  3366               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4142  003B56  3365               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4143  003B58  3364               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4144                           
  4145                           ; BSR set to: 0
  4146  003B5A  2F67               	decfsz	___ftmul@cntr& (0+255),f,b
  4147  003B5C  D7EE               	goto	l11793
  4148                           
  4149                           ; BSR set to: 0
  4150  003B5E  C064  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
  4151  003B62  C065  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4152  003B66  C066  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4153  003B6A  C063  F01C         	movff	___ftmul@exp,___ftpack@exp
  4154  003B6E  C068  F01D         	movff	___ftmul@sign,___ftpack@sign
  4155  003B72  EC5B  F01F         	call	___ftpack	;wreg free
  4156  003B76  C019  F02A         	movff	?___ftpack,?___ftmul
  4157  003B7A  C01A  F02B         	movff	?___ftpack+1,?___ftmul+1
  4158  003B7E  C01B  F02C         	movff	?___ftpack+2,?___ftmul+2
  4159  003B82  0012               	return		;funcret
  4160  003B84                     __end_of___ftmul:
  4161                           	callstack 0
  4162                           
  4163 ;; *************** function ___ftge *****************
  4164 ;; Defined at:
  4165 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\ftge.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;  ff1             3    9[BANK0 ] float 
  4168 ;;  ff2             3   12[BANK0 ] float 
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;		None
  4171 ;; Return value:  Size  Location     Type
  4172 ;;		None               void
  4173 ;; Registers used:
  4174 ;;		wreg, status,2, status,0
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 3F/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4180 ;;      Params:         0       6       0       0       0       0       0       0       0
  4181 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4182 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4183 ;;      Totals:         0       9       0       0       0       0       0       0       0
  4184 ;;Total ram usage:        9 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    3
  4187 ;; This function calls:
  4188 ;;		Nothing
  4189 ;; This function is called by:
  4190 ;;		_verifica_dados_operacionais
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text17
  4195  0046AC                     __ptext17:
  4196                           	callstack 0
  4197  0046AC                     ___ftge:
  4198                           	callstack 25
  4199                           
  4200                           ;incstack = 0
  4201  0046AC  0100               	movlb	0	; () banked
  4202  0046AE  AF6B               	btfss	(___ftge@ff1+2)& (0+255),7,b
  4203  0046B0  D00F               	goto	l11821
  4204                           
  4205                           ; BSR set to: 0
  4206  0046B2  0E00               	movlw	0
  4207  0046B4  6F6F               	movwf	??___ftge& (0+255),b
  4208  0046B6  0E00               	movlw	0
  4209  0046B8  6F70               	movwf	(??___ftge+1)& (0+255),b
  4210  0046BA  0E80               	movlw	128
  4211  0046BC  6F71               	movwf	(??___ftge+2)& (0+255),b
  4212  0046BE  5169               	movf	___ftge@ff1& (0+255),w,b
  4213  0046C0  5D6F               	subwf	??___ftge& (0+255),w,b
  4214  0046C2  6F69               	movwf	___ftge@ff1& (0+255),b
  4215  0046C4  516A               	movf	(___ftge@ff1+1)& (0+255),w,b
  4216  0046C6  5970               	subwfb	(??___ftge+1)& (0+255),w,b
  4217  0046C8  6F6A               	movwf	(___ftge@ff1+1)& (0+255),b
  4218  0046CA  516B               	movf	(___ftge@ff1+2)& (0+255),w,b
  4219  0046CC  5971               	subwfb	(??___ftge+2)& (0+255),w,b
  4220  0046CE  6F6B               	movwf	(___ftge@ff1+2)& (0+255),b
  4221  0046D0                     l11821:
  4222                           
  4223                           ; BSR set to: 0
  4224  0046D0  AF6E               	btfss	(___ftge@ff2+2)& (0+255),7,b
  4225  0046D2  D00F               	goto	l11825
  4226                           
  4227                           ; BSR set to: 0
  4228  0046D4  0E00               	movlw	0
  4229  0046D6  6F6F               	movwf	??___ftge& (0+255),b
  4230  0046D8  0E00               	movlw	0
  4231  0046DA  6F70               	movwf	(??___ftge+1)& (0+255),b
  4232  0046DC  0E80               	movlw	128
  4233  0046DE  6F71               	movwf	(??___ftge+2)& (0+255),b
  4234  0046E0  516C               	movf	___ftge@ff2& (0+255),w,b
  4235  0046E2  5D6F               	subwf	??___ftge& (0+255),w,b
  4236  0046E4  6F6C               	movwf	___ftge@ff2& (0+255),b
  4237  0046E6  516D               	movf	(___ftge@ff2+1)& (0+255),w,b
  4238  0046E8  5970               	subwfb	(??___ftge+1)& (0+255),w,b
  4239  0046EA  6F6D               	movwf	(___ftge@ff2+1)& (0+255),b
  4240  0046EC  516E               	movf	(___ftge@ff2+2)& (0+255),w,b
  4241  0046EE  5971               	subwfb	(??___ftge+2)& (0+255),w,b
  4242  0046F0  6F6E               	movwf	(___ftge@ff2+2)& (0+255),b
  4243  0046F2                     l11825:
  4244                           
  4245                           ; BSR set to: 0
  4246  0046F2  0E00               	movlw	0
  4247  0046F4  1B69               	xorwf	___ftge@ff1& (0+255),f,b
  4248  0046F6  0E00               	movlw	0
  4249  0046F8  1B6A               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  4250  0046FA  0E80               	movlw	128
  4251  0046FC  1B6B               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  4252                           
  4253                           ; BSR set to: 0
  4254  0046FE  0E00               	movlw	0
  4255  004700  1B6C               	xorwf	___ftge@ff2& (0+255),f,b
  4256  004702  0E00               	movlw	0
  4257  004704  1B6D               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  4258  004706  0E80               	movlw	128
  4259  004708  1B6E               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  4260  00470A  516C               	movf	___ftge@ff2& (0+255),w,b
  4261  00470C  5D69               	subwf	___ftge@ff1& (0+255),w,b
  4262  00470E  516D               	movf	(___ftge@ff2+1)& (0+255),w,b
  4263  004710  596A               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  4264  004712  516E               	movf	(___ftge@ff2+2)& (0+255),w,b
  4265  004714  596B               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  4266  004716  B0D8               	btfsc	status,0,c
  4267  004718  D002               	goto	l11831
  4268                           
  4269                           ; BSR set to: 0
  4270  00471A  90D8               	bcf	status,0,c
  4271  00471C  0012               	return	
  4272  00471E                     l11831:
  4273                           
  4274                           ; BSR set to: 0
  4275  00471E  80D8               	bsf	status,0,c
  4276                           
  4277                           ; BSR set to: 0
  4278  004720  0012               	return		;funcret
  4279  004722                     __end_of___ftge:
  4280                           	callstack 0
  4281                           
  4282 ;; *************** function ___awtoft *****************
  4283 ;; Defined at:
  4284 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\awtoft.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  c               2   37[COMRAM] int 
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;  sign            1   40[COMRAM] unsigned char 
  4289 ;; Return value:  Size  Location     Type
  4290 ;;                  3   37[COMRAM] float 
  4291 ;; Registers used:
  4292 ;;		wreg, status,2, status,0, cstack
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4298 ;;      Params:         3       0       0       0       0       0       0       0       0
  4299 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4300 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4301 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4302 ;;Total ram usage:        4 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    4
  4305 ;; This function calls:
  4306 ;;		___ftpack
  4307 ;; This function is called by:
  4308 ;;		_verifica_dados_operacionais
  4309 ;; This function uses a non-reentrant model
  4310 ;;
  4311                           
  4312                           	psect	text18
  4313  005044                     __ptext18:
  4314                           	callstack 0
  4315  005044                     ___awtoft:
  4316                           	callstack 24
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;incstack = 0
  4320  005044  0E00               	movlw	0
  4321  005046  6E29               	movwf	___awtoft@sign^0,c
  4322  005048  AE27               	btfss	(___awtoft@c+1)^0,7,c
  4323  00504A  D006               	goto	l11813
  4324  00504C  6C26               	negf	___awtoft@c^0,c
  4325  00504E  1E27               	comf	(___awtoft@c+1)^0,f,c
  4326  005050  B0D8               	btfsc	status,0,c
  4327  005052  2A27               	incf	(___awtoft@c+1)^0,f,c
  4328  005054  0E01               	movlw	1
  4329  005056  6E29               	movwf	___awtoft@sign^0,c
  4330  005058                     l11813:
  4331  005058  C026  F019         	movff	___awtoft@c,___ftpack@arg
  4332  00505C  C027  F01A         	movff	___awtoft@c+1,___ftpack@arg+1
  4333  005060  6A1B               	clrf	(___ftpack@arg+2)^0,c
  4334  005062  0E8E               	movlw	142
  4335  005064  6E1C               	movwf	___ftpack@exp^0,c
  4336  005066  C029  F01D         	movff	___awtoft@sign,___ftpack@sign
  4337  00506A  EC5B  F01F         	call	___ftpack	;wreg free
  4338  00506E  C019  F026         	movff	?___ftpack,?___awtoft
  4339  005072  C01A  F027         	movff	?___ftpack+1,?___awtoft+1
  4340  005076  C01B  F028         	movff	?___ftpack+2,?___awtoft+2
  4341  00507A  0012               	return		;funcret
  4342  00507C                     __end_of___awtoft:
  4343                           	callstack 0
  4344                           
  4345 ;; *************** function ___ftpack *****************
  4346 ;; Defined at:
  4347 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\float.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;  arg             3   24[COMRAM] unsigned um
  4350 ;;  exp             1   27[COMRAM] unsigned char 
  4351 ;;  sign            1   28[COMRAM] unsigned char 
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;		None
  4354 ;; Return value:  Size  Location     Type
  4355 ;;                  3   24[COMRAM] float 
  4356 ;; Registers used:
  4357 ;;		wreg, status,2, status,0
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4363 ;;      Params:         5       0       0       0       0       0       0       0       0
  4364 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4365 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4366 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4367 ;;Total ram usage:        8 bytes
  4368 ;; Hardware stack levels used:    1
  4369 ;; Hardware stack levels required when called:    3
  4370 ;; This function calls:
  4371 ;;		Nothing
  4372 ;; This function is called by:
  4373 ;;		___awtoft
  4374 ;;		___ftmul
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           	psect	text19
  4379  003EB6                     __ptext19:
  4380                           	callstack 0
  4381  003EB6                     ___ftpack:
  4382                           	callstack 24
  4383                           
  4384                           ;incstack = 0
  4385  003EB6  501C               	movf	___ftpack@exp^0,w,c
  4386  003EB8  B4D8               	btfsc	status,2,c
  4387  003EBA  D005               	goto	u13860
  4388  003EBC  5019               	movf	___ftpack@arg^0,w,c
  4389  003EBE  101A               	iorwf	(___ftpack@arg+1)^0,w,c
  4390  003EC0  101B               	iorwf	(___ftpack@arg+2)^0,w,c
  4391  003EC2  A4D8               	btfss	status,2,c
  4392  003EC4  D00C               	goto	l11623
  4393  003EC6                     u13860:
  4394  003EC6  0E00               	movlw	0
  4395  003EC8  6E19               	movwf	?___ftpack^0,c
  4396  003ECA  0E00               	movlw	0
  4397  003ECC  6E1A               	movwf	(?___ftpack+1)^0,c
  4398  003ECE  0E00               	movlw	0
  4399  003ED0  6E1B               	movwf	(?___ftpack+2)^0,c
  4400  003ED2  0012               	return	
  4401  003ED4                     l11621:
  4402  003ED4  2A1C               	incf	___ftpack@exp^0,f,c
  4403  003ED6  90D8               	bcf	status,0,c
  4404  003ED8  321B               	rrcf	(___ftpack@arg+2)^0,f,c
  4405  003EDA  321A               	rrcf	(___ftpack@arg+1)^0,f,c
  4406  003EDC  3219               	rrcf	___ftpack@arg^0,f,c
  4407  003EDE                     l11623:
  4408  003EDE  0E00               	movlw	0
  4409  003EE0  1419               	andwf	___ftpack@arg^0,w,c
  4410  003EE2  6E1E               	movwf	??___ftpack^0,c
  4411  003EE4  0E00               	movlw	0
  4412  003EE6  141A               	andwf	(___ftpack@arg+1)^0,w,c
  4413  003EE8  6E1F               	movwf	(??___ftpack+1)^0,c
  4414  003EEA  0EFE               	movlw	254
  4415  003EEC  141B               	andwf	(___ftpack@arg+2)^0,w,c
  4416  003EEE  6E20               	movwf	(??___ftpack+2)^0,c
  4417  003EF0  501E               	movf	??___ftpack^0,w,c
  4418  003EF2  101F               	iorwf	(??___ftpack+1)^0,w,c
  4419  003EF4  1020               	iorwf	(??___ftpack+2)^0,w,c
  4420  003EF6  B4D8               	btfsc	status,2,c
  4421  003EF8  D00C               	goto	l11629
  4422  003EFA  D7EC               	goto	l11621
  4423  003EFC                     l11625:
  4424  003EFC  2A1C               	incf	___ftpack@exp^0,f,c
  4425  003EFE  0E01               	movlw	1
  4426  003F00  2619               	addwf	___ftpack@arg^0,f,c
  4427  003F02  0E00               	movlw	0
  4428  003F04  221A               	addwfc	(___ftpack@arg+1)^0,f,c
  4429  003F06  0E00               	movlw	0
  4430  003F08  221B               	addwfc	(___ftpack@arg+2)^0,f,c
  4431  003F0A  90D8               	bcf	status,0,c
  4432  003F0C  321B               	rrcf	(___ftpack@arg+2)^0,f,c
  4433  003F0E  321A               	rrcf	(___ftpack@arg+1)^0,f,c
  4434  003F10  3219               	rrcf	___ftpack@arg^0,f,c
  4435  003F12                     l11629:
  4436  003F12  0E00               	movlw	0
  4437  003F14  1419               	andwf	___ftpack@arg^0,w,c
  4438  003F16  6E1E               	movwf	??___ftpack^0,c
  4439  003F18  0E00               	movlw	0
  4440  003F1A  141A               	andwf	(___ftpack@arg+1)^0,w,c
  4441  003F1C  6E1F               	movwf	(??___ftpack+1)^0,c
  4442  003F1E  0EFF               	movlw	255
  4443  003F20  141B               	andwf	(___ftpack@arg+2)^0,w,c
  4444  003F22  6E20               	movwf	(??___ftpack+2)^0,c
  4445  003F24  501E               	movf	??___ftpack^0,w,c
  4446  003F26  101F               	iorwf	(??___ftpack+1)^0,w,c
  4447  003F28  1020               	iorwf	(??___ftpack+2)^0,w,c
  4448  003F2A  B4D8               	btfsc	status,2,c
  4449  003F2C  D006               	goto	l11633
  4450  003F2E  D7E6               	goto	l11625
  4451  003F30                     l11631:
  4452  003F30  061C               	decf	___ftpack@exp^0,f,c
  4453  003F32  90D8               	bcf	status,0,c
  4454  003F34  3619               	rlcf	___ftpack@arg^0,f,c
  4455  003F36  361A               	rlcf	(___ftpack@arg+1)^0,f,c
  4456  003F38  361B               	rlcf	(___ftpack@arg+2)^0,f,c
  4457  003F3A                     l11633:
  4458  003F3A  BE1A               	btfsc	(___ftpack@arg+1)^0,7,c
  4459  003F3C  D003               	goto	u13900
  4460  003F3E  0E02               	movlw	2
  4461  003F40  601C               	cpfslt	___ftpack@exp^0,c
  4462  003F42  D7F6               	goto	l11631
  4463  003F44                     u13900:
  4464  003F44  A01C               	btfss	___ftpack@exp^0,0,c
  4465  003F46  9E1A               	bcf	(___ftpack@arg+1)^0,7,c
  4466  003F48  90D8               	bcf	status,0,c
  4467  003F4A  321C               	rrcf	___ftpack@exp^0,f,c
  4468  003F4C  501C               	movf	___ftpack@exp^0,w,c
  4469  003F4E  121B               	iorwf	(___ftpack@arg+2)^0,f,c
  4470  003F50  501D               	movf	___ftpack@sign^0,w,c
  4471  003F52  A4D8               	btfss	status,2,c
  4472  003F54  8E1B               	bsf	(___ftpack@arg+2)^0,7,c
  4473  003F56  C019  F019         	movff	___ftpack@arg,?___ftpack
  4474  003F5A  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
  4475  003F5E  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
  4476  003F62  0012               	return		;funcret
  4477  003F64                     __end_of___ftpack:
  4478                           	callstack 0
  4479                           
  4480 ;; *************** function _escreve_inteiro_lcd *****************
  4481 ;; Defined at:
  4482 ;;		line 376 in file "bibliotecas/display_lcd.c"
  4483 ;; Parameters:    Size  Location     Type
  4484 ;;  valor           4    8[BANK0 ] long 
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;  texto           7   12[BANK0 ] unsigned char [7]
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  1    wreg      void 
  4489 ;; Registers used:
  4490 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4491 ;; Tracked objects:
  4492 ;;		On entry : 3F/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4496 ;;      Params:         0       4       0       0       0       0       0       0       0
  4497 ;;      Locals:         0       7       0       0       0       0       0       0       0
  4498 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4499 ;;      Totals:         0      11       0       0       0       0       0       0       0
  4500 ;;Total ram usage:       11 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    6
  4503 ;; This function calls:
  4504 ;;		_escreve_frase_ram_lcd
  4505 ;;		_ltoa
  4506 ;; This function is called by:
  4507 ;;		_troca_de_tela
  4508 ;; This function uses a non-reentrant model
  4509 ;;
  4510                           
  4511                           	psect	text20
  4512  004F8E                     __ptext20:
  4513                           	callstack 0
  4514  004F8E                     _escreve_inteiro_lcd:
  4515                           	callstack 22
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;display_lcd.c: 378: char texto[7] = "000000";
  4519                           
  4520                           ;incstack = 0
  4521  004F8E  EE21  F0E0         	lfsr	2,escreve_inteiro_lcd@F3223
  4522  004F92  EE10  F06C         	lfsr	1,escreve_inteiro_lcd@texto
  4523  004F96  0E06               	movlw	6
  4524  004F98                     u14041:
  4525  004F98  CFDB FFE3          	movff	plusw2,plusw1
  4526  004F9C  06E8               	decf	wreg,f,c
  4527  004F9E  E2FC               	bc	u14041
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;display_lcd.c: 379: ltoa(texto,valor, 10);
  4531  004FA0  0E6C               	movlw	low escreve_inteiro_lcd@texto
  4532  004FA2  6F60               	movwf	ltoa@buf& (0+255),b
  4533  004FA4  C068  F061         	movff	escreve_inteiro_lcd@valor,ltoa@val
  4534  004FA8  C069  F062         	movff	escreve_inteiro_lcd@valor+1,ltoa@val+1
  4535  004FAC  C06A  F063         	movff	escreve_inteiro_lcd@valor+2,ltoa@val+2
  4536  004FB0  C06B  F064         	movff	escreve_inteiro_lcd@valor+3,ltoa@val+3
  4537  004FB4  0E00               	movlw	0
  4538  004FB6  6F66               	movwf	(ltoa@base+1)& (0+255),b
  4539  004FB8  0E0A               	movlw	10
  4540  004FBA  6F65               	movwf	ltoa@base& (0+255),b
  4541  004FBC  EC65  F027         	call	_ltoa	;wreg free
  4542                           
  4543                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
  4544  004FC0  0E6C               	movlw	low escreve_inteiro_lcd@texto
  4545  004FC2  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
  4546  004FC4  6A1D               	clrf	(escreve_frase_ram_lcd@buffer+1)^0,c
  4547  004FC6  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
  4548  004FCA  0012               	return		;funcret
  4549  004FCC                     __end_of_escreve_inteiro_lcd:
  4550                           	callstack 0
  4551                           
  4552 ;; *************** function _ltoa *****************
  4553 ;; Defined at:
  4554 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\ltoa.c"
  4555 ;; Parameters:    Size  Location     Type
  4556 ;;  buf             1    0[BANK0 ] PTR unsigned char 
  4557 ;;		 -> escreve_inteiro_lcd@texto(7), 
  4558 ;;  val             4    1[BANK0 ] long 
  4559 ;;  base            2    5[BANK0 ] int 
  4560 ;; Auto vars:     Size  Location     Type
  4561 ;;  cp              1    0        PTR unsigned char 
  4562 ;;		 -> escreve_inteiro_lcd@texto(7), 
  4563 ;; Return value:  Size  Location     Type
  4564 ;;                  1    wreg      PTR unsigned char 
  4565 ;; Registers used:
  4566 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4567 ;; Tracked objects:
  4568 ;;		On entry : 3F/0
  4569 ;;		On exit  : 0/0
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4572 ;;      Params:         0       7       0       0       0       0       0       0       0
  4573 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4574 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4575 ;;      Totals:         0       8       0       0       0       0       0       0       0
  4576 ;;Total ram usage:        8 bytes
  4577 ;; Hardware stack levels used:    1
  4578 ;; Hardware stack levels required when called:    5
  4579 ;; This function calls:
  4580 ;;		_ultoa
  4581 ;; This function is called by:
  4582 ;;		_escreve_inteiro_lcd
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586                           	psect	text21
  4587  004ECA                     __ptext21:
  4588                           	callstack 0
  4589  004ECA                     _ltoa:
  4590                           	callstack 22
  4591                           
  4592                           ; BSR set to: 0
  4593                           
  4594                           ;incstack = 0
  4595  004ECA  AF64               	btfss	(ltoa@val+3)& (0+255),7,b
  4596  004ECC  D00E               	goto	l11441
  4597                           
  4598                           ; BSR set to: 0
  4599  004ECE  5160               	movf	ltoa@buf& (0+255),w,b
  4600  004ED0  6ED9               	movwf	fsr2l,c
  4601  004ED2  6ADA               	clrf	fsr2h,c
  4602  004ED4  0E2D               	movlw	45
  4603  004ED6  6EDF               	movwf	indf2,c
  4604                           
  4605                           ; BSR set to: 0
  4606  004ED8  2B60               	incf	ltoa@buf& (0+255),f,b
  4607                           
  4608                           ; BSR set to: 0
  4609  004EDA  1F64               	comf	(ltoa@val+3)& (0+255),f,b
  4610  004EDC  1F63               	comf	(ltoa@val+2)& (0+255),f,b
  4611  004EDE  1F62               	comf	(ltoa@val+1)& (0+255),f,b
  4612  004EE0  6D61               	negf	ltoa@val& (0+255),b
  4613  004EE2  0E00               	movlw	0
  4614  004EE4  2362               	addwfc	(ltoa@val+1)& (0+255),f,b
  4615  004EE6  2363               	addwfc	(ltoa@val+2)& (0+255),f,b
  4616  004EE8  2364               	addwfc	(ltoa@val+3)& (0+255),f,b
  4617  004EEA                     l11441:
  4618                           
  4619                           ; BSR set to: 0
  4620  004EEA  C060  F026         	movff	ltoa@buf,ultoa@buf
  4621  004EEE  C061  F027         	movff	ltoa@val,ultoa@val
  4622  004EF2  C062  F028         	movff	ltoa@val+1,ultoa@val+1
  4623  004EF6  C063  F029         	movff	ltoa@val+2,ultoa@val+2
  4624  004EFA  C064  F02A         	movff	ltoa@val+3,ultoa@val+3
  4625  004EFE  C065  F02B         	movff	ltoa@base,ultoa@base
  4626  004F02  C066  F02C         	movff	ltoa@base+1,ultoa@base+1
  4627  004F06  ECC2  F01D         	call	_ultoa	;wreg free
  4628  004F0A  0012               	return		;funcret
  4629  004F0C                     __end_of_ltoa:
  4630                           	callstack 0
  4631                           
  4632 ;; *************** function _ultoa *****************
  4633 ;; Defined at:
  4634 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\ltoa.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;  buf             1   37[COMRAM] PTR unsigned char 
  4637 ;;		 -> escreve_inteiro_lcd@texto(7), 
  4638 ;;  val             4   38[COMRAM] unsigned long 
  4639 ;;  base            2   42[COMRAM] int 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  v               4   44[COMRAM] unsigned long 
  4642 ;;  c               1   48[COMRAM] unsigned char 
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  1    wreg      PTR unsigned char 
  4645 ;; Registers used:
  4646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4647 ;; Tracked objects:
  4648 ;;		On entry : 3F/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4652 ;;      Params:         7       0       0       0       0       0       0       0       0
  4653 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4654 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4655 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4656 ;;Total ram usage:       12 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; Hardware stack levels required when called:    4
  4659 ;; This function calls:
  4660 ;;		___lldiv
  4661 ;;		___llmod
  4662 ;; This function is called by:
  4663 ;;		_ltoa
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           	psect	text22
  4668  003B84                     __ptext22:
  4669                           	callstack 0
  4670  003B84                     _ultoa:
  4671                           	callstack 22
  4672                           
  4673                           ; BSR set to: 0
  4674                           
  4675                           ;incstack = 0
  4676  003B84  C027  F02D         	movff	ultoa@val,ultoa@v
  4677  003B88  C028  F02E         	movff	ultoa@val+1,ultoa@v+1
  4678  003B8C  C029  F02F         	movff	ultoa@val+2,ultoa@v+2
  4679  003B90  C02A  F030         	movff	ultoa@val+3,ultoa@v+3
  4680  003B94                     l11409:
  4681  003B94  C02D  F019         	movff	ultoa@v,___lldiv@dividend
  4682  003B98  C02E  F01A         	movff	ultoa@v+1,___lldiv@dividend+1
  4683  003B9C  C02F  F01B         	movff	ultoa@v+2,___lldiv@dividend+2
  4684  003BA0  C030  F01C         	movff	ultoa@v+3,___lldiv@dividend+3
  4685  003BA4  C02B  F01D         	movff	ultoa@base,___lldiv@divisor
  4686  003BA8  C02C  F01E         	movff	ultoa@base+1,___lldiv@divisor+1
  4687  003BAC  0E00               	movlw	0
  4688  003BAE  BE1E               	btfsc	(___lldiv@divisor+1)^0,7,c
  4689  003BB0  0EFF               	movlw	-1
  4690  003BB2  6E1F               	movwf	(___lldiv@divisor+2)^0,c
  4691  003BB4  6E20               	movwf	(___lldiv@divisor+3)^0,c
  4692  003BB6  EC15  F023         	call	___lldiv	;wreg free
  4693  003BBA  C019  F02D         	movff	?___lldiv,ultoa@v
  4694  003BBE  C01A  F02E         	movff	?___lldiv+1,ultoa@v+1
  4695  003BC2  C01B  F02F         	movff	?___lldiv+2,ultoa@v+2
  4696  003BC6  C01C  F030         	movff	?___lldiv+3,ultoa@v+3
  4697  003BCA  2A26               	incf	ultoa@buf^0,f,c
  4698  003BCC  502D               	movf	ultoa@v^0,w,c
  4699  003BCE  102E               	iorwf	(ultoa@v+1)^0,w,c
  4700  003BD0  102F               	iorwf	(ultoa@v+2)^0,w,c
  4701  003BD2  1030               	iorwf	(ultoa@v+3)^0,w,c
  4702  003BD4  A4D8               	btfss	status,2,c
  4703  003BD6  D7DE               	goto	l11409
  4704  003BD8  5026               	movf	ultoa@buf^0,w,c
  4705  003BDA  6ED9               	movwf	fsr2l,c
  4706  003BDC  6ADA               	clrf	fsr2h,c
  4707  003BDE  0E00               	movlw	0
  4708  003BE0  6EDF               	movwf	indf2,c
  4709  003BE2  0626               	decf	ultoa@buf^0,f,c
  4710  003BE4                     l11419:
  4711  003BE4  C027  F019         	movff	ultoa@val,___llmod@dividend
  4712  003BE8  C028  F01A         	movff	ultoa@val+1,___llmod@dividend+1
  4713  003BEC  C029  F01B         	movff	ultoa@val+2,___llmod@dividend+2
  4714  003BF0  C02A  F01C         	movff	ultoa@val+3,___llmod@dividend+3
  4715  003BF4  C02B  F01D         	movff	ultoa@base,___llmod@divisor
  4716  003BF8  C02C  F01E         	movff	ultoa@base+1,___llmod@divisor+1
  4717  003BFC  0E00               	movlw	0
  4718  003BFE  BE1E               	btfsc	(___llmod@divisor+1)^0,7,c
  4719  003C00  0EFF               	movlw	-1
  4720  003C02  6E1F               	movwf	(___llmod@divisor+2)^0,c
  4721  003C04  6E20               	movwf	(___llmod@divisor+3)^0,c
  4722  003C06  ECDA  F024         	call	___llmod	;wreg free
  4723  003C0A  5019               	movf	?___llmod^0,w,c
  4724  003C0C  6E31               	movwf	ultoa@c^0,c
  4725  003C0E  C027  F019         	movff	ultoa@val,___lldiv@dividend
  4726  003C12  C028  F01A         	movff	ultoa@val+1,___lldiv@dividend+1
  4727  003C16  C029  F01B         	movff	ultoa@val+2,___lldiv@dividend+2
  4728  003C1A  C02A  F01C         	movff	ultoa@val+3,___lldiv@dividend+3
  4729  003C1E  C02B  F01D         	movff	ultoa@base,___lldiv@divisor
  4730  003C22  C02C  F01E         	movff	ultoa@base+1,___lldiv@divisor+1
  4731  003C26  0E00               	movlw	0
  4732  003C28  BE1E               	btfsc	(___lldiv@divisor+1)^0,7,c
  4733  003C2A  0EFF               	movlw	-1
  4734  003C2C  6E1F               	movwf	(___lldiv@divisor+2)^0,c
  4735  003C2E  6E20               	movwf	(___lldiv@divisor+3)^0,c
  4736  003C30  EC15  F023         	call	___lldiv	;wreg free
  4737  003C34  C019  F027         	movff	?___lldiv,ultoa@val
  4738  003C38  C01A  F028         	movff	?___lldiv+1,ultoa@val+1
  4739  003C3C  C01B  F029         	movff	?___lldiv+2,ultoa@val+2
  4740  003C40  C01C  F02A         	movff	?___lldiv+3,ultoa@val+3
  4741  003C44  0E09               	movlw	9
  4742  003C46  6431               	cpfsgt	ultoa@c^0,c
  4743  003C48  D002               	goto	l2277
  4744  003C4A  0E07               	movlw	7
  4745  003C4C  2631               	addwf	ultoa@c^0,f,c
  4746  003C4E                     l2277:
  4747  003C4E  0E30               	movlw	48
  4748  003C50  2631               	addwf	ultoa@c^0,f,c
  4749  003C52  5026               	movf	ultoa@buf^0,w,c
  4750  003C54  6ED9               	movwf	fsr2l,c
  4751  003C56  6ADA               	clrf	fsr2h,c
  4752  003C58  C031  FFDF         	movff	ultoa@c,indf2
  4753  003C5C  0626               	decf	ultoa@buf^0,f,c
  4754  003C5E  5027               	movf	ultoa@val^0,w,c
  4755  003C60  1028               	iorwf	(ultoa@val+1)^0,w,c
  4756  003C62  1029               	iorwf	(ultoa@val+2)^0,w,c
  4757  003C64  102A               	iorwf	(ultoa@val+3)^0,w,c
  4758  003C66  B4D8               	btfsc	status,2,c
  4759  003C68  0012               	return	
  4760  003C6A  D7BC               	goto	l11419
  4761  003C6C                     __end_of_ultoa:
  4762                           	callstack 0
  4763                           
  4764 ;; *************** function _escreve_cmd_lcd *****************
  4765 ;; Defined at:
  4766 ;;		line 162 in file "bibliotecas/display_lcd.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;  comando         1    wreg     unsigned char 
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;  comando         1   26[COMRAM] unsigned char 
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  1    wreg      void 
  4773 ;; Registers used:
  4774 ;;		wreg, status,2, status,0, cstack
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4780 ;;      Params:         0       0       0       0       0       0       0       0       0
  4781 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4783 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4784 ;;Total ram usage:        1 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    4
  4787 ;; This function calls:
  4788 ;;		_delay
  4789 ;; This function is called by:
  4790 ;;		_init_lcd
  4791 ;;		_mensagem_inicial
  4792 ;;		_troca_de_tela
  4793 ;; This function uses a non-reentrant model
  4794 ;;
  4795                           
  4796                           	psect	text23
  4797  004388                     __ptext23:
  4798                           	callstack 0
  4799  004388                     _escreve_cmd_lcd:
  4800                           	callstack 25
  4801                           
  4802                           ;incstack = 0
  4803                           ;escreve_cmd_lcd@comando stored from wreg
  4804  004388  6E1B               	movwf	escreve_cmd_lcd@comando^0,c
  4805                           
  4806                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
  4807  00438A  9483               	bcf	131,2,c	;volatile
  4808                           
  4809                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
  4810  00438C  9283               	bcf	131,1,c	;volatile
  4811                           
  4812                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
  4813  00438E  9083               	bcf	131,0,c	;volatile
  4814                           
  4815                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
  4816  004390  A81B               	btfss	escreve_cmd_lcd@comando^0,4,c
  4817  004392  D002               	goto	l191
  4818  004394  8883               	bsf	131,4,c	;volatile
  4819  004396  D001               	goto	l11655
  4820  004398                     l191:
  4821                           
  4822                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
  4823  004398  9883               	bcf	131,4,c	;volatile
  4824  00439A                     l11655:
  4825                           
  4826                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
  4827  00439A  AA1B               	btfss	escreve_cmd_lcd@comando^0,5,c
  4828  00439C  D002               	goto	l193
  4829  00439E  8A83               	bsf	131,5,c	;volatile
  4830  0043A0  D001               	goto	l11659
  4831  0043A2                     l193:
  4832                           
  4833                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
  4834  0043A2  9A83               	bcf	131,5,c	;volatile
  4835  0043A4                     l11659:
  4836                           
  4837                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
  4838  0043A4  AC1B               	btfss	escreve_cmd_lcd@comando^0,6,c
  4839  0043A6  D002               	goto	l195
  4840  0043A8  8C83               	bsf	131,6,c	;volatile
  4841  0043AA  D001               	goto	l11663
  4842  0043AC                     l195:
  4843                           
  4844                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
  4845  0043AC  9C83               	bcf	131,6,c	;volatile
  4846  0043AE                     l11663:
  4847                           
  4848                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
  4849  0043AE  AE1B               	btfss	escreve_cmd_lcd@comando^0,7,c
  4850  0043B0  D002               	goto	l197
  4851  0043B2  8E83               	bsf	131,7,c	;volatile
  4852  0043B4  D001               	goto	l198
  4853  0043B6                     l197:
  4854                           
  4855                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
  4856  0043B6  9E83               	bcf	131,7,c	;volatile
  4857  0043B8                     l198:
  4858                           
  4859                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
  4860  0043B8  8083               	bsf	131,0,c	;volatile
  4861                           
  4862                           ;display_lcd.c: 181: delay();
  4863  0043BA  ECAC  F029         	call	_delay	;wreg free
  4864                           
  4865                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
  4866  0043BE  9083               	bcf	131,0,c	;volatile
  4867                           
  4868                           ;display_lcd.c: 183: delay();
  4869  0043C0  ECAC  F029         	call	_delay	;wreg free
  4870                           
  4871                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
  4872  0043C4  A01B               	btfss	escreve_cmd_lcd@comando^0,0,c
  4873  0043C6  D002               	goto	l199
  4874  0043C8  8883               	bsf	131,4,c	;volatile
  4875  0043CA  D001               	goto	l200
  4876  0043CC                     l199:
  4877                           
  4878                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
  4879  0043CC  9883               	bcf	131,4,c	;volatile
  4880  0043CE                     l200:
  4881                           
  4882                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
  4883  0043CE  A21B               	btfss	escreve_cmd_lcd@comando^0,1,c
  4884  0043D0  D002               	goto	l201
  4885  0043D2  8A83               	bsf	131,5,c	;volatile
  4886  0043D4  D001               	goto	l202
  4887  0043D6                     l201:
  4888                           
  4889                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
  4890  0043D6  9A83               	bcf	131,5,c	;volatile
  4891  0043D8                     l202:
  4892                           
  4893                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
  4894  0043D8  A41B               	btfss	escreve_cmd_lcd@comando^0,2,c
  4895  0043DA  D002               	goto	l203
  4896  0043DC  8C83               	bsf	131,6,c	;volatile
  4897  0043DE  D001               	goto	l204
  4898  0043E0                     l203:
  4899                           
  4900                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
  4901  0043E0  9C83               	bcf	131,6,c	;volatile
  4902  0043E2                     l204:
  4903                           
  4904                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
  4905  0043E2  A61B               	btfss	escreve_cmd_lcd@comando^0,3,c
  4906  0043E4  D002               	goto	l205
  4907  0043E6  8E83               	bsf	131,7,c	;volatile
  4908  0043E8  D001               	goto	l206
  4909  0043EA                     l205:
  4910                           
  4911                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
  4912  0043EA  9E83               	bcf	131,7,c	;volatile
  4913  0043EC                     l206:
  4914                           
  4915                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
  4916  0043EC  8083               	bsf	131,0,c	;volatile
  4917                           
  4918                           ;display_lcd.c: 197: delay();
  4919  0043EE  ECAC  F029         	call	_delay	;wreg free
  4920                           
  4921                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
  4922  0043F2  9083               	bcf	131,0,c	;volatile
  4923                           
  4924                           ;display_lcd.c: 199: delay();
  4925  0043F4  ECAC  F029         	call	_delay	;wreg free
  4926                           
  4927                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
  4928  0043F8  041B               	decf	escreve_cmd_lcd@comando^0,w,c
  4929  0043FA  B4D8               	btfsc	status,2,c
  4930  0043FC  D008               	goto	u14030
  4931  0043FE  0E02               	movlw	2
  4932  004400  181B               	xorwf	escreve_cmd_lcd@comando^0,w,c
  4933  004402  B4D8               	btfsc	status,2,c
  4934  004404  D004               	goto	u14030
  4935  004406  0E03               	movlw	3
  4936  004408  181B               	xorwf	escreve_cmd_lcd@comando^0,w,c
  4937  00440A  A4D8               	btfss	status,2,c
  4938  00440C  0012               	return	
  4939  00440E                     u14030:
  4940                           
  4941                           ;display_lcd.c: 205: { delay(); }
  4942  00440E  ECAC  F029         	call	_delay	;wreg free
  4943  004412  0012               	return		;funcret
  4944  004414                     __end_of_escreve_cmd_lcd:
  4945                           	callstack 0
  4946                           
  4947 ;; *************** function _verifica_fence_externo *****************
  4948 ;; Defined at:
  4949 ;;		line 276 in file "main.c"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;		None
  4952 ;; Auto vars:     Size  Location     Type
  4953 ;;		None
  4954 ;; Return value:  Size  Location     Type
  4955 ;;                  1    wreg      void 
  4956 ;; Registers used:
  4957 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4958 ;; Tracked objects:
  4959 ;;		On entry : 0/0
  4960 ;;		On exit  : 0/0
  4961 ;;		Unchanged: 0/0
  4962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4963 ;;      Params:         0       0       0       0       0       0       0       0       0
  4964 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4965 ;;      Temps:          0       1       0       0       0       0       0       0       0
  4966 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4967 ;;Total ram usage:        1 bytes
  4968 ;; Hardware stack levels used:    1
  4969 ;; Hardware stack levels required when called:    7
  4970 ;; This function calls:
  4971 ;;		_armazena_latitude
  4972 ;;		_armazena_longitude
  4973 ;;		_monta_sd
  4974 ;;		_verifica_diferenca
  4975 ;;		_verifica_plausibilidade_lat
  4976 ;;		_verifica_plausibilidade_long
  4977 ;; This function is called by:
  4978 ;;		_verifica_dados_operacionais
  4979 ;;		_disparo_gravacao
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           	psect	text24
  4984  00494C                     __ptext24:
  4985                           	callstack 0
  4986  00494C                     _verifica_fence_externo:
  4987                           	callstack 21
  4988                           
  4989                           ;main.c: 278: armazena_latitude();
  4990                           
  4991                           ;incstack = 0
  4992  00494C  EC25  F02A         	call	_armazena_latitude	;wreg free
  4993                           
  4994                           ;main.c: 279: armazena_longitude();
  4995  004950  EC1E  F02A         	call	_armazena_longitude	;wreg free
  4996                           
  4997                           ;main.c: 281: verifica_diferenca();
  4998  004954  EC4D  F019         	call	_verifica_diferenca	;wreg free
  4999                           
  5000                           ; BSR set to: 1
  5001                           ;main.c: 295: fence_flag[0].point = verifica_plausibilidade_long();
  5002  004958  EC91  F023         	call	_verifica_plausibilidade_long	;wreg free
  5003  00495C  0100               	movlb	0	; () banked
  5004  00495E  6F84               	movwf	??_verifica_fence_externo& (0+255),b
  5005  004960  0101               	movlb	1	; () banked
  5006  004962  513B               	movf	_fence_flag& (0+255),w,b
  5007  004964  0100               	movlb	0	; () banked
  5008  004966  1984               	xorwf	??_verifica_fence_externo& (0+255),w,b
  5009  004968  0BFE               	andlw	-2
  5010  00496A  1984               	xorwf	??_verifica_fence_externo& (0+255),w,b
  5011  00496C  0101               	movlb	1	; () banked
  5012  00496E  6F3B               	movwf	_fence_flag& (0+255),b
  5013                           
  5014                           ; BSR set to: 1
  5015                           ;main.c: 296: fence_flag[1].point = verifica_plausibilidade_lat();
  5016  004970  EC92  F022         	call	_verifica_plausibilidade_lat	;wreg free
  5017  004974  0100               	movlb	0	; () banked
  5018  004976  6F84               	movwf	??_verifica_fence_externo& (0+255),b
  5019  004978  0101               	movlb	1	; () banked
  5020  00497A  513C               	movf	(_fence_flag+1)& (0+255),w,b
  5021  00497C  0100               	movlb	0	; () banked
  5022  00497E  1984               	xorwf	??_verifica_fence_externo& (0+255),w,b
  5023  004980  0BFE               	andlw	-2
  5024  004982  1984               	xorwf	??_verifica_fence_externo& (0+255),w,b
  5025  004984  0101               	movlb	1	; () banked
  5026  004986  6F3C               	movwf	(_fence_flag+1)& (0+255),b
  5027                           
  5028                           ; BSR set to: 1
  5029                           ;main.c: 300: if(fence_flag[0].point || fence_flag[1].point)
  5030  004988  B13B               	btfsc	_fence_flag& (0+255),0,b
  5031  00498A  D002               	goto	u14060
  5032                           
  5033                           ; BSR set to: 1
  5034  00498C  A13C               	btfss	(_fence_flag+1)& (0+255),0,b
  5035  00498E  D009               	goto	l1435
  5036  004990                     u14060:
  5037                           
  5038                           ; BSR set to: 1
  5039                           ;main.c: 301: {;main.c: 302: fence_flag[2].point = 1;
  5040  004990  813D               	bsf	(_fence_flag+2)& (0+255),0,b
  5041                           
  5042                           ; BSR set to: 1
  5043                           ;main.c: 303: monta_sd(4, "FORA");
  5044  004992  0E5F               	movlw	low STR_26
  5045  004994  6E1D               	movwf	monta_sd@dado^0,c
  5046  004996  0E62               	movlw	high STR_26
  5047  004998  6E1E               	movwf	(monta_sd@dado+1)^0,c
  5048  00499A  0E04               	movlw	4
  5049  00499C  EC96  F012         	call	_monta_sd
  5050                           
  5051                           ;main.c: 304: }
  5052  0049A0  0012               	return	
  5053  0049A2                     l1435:
  5054                           
  5055                           ; BSR set to: 1
  5056                           ;main.c: 305: else;main.c: 306: {;main.c: 307: fence_flag[2].point = 0;
  5057  0049A2  913D               	bcf	(_fence_flag+2)& (0+255),0,b
  5058                           
  5059                           ; BSR set to: 1
  5060                           ;main.c: 308: monta_sd(4, "DENTRO");
  5061  0049A4  0E41               	movlw	low STR_27
  5062  0049A6  6E1D               	movwf	monta_sd@dado^0,c
  5063  0049A8  0E62               	movlw	high STR_27
  5064  0049AA  6E1E               	movwf	(monta_sd@dado+1)^0,c
  5065  0049AC  0E04               	movlw	4
  5066  0049AE  EC96  F012         	call	_monta_sd
  5067  0049B2  0012               	return		;funcret
  5068  0049B4                     __end_of_verifica_fence_externo:
  5069                           	callstack 0
  5070                           
  5071 ;; *************** function _verifica_plausibilidade_long *****************
  5072 ;; Defined at:
  5073 ;;		line 282 in file "bibliotecas/fence.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;		None
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;		None
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  1    wreg      unsigned char 
  5080 ;; Registers used:
  5081 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5082 ;; Tracked objects:
  5083 ;;		On entry : 3F/1
  5084 ;;		On exit  : 3F/1
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5087 ;;      Params:         0       0       0       0       0       0       0       0       0
  5088 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5089 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5090 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5091 ;;Total ram usage:        0 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:    3
  5094 ;; This function calls:
  5095 ;;		Nothing
  5096 ;; This function is called by:
  5097 ;;		_verifica_fence_externo
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           	psect	text25
  5102  004722                     __ptext25:
  5103                           	callstack 0
  5104  004722                     _verifica_plausibilidade_long:
  5105                           	callstack 24
  5106                           
  5107                           ; BSR set to: 1
  5108                           ;fence.c: 284: switch(temp_buff_long[0])
  5109                           
  5110                           ;incstack = 0
  5111  004722  D031               	goto	l11547
  5112  004724                     l11497:
  5113                           
  5114                           ; BSR set to: 1
  5115                           ;fence.c: 287: if(;fence.c: 288: (poligono_ext[0].diff_long >= 0 &&;fence.c: 289: poligo
      +                          no_ext[1].diff_long <= 0))
  5116  004724  BF07               	btfsc	(_poligono_ext+7)& (0+255),7,b
  5117  004726  D00B               	goto	l11507
  5118                           
  5119                           ; BSR set to: 1
  5120  004728  BF0F               	btfsc	(_poligono_ext+15)& (0+255),7,b
  5121  00472A  D007               	goto	u13680
  5122  00472C  510F               	movf	(_poligono_ext+15)& (0+255),w,b
  5123  00472E  110E               	iorwf	(_poligono_ext+14)& (0+255),w,b
  5124  004730  110D               	iorwf	(_poligono_ext+13)& (0+255),w,b
  5125  004732  E105               	bnz	l11507
  5126  004734  050C               	decf	(_poligono_ext+12)& (0+255),w,b
  5127  004736  B0D8               	btfsc	status,0,c
  5128  004738  D002               	goto	l11507
  5129  00473A                     u13680:
  5130                           
  5131                           ; BSR set to: 1
  5132                           ;fence.c: 290: {;fence.c: 291: return 0;
  5133  00473A  0E00               	movlw	0
  5134  00473C  0012               	return	
  5135  00473E                     l11507:
  5136                           
  5137                           ; BSR set to: 1
  5138                           ;fence.c: 293: else if(;fence.c: 294: (poligono_ext[0].diff_long == 0 ||;fence.c: 295: p
      +                          oligono_ext[1].diff_long == 0 ))
  5139  00473E  5104               	movf	(_poligono_ext+4)& (0+255),w,b
  5140  004740  1105               	iorwf	(_poligono_ext+5)& (0+255),w,b
  5141  004742  1106               	iorwf	(_poligono_ext+6)& (0+255),w,b
  5142  004744  1107               	iorwf	(_poligono_ext+7)& (0+255),w,b
  5143  004746  B4D8               	btfsc	status,2,c
  5144  004748  D7F8               	goto	u13680
  5145                           
  5146                           ; BSR set to: 1
  5147  00474A  510C               	movf	(_poligono_ext+12)& (0+255),w,b
  5148  00474C  110D               	iorwf	(_poligono_ext+13)& (0+255),w,b
  5149  00474E  110E               	iorwf	(_poligono_ext+14)& (0+255),w,b
  5150  004750  110F               	iorwf	(_poligono_ext+15)& (0+255),w,b
  5151  004752  B4D8               	btfsc	status,2,c
  5152  004754  D7F2               	goto	u13680
  5153                           
  5154                           ; BSR set to: 1
  5155                           ;fence.c: 299: else;fence.c: 300: {;fence.c: 301: return 1;
  5156  004756  0E01               	movlw	1
  5157  004758  0012               	return	
  5158  00475A                     l11521:
  5159                           
  5160                           ; BSR set to: 1
  5161                           ;fence.c: 306: if(;fence.c: 307: (poligono_ext[0].diff_long <= 0 &&;fence.c: 308: poligo
      +                          no_ext[1].diff_long >= 0 ) )
  5162  00475A  BF07               	btfsc	(_poligono_ext+7)& (0+255),7,b
  5163  00475C  D007               	goto	u13710
  5164  00475E  5107               	movf	(_poligono_ext+7)& (0+255),w,b
  5165  004760  1106               	iorwf	(_poligono_ext+6)& (0+255),w,b
  5166  004762  1105               	iorwf	(_poligono_ext+5)& (0+255),w,b
  5167  004764  E105               	bnz	l11531
  5168  004766  0504               	decf	(_poligono_ext+4)& (0+255),w,b
  5169  004768  B0D8               	btfsc	status,0,c
  5170  00476A  D002               	goto	l11531
  5171  00476C                     u13710:
  5172                           
  5173                           ; BSR set to: 1
  5174  00476C  AF0F               	btfss	(_poligono_ext+15)& (0+255),7,b
  5175  00476E  D7E5               	goto	u13680
  5176  004770                     l11531:
  5177                           
  5178                           ; BSR set to: 1
  5179                           ;fence.c: 312: else if(;fence.c: 313: (poligono_ext[0].diff_long == 0 ||;fence.c: 314: p
      +                          oligono_ext[0].diff_long == 0 ))
  5180  004770  5104               	movf	(_poligono_ext+4)& (0+255),w,b
  5181  004772  1105               	iorwf	(_poligono_ext+5)& (0+255),w,b
  5182  004774  1106               	iorwf	(_poligono_ext+6)& (0+255),w,b
  5183  004776  1107               	iorwf	(_poligono_ext+7)& (0+255),w,b
  5184  004778  B4D8               	btfsc	status,2,c
  5185  00477A  D7DF               	goto	u13680
  5186                           
  5187                           ; BSR set to: 1
  5188  00477C  5104               	movf	(_poligono_ext+4)& (0+255),w,b
  5189  00477E  1105               	iorwf	(_poligono_ext+5)& (0+255),w,b
  5190  004780  1106               	iorwf	(_poligono_ext+6)& (0+255),w,b
  5191  004782  1107               	iorwf	(_poligono_ext+7)& (0+255),w,b
  5192  004784  D7E6               	goto	L1
  5193  004786                     l11547:
  5194                           
  5195                           ; BSR set to: 1
  5196  004786  C032  FFD9         	movff	_temp_buff_long,fsr2l
  5197  00478A  C033  FFDA         	movff	_temp_buff_long+1,fsr2h
  5198  00478E  50DF               	movf	indf2,w,c
  5199                           
  5200                           ; Switch size 1, requested type "simple"
  5201                           ; Number of cases is 1, Range of values is 45 to 45
  5202                           ; switch strategies available:
  5203                           ; Name         Instructions Cycles
  5204                           ; simple_byte            4     3 (average)
  5205                           ;	Chosen strategy is simple_byte
  5206  004790  0A2D               	xorlw	45	; case 45
  5207  004792  B4D8               	btfsc	status,2,c
  5208  004794  D7C7               	goto	l11497
  5209  004796  D7E1               	goto	l11521
  5210  004798                     __end_of_verifica_plausibilidade_long:
  5211                           	callstack 0
  5212                           
  5213 ;; *************** function _verifica_plausibilidade_lat *****************
  5214 ;; Defined at:
  5215 ;;		line 335 in file "bibliotecas/fence.c"
  5216 ;; Parameters:    Size  Location     Type
  5217 ;;		None
  5218 ;; Auto vars:     Size  Location     Type
  5219 ;;  flag            1    0        unsigned char 
  5220 ;; Return value:  Size  Location     Type
  5221 ;;                  1    wreg      unsigned char 
  5222 ;; Registers used:
  5223 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5224 ;; Tracked objects:
  5225 ;;		On entry : 3F/1
  5226 ;;		On exit  : 3F/1
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5229 ;;      Params:         0       0       0       0       0       0       0       0       0
  5230 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5231 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5232 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5233 ;;Total ram usage:        1 bytes
  5234 ;; Hardware stack levels used:    1
  5235 ;; Hardware stack levels required when called:    3
  5236 ;; This function calls:
  5237 ;;		Nothing
  5238 ;; This function is called by:
  5239 ;;		_verifica_fence_externo
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243                           	psect	text26
  5244  004524                     __ptext26:
  5245                           	callstack 0
  5246  004524                     _verifica_plausibilidade_lat:
  5247                           	callstack 24
  5248                           
  5249                           ; BSR set to: 1
  5250                           ;fence.c: 338: switch(temp_buff_lat[0])
  5251                           
  5252                           ; BSR set to: 1
  5253                           ;incstack = 0
  5254  004524  D038               	goto	l11611
  5255  004526                     l11551:
  5256                           
  5257                           ; BSR set to: 1
  5258                           ;fence.c: 341: if(;fence.c: 342: ( poligono_ext[0].diff_lat <= 0 &&;fence.c: 343: poligo
      +                          no_ext[1].diff_lat >= 0))
  5259  004526  BF03               	btfsc	(_poligono_ext+3)& (0+255),7,b
  5260  004528  D007               	goto	u13750
  5261  00452A  5103               	movf	(_poligono_ext+3)& (0+255),w,b
  5262  00452C  1102               	iorwf	(_poligono_ext+2)& (0+255),w,b
  5263  00452E  1101               	iorwf	(_poligono_ext+1)& (0+255),w,b
  5264  004530  E107               	bnz	l11561
  5265  004532  0500               	decf	_poligono_ext& (0+255),w,b
  5266  004534  B0D8               	btfsc	status,0,c
  5267  004536  D004               	goto	l11561
  5268  004538                     u13750:
  5269                           
  5270                           ; BSR set to: 1
  5271  004538  BF0B               	btfsc	(_poligono_ext+11)& (0+255),7,b
  5272  00453A  D002               	goto	l11561
  5273  00453C                     u13760:
  5274                           
  5275                           ; BSR set to: 1
  5276                           ;fence.c: 344: {;fence.c: 345: return 0;
  5277  00453C  0E00               	movlw	0
  5278  00453E  0012               	return	
  5279  004540                     l11561:
  5280                           
  5281                           ; BSR set to: 1
  5282                           ;fence.c: 347: else if(;fence.c: 348: (poligono_ext[0].diff_lat == 0 &&;fence.c: 349: po
      +                          ligono_ext[0].diff_lat == 0))
  5283  004540  5100               	movf	_poligono_ext& (0+255),w,b
  5284  004542  1101               	iorwf	(_poligono_ext+1)& (0+255),w,b
  5285  004544  1102               	iorwf	(_poligono_ext+2)& (0+255),w,b
  5286  004546  1103               	iorwf	(_poligono_ext+3)& (0+255),w,b
  5287  004548  A4D8               	btfss	status,2,c
  5288  00454A  D006               	goto	l11571
  5289  00454C                     u13770:
  5290                           
  5291                           ; BSR set to: 1
  5292  00454C  5100               	movf	_poligono_ext& (0+255),w,b
  5293  00454E  1101               	iorwf	(_poligono_ext+1)& (0+255),w,b
  5294  004550  1102               	iorwf	(_poligono_ext+2)& (0+255),w,b
  5295  004552  1103               	iorwf	(_poligono_ext+3)& (0+255),w,b
  5296  004554  B4D8               	btfsc	status,2,c
  5297  004556  D7F2               	goto	u13760
  5298  004558                     l11571:
  5299                           
  5300                           ; BSR set to: 1
  5301                           ;fence.c: 355: else;fence.c: 356: {;fence.c: 358: return 1;
  5302  004558  0E01               	movlw	1
  5303  00455A  0012               	return	
  5304  00455C                     l11575:
  5305                           
  5306                           ; BSR set to: 1
  5307                           ;fence.c: 363: if((poligono_ext[0].diff_lat >= 0 &&;fence.c: 364: poligono_ext[1].diff_l
      +                          at <= 0 ))
  5308  00455C  BF03               	btfsc	(_poligono_ext+3)& (0+255),7,b
  5309  00455E  D009               	goto	l11585
  5310                           
  5311                           ; BSR set to: 1
  5312  004560  BF0B               	btfsc	(_poligono_ext+11)& (0+255),7,b
  5313  004562  D7EC               	goto	u13760
  5314  004564  510B               	movf	(_poligono_ext+11)& (0+255),w,b
  5315  004566  110A               	iorwf	(_poligono_ext+10)& (0+255),w,b
  5316  004568  1109               	iorwf	(_poligono_ext+9)& (0+255),w,b
  5317  00456A  E103               	bnz	l11585
  5318  00456C  0508               	decf	(_poligono_ext+8)& (0+255),w,b
  5319  00456E  A0D8               	btfss	status,0,c
  5320  004570  D7E5               	goto	u13760
  5321  004572                     l11585:
  5322                           
  5323                           ; BSR set to: 1
  5324                           ;fence.c: 368: else if(;fence.c: 369: (poligono_ext[0].diff_lat >= 0 &&;fence.c: 370: po
      +                          ligono_ext[1].diff_lat <= 0))
  5325  004572  BF03               	btfsc	(_poligono_ext+3)& (0+255),7,b
  5326  004574  D009               	goto	l11595
  5327                           
  5328                           ; BSR set to: 1
  5329  004576  BF0B               	btfsc	(_poligono_ext+11)& (0+255),7,b
  5330  004578  D7E1               	goto	u13760
  5331  00457A  510B               	movf	(_poligono_ext+11)& (0+255),w,b
  5332  00457C  110A               	iorwf	(_poligono_ext+10)& (0+255),w,b
  5333  00457E  1109               	iorwf	(_poligono_ext+9)& (0+255),w,b
  5334  004580  E103               	bnz	l11595
  5335  004582  0508               	decf	(_poligono_ext+8)& (0+255),w,b
  5336  004584  A0D8               	btfss	status,0,c
  5337  004586  D7DA               	goto	u13760
  5338  004588                     l11595:
  5339                           
  5340                           ; BSR set to: 1
  5341                           ;fence.c: 374: else if(;fence.c: 375: (poligono_ext[0].diff_lat == 0 ||;fence.c: 376: po
      +                          ligono_ext[0].diff_lat == 0))
  5342  004588  5100               	movf	_poligono_ext& (0+255),w,b
  5343  00458A  1101               	iorwf	(_poligono_ext+1)& (0+255),w,b
  5344  00458C  1102               	iorwf	(_poligono_ext+2)& (0+255),w,b
  5345  00458E  1103               	iorwf	(_poligono_ext+3)& (0+255),w,b
  5346  004590  B4D8               	btfsc	status,2,c
  5347  004592  D7D4               	goto	u13760
  5348  004594  D7DB               	goto	u13770
  5349  004596                     l11611:
  5350                           
  5351                           ; BSR set to: 1
  5352  004596  C034  FFD9         	movff	_temp_buff_lat,fsr2l
  5353  00459A  C035  FFDA         	movff	_temp_buff_lat+1,fsr2h
  5354  00459E  50DF               	movf	indf2,w,c
  5355                           
  5356                           ; Switch size 1, requested type "simple"
  5357                           ; Number of cases is 1, Range of values is 45 to 45
  5358                           ; switch strategies available:
  5359                           ; Name         Instructions Cycles
  5360                           ; simple_byte            4     3 (average)
  5361                           ;	Chosen strategy is simple_byte
  5362  0045A0  0A2D               	xorlw	45	; case 45
  5363  0045A2  B4D8               	btfsc	status,2,c
  5364  0045A4  D7C0               	goto	l11551
  5365  0045A6  D7DA               	goto	l11575
  5366  0045A8                     __end_of_verifica_plausibilidade_lat:
  5367                           	callstack 0
  5368                           
  5369 ;; *************** function _verifica_diferenca *****************
  5370 ;; Defined at:
  5371 ;;		line 82 in file "bibliotecas/fence.c"
  5372 ;; Parameters:    Size  Location     Type
  5373 ;;		None
  5374 ;; Auto vars:     Size  Location     Type
  5375 ;;		None
  5376 ;; Return value:  Size  Location     Type
  5377 ;;                  1    wreg      void 
  5378 ;; Registers used:
  5379 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5380 ;; Tracked objects:
  5381 ;;		On entry : 0/0
  5382 ;;		On exit  : 3F/1
  5383 ;;		Unchanged: 0/0
  5384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5385 ;;      Params:         0       0       0       0       0       0       0       0       0
  5386 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5387 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5388 ;;      Totals:         0       4       0       0       0       0       0       0       0
  5389 ;;Total ram usage:        4 bytes
  5390 ;; Hardware stack levels used:    1
  5391 ;; Hardware stack levels required when called:    6
  5392 ;; This function calls:
  5393 ;;		_convert_to_int
  5394 ;;		_convert_to_int_point
  5395 ;; This function is called by:
  5396 ;;		_verifica_fence_externo
  5397 ;; This function uses a non-reentrant model
  5398 ;;
  5399                           
  5400                           	psect	text27
  5401  00329A                     __ptext27:
  5402                           	callstack 0
  5403  00329A                     _verifica_diferenca:
  5404                           	callstack 21
  5405                           
  5406                           ;fence.c: 84: poligono_ext[0].diff_long = convert_to_int(fence_diff_long[0]) - convert_t
      +                          o_int_point(temp_buff_long);
  5407                           
  5408                           ; BSR set to: 1
  5409                           ;incstack = 0
  5410  00329A  0EFD               	movlw	low _fence_diff_long
  5411  00329C  6E2D               	movwf	convert_to_int@p_buff^0,c
  5412  00329E  0E60               	movlw	high _fence_diff_long
  5413  0032A0  6E2E               	movwf	(convert_to_int@p_buff+1)^0,c
  5414  0032A2  ECE8  F028         	call	_convert_to_int	;wreg free
  5415  0032A6  C02D  F080         	movff	?_convert_to_int,??_verifica_diferenca
  5416  0032AA  C02E  F081         	movff	?_convert_to_int+1,??_verifica_diferenca+1
  5417  0032AE  C02F  F082         	movff	?_convert_to_int+2,??_verifica_diferenca+2
  5418  0032B2  C030  F083         	movff	?_convert_to_int+3,??_verifica_diferenca+3
  5419  0032B6  C032  F02D         	movff	_temp_buff_long,convert_to_int_point@p_buff
  5420  0032BA  C033  F02E         	movff	_temp_buff_long+1,convert_to_int_point@p_buff+1
  5421  0032BE  ECA2  F020         	call	_convert_to_int_point	;wreg free
  5422  0032C2  502D               	movf	?_convert_to_int_point^0,w,c
  5423  0032C4  5D80               	subwf	??_verifica_diferenca& (0+255),w,b
  5424  0032C6  0101               	movlb	1	; () banked
  5425  0032C8  6F04               	movwf	(_poligono_ext+4)& (0+255),b
  5426  0032CA  502E               	movf	(?_convert_to_int_point+1)^0,w,c
  5427  0032CC  0100               	movlb	0	; () banked
  5428  0032CE  5981               	subwfb	(??_verifica_diferenca+1)& (0+255),w,b
  5429  0032D0  0101               	movlb	1	; () banked
  5430  0032D2  6F05               	movwf	(_poligono_ext+5)& (0+255),b
  5431  0032D4  502F               	movf	(?_convert_to_int_point+2)^0,w,c
  5432  0032D6  0100               	movlb	0	; () banked
  5433  0032D8  5982               	subwfb	(??_verifica_diferenca+2)& (0+255),w,b
  5434  0032DA  0101               	movlb	1	; () banked
  5435  0032DC  6F06               	movwf	(_poligono_ext+6)& (0+255),b
  5436  0032DE  5030               	movf	(?_convert_to_int_point+3)^0,w,c
  5437  0032E0  0100               	movlb	0	; () banked
  5438  0032E2  5983               	subwfb	(??_verifica_diferenca+3)& (0+255),w,b
  5439  0032E4  0101               	movlb	1	; () banked
  5440  0032E6  6F07               	movwf	(_poligono_ext+7)& (0+255),b
  5441                           
  5442                           ;fence.c: 87: poligono_ext[1].diff_long = convert_to_int(fence_diff_long[2]) - convert_t
      +                          o_int_point(temp_buff_long);
  5443  0032E8  0E13               	movlw	low (_fence_diff_long+22)
  5444  0032EA  6E2D               	movwf	convert_to_int@p_buff^0,c
  5445  0032EC  0E61               	movlw	high (_fence_diff_long+22)
  5446  0032EE  6E2E               	movwf	(convert_to_int@p_buff+1)^0,c
  5447  0032F0  ECE8  F028         	call	_convert_to_int	;wreg free
  5448  0032F4  C02D  F080         	movff	?_convert_to_int,??_verifica_diferenca
  5449  0032F8  C02E  F081         	movff	?_convert_to_int+1,??_verifica_diferenca+1
  5450  0032FC  C02F  F082         	movff	?_convert_to_int+2,??_verifica_diferenca+2
  5451  003300  C030  F083         	movff	?_convert_to_int+3,??_verifica_diferenca+3
  5452  003304  C032  F02D         	movff	_temp_buff_long,convert_to_int_point@p_buff
  5453  003308  C033  F02E         	movff	_temp_buff_long+1,convert_to_int_point@p_buff+1
  5454  00330C  ECA2  F020         	call	_convert_to_int_point	;wreg free
  5455  003310  502D               	movf	?_convert_to_int_point^0,w,c
  5456  003312  5D80               	subwf	??_verifica_diferenca& (0+255),w,b
  5457  003314  0101               	movlb	1	; () banked
  5458  003316  6F0C               	movwf	(_poligono_ext+12)& (0+255),b
  5459  003318  502E               	movf	(?_convert_to_int_point+1)^0,w,c
  5460  00331A  0100               	movlb	0	; () banked
  5461  00331C  5981               	subwfb	(??_verifica_diferenca+1)& (0+255),w,b
  5462  00331E  0101               	movlb	1	; () banked
  5463  003320  6F0D               	movwf	(_poligono_ext+13)& (0+255),b
  5464  003322  502F               	movf	(?_convert_to_int_point+2)^0,w,c
  5465  003324  0100               	movlb	0	; () banked
  5466  003326  5982               	subwfb	(??_verifica_diferenca+2)& (0+255),w,b
  5467  003328  0101               	movlb	1	; () banked
  5468  00332A  6F0E               	movwf	(_poligono_ext+14)& (0+255),b
  5469  00332C  5030               	movf	(?_convert_to_int_point+3)^0,w,c
  5470  00332E  0100               	movlb	0	; () banked
  5471  003330  5983               	subwfb	(??_verifica_diferenca+3)& (0+255),w,b
  5472  003332  0101               	movlb	1	; () banked
  5473  003334  6F0F               	movwf	(_poligono_ext+15)& (0+255),b
  5474                           
  5475                           ;fence.c: 88: poligono_ext[0].diff_lat = convert_to_int(fence_diff_lat[0]) - convert_to_
      +                          int_point(temp_buff_lat);
  5476  003336  0E29               	movlw	low _fence_diff_lat
  5477  003338  6E2D               	movwf	convert_to_int@p_buff^0,c
  5478  00333A  0E61               	movlw	high _fence_diff_lat
  5479  00333C  6E2E               	movwf	(convert_to_int@p_buff+1)^0,c
  5480  00333E  ECE8  F028         	call	_convert_to_int	;wreg free
  5481  003342  C02D  F080         	movff	?_convert_to_int,??_verifica_diferenca
  5482  003346  C02E  F081         	movff	?_convert_to_int+1,??_verifica_diferenca+1
  5483  00334A  C02F  F082         	movff	?_convert_to_int+2,??_verifica_diferenca+2
  5484  00334E  C030  F083         	movff	?_convert_to_int+3,??_verifica_diferenca+3
  5485  003352  C034  F02D         	movff	_temp_buff_lat,convert_to_int_point@p_buff
  5486  003356  C035  F02E         	movff	_temp_buff_lat+1,convert_to_int_point@p_buff+1
  5487  00335A  ECA2  F020         	call	_convert_to_int_point	;wreg free
  5488  00335E  502D               	movf	?_convert_to_int_point^0,w,c
  5489  003360  5D80               	subwf	??_verifica_diferenca& (0+255),w,b
  5490  003362  0101               	movlb	1	; () banked
  5491  003364  6F00               	movwf	_poligono_ext& (0+255),b
  5492  003366  502E               	movf	(?_convert_to_int_point+1)^0,w,c
  5493  003368  0100               	movlb	0	; () banked
  5494  00336A  5981               	subwfb	(??_verifica_diferenca+1)& (0+255),w,b
  5495  00336C  0101               	movlb	1	; () banked
  5496  00336E  6F01               	movwf	(_poligono_ext+1)& (0+255),b
  5497  003370  502F               	movf	(?_convert_to_int_point+2)^0,w,c
  5498  003372  0100               	movlb	0	; () banked
  5499  003374  5982               	subwfb	(??_verifica_diferenca+2)& (0+255),w,b
  5500  003376  0101               	movlb	1	; () banked
  5501  003378  6F02               	movwf	(_poligono_ext+2)& (0+255),b
  5502  00337A  5030               	movf	(?_convert_to_int_point+3)^0,w,c
  5503  00337C  0100               	movlb	0	; () banked
  5504  00337E  5983               	subwfb	(??_verifica_diferenca+3)& (0+255),w,b
  5505  003380  0101               	movlb	1	; () banked
  5506  003382  6F03               	movwf	(_poligono_ext+3)& (0+255),b
  5507                           
  5508                           ;fence.c: 89: poligono_ext[1].diff_lat = convert_to_int(fence_diff_lat[2]) - convert_to_
      +                          int_point(temp_buff_lat);
  5509  003384  0E3D               	movlw	low (_fence_diff_lat+20)
  5510  003386  6E2D               	movwf	convert_to_int@p_buff^0,c
  5511  003388  0E61               	movlw	high (_fence_diff_lat+20)
  5512  00338A  6E2E               	movwf	(convert_to_int@p_buff+1)^0,c
  5513  00338C  ECE8  F028         	call	_convert_to_int	;wreg free
  5514  003390  C02D  F080         	movff	?_convert_to_int,??_verifica_diferenca
  5515  003394  C02E  F081         	movff	?_convert_to_int+1,??_verifica_diferenca+1
  5516  003398  C02F  F082         	movff	?_convert_to_int+2,??_verifica_diferenca+2
  5517  00339C  C030  F083         	movff	?_convert_to_int+3,??_verifica_diferenca+3
  5518  0033A0  C034  F02D         	movff	_temp_buff_lat,convert_to_int_point@p_buff
  5519  0033A4  C035  F02E         	movff	_temp_buff_lat+1,convert_to_int_point@p_buff+1
  5520  0033A8  ECA2  F020         	call	_convert_to_int_point	;wreg free
  5521  0033AC  502D               	movf	?_convert_to_int_point^0,w,c
  5522  0033AE  5D80               	subwf	??_verifica_diferenca& (0+255),w,b
  5523  0033B0  0101               	movlb	1	; () banked
  5524  0033B2  6F08               	movwf	(_poligono_ext+8)& (0+255),b
  5525  0033B4  502E               	movf	(?_convert_to_int_point+1)^0,w,c
  5526  0033B6  0100               	movlb	0	; () banked
  5527  0033B8  5981               	subwfb	(??_verifica_diferenca+1)& (0+255),w,b
  5528  0033BA  0101               	movlb	1	; () banked
  5529  0033BC  6F09               	movwf	(_poligono_ext+9)& (0+255),b
  5530  0033BE  502F               	movf	(?_convert_to_int_point+2)^0,w,c
  5531  0033C0  0100               	movlb	0	; () banked
  5532  0033C2  5982               	subwfb	(??_verifica_diferenca+2)& (0+255),w,b
  5533  0033C4  0101               	movlb	1	; () banked
  5534  0033C6  6F0A               	movwf	(_poligono_ext+10)& (0+255),b
  5535  0033C8  5030               	movf	(?_convert_to_int_point+3)^0,w,c
  5536  0033CA  0100               	movlb	0	; () banked
  5537  0033CC  5983               	subwfb	(??_verifica_diferenca+3)& (0+255),w,b
  5538  0033CE  0101               	movlb	1	; () banked
  5539  0033D0  6F0B               	movwf	(_poligono_ext+11)& (0+255),b
  5540                           
  5541                           ; BSR set to: 1
  5542  0033D2  0012               	return		;funcret
  5543  0033D4                     __end_of_verifica_diferenca:
  5544                           	callstack 0
  5545                           
  5546 ;; *************** function _convert_to_int_point *****************
  5547 ;; Defined at:
  5548 ;;		line 400 in file "bibliotecas/fence.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;  p_buff          2   44[COMRAM] PTR const unsigned char 
  5551 ;;		 -> NULL(0), rawLongitude(13), rawLatitude(13), 
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;  temp_str       12   16[BANK0 ] unsigned char [12]
  5554 ;;  convert_str    10    6[BANK0 ] unsigned char [10]
  5555 ;;  i               2   30[BANK0 ] unsigned int 
  5556 ;;  j               2   28[BANK0 ] unsigned int 
  5557 ;; Return value:  Size  Location     Type
  5558 ;;                  4   44[COMRAM] long 
  5559 ;; Registers used:
  5560 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5561 ;; Tracked objects:
  5562 ;;		On entry : 3F/0
  5563 ;;		On exit  : 3F/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5566 ;;      Params:         4       0       0       0       0       0       0       0       0
  5567 ;;      Locals:         0      26       0       0       0       0       0       0       0
  5568 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5569 ;;      Totals:         5      26       0       0       0       0       0       0       0
  5570 ;;Total ram usage:       31 bytes
  5571 ;; Hardware stack levels used:    1
  5572 ;; Hardware stack levels required when called:    5
  5573 ;; This function calls:
  5574 ;;		_atol
  5575 ;;		_strcpy
  5576 ;; This function is called by:
  5577 ;;		_verifica_diferenca
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           	psect	text28
  5582  004144                     __ptext28:
  5583                           	callstack 0
  5584  004144                     _convert_to_int_point:
  5585                           	callstack 21
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;fence.c: 402: unsigned char temp_str[12], convert_str[10];;fence.c: 403: strcpy(temp_st
      +                          r, p_buff);
  5589                           
  5590                           ; BSR set to: 1
  5591                           ;incstack = 0
  5592  004144  0E70               	movlw	low convert_to_int_point@temp_str
  5593  004146  6E19               	movwf	strcpy@to^0,c
  5594  004148  6A1A               	clrf	(strcpy@to+1)^0,c
  5595  00414A  C02D  F01B         	movff	convert_to_int_point@p_buff,strcpy@from
  5596  00414E  C02E  F01C         	movff	convert_to_int_point@p_buff+1,strcpy@from+1
  5597  004152  ECFF  F026         	call	_strcpy	;wreg free
  5598                           
  5599                           ;fence.c: 405: unsigned i, j;;fence.c: 406: j= 0;
  5600  004156  0E00               	movlw	0
  5601  004158  0100               	movlb	0	; () banked
  5602  00415A  6F7D               	movwf	(convert_to_int_point@j+1)& (0+255),b
  5603  00415C  0E00               	movlw	0
  5604  00415E  6F7C               	movwf	convert_to_int_point@j& (0+255),b
  5605                           
  5606                           ; BSR set to: 0
  5607                           ;fence.c: 407: for(i=0; i<12;i++)
  5608  004160  0E00               	movlw	0
  5609  004162  6F7F               	movwf	(convert_to_int_point@i+1)& (0+255),b
  5610  004164  0E00               	movlw	0
  5611  004166  6F7E               	movwf	convert_to_int_point@i& (0+255),b
  5612  004168                     l11389:
  5613                           
  5614                           ; BSR set to: 0
  5615                           ;fence.c: 408: {;fence.c: 409: if((temp_str[i] != '.') && (temp_str[i] != '-') && (temp_
      +                          str[i] != '\0'))
  5616  004168  517E               	movf	convert_to_int_point@i& (0+255),w,b
  5617  00416A  0F70               	addlw	low convert_to_int_point@temp_str
  5618  00416C  6ED9               	movwf	fsr2l,c
  5619  00416E  6ADA               	clrf	fsr2h,c
  5620  004170  0E2E               	movlw	46
  5621  004172  18DE               	xorwf	postinc2,w,c
  5622  004174  B4D8               	btfsc	status,2,c
  5623  004176  D01B               	goto	l11399
  5624                           
  5625                           ; BSR set to: 0
  5626  004178  517E               	movf	convert_to_int_point@i& (0+255),w,b
  5627  00417A  0F70               	addlw	low convert_to_int_point@temp_str
  5628  00417C  6ED9               	movwf	fsr2l,c
  5629  00417E  6ADA               	clrf	fsr2h,c
  5630  004180  0E2D               	movlw	45
  5631  004182  18DE               	xorwf	postinc2,w,c
  5632  004184  B4D8               	btfsc	status,2,c
  5633  004186  D013               	goto	l11399
  5634                           
  5635                           ; BSR set to: 0
  5636  004188  517E               	movf	convert_to_int_point@i& (0+255),w,b
  5637  00418A  0F70               	addlw	low convert_to_int_point@temp_str
  5638  00418C  6ED9               	movwf	fsr2l,c
  5639  00418E  6ADA               	clrf	fsr2h,c
  5640  004190  50DF               	movf	indf2,w,c
  5641  004192  B4D8               	btfsc	status,2,c
  5642  004194  D00C               	goto	l11399
  5643                           
  5644                           ; BSR set to: 0
  5645                           ;fence.c: 410: {;fence.c: 412: convert_str[j] = temp_str[i];
  5646  004196  517E               	movf	convert_to_int_point@i& (0+255),w,b
  5647  004198  0F70               	addlw	low convert_to_int_point@temp_str
  5648  00419A  6ED9               	movwf	fsr2l,c
  5649  00419C  6ADA               	clrf	fsr2h,c
  5650  00419E  517C               	movf	convert_to_int_point@j& (0+255),w,b
  5651  0041A0  0F66               	addlw	low convert_to_int_point@convert_str
  5652  0041A2  6EE1               	movwf	fsr1l,c
  5653  0041A4  6AE2               	clrf	fsr1h,c
  5654  0041A6  CFDF FFE7          	movff	indf2,indf1
  5655                           
  5656                           ; BSR set to: 0
  5657                           ;fence.c: 413: j++;
  5658  0041AA  4B7C               	infsnz	convert_to_int_point@j& (0+255),f,b
  5659  0041AC  2B7D               	incf	(convert_to_int_point@j+1)& (0+255),f,b
  5660  0041AE                     l11399:
  5661                           
  5662                           ; BSR set to: 0
  5663  0041AE  4B7E               	infsnz	convert_to_int_point@i& (0+255),f,b
  5664  0041B0  2B7F               	incf	(convert_to_int_point@i+1)& (0+255),f,b
  5665                           
  5666                           ; BSR set to: 0
  5667  0041B2  517F               	movf	(convert_to_int_point@i+1)& (0+255),w,b
  5668  0041B4  E104               	bnz	u13570
  5669  0041B6  0E0C               	movlw	12
  5670  0041B8  5D7E               	subwf	convert_to_int_point@i& (0+255),w,b
  5671  0041BA  A0D8               	btfss	status,0,c
  5672  0041BC  D7D5               	goto	l11389
  5673  0041BE                     u13570:
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;fence.c: 414: };fence.c: 416: };fence.c: 421: return (atol(convert_str));
  5677  0041BE  0E66               	movlw	low convert_to_int_point@convert_str
  5678  0041C0  6E25               	movwf	atol@s^0,c
  5679  0041C2  6A26               	clrf	(atol@s+1)^0,c
  5680  0041C4  ECEA  F019         	call	_atol	;wreg free
  5681  0041C8  C025  F02D         	movff	?_atol,?_convert_to_int_point
  5682  0041CC  C026  F02E         	movff	?_atol+1,?_convert_to_int_point+1
  5683  0041D0  C027  F02F         	movff	?_atol+2,?_convert_to_int_point+2
  5684  0041D4  C028  F030         	movff	?_atol+3,?_convert_to_int_point+3
  5685                           
  5686                           ; BSR set to: 0
  5687  0041D8  0012               	return		;funcret
  5688  0041DA                     __end_of_convert_to_int_point:
  5689                           	callstack 0
  5690                           
  5691 ;; *************** function _convert_to_int *****************
  5692 ;; Defined at:
  5693 ;;		line 391 in file "bibliotecas/fence.c"
  5694 ;; Parameters:    Size  Location     Type
  5695 ;;  p_buff          2   44[COMRAM] PTR const unsigned char 
  5696 ;;		 -> fence_diff_lat(40), fence_diff_long(44), 
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;  convert         3    0        PTR unsigned char 
  5699 ;; Return value:  Size  Location     Type
  5700 ;;                  4   44[COMRAM] long 
  5701 ;; Registers used:
  5702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 3F/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5708 ;;      Params:         4       0       0       0       0       0       0       0       0
  5709 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5710 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5711 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5712 ;;Total ram usage:        4 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    5
  5715 ;; This function calls:
  5716 ;;		_atol
  5717 ;; This function is called by:
  5718 ;;		_verifica_diferenca
  5719 ;; This function uses a non-reentrant model
  5720 ;;
  5721                           
  5722                           	psect	text29
  5723  0051D0                     __ptext29:
  5724                           	callstack 0
  5725  0051D0                     _convert_to_int:
  5726                           	callstack 21
  5727                           
  5728                           ;fence.c: 393: unsigned char *convert;;fence.c: 395: p_buff++;
  5729                           
  5730                           ; BSR set to: 0
  5731                           ;incstack = 0
  5732  0051D0  4A2D               	infsnz	convert_to_int@p_buff^0,f,c
  5733  0051D2  2A2E               	incf	(convert_to_int@p_buff+1)^0,f,c
  5734                           
  5735                           ;fence.c: 396: return atol(p_buff);
  5736  0051D4  C02D  F025         	movff	convert_to_int@p_buff,atol@s
  5737  0051D8  C02E  F026         	movff	convert_to_int@p_buff+1,atol@s+1
  5738  0051DC  ECEA  F019         	call	_atol	;wreg free
  5739  0051E0  C025  F02D         	movff	?_atol,?_convert_to_int
  5740  0051E4  C026  F02E         	movff	?_atol+1,?_convert_to_int+1
  5741  0051E8  C027  F02F         	movff	?_atol+2,?_convert_to_int+2
  5742  0051EC  C028  F030         	movff	?_atol+3,?_convert_to_int+3
  5743                           
  5744                           ; BSR set to: 0
  5745  0051F0  0012               	return		;funcret
  5746  0051F2                     __end_of_convert_to_int:
  5747                           	callstack 0
  5748                           
  5749 ;; *************** function _atol *****************
  5750 ;; Defined at:
  5751 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\atol.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;  s               2   36[COMRAM] PTR const unsigned char 
  5754 ;;		 -> convert_to_int_point@convert_str(10), fence_diff_lat(40), fence_diff_long(44), 
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;  a               4    1[BANK0 ] long 
  5757 ;;  c               1    5[BANK0 ] unsigned char 
  5758 ;;  sign            1    0[BANK0 ] unsigned char 
  5759 ;; Return value:  Size  Location     Type
  5760 ;;                  4   36[COMRAM] long 
  5761 ;; Registers used:
  5762 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5763 ;; Tracked objects:
  5764 ;;		On entry : 0/0
  5765 ;;		On exit  : 3F/0
  5766 ;;		Unchanged: 0/0
  5767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5768 ;;      Params:         4       0       0       0       0       0       0       0       0
  5769 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5770 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5771 ;;      Totals:         8       6       0       0       0       0       0       0       0
  5772 ;;Total ram usage:       14 bytes
  5773 ;; Hardware stack levels used:    1
  5774 ;; Hardware stack levels required when called:    4
  5775 ;; This function calls:
  5776 ;;		___lmul
  5777 ;;		_isdigit
  5778 ;; This function is called by:
  5779 ;;		_convert_to_int
  5780 ;;		_convert_to_int_point
  5781 ;; This function uses a non-reentrant model
  5782 ;;
  5783                           
  5784                           	psect	text30
  5785  0033D4                     __ptext30:
  5786                           	callstack 0
  5787  0033D4                     _atol:
  5788                           	callstack 21
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;incstack = 0
  5792  0033D4  C025  FFF6         	movff	atol@s,tblptrl
  5793  0033D8  C026  FFF7         	movff	atol@s+1,tblptrh
  5794  0033DC  6AF8               	clrf	tblptru,c
  5795  0033DE  0E07               	movlw	(high __ramtop+-1)
  5796  0033E0  64F7               	cpfsgt	tblptrh,c
  5797  0033E2  D003               	bra	u12717
  5798  0033E4  0008               	tblrd		*
  5799  0033E6  50F5               	movf	tablat,w,c
  5800  0033E8  D005               	bra	u12710
  5801  0033EA                     u12717:
  5802  0033EA  CFF6 FFE1          	movff	tblptrl,fsr1l
  5803  0033EE  CFF7 FFE2          	movff	tblptrh,fsr1h
  5804  0033F2  50E7               	movf	indf1,w,c
  5805  0033F4                     u12710:
  5806  0033F4  0100               	movlb	0	; () banked
  5807  0033F6  6F65               	movwf	atol@c& (0+255),b
  5808                           
  5809                           ; BSR set to: 0
  5810  0033F8  4A25               	infsnz	atol@s^0,f,c
  5811  0033FA  2A26               	incf	(atol@s+1)^0,f,c
  5812                           
  5813                           ; BSR set to: 0
  5814  0033FC  0E20               	movlw	32
  5815  0033FE  1965               	xorwf	atol@c& (0+255),w,b
  5816  003400  B4D8               	btfsc	status,2,c
  5817  003402  D7E8               	goto	_atol
  5818                           
  5819                           ; BSR set to: 0
  5820  003404  0E09               	movlw	9
  5821  003406  1965               	xorwf	atol@c& (0+255),w,b
  5822  003408  B4D8               	btfsc	status,2,c
  5823  00340A  D7E4               	goto	_atol
  5824                           
  5825                           ; BSR set to: 0
  5826  00340C  0E00               	movlw	0
  5827  00340E  6F61               	movwf	atol@a& (0+255),b
  5828  003410  0E00               	movlw	0
  5829  003412  6F62               	movwf	(atol@a+1)& (0+255),b
  5830  003414  0E00               	movlw	0
  5831  003416  6F63               	movwf	(atol@a+2)& (0+255),b
  5832  003418  0E00               	movlw	0
  5833  00341A  6F64               	movwf	(atol@a+3)& (0+255),b
  5834  00341C  0E00               	movlw	0
  5835  00341E  6F60               	movwf	atol@sign& (0+255),b
  5836                           
  5837                           ; BSR set to: 0
  5838  003420  0E2D               	movlw	45
  5839  003422  1965               	xorwf	atol@c& (0+255),w,b
  5840  003424  A4D8               	btfss	status,2,c
  5841  003426  D016               	goto	l10943
  5842                           
  5843                           ; BSR set to: 0
  5844  003428  2B60               	incf	atol@sign& (0+255),f,b
  5845  00342A                     l10939:
  5846                           
  5847                           ; BSR set to: 0
  5848  00342A  C025  FFF6         	movff	atol@s,tblptrl
  5849  00342E  C026  FFF7         	movff	atol@s+1,tblptrh
  5850  003432  6AF8               	clrf	tblptru,c
  5851  003434  0E07               	movlw	(high __ramtop+-1)
  5852  003436  64F7               	cpfsgt	tblptrh,c
  5853  003438  D003               	bra	u12757
  5854  00343A  0008               	tblrd		*
  5855  00343C  50F5               	movf	tablat,w,c
  5856  00343E  D005               	bra	u12750
  5857  003440                     u12757:
  5858  003440  CFF6 FFE1          	movff	tblptrl,fsr1l
  5859  003444  CFF7 FFE2          	movff	tblptrh,fsr1h
  5860  003448  50E7               	movf	indf1,w,c
  5861  00344A                     u12750:
  5862  00344A  0100               	movlb	0	; () banked
  5863  00344C  6F65               	movwf	atol@c& (0+255),b
  5864                           
  5865                           ; BSR set to: 0
  5866  00344E  4A25               	infsnz	atol@s^0,f,c
  5867  003450  2A26               	incf	(atol@s+1)^0,f,c
  5868  003452  D029               	goto	l10955
  5869  003454                     l10943:
  5870                           
  5871                           ; BSR set to: 0
  5872  003454  0E2B               	movlw	43
  5873  003456  1965               	xorwf	atol@c& (0+255),w,b
  5874  003458  B4D8               	btfsc	status,2,c
  5875  00345A  D7E7               	goto	l10939
  5876  00345C  D024               	goto	l10955
  5877  00345E                     l10949:
  5878  00345E  C061  F019         	movff	atol@a,___lmul@multiplier
  5879  003462  C062  F01A         	movff	atol@a+1,___lmul@multiplier+1
  5880  003466  C063  F01B         	movff	atol@a+2,___lmul@multiplier+2
  5881  00346A  C064  F01C         	movff	atol@a+3,___lmul@multiplier+3
  5882  00346E  0E0A               	movlw	10
  5883  003470  6E1D               	movwf	___lmul@multiplicand^0,c
  5884  003472  0E00               	movlw	0
  5885  003474  6E1E               	movwf	(___lmul@multiplicand+1)^0,c
  5886  003476  0E00               	movlw	0
  5887  003478  6E1F               	movwf	(___lmul@multiplicand+2)^0,c
  5888  00347A  0E00               	movlw	0
  5889  00347C  6E20               	movwf	(___lmul@multiplicand+3)^0,c
  5890  00347E  ECCB  F025         	call	___lmul	;wreg free
  5891  003482  C065  F029         	movff	atol@c,??_atol
  5892  003486  0ED0               	movlw	208
  5893  003488  2629               	addwf	??_atol^0,f,c
  5894  00348A  5029               	movf	??_atol^0,w,c
  5895  00348C  2419               	addwf	?___lmul^0,w,c
  5896  00348E  0100               	movlb	0	; () banked
  5897  003490  6F61               	movwf	atol@a& (0+255),b
  5898  003492  0E00               	movlw	0
  5899  003494  201A               	addwfc	(?___lmul+1)^0,w,c
  5900  003496  6F62               	movwf	(atol@a+1)& (0+255),b
  5901  003498  0E00               	movlw	0
  5902  00349A  201B               	addwfc	(?___lmul+2)^0,w,c
  5903  00349C  6F63               	movwf	(atol@a+2)& (0+255),b
  5904  00349E  0E00               	movlw	0
  5905  0034A0  201C               	addwfc	(?___lmul+3)^0,w,c
  5906  0034A2  6F64               	movwf	(atol@a+3)& (0+255),b
  5907  0034A4  D7C2               	goto	l10939
  5908  0034A6                     l10955:
  5909                           
  5910                           ; BSR set to: 0
  5911  0034A6  5165               	movf	atol@c& (0+255),w,b
  5912  0034A8  EC7F  F029         	call	_isdigit
  5913  0034AC  B0D8               	btfsc	status,0,c
  5914  0034AE  D7D7               	goto	l10949
  5915  0034B0  0100               	movlb	0	; () banked
  5916  0034B2  5160               	movf	atol@sign& (0+255),w,b
  5917  0034B4  B4D8               	btfsc	status,2,c
  5918  0034B6  D01A               	goto	l2245
  5919                           
  5920                           ; BSR set to: 0
  5921  0034B8  C061  F029         	movff	atol@a,??_atol
  5922  0034BC  C062  F02A         	movff	atol@a+1,??_atol+1
  5923  0034C0  C063  F02B         	movff	atol@a+2,??_atol+2
  5924  0034C4  C064  F02C         	movff	atol@a+3,??_atol+3
  5925  0034C8  1E29               	comf	??_atol^0,f,c
  5926  0034CA  1E2A               	comf	(??_atol+1)^0,f,c
  5927  0034CC  1E2B               	comf	(??_atol+2)^0,f,c
  5928  0034CE  1E2C               	comf	(??_atol+3)^0,f,c
  5929  0034D0  2A29               	incf	??_atol^0,f,c
  5930  0034D2  0E00               	movlw	0
  5931  0034D4  222A               	addwfc	(??_atol+1)^0,f,c
  5932  0034D6  222B               	addwfc	(??_atol+2)^0,f,c
  5933  0034D8  222C               	addwfc	(??_atol+3)^0,f,c
  5934  0034DA  C029  F025         	movff	??_atol,?_atol
  5935  0034DE  C02A  F026         	movff	??_atol+1,?_atol+1
  5936  0034E2  C02B  F027         	movff	??_atol+2,?_atol+2
  5937  0034E6  C02C  F028         	movff	??_atol+3,?_atol+3
  5938  0034EA  0012               	return	
  5939  0034EC                     l2245:
  5940                           
  5941                           ; BSR set to: 0
  5942  0034EC  C061  F025         	movff	atol@a,?_atol
  5943  0034F0  C062  F026         	movff	atol@a+1,?_atol+1
  5944  0034F4  C063  F027         	movff	atol@a+2,?_atol+2
  5945  0034F8  C064  F028         	movff	atol@a+3,?_atol+3
  5946                           
  5947                           ; BSR set to: 0
  5948  0034FC  0012               	return		;funcret
  5949  0034FE                     __end_of_atol:
  5950                           	callstack 0
  5951                           
  5952 ;; *************** function _isdigit *****************
  5953 ;; Defined at:
  5954 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\isdigit.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;  c               1    wreg     unsigned char 
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;  c               1   26[COMRAM] unsigned char 
  5959 ;; Return value:  Size  Location     Type
  5960 ;;		None               void
  5961 ;; Registers used:
  5962 ;;		wreg, status,2, status,0
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5968 ;;      Params:         0       0       0       0       0       0       0       0       0
  5969 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5970 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5971 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5972 ;;Total ram usage:        3 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; Hardware stack levels required when called:    3
  5975 ;; This function calls:
  5976 ;;		Nothing
  5977 ;; This function is called by:
  5978 ;;		_atoi
  5979 ;;		_atol
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           	psect	text31
  5984  0052FE                     __ptext31:
  5985                           	callstack 0
  5986  0052FE                     _isdigit:
  5987                           	callstack 21
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;incstack = 0
  5991                           ;isdigit@c stored from wreg
  5992  0052FE  6E1B               	movwf	isdigit@c^0,c
  5993  005300  0E00               	movlw	0
  5994  005302  6E1A               	movwf	_isdigit$3149^0,c
  5995  005304  0E3A               	movlw	58
  5996  005306  601B               	cpfslt	isdigit@c^0,c
  5997  005308  D005               	goto	l10457
  5998  00530A  0E2F               	movlw	47
  5999  00530C  641B               	cpfsgt	isdigit@c^0,c
  6000  00530E  D002               	goto	l10457
  6001  005310  0E01               	movlw	1
  6002  005312  6E1A               	movwf	_isdigit$3149^0,c
  6003  005314                     l10457:
  6004  005314  C01A  F019         	movff	_isdigit$3149,??_isdigit
  6005  005318  3019               	rrcf	??_isdigit^0,w,c
  6006  00531A  0012               	return		;funcret
  6007  00531C                     __end_of_isdigit:
  6008                           	callstack 0
  6009                           
  6010 ;; *************** function _armazena_longitude *****************
  6011 ;; Defined at:
  6012 ;;		line 58 in file "bibliotecas/fence.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;		None
  6015 ;; Auto vars:     Size  Location     Type
  6016 ;;		None
  6017 ;; Return value:  Size  Location     Type
  6018 ;;                  1    wreg      void 
  6019 ;; Registers used:
  6020 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6021 ;; Tracked objects:
  6022 ;;		On entry : 0/0
  6023 ;;		On exit  : 0/0
  6024 ;;		Unchanged: 0/0
  6025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6026 ;;      Params:         0       0       0       0       0       0       0       0       0
  6027 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6028 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6029 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6030 ;;Total ram usage:        0 bytes
  6031 ;; Hardware stack levels used:    1
  6032 ;; Hardware stack levels required when called:    5
  6033 ;; This function calls:
  6034 ;;		_Longitude
  6035 ;; This function is called by:
  6036 ;;		_verifica_fence_externo
  6037 ;; This function uses a non-reentrant model
  6038 ;;
  6039                           
  6040                           	psect	text32
  6041  00543C                     __ptext32:
  6042                           	callstack 0
  6043  00543C                     _armazena_longitude:
  6044                           	callstack 22
  6045                           
  6046                           ;fence.c: 60: temp_buff_long = Longitude();
  6047                           
  6048                           ;incstack = 0
  6049  00543C  EC8E  F029         	call	_Longitude	;wreg free
  6050  005440  C01F  F032         	movff	?_Longitude,_temp_buff_long
  6051  005444  C020  F033         	movff	?_Longitude+1,_temp_buff_long+1
  6052  005448  0012               	return		;funcret
  6053  00544A                     __end_of_armazena_longitude:
  6054                           	callstack 0
  6055                           
  6056 ;; *************** function _Longitude *****************
  6057 ;; Defined at:
  6058 ;;		line 191 in file "bibliotecas/GPS.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;		None
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;		None
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  2   30[COMRAM] PTR unsigned char 
  6065 ;; Registers used:
  6066 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6072 ;;      Params:         2       0       0       0       0       0       0       0       0
  6073 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6074 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6075 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6076 ;;Total ram usage:        2 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; Hardware stack levels required when called:    4
  6079 ;; This function calls:
  6080 ;;		_strcpy
  6081 ;; This function is called by:
  6082 ;;		_troca_de_tela
  6083 ;;		_armazena_longitude
  6084 ;; This function uses a non-reentrant model
  6085 ;;
  6086                           
  6087                           	psect	text33
  6088  00531C                     __ptext33:
  6089                           	callstack 0
  6090  00531C                     _Longitude:
  6091                           	callstack 22
  6092                           
  6093                           ;GPS.c: 193: strcpy(rawLongitude, "-04630.24580");
  6094                           
  6095                           ;incstack = 0
  6096  00531C  0E93               	movlw	low _rawLongitude
  6097  00531E  6E19               	movwf	strcpy@to^0,c
  6098  005320  0E01               	movlw	high _rawLongitude
  6099  005322  6E1A               	movwf	(strcpy@to+1)^0,c
  6100  005324  0EC8               	movlw	low STR_8
  6101  005326  6E1B               	movwf	strcpy@from^0,c
  6102  005328  0E61               	movlw	high STR_8
  6103  00532A  6E1C               	movwf	(strcpy@from+1)^0,c
  6104  00532C  ECFF  F026         	call	_strcpy	;wreg free
  6105                           
  6106                           ;GPS.c: 194: return rawLongitude;
  6107  005330  0E93               	movlw	low _rawLongitude
  6108  005332  6E1F               	movwf	?_Longitude^0,c
  6109  005334  0E01               	movlw	high _rawLongitude
  6110  005336  6E20               	movwf	(?_Longitude+1)^0,c
  6111  005338  0012               	return		;funcret
  6112  00533A                     __end_of_Longitude:
  6113                           	callstack 0
  6114                           
  6115 ;; *************** function _armazena_latitude *****************
  6116 ;; Defined at:
  6117 ;;		line 70 in file "bibliotecas/fence.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;		None
  6122 ;; Return value:  Size  Location     Type
  6123 ;;                  1    wreg      void 
  6124 ;; Registers used:
  6125 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6131 ;;      Params:         0       0       0       0       0       0       0       0       0
  6132 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6133 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6134 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6135 ;;Total ram usage:        0 bytes
  6136 ;; Hardware stack levels used:    1
  6137 ;; Hardware stack levels required when called:    5
  6138 ;; This function calls:
  6139 ;;		_Latitude
  6140 ;; This function is called by:
  6141 ;;		_verifica_fence_externo
  6142 ;; This function uses a non-reentrant model
  6143 ;;
  6144                           
  6145                           	psect	text34
  6146  00544A                     __ptext34:
  6147                           	callstack 0
  6148  00544A                     _armazena_latitude:
  6149                           	callstack 22
  6150                           
  6151                           ;fence.c: 72: temp_buff_lat = Latitude();
  6152                           
  6153                           ;incstack = 0
  6154  00544A  EC9D  F029         	call	_Latitude	;wreg free
  6155  00544E  C01F  F034         	movff	?_Latitude,_temp_buff_lat
  6156  005452  C020  F035         	movff	?_Latitude+1,_temp_buff_lat+1
  6157  005456  0012               	return		;funcret
  6158  005458                     __end_of_armazena_latitude:
  6159                           	callstack 0
  6160                           
  6161 ;; *************** function _Latitude *****************
  6162 ;; Defined at:
  6163 ;;		line 185 in file "bibliotecas/GPS.c"
  6164 ;; Parameters:    Size  Location     Type
  6165 ;;		None
  6166 ;; Auto vars:     Size  Location     Type
  6167 ;;		None
  6168 ;; Return value:  Size  Location     Type
  6169 ;;                  2   30[COMRAM] PTR unsigned char 
  6170 ;; Registers used:
  6171 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6172 ;; Tracked objects:
  6173 ;;		On entry : 0/0
  6174 ;;		On exit  : 0/0
  6175 ;;		Unchanged: 0/0
  6176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6177 ;;      Params:         2       0       0       0       0       0       0       0       0
  6178 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6179 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6180 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6181 ;;Total ram usage:        2 bytes
  6182 ;; Hardware stack levels used:    1
  6183 ;; Hardware stack levels required when called:    4
  6184 ;; This function calls:
  6185 ;;		_strcpy
  6186 ;; This function is called by:
  6187 ;;		_troca_de_tela
  6188 ;;		_armazena_latitude
  6189 ;; This function uses a non-reentrant model
  6190 ;;
  6191                           
  6192                           	psect	text35
  6193  00533A                     __ptext35:
  6194                           	callstack 0
  6195  00533A                     _Latitude:
  6196                           	callstack 22
  6197                           
  6198                           ;GPS.c: 187: strcpy(rawLatitude,"-2342.01673");
  6199                           
  6200                           ;incstack = 0
  6201  00533A  0EA0               	movlw	low _rawLatitude
  6202  00533C  6E19               	movwf	strcpy@to^0,c
  6203  00533E  0E01               	movlw	high _rawLatitude
  6204  005340  6E1A               	movwf	(strcpy@to+1)^0,c
  6205  005342  0ED5               	movlw	low STR_7
  6206  005344  6E1B               	movwf	strcpy@from^0,c
  6207  005346  0E61               	movlw	high STR_7
  6208  005348  6E1C               	movwf	(strcpy@from+1)^0,c
  6209  00534A  ECFF  F026         	call	_strcpy	;wreg free
  6210                           
  6211                           ;GPS.c: 188: return rawLatitude;
  6212  00534E  0EA0               	movlw	low _rawLatitude
  6213  005350  6E1F               	movwf	?_Latitude^0,c
  6214  005352  0E01               	movlw	high _rawLatitude
  6215  005354  6E20               	movwf	(?_Latitude+1)^0,c
  6216  005356  0012               	return		;funcret
  6217  005358                     __end_of_Latitude:
  6218                           	callstack 0
  6219                           
  6220 ;; *************** function _grava_sd *****************
  6221 ;; Defined at:
  6222 ;;		line 616 in file "main.c"
  6223 ;; Parameters:    Size  Location     Type
  6224 ;;		None
  6225 ;; Auto vars:     Size  Location     Type
  6226 ;;  flag_gps        1    0        unsigned char 
  6227 ;; Return value:  Size  Location     Type
  6228 ;;                  1    wreg      void 
  6229 ;; Registers used:
  6230 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6231 ;; Tracked objects:
  6232 ;;		On entry : 0/0
  6233 ;;		On exit  : 0/0
  6234 ;;		Unchanged: 0/0
  6235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6236 ;;      Params:         0       0       0       0       0       0       0       0       0
  6237 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6238 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6239 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6240 ;;Total ram usage:        1 bytes
  6241 ;; Hardware stack levels used:    1
  6242 ;; Hardware stack levels required when called:   16
  6243 ;; This function calls:
  6244 ;;		_desliga_SPI
  6245 ;;		_desliga_uart
  6246 ;;		_escrita_sdcard
  6247 ;;		_inicializa_SPI
  6248 ;;		_inicializa_uart
  6249 ;; This function is called by:
  6250 ;;		_disparo_gravacao
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           	psect	text36
  6255  0053AC                     __ptext36:
  6256                           	callstack 0
  6257  0053AC                     _grava_sd:
  6258                           	callstack 12
  6259                           
  6260                           ;main.c: 619: desliga_uart();
  6261                           
  6262                           ;incstack = 0
  6263  0053AC  EC2C  F02A         	call	_desliga_uart	;wreg free
  6264                           
  6265                           ;main.c: 620: inicializa_SPI();
  6266  0053B0  EC5F  F029         	call	_inicializa_SPI	;wreg free
  6267                           
  6268                           ;main.c: 621: PORTBbits.RB3 = 0;
  6269  0053B4  9681               	bcf	129,3,c	;volatile
  6270                           
  6271                           ;main.c: 622: escrita_sdcard();
  6272  0053B6  EC7F  F01A         	call	_escrita_sdcard	;wreg free
  6273                           
  6274                           ;main.c: 623: PORTBbits.RB3 = 1;
  6275  0053BA  8681               	bsf	129,3,c	;volatile
  6276                           
  6277                           ;main.c: 624: inicializa_uart();
  6278  0053BC  ECF9  F028         	call	_inicializa_uart	;wreg free
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;main.c: 625: desliga_SPI();
  6282  0053C0  EC45  F02A         	call	_desliga_SPI	;wreg free
  6283  0053C4  0012               	return		;funcret
  6284  0053C6                     __end_of_grava_sd:
  6285                           	callstack 0
  6286                           
  6287 ;; *************** function _inicializa_uart *****************
  6288 ;; Defined at:
  6289 ;;		line 206 in file "bibliotecas/uart.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;		None
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;		None
  6294 ;; Return value:  Size  Location     Type
  6295 ;;                  1    wreg      void 
  6296 ;; Registers used:
  6297 ;;		wreg, status,2, status,0, cstack
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/1
  6300 ;;		On exit  : 3F/0
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6303 ;;      Params:         0       0       0       0       0       0       0       0       0
  6304 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6305 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6306 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6307 ;;Total ram usage:        0 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; Hardware stack levels required when called:    5
  6310 ;; This function calls:
  6311 ;;		_configura_baudrate_uart
  6312 ;; This function is called by:
  6313 ;;		_main
  6314 ;;		_grava_sd
  6315 ;; This function uses a non-reentrant model
  6316 ;;
  6317                           
  6318                           	psect	text37
  6319  0051F2                     __ptext37:
  6320                           	callstack 0
  6321  0051F2                     _inicializa_uart:
  6322                           	callstack 25
  6323                           
  6324                           ;uart.c: 208: TRISCbits.RC6 = 0;
  6325                           
  6326                           ;incstack = 0
  6327  0051F2  9C94               	bcf	148,6,c	;volatile
  6328                           
  6329                           ;uart.c: 209: TRISCbits.RC7 = 0;
  6330  0051F4  9E94               	bcf	148,7,c	;volatile
  6331                           
  6332                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  6333  0051F6  0E80               	movlw	128
  6334  0051F8  6E27               	movwf	configura_baudrate_uart@baudrate^0,c
  6335  0051FA  0E25               	movlw	37
  6336  0051FC  6E28               	movwf	(configura_baudrate_uart@baudrate+1)^0,c
  6337  0051FE  0E00               	movlw	0
  6338  005200  6E29               	movwf	(configura_baudrate_uart@baudrate+2)^0,c
  6339  005202  0E00               	movlw	0
  6340  005204  6E2A               	movwf	(configura_baudrate_uart@baudrate+3)^0,c
  6341  005206  ECC2  F01C         	call	_configura_baudrate_uart	;wreg free
  6342                           
  6343                           ; BSR set to: 0
  6344                           ;uart.c: 213: TXSTA = 0x20;
  6345  00520A  0E20               	movlw	32
  6346  00520C  6EAC               	movwf	172,c	;volatile
  6347                           
  6348                           ; BSR set to: 0
  6349                           ;uart.c: 214: RCSTA = 0x90;
  6350  00520E  0E90               	movlw	144
  6351  005210  6EAB               	movwf	171,c	;volatile
  6352                           
  6353                           ; BSR set to: 0
  6354  005212  0012               	return		;funcret
  6355  005214                     __end_of_inicializa_uart:
  6356                           	callstack 0
  6357                           
  6358 ;; *************** function _configura_baudrate_uart *****************
  6359 ;; Defined at:
  6360 ;;		line 50 in file "bibliotecas/uart.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;  baudrate        4   38[COMRAM] const long 
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;  x               2   42[COMRAM] unsigned int 
  6365 ;; Return value:  Size  Location     Type
  6366 ;;                  1    wreg      unsigned char 
  6367 ;; Registers used:
  6368 ;;		wreg, status,2, status,0, cstack
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/1
  6371 ;;		On exit  : 3F/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6374 ;;      Params:         4       0       0       0       0       0       0       0       0
  6375 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6376 ;;      Temps:          0       8       0       0       0       0       0       0       0
  6377 ;;      Totals:         6       8       0       0       0       0       0       0       0
  6378 ;;Total ram usage:       14 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; Hardware stack levels required when called:    4
  6381 ;; This function calls:
  6382 ;;		___aldiv
  6383 ;; This function is called by:
  6384 ;;		_inicializa_uart
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           	psect	text38
  6389  003984                     __ptext38:
  6390                           	callstack 0
  6391  003984                     _configura_baudrate_uart:
  6392                           	callstack 25
  6393                           
  6394                           ;uart.c: 52: unsigned int x;;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;incstack = 0
  6398  003984  C027  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  6399  003988  C028  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  6400  00398C  C029  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  6401  003990  C02A  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  6402  003994  0E06               	movlw	6
  6403  003996                     u13485:
  6404  003996  90D8               	bcf	status,0,c
  6405  003998  0100               	movlb	0	; () banked
  6406  00399A  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  6407  00399C  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  6408  00399E  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  6409  0039A0  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  6410  0039A2  2EE8               	decfsz	wreg,f,c
  6411  0039A4  D7F8               	goto	u13485
  6412  0039A6  5160               	movf	??_configura_baudrate_uart& (0+255),w,b
  6413  0039A8  0800               	sublw	0
  6414  0039AA  6E19               	movwf	___aldiv@dividend^0,c
  6415  0039AC  0E6C               	movlw	108
  6416  0039AE  5561               	subfwb	(??_configura_baudrate_uart+1)& (0+255),w,b
  6417  0039B0  6E1A               	movwf	(___aldiv@dividend+1)^0,c
  6418  0039B2  0EDC               	movlw	220
  6419  0039B4  5562               	subfwb	(??_configura_baudrate_uart+2)& (0+255),w,b
  6420  0039B6  6E1B               	movwf	(___aldiv@dividend+2)^0,c
  6421  0039B8  0E02               	movlw	2
  6422  0039BA  5563               	subfwb	(??_configura_baudrate_uart+3)& (0+255),w,b
  6423  0039BC  6E1C               	movwf	(___aldiv@dividend+3)^0,c
  6424  0039BE  C027  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  6425  0039C2  C028  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  6426  0039C6  C029  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  6427  0039CA  C02A  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  6428  0039CE  0E06               	movlw	6
  6429  0039D0                     u13495:
  6430  0039D0  90D8               	bcf	status,0,c
  6431  0039D2  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  6432  0039D4  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  6433  0039D6  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  6434  0039D8  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  6435  0039DA  2EE8               	decfsz	wreg,f,c
  6436  0039DC  D7F9               	goto	u13495
  6437  0039DE  C064  F01D         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  6438  0039E2  C065  F01E         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  6439  0039E6  C066  F01F         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  6440  0039EA  C067  F020         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  6441  0039EE  EC9C  F01E         	call	___aldiv	;wreg free
  6442  0039F2  C019  F02B         	movff	?___aldiv,configura_baudrate_uart@x
  6443  0039F6  C01A  F02C         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  6444                           
  6445                           ; BSR set to: 0
  6446                           ;uart.c: 55: if(x > 255)
  6447  0039FA  042C               	decf	(configura_baudrate_uart@x+1)^0,w,c
  6448  0039FC  A0D8               	btfss	status,0,c
  6449  0039FE  D03B               	goto	l11369
  6450                           
  6451                           ; BSR set to: 0
  6452                           ;uart.c: 56: {;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  6453  003A00  C027  F060         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  6454  003A04  C028  F061         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  6455  003A08  C029  F062         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  6456  003A0C  C02A  F063         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  6457  003A10  0E04               	movlw	4
  6458  003A12                     u13515:
  6459  003A12  90D8               	bcf	status,0,c
  6460  003A14  3760               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  6461  003A16  3761               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  6462  003A18  3762               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  6463  003A1A  3763               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  6464  003A1C  2EE8               	decfsz	wreg,f,c
  6465  003A1E  D7F9               	goto	u13515
  6466  003A20  5160               	movf	??_configura_baudrate_uart& (0+255),w,b
  6467  003A22  0800               	sublw	0
  6468  003A24  6E19               	movwf	___aldiv@dividend^0,c
  6469  003A26  0E6C               	movlw	108
  6470  003A28  5561               	subfwb	(??_configura_baudrate_uart+1)& (0+255),w,b
  6471  003A2A  6E1A               	movwf	(___aldiv@dividend+1)^0,c
  6472  003A2C  0EDC               	movlw	220
  6473  003A2E  5562               	subfwb	(??_configura_baudrate_uart+2)& (0+255),w,b
  6474  003A30  6E1B               	movwf	(___aldiv@dividend+2)^0,c
  6475  003A32  0E02               	movlw	2
  6476  003A34  5563               	subfwb	(??_configura_baudrate_uart+3)& (0+255),w,b
  6477  003A36  6E1C               	movwf	(___aldiv@dividend+3)^0,c
  6478  003A38  C027  F064         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  6479  003A3C  C028  F065         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  6480  003A40  C029  F066         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  6481  003A44  C02A  F067         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  6482  003A48  0E04               	movlw	4
  6483  003A4A                     u13525:
  6484  003A4A  90D8               	bcf	status,0,c
  6485  003A4C  3764               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  6486  003A4E  3765               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  6487  003A50  3766               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  6488  003A52  3767               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  6489  003A54  2EE8               	decfsz	wreg,f,c
  6490  003A56  D7F9               	goto	u13525
  6491  003A58  C064  F01D         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  6492  003A5C  C065  F01E         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  6493  003A60  C066  F01F         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  6494  003A64  C067  F020         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  6495  003A68  EC9C  F01E         	call	___aldiv	;wreg free
  6496  003A6C  C019  F02B         	movff	?___aldiv,configura_baudrate_uart@x
  6497  003A70  C01A  F02C         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;uart.c: 58: BRGH = 1;
  6501  003A74  84AC               	bsf	4012,2,c	;volatile
  6502  003A76                     l11369:
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;uart.c: 59: };uart.c: 60: if(x < 256)
  6506  003A76  042C               	decf	(configura_baudrate_uart@x+1)^0,w,c
  6507  003A78  B0D8               	btfsc	status,0,c
  6508  003A7A  0012               	return	
  6509                           
  6510                           ; BSR set to: 0
  6511                           ;uart.c: 61: {;uart.c: 62: SPBRG = x;
  6512  003A7C  C02B  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  6513                           
  6514                           ;uart.c: 63: SYNC = 0;
  6515  003A80  98AC               	bcf	4012,4,c	;volatile
  6516                           
  6517                           ;uart.c: 64: SPEN = 1;
  6518  003A82  8EAB               	bsf	4011,7,c	;volatile
  6519                           
  6520                           ;uart.c: 65: TRISCbits.RC7 = 1;
  6521  003A84  8E94               	bsf	148,7,c	;volatile
  6522                           
  6523                           ;uart.c: 66: TRISCbits.RC6 = 0;
  6524  003A86  9C94               	bcf	148,6,c	;volatile
  6525                           
  6526                           ;uart.c: 67: CREN = 1;
  6527  003A88  88AB               	bsf	4011,4,c	;volatile
  6528                           
  6529                           ;uart.c: 68: TXEN = 1;
  6530  003A8A  8AAC               	bsf	4012,5,c	;volatile
  6531                           
  6532                           ; BSR set to: 0
  6533                           
  6534                           ;uart.c: 70: return (1);;	Return value of _configura_baudrate_uart is never used
  6535  003A8C  0012               	return		;funcret
  6536  003A8E                     __end_of_configura_baudrate_uart:
  6537                           	callstack 0
  6538                           
  6539 ;; *************** function ___aldiv *****************
  6540 ;; Defined at:
  6541 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\aldiv.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;  dividend        4   24[COMRAM] long 
  6544 ;;  divisor         4   28[COMRAM] long 
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;  quotient        4   34[COMRAM] long 
  6547 ;;  sign            1   33[COMRAM] unsigned char 
  6548 ;;  counter         1   32[COMRAM] unsigned char 
  6549 ;; Return value:  Size  Location     Type
  6550 ;;                  4   24[COMRAM] long 
  6551 ;; Registers used:
  6552 ;;		wreg, status,2, status,0
  6553 ;; Tracked objects:
  6554 ;;		On entry : 3F/0
  6555 ;;		On exit  : 3F/0
  6556 ;;		Unchanged: 3F/0
  6557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6558 ;;      Params:         8       0       0       0       0       0       0       0       0
  6559 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6560 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6561 ;;      Totals:        14       0       0       0       0       0       0       0       0
  6562 ;;Total ram usage:       14 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; Hardware stack levels required when called:    3
  6565 ;; This function calls:
  6566 ;;		Nothing
  6567 ;; This function is called by:
  6568 ;;		_configura_baudrate_uart
  6569 ;; This function uses a non-reentrant model
  6570 ;;
  6571                           
  6572                           	psect	text39
  6573  003D38                     __ptext39:
  6574                           	callstack 0
  6575  003D38                     ___aldiv:
  6576                           	callstack 25
  6577                           
  6578                           ; BSR set to: 0
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;incstack = 0
  6582  003D38  0E00               	movlw	0
  6583  003D3A  6E22               	movwf	___aldiv@sign^0,c
  6584                           
  6585                           ; BSR set to: 0
  6586  003D3C  AE20               	btfss	(___aldiv@divisor+3)^0,7,c
  6587  003D3E  D00A               	goto	l7671
  6588                           
  6589                           ; BSR set to: 0
  6590  003D40  1E20               	comf	(___aldiv@divisor+3)^0,f,c
  6591  003D42  1E1F               	comf	(___aldiv@divisor+2)^0,f,c
  6592  003D44  1E1E               	comf	(___aldiv@divisor+1)^0,f,c
  6593  003D46  6C1D               	negf	___aldiv@divisor^0,c
  6594  003D48  0E00               	movlw	0
  6595  003D4A  221E               	addwfc	(___aldiv@divisor+1)^0,f,c
  6596  003D4C  221F               	addwfc	(___aldiv@divisor+2)^0,f,c
  6597  003D4E  2220               	addwfc	(___aldiv@divisor+3)^0,f,c
  6598                           
  6599                           ; BSR set to: 0
  6600  003D50  0E01               	movlw	1
  6601  003D52  6E22               	movwf	___aldiv@sign^0,c
  6602  003D54                     l7671:
  6603                           
  6604                           ; BSR set to: 0
  6605  003D54  AE1C               	btfss	(___aldiv@dividend+3)^0,7,c
  6606  003D56  D00A               	goto	l7677
  6607                           
  6608                           ; BSR set to: 0
  6609  003D58  1E1C               	comf	(___aldiv@dividend+3)^0,f,c
  6610  003D5A  1E1B               	comf	(___aldiv@dividend+2)^0,f,c
  6611  003D5C  1E1A               	comf	(___aldiv@dividend+1)^0,f,c
  6612  003D5E  6C19               	negf	___aldiv@dividend^0,c
  6613  003D60  0E00               	movlw	0
  6614  003D62  221A               	addwfc	(___aldiv@dividend+1)^0,f,c
  6615  003D64  221B               	addwfc	(___aldiv@dividend+2)^0,f,c
  6616  003D66  221C               	addwfc	(___aldiv@dividend+3)^0,f,c
  6617                           
  6618                           ; BSR set to: 0
  6619  003D68  0E01               	movlw	1
  6620  003D6A  1A22               	xorwf	___aldiv@sign^0,f,c
  6621  003D6C                     l7677:
  6622                           
  6623                           ; BSR set to: 0
  6624  003D6C  0E00               	movlw	0
  6625  003D6E  6E23               	movwf	___aldiv@quotient^0,c
  6626  003D70  0E00               	movlw	0
  6627  003D72  6E24               	movwf	(___aldiv@quotient+1)^0,c
  6628  003D74  0E00               	movlw	0
  6629  003D76  6E25               	movwf	(___aldiv@quotient+2)^0,c
  6630  003D78  0E00               	movlw	0
  6631  003D7A  6E26               	movwf	(___aldiv@quotient+3)^0,c
  6632                           
  6633                           ; BSR set to: 0
  6634  003D7C  501D               	movf	___aldiv@divisor^0,w,c
  6635  003D7E  101E               	iorwf	(___aldiv@divisor+1)^0,w,c
  6636  003D80  101F               	iorwf	(___aldiv@divisor+2)^0,w,c
  6637  003D82  1020               	iorwf	(___aldiv@divisor+3)^0,w,c
  6638  003D84  B4D8               	btfsc	status,2,c
  6639  003D86  D02A               	goto	l7699
  6640                           
  6641                           ; BSR set to: 0
  6642  003D88  0E01               	movlw	1
  6643  003D8A  6E21               	movwf	___aldiv@counter^0,c
  6644  003D8C  D006               	goto	l7685
  6645  003D8E                     l7683:
  6646                           
  6647                           ; BSR set to: 0
  6648  003D8E  90D8               	bcf	status,0,c
  6649  003D90  361D               	rlcf	___aldiv@divisor^0,f,c
  6650  003D92  361E               	rlcf	(___aldiv@divisor+1)^0,f,c
  6651  003D94  361F               	rlcf	(___aldiv@divisor+2)^0,f,c
  6652  003D96  3620               	rlcf	(___aldiv@divisor+3)^0,f,c
  6653  003D98  2A21               	incf	___aldiv@counter^0,f,c
  6654  003D9A                     l7685:
  6655                           
  6656                           ; BSR set to: 0
  6657  003D9A  AE20               	btfss	(___aldiv@divisor+3)^0,7,c
  6658  003D9C  D7F8               	goto	l7683
  6659  003D9E                     u7890:
  6660                           
  6661                           ; BSR set to: 0
  6662  003D9E  90D8               	bcf	status,0,c
  6663  003DA0  3623               	rlcf	___aldiv@quotient^0,f,c
  6664  003DA2  3624               	rlcf	(___aldiv@quotient+1)^0,f,c
  6665  003DA4  3625               	rlcf	(___aldiv@quotient+2)^0,f,c
  6666  003DA6  3626               	rlcf	(___aldiv@quotient+3)^0,f,c
  6667                           
  6668                           ; BSR set to: 0
  6669  003DA8  501D               	movf	___aldiv@divisor^0,w,c
  6670  003DAA  5C19               	subwf	___aldiv@dividend^0,w,c
  6671  003DAC  501E               	movf	(___aldiv@divisor+1)^0,w,c
  6672  003DAE  581A               	subwfb	(___aldiv@dividend+1)^0,w,c
  6673  003DB0  501F               	movf	(___aldiv@divisor+2)^0,w,c
  6674  003DB2  581B               	subwfb	(___aldiv@dividend+2)^0,w,c
  6675  003DB4  5020               	movf	(___aldiv@divisor+3)^0,w,c
  6676  003DB6  581C               	subwfb	(___aldiv@dividend+3)^0,w,c
  6677  003DB8  A0D8               	btfss	status,0,c
  6678  003DBA  D009               	goto	l7695
  6679                           
  6680                           ; BSR set to: 0
  6681  003DBC  501D               	movf	___aldiv@divisor^0,w,c
  6682  003DBE  5E19               	subwf	___aldiv@dividend^0,f,c
  6683  003DC0  501E               	movf	(___aldiv@divisor+1)^0,w,c
  6684  003DC2  5A1A               	subwfb	(___aldiv@dividend+1)^0,f,c
  6685  003DC4  501F               	movf	(___aldiv@divisor+2)^0,w,c
  6686  003DC6  5A1B               	subwfb	(___aldiv@dividend+2)^0,f,c
  6687  003DC8  5020               	movf	(___aldiv@divisor+3)^0,w,c
  6688  003DCA  5A1C               	subwfb	(___aldiv@dividend+3)^0,f,c
  6689                           
  6690                           ; BSR set to: 0
  6691  003DCC  8023               	bsf	___aldiv@quotient^0,0,c
  6692  003DCE                     l7695:
  6693                           
  6694                           ; BSR set to: 0
  6695  003DCE  90D8               	bcf	status,0,c
  6696  003DD0  3220               	rrcf	(___aldiv@divisor+3)^0,f,c
  6697  003DD2  321F               	rrcf	(___aldiv@divisor+2)^0,f,c
  6698  003DD4  321E               	rrcf	(___aldiv@divisor+1)^0,f,c
  6699  003DD6  321D               	rrcf	___aldiv@divisor^0,f,c
  6700                           
  6701                           ; BSR set to: 0
  6702  003DD8  2E21               	decfsz	___aldiv@counter^0,f,c
  6703  003DDA  D7E1               	goto	u7890
  6704  003DDC                     l7699:
  6705                           
  6706                           ; BSR set to: 0
  6707  003DDC  5022               	movf	___aldiv@sign^0,w,c
  6708  003DDE  B4D8               	btfsc	status,2,c
  6709  003DE0  D008               	goto	l7703
  6710                           
  6711                           ; BSR set to: 0
  6712  003DE2  1E26               	comf	(___aldiv@quotient+3)^0,f,c
  6713  003DE4  1E25               	comf	(___aldiv@quotient+2)^0,f,c
  6714  003DE6  1E24               	comf	(___aldiv@quotient+1)^0,f,c
  6715  003DE8  6C23               	negf	___aldiv@quotient^0,c
  6716  003DEA  0E00               	movlw	0
  6717  003DEC  2224               	addwfc	(___aldiv@quotient+1)^0,f,c
  6718  003DEE  2225               	addwfc	(___aldiv@quotient+2)^0,f,c
  6719  003DF0  2226               	addwfc	(___aldiv@quotient+3)^0,f,c
  6720  003DF2                     l7703:
  6721                           
  6722                           ; BSR set to: 0
  6723  003DF2  C023  F019         	movff	___aldiv@quotient,?___aldiv
  6724  003DF6  C024  F01A         	movff	___aldiv@quotient+1,?___aldiv+1
  6725  003DFA  C025  F01B         	movff	___aldiv@quotient+2,?___aldiv+2
  6726  003DFE  C026  F01C         	movff	___aldiv@quotient+3,?___aldiv+3
  6727                           
  6728                           ; BSR set to: 0
  6729  003E02  0012               	return		;funcret
  6730  003E04                     __end_of___aldiv:
  6731                           	callstack 0
  6732                           
  6733 ;; *************** function _inicializa_SPI *****************
  6734 ;; Defined at:
  6735 ;;		line 48 in file "bibliotecas/SPI.c"
  6736 ;; Parameters:    Size  Location     Type
  6737 ;;		None
  6738 ;; Auto vars:     Size  Location     Type
  6739 ;;		None
  6740 ;; Return value:  Size  Location     Type
  6741 ;;                  1    wreg      void 
  6742 ;; Registers used:
  6743 ;;		wreg, status,2, status,0
  6744 ;; Tracked objects:
  6745 ;;		On entry : 0/0
  6746 ;;		On exit  : 0/0
  6747 ;;		Unchanged: 0/0
  6748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6749 ;;      Params:         0       0       0       0       0       0       0       0       0
  6750 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6751 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6752 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6753 ;;Total ram usage:        0 bytes
  6754 ;; Hardware stack levels used:    1
  6755 ;; Hardware stack levels required when called:    3
  6756 ;; This function calls:
  6757 ;;		Nothing
  6758 ;; This function is called by:
  6759 ;;		_grava_sd
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763                           	psect	text40
  6764  0052BE                     __ptext40:
  6765                           	callstack 0
  6766  0052BE                     _inicializa_SPI:
  6767                           	callstack 24
  6768                           
  6769                           ;SPI.c: 50: TRISBbits.RB1 = 0;
  6770                           
  6771                           ; BSR set to: 0
  6772                           ;incstack = 0
  6773  0052BE  9293               	bcf	147,1,c	;volatile
  6774                           
  6775                           ;SPI.c: 51: TRISBbits.RB5 = 0;
  6776  0052C0  9A93               	bcf	147,5,c	;volatile
  6777                           
  6778                           ;SPI.c: 52: TRISBbits.RB0 = 1;
  6779  0052C2  8093               	bsf	147,0,c	;volatile
  6780                           
  6781                           ;SPI.c: 53: TRISCbits.RC7 = 0;
  6782  0052C4  9E94               	bcf	148,7,c	;volatile
  6783                           
  6784                           ;SPI.c: 55: LATBbits.LATB5 = 1;
  6785  0052C6  8A8A               	bsf	138,5,c	;volatile
  6786                           
  6787                           ;SPI.c: 56: SSPSTAT &= 0x3F;
  6788  0052C8  0E3F               	movlw	63
  6789  0052CA  16C7               	andwf	199,f,c	;volatile
  6790                           
  6791                           ;SPI.c: 57: SSPCON1 = 0x00;
  6792  0052CC  0E00               	movlw	0
  6793  0052CE  6EC6               	movwf	198,c	;volatile
  6794                           
  6795                           ;SPI.c: 59: SSPSTATbits.SMP = 0;
  6796  0052D0  9EC7               	bcf	199,7,c	;volatile
  6797                           
  6798                           ;SPI.c: 60: SSPSTATbits.CKE = 1;
  6799  0052D2  8CC7               	bsf	199,6,c	;volatile
  6800                           
  6801                           ;SPI.c: 61: SSPCON1bits.CKP = 0;
  6802  0052D4  98C6               	bcf	198,4,c	;volatile
  6803                           
  6804                           ;SPI.c: 63: SSPCON1 = 0b00000011;
  6805  0052D6  0E03               	movlw	3
  6806  0052D8  6EC6               	movwf	198,c	;volatile
  6807                           
  6808                           ;SPI.c: 65: SSPCON1bits.SSPEN = 1;
  6809  0052DA  8AC6               	bsf	198,5,c	;volatile
  6810  0052DC  0012               	return		;funcret
  6811  0052DE                     __end_of_inicializa_SPI:
  6812                           	callstack 0
  6813                           
  6814 ;; *************** function _escrita_sdcard *****************
  6815 ;; Defined at:
  6816 ;;		line 207 in file "bibliotecas/SDCard.c"
  6817 ;; Parameters:    Size  Location     Type
  6818 ;;		None
  6819 ;; Auto vars:     Size  Location     Type
  6820 ;;  fix_gps         3    0        PTR unsigned char 
  6821 ;;  bw              2    0        unsigned short 
  6822 ;;  j               1    0        unsigned char 
  6823 ;;  i               1    0        unsigned char 
  6824 ;; Return value:  Size  Location     Type
  6825 ;;                  1    wreg      void 
  6826 ;; Registers used:
  6827 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6828 ;; Tracked objects:
  6829 ;;		On entry : 0/0
  6830 ;;		On exit  : 0/0
  6831 ;;		Unchanged: 0/0
  6832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6833 ;;      Params:         0       0       0       0       0       0       0       0       0
  6834 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6835 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6836 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6837 ;;Total ram usage:        0 bytes
  6838 ;; Hardware stack levels used:    1
  6839 ;; Hardware stack levels required when called:   15
  6840 ;; This function calls:
  6841 ;;		_dados_gps_to_sd
  6842 ;;		_f_close
  6843 ;;		_f_lseek
  6844 ;;		_f_mount
  6845 ;;		_f_open
  6846 ;;		_fprintf
  6847 ;;		_strcat
  6848 ;;		_strcpy
  6849 ;; This function is called by:
  6850 ;;		_grava_sd
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           	psect	text41
  6855  0034FE                     __ptext41:
  6856                           	callstack 0
  6857  0034FE                     _escrita_sdcard:
  6858                           	callstack 12
  6859                           
  6860                           ;SDCard.c: 209: unsigned char *fix_gps;;SDCard.c: 210: unsigned char i, j;;SDCard.c: 211
      +                          : static unsigned char f_fix = 0;;SDCard.c: 212: WORD bw;;SDCard.c: 213: PORTBbits.RB3 =
      +                           0;
  6861                           
  6862                           ;incstack = 0
  6863  0034FE  9681               	bcf	129,3,c	;volatile
  6864                           
  6865                           ;SDCard.c: 216: dados_gps_to_sd();
  6866  003500  EC0D  F025         	call	_dados_gps_to_sd	;wreg free
  6867                           
  6868                           ;SDCard.c: 217: f_mount(0,&fs);
  6869  003504  0E60               	movlw	low _fs
  6870  003506  6E19               	movwf	f_mount@fs^0,c
  6871  003508  0E02               	movlw	high _fs
  6872  00350A  6E1A               	movwf	(f_mount@fs+1)^0,c
  6873  00350C  0E00               	movlw	0
  6874  00350E  EC94  F026         	call	_f_mount
  6875                           
  6876                           ;SDCard.c: 221: if(!f_fix)
  6877  003512  5040               	movf	escrita_sdcard@f_fix^0,w,c
  6878  003514  A4D8               	btfss	status,2,c
  6879  003516  D01F               	goto	l11463
  6880                           
  6881                           ;SDCard.c: 222: {;SDCard.c: 224: if(string_dado.data_name[0] != ' ' && string_dado.hora_
      +                          name[0] != ' ')
  6882  003518  0E20               	movlw	32
  6883  00351A  0102               	movlb	2	; () banked
  6884  00351C  1912               	xorwf	(_string_dado+18)& (0+255),w,b
  6885  00351E  B4D8               	btfsc	status,2,c
  6886  003520  D01A               	goto	l11463
  6887                           
  6888                           ; BSR set to: 2
  6889  003522  0E20               	movlw	32
  6890  003524  1914               	xorwf	(_string_dado+20)& (0+255),w,b
  6891  003526  B4D8               	btfsc	status,2,c
  6892  003528  D016               	goto	l11463
  6893                           
  6894                           ; BSR set to: 2
  6895                           ;SDCard.c: 225: {;SDCard.c: 228: strcpy(filename, "teste");
  6896  00352A  0E7F               	movlw	low _filename
  6897  00352C  6E19               	movwf	strcpy@to^0,c
  6898  00352E  0E01               	movlw	high _filename
  6899  003530  6E1A               	movwf	(strcpy@to+1)^0,c
  6900  003532  0E48               	movlw	low STR_15
  6901  003534  6E1B               	movwf	strcpy@from^0,c
  6902  003536  0E62               	movlw	high STR_15
  6903  003538  6E1C               	movwf	(strcpy@from+1)^0,c
  6904  00353A  ECFF  F026         	call	_strcpy	;wreg free
  6905                           
  6906                           ;SDCard.c: 229: strcat(filename, ".tlm");
  6907  00353E  0E7F               	movlw	low _filename
  6908  003540  6E19               	movwf	strcat@to^0,c
  6909  003542  0E01               	movlw	high _filename
  6910  003544  6E1A               	movwf	(strcat@to+1)^0,c
  6911  003546  0E64               	movlw	low STR_16
  6912  003548  6E1B               	movwf	strcat@from^0,c
  6913  00354A  0E62               	movlw	high STR_16
  6914  00354C  6E1C               	movwf	(strcat@from+1)^0,c
  6915  00354E  EC21  F027         	call	_strcat	;wreg free
  6916                           
  6917                           ;SDCard.c: 230: f_fix = 1;
  6918  003552  0E01               	movlw	1
  6919  003554  6E40               	movwf	escrita_sdcard@f_fix^0,c
  6920  003556                     l11463:
  6921                           
  6922                           ;SDCard.c: 231: };SDCard.c: 234: };SDCard.c: 235: if(f_fix)
  6923  003556  5040               	movf	escrita_sdcard@f_fix^0,w,c
  6924  003558  B4D8               	btfsc	status,2,c
  6925  00355A  D061               	goto	l11477
  6926                           
  6927                           ;SDCard.c: 236: {;SDCard.c: 238: if (f_open(&fil, filename, 0x02 ) == FR_OK)
  6928  00355C  0E4F               	movlw	low _fil
  6929  00355E  0100               	movlb	0	; () banked
  6930  003560  6FC0               	movwf	f_open@fp& (0+255),b
  6931  003562  0E01               	movlw	high _fil
  6932  003564  6FC1               	movwf	(f_open@fp+1)& (0+255),b
  6933  003566  0E7F               	movlw	low _filename
  6934  003568  6FC2               	movwf	f_open@path& (0+255),b
  6935  00356A  0E01               	movlw	high _filename
  6936  00356C  6FC3               	movwf	(f_open@path+1)& (0+255),b
  6937  00356E  0E02               	movlw	2
  6938  003570  6FC4               	movwf	f_open@mode& (0+255),b
  6939  003572  EC7A  F009         	call	_f_open	;wreg free
  6940  003576  0900               	iorlw	0
  6941  003578  A4D8               	btfss	status,2,c
  6942  00357A  D044               	goto	l11473
  6943                           
  6944                           ; BSR set to: 0
  6945                           ;SDCard.c: 239: {;SDCard.c: 241: f_lseek(&fil, ((&fil)->fsize));
  6946  00357C  0E4F               	movlw	low _fil
  6947  00357E  6FAE               	movwf	f_lseek@fp& (0+255),b
  6948  003580  0E01               	movlw	high _fil
  6949  003582  6FAF               	movwf	(f_lseek@fp+1)& (0+255),b
  6950  003584  C159  F0B0         	movff	_fil+10,f_lseek@ofs
  6951  003588  C15A  F0B1         	movff	_fil+11,f_lseek@ofs+1
  6952  00358C  C15B  F0B2         	movff	_fil+12,f_lseek@ofs+2
  6953  003590  C15C  F0B3         	movff	_fil+13,f_lseek@ofs+3
  6954  003594  EC75  F005         	call	_f_lseek	;wreg free
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;SDCard.c: 242: fprintf(&fil, "v%s;lt%ld;lo%s;r%s;c%s;k%s;h%s;d%s;f%s\n", string_dado.ve
      +                          l, string_dado.lt, string_dado.lo, "0", "0", "0", string_dado.hora, "N/A", string_dado.f
      +                          ence);
  6958  003598  0E4F               	movlw	low _fil
  6959  00359A  6FD9               	movwf	fprintf@fil& (0+255),b
  6960  00359C  0E01               	movlw	high _fil
  6961  00359E  6FDA               	movwf	(fprintf@fil+1)& (0+255),b
  6962  0035A0  0E51               	movlw	low STR_17
  6963  0035A2  6FDB               	movwf	fprintf@str& (0+255),b
  6964  0035A4  0E61               	movlw	high STR_17
  6965  0035A6  6FDC               	movwf	(fprintf@str+1)& (0+255),b
  6966  0035A8  0E30               	movlw	low (_string_dado+48)
  6967  0035AA  6FDD               	movwf	(?_fprintf+4)& (0+255),b
  6968  0035AC  0E02               	movlw	high (_string_dado+48)
  6969  0035AE  6FDE               	movwf	(?_fprintf+5)& (0+255),b
  6970  0035B0  0E16               	movlw	low (_string_dado+22)
  6971  0035B2  6FDF               	movwf	(?_fprintf+6)& (0+255),b
  6972  0035B4  0E02               	movlw	high (_string_dado+22)
  6973  0035B6  6FE0               	movwf	(?_fprintf+7)& (0+255),b
  6974  0035B8  0E23               	movlw	low (_string_dado+35)
  6975  0035BA  6FE1               	movwf	(?_fprintf+8)& (0+255),b
  6976  0035BC  0E02               	movlw	high (_string_dado+35)
  6977  0035BE  6FE2               	movwf	(?_fprintf+9)& (0+255),b
  6978  0035C0  0ED3               	movlw	low (STR_8+11)
  6979  0035C2  6FE3               	movwf	(?_fprintf+10)& (0+255),b
  6980  0035C4  0E61               	movlw	high (STR_8+11)
  6981  0035C6  6FE4               	movwf	(?_fprintf+11)& (0+255),b
  6982  0035C8  0ED3               	movlw	low (STR_8+11)
  6983  0035CA  6FE5               	movwf	(?_fprintf+12)& (0+255),b
  6984  0035CC  0E61               	movlw	high (STR_8+11)
  6985  0035CE  6FE6               	movwf	(?_fprintf+13)& (0+255),b
  6986  0035D0  0ED3               	movlw	low (STR_8+11)
  6987  0035D2  6FE7               	movwf	(?_fprintf+14)& (0+255),b
  6988  0035D4  0E61               	movlw	high (STR_8+11)
  6989  0035D6  6FE8               	movwf	(?_fprintf+15)& (0+255),b
  6990  0035D8  0E07               	movlw	low (_string_dado+7)
  6991  0035DA  6FE9               	movwf	(?_fprintf+16)& (0+255),b
  6992  0035DC  0E02               	movlw	high (_string_dado+7)
  6993  0035DE  6FEA               	movwf	(?_fprintf+17)& (0+255),b
  6994  0035E0  0E75               	movlw	low STR_21
  6995  0035E2  6FEB               	movwf	(?_fprintf+18)& (0+255),b
  6996  0035E4  0E62               	movlw	high STR_21
  6997  0035E6  6FEC               	movwf	(?_fprintf+19)& (0+255),b
  6998  0035E8  0E34               	movlw	low (_string_dado+52)
  6999  0035EA  6FED               	movwf	(?_fprintf+20)& (0+255),b
  7000  0035EC  0E02               	movlw	high (_string_dado+52)
  7001  0035EE  6FEE               	movwf	(?_fprintf+21)& (0+255),b
  7002  0035F0  ECBA  F007         	call	_fprintf	;wreg free
  7003  0035F4                     l11471:
  7004                           
  7005                           ;SDCard.c: 244: f_close(&fil);
  7006  0035F4  0E4F               	movlw	low _fil
  7007  0035F6  0100               	movlb	0	; () banked
  7008  0035F8  6F93               	movwf	f_close@fp& (0+255),b
  7009  0035FA  0E01               	movlw	high _fil
  7010  0035FC  6F94               	movwf	(f_close@fp+1)& (0+255),b
  7011  0035FE  EC87  F028         	call	_f_close	;wreg free
  7012                           
  7013                           ;SDCard.c: 245: }
  7014  003602  D00D               	goto	l11477
  7015  003604                     l11473:
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;SDCard.c: 246: else;SDCard.c: 247: {;SDCard.c: 248: f_open(&fil, filename, 0x08 );
  7019  003604  0E4F               	movlw	low _fil
  7020  003606  6FC0               	movwf	f_open@fp& (0+255),b
  7021  003608  0E01               	movlw	high _fil
  7022  00360A  6FC1               	movwf	(f_open@fp+1)& (0+255),b
  7023  00360C  0E7F               	movlw	low _filename
  7024  00360E  6FC2               	movwf	f_open@path& (0+255),b
  7025  003610  0E01               	movlw	high _filename
  7026  003612  6FC3               	movwf	(f_open@path+1)& (0+255),b
  7027  003614  0E08               	movlw	8
  7028  003616  6FC4               	movwf	f_open@mode& (0+255),b
  7029  003618  EC7A  F009         	call	_f_open	;wreg free
  7030  00361C  D7EB               	goto	l11471
  7031  00361E                     l11477:
  7032                           
  7033                           ;SDCard.c: 251: };SDCard.c: 252: };SDCard.c: 253: PORTBbits.RB3 = 1;
  7034  00361E  8681               	bsf	129,3,c	;volatile
  7035  003620  0012               	return		;funcret
  7036  003622                     __end_of_escrita_sdcard:
  7037                           	callstack 0
  7038                           
  7039 ;; *************** function _strcpy *****************
  7040 ;; Defined at:
  7041 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strcpy.c"
  7042 ;; Parameters:    Size  Location     Type
  7043 ;;  to              2   24[COMRAM] PTR unsigned char 
  7044 ;;		 -> convert_to_int_point@temp_str(12), filename(20), rawLongitude(13), rawLatitude(13), 
  7045 ;;  from            2   26[COMRAM] PTR const unsigned char 
  7046 ;;		 -> NULL(0), STR_15(6), STR_8(13), STR_7(12), 
  7047 ;;		 -> rawLongitude(13), rawLatitude(13), 
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;  cp              2   28[COMRAM] PTR unsigned char 
  7050 ;;		 -> convert_to_int_point@temp_str(12), filename(20), rawLongitude(13), rawLatitude(13), 
  7051 ;; Return value:  Size  Location     Type
  7052 ;;                  2   24[COMRAM] PTR unsigned char 
  7053 ;; Registers used:
  7054 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7055 ;; Tracked objects:
  7056 ;;		On entry : 0/0
  7057 ;;		On exit  : 0/0
  7058 ;;		Unchanged: 0/0
  7059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7060 ;;      Params:         4       0       0       0       0       0       0       0       0
  7061 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7062 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7063 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7064 ;;Total ram usage:        6 bytes
  7065 ;; Hardware stack levels used:    1
  7066 ;; Hardware stack levels required when called:    3
  7067 ;; This function calls:
  7068 ;;		Nothing
  7069 ;; This function is called by:
  7070 ;;		_Latitude
  7071 ;;		_Longitude
  7072 ;;		_escrita_sdcard
  7073 ;;		_convert_to_int_point
  7074 ;; This function uses a non-reentrant model
  7075 ;;
  7076                           
  7077                           	psect	text42
  7078  004DFE                     __ptext42:
  7079                           	callstack 0
  7080  004DFE                     _strcpy:
  7081                           	callstack 22
  7082                           
  7083                           ;incstack = 0
  7084  004DFE  C019  F01D         	movff	strcpy@to,strcpy@cp
  7085  004E02  C01A  F01E         	movff	strcpy@to+1,strcpy@cp+1
  7086  004E06  D004               	goto	l10465
  7087  004E08                     l10463:
  7088  004E08  4A1D               	infsnz	strcpy@cp^0,f,c
  7089  004E0A  2A1E               	incf	(strcpy@cp+1)^0,f,c
  7090  004E0C  4A1B               	infsnz	strcpy@from^0,f,c
  7091  004E0E  2A1C               	incf	(strcpy@from+1)^0,f,c
  7092  004E10                     l10465:
  7093  004E10  C01B  FFF6         	movff	strcpy@from,tblptrl
  7094  004E14  C01C  FFF7         	movff	strcpy@from+1,tblptrh
  7095  004E18  6AF8               	clrf	tblptru,c
  7096  004E1A  C01D  FFD9         	movff	strcpy@cp,fsr2l
  7097  004E1E  C01E  FFDA         	movff	strcpy@cp+1,fsr2h
  7098  004E22  0E07               	movlw	(high __ramtop+-1)
  7099  004E24  64F7               	cpfsgt	tblptrh,c
  7100  004E26  D003               	bra	u11937
  7101  004E28  0008               	tblrd		*
  7102  004E2A  50F5               	movf	tablat,w,c
  7103  004E2C  D005               	bra	u11930
  7104  004E2E                     u11937:
  7105  004E2E  CFF6 FFE1          	movff	tblptrl,fsr1l
  7106  004E32  CFF7 FFE2          	movff	tblptrh,fsr1h
  7107  004E36  50E7               	movf	indf1,w,c
  7108  004E38                     u11930:
  7109  004E38  6EDF               	movwf	indf2,c
  7110  004E3A  50DF               	movf	indf2,w,c
  7111  004E3C  B4D8               	btfsc	status,2,c
  7112  004E3E  0012               	return	
  7113  004E40  D7E3               	goto	l10463
  7114  004E42                     __end_of_strcpy:
  7115                           	callstack 0
  7116                           
  7117 ;; *************** function _strcat *****************
  7118 ;; Defined at:
  7119 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strcat.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;  to              2   24[COMRAM] PTR unsigned char 
  7122 ;;		 -> filename(20), 
  7123 ;;  from            2   26[COMRAM] PTR const unsigned char 
  7124 ;;		 -> STR_16(5), 
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;  cp              2   28[COMRAM] PTR unsigned char 
  7127 ;;		 -> filename(20), 
  7128 ;; Return value:  Size  Location     Type
  7129 ;;                  2   24[COMRAM] PTR unsigned char 
  7130 ;; Registers used:
  7131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7132 ;; Tracked objects:
  7133 ;;		On entry : 0/2
  7134 ;;		On exit  : 0/0
  7135 ;;		Unchanged: 0/0
  7136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7137 ;;      Params:         4       0       0       0       0       0       0       0       0
  7138 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7139 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7140 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7141 ;;Total ram usage:        6 bytes
  7142 ;; Hardware stack levels used:    1
  7143 ;; Hardware stack levels required when called:    3
  7144 ;; This function calls:
  7145 ;;		Nothing
  7146 ;; This function is called by:
  7147 ;;		_escrita_sdcard
  7148 ;; This function uses a non-reentrant model
  7149 ;;
  7150                           
  7151                           	psect	text43
  7152  004E42                     __ptext43:
  7153                           	callstack 0
  7154  004E42                     _strcat:
  7155                           	callstack 23
  7156                           
  7157                           ;incstack = 0
  7158  004E42  C019  F01D         	movff	strcat@to,strcat@cp
  7159  004E46  C01A  F01E         	movff	strcat@to+1,strcat@cp+1
  7160  004E4A  D002               	goto	l11119
  7161  004E4C                     l11117:
  7162  004E4C  4A1D               	infsnz	strcat@cp^0,f,c
  7163  004E4E  2A1E               	incf	(strcat@cp+1)^0,f,c
  7164  004E50                     l11119:
  7165  004E50  C01D  FFD9         	movff	strcat@cp,fsr2l
  7166  004E54  C01E  FFDA         	movff	strcat@cp+1,fsr2h
  7167  004E58  50DF               	movf	indf2,w,c
  7168  004E5A  B4D8               	btfsc	status,2,c
  7169  004E5C  D005               	goto	l11123
  7170  004E5E  D7F6               	goto	l11117
  7171  004E60                     l11121:
  7172  004E60  4A1D               	infsnz	strcat@cp^0,f,c
  7173  004E62  2A1E               	incf	(strcat@cp+1)^0,f,c
  7174  004E64  4A1B               	infsnz	strcat@from^0,f,c
  7175  004E66  2A1C               	incf	(strcat@from+1)^0,f,c
  7176  004E68                     l11123:
  7177  004E68  C01B  FFF6         	movff	strcat@from,tblptrl
  7178  004E6C  C01C  FFF7         	movff	strcat@from+1,tblptrh
  7179  004E70                     	if	0	;tblptru may be non-zero
  7180  004E70                     	endif
  7181  004E70                     	if	0	;tblptru may be non-zero
  7182  004E70                     	endif
  7183  004E70  C01D  FFD9         	movff	strcat@cp,fsr2l
  7184  004E74  C01E  FFDA         	movff	strcat@cp+1,fsr2h
  7185  004E78  0008               	tblrd		*
  7186  004E7A  CFF5 FFDF          	movff	tablat,indf2
  7187  004E7E  50DF               	movf	indf2,w,c
  7188  004E80  B4D8               	btfsc	status,2,c
  7189  004E82  0012               	return	
  7190  004E84  D7ED               	goto	l11121
  7191  004E86                     __end_of_strcat:
  7192                           	callstack 0
  7193                           
  7194 ;; *************** function _fprintf *****************
  7195 ;; Defined at:
  7196 ;;		line 1816 in file "bibliotecas/tff.c"
  7197 ;; Parameters:    Size  Location     Type
  7198 ;;  fil             2  121[BANK0 ] PTR struct _FIL
  7199 ;;		 -> fil(28), 
  7200 ;;  str             2  123[BANK0 ] PTR const unsigned char 
  7201 ;;		 -> STR_17(40), 
  7202 ;; Auto vars:     Size  Location     Type
  7203 ;;  s              16    0[BANK2 ] unsigned char [16]
  7204 ;;  val             4   24[BANK2 ] unsigned long 
  7205 ;;  i               2   31[BANK2 ] int 
  7206 ;;  cc              2   29[BANK2 ] int 
  7207 ;;  w               2   20[BANK2 ] int 
  7208 ;;  res             2   16[BANK2 ] int 
  7209 ;;  c               1   33[BANK2 ] unsigned char 
  7210 ;;  arp             1   28[BANK2 ] PTR void [1]
  7211 ;;		 -> ?_fprintf(2), 
  7212 ;;  r               1   23[BANK2 ] unsigned char 
  7213 ;;  f               1   22[BANK2 ] unsigned char 
  7214 ;; Return value:  Size  Location     Type
  7215 ;;                  2  121[BANK0 ] int 
  7216 ;; Registers used:
  7217 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7218 ;; Tracked objects:
  7219 ;;		On entry : 3F/0
  7220 ;;		On exit  : 3F/2
  7221 ;;		Unchanged: 0/0
  7222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7223 ;;      Params:         0      22       0       0       0       0       0       0       0
  7224 ;;      Locals:         0       0       0      34       0       0       0       0       0
  7225 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7226 ;;      Totals:         0      24       0      34       0       0       0       0       0
  7227 ;;Total ram usage:       58 bytes
  7228 ;; Hardware stack levels used:    1
  7229 ;; Hardware stack levels required when called:   14
  7230 ;; This function calls:
  7231 ;;		___lldiv
  7232 ;;		___llmod
  7233 ;;		___wmul
  7234 ;;		_fputc
  7235 ;;		_fputs
  7236 ;; This function is called by:
  7237 ;;		_escrita_sdcard
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           	psect	text44
  7242  000F74                     __ptext44:
  7243                           	callstack 0
  7244  000F74                     _fprintf:
  7245                           	callstack 12
  7246                           
  7247                           ; BSR set to: 0
  7248                           ;tff.c: 1822: va_list arp;;tff.c: 1823: UCHAR c, f, r;;tff.c: 1824: ULONG val;;tff.c: 18
      +                          25: char s[16];;tff.c: 1826: int i, w, res, cc;;tff.c: 1829: *arp = __va_start();
  7249                           
  7250                           ;incstack = 0
  7251  000F74  0EDD               	movlw	low (?_fprintf+4)
  7252  000F76  0102               	movlb	2	; () banked
  7253  000F78  6F5A               	movwf	fprintf@arp& (0+255),b
  7254                           
  7255                           ; BSR set to: 2
  7256                           ;tff.c: 1831: for (cc = res = 0; cc != -1; res += cc) {
  7257  000F7A  0E00               	movlw	0
  7258  000F7C  6F4F               	movwf	(fprintf@res+1)& (0+255),b
  7259  000F7E  0E00               	movlw	0
  7260  000F80  6F4E               	movwf	fprintf@res& (0+255),b
  7261  000F82  C24E  F25B         	movff	fprintf@res,fprintf@cc
  7262  000F86  C24F  F25C         	movff	fprintf@res+1,fprintf@cc+1
  7263  000F8A                     l11209:
  7264                           
  7265                           ; BSR set to: 2
  7266  000F8A  295B               	incf	fprintf@cc& (0+255),w,b
  7267  000F8C  E103               	bnz	l11213
  7268  000F8E  295C               	incf	(fprintf@cc+1)& (0+255),w,b
  7269  000F90  B4D8               	btfsc	status,2,c
  7270  000F92  0012               	return	
  7271  000F94                     l11213:
  7272                           
  7273                           ; BSR set to: 2
  7274                           ;tff.c: 1832: c = *str++;
  7275  000F94  C0DB  FFF6         	movff	fprintf@str,tblptrl
  7276  000F98  C0DC  FFF7         	movff	fprintf@str+1,tblptrh
  7277  000F9C                     	if	0	;tblptru may be non-zero
  7278  000F9C                     	endif
  7279  000F9C                     	if	0	;tblptru may be non-zero
  7280  000F9C                     	endif
  7281  000F9C  0008               	tblrd		*
  7282  000F9E  CFF5 F25F          	movff	tablat,fprintf@c
  7283                           
  7284                           ; BSR set to: 2
  7285  000FA2  0100               	movlb	0	; () banked
  7286  000FA4  4BDB               	infsnz	fprintf@str& (0+255),f,b
  7287  000FA6  2BDC               	incf	(fprintf@str+1)& (0+255),f,b
  7288                           
  7289                           ; BSR set to: 0
  7290                           ;tff.c: 1833: if (c == 0) break;
  7291  000FA8  0102               	movlb	2	; () banked
  7292  000FAA  515F               	movf	fprintf@c& (0+255),w,b
  7293  000FAC  B4D8               	btfsc	status,2,c
  7294  000FAE  0012               	return	
  7295                           
  7296                           ; BSR set to: 2
  7297                           ;tff.c: 1834: if (c != '%') {
  7298  000FB0  0E25               	movlw	37
  7299  000FB2  195F               	xorwf	fprintf@c& (0+255),w,b
  7300  000FB4  B4D8               	btfsc	status,2,c
  7301  000FB6  D019               	goto	l11229
  7302                           
  7303                           ; BSR set to: 2
  7304                           ;tff.c: 1835: cc = fputc(c, fil);
  7305  000FB8  C25F  F0CC         	movff	fprintf@c,fputc@chr
  7306  000FBC  0100               	movlb	0	; () banked
  7307  000FBE  6BCD               	clrf	(fputc@chr+1)& (0+255),b
  7308  000FC0  C0D9  F0CE         	movff	fprintf@fil,fputc@fil
  7309  000FC4  C0DA  F0CF         	movff	fprintf@fil+1,fputc@fil+1
  7310  000FC8  ECA7  F027         	call	_fputc	;wreg free
  7311  000FCC  C0CC  F25B         	movff	?_fputc,fprintf@cc
  7312  000FD0  C0CD  F25C         	movff	?_fputc+1,fprintf@cc+1
  7313                           
  7314                           ; BSR set to: 0
  7315                           ;tff.c: 1836: if (cc != -1) cc = 1;
  7316  000FD4  0102               	movlb	2	; () banked
  7317  000FD6  295B               	incf	fprintf@cc& (0+255),w,b
  7318  000FD8  E103               	bnz	u13240
  7319  000FDA  295C               	incf	(fprintf@cc+1)& (0+255),w,b
  7320  000FDC  B4D8               	btfsc	status,2,c
  7321  000FDE  D184               	goto	l11353
  7322  000FE0                     u13240:
  7323                           
  7324                           ; BSR set to: 2
  7325  000FE0  0E00               	movlw	0
  7326  000FE2  6F5C               	movwf	(fprintf@cc+1)& (0+255),b
  7327  000FE4  0E01               	movlw	1
  7328  000FE6  6F5B               	movwf	fprintf@cc& (0+255),b
  7329  000FE8  D17F               	goto	l11353
  7330  000FEA                     l11229:
  7331                           
  7332                           ; BSR set to: 2
  7333                           ;tff.c: 1838: };tff.c: 1839: w = f = 0;
  7334  000FEA  0E00               	movlw	0
  7335  000FEC  6F54               	movwf	fprintf@f& (0+255),b
  7336  000FEE  C254  F252         	movff	fprintf@f,fprintf@w
  7337  000FF2  6B53               	clrf	(fprintf@w+1)& (0+255),b
  7338                           
  7339                           ; BSR set to: 2
  7340                           ;tff.c: 1840: c = *str++;
  7341  000FF4  C0DB  FFF6         	movff	fprintf@str,tblptrl
  7342  000FF8  C0DC  FFF7         	movff	fprintf@str+1,tblptrh
  7343  000FFC                     	if	0	;tblptru may be non-zero
  7344  000FFC                     	endif
  7345  000FFC                     	if	0	;tblptru may be non-zero
  7346  000FFC                     	endif
  7347  000FFC  0008               	tblrd		*
  7348  000FFE  CFF5 F25F          	movff	tablat,fprintf@c
  7349                           
  7350                           ; BSR set to: 2
  7351  001002  0100               	movlb	0	; () banked
  7352  001004  4BDB               	infsnz	fprintf@str& (0+255),f,b
  7353  001006  2BDC               	incf	(fprintf@str+1)& (0+255),f,b
  7354                           
  7355                           ; BSR set to: 0
  7356                           ;tff.c: 1841: if (c == '0') {
  7357  001008  0E30               	movlw	48
  7358  00100A  0102               	movlb	2	; () banked
  7359  00100C  195F               	xorwf	fprintf@c& (0+255),w,b
  7360  00100E  A4D8               	btfss	status,2,c
  7361  001010  D023               	goto	l11249
  7362                           
  7363                           ; BSR set to: 2
  7364                           ;tff.c: 1842: f = 1; c = *str++;
  7365  001012  0E01               	movlw	1
  7366  001014  6F54               	movwf	fprintf@f& (0+255),b
  7367  001016                     l11239:
  7368                           
  7369                           ; BSR set to: 2
  7370  001016  C0DB  FFF6         	movff	fprintf@str,tblptrl
  7371  00101A  C0DC  FFF7         	movff	fprintf@str+1,tblptrh
  7372  00101E                     	if	0	;tblptru may be non-zero
  7373  00101E                     	endif
  7374  00101E                     	if	0	;tblptru may be non-zero
  7375  00101E                     	endif
  7376  00101E  0008               	tblrd		*
  7377  001020  CFF5 F25F          	movff	tablat,fprintf@c
  7378                           
  7379                           ; BSR set to: 2
  7380  001024  0100               	movlb	0	; () banked
  7381  001026  4BDB               	infsnz	fprintf@str& (0+255),f,b
  7382  001028  2BDC               	incf	(fprintf@str+1)& (0+255),f,b
  7383  00102A  D016               	goto	l11249
  7384  00102C                     l11243:
  7385                           
  7386                           ; BSR set to: 2
  7387                           ;tff.c: 1845: w = w * 10 + (c - '0');
  7388  00102C  C252  F019         	movff	fprintf@w,___wmul@multiplier
  7389  001030  C253  F01A         	movff	fprintf@w+1,___wmul@multiplier+1
  7390  001034  0E00               	movlw	0
  7391  001036  6E1C               	movwf	(___wmul@multiplicand+1)^0,c
  7392  001038  0E0A               	movlw	10
  7393  00103A  6E1B               	movwf	___wmul@multiplicand^0,c
  7394  00103C  ECC3  F028         	call	___wmul	;wreg free
  7395  001040  0102               	movlb	2	; () banked
  7396  001042  515F               	movf	fprintf@c& (0+255),w,b
  7397  001044  2619               	addwf	?___wmul^0,f,c
  7398  001046  0E00               	movlw	0
  7399  001048  221A               	addwfc	(?___wmul+1)^0,f,c
  7400  00104A  0ED0               	movlw	208
  7401  00104C  2419               	addwf	?___wmul^0,w,c
  7402  00104E  6F52               	movwf	fprintf@w& (0+255),b
  7403  001050  0EFF               	movlw	255
  7404  001052  201A               	addwfc	(?___wmul+1)^0,w,c
  7405  001054  6F53               	movwf	(fprintf@w+1)& (0+255),b
  7406  001056  D7DF               	goto	l11239
  7407  001058                     l11249:
  7408  001058  0E2F               	movlw	47
  7409  00105A  0102               	movlb	2	; () banked
  7410  00105C  655F               	cpfsgt	fprintf@c& (0+255),b
  7411  00105E  D003               	goto	u13270
  7412                           
  7413                           ; BSR set to: 2
  7414  001060  0E39               	movlw	57
  7415  001062  655F               	cpfsgt	fprintf@c& (0+255),b
  7416  001064  D7E3               	goto	l11243
  7417  001066                     u13270:
  7418                           
  7419                           ; BSR set to: 2
  7420                           ;tff.c: 1847: };tff.c: 1848: if (c == 'l') {
  7421  001066  0E6C               	movlw	108
  7422  001068  195F               	xorwf	fprintf@c& (0+255),w,b
  7423  00106A  A4D8               	btfss	status,2,c
  7424  00106C  D00B               	goto	l11261
  7425                           
  7426                           ; BSR set to: 2
  7427                           ;tff.c: 1849: f |= 2; c = *str++;
  7428  00106E  8354               	bsf	fprintf@f& (0+255),1,b
  7429                           
  7430                           ; BSR set to: 2
  7431  001070  C0DB  FFF6         	movff	fprintf@str,tblptrl
  7432  001074  C0DC  FFF7         	movff	fprintf@str+1,tblptrh
  7433  001078                     	if	0	;tblptru may be non-zero
  7434  001078                     	endif
  7435  001078                     	if	0	;tblptru may be non-zero
  7436  001078                     	endif
  7437  001078  0008               	tblrd		*
  7438  00107A  CFF5 F25F          	movff	tablat,fprintf@c
  7439                           
  7440                           ; BSR set to: 2
  7441  00107E  0100               	movlb	0	; () banked
  7442  001080  4BDB               	infsnz	fprintf@str& (0+255),f,b
  7443  001082  2BDC               	incf	(fprintf@str+1)& (0+255),f,b
  7444  001084                     l11261:
  7445                           
  7446                           ;tff.c: 1850: };tff.c: 1851: if (c == 's') {
  7447  001084  0E73               	movlw	115
  7448  001086  0102               	movlb	2	; () banked
  7449  001088  195F               	xorwf	fprintf@c& (0+255),w,b
  7450  00108A  A4D8               	btfss	status,2,c
  7451  00108C  D015               	goto	l11267
  7452                           
  7453                           ; BSR set to: 2
  7454                           ;tff.c: 1852: cc = fputs((*(char* *)__va_arg((*(char* **)arp), (char*)0)), fil);
  7455  00108E  515A               	movf	fprintf@arp& (0+255),w,b
  7456  001090  6ED9               	movwf	fsr2l,c
  7457  001092  6ADA               	clrf	fsr2h,c
  7458  001094  CFDE F0D3          	movff	postinc2,fputs@str
  7459  001098  CFDD F0D4          	movff	postdec2,fputs@str+1
  7460  00109C  C0D9  F0D5         	movff	fprintf@fil,fputs@fil
  7461  0010A0  C0DA  F0D6         	movff	fprintf@fil+1,fputs@fil+1
  7462  0010A4  EC0A  F022         	call	_fputs	;wreg free
  7463  0010A8  C0D3  F25B         	movff	?_fputs,fprintf@cc
  7464  0010AC  C0D4  F25C         	movff	?_fputs+1,fprintf@cc+1
  7465  0010B0  0E02               	movlw	2
  7466  0010B2  0102               	movlb	2	; () banked
  7467  0010B4  275A               	addwf	fprintf@arp& (0+255),f,b
  7468                           
  7469                           ;tff.c: 1853: continue;
  7470  0010B6  D118               	goto	l11353
  7471  0010B8                     l11267:
  7472                           
  7473                           ; BSR set to: 2
  7474                           ;tff.c: 1854: };tff.c: 1855: if (c == 'c') {
  7475  0010B8  0E63               	movlw	99
  7476  0010BA  195F               	xorwf	fprintf@c& (0+255),w,b
  7477  0010BC  A4D8               	btfss	status,2,c
  7478  0010BE  D01D               	goto	l11277
  7479                           
  7480                           ; BSR set to: 2
  7481                           ;tff.c: 1856: cc = fputc((*(char *)__va_arg((*(char **)arp), (char)0)), fil);
  7482  0010C0  515A               	movf	fprintf@arp& (0+255),w,b
  7483  0010C2  6ED9               	movwf	fsr2l,c
  7484  0010C4  6ADA               	clrf	fsr2h,c
  7485  0010C6  50DF               	movf	indf2,w,c
  7486  0010C8  0100               	movlb	0	; () banked
  7487  0010CA  6FEF               	movwf	??_fprintf& (0+255),b
  7488  0010CC  51EF               	movf	??_fprintf& (0+255),w,b
  7489  0010CE  6FCC               	movwf	fputc@chr& (0+255),b
  7490  0010D0  6BCD               	clrf	(fputc@chr+1)& (0+255),b
  7491  0010D2  C0D9  F0CE         	movff	fprintf@fil,fputc@fil
  7492  0010D6  C0DA  F0CF         	movff	fprintf@fil+1,fputc@fil+1
  7493  0010DA  ECA7  F027         	call	_fputc	;wreg free
  7494  0010DE  C0CC  F25B         	movff	?_fputc,fprintf@cc
  7495  0010E2  C0CD  F25C         	movff	?_fputc+1,fprintf@cc+1
  7496                           
  7497                           ; BSR set to: 0
  7498  0010E6  0E02               	movlw	2
  7499  0010E8  0102               	movlb	2	; () banked
  7500  0010EA  275A               	addwf	fprintf@arp& (0+255),f,b
  7501                           
  7502                           ; BSR set to: 2
  7503                           ;tff.c: 1857: if (cc != -1) cc = 1;
  7504  0010EC  295B               	incf	fprintf@cc& (0+255),w,b
  7505  0010EE  E104               	bnz	u13310
  7506  0010F0  295C               	incf	(fprintf@cc+1)& (0+255),w,b
  7507  0010F2  A4D8               	btfss	status,2,c
  7508  0010F4  D775               	goto	u13240
  7509  0010F6  D0F8               	goto	l11353
  7510  0010F8                     u13310:
  7511  0010F8  D773               	goto	u13240
  7512  0010FA                     l11277:
  7513                           
  7514                           ; BSR set to: 2
  7515                           ;tff.c: 1859: };tff.c: 1860: r = 0;
  7516  0010FA  0E00               	movlw	0
  7517  0010FC  6F55               	movwf	fprintf@r& (0+255),b
  7518                           
  7519                           ; BSR set to: 2
  7520                           ;tff.c: 1861: if (c == 'd') r = 10;
  7521  0010FE  0E64               	movlw	100
  7522  001100  195F               	xorwf	fprintf@c& (0+255),w,b
  7523  001102  A4D8               	btfss	status,2,c
  7524  001104  D002               	goto	l11283
  7525                           
  7526                           ; BSR set to: 2
  7527  001106  0E0A               	movlw	10
  7528  001108  6F55               	movwf	fprintf@r& (0+255),b
  7529  00110A                     l11283:
  7530                           
  7531                           ; BSR set to: 2
  7532                           ;tff.c: 1862: if (c == 'u') r = 10;
  7533  00110A  0E75               	movlw	117
  7534  00110C  195F               	xorwf	fprintf@c& (0+255),w,b
  7535  00110E  A4D8               	btfss	status,2,c
  7536  001110  D002               	goto	l11287
  7537                           
  7538                           ; BSR set to: 2
  7539  001112  0E0A               	movlw	10
  7540  001114  6F55               	movwf	fprintf@r& (0+255),b
  7541  001116                     l11287:
  7542                           
  7543                           ; BSR set to: 2
  7544                           ;tff.c: 1863: if (c == 'X') r = 16;
  7545  001116  0E58               	movlw	88
  7546  001118  195F               	xorwf	fprintf@c& (0+255),w,b
  7547  00111A  A4D8               	btfss	status,2,c
  7548  00111C  D002               	goto	l1162
  7549                           
  7550                           ; BSR set to: 2
  7551  00111E  0E10               	movlw	16
  7552  001120  6F55               	movwf	fprintf@r& (0+255),b
  7553  001122                     l1162:
  7554                           
  7555                           ; BSR set to: 2
  7556                           ;tff.c: 1864: if (r == 0) break;
  7557  001122  5155               	movf	fprintf@r& (0+255),w,b
  7558  001124  B4D8               	btfsc	status,2,c
  7559  001126  0012               	return	
  7560                           
  7561                           ; BSR set to: 2
  7562                           ;tff.c: 1865: if (f & 2) {
  7563  001128  A354               	btfss	fprintf@f& (0+255),1,b
  7564  00112A  D00D               	goto	l11297
  7565                           
  7566                           ; BSR set to: 2
  7567                           ;tff.c: 1866: val = (ULONG)(*(long *)__va_arg((*(long **)arp), (long)0));
  7568  00112C  515A               	movf	fprintf@arp& (0+255),w,b
  7569  00112E  6ED9               	movwf	fsr2l,c
  7570  001130  6ADA               	clrf	fsr2h,c
  7571  001132  CFDE F256          	movff	postinc2,fprintf@val
  7572  001136  CFDE F257          	movff	postinc2,fprintf@val+1
  7573  00113A  CFDE F258          	movff	postinc2,fprintf@val+2
  7574  00113E  CFDE F259          	movff	postinc2,fprintf@val+3
  7575                           
  7576                           ; BSR set to: 2
  7577  001142  0E04               	movlw	4
  7578  001144  D01F               	goto	L2
  7579  001146                     l11297:
  7580                           
  7581                           ; BSR set to: 2
  7582                           ;tff.c: 1868: val = (c == 'd') ? (ULONG)(long)(*(int *)__va_arg((*(int **)arp), (int)0))
      +                           : (ULONG)(*(unsigned int *)__va_arg((*(unsigned int **)arp), (unsigned int)0));
  7583  001146  0E64               	movlw	100
  7584  001148  195F               	xorwf	fprintf@c& (0+255),w,b
  7585  00114A  B4D8               	btfsc	status,2,c
  7586  00114C  D00E               	goto	l11303
  7587                           
  7588                           ; BSR set to: 2
  7589  00114E  515A               	movf	fprintf@arp& (0+255),w,b
  7590  001150  6ED9               	movwf	fsr2l,c
  7591  001152  6ADA               	clrf	fsr2h,c
  7592  001154  CFDE F0EF          	movff	postinc2,??_fprintf
  7593  001158  CFDD F0F0          	movff	postdec2,??_fprintf+1
  7594  00115C  C0EF  F256         	movff	??_fprintf,fprintf@val
  7595  001160  C0F0  F257         	movff	??_fprintf+1,fprintf@val+1
  7596  001164  6B58               	clrf	(fprintf@val+2)& (0+255),b
  7597  001166  6B59               	clrf	(fprintf@val+3)& (0+255),b
  7598  001168  D00C               	goto	l11305
  7599  00116A                     l11303:
  7600                           
  7601                           ; BSR set to: 2
  7602  00116A  515A               	movf	fprintf@arp& (0+255),w,b
  7603  00116C  6ED9               	movwf	fsr2l,c
  7604  00116E  6ADA               	clrf	fsr2h,c
  7605  001170  CFDE F256          	movff	postinc2,fprintf@val
  7606  001174  CFDD F257          	movff	postdec2,fprintf@val+1
  7607  001178  0E00               	movlw	0
  7608  00117A  BF57               	btfsc	(fprintf@val+1)& (0+255),7,b
  7609  00117C  0EFF               	movlw	-1
  7610  00117E  6F58               	movwf	(fprintf@val+2)& (0+255),b
  7611  001180  6F59               	movwf	(fprintf@val+3)& (0+255),b
  7612  001182                     l11305:
  7613                           
  7614                           ; BSR set to: 2
  7615  001182  0E02               	movlw	2
  7616  001184                     L2:
  7617  001184  275A               	addwf	fprintf@arp& (0+255),f,b
  7618                           
  7619                           ; BSR set to: 2
  7620                           ;tff.c: 1869: };tff.c: 1871: if (c == 'd') {
  7621  001186  0E64               	movlw	100
  7622  001188  195F               	xorwf	fprintf@c& (0+255),w,b
  7623  00118A  A4D8               	btfss	status,2,c
  7624  00118C  D00E               	goto	l11315
  7625                           
  7626                           ; BSR set to: 2
  7627                           ;tff.c: 1872: if (val >= 0x80000000) {
  7628  00118E  0E80               	movlw	128
  7629  001190  5D59               	subwf	(fprintf@val+3)& (0+255),w,b
  7630  001192  A0D8               	btfss	status,0,c
  7631  001194  D00A               	goto	l11315
  7632                           
  7633                           ; BSR set to: 2
  7634                           ;tff.c: 1873: val = 0 - val;
  7635  001196  6D56               	negf	fprintf@val& (0+255),b
  7636  001198  1F57               	comf	(fprintf@val+1)& (0+255),f,b
  7637  00119A  B0D8               	btfsc	status,0,c
  7638  00119C  2B57               	incf	(fprintf@val+1)& (0+255),f,b
  7639  00119E  1F58               	comf	(fprintf@val+2)& (0+255),f,b
  7640  0011A0  B0D8               	btfsc	status,0,c
  7641  0011A2  2B58               	incf	(fprintf@val+2)& (0+255),f,b
  7642  0011A4  0E00               	movlw	0
  7643  0011A6  5759               	subfwb	(fprintf@val+3)& (0+255),f,b
  7644                           
  7645                           ; BSR set to: 2
  7646                           ;tff.c: 1874: f |= 4;
  7647  0011A8  8554               	bsf	fprintf@f& (0+255),2,b
  7648  0011AA                     l11315:
  7649                           
  7650                           ; BSR set to: 2
  7651                           ;tff.c: 1875: };tff.c: 1876: };tff.c: 1877: i = sizeof(s) - 1; s[i] = 0;
  7652  0011AA  0E00               	movlw	0
  7653  0011AC  6F5E               	movwf	(fprintf@i+1)& (0+255),b
  7654  0011AE  0E0F               	movlw	15
  7655  0011B0  6F5D               	movwf	fprintf@i& (0+255),b
  7656                           
  7657                           ; BSR set to: 2
  7658  0011B2  0E00               	movlw	0
  7659  0011B4  6F4D               	movwf	(fprintf@s+15)& (0+255),b
  7660  0011B6                     l11319:
  7661                           
  7662                           ; BSR set to: 2
  7663                           ;tff.c: 1879: c = (UCHAR)(val % r + '0');
  7664  0011B6  C256  F019         	movff	fprintf@val,___llmod@dividend
  7665  0011BA  C257  F01A         	movff	fprintf@val+1,___llmod@dividend+1
  7666  0011BE  C258  F01B         	movff	fprintf@val+2,___llmod@dividend+2
  7667  0011C2  C259  F01C         	movff	fprintf@val+3,___llmod@dividend+3
  7668  0011C6  5155               	movf	fprintf@r& (0+255),w,b
  7669  0011C8  6E1D               	movwf	___llmod@divisor^0,c
  7670  0011CA  6A1E               	clrf	(___llmod@divisor+1)^0,c
  7671  0011CC  6A1F               	clrf	(___llmod@divisor+2)^0,c
  7672  0011CE  6A20               	clrf	(___llmod@divisor+3)^0,c
  7673  0011D0  ECDA  F024         	call	___llmod	;wreg free
  7674  0011D4  5019               	movf	?___llmod^0,w,c
  7675  0011D6  0F30               	addlw	48
  7676  0011D8  0102               	movlb	2	; () banked
  7677  0011DA  6F5F               	movwf	fprintf@c& (0+255),b
  7678                           
  7679                           ; BSR set to: 2
  7680                           ;tff.c: 1880: if (c > '9') c += 7;
  7681  0011DC  0E39               	movlw	57
  7682  0011DE  655F               	cpfsgt	fprintf@c& (0+255),b
  7683  0011E0  D002               	goto	l11325
  7684                           
  7685                           ; BSR set to: 2
  7686  0011E2  0E07               	movlw	7
  7687  0011E4  275F               	addwf	fprintf@c& (0+255),f,b
  7688  0011E6                     l11325:
  7689                           
  7690                           ; BSR set to: 2
  7691                           ;tff.c: 1881: s[--i] = c;
  7692  0011E6  075D               	decf	fprintf@i& (0+255),f,b
  7693  0011E8  A0D8               	btfss	status,0,c
  7694  0011EA  075E               	decf	(fprintf@i+1)& (0+255),f,b
  7695  0011EC  0E3E               	movlw	low fprintf@s
  7696  0011EE  255D               	addwf	fprintf@i& (0+255),w,b
  7697  0011F0  6ED9               	movwf	fsr2l,c
  7698  0011F2  0E02               	movlw	high fprintf@s
  7699  0011F4  215E               	addwfc	(fprintf@i+1)& (0+255),w,b
  7700  0011F6  6EDA               	movwf	fsr2h,c
  7701  0011F8  C25F  FFDF         	movff	fprintf@c,indf2
  7702                           
  7703                           ; BSR set to: 2
  7704                           ;tff.c: 1882: val /= r;
  7705  0011FC  C256  F019         	movff	fprintf@val,___lldiv@dividend
  7706  001200  C257  F01A         	movff	fprintf@val+1,___lldiv@dividend+1
  7707  001204  C258  F01B         	movff	fprintf@val+2,___lldiv@dividend+2
  7708  001208  C259  F01C         	movff	fprintf@val+3,___lldiv@dividend+3
  7709  00120C  5155               	movf	fprintf@r& (0+255),w,b
  7710  00120E  6E1D               	movwf	___lldiv@divisor^0,c
  7711  001210  6A1E               	clrf	(___lldiv@divisor+1)^0,c
  7712  001212  6A1F               	clrf	(___lldiv@divisor+2)^0,c
  7713  001214  6A20               	clrf	(___lldiv@divisor+3)^0,c
  7714  001216  EC15  F023         	call	___lldiv	;wreg free
  7715  00121A  C019  F256         	movff	?___lldiv,fprintf@val
  7716  00121E  C01A  F257         	movff	?___lldiv+1,fprintf@val+1
  7717  001222  C01B  F258         	movff	?___lldiv+2,fprintf@val+2
  7718  001226  C01C  F259         	movff	?___lldiv+3,fprintf@val+3
  7719                           
  7720                           ;tff.c: 1883: } while (i && val);
  7721  00122A  0102               	movlb	2	; () banked
  7722  00122C  515D               	movf	fprintf@i& (0+255),w,b
  7723  00122E  115E               	iorwf	(fprintf@i+1)& (0+255),w,b
  7724  001230  B4D8               	btfsc	status,2,c
  7725  001232  D006               	goto	u13420
  7726                           
  7727                           ; BSR set to: 2
  7728  001234  5156               	movf	fprintf@val& (0+255),w,b
  7729  001236  1157               	iorwf	(fprintf@val+1)& (0+255),w,b
  7730  001238  1158               	iorwf	(fprintf@val+2)& (0+255),w,b
  7731  00123A  1159               	iorwf	(fprintf@val+3)& (0+255),w,b
  7732  00123C  A4D8               	btfss	status,2,c
  7733  00123E  D7BB               	goto	l11319
  7734  001240                     u13420:
  7735                           
  7736                           ; BSR set to: 2
  7737                           ;tff.c: 1884: if (i && (f & 4)) s[--i] = '-';
  7738  001240  515D               	movf	fprintf@i& (0+255),w,b
  7739  001242  115E               	iorwf	(fprintf@i+1)& (0+255),w,b
  7740  001244  A4D8               	btfss	status,2,c
  7741                           
  7742                           ; BSR set to: 2
  7743  001246  A554               	btfss	fprintf@f& (0+255),2,b
  7744  001248  D00B               	goto	l11339
  7745                           
  7746                           ; BSR set to: 2
  7747  00124A  075D               	decf	fprintf@i& (0+255),f,b
  7748  00124C  A0D8               	btfss	status,0,c
  7749  00124E  075E               	decf	(fprintf@i+1)& (0+255),f,b
  7750  001250  0E3E               	movlw	low fprintf@s
  7751  001252  255D               	addwf	fprintf@i& (0+255),w,b
  7752  001254  6ED9               	movwf	fsr2l,c
  7753  001256  0E02               	movlw	high fprintf@s
  7754  001258  215E               	addwfc	(fprintf@i+1)& (0+255),w,b
  7755  00125A  6EDA               	movwf	fsr2h,c
  7756  00125C  0E2D               	movlw	45
  7757  00125E  6EDF               	movwf	indf2,c
  7758  001260                     l11339:
  7759                           
  7760                           ; BSR set to: 2
  7761                           ;tff.c: 1885: w = sizeof(s) - 1 - w;
  7762  001260  5152               	movf	fprintf@w& (0+255),w,b
  7763  001262  080F               	sublw	15
  7764  001264  6F52               	movwf	fprintf@w& (0+255),b
  7765  001266  5153               	movf	(fprintf@w+1)& (0+255),w,b
  7766  001268  A0D8               	btfss	status,0,c
  7767  00126A  2AE8               	incf	wreg,f,c
  7768  00126C  0800               	sublw	0
  7769  00126E  6F53               	movwf	(fprintf@w+1)& (0+255),b
  7770                           
  7771                           ;tff.c: 1886: while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
  7772  001270  D016               	goto	l11347
  7773  001272                     l1179:
  7774                           
  7775                           ; BSR set to: 0
  7776  001272  0102               	movlb	2	; () banked
  7777  001274  B154               	btfsc	fprintf@f& (0+255),0,b
  7778  001276  D004               	goto	l11343
  7779                           
  7780                           ; BSR set to: 2
  7781  001278  0E00               	movlw	0
  7782  00127A  6F51               	movwf	(_fprintf$2154+1)& (0+255),b
  7783  00127C  0E20               	movlw	32
  7784  00127E  D003               	goto	L3
  7785  001280                     l11343:
  7786                           
  7787                           ; BSR set to: 2
  7788  001280  0E00               	movlw	0
  7789  001282  6F51               	movwf	(_fprintf$2154+1)& (0+255),b
  7790  001284  0E30               	movlw	48
  7791  001286                     L3:
  7792  001286  6F50               	movwf	_fprintf$2154& (0+255),b
  7793                           
  7794                           ; BSR set to: 2
  7795  001288  075D               	decf	fprintf@i& (0+255),f,b
  7796  00128A  A0D8               	btfss	status,0,c
  7797  00128C  075E               	decf	(fprintf@i+1)& (0+255),f,b
  7798  00128E  0E3E               	movlw	low fprintf@s
  7799  001290  255D               	addwf	fprintf@i& (0+255),w,b
  7800  001292  6ED9               	movwf	fsr2l,c
  7801  001294  0E02               	movlw	high fprintf@s
  7802  001296  215E               	addwfc	(fprintf@i+1)& (0+255),w,b
  7803  001298  6EDA               	movwf	fsr2h,c
  7804  00129A  C250  FFDF         	movff	_fprintf$2154,indf2
  7805  00129E                     l11347:
  7806                           
  7807                           ; BSR set to: 2
  7808  00129E  515D               	movf	fprintf@i& (0+255),w,b
  7809  0012A0  115E               	iorwf	(fprintf@i+1)& (0+255),w,b
  7810  0012A2  B4D8               	btfsc	status,2,c
  7811  0012A4  D00D               	goto	u13470
  7812                           
  7813                           ; BSR set to: 2
  7814  0012A6  515D               	movf	fprintf@i& (0+255),w,b
  7815  0012A8  5D52               	subwf	fprintf@w& (0+255),w,b
  7816  0012AA  5153               	movf	(fprintf@w+1)& (0+255),w,b
  7817  0012AC  0A80               	xorlw	128
  7818  0012AE  0100               	movlb	0	; () banked
  7819  0012B0  6FEF               	movwf	??_fprintf& (0+255),b
  7820  0012B2  0102               	movlb	2	; () banked
  7821  0012B4  515E               	movf	(fprintf@i+1)& (0+255),w,b
  7822  0012B6  0A80               	xorlw	128
  7823  0012B8  0100               	movlb	0	; () banked
  7824  0012BA  59EF               	subwfb	??_fprintf& (0+255),w,b
  7825  0012BC  A0D8               	btfss	status,0,c
  7826  0012BE  D7D9               	goto	l1179
  7827  0012C0                     u13470:
  7828                           
  7829                           ;tff.c: 1887: cc = fputs(&s[i], fil);
  7830  0012C0  0E3E               	movlw	low fprintf@s
  7831  0012C2  0102               	movlb	2	; () banked
  7832  0012C4  255D               	addwf	fprintf@i& (0+255),w,b
  7833  0012C6  0100               	movlb	0	; () banked
  7834  0012C8  6FD3               	movwf	fputs@str& (0+255),b
  7835  0012CA  0E02               	movlw	high fprintf@s
  7836  0012CC  0102               	movlb	2	; () banked
  7837  0012CE  215E               	addwfc	(fprintf@i+1)& (0+255),w,b
  7838  0012D0  0100               	movlb	0	; () banked
  7839  0012D2  6FD4               	movwf	(fputs@str+1)& (0+255),b
  7840  0012D4  C0D9  F0D5         	movff	fprintf@fil,fputs@fil
  7841  0012D8  C0DA  F0D6         	movff	fprintf@fil+1,fputs@fil+1
  7842  0012DC  EC0A  F022         	call	_fputs	;wreg free
  7843  0012E0  C0D3  F25B         	movff	?_fputs,fprintf@cc
  7844  0012E4  C0D4  F25C         	movff	?_fputs+1,fprintf@cc+1
  7845  0012E8                     l11353:
  7846  0012E8  0102               	movlb	2	; () banked
  7847  0012EA  515B               	movf	fprintf@cc& (0+255),w,b
  7848  0012EC  274E               	addwf	fprintf@res& (0+255),f,b
  7849  0012EE  515C               	movf	(fprintf@cc+1)& (0+255),w,b
  7850  0012F0  234F               	addwfc	(fprintf@res+1)& (0+255),f,b
  7851  0012F2  D64B               	goto	l11209
  7852  0012F4                     __end_of_fprintf:
  7853                           	callstack 0
  7854                           
  7855 ;; *************** function _fputs *****************
  7856 ;; Defined at:
  7857 ;;		line 1796 in file "bibliotecas/tff.c"
  7858 ;; Parameters:    Size  Location     Type
  7859 ;;  str             2  115[BANK0 ] PTR const unsigned char 
  7860 ;;		 -> fprintf@s(16), ?_fprintf(2), STR_21(4), STR_20(2), 
  7861 ;;		 -> STR_19(2), STR_18(2), string_dado(62), 
  7862 ;;  fil             2  117[BANK0 ] PTR struct _FIL
  7863 ;;		 -> fil(28), 
  7864 ;; Auto vars:     Size  Location     Type
  7865 ;;  n               2  119[BANK0 ] int 
  7866 ;; Return value:  Size  Location     Type
  7867 ;;                  2  115[BANK0 ] int 
  7868 ;; Registers used:
  7869 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7870 ;; Tracked objects:
  7871 ;;		On entry : 3D/2
  7872 ;;		On exit  : 0/0
  7873 ;;		Unchanged: 0/0
  7874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7875 ;;      Params:         0       4       0       0       0       0       0       0       0
  7876 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7877 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7878 ;;      Totals:         1       6       0       0       0       0       0       0       0
  7879 ;;Total ram usage:        7 bytes
  7880 ;; Hardware stack levels used:    1
  7881 ;; Hardware stack levels required when called:   13
  7882 ;; This function calls:
  7883 ;;		_fputc
  7884 ;; This function is called by:
  7885 ;;		_fprintf
  7886 ;; This function uses a non-reentrant model
  7887 ;;
  7888                           
  7889                           	psect	text45
  7890  004414                     __ptext45:
  7891                           	callstack 0
  7892  004414                     _fputs:
  7893                           	callstack 12
  7894                           
  7895                           ;tff.c: 1801: int n;;tff.c: 1804: for (n = 0; *str; str++, n++) {
  7896                           
  7897                           ; BSR set to: 2
  7898                           ;incstack = 0
  7899  004414  0E00               	movlw	0
  7900  004416  0100               	movlb	0	; () banked
  7901  004418  6FD8               	movwf	(fputs@n+1)& (0+255),b
  7902  00441A  0E00               	movlw	0
  7903  00441C  6FD7               	movwf	fputs@n& (0+255),b
  7904  00441E  D027               	goto	l10923
  7905  004420                     l10917:
  7906                           
  7907                           ;tff.c: 1805: if (fputc(*str, fil) == -1) return -1;
  7908  004420  C0D3  FFF6         	movff	fputs@str,tblptrl
  7909  004424  C0D4  FFF7         	movff	fputs@str+1,tblptrh
  7910  004428  6AF8               	clrf	tblptru,c
  7911  00442A  0E07               	movlw	(high __ramtop+-1)
  7912  00442C  64F7               	cpfsgt	tblptrh,c
  7913  00442E  D003               	bra	u12677
  7914  004430  0008               	tblrd		*
  7915  004432  50F5               	movf	tablat,w,c
  7916  004434  D005               	bra	u12670
  7917  004436                     u12677:
  7918  004436  CFF6 FFE1          	movff	tblptrl,fsr1l
  7919  00443A  CFF7 FFE2          	movff	tblptrh,fsr1h
  7920  00443E  50E7               	movf	indf1,w,c
  7921  004440                     u12670:
  7922  004440  6E31               	movwf	??_fputs^0,c
  7923  004442  5031               	movf	??_fputs^0,w,c
  7924  004444  0100               	movlb	0	; () banked
  7925  004446  6FCC               	movwf	fputc@chr& (0+255),b
  7926  004448  6BCD               	clrf	(fputc@chr+1)& (0+255),b
  7927  00444A  C0D5  F0CE         	movff	fputs@fil,fputc@fil
  7928  00444E  C0D6  F0CF         	movff	fputs@fil+1,fputc@fil+1
  7929  004452  ECA7  F027         	call	_fputc	;wreg free
  7930  004456  29CC               	incf	?_fputc& (0+255),w,b
  7931  004458  E106               	bnz	l10921
  7932  00445A  29CD               	incf	(?_fputc+1)& (0+255),w,b
  7933  00445C  A4D8               	btfss	status,2,c
  7934  00445E  D003               	goto	l10921
  7935                           
  7936                           ; BSR set to: 0
  7937  004460  69D3               	setf	?_fputs& (0+255),b
  7938  004462  69D4               	setf	(?_fputs+1)& (0+255),b
  7939  004464  0012               	return	
  7940  004466                     l10921:
  7941                           
  7942                           ; BSR set to: 0
  7943  004466  4BD3               	infsnz	fputs@str& (0+255),f,b
  7944  004468  2BD4               	incf	(fputs@str+1)& (0+255),f,b
  7945  00446A  4BD7               	infsnz	fputs@n& (0+255),f,b
  7946  00446C  2BD8               	incf	(fputs@n+1)& (0+255),f,b
  7947  00446E                     l10923:
  7948                           
  7949                           ; BSR set to: 0
  7950  00446E  C0D3  FFF6         	movff	fputs@str,tblptrl
  7951  004472  C0D4  FFF7         	movff	fputs@str+1,tblptrh
  7952  004476  6AF8               	clrf	tblptru,c
  7953  004478  0E07               	movlw	(high __ramtop+-1)
  7954  00447A  64F7               	cpfsgt	tblptrh,c
  7955  00447C  D003               	bra	u12697
  7956  00447E  0008               	tblrd		*
  7957  004480  50F5               	movf	tablat,w,c
  7958  004482  D005               	bra	u12690
  7959  004484                     u12697:
  7960  004484  CFF6 FFE1          	movff	tblptrl,fsr1l
  7961  004488  CFF7 FFE2          	movff	tblptrh,fsr1h
  7962  00448C  50E7               	movf	indf1,w,c
  7963  00448E                     u12690:
  7964  00448E  0900               	iorlw	0
  7965  004490  A4D8               	btfss	status,2,c
  7966  004492  D7C6               	goto	l10917
  7967                           
  7968                           ;tff.c: 1806: };tff.c: 1807: return n;
  7969  004494  C0D7  F0D3         	movff	fputs@n,?_fputs
  7970  004498  C0D8  F0D4         	movff	fputs@n+1,?_fputs+1
  7971  00449C  0012               	return		;funcret
  7972  00449E                     __end_of_fputs:
  7973                           	callstack 0
  7974                           
  7975 ;; *************** function _fputc *****************
  7976 ;; Defined at:
  7977 ;;		line 1769 in file "bibliotecas/tff.c"
  7978 ;; Parameters:    Size  Location     Type
  7979 ;;  chr             2  108[BANK0 ] int 
  7980 ;;  fil             2  110[BANK0 ] PTR struct _FIL
  7981 ;;		 -> fil(28), 
  7982 ;; Auto vars:     Size  Location     Type
  7983 ;;  bw              2  113[BANK0 ] unsigned int 
  7984 ;;  c               1  112[BANK0 ] unsigned char 
  7985 ;; Return value:  Size  Location     Type
  7986 ;;                  2  108[BANK0 ] int 
  7987 ;; Registers used:
  7988 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7989 ;; Tracked objects:
  7990 ;;		On entry : 3F/0
  7991 ;;		On exit  : 3F/0
  7992 ;;		Unchanged: 0/0
  7993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7994 ;;      Params:         0       4       0       0       0       0       0       0       0
  7995 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7996 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7997 ;;      Totals:         0       7       0       0       0       0       0       0       0
  7998 ;;Total ram usage:        7 bytes
  7999 ;; Hardware stack levels used:    1
  8000 ;; Hardware stack levels required when called:   12
  8001 ;; This function calls:
  8002 ;;		_f_write
  8003 ;; This function is called by:
  8004 ;;		_fputs
  8005 ;;		_fprintf
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           	psect	text46
  8010  004F4E                     __ptext46:
  8011                           	callstack 0
  8012  004F4E                     _fputc:
  8013                           	callstack 12
  8014                           
  8015                           ; BSR set to: 0
  8016                           ;tff.c: 1774: UINT bw;;tff.c: 1775: char c;;tff.c: 1781: if (!fil) {
  8017                           
  8018                           ;incstack = 0
  8019  004F4E  51CE               	movf	fputc@fil& (0+255),w,b
  8020  004F50  11CF               	iorwf	(fputc@fil+1)& (0+255),w,b
  8021  004F52  A4D8               	btfss	status,2,c
  8022  004F54  D005               	goto	l1129
  8023  004F56                     u11860:
  8024                           
  8025                           ; BSR set to: 0
  8026                           ;tff.c: 1783: return chr;
  8027  004F56  C0CC  F0CC         	movff	fputc@chr,?_fputc
  8028  004F5A  C0CD  F0CD         	movff	fputc@chr+1,?_fputc+1
  8029  004F5E  0012               	return	
  8030  004F60                     l1129:
  8031                           
  8032                           ; BSR set to: 0
  8033                           ;tff.c: 1784: };tff.c: 1785: c = (char)chr;
  8034  004F60  C0CC  F0D0         	movff	fputc@chr,fputc@c
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;tff.c: 1786: f_write(fil, &c, 1, &bw);
  8038  004F64  C0CE  F0AE         	movff	fputc@fil,f_write@fp
  8039  004F68  C0CF  F0AF         	movff	fputc@fil+1,f_write@fp+1
  8040  004F6C  0ED0               	movlw	low fputc@c
  8041  004F6E  6FB0               	movwf	f_write@buff& (0+255),b
  8042  004F70  0E00               	movlw	0
  8043  004F72  6FB2               	movwf	(f_write@btw+1)& (0+255),b
  8044  004F74  0E01               	movlw	1
  8045  004F76  6FB1               	movwf	f_write@btw& (0+255),b
  8046  004F78  0ED1               	movlw	low fputc@bw
  8047  004F7A  6FB3               	movwf	f_write@bw& (0+255),b
  8048  004F7C  EC09  F000         	call	_f_write	;wreg free
  8049                           
  8050                           ; BSR set to: 0
  8051                           ;tff.c: 1787: return bw ? chr : -1;
  8052  004F80  51D1               	movf	fputc@bw& (0+255),w,b
  8053  004F82  11D2               	iorwf	(fputc@bw+1)& (0+255),w,b
  8054  004F84  A4D8               	btfss	status,2,c
  8055  004F86  D7E7               	goto	u11860
  8056                           
  8057                           ; BSR set to: 0
  8058  004F88  69CC               	setf	?_fputc& (0+255),b
  8059  004F8A  69CD               	setf	(?_fputc+1)& (0+255),b
  8060                           
  8061                           ; BSR set to: 0
  8062  004F8C  0012               	return		;funcret
  8063  004F8E                     __end_of_fputc:
  8064                           	callstack 0
  8065                           
  8066 ;; *************** function _f_write *****************
  8067 ;; Defined at:
  8068 ;;		line 999 in file "bibliotecas/tff.c"
  8069 ;; Parameters:    Size  Location     Type
  8070 ;;  fp              2   78[BANK0 ] PTR struct _FIL
  8071 ;;		 -> fil(28), 
  8072 ;;  buff            1   80[BANK0 ] PTR const void 
  8073 ;;		 -> fputc@c(1), 
  8074 ;;  btw             2   81[BANK0 ] unsigned int 
  8075 ;;  bw              1   83[BANK0 ] PTR unsigned int 
  8076 ;;		 -> fputc@bw(2), 
  8077 ;; Auto vars:     Size  Location     Type
  8078 ;;  sect            4   98[BANK0 ] unsigned long 
  8079 ;;  wcnt            2  106[BANK0 ] unsigned int 
  8080 ;;  clust           2  104[BANK0 ] unsigned short 
  8081 ;;  cc              2  102[BANK0 ] unsigned int 
  8082 ;;  wbuff           1   97[BANK0 ] PTR const unsigned char 
  8083 ;;		 -> fputc@c(1), 
  8084 ;;  res             1   96[BANK0 ] enum E155
  8085 ;; Return value:  Size  Location     Type
  8086 ;;                  1    wreg      enum E155
  8087 ;; Registers used:
  8088 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8089 ;; Tracked objects:
  8090 ;;		On entry : 3F/0
  8091 ;;		On exit  : 3F/0
  8092 ;;		Unchanged: 0/0
  8093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8094 ;;      Params:         0       6       0       0       0       0       0       0       0
  8095 ;;      Locals:         0      12       0       0       0       0       0       0       0
  8096 ;;      Temps:          0      12       0       0       0       0       0       0       0
  8097 ;;      Totals:         0      30       0       0       0       0       0       0       0
  8098 ;;Total ram usage:       30 bytes
  8099 ;; Hardware stack levels used:    1
  8100 ;; Hardware stack levels required when called:   11
  8101 ;; This function calls:
  8102 ;;		_clust2sect
  8103 ;;		_create_chain
  8104 ;;		_disk_write
  8105 ;;		_memcpy
  8106 ;;		_move_window
  8107 ;;		_validate
  8108 ;; This function is called by:
  8109 ;;		_fputc
  8110 ;; This function uses a non-reentrant model
  8111 ;;
  8112                           
  8113                           	psect	text47
  8114  000012                     __ptext47:
  8115                           	callstack 0
  8116  000012                     _f_write:
  8117                           	callstack 12
  8118                           
  8119                           ; BSR set to: 0
  8120                           ;tff.c: 1006: FRESULT res;;tff.c: 1007: DWORD sect;;tff.c: 1008: UINT wcnt, cc;;tff.c: 1
      +                          009: CLUST clust;;tff.c: 1010: const BYTE *wbuff = buff;
  8121                           
  8122                           ; BSR set to: 0
  8123                           ;incstack = 0
  8124  000012  C0B0  F0C1         	movff	f_write@buff,f_write@wbuff
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;tff.c: 1013: *bw = 0;
  8128  000016  51B3               	movf	f_write@bw& (0+255),w,b
  8129  000018  6ED9               	movwf	fsr2l,c
  8130  00001A  6ADA               	clrf	fsr2h,c
  8131  00001C  0E00               	movlw	0
  8132  00001E  6EDE               	movwf	postinc2,c
  8133  000020  0E00               	movlw	0
  8134  000022  6EDD               	movwf	postdec2,c
  8135                           
  8136                           ; BSR set to: 0
  8137                           ;tff.c: 1014: res = validate(fp->fs, fp->id);
  8138  000024  EE20 F004          	lfsr	2,4
  8139  000028  51AE               	movf	f_write@fp& (0+255),w,b
  8140  00002A  26D9               	addwf	fsr2l,f,c
  8141  00002C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8142  00002E  22DA               	addwfc	fsr2h,f,c
  8143  000030  CFDE F01F          	movff	postinc2,validate@fs
  8144  000034  CFDD F020          	movff	postdec2,validate@fs+1
  8145  000038  C0AE  FFD9         	movff	f_write@fp,fsr2l
  8146  00003C  C0AF  FFDA         	movff	f_write@fp+1,fsr2h
  8147  000040  CFDE F021          	movff	postinc2,validate@id
  8148  000044  CFDD F022          	movff	postdec2,validate@id+1
  8149  000048  ECB8  F026         	call	_validate	;wreg free
  8150  00004C  0100               	movlb	0	; () banked
  8151  00004E  6FC0               	movwf	f_write@res& (0+255),b
  8152                           
  8153                           ; BSR set to: 0
  8154                           ;tff.c: 1015: if (res != FR_OK) return res;
  8155  000050  51C0               	movf	f_write@res& (0+255),w,b
  8156  000052  A4D8               	btfss	status,2,c
  8157  000054  0012               	return	
  8158                           
  8159                           ; BSR set to: 0
  8160                           ;tff.c: 1016: if (fp->flag & 0x80) return FR_RW_ERROR;
  8161  000056  EE20 F002          	lfsr	2,2
  8162  00005A  51AE               	movf	f_write@fp& (0+255),w,b
  8163  00005C  26D9               	addwf	fsr2l,f,c
  8164  00005E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8165  000060  22DA               	addwfc	fsr2h,f,c
  8166  000062  BEDF               	btfsc	indf2,7,c
  8167  000064  0012               	return	
  8168                           
  8169                           ; BSR set to: 0
  8170                           ;tff.c: 1017: if (!(fp->flag & 0x02)) return FR_DENIED;
  8171  000066  EE20 F002          	lfsr	2,2
  8172  00006A  51AE               	movf	f_write@fp& (0+255),w,b
  8173  00006C  26D9               	addwf	fsr2l,f,c
  8174  00006E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8175  000070  22DA               	addwfc	fsr2h,f,c
  8176  000072  A2DF               	btfss	indf2,1,c
  8177  000074  0012               	return	
  8178                           
  8179                           ; BSR set to: 0
  8180                           ;tff.c: 1018: if (fp->fsize + btw < fp->fsize) return FR_OK;
  8181  000076  EE20 F00A          	lfsr	2,10
  8182  00007A  51AE               	movf	f_write@fp& (0+255),w,b
  8183  00007C  26D9               	addwf	fsr2l,f,c
  8184  00007E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8185  000080  22DA               	addwfc	fsr2h,f,c
  8186  000082  EE10 F00A          	lfsr	1,10
  8187  000086  51AE               	movf	f_write@fp& (0+255),w,b
  8188  000088  26E1               	addwf	fsr1l,f,c
  8189  00008A  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8190  00008C  22E2               	addwfc	fsr1h,f,c
  8191  00008E  CFE6 F0B8          	movff	postinc1,??_f_write+4
  8192  000092  CFE6 F0B9          	movff	postinc1,??_f_write+5
  8193  000096  CFE6 F0BA          	movff	postinc1,??_f_write+6
  8194  00009A  CFE6 F0BB          	movff	postinc1,??_f_write+7
  8195  00009E  51B1               	movf	f_write@btw& (0+255),w,b
  8196  0000A0  25B8               	addwf	(??_f_write+4)& (0+255),w,b
  8197  0000A2  6FBC               	movwf	(??_f_write+8)& (0+255),b
  8198  0000A4  51B2               	movf	(f_write@btw+1)& (0+255),w,b
  8199  0000A6  21B9               	addwfc	(??_f_write+5)& (0+255),w,b
  8200  0000A8  6FBD               	movwf	(??_f_write+9)& (0+255),b
  8201  0000AA  0E00               	movlw	0
  8202  0000AC  21BA               	addwfc	(??_f_write+6)& (0+255),w,b
  8203  0000AE  6FBE               	movwf	(??_f_write+10)& (0+255),b
  8204  0000B0  0E00               	movlw	0
  8205  0000B2  21BB               	addwfc	(??_f_write+7)& (0+255),w,b
  8206  0000B4  6FBF               	movwf	(??_f_write+11)& (0+255),b
  8207  0000B6  50DE               	movf	postinc2,w,c
  8208  0000B8  5DBC               	subwf	(??_f_write+8)& (0+255),w,b
  8209  0000BA  50DE               	movf	postinc2,w,c
  8210  0000BC  59BD               	subwfb	(??_f_write+9)& (0+255),w,b
  8211  0000BE  50DE               	movf	postinc2,w,c
  8212  0000C0  59BE               	subwfb	(??_f_write+10)& (0+255),w,b
  8213  0000C2  50DE               	movf	postinc2,w,c
  8214  0000C4  59BF               	subwfb	(??_f_write+11)& (0+255),w,b
  8215  0000C6  A0D8               	btfss	status,0,c
  8216  0000C8  0012               	return	
  8217  0000CA  D22A               	goto	l10283
  8218  0000CC                     l10207:
  8219                           
  8220                           ; BSR set to: 0
  8221                           ;tff.c: 1022: if ((fp->fptr % 512U) == 0) {
  8222  0000CC  EE20 F006          	lfsr	2,6
  8223  0000D0  51AE               	movf	f_write@fp& (0+255),w,b
  8224  0000D2  26D9               	addwf	fsr2l,f,c
  8225  0000D4  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8226  0000D6  22DA               	addwfc	fsr2h,f,c
  8227  0000D8  0EFF               	movlw	255
  8228  0000DA  14DE               	andwf	postinc2,w,c
  8229  0000DC  6FB4               	movwf	??_f_write& (0+255),b
  8230  0000DE  0E01               	movlw	1
  8231  0000E0  14DE               	andwf	postinc2,w,c
  8232  0000E2  6FB5               	movwf	(??_f_write+1)& (0+255),b
  8233  0000E4  0E00               	movlw	0
  8234  0000E6  14DE               	andwf	postinc2,w,c
  8235  0000E8  6FB6               	movwf	(??_f_write+2)& (0+255),b
  8236  0000EA  0E00               	movlw	0
  8237  0000EC  14DE               	andwf	postinc2,w,c
  8238  0000EE  6FB7               	movwf	(??_f_write+3)& (0+255),b
  8239  0000F0  51B4               	movf	??_f_write& (0+255),w,b
  8240  0000F2  11B5               	iorwf	(??_f_write+1)& (0+255),w,b
  8241  0000F4  11B6               	iorwf	(??_f_write+2)& (0+255),w,b
  8242  0000F6  11B7               	iorwf	(??_f_write+3)& (0+255),w,b
  8243  0000F8  A4D8               	btfss	status,2,c
  8244  0000FA  D15C               	goto	l10259
  8245                           
  8246                           ; BSR set to: 0
  8247                           ;tff.c: 1023: if (fp->csect >= fp->fs->csize) {
  8248  0000FC  EE20 F004          	lfsr	2,4
  8249  000100  51AE               	movf	f_write@fp& (0+255),w,b
  8250  000102  26D9               	addwf	fsr2l,f,c
  8251  000104  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8252  000106  22DA               	addwfc	fsr2h,f,c
  8253  000108  EE10 F01D          	lfsr	1,29
  8254  00010C  50DE               	movf	postinc2,w,c
  8255  00010E  26E1               	addwf	fsr1l,f,c
  8256  000110  50DD               	movf	postdec2,w,c
  8257  000112  22E2               	addwfc	fsr1h,f,c
  8258  000114  EE20 F003          	lfsr	2,3
  8259  000118  51AE               	movf	f_write@fp& (0+255),w,b
  8260  00011A  26D9               	addwf	fsr2l,f,c
  8261  00011C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8262  00011E  22DA               	addwfc	fsr2h,f,c
  8263  000120  50E6               	movf	postinc1,w,c
  8264  000122  5CDE               	subwf	postinc2,w,c
  8265  000124  A0D8               	btfss	status,0,c
  8266  000126  D06B               	goto	l10231
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;tff.c: 1024: if (fp->fptr == 0) {
  8270  000128  EE20 F006          	lfsr	2,6
  8271  00012C  51AE               	movf	f_write@fp& (0+255),w,b
  8272  00012E  26D9               	addwf	fsr2l,f,c
  8273  000130  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8274  000132  22DA               	addwfc	fsr2h,f,c
  8275  000134  50DE               	movf	postinc2,w,c
  8276  000136  10DE               	iorwf	postinc2,w,c
  8277  000138  10DE               	iorwf	postinc2,w,c
  8278  00013A  10DE               	iorwf	postinc2,w,c
  8279  00013C  A4D8               	btfss	status,2,c
  8280  00013E  D023               	goto	l10219
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;tff.c: 1025: clust = fp->org_clust;
  8284  000140  EE20 F00E          	lfsr	2,14
  8285  000144  51AE               	movf	f_write@fp& (0+255),w,b
  8286  000146  26D9               	addwf	fsr2l,f,c
  8287  000148  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8288  00014A  22DA               	addwfc	fsr2h,f,c
  8289  00014C  CFDE F0C8          	movff	postinc2,f_write@clust
  8290  000150  CFDD F0C9          	movff	postdec2,f_write@clust+1
  8291                           
  8292                           ; BSR set to: 0
  8293                           ;tff.c: 1026: if (clust == 0)
  8294  000154  51C8               	movf	f_write@clust& (0+255),w,b
  8295  000156  11C9               	iorwf	(f_write@clust+1)& (0+255),w,b
  8296  000158  A4D8               	btfss	status,2,c
  8297  00015A  D025               	goto	l10221
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;tff.c: 1027: fp->org_clust = clust = create_chain(0);
  8301  00015C  0E00               	movlw	0
  8302  00015E  6FA1               	movwf	(create_chain@clust+1)& (0+255),b
  8303  000160  0E00               	movlw	0
  8304  000162  6FA0               	movwf	create_chain@clust& (0+255),b
  8305  000164  EC7D  F016         	call	_create_chain	;wreg free
  8306  000168  C0A0  F0C8         	movff	?_create_chain,f_write@clust
  8307  00016C  C0A1  F0C9         	movff	?_create_chain+1,f_write@clust+1
  8308  000170  EE20 F00E          	lfsr	2,14
  8309  000174  51AE               	movf	f_write@fp& (0+255),w,b
  8310  000176  26D9               	addwf	fsr2l,f,c
  8311  000178  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8312  00017A  22DA               	addwfc	fsr2h,f,c
  8313  00017C  C0C8  FFDE         	movff	f_write@clust,postinc2
  8314  000180  C0C9  FFDD         	movff	f_write@clust+1,postdec2
  8315  000184  D010               	goto	l10221
  8316  000186                     l10219:
  8317                           
  8318                           ; BSR set to: 0
  8319                           ;tff.c: 1029: clust = create_chain(fp->curr_clust);
  8320  000186  EE20 F010          	lfsr	2,16
  8321  00018A  51AE               	movf	f_write@fp& (0+255),w,b
  8322  00018C  26D9               	addwf	fsr2l,f,c
  8323  00018E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8324  000190  22DA               	addwfc	fsr2h,f,c
  8325  000192  CFDE F0A0          	movff	postinc2,create_chain@clust
  8326  000196  CFDD F0A1          	movff	postdec2,create_chain@clust+1
  8327  00019A  EC7D  F016         	call	_create_chain	;wreg free
  8328  00019E  C0A0  F0C8         	movff	?_create_chain,f_write@clust
  8329  0001A2  C0A1  F0C9         	movff	?_create_chain+1,f_write@clust+1
  8330  0001A6                     l10221:
  8331                           
  8332                           ; BSR set to: 0
  8333                           ;tff.c: 1030: };tff.c: 1031: if (clust == 0) break;
  8334  0001A6  51C8               	movf	f_write@clust& (0+255),w,b
  8335  0001A8  11C9               	iorwf	(f_write@clust+1)& (0+255),w,b
  8336  0001AA  B4D8               	btfsc	status,2,c
  8337  0001AC  D1BD               	goto	u11660
  8338                           
  8339                           ; BSR set to: 0
  8340                           ;tff.c: 1032: if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
  8341  0001AE  05C8               	decf	f_write@clust& (0+255),w,b
  8342  0001B0  11C9               	iorwf	(f_write@clust+1)& (0+255),w,b
  8343  0001B2  B4D8               	btfsc	status,2,c
  8344  0001B4  D1EC               	goto	l10293
  8345                           
  8346                           ; BSR set to: 0
  8347  0001B6  EE20 F004          	lfsr	2,4
  8348  0001BA  51AE               	movf	f_write@fp& (0+255),w,b
  8349  0001BC  26D9               	addwf	fsr2l,f,c
  8350  0001BE  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8351  0001C0  22DA               	addwfc	fsr2h,f,c
  8352  0001C2  EE10 F016          	lfsr	1,22
  8353  0001C6  50DE               	movf	postinc2,w,c
  8354  0001C8  26E1               	addwf	fsr1l,f,c
  8355  0001CA  50DD               	movf	postdec2,w,c
  8356  0001CC  22E2               	addwfc	fsr1h,f,c
  8357  0001CE  50E6               	movf	postinc1,w,c
  8358  0001D0  5DC8               	subwf	f_write@clust& (0+255),w,b
  8359  0001D2  50E6               	movf	postinc1,w,c
  8360  0001D4  59C9               	subwfb	(f_write@clust+1)& (0+255),w,b
  8361  0001D6  B0D8               	btfsc	status,0,c
  8362  0001D8  D1DA               	goto	l10293
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;tff.c: 1033: fp->curr_clust = clust;
  8366  0001DA  EE20 F010          	lfsr	2,16
  8367  0001DE  51AE               	movf	f_write@fp& (0+255),w,b
  8368  0001E0  26D9               	addwf	fsr2l,f,c
  8369  0001E2  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8370  0001E4  22DA               	addwfc	fsr2h,f,c
  8371  0001E6  C0C8  FFDE         	movff	f_write@clust,postinc2
  8372  0001EA  C0C9  FFDD         	movff	f_write@clust+1,postdec2
  8373                           
  8374                           ;tff.c: 1034: fp->csect = 0;
  8375  0001EE  EE20 F003          	lfsr	2,3
  8376  0001F2  51AE               	movf	f_write@fp& (0+255),w,b
  8377  0001F4  26D9               	addwf	fsr2l,f,c
  8378  0001F6  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8379  0001F8  22DA               	addwfc	fsr2h,f,c
  8380  0001FA  0E00               	movlw	0
  8381  0001FC  6EDF               	movwf	indf2,c
  8382  0001FE                     l10231:
  8383                           
  8384                           ; BSR set to: 0
  8385                           ;tff.c: 1035: };tff.c: 1036: sect = clust2sect(fp->curr_clust) + fp->csect;
  8386  0001FE  EE20 F010          	lfsr	2,16
  8387  000202  51AE               	movf	f_write@fp& (0+255),w,b
  8388  000204  26D9               	addwf	fsr2l,f,c
  8389  000206  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8390  000208  22DA               	addwfc	fsr2h,f,c
  8391  00020A  CFDE F025          	movff	postinc2,clust2sect@clust
  8392  00020E  CFDD F026          	movff	postdec2,clust2sect@clust+1
  8393  000212  EC02  F01F         	call	_clust2sect	;wreg free
  8394  000216  0100               	movlb	0	; () banked
  8395  000218  EE20 F003          	lfsr	2,3
  8396  00021C  51AE               	movf	f_write@fp& (0+255),w,b
  8397  00021E  26D9               	addwf	fsr2l,f,c
  8398  000220  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8399  000222  22DA               	addwfc	fsr2h,f,c
  8400  000224  50DF               	movf	indf2,w,c
  8401  000226  6FB4               	movwf	??_f_write& (0+255),b
  8402  000228  51B4               	movf	??_f_write& (0+255),w,b
  8403  00022A  2425               	addwf	?_clust2sect^0,w,c
  8404  00022C  6FC2               	movwf	f_write@sect& (0+255),b
  8405  00022E  0E00               	movlw	0
  8406  000230  2026               	addwfc	(?_clust2sect+1)^0,w,c
  8407  000232  6FC3               	movwf	(f_write@sect+1)& (0+255),b
  8408  000234  0E00               	movlw	0
  8409  000236  2027               	addwfc	(?_clust2sect+2)^0,w,c
  8410  000238  6FC4               	movwf	(f_write@sect+2)& (0+255),b
  8411  00023A  0E00               	movlw	0
  8412  00023C  2028               	addwfc	(?_clust2sect+3)^0,w,c
  8413  00023E  6FC5               	movwf	(f_write@sect+3)& (0+255),b
  8414                           
  8415                           ; BSR set to: 0
  8416                           ;tff.c: 1037: cc = btw / 512U;
  8417  000240  C0B1  F0B4         	movff	f_write@btw,??_f_write
  8418  000244  C0B2  F0B5         	movff	f_write@btw+1,??_f_write+1
  8419  000248  0E09               	movlw	9
  8420  00024A  6FB6               	movwf	(??_f_write+2)& (0+255),b
  8421  00024C                     u11575:
  8422  00024C  90D8               	bcf	status,0,c
  8423  00024E  33B5               	rrcf	(??_f_write+1)& (0+255),f,b
  8424  000250  33B4               	rrcf	??_f_write& (0+255),f,b
  8425  000252  2FB6               	decfsz	(??_f_write+2)& (0+255),f,b
  8426  000254  D7FB               	goto	u11575
  8427  000256  C0B4  F0C6         	movff	??_f_write,f_write@cc
  8428  00025A  C0B5  F0C7         	movff	??_f_write+1,f_write@cc+1
  8429                           
  8430                           ; BSR set to: 0
  8431                           ;tff.c: 1038: if (cc) {
  8432  00025E  51C6               	movf	f_write@cc& (0+255),w,b
  8433  000260  11C7               	iorwf	(f_write@cc+1)& (0+255),w,b
  8434  000262  B4D8               	btfsc	status,2,c
  8435  000264  D069               	goto	l10249
  8436                           
  8437                           ; BSR set to: 0
  8438                           ;tff.c: 1039: if (fp->csect + cc > fp->fs->csize)
  8439  000266  EE20 F003          	lfsr	2,3
  8440  00026A  51AE               	movf	f_write@fp& (0+255),w,b
  8441  00026C  26D9               	addwf	fsr2l,f,c
  8442  00026E  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8443  000270  22DA               	addwfc	fsr2h,f,c
  8444  000272  50DF               	movf	indf2,w,c
  8445  000274  6FB4               	movwf	??_f_write& (0+255),b
  8446  000276  51B4               	movf	??_f_write& (0+255),w,b
  8447  000278  25C6               	addwf	f_write@cc& (0+255),w,b
  8448  00027A  6FB5               	movwf	(??_f_write+1)& (0+255),b
  8449  00027C  0E00               	movlw	0
  8450  00027E  21C7               	addwfc	(f_write@cc+1)& (0+255),w,b
  8451  000280  6FB6               	movwf	(??_f_write+2)& (0+255),b
  8452  000282  EE20 F004          	lfsr	2,4
  8453  000286  51AE               	movf	f_write@fp& (0+255),w,b
  8454  000288  26D9               	addwf	fsr2l,f,c
  8455  00028A  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8456  00028C  22DA               	addwfc	fsr2h,f,c
  8457  00028E  EE10 F01D          	lfsr	1,29
  8458  000292  50DE               	movf	postinc2,w,c
  8459  000294  26E1               	addwf	fsr1l,f,c
  8460  000296  50DD               	movf	postdec2,w,c
  8461  000298  22E2               	addwfc	fsr1h,f,c
  8462  00029A  50E7               	movf	indf1,w,c
  8463  00029C  6FB7               	movwf	(??_f_write+3)& (0+255),b
  8464  00029E  6BB8               	clrf	(??_f_write+4)& (0+255),b
  8465  0002A0  51B5               	movf	(??_f_write+1)& (0+255),w,b
  8466  0002A2  5DB7               	subwf	(??_f_write+3)& (0+255),w,b
  8467  0002A4  51B6               	movf	(??_f_write+2)& (0+255),w,b
  8468  0002A6  59B8               	subwfb	(??_f_write+4)& (0+255),w,b
  8469  0002A8  B0D8               	btfsc	status,0,c
  8470  0002AA  D01C               	goto	l10241
  8471                           
  8472                           ; BSR set to: 0
  8473                           ;tff.c: 1040: cc = fp->fs->csize - fp->csect;
  8474  0002AC  EE20 F004          	lfsr	2,4
  8475  0002B0  51AE               	movf	f_write@fp& (0+255),w,b
  8476  0002B2  26D9               	addwf	fsr2l,f,c
  8477  0002B4  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8478  0002B6  22DA               	addwfc	fsr2h,f,c
  8479  0002B8  EE10 F01D          	lfsr	1,29
  8480  0002BC  50DE               	movf	postinc2,w,c
  8481  0002BE  26E1               	addwf	fsr1l,f,c
  8482  0002C0  50DD               	movf	postdec2,w,c
  8483  0002C2  22E2               	addwfc	fsr1h,f,c
  8484  0002C4  50E7               	movf	indf1,w,c
  8485  0002C6  6FB4               	movwf	??_f_write& (0+255),b
  8486  0002C8  EE20 F003          	lfsr	2,3
  8487  0002CC  51AE               	movf	f_write@fp& (0+255),w,b
  8488  0002CE  26D9               	addwf	fsr2l,f,c
  8489  0002D0  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8490  0002D2  22DA               	addwfc	fsr2h,f,c
  8491  0002D4  50DF               	movf	indf2,w,c
  8492  0002D6  6FB5               	movwf	(??_f_write+1)& (0+255),b
  8493  0002D8  51B5               	movf	(??_f_write+1)& (0+255),w,b
  8494  0002DA  5DB4               	subwf	??_f_write& (0+255),w,b
  8495  0002DC  6FC6               	movwf	f_write@cc& (0+255),b
  8496  0002DE  6BC7               	clrf	(f_write@cc+1)& (0+255),b
  8497  0002E0  A0D8               	btfss	status,0,c
  8498  0002E2  07C7               	decf	(f_write@cc+1)& (0+255),f,b
  8499  0002E4                     l10241:
  8500                           
  8501                           ; BSR set to: 0
  8502                           ;tff.c: 1041: if (disk_write(0, wbuff, sect, (BYTE)cc) != RES_OK)
  8503  0002E4  C0C1  F068         	movff	f_write@wbuff,disk_write@buff
  8504  0002E8  6B69               	clrf	(disk_write@buff+1)& (0+255),b
  8505  0002EA  C0C2  F06A         	movff	f_write@sect,disk_write@sector
  8506  0002EE  C0C3  F06B         	movff	f_write@sect+1,disk_write@sector+1
  8507  0002F2  C0C4  F06C         	movff	f_write@sect+2,disk_write@sector+2
  8508  0002F6  C0C5  F06D         	movff	f_write@sect+3,disk_write@sector+3
  8509  0002FA  C0C6  F06E         	movff	f_write@cc,disk_write@count
  8510  0002FE  0E00               	movlw	0
  8511  000300  EC48  F026         	call	_disk_write
  8512  000304  0900               	iorlw	0
  8513  000306  A4D8               	btfss	status,2,c
  8514  000308  D142               	goto	l10293
  8515                           
  8516                           ; BSR set to: 0
  8517                           ;tff.c: 1043: fp->csect += (BYTE)cc;
  8518  00030A  EE20 F003          	lfsr	2,3
  8519  00030E  51AE               	movf	f_write@fp& (0+255),w,b
  8520  000310  26D9               	addwf	fsr2l,f,c
  8521  000312  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8522  000314  22DA               	addwfc	fsr2h,f,c
  8523  000316  51C6               	movf	f_write@cc& (0+255),w,b
  8524  000318  26DF               	addwf	indf2,f,c
  8525                           
  8526                           ; BSR set to: 0
  8527                           ;tff.c: 1044: wcnt = 512U * cc;
  8528  00031A  C0C6  F0B4         	movff	f_write@cc,??_f_write
  8529  00031E  C0C7  F0B5         	movff	f_write@cc+1,??_f_write+1
  8530  000322  0E09               	movlw	9
  8531  000324                     u11615:
  8532  000324  90D8               	bcf	status,0,c
  8533  000326  37B4               	rlcf	??_f_write& (0+255),f,b
  8534  000328  37B5               	rlcf	(??_f_write+1)& (0+255),f,b
  8535  00032A  2EE8               	decfsz	wreg,f,c
  8536  00032C  D7FB               	goto	u11615
  8537  00032E  C0B4  F0CA         	movff	??_f_write,f_write@wcnt
  8538  000332  C0B5  F0CB         	movff	??_f_write+1,f_write@wcnt+1
  8539                           
  8540                           ;tff.c: 1045: continue;
  8541  000336  D0DA               	goto	l10275
  8542  000338                     l10249:
  8543                           
  8544                           ; BSR set to: 0
  8545                           ;tff.c: 1046: };tff.c: 1047: if (fp->fptr >= fp->fsize) {
  8546  000338  EE20 F00A          	lfsr	2,10
  8547  00033C  51AE               	movf	f_write@fp& (0+255),w,b
  8548  00033E  26D9               	addwf	fsr2l,f,c
  8549  000340  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8550  000342  22DA               	addwfc	fsr2h,f,c
  8551  000344  EE10 F006          	lfsr	1,6
  8552  000348  51AE               	movf	f_write@fp& (0+255),w,b
  8553  00034A  26E1               	addwf	fsr1l,f,c
  8554  00034C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8555  00034E  22E2               	addwfc	fsr1h,f,c
  8556  000350  50DE               	movf	postinc2,w,c
  8557  000352  5CE6               	subwf	postinc1,w,c
  8558  000354  50DE               	movf	postinc2,w,c
  8559  000356  58E6               	subwfb	postinc1,w,c
  8560  000358  50DE               	movf	postinc2,w,c
  8561  00035A  58E6               	subwfb	postinc1,w,c
  8562  00035C  50DE               	movf	postinc2,w,c
  8563  00035E  58E6               	subwfb	postinc1,w,c
  8564  000360  A0D8               	btfss	status,0,c
  8565  000362  D021               	goto	l10257
  8566                           
  8567                           ; BSR set to: 0
  8568                           ;tff.c: 1048: if (!move_window(0)) goto fw_error;
  8569  000364  0E00               	movlw	0
  8570  000366  6F73               	movwf	move_window@sector& (0+255),b
  8571  000368  0E00               	movlw	0
  8572  00036A  6F74               	movwf	(move_window@sector+1)& (0+255),b
  8573  00036C  0E00               	movlw	0
  8574  00036E  6F75               	movwf	(move_window@sector+2)& (0+255),b
  8575  000370  0E00               	movlw	0
  8576  000372  6F76               	movwf	(move_window@sector+3)& (0+255),b
  8577  000374  ECA8  F015         	call	_move_window	;wreg free
  8578  000378  0900               	iorlw	0
  8579  00037A  B4D8               	btfsc	status,2,c
  8580  00037C  D108               	goto	l10293
  8581                           
  8582                           ; BSR set to: 0
  8583                           ;tff.c: 1049: fp->fs->winsect = sect;
  8584  00037E  EE20 F004          	lfsr	2,4
  8585  000382  51AE               	movf	f_write@fp& (0+255),w,b
  8586  000384  26D9               	addwf	fsr2l,f,c
  8587  000386  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8588  000388  22DA               	addwfc	fsr2h,f,c
  8589  00038A  EE10 F004          	lfsr	1,4
  8590  00038E  50DE               	movf	postinc2,w,c
  8591  000390  26E1               	addwf	fsr1l,f,c
  8592  000392  50DD               	movf	postdec2,w,c
  8593  000394  22E2               	addwfc	fsr1h,f,c
  8594  000396  C0C2  FFE6         	movff	f_write@sect,postinc1
  8595  00039A  C0C3  FFE6         	movff	f_write@sect+1,postinc1
  8596  00039E  C0C4  FFE6         	movff	f_write@sect+2,postinc1
  8597  0003A2  C0C5  FFE6         	movff	f_write@sect+3,postinc1
  8598  0003A6                     l10257:
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;tff.c: 1050: };tff.c: 1051: fp->csect++;
  8602  0003A6  EE20 F003          	lfsr	2,3
  8603  0003AA  51AE               	movf	f_write@fp& (0+255),w,b
  8604  0003AC  26D9               	addwf	fsr2l,f,c
  8605  0003AE  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8606  0003B0  22DA               	addwfc	fsr2h,f,c
  8607  0003B2  2ADF               	incf	indf2,f,c
  8608  0003B4                     l10259:
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;tff.c: 1052: };tff.c: 1053: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
  8612  0003B4  EE20 F010          	lfsr	2,16
  8613  0003B8  51AE               	movf	f_write@fp& (0+255),w,b
  8614  0003BA  26D9               	addwf	fsr2l,f,c
  8615  0003BC  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8616  0003BE  22DA               	addwfc	fsr2h,f,c
  8617  0003C0  CFDE F025          	movff	postinc2,clust2sect@clust
  8618  0003C4  CFDD F026          	movff	postdec2,clust2sect@clust+1
  8619  0003C8  EC02  F01F         	call	_clust2sect	;wreg free
  8620  0003CC  0100               	movlb	0	; () banked
  8621  0003CE  EE20 F003          	lfsr	2,3
  8622  0003D2  51AE               	movf	f_write@fp& (0+255),w,b
  8623  0003D4  26D9               	addwf	fsr2l,f,c
  8624  0003D6  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8625  0003D8  22DA               	addwfc	fsr2h,f,c
  8626  0003DA  50DF               	movf	indf2,w,c
  8627  0003DC  6FB4               	movwf	??_f_write& (0+255),b
  8628  0003DE  51B4               	movf	??_f_write& (0+255),w,b
  8629  0003E0  2425               	addwf	?_clust2sect^0,w,c
  8630  0003E2  6FB5               	movwf	(??_f_write+1)& (0+255),b
  8631  0003E4  0E00               	movlw	0
  8632  0003E6  2026               	addwfc	(?_clust2sect+1)^0,w,c
  8633  0003E8  6FB6               	movwf	(??_f_write+2)& (0+255),b
  8634  0003EA  0E00               	movlw	0
  8635  0003EC  2027               	addwfc	(?_clust2sect+2)^0,w,c
  8636  0003EE  6FB7               	movwf	(??_f_write+3)& (0+255),b
  8637  0003F0  0E00               	movlw	0
  8638  0003F2  2028               	addwfc	(?_clust2sect+3)^0,w,c
  8639  0003F4  6FB8               	movwf	(??_f_write+4)& (0+255),b
  8640  0003F6  0EFF               	movlw	255
  8641  0003F8  25B5               	addwf	(??_f_write+1)& (0+255),w,b
  8642  0003FA  6FC2               	movwf	f_write@sect& (0+255),b
  8643  0003FC  0EFF               	movlw	255
  8644  0003FE  21B6               	addwfc	(??_f_write+2)& (0+255),w,b
  8645  000400  6FC3               	movwf	(f_write@sect+1)& (0+255),b
  8646  000402  0EFF               	movlw	255
  8647  000404  21B7               	addwfc	(??_f_write+3)& (0+255),w,b
  8648  000406  6FC4               	movwf	(f_write@sect+2)& (0+255),b
  8649  000408  0EFF               	movlw	255
  8650  00040A  21B8               	addwfc	(??_f_write+4)& (0+255),w,b
  8651  00040C  6FC5               	movwf	(f_write@sect+3)& (0+255),b
  8652                           
  8653                           ; BSR set to: 0
  8654                           ;tff.c: 1054: if (!move_window(sect)) goto fw_error;
  8655  00040E  C0C2  F073         	movff	f_write@sect,move_window@sector
  8656  000412  C0C3  F074         	movff	f_write@sect+1,move_window@sector+1
  8657  000416  C0C4  F075         	movff	f_write@sect+2,move_window@sector+2
  8658  00041A  C0C5  F076         	movff	f_write@sect+3,move_window@sector+3
  8659  00041E  ECA8  F015         	call	_move_window	;wreg free
  8660  000422  0900               	iorlw	0
  8661  000424  B4D8               	btfsc	status,2,c
  8662  000426  D0B3               	goto	l10293
  8663                           
  8664                           ; BSR set to: 0
  8665                           ;tff.c: 1055: wcnt = 512U - (fp->fptr % 512U);
  8666  000428  0EFF               	movlw	255
  8667  00042A  6FB4               	movwf	??_f_write& (0+255),b
  8668  00042C  0E01               	movlw	1
  8669  00042E  6FB5               	movwf	(??_f_write+1)& (0+255),b
  8670  000430  EE20 F006          	lfsr	2,6
  8671  000434  51AE               	movf	f_write@fp& (0+255),w,b
  8672  000436  26D9               	addwf	fsr2l,f,c
  8673  000438  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8674  00043A  22DA               	addwfc	fsr2h,f,c
  8675  00043C  CFDE F0B6          	movff	postinc2,??_f_write+2
  8676  000440  CFDD F0B7          	movff	postdec2,??_f_write+3
  8677  000444  51B4               	movf	??_f_write& (0+255),w,b
  8678  000446  17B6               	andwf	(??_f_write+2)& (0+255),f,b
  8679  000448  51B5               	movf	(??_f_write+1)& (0+255),w,b
  8680  00044A  17B7               	andwf	(??_f_write+3)& (0+255),f,b
  8681  00044C  51B6               	movf	(??_f_write+2)& (0+255),w,b
  8682  00044E  0800               	sublw	0
  8683  000450  6FCA               	movwf	f_write@wcnt& (0+255),b
  8684  000452  51B7               	movf	(??_f_write+3)& (0+255),w,b
  8685  000454  A0D8               	btfss	status,0,c
  8686  000456  2AE8               	incf	wreg,f,c
  8687  000458  0802               	sublw	2
  8688  00045A  6FCB               	movwf	(f_write@wcnt+1)& (0+255),b
  8689                           
  8690                           ; BSR set to: 0
  8691                           ;tff.c: 1056: if (wcnt > btw) wcnt = btw;
  8692  00045C  51CA               	movf	f_write@wcnt& (0+255),w,b
  8693  00045E  5DB1               	subwf	f_write@btw& (0+255),w,b
  8694  000460  51CB               	movf	(f_write@wcnt+1)& (0+255),w,b
  8695  000462  59B2               	subwfb	(f_write@btw+1)& (0+255),w,b
  8696  000464  B0D8               	btfsc	status,0,c
  8697  000466  D004               	goto	l10271
  8698                           
  8699                           ; BSR set to: 0
  8700  000468  C0B1  F0CA         	movff	f_write@btw,f_write@wcnt
  8701  00046C  C0B2  F0CB         	movff	f_write@btw+1,f_write@wcnt+1
  8702  000470                     l10271:
  8703                           
  8704                           ; BSR set to: 0
  8705                           ;tff.c: 1057: memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
  8706  000470  0EFF               	movlw	255
  8707  000472  6FB4               	movwf	??_f_write& (0+255),b
  8708  000474  0E01               	movlw	1
  8709  000476  6FB5               	movwf	(??_f_write+1)& (0+255),b
  8710  000478  EE20 F006          	lfsr	2,6
  8711  00047C  51AE               	movf	f_write@fp& (0+255),w,b
  8712  00047E  26D9               	addwf	fsr2l,f,c
  8713  000480  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8714  000482  22DA               	addwfc	fsr2h,f,c
  8715  000484  CFDE F0B6          	movff	postinc2,??_f_write+2
  8716  000488  CFDD F0B7          	movff	postdec2,??_f_write+3
  8717  00048C  51B4               	movf	??_f_write& (0+255),w,b
  8718  00048E  17B6               	andwf	(??_f_write+2)& (0+255),f,b
  8719  000490  51B5               	movf	(??_f_write+1)& (0+255),w,b
  8720  000492  17B7               	andwf	(??_f_write+3)& (0+255),f,b
  8721  000494  EE20 F004          	lfsr	2,4
  8722  000498  51AE               	movf	f_write@fp& (0+255),w,b
  8723  00049A  26D9               	addwf	fsr2l,f,c
  8724  00049C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8725  00049E  22DA               	addwfc	fsr2h,f,c
  8726  0004A0  CFDE F0B8          	movff	postinc2,??_f_write+4
  8727  0004A4  CFDD F0B9          	movff	postdec2,??_f_write+5
  8728  0004A8  51B6               	movf	(??_f_write+2)& (0+255),w,b
  8729  0004AA  27B8               	addwf	(??_f_write+4)& (0+255),f,b
  8730  0004AC  51B7               	movf	(??_f_write+3)& (0+255),w,b
  8731  0004AE  23B9               	addwfc	(??_f_write+5)& (0+255),f,b
  8732  0004B0  0E20               	movlw	32
  8733  0004B2  25B8               	addwf	(??_f_write+4)& (0+255),w,b
  8734  0004B4  6E19               	movwf	memcpy@d1^0,c
  8735  0004B6  0E00               	movlw	0
  8736  0004B8  21B9               	addwfc	(??_f_write+5)& (0+255),w,b
  8737  0004BA  6E1A               	movwf	(memcpy@d1+1)^0,c
  8738  0004BC  C0C1  F01B         	movff	f_write@wbuff,memcpy@s1
  8739  0004C0  6A1C               	clrf	(memcpy@s1+1)^0,c
  8740  0004C2  C0CA  F01D         	movff	f_write@wcnt,memcpy@n
  8741  0004C6  C0CB  F01E         	movff	f_write@wcnt+1,memcpy@n+1
  8742  0004CA  EC43  F027         	call	_memcpy	;wreg free
  8743                           
  8744                           ;tff.c: 1058: fp->fs->winflag = 1;
  8745  0004CE  0100               	movlb	0	; () banked
  8746  0004D0  EE20 F004          	lfsr	2,4
  8747  0004D4  51AE               	movf	f_write@fp& (0+255),w,b
  8748  0004D6  26D9               	addwf	fsr2l,f,c
  8749  0004D8  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8750  0004DA  22DA               	addwfc	fsr2h,f,c
  8751  0004DC  EE10 F01F          	lfsr	1,31
  8752  0004E0  50DE               	movf	postinc2,w,c
  8753  0004E2  26E1               	addwf	fsr1l,f,c
  8754  0004E4  50DD               	movf	postdec2,w,c
  8755  0004E6  22E2               	addwfc	fsr1h,f,c
  8756  0004E8  0E01               	movlw	1
  8757  0004EA  6EE7               	movwf	indf1,c
  8758  0004EC                     l10275:
  8759                           
  8760                           ; BSR set to: 0
  8761  0004EC  51CA               	movf	f_write@wcnt& (0+255),w,b
  8762  0004EE  27C1               	addwf	f_write@wbuff& (0+255),f,b
  8763                           
  8764                           ; BSR set to: 0
  8765  0004F0  EE20 F006          	lfsr	2,6
  8766  0004F4  51AE               	movf	f_write@fp& (0+255),w,b
  8767  0004F6  26D9               	addwf	fsr2l,f,c
  8768  0004F8  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8769  0004FA  22DA               	addwfc	fsr2h,f,c
  8770  0004FC  51CA               	movf	f_write@wcnt& (0+255),w,b
  8771  0004FE  26DE               	addwf	postinc2,f,c
  8772  000500  51CB               	movf	(f_write@wcnt+1)& (0+255),w,b
  8773  000502  22DE               	addwfc	postinc2,f,c
  8774  000504  0E00               	movlw	0
  8775  000506  22DE               	addwfc	postinc2,f,c
  8776  000508  22DE               	addwfc	postinc2,f,c
  8777                           
  8778                           ; BSR set to: 0
  8779  00050A  51B3               	movf	f_write@bw& (0+255),w,b
  8780  00050C  6ED9               	movwf	fsr2l,c
  8781  00050E  6ADA               	clrf	fsr2h,c
  8782  000510  51CA               	movf	f_write@wcnt& (0+255),w,b
  8783  000512  26DE               	addwf	postinc2,f,c
  8784  000514  51CB               	movf	(f_write@wcnt+1)& (0+255),w,b
  8785  000516  22DD               	addwfc	postdec2,f,c
  8786                           
  8787                           ; BSR set to: 0
  8788  000518  51CA               	movf	f_write@wcnt& (0+255),w,b
  8789  00051A  5FB1               	subwf	f_write@btw& (0+255),f,b
  8790  00051C  51CB               	movf	(f_write@wcnt+1)& (0+255),w,b
  8791  00051E  5BB2               	subwfb	(f_write@btw+1)& (0+255),f,b
  8792  000520                     l10283:
  8793                           
  8794                           ; BSR set to: 0
  8795  000520  51B1               	movf	f_write@btw& (0+255),w,b
  8796  000522  11B2               	iorwf	(f_write@btw+1)& (0+255),w,b
  8797  000524  A4D8               	btfss	status,2,c
  8798  000526  D5D2               	goto	l10207
  8799  000528                     u11660:
  8800                           
  8801                           ; BSR set to: 0
  8802                           ;tff.c: 1059: };tff.c: 1061: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  8803  000528  EE20 F006          	lfsr	2,6
  8804  00052C  51AE               	movf	f_write@fp& (0+255),w,b
  8805  00052E  26D9               	addwf	fsr2l,f,c
  8806  000530  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8807  000532  22DA               	addwfc	fsr2h,f,c
  8808  000534  EE10 F00A          	lfsr	1,10
  8809  000538  51AE               	movf	f_write@fp& (0+255),w,b
  8810  00053A  26E1               	addwf	fsr1l,f,c
  8811  00053C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8812  00053E  22E2               	addwfc	fsr1h,f,c
  8813  000540  50DE               	movf	postinc2,w,c
  8814  000542  5CE6               	subwf	postinc1,w,c
  8815  000544  50DE               	movf	postinc2,w,c
  8816  000546  58E6               	subwfb	postinc1,w,c
  8817  000548  50DE               	movf	postinc2,w,c
  8818  00054A  58E6               	subwfb	postinc1,w,c
  8819  00054C  50DE               	movf	postinc2,w,c
  8820  00054E  58E6               	subwfb	postinc1,w,c
  8821  000550  B0D8               	btfsc	status,0,c
  8822  000552  D014               	goto	l10289
  8823                           
  8824                           ; BSR set to: 0
  8825  000554  EE20 F006          	lfsr	2,6
  8826  000558  51AE               	movf	f_write@fp& (0+255),w,b
  8827  00055A  26D9               	addwf	fsr2l,f,c
  8828  00055C  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8829  00055E  22DA               	addwfc	fsr2h,f,c
  8830  000560  EE10 F00A          	lfsr	1,10
  8831  000564  51AE               	movf	f_write@fp& (0+255),w,b
  8832  000566  26E1               	addwf	fsr1l,f,c
  8833  000568  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8834  00056A  22E2               	addwfc	fsr1h,f,c
  8835  00056C  CFDE FFE6          	movff	postinc2,postinc1
  8836  000570  CFDE FFE6          	movff	postinc2,postinc1
  8837  000574  CFDE FFE6          	movff	postinc2,postinc1
  8838  000578  CFDE FFE6          	movff	postinc2,postinc1
  8839  00057C                     l10289:
  8840                           
  8841                           ; BSR set to: 0
  8842                           ;tff.c: 1062: fp->flag |= 0x20;
  8843  00057C  EE20 F002          	lfsr	2,2
  8844  000580  51AE               	movf	f_write@fp& (0+255),w,b
  8845  000582  26D9               	addwf	fsr2l,f,c
  8846  000584  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8847  000586  22DA               	addwfc	fsr2h,f,c
  8848  000588  0E00               	movlw	0
  8849  00058A  8ADB               	bsf	plusw2,5,c
  8850  00058C  0012               	return	
  8851  00058E                     l10293:
  8852                           
  8853                           ; BSR set to: 0
  8854                           ;tff.c: 1066: fp->flag |= 0x80;
  8855  00058E  EE20 F002          	lfsr	2,2
  8856  000592  51AE               	movf	f_write@fp& (0+255),w,b
  8857  000594  26D9               	addwf	fsr2l,f,c
  8858  000596  51AF               	movf	(f_write@fp+1)& (0+255),w,b
  8859  000598  22DA               	addwfc	fsr2h,f,c
  8860  00059A  0E00               	movlw	0
  8861  00059C  8EDB               	bsf	plusw2,7,c
  8862                           
  8863                           ; BSR set to: 0
  8864  00059E  0012               	return		;funcret
  8865  0005A0                     __end_of_f_write:
  8866                           	callstack 0
  8867                           
  8868 ;; *************** function ___llmod *****************
  8869 ;; Defined at:
  8870 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\llmod.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;  dividend        4   24[COMRAM] unsigned long 
  8873 ;;  divisor         4   28[COMRAM] unsigned long 
  8874 ;; Auto vars:     Size  Location     Type
  8875 ;;  counter         1   32[COMRAM] unsigned char 
  8876 ;; Return value:  Size  Location     Type
  8877 ;;                  4   24[COMRAM] unsigned long 
  8878 ;; Registers used:
  8879 ;;		wreg, status,2, status,0
  8880 ;; Tracked objects:
  8881 ;;		On entry : 0/0
  8882 ;;		On exit  : 0/0
  8883 ;;		Unchanged: 0/0
  8884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8885 ;;      Params:         8       0       0       0       0       0       0       0       0
  8886 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8887 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8888 ;;      Totals:         9       0       0       0       0       0       0       0       0
  8889 ;;Total ram usage:        9 bytes
  8890 ;; Hardware stack levels used:    1
  8891 ;; Hardware stack levels required when called:    3
  8892 ;; This function calls:
  8893 ;;		Nothing
  8894 ;; This function is called by:
  8895 ;;		_fprintf
  8896 ;;		_ultoa
  8897 ;; This function uses a non-reentrant model
  8898 ;;
  8899                           
  8900                           	psect	text48
  8901  0049B4                     __ptext48:
  8902                           	callstack 0
  8903  0049B4                     ___llmod:
  8904                           	callstack 22
  8905                           
  8906                           ; BSR set to: 0
  8907                           ;incstack = 0
  8908  0049B4  501D               	movf	___llmod@divisor^0,w,c
  8909  0049B6  101E               	iorwf	(___llmod@divisor+1)^0,w,c
  8910  0049B8  101F               	iorwf	(___llmod@divisor+2)^0,w,c
  8911  0049BA  1020               	iorwf	(___llmod@divisor+3)^0,w,c
  8912  0049BC  B4D8               	btfsc	status,2,c
  8913  0049BE  D024               	goto	l1962
  8914  0049C0  0E01               	movlw	1
  8915  0049C2  6E21               	movwf	___llmod@counter^0,c
  8916  0049C4  D006               	goto	l10969
  8917  0049C6                     l10967:
  8918  0049C6  90D8               	bcf	status,0,c
  8919  0049C8  361D               	rlcf	___llmod@divisor^0,f,c
  8920  0049CA  361E               	rlcf	(___llmod@divisor+1)^0,f,c
  8921  0049CC  361F               	rlcf	(___llmod@divisor+2)^0,f,c
  8922  0049CE  3620               	rlcf	(___llmod@divisor+3)^0,f,c
  8923  0049D0  2A21               	incf	___llmod@counter^0,f,c
  8924  0049D2                     l10969:
  8925  0049D2  AE20               	btfss	(___llmod@divisor+3)^0,7,c
  8926  0049D4  D7F8               	goto	l10967
  8927  0049D6                     u12800:
  8928  0049D6  501D               	movf	___llmod@divisor^0,w,c
  8929  0049D8  5C19               	subwf	___llmod@dividend^0,w,c
  8930  0049DA  501E               	movf	(___llmod@divisor+1)^0,w,c
  8931  0049DC  581A               	subwfb	(___llmod@dividend+1)^0,w,c
  8932  0049DE  501F               	movf	(___llmod@divisor+2)^0,w,c
  8933  0049E0  581B               	subwfb	(___llmod@dividend+2)^0,w,c
  8934  0049E2  5020               	movf	(___llmod@divisor+3)^0,w,c
  8935  0049E4  581C               	subwfb	(___llmod@dividend+3)^0,w,c
  8936  0049E6  A0D8               	btfss	status,0,c
  8937  0049E8  D008               	goto	l10975
  8938  0049EA  501D               	movf	___llmod@divisor^0,w,c
  8939  0049EC  5E19               	subwf	___llmod@dividend^0,f,c
  8940  0049EE  501E               	movf	(___llmod@divisor+1)^0,w,c
  8941  0049F0  5A1A               	subwfb	(___llmod@dividend+1)^0,f,c
  8942  0049F2  501F               	movf	(___llmod@divisor+2)^0,w,c
  8943  0049F4  5A1B               	subwfb	(___llmod@dividend+2)^0,f,c
  8944  0049F6  5020               	movf	(___llmod@divisor+3)^0,w,c
  8945  0049F8  5A1C               	subwfb	(___llmod@dividend+3)^0,f,c
  8946  0049FA                     l10975:
  8947  0049FA  90D8               	bcf	status,0,c
  8948  0049FC  3220               	rrcf	(___llmod@divisor+3)^0,f,c
  8949  0049FE  321F               	rrcf	(___llmod@divisor+2)^0,f,c
  8950  004A00  321E               	rrcf	(___llmod@divisor+1)^0,f,c
  8951  004A02  321D               	rrcf	___llmod@divisor^0,f,c
  8952  004A04  2E21               	decfsz	___llmod@counter^0,f,c
  8953  004A06  D7E7               	goto	u12800
  8954  004A08                     l1962:
  8955  004A08  C019  F019         	movff	___llmod@dividend,?___llmod
  8956  004A0C  C01A  F01A         	movff	___llmod@dividend+1,?___llmod+1
  8957  004A10  C01B  F01B         	movff	___llmod@dividend+2,?___llmod+2
  8958  004A14  C01C  F01C         	movff	___llmod@dividend+3,?___llmod+3
  8959  004A18  0012               	return		;funcret
  8960  004A1A                     __end_of___llmod:
  8961                           	callstack 0
  8962                           
  8963 ;; *************** function _f_open *****************
  8964 ;; Defined at:
  8965 ;;		line 833 in file "bibliotecas/tff.c"
  8966 ;; Parameters:    Size  Location     Type
  8967 ;;  fp              2   96[BANK0 ] PTR struct _FIL
  8968 ;;		 -> fil(28), 
  8969 ;;  path            2   98[BANK0 ] PTR const unsigned char 
  8970 ;;		 -> STR_22(13), filename(20), 
  8971 ;;  mode            1  100[BANK0 ] unsigned char 
  8972 ;; Auto vars:     Size  Location     Type
  8973 ;;  dw              4  119[BANK0 ] unsigned long 
  8974 ;;  rs              2  117[BANK0 ] unsigned short 
  8975 ;;  dj             14  126[BANK0 ] struct _DIR_E
  8976 ;;  fn             12  105[BANK0 ] unsigned char [12]
  8977 ;;  dir             2  124[BANK0 ] PTR unsigned char 
  8978 ;;		 -> NULL(0), fs(544), 
  8979 ;;  res             1  123[BANK0 ] enum E155
  8980 ;; Return value:  Size  Location     Type
  8981 ;;                  1    wreg      enum E3237
  8982 ;; Registers used:
  8983 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8984 ;; Tracked objects:
  8985 ;;		On entry : 3F/0
  8986 ;;		On exit  : 3F/0
  8987 ;;		Unchanged: 0/0
  8988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8989 ;;      Params:         0       5       0       0       0       0       0       0       0
  8990 ;;      Locals:         0      35       0       0       0       0       0       0       0
  8991 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8992 ;;      Totals:         0      44       0       0       0       0       0       0       0
  8993 ;;Total ram usage:       44 bytes
  8994 ;; Hardware stack levels used:    1
  8995 ;; Hardware stack levels required when called:   12
  8996 ;; This function calls:
  8997 ;;		_auto_mount
  8998 ;;		_get_fattime
  8999 ;;		_memcpy
  9000 ;;		_memset
  9001 ;;		_move_window
  9002 ;;		_remove_chain
  9003 ;;		_reserve_direntry
  9004 ;;		_trace_path
  9005 ;; This function is called by:
  9006 ;;		_escrita_sdcard
  9007 ;; This function uses a non-reentrant model
  9008 ;;
  9009                           
  9010                           	psect	text49
  9011  0012F4                     __ptext49:
  9012                           	callstack 0
  9013  0012F4                     _f_open:
  9014                           	callstack 14
  9015                           
  9016                           ; BSR set to: 0
  9017                           ;tff.c: 839: FRESULT res;;tff.c: 840: DIR_E dj;;tff.c: 841: BYTE *dir;;tff.c: 842: char 
      +                          fn[8+3+1];;tff.c: 845: fp->fs = (0);
  9018                           
  9019                           ;incstack = 0
  9020  0012F4  EE20 F004          	lfsr	2,4
  9021  0012F8  51C0               	movf	f_open@fp& (0+255),w,b
  9022  0012FA  26D9               	addwf	fsr2l,f,c
  9023  0012FC  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9024  0012FE  22DA               	addwfc	fsr2h,f,c
  9025  001300  0E00               	movlw	0
  9026  001302  6EDE               	movwf	postinc2,c
  9027  001304  0E00               	movlw	0
  9028  001306  6EDD               	movwf	postdec2,c
  9029                           
  9030                           ; BSR set to: 0
  9031                           ;tff.c: 847: mode &= (0x01|0x02|0x08|0x10|0x04);
  9032  001308  0E1F               	movlw	31
  9033  00130A  17C4               	andwf	f_open@mode& (0+255),f,b
  9034                           
  9035                           ; BSR set to: 0
  9036                           ;tff.c: 848: res = auto_mount(&path, (BYTE)(mode & (0x02|0x08|0x10|0x04)));
  9037  00130C  0EC2               	movlw	low f_open@path
  9038  00130E  6F7B               	movwf	auto_mount@path& (0+255),b
  9039  001310  51C4               	movf	f_open@mode& (0+255),w,b
  9040  001312  0B1E               	andlw	30
  9041  001314  6F7C               	movwf	auto_mount@chk_wp& (0+255),b
  9042  001316  ECD0  F002         	call	_auto_mount	;wreg free
  9043  00131A  0100               	movlb	0	; () banked
  9044  00131C  6FDB               	movwf	f_open@res& (0+255),b
  9045                           
  9046                           ; BSR set to: 0
  9047                           ;tff.c: 853: if (res != FR_OK) return res;
  9048  00131E  51DB               	movf	f_open@res& (0+255),w,b
  9049  001320  B4D8               	btfsc	status,2,c
  9050  001322  D002               	goto	l11007
  9051  001324                     u12820:
  9052                           
  9053                           ; BSR set to: 0
  9054  001324  51DB               	movf	f_open@res& (0+255),w,b
  9055  001326  0012               	return	
  9056  001328                     l11007:
  9057                           
  9058                           ; BSR set to: 0
  9059                           ;tff.c: 854: res = trace_path(&dj, fn, path, &dir);
  9060  001328  0EDE               	movlw	low f_open@dj
  9061  00132A  6FA8               	movwf	trace_path@dj& (0+255),b
  9062  00132C  0EC9               	movlw	low f_open@fn
  9063  00132E  6FA9               	movwf	trace_path@fn& (0+255),b
  9064  001330  C0C2  F0AA         	movff	f_open@path,trace_path@path
  9065  001334  C0C3  F0AB         	movff	f_open@path+1,trace_path@path+1
  9066  001338  0EDC               	movlw	low f_open@dir
  9067  00133A  6FAC               	movwf	trace_path@dir& (0+255),b
  9068  00133C  EC93  F00C         	call	_trace_path	;wreg free
  9069  001340  6FDB               	movwf	f_open@res& (0+255),b
  9070                           
  9071                           ; BSR set to: 0
  9072                           ;tff.c: 858: if (mode & (0x08|0x10|0x04)) {
  9073  001342  C0C4  F0C5         	movff	f_open@mode,??_f_open
  9074  001346  0E1C               	movlw	28
  9075  001348  17C5               	andwf	??_f_open& (0+255),f,b
  9076  00134A  B4D8               	btfsc	status,2,c
  9077  00134C  D0DD               	goto	l11069
  9078                           
  9079                           ; BSR set to: 0
  9080                           ;tff.c: 859: CLUST rs;;tff.c: 860: DWORD dw;;tff.c: 861: if (res != FR_OK) {
  9081  00134E  51DB               	movf	f_open@res& (0+255),w,b
  9082  001350  B4D8               	btfsc	status,2,c
  9083  001352  D034               	goto	l987
  9084                           
  9085                           ; BSR set to: 0
  9086                           ;tff.c: 862: if (res != FR_NO_FILE) return res;
  9087  001354  0E02               	movlw	2
  9088  001356  19DB               	xorwf	f_open@res& (0+255),w,b
  9089  001358  A4D8               	btfss	status,2,c
  9090  00135A  D7E4               	goto	u12820
  9091                           
  9092                           ; BSR set to: 0
  9093                           ;tff.c: 863: res = reserve_direntry(&dj, &dir);
  9094  00135C  0EDE               	movlw	low f_open@dj
  9095  00135E  6FAE               	movwf	reserve_direntry@dj& (0+255),b
  9096  001360  0EDC               	movlw	low f_open@dir
  9097  001362  6FAF               	movwf	reserve_direntry@dir& (0+255),b
  9098  001364  ECD2  F00D         	call	_reserve_direntry	;wreg free
  9099  001368  6FDB               	movwf	f_open@res& (0+255),b
  9100                           
  9101                           ; BSR set to: 0
  9102                           ;tff.c: 864: if (res != FR_OK) return res;
  9103  00136A  51DB               	movf	f_open@res& (0+255),w,b
  9104  00136C  A4D8               	btfss	status,2,c
  9105  00136E  D7DA               	goto	u12820
  9106                           
  9107                           ; BSR set to: 0
  9108                           ;tff.c: 865: memset(dir, 0, 32);
  9109  001370  C0DC  F019         	movff	f_open@dir,memset@p1
  9110  001374  C0DD  F01A         	movff	f_open@dir+1,memset@p1+1
  9111  001378  0E00               	movlw	0
  9112  00137A  6E1C               	movwf	(memset@c+1)^0,c
  9113  00137C  0E00               	movlw	0
  9114  00137E  6E1B               	movwf	memset@c^0,c
  9115  001380  0E00               	movlw	0
  9116  001382  6E1E               	movwf	(memset@n+1)^0,c
  9117  001384  0E20               	movlw	32
  9118  001386  6E1D               	movwf	memset@n^0,c
  9119  001388  EC71  F028         	call	_memset	;wreg free
  9120                           
  9121                           ;tff.c: 866: memcpy(&dir[0], fn, 8+3);
  9122  00138C  C0DC  F019         	movff	f_open@dir,memcpy@d1
  9123  001390  C0DD  F01A         	movff	f_open@dir+1,memcpy@d1+1
  9124  001394  0EC9               	movlw	low f_open@fn
  9125  001396  6E1B               	movwf	memcpy@s1^0,c
  9126  001398  6A1C               	clrf	(memcpy@s1+1)^0,c
  9127  00139A  0E00               	movlw	0
  9128  00139C  6E1E               	movwf	(memcpy@n+1)^0,c
  9129  00139E  0E0B               	movlw	11
  9130  0013A0  6E1D               	movwf	memcpy@n^0,c
  9131  0013A2  EC43  F027         	call	_memcpy	;wreg free
  9132                           
  9133                           ;tff.c: 867: dir[12] = fn[11];
  9134  0013A6  0100               	movlb	0	; () banked
  9135  0013A8  EE20 F00C          	lfsr	2,12
  9136  0013AC  51DC               	movf	f_open@dir& (0+255),w,b
  9137  0013AE  26D9               	addwf	fsr2l,f,c
  9138  0013B0  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9139  0013B2  22DA               	addwfc	fsr2h,f,c
  9140  0013B4  C0D4  FFDF         	movff	f_open@fn+11,indf2
  9141                           
  9142                           ; BSR set to: 0
  9143                           ;tff.c: 868: mode |= 0x08;
  9144  0013B8  87C4               	bsf	f_open@mode& (0+255),3,b
  9145                           
  9146                           ;tff.c: 869: }
  9147  0013BA  D07A               	goto	l11057
  9148  0013BC                     l987:
  9149                           
  9150                           ; BSR set to: 0
  9151                           ;tff.c: 870: else {;tff.c: 871: if (mode & 0x04)
  9152  0013BC  A5C4               	btfss	f_open@mode& (0+255),2,b
  9153  0013BE  D002               	goto	l11037
  9154                           
  9155                           ; BSR set to: 0
  9156                           ;tff.c: 872: return FR_EXIST;
  9157  0013C0  0E07               	movlw	7
  9158  0013C2  0012               	return	
  9159  0013C4                     l11037:
  9160                           
  9161                           ; BSR set to: 0
  9162                           ;tff.c: 873: if (!dir || (dir[11] & (0x01|0x10)))
  9163  0013C4  51DC               	movf	f_open@dir& (0+255),w,b
  9164  0013C6  11DD               	iorwf	(f_open@dir+1)& (0+255),w,b
  9165  0013C8  B4D8               	btfsc	status,2,c
  9166  0013CA  D00C               	goto	u12890
  9167                           
  9168                           ; BSR set to: 0
  9169  0013CC  EE20 F00B          	lfsr	2,11
  9170  0013D0  51DC               	movf	f_open@dir& (0+255),w,b
  9171  0013D2  26D9               	addwf	fsr2l,f,c
  9172  0013D4  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9173  0013D6  22DA               	addwfc	fsr2h,f,c
  9174  0013D8  50DF               	movf	indf2,w,c
  9175  0013DA  6FC5               	movwf	??_f_open& (0+255),b
  9176  0013DC  0E11               	movlw	17
  9177  0013DE  17C5               	andwf	??_f_open& (0+255),f,b
  9178  0013E0  B4D8               	btfsc	status,2,c
  9179  0013E2  D002               	goto	l992
  9180  0013E4                     u12890:
  9181                           
  9182                           ; BSR set to: 0
  9183                           ;tff.c: 874: return FR_DENIED;
  9184  0013E4  0E06               	movlw	6
  9185  0013E6  0012               	return	
  9186  0013E8                     l992:
  9187                           
  9188                           ; BSR set to: 0
  9189                           ;tff.c: 875: if (mode & 0x08) {
  9190  0013E8  A7C4               	btfss	f_open@mode& (0+255),3,b
  9191  0013EA  D062               	goto	l11057
  9192                           
  9193                           ; BSR set to: 0
  9194                           ;tff.c: 880: rs = (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  9195  0013EC  EE20 F01A          	lfsr	2,26
  9196  0013F0  51DC               	movf	f_open@dir& (0+255),w,b
  9197  0013F2  26D9               	addwf	fsr2l,f,c
  9198  0013F4  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9199  0013F6  22DA               	addwfc	fsr2h,f,c
  9200  0013F8  CFDE F0D5          	movff	postinc2,f_open@rs
  9201  0013FC  CFDD F0D6          	movff	postdec2,f_open@rs+1
  9202                           
  9203                           ;tff.c: 882: *(WORD*)(BYTE*)(&dir[26])=(WORD)(0);
  9204  001400  EE20 F01A          	lfsr	2,26
  9205  001404  51DC               	movf	f_open@dir& (0+255),w,b
  9206  001406  26D9               	addwf	fsr2l,f,c
  9207  001408  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9208  00140A  22DA               	addwfc	fsr2h,f,c
  9209  00140C  0E00               	movlw	0
  9210  00140E  6EDE               	movwf	postinc2,c
  9211  001410  0E00               	movlw	0
  9212  001412  6EDD               	movwf	postdec2,c
  9213                           
  9214                           ;tff.c: 883: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(0);
  9215  001414  EE20 F01C          	lfsr	2,28
  9216  001418  51DC               	movf	f_open@dir& (0+255),w,b
  9217  00141A  26D9               	addwf	fsr2l,f,c
  9218  00141C  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9219  00141E  22DA               	addwfc	fsr2h,f,c
  9220  001420  6ADE               	clrf	postinc2,c
  9221  001422  6ADE               	clrf	postinc2,c
  9222  001424  6ADE               	clrf	postinc2,c
  9223  001426  6ADD               	clrf	postdec2,c
  9224                           
  9225                           ;tff.c: 884: dj.fs->winflag = 1;
  9226  001428  EE20 F01F          	lfsr	2,31
  9227  00142C  51E2               	movf	(f_open@dj+4)& (0+255),w,b
  9228  00142E  26D9               	addwf	fsr2l,f,c
  9229  001430  51E3               	movf	(f_open@dj+5)& (0+255),w,b
  9230  001432  22DA               	addwfc	fsr2h,f,c
  9231  001434  0E01               	movlw	1
  9232  001436  6EDF               	movwf	indf2,c
  9233                           
  9234                           ;tff.c: 885: dw = dj.fs->winsect;
  9235  001438  EE20 F004          	lfsr	2,4
  9236  00143C  51E2               	movf	(f_open@dj+4)& (0+255),w,b
  9237  00143E  26D9               	addwf	fsr2l,f,c
  9238  001440  51E3               	movf	(f_open@dj+5)& (0+255),w,b
  9239  001442  22DA               	addwfc	fsr2h,f,c
  9240  001444  CFDE F0D7          	movff	postinc2,f_open@dw
  9241  001448  CFDE F0D8          	movff	postinc2,f_open@dw+1
  9242  00144C  CFDE F0D9          	movff	postinc2,f_open@dw+2
  9243  001450  CFDE F0DA          	movff	postinc2,f_open@dw+3
  9244                           
  9245                           ; BSR set to: 0
  9246                           ;tff.c: 886: if (!remove_chain(rs) || !move_window(dw))
  9247  001454  C0D5  F0A0         	movff	f_open@rs,remove_chain@clust
  9248  001458  C0D6  F0A1         	movff	f_open@rs+1,remove_chain@clust+1
  9249  00145C  EC54  F020         	call	_remove_chain	;wreg free
  9250  001460  0900               	iorlw	0
  9251  001462  B4D8               	btfsc	status,2,c
  9252  001464  D00D               	goto	u12920
  9253                           
  9254                           ; BSR set to: 0
  9255  001466  C0D7  F073         	movff	f_open@dw,move_window@sector
  9256  00146A  C0D8  F074         	movff	f_open@dw+1,move_window@sector+1
  9257  00146E  C0D9  F075         	movff	f_open@dw+2,move_window@sector+2
  9258  001472  C0DA  F076         	movff	f_open@dw+3,move_window@sector+3
  9259  001476  ECA8  F015         	call	_move_window	;wreg free
  9260  00147A  0900               	iorlw	0
  9261  00147C  A4D8               	btfss	status,2,c
  9262  00147E  D002               	goto	l11055
  9263  001480                     u12920:
  9264                           
  9265                           ; BSR set to: 0
  9266                           ;tff.c: 887: return FR_RW_ERROR;
  9267  001480  0E08               	movlw	8
  9268  001482  0012               	return	
  9269  001484                     l11055:
  9270                           
  9271                           ; BSR set to: 0
  9272                           ;tff.c: 888: dj.fs->last_clust = rs - 1;
  9273  001484  0EFF               	movlw	255
  9274  001486  6FC5               	movwf	??_f_open& (0+255),b
  9275  001488  0EFF               	movlw	255
  9276  00148A  6FC6               	movwf	(??_f_open+1)& (0+255),b
  9277  00148C  C0D5  F0C7         	movff	f_open@rs,??_f_open+2
  9278  001490  C0D6  F0C8         	movff	f_open@rs+1,??_f_open+3
  9279  001494  51C5               	movf	??_f_open& (0+255),w,b
  9280  001496  27C7               	addwf	(??_f_open+2)& (0+255),f,b
  9281  001498  51C6               	movf	(??_f_open+1)& (0+255),w,b
  9282  00149A  23C8               	addwfc	(??_f_open+3)& (0+255),f,b
  9283  00149C  EE20 F018          	lfsr	2,24
  9284  0014A0  51E2               	movf	(f_open@dj+4)& (0+255),w,b
  9285  0014A2  26D9               	addwf	fsr2l,f,c
  9286  0014A4  51E3               	movf	(f_open@dj+5)& (0+255),w,b
  9287  0014A6  22DA               	addwfc	fsr2h,f,c
  9288  0014A8  C0C7  FFDE         	movff	??_f_open+2,postinc2
  9289  0014AC  C0C8  FFDD         	movff	??_f_open+3,postdec2
  9290  0014B0                     l11057:
  9291                           
  9292                           ; BSR set to: 0
  9293                           ;tff.c: 889: };tff.c: 890: };tff.c: 891: if (mode & 0x08) {
  9294  0014B0  A7C4               	btfss	f_open@mode& (0+255),3,b
  9295  0014B2  D045               	goto	l11089
  9296                           
  9297                           ; BSR set to: 0
  9298                           ;tff.c: 892: dir[11] = 0;
  9299  0014B4  EE20 F00B          	lfsr	2,11
  9300  0014B8  51DC               	movf	f_open@dir& (0+255),w,b
  9301  0014BA  26D9               	addwf	fsr2l,f,c
  9302  0014BC  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9303  0014BE  22DA               	addwfc	fsr2h,f,c
  9304  0014C0  0E00               	movlw	0
  9305  0014C2  6EDF               	movwf	indf2,c
  9306                           
  9307                           ; BSR set to: 0
  9308                           ;tff.c: 893: dw = get_fattime();
  9309  0014C4  ECA2  F018         	call	_get_fattime	;wreg free
  9310  0014C8  C01D  F0D7         	movff	?_get_fattime,f_open@dw
  9311  0014CC  C01E  F0D8         	movff	?_get_fattime+1,f_open@dw+1
  9312  0014D0  C01F  F0D9         	movff	?_get_fattime+2,f_open@dw+2
  9313  0014D4  C020  F0DA         	movff	?_get_fattime+3,f_open@dw+3
  9314                           
  9315                           ; BSR set to: 0
  9316                           ;tff.c: 894: *(DWORD*)(BYTE*)(&dir[14])=(DWORD)(dw);
  9317  0014D8  EE20 F00E          	lfsr	2,14
  9318  0014DC  51DC               	movf	f_open@dir& (0+255),w,b
  9319  0014DE  26D9               	addwf	fsr2l,f,c
  9320  0014E0  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9321  0014E2  22DA               	addwfc	fsr2h,f,c
  9322  0014E4  C0D7  FFDE         	movff	f_open@dw,postinc2
  9323  0014E8  C0D8  FFDE         	movff	f_open@dw+1,postinc2
  9324  0014EC  C0D9  FFDE         	movff	f_open@dw+2,postinc2
  9325  0014F0  C0DA  FFDE         	movff	f_open@dw+3,postinc2
  9326                           
  9327                           ; BSR set to: 0
  9328                           ;tff.c: 895: dj.fs->winflag = 1;
  9329  0014F4  EE20 F01F          	lfsr	2,31
  9330  0014F8  51E2               	movf	(f_open@dj+4)& (0+255),w,b
  9331  0014FA  26D9               	addwf	fsr2l,f,c
  9332  0014FC  51E3               	movf	(f_open@dj+5)& (0+255),w,b
  9333  0014FE  22DA               	addwfc	fsr2h,f,c
  9334  001500  0E01               	movlw	1
  9335  001502  6EDF               	movwf	indf2,c
  9336                           
  9337                           ; BSR set to: 0
  9338                           ;tff.c: 896: mode |= 0x20;
  9339  001504  8BC4               	bsf	f_open@mode& (0+255),5,b
  9340  001506  D01B               	goto	l11089
  9341  001508                     l11069:
  9342                           
  9343                           ; BSR set to: 0
  9344                           ;tff.c: 900: else {;tff.c: 902: if (res != FR_OK) return res;
  9345  001508  51DB               	movf	f_open@res& (0+255),w,b
  9346  00150A  A4D8               	btfss	status,2,c
  9347  00150C  D70B               	goto	u12820
  9348                           
  9349                           ; BSR set to: 0
  9350                           ;tff.c: 903: if (!dir || (dir[11] & 0x10))
  9351  00150E  51DC               	movf	f_open@dir& (0+255),w,b
  9352  001510  11DD               	iorwf	(f_open@dir+1)& (0+255),w,b
  9353  001512  B4D8               	btfsc	status,2,c
  9354  001514  D008               	goto	u12960
  9355                           
  9356                           ; BSR set to: 0
  9357  001516  EE20 F00B          	lfsr	2,11
  9358  00151A  51DC               	movf	f_open@dir& (0+255),w,b
  9359  00151C  26D9               	addwf	fsr2l,f,c
  9360  00151E  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9361  001520  22DA               	addwfc	fsr2h,f,c
  9362  001522  A8DF               	btfss	indf2,4,c
  9363  001524  D002               	goto	l1002
  9364  001526                     u12960:
  9365                           
  9366                           ; BSR set to: 0
  9367                           ;tff.c: 904: return FR_NO_FILE;
  9368  001526  0E02               	movlw	2
  9369  001528  0012               	return	
  9370  00152A                     l1002:
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;tff.c: 906: if ((mode & 0x02) && (dir[11] & 0x01))
  9374  00152A  A3C4               	btfss	f_open@mode& (0+255),1,b
  9375  00152C  D008               	goto	l11089
  9376                           
  9377                           ; BSR set to: 0
  9378  00152E  EE20 F00B          	lfsr	2,11
  9379  001532  51DC               	movf	f_open@dir& (0+255),w,b
  9380  001534  26D9               	addwf	fsr2l,f,c
  9381  001536  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9382  001538  22DA               	addwfc	fsr2h,f,c
  9383  00153A  B0DF               	btfsc	indf2,0,c
  9384  00153C  D753               	goto	u12890
  9385  00153E                     l11089:
  9386                           
  9387                           ; BSR set to: 0
  9388                           ;tff.c: 908: };tff.c: 909: fp->dir_sect = dj.fs->winsect;
  9389  00153E  EE20 F004          	lfsr	2,4
  9390  001542  51E2               	movf	(f_open@dj+4)& (0+255),w,b
  9391  001544  26D9               	addwf	fsr2l,f,c
  9392  001546  51E3               	movf	(f_open@dj+5)& (0+255),w,b
  9393  001548  22DA               	addwfc	fsr2h,f,c
  9394  00154A  EE10 F016          	lfsr	1,22
  9395  00154E  51C0               	movf	f_open@fp& (0+255),w,b
  9396  001550  26E1               	addwf	fsr1l,f,c
  9397  001552  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9398  001554  22E2               	addwfc	fsr1h,f,c
  9399  001556  CFDE FFE6          	movff	postinc2,postinc1
  9400  00155A  CFDE FFE6          	movff	postinc2,postinc1
  9401  00155E  CFDE FFE6          	movff	postinc2,postinc1
  9402  001562  CFDE FFE6          	movff	postinc2,postinc1
  9403                           
  9404                           ; BSR set to: 0
  9405                           ;tff.c: 910: fp->dir_ptr = dir;
  9406  001566  EE20 F01A          	lfsr	2,26
  9407  00156A  51C0               	movf	f_open@fp& (0+255),w,b
  9408  00156C  26D9               	addwf	fsr2l,f,c
  9409  00156E  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9410  001570  22DA               	addwfc	fsr2h,f,c
  9411  001572  C0DC  FFDE         	movff	f_open@dir,postinc2
  9412  001576  C0DD  FFDD         	movff	f_open@dir+1,postdec2
  9413                           
  9414                           ; BSR set to: 0
  9415                           ;tff.c: 912: fp->flag = mode;
  9416  00157A  EE20 F002          	lfsr	2,2
  9417  00157E  51C0               	movf	f_open@fp& (0+255),w,b
  9418  001580  26D9               	addwf	fsr2l,f,c
  9419  001582  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9420  001584  22DA               	addwfc	fsr2h,f,c
  9421  001586  C0C4  FFDF         	movff	f_open@mode,indf2
  9422                           
  9423                           ;tff.c: 913: fp->org_clust =;tff.c: 917: (WORD)(*(WORD*)(BYTE*)(&dir[26]));
  9424  00158A  EE20 F01A          	lfsr	2,26
  9425  00158E  51DC               	movf	f_open@dir& (0+255),w,b
  9426  001590  26D9               	addwf	fsr2l,f,c
  9427  001592  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9428  001594  22DA               	addwfc	fsr2h,f,c
  9429  001596  EE10 F00E          	lfsr	1,14
  9430  00159A  51C0               	movf	f_open@fp& (0+255),w,b
  9431  00159C  26E1               	addwf	fsr1l,f,c
  9432  00159E  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9433  0015A0  22E2               	addwfc	fsr1h,f,c
  9434  0015A2  CFDE FFE6          	movff	postinc2,postinc1
  9435  0015A6  CFDD FFE5          	movff	postdec2,postdec1
  9436                           
  9437                           ;tff.c: 918: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(&dir[28]));
  9438  0015AA  EE20 F01C          	lfsr	2,28
  9439  0015AE  51DC               	movf	f_open@dir& (0+255),w,b
  9440  0015B0  26D9               	addwf	fsr2l,f,c
  9441  0015B2  51DD               	movf	(f_open@dir+1)& (0+255),w,b
  9442  0015B4  22DA               	addwfc	fsr2h,f,c
  9443  0015B6  EE10 F00A          	lfsr	1,10
  9444  0015BA  51C0               	movf	f_open@fp& (0+255),w,b
  9445  0015BC  26E1               	addwf	fsr1l,f,c
  9446  0015BE  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9447  0015C0  22E2               	addwfc	fsr1h,f,c
  9448  0015C2  CFDE FFE6          	movff	postinc2,postinc1
  9449  0015C6  CFDE FFE6          	movff	postinc2,postinc1
  9450  0015CA  CFDE FFE6          	movff	postinc2,postinc1
  9451  0015CE  CFDE FFE6          	movff	postinc2,postinc1
  9452                           
  9453                           ; BSR set to: 0
  9454                           ;tff.c: 919: fp->fptr = 0; fp->csect = 255;
  9455  0015D2  EE20 F006          	lfsr	2,6
  9456  0015D6  51C0               	movf	f_open@fp& (0+255),w,b
  9457  0015D8  26D9               	addwf	fsr2l,f,c
  9458  0015DA  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9459  0015DC  22DA               	addwfc	fsr2h,f,c
  9460  0015DE  6ADE               	clrf	postinc2,c
  9461  0015E0  6ADE               	clrf	postinc2,c
  9462  0015E2  6ADE               	clrf	postinc2,c
  9463  0015E4  6ADD               	clrf	postdec2,c
  9464                           
  9465                           ; BSR set to: 0
  9466  0015E6  EE20 F003          	lfsr	2,3
  9467  0015EA  51C0               	movf	f_open@fp& (0+255),w,b
  9468  0015EC  26D9               	addwf	fsr2l,f,c
  9469  0015EE  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9470  0015F0  22DA               	addwfc	fsr2h,f,c
  9471  0015F2  0EFF               	movlw	255
  9472  0015F4  6EDF               	movwf	indf2,c
  9473                           
  9474                           ; BSR set to: 0
  9475                           ;tff.c: 920: fp->fs = dj.fs; fp->id = dj.fs->id;
  9476  0015F6  EE20 F004          	lfsr	2,4
  9477  0015FA  51C0               	movf	f_open@fp& (0+255),w,b
  9478  0015FC  26D9               	addwf	fsr2l,f,c
  9479  0015FE  51C1               	movf	(f_open@fp+1)& (0+255),w,b
  9480  001600  22DA               	addwfc	fsr2h,f,c
  9481  001602  C0E2  FFDE         	movff	f_open@dj+4,postinc2
  9482  001606  C0E3  FFDD         	movff	f_open@dj+5,postdec2
  9483                           
  9484                           ; BSR set to: 0
  9485  00160A  C0E2  FFD9         	movff	f_open@dj+4,fsr2l
  9486  00160E  C0E3  FFDA         	movff	f_open@dj+5,fsr2h
  9487  001612  C0C0  FFE1         	movff	f_open@fp,fsr1l
  9488  001616  C0C1  FFE2         	movff	f_open@fp+1,fsr1h
  9489  00161A  CFDE FFE6          	movff	postinc2,postinc1
  9490  00161E  CFDD FFE5          	movff	postdec2,postdec1
  9491                           
  9492                           ; BSR set to: 0
  9493                           ;tff.c: 922: return FR_OK;
  9494  001622  0E00               	movlw	0
  9495                           
  9496                           ; BSR set to: 0
  9497  001624  0012               	return		;funcret
  9498  001626                     __end_of_f_open:
  9499                           	callstack 0
  9500                           
  9501 ;; *************** function _trace_path *****************
  9502 ;; Defined at:
  9503 ;;		line 502 in file "bibliotecas/tff.c"
  9504 ;; Parameters:    Size  Location     Type
  9505 ;;  dj              1   72[BANK0 ] PTR struct _DIR_E
  9506 ;;		 -> f_open@dj(14), 
  9507 ;;  fn              1   73[BANK0 ] PTR unsigned char 
  9508 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
  9509 ;;  path            2   74[BANK0 ] PTR const unsigned char 
  9510 ;;		 -> STR_22(13), filename(20), 
  9511 ;;  dir             1   76[BANK0 ] PTR PTR unsigned char 
  9512 ;;		 -> f_opendir@dir(2), f_open@dir(2), 
  9513 ;; Auto vars:     Size  Location     Type
  9514 ;;  dptr            2   90[BANK0 ] PTR unsigned char 
  9515 ;;		 -> fs.win(512), NULL(0), fs(544), 
  9516 ;;  clust           2   87[BANK0 ] unsigned short 
  9517 ;;  fs              2   85[BANK0 ] PTR struct _FATFS
  9518 ;;		 -> NULL(0), fs(544), 
  9519 ;;  ds              1   89[BANK0 ] unsigned char 
  9520 ;; Return value:  Size  Location     Type
  9521 ;;                  1    wreg      enum E155
  9522 ;; Registers used:
  9523 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9524 ;; Tracked objects:
  9525 ;;		On entry : 3F/0
  9526 ;;		On exit  : 3F/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9529 ;;      Params:         0       5       0       0       0       0       0       0       0
  9530 ;;      Locals:         0      11       0       0       0       0       0       0       0
  9531 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9532 ;;      Totals:         0      20       0       0       0       0       0       0       0
  9533 ;;Total ram usage:       20 bytes
  9534 ;; Hardware stack levels used:    1
  9535 ;; Hardware stack levels required when called:   11
  9536 ;; This function calls:
  9537 ;;		_clust2sect
  9538 ;;		_make_dirfile
  9539 ;;		_memcmp
  9540 ;;		_move_window
  9541 ;;		_next_dir_entry
  9542 ;; This function is called by:
  9543 ;;		_f_open
  9544 ;; This function uses a non-reentrant model
  9545 ;;
  9546                           
  9547                           	psect	text50
  9548  001926                     __ptext50:
  9549                           	callstack 0
  9550  001926                     _trace_path:
  9551                           	callstack 14
  9552                           
  9553                           ; BSR set to: 0
  9554                           ;tff.c: 512: FATFS *fs = FatFs;
  9555                           
  9556                           ; BSR set to: 0
  9557                           ;incstack = 0
  9558  001926  C038  F0B5         	movff	_FatFs,trace_path@fs
  9559  00192A  C039  F0B6         	movff	_FatFs+1,trace_path@fs+1
  9560                           
  9561                           ; BSR set to: 0
  9562                           ;tff.c: 515: dj->fs = fs;
  9563  00192E  51A8               	movf	trace_path@dj& (0+255),w,b
  9564  001930  6ED9               	movwf	fsr2l,c
  9565  001932  6ADA               	clrf	fsr2h,c
  9566  001934  0E04               	movlw	4
  9567  001936  26D9               	addwf	fsr2l,f,c
  9568  001938  C0B5  FFDE         	movff	trace_path@fs,postinc2
  9569  00193C  C0B6  FFDD         	movff	trace_path@fs+1,postdec2
  9570                           
  9571                           ; BSR set to: 0
  9572                           ;tff.c: 516: clust = fs->dirbase;
  9573  001940  EE20 F00C          	lfsr	2,12
  9574  001944  51B5               	movf	trace_path@fs& (0+255),w,b
  9575  001946  26D9               	addwf	fsr2l,f,c
  9576  001948  51B6               	movf	(trace_path@fs+1)& (0+255),w,b
  9577  00194A  22DA               	addwfc	fsr2h,f,c
  9578  00194C  CFDE F0B7          	movff	postinc2,trace_path@clust
  9579  001950  CFDD F0B8          	movff	postdec2,trace_path@clust+1
  9580                           
  9581                           ; BSR set to: 0
  9582                           ;tff.c: 523: {;tff.c: 524: dj->clust = dj->sclust = 0;
  9583  001954  51A8               	movf	trace_path@dj& (0+255),w,b
  9584  001956  6ED9               	movwf	fsr2l,c
  9585  001958  6ADA               	clrf	fsr2h,c
  9586  00195A  0E06               	movlw	6
  9587  00195C  26D9               	addwf	fsr2l,f,c
  9588  00195E  0E00               	movlw	0
  9589  001960  6EDE               	movwf	postinc2,c
  9590  001962  0E00               	movlw	0
  9591  001964  6EDD               	movwf	postdec2,c
  9592  001966  51A8               	movf	trace_path@dj& (0+255),w,b
  9593  001968  6EE1               	movwf	fsr1l,c
  9594  00196A  6AE2               	clrf	fsr1h,c
  9595  00196C  0E08               	movlw	8
  9596  00196E  26E1               	addwf	fsr1l,f,c
  9597  001970  CFDE FFE6          	movff	postinc2,postinc1
  9598  001974  CFDD FFE5          	movff	postdec2,postdec1
  9599                           
  9600                           ; BSR set to: 0
  9601                           ;tff.c: 525: dj->sect = clust;
  9602  001978  51B7               	movf	trace_path@clust& (0+255),w,b
  9603  00197A  6FAD               	movwf	??_trace_path& (0+255),b
  9604  00197C  51B8               	movf	(trace_path@clust+1)& (0+255),w,b
  9605  00197E  6FAE               	movwf	(??_trace_path+1)& (0+255),b
  9606  001980  6BAF               	clrf	(??_trace_path+2)& (0+255),b
  9607  001982  6BB0               	clrf	(??_trace_path+3)& (0+255),b
  9608  001984  51A8               	movf	trace_path@dj& (0+255),w,b
  9609  001986  6ED9               	movwf	fsr2l,c
  9610  001988  6ADA               	clrf	fsr2h,c
  9611  00198A  0E0A               	movlw	10
  9612  00198C  26D9               	addwf	fsr2l,f,c
  9613  00198E  C0AD  FFDE         	movff	??_trace_path,postinc2
  9614  001992  C0AE  FFDE         	movff	??_trace_path+1,postinc2
  9615  001996  C0AF  FFDE         	movff	??_trace_path+2,postinc2
  9616  00199A  C0B0  FFDE         	movff	??_trace_path+3,postinc2
  9617                           
  9618                           ; BSR set to: 0
  9619                           ;tff.c: 526: };tff.c: 527: dj->index = 0;
  9620  00199E  51A8               	movf	trace_path@dj& (0+255),w,b
  9621  0019A0  6ED9               	movwf	fsr2l,c
  9622  0019A2  6ADA               	clrf	fsr2h,c
  9623  0019A4  0E02               	movlw	2
  9624  0019A6  26D9               	addwf	fsr2l,f,c
  9625  0019A8  0E00               	movlw	0
  9626  0019AA  6EDE               	movwf	postinc2,c
  9627  0019AC  0E00               	movlw	0
  9628  0019AE  6EDD               	movwf	postdec2,c
  9629                           
  9630                           ; BSR set to: 0
  9631                           ;tff.c: 529: if (*path == '\0') {
  9632  0019B0  C0AA  FFF6         	movff	trace_path@path,tblptrl
  9633  0019B4  C0AB  FFF7         	movff	trace_path@path+1,tblptrh
  9634  0019B8  6AF8               	clrf	tblptru,c
  9635  0019BA  0E07               	movlw	(high __ramtop+-1)
  9636  0019BC  64F7               	cpfsgt	tblptrh,c
  9637  0019BE  D003               	bra	u12167
  9638  0019C0  0008               	tblrd		*
  9639  0019C2  50F5               	movf	tablat,w,c
  9640  0019C4  D005               	bra	u12160
  9641  0019C6                     u12167:
  9642  0019C6  CFF6 FFE1          	movff	tblptrl,fsr1l
  9643  0019CA  CFF7 FFE2          	movff	tblptrh,fsr1h
  9644  0019CE  50E7               	movf	indf1,w,c
  9645  0019D0                     u12160:
  9646  0019D0  0900               	iorlw	0
  9647  0019D2  A4D8               	btfss	status,2,c
  9648  0019D4  D00A               	goto	l10631
  9649                           
  9650                           ;tff.c: 530: *dir = (0); return FR_OK;
  9651  0019D6  0100               	movlb	0	; () banked
  9652  0019D8  51AC               	movf	trace_path@dir& (0+255),w,b
  9653  0019DA  6ED9               	movwf	fsr2l,c
  9654  0019DC  6ADA               	clrf	fsr2h,c
  9655  0019DE  0E00               	movlw	0
  9656  0019E0  6EDE               	movwf	postinc2,c
  9657  0019E2  0E00               	movlw	0
  9658  0019E4  6EDD               	movwf	postdec2,c
  9659  0019E6                     l10627:
  9660                           
  9661                           ; BSR set to: 0
  9662  0019E6  0E00               	movlw	0
  9663  0019E8  0012               	return	
  9664  0019EA                     l10631:
  9665                           
  9666                           ;tff.c: 534: ds = make_dirfile(&path, fn);
  9667  0019EA  0EAA               	movlw	low trace_path@path
  9668  0019EC  6E21               	movwf	make_dirfile@path^0,c
  9669  0019EE  C0A9  F022         	movff	trace_path@fn,make_dirfile@dirname
  9670  0019F2  ECF5  F017         	call	_make_dirfile	;wreg free
  9671  0019F6  0100               	movlb	0	; () banked
  9672  0019F8  6FB9               	movwf	trace_path@ds& (0+255),b
  9673                           
  9674                           ; BSR set to: 0
  9675                           ;tff.c: 535: if (ds == 1) return FR_INVALID_NAME;
  9676  0019FA  05B9               	decf	trace_path@ds& (0+255),w,b
  9677  0019FC  A4D8               	btfss	status,2,c
  9678  0019FE  D002               	goto	l10639
  9679                           
  9680                           ; BSR set to: 0
  9681  001A00  0E04               	movlw	4
  9682  001A02  0012               	return	
  9683  001A04                     l10639:
  9684                           
  9685                           ;tff.c: 537: if (!move_window(dj->sect)) return FR_RW_ERROR;
  9686  001A04  0100               	movlb	0	; () banked
  9687  001A06  51A8               	movf	trace_path@dj& (0+255),w,b
  9688  001A08  6ED9               	movwf	fsr2l,c
  9689  001A0A  6ADA               	clrf	fsr2h,c
  9690  001A0C  0E0A               	movlw	10
  9691  001A0E  26D9               	addwf	fsr2l,f,c
  9692  001A10  CFDE F073          	movff	postinc2,move_window@sector
  9693  001A14  CFDE F074          	movff	postinc2,move_window@sector+1
  9694  001A18  CFDE F075          	movff	postinc2,move_window@sector+2
  9695  001A1C  CFDE F076          	movff	postinc2,move_window@sector+3
  9696  001A20  ECA8  F015         	call	_move_window	;wreg free
  9697  001A24  0900               	iorlw	0
  9698  001A26  A4D8               	btfss	status,2,c
  9699  001A28  D002               	goto	l10645
  9700                           
  9701                           ; BSR set to: 0
  9702  001A2A  0E08               	movlw	8
  9703  001A2C  0012               	return	
  9704  001A2E                     l10645:
  9705                           
  9706                           ; BSR set to: 0
  9707                           ;tff.c: 538: dptr = &fs->win[(dj->index & 15) * 32];
  9708  001A2E  51A8               	movf	trace_path@dj& (0+255),w,b
  9709  001A30  6ED9               	movwf	fsr2l,c
  9710  001A32  6ADA               	clrf	fsr2h,c
  9711  001A34  0E02               	movlw	2
  9712  001A36  26D9               	addwf	fsr2l,f,c
  9713  001A38  CFDE F0AD          	movff	postinc2,??_trace_path
  9714  001A3C  CFDD F0AE          	movff	postdec2,??_trace_path+1
  9715  001A40  0E0F               	movlw	15
  9716  001A42  17AD               	andwf	??_trace_path& (0+255),f,b
  9717  001A44  0E00               	movlw	0
  9718  001A46  17AE               	andwf	(??_trace_path+1)& (0+255),f,b
  9719  001A48  0E05               	movlw	5
  9720  001A4A                     u12205:
  9721  001A4A  90D8               	bcf	status,0,c
  9722  001A4C  37AD               	rlcf	??_trace_path& (0+255),f,b
  9723  001A4E  37AE               	rlcf	(??_trace_path+1)& (0+255),f,b
  9724  001A50  2EE8               	decfsz	wreg,f,c
  9725  001A52  D7FB               	goto	u12205
  9726  001A54  C0B5  F0AF         	movff	trace_path@fs,??_trace_path+2
  9727  001A58  C0B6  F0B0         	movff	trace_path@fs+1,??_trace_path+3
  9728  001A5C  51AD               	movf	??_trace_path& (0+255),w,b
  9729  001A5E  27AF               	addwf	(??_trace_path+2)& (0+255),f,b
  9730  001A60  51AE               	movf	(??_trace_path+1)& (0+255),w,b
  9731  001A62  23B0               	addwfc	(??_trace_path+3)& (0+255),f,b
  9732  001A64  0E20               	movlw	32
  9733  001A66  25AF               	addwf	(??_trace_path+2)& (0+255),w,b
  9734  001A68  6FBA               	movwf	trace_path@dptr& (0+255),b
  9735  001A6A  0E00               	movlw	0
  9736  001A6C  21B0               	addwfc	(??_trace_path+3)& (0+255),w,b
  9737  001A6E  6FBB               	movwf	(trace_path@dptr+1)& (0+255),b
  9738                           
  9739                           ; BSR set to: 0
  9740                           ;tff.c: 539: if (dptr[0] == 0)
  9741  001A70  C0BA  FFD9         	movff	trace_path@dptr,fsr2l
  9742  001A74  C0BB  FFDA         	movff	trace_path@dptr+1,fsr2h
  9743  001A78  50DF               	movf	indf2,w,c
  9744  001A7A  A4D8               	btfss	status,2,c
  9745  001A7C  D00D               	goto	l10657
  9746                           
  9747                           ; BSR set to: 0
  9748                           ;tff.c: 540: return !ds ? FR_NO_FILE : FR_NO_PATH;
  9749  001A7E  51B9               	movf	trace_path@ds& (0+255),w,b
  9750  001A80  B4D8               	btfsc	status,2,c
  9751  001A82  D004               	goto	l10653
  9752                           
  9753                           ; BSR set to: 0
  9754  001A84  0E00               	movlw	0
  9755  001A86  6FB2               	movwf	(_trace_path$1708+1)& (0+255),b
  9756  001A88  0E03               	movlw	3
  9757  001A8A  D003               	goto	L4
  9758  001A8C                     l10653:
  9759                           
  9760                           ; BSR set to: 0
  9761  001A8C  0E00               	movlw	0
  9762  001A8E  6FB2               	movwf	(_trace_path$1708+1)& (0+255),b
  9763  001A90  0E02               	movlw	2
  9764  001A92                     L4:
  9765  001A92  6FB1               	movwf	_trace_path$1708& (0+255),b
  9766                           
  9767                           ; BSR set to: 0
  9768  001A94  51B1               	movf	_trace_path$1708& (0+255),w,b
  9769  001A96  0012               	return	
  9770  001A98                     l10657:
  9771                           
  9772                           ; BSR set to: 0
  9773                           ;tff.c: 541: if (dptr[0] != 0xE5;tff.c: 542: && !(dptr[11] & 0x08);tff.c: 543: && !memcm
      +                          p(&dptr[0], fn, 8+3) ) break;
  9774  001A98  C0BA  FFD9         	movff	trace_path@dptr,fsr2l
  9775  001A9C  C0BB  FFDA         	movff	trace_path@dptr+1,fsr2h
  9776  001AA0  0EE5               	movlw	229
  9777  001AA2  18DE               	xorwf	postinc2,w,c
  9778  001AA4  B4D8               	btfsc	status,2,c
  9779  001AA6  D019               	goto	l10665
  9780                           
  9781                           ; BSR set to: 0
  9782  001AA8  EE20 F00B          	lfsr	2,11
  9783  001AAC  51BA               	movf	trace_path@dptr& (0+255),w,b
  9784  001AAE  26D9               	addwf	fsr2l,f,c
  9785  001AB0  51BB               	movf	(trace_path@dptr+1)& (0+255),w,b
  9786  001AB2  22DA               	addwfc	fsr2h,f,c
  9787  001AB4  B6DF               	btfsc	indf2,3,c
  9788  001AB6  D011               	goto	l10665
  9789                           
  9790                           ; BSR set to: 0
  9791  001AB8  C0BA  F019         	movff	trace_path@dptr,memcmp@s1
  9792  001ABC  C0BB  F01A         	movff	trace_path@dptr+1,memcmp@s1+1
  9793  001AC0  C0A9  F01B         	movff	trace_path@fn,memcmp@s2
  9794  001AC4  6A1C               	clrf	(memcmp@s2+1)^0,c
  9795  001AC6  0E00               	movlw	0
  9796  001AC8  6E1E               	movwf	(memcmp@n+1)^0,c
  9797  001ACA  0E0B               	movlw	11
  9798  001ACC  6E1D               	movwf	memcmp@n^0,c
  9799  001ACE  ECED  F020         	call	_memcmp	;wreg free
  9800  001AD2  5019               	movf	?_memcmp^0,w,c
  9801  001AD4  101A               	iorwf	(?_memcmp+1)^0,w,c
  9802  001AD6  B4D8               	btfsc	status,2,c
  9803  001AD8  D015               	goto	l10675
  9804  001ADA                     l10665:
  9805                           
  9806                           ;tff.c: 544: if (!next_dir_entry(dj))
  9807  001ADA  C0A8  F031         	movff	trace_path@dj,next_dir_entry@dj
  9808  001ADE  EC43  F017         	call	_next_dir_entry	;wreg free
  9809  001AE2  0900               	iorlw	0
  9810  001AE4  A4D8               	btfss	status,2,c
  9811  001AE6  D78E               	goto	l10639
  9812                           
  9813                           ;tff.c: 545: return !ds ? FR_NO_FILE : FR_NO_PATH;
  9814  001AE8  0100               	movlb	0	; () banked
  9815  001AEA  51B9               	movf	trace_path@ds& (0+255),w,b
  9816  001AEC  B4D8               	btfsc	status,2,c
  9817  001AEE  D004               	goto	l10671
  9818                           
  9819                           ; BSR set to: 0
  9820  001AF0  0E00               	movlw	0
  9821  001AF2  6FB4               	movwf	(_trace_path$1710+1)& (0+255),b
  9822  001AF4  0E03               	movlw	3
  9823  001AF6  D003               	goto	L5
  9824  001AF8                     l10671:
  9825                           
  9826                           ; BSR set to: 0
  9827  001AF8  0E00               	movlw	0
  9828  001AFA  6FB4               	movwf	(_trace_path$1710+1)& (0+255),b
  9829  001AFC  0E02               	movlw	2
  9830  001AFE                     L5:
  9831  001AFE  6FB3               	movwf	_trace_path$1710& (0+255),b
  9832                           
  9833                           ; BSR set to: 0
  9834  001B00  51B3               	movf	_trace_path$1710& (0+255),w,b
  9835  001B02  0012               	return	
  9836  001B04                     l10675:
  9837                           
  9838                           ;tff.c: 547: if (!ds) { *dir = dptr; return FR_OK; }
  9839  001B04  0100               	movlb	0	; () banked
  9840  001B06  51B9               	movf	trace_path@ds& (0+255),w,b
  9841  001B08  A4D8               	btfss	status,2,c
  9842  001B0A  D008               	goto	l10683
  9843                           
  9844                           ; BSR set to: 0
  9845  001B0C  51AC               	movf	trace_path@dir& (0+255),w,b
  9846  001B0E  6ED9               	movwf	fsr2l,c
  9847  001B10  6ADA               	clrf	fsr2h,c
  9848  001B12  C0BA  FFDE         	movff	trace_path@dptr,postinc2
  9849  001B16  C0BB  FFDD         	movff	trace_path@dptr+1,postdec2
  9850  001B1A  D765               	goto	l10627
  9851  001B1C                     l10683:
  9852                           
  9853                           ; BSR set to: 0
  9854                           ;tff.c: 548: if (!(dptr[11] & 0x10)) return FR_NO_PATH;
  9855  001B1C  EE20 F00B          	lfsr	2,11
  9856  001B20  51BA               	movf	trace_path@dptr& (0+255),w,b
  9857  001B22  26D9               	addwf	fsr2l,f,c
  9858  001B24  51BB               	movf	(trace_path@dptr+1)& (0+255),w,b
  9859  001B26  22DA               	addwfc	fsr2h,f,c
  9860  001B28  B8DF               	btfsc	indf2,4,c
  9861  001B2A  D002               	goto	l10689
  9862                           
  9863                           ; BSR set to: 0
  9864  001B2C  0E03               	movlw	3
  9865  001B2E  0012               	return	
  9866  001B30                     l10689:
  9867                           
  9868                           ; BSR set to: 0
  9869                           ;tff.c: 549: clust =;tff.c: 553: (WORD)(*(WORD*)(BYTE*)(&dptr[26]));
  9870  001B30  EE20 F01A          	lfsr	2,26
  9871  001B34  51BA               	movf	trace_path@dptr& (0+255),w,b
  9872  001B36  26D9               	addwf	fsr2l,f,c
  9873  001B38  51BB               	movf	(trace_path@dptr+1)& (0+255),w,b
  9874  001B3A  22DA               	addwfc	fsr2h,f,c
  9875  001B3C  CFDE F0B7          	movff	postinc2,trace_path@clust
  9876  001B40  CFDD F0B8          	movff	postdec2,trace_path@clust+1
  9877                           
  9878                           ; BSR set to: 0
  9879                           ;tff.c: 554: dj->clust = dj->sclust = clust;
  9880  001B44  51A8               	movf	trace_path@dj& (0+255),w,b
  9881  001B46  6ED9               	movwf	fsr2l,c
  9882  001B48  6ADA               	clrf	fsr2h,c
  9883  001B4A  0E06               	movlw	6
  9884  001B4C  26D9               	addwf	fsr2l,f,c
  9885  001B4E  C0B7  FFDE         	movff	trace_path@clust,postinc2
  9886  001B52  C0B8  FFDD         	movff	trace_path@clust+1,postdec2
  9887  001B56  51A8               	movf	trace_path@dj& (0+255),w,b
  9888  001B58  6EE1               	movwf	fsr1l,c
  9889  001B5A  6AE2               	clrf	fsr1h,c
  9890  001B5C  0E08               	movlw	8
  9891  001B5E  26E1               	addwf	fsr1l,f,c
  9892  001B60  CFDE FFE6          	movff	postinc2,postinc1
  9893  001B64  CFDD FFE5          	movff	postdec2,postdec1
  9894                           
  9895                           ; BSR set to: 0
  9896                           ;tff.c: 555: dj->sect = clust2sect(clust);
  9897  001B68  C0B7  F025         	movff	trace_path@clust,clust2sect@clust
  9898  001B6C  C0B8  F026         	movff	trace_path@clust+1,clust2sect@clust+1
  9899  001B70  EC02  F01F         	call	_clust2sect	;wreg free
  9900  001B74  0100               	movlb	0	; () banked
  9901  001B76  51A8               	movf	trace_path@dj& (0+255),w,b
  9902  001B78  6ED9               	movwf	fsr2l,c
  9903  001B7A  6ADA               	clrf	fsr2h,c
  9904  001B7C  0E0A               	movlw	10
  9905  001B7E  26D9               	addwf	fsr2l,f,c
  9906  001B80  C025  FFDE         	movff	?_clust2sect,postinc2
  9907  001B84  C026  FFDE         	movff	?_clust2sect+1,postinc2
  9908  001B88  C027  FFDE         	movff	?_clust2sect+2,postinc2
  9909  001B8C  C028  FFDE         	movff	?_clust2sect+3,postinc2
  9910                           
  9911                           ; BSR set to: 0
  9912                           ;tff.c: 556: dj->index = 2;
  9913  001B90  51A8               	movf	trace_path@dj& (0+255),w,b
  9914  001B92  6ED9               	movwf	fsr2l,c
  9915  001B94  6ADA               	clrf	fsr2h,c
  9916  001B96  0E02               	movlw	2
  9917  001B98  26D9               	addwf	fsr2l,f,c
  9918  001B9A  0E02               	movlw	2
  9919  001B9C  6EDE               	movwf	postinc2,c
  9920  001B9E  0E00               	movlw	0
  9921  001BA0  6EDD               	movwf	postdec2,c
  9922                           
  9923                           ;tff.c: 557: }
  9924  001BA2  D723               	goto	l10631
  9925  001BA4                     __end_of_trace_path:
  9926                           	callstack 0
  9927                           
  9928 ;; *************** function _make_dirfile *****************
  9929 ;; Defined at:
  9930 ;;		line 439 in file "bibliotecas/tff.c"
  9931 ;; Parameters:    Size  Location     Type
  9932 ;;  path            1   32[COMRAM] PTR PTR const unsigned c
  9933 ;;		 -> trace_path@path(2), 
  9934 ;;  dirname         1   33[COMRAM] PTR unsigned char 
  9935 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
  9936 ;; Auto vars:     Size  Location     Type
  9937 ;;  c               1   42[COMRAM] unsigned char 
  9938 ;;  n               1   41[COMRAM] unsigned char 
  9939 ;;  a               1   40[COMRAM] unsigned char 
  9940 ;;  t               1   39[COMRAM] unsigned char 
  9941 ;;  b               1   38[COMRAM] unsigned char 
  9942 ;; Return value:  Size  Location     Type
  9943 ;;                  1    wreg      unsigned char 
  9944 ;; Registers used:
  9945 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9946 ;; Tracked objects:
  9947 ;;		On entry : 0/0
  9948 ;;		On exit  : 0/0
  9949 ;;		Unchanged: 0/0
  9950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9951 ;;      Params:         2       0       0       0       0       0       0       0       0
  9952 ;;      Locals:         7       0       0       0       0       0       0       0       0
  9953 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9954 ;;      Totals:        11       0       0       0       0       0       0       0       0
  9955 ;;Total ram usage:       11 bytes
  9956 ;; Hardware stack levels used:    1
  9957 ;; Hardware stack levels required when called:    4
  9958 ;; This function calls:
  9959 ;;		_memset
  9960 ;; This function is called by:
  9961 ;;		_trace_path
  9962 ;; This function uses a non-reentrant model
  9963 ;;
  9964                           
  9965                           	psect	text51
  9966  002FEA                     __ptext51:
  9967                           	callstack 0
  9968  002FEA                     _make_dirfile:
  9969                           	callstack 20
  9970                           
  9971                           ;tff.c: 444: BYTE n, t, c, a, b;;tff.c: 447: memset(dirname, ' ', 8+3);
  9972                           
  9973                           ; BSR set to: 0
  9974                           ;incstack = 0
  9975  002FEA  C022  F019         	movff	make_dirfile@dirname,memset@p1
  9976  002FEE  6A1A               	clrf	(memset@p1+1)^0,c
  9977  002FF0  0E00               	movlw	0
  9978  002FF2  6E1C               	movwf	(memset@c+1)^0,c
  9979  002FF4  0E20               	movlw	32
  9980  002FF6  6E1B               	movwf	memset@c^0,c
  9981  002FF8  0E00               	movlw	0
  9982  002FFA  6E1E               	movwf	(memset@n+1)^0,c
  9983  002FFC  0E0B               	movlw	11
  9984  002FFE  6E1D               	movwf	memset@n^0,c
  9985  003000  EC71  F028         	call	_memset	;wreg free
  9986                           
  9987                           ;tff.c: 448: a = 0; b = 0x18;
  9988  003004  0E00               	movlw	0
  9989  003006  6E29               	movwf	make_dirfile@a^0,c
  9990  003008  0E18               	movlw	24
  9991  00300A  6E27               	movwf	make_dirfile@b^0,c
  9992                           
  9993                           ;tff.c: 449: n = 0; t = 8;
  9994  00300C  0E00               	movlw	0
  9995  00300E  6E2A               	movwf	make_dirfile@n^0,c
  9996  003010  0E08               	movlw	8
  9997  003012  6E28               	movwf	make_dirfile@t^0,c
  9998  003014                     l6975:
  9999                           
 10000                           ;tff.c: 451: c = *(*path)++;
 10001  003014  5021               	movf	make_dirfile@path^0,w,c
 10002  003016  6ED9               	movwf	fsr2l,c
 10003  003018  6ADA               	clrf	fsr2h,c
 10004  00301A  CFDF F023          	movff	indf2,??_make_dirfile
 10005  00301E  0E01               	movlw	1
 10006  003020  26DE               	addwf	postinc2,f,c
 10007  003022  CFDF F024          	movff	indf2,??_make_dirfile+1
 10008  003026  0E00               	movlw	0
 10009  003028  22DD               	addwfc	postdec2,f,c
 10010  00302A  C023  FFF6         	movff	??_make_dirfile,tblptrl
 10011  00302E  C024  FFF7         	movff	??_make_dirfile+1,tblptrh
 10012  003032  6AF8               	clrf	tblptru,c
 10013  003034  0E07               	movlw	(high __ramtop+-1)
 10014  003036  64F7               	cpfsgt	tblptrh,c
 10015  003038  D003               	bra	u6607
 10016  00303A  0008               	tblrd		*
 10017  00303C  50F5               	movf	tablat,w,c
 10018  00303E  D005               	bra	u6600
 10019  003040                     u6607:
 10020  003040  CFF6 FFE1          	movff	tblptrl,fsr1l
 10021  003044  CFF7 FFE2          	movff	tblptrh,fsr1h
 10022  003048  50E7               	movf	indf1,w,c
 10023  00304A                     u6600:
 10024  00304A  6E2B               	movwf	make_dirfile@c^0,c
 10025                           
 10026                           ;tff.c: 452: if (c == '\0' || c == '/') {
 10027  00304C  502B               	movf	make_dirfile@c^0,w,c
 10028  00304E  B4D8               	btfsc	status,2,c
 10029  003050  D004               	goto	u6620
 10030  003052  0E2F               	movlw	47
 10031  003054  182B               	xorwf	make_dirfile@c^0,w,c
 10032  003056  A4D8               	btfss	status,2,c
 10033  003058  D012               	goto	l6995
 10034  00305A                     u6620:
 10035                           
 10036                           ;tff.c: 453: if (n == 0) break;
 10037  00305A  502A               	movf	make_dirfile@n^0,w,c
 10038  00305C  B4D8               	btfsc	status,2,c
 10039  00305E  D070               	goto	l7083
 10040  003060  5029               	movf	make_dirfile@a^0,w,c
 10041  003062  1427               	andwf	make_dirfile@b^0,w,c
 10042  003064  6E23               	movwf	??_make_dirfile^0,c
 10043  003066  5023               	movf	??_make_dirfile^0,w,c
 10044  003068  6E25               	movwf	_make_dirfile$1661^0,c
 10045  00306A  6A26               	clrf	(_make_dirfile$1661+1)^0,c
 10046  00306C  5022               	movf	make_dirfile@dirname^0,w,c
 10047  00306E  6ED9               	movwf	fsr2l,c
 10048  003070  6ADA               	clrf	fsr2h,c
 10049  003072  0E0B               	movlw	11
 10050  003074  26D9               	addwf	fsr2l,f,c
 10051  003076  C025  FFDF         	movff	_make_dirfile$1661,indf2
 10052                           
 10053                           ;tff.c: 455: return c;
 10054  00307A  502B               	movf	make_dirfile@c^0,w,c
 10055  00307C  0012               	return	
 10056  00307E                     l6995:
 10057                           
 10058                           ;tff.c: 456: };tff.c: 457: if (c <= ' ' || c == 0x7F) break;
 10059  00307E  0E20               	movlw	32
 10060  003080  642B               	cpfsgt	make_dirfile@c^0,c
 10061  003082  D05E               	goto	l7083
 10062  003084  0E7F               	movlw	127
 10063  003086  182B               	xorwf	make_dirfile@c^0,w,c
 10064  003088  B4D8               	btfsc	status,2,c
 10065  00308A  D05A               	goto	l7083
 10066                           
 10067                           ;tff.c: 458: if (c == '.') {
 10068  00308C  0E2E               	movlw	46
 10069  00308E  182B               	xorwf	make_dirfile@c^0,w,c
 10070  003090  A4D8               	btfss	status,2,c
 10071  003092  D00C               	goto	l7025
 10072                           
 10073                           ;tff.c: 459: if (!(a & 1) && n >= 1 && n <= 8) {
 10074  003094  B029               	btfsc	make_dirfile@a^0,0,c
 10075  003096  D054               	goto	l7083
 10076  003098  502A               	movf	make_dirfile@n^0,w,c
 10077  00309A  B4D8               	btfsc	status,2,c
 10078  00309C  D051               	goto	l7083
 10079  00309E  0E09               	movlw	9
 10080  0030A0  602A               	cpfslt	make_dirfile@n^0,c
 10081  0030A2  D04E               	goto	l7083
 10082                           
 10083                           ;tff.c: 460: n = 8; t = 11; continue;
 10084  0030A4  0E08               	movlw	8
 10085  0030A6  6E2A               	movwf	make_dirfile@n^0,c
 10086  0030A8  0E0B               	movlw	11
 10087  0030AA  D7B3               	goto	L6
 10088  0030AC                     l7025:
 10089                           
 10090                           ;tff.c: 470: };tff.c: 471: if (c == '"') break;
 10091  0030AC  0E22               	movlw	34
 10092  0030AE  182B               	xorwf	make_dirfile@c^0,w,c
 10093  0030B0  B4D8               	btfsc	status,2,c
 10094  0030B2  D046               	goto	l7083
 10095                           
 10096                           ;tff.c: 472: if (c <= ')') goto md_l1;
 10097  0030B4  0E2A               	movlw	42
 10098  0030B6  602B               	cpfslt	make_dirfile@c^0,c
 10099  0030B8  D001               	goto	l7033
 10100  0030BA  D035               	goto	l875
 10101  0030BC                     l7033:
 10102                           
 10103                           ;tff.c: 473: if (c <= ',') break;
 10104  0030BC  0E2D               	movlw	45
 10105  0030BE  602B               	cpfslt	make_dirfile@c^0,c
 10106  0030C0  D001               	goto	l7037
 10107  0030C2  D03E               	goto	l7083
 10108  0030C4                     l7037:
 10109                           
 10110                           ;tff.c: 474: if (c <= '9') goto md_l1;
 10111  0030C4  0E3A               	movlw	58
 10112  0030C6  602B               	cpfslt	make_dirfile@c^0,c
 10113  0030C8  D001               	goto	l7041
 10114  0030CA  D02D               	goto	l875
 10115  0030CC                     l7041:
 10116                           
 10117                           ;tff.c: 475: if (c <= '?') break;
 10118  0030CC  0E40               	movlw	64
 10119  0030CE  602B               	cpfslt	make_dirfile@c^0,c
 10120  0030D0  D001               	goto	l878
 10121  0030D2  D036               	goto	l7083
 10122  0030D4                     l878:
 10123                           
 10124                           ;tff.c: 476: if (!(a & 1)) {
 10125  0030D4  B029               	btfsc	make_dirfile@a^0,0,c
 10126  0030D6  D027               	goto	l875
 10127                           
 10128                           ;tff.c: 477: if (c == '|') break;
 10129  0030D8  0E7C               	movlw	124
 10130  0030DA  182B               	xorwf	make_dirfile@c^0,w,c
 10131  0030DC  B4D8               	btfsc	status,2,c
 10132  0030DE  D030               	goto	l7083
 10133                           
 10134                           ;tff.c: 478: if (c >= '[' && c <= ']') break;
 10135  0030E0  0E5A               	movlw	90
 10136  0030E2  642B               	cpfsgt	make_dirfile@c^0,c
 10137  0030E4  D004               	goto	l7055
 10138  0030E6  0E5E               	movlw	94
 10139  0030E8  602B               	cpfslt	make_dirfile@c^0,c
 10140  0030EA  D001               	goto	l7055
 10141  0030EC  D029               	goto	l7083
 10142  0030EE                     l7055:
 10143  0030EE  0E40               	movlw	64
 10144  0030F0  642B               	cpfsgt	make_dirfile@c^0,c
 10145  0030F2  D00A               	goto	l7065
 10146  0030F4  0E5B               	movlw	91
 10147  0030F6  602B               	cpfslt	make_dirfile@c^0,c
 10148  0030F8  D007               	goto	l7065
 10149                           
 10150                           ;tff.c: 480: (t == 8) ? (b &= 0xF7) : (b &= 0xEF);
 10151  0030FA  0E08               	movlw	8
 10152  0030FC  1828               	xorwf	make_dirfile@t^0,w,c
 10153  0030FE  A4D8               	btfss	status,2,c
 10154  003100  D002               	goto	l7063
 10155  003102  9627               	bcf	make_dirfile@b^0,3,c
 10156  003104  D001               	goto	l7065
 10157  003106                     l7063:
 10158  003106  9827               	bcf	make_dirfile@b^0,4,c
 10159  003108                     l7065:
 10160                           
 10161                           ;tff.c: 481: if (c >= 'a' && c <= 'z') {
 10162  003108  0E60               	movlw	96
 10163  00310A  642B               	cpfsgt	make_dirfile@c^0,c
 10164  00310C  D00C               	goto	l875
 10165  00310E  0E7B               	movlw	123
 10166  003110  602B               	cpfslt	make_dirfile@c^0,c
 10167  003112  D009               	goto	l875
 10168                           
 10169                           ;tff.c: 483: if (1) (t == 8) ? (a |= 0x08) : (a |= 0x10);
 10170  003114  0E20               	movlw	32
 10171  003116  5E2B               	subwf	make_dirfile@c^0,f,c
 10172  003118  0E08               	movlw	8
 10173  00311A  1828               	xorwf	make_dirfile@t^0,w,c
 10174  00311C  A4D8               	btfss	status,2,c
 10175  00311E  D002               	goto	l7073
 10176  003120  8629               	bsf	make_dirfile@a^0,3,c
 10177  003122  D001               	goto	l875
 10178  003124                     l7073:
 10179  003124  8829               	bsf	make_dirfile@a^0,4,c
 10180  003126                     l875:
 10181                           
 10182                           ;tff.c: 487: a &= 0xFE;
 10183  003126  9029               	bcf	make_dirfile@a^0,0,c
 10184                           
 10185                           ;tff.c: 489: if (n >= t) break;
 10186  003128  5028               	movf	make_dirfile@t^0,w,c
 10187  00312A  5C2A               	subwf	make_dirfile@n^0,w,c
 10188  00312C  B0D8               	btfsc	status,0,c
 10189  00312E  D008               	goto	l7083
 10190                           
 10191                           ;tff.c: 490: dirname[n++] = c;
 10192  003130  5022               	movf	make_dirfile@dirname^0,w,c
 10193  003132  242A               	addwf	make_dirfile@n^0,w,c
 10194  003134  6ED9               	movwf	fsr2l,c
 10195  003136  6ADA               	clrf	fsr2h,c
 10196  003138  C02B  FFDF         	movff	make_dirfile@c,indf2
 10197  00313C  2A2A               	incf	make_dirfile@n^0,f,c
 10198  00313E  D76A               	goto	l6975
 10199  003140                     l7083:
 10200                           
 10201                           ;tff.c: 492: return 1;
 10202  003140  0E01               	movlw	1
 10203  003142  0012               	return		;funcret
 10204  003144                     __end_of_make_dirfile:
 10205                           	callstack 0
 10206                           
 10207 ;; *************** function _reserve_direntry *****************
 10208 ;; Defined at:
 10209 ;;		line 568 in file "bibliotecas/tff.c"
 10210 ;; Parameters:    Size  Location     Type
 10211 ;;  dj              1   78[BANK0 ] PTR struct _DIR_E
 10212 ;;		 -> f_open@dj(14), 
 10213 ;;  dir             1   79[BANK0 ] PTR PTR unsigned char 
 10214 ;;		 -> f_open@dir(2), 
 10215 ;; Auto vars:     Size  Location     Type
 10216 ;;  sector          4   84[BANK0 ] unsigned long 
 10217 ;;  fs              2   94[BANK0 ] PTR struct _FATFS
 10218 ;;		 -> NULL(0), fs(544), 
 10219 ;;  clust           2   92[BANK0 ] unsigned short 
 10220 ;;  dptr            2   89[BANK0 ] PTR unsigned char 
 10221 ;;		 -> fs.win(512), NULL(0), fs(544), 
 10222 ;;  c               1   91[BANK0 ] unsigned char 
 10223 ;;  n               1   88[BANK0 ] unsigned char 
 10224 ;; Return value:  Size  Location     Type
 10225 ;;                  1    wreg      enum E155
 10226 ;; Registers used:
 10227 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10228 ;; Tracked objects:
 10229 ;;		On entry : 3F/0
 10230 ;;		On exit  : 3F/0
 10231 ;;		Unchanged: 0/0
 10232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10233 ;;      Params:         0       2       0       0       0       0       0       0       0
 10234 ;;      Locals:         0      12       0       0       0       0       0       0       0
 10235 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10236 ;;      Totals:         0      18       0       0       0       0       0       0       0
 10237 ;;Total ram usage:       18 bytes
 10238 ;; Hardware stack levels used:    1
 10239 ;; Hardware stack levels required when called:   11
 10240 ;; This function calls:
 10241 ;;		_clust2sect
 10242 ;;		_create_chain
 10243 ;;		_disk_write
 10244 ;;		_memset
 10245 ;;		_move_window
 10246 ;;		_next_dir_entry
 10247 ;; This function is called by:
 10248 ;;		_f_open
 10249 ;; This function uses a non-reentrant model
 10250 ;;
 10251                           
 10252                           	psect	text52
 10253  001BA4                     __ptext52:
 10254                           	callstack 0
 10255  001BA4                     _reserve_direntry:
 10256                           	callstack 14
 10257                           
 10258                           ; BSR set to: 0
 10259                           ;tff.c: 573: CLUST clust;;tff.c: 574: DWORD sector;;tff.c: 575: BYTE c, n, *dptr;;tff.c:
      +                           576: FATFS *fs = dj->fs;
 10260                           
 10261                           ;incstack = 0
 10262  001BA4  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10263  001BA6  6ED9               	movwf	fsr2l,c
 10264  001BA8  6ADA               	clrf	fsr2h,c
 10265  001BAA  0E04               	movlw	4
 10266  001BAC  26D9               	addwf	fsr2l,f,c
 10267  001BAE  CFDE F0BE          	movff	postinc2,reserve_direntry@fs
 10268  001BB2  CFDD F0BF          	movff	postdec2,reserve_direntry@fs+1
 10269                           
 10270                           ;tff.c: 580: clust = dj->sclust;
 10271  001BB6  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10272  001BB8  6ED9               	movwf	fsr2l,c
 10273  001BBA  6ADA               	clrf	fsr2h,c
 10274  001BBC  0E06               	movlw	6
 10275  001BBE  26D9               	addwf	fsr2l,f,c
 10276  001BC0  CFDE F0BC          	movff	postinc2,reserve_direntry@clust
 10277  001BC4  CFDD F0BD          	movff	postdec2,reserve_direntry@clust+1
 10278                           
 10279                           ; BSR set to: 0
 10280                           ;tff.c: 581: if (clust != 0) {
 10281  001BC8  51BC               	movf	reserve_direntry@clust& (0+255),w,b
 10282  001BCA  11BD               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 10283  001BCC  B4D8               	btfsc	status,2,c
 10284  001BCE  D01E               	goto	l10705
 10285                           
 10286                           ; BSR set to: 0
 10287                           ;tff.c: 582: dj->clust = clust;
 10288  001BD0  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10289  001BD2  6ED9               	movwf	fsr2l,c
 10290  001BD4  6ADA               	clrf	fsr2h,c
 10291  001BD6  0E08               	movlw	8
 10292  001BD8  26D9               	addwf	fsr2l,f,c
 10293  001BDA  C0BC  FFDE         	movff	reserve_direntry@clust,postinc2
 10294  001BDE  C0BD  FFDD         	movff	reserve_direntry@clust+1,postdec2
 10295                           
 10296                           ; BSR set to: 0
 10297                           ;tff.c: 583: dj->sect = clust2sect(clust);
 10298  001BE2  C0BC  F025         	movff	reserve_direntry@clust,clust2sect@clust
 10299  001BE6  C0BD  F026         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 10300  001BEA  EC02  F01F         	call	_clust2sect	;wreg free
 10301  001BEE  0100               	movlb	0	; () banked
 10302  001BF0  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10303  001BF2  6ED9               	movwf	fsr2l,c
 10304  001BF4  6ADA               	clrf	fsr2h,c
 10305  001BF6  0E0A               	movlw	10
 10306  001BF8  26D9               	addwf	fsr2l,f,c
 10307  001BFA  C025  FFDE         	movff	?_clust2sect,postinc2
 10308  001BFE  C026  FFDE         	movff	?_clust2sect+1,postinc2
 10309  001C02  C027  FFDE         	movff	?_clust2sect+2,postinc2
 10310  001C06  C028  FFDE         	movff	?_clust2sect+3,postinc2
 10311                           
 10312                           ;tff.c: 584: } else {
 10313  001C0A  D013               	goto	l10707
 10314  001C0C                     l10705:
 10315                           
 10316                           ; BSR set to: 0
 10317                           ;tff.c: 585: dj->sect = fs->dirbase;
 10318  001C0C  EE20 F00C          	lfsr	2,12
 10319  001C10  51BE               	movf	reserve_direntry@fs& (0+255),w,b
 10320  001C12  26D9               	addwf	fsr2l,f,c
 10321  001C14  51BF               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 10322  001C16  22DA               	addwfc	fsr2h,f,c
 10323  001C18  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10324  001C1A  6EE1               	movwf	fsr1l,c
 10325  001C1C  6AE2               	clrf	fsr1h,c
 10326  001C1E  0E0A               	movlw	10
 10327  001C20  26E1               	addwf	fsr1l,f,c
 10328  001C22  CFDE FFE6          	movff	postinc2,postinc1
 10329  001C26  CFDE FFE6          	movff	postinc2,postinc1
 10330  001C2A  CFDE FFE6          	movff	postinc2,postinc1
 10331  001C2E  CFDE FFE6          	movff	postinc2,postinc1
 10332  001C32                     l10707:
 10333                           
 10334                           ; BSR set to: 0
 10335                           ;tff.c: 586: };tff.c: 587: dj->index = 0;
 10336  001C32  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10337  001C34  6ED9               	movwf	fsr2l,c
 10338  001C36  6ADA               	clrf	fsr2h,c
 10339  001C38  0E02               	movlw	2
 10340  001C3A  26D9               	addwf	fsr2l,f,c
 10341  001C3C  0E00               	movlw	0
 10342  001C3E  6EDE               	movwf	postinc2,c
 10343  001C40  0E00               	movlw	0
 10344  001C42  6EDD               	movwf	postdec2,c
 10345  001C44                     l10709:
 10346                           
 10347                           ;tff.c: 590: if (!move_window(dj->sect)) return FR_RW_ERROR;
 10348  001C44  0100               	movlb	0	; () banked
 10349  001C46  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10350  001C48  6ED9               	movwf	fsr2l,c
 10351  001C4A  6ADA               	clrf	fsr2h,c
 10352  001C4C  0E0A               	movlw	10
 10353  001C4E  26D9               	addwf	fsr2l,f,c
 10354  001C50  CFDE F073          	movff	postinc2,move_window@sector
 10355  001C54  CFDE F074          	movff	postinc2,move_window@sector+1
 10356  001C58  CFDE F075          	movff	postinc2,move_window@sector+2
 10357  001C5C  CFDE F076          	movff	postinc2,move_window@sector+3
 10358  001C60  ECA8  F015         	call	_move_window	;wreg free
 10359  001C64  0900               	iorlw	0
 10360  001C66  A4D8               	btfss	status,2,c
 10361  001C68  D002               	goto	l10715
 10362  001C6A                     u12310:
 10363                           
 10364                           ; BSR set to: 0
 10365  001C6A  0E08               	movlw	8
 10366  001C6C  0012               	return	
 10367  001C6E                     l10715:
 10368                           
 10369                           ; BSR set to: 0
 10370                           ;tff.c: 591: dptr = &fs->win[(dj->index & 15) * 32];
 10371  001C6E  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10372  001C70  6ED9               	movwf	fsr2l,c
 10373  001C72  6ADA               	clrf	fsr2h,c
 10374  001C74  0E02               	movlw	2
 10375  001C76  26D9               	addwf	fsr2l,f,c
 10376  001C78  CFDE F0B0          	movff	postinc2,??_reserve_direntry
 10377  001C7C  CFDD F0B1          	movff	postdec2,??_reserve_direntry+1
 10378  001C80  0E0F               	movlw	15
 10379  001C82  17B0               	andwf	??_reserve_direntry& (0+255),f,b
 10380  001C84  0E00               	movlw	0
 10381  001C86  17B1               	andwf	(??_reserve_direntry+1)& (0+255),f,b
 10382  001C88  0E05               	movlw	5
 10383  001C8A                     u12325:
 10384  001C8A  90D8               	bcf	status,0,c
 10385  001C8C  37B0               	rlcf	??_reserve_direntry& (0+255),f,b
 10386  001C8E  37B1               	rlcf	(??_reserve_direntry+1)& (0+255),f,b
 10387  001C90  2EE8               	decfsz	wreg,f,c
 10388  001C92  D7FB               	goto	u12325
 10389  001C94  C0BE  F0B2         	movff	reserve_direntry@fs,??_reserve_direntry+2
 10390  001C98  C0BF  F0B3         	movff	reserve_direntry@fs+1,??_reserve_direntry+3
 10391  001C9C  51B0               	movf	??_reserve_direntry& (0+255),w,b
 10392  001C9E  27B2               	addwf	(??_reserve_direntry+2)& (0+255),f,b
 10393  001CA0  51B1               	movf	(??_reserve_direntry+1)& (0+255),w,b
 10394  001CA2  23B3               	addwfc	(??_reserve_direntry+3)& (0+255),f,b
 10395  001CA4  0E20               	movlw	32
 10396  001CA6  25B2               	addwf	(??_reserve_direntry+2)& (0+255),w,b
 10397  001CA8  6FB9               	movwf	reserve_direntry@dptr& (0+255),b
 10398  001CAA  0E00               	movlw	0
 10399  001CAC  21B3               	addwfc	(??_reserve_direntry+3)& (0+255),w,b
 10400  001CAE  6FBA               	movwf	(reserve_direntry@dptr+1)& (0+255),b
 10401                           
 10402                           ; BSR set to: 0
 10403                           ;tff.c: 592: c = dptr[0];
 10404  001CB0  C0B9  FFD9         	movff	reserve_direntry@dptr,fsr2l
 10405  001CB4  C0BA  FFDA         	movff	reserve_direntry@dptr+1,fsr2h
 10406  001CB8  50DF               	movf	indf2,w,c
 10407  001CBA  6FBB               	movwf	reserve_direntry@c& (0+255),b
 10408                           
 10409                           ; BSR set to: 0
 10410                           ;tff.c: 593: if (c == 0 || c == 0xE5) {
 10411  001CBC  51BB               	movf	reserve_direntry@c& (0+255),w,b
 10412  001CBE  B4D8               	btfsc	status,2,c
 10413  001CC0  D004               	goto	u12340
 10414                           
 10415                           ; BSR set to: 0
 10416  001CC2  0EE5               	movlw	229
 10417  001CC4  19BB               	xorwf	reserve_direntry@c& (0+255),w,b
 10418  001CC6  A4D8               	btfss	status,2,c
 10419  001CC8  D009               	goto	l10729
 10420  001CCA                     u12340:
 10421                           
 10422                           ; BSR set to: 0
 10423                           ;tff.c: 594: *dir = dptr; return FR_OK;
 10424  001CCA  51AF               	movf	reserve_direntry@dir& (0+255),w,b
 10425  001CCC  6ED9               	movwf	fsr2l,c
 10426  001CCE  6ADA               	clrf	fsr2h,c
 10427  001CD0  C0B9  FFDE         	movff	reserve_direntry@dptr,postinc2
 10428  001CD4  C0BA  FFDD         	movff	reserve_direntry@dptr+1,postdec2
 10429  001CD8                     l10725:
 10430                           
 10431                           ; BSR set to: 0
 10432  001CD8  0E00               	movlw	0
 10433  001CDA  0012               	return	
 10434  001CDC                     l10729:
 10435                           
 10436                           ; BSR set to: 0
 10437                           ;tff.c: 595: };tff.c: 596: } while (next_dir_entry(dj));
 10438  001CDC  C0AE  F031         	movff	reserve_direntry@dj,next_dir_entry@dj
 10439  001CE0  EC43  F017         	call	_next_dir_entry	;wreg free
 10440  001CE4  0900               	iorlw	0
 10441  001CE6  A4D8               	btfss	status,2,c
 10442  001CE8  D7AD               	goto	l10709
 10443                           
 10444                           ;tff.c: 600: if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
 10445  001CEA  0100               	movlb	0	; () banked
 10446  001CEC  51BC               	movf	reserve_direntry@clust& (0+255),w,b
 10447  001CEE  11BD               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 10448  001CF0  B4D8               	btfsc	status,2,c
 10449  001CF2  D013               	goto	u12370
 10450                           
 10451                           ; BSR set to: 0
 10452  001CF4  51AE               	movf	reserve_direntry@dj& (0+255),w,b
 10453  001CF6  6ED9               	movwf	fsr2l,c
 10454  001CF8  6ADA               	clrf	fsr2h,c
 10455  001CFA  0E08               	movlw	8
 10456  001CFC  26D9               	addwf	fsr2l,f,c
 10457  001CFE  CFDE F0A0          	movff	postinc2,create_chain@clust
 10458  001D02  CFDD F0A1          	movff	postdec2,create_chain@clust+1
 10459  001D06  EC7D  F016         	call	_create_chain	;wreg free
 10460  001D0A  C0A0  F0BC         	movff	?_create_chain,reserve_direntry@clust
 10461  001D0E  C0A1  F0BD         	movff	?_create_chain+1,reserve_direntry@clust+1
 10462  001D12  51BC               	movf	reserve_direntry@clust& (0+255),w,b
 10463  001D14  11BD               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 10464  001D16  A4D8               	btfss	status,2,c
 10465  001D18  D002               	goto	l10739
 10466  001D1A                     u12370:
 10467                           
 10468                           ; BSR set to: 0
 10469  001D1A  0E06               	movlw	6
 10470  001D1C  0012               	return	
 10471  001D1E                     l10739:
 10472                           
 10473                           ; BSR set to: 0
 10474                           ;tff.c: 601: if (clust == 1 || !move_window(0)) return FR_RW_ERROR;
 10475  001D1E  05BC               	decf	reserve_direntry@clust& (0+255),w,b
 10476  001D20  11BD               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 10477  001D22  B4D8               	btfsc	status,2,c
 10478  001D24  D7A2               	goto	u12310
 10479                           
 10480                           ; BSR set to: 0
 10481  001D26  0E00               	movlw	0
 10482  001D28  6F73               	movwf	move_window@sector& (0+255),b
 10483  001D2A  0E00               	movlw	0
 10484  001D2C  6F74               	movwf	(move_window@sector+1)& (0+255),b
 10485  001D2E  0E00               	movlw	0
 10486  001D30  6F75               	movwf	(move_window@sector+2)& (0+255),b
 10487  001D32  0E00               	movlw	0
 10488  001D34  6F76               	movwf	(move_window@sector+3)& (0+255),b
 10489  001D36  ECA8  F015         	call	_move_window	;wreg free
 10490  001D3A  0900               	iorlw	0
 10491  001D3C  B4D8               	btfsc	status,2,c
 10492  001D3E  D795               	goto	u12310
 10493                           
 10494                           ; BSR set to: 0
 10495                           ;tff.c: 603: fs->winsect = sector = clust2sect(clust);
 10496  001D40  C0BC  F025         	movff	reserve_direntry@clust,clust2sect@clust
 10497  001D44  C0BD  F026         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 10498  001D48  EC02  F01F         	call	_clust2sect	;wreg free
 10499  001D4C  C025  F0B4         	movff	?_clust2sect,reserve_direntry@sector
 10500  001D50  C026  F0B5         	movff	?_clust2sect+1,reserve_direntry@sector+1
 10501  001D54  C027  F0B6         	movff	?_clust2sect+2,reserve_direntry@sector+2
 10502  001D58  C028  F0B7         	movff	?_clust2sect+3,reserve_direntry@sector+3
 10503  001D5C  0100               	movlb	0	; () banked
 10504  001D5E  EE20 F004          	lfsr	2,4
 10505  001D62  51BE               	movf	reserve_direntry@fs& (0+255),w,b
 10506  001D64  26D9               	addwf	fsr2l,f,c
 10507  001D66  51BF               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 10508  001D68  22DA               	addwfc	fsr2h,f,c
 10509  001D6A  C0B4  FFDE         	movff	reserve_direntry@sector,postinc2
 10510  001D6E  C0B5  FFDE         	movff	reserve_direntry@sector+1,postinc2
 10511  001D72  C0B6  FFDE         	movff	reserve_direntry@sector+2,postinc2
 10512  001D76  C0B7  FFDE         	movff	reserve_direntry@sector+3,postinc2
 10513                           
 10514                           ;tff.c: 604: memset(fs->win, 0, 512U);
 10515  001D7A  0E20               	movlw	32
 10516  001D7C  25BE               	addwf	reserve_direntry@fs& (0+255),w,b
 10517  001D7E  6E19               	movwf	memset@p1^0,c
 10518  001D80  0E00               	movlw	0
 10519  001D82  21BF               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 10520  001D84  6E1A               	movwf	(memset@p1+1)^0,c
 10521  001D86  0E00               	movlw	0
 10522  001D88  6E1C               	movwf	(memset@c+1)^0,c
 10523  001D8A  0E00               	movlw	0
 10524  001D8C  6E1B               	movwf	memset@c^0,c
 10525  001D8E  0E02               	movlw	2
 10526  001D90  6E1E               	movwf	(memset@n+1)^0,c
 10527  001D92  0E00               	movlw	0
 10528  001D94  6E1D               	movwf	memset@n^0,c
 10529  001D96  EC71  F028         	call	_memset	;wreg free
 10530                           
 10531                           ;tff.c: 605: for (n = fs->csize; n; n--) {
 10532  001D9A  0100               	movlb	0	; () banked
 10533  001D9C  EE20 F01D          	lfsr	2,29
 10534  001DA0  51BE               	movf	reserve_direntry@fs& (0+255),w,b
 10535  001DA2  26D9               	addwf	fsr2l,f,c
 10536  001DA4  51BF               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 10537  001DA6  22DA               	addwfc	fsr2h,f,c
 10538  001DA8  50DF               	movf	indf2,w,c
 10539  001DAA  6FB8               	movwf	reserve_direntry@n& (0+255),b
 10540  001DAC  D01D               	goto	l10761
 10541  001DAE                     l10751:
 10542                           
 10543                           ; BSR set to: 0
 10544                           ;tff.c: 606: if (disk_write(0, fs->win, sector, 1) != RES_OK)
 10545  001DAE  0E20               	movlw	32
 10546  001DB0  25BE               	addwf	reserve_direntry@fs& (0+255),w,b
 10547  001DB2  6F68               	movwf	disk_write@buff& (0+255),b
 10548  001DB4  0E00               	movlw	0
 10549  001DB6  21BF               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 10550  001DB8  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 10551  001DBA  C0B4  F06A         	movff	reserve_direntry@sector,disk_write@sector
 10552  001DBE  C0B5  F06B         	movff	reserve_direntry@sector+1,disk_write@sector+1
 10553  001DC2  C0B6  F06C         	movff	reserve_direntry@sector+2,disk_write@sector+2
 10554  001DC6  C0B7  F06D         	movff	reserve_direntry@sector+3,disk_write@sector+3
 10555  001DCA  0E01               	movlw	1
 10556  001DCC  6F6E               	movwf	disk_write@count& (0+255),b
 10557  001DCE  0E00               	movlw	0
 10558  001DD0  EC48  F026         	call	_disk_write
 10559  001DD4  0900               	iorlw	0
 10560  001DD6  A4D8               	btfss	status,2,c
 10561  001DD8  D748               	goto	u12310
 10562                           
 10563                           ; BSR set to: 0
 10564                           ;tff.c: 608: sector++;
 10565  001DDA  0E01               	movlw	1
 10566  001DDC  27B4               	addwf	reserve_direntry@sector& (0+255),f,b
 10567  001DDE  0E00               	movlw	0
 10568  001DE0  23B5               	addwfc	(reserve_direntry@sector+1)& (0+255),f,b
 10569  001DE2  23B6               	addwfc	(reserve_direntry@sector+2)& (0+255),f,b
 10570  001DE4  23B7               	addwfc	(reserve_direntry@sector+3)& (0+255),f,b
 10571                           
 10572                           ; BSR set to: 0
 10573  001DE6  07B8               	decf	reserve_direntry@n& (0+255),f,b
 10574  001DE8                     l10761:
 10575                           
 10576                           ; BSR set to: 0
 10577  001DE8  51B8               	movf	reserve_direntry@n& (0+255),w,b
 10578  001DEA  A4D8               	btfss	status,2,c
 10579  001DEC  D7E0               	goto	l10751
 10580                           
 10581                           ; BSR set to: 0
 10582                           ;tff.c: 609: };tff.c: 610: fs->winflag = 1;
 10583  001DEE  EE20 F01F          	lfsr	2,31
 10584  001DF2  51BE               	movf	reserve_direntry@fs& (0+255),w,b
 10585  001DF4  26D9               	addwf	fsr2l,f,c
 10586  001DF6  51BF               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 10587  001DF8  22DA               	addwfc	fsr2h,f,c
 10588  001DFA  0E01               	movlw	1
 10589  001DFC  6EDF               	movwf	indf2,c
 10590                           
 10591                           ;tff.c: 611: *dir = fs->win;
 10592  001DFE  0E20               	movlw	32
 10593  001E00  25BE               	addwf	reserve_direntry@fs& (0+255),w,b
 10594  001E02  6FB0               	movwf	??_reserve_direntry& (0+255),b
 10595  001E04  0E00               	movlw	0
 10596  001E06  21BF               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 10597  001E08  6FB1               	movwf	(??_reserve_direntry+1)& (0+255),b
 10598  001E0A  51AF               	movf	reserve_direntry@dir& (0+255),w,b
 10599  001E0C  6ED9               	movwf	fsr2l,c
 10600  001E0E  6ADA               	clrf	fsr2h,c
 10601  001E10  C0B0  FFDE         	movff	??_reserve_direntry,postinc2
 10602  001E14  C0B1  FFDD         	movff	??_reserve_direntry+1,postdec2
 10603  001E18  D75F               	goto	l10725
 10604  001E1A                     __end_of_reserve_direntry:
 10605                           	callstack 0
 10606                           
 10607 ;; *************** function _next_dir_entry *****************
 10608 ;; Defined at:
 10609 ;;		line 359 in file "bibliotecas/tff.c"
 10610 ;; Parameters:    Size  Location     Type
 10611 ;;  dj              1   48[COMRAM] PTR struct _DIR_E
 10612 ;;		 -> f_open@dj(14), 
 10613 ;; Auto vars:     Size  Location     Type
 10614 ;;  idx             2   70[BANK0 ] unsigned short 
 10615 ;;  clust           2   68[BANK0 ] unsigned short 
 10616 ;; Return value:  Size  Location     Type
 10617 ;;                  1    wreg      enum E105
 10618 ;; Registers used:
 10619 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10620 ;; Tracked objects:
 10621 ;;		On entry : 0/0
 10622 ;;		On exit  : 0/0
 10623 ;;		Unchanged: 0/0
 10624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10625 ;;      Params:         1       0       0       0       0       0       0       0       0
 10626 ;;      Locals:         0       4       0       0       0       0       0       0       0
 10627 ;;      Temps:          0       7       0       0       0       0       0       0       0
 10628 ;;      Totals:         1      11       0       0       0       0       0       0       0
 10629 ;;Total ram usage:       12 bytes
 10630 ;; Hardware stack levels used:    1
 10631 ;; Hardware stack levels required when called:   10
 10632 ;; This function calls:
 10633 ;;		_clust2sect
 10634 ;;		_get_cluster
 10635 ;; This function is called by:
 10636 ;;		_trace_path
 10637 ;;		_reserve_direntry
 10638 ;; This function uses a non-reentrant model
 10639 ;;
 10640                           
 10641                           	psect	text53
 10642  002E86                     __ptext53:
 10643                           	callstack 0
 10644  002E86                     _next_dir_entry:
 10645                           	callstack 14
 10646                           
 10647                           ;tff.c: 363: CLUST clust;;tff.c: 364: WORD idx;;tff.c: 367: idx = dj->index + 1;
 10648                           
 10649                           ; BSR set to: 0
 10650                           ;incstack = 0
 10651  002E86  5031               	movf	next_dir_entry@dj^0,w,c
 10652  002E88  6ED9               	movwf	fsr2l,c
 10653  002E8A  6ADA               	clrf	fsr2h,c
 10654  002E8C  0E02               	movlw	2
 10655  002E8E  26D9               	addwf	fsr2l,f,c
 10656  002E90  CFDE F09D          	movff	postinc2,??_next_dir_entry
 10657  002E94  CFDD F09E          	movff	postdec2,??_next_dir_entry+1
 10658  002E98  0E01               	movlw	1
 10659  002E9A  0100               	movlb	0	; () banked
 10660  002E9C  259D               	addwf	??_next_dir_entry& (0+255),w,b
 10661  002E9E  6FA6               	movwf	next_dir_entry@idx& (0+255),b
 10662  002EA0  0E00               	movlw	0
 10663  002EA2  219E               	addwfc	(??_next_dir_entry+1)& (0+255),w,b
 10664  002EA4  6FA7               	movwf	(next_dir_entry@idx+1)& (0+255),b
 10665                           
 10666                           ; BSR set to: 0
 10667                           ;tff.c: 368: if ((idx & 15) == 0) {
 10668  002EA6  C0A6  F09D         	movff	next_dir_entry@idx,??_next_dir_entry
 10669  002EAA  0E0F               	movlw	15
 10670  002EAC  179D               	andwf	??_next_dir_entry& (0+255),f,b
 10671  002EAE  A4D8               	btfss	status,2,c
 10672  002EB0  D091               	goto	l10381
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;tff.c: 369: dj->sect++;
 10676  002EB2  5031               	movf	next_dir_entry@dj^0,w,c
 10677  002EB4  6ED9               	movwf	fsr2l,c
 10678  002EB6  6ADA               	clrf	fsr2h,c
 10679  002EB8  0E0A               	movlw	10
 10680  002EBA  26D9               	addwf	fsr2l,f,c
 10681  002EBC  2ADE               	incf	postinc2,f,c
 10682  002EBE  0E00               	movlw	0
 10683  002EC0  22DE               	addwfc	postinc2,f,c
 10684  002EC2  22DE               	addwfc	postinc2,f,c
 10685  002EC4  22DE               	addwfc	postinc2,f,c
 10686                           
 10687                           ;tff.c: 370: if (dj->clust == 0) {
 10688  002EC6  5031               	movf	next_dir_entry@dj^0,w,c
 10689  002EC8  6ED9               	movwf	fsr2l,c
 10690  002ECA  6ADA               	clrf	fsr2h,c
 10691  002ECC  0E08               	movlw	8
 10692  002ECE  26D9               	addwf	fsr2l,f,c
 10693  002ED0  50DE               	movf	postinc2,w,c
 10694  002ED2  10DE               	iorwf	postinc2,w,c
 10695  002ED4  A4D8               	btfss	status,2,c
 10696  002ED6  D013               	goto	l10365
 10697                           
 10698                           ; BSR set to: 0
 10699                           ;tff.c: 371: if (idx >= dj->fs->n_rootdir) return FALSE;
 10700  002ED8  5031               	movf	next_dir_entry@dj^0,w,c
 10701  002EDA  6ED9               	movwf	fsr2l,c
 10702  002EDC  6ADA               	clrf	fsr2h,c
 10703  002EDE  0E04               	movlw	4
 10704  002EE0  26D9               	addwf	fsr2l,f,c
 10705  002EE2  EE10 F002          	lfsr	1,2
 10706  002EE6  50DE               	movf	postinc2,w,c
 10707  002EE8  26E1               	addwf	fsr1l,f,c
 10708  002EEA  50DD               	movf	postdec2,w,c
 10709  002EEC  22E2               	addwfc	fsr1h,f,c
 10710  002EEE  50E6               	movf	postinc1,w,c
 10711  002EF0  5DA6               	subwf	next_dir_entry@idx& (0+255),w,b
 10712  002EF2  50E6               	movf	postinc1,w,c
 10713  002EF4  59A7               	subwfb	(next_dir_entry@idx+1)& (0+255),w,b
 10714  002EF6  A0D8               	btfss	status,0,c
 10715  002EF8  D06D               	goto	l10381
 10716  002EFA                     u11740:
 10717                           
 10718                           ; BSR set to: 0
 10719  002EFA  0E00               	movlw	0
 10720  002EFC  0012               	return	
 10721  002EFE                     l10365:
 10722                           
 10723                           ; BSR set to: 0
 10724                           ;tff.c: 373: if (((idx / 16) & (dj->fs->csize - 1)) == 0) {
 10725  002EFE  C0A6  F09D         	movff	next_dir_entry@idx,??_next_dir_entry
 10726  002F02  C0A7  F09E         	movff	next_dir_entry@idx+1,??_next_dir_entry+1
 10727  002F06  0E04               	movlw	4
 10728  002F08  6F9F               	movwf	(??_next_dir_entry+2)& (0+255),b
 10729  002F0A                     u11755:
 10730  002F0A  90D8               	bcf	status,0,c
 10731  002F0C  339E               	rrcf	(??_next_dir_entry+1)& (0+255),f,b
 10732  002F0E  339D               	rrcf	??_next_dir_entry& (0+255),f,b
 10733  002F10  2F9F               	decfsz	(??_next_dir_entry+2)& (0+255),f,b
 10734  002F12  D7FB               	goto	u11755
 10735  002F14  0EFF               	movlw	255
 10736  002F16  6FA0               	movwf	(??_next_dir_entry+3)& (0+255),b
 10737  002F18  0EFF               	movlw	255
 10738  002F1A  6FA1               	movwf	(??_next_dir_entry+4)& (0+255),b
 10739  002F1C  5031               	movf	next_dir_entry@dj^0,w,c
 10740  002F1E  6ED9               	movwf	fsr2l,c
 10741  002F20  6ADA               	clrf	fsr2h,c
 10742  002F22  0E04               	movlw	4
 10743  002F24  26D9               	addwf	fsr2l,f,c
 10744  002F26  EE10 F01D          	lfsr	1,29
 10745  002F2A  50DE               	movf	postinc2,w,c
 10746  002F2C  26E1               	addwf	fsr1l,f,c
 10747  002F2E  50DD               	movf	postdec2,w,c
 10748  002F30  22E2               	addwfc	fsr1h,f,c
 10749  002F32  50E7               	movf	indf1,w,c
 10750  002F34  6FA2               	movwf	(??_next_dir_entry+5)& (0+255),b
 10751  002F36  6BA3               	clrf	(??_next_dir_entry+6)& (0+255),b
 10752  002F38  51A0               	movf	(??_next_dir_entry+3)& (0+255),w,b
 10753  002F3A  27A2               	addwf	(??_next_dir_entry+5)& (0+255),f,b
 10754  002F3C  51A1               	movf	(??_next_dir_entry+4)& (0+255),w,b
 10755  002F3E  23A3               	addwfc	(??_next_dir_entry+6)& (0+255),f,b
 10756  002F40  519D               	movf	??_next_dir_entry& (0+255),w,b
 10757  002F42  17A2               	andwf	(??_next_dir_entry+5)& (0+255),f,b
 10758  002F44  519E               	movf	(??_next_dir_entry+1)& (0+255),w,b
 10759  002F46  17A3               	andwf	(??_next_dir_entry+6)& (0+255),f,b
 10760  002F48  51A2               	movf	(??_next_dir_entry+5)& (0+255),w,b
 10761  002F4A  11A3               	iorwf	(??_next_dir_entry+6)& (0+255),w,b
 10762  002F4C  A4D8               	btfss	status,2,c
 10763  002F4E  D042               	goto	l10381
 10764                           
 10765                           ; BSR set to: 0
 10766                           ;tff.c: 374: clust = get_cluster(dj->clust);
 10767  002F50  5031               	movf	next_dir_entry@dj^0,w,c
 10768  002F52  6ED9               	movwf	fsr2l,c
 10769  002F54  6ADA               	clrf	fsr2h,c
 10770  002F56  0E08               	movlw	8
 10771  002F58  26D9               	addwf	fsr2l,f,c
 10772  002F5A  CFDE F088          	movff	postinc2,get_cluster@clust
 10773  002F5E  CFDD F089          	movff	postdec2,get_cluster@clust+1
 10774  002F62  ECBC  F013         	call	_get_cluster	;wreg free
 10775  002F66  C088  F0A4         	movff	?_get_cluster,next_dir_entry@clust
 10776  002F6A  C089  F0A5         	movff	?_get_cluster+1,next_dir_entry@clust+1
 10777                           
 10778                           ; BSR set to: 0
 10779                           ;tff.c: 375: if (clust < 2 || clust >= dj->fs->max_clust)
 10780  002F6E  51A5               	movf	(next_dir_entry@clust+1)& (0+255),w,b
 10781  002F70  E104               	bnz	u11770
 10782  002F72  0E02               	movlw	2
 10783  002F74  5DA4               	subwf	next_dir_entry@clust& (0+255),w,b
 10784  002F76  A0D8               	btfss	status,0,c
 10785  002F78  D7C0               	goto	u11740
 10786  002F7A                     u11770:
 10787                           
 10788                           ; BSR set to: 0
 10789  002F7A  5031               	movf	next_dir_entry@dj^0,w,c
 10790  002F7C  6ED9               	movwf	fsr2l,c
 10791  002F7E  6ADA               	clrf	fsr2h,c
 10792  002F80  0E04               	movlw	4
 10793  002F82  26D9               	addwf	fsr2l,f,c
 10794  002F84  EE10 F016          	lfsr	1,22
 10795  002F88  50DE               	movf	postinc2,w,c
 10796  002F8A  26E1               	addwf	fsr1l,f,c
 10797  002F8C  50DD               	movf	postdec2,w,c
 10798  002F8E  22E2               	addwfc	fsr1h,f,c
 10799  002F90  50E6               	movf	postinc1,w,c
 10800  002F92  5DA4               	subwf	next_dir_entry@clust& (0+255),w,b
 10801  002F94  50E6               	movf	postinc1,w,c
 10802  002F96  59A5               	subwfb	(next_dir_entry@clust+1)& (0+255),w,b
 10803  002F98  B0D8               	btfsc	status,0,c
 10804  002F9A  D7AF               	goto	u11740
 10805                           
 10806                           ; BSR set to: 0
 10807                           ;tff.c: 377: dj->clust = clust;
 10808  002F9C  5031               	movf	next_dir_entry@dj^0,w,c
 10809  002F9E  6ED9               	movwf	fsr2l,c
 10810  002FA0  6ADA               	clrf	fsr2h,c
 10811  002FA2  0E08               	movlw	8
 10812  002FA4  26D9               	addwf	fsr2l,f,c
 10813  002FA6  C0A4  FFDE         	movff	next_dir_entry@clust,postinc2
 10814  002FAA  C0A5  FFDD         	movff	next_dir_entry@clust+1,postdec2
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;tff.c: 378: dj->sect = clust2sect(clust);
 10818  002FAE  C0A4  F025         	movff	next_dir_entry@clust,clust2sect@clust
 10819  002FB2  C0A5  F026         	movff	next_dir_entry@clust+1,clust2sect@clust+1
 10820  002FB6  EC02  F01F         	call	_clust2sect	;wreg free
 10821  002FBA  5031               	movf	next_dir_entry@dj^0,w,c
 10822  002FBC  6ED9               	movwf	fsr2l,c
 10823  002FBE  6ADA               	clrf	fsr2h,c
 10824  002FC0  0E0A               	movlw	10
 10825  002FC2  26D9               	addwf	fsr2l,f,c
 10826  002FC4  C025  FFDE         	movff	?_clust2sect,postinc2
 10827  002FC8  C026  FFDE         	movff	?_clust2sect+1,postinc2
 10828  002FCC  C027  FFDE         	movff	?_clust2sect+2,postinc2
 10829  002FD0  C028  FFDE         	movff	?_clust2sect+3,postinc2
 10830  002FD4                     l10381:
 10831                           
 10832                           ;tff.c: 379: };tff.c: 380: };tff.c: 381: };tff.c: 382: dj->index = idx;
 10833  002FD4  5031               	movf	next_dir_entry@dj^0,w,c
 10834  002FD6  6ED9               	movwf	fsr2l,c
 10835  002FD8  6ADA               	clrf	fsr2h,c
 10836  002FDA  0E02               	movlw	2
 10837  002FDC  26D9               	addwf	fsr2l,f,c
 10838  002FDE  C0A6  FFDE         	movff	next_dir_entry@idx,postinc2
 10839  002FE2  C0A7  FFDD         	movff	next_dir_entry@idx+1,postdec2
 10840                           
 10841                           ;tff.c: 383: return TRUE;
 10842  002FE6  0E01               	movlw	1
 10843  002FE8  0012               	return		;funcret
 10844  002FEA                     __end_of_next_dir_entry:
 10845                           	callstack 0
 10846                           
 10847 ;; *************** function _clust2sect *****************
 10848 ;; Defined at:
 10849 ;;		line 339 in file "bibliotecas/tff.c"
 10850 ;; Parameters:    Size  Location     Type
 10851 ;;  clust           2   36[COMRAM] unsigned short 
 10852 ;; Auto vars:     Size  Location     Type
 10853 ;;  fs              2   45[COMRAM] PTR struct _FATFS
 10854 ;;		 -> NULL(0), fs(544), 
 10855 ;; Return value:  Size  Location     Type
 10856 ;;                  4   36[COMRAM] unsigned long 
 10857 ;; Registers used:
 10858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10859 ;; Tracked objects:
 10860 ;;		On entry : 3F/0
 10861 ;;		On exit  : 0/0
 10862 ;;		Unchanged: 0/0
 10863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10864 ;;      Params:         4       0       0       0       0       0       0       0       0
 10865 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10866 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10867 ;;      Totals:        11       0       0       0       0       0       0       0       0
 10868 ;;Total ram usage:       11 bytes
 10869 ;; Hardware stack levels used:    1
 10870 ;; Hardware stack levels required when called:    4
 10871 ;; This function calls:
 10872 ;;		___lmul
 10873 ;; This function is called by:
 10874 ;;		_next_dir_entry
 10875 ;;		_trace_path
 10876 ;;		_reserve_direntry
 10877 ;;		_f_write
 10878 ;;		_f_read
 10879 ;; This function uses a non-reentrant model
 10880 ;;
 10881                           
 10882                           	psect	text54
 10883  003E04                     __ptext54:
 10884                           	callstack 0
 10885  003E04                     _clust2sect:
 10886                           	callstack 18
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;tff.c: 343: FATFS *fs = FatFs;
 10890                           
 10891                           ;incstack = 0
 10892  003E04  C038  F02E         	movff	_FatFs,clust2sect@fs
 10893  003E08  C039  F02F         	movff	_FatFs+1,clust2sect@fs+1
 10894                           
 10895                           ;tff.c: 346: clust -= 2;
 10896  003E0C  0E02               	movlw	2
 10897  003E0E  5E25               	subwf	clust2sect@clust^0,f,c
 10898  003E10  0E00               	movlw	0
 10899  003E12  5A26               	subwfb	(clust2sect@clust+1)^0,f,c
 10900                           
 10901                           ; BSR set to: 0
 10902                           ;tff.c: 347: if (clust >= (fs->max_clust - 2)) return 0;
 10903  003E14  0EFE               	movlw	254
 10904  003E16  6E29               	movwf	??_clust2sect^0,c
 10905  003E18  0EFF               	movlw	255
 10906  003E1A  6E2A               	movwf	(??_clust2sect+1)^0,c
 10907  003E1C  EE20 F016          	lfsr	2,22
 10908  003E20  502E               	movf	clust2sect@fs^0,w,c
 10909  003E22  26D9               	addwf	fsr2l,f,c
 10910  003E24  502F               	movf	(clust2sect@fs+1)^0,w,c
 10911  003E26  22DA               	addwfc	fsr2h,f,c
 10912  003E28  CFDE F02B          	movff	postinc2,??_clust2sect+2
 10913  003E2C  CFDD F02C          	movff	postdec2,??_clust2sect+3
 10914  003E30  5029               	movf	??_clust2sect^0,w,c
 10915  003E32  262B               	addwf	(??_clust2sect+2)^0,f,c
 10916  003E34  502A               	movf	(??_clust2sect+1)^0,w,c
 10917  003E36  222C               	addwfc	(??_clust2sect+3)^0,f,c
 10918  003E38  502B               	movf	(??_clust2sect+2)^0,w,c
 10919  003E3A  5C25               	subwf	clust2sect@clust^0,w,c
 10920  003E3C  502C               	movf	(??_clust2sect+3)^0,w,c
 10921  003E3E  5826               	subwfb	(clust2sect@clust+1)^0,w,c
 10922  003E40  A0D8               	btfss	status,0,c
 10923  003E42  D009               	goto	l9935
 10924                           
 10925                           ; BSR set to: 0
 10926  003E44  0E00               	movlw	0
 10927  003E46  6E25               	movwf	?_clust2sect^0,c
 10928  003E48  0E00               	movlw	0
 10929  003E4A  6E26               	movwf	(?_clust2sect+1)^0,c
 10930  003E4C  0E00               	movlw	0
 10931  003E4E  6E27               	movwf	(?_clust2sect+2)^0,c
 10932  003E50  0E00               	movlw	0
 10933  003E52  6E28               	movwf	(?_clust2sect+3)^0,c
 10934  003E54  0012               	return	
 10935  003E56                     l9935:
 10936                           
 10937                           ; BSR set to: 0
 10938                           ;tff.c: 348: return (DWORD)clust * fs->csize + fs->database;
 10939  003E56  EE20 F010          	lfsr	2,16
 10940  003E5A  502E               	movf	clust2sect@fs^0,w,c
 10941  003E5C  26D9               	addwf	fsr2l,f,c
 10942  003E5E  502F               	movf	(clust2sect@fs+1)^0,w,c
 10943  003E60  22DA               	addwfc	fsr2h,f,c
 10944  003E62  CFDE F029          	movff	postinc2,??_clust2sect
 10945  003E66  CFDE F02A          	movff	postinc2,??_clust2sect+1
 10946  003E6A  CFDE F02B          	movff	postinc2,??_clust2sect+2
 10947  003E6E  CFDE F02C          	movff	postinc2,??_clust2sect+3
 10948  003E72  C025  F019         	movff	clust2sect@clust,___lmul@multiplier
 10949  003E76  C026  F01A         	movff	clust2sect@clust+1,___lmul@multiplier+1
 10950  003E7A  6A1B               	clrf	(___lmul@multiplier+2)^0,c
 10951  003E7C  6A1C               	clrf	(___lmul@multiplier+3)^0,c
 10952  003E7E  EE20 F01D          	lfsr	2,29
 10953  003E82  502E               	movf	clust2sect@fs^0,w,c
 10954  003E84  26D9               	addwf	fsr2l,f,c
 10955  003E86  502F               	movf	(clust2sect@fs+1)^0,w,c
 10956  003E88  22DA               	addwfc	fsr2h,f,c
 10957  003E8A  50DF               	movf	indf2,w,c
 10958  003E8C  6E2D               	movwf	(??_clust2sect+4)^0,c
 10959  003E8E  502D               	movf	(??_clust2sect+4)^0,w,c
 10960  003E90  6E1D               	movwf	___lmul@multiplicand^0,c
 10961  003E92  6A1E               	clrf	(___lmul@multiplicand+1)^0,c
 10962  003E94  6A1F               	clrf	(___lmul@multiplicand+2)^0,c
 10963  003E96  6A20               	clrf	(___lmul@multiplicand+3)^0,c
 10964  003E98  ECCB  F025         	call	___lmul	;wreg free
 10965  003E9C  5029               	movf	??_clust2sect^0,w,c
 10966  003E9E  2419               	addwf	?___lmul^0,w,c
 10967  003EA0  6E25               	movwf	?_clust2sect^0,c
 10968  003EA2  502A               	movf	(??_clust2sect+1)^0,w,c
 10969  003EA4  201A               	addwfc	(?___lmul+1)^0,w,c
 10970  003EA6  6E26               	movwf	(?_clust2sect+1)^0,c
 10971  003EA8  502B               	movf	(??_clust2sect+2)^0,w,c
 10972  003EAA  201B               	addwfc	(?___lmul+2)^0,w,c
 10973  003EAC  6E27               	movwf	(?_clust2sect+2)^0,c
 10974  003EAE  502C               	movf	(??_clust2sect+3)^0,w,c
 10975  003EB0  201C               	addwfc	(?___lmul+3)^0,w,c
 10976  003EB2  6E28               	movwf	(?_clust2sect+3)^0,c
 10977  003EB4  0012               	return		;funcret
 10978  003EB6                     __end_of_clust2sect:
 10979                           	callstack 0
 10980                           
 10981 ;; *************** function _remove_chain *****************
 10982 ;; Defined at:
 10983 ;;		line 250 in file "bibliotecas/tff.c"
 10984 ;; Parameters:    Size  Location     Type
 10985 ;;  clust           2   64[BANK0 ] unsigned short 
 10986 ;; Auto vars:     Size  Location     Type
 10987 ;;  fs              2   70[BANK0 ] PTR struct _FATFS
 10988 ;;		 -> NULL(0), fs(544), 
 10989 ;;  nxt             2   68[BANK0 ] unsigned short 
 10990 ;; Return value:  Size  Location     Type
 10991 ;;                  1    wreg      enum E105
 10992 ;; Registers used:
 10993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10994 ;; Tracked objects:
 10995 ;;		On entry : 3F/0
 10996 ;;		On exit  : 3F/0
 10997 ;;		Unchanged: 0/0
 10998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10999 ;;      Params:         0       2       0       0       0       0       0       0       0
 11000 ;;      Locals:         0       4       0       0       0       0       0       0       0
 11001 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11002 ;;      Totals:         0       8       0       0       0       0       0       0       0
 11003 ;;Total ram usage:        8 bytes
 11004 ;; Hardware stack levels used:    1
 11005 ;; Hardware stack levels required when called:   10
 11006 ;; This function calls:
 11007 ;;		_get_cluster
 11008 ;;		_put_cluster
 11009 ;; This function is called by:
 11010 ;;		_f_open
 11011 ;; This function uses a non-reentrant model
 11012 ;;
 11013                           
 11014                           	psect	text55
 11015  0040A8                     __ptext55:
 11016                           	callstack 0
 11017  0040A8                     _remove_chain:
 11018                           	callstack 15
 11019                           
 11020                           ; BSR set to: 0
 11021                           ;tff.c: 254: CLUST nxt;;tff.c: 255: FATFS *fs = FatFs;
 11022                           
 11023                           ;incstack = 0
 11024  0040A8  C038  F0A6         	movff	_FatFs,remove_chain@fs
 11025  0040AC  C039  F0A7         	movff	_FatFs+1,remove_chain@fs+1
 11026                           
 11027                           ;tff.c: 258: while (clust >= 2 && clust < fs->max_clust) {
 11028  0040B0  D035               	goto	l10603
 11029  0040B2                     l10583:
 11030                           
 11031                           ; BSR set to: 0
 11032                           ;tff.c: 259: nxt = get_cluster(clust);
 11033  0040B2  C0A0  F088         	movff	remove_chain@clust,get_cluster@clust
 11034  0040B6  C0A1  F089         	movff	remove_chain@clust+1,get_cluster@clust+1
 11035  0040BA  ECBC  F013         	call	_get_cluster	;wreg free
 11036  0040BE  C088  F0A4         	movff	?_get_cluster,remove_chain@nxt
 11037  0040C2  C089  F0A5         	movff	?_get_cluster+1,remove_chain@nxt+1
 11038                           
 11039                           ; BSR set to: 0
 11040                           ;tff.c: 260: if (nxt == 1) return FALSE;
 11041  0040C6  05A4               	decf	remove_chain@nxt& (0+255),w,b
 11042  0040C8  11A5               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
 11043  0040CA  A4D8               	btfss	status,2,c
 11044  0040CC  D002               	goto	l10591
 11045  0040CE                     u12110:
 11046                           
 11047                           ; BSR set to: 0
 11048  0040CE  0E00               	movlw	0
 11049  0040D0  0012               	return	
 11050  0040D2                     l10591:
 11051                           
 11052                           ; BSR set to: 0
 11053                           ;tff.c: 261: if (!put_cluster(clust, 0)) return FALSE;
 11054  0040D2  C0A0  F088         	movff	remove_chain@clust,put_cluster@clust
 11055  0040D6  C0A1  F089         	movff	remove_chain@clust+1,put_cluster@clust+1
 11056  0040DA  0E00               	movlw	0
 11057  0040DC  6F8B               	movwf	(put_cluster@val+1)& (0+255),b
 11058  0040DE  0E00               	movlw	0
 11059  0040E0  6F8A               	movwf	put_cluster@val& (0+255),b
 11060  0040E2  EC0D  F00F         	call	_put_cluster	;wreg free
 11061  0040E6  0900               	iorlw	0
 11062  0040E8  B4D8               	btfsc	status,2,c
 11063  0040EA  D7F1               	goto	u12110
 11064                           
 11065                           ; BSR set to: 0
 11066                           ;tff.c: 262: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 11067  0040EC  EE20 F01A          	lfsr	2,26
 11068  0040F0  51A6               	movf	remove_chain@fs& (0+255),w,b
 11069  0040F2  26D9               	addwf	fsr2l,f,c
 11070  0040F4  51A7               	movf	(remove_chain@fs+1)& (0+255),w,b
 11071  0040F6  22DA               	addwfc	fsr2h,f,c
 11072  0040F8  28DE               	incf	postinc2,w,c
 11073  0040FA  E103               	bnz	u12130
 11074  0040FC  28DE               	incf	postinc2,w,c
 11075  0040FE  B4D8               	btfsc	status,2,c
 11076  004100  D009               	goto	l10601
 11077  004102                     u12130:
 11078                           
 11079                           ; BSR set to: 0
 11080                           ;tff.c: 263: fs->free_clust++;
 11081  004102  EE20 F01A          	lfsr	2,26
 11082  004106  51A6               	movf	remove_chain@fs& (0+255),w,b
 11083  004108  26D9               	addwf	fsr2l,f,c
 11084  00410A  51A7               	movf	(remove_chain@fs+1)& (0+255),w,b
 11085  00410C  22DA               	addwfc	fsr2h,f,c
 11086  00410E  2ADE               	incf	postinc2,f,c
 11087  004110  0E00               	movlw	0
 11088  004112  22DD               	addwfc	postdec2,f,c
 11089  004114                     l10601:
 11090                           
 11091                           ; BSR set to: 0
 11092                           ;tff.c: 267: };tff.c: 268: clust = nxt;
 11093  004114  C0A4  F0A0         	movff	remove_chain@nxt,remove_chain@clust
 11094  004118  C0A5  F0A1         	movff	remove_chain@nxt+1,remove_chain@clust+1
 11095  00411C                     l10603:
 11096                           
 11097                           ; BSR set to: 0
 11098  00411C  51A1               	movf	(remove_chain@clust+1)& (0+255),w,b
 11099  00411E  E104               	bnz	u12140
 11100  004120  0E02               	movlw	2
 11101  004122  5DA0               	subwf	remove_chain@clust& (0+255),w,b
 11102  004124  A0D8               	btfss	status,0,c
 11103  004126  D00C               	goto	u12150
 11104  004128                     u12140:
 11105                           
 11106                           ; BSR set to: 0
 11107  004128  EE20 F016          	lfsr	2,22
 11108  00412C  51A6               	movf	remove_chain@fs& (0+255),w,b
 11109  00412E  26D9               	addwf	fsr2l,f,c
 11110  004130  51A7               	movf	(remove_chain@fs+1)& (0+255),w,b
 11111  004132  22DA               	addwfc	fsr2h,f,c
 11112  004134  50DE               	movf	postinc2,w,c
 11113  004136  5DA0               	subwf	remove_chain@clust& (0+255),w,b
 11114  004138  50DE               	movf	postinc2,w,c
 11115  00413A  59A1               	subwfb	(remove_chain@clust+1)& (0+255),w,b
 11116  00413C  A0D8               	btfss	status,0,c
 11117  00413E  D7B9               	goto	l10583
 11118  004140                     u12150:
 11119                           
 11120                           ; BSR set to: 0
 11121                           ;tff.c: 269: };tff.c: 270: return TRUE;
 11122  004140  0E01               	movlw	1
 11123                           
 11124                           ; BSR set to: 0
 11125  004142  0012               	return		;funcret
 11126  004144                     __end_of_remove_chain:
 11127                           	callstack 0
 11128                           
 11129 ;; *************** function _memcpy *****************
 11130 ;; Defined at:
 11131 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\memcpy.c"
 11132 ;; Parameters:    Size  Location     Type
 11133 ;;  d1              2   24[COMRAM] PTR void 
 11134 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 11135 ;;  s1              2   26[COMRAM] PTR const void 
 11136 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 11137 ;;		 -> fs(544), 
 11138 ;;  n               2   28[COMRAM] unsigned int 
 11139 ;; Auto vars:     Size  Location     Type
 11140 ;;  s               2   33[COMRAM] PTR const unsigned char 
 11141 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 11142 ;;		 -> fs(544), 
 11143 ;;  d               2   31[COMRAM] PTR unsigned char 
 11144 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 11145 ;;  tmp             1   30[COMRAM] unsigned char 
 11146 ;; Return value:  Size  Location     Type
 11147 ;;                  2   24[COMRAM] PTR void 
 11148 ;; Registers used:
 11149 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11150 ;; Tracked objects:
 11151 ;;		On entry : 0/0
 11152 ;;		On exit  : 0/0
 11153 ;;		Unchanged: 0/0
 11154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11155 ;;      Params:         6       0       0       0       0       0       0       0       0
 11156 ;;      Locals:         5       0       0       0       0       0       0       0       0
 11157 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11158 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11159 ;;Total ram usage:       11 bytes
 11160 ;; Hardware stack levels used:    1
 11161 ;; Hardware stack levels required when called:    3
 11162 ;; This function calls:
 11163 ;;		Nothing
 11164 ;; This function is called by:
 11165 ;;		_f_open
 11166 ;;		_f_write
 11167 ;;		_f_read
 11168 ;; This function uses a non-reentrant model
 11169 ;;
 11170                           
 11171                           	psect	text56
 11172  004E86                     __ptext56:
 11173                           	callstack 0
 11174  004E86                     _memcpy:
 11175                           	callstack 19
 11176                           
 11177                           ; BSR set to: 0
 11178                           ;incstack = 0
 11179  004E86  C01B  F022         	movff	memcpy@s1,memcpy@s
 11180  004E8A  C01C  F023         	movff	memcpy@s1+1,memcpy@s+1
 11181  004E8E  C019  F020         	movff	memcpy@d1,memcpy@d
 11182  004E92  C01A  F021         	movff	memcpy@d1+1,memcpy@d+1
 11183  004E96  D010               	goto	l9969
 11184  004E98                     l9961:
 11185  004E98  C022  FFD9         	movff	memcpy@s,fsr2l
 11186  004E9C  C023  FFDA         	movff	memcpy@s+1,fsr2h
 11187  004EA0  50DF               	movf	indf2,w,c
 11188  004EA2  6E1F               	movwf	memcpy@tmp^0,c
 11189  004EA4  4A22               	infsnz	memcpy@s^0,f,c
 11190  004EA6  2A23               	incf	(memcpy@s+1)^0,f,c
 11191  004EA8  C020  FFD9         	movff	memcpy@d,fsr2l
 11192  004EAC  C021  FFDA         	movff	memcpy@d+1,fsr2h
 11193  004EB0  C01F  FFDF         	movff	memcpy@tmp,indf2
 11194  004EB4  4A20               	infsnz	memcpy@d^0,f,c
 11195  004EB6  2A21               	incf	(memcpy@d+1)^0,f,c
 11196  004EB8                     l9969:
 11197  004EB8  061D               	decf	memcpy@n^0,f,c
 11198  004EBA  A0D8               	btfss	status,0,c
 11199  004EBC  061E               	decf	(memcpy@n+1)^0,f,c
 11200  004EBE  281D               	incf	memcpy@n^0,w,c
 11201  004EC0  E1EB               	bnz	l9961
 11202  004EC2  281E               	incf	(memcpy@n+1)^0,w,c
 11203  004EC4  B4D8               	btfsc	status,2,c
 11204  004EC6  0012               	return	
 11205  004EC8  D7E7               	goto	l9961
 11206  004ECA                     __end_of_memcpy:
 11207                           	callstack 0
 11208                           
 11209 ;; *************** function _auto_mount *****************
 11210 ;; Defined at:
 11211 ;;		line 652 in file "bibliotecas/tff.c"
 11212 ;; Parameters:    Size  Location     Type
 11213 ;;  path            1   27[BANK0 ] PTR PTR const unsigned c
 11214 ;;		 -> f_opendir@path(2), f_open@path(2), 
 11215 ;;  chk_wp          1   28[BANK0 ] unsigned char 
 11216 ;; Auto vars:     Size  Location     Type
 11217 ;;  fatsize         4   67[BANK0 ] unsigned long 
 11218 ;;  totalsect       4   59[BANK0 ] unsigned long 
 11219 ;;  bootsect        4   55[BANK0 ] unsigned long 
 11220 ;;  maxclust        4   51[BANK0 ] unsigned long 
 11221 ;;  fs              2   71[BANK0 ] PTR struct _FATFS
 11222 ;;		 -> NULL(0), fs(544), 
 11223 ;;  p               2   63[BANK0 ] PTR const unsigned char 
 11224 ;;		 -> STR_22(13), filename(20), 
 11225 ;;  stat            1   66[BANK0 ] unsigned char 
 11226 ;;  fmt             1   65[BANK0 ] unsigned char 
 11227 ;; Return value:  Size  Location     Type
 11228 ;;                  1    wreg      enum E155
 11229 ;; Registers used:
 11230 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11231 ;; Tracked objects:
 11232 ;;		On entry : 3F/0
 11233 ;;		On exit  : 3E/0
 11234 ;;		Unchanged: 0/0
 11235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11236 ;;      Params:         0       2       0       0       0       0       0       0       0
 11237 ;;      Locals:         0      22       0       0       0       0       0       0       0
 11238 ;;      Temps:          0      22       0       0       0       0       0       0       0
 11239 ;;      Totals:         0      46       0       0       0       0       0       0       0
 11240 ;;Total ram usage:       46 bytes
 11241 ;; Hardware stack levels used:    1
 11242 ;; Hardware stack levels required when called:    9
 11243 ;; This function calls:
 11244 ;;		___lldiv
 11245 ;;		___lmul
 11246 ;;		_check_fs
 11247 ;;		_disk_initialize
 11248 ;;		_disk_status
 11249 ;;		_memset
 11250 ;; This function is called by:
 11251 ;;		_f_open
 11252 ;; This function uses a non-reentrant model
 11253 ;;
 11254                           
 11255                           	psect	text57
 11256  0005A0                     __ptext57:
 11257                           	callstack 0
 11258  0005A0                     _auto_mount:
 11259                           	callstack 16
 11260                           
 11261                           ; BSR set to: 0
 11262                           ;tff.c: 657: BYTE fmt;;tff.c: 658: DSTATUS stat;;tff.c: 659: DWORD bootsect, fatsize, to
      +                          talsect, maxclust;;tff.c: 660: const char *p = *path;
 11263                           
 11264                           ;incstack = 0
 11265  0005A0  517B               	movf	auto_mount@path& (0+255),w,b
 11266  0005A2  6ED9               	movwf	fsr2l,c
 11267  0005A4  6ADA               	clrf	fsr2h,c
 11268  0005A6  CFDE F09F          	movff	postinc2,auto_mount@p
 11269  0005AA  CFDD F0A0          	movff	postdec2,auto_mount@p+1
 11270                           
 11271                           ;tff.c: 661: FATFS *fs;;tff.c: 664: while (*p == ' ') p++;
 11272  0005AE  D003               	goto	l10773
 11273  0005B0                     l10771:
 11274  0005B0  0100               	movlb	0	; () banked
 11275  0005B2  4B9F               	infsnz	auto_mount@p& (0+255),f,b
 11276  0005B4  2BA0               	incf	(auto_mount@p+1)& (0+255),f,b
 11277  0005B6                     l10773:
 11278                           
 11279                           ; BSR set to: 0
 11280  0005B6  C09F  FFF6         	movff	auto_mount@p,tblptrl
 11281  0005BA  C0A0  FFF7         	movff	auto_mount@p+1,tblptrh
 11282  0005BE  6AF8               	clrf	tblptru,c
 11283  0005C0  0E07               	movlw	(high __ramtop+-1)
 11284  0005C2  64F7               	cpfsgt	tblptrh,c
 11285  0005C4  D003               	bra	u12427
 11286  0005C6  0008               	tblrd		*
 11287  0005C8  50F5               	movf	tablat,w,c
 11288  0005CA  D005               	bra	u12420
 11289  0005CC                     u12427:
 11290  0005CC  CFF6 FFE1          	movff	tblptrl,fsr1l
 11291  0005D0  CFF7 FFE2          	movff	tblptrh,fsr1h
 11292  0005D4  50E7               	movf	indf1,w,c
 11293  0005D6                     u12420:
 11294  0005D6  0A20               	xorlw	32
 11295  0005D8  B4D8               	btfsc	status,2,c
 11296  0005DA  D7EA               	goto	l10771
 11297                           
 11298                           ;tff.c: 665: if (*p == '/') p++;
 11299  0005DC  C09F  FFF6         	movff	auto_mount@p,tblptrl
 11300  0005E0  C0A0  FFF7         	movff	auto_mount@p+1,tblptrh
 11301  0005E4  6AF8               	clrf	tblptru,c
 11302  0005E6  0E07               	movlw	(high __ramtop+-1)
 11303  0005E8  64F7               	cpfsgt	tblptrh,c
 11304  0005EA  D003               	bra	u12447
 11305  0005EC  0008               	tblrd		*
 11306  0005EE  50F5               	movf	tablat,w,c
 11307  0005F0  D005               	bra	u12440
 11308  0005F2                     u12447:
 11309  0005F2  CFF6 FFE1          	movff	tblptrl,fsr1l
 11310  0005F6  CFF7 FFE2          	movff	tblptrh,fsr1h
 11311  0005FA  50E7               	movf	indf1,w,c
 11312  0005FC                     u12440:
 11313  0005FC  0A2F               	xorlw	47
 11314  0005FE  A4D8               	btfss	status,2,c
 11315  000600  D003               	goto	l10779
 11316  000602  0100               	movlb	0	; () banked
 11317  000604  4B9F               	infsnz	auto_mount@p& (0+255),f,b
 11318  000606  2BA0               	incf	(auto_mount@p+1)& (0+255),f,b
 11319  000608                     l10779:
 11320                           
 11321                           ;tff.c: 666: *path = p;
 11322  000608  0100               	movlb	0	; () banked
 11323  00060A  517B               	movf	auto_mount@path& (0+255),w,b
 11324  00060C  6ED9               	movwf	fsr2l,c
 11325  00060E  6ADA               	clrf	fsr2h,c
 11326  000610  C09F  FFDE         	movff	auto_mount@p,postinc2
 11327  000614  C0A0  FFDD         	movff	auto_mount@p+1,postdec2
 11328                           
 11329                           ; BSR set to: 0
 11330                           ;tff.c: 669: fs = FatFs;
 11331  000618  C038  F0A7         	movff	_FatFs,auto_mount@fs
 11332  00061C  C039  F0A8         	movff	_FatFs+1,auto_mount@fs+1
 11333                           
 11334                           ; BSR set to: 0
 11335                           ;tff.c: 670: if (!fs) return FR_NOT_ENABLED;
 11336  000620  51A7               	movf	auto_mount@fs& (0+255),w,b
 11337  000622  11A8               	iorwf	(auto_mount@fs+1)& (0+255),w,b
 11338  000624  A4D8               	btfss	status,2,c
 11339  000626  D002               	goto	l10789
 11340                           
 11341                           ; BSR set to: 0
 11342  000628  0E0A               	movlw	10
 11343  00062A  0012               	return	
 11344  00062C                     l10789:
 11345                           
 11346                           ; BSR set to: 0
 11347                           ;tff.c: 672: if (fs->fs_type) {
 11348  00062C  EE20 F01C          	lfsr	2,28
 11349  000630  51A7               	movf	auto_mount@fs& (0+255),w,b
 11350  000632  26D9               	addwf	fsr2l,f,c
 11351  000634  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11352  000636  22DA               	addwfc	fsr2h,f,c
 11353  000638  50DF               	movf	indf2,w,c
 11354  00063A  B4D8               	btfsc	status,2,c
 11355  00063C  D00F               	goto	l10807
 11356                           
 11357                           ; BSR set to: 0
 11358                           ;tff.c: 673: stat = disk_status(0);
 11359  00063E  0E00               	movlw	0
 11360  000640  EC59  F028         	call	_disk_status
 11361  000644  0100               	movlb	0	; () banked
 11362  000646  6FA2               	movwf	auto_mount@stat& (0+255),b
 11363                           
 11364                           ; BSR set to: 0
 11365                           ;tff.c: 674: if (!(stat & 0x01)) {
 11366  000648  B1A2               	btfsc	auto_mount@stat& (0+255),0,b
 11367  00064A  D008               	goto	l10807
 11368                           
 11369                           ; BSR set to: 0
 11370                           ;tff.c: 676: if (chk_wp && (stat & 0x04))
 11371  00064C  517C               	movf	auto_mount@chk_wp& (0+255),w,b
 11372  00064E  A4D8               	btfss	status,2,c
 11373                           
 11374                           ; BSR set to: 0
 11375  000650  A5A2               	btfss	auto_mount@stat& (0+255),2,b
 11376  000652  D002               	goto	l10803
 11377  000654                     u12500:
 11378                           
 11379                           ; BSR set to: 0
 11380                           ;tff.c: 677: return FR_WRITE_PROTECTED;
 11381  000654  0E09               	movlw	9
 11382  000656  0012               	return	
 11383  000658                     l10803:
 11384                           
 11385                           ; BSR set to: 0
 11386                           ;tff.c: 679: return FR_OK;
 11387  000658  0E00               	movlw	0
 11388  00065A  0012               	return	
 11389  00065C                     l10807:
 11390                           
 11391                           ; BSR set to: 0
 11392                           ;tff.c: 680: };tff.c: 681: };tff.c: 685: memset(fs, 0, sizeof(FATFS));
 11393  00065C  C0A7  F019         	movff	auto_mount@fs,memset@p1
 11394  000660  C0A8  F01A         	movff	auto_mount@fs+1,memset@p1+1
 11395  000664  0E00               	movlw	0
 11396  000666  6E1C               	movwf	(memset@c+1)^0,c
 11397  000668  0E00               	movlw	0
 11398  00066A  6E1B               	movwf	memset@c^0,c
 11399  00066C  0E02               	movlw	2
 11400  00066E  6E1E               	movwf	(memset@n+1)^0,c
 11401  000670  0E20               	movlw	32
 11402  000672  6E1D               	movwf	memset@n^0,c
 11403  000674  EC71  F028         	call	_memset	;wreg free
 11404                           
 11405                           ;tff.c: 686: stat = disk_initialize(0);
 11406  000678  0E00               	movlw	0
 11407  00067A  ECB0  F028         	call	_disk_initialize
 11408  00067E  0100               	movlb	0	; () banked
 11409  000680  6FA2               	movwf	auto_mount@stat& (0+255),b
 11410                           
 11411                           ; BSR set to: 0
 11412                           ;tff.c: 687: if (stat & 0x01)
 11413  000682  A1A2               	btfss	auto_mount@stat& (0+255),0,b
 11414  000684  D002               	goto	l10817
 11415                           
 11416                           ; BSR set to: 0
 11417                           ;tff.c: 688: return FR_NOT_READY;
 11418  000686  0E01               	movlw	1
 11419  000688  0012               	return	
 11420  00068A                     l10817:
 11421                           
 11422                           ; BSR set to: 0
 11423                           ;tff.c: 690: if (chk_wp && (stat & 0x04))
 11424  00068A  517C               	movf	auto_mount@chk_wp& (0+255),w,b
 11425  00068C  B4D8               	btfsc	status,2,c
 11426  00068E  D002               	goto	l10825
 11427                           
 11428                           ; BSR set to: 0
 11429  000690  B5A2               	btfsc	auto_mount@stat& (0+255),2,b
 11430  000692  D7E0               	goto	u12500
 11431  000694                     l10825:
 11432                           
 11433                           ; BSR set to: 0
 11434                           ;tff.c: 695: fmt = check_fs(bootsect = 0);
 11435  000694  0E00               	movlw	0
 11436  000696  6F97               	movwf	auto_mount@bootsect& (0+255),b
 11437  000698  0E00               	movlw	0
 11438  00069A  6F98               	movwf	(auto_mount@bootsect+1)& (0+255),b
 11439  00069C  0E00               	movlw	0
 11440  00069E  6F99               	movwf	(auto_mount@bootsect+2)& (0+255),b
 11441  0006A0  0E00               	movlw	0
 11442  0006A2  6F9A               	movwf	(auto_mount@bootsect+3)& (0+255),b
 11443  0006A4  C097  F073         	movff	auto_mount@bootsect,check_fs@sect
 11444  0006A8  C098  F074         	movff	auto_mount@bootsect+1,check_fs@sect+1
 11445  0006AC  C099  F075         	movff	auto_mount@bootsect+2,check_fs@sect+2
 11446  0006B0  C09A  F076         	movff	auto_mount@bootsect+3,check_fs@sect+3
 11447  0006B4  ECD4  F022         	call	_check_fs	;wreg free
 11448  0006B8  0100               	movlb	0	; () banked
 11449  0006BA  6FA1               	movwf	auto_mount@fmt& (0+255),b
 11450                           
 11451                           ; BSR set to: 0
 11452                           ;tff.c: 697: if (fmt == 1) {
 11453  0006BC  05A1               	decf	auto_mount@fmt& (0+255),w,b
 11454  0006BE  A4D8               	btfss	status,2,c
 11455  0006C0  D023               	goto	l10835
 11456                           
 11457                           ; BSR set to: 0
 11458                           ;tff.c: 699: if (fs->win[446+4]) {
 11459  0006C2  EE21 F0E2          	lfsr	2,482
 11460  0006C6  51A7               	movf	auto_mount@fs& (0+255),w,b
 11461  0006C8  26D9               	addwf	fsr2l,f,c
 11462  0006CA  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11463  0006CC  22DA               	addwfc	fsr2h,f,c
 11464  0006CE  50DF               	movf	indf2,w,c
 11465  0006D0  B4D8               	btfsc	status,2,c
 11466  0006D2  D01A               	goto	l10835
 11467                           
 11468                           ; BSR set to: 0
 11469                           ;tff.c: 700: bootsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[446+8]));
 11470  0006D4  EE21 F0E6          	lfsr	2,486
 11471  0006D8  51A7               	movf	auto_mount@fs& (0+255),w,b
 11472  0006DA  26D9               	addwf	fsr2l,f,c
 11473  0006DC  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11474  0006DE  22DA               	addwfc	fsr2h,f,c
 11475  0006E0  CFDE F097          	movff	postinc2,auto_mount@bootsect
 11476  0006E4  CFDE F098          	movff	postinc2,auto_mount@bootsect+1
 11477  0006E8  CFDE F099          	movff	postinc2,auto_mount@bootsect+2
 11478  0006EC  CFDE F09A          	movff	postinc2,auto_mount@bootsect+3
 11479                           
 11480                           ; BSR set to: 0
 11481                           ;tff.c: 701: fmt = check_fs(bootsect);
 11482  0006F0  C097  F073         	movff	auto_mount@bootsect,check_fs@sect
 11483  0006F4  C098  F074         	movff	auto_mount@bootsect+1,check_fs@sect+1
 11484  0006F8  C099  F075         	movff	auto_mount@bootsect+2,check_fs@sect+2
 11485  0006FC  C09A  F076         	movff	auto_mount@bootsect+3,check_fs@sect+3
 11486  000700  ECD4  F022         	call	_check_fs	;wreg free
 11487  000704  0100               	movlb	0	; () banked
 11488  000706  6FA1               	movwf	auto_mount@fmt& (0+255),b
 11489  000708                     l10835:
 11490                           
 11491                           ; BSR set to: 0
 11492                           ;tff.c: 702: };tff.c: 703: };tff.c: 704: if (fmt || (WORD)(*(WORD*)(BYTE*)(&fs->win[11])
      +                          ) != 512U)
 11493  000708  51A1               	movf	auto_mount@fmt& (0+255),w,b
 11494  00070A  A4D8               	btfss	status,2,c
 11495  00070C  D00C               	goto	u12570
 11496                           
 11497                           ; BSR set to: 0
 11498  00070E  EE20 F02B          	lfsr	2,43
 11499  000712  51A7               	movf	auto_mount@fs& (0+255),w,b
 11500  000714  26D9               	addwf	fsr2l,f,c
 11501  000716  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11502  000718  22DA               	addwfc	fsr2h,f,c
 11503  00071A  50DE               	movf	postinc2,w,c
 11504  00071C  E104               	bnz	u12570
 11505  00071E  0E02               	movlw	2
 11506  000720  18DE               	xorwf	postinc2,w,c
 11507  000722  B4D8               	btfsc	status,2,c
 11508  000724  D002               	goto	l10843
 11509  000726                     u12570:
 11510                           
 11511                           ; BSR set to: 0
 11512                           ;tff.c: 705: return FR_NO_FILESYSTEM;
 11513  000726  0E0B               	movlw	11
 11514  000728  0012               	return	
 11515  00072A                     l10843:
 11516                           
 11517                           ; BSR set to: 0
 11518                           ;tff.c: 708: fatsize = (WORD)(*(WORD*)(BYTE*)(&fs->win[22]));
 11519  00072A  EE20 F036          	lfsr	2,54
 11520  00072E  51A7               	movf	auto_mount@fs& (0+255),w,b
 11521  000730  26D9               	addwf	fsr2l,f,c
 11522  000732  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11523  000734  22DA               	addwfc	fsr2h,f,c
 11524  000736  CFDE F07D          	movff	postinc2,??_auto_mount
 11525  00073A  CFDD F07E          	movff	postdec2,??_auto_mount+1
 11526  00073E  C07D  F0A3         	movff	??_auto_mount,auto_mount@fatsize
 11527  000742  C07E  F0A4         	movff	??_auto_mount+1,auto_mount@fatsize+1
 11528  000746  6BA5               	clrf	(auto_mount@fatsize+2)& (0+255),b
 11529  000748  6BA6               	clrf	(auto_mount@fatsize+3)& (0+255),b
 11530                           
 11531                           ; BSR set to: 0
 11532                           ;tff.c: 709: if (!fatsize) fatsize = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[36]));
 11533  00074A  51A3               	movf	auto_mount@fatsize& (0+255),w,b
 11534  00074C  11A4               	iorwf	(auto_mount@fatsize+1)& (0+255),w,b
 11535  00074E  11A5               	iorwf	(auto_mount@fatsize+2)& (0+255),w,b
 11536  000750  11A6               	iorwf	(auto_mount@fatsize+3)& (0+255),w,b
 11537  000752  A4D8               	btfss	status,2,c
 11538  000754  D00E               	goto	l962
 11539                           
 11540                           ; BSR set to: 0
 11541  000756  EE20 F044          	lfsr	2,68
 11542  00075A  51A7               	movf	auto_mount@fs& (0+255),w,b
 11543  00075C  26D9               	addwf	fsr2l,f,c
 11544  00075E  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11545  000760  22DA               	addwfc	fsr2h,f,c
 11546  000762  CFDE F0A3          	movff	postinc2,auto_mount@fatsize
 11547  000766  CFDE F0A4          	movff	postinc2,auto_mount@fatsize+1
 11548  00076A  CFDE F0A5          	movff	postinc2,auto_mount@fatsize+2
 11549  00076E  CFDE F0A6          	movff	postinc2,auto_mount@fatsize+3
 11550  000772                     l962:
 11551                           
 11552                           ; BSR set to: 0
 11553                           ;tff.c: 710: fs->sects_fat = (CLUST)fatsize;
 11554  000772  EE20 F014          	lfsr	2,20
 11555  000776  51A7               	movf	auto_mount@fs& (0+255),w,b
 11556  000778  26D9               	addwf	fsr2l,f,c
 11557  00077A  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11558  00077C  22DA               	addwfc	fsr2h,f,c
 11559  00077E  C0A3  FFDE         	movff	auto_mount@fatsize,postinc2
 11560  000782  C0A4  FFDD         	movff	auto_mount@fatsize+1,postdec2
 11561                           
 11562                           ; BSR set to: 0
 11563                           ;tff.c: 711: fs->n_fats = fs->win[16];
 11564  000786  EE20 F030          	lfsr	2,48
 11565  00078A  51A7               	movf	auto_mount@fs& (0+255),w,b
 11566  00078C  26D9               	addwf	fsr2l,f,c
 11567  00078E  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11568  000790  22DA               	addwfc	fsr2h,f,c
 11569  000792  EE10 F01E          	lfsr	1,30
 11570  000796  51A7               	movf	auto_mount@fs& (0+255),w,b
 11571  000798  26E1               	addwf	fsr1l,f,c
 11572  00079A  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11573  00079C  22E2               	addwfc	fsr1h,f,c
 11574  00079E  CFDF FFE7          	movff	indf2,indf1
 11575                           
 11576                           ; BSR set to: 0
 11577                           ;tff.c: 712: fatsize *= fs->n_fats;
 11578  0007A2  C0A3  F019         	movff	auto_mount@fatsize,___lmul@multiplier
 11579  0007A6  C0A4  F01A         	movff	auto_mount@fatsize+1,___lmul@multiplier+1
 11580  0007AA  C0A5  F01B         	movff	auto_mount@fatsize+2,___lmul@multiplier+2
 11581  0007AE  C0A6  F01C         	movff	auto_mount@fatsize+3,___lmul@multiplier+3
 11582  0007B2  EE20 F01E          	lfsr	2,30
 11583  0007B6  51A7               	movf	auto_mount@fs& (0+255),w,b
 11584  0007B8  26D9               	addwf	fsr2l,f,c
 11585  0007BA  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11586  0007BC  22DA               	addwfc	fsr2h,f,c
 11587  0007BE  50DF               	movf	indf2,w,c
 11588  0007C0  6F7D               	movwf	??_auto_mount& (0+255),b
 11589  0007C2  517D               	movf	??_auto_mount& (0+255),w,b
 11590  0007C4  6E1D               	movwf	___lmul@multiplicand^0,c
 11591  0007C6  6A1E               	clrf	(___lmul@multiplicand+1)^0,c
 11592  0007C8  6A1F               	clrf	(___lmul@multiplicand+2)^0,c
 11593  0007CA  6A20               	clrf	(___lmul@multiplicand+3)^0,c
 11594  0007CC  ECCB  F025         	call	___lmul	;wreg free
 11595  0007D0  C019  F0A3         	movff	?___lmul,auto_mount@fatsize
 11596  0007D4  C01A  F0A4         	movff	?___lmul+1,auto_mount@fatsize+1
 11597  0007D8  C01B  F0A5         	movff	?___lmul+2,auto_mount@fatsize+2
 11598  0007DC  C01C  F0A6         	movff	?___lmul+3,auto_mount@fatsize+3
 11599                           
 11600                           ;tff.c: 713: fs->fatbase = bootsect + (WORD)(*(WORD*)(BYTE*)(&fs->win[14]));
 11601  0007E0  0100               	movlb	0	; () banked
 11602  0007E2  EE20 F02E          	lfsr	2,46
 11603  0007E6  51A7               	movf	auto_mount@fs& (0+255),w,b
 11604  0007E8  26D9               	addwf	fsr2l,f,c
 11605  0007EA  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11606  0007EC  22DA               	addwfc	fsr2h,f,c
 11607  0007EE  CFDE F07D          	movff	postinc2,??_auto_mount
 11608  0007F2  CFDD F07E          	movff	postdec2,??_auto_mount+1
 11609  0007F6  517D               	movf	??_auto_mount& (0+255),w,b
 11610  0007F8  2597               	addwf	auto_mount@bootsect& (0+255),w,b
 11611  0007FA  6F7F               	movwf	(??_auto_mount+2)& (0+255),b
 11612  0007FC  517E               	movf	(??_auto_mount+1)& (0+255),w,b
 11613  0007FE  2198               	addwfc	(auto_mount@bootsect+1)& (0+255),w,b
 11614  000800  6F80               	movwf	(??_auto_mount+3)& (0+255),b
 11615  000802  0E00               	movlw	0
 11616  000804  2199               	addwfc	(auto_mount@bootsect+2)& (0+255),w,b
 11617  000806  6F81               	movwf	(??_auto_mount+4)& (0+255),b
 11618  000808  0E00               	movlw	0
 11619  00080A  219A               	addwfc	(auto_mount@bootsect+3)& (0+255),w,b
 11620  00080C  6F82               	movwf	(??_auto_mount+5)& (0+255),b
 11621  00080E  EE20 F008          	lfsr	2,8
 11622  000812  51A7               	movf	auto_mount@fs& (0+255),w,b
 11623  000814  26D9               	addwf	fsr2l,f,c
 11624  000816  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11625  000818  22DA               	addwfc	fsr2h,f,c
 11626  00081A  C07F  FFDE         	movff	??_auto_mount+2,postinc2
 11627  00081E  C080  FFDE         	movff	??_auto_mount+3,postinc2
 11628  000822  C081  FFDE         	movff	??_auto_mount+4,postinc2
 11629  000826  C082  FFDE         	movff	??_auto_mount+5,postinc2
 11630                           
 11631                           ; BSR set to: 0
 11632                           ;tff.c: 714: fs->csize = fs->win[13];
 11633  00082A  EE20 F02D          	lfsr	2,45
 11634  00082E  51A7               	movf	auto_mount@fs& (0+255),w,b
 11635  000830  26D9               	addwf	fsr2l,f,c
 11636  000832  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11637  000834  22DA               	addwfc	fsr2h,f,c
 11638  000836  EE10 F01D          	lfsr	1,29
 11639  00083A  51A7               	movf	auto_mount@fs& (0+255),w,b
 11640  00083C  26E1               	addwf	fsr1l,f,c
 11641  00083E  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11642  000840  22E2               	addwfc	fsr1h,f,c
 11643  000842  CFDF FFE7          	movff	indf2,indf1
 11644                           
 11645                           ; BSR set to: 0
 11646                           ;tff.c: 715: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(&fs->win[17]));
 11647  000846  EE20 F031          	lfsr	2,49
 11648  00084A  51A7               	movf	auto_mount@fs& (0+255),w,b
 11649  00084C  26D9               	addwf	fsr2l,f,c
 11650  00084E  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11651  000850  22DA               	addwfc	fsr2h,f,c
 11652  000852  EE10 F002          	lfsr	1,2
 11653  000856  51A7               	movf	auto_mount@fs& (0+255),w,b
 11654  000858  26E1               	addwf	fsr1l,f,c
 11655  00085A  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11656  00085C  22E2               	addwfc	fsr1h,f,c
 11657  00085E  CFDE FFE6          	movff	postinc2,postinc1
 11658  000862  CFDD FFE5          	movff	postdec2,postdec1
 11659                           
 11660                           ; BSR set to: 0
 11661                           ;tff.c: 716: totalsect = (WORD)(*(WORD*)(BYTE*)(&fs->win[19]));
 11662  000866  EE20 F033          	lfsr	2,51
 11663  00086A  51A7               	movf	auto_mount@fs& (0+255),w,b
 11664  00086C  26D9               	addwf	fsr2l,f,c
 11665  00086E  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11666  000870  22DA               	addwfc	fsr2h,f,c
 11667  000872  CFDE F07D          	movff	postinc2,??_auto_mount
 11668  000876  CFDD F07E          	movff	postdec2,??_auto_mount+1
 11669  00087A  C07D  F09B         	movff	??_auto_mount,auto_mount@totalsect
 11670  00087E  C07E  F09C         	movff	??_auto_mount+1,auto_mount@totalsect+1
 11671  000882  6B9D               	clrf	(auto_mount@totalsect+2)& (0+255),b
 11672  000884  6B9E               	clrf	(auto_mount@totalsect+3)& (0+255),b
 11673                           
 11674                           ; BSR set to: 0
 11675                           ;tff.c: 717: if (!totalsect) totalsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[32]));
 11676  000886  519B               	movf	auto_mount@totalsect& (0+255),w,b
 11677  000888  119C               	iorwf	(auto_mount@totalsect+1)& (0+255),w,b
 11678  00088A  119D               	iorwf	(auto_mount@totalsect+2)& (0+255),w,b
 11679  00088C  119E               	iorwf	(auto_mount@totalsect+3)& (0+255),w,b
 11680  00088E  A4D8               	btfss	status,2,c
 11681  000890  D00E               	goto	l10865
 11682                           
 11683                           ; BSR set to: 0
 11684  000892  EE20 F040          	lfsr	2,64
 11685  000896  51A7               	movf	auto_mount@fs& (0+255),w,b
 11686  000898  26D9               	addwf	fsr2l,f,c
 11687  00089A  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11688  00089C  22DA               	addwfc	fsr2h,f,c
 11689  00089E  CFDE F09B          	movff	postinc2,auto_mount@totalsect
 11690  0008A2  CFDE F09C          	movff	postinc2,auto_mount@totalsect+1
 11691  0008A6  CFDE F09D          	movff	postinc2,auto_mount@totalsect+2
 11692  0008AA  CFDE F09E          	movff	postinc2,auto_mount@totalsect+3
 11693  0008AE                     l10865:
 11694                           
 11695                           ; BSR set to: 0
 11696                           ;tff.c: 718: fs->max_clust = maxclust = (totalsect;tff.c: 719: - (WORD)(*(WORD*)(BYTE*)(
      +                          &fs->win[14])) - fatsize - fs->n_rootdir / 16;tff.c: 720: ) / fs->csize + 2;
 11697  0008AE  EE20 F002          	lfsr	2,2
 11698  0008B2  51A7               	movf	auto_mount@fs& (0+255),w,b
 11699  0008B4  26D9               	addwf	fsr2l,f,c
 11700  0008B6  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11701  0008B8  22DA               	addwfc	fsr2h,f,c
 11702  0008BA  CFDE F07D          	movff	postinc2,??_auto_mount
 11703  0008BE  CFDD F07E          	movff	postdec2,??_auto_mount+1
 11704  0008C2  0E04               	movlw	4
 11705  0008C4  6F7F               	movwf	(??_auto_mount+2)& (0+255),b
 11706  0008C6                     u12605:
 11707  0008C6  90D8               	bcf	status,0,c
 11708  0008C8  337E               	rrcf	(??_auto_mount+1)& (0+255),f,b
 11709  0008CA  337D               	rrcf	??_auto_mount& (0+255),f,b
 11710  0008CC  2F7F               	decfsz	(??_auto_mount+2)& (0+255),f,b
 11711  0008CE  D7FB               	goto	u12605
 11712  0008D0  517D               	movf	??_auto_mount& (0+255),w,b
 11713  0008D2  6F80               	movwf	(??_auto_mount+3)& (0+255),b
 11714  0008D4  517E               	movf	(??_auto_mount+1)& (0+255),w,b
 11715  0008D6  6F81               	movwf	(??_auto_mount+4)& (0+255),b
 11716  0008D8  6B82               	clrf	(??_auto_mount+5)& (0+255),b
 11717  0008DA  6B83               	clrf	(??_auto_mount+6)& (0+255),b
 11718  0008DC  EE20 F02E          	lfsr	2,46
 11719  0008E0  51A7               	movf	auto_mount@fs& (0+255),w,b
 11720  0008E2  26D9               	addwf	fsr2l,f,c
 11721  0008E4  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11722  0008E6  22DA               	addwfc	fsr2h,f,c
 11723  0008E8  CFDE F084          	movff	postinc2,??_auto_mount+7
 11724  0008EC  CFDD F085          	movff	postdec2,??_auto_mount+8
 11725  0008F0  5184               	movf	(??_auto_mount+7)& (0+255),w,b
 11726  0008F2  6F86               	movwf	(??_auto_mount+9)& (0+255),b
 11727  0008F4  5185               	movf	(??_auto_mount+8)& (0+255),w,b
 11728  0008F6  6F87               	movwf	(??_auto_mount+10)& (0+255),b
 11729  0008F8  6B88               	clrf	(??_auto_mount+11)& (0+255),b
 11730  0008FA  6B89               	clrf	(??_auto_mount+12)& (0+255),b
 11731  0008FC  1F86               	comf	(??_auto_mount+9)& (0+255),f,b
 11732  0008FE  1F87               	comf	(??_auto_mount+10)& (0+255),f,b
 11733  000900  1F88               	comf	(??_auto_mount+11)& (0+255),f,b
 11734  000902  1F89               	comf	(??_auto_mount+12)& (0+255),f,b
 11735  000904  2B86               	incf	(??_auto_mount+9)& (0+255),f,b
 11736  000906  0E00               	movlw	0
 11737  000908  2387               	addwfc	(??_auto_mount+10)& (0+255),f,b
 11738  00090A  2388               	addwfc	(??_auto_mount+11)& (0+255),f,b
 11739  00090C  2389               	addwfc	(??_auto_mount+12)& (0+255),f,b
 11740  00090E  51A3               	movf	auto_mount@fatsize& (0+255),w,b
 11741  000910  5D86               	subwf	(??_auto_mount+9)& (0+255),w,b
 11742  000912  6F8A               	movwf	(??_auto_mount+13)& (0+255),b
 11743  000914  51A4               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 11744  000916  5987               	subwfb	(??_auto_mount+10)& (0+255),w,b
 11745  000918  6F8B               	movwf	(??_auto_mount+14)& (0+255),b
 11746  00091A  51A5               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 11747  00091C  5988               	subwfb	(??_auto_mount+11)& (0+255),w,b
 11748  00091E  6F8C               	movwf	(??_auto_mount+15)& (0+255),b
 11749  000920  51A6               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 11750  000922  5989               	subwfb	(??_auto_mount+12)& (0+255),w,b
 11751  000924  6F8D               	movwf	(??_auto_mount+16)& (0+255),b
 11752  000926  5180               	movf	(??_auto_mount+3)& (0+255),w,b
 11753  000928  5D8A               	subwf	(??_auto_mount+13)& (0+255),w,b
 11754  00092A  6F8E               	movwf	(??_auto_mount+17)& (0+255),b
 11755  00092C  5181               	movf	(??_auto_mount+4)& (0+255),w,b
 11756  00092E  598B               	subwfb	(??_auto_mount+14)& (0+255),w,b
 11757  000930  6F8F               	movwf	(??_auto_mount+18)& (0+255),b
 11758  000932  5182               	movf	(??_auto_mount+5)& (0+255),w,b
 11759  000934  598C               	subwfb	(??_auto_mount+15)& (0+255),w,b
 11760  000936  6F90               	movwf	(??_auto_mount+19)& (0+255),b
 11761  000938  5183               	movf	(??_auto_mount+6)& (0+255),w,b
 11762  00093A  598D               	subwfb	(??_auto_mount+16)& (0+255),w,b
 11763  00093C  6F91               	movwf	(??_auto_mount+20)& (0+255),b
 11764  00093E  519B               	movf	auto_mount@totalsect& (0+255),w,b
 11765  000940  258E               	addwf	(??_auto_mount+17)& (0+255),w,b
 11766  000942  6E19               	movwf	___lldiv@dividend^0,c
 11767  000944  519C               	movf	(auto_mount@totalsect+1)& (0+255),w,b
 11768  000946  218F               	addwfc	(??_auto_mount+18)& (0+255),w,b
 11769  000948  6E1A               	movwf	(___lldiv@dividend+1)^0,c
 11770  00094A  519D               	movf	(auto_mount@totalsect+2)& (0+255),w,b
 11771  00094C  2190               	addwfc	(??_auto_mount+19)& (0+255),w,b
 11772  00094E  6E1B               	movwf	(___lldiv@dividend+2)^0,c
 11773  000950  519E               	movf	(auto_mount@totalsect+3)& (0+255),w,b
 11774  000952  2191               	addwfc	(??_auto_mount+20)& (0+255),w,b
 11775  000954  6E1C               	movwf	(___lldiv@dividend+3)^0,c
 11776  000956  EE20 F01D          	lfsr	2,29
 11777  00095A  51A7               	movf	auto_mount@fs& (0+255),w,b
 11778  00095C  26D9               	addwf	fsr2l,f,c
 11779  00095E  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11780  000960  22DA               	addwfc	fsr2h,f,c
 11781  000962  50DF               	movf	indf2,w,c
 11782  000964  6F92               	movwf	(??_auto_mount+21)& (0+255),b
 11783  000966  5192               	movf	(??_auto_mount+21)& (0+255),w,b
 11784  000968  6E1D               	movwf	___lldiv@divisor^0,c
 11785  00096A  6A1E               	clrf	(___lldiv@divisor+1)^0,c
 11786  00096C  6A1F               	clrf	(___lldiv@divisor+2)^0,c
 11787  00096E  6A20               	clrf	(___lldiv@divisor+3)^0,c
 11788  000970  EC15  F023         	call	___lldiv	;wreg free
 11789  000974  0E02               	movlw	2
 11790  000976  2419               	addwf	?___lldiv^0,w,c
 11791  000978  0100               	movlb	0	; () banked
 11792  00097A  6F93               	movwf	auto_mount@maxclust& (0+255),b
 11793  00097C  0E00               	movlw	0
 11794  00097E  201A               	addwfc	(?___lldiv+1)^0,w,c
 11795  000980  6F94               	movwf	(auto_mount@maxclust+1)& (0+255),b
 11796  000982  0E00               	movlw	0
 11797  000984  201B               	addwfc	(?___lldiv+2)^0,w,c
 11798  000986  6F95               	movwf	(auto_mount@maxclust+2)& (0+255),b
 11799  000988  0E00               	movlw	0
 11800  00098A  201C               	addwfc	(?___lldiv+3)^0,w,c
 11801  00098C  6F96               	movwf	(auto_mount@maxclust+3)& (0+255),b
 11802  00098E  EE20 F016          	lfsr	2,22
 11803  000992  51A7               	movf	auto_mount@fs& (0+255),w,b
 11804  000994  26D9               	addwf	fsr2l,f,c
 11805  000996  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11806  000998  22DA               	addwfc	fsr2h,f,c
 11807  00099A  C093  FFDE         	movff	auto_mount@maxclust,postinc2
 11808  00099E  C094  FFDD         	movff	auto_mount@maxclust+1,postdec2
 11809                           
 11810                           ; BSR set to: 0
 11811                           ;tff.c: 722: fmt = 1;
 11812  0009A2  0E01               	movlw	1
 11813  0009A4  6FA1               	movwf	auto_mount@fmt& (0+255),b
 11814                           
 11815                           ; BSR set to: 0
 11816                           ;tff.c: 723: if (maxclust >= 0xFF7) fmt = 2;
 11817  0009A6  5196               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 11818  0009A8  1195               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 11819  0009AA  E106               	bnz	u12610
 11820  0009AC  0EF7               	movlw	247
 11821  0009AE  5D93               	subwf	auto_mount@maxclust& (0+255),w,b
 11822  0009B0  0E0F               	movlw	15
 11823  0009B2  5994               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 11824  0009B4  A0D8               	btfss	status,0,c
 11825  0009B6  D002               	goto	l10873
 11826  0009B8                     u12610:
 11827                           
 11828                           ; BSR set to: 0
 11829  0009B8  0E02               	movlw	2
 11830  0009BA  6FA1               	movwf	auto_mount@fmt& (0+255),b
 11831  0009BC                     l10873:
 11832                           
 11833                           ; BSR set to: 0
 11834                           ;tff.c: 724: if (maxclust >= 0xFFF7)
 11835  0009BC  5196               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 11836  0009BE  1195               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 11837  0009C0  E107               	bnz	u12620
 11838  0009C2  0EF7               	movlw	247
 11839  0009C4  5D93               	subwf	auto_mount@maxclust& (0+255),w,b
 11840  0009C6  0EFF               	movlw	255
 11841  0009C8  5994               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 11842  0009CA  B0D8               	btfsc	status,0,c
 11843  0009CC  D6AC               	goto	u12570
 11844  0009CE  D001               	goto	l10879
 11845  0009D0                     u12620:
 11846  0009D0  D6AA               	goto	u12570
 11847  0009D2                     l10879:
 11848                           
 11849                           ; BSR set to: 0
 11850                           ;tff.c: 733: fs->dirbase = fs->fatbase + fatsize;
 11851  0009D2  EE20 F008          	lfsr	2,8
 11852  0009D6  51A7               	movf	auto_mount@fs& (0+255),w,b
 11853  0009D8  26D9               	addwf	fsr2l,f,c
 11854  0009DA  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11855  0009DC  22DA               	addwfc	fsr2h,f,c
 11856  0009DE  CFDE F07D          	movff	postinc2,??_auto_mount
 11857  0009E2  CFDE F07E          	movff	postinc2,??_auto_mount+1
 11858  0009E6  CFDE F07F          	movff	postinc2,??_auto_mount+2
 11859  0009EA  CFDE F080          	movff	postinc2,??_auto_mount+3
 11860  0009EE  51A3               	movf	auto_mount@fatsize& (0+255),w,b
 11861  0009F0  257D               	addwf	??_auto_mount& (0+255),w,b
 11862  0009F2  6F81               	movwf	(??_auto_mount+4)& (0+255),b
 11863  0009F4  51A4               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 11864  0009F6  217E               	addwfc	(??_auto_mount+1)& (0+255),w,b
 11865  0009F8  6F82               	movwf	(??_auto_mount+5)& (0+255),b
 11866  0009FA  51A5               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 11867  0009FC  217F               	addwfc	(??_auto_mount+2)& (0+255),w,b
 11868  0009FE  6F83               	movwf	(??_auto_mount+6)& (0+255),b
 11869  000A00  51A6               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 11870  000A02  2180               	addwfc	(??_auto_mount+3)& (0+255),w,b
 11871  000A04  6F84               	movwf	(??_auto_mount+7)& (0+255),b
 11872  000A06  EE20 F00C          	lfsr	2,12
 11873  000A0A  51A7               	movf	auto_mount@fs& (0+255),w,b
 11874  000A0C  26D9               	addwf	fsr2l,f,c
 11875  000A0E  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11876  000A10  22DA               	addwfc	fsr2h,f,c
 11877  000A12  C081  FFDE         	movff	??_auto_mount+4,postinc2
 11878  000A16  C082  FFDE         	movff	??_auto_mount+5,postinc2
 11879  000A1A  C083  FFDE         	movff	??_auto_mount+6,postinc2
 11880  000A1E  C084  FFDE         	movff	??_auto_mount+7,postinc2
 11881                           
 11882                           ;tff.c: 734: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;
 11883  000A22  EE20 F008          	lfsr	2,8
 11884  000A26  51A7               	movf	auto_mount@fs& (0+255),w,b
 11885  000A28  26D9               	addwf	fsr2l,f,c
 11886  000A2A  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11887  000A2C  22DA               	addwfc	fsr2h,f,c
 11888  000A2E  CFDE F07D          	movff	postinc2,??_auto_mount
 11889  000A32  CFDE F07E          	movff	postinc2,??_auto_mount+1
 11890  000A36  CFDE F07F          	movff	postinc2,??_auto_mount+2
 11891  000A3A  CFDE F080          	movff	postinc2,??_auto_mount+3
 11892  000A3E  EE20 F002          	lfsr	2,2
 11893  000A42  51A7               	movf	auto_mount@fs& (0+255),w,b
 11894  000A44  26D9               	addwf	fsr2l,f,c
 11895  000A46  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11896  000A48  22DA               	addwfc	fsr2h,f,c
 11897  000A4A  CFDE F081          	movff	postinc2,??_auto_mount+4
 11898  000A4E  CFDD F082          	movff	postdec2,??_auto_mount+5
 11899  000A52  0E04               	movlw	4
 11900  000A54  6F83               	movwf	(??_auto_mount+6)& (0+255),b
 11901  000A56                     u12635:
 11902  000A56  90D8               	bcf	status,0,c
 11903  000A58  3382               	rrcf	(??_auto_mount+5)& (0+255),f,b
 11904  000A5A  3381               	rrcf	(??_auto_mount+4)& (0+255),f,b
 11905  000A5C  2F83               	decfsz	(??_auto_mount+6)& (0+255),f,b
 11906  000A5E  D7FB               	goto	u12635
 11907  000A60  5181               	movf	(??_auto_mount+4)& (0+255),w,b
 11908  000A62  257D               	addwf	??_auto_mount& (0+255),w,b
 11909  000A64  6F84               	movwf	(??_auto_mount+7)& (0+255),b
 11910  000A66  5182               	movf	(??_auto_mount+5)& (0+255),w,b
 11911  000A68  217E               	addwfc	(??_auto_mount+1)& (0+255),w,b
 11912  000A6A  6F85               	movwf	(??_auto_mount+8)& (0+255),b
 11913  000A6C  0E00               	movlw	0
 11914  000A6E  217F               	addwfc	(??_auto_mount+2)& (0+255),w,b
 11915  000A70  6F86               	movwf	(??_auto_mount+9)& (0+255),b
 11916  000A72  0E00               	movlw	0
 11917  000A74  2180               	addwfc	(??_auto_mount+3)& (0+255),w,b
 11918  000A76  6F87               	movwf	(??_auto_mount+10)& (0+255),b
 11919  000A78  51A3               	movf	auto_mount@fatsize& (0+255),w,b
 11920  000A7A  2584               	addwf	(??_auto_mount+7)& (0+255),w,b
 11921  000A7C  6F88               	movwf	(??_auto_mount+11)& (0+255),b
 11922  000A7E  51A4               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 11923  000A80  2185               	addwfc	(??_auto_mount+8)& (0+255),w,b
 11924  000A82  6F89               	movwf	(??_auto_mount+12)& (0+255),b
 11925  000A84  51A5               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 11926  000A86  2186               	addwfc	(??_auto_mount+9)& (0+255),w,b
 11927  000A88  6F8A               	movwf	(??_auto_mount+13)& (0+255),b
 11928  000A8A  51A6               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 11929  000A8C  2187               	addwfc	(??_auto_mount+10)& (0+255),w,b
 11930  000A8E  6F8B               	movwf	(??_auto_mount+14)& (0+255),b
 11931  000A90  EE20 F010          	lfsr	2,16
 11932  000A94  51A7               	movf	auto_mount@fs& (0+255),w,b
 11933  000A96  26D9               	addwf	fsr2l,f,c
 11934  000A98  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11935  000A9A  22DA               	addwfc	fsr2h,f,c
 11936  000A9C  C088  FFDE         	movff	??_auto_mount+11,postinc2
 11937  000AA0  C089  FFDE         	movff	??_auto_mount+12,postinc2
 11938  000AA4  C08A  FFDE         	movff	??_auto_mount+13,postinc2
 11939  000AA8  C08B  FFDE         	movff	??_auto_mount+14,postinc2
 11940                           
 11941                           ;tff.c: 738: fs->free_clust = (CLUST)0xFFFFFFFF;
 11942  000AAC  EE20 F01A          	lfsr	2,26
 11943  000AB0  51A7               	movf	auto_mount@fs& (0+255),w,b
 11944  000AB2  26D9               	addwf	fsr2l,f,c
 11945  000AB4  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11946  000AB6  22DA               	addwfc	fsr2h,f,c
 11947  000AB8  0EFF               	movlw	255
 11948  000ABA  6EDE               	movwf	postinc2,c
 11949  000ABC  0EFF               	movlw	255
 11950  000ABE  6EDD               	movwf	postdec2,c
 11951                           
 11952                           ;tff.c: 754: fs->fs_type = fmt;
 11953  000AC0  EE20 F01C          	lfsr	2,28
 11954  000AC4  51A7               	movf	auto_mount@fs& (0+255),w,b
 11955  000AC6  26D9               	addwf	fsr2l,f,c
 11956  000AC8  51A8               	movf	(auto_mount@fs+1)& (0+255),w,b
 11957  000ACA  22DA               	addwfc	fsr2h,f,c
 11958  000ACC  C0A1  FFDF         	movff	auto_mount@fmt,indf2
 11959                           
 11960                           ; BSR set to: 0
 11961                           ;tff.c: 755: fs->id = ++fsid;
 11962  000AD0  0101               	movlb	1	; () banked
 11963  000AD2  4B47               	infsnz	_fsid& (0+255),f,b
 11964  000AD4  2B48               	incf	(_fsid+1)& (0+255),f,b
 11965  000AD6  C0A7  FFD9         	movff	auto_mount@fs,fsr2l
 11966  000ADA  C0A8  FFDA         	movff	auto_mount@fs+1,fsr2h
 11967  000ADE  C147  FFDE         	movff	_fsid,postinc2
 11968  000AE2  C148  FFDD         	movff	_fsid+1,postdec2
 11969                           
 11970                           ;tff.c: 756: return FR_OK;
 11971  000AE6  0E00               	movlw	0
 11972  000AE8  0012               	return		;funcret
 11973  000AEA                     __end_of_auto_mount:
 11974                           	callstack 0
 11975                           
 11976 ;; *************** function _memset *****************
 11977 ;; Defined at:
 11978 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\memset.c"
 11979 ;; Parameters:    Size  Location     Type
 11980 ;;  p1              2   24[COMRAM] PTR void 
 11981 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 11982 ;;  c               2   26[COMRAM] int 
 11983 ;;  n               2   28[COMRAM] unsigned int 
 11984 ;; Auto vars:     Size  Location     Type
 11985 ;;  p               2   30[COMRAM] PTR unsigned char 
 11986 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 11987 ;; Return value:  Size  Location     Type
 11988 ;;                  2   24[COMRAM] PTR void 
 11989 ;; Registers used:
 11990 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11991 ;; Tracked objects:
 11992 ;;		On entry : 0/0
 11993 ;;		On exit  : 0/0
 11994 ;;		Unchanged: 0/0
 11995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11996 ;;      Params:         6       0       0       0       0       0       0       0       0
 11997 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11998 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11999 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12000 ;;Total ram usage:        8 bytes
 12001 ;; Hardware stack levels used:    1
 12002 ;; Hardware stack levels required when called:    3
 12003 ;; This function calls:
 12004 ;;		Nothing
 12005 ;; This function is called by:
 12006 ;;		_make_dirfile
 12007 ;;		_reserve_direntry
 12008 ;;		_auto_mount
 12009 ;;		_f_open
 12010 ;; This function uses a non-reentrant model
 12011 ;;
 12012                           
 12013                           	psect	text58
 12014  0050E2                     __ptext58:
 12015                           	callstack 0
 12016  0050E2                     _memset:
 12017                           	callstack 20
 12018                           
 12019                           ;incstack = 0
 12020  0050E2  C019  F01F         	movff	memset@p1,memset@p
 12021  0050E6  C01A  F020         	movff	memset@p1+1,memset@p+1
 12022  0050EA  D008               	goto	l6745
 12023  0050EC                     l6741:
 12024  0050EC  C01F  FFD9         	movff	memset@p,fsr2l
 12025  0050F0  C020  FFDA         	movff	memset@p+1,fsr2h
 12026  0050F4  C01B  FFDF         	movff	memset@c,indf2
 12027  0050F8  4A1F               	infsnz	memset@p^0,f,c
 12028  0050FA  2A20               	incf	(memset@p+1)^0,f,c
 12029  0050FC                     l6745:
 12030  0050FC  061D               	decf	memset@n^0,f,c
 12031  0050FE  A0D8               	btfss	status,0,c
 12032  005100  061E               	decf	(memset@n+1)^0,f,c
 12033  005102  281D               	incf	memset@n^0,w,c
 12034  005104  E1F3               	bnz	l6741
 12035  005106  281E               	incf	(memset@n+1)^0,w,c
 12036  005108  B4D8               	btfsc	status,2,c
 12037  00510A  0012               	return	
 12038  00510C  D7EF               	goto	l6741
 12039  00510E                     __end_of_memset:
 12040                           	callstack 0
 12041                           
 12042 ;; *************** function _disk_initialize *****************
 12043 ;; Defined at:
 12044 ;;		line 59 in file "bibliotecas/diskio.c"
 12045 ;; Parameters:    Size  Location     Type
 12046 ;;  pdrv            1    wreg     unsigned char 
 12047 ;; Auto vars:     Size  Location     Type
 12048 ;;  pdrv            1   44[COMRAM] unsigned char 
 12049 ;;  result          2    0        int 
 12050 ;;  stat            1   45[COMRAM] unsigned char 
 12051 ;; Return value:  Size  Location     Type
 12052 ;;                  1    wreg      unsigned char 
 12053 ;; Registers used:
 12054 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12055 ;; Tracked objects:
 12056 ;;		On entry : 0/0
 12057 ;;		On exit  : 0/0
 12058 ;;		Unchanged: 0/0
 12059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12060 ;;      Params:         0       0       0       0       0       0       0       0       0
 12061 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12062 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12063 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12064 ;;Total ram usage:        2 bytes
 12065 ;; Hardware stack levels used:    1
 12066 ;; Hardware stack levels required when called:    8
 12067 ;; This function calls:
 12068 ;;		_sdc_disk_initialize
 12069 ;; This function is called by:
 12070 ;;		_auto_mount
 12071 ;; This function uses a non-reentrant model
 12072 ;;
 12073                           
 12074                           	psect	text59
 12075  005160                     __ptext59:
 12076                           	callstack 0
 12077  005160                     _disk_initialize:
 12078                           	callstack 16
 12079                           
 12080                           ;incstack = 0
 12081                           ;disk_initialize@pdrv stored from wreg
 12082  005160  6E2D               	movwf	disk_initialize@pdrv^0,c
 12083                           
 12084                           ;diskio.c: 63: DSTATUS stat;;diskio.c: 64: int result;;diskio.c: 66: switch (pdrv) {
 12085  005162  D005               	goto	l10317
 12086  005164                     l10299:
 12087                           
 12088                           ;diskio.c: 68: stat = sdc_disk_initialize();
 12089  005164  EC13  F00B         	call	_sdc_disk_initialize	;wreg free
 12090  005168  6E2E               	movwf	disk_initialize@stat^0,c
 12091  00516A                     l10301:
 12092                           
 12093                           ;diskio.c: 72: return stat;
 12094  00516A  502E               	movf	disk_initialize@stat^0,w,c
 12095  00516C  0012               	return	
 12096  00516E                     l10317:
 12097  00516E  502D               	movf	disk_initialize@pdrv^0,w,c
 12098                           
 12099                           ; Switch size 1, requested type "simple"
 12100                           ; Number of cases is 3, Range of values is 0 to 2
 12101                           ; switch strategies available:
 12102                           ; Name         Instructions Cycles
 12103                           ; simple_byte           10     6 (average)
 12104                           ;	Chosen strategy is simple_byte
 12105  005170  0A00               	xorlw	0	; case 0
 12106  005172  B4D8               	btfsc	status,2,c
 12107  005174  D7F7               	goto	l10299
 12108  005176  0A01               	xorlw	1	; case 1
 12109  005178  B4D8               	btfsc	status,2,c
 12110  00517A  D7F4               	goto	l10299
 12111  00517C  0A03               	xorlw	3	; case 2
 12112  00517E  B4D8               	btfsc	status,2,c
 12113  005180  D7F4               	goto	l10301
 12114                           
 12115                           ;diskio.c: 88: return 0x01;
 12116  005182  0E01               	movlw	1
 12117  005184  0012               	return		;funcret
 12118  005186                     __end_of_disk_initialize:
 12119                           	callstack 0
 12120                           
 12121 ;; *************** function _sdc_disk_initialize *****************
 12122 ;; Defined at:
 12123 ;;		line 275 in file "bibliotecas/diskio.c"
 12124 ;; Parameters:    Size  Location     Type
 12125 ;;		None
 12126 ;; Auto vars:     Size  Location     Type
 12127 ;;  count2          2    9[BANK0 ] int 
 12128 ;;  crc_number      2    5[BANK0 ] int 
 12129 ;;  count1          2    3[BANK0 ] int 
 12130 ;;  i               2    0        int 
 12131 ;;  buff            1   11[BANK0 ] unsigned char 
 12132 ;;  ocr             1    8[BANK0 ] unsigned char 
 12133 ;;  buff_i          1    7[BANK0 ] unsigned char 
 12134 ;;  stat            1    2[BANK0 ] unsigned char 
 12135 ;; Return value:  Size  Location     Type
 12136 ;;                  1    wreg      unsigned char 
 12137 ;; Registers used:
 12138 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12139 ;; Tracked objects:
 12140 ;;		On entry : 0/0
 12141 ;;		On exit  : 3F/0
 12142 ;;		Unchanged: 0/0
 12143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12144 ;;      Params:         0       0       0       0       0       0       0       0       0
 12145 ;;      Locals:         0      12       0       0       0       0       0       0       0
 12146 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12147 ;;      Totals:         1      12       0       0       0       0       0       0       0
 12148 ;;Total ram usage:       13 bytes
 12149 ;; Hardware stack levels used:    1
 12150 ;; Hardware stack levels required when called:    7
 12151 ;; This function calls:
 12152 ;;		_command
 12153 ;;		_dummy_clocks
 12154 ;;		_escreve_frase_ram_lcd
 12155 ;;		_posicao_cursor_lcd
 12156 ;;		_proceed
 12157 ;;		_response
 12158 ;;		_sdc_reset
 12159 ;; This function is called by:
 12160 ;;		_disk_initialize
 12161 ;; This function uses a non-reentrant model
 12162 ;;
 12163                           
 12164                           	psect	text60
 12165  001626                     __ptext60:
 12166                           	callstack 0
 12167  001626                     _sdc_disk_initialize:
 12168                           	callstack 16
 12169                           
 12170                           ;incstack = 0
 12171  001626  0E00               	movlw	0
 12172  001628  0100               	movlb	0	; () banked
 12173  00162A  6F64               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 12174  00162C  0E00               	movlw	0
 12175  00162E  6F63               	movwf	sdc_disk_initialize@count1& (0+255),b
 12176  001630  0E00               	movlw	0
 12177  001632  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12178  001634  0E00               	movlw	0
 12179  001636  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 12180                           
 12181                           ;diskio.c: 280: BYTE buff = 0;
 12182  001638  0E00               	movlw	0
 12183  00163A  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12184                           
 12185                           ; BSR set to: 0
 12186                           ;diskio.c: 281: BYTE buff_i;;diskio.c: 282: int crc_number;;diskio.c: 283: _delay((unsig
      +                          ned long)((1)*(48000000/4000.0)));
 12187  00163C  0E10               	movlw	16
 12188  00163E  6E2C               	movwf	??_sdc_disk_initialize^0,c
 12189  001640  0E94               	movlw	148
 12190  001642                     u15107:
 12191  001642  2EE8               	decfsz	wreg,f,c
 12192  001644  D7FE               	bra	u15107
 12193  001646  2E2C               	decfsz	??_sdc_disk_initialize^0,f,c
 12194  001648  D7FC               	bra	u15107
 12195  00164A  D000               	nop2	
 12196                           
 12197                           ;diskio.c: 284: dummy_clocks(100);
 12198  00164C  0E64               	movlw	100
 12199  00164E  EC04  F028         	call	_dummy_clocks
 12200                           
 12201                           ;diskio.c: 287: sdc_reset();
 12202  001652  EC36  F021         	call	_sdc_reset	;wreg free
 12203                           
 12204                           ;diskio.c: 288: command(0X48, 0x000001AA, 0x87);
 12205  001656  0EAA               	movlw	170
 12206  001658  6E1E               	movwf	command@arg^0,c
 12207  00165A  0E01               	movlw	1
 12208  00165C  6E1F               	movwf	(command@arg+1)^0,c
 12209  00165E  0E00               	movlw	0
 12210  001660  6E20               	movwf	(command@arg+2)^0,c
 12211  001662  0E00               	movlw	0
 12212  001664  6E21               	movwf	(command@arg+3)^0,c
 12213  001666  0E87               	movlw	135
 12214  001668  6E22               	movwf	command@CRC^0,c
 12215  00166A  0E48               	movlw	72
 12216  00166C  EC9E  F025         	call	_command
 12217                           
 12218                           ;diskio.c: 289: proceed();
 12219  001670  EC39  F02A         	call	_proceed	;wreg free
 12220  001674                     l9983:
 12221                           
 12222                           ;diskio.c: 291: buff_i = response();
 12223  001674  EC33  F02A         	call	_response	;wreg free
 12224  001678  0100               	movlb	0	; () banked
 12225  00167A  6F67               	movwf	sdc_disk_initialize@buff_i& (0+255),b
 12226                           
 12227                           ; BSR set to: 0
 12228                           ;diskio.c: 292: if(buff_i == 1)
 12229  00167C  0567               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
 12230  00167E  A4D8               	btfss	status,2,c
 12231  001680  D004               	goto	l9989
 12232                           
 12233                           ; BSR set to: 0
 12234                           ;diskio.c: 293: {;diskio.c: 294: crc_number = buff_i<<8;
 12235  001682  5167               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 12236  001684  6F66               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
 12237  001686  6B65               	clrf	sdc_disk_initialize@crc_number& (0+255),b
 12238                           
 12239                           ;diskio.c: 295: }
 12240  001688  D006               	goto	l9993
 12241  00168A                     l9989:
 12242                           
 12243                           ; BSR set to: 0
 12244                           ;diskio.c: 296: else if(buff_i==0xAA)
 12245  00168A  0EAA               	movlw	170
 12246  00168C  1967               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
 12247  00168E  A4D8               	btfss	status,2,c
 12248  001690  D002               	goto	l9993
 12249                           
 12250                           ; BSR set to: 0
 12251                           ;diskio.c: 297: {;diskio.c: 298: crc_number |= buff_i;
 12252  001692  5167               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 12253  001694  1365               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
 12254  001696                     l9993:
 12255                           
 12256                           ; BSR set to: 0
 12257                           ;diskio.c: 299: };diskio.c: 300: count1++;
 12258  001696  4B63               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
 12259  001698  2B64               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
 12260                           
 12261                           ; BSR set to: 0
 12262                           ;diskio.c: 301: }while(crc_number != 0x1AA && count1<1000);
 12263  00169A  0EAA               	movlw	170
 12264  00169C  1965               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 12265  00169E  E103               	bnz	u11210
 12266  0016A0  0566               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 12267  0016A2  B4D8               	btfsc	status,2,c
 12268  0016A4  D008               	goto	u11220
 12269  0016A6                     u11210:
 12270                           
 12271                           ; BSR set to: 0
 12272  0016A6  BF64               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
 12273  0016A8  D7E5               	goto	l9983
 12274  0016AA  0EE8               	movlw	232
 12275  0016AC  5D63               	subwf	sdc_disk_initialize@count1& (0+255),w,b
 12276  0016AE  0E03               	movlw	3
 12277  0016B0  5964               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
 12278  0016B2  A0D8               	btfss	status,0,c
 12279  0016B4  D7DF               	goto	l9983
 12280  0016B6                     u11220:
 12281                           
 12282                           ; BSR set to: 0
 12283                           ;diskio.c: 306: if (crc_number == 0x1AA)
 12284  0016B6  0EAA               	movlw	170
 12285  0016B8  1965               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 12286  0016BA  E102               	bnz	u11231
 12287  0016BC  0566               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 12288  0016BE  A4D8               	btfss	status,2,c
 12289  0016C0                     u11231:
 12290  0016C0  D09E               	goto	l10071
 12291  0016C2                     u11230:
 12292                           
 12293                           ; BSR set to: 0
 12294                           ;diskio.c: 310: count2 = 0;
 12295                           
 12296                           ; BSR set to: 0
 12297                           ;diskio.c: 309: do{
 12298  0016C2  0E00               	movlw	0
 12299  0016C4  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12300  0016C6  0E00               	movlw	0
 12301  0016C8  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 12302  0016CA                     
 12303                           ; BSR set to: 0
 12304                           ;diskio.c: 319: dummy_clocks(10);
 12305                           
 12306                           ; BSR set to: 0
 12307  0016CA  0E0A               	movlw	10
 12308  0016CC  EC04  F028         	call	_dummy_clocks
 12309                           
 12310                           ;diskio.c: 320: command(0X77, 0X00000000, 0X00);
 12311  0016D0  0E00               	movlw	0
 12312  0016D2  6E1E               	movwf	command@arg^0,c
 12313  0016D4  0E00               	movlw	0
 12314  0016D6  6E1F               	movwf	(command@arg+1)^0,c
 12315  0016D8  0E00               	movlw	0
 12316  0016DA  6E20               	movwf	(command@arg+2)^0,c
 12317  0016DC  0E00               	movlw	0
 12318  0016DE  6E21               	movwf	(command@arg+3)^0,c
 12319  0016E0  0E00               	movlw	0
 12320  0016E2  6E22               	movwf	command@CRC^0,c
 12321  0016E4  0E77               	movlw	119
 12322  0016E6  EC9E  F025         	call	_command
 12323                           
 12324                           ;diskio.c: 323: proceed();
 12325  0016EA  EC39  F02A         	call	_proceed	;wreg free
 12326  0016EE                     l10013:
 12327                           
 12328                           ;diskio.c: 325: buff = response();
 12329  0016EE  EC33  F02A         	call	_response	;wreg free
 12330  0016F2  0100               	movlb	0	; () banked
 12331  0016F4  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12332                           
 12333                           ; BSR set to: 0
 12334                           ;diskio.c: 326: count2++;
 12335  0016F6  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12336  0016F8  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12337                           
 12338                           ;diskio.c: 327: }while((buff!=0X01)&&(count2<10));
 12339  0016FA  056B               	decf	sdc_disk_initialize@buff& (0+255),w,b
 12340  0016FC  B4D8               	btfsc	status,2,c
 12341  0016FE  D008               	goto	u11250
 12342                           
 12343                           ; BSR set to: 0
 12344  001700  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12345  001702  D7F5               	goto	l10013
 12346  001704  516A               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12347  001706  E104               	bnz	u11250
 12348  001708  0E0A               	movlw	10
 12349  00170A  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12350  00170C  A0D8               	btfss	status,0,c
 12351  00170E  D7EF               	goto	l10013
 12352  001710                     u11250:
 12353                           
 12354                           ; BSR set to: 0
 12355                           ;diskio.c: 328: count2 = 0;
 12356  001710  0E00               	movlw	0
 12357  001712  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12358  001714  0E00               	movlw	0
 12359  001716  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;diskio.c: 332: dummy_clocks(10);
 12363  001718  0E0A               	movlw	10
 12364  00171A  EC04  F028         	call	_dummy_clocks
 12365                           
 12366                           ;diskio.c: 333: command(0X69, 0X40000000 , 0x00);
 12367  00171E  0E00               	movlw	0
 12368  001720  6E1E               	movwf	command@arg^0,c
 12369  001722  0E00               	movlw	0
 12370  001724  6E1F               	movwf	(command@arg+1)^0,c
 12371  001726  0E00               	movlw	0
 12372  001728  6E20               	movwf	(command@arg+2)^0,c
 12373  00172A  0E40               	movlw	64
 12374  00172C  6E21               	movwf	(command@arg+3)^0,c
 12375  00172E  0E00               	movlw	0
 12376  001730  6E22               	movwf	command@CRC^0,c
 12377  001732  0E69               	movlw	105
 12378  001734  EC9E  F025         	call	_command
 12379                           
 12380                           ;diskio.c: 334: proceed();
 12381  001738  EC39  F02A         	call	_proceed	;wreg free
 12382                           
 12383                           ;diskio.c: 335: buff = response();
 12384  00173C  EC33  F02A         	call	_response	;wreg free
 12385  001740  0100               	movlb	0	; () banked
 12386  001742  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12387                           
 12388                           ; BSR set to: 0
 12389                           ;diskio.c: 336: count2++;
 12390  001744  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12391  001746  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12392                           
 12393                           ; BSR set to: 0
 12394                           ;diskio.c: 337: }while(buff!=0X00);
 12395  001748  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12396  00174A  A4D8               	btfss	status,2,c
 12397  00174C  D7BE               	goto	l10003
 12398                           
 12399                           ; BSR set to: 0
 12400                           ;diskio.c: 342: dummy_clocks(10);
 12401                           
 12402                           ; BSR set to: 0
 12403  00174E  0E0A               	movlw	10
 12404  001750  EC04  F028         	call	_dummy_clocks
 12405                           
 12406                           ;diskio.c: 343: command(0X7A, 0X00000000, 0XFF);
 12407  001754  0E00               	movlw	0
 12408  001756  6E1E               	movwf	command@arg^0,c
 12409  001758  0E00               	movlw	0
 12410  00175A  6E1F               	movwf	(command@arg+1)^0,c
 12411  00175C  0E00               	movlw	0
 12412  00175E  6E20               	movwf	(command@arg+2)^0,c
 12413  001760  0E00               	movlw	0
 12414  001762  6E21               	movwf	(command@arg+3)^0,c
 12415  001764  0EFF               	movlw	255
 12416  001766  6E22               	movwf	command@CRC^0,c
 12417  001768  0E7A               	movlw	122
 12418  00176A  EC9E  F025         	call	_command
 12419                           
 12420                           ;diskio.c: 344: proceed();
 12421  00176E  EC39  F02A         	call	_proceed	;wreg free
 12422  001772                     l10037:
 12423                           
 12424                           ;diskio.c: 346: buff = response();
 12425  001772  EC33  F02A         	call	_response	;wreg free
 12426  001776  0100               	movlb	0	; () banked
 12427  001778  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12428                           
 12429                           ; BSR set to: 0
 12430                           ;diskio.c: 347: ocr = (buff << 1) & 0b10000000;
 12431  00177A  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12432  00177C  256B               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 12433  00177E  0B80               	andlw	128
 12434  001780  6F68               	movwf	sdc_disk_initialize@ocr& (0+255),b
 12435                           
 12436                           ; BSR set to: 0
 12437                           ;diskio.c: 348: count2++;
 12438  001782  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12439  001784  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12440                           
 12441                           ; BSR set to: 0
 12442                           ;diskio.c: 349: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 12443  001786  5168               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 12444  001788  B4D8               	btfsc	status,2,c
 12445  00178A  D00B               	goto	u11290
 12446                           
 12447                           ; BSR set to: 0
 12448  00178C  0568               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 12449  00178E  B4D8               	btfsc	status,2,c
 12450  001790  D008               	goto	u11290
 12451                           
 12452                           ; BSR set to: 0
 12453  001792  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12454  001794  D7EE               	goto	l10037
 12455  001796  516A               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12456  001798  E104               	bnz	u11290
 12457  00179A  0E0A               	movlw	10
 12458  00179C  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12459  00179E  A0D8               	btfss	status,0,c
 12460  0017A0  D7E8               	goto	l10037
 12461  0017A2                     u11290:
 12462                           
 12463                           ; BSR set to: 0
 12464                           ;diskio.c: 350: }while(ocr != 0X00 && ocr !=0x01);
 12465  0017A2  5168               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 12466  0017A4  B4D8               	btfsc	status,2,c
 12467  0017A6  D003               	goto	u11310
 12468                           
 12469                           ; BSR set to: 0
 12470  0017A8  0568               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 12471  0017AA  A4D8               	btfss	status,2,c
 12472  0017AC  D78A               	goto	u11230
 12473  0017AE                     u11310:
 12474                           
 12475                           ; BSR set to: 0
 12476                           ;diskio.c: 355: _delay((unsigned long)((1)*(48000000/4000.0)));
 12477                           
 12478                           ; BSR set to: 0
 12479  0017AE  0E10               	movlw	16
 12480  0017B0  6E2C               	movwf	??_sdc_disk_initialize^0,c
 12481  0017B2  0E94               	movlw	148
 12482  0017B4                     u15117:
 12483  0017B4  2EE8               	decfsz	wreg,f,c
 12484  0017B6  D7FE               	bra	u15117
 12485  0017B8  2E2C               	decfsz	??_sdc_disk_initialize^0,f,c
 12486  0017BA  D7FC               	bra	u15117
 12487  0017BC  D000               	nop2	
 12488                           
 12489                           ;diskio.c: 356: stat = 0X00;
 12490  0017BE  0E00               	movlw	0
 12491  0017C0  0100               	movlb	0	; () banked
 12492  0017C2  6F62               	movwf	sdc_disk_initialize@stat& (0+255),b
 12493                           
 12494                           ; BSR set to: 0
 12495                           ;diskio.c: 358: if(!ocr)
 12496  0017C4  5168               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 12497  0017C6  A4D8               	btfss	status,2,c
 12498  0017C8  D0AC               	goto	u11410
 12499                           
 12500                           ; BSR set to: 0
 12501                           ;diskio.c: 359: {;diskio.c: 361: dummy_clocks(10);
 12502  0017CA  0E0A               	movlw	10
 12503  0017CC  EC04  F028         	call	_dummy_clocks
 12504                           
 12505                           ;diskio.c: 362: command(0x50, 0x00000200,0XFF);
 12506  0017D0  0E00               	movlw	0
 12507  0017D2  6E1E               	movwf	command@arg^0,c
 12508  0017D4  0E02               	movlw	2
 12509  0017D6  6E1F               	movwf	(command@arg+1)^0,c
 12510  0017D8  0E00               	movlw	0
 12511  0017DA  6E20               	movwf	(command@arg+2)^0,c
 12512  0017DC  0E00               	movlw	0
 12513  0017DE  6E21               	movwf	(command@arg+3)^0,c
 12514  0017E0  0EFF               	movlw	255
 12515  0017E2  6E22               	movwf	command@CRC^0,c
 12516  0017E4  0E50               	movlw	80
 12517  0017E6  EC9E  F025         	call	_command
 12518                           
 12519                           ;diskio.c: 363: proceed();
 12520  0017EA  EC39  F02A         	call	_proceed	;wreg free
 12521  0017EE                     
 12522                           ;diskio.c: 367: buff = response();
 12523  0017EE  EC33  F02A         	call	_response	;wreg free
 12524  0017F2  0100               	movlb	0	; () banked
 12525  0017F4  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12526                           
 12527                           ; BSR set to: 0
 12528                           ;diskio.c: 368: }while(buff!=0X00);
 12529  0017F6  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12530  0017F8  B4D8               	btfsc	status,2,c
 12531  0017FA  D093               	goto	u11410
 12532  0017FC  D7F8               	goto	l10065
 12533  0017FE                     l10071:
 12534                           
 12535                           ; BSR set to: 0
 12536                           ;diskio.c: 373: else;diskio.c: 374: {;diskio.c: 376: count2 = 0;
 12537  0017FE  0E00               	movlw	0
 12538  001800  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12539  001802  0E00               	movlw	0
 12540  001804  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 12541                           
 12542                           ; BSR set to: 0
 12543                           ;diskio.c: 378: dummy_clocks(1);
 12544                           
 12545                           ; BSR set to: 0
 12546  001806  0E01               	movlw	1
 12547  001808  EC04  F028         	call	_dummy_clocks
 12548                           
 12549                           ;diskio.c: 379: command(0X69, 0X00000000, 0XFF);
 12550  00180C  0E00               	movlw	0
 12551  00180E  6E1E               	movwf	command@arg^0,c
 12552  001810  0E00               	movlw	0
 12553  001812  6E1F               	movwf	(command@arg+1)^0,c
 12554  001814  0E00               	movlw	0
 12555  001816  6E20               	movwf	(command@arg+2)^0,c
 12556  001818  0E00               	movlw	0
 12557  00181A  6E21               	movwf	(command@arg+3)^0,c
 12558  00181C  0EFF               	movlw	255
 12559  00181E  6E22               	movwf	command@CRC^0,c
 12560  001820  0E69               	movlw	105
 12561  001822  EC9E  F025         	call	_command
 12562                           
 12563                           ;diskio.c: 380: proceed();
 12564  001826  EC39  F02A         	call	_proceed	;wreg free
 12565  00182A                     l10081:
 12566                           
 12567                           ;diskio.c: 382: buff = response();
 12568  00182A  EC33  F02A         	call	_response	;wreg free
 12569  00182E  0100               	movlb	0	; () banked
 12570  001830  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12571                           
 12572                           ; BSR set to: 0
 12573                           ;diskio.c: 383: count2++;
 12574  001832  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12575  001834  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12576                           
 12577                           ; BSR set to: 0
 12578                           ;diskio.c: 384: if(buff==0x00)
 12579  001836  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12580  001838  A4D8               	btfss	status,2,c
 12581  00183A  D00B               	goto	l10091
 12582                           
 12583                           ; BSR set to: 0
 12584                           ;diskio.c: 385: {;diskio.c: 386: posicao_cursor_lcd(1,0);
 12585  00183C  0E00               	movlw	0
 12586  00183E  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
 12587  001840  0E01               	movlw	1
 12588  001842  EC6F  F025         	call	_posicao_cursor_lcd
 12589                           
 12590                           ;diskio.c: 387: escreve_frase_ram_lcd("SD VER. 1");
 12591  001846  0E16               	movlw	low STR_3
 12592  001848  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
 12593  00184A  0E62               	movlw	high STR_3
 12594  00184C  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 12595  00184E  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
 12596  001852                     l10091:
 12597                           
 12598                           ;diskio.c: 388: };diskio.c: 389: _delay((unsigned long)((1)*(48000000/4000.0)));
 12599  001852  0E10               	movlw	16
 12600  001854  6E2C               	movwf	??_sdc_disk_initialize^0,c
 12601  001856  0E94               	movlw	148
 12602  001858                     u15127:
 12603  001858  2EE8               	decfsz	wreg,f,c
 12604  00185A  D7FE               	bra	u15127
 12605  00185C  2E2C               	decfsz	??_sdc_disk_initialize^0,f,c
 12606  00185E  D7FC               	bra	u15127
 12607  001860  D000               	nop2	
 12608                           
 12609                           ;diskio.c: 390: }while(buff!=0X00 && count2<10000);
 12610  001862  0100               	movlb	0	; () banked
 12611  001864  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12612  001866  B4D8               	btfsc	status,2,c
 12613  001868  D008               	goto	u11360
 12614                           
 12615                           ; BSR set to: 0
 12616  00186A  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12617  00186C  D7DE               	goto	l10081
 12618  00186E  0E10               	movlw	16
 12619  001870  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12620  001872  0E27               	movlw	39
 12621  001874  596A               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12622  001876  A0D8               	btfss	status,0,c
 12623  001878  D7D8               	goto	l10081
 12624  00187A                     u11360:
 12625                           
 12626                           ; BSR set to: 0
 12627                           ;diskio.c: 393: if(count2==10)
 12628                           
 12629                           ; BSR set to: 0
 12630  00187A  0E0A               	movlw	10
 12631  00187C  1969               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 12632  00187E  116A               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12633  001880  A4D8               	btfss	status,2,c
 12634  001882  D036               	goto	u11400
 12635                           
 12636                           ; BSR set to: 0
 12637                           ;diskio.c: 394: {;diskio.c: 395: count2 = 0;
 12638  001884  0E00               	movlw	0
 12639  001886  6F6A               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 12640  001888  0E00               	movlw	0
 12641  00188A  6F69               	movwf	sdc_disk_initialize@count2& (0+255),b
 12642                           
 12643                           ; BSR set to: 0
 12644                           ;diskio.c: 396: dummy_clocks(10);
 12645  00188C  0E0A               	movlw	10
 12646  00188E  EC04  F028         	call	_dummy_clocks
 12647                           
 12648                           ;diskio.c: 397: command(0X41, 0X00000000, 0XFF);
 12649  001892  0E00               	movlw	0
 12650  001894  6E1E               	movwf	command@arg^0,c
 12651  001896  0E00               	movlw	0
 12652  001898  6E1F               	movwf	(command@arg+1)^0,c
 12653  00189A  0E00               	movlw	0
 12654  00189C  6E20               	movwf	(command@arg+2)^0,c
 12655  00189E  0E00               	movlw	0
 12656  0018A0  6E21               	movwf	(command@arg+3)^0,c
 12657  0018A2  0EFF               	movlw	255
 12658  0018A4  6E22               	movwf	command@CRC^0,c
 12659  0018A6  0E41               	movlw	65
 12660  0018A8  EC9E  F025         	call	_command
 12661                           
 12662                           ;diskio.c: 398: proceed();
 12663  0018AC  EC39  F02A         	call	_proceed	;wreg free
 12664  0018B0                     l10107:
 12665                           
 12666                           ;diskio.c: 400: buff = response();
 12667  0018B0  EC33  F02A         	call	_response	;wreg free
 12668  0018B4  0100               	movlb	0	; () banked
 12669  0018B6  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12670                           
 12671                           ; BSR set to: 0
 12672                           ;diskio.c: 401: count2++;
 12673  0018B8  4B69               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 12674  0018BA  2B6A               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 12675                           
 12676                           ; BSR set to: 0
 12677                           ;diskio.c: 402: if(buff==0x00)
 12678  0018BC  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12679  0018BE  A4D8               	btfss	status,2,c
 12680  0018C0  D00B               	goto	l10117
 12681                           
 12682                           ; BSR set to: 0
 12683                           ;diskio.c: 403: {;diskio.c: 404: posicao_cursor_lcd(1,0);
 12684  0018C2  0E00               	movlw	0
 12685  0018C4  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
 12686  0018C6  0E01               	movlw	1
 12687  0018C8  EC6F  F025         	call	_posicao_cursor_lcd
 12688                           
 12689                           ;diskio.c: 405: escreve_frase_ram_lcd("MMC Ver. 3");
 12690  0018CC  0EEC               	movlw	low STR_4
 12691  0018CE  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
 12692  0018D0  0E61               	movlw	high STR_4
 12693  0018D2  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 12694  0018D4  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
 12695  0018D8                     l10117:
 12696                           
 12697                           ;diskio.c: 406: };diskio.c: 408: }while(buff!=0X00 && count2<10000);
 12698  0018D8  0100               	movlb	0	; () banked
 12699  0018DA  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12700  0018DC  B4D8               	btfsc	status,2,c
 12701  0018DE  D008               	goto	u11400
 12702                           
 12703                           ; BSR set to: 0
 12704  0018E0  BF6A               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 12705  0018E2  D7E6               	goto	l10107
 12706  0018E4  0E10               	movlw	16
 12707  0018E6  5D69               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 12708  0018E8  0E27               	movlw	39
 12709  0018EA  596A               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 12710  0018EC  A0D8               	btfss	status,0,c
 12711  0018EE  D7E0               	goto	l10107
 12712  0018F0                     u11400:
 12713                           
 12714                           ; BSR set to: 0
 12715                           ;diskio.c: 409: };diskio.c: 412: dummy_clocks(10);
 12716  0018F0  0E0A               	movlw	10
 12717  0018F2  EC04  F028         	call	_dummy_clocks
 12718                           
 12719                           ;diskio.c: 413: command(0X50,0X00000200,0XFF);
 12720  0018F6  0E00               	movlw	0
 12721  0018F8  6E1E               	movwf	command@arg^0,c
 12722  0018FA  0E02               	movlw	2
 12723  0018FC  6E1F               	movwf	(command@arg+1)^0,c
 12724  0018FE  0E00               	movlw	0
 12725  001900  6E20               	movwf	(command@arg+2)^0,c
 12726  001902  0E00               	movlw	0
 12727  001904  6E21               	movwf	(command@arg+3)^0,c
 12728  001906  0EFF               	movlw	255
 12729  001908  6E22               	movwf	command@CRC^0,c
 12730  00190A  0E50               	movlw	80
 12731  00190C  EC9E  F025         	call	_command
 12732                           
 12733                           ;diskio.c: 414: proceed();
 12734  001910  EC39  F02A         	call	_proceed	;wreg free
 12735  001914                     
 12736                           ;diskio.c: 418: buff = response();
 12737  001914  EC33  F02A         	call	_response	;wreg free
 12738  001918  0100               	movlb	0	; () banked
 12739  00191A  6F6B               	movwf	sdc_disk_initialize@buff& (0+255),b
 12740                           
 12741                           ; BSR set to: 0
 12742                           ;diskio.c: 419: }while(buff!=0X00);
 12743  00191C  516B               	movf	sdc_disk_initialize@buff& (0+255),w,b
 12744  00191E  A4D8               	btfss	status,2,c
 12745  001920  D7F9               	goto	l10125
 12746  001922                     u11410:
 12747                           
 12748                           ; BSR set to: 0
 12749                           ;diskio.c: 421: };diskio.c: 425: return stat;
 12750  001922  5162               	movf	sdc_disk_initialize@stat& (0+255),w,b
 12751                           
 12752                           ; BSR set to: 0
 12753  001924  0012               	return		;funcret
 12754  001926                     __end_of_sdc_disk_initialize:
 12755                           	callstack 0
 12756                           
 12757 ;; *************** function _sdc_reset *****************
 12758 ;; Defined at:
 12759 ;;		line 238 in file "bibliotecas/diskio.c"
 12760 ;; Parameters:    Size  Location     Type
 12761 ;;		None
 12762 ;; Auto vars:     Size  Location     Type
 12763 ;;  teste          10    0        unsigned char [10]
 12764 ;;  count           2   40[COMRAM] int 
 12765 ;;  count_nosd      2   38[COMRAM] int 
 12766 ;;  i               2    0        int 
 12767 ;;  receive         2    0        unsigned int 
 12768 ;;  buff            1   42[COMRAM] unsigned char 
 12769 ;;  stat            1    0        unsigned char 
 12770 ;; Return value:  Size  Location     Type
 12771 ;;                  1    wreg      void 
 12772 ;; Registers used:
 12773 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12774 ;; Tracked objects:
 12775 ;;		On entry : 0/0
 12776 ;;		On exit  : 0/0
 12777 ;;		Unchanged: 0/0
 12778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12779 ;;      Params:         0       0       0       0       0       0       0       0       0
 12780 ;;      Locals:         7       0       0       0       0       0       0       0       0
 12781 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12782 ;;      Totals:         7       0       0       0       0       0       0       0       0
 12783 ;;Total ram usage:        7 bytes
 12784 ;; Hardware stack levels used:    1
 12785 ;; Hardware stack levels required when called:    6
 12786 ;; This function calls:
 12787 ;;		_command
 12788 ;;		_escreve_frase_ram_lcd
 12789 ;;		_posicao_cursor_lcd
 12790 ;;		_proceed
 12791 ;;		_response
 12792 ;; This function is called by:
 12793 ;;		_sdc_disk_initialize
 12794 ;; This function uses a non-reentrant model
 12795 ;;
 12796                           
 12797                           	psect	text61
 12798  00426C                     __ptext61:
 12799                           	callstack 0
 12800  00426C                     _sdc_reset:
 12801                           	callstack 16
 12802                           
 12803                           ; BSR set to: 0
 12804                           ;incstack = 0
 12805  00426C  0E00               	movlw	0
 12806  00426E  6E2A               	movwf	(sdc_reset@count+1)^0,c
 12807  004270  0E00               	movlw	0
 12808  004272  6E29               	movwf	sdc_reset@count^0,c
 12809  004274  0E00               	movlw	0
 12810  004276  6E28               	movwf	(sdc_reset@count_nosd+1)^0,c
 12811  004278  0E00               	movlw	0
 12812  00427A  6E27               	movwf	sdc_reset@count_nosd^0,c
 12813  00427C                     l9825:
 12814                           
 12815                           ;diskio.c: 248: command(0x40, 0X00000000, 0X95);
 12816  00427C  0E00               	movlw	0
 12817  00427E  6E1E               	movwf	command@arg^0,c
 12818  004280  0E00               	movlw	0
 12819  004282  6E1F               	movwf	(command@arg+1)^0,c
 12820  004284  0E00               	movlw	0
 12821  004286  6E20               	movwf	(command@arg+2)^0,c
 12822  004288  0E00               	movlw	0
 12823  00428A  6E21               	movwf	(command@arg+3)^0,c
 12824  00428C  0E95               	movlw	149
 12825  00428E  6E22               	movwf	command@CRC^0,c
 12826  004290  0E40               	movlw	64
 12827  004292  EC9E  F025         	call	_command
 12828                           
 12829                           ;diskio.c: 249: proceed();
 12830  004296  EC39  F02A         	call	_proceed	;wreg free
 12831  00429A                     l9829:
 12832                           
 12833                           ;diskio.c: 251: buff = response();
 12834  00429A  EC33  F02A         	call	_response	;wreg free
 12835  00429E  6E2B               	movwf	sdc_reset@buff^0,c
 12836                           
 12837                           ;diskio.c: 252: count++;
 12838  0042A0  4A29               	infsnz	sdc_reset@count^0,f,c
 12839  0042A2  2A2A               	incf	(sdc_reset@count+1)^0,f,c
 12840                           
 12841                           ;diskio.c: 253: }while(buff!=0X01 && count<10);
 12842  0042A4  042B               	decf	sdc_reset@buff^0,w,c
 12843  0042A6  B4D8               	btfsc	status,2,c
 12844  0042A8  D008               	goto	u10960
 12845  0042AA  BE2A               	btfsc	(sdc_reset@count+1)^0,7,c
 12846  0042AC  D7F6               	goto	l9829
 12847  0042AE  502A               	movf	(sdc_reset@count+1)^0,w,c
 12848  0042B0  E104               	bnz	u10960
 12849  0042B2  0E0A               	movlw	10
 12850  0042B4  5C29               	subwf	sdc_reset@count^0,w,c
 12851  0042B6  A0D8               	btfss	status,0,c
 12852  0042B8  D7F0               	goto	l9829
 12853  0042BA                     u10960:
 12854                           
 12855                           ;diskio.c: 254: count = 0;
 12856  0042BA  0E00               	movlw	0
 12857  0042BC  6E2A               	movwf	(sdc_reset@count+1)^0,c
 12858  0042BE  0E00               	movlw	0
 12859  0042C0  6E29               	movwf	sdc_reset@count^0,c
 12860                           
 12861                           ;diskio.c: 255: if(buff != 0x01)
 12862  0042C2  042B               	decf	sdc_reset@buff^0,w,c
 12863  0042C4  B4D8               	btfsc	status,2,c
 12864  0042C6  D016               	goto	l9847
 12865                           
 12866                           ;diskio.c: 256: {;diskio.c: 257: posicao_cursor_lcd(1,0);
 12867  0042C8  0E00               	movlw	0
 12868  0042CA  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
 12869  0042CC  0E01               	movlw	1
 12870  0042CE  EC6F  F025         	call	_posicao_cursor_lcd
 12871                           
 12872                           ;diskio.c: 258: escreve_frase_ram_lcd("Sem Cartao");
 12873  0042D2  0EF7               	movlw	low STR_1
 12874  0042D4  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
 12875  0042D6  0E61               	movlw	high STR_1
 12876  0042D8  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 12877  0042DA  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
 12878                           
 12879                           ;diskio.c: 259: posicao_cursor_lcd(2,0);
 12880  0042DE  0E00               	movlw	0
 12881  0042E0  6E1C               	movwf	posicao_cursor_lcd@coluna^0,c
 12882  0042E2  0E02               	movlw	2
 12883  0042E4  EC6F  F025         	call	_posicao_cursor_lcd
 12884                           
 12885                           ;diskio.c: 260: escreve_frase_ram_lcd("Insira o Cartao");
 12886  0042E8  0E8E               	movlw	low STR_2
 12887  0042EA  6E1C               	movwf	escreve_frase_ram_lcd@buffer^0,c
 12888  0042EC  0E61               	movlw	high STR_2
 12889  0042EE  6E1D               	movwf	(escreve_frase_ram_lcd@buffer+1)^0,c
 12890  0042F0  ECF6  F025         	call	_escreve_frase_ram_lcd	;wreg free
 12891  0042F4                     l9847:
 12892                           
 12893                           ;diskio.c: 261: };diskio.c: 263: }while(buff!=0X01);
 12894  0042F4  042B               	decf	sdc_reset@buff^0,w,c
 12895  0042F6  B4D8               	btfsc	status,2,c
 12896  0042F8  0012               	return	
 12897  0042FA  D7C0               	goto	l9825
 12898  0042FC                     __end_of_sdc_reset:
 12899                           	callstack 0
 12900                           
 12901 ;; *************** function _posicao_cursor_lcd *****************
 12902 ;; Defined at:
 12903 ;;		line 271 in file "bibliotecas/display_lcd.c"
 12904 ;; Parameters:    Size  Location     Type
 12905 ;;  linha           1    wreg     unsigned char 
 12906 ;;  coluna          1   27[COMRAM] unsigned char 
 12907 ;; Auto vars:     Size  Location     Type
 12908 ;;  linha           1   28[COMRAM] unsigned char 
 12909 ;;  endereco        1   29[COMRAM] unsigned char 
 12910 ;; Return value:  Size  Location     Type
 12911 ;;                  1    wreg      void 
 12912 ;; Registers used:
 12913 ;;		wreg, status,2, status,0, cstack
 12914 ;; Tracked objects:
 12915 ;;		On entry : 0/0
 12916 ;;		On exit  : 0/0
 12917 ;;		Unchanged: 0/0
 12918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12919 ;;      Params:         1       0       0       0       0       0       0       0       0
 12920 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12921 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12922 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12923 ;;Total ram usage:        3 bytes
 12924 ;; Hardware stack levels used:    1
 12925 ;; Hardware stack levels required when called:    5
 12926 ;; This function calls:
 12927 ;;		_endereco_cursor_lcd
 12928 ;; This function is called by:
 12929 ;;		_sdc_reset
 12930 ;;		_sdc_disk_initialize
 12931 ;;		_mensagem_inicial
 12932 ;;		_troca_de_tela
 12933 ;; This function uses a non-reentrant model
 12934 ;;
 12935                           
 12936                           	psect	text62
 12937  004ADE                     __ptext62:
 12938                           	callstack 0
 12939  004ADE                     _posicao_cursor_lcd:
 12940                           	callstack 24
 12941                           
 12942                           ;incstack = 0
 12943                           ;posicao_cursor_lcd@linha stored from wreg
 12944  004ADE  6E1D               	movwf	posicao_cursor_lcd@linha^0,c
 12945                           
 12946                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 12947  004AE0  0E11               	movlw	17
 12948  004AE2  601C               	cpfslt	posicao_cursor_lcd@coluna^0,c
 12949  004AE4  0012               	return	
 12950  004AE6  D01B               	goto	l9689
 12951  004AE8                     l232:
 12952                           
 12953                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 12954  004AE8  C01C  F01E         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 12955                           
 12956                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 12957  004AEC  501E               	movf	posicao_cursor_lcd@endereco^0,w,c
 12958  004AEE  EC3D  F024         	call	_endereco_cursor_lcd
 12959                           
 12960                           ;display_lcd.c: 284: break;
 12961  004AF2  D022               	goto	l9691
 12962  004AF4                     l9673:
 12963                           
 12964                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 12965  004AF4  501C               	movf	posicao_cursor_lcd@coluna^0,w,c
 12966  004AF6  0F40               	addlw	64
 12967  004AF8  6E1E               	movwf	posicao_cursor_lcd@endereco^0,c
 12968                           
 12969                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 12970  004AFA  501E               	movf	posicao_cursor_lcd@endereco^0,w,c
 12971  004AFC  EC3D  F024         	call	_endereco_cursor_lcd
 12972                           
 12973                           ;display_lcd.c: 289: break;
 12974  004B00  D01B               	goto	l9691
 12975  004B02                     l9677:
 12976                           
 12977                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 12978  004B02  501C               	movf	posicao_cursor_lcd@coluna^0,w,c
 12979  004B04  0F14               	addlw	20
 12980  004B06  6E1E               	movwf	posicao_cursor_lcd@endereco^0,c
 12981                           
 12982                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 12983  004B08  501E               	movf	posicao_cursor_lcd@endereco^0,w,c
 12984  004B0A  EC3D  F024         	call	_endereco_cursor_lcd
 12985                           
 12986                           ;display_lcd.c: 294: break;
 12987  004B0E  D014               	goto	l9691
 12988  004B10                     l9681:
 12989                           
 12990                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 12991  004B10  501C               	movf	posicao_cursor_lcd@coluna^0,w,c
 12992  004B12  0F54               	addlw	84
 12993  004B14  6E1E               	movwf	posicao_cursor_lcd@endereco^0,c
 12994                           
 12995                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 12996  004B16  501E               	movf	posicao_cursor_lcd@endereco^0,w,c
 12997  004B18  EC3D  F024         	call	_endereco_cursor_lcd
 12998                           
 12999                           ;display_lcd.c: 303: break;
 13000                           
 13001                           ;display_lcd.c: 299: break;
 13002  004B1C  D00D               	goto	l9691
 13003  004B1E                     l9689:
 13004  004B1E  501D               	movf	posicao_cursor_lcd@linha^0,w,c
 13005                           
 13006                           ; Switch size 1, requested type "simple"
 13007                           ; Number of cases is 4, Range of values is 1 to 4
 13008                           ; switch strategies available:
 13009                           ; Name         Instructions Cycles
 13010                           ; simple_byte           13     7 (average)
 13011                           ;	Chosen strategy is simple_byte
 13012  004B20  0A01               	xorlw	1	; case 1
 13013  004B22  B4D8               	btfsc	status,2,c
 13014  004B24  D7E1               	goto	l232
 13015  004B26  0A03               	xorlw	3	; case 2
 13016  004B28  B4D8               	btfsc	status,2,c
 13017  004B2A  D7E4               	goto	l9673
 13018  004B2C  0A01               	xorlw	1	; case 3
 13019  004B2E  B4D8               	btfsc	status,2,c
 13020  004B30  D7E8               	goto	l9677
 13021  004B32  0A07               	xorlw	7	; case 4
 13022  004B34  B4D8               	btfsc	status,2,c
 13023  004B36  D7EC               	goto	l9681
 13024  004B38                     l9691:
 13025                           
 13026                           ;display_lcd.c: 306: coluna++;
 13027  004B38  2A1C               	incf	posicao_cursor_lcd@coluna^0,f,c
 13028                           
 13029                           ;display_lcd.c: 307: }
 13030  004B3A  0012               	return	
 13031  004B3C                     __end_of_posicao_cursor_lcd:
 13032                           	callstack 0
 13033                           
 13034 ;; *************** function _endereco_cursor_lcd *****************
 13035 ;; Defined at:
 13036 ;;		line 218 in file "bibliotecas/display_lcd.c"
 13037 ;; Parameters:    Size  Location     Type
 13038 ;;  endereco        1    wreg     unsigned char 
 13039 ;; Auto vars:     Size  Location     Type
 13040 ;;  endereco        1   26[COMRAM] unsigned char 
 13041 ;; Return value:  Size  Location     Type
 13042 ;;                  1    wreg      void 
 13043 ;; Registers used:
 13044 ;;		wreg, status,2, status,0, cstack
 13045 ;; Tracked objects:
 13046 ;;		On entry : 0/0
 13047 ;;		On exit  : 0/0
 13048 ;;		Unchanged: 0/0
 13049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13050 ;;      Params:         0       0       0       0       0       0       0       0       0
 13051 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13052 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13053 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13054 ;;Total ram usage:        1 bytes
 13055 ;; Hardware stack levels used:    1
 13056 ;; Hardware stack levels required when called:    4
 13057 ;; This function calls:
 13058 ;;		_delay
 13059 ;; This function is called by:
 13060 ;;		_posicao_cursor_lcd
 13061 ;; This function uses a non-reentrant model
 13062 ;;
 13063                           
 13064                           	psect	text63
 13065  00487A                     __ptext63:
 13066                           	callstack 0
 13067  00487A                     _endereco_cursor_lcd:
 13068                           	callstack 24
 13069                           
 13070                           ;incstack = 0
 13071                           ;endereco_cursor_lcd@endereco stored from wreg
 13072  00487A  6E1B               	movwf	endereco_cursor_lcd@endereco^0,c
 13073                           
 13074                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 13075  00487C  9483               	bcf	131,2,c	;volatile
 13076                           
 13077                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 13078  00487E  9283               	bcf	131,1,c	;volatile
 13079                           
 13080                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 13081  004880  9083               	bcf	131,0,c	;volatile
 13082                           
 13083                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 13084  004882  8E83               	bsf	131,7,c	;volatile
 13085                           
 13086                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 13087  004884  A81B               	btfss	endereco_cursor_lcd@endereco^0,4,c
 13088  004886  D002               	goto	l213
 13089  004888  8883               	bsf	131,4,c	;volatile
 13090  00488A  D001               	goto	l9527
 13091  00488C                     l213:
 13092                           
 13093                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 13094  00488C  9883               	bcf	131,4,c	;volatile
 13095  00488E                     l9527:
 13096                           
 13097                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 13098  00488E  AA1B               	btfss	endereco_cursor_lcd@endereco^0,5,c
 13099  004890  D002               	goto	l215
 13100  004892  8A83               	bsf	131,5,c	;volatile
 13101  004894  D001               	goto	l9531
 13102  004896                     l215:
 13103                           
 13104                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 13105  004896  9A83               	bcf	131,5,c	;volatile
 13106  004898                     l9531:
 13107                           
 13108                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 13109  004898  AC1B               	btfss	endereco_cursor_lcd@endereco^0,6,c
 13110  00489A  D002               	goto	l217
 13111  00489C  8C83               	bsf	131,6,c	;volatile
 13112  00489E  D001               	goto	l218
 13113  0048A0                     l217:
 13114                           
 13115                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 13116  0048A0  9C83               	bcf	131,6,c	;volatile
 13117  0048A2                     l218:
 13118                           
 13119                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 13120  0048A2  8083               	bsf	131,0,c	;volatile
 13121                           
 13122                           ;display_lcd.c: 236: delay();
 13123  0048A4  ECAC  F029         	call	_delay	;wreg free
 13124                           
 13125                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 13126  0048A8  9083               	bcf	131,0,c	;volatile
 13127                           
 13128                           ;display_lcd.c: 238: delay();
 13129  0048AA  ECAC  F029         	call	_delay	;wreg free
 13130                           
 13131                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 13132  0048AE  A01B               	btfss	endereco_cursor_lcd@endereco^0,0,c
 13133  0048B0  D002               	goto	l219
 13134  0048B2  8883               	bsf	131,4,c	;volatile
 13135  0048B4  D001               	goto	l220
 13136  0048B6                     l219:
 13137                           
 13138                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 13139  0048B6  9883               	bcf	131,4,c	;volatile
 13140  0048B8                     l220:
 13141                           
 13142                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 13143  0048B8  A21B               	btfss	endereco_cursor_lcd@endereco^0,1,c
 13144  0048BA  D002               	goto	l221
 13145  0048BC  8A83               	bsf	131,5,c	;volatile
 13146  0048BE  D001               	goto	l222
 13147  0048C0                     l221:
 13148                           
 13149                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 13150  0048C0  9A83               	bcf	131,5,c	;volatile
 13151  0048C2                     l222:
 13152                           
 13153                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 13154  0048C2  A41B               	btfss	endereco_cursor_lcd@endereco^0,2,c
 13155  0048C4  D002               	goto	l223
 13156  0048C6  8C83               	bsf	131,6,c	;volatile
 13157  0048C8  D001               	goto	l224
 13158  0048CA                     l223:
 13159                           
 13160                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 13161  0048CA  9C83               	bcf	131,6,c	;volatile
 13162  0048CC                     l224:
 13163                           
 13164                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 13165  0048CC  A61B               	btfss	endereco_cursor_lcd@endereco^0,3,c
 13166  0048CE  D002               	goto	l225
 13167  0048D0  8E83               	bsf	131,7,c	;volatile
 13168  0048D2  D001               	goto	l226
 13169  0048D4                     l225:
 13170                           
 13171                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 13172  0048D4  9E83               	bcf	131,7,c	;volatile
 13173  0048D6                     l226:
 13174                           
 13175                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 13176  0048D6  8083               	bsf	131,0,c	;volatile
 13177                           
 13178                           ;display_lcd.c: 252: delay();
 13179  0048D8  ECAC  F029         	call	_delay	;wreg free
 13180                           
 13181                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 13182  0048DC  9083               	bcf	131,0,c	;volatile
 13183                           
 13184                           ;display_lcd.c: 254: delay();
 13185  0048DE  ECAC  F029         	call	_delay	;wreg free
 13186  0048E2  0012               	return		;funcret
 13187  0048E4                     __end_of_endereco_cursor_lcd:
 13188                           	callstack 0
 13189                           
 13190 ;; *************** function _escreve_frase_ram_lcd *****************
 13191 ;; Defined at:
 13192 ;;		line 445 in file "bibliotecas/display_lcd.c"
 13193 ;; Parameters:    Size  Location     Type
 13194 ;;  buffer          2   27[COMRAM] PTR unsigned char 
 13195 ;;		 -> STR_36(8), STR_35(9), STR_34(4), STR_33(4), 
 13196 ;;		 -> STR_32(5), STR_31(2), STR_30(5), STR_29(7), 
 13197 ;;		 -> STR_28(7), STR_25(11), mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), 
 13198 ;;		 -> NULL(0), STR_14(9), STR_13(10), STR_12(10), 
 13199 ;;		 -> STR_11(14), STR_10(21), STR_9(15), rawFix(2), 
 13200 ;;		 -> rawLongitude(13), rawLatitude(13), escreve_inteiro_lcd@texto(7), STR_4(11), 
 13201 ;;		 -> STR_3(10), STR_2(16), STR_1(11), 
 13202 ;; Auto vars:     Size  Location     Type
 13203 ;;		None
 13204 ;; Return value:  Size  Location     Type
 13205 ;;                  1    wreg      void 
 13206 ;; Registers used:
 13207 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13208 ;; Tracked objects:
 13209 ;;		On entry : 0/0
 13210 ;;		On exit  : 0/0
 13211 ;;		Unchanged: 0/0
 13212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13213 ;;      Params:         2       0       0       0       0       0       0       0       0
 13214 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13215 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13216 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13217 ;;Total ram usage:        2 bytes
 13218 ;; Hardware stack levels used:    1
 13219 ;; Hardware stack levels required when called:    5
 13220 ;; This function calls:
 13221 ;;		_escreve_caractere_lcd
 13222 ;; This function is called by:
 13223 ;;		_sdc_reset
 13224 ;;		_sdc_disk_initialize
 13225 ;;		_escreve_inteiro_lcd
 13226 ;;		_mensagem_inicial
 13227 ;;		_troca_de_tela
 13228 ;; This function uses a non-reentrant model
 13229 ;;
 13230                           
 13231                           	psect	text64
 13232  004BEC                     __ptext64:
 13233                           	callstack 0
 13234  004BEC                     _escreve_frase_ram_lcd:
 13235                           	callstack 24
 13236                           
 13237                           ;display_lcd.c: 447: while(*buffer)
 13238                           
 13239                           ;incstack = 0
 13240  004BEC  D014               	goto	l9701
 13241  004BEE                     l9697:
 13242                           
 13243                           ;display_lcd.c: 448: {;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 13244  004BEE  C01C  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 13245  004BF2  C01D  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 13246  004BF6  6AF8               	clrf	tblptru,c
 13247  004BF8  0E07               	movlw	(high __ramtop+-1)
 13248  004BFA  64F7               	cpfsgt	tblptrh,c
 13249  004BFC  D003               	bra	u10737
 13250  004BFE  0008               	tblrd		*
 13251  004C00  50F5               	movf	tablat,w,c
 13252  004C02  D005               	bra	u10730
 13253  004C04                     u10737:
 13254  004C04  CFF6 FFE1          	movff	tblptrl,fsr1l
 13255  004C08  CFF7 FFE2          	movff	tblptrh,fsr1h
 13256  004C0C  50E7               	movf	indf1,w,c
 13257  004C0E                     u10730:
 13258  004C0E  ECCC  F023         	call	_escreve_caractere_lcd
 13259                           
 13260                           ;display_lcd.c: 450: buffer++;
 13261  004C12  4A1C               	infsnz	escreve_frase_ram_lcd@buffer^0,f,c
 13262  004C14  2A1D               	incf	(escreve_frase_ram_lcd@buffer+1)^0,f,c
 13263  004C16                     l9701:
 13264  004C16  C01C  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 13265  004C1A  C01D  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 13266  004C1E  6AF8               	clrf	tblptru,c
 13267  004C20  0E07               	movlw	(high __ramtop+-1)
 13268  004C22  64F7               	cpfsgt	tblptrh,c
 13269  004C24  D003               	bra	u10747
 13270  004C26  0008               	tblrd		*
 13271  004C28  50F5               	movf	tablat,w,c
 13272  004C2A  D005               	bra	u10740
 13273  004C2C                     u10747:
 13274  004C2C  CFF6 FFE1          	movff	tblptrl,fsr1l
 13275  004C30  CFF7 FFE2          	movff	tblptrh,fsr1h
 13276  004C34  50E7               	movf	indf1,w,c
 13277  004C36                     u10740:
 13278  004C36  0900               	iorlw	0
 13279  004C38  B4D8               	btfsc	status,2,c
 13280  004C3A  0012               	return	
 13281  004C3C  D7D8               	goto	l9697
 13282  004C3E                     __end_of_escreve_frase_ram_lcd:
 13283                           	callstack 0
 13284                           
 13285 ;; *************** function _escreve_caractere_lcd *****************
 13286 ;; Defined at:
 13287 ;;		line 323 in file "bibliotecas/display_lcd.c"
 13288 ;; Parameters:    Size  Location     Type
 13289 ;;  data            1    wreg     unsigned char 
 13290 ;; Auto vars:     Size  Location     Type
 13291 ;;  data            1   26[COMRAM] unsigned char 
 13292 ;; Return value:  Size  Location     Type
 13293 ;;                  1    wreg      void 
 13294 ;; Registers used:
 13295 ;;		wreg, status,2, status,0, cstack
 13296 ;; Tracked objects:
 13297 ;;		On entry : 0/0
 13298 ;;		On exit  : 0/0
 13299 ;;		Unchanged: 0/0
 13300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13301 ;;      Params:         0       0       0       0       0       0       0       0       0
 13302 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13303 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13304 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13305 ;;Total ram usage:        1 bytes
 13306 ;; Hardware stack levels used:    1
 13307 ;; Hardware stack levels required when called:    4
 13308 ;; This function calls:
 13309 ;;		_delay
 13310 ;; This function is called by:
 13311 ;;		_escreve_frase_ram_lcd
 13312 ;; This function uses a non-reentrant model
 13313 ;;
 13314                           
 13315                           	psect	text65
 13316  004798                     __ptext65:
 13317                           	callstack 0
 13318  004798                     _escreve_caractere_lcd:
 13319                           	callstack 24
 13320                           
 13321                           ;incstack = 0
 13322                           ;escreve_caractere_lcd@data stored from wreg
 13323  004798  6E1B               	movwf	escreve_caractere_lcd@data^0,c
 13324                           
 13325                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 13326  00479A  9483               	bcf	131,2,c	;volatile
 13327                           
 13328                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 13329  00479C  8283               	bsf	131,1,c	;volatile
 13330                           
 13331                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 13332  00479E  9083               	bcf	131,0,c	;volatile
 13333                           
 13334                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 13335  0047A0  A81B               	btfss	escreve_caractere_lcd@data^0,4,c
 13336  0047A2  D002               	goto	l242
 13337  0047A4  8883               	bsf	131,4,c	;volatile
 13338  0047A6  D001               	goto	l9559
 13339  0047A8                     l242:
 13340                           
 13341                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 13342  0047A8  9883               	bcf	131,4,c	;volatile
 13343  0047AA                     l9559:
 13344                           
 13345                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 13346  0047AA  AA1B               	btfss	escreve_caractere_lcd@data^0,5,c
 13347  0047AC  D002               	goto	l244
 13348  0047AE  8A83               	bsf	131,5,c	;volatile
 13349  0047B0  D001               	goto	l9563
 13350  0047B2                     l244:
 13351                           
 13352                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 13353  0047B2  9A83               	bcf	131,5,c	;volatile
 13354  0047B4                     l9563:
 13355                           
 13356                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 13357  0047B4  AC1B               	btfss	escreve_caractere_lcd@data^0,6,c
 13358  0047B6  D002               	goto	l246
 13359  0047B8  8C83               	bsf	131,6,c	;volatile
 13360  0047BA  D001               	goto	l9567
 13361  0047BC                     l246:
 13362                           
 13363                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 13364  0047BC  9C83               	bcf	131,6,c	;volatile
 13365  0047BE                     l9567:
 13366                           
 13367                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 13368  0047BE  AE1B               	btfss	escreve_caractere_lcd@data^0,7,c
 13369  0047C0  D002               	goto	l248
 13370  0047C2  8E83               	bsf	131,7,c	;volatile
 13371  0047C4  D001               	goto	l249
 13372  0047C6                     l248:
 13373                           
 13374                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 13375  0047C6  9E83               	bcf	131,7,c	;volatile
 13376  0047C8                     l249:
 13377                           
 13378                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 13379  0047C8  8083               	bsf	131,0,c	;volatile
 13380                           
 13381                           ;display_lcd.c: 342: delay();
 13382  0047CA  ECAC  F029         	call	_delay	;wreg free
 13383                           
 13384                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 13385  0047CE  9083               	bcf	131,0,c	;volatile
 13386                           
 13387                           ;display_lcd.c: 344: delay();
 13388  0047D0  ECAC  F029         	call	_delay	;wreg free
 13389                           
 13390                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 13391  0047D4  A01B               	btfss	escreve_caractere_lcd@data^0,0,c
 13392  0047D6  D002               	goto	l250
 13393  0047D8  8883               	bsf	131,4,c	;volatile
 13394  0047DA  D001               	goto	l251
 13395  0047DC                     l250:
 13396                           
 13397                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 13398  0047DC  9883               	bcf	131,4,c	;volatile
 13399  0047DE                     l251:
 13400                           
 13401                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 13402  0047DE  A21B               	btfss	escreve_caractere_lcd@data^0,1,c
 13403  0047E0  D002               	goto	l252
 13404  0047E2  8A83               	bsf	131,5,c	;volatile
 13405  0047E4  D001               	goto	l253
 13406  0047E6                     l252:
 13407                           
 13408                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 13409  0047E6  9A83               	bcf	131,5,c	;volatile
 13410  0047E8                     l253:
 13411                           
 13412                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 13413  0047E8  A41B               	btfss	escreve_caractere_lcd@data^0,2,c
 13414  0047EA  D002               	goto	l254
 13415  0047EC  8C83               	bsf	131,6,c	;volatile
 13416  0047EE  D001               	goto	l255
 13417  0047F0                     l254:
 13418                           
 13419                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 13420  0047F0  9C83               	bcf	131,6,c	;volatile
 13421  0047F2                     l255:
 13422                           
 13423                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 13424  0047F2  A61B               	btfss	escreve_caractere_lcd@data^0,3,c
 13425  0047F4  D002               	goto	l256
 13426  0047F6  8E83               	bsf	131,7,c	;volatile
 13427  0047F8  D001               	goto	l257
 13428  0047FA                     l256:
 13429                           
 13430                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 13431  0047FA  9E83               	bcf	131,7,c	;volatile
 13432  0047FC                     l257:
 13433                           
 13434                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 13435  0047FC  8083               	bsf	131,0,c	;volatile
 13436                           
 13437                           ;display_lcd.c: 359: delay();
 13438  0047FE  ECAC  F029         	call	_delay	;wreg free
 13439                           
 13440                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 13441  004802  9083               	bcf	131,0,c	;volatile
 13442                           
 13443                           ;display_lcd.c: 361: delay();
 13444  004804  ECAC  F029         	call	_delay	;wreg free
 13445  004808  0012               	return		;funcret
 13446  00480A                     __end_of_escreve_caractere_lcd:
 13447                           	callstack 0
 13448                           
 13449 ;; *************** function _delay *****************
 13450 ;; Defined at:
 13451 ;;		line 45 in file "bibliotecas/display_lcd.c"
 13452 ;; Parameters:    Size  Location     Type
 13453 ;;		None
 13454 ;; Auto vars:     Size  Location     Type
 13455 ;;  contador_int    1   25[COMRAM] unsigned char 
 13456 ;;  contador_ext    1   24[COMRAM] unsigned char 
 13457 ;; Return value:  Size  Location     Type
 13458 ;;                  1    wreg      void 
 13459 ;; Registers used:
 13460 ;;		wreg, status,2, status,0
 13461 ;; Tracked objects:
 13462 ;;		On entry : 0/0
 13463 ;;		On exit  : 0/0
 13464 ;;		Unchanged: 0/0
 13465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13466 ;;      Params:         0       0       0       0       0       0       0       0       0
 13467 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13468 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13469 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13470 ;;Total ram usage:        2 bytes
 13471 ;; Hardware stack levels used:    1
 13472 ;; Hardware stack levels required when called:    3
 13473 ;; This function calls:
 13474 ;;		Nothing
 13475 ;; This function is called by:
 13476 ;;		_init_lcd
 13477 ;;		_escreve_cmd_lcd
 13478 ;;		_endereco_cursor_lcd
 13479 ;;		_escreve_caractere_lcd
 13480 ;; This function uses a non-reentrant model
 13481 ;;
 13482                           
 13483                           	psect	text66
 13484  005358                     __ptext66:
 13485                           	callstack 0
 13486  005358                     _delay:
 13487                           	callstack 24
 13488                           
 13489                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;;display_lcd.c: 49: for(con
      +                          tador_ext = 0; contador_ext<100; contador_ext++)
 13490                           
 13491                           ;incstack = 0
 13492  005358  0E00               	movlw	0
 13493  00535A  6E19               	movwf	delay@contador_ext^0,c
 13494  00535C                     l181:
 13495                           
 13496                           ;display_lcd.c: 50: {;display_lcd.c: 51: __nop();
 13497  00535C  F000               	nop	
 13498                           
 13499                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 13500  00535E  0E00               	movlw	0
 13501  005360  6E1A               	movwf	delay@contador_int^0,c
 13502  005362                     l183:
 13503                           
 13504                           ;display_lcd.c: 53: {;display_lcd.c: 54: __nop();
 13505  005362  F000               	nop	
 13506  005364  2A1A               	incf	delay@contador_int^0,f,c
 13507  005366  0E31               	movlw	49
 13508  005368  641A               	cpfsgt	delay@contador_int^0,c
 13509  00536A  D7FB               	goto	l183
 13510  00536C  2A19               	incf	delay@contador_ext^0,f,c
 13511  00536E  0E63               	movlw	99
 13512  005370  6419               	cpfsgt	delay@contador_ext^0,c
 13513  005372  D7F4               	goto	l181
 13514  005374  0012               	return	
 13515  005376                     __end_of_delay:
 13516                           	callstack 0
 13517                           
 13518 ;; *************** function _check_fs *****************
 13519 ;; Defined at:
 13520 ;;		line 624 in file "bibliotecas/tff.c"
 13521 ;; Parameters:    Size  Location     Type
 13522 ;;  sect            4   19[BANK0 ] unsigned long 
 13523 ;; Auto vars:     Size  Location     Type
 13524 ;;  fs              2   25[BANK0 ] PTR struct _FATFS
 13525 ;;		 -> NULL(0), fs(544), 
 13526 ;; Return value:  Size  Location     Type
 13527 ;;                  1    wreg      unsigned char 
 13528 ;; Registers used:
 13529 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13530 ;; Tracked objects:
 13531 ;;		On entry : 3F/0
 13532 ;;		On exit  : 0/0
 13533 ;;		Unchanged: 0/0
 13534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13535 ;;      Params:         0       4       0       0       0       0       0       0       0
 13536 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13537 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13538 ;;      Totals:         0       8       0       0       0       0       0       0       0
 13539 ;;Total ram usage:        8 bytes
 13540 ;; Hardware stack levels used:    1
 13541 ;; Hardware stack levels required when called:    8
 13542 ;; This function calls:
 13543 ;;		_disk_read
 13544 ;;		_memcmp
 13545 ;; This function is called by:
 13546 ;;		_auto_mount
 13547 ;; This function uses a non-reentrant model
 13548 ;;
 13549                           
 13550                           	psect	text67
 13551  0045A8                     __ptext67:
 13552                           	callstack 0
 13553  0045A8                     _check_fs:
 13554                           	callstack 16
 13555                           
 13556                           ; BSR set to: 0
 13557                           ;tff.c: 628: FATFS *fs = FatFs;
 13558                           
 13559                           ;incstack = 0
 13560  0045A8  C038  F079         	movff	_FatFs,check_fs@fs
 13561  0045AC  C039  F07A         	movff	_FatFs+1,check_fs@fs+1
 13562                           
 13563                           ; BSR set to: 0
 13564                           ;tff.c: 630: if (disk_read(0, fs->win, sect, 1) != RES_OK)
 13565  0045B0  0E20               	movlw	32
 13566  0045B2  2579               	addwf	check_fs@fs& (0+255),w,b
 13567  0045B4  6F68               	movwf	disk_read@buff& (0+255),b
 13568  0045B6  0E00               	movlw	0
 13569  0045B8  217A               	addwfc	(check_fs@fs+1)& (0+255),w,b
 13570  0045BA  6F69               	movwf	(disk_read@buff+1)& (0+255),b
 13571  0045BC  C073  F06A         	movff	check_fs@sect,disk_read@sector
 13572  0045C0  C074  F06B         	movff	check_fs@sect+1,disk_read@sector+1
 13573  0045C4  C075  F06C         	movff	check_fs@sect+2,disk_read@sector+2
 13574  0045C8  C076  F06D         	movff	check_fs@sect+3,disk_read@sector+3
 13575  0045CC  0E01               	movlw	1
 13576  0045CE  6F6E               	movwf	disk_read@count& (0+255),b
 13577  0045D0  0E00               	movlw	0
 13578  0045D2  EC05  F024         	call	_disk_read
 13579  0045D6  0900               	iorlw	0
 13580  0045D8  B4D8               	btfsc	status,2,c
 13581  0045DA  D002               	goto	l10395
 13582  0045DC                     u11790:
 13583  0045DC                     l10391:
 13584                           
 13585                           ; BSR set to: 0
 13586                           ;tff.c: 631: return 2;
 13587  0045DC  0E02               	movlw	2
 13588  0045DE  0012               	return	
 13589  0045E0                     l10395:
 13590                           
 13591                           ; BSR set to: 0
 13592                           ;tff.c: 632: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 13593  0045E0  EE22 F01E          	lfsr	2,542
 13594  0045E4  5179               	movf	check_fs@fs& (0+255),w,b
 13595  0045E6  26D9               	addwf	fsr2l,f,c
 13596  0045E8  517A               	movf	(check_fs@fs+1)& (0+255),w,b
 13597  0045EA  22DA               	addwfc	fsr2h,f,c
 13598  0045EC  0E55               	movlw	85
 13599  0045EE  18DE               	xorwf	postinc2,w,c
 13600  0045F0  E1F5               	bnz	l10391
 13601  0045F2  0EAA               	movlw	170
 13602  0045F4  18DE               	xorwf	postinc2,w,c
 13603  0045F6  A4D8               	btfss	status,2,c
 13604  0045F8  D7F1               	goto	u11790
 13605                           
 13606                           ; BSR set to: 0
 13607                           ;tff.c: 635: if (!memcmp(&fs->win[54], "FAT", 3))
 13608  0045FA  0E56               	movlw	86
 13609  0045FC  2579               	addwf	check_fs@fs& (0+255),w,b
 13610  0045FE  6E19               	movwf	memcmp@s1^0,c
 13611  004600  0E00               	movlw	0
 13612  004602  217A               	addwfc	(check_fs@fs+1)& (0+255),w,b
 13613  004604  6E1A               	movwf	(memcmp@s1+1)^0,c
 13614  004606  0E71               	movlw	low STR_23
 13615  004608  6E1B               	movwf	memcmp@s2^0,c
 13616  00460A  0E62               	movlw	high STR_23
 13617  00460C  6E1C               	movwf	(memcmp@s2+1)^0,c
 13618  00460E  0E00               	movlw	0
 13619  004610  6E1E               	movwf	(memcmp@n+1)^0,c
 13620  004612  0E03               	movlw	3
 13621  004614  6E1D               	movwf	memcmp@n^0,c
 13622  004616  ECED  F020         	call	_memcmp	;wreg free
 13623  00461A  5019               	movf	?_memcmp^0,w,c
 13624  00461C  101A               	iorwf	(?_memcmp+1)^0,w,c
 13625  00461E  A4D8               	btfss	status,2,c
 13626  004620  D002               	goto	l10407
 13627                           
 13628                           ;tff.c: 636: return 0;
 13629  004622  0E00               	movlw	0
 13630  004624  0012               	return	
 13631  004626                     l10407:
 13632                           
 13633                           ;tff.c: 641: return 1;
 13634  004626  0E01               	movlw	1
 13635  004628  0012               	return		;funcret
 13636  00462A                     __end_of_check_fs:
 13637                           	callstack 0
 13638                           
 13639 ;; *************** function _memcmp *****************
 13640 ;; Defined at:
 13641 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\memcmp.c"
 13642 ;; Parameters:    Size  Location     Type
 13643 ;;  s1              2   24[COMRAM] PTR const void 
 13644 ;;		 -> fs.win(512), NULL(0), fs(544), 
 13645 ;;  s2              2   26[COMRAM] PTR const void 
 13646 ;;		 -> f_opendir@fn(12), f_open@fn(12), STR_23(4), 
 13647 ;;  n               2   28[COMRAM] unsigned int 
 13648 ;; Auto vars:     Size  Location     Type
 13649 ;;		None
 13650 ;; Return value:  Size  Location     Type
 13651 ;;                  2   24[COMRAM] int 
 13652 ;; Registers used:
 13653 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 13654 ;; Tracked objects:
 13655 ;;		On entry : 3F/0
 13656 ;;		On exit  : 0/0
 13657 ;;		Unchanged: 0/0
 13658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13659 ;;      Params:         6       0       0       0       0       0       0       0       0
 13660 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13661 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13662 ;;      Totals:         8       0       0       0       0       0       0       0       0
 13663 ;;Total ram usage:        8 bytes
 13664 ;; Hardware stack levels used:    1
 13665 ;; Hardware stack levels required when called:    3
 13666 ;; This function calls:
 13667 ;;		Nothing
 13668 ;; This function is called by:
 13669 ;;		_trace_path
 13670 ;;		_check_fs
 13671 ;; This function uses a non-reentrant model
 13672 ;;
 13673                           
 13674                           	psect	text68
 13675  0041DA                     __ptext68:
 13676                           	callstack 0
 13677  0041DA                     _memcmp:
 13678                           	callstack 21
 13679                           
 13680                           ; BSR set to: 0
 13681                           
 13682                           ;incstack = 0
 13683  0041DA  D03B               	goto	l10179
 13684  0041DC                     l10171:
 13685  0041DC  C019  FFD9         	movff	memcmp@s1,fsr2l
 13686  0041E0  C01A  FFDA         	movff	memcmp@s1+1,fsr2h
 13687  0041E4  50DF               	movf	indf2,w,c
 13688  0041E6  6E1F               	movwf	??_memcmp^0,c
 13689  0041E8  C01B  FFF6         	movff	memcmp@s2,tblptrl
 13690  0041EC  C01C  FFF7         	movff	memcmp@s2+1,tblptrh
 13691  0041F0  6AF8               	clrf	tblptru,c
 13692  0041F2  0E07               	movlw	(high __ramtop+-1)
 13693  0041F4  64F7               	cpfsgt	tblptrh,c
 13694  0041F6  D003               	bra	u11427
 13695  0041F8  0008               	tblrd		*
 13696  0041FA  50F5               	movf	tablat,w,c
 13697  0041FC  D005               	bra	u11420
 13698  0041FE                     u11427:
 13699  0041FE  CFF6 FFE1          	movff	tblptrl,fsr1l
 13700  004202  CFF7 FFE2          	movff	tblptrh,fsr1h
 13701  004206  50E7               	movf	indf1,w,c
 13702  004208                     u11420:
 13703  004208  181F               	xorwf	??_memcmp^0,w,c
 13704  00420A  B4D8               	btfsc	status,2,c
 13705  00420C  D01E               	goto	l10177
 13706  00420E  C019  FFD9         	movff	memcmp@s1,fsr2l
 13707  004212  C01A  FFDA         	movff	memcmp@s1+1,fsr2h
 13708  004216  50DF               	movf	indf2,w,c
 13709  004218  6E1F               	movwf	??_memcmp^0,c
 13710  00421A  C01B  FFF6         	movff	memcmp@s2,tblptrl
 13711  00421E  C01C  FFF7         	movff	memcmp@s2+1,tblptrh
 13712  004222  6AF8               	clrf	tblptru,c
 13713  004224  0E07               	movlw	(high __ramtop+-1)
 13714  004226  64F7               	cpfsgt	tblptrh,c
 13715  004228  D003               	bra	u11447
 13716  00422A  0008               	tblrd		*
 13717  00422C  50F5               	movf	tablat,w,c
 13718  00422E  D005               	bra	u11440
 13719  004230                     u11447:
 13720  004230  CFF6 FFE1          	movff	tblptrl,fsr1l
 13721  004234  CFF7 FFE2          	movff	tblptrh,fsr1h
 13722  004238  50E7               	movf	indf1,w,c
 13723  00423A                     u11440:
 13724  00423A  6E20               	movwf	(??_memcmp+1)^0,c
 13725  00423C  5020               	movf	(??_memcmp+1)^0,w,c
 13726  00423E  5C1F               	subwf	??_memcmp^0,w,c
 13727  004240  6E19               	movwf	?_memcmp^0,c
 13728  004242  6A1A               	clrf	(?_memcmp+1)^0,c
 13729  004244  A0D8               	btfss	status,0,c
 13730  004246  061A               	decf	(?_memcmp+1)^0,f,c
 13731  004248  0012               	return	
 13732  00424A                     l10177:
 13733  00424A  4A19               	infsnz	memcmp@s1^0,f,c
 13734  00424C  2A1A               	incf	(memcmp@s1+1)^0,f,c
 13735  00424E  4A1B               	infsnz	memcmp@s2^0,f,c
 13736  004250  2A1C               	incf	(memcmp@s2+1)^0,f,c
 13737  004252                     l10179:
 13738  004252  061D               	decf	memcmp@n^0,f,c
 13739  004254  A0D8               	btfss	status,0,c
 13740  004256  061E               	decf	(memcmp@n+1)^0,f,c
 13741  004258  281D               	incf	memcmp@n^0,w,c
 13742  00425A  E1C0               	bnz	l10171
 13743  00425C  281E               	incf	(memcmp@n+1)^0,w,c
 13744  00425E  A4D8               	btfss	status,2,c
 13745  004260  D7BD               	goto	l10171
 13746  004262  0E00               	movlw	0
 13747  004264  6E1A               	movwf	(?_memcmp+1)^0,c
 13748  004266  0E00               	movlw	0
 13749  004268  6E19               	movwf	?_memcmp^0,c
 13750  00426A  0012               	return		;funcret
 13751  00426C                     __end_of_memcmp:
 13752                           	callstack 0
 13753                           
 13754 ;; *************** function ___lmul *****************
 13755 ;; Defined at:
 13756 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\Umul32.c"
 13757 ;; Parameters:    Size  Location     Type
 13758 ;;  multiplier      4   24[COMRAM] unsigned long 
 13759 ;;  multiplicand    4   28[COMRAM] unsigned long 
 13760 ;; Auto vars:     Size  Location     Type
 13761 ;;  product         4   32[COMRAM] unsigned long 
 13762 ;; Return value:  Size  Location     Type
 13763 ;;                  4   24[COMRAM] unsigned long 
 13764 ;; Registers used:
 13765 ;;		wreg, status,2, status,0
 13766 ;; Tracked objects:
 13767 ;;		On entry : 0/0
 13768 ;;		On exit  : 0/0
 13769 ;;		Unchanged: 0/0
 13770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13771 ;;      Params:         8       0       0       0       0       0       0       0       0
 13772 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13773 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13774 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13775 ;;Total ram usage:       12 bytes
 13776 ;; Hardware stack levels used:    1
 13777 ;; Hardware stack levels required when called:    3
 13778 ;; This function calls:
 13779 ;;		Nothing
 13780 ;; This function is called by:
 13781 ;;		_clust2sect
 13782 ;;		_auto_mount
 13783 ;;		_atol
 13784 ;; This function uses a non-reentrant model
 13785 ;;
 13786                           
 13787                           	psect	text69
 13788  004B96                     __ptext69:
 13789                           	callstack 0
 13790  004B96                     ___lmul:
 13791                           	callstack 21
 13792                           
 13793                           ;incstack = 0
 13794  004B96  0E00               	movlw	0
 13795  004B98  6E21               	movwf	___lmul@product^0,c
 13796  004B9A  0E00               	movlw	0
 13797  004B9C  6E22               	movwf	(___lmul@product+1)^0,c
 13798  004B9E  0E00               	movlw	0
 13799  004BA0  6E23               	movwf	(___lmul@product+2)^0,c
 13800  004BA2  0E00               	movlw	0
 13801  004BA4  6E24               	movwf	(___lmul@product+3)^0,c
 13802  004BA6                     l9815:
 13803  004BA6  A019               	btfss	___lmul@multiplier^0,0,c
 13804  004BA8  D008               	goto	l9819
 13805  004BAA  501D               	movf	___lmul@multiplicand^0,w,c
 13806  004BAC  2621               	addwf	___lmul@product^0,f,c
 13807  004BAE  501E               	movf	(___lmul@multiplicand+1)^0,w,c
 13808  004BB0  2222               	addwfc	(___lmul@product+1)^0,f,c
 13809  004BB2  501F               	movf	(___lmul@multiplicand+2)^0,w,c
 13810  004BB4  2223               	addwfc	(___lmul@product+2)^0,f,c
 13811  004BB6  5020               	movf	(___lmul@multiplicand+3)^0,w,c
 13812  004BB8  2224               	addwfc	(___lmul@product+3)^0,f,c
 13813  004BBA                     l9819:
 13814  004BBA  90D8               	bcf	status,0,c
 13815  004BBC  361D               	rlcf	___lmul@multiplicand^0,f,c
 13816  004BBE  361E               	rlcf	(___lmul@multiplicand+1)^0,f,c
 13817  004BC0  361F               	rlcf	(___lmul@multiplicand+2)^0,f,c
 13818  004BC2  3620               	rlcf	(___lmul@multiplicand+3)^0,f,c
 13819  004BC4  90D8               	bcf	status,0,c
 13820  004BC6  321C               	rrcf	(___lmul@multiplier+3)^0,f,c
 13821  004BC8  321B               	rrcf	(___lmul@multiplier+2)^0,f,c
 13822  004BCA  321A               	rrcf	(___lmul@multiplier+1)^0,f,c
 13823  004BCC  3219               	rrcf	___lmul@multiplier^0,f,c
 13824  004BCE  5019               	movf	___lmul@multiplier^0,w,c
 13825  004BD0  101A               	iorwf	(___lmul@multiplier+1)^0,w,c
 13826  004BD2  101B               	iorwf	(___lmul@multiplier+2)^0,w,c
 13827  004BD4  101C               	iorwf	(___lmul@multiplier+3)^0,w,c
 13828  004BD6  A4D8               	btfss	status,2,c
 13829  004BD8  D7E6               	goto	l9815
 13830  004BDA  C021  F019         	movff	___lmul@product,?___lmul
 13831  004BDE  C022  F01A         	movff	___lmul@product+1,?___lmul+1
 13832  004BE2  C023  F01B         	movff	___lmul@product+2,?___lmul+2
 13833  004BE6  C024  F01C         	movff	___lmul@product+3,?___lmul+3
 13834  004BEA  0012               	return		;funcret
 13835  004BEC                     __end_of___lmul:
 13836                           	callstack 0
 13837                           
 13838 ;; *************** function _f_mount *****************
 13839 ;; Defined at:
 13840 ;;		line 794 in file "bibliotecas/tff.c"
 13841 ;; Parameters:    Size  Location     Type
 13842 ;;  drv             1    wreg     unsigned char 
 13843 ;;  fs              2   24[COMRAM] PTR struct _FATFS
 13844 ;;		 -> fs(544), 
 13845 ;; Auto vars:     Size  Location     Type
 13846 ;;  drv             1   26[COMRAM] unsigned char 
 13847 ;; Return value:  Size  Location     Type
 13848 ;;                  1    wreg      enum E3237
 13849 ;; Registers used:
 13850 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13851 ;; Tracked objects:
 13852 ;;		On entry : 0/0
 13853 ;;		On exit  : 0/0
 13854 ;;		Unchanged: 0/0
 13855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13856 ;;      Params:         2       0       0       0       0       0       0       0       0
 13857 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13858 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13859 ;;      Totals:         3       0       0       0       0       0       0       0       0
 13860 ;;Total ram usage:        3 bytes
 13861 ;; Hardware stack levels used:    1
 13862 ;; Hardware stack levels required when called:    3
 13863 ;; This function calls:
 13864 ;;		Nothing
 13865 ;; This function is called by:
 13866 ;;		_escrita_sdcard
 13867 ;; This function uses a non-reentrant model
 13868 ;;
 13869                           
 13870                           	psect	text70
 13871  004D28                     __ptext70:
 13872                           	callstack 0
 13873  004D28                     _f_mount:
 13874                           	callstack 23
 13875                           
 13876                           ;incstack = 0
 13877                           ;f_mount@drv stored from wreg
 13878  004D28  6E1B               	movwf	f_mount@drv^0,c
 13879                           
 13880                           ;tff.c: 799: if (drv) return FR_INVALID_DRIVE;
 13881  004D2A  501B               	movf	f_mount@drv^0,w,c
 13882  004D2C  B4D8               	btfsc	status,2,c
 13883  004D2E  D002               	goto	l7745
 13884  004D30  0E05               	movlw	5
 13885  004D32  0012               	return	
 13886  004D34                     l7745:
 13887                           
 13888                           ;tff.c: 801: if (FatFs) FatFs->fs_type = 0;
 13889  004D34  5038               	movf	_FatFs^0,w,c
 13890  004D36  1039               	iorwf	(_FatFs+1)^0,w,c
 13891  004D38  B4D8               	btfsc	status,2,c
 13892  004D3A  D008               	goto	l7749
 13893  004D3C  EE20 F01C          	lfsr	2,28
 13894  004D40  5038               	movf	_FatFs^0,w,c
 13895  004D42  26D9               	addwf	fsr2l,f,c
 13896  004D44  5039               	movf	(_FatFs+1)^0,w,c
 13897  004D46  22DA               	addwfc	fsr2h,f,c
 13898  004D48  0E00               	movlw	0
 13899  004D4A  6EDF               	movwf	indf2,c
 13900  004D4C                     l7749:
 13901                           
 13902                           ;tff.c: 803: FatFs = fs;
 13903  004D4C  C019  F038         	movff	f_mount@fs,_FatFs
 13904  004D50  C01A  F039         	movff	f_mount@fs+1,_FatFs+1
 13905                           
 13906                           ;tff.c: 804: if (fs) fs->fs_type = 0;
 13907  004D54  5019               	movf	f_mount@fs^0,w,c
 13908  004D56  101A               	iorwf	(f_mount@fs+1)^0,w,c
 13909  004D58  B4D8               	btfsc	status,2,c
 13910  004D5A  D008               	goto	l7755
 13911  004D5C  EE20 F01C          	lfsr	2,28
 13912  004D60  5019               	movf	f_mount@fs^0,w,c
 13913  004D62  26D9               	addwf	fsr2l,f,c
 13914  004D64  501A               	movf	(f_mount@fs+1)^0,w,c
 13915  004D66  22DA               	addwfc	fsr2h,f,c
 13916  004D68  0E00               	movlw	0
 13917  004D6A  6EDF               	movwf	indf2,c
 13918  004D6C                     l7755:
 13919                           
 13920                           ;tff.c: 806: return FR_OK;
 13921  004D6C  0E00               	movlw	0
 13922  004D6E  0012               	return		;funcret
 13923  004D70                     __end_of_f_mount:
 13924                           	callstack 0
 13925                           
 13926 ;; *************** function _f_lseek *****************
 13927 ;; Defined at:
 13928 ;;		line 1140 in file "bibliotecas/tff.c"
 13929 ;; Parameters:    Size  Location     Type
 13930 ;;  fp              2   78[BANK0 ] PTR struct _FIL
 13931 ;;		 -> fil(28), 
 13932 ;;  ofs             4   80[BANK0 ] unsigned long 
 13933 ;; Auto vars:     Size  Location     Type
 13934 ;;  csize           4  105[BANK0 ] unsigned long 
 13935 ;;  ifptr           4  101[BANK0 ] unsigned long 
 13936 ;;  clust           2  109[BANK0 ] unsigned short 
 13937 ;;  res             1  100[BANK0 ] enum E155
 13938 ;; Return value:  Size  Location     Type
 13939 ;;                  1    wreg      enum E3237
 13940 ;; Registers used:
 13941 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13942 ;; Tracked objects:
 13943 ;;		On entry : 3F/0
 13944 ;;		On exit  : 3F/0
 13945 ;;		Unchanged: 0/0
 13946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13947 ;;      Params:         0       6       0       0       0       0       0       0       0
 13948 ;;      Locals:         0      11       0       0       0       0       0       0       0
 13949 ;;      Temps:          0      16       0       0       0       0       0       0       0
 13950 ;;      Totals:         0      33       0       0       0       0       0       0       0
 13951 ;;Total ram usage:       33 bytes
 13952 ;; Hardware stack levels used:    1
 13953 ;; Hardware stack levels required when called:   11
 13954 ;; This function calls:
 13955 ;;		___lldiv
 13956 ;;		_create_chain
 13957 ;;		_get_cluster
 13958 ;;		_validate
 13959 ;; This function is called by:
 13960 ;;		_escrita_sdcard
 13961 ;; This function uses a non-reentrant model
 13962 ;;
 13963                           
 13964                           	psect	text71
 13965  000AEA                     __ptext71:
 13966                           	callstack 0
 13967  000AEA                     _f_lseek:
 13968                           	callstack 15
 13969                           
 13970                           ; BSR set to: 0
 13971                           ;tff.c: 1145: FRESULT res;;tff.c: 1146: CLUST clust;;tff.c: 1147: DWORD csize, ifptr;;tf
      +                          f.c: 1150: res = validate(fp->fs, fp->id);
 13972                           
 13973                           ;incstack = 0
 13974  000AEA  EE20 F004          	lfsr	2,4
 13975  000AEE  51AE               	movf	f_lseek@fp& (0+255),w,b
 13976  000AF0  26D9               	addwf	fsr2l,f,c
 13977  000AF2  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 13978  000AF4  22DA               	addwfc	fsr2h,f,c
 13979  000AF6  CFDE F01F          	movff	postinc2,validate@fs
 13980  000AFA  CFDD F020          	movff	postdec2,validate@fs+1
 13981  000AFE  C0AE  FFD9         	movff	f_lseek@fp,fsr2l
 13982  000B02  C0AF  FFDA         	movff	f_lseek@fp+1,fsr2h
 13983  000B06  CFDE F021          	movff	postinc2,validate@id
 13984  000B0A  CFDD F022          	movff	postdec2,validate@id+1
 13985  000B0E  ECB8  F026         	call	_validate	;wreg free
 13986  000B12  0100               	movlb	0	; () banked
 13987  000B14  6FC4               	movwf	f_lseek@res& (0+255),b
 13988                           
 13989                           ; BSR set to: 0
 13990                           ;tff.c: 1151: if (res != FR_OK) return res;
 13991  000B16  51C4               	movf	f_lseek@res& (0+255),w,b
 13992  000B18  A4D8               	btfss	status,2,c
 13993  000B1A  0012               	return	
 13994                           
 13995                           ; BSR set to: 0
 13996                           ;tff.c: 1152: if (fp->flag & 0x80) return FR_RW_ERROR;
 13997  000B1C  EE20 F002          	lfsr	2,2
 13998  000B20  51AE               	movf	f_lseek@fp& (0+255),w,b
 13999  000B22  26D9               	addwf	fsr2l,f,c
 14000  000B24  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14001  000B26  22DA               	addwfc	fsr2h,f,c
 14002  000B28  BEDF               	btfsc	indf2,7,c
 14003  000B2A  0012               	return	
 14004                           
 14005                           ; BSR set to: 0
 14006                           ;tff.c: 1153: if (ofs > fp->fsize;tff.c: 1155: && !(fp->flag & 0x02);tff.c: 1157: ) ofs 
      +                          = fp->fsize;
 14007  000B2C  EE20 F00A          	lfsr	2,10
 14008  000B30  51AE               	movf	f_lseek@fp& (0+255),w,b
 14009  000B32  26D9               	addwf	fsr2l,f,c
 14010  000B34  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14011  000B36  22DA               	addwfc	fsr2h,f,c
 14012  000B38  51B0               	movf	f_lseek@ofs& (0+255),w,b
 14013  000B3A  5CDE               	subwf	postinc2,w,c
 14014  000B3C  51B1               	movf	(f_lseek@ofs+1)& (0+255),w,b
 14015  000B3E  58DE               	subwfb	postinc2,w,c
 14016  000B40  51B2               	movf	(f_lseek@ofs+2)& (0+255),w,b
 14017  000B42  58DE               	subwfb	postinc2,w,c
 14018  000B44  51B3               	movf	(f_lseek@ofs+3)& (0+255),w,b
 14019  000B46  58DE               	subwfb	postinc2,w,c
 14020  000B48  B0D8               	btfsc	status,0,c
 14021  000B4A  D016               	goto	l1076
 14022                           
 14023                           ; BSR set to: 0
 14024  000B4C  EE20 F002          	lfsr	2,2
 14025  000B50  51AE               	movf	f_lseek@fp& (0+255),w,b
 14026  000B52  26D9               	addwf	fsr2l,f,c
 14027  000B54  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14028  000B56  22DA               	addwfc	fsr2h,f,c
 14029  000B58  B2DF               	btfsc	indf2,1,c
 14030  000B5A  D00E               	goto	l1076
 14031                           
 14032                           ; BSR set to: 0
 14033  000B5C  EE20 F00A          	lfsr	2,10
 14034  000B60  51AE               	movf	f_lseek@fp& (0+255),w,b
 14035  000B62  26D9               	addwf	fsr2l,f,c
 14036  000B64  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14037  000B66  22DA               	addwfc	fsr2h,f,c
 14038  000B68  CFDE F0B0          	movff	postinc2,f_lseek@ofs
 14039  000B6C  CFDE F0B1          	movff	postinc2,f_lseek@ofs+1
 14040  000B70  CFDE F0B2          	movff	postinc2,f_lseek@ofs+2
 14041  000B74  CFDE F0B3          	movff	postinc2,f_lseek@ofs+3
 14042  000B78                     l1076:
 14043                           
 14044                           ; BSR set to: 0
 14045                           ;tff.c: 1159: ifptr = fp->fptr;
 14046  000B78  EE20 F006          	lfsr	2,6
 14047  000B7C  51AE               	movf	f_lseek@fp& (0+255),w,b
 14048  000B7E  26D9               	addwf	fsr2l,f,c
 14049  000B80  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14050  000B82  22DA               	addwfc	fsr2h,f,c
 14051  000B84  CFDE F0C5          	movff	postinc2,f_lseek@ifptr
 14052  000B88  CFDE F0C6          	movff	postinc2,f_lseek@ifptr+1
 14053  000B8C  CFDE F0C7          	movff	postinc2,f_lseek@ifptr+2
 14054  000B90  CFDE F0C8          	movff	postinc2,f_lseek@ifptr+3
 14055                           
 14056                           ;tff.c: 1160: fp->fptr = 0; fp->csect = 255;
 14057  000B94  EE20 F006          	lfsr	2,6
 14058  000B98  51AE               	movf	f_lseek@fp& (0+255),w,b
 14059  000B9A  26D9               	addwf	fsr2l,f,c
 14060  000B9C  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14061  000B9E  22DA               	addwfc	fsr2h,f,c
 14062  000BA0  6ADE               	clrf	postinc2,c
 14063  000BA2  6ADE               	clrf	postinc2,c
 14064  000BA4  6ADE               	clrf	postinc2,c
 14065  000BA6  6ADD               	clrf	postdec2,c
 14066  000BA8  EE20 F003          	lfsr	2,3
 14067  000BAC  51AE               	movf	f_lseek@fp& (0+255),w,b
 14068  000BAE  26D9               	addwf	fsr2l,f,c
 14069  000BB0  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14070  000BB2  22DA               	addwfc	fsr2h,f,c
 14071  000BB4  0EFF               	movlw	255
 14072  000BB6  6EDF               	movwf	indf2,c
 14073                           
 14074                           ; BSR set to: 0
 14075                           ;tff.c: 1161: if (ofs > 0) {
 14076  000BB8  51B0               	movf	f_lseek@ofs& (0+255),w,b
 14077  000BBA  11B1               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 14078  000BBC  11B2               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 14079  000BBE  11B3               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 14080  000BC0  B4D8               	btfsc	status,2,c
 14081  000BC2  D19C               	goto	l11193
 14082                           
 14083                           ; BSR set to: 0
 14084                           ;tff.c: 1162: csize = (DWORD)fp->fs->csize * 512U;
 14085  000BC4  EE20 F004          	lfsr	2,4
 14086  000BC8  51AE               	movf	f_lseek@fp& (0+255),w,b
 14087  000BCA  26D9               	addwf	fsr2l,f,c
 14088  000BCC  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14089  000BCE  22DA               	addwfc	fsr2h,f,c
 14090  000BD0  EE10 F01D          	lfsr	1,29
 14091  000BD4  50DE               	movf	postinc2,w,c
 14092  000BD6  26E1               	addwf	fsr1l,f,c
 14093  000BD8  50DD               	movf	postdec2,w,c
 14094  000BDA  22E2               	addwfc	fsr1h,f,c
 14095  000BDC  50E7               	movf	indf1,w,c
 14096  000BDE  6FB4               	movwf	??_f_lseek& (0+255),b
 14097  000BE0  C0B4  F0B5         	movff	??_f_lseek,??_f_lseek+1
 14098  000BE4  6BB6               	clrf	(??_f_lseek+2)& (0+255),b
 14099  000BE6  6BB7               	clrf	(??_f_lseek+3)& (0+255),b
 14100  000BE8  6BB8               	clrf	(??_f_lseek+4)& (0+255),b
 14101  000BEA  0E09               	movlw	9
 14102  000BEC                     u13075:
 14103  000BEC  90D8               	bcf	status,0,c
 14104  000BEE  37B5               	rlcf	(??_f_lseek+1)& (0+255),f,b
 14105  000BF0  37B6               	rlcf	(??_f_lseek+2)& (0+255),f,b
 14106  000BF2  37B7               	rlcf	(??_f_lseek+3)& (0+255),f,b
 14107  000BF4  37B8               	rlcf	(??_f_lseek+4)& (0+255),f,b
 14108  000BF6  2EE8               	decfsz	wreg,f,c
 14109  000BF8  D7F9               	goto	u13075
 14110  000BFA  C0B5  F0C9         	movff	??_f_lseek+1,f_lseek@csize
 14111  000BFE  C0B6  F0CA         	movff	??_f_lseek+2,f_lseek@csize+1
 14112  000C02  C0B7  F0CB         	movff	??_f_lseek+3,f_lseek@csize+2
 14113  000C06  C0B8  F0CC         	movff	??_f_lseek+4,f_lseek@csize+3
 14114                           
 14115                           ; BSR set to: 0
 14116                           ;tff.c: 1163: if (ifptr > 0 &&;tff.c: 1164: (ofs - 1) / csize >= (ifptr - 1) / csize) {
 14117  000C0A  51C5               	movf	f_lseek@ifptr& (0+255),w,b
 14118  000C0C  11C6               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 14119  000C0E  11C7               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 14120  000C10  11C8               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 14121  000C12  B4D8               	btfsc	status,2,c
 14122  000C14  D093               	goto	l11151
 14123                           
 14124                           ; BSR set to: 0
 14125  000C16  0EFF               	movlw	255
 14126  000C18  25B0               	addwf	f_lseek@ofs& (0+255),w,b
 14127  000C1A  6E19               	movwf	___lldiv@dividend^0,c
 14128  000C1C  0EFF               	movlw	255
 14129  000C1E  21B1               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 14130  000C20  6E1A               	movwf	(___lldiv@dividend+1)^0,c
 14131  000C22  0EFF               	movlw	255
 14132  000C24  21B2               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 14133  000C26  6E1B               	movwf	(___lldiv@dividend+2)^0,c
 14134  000C28  0EFF               	movlw	255
 14135  000C2A  21B3               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 14136  000C2C  6E1C               	movwf	(___lldiv@dividend+3)^0,c
 14137  000C2E  C0C9  F01D         	movff	f_lseek@csize,___lldiv@divisor
 14138  000C32  C0CA  F01E         	movff	f_lseek@csize+1,___lldiv@divisor+1
 14139  000C36  C0CB  F01F         	movff	f_lseek@csize+2,___lldiv@divisor+2
 14140  000C3A  C0CC  F020         	movff	f_lseek@csize+3,___lldiv@divisor+3
 14141  000C3E  EC15  F023         	call	___lldiv	;wreg free
 14142  000C42  C019  F0B4         	movff	?___lldiv,??_f_lseek
 14143  000C46  C01A  F0B5         	movff	?___lldiv+1,??_f_lseek+1
 14144  000C4A  C01B  F0B6         	movff	?___lldiv+2,??_f_lseek+2
 14145  000C4E  C01C  F0B7         	movff	?___lldiv+3,??_f_lseek+3
 14146  000C52  0EFF               	movlw	255
 14147  000C54  0100               	movlb	0	; () banked
 14148  000C56  25C5               	addwf	f_lseek@ifptr& (0+255),w,b
 14149  000C58  6E19               	movwf	___lldiv@dividend^0,c
 14150  000C5A  0EFF               	movlw	255
 14151  000C5C  21C6               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 14152  000C5E  6E1A               	movwf	(___lldiv@dividend+1)^0,c
 14153  000C60  0EFF               	movlw	255
 14154  000C62  21C7               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 14155  000C64  6E1B               	movwf	(___lldiv@dividend+2)^0,c
 14156  000C66  0EFF               	movlw	255
 14157  000C68  21C8               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 14158  000C6A  6E1C               	movwf	(___lldiv@dividend+3)^0,c
 14159  000C6C  C0C9  F01D         	movff	f_lseek@csize,___lldiv@divisor
 14160  000C70  C0CA  F01E         	movff	f_lseek@csize+1,___lldiv@divisor+1
 14161  000C74  C0CB  F01F         	movff	f_lseek@csize+2,___lldiv@divisor+2
 14162  000C78  C0CC  F020         	movff	f_lseek@csize+3,___lldiv@divisor+3
 14163  000C7C  EC15  F023         	call	___lldiv	;wreg free
 14164  000C80  5019               	movf	?___lldiv^0,w,c
 14165  000C82  0100               	movlb	0	; () banked
 14166  000C84  5DB4               	subwf	??_f_lseek& (0+255),w,b
 14167  000C86  501A               	movf	(?___lldiv+1)^0,w,c
 14168  000C88  59B5               	subwfb	(??_f_lseek+1)& (0+255),w,b
 14169  000C8A  501B               	movf	(?___lldiv+2)^0,w,c
 14170  000C8C  59B6               	subwfb	(??_f_lseek+2)& (0+255),w,b
 14171  000C8E  501C               	movf	(?___lldiv+3)^0,w,c
 14172  000C90  59B7               	subwfb	(??_f_lseek+3)& (0+255),w,b
 14173  000C92  A0D8               	btfss	status,0,c
 14174  000C94  D053               	goto	l11151
 14175                           
 14176                           ; BSR set to: 0
 14177                           ;tff.c: 1165: fp->fptr = (ifptr - 1) & ~(csize - 1);
 14178  000C96  0EFF               	movlw	255
 14179  000C98  25C9               	addwf	f_lseek@csize& (0+255),w,b
 14180  000C9A  6FB4               	movwf	??_f_lseek& (0+255),b
 14181  000C9C  0EFF               	movlw	255
 14182  000C9E  21CA               	addwfc	(f_lseek@csize+1)& (0+255),w,b
 14183  000CA0  6FB5               	movwf	(??_f_lseek+1)& (0+255),b
 14184  000CA2  0EFF               	movlw	255
 14185  000CA4  21CB               	addwfc	(f_lseek@csize+2)& (0+255),w,b
 14186  000CA6  6FB6               	movwf	(??_f_lseek+2)& (0+255),b
 14187  000CA8  0EFF               	movlw	255
 14188  000CAA  21CC               	addwfc	(f_lseek@csize+3)& (0+255),w,b
 14189  000CAC  6FB7               	movwf	(??_f_lseek+3)& (0+255),b
 14190  000CAE  1DB4               	comf	??_f_lseek& (0+255),w,b
 14191  000CB0  6FB8               	movwf	(??_f_lseek+4)& (0+255),b
 14192  000CB2  1DB5               	comf	(??_f_lseek+1)& (0+255),w,b
 14193  000CB4  6FB9               	movwf	(??_f_lseek+5)& (0+255),b
 14194  000CB6  1DB6               	comf	(??_f_lseek+2)& (0+255),w,b
 14195  000CB8  6FBA               	movwf	(??_f_lseek+6)& (0+255),b
 14196  000CBA  1DB7               	comf	(??_f_lseek+3)& (0+255),w,b
 14197  000CBC  6FBB               	movwf	(??_f_lseek+7)& (0+255),b
 14198  000CBE  0EFF               	movlw	255
 14199  000CC0  25C5               	addwf	f_lseek@ifptr& (0+255),w,b
 14200  000CC2  6FBC               	movwf	(??_f_lseek+8)& (0+255),b
 14201  000CC4  0EFF               	movlw	255
 14202  000CC6  21C6               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 14203  000CC8  6FBD               	movwf	(??_f_lseek+9)& (0+255),b
 14204  000CCA  0EFF               	movlw	255
 14205  000CCC  21C7               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 14206  000CCE  6FBE               	movwf	(??_f_lseek+10)& (0+255),b
 14207  000CD0  0EFF               	movlw	255
 14208  000CD2  21C8               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 14209  000CD4  6FBF               	movwf	(??_f_lseek+11)& (0+255),b
 14210  000CD6  51B8               	movf	(??_f_lseek+4)& (0+255),w,b
 14211  000CD8  15BC               	andwf	(??_f_lseek+8)& (0+255),w,b
 14212  000CDA  6FC0               	movwf	(??_f_lseek+12)& (0+255),b
 14213  000CDC  51B9               	movf	(??_f_lseek+5)& (0+255),w,b
 14214  000CDE  15BD               	andwf	(??_f_lseek+9)& (0+255),w,b
 14215  000CE0  6FC1               	movwf	(??_f_lseek+13)& (0+255),b
 14216  000CE2  51BA               	movf	(??_f_lseek+6)& (0+255),w,b
 14217  000CE4  15BE               	andwf	(??_f_lseek+10)& (0+255),w,b
 14218  000CE6  6FC2               	movwf	(??_f_lseek+14)& (0+255),b
 14219  000CE8  51BB               	movf	(??_f_lseek+7)& (0+255),w,b
 14220  000CEA  15BF               	andwf	(??_f_lseek+11)& (0+255),w,b
 14221  000CEC  6FC3               	movwf	(??_f_lseek+15)& (0+255),b
 14222  000CEE  EE20 F006          	lfsr	2,6
 14223  000CF2  51AE               	movf	f_lseek@fp& (0+255),w,b
 14224  000CF4  26D9               	addwf	fsr2l,f,c
 14225  000CF6  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14226  000CF8  22DA               	addwfc	fsr2h,f,c
 14227  000CFA  C0C0  FFDE         	movff	??_f_lseek+12,postinc2
 14228  000CFE  C0C1  FFDE         	movff	??_f_lseek+13,postinc2
 14229  000D02  C0C2  FFDE         	movff	??_f_lseek+14,postinc2
 14230  000D06  C0C3  FFDE         	movff	??_f_lseek+15,postinc2
 14231                           
 14232                           ;tff.c: 1166: ofs -= fp->fptr;
 14233  000D0A  EE20 F006          	lfsr	2,6
 14234  000D0E  51AE               	movf	f_lseek@fp& (0+255),w,b
 14235  000D10  26D9               	addwf	fsr2l,f,c
 14236  000D12  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14237  000D14  22DA               	addwfc	fsr2h,f,c
 14238  000D16  50DE               	movf	postinc2,w,c
 14239  000D18  5FB0               	subwf	f_lseek@ofs& (0+255),f,b
 14240  000D1A  50DE               	movf	postinc2,w,c
 14241  000D1C  5BB1               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 14242  000D1E  50DE               	movf	postinc2,w,c
 14243  000D20  5BB2               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 14244  000D22  50DD               	movf	postdec2,w,c
 14245  000D24  5BB3               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 14246                           
 14247                           ;tff.c: 1167: clust = fp->curr_clust;
 14248  000D26  EE20 F010          	lfsr	2,16
 14249  000D2A  51AE               	movf	f_lseek@fp& (0+255),w,b
 14250  000D2C  26D9               	addwf	fsr2l,f,c
 14251  000D2E  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14252  000D30  22DA               	addwfc	fsr2h,f,c
 14253  000D32  CFDE F0CD          	movff	postinc2,f_lseek@clust
 14254  000D36  CFDD F0CE          	movff	postdec2,f_lseek@clust+1
 14255                           
 14256                           ;tff.c: 1168: } else {
 14257  000D3A  D030               	goto	l11163
 14258  000D3C                     l11151:
 14259                           
 14260                           ; BSR set to: 0
 14261                           ;tff.c: 1169: clust = fp->org_clust;
 14262  000D3C  EE20 F00E          	lfsr	2,14
 14263  000D40  51AE               	movf	f_lseek@fp& (0+255),w,b
 14264  000D42  26D9               	addwf	fsr2l,f,c
 14265  000D44  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14266  000D46  22DA               	addwfc	fsr2h,f,c
 14267  000D48  CFDE F0CD          	movff	postinc2,f_lseek@clust
 14268  000D4C  CFDD F0CE          	movff	postdec2,f_lseek@clust+1
 14269                           
 14270                           ; BSR set to: 0
 14271                           ;tff.c: 1171: if (clust == 0) {
 14272  000D50  51CD               	movf	f_lseek@clust& (0+255),w,b
 14273  000D52  11CE               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14274  000D54  A4D8               	btfss	status,2,c
 14275  000D56  D018               	goto	l1080
 14276                           
 14277                           ; BSR set to: 0
 14278                           ;tff.c: 1172: clust = create_chain(0);
 14279  000D58  0E00               	movlw	0
 14280  000D5A  6FA1               	movwf	(create_chain@clust+1)& (0+255),b
 14281  000D5C  0E00               	movlw	0
 14282  000D5E  6FA0               	movwf	create_chain@clust& (0+255),b
 14283  000D60  EC7D  F016         	call	_create_chain	;wreg free
 14284  000D64  C0A0  F0CD         	movff	?_create_chain,f_lseek@clust
 14285  000D68  C0A1  F0CE         	movff	?_create_chain+1,f_lseek@clust+1
 14286                           
 14287                           ; BSR set to: 0
 14288                           ;tff.c: 1173: if (clust == 1) goto fk_error;
 14289  000D6C  05CD               	decf	f_lseek@clust& (0+255),w,b
 14290  000D6E  11CE               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14291  000D70  B4D8               	btfsc	status,2,c
 14292  000D72  D0F7               	goto	l11201
 14293                           
 14294                           ; BSR set to: 0
 14295                           ;tff.c: 1174: fp->org_clust = clust;
 14296  000D74  EE20 F00E          	lfsr	2,14
 14297  000D78  51AE               	movf	f_lseek@fp& (0+255),w,b
 14298  000D7A  26D9               	addwf	fsr2l,f,c
 14299  000D7C  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14300  000D7E  22DA               	addwfc	fsr2h,f,c
 14301  000D80  C0CD  FFDE         	movff	f_lseek@clust,postinc2
 14302  000D84  C0CE  FFDD         	movff	f_lseek@clust+1,postdec2
 14303  000D88                     l1080:
 14304                           
 14305                           ; BSR set to: 0
 14306                           ;tff.c: 1175: };tff.c: 1177: fp->curr_clust = clust;
 14307  000D88  EE20 F010          	lfsr	2,16
 14308  000D8C  51AE               	movf	f_lseek@fp& (0+255),w,b
 14309  000D8E  26D9               	addwf	fsr2l,f,c
 14310  000D90  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14311  000D92  22DA               	addwfc	fsr2h,f,c
 14312  000D94  C0CD  FFDE         	movff	f_lseek@clust,postinc2
 14313  000D98  C0CE  FFDD         	movff	f_lseek@clust+1,postdec2
 14314  000D9C                     l11163:
 14315                           
 14316                           ; BSR set to: 0
 14317                           ;tff.c: 1178: };tff.c: 1179: if (clust != 0) {
 14318  000D9C  51CD               	movf	f_lseek@clust& (0+255),w,b
 14319  000D9E  11CE               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14320  000DA0  A4D8               	btfss	status,2,c
 14321  000DA2  D062               	goto	l11185
 14322  000DA4  D0AB               	goto	l11193
 14323  000DA6                     l11167:
 14324                           
 14325                           ; BSR set to: 0
 14326                           ;tff.c: 1182: if (fp->flag & 0x02) {
 14327  000DA6  EE20 F002          	lfsr	2,2
 14328  000DAA  51AE               	movf	f_lseek@fp& (0+255),w,b
 14329  000DAC  26D9               	addwf	fsr2l,f,c
 14330  000DAE  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14331  000DB0  22DA               	addwfc	fsr2h,f,c
 14332  000DB2  A2DF               	btfss	indf2,1,c
 14333  000DB4  D017               	goto	l11175
 14334                           
 14335                           ; BSR set to: 0
 14336                           ;tff.c: 1183: clust = create_chain(clust);
 14337  000DB6  C0CD  F0A0         	movff	f_lseek@clust,create_chain@clust
 14338  000DBA  C0CE  F0A1         	movff	f_lseek@clust+1,create_chain@clust+1
 14339  000DBE  EC7D  F016         	call	_create_chain	;wreg free
 14340  000DC2  C0A0  F0CD         	movff	?_create_chain,f_lseek@clust
 14341  000DC6  C0A1  F0CE         	movff	?_create_chain+1,f_lseek@clust+1
 14342                           
 14343                           ; BSR set to: 0
 14344                           ;tff.c: 1184: if (clust == 0) {
 14345  000DCA  51CD               	movf	f_lseek@clust& (0+255),w,b
 14346  000DCC  11CE               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 14347  000DCE  A4D8               	btfss	status,2,c
 14348  000DD0  D013               	goto	l11177
 14349                           
 14350                           ; BSR set to: 0
 14351                           ;tff.c: 1185: ofs = csize; break;
 14352  000DD2  C0C9  F0B0         	movff	f_lseek@csize,f_lseek@ofs
 14353  000DD6  C0CA  F0B1         	movff	f_lseek@csize+1,f_lseek@ofs+1
 14354  000DDA  C0CB  F0B2         	movff	f_lseek@csize+2,f_lseek@ofs+2
 14355  000DDE  C0CC  F0B3         	movff	f_lseek@csize+3,f_lseek@ofs+3
 14356  000DE2  D04C               	goto	u13170
 14357  000DE4                     l11175:
 14358                           
 14359                           ; BSR set to: 0
 14360                           ;tff.c: 1189: clust = get_cluster(clust);
 14361  000DE4  C0CD  F088         	movff	f_lseek@clust,get_cluster@clust
 14362  000DE8  C0CE  F089         	movff	f_lseek@clust+1,get_cluster@clust+1
 14363  000DEC  ECBC  F013         	call	_get_cluster	;wreg free
 14364  000DF0  C088  F0CD         	movff	?_get_cluster,f_lseek@clust
 14365  000DF4  C089  F0CE         	movff	?_get_cluster+1,f_lseek@clust+1
 14366  000DF8                     l11177:
 14367                           
 14368                           ; BSR set to: 0
 14369                           ;tff.c: 1190: if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
 14370  000DF8  51CE               	movf	(f_lseek@clust+1)& (0+255),w,b
 14371  000DFA  E104               	bnz	u13150
 14372  000DFC  0E02               	movlw	2
 14373  000DFE  5DCD               	subwf	f_lseek@clust& (0+255),w,b
 14374  000E00  A0D8               	btfss	status,0,c
 14375  000E02  D0AF               	goto	l11201
 14376  000E04                     u13150:
 14377                           
 14378                           ; BSR set to: 0
 14379  000E04  EE20 F004          	lfsr	2,4
 14380  000E08  51AE               	movf	f_lseek@fp& (0+255),w,b
 14381  000E0A  26D9               	addwf	fsr2l,f,c
 14382  000E0C  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14383  000E0E  22DA               	addwfc	fsr2h,f,c
 14384  000E10  EE10 F016          	lfsr	1,22
 14385  000E14  50DE               	movf	postinc2,w,c
 14386  000E16  26E1               	addwf	fsr1l,f,c
 14387  000E18  50DD               	movf	postdec2,w,c
 14388  000E1A  22E2               	addwfc	fsr1h,f,c
 14389  000E1C  50E6               	movf	postinc1,w,c
 14390  000E1E  5DCD               	subwf	f_lseek@clust& (0+255),w,b
 14391  000E20  50E6               	movf	postinc1,w,c
 14392  000E22  59CE               	subwfb	(f_lseek@clust+1)& (0+255),w,b
 14393  000E24  B0D8               	btfsc	status,0,c
 14394  000E26  D09D               	goto	l11201
 14395                           
 14396                           ; BSR set to: 0
 14397                           ;tff.c: 1191: fp->curr_clust = clust;
 14398  000E28  EE20 F010          	lfsr	2,16
 14399  000E2C  51AE               	movf	f_lseek@fp& (0+255),w,b
 14400  000E2E  26D9               	addwf	fsr2l,f,c
 14401  000E30  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14402  000E32  22DA               	addwfc	fsr2h,f,c
 14403  000E34  C0CD  FFDE         	movff	f_lseek@clust,postinc2
 14404  000E38  C0CE  FFDD         	movff	f_lseek@clust+1,postdec2
 14405                           
 14406                           ;tff.c: 1192: fp->fptr += csize;
 14407  000E3C  EE20 F006          	lfsr	2,6
 14408  000E40  51AE               	movf	f_lseek@fp& (0+255),w,b
 14409  000E42  26D9               	addwf	fsr2l,f,c
 14410  000E44  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14411  000E46  22DA               	addwfc	fsr2h,f,c
 14412  000E48  51C9               	movf	f_lseek@csize& (0+255),w,b
 14413  000E4A  26DE               	addwf	postinc2,f,c
 14414  000E4C  51CA               	movf	(f_lseek@csize+1)& (0+255),w,b
 14415  000E4E  22DE               	addwfc	postinc2,f,c
 14416  000E50  51CB               	movf	(f_lseek@csize+2)& (0+255),w,b
 14417  000E52  22DE               	addwfc	postinc2,f,c
 14418  000E54  51CC               	movf	(f_lseek@csize+3)& (0+255),w,b
 14419  000E56  22DE               	addwfc	postinc2,f,c
 14420                           
 14421                           ; BSR set to: 0
 14422                           ;tff.c: 1193: ofs -= csize;
 14423  000E58  51C9               	movf	f_lseek@csize& (0+255),w,b
 14424  000E5A  5FB0               	subwf	f_lseek@ofs& (0+255),f,b
 14425  000E5C  51CA               	movf	(f_lseek@csize+1)& (0+255),w,b
 14426  000E5E  5BB1               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 14427  000E60  51CB               	movf	(f_lseek@csize+2)& (0+255),w,b
 14428  000E62  5BB2               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 14429  000E64  51CC               	movf	(f_lseek@csize+3)& (0+255),w,b
 14430  000E66  5BB3               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 14431  000E68                     l11185:
 14432                           
 14433                           ; BSR set to: 0
 14434  000E68  51B0               	movf	f_lseek@ofs& (0+255),w,b
 14435  000E6A  5DC9               	subwf	f_lseek@csize& (0+255),w,b
 14436  000E6C  51B1               	movf	(f_lseek@ofs+1)& (0+255),w,b
 14437  000E6E  59CA               	subwfb	(f_lseek@csize+1)& (0+255),w,b
 14438  000E70  51B2               	movf	(f_lseek@ofs+2)& (0+255),w,b
 14439  000E72  59CB               	subwfb	(f_lseek@csize+2)& (0+255),w,b
 14440  000E74  51B3               	movf	(f_lseek@ofs+3)& (0+255),w,b
 14441  000E76  59CC               	subwfb	(f_lseek@csize+3)& (0+255),w,b
 14442  000E78  A0D8               	btfss	status,0,c
 14443  000E7A  D795               	goto	l11167
 14444  000E7C                     u13170:
 14445                           
 14446                           ; BSR set to: 0
 14447                           ;tff.c: 1194: };tff.c: 1195: fp->fptr += ofs;
 14448  000E7C  EE20 F006          	lfsr	2,6
 14449  000E80  51AE               	movf	f_lseek@fp& (0+255),w,b
 14450  000E82  26D9               	addwf	fsr2l,f,c
 14451  000E84  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14452  000E86  22DA               	addwfc	fsr2h,f,c
 14453  000E88  51B0               	movf	f_lseek@ofs& (0+255),w,b
 14454  000E8A  26DE               	addwf	postinc2,f,c
 14455  000E8C  51B1               	movf	(f_lseek@ofs+1)& (0+255),w,b
 14456  000E8E  22DE               	addwfc	postinc2,f,c
 14457  000E90  51B2               	movf	(f_lseek@ofs+2)& (0+255),w,b
 14458  000E92  22DE               	addwfc	postinc2,f,c
 14459  000E94  51B3               	movf	(f_lseek@ofs+3)& (0+255),w,b
 14460  000E96  22DE               	addwfc	postinc2,f,c
 14461                           
 14462                           ;tff.c: 1196: fp->csect = (BYTE)(ofs / 512U);
 14463  000E98  EE20 F003          	lfsr	2,3
 14464  000E9C  51AE               	movf	f_lseek@fp& (0+255),w,b
 14465  000E9E  26D9               	addwf	fsr2l,f,c
 14466  000EA0  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14467  000EA2  22DA               	addwfc	fsr2h,f,c
 14468  000EA4  C0B0  F0B4         	movff	f_lseek@ofs,??_f_lseek
 14469  000EA8  C0B1  F0B5         	movff	f_lseek@ofs+1,??_f_lseek+1
 14470  000EAC  C0B2  F0B6         	movff	f_lseek@ofs+2,??_f_lseek+2
 14471  000EB0  C0B3  F0B7         	movff	f_lseek@ofs+3,??_f_lseek+3
 14472  000EB4  0E0A               	movlw	10
 14473  000EB6  D005               	goto	u13180
 14474  000EB8                     u13185:
 14475  000EB8  90D8               	bcf	status,0,c
 14476  000EBA  33B7               	rrcf	(??_f_lseek+3)& (0+255),f,b
 14477  000EBC  33B6               	rrcf	(??_f_lseek+2)& (0+255),f,b
 14478  000EBE  33B5               	rrcf	(??_f_lseek+1)& (0+255),f,b
 14479  000EC0  33B4               	rrcf	??_f_lseek& (0+255),f,b
 14480  000EC2                     u13180:
 14481  000EC2  2EE8               	decfsz	wreg,f,c
 14482  000EC4  D7F9               	goto	u13185
 14483  000EC6  51B4               	movf	??_f_lseek& (0+255),w,b
 14484  000EC8  6EDF               	movwf	indf2,c
 14485                           
 14486                           ; BSR set to: 0
 14487                           ;tff.c: 1197: if (ofs % 512U) fp->csect++;
 14488  000ECA  0EFF               	movlw	255
 14489  000ECC  15B0               	andwf	f_lseek@ofs& (0+255),w,b
 14490  000ECE  6FB4               	movwf	??_f_lseek& (0+255),b
 14491  000ED0  0E01               	movlw	1
 14492  000ED2  15B1               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 14493  000ED4  6FB5               	movwf	(??_f_lseek+1)& (0+255),b
 14494  000ED6  0E00               	movlw	0
 14495  000ED8  15B2               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 14496  000EDA  6FB6               	movwf	(??_f_lseek+2)& (0+255),b
 14497  000EDC  0E00               	movlw	0
 14498  000EDE  15B3               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 14499  000EE0  6FB7               	movwf	(??_f_lseek+3)& (0+255),b
 14500  000EE2  51B4               	movf	??_f_lseek& (0+255),w,b
 14501  000EE4  11B5               	iorwf	(??_f_lseek+1)& (0+255),w,b
 14502  000EE6  11B6               	iorwf	(??_f_lseek+2)& (0+255),w,b
 14503  000EE8  11B7               	iorwf	(??_f_lseek+3)& (0+255),w,b
 14504  000EEA  B4D8               	btfsc	status,2,c
 14505  000EEC  D007               	goto	l11193
 14506                           
 14507                           ; BSR set to: 0
 14508  000EEE  EE20 F003          	lfsr	2,3
 14509  000EF2  51AE               	movf	f_lseek@fp& (0+255),w,b
 14510  000EF4  26D9               	addwf	fsr2l,f,c
 14511  000EF6  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14512  000EF8  22DA               	addwfc	fsr2h,f,c
 14513  000EFA  2ADF               	incf	indf2,f,c
 14514  000EFC                     l11193:
 14515                           
 14516                           ; BSR set to: 0
 14517                           ;tff.c: 1198: };tff.c: 1199: };tff.c: 1202: if (fp->fptr > fp->fsize) {
 14518  000EFC  EE20 F006          	lfsr	2,6
 14519  000F00  51AE               	movf	f_lseek@fp& (0+255),w,b
 14520  000F02  26D9               	addwf	fsr2l,f,c
 14521  000F04  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14522  000F06  22DA               	addwfc	fsr2h,f,c
 14523  000F08  EE10 F00A          	lfsr	1,10
 14524  000F0C  51AE               	movf	f_lseek@fp& (0+255),w,b
 14525  000F0E  26E1               	addwf	fsr1l,f,c
 14526  000F10  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14527  000F12  22E2               	addwfc	fsr1h,f,c
 14528  000F14  50DE               	movf	postinc2,w,c
 14529  000F16  5CE6               	subwf	postinc1,w,c
 14530  000F18  50DE               	movf	postinc2,w,c
 14531  000F1A  58E6               	subwfb	postinc1,w,c
 14532  000F1C  50DE               	movf	postinc2,w,c
 14533  000F1E  58E6               	subwfb	postinc1,w,c
 14534  000F20  50DE               	movf	postinc2,w,c
 14535  000F22  58E6               	subwfb	postinc1,w,c
 14536  000F24  B0D8               	btfsc	status,0,c
 14537  000F26  0012               	return	
 14538                           
 14539                           ; BSR set to: 0
 14540                           ;tff.c: 1203: fp->fsize = fp->fptr;
 14541  000F28  EE20 F006          	lfsr	2,6
 14542  000F2C  51AE               	movf	f_lseek@fp& (0+255),w,b
 14543  000F2E  26D9               	addwf	fsr2l,f,c
 14544  000F30  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14545  000F32  22DA               	addwfc	fsr2h,f,c
 14546  000F34  EE10 F00A          	lfsr	1,10
 14547  000F38  51AE               	movf	f_lseek@fp& (0+255),w,b
 14548  000F3A  26E1               	addwf	fsr1l,f,c
 14549  000F3C  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14550  000F3E  22E2               	addwfc	fsr1h,f,c
 14551  000F40  CFDE FFE6          	movff	postinc2,postinc1
 14552  000F44  CFDE FFE6          	movff	postinc2,postinc1
 14553  000F48  CFDE FFE6          	movff	postinc2,postinc1
 14554  000F4C  CFDE FFE6          	movff	postinc2,postinc1
 14555                           
 14556                           ; BSR set to: 0
 14557                           ;tff.c: 1204: fp->flag |= 0x20;
 14558  000F50  EE20 F002          	lfsr	2,2
 14559  000F54  51AE               	movf	f_lseek@fp& (0+255),w,b
 14560  000F56  26D9               	addwf	fsr2l,f,c
 14561  000F58  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14562  000F5A  22DA               	addwfc	fsr2h,f,c
 14563  000F5C  0E00               	movlw	0
 14564  000F5E  8ADB               	bsf	plusw2,5,c
 14565  000F60  0012               	return	
 14566  000F62                     l11201:
 14567                           
 14568                           ; BSR set to: 0
 14569                           ;tff.c: 1211: fp->flag |= 0x80;
 14570  000F62  EE20 F002          	lfsr	2,2
 14571  000F66  51AE               	movf	f_lseek@fp& (0+255),w,b
 14572  000F68  26D9               	addwf	fsr2l,f,c
 14573  000F6A  51AF               	movf	(f_lseek@fp+1)& (0+255),w,b
 14574  000F6C  22DA               	addwfc	fsr2h,f,c
 14575  000F6E  0E00               	movlw	0
 14576  000F70  8EDB               	bsf	plusw2,7,c
 14577                           
 14578                           ; BSR set to: 0
 14579  000F72  0012               	return		;funcret
 14580  000F74                     __end_of_f_lseek:
 14581                           	callstack 0
 14582                           
 14583 ;; *************** function _create_chain *****************
 14584 ;; Defined at:
 14585 ;;		line 283 in file "bibliotecas/tff.c"
 14586 ;; Parameters:    Size  Location     Type
 14587 ;;  clust           2   64[BANK0 ] unsigned short 
 14588 ;; Auto vars:     Size  Location     Type
 14589 ;;  ncl             2   76[BANK0 ] unsigned short 
 14590 ;;  scl             2   74[BANK0 ] unsigned short 
 14591 ;;  cstat           2   72[BANK0 ] unsigned short 
 14592 ;;  fs              2   70[BANK0 ] PTR struct _FATFS
 14593 ;;		 -> NULL(0), fs(544), 
 14594 ;;  mcl             2   68[BANK0 ] unsigned short 
 14595 ;; Return value:  Size  Location     Type
 14596 ;;                  2   64[BANK0 ] unsigned short 
 14597 ;; Registers used:
 14598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14599 ;; Tracked objects:
 14600 ;;		On entry : 3F/0
 14601 ;;		On exit  : 3F/0
 14602 ;;		Unchanged: 0/0
 14603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14604 ;;      Params:         0       2       0       0       0       0       0       0       0
 14605 ;;      Locals:         0      10       0       0       0       0       0       0       0
 14606 ;;      Temps:          0       2       0       0       0       0       0       0       0
 14607 ;;      Totals:         0      14       0       0       0       0       0       0       0
 14608 ;;Total ram usage:       14 bytes
 14609 ;; Hardware stack levels used:    1
 14610 ;; Hardware stack levels required when called:   10
 14611 ;; This function calls:
 14612 ;;		_get_cluster
 14613 ;;		_put_cluster
 14614 ;; This function is called by:
 14615 ;;		_reserve_direntry
 14616 ;;		_f_write
 14617 ;;		_f_lseek
 14618 ;; This function uses a non-reentrant model
 14619 ;;
 14620                           
 14621                           	psect	text72
 14622  002CFA                     __ptext72:
 14623                           	callstack 0
 14624  002CFA                     _create_chain:
 14625                           	callstack 12
 14626                           
 14627                           ; BSR set to: 0
 14628                           ;tff.c: 287: CLUST cstat, ncl, scl, mcl;;tff.c: 288: FATFS *fs = FatFs;
 14629                           
 14630                           ; BSR set to: 0
 14631                           ;incstack = 0
 14632  002CFA  C038  F0A6         	movff	_FatFs,create_chain@fs
 14633  002CFE  C039  F0A7         	movff	_FatFs+1,create_chain@fs+1
 14634                           
 14635                           ; BSR set to: 0
 14636                           ;tff.c: 291: mcl = fs->max_clust;
 14637  002D02  EE20 F016          	lfsr	2,22
 14638  002D06  51A6               	movf	create_chain@fs& (0+255),w,b
 14639  002D08  26D9               	addwf	fsr2l,f,c
 14640  002D0A  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 14641  002D0C  22DA               	addwfc	fsr2h,f,c
 14642  002D0E  CFDE F0A4          	movff	postinc2,create_chain@mcl
 14643  002D12  CFDD F0A5          	movff	postdec2,create_chain@mcl+1
 14644                           
 14645                           ; BSR set to: 0
 14646                           ;tff.c: 292: if (clust == 0) {
 14647  002D16  51A0               	movf	create_chain@clust& (0+255),w,b
 14648  002D18  11A1               	iorwf	(create_chain@clust+1)& (0+255),w,b
 14649  002D1A  A4D8               	btfss	status,2,c
 14650  002D1C  D01B               	goto	l9863
 14651                           
 14652                           ; BSR set to: 0
 14653                           ;tff.c: 293: scl = fs->last_clust;
 14654  002D1E  EE20 F018          	lfsr	2,24
 14655  002D22  51A6               	movf	create_chain@fs& (0+255),w,b
 14656  002D24  26D9               	addwf	fsr2l,f,c
 14657  002D26  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 14658  002D28  22DA               	addwfc	fsr2h,f,c
 14659  002D2A  CFDE F0AA          	movff	postinc2,create_chain@scl
 14660  002D2E  CFDD F0AB          	movff	postdec2,create_chain@scl+1
 14661                           
 14662                           ; BSR set to: 0
 14663                           ;tff.c: 294: if (scl < 2 || scl >= mcl) scl = 1;
 14664  002D32  51AB               	movf	(create_chain@scl+1)& (0+255),w,b
 14665  002D34  E104               	bnz	u11000
 14666  002D36  0E02               	movlw	2
 14667  002D38  5DAA               	subwf	create_chain@scl& (0+255),w,b
 14668  002D3A  A0D8               	btfss	status,0,c
 14669  002D3C  D006               	goto	u11010
 14670  002D3E                     u11000:
 14671                           
 14672                           ; BSR set to: 0
 14673  002D3E  51A4               	movf	create_chain@mcl& (0+255),w,b
 14674  002D40  5DAA               	subwf	create_chain@scl& (0+255),w,b
 14675  002D42  51A5               	movf	(create_chain@mcl+1)& (0+255),w,b
 14676  002D44  59AB               	subwfb	(create_chain@scl+1)& (0+255),w,b
 14677  002D46  A0D8               	btfss	status,0,c
 14678  002D48  D029               	goto	l801
 14679  002D4A                     u11010:
 14680                           
 14681                           ; BSR set to: 0
 14682  002D4A  0E00               	movlw	0
 14683  002D4C  6FAB               	movwf	(create_chain@scl+1)& (0+255),b
 14684  002D4E  0E01               	movlw	1
 14685  002D50  6FAA               	movwf	create_chain@scl& (0+255),b
 14686  002D52  D024               	goto	l801
 14687  002D54                     l9863:
 14688                           
 14689                           ; BSR set to: 0
 14690                           ;tff.c: 296: else {;tff.c: 297: cstat = get_cluster(clust);
 14691  002D54  C0A0  F088         	movff	create_chain@clust,get_cluster@clust
 14692  002D58  C0A1  F089         	movff	create_chain@clust+1,get_cluster@clust+1
 14693  002D5C  ECBC  F013         	call	_get_cluster	;wreg free
 14694  002D60  C088  F0A8         	movff	?_get_cluster,create_chain@cstat
 14695  002D64  C089  F0A9         	movff	?_get_cluster+1,create_chain@cstat+1
 14696                           
 14697                           ; BSR set to: 0
 14698                           ;tff.c: 298: if (cstat < 2) return 1;
 14699  002D68  51A9               	movf	(create_chain@cstat+1)& (0+255),w,b
 14700  002D6A  E109               	bnz	l9871
 14701  002D6C  0E02               	movlw	2
 14702  002D6E  5DA8               	subwf	create_chain@cstat& (0+255),w,b
 14703  002D70  B0D8               	btfsc	status,0,c
 14704  002D72  D005               	goto	l9871
 14705  002D74                     u11020:
 14706                           
 14707                           ; BSR set to: 0
 14708  002D74  0E00               	movlw	0
 14709  002D76  6FA1               	movwf	(?_create_chain+1)& (0+255),b
 14710  002D78  0E01               	movlw	1
 14711  002D7A  6FA0               	movwf	?_create_chain& (0+255),b
 14712  002D7C  0012               	return	
 14713  002D7E                     l9871:
 14714                           
 14715                           ; BSR set to: 0
 14716                           ;tff.c: 299: if (cstat < mcl) return cstat;
 14717  002D7E  51A4               	movf	create_chain@mcl& (0+255),w,b
 14718  002D80  5DA8               	subwf	create_chain@cstat& (0+255),w,b
 14719  002D82  51A5               	movf	(create_chain@mcl+1)& (0+255),w,b
 14720  002D84  59A9               	subwfb	(create_chain@cstat+1)& (0+255),w,b
 14721  002D86  B0D8               	btfsc	status,0,c
 14722  002D88  D005               	goto	l804
 14723                           
 14724                           ; BSR set to: 0
 14725  002D8A  C0A8  F0A0         	movff	create_chain@cstat,?_create_chain
 14726  002D8E  C0A9  F0A1         	movff	create_chain@cstat+1,?_create_chain+1
 14727  002D92  0012               	return	
 14728  002D94                     l804:
 14729                           
 14730                           ; BSR set to: 0
 14731                           ;tff.c: 300: scl = clust;
 14732  002D94  C0A0  F0AA         	movff	create_chain@clust,create_chain@scl
 14733  002D98  C0A1  F0AB         	movff	create_chain@clust+1,create_chain@scl+1
 14734  002D9C                     l801:
 14735                           
 14736                           ; BSR set to: 0
 14737                           ;tff.c: 301: };tff.c: 303: ncl = scl;
 14738  002D9C  C0AA  F0AC         	movff	create_chain@scl,create_chain@ncl
 14739  002DA0  C0AB  F0AD         	movff	create_chain@scl+1,create_chain@ncl+1
 14740  002DA4                     l9875:
 14741                           
 14742                           ; BSR set to: 0
 14743                           ;tff.c: 305: ncl++;
 14744  002DA4  4BAC               	infsnz	create_chain@ncl& (0+255),f,b
 14745  002DA6  2BAD               	incf	(create_chain@ncl+1)& (0+255),f,b
 14746                           
 14747                           ; BSR set to: 0
 14748                           ;tff.c: 306: if (ncl >= mcl) {
 14749  002DA8  51A4               	movf	create_chain@mcl& (0+255),w,b
 14750  002DAA  5DAC               	subwf	create_chain@ncl& (0+255),w,b
 14751  002DAC  51A5               	movf	(create_chain@mcl+1)& (0+255),w,b
 14752  002DAE  59AD               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 14753  002DB0  A0D8               	btfss	status,0,c
 14754  002DB2  D00F               	goto	l9887
 14755                           
 14756                           ; BSR set to: 0
 14757                           ;tff.c: 307: ncl = 2;
 14758  002DB4  0E00               	movlw	0
 14759  002DB6  6FAD               	movwf	(create_chain@ncl+1)& (0+255),b
 14760  002DB8  0E02               	movlw	2
 14761  002DBA  6FAC               	movwf	create_chain@ncl& (0+255),b
 14762                           
 14763                           ; BSR set to: 0
 14764                           ;tff.c: 308: if (ncl > scl) return 0;
 14765  002DBC  51AB               	movf	(create_chain@scl+1)& (0+255),w,b
 14766  002DBE  E109               	bnz	l9887
 14767  002DC0  0E02               	movlw	2
 14768  002DC2  5DAA               	subwf	create_chain@scl& (0+255),w,b
 14769  002DC4  B0D8               	btfsc	status,0,c
 14770  002DC6  D005               	goto	l9887
 14771  002DC8                     u11050:
 14772                           
 14773                           ; BSR set to: 0
 14774  002DC8  0E00               	movlw	0
 14775  002DCA  6FA1               	movwf	(?_create_chain+1)& (0+255),b
 14776  002DCC  0E00               	movlw	0
 14777  002DCE  6FA0               	movwf	?_create_chain& (0+255),b
 14778  002DD0  0012               	return	
 14779  002DD2                     l9887:
 14780                           
 14781                           ; BSR set to: 0
 14782                           ;tff.c: 309: };tff.c: 310: cstat = get_cluster(ncl);
 14783  002DD2  C0AC  F088         	movff	create_chain@ncl,get_cluster@clust
 14784  002DD6  C0AD  F089         	movff	create_chain@ncl+1,get_cluster@clust+1
 14785  002DDA  ECBC  F013         	call	_get_cluster	;wreg free
 14786  002DDE  C088  F0A8         	movff	?_get_cluster,create_chain@cstat
 14787  002DE2  C089  F0A9         	movff	?_get_cluster+1,create_chain@cstat+1
 14788                           
 14789                           ; BSR set to: 0
 14790                           ;tff.c: 311: if (cstat == 0) break;
 14791  002DE6  51A8               	movf	create_chain@cstat& (0+255),w,b
 14792  002DE8  11A9               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 14793  002DEA  B4D8               	btfsc	status,2,c
 14794  002DEC  D00C               	goto	l9905
 14795                           
 14796                           ; BSR set to: 0
 14797                           ;tff.c: 312: if (cstat == 1) return 1;
 14798  002DEE  05A8               	decf	create_chain@cstat& (0+255),w,b
 14799  002DF0  11A9               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 14800  002DF2  B4D8               	btfsc	status,2,c
 14801  002DF4  D7BF               	goto	u11020
 14802                           
 14803                           ; BSR set to: 0
 14804                           ;tff.c: 313: if (ncl == scl) return 0;
 14805  002DF6  51AA               	movf	create_chain@scl& (0+255),w,b
 14806  002DF8  19AC               	xorwf	create_chain@ncl& (0+255),w,b
 14807  002DFA  E1D4               	bnz	l9875
 14808  002DFC  51AB               	movf	(create_chain@scl+1)& (0+255),w,b
 14809  002DFE  19AD               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 14810  002E00  B4D8               	btfsc	status,2,c
 14811  002E02  D7E2               	goto	u11050
 14812  002E04  D7CF               	goto	l9875
 14813  002E06                     l9905:
 14814                           
 14815                           ; BSR set to: 0
 14816                           ;tff.c: 316: if (!put_cluster(ncl, (CLUST)0x0FFFFFFF)) return 1;
 14817  002E06  C0AC  F088         	movff	create_chain@ncl,put_cluster@clust
 14818  002E0A  C0AD  F089         	movff	create_chain@ncl+1,put_cluster@clust+1
 14819  002E0E  0EFF               	movlw	255
 14820  002E10  6F8B               	movwf	(put_cluster@val+1)& (0+255),b
 14821  002E12  698A               	setf	put_cluster@val& (0+255),b
 14822  002E14  EC0D  F00F         	call	_put_cluster	;wreg free
 14823  002E18  0900               	iorlw	0
 14824  002E1A  B4D8               	btfsc	status,2,c
 14825  002E1C  D7AB               	goto	u11020
 14826                           
 14827                           ; BSR set to: 0
 14828                           ;tff.c: 317: if (clust != 0 && !put_cluster(clust, ncl)) return 1;
 14829  002E1E  51A0               	movf	create_chain@clust& (0+255),w,b
 14830  002E20  11A1               	iorwf	(create_chain@clust+1)& (0+255),w,b
 14831  002E22  B4D8               	btfsc	status,2,c
 14832  002E24  D00D               	goto	l9919
 14833                           
 14834                           ; BSR set to: 0
 14835  002E26  C0A0  F088         	movff	create_chain@clust,put_cluster@clust
 14836  002E2A  C0A1  F089         	movff	create_chain@clust+1,put_cluster@clust+1
 14837  002E2E  C0AC  F08A         	movff	create_chain@ncl,put_cluster@val
 14838  002E32  C0AD  F08B         	movff	create_chain@ncl+1,put_cluster@val+1
 14839  002E36  EC0D  F00F         	call	_put_cluster	;wreg free
 14840  002E3A  0900               	iorlw	0
 14841  002E3C  B4D8               	btfsc	status,2,c
 14842  002E3E  D79A               	goto	u11020
 14843  002E40                     l9919:
 14844                           
 14845                           ; BSR set to: 0
 14846                           ;tff.c: 319: fs->last_clust = ncl;
 14847  002E40  EE20 F018          	lfsr	2,24
 14848  002E44  51A6               	movf	create_chain@fs& (0+255),w,b
 14849  002E46  26D9               	addwf	fsr2l,f,c
 14850  002E48  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 14851  002E4A  22DA               	addwfc	fsr2h,f,c
 14852  002E4C  C0AC  FFDE         	movff	create_chain@ncl,postinc2
 14853  002E50  C0AD  FFDD         	movff	create_chain@ncl+1,postdec2
 14854                           
 14855                           ;tff.c: 320: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 14856  002E54  EE20 F01A          	lfsr	2,26
 14857  002E58  51A6               	movf	create_chain@fs& (0+255),w,b
 14858  002E5A  26D9               	addwf	fsr2l,f,c
 14859  002E5C  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 14860  002E5E  22DA               	addwfc	fsr2h,f,c
 14861  002E60  28DE               	incf	postinc2,w,c
 14862  002E62  E103               	bnz	u11120
 14863  002E64  28DE               	incf	postinc2,w,c
 14864  002E66  B4D8               	btfsc	status,2,c
 14865  002E68  D009               	goto	l9923
 14866  002E6A                     u11120:
 14867                           
 14868                           ; BSR set to: 0
 14869                           ;tff.c: 321: fs->free_clust--;
 14870  002E6A  EE20 F01A          	lfsr	2,26
 14871  002E6E  51A6               	movf	create_chain@fs& (0+255),w,b
 14872  002E70  26D9               	addwf	fsr2l,f,c
 14873  002E72  51A7               	movf	(create_chain@fs+1)& (0+255),w,b
 14874  002E74  22DA               	addwfc	fsr2h,f,c
 14875  002E76  06DE               	decf	postinc2,f,c
 14876  002E78  0E00               	movlw	0
 14877  002E7A  5ADD               	subwfb	postdec2,f,c
 14878  002E7C                     l9923:
 14879                           
 14880                           ; BSR set to: 0
 14881                           ;tff.c: 325: };tff.c: 327: return ncl;
 14882  002E7C  C0AC  F0A0         	movff	create_chain@ncl,?_create_chain
 14883  002E80  C0AD  F0A1         	movff	create_chain@ncl+1,?_create_chain+1
 14884                           
 14885                           ; BSR set to: 0
 14886  002E84  0012               	return		;funcret
 14887  002E86                     __end_of_create_chain:
 14888                           	callstack 0
 14889                           
 14890 ;; *************** function _put_cluster *****************
 14891 ;; Defined at:
 14892 ;;		line 198 in file "bibliotecas/tff.c"
 14893 ;; Parameters:    Size  Location     Type
 14894 ;;  clust           2   40[BANK0 ] unsigned short 
 14895 ;;  val             2   42[BANK0 ] unsigned short 
 14896 ;; Auto vars:     Size  Location     Type
 14897 ;;  fatsect         4   54[BANK0 ] unsigned long 
 14898 ;;  fs              2   62[BANK0 ] PTR struct _FATFS
 14899 ;;		 -> NULL(0), fs(544), 
 14900 ;;  p               2   60[BANK0 ] PTR unsigned char 
 14901 ;;		 -> fs.win(512), NULL(0), fs(544), 
 14902 ;;  bc              2   58[BANK0 ] unsigned short 
 14903 ;; Return value:  Size  Location     Type
 14904 ;;                  1    wreg      enum E105
 14905 ;; Registers used:
 14906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14907 ;; Tracked objects:
 14908 ;;		On entry : 3F/0
 14909 ;;		On exit  : 3F/0
 14910 ;;		Unchanged: 0/0
 14911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14912 ;;      Params:         0       4       0       0       0       0       0       0       0
 14913 ;;      Locals:         0      14       0       0       0       0       0       0       0
 14914 ;;      Temps:          0       6       0       0       0       0       0       0       0
 14915 ;;      Totals:         0      24       0       0       0       0       0       0       0
 14916 ;;Total ram usage:       24 bytes
 14917 ;; Hardware stack levels used:    1
 14918 ;; Hardware stack levels required when called:    9
 14919 ;; This function calls:
 14920 ;;		___wmul
 14921 ;;		_move_window
 14922 ;; This function is called by:
 14923 ;;		_remove_chain
 14924 ;;		_create_chain
 14925 ;; This function uses a non-reentrant model
 14926 ;;
 14927                           
 14928                           	psect	text73
 14929  001E1A                     __ptext73:
 14930                           	callstack 0
 14931  001E1A                     _put_cluster:
 14932                           	callstack 12
 14933                           
 14934                           ; BSR set to: 0
 14935                           ;tff.c: 203: WORD bc;;tff.c: 204: BYTE *p;;tff.c: 205: DWORD fatsect;;tff.c: 206: FATFS 
      +                          *fs = FatFs;
 14936                           
 14937                           ; BSR set to: 0
 14938                           ;incstack = 0
 14939  001E1A  C038  F09E         	movff	_FatFs,put_cluster@fs
 14940  001E1E  C039  F09F         	movff	_FatFs+1,put_cluster@fs+1
 14941                           
 14942                           ; BSR set to: 0
 14943                           ;tff.c: 209: fatsect = fs->fatbase;
 14944  001E22  EE20 F008          	lfsr	2,8
 14945  001E26  519E               	movf	put_cluster@fs& (0+255),w,b
 14946  001E28  26D9               	addwf	fsr2l,f,c
 14947  001E2A  519F               	movf	(put_cluster@fs+1)& (0+255),w,b
 14948  001E2C  22DA               	addwfc	fsr2h,f,c
 14949  001E2E  CFDE F096          	movff	postinc2,put_cluster@fatsect
 14950  001E32  CFDE F097          	movff	postinc2,put_cluster@fatsect+1
 14951  001E36  CFDE F098          	movff	postinc2,put_cluster@fatsect+2
 14952  001E3A  CFDE F099          	movff	postinc2,put_cluster@fatsect+3
 14953                           
 14954                           ;tff.c: 210: switch (fs->fs_type) {
 14955  001E3E  D108               	goto	l9805
 14956  001E40                     l9753:
 14957                           
 14958                           ; BSR set to: 0
 14959                           ;tff.c: 212: bc = (WORD)clust * 3 / 2;
 14960  001E40  C088  F019         	movff	put_cluster@clust,___wmul@multiplier
 14961  001E44  C089  F01A         	movff	put_cluster@clust+1,___wmul@multiplier+1
 14962  001E48  0E00               	movlw	0
 14963  001E4A  6E1C               	movwf	(___wmul@multiplicand+1)^0,c
 14964  001E4C  0E03               	movlw	3
 14965  001E4E  6E1B               	movwf	___wmul@multiplicand^0,c
 14966  001E50  ECC3  F028         	call	___wmul	;wreg free
 14967  001E54  90D8               	bcf	status,0,c
 14968  001E56  301A               	rrcf	(?___wmul+1)^0,w,c
 14969  001E58  0100               	movlb	0	; () banked
 14970  001E5A  6F8C               	movwf	??_put_cluster& (0+255),b
 14971  001E5C  3019               	rrcf	?___wmul^0,w,c
 14972  001E5E  6F9A               	movwf	put_cluster@bc& (0+255),b
 14973  001E60  C08C  F09B         	movff	??_put_cluster,put_cluster@bc+1
 14974                           
 14975                           ; BSR set to: 0
 14976                           ;tff.c: 213: if (!move_window(fatsect + bc / 512U)) return FALSE;
 14977  001E64  C09A  F08C         	movff	put_cluster@bc,??_put_cluster
 14978  001E68  C09B  F08D         	movff	put_cluster@bc+1,??_put_cluster+1
 14979  001E6C  0E09               	movlw	9
 14980  001E6E  6F8E               	movwf	(??_put_cluster+2)& (0+255),b
 14981  001E70                     u10855:
 14982  001E70  90D8               	bcf	status,0,c
 14983  001E72  338D               	rrcf	(??_put_cluster+1)& (0+255),f,b
 14984  001E74  338C               	rrcf	??_put_cluster& (0+255),f,b
 14985  001E76  2F8E               	decfsz	(??_put_cluster+2)& (0+255),f,b
 14986  001E78  D7FB               	goto	u10855
 14987  001E7A  518C               	movf	??_put_cluster& (0+255),w,b
 14988  001E7C  2596               	addwf	put_cluster@fatsect& (0+255),w,b
 14989  001E7E  6F73               	movwf	move_window@sector& (0+255),b
 14990  001E80  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 14991  001E82  2197               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 14992  001E84  6F74               	movwf	(move_window@sector+1)& (0+255),b
 14993  001E86  0E00               	movlw	0
 14994  001E88  2198               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 14995  001E8A  6F75               	movwf	(move_window@sector+2)& (0+255),b
 14996  001E8C  0E00               	movlw	0
 14997  001E8E  2199               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 14998  001E90  6F76               	movwf	(move_window@sector+3)& (0+255),b
 14999  001E92  ECA8  F015         	call	_move_window	;wreg free
 15000  001E96  0900               	iorlw	0
 15001  001E98  A4D8               	btfss	status,2,c
 15002  001E9A  D002               	goto	l9761
 15003  001E9C                     u10860:
 15004                           
 15005                           ; BSR set to: 0
 15006  001E9C  0E00               	movlw	0
 15007  001E9E  0012               	return	
 15008  001EA0                     l9761:
 15009                           
 15010                           ; BSR set to: 0
 15011                           ;tff.c: 214: p = &fs->win[bc % 512U];
 15012  001EA0  0EFF               	movlw	255
 15013  001EA2  6F8C               	movwf	??_put_cluster& (0+255),b
 15014  001EA4  0E01               	movlw	1
 15015  001EA6  6F8D               	movwf	(??_put_cluster+1)& (0+255),b
 15016  001EA8  C09A  F08E         	movff	put_cluster@bc,??_put_cluster+2
 15017  001EAC  C09B  F08F         	movff	put_cluster@bc+1,??_put_cluster+3
 15018  001EB0  518C               	movf	??_put_cluster& (0+255),w,b
 15019  001EB2  178E               	andwf	(??_put_cluster+2)& (0+255),f,b
 15020  001EB4  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15021  001EB6  178F               	andwf	(??_put_cluster+3)& (0+255),f,b
 15022  001EB8  C09E  F090         	movff	put_cluster@fs,??_put_cluster+4
 15023  001EBC  C09F  F091         	movff	put_cluster@fs+1,??_put_cluster+5
 15024  001EC0  518E               	movf	(??_put_cluster+2)& (0+255),w,b
 15025  001EC2  2790               	addwf	(??_put_cluster+4)& (0+255),f,b
 15026  001EC4  518F               	movf	(??_put_cluster+3)& (0+255),w,b
 15027  001EC6  2391               	addwfc	(??_put_cluster+5)& (0+255),f,b
 15028  001EC8  0E20               	movlw	32
 15029  001ECA  2590               	addwf	(??_put_cluster+4)& (0+255),w,b
 15030  001ECC  6F9C               	movwf	put_cluster@p& (0+255),b
 15031  001ECE  0E00               	movlw	0
 15032  001ED0  2191               	addwfc	(??_put_cluster+5)& (0+255),w,b
 15033  001ED2  6F9D               	movwf	(put_cluster@p+1)& (0+255),b
 15034                           
 15035                           ; BSR set to: 0
 15036                           ;tff.c: 215: *p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 15037  001ED4  B188               	btfsc	put_cluster@clust& (0+255),0,b
 15038  001ED6  D004               	goto	l9767
 15039                           
 15040                           ; BSR set to: 0
 15041  001ED8  C08A  F092         	movff	put_cluster@val,_put_cluster$1551
 15042  001EDC  6B93               	clrf	(_put_cluster$1551+1)& (0+255),b
 15043  001EDE  D01A               	goto	l9769
 15044  001EE0                     l9767:
 15045                           
 15046                           ; BSR set to: 0
 15047  001EE0  518A               	movf	put_cluster@val& (0+255),w,b
 15048  001EE2  6F8C               	movwf	??_put_cluster& (0+255),b
 15049  001EE4  6B8D               	clrf	(??_put_cluster+1)& (0+255),b
 15050  001EE6  3B8C               	swapf	??_put_cluster& (0+255),f,b
 15051  001EE8  3B8D               	swapf	(??_put_cluster+1)& (0+255),f,b
 15052  001EEA  0EF0               	movlw	240
 15053  001EEC  178D               	andwf	(??_put_cluster+1)& (0+255),f,b
 15054  001EEE  518C               	movf	??_put_cluster& (0+255),w,b
 15055  001EF0  0B0F               	andlw	15
 15056  001EF2  138D               	iorwf	(??_put_cluster+1)& (0+255),f,b
 15057  001EF4  0EF0               	movlw	240
 15058  001EF6  178C               	andwf	??_put_cluster& (0+255),f,b
 15059  001EF8  C09C  FFD9         	movff	put_cluster@p,fsr2l
 15060  001EFC  C09D  FFDA         	movff	put_cluster@p+1,fsr2h
 15061  001F00  50DF               	movf	indf2,w,c
 15062  001F02  0B0F               	andlw	15
 15063  001F04  6F8E               	movwf	(??_put_cluster+2)& (0+255),b
 15064  001F06  6B8F               	clrf	(??_put_cluster+3)& (0+255),b
 15065  001F08  518C               	movf	??_put_cluster& (0+255),w,b
 15066  001F0A  118E               	iorwf	(??_put_cluster+2)& (0+255),w,b
 15067  001F0C  6F92               	movwf	_put_cluster$1551& (0+255),b
 15068  001F0E  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15069  001F10  118F               	iorwf	(??_put_cluster+3)& (0+255),w,b
 15070  001F12  6F93               	movwf	(_put_cluster$1551+1)& (0+255),b
 15071  001F14                     l9769:
 15072                           
 15073                           ; BSR set to: 0
 15074  001F14  C09C  FFD9         	movff	put_cluster@p,fsr2l
 15075  001F18  C09D  FFDA         	movff	put_cluster@p+1,fsr2h
 15076  001F1C  C092  FFDF         	movff	_put_cluster$1551,indf2
 15077                           
 15078                           ; BSR set to: 0
 15079                           ;tff.c: 216: bc++;
 15080  001F20  4B9A               	infsnz	put_cluster@bc& (0+255),f,b
 15081  001F22  2B9B               	incf	(put_cluster@bc+1)& (0+255),f,b
 15082                           
 15083                           ; BSR set to: 0
 15084                           ;tff.c: 217: fs->winflag = 1;
 15085  001F24  EE20 F01F          	lfsr	2,31
 15086  001F28  519E               	movf	put_cluster@fs& (0+255),w,b
 15087  001F2A  26D9               	addwf	fsr2l,f,c
 15088  001F2C  519F               	movf	(put_cluster@fs+1)& (0+255),w,b
 15089  001F2E  22DA               	addwfc	fsr2h,f,c
 15090  001F30  0E01               	movlw	1
 15091  001F32  6EDF               	movwf	indf2,c
 15092                           
 15093                           ; BSR set to: 0
 15094                           ;tff.c: 218: if (!move_window(fatsect + bc / 512U)) return FALSE;
 15095  001F34  C09A  F08C         	movff	put_cluster@bc,??_put_cluster
 15096  001F38  C09B  F08D         	movff	put_cluster@bc+1,??_put_cluster+1
 15097  001F3C  0E09               	movlw	9
 15098  001F3E  6F8E               	movwf	(??_put_cluster+2)& (0+255),b
 15099  001F40                     u10885:
 15100  001F40  90D8               	bcf	status,0,c
 15101  001F42  338D               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15102  001F44  338C               	rrcf	??_put_cluster& (0+255),f,b
 15103  001F46  2F8E               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15104  001F48  D7FB               	goto	u10885
 15105  001F4A  518C               	movf	??_put_cluster& (0+255),w,b
 15106  001F4C  2596               	addwf	put_cluster@fatsect& (0+255),w,b
 15107  001F4E  6F73               	movwf	move_window@sector& (0+255),b
 15108  001F50  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15109  001F52  2197               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15110  001F54  6F74               	movwf	(move_window@sector+1)& (0+255),b
 15111  001F56  0E00               	movlw	0
 15112  001F58  2198               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15113  001F5A  6F75               	movwf	(move_window@sector+2)& (0+255),b
 15114  001F5C  0E00               	movlw	0
 15115  001F5E  2199               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15116  001F60  6F76               	movwf	(move_window@sector+3)& (0+255),b
 15117  001F62  ECA8  F015         	call	_move_window	;wreg free
 15118  001F66  0900               	iorlw	0
 15119  001F68  B4D8               	btfsc	status,2,c
 15120  001F6A  D798               	goto	u10860
 15121                           
 15122                           ; BSR set to: 0
 15123                           ;tff.c: 219: p = &fs->win[bc % 512U];
 15124  001F6C  0EFF               	movlw	255
 15125  001F6E  6F8C               	movwf	??_put_cluster& (0+255),b
 15126  001F70  0E01               	movlw	1
 15127  001F72  6F8D               	movwf	(??_put_cluster+1)& (0+255),b
 15128  001F74  C09A  F08E         	movff	put_cluster@bc,??_put_cluster+2
 15129  001F78  C09B  F08F         	movff	put_cluster@bc+1,??_put_cluster+3
 15130  001F7C  518C               	movf	??_put_cluster& (0+255),w,b
 15131  001F7E  178E               	andwf	(??_put_cluster+2)& (0+255),f,b
 15132  001F80  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15133  001F82  178F               	andwf	(??_put_cluster+3)& (0+255),f,b
 15134  001F84  C09E  F090         	movff	put_cluster@fs,??_put_cluster+4
 15135  001F88  C09F  F091         	movff	put_cluster@fs+1,??_put_cluster+5
 15136  001F8C  518E               	movf	(??_put_cluster+2)& (0+255),w,b
 15137  001F8E  2790               	addwf	(??_put_cluster+4)& (0+255),f,b
 15138  001F90  518F               	movf	(??_put_cluster+3)& (0+255),w,b
 15139  001F92  2391               	addwfc	(??_put_cluster+5)& (0+255),f,b
 15140  001F94  0E20               	movlw	32
 15141  001F96  2590               	addwf	(??_put_cluster+4)& (0+255),w,b
 15142  001F98  6F9C               	movwf	put_cluster@p& (0+255),b
 15143  001F9A  0E00               	movlw	0
 15144  001F9C  2191               	addwfc	(??_put_cluster+5)& (0+255),w,b
 15145  001F9E  6F9D               	movwf	(put_cluster@p+1)& (0+255),b
 15146                           
 15147                           ; BSR set to: 0
 15148                           ;tff.c: 220: *p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x
      +                          0F));
 15149  001FA0  B188               	btfsc	put_cluster@clust& (0+255),0,b
 15150  001FA2  D00E               	goto	l9787
 15151                           
 15152                           ; BSR set to: 0
 15153  001FA4  C08B  F08C         	movff	put_cluster@val+1,??_put_cluster
 15154  001FA8  0E0F               	movlw	15
 15155  001FAA  178C               	andwf	??_put_cluster& (0+255),f,b
 15156  001FAC  C09C  FFD9         	movff	put_cluster@p,fsr2l
 15157  001FB0  C09D  FFDA         	movff	put_cluster@p+1,fsr2h
 15158  001FB4  50DF               	movf	indf2,w,c
 15159  001FB6  0BF0               	andlw	240
 15160  001FB8  118C               	iorwf	??_put_cluster& (0+255),w,b
 15161  001FBA  6F8D               	movwf	(??_put_cluster+1)& (0+255),b
 15162  001FBC  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15163  001FBE  D00C               	goto	L7
 15164  001FC0                     l9787:
 15165                           
 15166                           ; BSR set to: 0
 15167  001FC0  C08A  F08C         	movff	put_cluster@val,??_put_cluster
 15168  001FC4  C08B  F08D         	movff	put_cluster@val+1,??_put_cluster+1
 15169  001FC8  0E04               	movlw	4
 15170  001FCA  6F8E               	movwf	(??_put_cluster+2)& (0+255),b
 15171  001FCC                     u10915:
 15172  001FCC  90D8               	bcf	status,0,c
 15173  001FCE  338D               	rrcf	(??_put_cluster+1)& (0+255),f,b
 15174  001FD0  338C               	rrcf	??_put_cluster& (0+255),f,b
 15175  001FD2  2F8E               	decfsz	(??_put_cluster+2)& (0+255),f,b
 15176  001FD4  D7FB               	goto	u10915
 15177  001FD6  518C               	movf	??_put_cluster& (0+255),w,b
 15178  001FD8                     L7:
 15179  001FD8  6F94               	movwf	_put_cluster$1552& (0+255),b
 15180  001FDA  6B95               	clrf	(_put_cluster$1552+1)& (0+255),b
 15181                           
 15182                           ; BSR set to: 0
 15183  001FDC  C09C  FFD9         	movff	put_cluster@p,fsr2l
 15184  001FE0  C09D  FFDA         	movff	put_cluster@p+1,fsr2h
 15185  001FE4  C094  FFDF         	movff	_put_cluster$1552,indf2
 15186                           
 15187                           ;tff.c: 221: break;
 15188  001FE8  D041               	goto	l9807
 15189  001FEA                     l9791:
 15190                           
 15191                           ; BSR set to: 0
 15192                           ;tff.c: 224: if (!move_window(fatsect + clust / 256)) return FALSE;
 15193  001FEA  5189               	movf	(put_cluster@clust+1)& (0+255),w,b
 15194  001FEC  2596               	addwf	put_cluster@fatsect& (0+255),w,b
 15195  001FEE  6F73               	movwf	move_window@sector& (0+255),b
 15196  001FF0  0E00               	movlw	0
 15197  001FF2  2197               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 15198  001FF4  6F74               	movwf	(move_window@sector+1)& (0+255),b
 15199  001FF6  0E00               	movlw	0
 15200  001FF8  2198               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 15201  001FFA  6F75               	movwf	(move_window@sector+2)& (0+255),b
 15202  001FFC  0E00               	movlw	0
 15203  001FFE  2199               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 15204  002000  6F76               	movwf	(move_window@sector+3)& (0+255),b
 15205  002002  ECA8  F015         	call	_move_window	;wreg free
 15206  002006  0900               	iorlw	0
 15207  002008  B4D8               	btfsc	status,2,c
 15208  00200A  D748               	goto	u10860
 15209                           
 15210                           ; BSR set to: 0
 15211                           ;tff.c: 225: *(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U])=(WORD)((WORD)val);
 15212  00200C  0EFF               	movlw	255
 15213  00200E  6F8C               	movwf	??_put_cluster& (0+255),b
 15214  002010  0E01               	movlw	1
 15215  002012  6F8D               	movwf	(??_put_cluster+1)& (0+255),b
 15216  002014  C088  F08E         	movff	put_cluster@clust,??_put_cluster+2
 15217  002018  C089  F08F         	movff	put_cluster@clust+1,??_put_cluster+3
 15218  00201C  90D8               	bcf	status,0,c
 15219  00201E  378E               	rlcf	(??_put_cluster+2)& (0+255),f,b
 15220  002020  378F               	rlcf	(??_put_cluster+3)& (0+255),f,b
 15221  002022  518C               	movf	??_put_cluster& (0+255),w,b
 15222  002024  178E               	andwf	(??_put_cluster+2)& (0+255),f,b
 15223  002026  518D               	movf	(??_put_cluster+1)& (0+255),w,b
 15224  002028  178F               	andwf	(??_put_cluster+3)& (0+255),f,b
 15225  00202A  C09E  F090         	movff	put_cluster@fs,??_put_cluster+4
 15226  00202E  C09F  F091         	movff	put_cluster@fs+1,??_put_cluster+5
 15227  002032  518E               	movf	(??_put_cluster+2)& (0+255),w,b
 15228  002034  2790               	addwf	(??_put_cluster+4)& (0+255),f,b
 15229  002036  518F               	movf	(??_put_cluster+3)& (0+255),w,b
 15230  002038  2391               	addwfc	(??_put_cluster+5)& (0+255),f,b
 15231  00203A  0E20               	movlw	32
 15232  00203C  2590               	addwf	(??_put_cluster+4)& (0+255),w,b
 15233  00203E  6ED9               	movwf	fsr2l,c
 15234  002040  0E00               	movlw	0
 15235  002042  2191               	addwfc	(??_put_cluster+5)& (0+255),w,b
 15236  002044  6EDA               	movwf	fsr2h,c
 15237  002046  C08A  FFDE         	movff	put_cluster@val,postinc2
 15238  00204A  C08B  FFDD         	movff	put_cluster@val+1,postdec2
 15239                           
 15240                           ;tff.c: 226: break;
 15241  00204E  D00E               	goto	l9807
 15242  002050                     l9805:
 15243                           
 15244                           ; BSR set to: 0
 15245  002050  EE20 F01C          	lfsr	2,28
 15246  002054  519E               	movf	put_cluster@fs& (0+255),w,b
 15247  002056  26D9               	addwf	fsr2l,f,c
 15248  002058  519F               	movf	(put_cluster@fs+1)& (0+255),w,b
 15249  00205A  22DA               	addwfc	fsr2h,f,c
 15250  00205C  50DF               	movf	indf2,w,c
 15251                           
 15252                           ; Switch size 1, requested type "simple"
 15253                           ; Number of cases is 2, Range of values is 1 to 2
 15254                           ; switch strategies available:
 15255                           ; Name         Instructions Cycles
 15256                           ; simple_byte            7     4 (average)
 15257                           ;	Chosen strategy is simple_byte
 15258  00205E  0A01               	xorlw	1	; case 1
 15259  002060  B4D8               	btfsc	status,2,c
 15260  002062  D6EE               	goto	l9753
 15261  002064  0A03               	xorlw	3	; case 2
 15262  002066  B4D8               	btfsc	status,2,c
 15263  002068  D7C0               	goto	l9791
 15264  00206A  D718               	goto	u10860
 15265  00206C                     l9807:
 15266                           
 15267                           ; BSR set to: 0
 15268                           ;tff.c: 236: fs->winflag = 1;
 15269  00206C  EE20 F01F          	lfsr	2,31
 15270  002070  519E               	movf	put_cluster@fs& (0+255),w,b
 15271  002072  26D9               	addwf	fsr2l,f,c
 15272  002074  519F               	movf	(put_cluster@fs+1)& (0+255),w,b
 15273  002076  22DA               	addwfc	fsr2h,f,c
 15274  002078  0E01               	movlw	1
 15275  00207A  6EDF               	movwf	indf2,c
 15276                           
 15277                           ; BSR set to: 0
 15278                           ;tff.c: 237: return TRUE;
 15279  00207C  0E01               	movlw	1
 15280                           
 15281                           ; BSR set to: 0
 15282  00207E  0012               	return		;funcret
 15283  002080                     __end_of_put_cluster:
 15284                           	callstack 0
 15285                           
 15286 ;; *************** function _get_cluster *****************
 15287 ;; Defined at:
 15288 ;;		line 155 in file "bibliotecas/tff.c"
 15289 ;; Parameters:    Size  Location     Type
 15290 ;;  clust           2   40[BANK0 ] unsigned short 
 15291 ;; Auto vars:     Size  Location     Type
 15292 ;;  fatsect         4   53[BANK0 ] unsigned long 
 15293 ;;  fs              2   59[BANK0 ] PTR struct _FATFS
 15294 ;;		 -> NULL(0), fs(544), 
 15295 ;;  bc              2   57[BANK0 ] unsigned short 
 15296 ;;  wc              2   51[BANK0 ] unsigned short 
 15297 ;; Return value:  Size  Location     Type
 15298 ;;                  2   40[BANK0 ] unsigned short 
 15299 ;; Registers used:
 15300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15301 ;; Tracked objects:
 15302 ;;		On entry : 3F/0
 15303 ;;		On exit  : 3F/0
 15304 ;;		Unchanged: 0/0
 15305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15306 ;;      Params:         0       2       0       0       0       0       0       0       0
 15307 ;;      Locals:         0      10       0       0       0       0       0       0       0
 15308 ;;      Temps:          0       9       0       0       0       0       0       0       0
 15309 ;;      Totals:         0      21       0       0       0       0       0       0       0
 15310 ;;Total ram usage:       21 bytes
 15311 ;; Hardware stack levels used:    1
 15312 ;; Hardware stack levels required when called:    9
 15313 ;; This function calls:
 15314 ;;		___wmul
 15315 ;;		_move_window
 15316 ;; This function is called by:
 15317 ;;		_remove_chain
 15318 ;;		_create_chain
 15319 ;;		_next_dir_entry
 15320 ;;		_f_lseek
 15321 ;;		_f_read
 15322 ;; This function uses a non-reentrant model
 15323 ;;
 15324                           
 15325                           	psect	text74
 15326  002778                     __ptext74:
 15327                           	callstack 0
 15328  002778                     _get_cluster:
 15329                           	callstack 12
 15330                           
 15331                           ; BSR set to: 0
 15332                           ;tff.c: 159: WORD wc, bc;;tff.c: 160: DWORD fatsect;;tff.c: 161: FATFS *fs = FatFs;
 15333                           
 15334                           ; BSR set to: 0
 15335                           ;incstack = 0
 15336  002778  C038  F09B         	movff	_FatFs,get_cluster@fs
 15337  00277C  C039  F09C         	movff	_FatFs+1,get_cluster@fs+1
 15338                           
 15339                           ;tff.c: 164: if (clust >= 2 && clust < fs->max_clust) {
 15340  002780  5189               	movf	(get_cluster@clust+1)& (0+255),w,b
 15341  002782  E104               	bnz	u10760
 15342  002784  0E02               	movlw	2
 15343  002786  5D88               	subwf	get_cluster@clust& (0+255),w,b
 15344  002788  A0D8               	btfss	status,0,c
 15345  00278A  D102               	goto	l9745
 15346  00278C                     u10760:
 15347                           
 15348                           ; BSR set to: 0
 15349  00278C  EE20 F016          	lfsr	2,22
 15350  002790  519B               	movf	get_cluster@fs& (0+255),w,b
 15351  002792  26D9               	addwf	fsr2l,f,c
 15352  002794  519C               	movf	(get_cluster@fs+1)& (0+255),w,b
 15353  002796  22DA               	addwfc	fsr2h,f,c
 15354  002798  50DE               	movf	postinc2,w,c
 15355  00279A  5D88               	subwf	get_cluster@clust& (0+255),w,b
 15356  00279C  50DE               	movf	postinc2,w,c
 15357  00279E  5989               	subwfb	(get_cluster@clust+1)& (0+255),w,b
 15358  0027A0  B0D8               	btfsc	status,0,c
 15359  0027A2  D0F6               	goto	l9745
 15360                           
 15361                           ; BSR set to: 0
 15362                           ;tff.c: 165: fatsect = fs->fatbase;
 15363  0027A4  EE20 F008          	lfsr	2,8
 15364  0027A8  519B               	movf	get_cluster@fs& (0+255),w,b
 15365  0027AA  26D9               	addwf	fsr2l,f,c
 15366  0027AC  519C               	movf	(get_cluster@fs+1)& (0+255),w,b
 15367  0027AE  22DA               	addwfc	fsr2h,f,c
 15368  0027B0  CFDE F095          	movff	postinc2,get_cluster@fatsect
 15369  0027B4  CFDE F096          	movff	postinc2,get_cluster@fatsect+1
 15370  0027B8  CFDE F097          	movff	postinc2,get_cluster@fatsect+2
 15371  0027BC  CFDE F098          	movff	postinc2,get_cluster@fatsect+3
 15372                           
 15373                           ;tff.c: 166: switch (fs->fs_type) {
 15374  0027C0  D0DA               	goto	l9743
 15375  0027C2                     l9709:
 15376                           
 15377                           ; BSR set to: 0
 15378                           ;tff.c: 168: bc = (WORD)clust * 3 / 2;
 15379  0027C2  C088  F019         	movff	get_cluster@clust,___wmul@multiplier
 15380  0027C6  C089  F01A         	movff	get_cluster@clust+1,___wmul@multiplier+1
 15381  0027CA  0E00               	movlw	0
 15382  0027CC  6E1C               	movwf	(___wmul@multiplicand+1)^0,c
 15383  0027CE  0E03               	movlw	3
 15384  0027D0  6E1B               	movwf	___wmul@multiplicand^0,c
 15385  0027D2  ECC3  F028         	call	___wmul	;wreg free
 15386  0027D6  90D8               	bcf	status,0,c
 15387  0027D8  301A               	rrcf	(?___wmul+1)^0,w,c
 15388  0027DA  0100               	movlb	0	; () banked
 15389  0027DC  6F8A               	movwf	??_get_cluster& (0+255),b
 15390  0027DE  3019               	rrcf	?___wmul^0,w,c
 15391  0027E0  6F99               	movwf	get_cluster@bc& (0+255),b
 15392  0027E2  C08A  F09A         	movff	??_get_cluster,get_cluster@bc+1
 15393                           
 15394                           ; BSR set to: 0
 15395                           ;tff.c: 169: if (!move_window(fatsect + bc / 512U)) break;
 15396  0027E6  C099  F08A         	movff	get_cluster@bc,??_get_cluster
 15397  0027EA  C09A  F08B         	movff	get_cluster@bc+1,??_get_cluster+1
 15398  0027EE  0E09               	movlw	9
 15399  0027F0  6F8C               	movwf	(??_get_cluster+2)& (0+255),b
 15400  0027F2                     u10785:
 15401  0027F2  90D8               	bcf	status,0,c
 15402  0027F4  338B               	rrcf	(??_get_cluster+1)& (0+255),f,b
 15403  0027F6  338A               	rrcf	??_get_cluster& (0+255),f,b
 15404  0027F8  2F8C               	decfsz	(??_get_cluster+2)& (0+255),f,b
 15405  0027FA  D7FB               	goto	u10785
 15406  0027FC  518A               	movf	??_get_cluster& (0+255),w,b
 15407  0027FE  2595               	addwf	get_cluster@fatsect& (0+255),w,b
 15408  002800  6F73               	movwf	move_window@sector& (0+255),b
 15409  002802  518B               	movf	(??_get_cluster+1)& (0+255),w,b
 15410  002804  2196               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 15411  002806  6F74               	movwf	(move_window@sector+1)& (0+255),b
 15412  002808  0E00               	movlw	0
 15413  00280A  2197               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 15414  00280C  6F75               	movwf	(move_window@sector+2)& (0+255),b
 15415  00280E  0E00               	movlw	0
 15416  002810  2198               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 15417  002812  6F76               	movwf	(move_window@sector+3)& (0+255),b
 15418  002814  ECA8  F015         	call	_move_window	;wreg free
 15419  002818  0900               	iorlw	0
 15420  00281A  B4D8               	btfsc	status,2,c
 15421  00281C  D0B9               	goto	l9745
 15422                           
 15423                           ; BSR set to: 0
 15424                           ;tff.c: 170: wc = fs->win[bc % 512U]; bc++;
 15425  00281E  0EFF               	movlw	255
 15426  002820  6F8A               	movwf	??_get_cluster& (0+255),b
 15427  002822  0E01               	movlw	1
 15428  002824  6F8B               	movwf	(??_get_cluster+1)& (0+255),b
 15429  002826  C099  F08C         	movff	get_cluster@bc,??_get_cluster+2
 15430  00282A  C09A  F08D         	movff	get_cluster@bc+1,??_get_cluster+3
 15431  00282E  518A               	movf	??_get_cluster& (0+255),w,b
 15432  002830  178C               	andwf	(??_get_cluster+2)& (0+255),f,b
 15433  002832  518B               	movf	(??_get_cluster+1)& (0+255),w,b
 15434  002834  178D               	andwf	(??_get_cluster+3)& (0+255),f,b
 15435  002836  C09B  F08E         	movff	get_cluster@fs,??_get_cluster+4
 15436  00283A  C09C  F08F         	movff	get_cluster@fs+1,??_get_cluster+5
 15437  00283E  518C               	movf	(??_get_cluster+2)& (0+255),w,b
 15438  002840  278E               	addwf	(??_get_cluster+4)& (0+255),f,b
 15439  002842  518D               	movf	(??_get_cluster+3)& (0+255),w,b
 15440  002844  238F               	addwfc	(??_get_cluster+5)& (0+255),f,b
 15441  002846  0E20               	movlw	32
 15442  002848  258E               	addwf	(??_get_cluster+4)& (0+255),w,b
 15443  00284A  6ED9               	movwf	fsr2l,c
 15444  00284C  0E00               	movlw	0
 15445  00284E  218F               	addwfc	(??_get_cluster+5)& (0+255),w,b
 15446  002850  6EDA               	movwf	fsr2h,c
 15447  002852  50DF               	movf	indf2,w,c
 15448  002854  6F90               	movwf	(??_get_cluster+6)& (0+255),b
 15449  002856  5190               	movf	(??_get_cluster+6)& (0+255),w,b
 15450  002858  6F93               	movwf	get_cluster@wc& (0+255),b
 15451  00285A  6B94               	clrf	(get_cluster@wc+1)& (0+255),b
 15452                           
 15453                           ; BSR set to: 0
 15454  00285C  4B99               	infsnz	get_cluster@bc& (0+255),f,b
 15455  00285E  2B9A               	incf	(get_cluster@bc+1)& (0+255),f,b
 15456                           
 15457                           ; BSR set to: 0
 15458                           ;tff.c: 171: if (!move_window(fatsect + bc / 512U)) break;
 15459  002860  C099  F08A         	movff	get_cluster@bc,??_get_cluster
 15460  002864  C09A  F08B         	movff	get_cluster@bc+1,??_get_cluster+1
 15461  002868  0E09               	movlw	9
 15462  00286A  6F8C               	movwf	(??_get_cluster+2)& (0+255),b
 15463  00286C                     u10805:
 15464  00286C  90D8               	bcf	status,0,c
 15465  00286E  338B               	rrcf	(??_get_cluster+1)& (0+255),f,b
 15466  002870  338A               	rrcf	??_get_cluster& (0+255),f,b
 15467  002872  2F8C               	decfsz	(??_get_cluster+2)& (0+255),f,b
 15468  002874  D7FB               	goto	u10805
 15469  002876  518A               	movf	??_get_cluster& (0+255),w,b
 15470  002878  2595               	addwf	get_cluster@fatsect& (0+255),w,b
 15471  00287A  6F73               	movwf	move_window@sector& (0+255),b
 15472  00287C  518B               	movf	(??_get_cluster+1)& (0+255),w,b
 15473  00287E  2196               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 15474  002880  6F74               	movwf	(move_window@sector+1)& (0+255),b
 15475  002882  0E00               	movlw	0
 15476  002884  2197               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 15477  002886  6F75               	movwf	(move_window@sector+2)& (0+255),b
 15478  002888  0E00               	movlw	0
 15479  00288A  2198               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 15480  00288C  6F76               	movwf	(move_window@sector+3)& (0+255),b
 15481  00288E  ECA8  F015         	call	_move_window	;wreg free
 15482  002892  0900               	iorlw	0
 15483  002894  B4D8               	btfsc	status,2,c
 15484  002896  D07C               	goto	l9745
 15485                           
 15486                           ; BSR set to: 0
 15487                           ;tff.c: 172: wc |= (WORD)fs->win[bc % 512U] << 8;
 15488  002898  0EFF               	movlw	255
 15489  00289A  6F8A               	movwf	??_get_cluster& (0+255),b
 15490  00289C  0E01               	movlw	1
 15491  00289E  6F8B               	movwf	(??_get_cluster+1)& (0+255),b
 15492  0028A0  C099  F08C         	movff	get_cluster@bc,??_get_cluster+2
 15493  0028A4  C09A  F08D         	movff	get_cluster@bc+1,??_get_cluster+3
 15494  0028A8  518A               	movf	??_get_cluster& (0+255),w,b
 15495  0028AA  178C               	andwf	(??_get_cluster+2)& (0+255),f,b
 15496  0028AC  518B               	movf	(??_get_cluster+1)& (0+255),w,b
 15497  0028AE  178D               	andwf	(??_get_cluster+3)& (0+255),f,b
 15498  0028B0  C09B  F08E         	movff	get_cluster@fs,??_get_cluster+4
 15499  0028B4  C09C  F08F         	movff	get_cluster@fs+1,??_get_cluster+5
 15500  0028B8  518C               	movf	(??_get_cluster+2)& (0+255),w,b
 15501  0028BA  278E               	addwf	(??_get_cluster+4)& (0+255),f,b
 15502  0028BC  518D               	movf	(??_get_cluster+3)& (0+255),w,b
 15503  0028BE  238F               	addwfc	(??_get_cluster+5)& (0+255),f,b
 15504  0028C0  0E20               	movlw	32
 15505  0028C2  258E               	addwf	(??_get_cluster+4)& (0+255),w,b
 15506  0028C4  6ED9               	movwf	fsr2l,c
 15507  0028C6  0E00               	movlw	0
 15508  0028C8  218F               	addwfc	(??_get_cluster+5)& (0+255),w,b
 15509  0028CA  6EDA               	movwf	fsr2h,c
 15510  0028CC  50DF               	movf	indf2,w,c
 15511  0028CE  6F90               	movwf	(??_get_cluster+6)& (0+255),b
 15512  0028D0  5190               	movf	(??_get_cluster+6)& (0+255),w,b
 15513  0028D2  6F92               	movwf	(??_get_cluster+8)& (0+255),b
 15514  0028D4  6B91               	clrf	(??_get_cluster+7)& (0+255),b
 15515  0028D6  5191               	movf	(??_get_cluster+7)& (0+255),w,b
 15516  0028D8  1393               	iorwf	get_cluster@wc& (0+255),f,b
 15517  0028DA  5192               	movf	(??_get_cluster+8)& (0+255),w,b
 15518  0028DC  1394               	iorwf	(get_cluster@wc+1)& (0+255),f,b
 15519                           
 15520                           ; BSR set to: 0
 15521                           ;tff.c: 173: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
 15522  0028DE  B188               	btfsc	get_cluster@clust& (0+255),0,b
 15523  0028E0  D007               	goto	l9729
 15524                           
 15525                           ; BSR set to: 0
 15526  0028E2  0EFF               	movlw	255
 15527  0028E4  1593               	andwf	get_cluster@wc& (0+255),w,b
 15528  0028E6  6F88               	movwf	?_get_cluster& (0+255),b
 15529  0028E8  0E0F               	movlw	15
 15530  0028EA  1594               	andwf	(get_cluster@wc+1)& (0+255),w,b
 15531  0028EC  6F89               	movwf	(?_get_cluster+1)& (0+255),b
 15532  0028EE  0012               	return	
 15533  0028F0                     l9729:
 15534                           
 15535                           ; BSR set to: 0
 15536  0028F0  C093  F08A         	movff	get_cluster@wc,??_get_cluster
 15537  0028F4  C094  F08B         	movff	get_cluster@wc+1,??_get_cluster+1
 15538  0028F8  0E04               	movlw	4
 15539  0028FA  6F8C               	movwf	(??_get_cluster+2)& (0+255),b
 15540  0028FC                     u10835:
 15541  0028FC  90D8               	bcf	status,0,c
 15542  0028FE  338B               	rrcf	(??_get_cluster+1)& (0+255),f,b
 15543  002900  338A               	rrcf	??_get_cluster& (0+255),f,b
 15544  002902  2F8C               	decfsz	(??_get_cluster+2)& (0+255),f,b
 15545  002904  D7FB               	goto	u10835
 15546  002906  C08A  F088         	movff	??_get_cluster,?_get_cluster
 15547  00290A  C08B  F089         	movff	??_get_cluster+1,?_get_cluster+1
 15548  00290E  0012               	return	
 15549  002910                     l9733:
 15550                           
 15551                           ; BSR set to: 0
 15552                           ;tff.c: 176: if (!move_window(fatsect + clust / 256)) break;
 15553  002910  5189               	movf	(get_cluster@clust+1)& (0+255),w,b
 15554  002912  2595               	addwf	get_cluster@fatsect& (0+255),w,b
 15555  002914  6F73               	movwf	move_window@sector& (0+255),b
 15556  002916  0E00               	movlw	0
 15557  002918  2196               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 15558  00291A  6F74               	movwf	(move_window@sector+1)& (0+255),b
 15559  00291C  0E00               	movlw	0
 15560  00291E  2197               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 15561  002920  6F75               	movwf	(move_window@sector+2)& (0+255),b
 15562  002922  0E00               	movlw	0
 15563  002924  2198               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 15564  002926  6F76               	movwf	(move_window@sector+3)& (0+255),b
 15565  002928  ECA8  F015         	call	_move_window	;wreg free
 15566  00292C  0900               	iorlw	0
 15567  00292E  B4D8               	btfsc	status,2,c
 15568  002930  D02F               	goto	l9745
 15569                           
 15570                           ; BSR set to: 0
 15571                           ;tff.c: 177: return (WORD)(*(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U]));
 15572  002932  0EFF               	movlw	255
 15573  002934  6F8A               	movwf	??_get_cluster& (0+255),b
 15574  002936  0E01               	movlw	1
 15575  002938  6F8B               	movwf	(??_get_cluster+1)& (0+255),b
 15576  00293A  C088  F08C         	movff	get_cluster@clust,??_get_cluster+2
 15577  00293E  C089  F08D         	movff	get_cluster@clust+1,??_get_cluster+3
 15578  002942  90D8               	bcf	status,0,c
 15579  002944  378C               	rlcf	(??_get_cluster+2)& (0+255),f,b
 15580  002946  378D               	rlcf	(??_get_cluster+3)& (0+255),f,b
 15581  002948  518A               	movf	??_get_cluster& (0+255),w,b
 15582  00294A  178C               	andwf	(??_get_cluster+2)& (0+255),f,b
 15583  00294C  518B               	movf	(??_get_cluster+1)& (0+255),w,b
 15584  00294E  178D               	andwf	(??_get_cluster+3)& (0+255),f,b
 15585  002950  C09B  F08E         	movff	get_cluster@fs,??_get_cluster+4
 15586  002954  C09C  F08F         	movff	get_cluster@fs+1,??_get_cluster+5
 15587  002958  518C               	movf	(??_get_cluster+2)& (0+255),w,b
 15588  00295A  278E               	addwf	(??_get_cluster+4)& (0+255),f,b
 15589  00295C  518D               	movf	(??_get_cluster+3)& (0+255),w,b
 15590  00295E  238F               	addwfc	(??_get_cluster+5)& (0+255),f,b
 15591  002960  0E20               	movlw	32
 15592  002962  258E               	addwf	(??_get_cluster+4)& (0+255),w,b
 15593  002964  6ED9               	movwf	fsr2l,c
 15594  002966  0E00               	movlw	0
 15595  002968  218F               	addwfc	(??_get_cluster+5)& (0+255),w,b
 15596  00296A  6EDA               	movwf	fsr2h,c
 15597  00296C  CFDE F088          	movff	postinc2,?_get_cluster
 15598  002970  CFDD F089          	movff	postdec2,?_get_cluster+1
 15599  002974  0012               	return	
 15600  002976                     l9743:
 15601                           
 15602                           ; BSR set to: 0
 15603  002976  EE20 F01C          	lfsr	2,28
 15604  00297A  519B               	movf	get_cluster@fs& (0+255),w,b
 15605  00297C  26D9               	addwf	fsr2l,f,c
 15606  00297E  519C               	movf	(get_cluster@fs+1)& (0+255),w,b
 15607  002980  22DA               	addwfc	fsr2h,f,c
 15608  002982  50DF               	movf	indf2,w,c
 15609                           
 15610                           ; Switch size 1, requested type "simple"
 15611                           ; Number of cases is 2, Range of values is 1 to 2
 15612                           ; switch strategies available:
 15613                           ; Name         Instructions Cycles
 15614                           ; simple_byte            7     4 (average)
 15615                           ;	Chosen strategy is simple_byte
 15616  002984  0A01               	xorlw	1	; case 1
 15617  002986  B4D8               	btfsc	status,2,c
 15618  002988  D71C               	goto	l9709
 15619  00298A  0A03               	xorlw	3	; case 2
 15620  00298C  B4D8               	btfsc	status,2,c
 15621  00298E  D7C0               	goto	l9733
 15622  002990                     l9745:
 15623                           
 15624                           ; BSR set to: 0
 15625                           ;tff.c: 184: };tff.c: 186: return 1;
 15626  002990  0E00               	movlw	0
 15627  002992  6F89               	movwf	(?_get_cluster+1)& (0+255),b
 15628  002994  0E01               	movlw	1
 15629  002996  6F88               	movwf	?_get_cluster& (0+255),b
 15630                           
 15631                           ; BSR set to: 0
 15632  002998  0012               	return		;funcret
 15633  00299A                     __end_of_get_cluster:
 15634                           	callstack 0
 15635                           
 15636 ;; *************** function ___wmul *****************
 15637 ;; Defined at:
 15638 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\Umul16.c"
 15639 ;; Parameters:    Size  Location     Type
 15640 ;;  multiplier      2   24[COMRAM] unsigned int 
 15641 ;;  multiplicand    2   26[COMRAM] unsigned int 
 15642 ;; Auto vars:     Size  Location     Type
 15643 ;;  product         2   28[COMRAM] unsigned int 
 15644 ;; Return value:  Size  Location     Type
 15645 ;;                  2   24[COMRAM] unsigned int 
 15646 ;; Registers used:
 15647 ;;		wreg, status,2, status,0, prodl, prodh
 15648 ;; Tracked objects:
 15649 ;;		On entry : 0/0
 15650 ;;		On exit  : 0/0
 15651 ;;		Unchanged: 0/0
 15652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15653 ;;      Params:         4       0       0       0       0       0       0       0       0
 15654 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15655 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15656 ;;      Totals:         6       0       0       0       0       0       0       0       0
 15657 ;;Total ram usage:        6 bytes
 15658 ;; Hardware stack levels used:    1
 15659 ;; Hardware stack levels required when called:    3
 15660 ;; This function calls:
 15661 ;;		Nothing
 15662 ;; This function is called by:
 15663 ;;		_get_cluster
 15664 ;;		_put_cluster
 15665 ;;		_fprintf
 15666 ;;		_atoi
 15667 ;; This function uses a non-reentrant model
 15668 ;;
 15669                           
 15670                           	psect	text75
 15671  005186                     __ptext75:
 15672                           	callstack 0
 15673  005186                     ___wmul:
 15674                           	callstack 24
 15675                           
 15676                           ; BSR set to: 0
 15677                           ;incstack = 0
 15678  005186  5019               	movf	___wmul@multiplier^0,w,c
 15679  005188  021B               	mulwf	___wmul@multiplicand^0,c
 15680  00518A  CFF3 F01D          	movff	prodl,___wmul@product
 15681  00518E  CFF4 F01E          	movff	prodh,___wmul@product+1
 15682  005192  5019               	movf	___wmul@multiplier^0,w,c
 15683  005194  021C               	mulwf	(___wmul@multiplicand+1)^0,c
 15684  005196  50F3               	movf	243,w,c
 15685  005198  261E               	addwf	(___wmul@product+1)^0,f,c
 15686  00519A  501A               	movf	(___wmul@multiplier+1)^0,w,c
 15687  00519C  021B               	mulwf	___wmul@multiplicand^0,c
 15688  00519E  50F3               	movf	243,w,c
 15689  0051A0  261E               	addwf	(___wmul@product+1)^0,f,c
 15690  0051A2  C01D  F019         	movff	___wmul@product,?___wmul
 15691  0051A6  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
 15692  0051AA  0012               	return		;funcret
 15693  0051AC                     __end_of___wmul:
 15694                           	callstack 0
 15695                           
 15696 ;; *************** function ___lldiv *****************
 15697 ;; Defined at:
 15698 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\__lldiv.c"
 15699 ;; Parameters:    Size  Location     Type
 15700 ;;  dividend        4   24[COMRAM] unsigned long 
 15701 ;;  divisor         4   28[COMRAM] unsigned long 
 15702 ;; Auto vars:     Size  Location     Type
 15703 ;;  quotient        4   32[COMRAM] unsigned long 
 15704 ;;  counter         1   36[COMRAM] unsigned char 
 15705 ;; Return value:  Size  Location     Type
 15706 ;;                  4   24[COMRAM] unsigned long 
 15707 ;; Registers used:
 15708 ;;		wreg, status,2, status,0
 15709 ;; Tracked objects:
 15710 ;;		On entry : 0/0
 15711 ;;		On exit  : 0/0
 15712 ;;		Unchanged: 0/0
 15713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15714 ;;      Params:         8       0       0       0       0       0       0       0       0
 15715 ;;      Locals:         5       0       0       0       0       0       0       0       0
 15716 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15717 ;;      Totals:        13       0       0       0       0       0       0       0       0
 15718 ;;Total ram usage:       13 bytes
 15719 ;; Hardware stack levels used:    1
 15720 ;; Hardware stack levels required when called:    3
 15721 ;; This function calls:
 15722 ;;		Nothing
 15723 ;; This function is called by:
 15724 ;;		_auto_mount
 15725 ;;		_f_lseek
 15726 ;;		_fprintf
 15727 ;;		_ultoa
 15728 ;; This function uses a non-reentrant model
 15729 ;;
 15730                           
 15731                           	psect	text76
 15732  00462A                     __ptext76:
 15733                           	callstack 0
 15734  00462A                     ___lldiv:
 15735                           	callstack 22
 15736                           
 15737                           ;incstack = 0
 15738  00462A  0E00               	movlw	0
 15739  00462C  6E21               	movwf	___lldiv@quotient^0,c
 15740  00462E  0E00               	movlw	0
 15741  004630  6E22               	movwf	(___lldiv@quotient+1)^0,c
 15742  004632  0E00               	movlw	0
 15743  004634  6E23               	movwf	(___lldiv@quotient+2)^0,c
 15744  004636  0E00               	movlw	0
 15745  004638  6E24               	movwf	(___lldiv@quotient+3)^0,c
 15746  00463A  501D               	movf	___lldiv@divisor^0,w,c
 15747  00463C  101E               	iorwf	(___lldiv@divisor+1)^0,w,c
 15748  00463E  101F               	iorwf	(___lldiv@divisor+2)^0,w,c
 15749  004640  1020               	iorwf	(___lldiv@divisor+3)^0,w,c
 15750  004642  B4D8               	btfsc	status,2,c
 15751  004644  D02A               	goto	l1581
 15752  004646  0E01               	movlw	1
 15753  004648  6E25               	movwf	___lldiv@counter^0,c
 15754  00464A  D006               	goto	l10435
 15755  00464C                     l10433:
 15756  00464C  90D8               	bcf	status,0,c
 15757  00464E  361D               	rlcf	___lldiv@divisor^0,f,c
 15758  004650  361E               	rlcf	(___lldiv@divisor+1)^0,f,c
 15759  004652  361F               	rlcf	(___lldiv@divisor+2)^0,f,c
 15760  004654  3620               	rlcf	(___lldiv@divisor+3)^0,f,c
 15761  004656  2A25               	incf	___lldiv@counter^0,f,c
 15762  004658                     l10435:
 15763  004658  AE20               	btfss	(___lldiv@divisor+3)^0,7,c
 15764  00465A  D7F8               	goto	l10433
 15765  00465C                     u11890:
 15766  00465C  90D8               	bcf	status,0,c
 15767  00465E  3621               	rlcf	___lldiv@quotient^0,f,c
 15768  004660  3622               	rlcf	(___lldiv@quotient+1)^0,f,c
 15769  004662  3623               	rlcf	(___lldiv@quotient+2)^0,f,c
 15770  004664  3624               	rlcf	(___lldiv@quotient+3)^0,f,c
 15771  004666  501D               	movf	___lldiv@divisor^0,w,c
 15772  004668  5C19               	subwf	___lldiv@dividend^0,w,c
 15773  00466A  501E               	movf	(___lldiv@divisor+1)^0,w,c
 15774  00466C  581A               	subwfb	(___lldiv@dividend+1)^0,w,c
 15775  00466E  501F               	movf	(___lldiv@divisor+2)^0,w,c
 15776  004670  581B               	subwfb	(___lldiv@dividend+2)^0,w,c
 15777  004672  5020               	movf	(___lldiv@divisor+3)^0,w,c
 15778  004674  581C               	subwfb	(___lldiv@dividend+3)^0,w,c
 15779  004676  A0D8               	btfss	status,0,c
 15780  004678  D009               	goto	l10445
 15781  00467A  501D               	movf	___lldiv@divisor^0,w,c
 15782  00467C  5E19               	subwf	___lldiv@dividend^0,f,c
 15783  00467E  501E               	movf	(___lldiv@divisor+1)^0,w,c
 15784  004680  5A1A               	subwfb	(___lldiv@dividend+1)^0,f,c
 15785  004682  501F               	movf	(___lldiv@divisor+2)^0,w,c
 15786  004684  5A1B               	subwfb	(___lldiv@dividend+2)^0,f,c
 15787  004686  5020               	movf	(___lldiv@divisor+3)^0,w,c
 15788  004688  5A1C               	subwfb	(___lldiv@dividend+3)^0,f,c
 15789  00468A  8021               	bsf	___lldiv@quotient^0,0,c
 15790  00468C                     l10445:
 15791  00468C  90D8               	bcf	status,0,c
 15792  00468E  3220               	rrcf	(___lldiv@divisor+3)^0,f,c
 15793  004690  321F               	rrcf	(___lldiv@divisor+2)^0,f,c
 15794  004692  321E               	rrcf	(___lldiv@divisor+1)^0,f,c
 15795  004694  321D               	rrcf	___lldiv@divisor^0,f,c
 15796  004696  2E25               	decfsz	___lldiv@counter^0,f,c
 15797  004698  D7E1               	goto	u11890
 15798  00469A                     l1581:
 15799  00469A  C021  F019         	movff	___lldiv@quotient,?___lldiv
 15800  00469E  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
 15801  0046A2  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
 15802  0046A6  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
 15803  0046AA  0012               	return		;funcret
 15804  0046AC                     __end_of___lldiv:
 15805                           	callstack 0
 15806                           
 15807 ;; *************** function _f_close *****************
 15808 ;; Defined at:
 15809 ;;		line 1116 in file "bibliotecas/tff.c"
 15810 ;; Parameters:    Size  Location     Type
 15811 ;;  fp              2   51[BANK0 ] PTR struct _FIL
 15812 ;;		 -> fil(28), 
 15813 ;; Auto vars:     Size  Location     Type
 15814 ;;  res             1   48[COMRAM] enum E155
 15815 ;; Return value:  Size  Location     Type
 15816 ;;                  1    wreg      enum E3237
 15817 ;; Registers used:
 15818 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15819 ;; Tracked objects:
 15820 ;;		On entry : 3F/0
 15821 ;;		On exit  : 3F/0
 15822 ;;		Unchanged: 0/0
 15823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15824 ;;      Params:         0       2       0       0       0       0       0       0       0
 15825 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15826 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15827 ;;      Totals:         1       2       0       0       0       0       0       0       0
 15828 ;;Total ram usage:        3 bytes
 15829 ;; Hardware stack levels used:    1
 15830 ;; Hardware stack levels required when called:   11
 15831 ;; This function calls:
 15832 ;;		_f_sync
 15833 ;; This function is called by:
 15834 ;;		_escrita_sdcard
 15835 ;; This function uses a non-reentrant model
 15836 ;;
 15837                           
 15838                           	psect	text77
 15839  00510E                     __ptext77:
 15840                           	callstack 0
 15841  00510E                     _f_close:
 15842                           	callstack 15
 15843                           
 15844                           ; BSR set to: 0
 15845                           ;tff.c: 1120: FRESULT res;;tff.c: 1124: res = f_sync(fp);
 15846                           
 15847                           ;incstack = 0
 15848  00510E  C093  F08A         	movff	f_close@fp,f_sync@fp
 15849  005112  C094  F08B         	movff	f_close@fp+1,f_sync@fp+1
 15850  005116  EC11  F01B         	call	_f_sync	;wreg free
 15851  00511A  6E31               	movwf	f_close@res^0,c
 15852                           
 15853                           ; BSR set to: 0
 15854                           ;tff.c: 1128: if (res == FR_OK) fp->fs = (0);
 15855  00511C  5031               	movf	f_close@res^0,w,c
 15856  00511E  A4D8               	btfss	status,2,c
 15857  005120  0012               	return	
 15858                           
 15859                           ; BSR set to: 0
 15860  005122  EE20 F004          	lfsr	2,4
 15861  005126  5193               	movf	f_close@fp& (0+255),w,b
 15862  005128  26D9               	addwf	fsr2l,f,c
 15863  00512A  5194               	movf	(f_close@fp+1)& (0+255),w,b
 15864  00512C  22DA               	addwfc	fsr2h,f,c
 15865  00512E  0E00               	movlw	0
 15866  005130  6EDE               	movwf	postinc2,c
 15867  005132  0E00               	movlw	0
 15868  005134  6EDD               	movwf	postdec2,c
 15869                           
 15870                           ; BSR set to: 0
 15871  005136  0012               	return		;funcret
 15872  005138                     __end_of_f_close:
 15873                           	callstack 0
 15874                           
 15875 ;; *************** function _f_sync *****************
 15876 ;; Defined at:
 15877 ;;		line 1077 in file "bibliotecas/tff.c"
 15878 ;; Parameters:    Size  Location     Type
 15879 ;;  fp              2   42[BANK0 ] PTR struct _FIL
 15880 ;;		 -> fil(28), 
 15881 ;; Auto vars:     Size  Location     Type
 15882 ;;  tim             4   44[BANK0 ] unsigned long 
 15883 ;;  dir             2   49[BANK0 ] PTR unsigned char 
 15884 ;;		 -> NULL(0), fs(544), 
 15885 ;;  res             1   48[BANK0 ] enum E155
 15886 ;; Return value:  Size  Location     Type
 15887 ;;                  1    wreg      enum E155
 15888 ;; Registers used:
 15889 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15890 ;; Tracked objects:
 15891 ;;		On entry : 3F/0
 15892 ;;		On exit  : 3F/0
 15893 ;;		Unchanged: 0/0
 15894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15895 ;;      Params:         0       2       0       0       0       0       0       0       0
 15896 ;;      Locals:         0       7       0       0       0       0       0       0       0
 15897 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15898 ;;      Totals:         0       9       0       0       0       0       0       0       0
 15899 ;;Total ram usage:        9 bytes
 15900 ;; Hardware stack levels used:    1
 15901 ;; Hardware stack levels required when called:   10
 15902 ;; This function calls:
 15903 ;;		_get_fattime
 15904 ;;		_move_window
 15905 ;;		_sync
 15906 ;;		_validate
 15907 ;; This function is called by:
 15908 ;;		_f_close
 15909 ;; This function uses a non-reentrant model
 15910 ;;
 15911                           
 15912                           	psect	text78
 15913  003622                     __ptext78:
 15914                           	callstack 0
 15915  003622                     _f_sync:
 15916                           	callstack 15
 15917                           
 15918                           ; BSR set to: 0
 15919                           ;tff.c: 1081: FRESULT res;;tff.c: 1082: DWORD tim;;tff.c: 1083: BYTE *dir;;tff.c: 1086: 
      +                          res = validate(fp->fs, fp->id);
 15920                           
 15921                           ; BSR set to: 0
 15922                           ;incstack = 0
 15923  003622  EE20 F004          	lfsr	2,4
 15924  003626  518A               	movf	f_sync@fp& (0+255),w,b
 15925  003628  26D9               	addwf	fsr2l,f,c
 15926  00362A  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 15927  00362C  22DA               	addwfc	fsr2h,f,c
 15928  00362E  CFDE F01F          	movff	postinc2,validate@fs
 15929  003632  CFDD F020          	movff	postdec2,validate@fs+1
 15930  003636  C08A  FFD9         	movff	f_sync@fp,fsr2l
 15931  00363A  C08B  FFDA         	movff	f_sync@fp+1,fsr2h
 15932  00363E  CFDE F021          	movff	postinc2,validate@id
 15933  003642  CFDD F022          	movff	postdec2,validate@id+1
 15934  003646  ECB8  F026         	call	_validate	;wreg free
 15935  00364A  0100               	movlb	0	; () banked
 15936  00364C  6F90               	movwf	f_sync@res& (0+255),b
 15937                           
 15938                           ; BSR set to: 0
 15939                           ;tff.c: 1087: if (res == FR_OK) {
 15940  00364E  5190               	movf	f_sync@res& (0+255),w,b
 15941  003650  A4D8               	btfss	status,2,c
 15942  003652  D077               	goto	l10911
 15943                           
 15944                           ; BSR set to: 0
 15945                           ;tff.c: 1088: if (fp->flag & 0x20) {
 15946  003654  EE20 F002          	lfsr	2,2
 15947  003658  518A               	movf	f_sync@fp& (0+255),w,b
 15948  00365A  26D9               	addwf	fsr2l,f,c
 15949  00365C  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 15950  00365E  22DA               	addwfc	fsr2h,f,c
 15951  003660  AADF               	btfss	indf2,5,c
 15952  003662  D06F               	goto	l10911
 15953                           
 15954                           ; BSR set to: 0
 15955                           ;tff.c: 1090: if (!move_window(fp->dir_sect))
 15956  003664  EE20 F016          	lfsr	2,22
 15957  003668  518A               	movf	f_sync@fp& (0+255),w,b
 15958  00366A  26D9               	addwf	fsr2l,f,c
 15959  00366C  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 15960  00366E  22DA               	addwfc	fsr2h,f,c
 15961  003670  CFDE F073          	movff	postinc2,move_window@sector
 15962  003674  CFDE F074          	movff	postinc2,move_window@sector+1
 15963  003678  CFDE F075          	movff	postinc2,move_window@sector+2
 15964  00367C  CFDE F076          	movff	postinc2,move_window@sector+3
 15965  003680  ECA8  F015         	call	_move_window	;wreg free
 15966  003684  0900               	iorlw	0
 15967  003686  A4D8               	btfss	status,2,c
 15968  003688  D002               	goto	l10897
 15969                           
 15970                           ; BSR set to: 0
 15971                           ;tff.c: 1091: return FR_RW_ERROR;
 15972  00368A  0E08               	movlw	8
 15973  00368C  0012               	return	
 15974  00368E                     l10897:
 15975                           
 15976                           ; BSR set to: 0
 15977                           ;tff.c: 1092: dir = fp->dir_ptr;
 15978  00368E  EE20 F01A          	lfsr	2,26
 15979  003692  518A               	movf	f_sync@fp& (0+255),w,b
 15980  003694  26D9               	addwf	fsr2l,f,c
 15981  003696  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 15982  003698  22DA               	addwfc	fsr2h,f,c
 15983  00369A  CFDE F091          	movff	postinc2,f_sync@dir
 15984  00369E  CFDD F092          	movff	postdec2,f_sync@dir+1
 15985                           
 15986                           ;tff.c: 1093: dir[11] |= 0x20;
 15987  0036A2  EE20 F00B          	lfsr	2,11
 15988  0036A6  5191               	movf	f_sync@dir& (0+255),w,b
 15989  0036A8  26D9               	addwf	fsr2l,f,c
 15990  0036AA  5192               	movf	(f_sync@dir+1)& (0+255),w,b
 15991  0036AC  22DA               	addwfc	fsr2h,f,c
 15992  0036AE  0E00               	movlw	0
 15993  0036B0  8ADB               	bsf	plusw2,5,c
 15994                           
 15995                           ; BSR set to: 0
 15996                           ;tff.c: 1094: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(fp->fsize);
 15997  0036B2  EE20 F00A          	lfsr	2,10
 15998  0036B6  518A               	movf	f_sync@fp& (0+255),w,b
 15999  0036B8  26D9               	addwf	fsr2l,f,c
 16000  0036BA  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 16001  0036BC  22DA               	addwfc	fsr2h,f,c
 16002  0036BE  EE10 F01C          	lfsr	1,28
 16003  0036C2  5191               	movf	f_sync@dir& (0+255),w,b
 16004  0036C4  26E1               	addwf	fsr1l,f,c
 16005  0036C6  5192               	movf	(f_sync@dir+1)& (0+255),w,b
 16006  0036C8  22E2               	addwfc	fsr1h,f,c
 16007  0036CA  CFDE FFE6          	movff	postinc2,postinc1
 16008  0036CE  CFDE FFE6          	movff	postinc2,postinc1
 16009  0036D2  CFDE FFE6          	movff	postinc2,postinc1
 16010  0036D6  CFDE FFE6          	movff	postinc2,postinc1
 16011                           
 16012                           ; BSR set to: 0
 16013                           ;tff.c: 1095: *(WORD*)(BYTE*)(&dir[26])=(WORD)(fp->org_clust);
 16014  0036DA  EE20 F00E          	lfsr	2,14
 16015  0036DE  518A               	movf	f_sync@fp& (0+255),w,b
 16016  0036E0  26D9               	addwf	fsr2l,f,c
 16017  0036E2  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 16018  0036E4  22DA               	addwfc	fsr2h,f,c
 16019  0036E6  EE10 F01A          	lfsr	1,26
 16020  0036EA  5191               	movf	f_sync@dir& (0+255),w,b
 16021  0036EC  26E1               	addwf	fsr1l,f,c
 16022  0036EE  5192               	movf	(f_sync@dir+1)& (0+255),w,b
 16023  0036F0  22E2               	addwfc	fsr1h,f,c
 16024  0036F2  CFDE FFE6          	movff	postinc2,postinc1
 16025  0036F6  CFDD FFE5          	movff	postdec2,postdec1
 16026                           
 16027                           ; BSR set to: 0
 16028                           ;tff.c: 1099: tim = get_fattime();
 16029  0036FA  ECA2  F018         	call	_get_fattime	;wreg free
 16030  0036FE  C01D  F08C         	movff	?_get_fattime,f_sync@tim
 16031  003702  C01E  F08D         	movff	?_get_fattime+1,f_sync@tim+1
 16032  003706  C01F  F08E         	movff	?_get_fattime+2,f_sync@tim+2
 16033  00370A  C020  F08F         	movff	?_get_fattime+3,f_sync@tim+3
 16034                           
 16035                           ; BSR set to: 0
 16036                           ;tff.c: 1100: *(DWORD*)(BYTE*)(&dir[22])=(DWORD)(tim);
 16037  00370E  EE20 F016          	lfsr	2,22
 16038  003712  5191               	movf	f_sync@dir& (0+255),w,b
 16039  003714  26D9               	addwf	fsr2l,f,c
 16040  003716  5192               	movf	(f_sync@dir+1)& (0+255),w,b
 16041  003718  22DA               	addwfc	fsr2h,f,c
 16042  00371A  C08C  FFDE         	movff	f_sync@tim,postinc2
 16043  00371E  C08D  FFDE         	movff	f_sync@tim+1,postinc2
 16044  003722  C08E  FFDE         	movff	f_sync@tim+2,postinc2
 16045  003726  C08F  FFDE         	movff	f_sync@tim+3,postinc2
 16046                           
 16047                           ; BSR set to: 0
 16048                           ;tff.c: 1101: fp->flag &= (BYTE)~0x20;
 16049  00372A  EE20 F002          	lfsr	2,2
 16050  00372E  518A               	movf	f_sync@fp& (0+255),w,b
 16051  003730  26D9               	addwf	fsr2l,f,c
 16052  003732  518B               	movf	(f_sync@fp+1)& (0+255),w,b
 16053  003734  22DA               	addwfc	fsr2h,f,c
 16054  003736  0EDF               	movlw	223
 16055  003738  16DF               	andwf	indf2,f,c
 16056                           
 16057                           ; BSR set to: 0
 16058                           ;tff.c: 1102: res = sync();
 16059  00373A  EC1F  F026         	call	_sync	;wreg free
 16060  00373E  0100               	movlb	0	; () banked
 16061  003740  6F90               	movwf	f_sync@res& (0+255),b
 16062  003742                     l10911:
 16063                           
 16064                           ; BSR set to: 0
 16065                           ;tff.c: 1103: };tff.c: 1104: };tff.c: 1105: return res;
 16066  003742  5190               	movf	f_sync@res& (0+255),w,b
 16067                           
 16068                           ; BSR set to: 0
 16069  003744  0012               	return		;funcret
 16070  003746                     __end_of_f_sync:
 16071                           	callstack 0
 16072                           
 16073 ;; *************** function _validate *****************
 16074 ;; Defined at:
 16075 ;;		line 767 in file "bibliotecas/tff.c"
 16076 ;; Parameters:    Size  Location     Type
 16077 ;;  fs              2   30[COMRAM] PTR const struct _FATFS
 16078 ;;		 -> NULL(0), fs(544), 
 16079 ;;  id              2   32[COMRAM] unsigned short 
 16080 ;; Auto vars:     Size  Location     Type
 16081 ;;		None
 16082 ;; Return value:  Size  Location     Type
 16083 ;;                  1    wreg      enum E155
 16084 ;; Registers used:
 16085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16086 ;; Tracked objects:
 16087 ;;		On entry : 3F/0
 16088 ;;		On exit  : 0/0
 16089 ;;		Unchanged: 0/0
 16090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16091 ;;      Params:         4       0       0       0       0       0       0       0       0
 16092 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16093 ;;      Temps:          2       0       0       0       0       0       0       0       0
 16094 ;;      Totals:         6       0       0       0       0       0       0       0       0
 16095 ;;Total ram usage:        6 bytes
 16096 ;; Hardware stack levels used:    1
 16097 ;; Hardware stack levels required when called:    5
 16098 ;; This function calls:
 16099 ;;		_disk_status
 16100 ;; This function is called by:
 16101 ;;		_f_write
 16102 ;;		_f_sync
 16103 ;;		_f_lseek
 16104 ;;		_f_read
 16105 ;; This function uses a non-reentrant model
 16106 ;;
 16107                           
 16108                           	psect	text79
 16109  004D70                     __ptext79:
 16110                           	callstack 0
 16111  004D70                     _validate:
 16112                           	callstack 17
 16113                           
 16114                           ; BSR set to: 0
 16115                           ;tff.c: 772: if (!fs || !fs->fs_type || fs->id != id)
 16116                           
 16117                           ; BSR set to: 0
 16118                           ;incstack = 0
 16119  004D70  501F               	movf	validate@fs^0,w,c
 16120  004D72  1020               	iorwf	(validate@fs+1)^0,w,c
 16121  004D74  B4D8               	btfsc	status,2,c
 16122  004D76  D014               	goto	u11160
 16123                           
 16124                           ; BSR set to: 0
 16125  004D78  EE20 F01C          	lfsr	2,28
 16126  004D7C  501F               	movf	validate@fs^0,w,c
 16127  004D7E  26D9               	addwf	fsr2l,f,c
 16128  004D80  5020               	movf	(validate@fs+1)^0,w,c
 16129  004D82  22DA               	addwfc	fsr2h,f,c
 16130  004D84  50DF               	movf	indf2,w,c
 16131  004D86  B4D8               	btfsc	status,2,c
 16132  004D88  D00B               	goto	u11160
 16133                           
 16134                           ; BSR set to: 0
 16135  004D8A  C01F  FFD9         	movff	validate@fs,fsr2l
 16136  004D8E  C020  FFDA         	movff	validate@fs+1,fsr2h
 16137  004D92  5021               	movf	validate@id^0,w,c
 16138  004D94  18DE               	xorwf	postinc2,w,c
 16139  004D96  E104               	bnz	u11160
 16140  004D98  5022               	movf	(validate@id+1)^0,w,c
 16141  004D9A  18DE               	xorwf	postinc2,w,c
 16142  004D9C  B4D8               	btfsc	status,2,c
 16143  004D9E  D002               	goto	l9949
 16144  004DA0                     u11160:
 16145                           
 16146                           ; BSR set to: 0
 16147                           ;tff.c: 773: return FR_INVALID_OBJECT;
 16148  004DA0  0E0C               	movlw	12
 16149  004DA2  0012               	return	
 16150  004DA4                     l9949:
 16151                           
 16152                           ; BSR set to: 0
 16153                           ;tff.c: 774: if (disk_status(0) & 0x01)
 16154  004DA4  0E00               	movlw	0
 16155  004DA6  EC59  F028         	call	_disk_status
 16156  004DAA  6E23               	movwf	??_validate^0,c
 16157  004DAC  A023               	btfss	??_validate^0,0,c
 16158  004DAE  D002               	goto	l9955
 16159                           
 16160                           ;tff.c: 775: return FR_NOT_READY;
 16161  004DB0  0E01               	movlw	1
 16162  004DB2  0012               	return	
 16163  004DB4                     l9955:
 16164                           
 16165                           ;tff.c: 777: return FR_OK;
 16166  004DB4  0E00               	movlw	0
 16167  004DB6  0012               	return		;funcret
 16168  004DB8                     __end_of_validate:
 16169                           	callstack 0
 16170                           
 16171 ;; *************** function _disk_status *****************
 16172 ;; Defined at:
 16173 ;;		line 27 in file "bibliotecas/diskio.c"
 16174 ;; Parameters:    Size  Location     Type
 16175 ;;  pdrv            1    wreg     unsigned char 
 16176 ;; Auto vars:     Size  Location     Type
 16177 ;;  pdrv            1   28[COMRAM] unsigned char 
 16178 ;;  result          2    0        int 
 16179 ;;  stat            1   29[COMRAM] unsigned char 
 16180 ;; Return value:  Size  Location     Type
 16181 ;;                  1    wreg      unsigned char 
 16182 ;; Registers used:
 16183 ;;		wreg, status,2, status,0, cstack
 16184 ;; Tracked objects:
 16185 ;;		On entry : 3F/0
 16186 ;;		On exit  : 0/0
 16187 ;;		Unchanged: 0/0
 16188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16189 ;;      Params:         0       0       0       0       0       0       0       0       0
 16190 ;;      Locals:         4       0       0       0       0       0       0       0       0
 16191 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16192 ;;      Totals:         4       0       0       0       0       0       0       0       0
 16193 ;;Total ram usage:        4 bytes
 16194 ;; Hardware stack levels used:    1
 16195 ;; Hardware stack levels required when called:    4
 16196 ;; This function calls:
 16197 ;;		_sdc_disk_status
 16198 ;; This function is called by:
 16199 ;;		_auto_mount
 16200 ;;		_validate
 16201 ;; This function uses a non-reentrant model
 16202 ;;
 16203                           
 16204                           	psect	text80
 16205  0050B2                     __ptext80:
 16206                           	callstack 0
 16207  0050B2                     _disk_status:
 16208                           	callstack 17
 16209                           
 16210                           ;incstack = 0
 16211                           ;disk_status@pdrv stored from wreg
 16212  0050B2  6E1D               	movwf	disk_status@pdrv^0,c
 16213                           
 16214                           ;diskio.c: 31: DSTATUS stat;;diskio.c: 32: int result;;diskio.c: 34: switch (pdrv) {
 16215  0050B4  D00A               	goto	l9659
 16216  0050B6                     l9641:
 16217                           
 16218                           ;diskio.c: 36: stat = sdc_disk_status(pdrv);
 16219  0050B6  501D               	movf	disk_status@pdrv^0,w,c
 16220  0050B8  EC00  F02A         	call	_sdc_disk_status
 16221  0050BC  6E1E               	movwf	disk_status@stat^0,c
 16222  0050BE                     l9643:
 16223                           
 16224                           ;diskio.c: 39: return stat;
 16225  0050BE  501E               	movf	disk_status@stat^0,w,c
 16226  0050C0  0012               	return	
 16227  0050C2                     l9647:
 16228  0050C2  501D               	movf	disk_status@pdrv^0,w,c
 16229  0050C4  EC00  F02A         	call	_sdc_disk_status
 16230  0050C8  D7FA               	goto	l9643
 16231  0050CA                     l9659:
 16232  0050CA  501D               	movf	disk_status@pdrv^0,w,c
 16233                           
 16234                           ; Switch size 1, requested type "simple"
 16235                           ; Number of cases is 3, Range of values is 0 to 2
 16236                           ; switch strategies available:
 16237                           ; Name         Instructions Cycles
 16238                           ; simple_byte           10     6 (average)
 16239                           ;	Chosen strategy is simple_byte
 16240  0050CC  0A00               	xorlw	0	; case 0
 16241  0050CE  B4D8               	btfsc	status,2,c
 16242  0050D0  D7F2               	goto	l9641
 16243  0050D2  0A01               	xorlw	1	; case 1
 16244  0050D4  B4D8               	btfsc	status,2,c
 16245  0050D6  D7F5               	goto	l9647
 16246  0050D8  0A03               	xorlw	3	; case 2
 16247  0050DA  B4D8               	btfsc	status,2,c
 16248  0050DC  D7F0               	goto	l9643
 16249                           
 16250                           ;diskio.c: 50: return 0x01;
 16251  0050DE  0E01               	movlw	1
 16252  0050E0  0012               	return		;funcret
 16253  0050E2                     __end_of_disk_status:
 16254                           	callstack 0
 16255                           
 16256 ;; *************** function _sdc_disk_status *****************
 16257 ;; Defined at:
 16258 ;;		line 588 in file "bibliotecas/diskio.c"
 16259 ;; Parameters:    Size  Location     Type
 16260 ;;  pdrv            1    wreg     unsigned char 
 16261 ;; Auto vars:     Size  Location     Type
 16262 ;;  pdrv            1   25[COMRAM] unsigned char 
 16263 ;;  stat            1    0        unsigned char 
 16264 ;;  cont            1    0        unsigned char 
 16265 ;;  buff            1    0        unsigned char 
 16266 ;; Return value:  Size  Location     Type
 16267 ;;                  1    wreg      unsigned char 
 16268 ;; Registers used:
 16269 ;;		wreg, status,2
 16270 ;; Tracked objects:
 16271 ;;		On entry : 0/0
 16272 ;;		On exit  : 0/0
 16273 ;;		Unchanged: 0/0
 16274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16275 ;;      Params:         0       0       0       0       0       0       0       0       0
 16276 ;;      Locals:         2       0       0       0       0       0       0       0       0
 16277 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16278 ;;      Totals:         2       0       0       0       0       0       0       0       0
 16279 ;;Total ram usage:        2 bytes
 16280 ;; Hardware stack levels used:    1
 16281 ;; Hardware stack levels required when called:    3
 16282 ;; This function calls:
 16283 ;;		Nothing
 16284 ;; This function is called by:
 16285 ;;		_disk_status
 16286 ;; This function uses a non-reentrant model
 16287 ;;
 16288                           
 16289                           	psect	text81
 16290  005400                     __ptext81:
 16291                           	callstack 0
 16292  005400                     _sdc_disk_status:
 16293                           	callstack 17
 16294                           
 16295                           ;incstack = 0
 16296                           ;sdc_disk_status@pdrv stored from wreg
 16297  005400  6E1A               	movwf	sdc_disk_status@pdrv^0,c
 16298                           
 16299                           ;diskio.c: 591: unsigned char buff, cont;;diskio.c: 593: if (pdrv != 0) return 0x01;
 16300  005402  501A               	movf	sdc_disk_status@pdrv^0,w,c
 16301  005404  B4D8               	btfsc	status,2,c
 16302  005406  D002               	goto	l9517
 16303  005408  0E01               	movlw	1
 16304  00540A  0012               	return	
 16305  00540C                     l9517:
 16306                           
 16307                           ;diskio.c: 595: return FR_OK;
 16308  00540C  0E00               	movlw	0
 16309  00540E  0012               	return		;funcret
 16310  005410                     __end_of_sdc_disk_status:
 16311                           	callstack 0
 16312                           
 16313 ;; *************** function _sync *****************
 16314 ;; Defined at:
 16315 ;;		line 119 in file "bibliotecas/tff.c"
 16316 ;; Parameters:    Size  Location     Type
 16317 ;;		None
 16318 ;; Auto vars:     Size  Location     Type
 16319 ;;  fs              2   40[BANK0 ] PTR struct _FATFS
 16320 ;;		 -> NULL(0), fs(544), 
 16321 ;; Return value:  Size  Location     Type
 16322 ;;                  1    wreg      enum E155
 16323 ;; Registers used:
 16324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16325 ;; Tracked objects:
 16326 ;;		On entry : 3F/0
 16327 ;;		On exit  : 0/0
 16328 ;;		Unchanged: 0/0
 16329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16330 ;;      Params:         0       0       0       0       0       0       0       0       0
 16331 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16332 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16333 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16334 ;;Total ram usage:        2 bytes
 16335 ;; Hardware stack levels used:    1
 16336 ;; Hardware stack levels required when called:    9
 16337 ;; This function calls:
 16338 ;;		_disk_ioctl
 16339 ;;		_move_window
 16340 ;; This function is called by:
 16341 ;;		_f_sync
 16342 ;; This function uses a non-reentrant model
 16343 ;;
 16344                           
 16345                           	psect	text82
 16346  004C3E                     __ptext82:
 16347                           	callstack 0
 16348  004C3E                     _sync:
 16349                           	callstack 15
 16350                           
 16351                           ; BSR set to: 0
 16352                           ;tff.c: 121: FATFS *fs = FatFs;
 16353                           
 16354                           ;incstack = 0
 16355  004C3E  C038  F088         	movff	_FatFs,sync@fs
 16356  004C42  C039  F089         	movff	_FatFs+1,sync@fs+1
 16357                           
 16358                           ; BSR set to: 0
 16359                           ;tff.c: 124: fs->winflag = 1;
 16360  004C46  EE20 F01F          	lfsr	2,31
 16361  004C4A  5188               	movf	sync@fs& (0+255),w,b
 16362  004C4C  26D9               	addwf	fsr2l,f,c
 16363  004C4E  5189               	movf	(sync@fs+1)& (0+255),w,b
 16364  004C50  22DA               	addwfc	fsr2h,f,c
 16365  004C52  0E01               	movlw	1
 16366  004C54  6EDF               	movwf	indf2,c
 16367                           
 16368                           ; BSR set to: 0
 16369                           ;tff.c: 125: if (!move_window(0)) return FR_RW_ERROR;
 16370  004C56  0E00               	movlw	0
 16371  004C58  6F73               	movwf	move_window@sector& (0+255),b
 16372  004C5A  0E00               	movlw	0
 16373  004C5C  6F74               	movwf	(move_window@sector+1)& (0+255),b
 16374  004C5E  0E00               	movlw	0
 16375  004C60  6F75               	movwf	(move_window@sector+2)& (0+255),b
 16376  004C62  0E00               	movlw	0
 16377  004C64  6F76               	movwf	(move_window@sector+3)& (0+255),b
 16378  004C66  ECA8  F015         	call	_move_window	;wreg free
 16379  004C6A  0900               	iorlw	0
 16380  004C6C  A4D8               	btfss	status,2,c
 16381  004C6E  D002               	goto	l10343
 16382  004C70                     u11700:
 16383  004C70  0E08               	movlw	8
 16384  004C72  0012               	return	
 16385  004C74                     l10343:
 16386                           
 16387                           ; BSR set to: 0
 16388                           ;tff.c: 141: if (disk_ioctl(0, 0, (0)) != RES_OK)
 16389  004C74  0E00               	movlw	0
 16390  004C76  6E19               	movwf	disk_ioctl@cmd^0,c
 16391  004C78  0E00               	movlw	0
 16392  004C7A  6E1A               	movwf	disk_ioctl@buff^0,c
 16393  004C7C  0E00               	movlw	0
 16394  004C7E  6E1B               	movwf	(disk_ioctl@buff+1)^0,c
 16395  004C80  0E00               	movlw	0
 16396  004C82  EC6F  F029         	call	_disk_ioctl
 16397  004C86  0900               	iorlw	0
 16398  004C88  A4D8               	btfss	status,2,c
 16399  004C8A  D7F2               	goto	u11700
 16400                           
 16401                           ;tff.c: 143: return FR_OK;
 16402  004C8C  0E00               	movlw	0
 16403  004C8E  0012               	return		;funcret
 16404  004C90                     __end_of_sync:
 16405                           	callstack 0
 16406                           
 16407 ;; *************** function _move_window *****************
 16408 ;; Defined at:
 16409 ;;		line 77 in file "bibliotecas/tff.c"
 16410 ;; Parameters:    Size  Location     Type
 16411 ;;  sector          4   19[BANK0 ] unsigned long 
 16412 ;; Auto vars:     Size  Location     Type
 16413 ;;  n               1   33[BANK0 ] unsigned char 
 16414 ;;  wsect           4   34[BANK0 ] unsigned long 
 16415 ;;  fs              2   38[BANK0 ] PTR struct _FATFS
 16416 ;;		 -> NULL(0), fs(544), 
 16417 ;; Return value:  Size  Location     Type
 16418 ;;                  1    wreg      enum E105
 16419 ;; Registers used:
 16420 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16421 ;; Tracked objects:
 16422 ;;		On entry : 3F/0
 16423 ;;		On exit  : 3F/0
 16424 ;;		Unchanged: 0/0
 16425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16426 ;;      Params:         0       4       0       0       0       0       0       0       0
 16427 ;;      Locals:         0       7       0       0       0       0       0       0       0
 16428 ;;      Temps:          0      10       0       0       0       0       0       0       0
 16429 ;;      Totals:         0      21       0       0       0       0       0       0       0
 16430 ;;Total ram usage:       21 bytes
 16431 ;; Hardware stack levels used:    1
 16432 ;; Hardware stack levels required when called:    8
 16433 ;; This function calls:
 16434 ;;		_disk_read
 16435 ;;		_disk_write
 16436 ;; This function is called by:
 16437 ;;		_sync
 16438 ;;		_get_cluster
 16439 ;;		_put_cluster
 16440 ;;		_trace_path
 16441 ;;		_reserve_direntry
 16442 ;;		_f_open
 16443 ;;		_f_write
 16444 ;;		_f_sync
 16445 ;;		_f_read
 16446 ;; This function uses a non-reentrant model
 16447 ;;
 16448                           
 16449                           	psect	text83
 16450  002B50                     __ptext83:
 16451                           	callstack 0
 16452  002B50                     _move_window:
 16453                           	callstack 14
 16454                           
 16455                           ; BSR set to: 0
 16456                           ;tff.c: 81: DWORD wsect;;tff.c: 82: FATFS *fs = FatFs;
 16457                           
 16458                           ;incstack = 0
 16459  002B50  C038  F086         	movff	_FatFs,move_window@fs
 16460  002B54  C039  F087         	movff	_FatFs+1,move_window@fs+1
 16461                           
 16462                           ; BSR set to: 0
 16463                           ;tff.c: 85: wsect = fs->winsect;
 16464  002B58  EE20 F004          	lfsr	2,4
 16465  002B5C  5186               	movf	move_window@fs& (0+255),w,b
 16466  002B5E  26D9               	addwf	fsr2l,f,c
 16467  002B60  5187               	movf	(move_window@fs+1)& (0+255),w,b
 16468  002B62  22DA               	addwfc	fsr2h,f,c
 16469  002B64  CFDE F082          	movff	postinc2,move_window@wsect
 16470  002B68  CFDE F083          	movff	postinc2,move_window@wsect+1
 16471  002B6C  CFDE F084          	movff	postinc2,move_window@wsect+2
 16472  002B70  CFDE F085          	movff	postinc2,move_window@wsect+3
 16473                           
 16474                           ; BSR set to: 0
 16475                           ;tff.c: 86: if (wsect != sector) {
 16476  002B74  5173               	movf	move_window@sector& (0+255),w,b
 16477  002B76  1982               	xorwf	move_window@wsect& (0+255),w,b
 16478  002B78  E10A               	bnz	u10650
 16479  002B7A  5174               	movf	(move_window@sector+1)& (0+255),w,b
 16480  002B7C  1983               	xorwf	(move_window@wsect+1)& (0+255),w,b
 16481  002B7E  E107               	bnz	u10650
 16482  002B80  5175               	movf	(move_window@sector+2)& (0+255),w,b
 16483  002B82  1984               	xorwf	(move_window@wsect+2)& (0+255),w,b
 16484  002B84  E104               	bnz	u10650
 16485  002B86  5176               	movf	(move_window@sector+3)& (0+255),w,b
 16486  002B88  1985               	xorwf	(move_window@wsect+3)& (0+255),w,b
 16487  002B8A  B4D8               	btfsc	status,2,c
 16488  002B8C  D0B4               	goto	l9629
 16489  002B8E                     u10650:
 16490                           
 16491                           ; BSR set to: 0
 16492                           ;tff.c: 88: BYTE n;;tff.c: 89: if (fs->winflag) {
 16493  002B8E  EE20 F01F          	lfsr	2,31
 16494  002B92  5186               	movf	move_window@fs& (0+255),w,b
 16495  002B94  26D9               	addwf	fsr2l,f,c
 16496  002B96  5187               	movf	(move_window@fs+1)& (0+255),w,b
 16497  002B98  22DA               	addwfc	fsr2h,f,c
 16498  002B9A  50DF               	movf	indf2,w,c
 16499  002B9C  B4D8               	btfsc	status,2,c
 16500  002B9E  D081               	goto	l9619
 16501                           
 16502                           ; BSR set to: 0
 16503                           ;tff.c: 90: if (disk_write(0, fs->win, wsect, 1) != RES_OK)
 16504  002BA0  0E20               	movlw	32
 16505  002BA2  2586               	addwf	move_window@fs& (0+255),w,b
 16506  002BA4  6F68               	movwf	disk_write@buff& (0+255),b
 16507  002BA6  0E00               	movlw	0
 16508  002BA8  2187               	addwfc	(move_window@fs+1)& (0+255),w,b
 16509  002BAA  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 16510  002BAC  C082  F06A         	movff	move_window@wsect,disk_write@sector
 16511  002BB0  C083  F06B         	movff	move_window@wsect+1,disk_write@sector+1
 16512  002BB4  C084  F06C         	movff	move_window@wsect+2,disk_write@sector+2
 16513  002BB8  C085  F06D         	movff	move_window@wsect+3,disk_write@sector+3
 16514  002BBC  0E01               	movlw	1
 16515  002BBE  6F6E               	movwf	disk_write@count& (0+255),b
 16516  002BC0  0E00               	movlw	0
 16517  002BC2  EC48  F026         	call	_disk_write
 16518  002BC6  0900               	iorlw	0
 16519  002BC8  B4D8               	btfsc	status,2,c
 16520  002BCA  D002               	goto	l9603
 16521  002BCC                     u10670:
 16522                           
 16523                           ; BSR set to: 0
 16524                           ;tff.c: 91: return FALSE;
 16525  002BCC  0E00               	movlw	0
 16526  002BCE  0012               	return	
 16527  002BD0                     l9603:
 16528                           
 16529                           ; BSR set to: 0
 16530                           ;tff.c: 92: fs->winflag = 0;
 16531  002BD0  EE20 F01F          	lfsr	2,31
 16532  002BD4  5186               	movf	move_window@fs& (0+255),w,b
 16533  002BD6  26D9               	addwf	fsr2l,f,c
 16534  002BD8  5187               	movf	(move_window@fs+1)& (0+255),w,b
 16535  002BDA  22DA               	addwfc	fsr2h,f,c
 16536  002BDC  0E00               	movlw	0
 16537  002BDE  6EDF               	movwf	indf2,c
 16538                           
 16539                           ;tff.c: 93: if (wsect < (fs->fatbase + fs->sects_fat)) {
 16540  002BE0  EE20 F008          	lfsr	2,8
 16541  002BE4  5186               	movf	move_window@fs& (0+255),w,b
 16542  002BE6  26D9               	addwf	fsr2l,f,c
 16543  002BE8  5187               	movf	(move_window@fs+1)& (0+255),w,b
 16544  002BEA  22DA               	addwfc	fsr2h,f,c
 16545  002BEC  CFDE F077          	movff	postinc2,??_move_window
 16546  002BF0  CFDE F078          	movff	postinc2,??_move_window+1
 16547  002BF4  CFDE F079          	movff	postinc2,??_move_window+2
 16548  002BF8  CFDE F07A          	movff	postinc2,??_move_window+3
 16549  002BFC  EE20 F014          	lfsr	2,20
 16550  002C00  5186               	movf	move_window@fs& (0+255),w,b
 16551  002C02  26D9               	addwf	fsr2l,f,c
 16552  002C04  5187               	movf	(move_window@fs+1)& (0+255),w,b
 16553  002C06  22DA               	addwfc	fsr2h,f,c
 16554  002C08  CFDE F07B          	movff	postinc2,??_move_window+4
 16555  002C0C  CFDD F07C          	movff	postdec2,??_move_window+5
 16556  002C10  517B               	movf	(??_move_window+4)& (0+255),w,b
 16557  002C12  2577               	addwf	??_move_window& (0+255),w,b
 16558  002C14  6F7D               	movwf	(??_move_window+6)& (0+255),b
 16559  002C16  517C               	movf	(??_move_window+5)& (0+255),w,b
 16560  002C18  2178               	addwfc	(??_move_window+1)& (0+255),w,b
 16561  002C1A  6F7E               	movwf	(??_move_window+7)& (0+255),b
 16562  002C1C  0E00               	movlw	0
 16563  002C1E  2179               	addwfc	(??_move_window+2)& (0+255),w,b
 16564  002C20  6F7F               	movwf	(??_move_window+8)& (0+255),b
 16565  002C22  0E00               	movlw	0
 16566  002C24  217A               	addwfc	(??_move_window+3)& (0+255),w,b
 16567  002C26  6F80               	movwf	(??_move_window+9)& (0+255),b
 16568  002C28  517D               	movf	(??_move_window+6)& (0+255),w,b
 16569  002C2A  5D82               	subwf	move_window@wsect& (0+255),w,b
 16570  002C2C  517E               	movf	(??_move_window+7)& (0+255),w,b
 16571  002C2E  5983               	subwfb	(move_window@wsect+1)& (0+255),w,b
 16572  002C30  517F               	movf	(??_move_window+8)& (0+255),w,b
 16573  002C32  5984               	subwfb	(move_window@wsect+2)& (0+255),w,b
 16574  002C34  5180               	movf	(??_move_window+9)& (0+255),w,b
 16575  002C36  5985               	subwfb	(move_window@wsect+3)& (0+255),w,b
 16576  002C38  B0D8               	btfsc	status,0,c
 16577  002C3A  D033               	goto	l9619
 16578                           
 16579                           ; BSR set to: 0
 16580                           ;tff.c: 94: for (n = fs->n_fats; n >= 2; n--) {
 16581  002C3C  EE20 F01E          	lfsr	2,30
 16582  002C40  5186               	movf	move_window@fs& (0+255),w,b
 16583  002C42  26D9               	addwf	fsr2l,f,c
 16584  002C44  5187               	movf	(move_window@fs+1)& (0+255),w,b
 16585  002C46  22DA               	addwfc	fsr2h,f,c
 16586  002C48  50DF               	movf	indf2,w,c
 16587  002C4A  6F81               	movwf	move_window@n& (0+255),b
 16588  002C4C                     l9607:
 16589                           
 16590                           ; BSR set to: 0
 16591  002C4C  0E02               	movlw	2
 16592  002C4E  6181               	cpfslt	move_window@n& (0+255),b
 16593  002C50  D001               	goto	l9611
 16594  002C52  D027               	goto	l9619
 16595  002C54                     l9611:
 16596                           
 16597                           ; BSR set to: 0
 16598                           ;tff.c: 95: wsect += fs->sects_fat;
 16599  002C54  EE20 F014          	lfsr	2,20
 16600  002C58  5186               	movf	move_window@fs& (0+255),w,b
 16601  002C5A  26D9               	addwf	fsr2l,f,c
 16602  002C5C  5187               	movf	(move_window@fs+1)& (0+255),w,b
 16603  002C5E  22DA               	addwfc	fsr2h,f,c
 16604  002C60  CFDE F077          	movff	postinc2,??_move_window
 16605  002C64  CFDD F078          	movff	postdec2,??_move_window+1
 16606  002C68  5177               	movf	??_move_window& (0+255),w,b
 16607  002C6A  2782               	addwf	move_window@wsect& (0+255),f,b
 16608  002C6C  5178               	movf	(??_move_window+1)& (0+255),w,b
 16609  002C6E  2383               	addwfc	(move_window@wsect+1)& (0+255),f,b
 16610  002C70  0E00               	movlw	0
 16611  002C72  2384               	addwfc	(move_window@wsect+2)& (0+255),f,b
 16612  002C74  0E00               	movlw	0
 16613  002C76  2385               	addwfc	(move_window@wsect+3)& (0+255),f,b
 16614                           
 16615                           ; BSR set to: 0
 16616                           ;tff.c: 96: disk_write(0, fs->win, wsect, 1);
 16617  002C78  0E20               	movlw	32
 16618  002C7A  2586               	addwf	move_window@fs& (0+255),w,b
 16619  002C7C  6F68               	movwf	disk_write@buff& (0+255),b
 16620  002C7E  0E00               	movlw	0
 16621  002C80  2187               	addwfc	(move_window@fs+1)& (0+255),w,b
 16622  002C82  6F69               	movwf	(disk_write@buff+1)& (0+255),b
 16623  002C84  C082  F06A         	movff	move_window@wsect,disk_write@sector
 16624  002C88  C083  F06B         	movff	move_window@wsect+1,disk_write@sector+1
 16625  002C8C  C084  F06C         	movff	move_window@wsect+2,disk_write@sector+2
 16626  002C90  C085  F06D         	movff	move_window@wsect+3,disk_write@sector+3
 16627  002C94  0E01               	movlw	1
 16628  002C96  6F6E               	movwf	disk_write@count& (0+255),b
 16629  002C98  0E00               	movlw	0
 16630  002C9A  EC48  F026         	call	_disk_write
 16631                           
 16632                           ; BSR set to: 0
 16633  002C9E  0781               	decf	move_window@n& (0+255),f,b
 16634  002CA0  D7D5               	goto	l9607
 16635  002CA2                     l9619:
 16636                           
 16637                           ; BSR set to: 0
 16638                           ;tff.c: 97: };tff.c: 98: };tff.c: 99: };tff.c: 101: if (sector) {
 16639  002CA2  5173               	movf	move_window@sector& (0+255),w,b
 16640  002CA4  1174               	iorwf	(move_window@sector+1)& (0+255),w,b
 16641  002CA6  1175               	iorwf	(move_window@sector+2)& (0+255),w,b
 16642  002CA8  1176               	iorwf	(move_window@sector+3)& (0+255),w,b
 16643  002CAA  B4D8               	btfsc	status,2,c
 16644  002CAC  D024               	goto	l9629
 16645                           
 16646                           ; BSR set to: 0
 16647                           ;tff.c: 102: if (disk_read(0, fs->win, sector, 1) != RES_OK)
 16648  002CAE  0E20               	movlw	32
 16649  002CB0  2586               	addwf	move_window@fs& (0+255),w,b
 16650  002CB2  6F68               	movwf	disk_read@buff& (0+255),b
 16651  002CB4  0E00               	movlw	0
 16652  002CB6  2187               	addwfc	(move_window@fs+1)& (0+255),w,b
 16653  002CB8  6F69               	movwf	(disk_read@buff+1)& (0+255),b
 16654  002CBA  C073  F06A         	movff	move_window@sector,disk_read@sector
 16655  002CBE  C074  F06B         	movff	move_window@sector+1,disk_read@sector+1
 16656  002CC2  C075  F06C         	movff	move_window@sector+2,disk_read@sector+2
 16657  002CC6  C076  F06D         	movff	move_window@sector+3,disk_read@sector+3
 16658  002CCA  0E01               	movlw	1
 16659  002CCC  6F6E               	movwf	disk_read@count& (0+255),b
 16660  002CCE  0E00               	movlw	0
 16661  002CD0  EC05  F024         	call	_disk_read
 16662  002CD4  0900               	iorlw	0
 16663  002CD6  A4D8               	btfss	status,2,c
 16664  002CD8  D779               	goto	u10670
 16665                           
 16666                           ; BSR set to: 0
 16667                           ;tff.c: 104: fs->winsect = sector;
 16668  002CDA  EE20 F004          	lfsr	2,4
 16669  002CDE  5186               	movf	move_window@fs& (0+255),w,b
 16670  002CE0  26D9               	addwf	fsr2l,f,c
 16671  002CE2  5187               	movf	(move_window@fs+1)& (0+255),w,b
 16672  002CE4  22DA               	addwfc	fsr2h,f,c
 16673  002CE6  C073  FFDE         	movff	move_window@sector,postinc2
 16674  002CEA  C074  FFDE         	movff	move_window@sector+1,postinc2
 16675  002CEE  C075  FFDE         	movff	move_window@sector+2,postinc2
 16676  002CF2  C076  FFDE         	movff	move_window@sector+3,postinc2
 16677  002CF6                     l9629:
 16678                           
 16679                           ; BSR set to: 0
 16680                           ;tff.c: 105: };tff.c: 106: };tff.c: 107: return TRUE;
 16681  002CF6  0E01               	movlw	1
 16682                           
 16683                           ; BSR set to: 0
 16684  002CF8  0012               	return		;funcret
 16685  002CFA                     __end_of_move_window:
 16686                           	callstack 0
 16687                           
 16688 ;; *************** function _disk_write *****************
 16689 ;; Defined at:
 16690 ;;		line 150 in file "bibliotecas/diskio.c"
 16691 ;; Parameters:    Size  Location     Type
 16692 ;;  pdrv            1    wreg     unsigned char 
 16693 ;;  buff            2    8[BANK0 ] PTR const unsigned char 
 16694 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 16695 ;;  sector          4   10[BANK0 ] unsigned long 
 16696 ;;  count           1   14[BANK0 ] unsigned char 
 16697 ;; Auto vars:     Size  Location     Type
 16698 ;;  pdrv            1   15[BANK0 ] unsigned char 
 16699 ;;  result          2   16[BANK0 ] int 
 16700 ;;  res             1   18[BANK0 ] enum E25
 16701 ;; Return value:  Size  Location     Type
 16702 ;;                  1    wreg      enum E25
 16703 ;; Registers used:
 16704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16705 ;; Tracked objects:
 16706 ;;		On entry : 3F/0
 16707 ;;		On exit  : 3F/0
 16708 ;;		Unchanged: 0/0
 16709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16710 ;;      Params:         0       7       0       0       0       0       0       0       0
 16711 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16712 ;;      Temps:          1       0       0       0       0       0       0       0       0
 16713 ;;      Totals:         1      11       0       0       0       0       0       0       0
 16714 ;;Total ram usage:       12 bytes
 16715 ;; Hardware stack levels used:    1
 16716 ;; Hardware stack levels required when called:    7
 16717 ;; This function calls:
 16718 ;;		_sdc_disk_write
 16719 ;; This function is called by:
 16720 ;;		_move_window
 16721 ;;		_reserve_direntry
 16722 ;;		_f_write
 16723 ;; This function uses a non-reentrant model
 16724 ;;
 16725                           
 16726                           	psect	text84
 16727  004C90                     __ptext84:
 16728                           	callstack 0
 16729  004C90                     _disk_write:
 16730                           	callstack 14
 16731                           
 16732                           ; BSR set to: 0
 16733                           ;incstack = 0
 16734                           ;disk_write@pdrv stored from wreg
 16735  004C90  6F6F               	movwf	disk_write@pdrv& (0+255),b
 16736                           
 16737                           ;diskio.c: 157: DRESULT res;;diskio.c: 158: int result;;diskio.c: 160: switch (pdrv) {
 16738  004C92  D018               	goto	l9483
 16739  004C94                     l9461:
 16740                           
 16741                           ; BSR set to: 0
 16742                           ;diskio.c: 163: result = sdc_disk_write(buff, sector, count);
 16743  004C94  C068  F025         	movff	disk_write@buff,sdc_disk_write@p_buff
 16744  004C98  C069  F026         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 16745  004C9C  C06A  F027         	movff	disk_write@sector,sdc_disk_write@sector
 16746  004CA0  C06B  F028         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 16747  004CA4  C06C  F029         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 16748  004CA8  C06D  F02A         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 16749  004CAC  C06E  F02B         	movff	disk_write@count,sdc_disk_write@count
 16750  004CB0  ECCD  F014         	call	_sdc_disk_write	;wreg free
 16751  004CB4  6E30               	movwf	??_disk_write^0,c
 16752  004CB6  5030               	movf	??_disk_write^0,w,c
 16753  004CB8  6F70               	movwf	disk_write@result& (0+255),b
 16754  004CBA  6B71               	clrf	(disk_write@result+1)& (0+255),b
 16755                           
 16756                           ; BSR set to: 0
 16757                           ;diskio.c: 165: res = result;
 16758  004CBC  C070  F072         	movff	disk_write@result,disk_write@res
 16759  004CC0                     l9465:
 16760                           
 16761                           ; BSR set to: 0
 16762                           ;diskio.c: 168: return res;
 16763  004CC0  5172               	movf	disk_write@res& (0+255),w,b
 16764  004CC2  0012               	return	
 16765  004CC4                     l9483:
 16766  004CC4  0100               	movlb	0	; () banked
 16767  004CC6  516F               	movf	disk_write@pdrv& (0+255),w,b
 16768                           
 16769                           ; Switch size 1, requested type "simple"
 16770                           ; Number of cases is 3, Range of values is 0 to 2
 16771                           ; switch strategies available:
 16772                           ; Name         Instructions Cycles
 16773                           ; simple_byte           10     6 (average)
 16774                           ;	Chosen strategy is simple_byte
 16775  004CC8  0A00               	xorlw	0	; case 0
 16776  004CCA  B4D8               	btfsc	status,2,c
 16777  004CCC  D7E3               	goto	l9461
 16778  004CCE  0A01               	xorlw	1	; case 1
 16779  004CD0  B4D8               	btfsc	status,2,c
 16780  004CD2  D7E0               	goto	l9461
 16781  004CD4  0A03               	xorlw	3	; case 2
 16782  004CD6  B4D8               	btfsc	status,2,c
 16783  004CD8  D7F3               	goto	l9465
 16784                           
 16785                           ; BSR set to: 0
 16786                           ;diskio.c: 189: return RES_PARERR;
 16787  004CDA  0E04               	movlw	4
 16788                           
 16789                           ; BSR set to: 0
 16790  004CDC  0012               	return		;funcret
 16791  004CDE                     __end_of_disk_write:
 16792                           	callstack 0
 16793                           
 16794 ;; *************** function _sdc_disk_write *****************
 16795 ;; Defined at:
 16796 ;;		line 509 in file "bibliotecas/diskio.c"
 16797 ;; Parameters:    Size  Location     Type
 16798 ;;  p_buff          2   36[COMRAM] PTR const unsigned char 
 16799 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 16800 ;;  sector          4   38[COMRAM] unsigned long 
 16801 ;;  count           1   42[COMRAM] unsigned char 
 16802 ;; Auto vars:     Size  Location     Type
 16803 ;;  j               2    5[BANK0 ] int 
 16804 ;;  count1          2    2[BANK0 ] int 
 16805 ;;  i               2    0        int 
 16806 ;;  buff            1    7[BANK0 ] unsigned char 
 16807 ;;  res             1    4[BANK0 ] enum E25
 16808 ;; Return value:  Size  Location     Type
 16809 ;;                  1    wreg      enum E25
 16810 ;; Registers used:
 16811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16812 ;; Tracked objects:
 16813 ;;		On entry : 0/0
 16814 ;;		On exit  : 3F/0
 16815 ;;		Unchanged: 0/0
 16816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16817 ;;      Params:         7       0       0       0       0       0       0       0       0
 16818 ;;      Locals:         0       8       0       0       0       0       0       0       0
 16819 ;;      Temps:          4       0       0       0       0       0       0       0       0
 16820 ;;      Totals:        11       8       0       0       0       0       0       0       0
 16821 ;;Total ram usage:       19 bytes
 16822 ;; Hardware stack levels used:    1
 16823 ;; Hardware stack levels required when called:    6
 16824 ;; This function calls:
 16825 ;;		_command
 16826 ;;		_dummy_clocks
 16827 ;;		_escreve_SPI
 16828 ;;		_leitura_SPI
 16829 ;;		_proceed
 16830 ;;		_response
 16831 ;; This function is called by:
 16832 ;;		_disk_write
 16833 ;; This function uses a non-reentrant model
 16834 ;;
 16835                           
 16836                           	psect	text85
 16837  00299A                     __ptext85:
 16838                           	callstack 0
 16839  00299A                     _sdc_disk_write:
 16840                           	callstack 14
 16841                           
 16842                           ; BSR set to: 0
 16843                           ;incstack = 0
 16844  00299A  0E00               	movlw	0
 16845  00299C  0100               	movlb	0	; () banked
 16846  00299E  6F63               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 16847  0029A0  0E00               	movlw	0
 16848  0029A2  6F62               	movwf	sdc_disk_write@count1& (0+255),b
 16849                           
 16850                           ; BSR set to: 0
 16851                           ;diskio.c: 515: if(count>1)
 16852  0029A4  0E01               	movlw	1
 16853  0029A6  642B               	cpfsgt	sdc_disk_write@count^0,c
 16854  0029A8  D069               	goto	l144
 16855                           
 16856                           ; BSR set to: 0
 16857                           ;diskio.c: 516: {;diskio.c: 517: LATCbits.LATC7 = 0;
 16858  0029AA  9E8B               	bcf	139,7,c	;volatile
 16859                           
 16860                           ;diskio.c: 518: LATBbits.LATB5 = 0;
 16861  0029AC  9A8A               	bcf	138,5,c	;volatile
 16862                           
 16863                           ; BSR set to: 0
 16864                           ;diskio.c: 519: dummy_clocks(10);
 16865  0029AE  0E0A               	movlw	10
 16866  0029B0  EC04  F028         	call	_dummy_clocks
 16867                           
 16868                           ;diskio.c: 520: command(0X57, count, 0XFF);
 16869  0029B4  502B               	movf	sdc_disk_write@count^0,w,c
 16870  0029B6  6E1E               	movwf	command@arg^0,c
 16871  0029B8  6A1F               	clrf	(command@arg+1)^0,c
 16872  0029BA  6A20               	clrf	(command@arg+2)^0,c
 16873  0029BC  6A21               	clrf	(command@arg+3)^0,c
 16874  0029BE  0EFF               	movlw	255
 16875  0029C0  6E22               	movwf	command@CRC^0,c
 16876  0029C2  0E57               	movlw	87
 16877  0029C4  EC9E  F025         	call	_command
 16878                           
 16879                           ;diskio.c: 521: proceed();
 16880  0029C8  EC39  F02A         	call	_proceed	;wreg free
 16881  0029CC                     l9349:
 16882                           
 16883                           ;diskio.c: 523: buff = response();
 16884  0029CC  EC33  F02A         	call	_response	;wreg free
 16885  0029D0  0100               	movlb	0	; () banked
 16886  0029D2  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 16887                           
 16888                           ; BSR set to: 0
 16889                           ;diskio.c: 524: }while(buff!=0X00);
 16890  0029D4  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 16891  0029D6  A4D8               	btfss	status,2,c
 16892  0029D8  D7F9               	goto	l9349
 16893                           
 16894                           ; BSR set to: 0
 16895                           ;diskio.c: 526: dummy_clocks(10);
 16896  0029DA  0E0A               	movlw	10
 16897  0029DC  EC04  F028         	call	_dummy_clocks
 16898                           
 16899                           ;diskio.c: 527: command(0X59, sector*512, 0XFF);
 16900  0029E0  C027  F02C         	movff	sdc_disk_write@sector,??_sdc_disk_write
 16901  0029E4  C028  F02D         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 16902  0029E8  C029  F02E         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 16903  0029EC  C02A  F02F         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 16904  0029F0  0E09               	movlw	9
 16905  0029F2                     u10405:
 16906  0029F2  90D8               	bcf	status,0,c
 16907  0029F4  362C               	rlcf	??_sdc_disk_write^0,f,c
 16908  0029F6  362D               	rlcf	(??_sdc_disk_write+1)^0,f,c
 16909  0029F8  362E               	rlcf	(??_sdc_disk_write+2)^0,f,c
 16910  0029FA  362F               	rlcf	(??_sdc_disk_write+3)^0,f,c
 16911  0029FC  2EE8               	decfsz	wreg,f,c
 16912  0029FE  D7F9               	goto	u10405
 16913  002A00  C02C  F01E         	movff	??_sdc_disk_write,command@arg
 16914  002A04  C02D  F01F         	movff	??_sdc_disk_write+1,command@arg+1
 16915  002A08  C02E  F020         	movff	??_sdc_disk_write+2,command@arg+2
 16916  002A0C  C02F  F021         	movff	??_sdc_disk_write+3,command@arg+3
 16917  002A10  0EFF               	movlw	255
 16918  002A12  6E22               	movwf	command@CRC^0,c
 16919  002A14  0E59               	movlw	89
 16920  002A16  EC9E  F025         	call	_command
 16921                           
 16922                           ;diskio.c: 528: proceed();
 16923  002A1A  EC39  F02A         	call	_proceed	;wreg free
 16924  002A1E                     l9357:
 16925                           
 16926                           ;diskio.c: 530: buff = response();
 16927  002A1E  EC33  F02A         	call	_response	;wreg free
 16928  002A22  0100               	movlb	0	; () banked
 16929  002A24  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 16930                           
 16931                           ; BSR set to: 0
 16932                           ;diskio.c: 531: }while(buff!=0X00);
 16933  002A26  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 16934  002A28  A4D8               	btfss	status,2,c
 16935  002A2A  D7F9               	goto	l9357
 16936                           
 16937                           ; BSR set to: 0
 16938                           ;diskio.c: 533: dummy_clocks(1);
 16939  002A2C  0E01               	movlw	1
 16940  002A2E  EC04  F028         	call	_dummy_clocks
 16941                           
 16942                           ;diskio.c: 534: escreve_SPI(0XFC);
 16943  002A32  0EFC               	movlw	252
 16944  002A34  EC08  F02A         	call	_escreve_SPI
 16945                           
 16946                           ;diskio.c: 535: for(j=0;j<512;j++)
 16947  002A38  0E00               	movlw	0
 16948  002A3A  0100               	movlb	0	; () banked
 16949  002A3C  6F66               	movwf	(sdc_disk_write@j+1)& (0+255),b
 16950  002A3E  0E00               	movlw	0
 16951  002A40  6F65               	movwf	sdc_disk_write@j& (0+255),b
 16952  002A42                     l9371:
 16953                           
 16954                           ; BSR set to: 0
 16955                           ;diskio.c: 536: {;diskio.c: 537: escreve_SPI(*p_buff);
 16956  002A42  C025  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 16957  002A46  C026  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 16958  002A4A  50DF               	movf	indf2,w,c
 16959  002A4C  EC08  F02A         	call	_escreve_SPI
 16960                           
 16961                           ;diskio.c: 538: p_buff++;
 16962  002A50  4A25               	infsnz	sdc_disk_write@p_buff^0,f,c
 16963  002A52  2A26               	incf	(sdc_disk_write@p_buff+1)^0,f,c
 16964  002A54  0100               	movlb	0	; () banked
 16965  002A56  4B65               	infsnz	sdc_disk_write@j& (0+255),f,b
 16966  002A58  2B66               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 16967                           
 16968                           ; BSR set to: 0
 16969  002A5A  BF66               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 16970  002A5C  D7F2               	goto	l9371
 16971  002A5E  0E02               	movlw	2
 16972  002A60  5D66               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 16973  002A62  A0D8               	btfss	status,0,c
 16974  002A64  D7EE               	goto	l9371
 16975                           
 16976                           ; BSR set to: 0
 16977                           ;diskio.c: 539: };diskio.c: 540: leitura_SPI();
 16978  002A66  EC3F  F02A         	call	_leitura_SPI	;wreg free
 16979                           
 16980                           ;diskio.c: 541: leitura_SPI();
 16981  002A6A  EC3F  F02A         	call	_leitura_SPI	;wreg free
 16982                           
 16983                           ;diskio.c: 543: dummy_clocks(1);
 16984  002A6E  0E01               	movlw	1
 16985  002A70  EC04  F028         	call	_dummy_clocks
 16986                           
 16987                           ;diskio.c: 544: escreve_SPI(0XFD);
 16988  002A74  0EFD               	movlw	253
 16989  002A76  EC08  F02A         	call	_escreve_SPI
 16990                           
 16991                           ;diskio.c: 546: }
 16992  002A7A  D067               	goto	u10460
 16993  002A7C                     l144:
 16994                           
 16995                           ; BSR set to: 0
 16996                           ;diskio.c: 547: else;diskio.c: 548: {;diskio.c: 549: LATCbits.LATC7 = 0;
 16997  002A7C  9E8B               	bcf	139,7,c	;volatile
 16998                           
 16999                           ;diskio.c: 550: LATBbits.LATB5 = 0;
 17000  002A7E  9A8A               	bcf	138,5,c	;volatile
 17001                           
 17002                           ; BSR set to: 0
 17003                           ;diskio.c: 551: dummy_clocks(10);
 17004  002A80  0E0A               	movlw	10
 17005  002A82  EC04  F028         	call	_dummy_clocks
 17006                           
 17007                           ;diskio.c: 552: command(0X58, sector*512, 0X00);
 17008  002A86  C027  F02C         	movff	sdc_disk_write@sector,??_sdc_disk_write
 17009  002A8A  C028  F02D         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 17010  002A8E  C029  F02E         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 17011  002A92  C02A  F02F         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 17012  002A96  0E09               	movlw	9
 17013  002A98                     u10435:
 17014  002A98  90D8               	bcf	status,0,c
 17015  002A9A  362C               	rlcf	??_sdc_disk_write^0,f,c
 17016  002A9C  362D               	rlcf	(??_sdc_disk_write+1)^0,f,c
 17017  002A9E  362E               	rlcf	(??_sdc_disk_write+2)^0,f,c
 17018  002AA0  362F               	rlcf	(??_sdc_disk_write+3)^0,f,c
 17019  002AA2  2EE8               	decfsz	wreg,f,c
 17020  002AA4  D7F9               	goto	u10435
 17021  002AA6  C02C  F01E         	movff	??_sdc_disk_write,command@arg
 17022  002AAA  C02D  F01F         	movff	??_sdc_disk_write+1,command@arg+1
 17023  002AAE  C02E  F020         	movff	??_sdc_disk_write+2,command@arg+2
 17024  002AB2  C02F  F021         	movff	??_sdc_disk_write+3,command@arg+3
 17025  002AB6  0E00               	movlw	0
 17026  002AB8  6E22               	movwf	command@CRC^0,c
 17027  002ABA  0E58               	movlw	88
 17028  002ABC  EC9E  F025         	call	_command
 17029                           
 17030                           ;diskio.c: 553: proceed();
 17031  002AC0  EC39  F02A         	call	_proceed	;wreg free
 17032  002AC4                     l9389:
 17033                           
 17034                           ;diskio.c: 555: buff = response();
 17035  002AC4  EC33  F02A         	call	_response	;wreg free
 17036  002AC8  0100               	movlb	0	; () banked
 17037  002ACA  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 17038                           
 17039                           ; BSR set to: 0
 17040                           ;diskio.c: 556: }while(buff!=0X00);
 17041  002ACC  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 17042  002ACE  A4D8               	btfss	status,2,c
 17043  002AD0  D7F9               	goto	l9389
 17044                           
 17045                           ; BSR set to: 0
 17046                           ;diskio.c: 558: LATBbits.LATB5 = 0;
 17047  002AD2  9A8A               	bcf	138,5,c	;volatile
 17048                           
 17049                           ;diskio.c: 559: LATCbits.LATC7 = 0;
 17050  002AD4  9E8B               	bcf	139,7,c	;volatile
 17051                           
 17052                           ; BSR set to: 0
 17053                           ;diskio.c: 560: dummy_clocks(1);
 17054  002AD6  0E01               	movlw	1
 17055  002AD8  EC04  F028         	call	_dummy_clocks
 17056                           
 17057                           ;diskio.c: 561: escreve_SPI(0XFE);
 17058  002ADC  0EFE               	movlw	254
 17059  002ADE  EC08  F02A         	call	_escreve_SPI
 17060                           
 17061                           ;diskio.c: 562: for(j=0;j<512;j++)
 17062  002AE2  0E00               	movlw	0
 17063  002AE4  0100               	movlb	0	; () banked
 17064  002AE6  6F66               	movwf	(sdc_disk_write@j+1)& (0+255),b
 17065  002AE8  0E00               	movlw	0
 17066  002AEA  6F65               	movwf	sdc_disk_write@j& (0+255),b
 17067  002AEC                     l9403:
 17068                           
 17069                           ; BSR set to: 0
 17070                           ;diskio.c: 563: {;diskio.c: 564: escreve_SPI(*p_buff);
 17071  002AEC  C025  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 17072  002AF0  C026  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 17073  002AF4  50DF               	movf	indf2,w,c
 17074  002AF6  EC08  F02A         	call	_escreve_SPI
 17075                           
 17076                           ;diskio.c: 565: p_buff++;
 17077  002AFA  4A25               	infsnz	sdc_disk_write@p_buff^0,f,c
 17078  002AFC  2A26               	incf	(sdc_disk_write@p_buff+1)^0,f,c
 17079  002AFE  0100               	movlb	0	; () banked
 17080  002B00  4B65               	infsnz	sdc_disk_write@j& (0+255),f,b
 17081  002B02  2B66               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 17082                           
 17083                           ; BSR set to: 0
 17084  002B04  BF66               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 17085  002B06  D7F2               	goto	l9403
 17086  002B08  0E02               	movlw	2
 17087  002B0A  5D66               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 17088  002B0C  A0D8               	btfss	status,0,c
 17089  002B0E  D7EE               	goto	l9403
 17090                           
 17091                           ; BSR set to: 0
 17092                           ;diskio.c: 566: };diskio.c: 567: leitura_SPI();
 17093  002B10  EC3F  F02A         	call	_leitura_SPI	;wreg free
 17094                           
 17095                           ;diskio.c: 568: leitura_SPI();
 17096  002B14  EC3F  F02A         	call	_leitura_SPI	;wreg free
 17097                           
 17098                           ;diskio.c: 570: dummy_clocks(10);
 17099  002B18  0E0A               	movlw	10
 17100  002B1A  EC04  F028         	call	_dummy_clocks
 17101                           
 17102                           ;diskio.c: 571: command(0X4D,0X00000000,0X00);
 17103  002B1E  0E00               	movlw	0
 17104  002B20  6E1E               	movwf	command@arg^0,c
 17105  002B22  0E00               	movlw	0
 17106  002B24  6E1F               	movwf	(command@arg+1)^0,c
 17107  002B26  0E00               	movlw	0
 17108  002B28  6E20               	movwf	(command@arg+2)^0,c
 17109  002B2A  0E00               	movlw	0
 17110  002B2C  6E21               	movwf	(command@arg+3)^0,c
 17111  002B2E  0E00               	movlw	0
 17112  002B30  6E22               	movwf	command@CRC^0,c
 17113  002B32  0E4D               	movlw	77
 17114  002B34  EC9E  F025         	call	_command
 17115                           
 17116                           ;diskio.c: 572: proceed();
 17117  002B38  EC39  F02A         	call	_proceed	;wreg free
 17118  002B3C                     l9419:
 17119                           
 17120                           ;diskio.c: 574: buff = response();
 17121  002B3C  EC33  F02A         	call	_response	;wreg free
 17122  002B40  0100               	movlb	0	; () banked
 17123  002B42  6F67               	movwf	sdc_disk_write@buff& (0+255),b
 17124                           
 17125                           ; BSR set to: 0
 17126                           ;diskio.c: 575: }while(buff!=0X00 );
 17127  002B44  5167               	movf	sdc_disk_write@buff& (0+255),w,b
 17128  002B46  A4D8               	btfss	status,2,c
 17129  002B48  D7F9               	goto	l9419
 17130  002B4A                     u10460:
 17131                           
 17132                           ;diskio.c: 576: };diskio.c: 577: return res;
 17133  002B4A  0100               	movlb	0	; () banked
 17134  002B4C  5164               	movf	sdc_disk_write@res& (0+255),w,b
 17135                           
 17136                           ; BSR set to: 0
 17137  002B4E  0012               	return		;funcret
 17138  002B50                     __end_of_sdc_disk_write:
 17139                           	callstack 0
 17140                           
 17141 ;; *************** function _disk_read *****************
 17142 ;; Defined at:
 17143 ;;		line 97 in file "bibliotecas/diskio.c"
 17144 ;; Parameters:    Size  Location     Type
 17145 ;;  pdrv            1    wreg     unsigned char 
 17146 ;;  buff            2    8[BANK0 ] PTR unsigned char 
 17147 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 17148 ;;  sector          4   10[BANK0 ] unsigned long 
 17149 ;;  count           1   14[BANK0 ] unsigned char 
 17150 ;; Auto vars:     Size  Location     Type
 17151 ;;  pdrv            1   15[BANK0 ] unsigned char 
 17152 ;;  result          2   16[BANK0 ] int 
 17153 ;;  res             1   18[BANK0 ] enum E25
 17154 ;; Return value:  Size  Location     Type
 17155 ;;                  1    wreg      enum E25
 17156 ;; Registers used:
 17157 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17158 ;; Tracked objects:
 17159 ;;		On entry : 3F/0
 17160 ;;		On exit  : 3F/0
 17161 ;;		Unchanged: 0/0
 17162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17163 ;;      Params:         0       7       0       0       0       0       0       0       0
 17164 ;;      Locals:         0       4       0       0       0       0       0       0       0
 17165 ;;      Temps:          1       0       0       0       0       0       0       0       0
 17166 ;;      Totals:         1      11       0       0       0       0       0       0       0
 17167 ;;Total ram usage:       12 bytes
 17168 ;; Hardware stack levels used:    1
 17169 ;; Hardware stack levels required when called:    7
 17170 ;; This function calls:
 17171 ;;		_sdc_disk_read
 17172 ;; This function is called by:
 17173 ;;		_move_window
 17174 ;;		_check_fs
 17175 ;;		_f_read
 17176 ;; This function uses a non-reentrant model
 17177 ;;
 17178                           
 17179                           	psect	text86
 17180  00480A                     __ptext86:
 17181                           	callstack 0
 17182  00480A                     _disk_read:
 17183                           	callstack 14
 17184                           
 17185                           ; BSR set to: 0
 17186                           ;incstack = 0
 17187                           ;disk_read@pdrv stored from wreg
 17188  00480A  6F6F               	movwf	disk_read@pdrv& (0+255),b
 17189                           
 17190                           ;diskio.c: 104: DRESULT res;;diskio.c: 105: int result;;diskio.c: 107: switch (pdrv) {
 17191  00480C  D029               	goto	l9453
 17192  00480E                     l9429:
 17193                           
 17194                           ; BSR set to: 0
 17195                           ;diskio.c: 111: result = sdc_disk_read(buff, sector, count);
 17196  00480E  C068  F025         	movff	disk_read@buff,sdc_disk_read@p_buff
 17197  004812  C069  F026         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 17198  004816  C06A  F027         	movff	disk_read@sector,sdc_disk_read@sector
 17199  00481A  C06B  F028         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 17200  00481E  C06C  F029         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 17201  004822  C06D  F02A         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 17202  004826  C06E  F02B         	movff	disk_read@count,sdc_disk_read@count
 17203  00482A  ECA3  F01B         	call	_sdc_disk_read	;wreg free
 17204  00482E  6E30               	movwf	??_disk_read^0,c
 17205  004830  5030               	movf	??_disk_read^0,w,c
 17206  004832  6F70               	movwf	disk_read@result& (0+255),b
 17207  004834  6B71               	clrf	(disk_read@result+1)& (0+255),b
 17208                           
 17209                           ; BSR set to: 0
 17210                           ;diskio.c: 115: res = result;
 17211  004836  C070  F072         	movff	disk_read@result,disk_read@res
 17212  00483A                     l9433:
 17213                           
 17214                           ; BSR set to: 0
 17215                           ;diskio.c: 117: return res;
 17216  00483A  5172               	movf	disk_read@res& (0+255),w,b
 17217  00483C  0012               	return	
 17218  00483E                     l9437:
 17219                           
 17220                           ; BSR set to: 0
 17221                           ;diskio.c: 122: result = sdc_disk_read(buff, sector, count);
 17222  00483E  C068  F025         	movff	disk_read@buff,sdc_disk_read@p_buff
 17223  004842  C069  F026         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 17224  004846  C06A  F027         	movff	disk_read@sector,sdc_disk_read@sector
 17225  00484A  C06B  F028         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 17226  00484E  C06C  F029         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 17227  004852  C06D  F02A         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 17228  004856  C06E  F02B         	movff	disk_read@count,sdc_disk_read@count
 17229  00485A  ECA3  F01B         	call	_sdc_disk_read	;wreg free
 17230  00485E  D7E7               	goto	L11
 17231  004860                     l9453:
 17232  004860  0100               	movlb	0	; () banked
 17233  004862  516F               	movf	disk_read@pdrv& (0+255),w,b
 17234                           
 17235                           ; Switch size 1, requested type "simple"
 17236                           ; Number of cases is 3, Range of values is 0 to 2
 17237                           ; switch strategies available:
 17238                           ; Name         Instructions Cycles
 17239                           ; simple_byte           10     6 (average)
 17240                           ;	Chosen strategy is simple_byte
 17241  004864  0A00               	xorlw	0	; case 0
 17242  004866  B4D8               	btfsc	status,2,c
 17243  004868  D7D2               	goto	l9429
 17244  00486A  0A01               	xorlw	1	; case 1
 17245  00486C  B4D8               	btfsc	status,2,c
 17246  00486E  D7E7               	goto	l9437
 17247  004870  0A03               	xorlw	3	; case 2
 17248  004872  B4D8               	btfsc	status,2,c
 17249  004874  D7E2               	goto	l9433
 17250                           
 17251                           ; BSR set to: 0
 17252                           ;diskio.c: 141: return RES_PARERR;
 17253  004876  0E04               	movlw	4
 17254                           
 17255                           ; BSR set to: 0
 17256  004878  0012               	return		;funcret
 17257  00487A                     __end_of_disk_read:
 17258                           	callstack 0
 17259                           
 17260 ;; *************** function _sdc_disk_read *****************
 17261 ;; Defined at:
 17262 ;;		line 439 in file "bibliotecas/diskio.c"
 17263 ;; Parameters:    Size  Location     Type
 17264 ;;  p_buff          2   36[COMRAM] PTR unsigned char 
 17265 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 17266 ;;  sector          4   38[COMRAM] unsigned long 
 17267 ;;  count           1   42[COMRAM] unsigned char 
 17268 ;; Auto vars:     Size  Location     Type
 17269 ;;  start_add       4    1[BANK0 ] unsigned long 
 17270 ;;  length          2    5[BANK0 ] int 
 17271 ;;  count1          2    0        int 
 17272 ;;  i               2    0        int 
 17273 ;;  buff            1    7[BANK0 ] unsigned char 
 17274 ;;  ptr             1    0        unsigned char 
 17275 ;;  res             1    0        enum E25
 17276 ;; Return value:  Size  Location     Type
 17277 ;;                  1    wreg      enum E25
 17278 ;; Registers used:
 17279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17280 ;; Tracked objects:
 17281 ;;		On entry : 0/0
 17282 ;;		On exit  : 3F/0
 17283 ;;		Unchanged: 0/0
 17284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17285 ;;      Params:         7       0       0       0       0       0       0       0       0
 17286 ;;      Locals:         0       8       0       0       0       0       0       0       0
 17287 ;;      Temps:          4       0       0       0       0       0       0       0       0
 17288 ;;      Totals:        11       8       0       0       0       0       0       0       0
 17289 ;;Total ram usage:       19 bytes
 17290 ;; Hardware stack levels used:    1
 17291 ;; Hardware stack levels required when called:    6
 17292 ;; This function calls:
 17293 ;;		_command
 17294 ;;		_dummy_clocks
 17295 ;;		_proceed
 17296 ;;		_response
 17297 ;; This function is called by:
 17298 ;;		_disk_read
 17299 ;; This function uses a non-reentrant model
 17300 ;;
 17301                           
 17302                           	psect	text87
 17303  003746                     __ptext87:
 17304                           	callstack 0
 17305  003746                     _sdc_disk_read:
 17306                           	callstack 14
 17307                           
 17308                           ;diskio.c: 448: unsigned long int start_add;;diskio.c: 449: int length,i, count1;;diskio
      +                          .c: 450: dummy_clocks(10);
 17309                           
 17310                           ; BSR set to: 0
 17311                           ;incstack = 0
 17312  003746  0E0A               	movlw	10
 17313  003748  EC04  F028         	call	_dummy_clocks
 17314                           
 17315                           ;diskio.c: 452: start_add = sector*512;
 17316  00374C  C027  F02C         	movff	sdc_disk_read@sector,??_sdc_disk_read
 17317  003750  C028  F02D         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 17318  003754  C029  F02E         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 17319  003758  C02A  F02F         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 17320  00375C  0E09               	movlw	9
 17321  00375E                     u10315:
 17322  00375E  90D8               	bcf	status,0,c
 17323  003760  362C               	rlcf	??_sdc_disk_read^0,f,c
 17324  003762  362D               	rlcf	(??_sdc_disk_read+1)^0,f,c
 17325  003764  362E               	rlcf	(??_sdc_disk_read+2)^0,f,c
 17326  003766  362F               	rlcf	(??_sdc_disk_read+3)^0,f,c
 17327  003768  2EE8               	decfsz	wreg,f,c
 17328  00376A  D7F9               	goto	u10315
 17329  00376C  C02C  F061         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 17330  003770  C02D  F062         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 17331  003774  C02E  F063         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 17332  003778  C02F  F064         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 17333                           
 17334                           ;diskio.c: 455: if(sector != 1)
 17335  00377C  0427               	decf	sdc_disk_read@sector^0,w,c
 17336  00377E  1028               	iorwf	(sdc_disk_read@sector+1)^0,w,c
 17337  003780  1029               	iorwf	(sdc_disk_read@sector+2)^0,w,c
 17338  003782  102A               	iorwf	(sdc_disk_read@sector+3)^0,w,c
 17339  003784  B4D8               	btfsc	status,2,c
 17340  003786  D01C               	goto	l9299
 17341                           
 17342                           ;diskio.c: 456: {;diskio.c: 457: dummy_clocks(10);
 17343  003788  0E0A               	movlw	10
 17344  00378A  EC04  F028         	call	_dummy_clocks
 17345                           
 17346                           ;diskio.c: 458: command(0X52,start_add ,0X00);
 17347  00378E  C061  F01E         	movff	sdc_disk_read@start_add,command@arg
 17348  003792  C062  F01F         	movff	sdc_disk_read@start_add+1,command@arg+1
 17349  003796  C063  F020         	movff	sdc_disk_read@start_add+2,command@arg+2
 17350  00379A  C064  F021         	movff	sdc_disk_read@start_add+3,command@arg+3
 17351  00379E  0E00               	movlw	0
 17352  0037A0  6E22               	movwf	command@CRC^0,c
 17353  0037A2  0E52               	movlw	82
 17354  0037A4  EC9E  F025         	call	_command
 17355                           
 17356                           ;diskio.c: 459: proceed();
 17357  0037A8  EC39  F02A         	call	_proceed	;wreg free
 17358  0037AC                     l9293:
 17359                           
 17360                           ;diskio.c: 461: buff = response();
 17361  0037AC  EC33  F02A         	call	_response	;wreg free
 17362  0037B0  0100               	movlb	0	; () banked
 17363  0037B2  6F67               	movwf	sdc_disk_read@buff& (0+255),b
 17364                           
 17365                           ; BSR set to: 0
 17366                           ;diskio.c: 462: }while(buff!=0X00);
 17367  0037B4  5167               	movf	sdc_disk_read@buff& (0+255),w,b
 17368  0037B6  A4D8               	btfss	status,2,c
 17369  0037B8  D7F9               	goto	l9293
 17370  0037BA                     u10330:
 17371                           
 17372                           ; BSR set to: 0
 17373                           ;diskio.c: 463: proceed();
 17374  0037BA  EC39  F02A         	call	_proceed	;wreg free
 17375                           
 17376                           ;diskio.c: 464: }
 17377  0037BE  D01E               	goto	l9311
 17378  0037C0                     l9299:
 17379                           
 17380                           ;diskio.c: 465: else;diskio.c: 466: {;diskio.c: 467: dummy_clocks(10);
 17381  0037C0  0E0A               	movlw	10
 17382  0037C2  EC04  F028         	call	_dummy_clocks
 17383                           
 17384                           ;diskio.c: 468: command(0X51,sector ,0X00);
 17385  0037C6  C027  F01E         	movff	sdc_disk_read@sector,command@arg
 17386  0037CA  C028  F01F         	movff	sdc_disk_read@sector+1,command@arg+1
 17387  0037CE  C029  F020         	movff	sdc_disk_read@sector+2,command@arg+2
 17388  0037D2  C02A  F021         	movff	sdc_disk_read@sector+3,command@arg+3
 17389  0037D6  0E00               	movlw	0
 17390  0037D8  6E22               	movwf	command@CRC^0,c
 17391  0037DA  0E51               	movlw	81
 17392  0037DC  EC9E  F025         	call	_command
 17393                           
 17394                           ;diskio.c: 469: proceed();
 17395  0037E0  EC39  F02A         	call	_proceed	;wreg free
 17396  0037E4                     l9303:
 17397                           
 17398                           ;diskio.c: 471: buff = response();
 17399  0037E4  EC33  F02A         	call	_response	;wreg free
 17400  0037E8  0100               	movlb	0	; () banked
 17401  0037EA  6F67               	movwf	sdc_disk_read@buff& (0+255),b
 17402                           
 17403                           ; BSR set to: 0
 17404                           ;diskio.c: 472: }while(buff!=0X00);
 17405  0037EC  5167               	movf	sdc_disk_read@buff& (0+255),w,b
 17406  0037EE  B4D8               	btfsc	status,2,c
 17407  0037F0  D7E4               	goto	u10330
 17408  0037F2  D7F8               	goto	l9303
 17409  0037F4                     l9309:
 17410                           
 17411                           ; BSR set to: 0
 17412                           ;diskio.c: 479: {;diskio.c: 480: buff = response();
 17413  0037F4  EC33  F02A         	call	_response	;wreg free
 17414  0037F8  0100               	movlb	0	; () banked
 17415  0037FA  6F67               	movwf	sdc_disk_read@buff& (0+255),b
 17416  0037FC                     l9311:
 17417  0037FC  0EFE               	movlw	254
 17418  0037FE  0100               	movlb	0	; () banked
 17419  003800  1967               	xorwf	sdc_disk_read@buff& (0+255),w,b
 17420  003802  A4D8               	btfss	status,2,c
 17421  003804  D7F7               	goto	l9309
 17422                           
 17423                           ; BSR set to: 0
 17424                           ;diskio.c: 481: };diskio.c: 483: length = 0;
 17425  003806  0E00               	movlw	0
 17426  003808  6F66               	movwf	(sdc_disk_read@length+1)& (0+255),b
 17427  00380A  0E00               	movlw	0
 17428  00380C  6F65               	movwf	sdc_disk_read@length& (0+255),b
 17429                           
 17430                           ;diskio.c: 484: while ( length < 512 )
 17431  00380E  D00C               	goto	l9319
 17432  003810                     l9315:
 17433                           
 17434                           ; BSR set to: 0
 17435                           ;diskio.c: 485: {;diskio.c: 486: p_buff[length] = response();
 17436  003810  5165               	movf	sdc_disk_read@length& (0+255),w,b
 17437  003812  2425               	addwf	sdc_disk_read@p_buff^0,w,c
 17438  003814  6ED9               	movwf	fsr2l,c
 17439  003816  5166               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 17440  003818  2026               	addwfc	(sdc_disk_read@p_buff+1)^0,w,c
 17441  00381A  6EDA               	movwf	fsr2h,c
 17442  00381C  EC33  F02A         	call	_response	;wreg free
 17443  003820  6EDF               	movwf	indf2,c
 17444                           
 17445                           ;diskio.c: 487: length++;
 17446  003822  0100               	movlb	0	; () banked
 17447  003824  4B65               	infsnz	sdc_disk_read@length& (0+255),f,b
 17448  003826  2B66               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 17449  003828                     l9319:
 17450                           
 17451                           ; BSR set to: 0
 17452  003828  BF66               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 17453  00382A  D7F2               	goto	l9315
 17454  00382C  0E02               	movlw	2
 17455  00382E  5D66               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 17456  003830  A0D8               	btfss	status,0,c
 17457  003832  D7EE               	goto	l9315
 17458                           
 17459                           ; BSR set to: 0
 17460                           ;diskio.c: 491: dummy_clocks(10);
 17461                           
 17462                           ; BSR set to: 0
 17463  003834  0E0A               	movlw	10
 17464  003836  EC04  F028         	call	_dummy_clocks
 17465                           
 17466                           ;diskio.c: 493: command(0X4C,0X00000000,0X00);
 17467  00383A  0E00               	movlw	0
 17468  00383C  6E1E               	movwf	command@arg^0,c
 17469  00383E  0E00               	movlw	0
 17470  003840  6E1F               	movwf	(command@arg+1)^0,c
 17471  003842  0E00               	movlw	0
 17472  003844  6E20               	movwf	(command@arg+2)^0,c
 17473  003846  0E00               	movlw	0
 17474  003848  6E21               	movwf	(command@arg+3)^0,c
 17475  00384A  0E00               	movlw	0
 17476  00384C  6E22               	movwf	command@CRC^0,c
 17477  00384E  0E4C               	movlw	76
 17478  003850  EC9E  F025         	call	_command
 17479                           
 17480                           ;diskio.c: 494: proceed();
 17481  003854  EC39  F02A         	call	_proceed	;wreg free
 17482  003858                     l9329:
 17483                           
 17484                           ;diskio.c: 496: buff = response();
 17485  003858  EC33  F02A         	call	_response	;wreg free
 17486  00385C  0100               	movlb	0	; () banked
 17487  00385E  6F67               	movwf	sdc_disk_read@buff& (0+255),b
 17488                           
 17489                           ; BSR set to: 0
 17490                           ;diskio.c: 497: }while(buff!=0xFF);
 17491  003860  2967               	incf	sdc_disk_read@buff& (0+255),w,b
 17492  003862  A4D8               	btfss	status,2,c
 17493  003864  D7F9               	goto	l9329
 17494                           
 17495                           ; BSR set to: 0
 17496                           ;diskio.c: 500: return RES_OK;
 17497                           
 17498                           ; BSR set to: 0
 17499  003866  0E00               	movlw	0
 17500                           
 17501                           ; BSR set to: 0
 17502  003868  0012               	return		;funcret
 17503  00386A                     __end_of_sdc_disk_read:
 17504                           	callstack 0
 17505                           
 17506 ;; *************** function _response *****************
 17507 ;; Defined at:
 17508 ;;		line 60 in file "bibliotecas/SDCard.c"
 17509 ;; Parameters:    Size  Location     Type
 17510 ;;		None
 17511 ;; Auto vars:     Size  Location     Type
 17512 ;;  buff            1   24[COMRAM] unsigned char 
 17513 ;; Return value:  Size  Location     Type
 17514 ;;                  1    wreg      unsigned char 
 17515 ;; Registers used:
 17516 ;;		wreg, status,2, cstack
 17517 ;; Tracked objects:
 17518 ;;		On entry : 0/0
 17519 ;;		On exit  : 0/0
 17520 ;;		Unchanged: 0/0
 17521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17522 ;;      Params:         0       0       0       0       0       0       0       0       0
 17523 ;;      Locals:         1       0       0       0       0       0       0       0       0
 17524 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17525 ;;      Totals:         1       0       0       0       0       0       0       0       0
 17526 ;;Total ram usage:        1 bytes
 17527 ;; Hardware stack levels used:    1
 17528 ;; Hardware stack levels required when called:    4
 17529 ;; This function calls:
 17530 ;;		_leitura_SPI
 17531 ;; This function is called by:
 17532 ;;		_sdc_reset
 17533 ;;		_sdc_disk_initialize
 17534 ;;		_sdc_disk_read
 17535 ;;		_sdc_disk_write
 17536 ;; This function uses a non-reentrant model
 17537 ;;
 17538                           
 17539                           	psect	text88
 17540  005466                     __ptext88:
 17541                           	callstack 0
 17542  005466                     _response:
 17543                           	callstack 15
 17544                           
 17545                           ;SDCard.c: 62: unsigned char buff;;SDCard.c: 63: LATBbits.LATB5 = 0;
 17546                           
 17547                           ; BSR set to: 0
 17548                           ;incstack = 0
 17549  005466  9A8A               	bcf	138,5,c	;volatile
 17550                           
 17551                           ;SDCard.c: 64: buff= leitura_SPI();
 17552  005468  EC3F  F02A         	call	_leitura_SPI	;wreg free
 17553  00546C  6E19               	movwf	response@buff^0,c
 17554                           
 17555                           ;SDCard.c: 65: return buff;
 17556  00546E  5019               	movf	response@buff^0,w,c
 17557  005470  0012               	return		;funcret
 17558  005472                     __end_of_response:
 17559                           	callstack 0
 17560                           
 17561 ;; *************** function _proceed *****************
 17562 ;; Defined at:
 17563 ;;		line 93 in file "bibliotecas/SDCard.c"
 17564 ;; Parameters:    Size  Location     Type
 17565 ;;		None
 17566 ;; Auto vars:     Size  Location     Type
 17567 ;;		None
 17568 ;; Return value:  Size  Location     Type
 17569 ;;                  1    wreg      void 
 17570 ;; Registers used:
 17571 ;;		wreg, cstack
 17572 ;; Tracked objects:
 17573 ;;		On entry : 0/0
 17574 ;;		On exit  : 0/0
 17575 ;;		Unchanged: 0/0
 17576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17577 ;;      Params:         0       0       0       0       0       0       0       0       0
 17578 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17579 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17580 ;;      Totals:         0       0       0       0       0       0       0       0       0
 17581 ;;Total ram usage:        0 bytes
 17582 ;; Hardware stack levels used:    1
 17583 ;; Hardware stack levels required when called:    4
 17584 ;; This function calls:
 17585 ;;		_escreve_SPI
 17586 ;; This function is called by:
 17587 ;;		_sdc_reset
 17588 ;;		_sdc_disk_initialize
 17589 ;;		_sdc_disk_read
 17590 ;;		_sdc_disk_write
 17591 ;; This function uses a non-reentrant model
 17592 ;;
 17593                           
 17594                           	psect	text89
 17595  005472                     __ptext89:
 17596                           	callstack 0
 17597  005472                     _proceed:
 17598                           	callstack 15
 17599                           
 17600                           ;SDCard.c: 95: LATBbits.LATB5 = 0;
 17601                           
 17602                           ;incstack = 0
 17603  005472  9A8A               	bcf	138,5,c	;volatile
 17604                           
 17605                           ;SDCard.c: 96: escreve_SPI(0xFF);
 17606  005474  0EFF               	movlw	255
 17607  005476  EC08  F02A         	call	_escreve_SPI
 17608                           
 17609                           ;SDCard.c: 97: LATBbits.LATB5 = 1;
 17610  00547A  8A8A               	bsf	138,5,c	;volatile
 17611  00547C  0012               	return		;funcret
 17612  00547E                     __end_of_proceed:
 17613                           	callstack 0
 17614                           
 17615 ;; *************** function _command *****************
 17616 ;; Defined at:
 17617 ;;		line 126 in file "bibliotecas/SDCard.c"
 17618 ;; Parameters:    Size  Location     Type
 17619 ;;  CMD             1    wreg     unsigned char 
 17620 ;;  arg             4   29[COMRAM] unsigned long 
 17621 ;;  CRC             1   33[COMRAM] unsigned char 
 17622 ;; Auto vars:     Size  Location     Type
 17623 ;;  CMD             1   34[COMRAM] unsigned char 
 17624 ;;  argument        1   35[COMRAM] unsigned char 
 17625 ;; Return value:  Size  Location     Type
 17626 ;;                  1    wreg      void 
 17627 ;; Registers used:
 17628 ;;		wreg, status,2, status,0, cstack
 17629 ;; Tracked objects:
 17630 ;;		On entry : 0/0
 17631 ;;		On exit  : 0/0
 17632 ;;		Unchanged: 0/0
 17633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17634 ;;      Params:         5       0       0       0       0       0       0       0       0
 17635 ;;      Locals:         2       0       0       0       0       0       0       0       0
 17636 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17637 ;;      Totals:         7       0       0       0       0       0       0       0       0
 17638 ;;Total ram usage:        7 bytes
 17639 ;; Hardware stack levels used:    1
 17640 ;; Hardware stack levels required when called:    5
 17641 ;; This function calls:
 17642 ;;		_dummy_clocks
 17643 ;;		_escreve_SPI
 17644 ;;		_wait_ready
 17645 ;; This function is called by:
 17646 ;;		_sdc_reset
 17647 ;;		_sdc_disk_initialize
 17648 ;;		_sdc_disk_read
 17649 ;;		_sdc_disk_write
 17650 ;; This function uses a non-reentrant model
 17651 ;;
 17652                           
 17653                           	psect	text90
 17654  004B3C                     __ptext90:
 17655                           	callstack 0
 17656  004B3C                     _command:
 17657                           	callstack 14
 17658                           
 17659                           ;incstack = 0
 17660                           ;command@CMD stored from wreg
 17661  004B3C  6E23               	movwf	command@CMD^0,c
 17662                           
 17663                           ;SDCard.c: 128: unsigned char argument;;SDCard.c: 130: if (wait_ready() != 0xFF)
 17664  004B3E  EC3E  F028         	call	_wait_ready	;wreg free
 17665  004B42  0AFF               	xorlw	255
 17666  004B44  A4D8               	btfss	status,2,c
 17667  004B46  D004               	goto	l592
 17668  004B48  D008               	goto	u10300
 17669  004B4A                     l9243:
 17670                           
 17671                           ;SDCard.c: 133: {;SDCard.c: 134: dummy_clocks(10);
 17672  004B4A  0E0A               	movlw	10
 17673  004B4C  EC04  F028         	call	_dummy_clocks
 17674  004B50                     l592:
 17675  004B50  EC3E  F028         	call	_wait_ready	;wreg free
 17676  004B54  0AFF               	xorlw	255
 17677  004B56  A4D8               	btfss	status,2,c
 17678  004B58  D7F8               	goto	l9243
 17679  004B5A                     u10300:
 17680                           
 17681                           ;SDCard.c: 135: };SDCard.c: 136: };SDCard.c: 137: escreve_SPI(0xFF);
 17682  004B5A  0EFF               	movlw	255
 17683  004B5C  EC08  F02A         	call	_escreve_SPI
 17684                           
 17685                           ;SDCard.c: 138: escreve_SPI(CMD);
 17686  004B60  5023               	movf	command@CMD^0,w,c
 17687  004B62  EC08  F02A         	call	_escreve_SPI
 17688                           
 17689                           ;SDCard.c: 139: argument = arg>>24;
 17690  004B66  C021  F024         	movff	command@arg+3,command@argument
 17691                           
 17692                           ;SDCard.c: 140: escreve_SPI(argument);
 17693  004B6A  5024               	movf	command@argument^0,w,c
 17694  004B6C  EC08  F02A         	call	_escreve_SPI
 17695                           
 17696                           ;SDCard.c: 141: argument = arg>>16;
 17697  004B70  C020  F024         	movff	command@arg+2,command@argument
 17698                           
 17699                           ;SDCard.c: 142: escreve_SPI(argument);
 17700  004B74  5024               	movf	command@argument^0,w,c
 17701  004B76  EC08  F02A         	call	_escreve_SPI
 17702                           
 17703                           ;SDCard.c: 143: argument = arg>>8;
 17704  004B7A  C01F  F024         	movff	command@arg+1,command@argument
 17705                           
 17706                           ;SDCard.c: 144: escreve_SPI(argument);
 17707  004B7E  5024               	movf	command@argument^0,w,c
 17708  004B80  EC08  F02A         	call	_escreve_SPI
 17709                           
 17710                           ;SDCard.c: 145: argument = arg;
 17711  004B84  C01E  F024         	movff	command@arg,command@argument
 17712                           
 17713                           ;SDCard.c: 146: escreve_SPI(argument);
 17714  004B88  5024               	movf	command@argument^0,w,c
 17715  004B8A  EC08  F02A         	call	_escreve_SPI
 17716                           
 17717                           ;SDCard.c: 147: escreve_SPI(CRC);
 17718  004B8E  5022               	movf	command@CRC^0,w,c
 17719  004B90  EC08  F02A         	call	_escreve_SPI
 17720  004B94  0012               	return		;funcret
 17721  004B96                     __end_of_command:
 17722                           	callstack 0
 17723                           
 17724 ;; *************** function _wait_ready *****************
 17725 ;; Defined at:
 17726 ;;		line 106 in file "bibliotecas/SDCard.c"
 17727 ;; Parameters:    Size  Location     Type
 17728 ;;		None
 17729 ;; Auto vars:     Size  Location     Type
 17730 ;;  msg            10    0        unsigned char [10]
 17731 ;;  timeout         4   24[COMRAM] unsigned long 
 17732 ;;  res             1   28[COMRAM] unsigned char 
 17733 ;; Return value:  Size  Location     Type
 17734 ;;                  1    wreg      unsigned char 
 17735 ;; Registers used:
 17736 ;;		wreg, status,2, status,0, cstack
 17737 ;; Tracked objects:
 17738 ;;		On entry : 0/0
 17739 ;;		On exit  : 0/0
 17740 ;;		Unchanged: 0/0
 17741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17742 ;;      Params:         0       0       0       0       0       0       0       0       0
 17743 ;;      Locals:         5       0       0       0       0       0       0       0       0
 17744 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17745 ;;      Totals:         5       0       0       0       0       0       0       0       0
 17746 ;;Total ram usage:        5 bytes
 17747 ;; Hardware stack levels used:    1
 17748 ;; Hardware stack levels required when called:    4
 17749 ;; This function calls:
 17750 ;;		_leitura_SPI
 17751 ;; This function is called by:
 17752 ;;		_command
 17753 ;; This function uses a non-reentrant model
 17754 ;;
 17755                           
 17756                           	psect	text91
 17757  00507C                     __ptext91:
 17758                           	callstack 0
 17759  00507C                     _wait_ready:
 17760                           	callstack 14
 17761                           
 17762                           ;SDCard.c: 108: BYTE res;;SDCard.c: 109: DWORD timeout = 0x7FFF;
 17763                           
 17764                           ;incstack = 0
 17765  00507C  0EFF               	movlw	255
 17766  00507E  6E19               	movwf	wait_ready@timeout^0,c
 17767  005080  0E7F               	movlw	127
 17768  005082  6E1A               	movwf	(wait_ready@timeout+1)^0,c
 17769  005084  0E00               	movlw	0
 17770  005086  6E1B               	movwf	(wait_ready@timeout+2)^0,c
 17771  005088  0E00               	movlw	0
 17772  00508A  6E1C               	movwf	(wait_ready@timeout+3)^0,c
 17773  00508C                     l9229:
 17774                           
 17775                           ;SDCard.c: 113: res = leitura_SPI();
 17776  00508C  EC3F  F02A         	call	_leitura_SPI	;wreg free
 17777  005090  6E1D               	movwf	wait_ready@res^0,c
 17778                           
 17779                           ;SDCard.c: 114: while ((res != 0xFF) && (--timeout));
 17780  005092  281D               	incf	wait_ready@res^0,w,c
 17781  005094  B4D8               	btfsc	status,2,c
 17782  005096  D00B               	goto	u10280
 17783  005098  0619               	decf	wait_ready@timeout^0,f,c
 17784  00509A  0E00               	movlw	0
 17785  00509C  5A1A               	subwfb	(wait_ready@timeout+1)^0,f,c
 17786  00509E  5A1B               	subwfb	(wait_ready@timeout+2)^0,f,c
 17787  0050A0  5A1C               	subwfb	(wait_ready@timeout+3)^0,f,c
 17788  0050A2  5019               	movf	wait_ready@timeout^0,w,c
 17789  0050A4  101A               	iorwf	(wait_ready@timeout+1)^0,w,c
 17790  0050A6  101B               	iorwf	(wait_ready@timeout+2)^0,w,c
 17791  0050A8  101C               	iorwf	(wait_ready@timeout+3)^0,w,c
 17792  0050AA  A4D8               	btfss	status,2,c
 17793  0050AC  D7EF               	goto	l9229
 17794  0050AE                     u10280:
 17795                           
 17796                           ;SDCard.c: 116: return res;
 17797  0050AE  501D               	movf	wait_ready@res^0,w,c
 17798  0050B0  0012               	return		;funcret
 17799  0050B2                     __end_of_wait_ready:
 17800                           	callstack 0
 17801                           
 17802 ;; *************** function _escreve_SPI *****************
 17803 ;; Defined at:
 17804 ;;		line 97 in file "bibliotecas/SPI.c"
 17805 ;; Parameters:    Size  Location     Type
 17806 ;;  dado            1    wreg     unsigned char 
 17807 ;; Auto vars:     Size  Location     Type
 17808 ;;  dado            1   25[COMRAM] unsigned char 
 17809 ;;  TempVar         1    0        unsigned char 
 17810 ;; Return value:  Size  Location     Type
 17811 ;;                  1    wreg      void 
 17812 ;; Registers used:
 17813 ;;		wreg
 17814 ;; Tracked objects:
 17815 ;;		On entry : 0/0
 17816 ;;		On exit  : 0/0
 17817 ;;		Unchanged: 0/0
 17818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17819 ;;      Params:         0       0       0       0       0       0       0       0       0
 17820 ;;      Locals:         2       0       0       0       0       0       0       0       0
 17821 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17822 ;;      Totals:         2       0       0       0       0       0       0       0       0
 17823 ;;Total ram usage:        2 bytes
 17824 ;; Hardware stack levels used:    1
 17825 ;; Hardware stack levels required when called:    3
 17826 ;; This function calls:
 17827 ;;		Nothing
 17828 ;; This function is called by:
 17829 ;;		_sdc_disk_write
 17830 ;;		_proceed
 17831 ;;		_command
 17832 ;; This function uses a non-reentrant model
 17833 ;;
 17834                           
 17835                           	psect	text92
 17836  005410                     __ptext92:
 17837                           	callstack 0
 17838  005410                     _escreve_SPI:
 17839                           	callstack 15
 17840                           
 17841                           ;incstack = 0
 17842                           ;escreve_SPI@dado stored from wreg
 17843  005410  6E1A               	movwf	escreve_SPI@dado^0,c
 17844  005412  50C9               	movf	201,w,c	;volatile
 17845                           
 17846                           ;SPI.c: 101: PIR1bits.SSPIF = 0;
 17847  005414  969E               	bcf	158,3,c	;volatile
 17848                           
 17849                           ;SPI.c: 103: SSPBUF = dado;
 17850  005416  C01A  FFC9         	movff	escreve_SPI@dado,4041	;volatile
 17851  00541A                     l694:
 17852  00541A  B69E               	btfsc	158,3,c	;volatile
 17853  00541C  0012               	return	
 17854  00541E  D7FD               	goto	l694
 17855  005420                     __end_of_escreve_SPI:
 17856                           	callstack 0
 17857                           
 17858 ;; *************** function _dummy_clocks *****************
 17859 ;; Defined at:
 17860 ;;		line 75 in file "bibliotecas/SDCard.c"
 17861 ;; Parameters:    Size  Location     Type
 17862 ;;  n               1    wreg     unsigned char 
 17863 ;; Auto vars:     Size  Location     Type
 17864 ;;  n               1   26[COMRAM] unsigned char 
 17865 ;;  i               2   27[COMRAM] unsigned int 
 17866 ;; Return value:  Size  Location     Type
 17867 ;;                  1    wreg      void 
 17868 ;; Registers used:
 17869 ;;		wreg, status,2, status,0, cstack
 17870 ;; Tracked objects:
 17871 ;;		On entry : 0/0
 17872 ;;		On exit  : 0/0
 17873 ;;		Unchanged: 0/0
 17874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17875 ;;      Params:         0       0       0       0       0       0       0       0       0
 17876 ;;      Locals:         3       0       0       0       0       0       0       0       0
 17877 ;;      Temps:          2       0       0       0       0       0       0       0       0
 17878 ;;      Totals:         5       0       0       0       0       0       0       0       0
 17879 ;;Total ram usage:        5 bytes
 17880 ;; Hardware stack levels used:    1
 17881 ;; Hardware stack levels required when called:    4
 17882 ;; This function calls:
 17883 ;;		_leitura_SPI
 17884 ;; This function is called by:
 17885 ;;		_sdc_disk_initialize
 17886 ;;		_sdc_disk_read
 17887 ;;		_sdc_disk_write
 17888 ;;		_command
 17889 ;; This function uses a non-reentrant model
 17890 ;;
 17891                           
 17892                           	psect	text93
 17893  005008                     __ptext93:
 17894                           	callstack 0
 17895  005008                     _dummy_clocks:
 17896                           	callstack 15
 17897                           
 17898                           ;incstack = 0
 17899                           ;dummy_clocks@n stored from wreg
 17900  005008  6E1B               	movwf	dummy_clocks@n^0,c
 17901                           
 17902                           ;SDCard.c: 77: unsigned int i;;SDCard.c: 78: _delay((unsigned long)((1)*(48000000/4000.0
      +                          )));
 17903  00500A  0E10               	movlw	16
 17904  00500C  6E19               	movwf	??_dummy_clocks^0,c
 17905  00500E  0E94               	movlw	148
 17906  005010                     u15137:
 17907  005010  2EE8               	decfsz	wreg,f,c
 17908  005012  D7FE               	bra	u15137
 17909  005014  2E19               	decfsz	??_dummy_clocks^0,f,c
 17910  005016  D7FC               	bra	u15137
 17911  005018  D000               	nop2	
 17912                           
 17913                           ;SDCard.c: 79: for(i=0;i<n;i++)
 17914  00501A  0E00               	movlw	0
 17915  00501C  6E1D               	movwf	(dummy_clocks@i+1)^0,c
 17916  00501E  0E00               	movlw	0
 17917  005020  6E1C               	movwf	dummy_clocks@i^0,c
 17918  005022  D006               	goto	l9221
 17919  005024                     l576:
 17920                           
 17921                           ;SDCard.c: 80: {;SDCard.c: 81: LATBbits.LATB5 = 1;
 17922  005024  8A8A               	bsf	138,5,c	;volatile
 17923                           
 17924                           ;SDCard.c: 82: leitura_SPI();
 17925  005026  EC3F  F02A         	call	_leitura_SPI	;wreg free
 17926                           
 17927                           ;SDCard.c: 83: LATBbits.LATB5 = 0;
 17928  00502A  9A8A               	bcf	138,5,c	;volatile
 17929  00502C  4A1C               	infsnz	dummy_clocks@i^0,f,c
 17930  00502E  2A1D               	incf	(dummy_clocks@i+1)^0,f,c
 17931  005030                     l9221:
 17932  005030  501B               	movf	dummy_clocks@n^0,w,c
 17933  005032  6E19               	movwf	??_dummy_clocks^0,c
 17934  005034  6A1A               	clrf	(??_dummy_clocks+1)^0,c
 17935  005036  5019               	movf	??_dummy_clocks^0,w,c
 17936  005038  5C1C               	subwf	dummy_clocks@i^0,w,c
 17937  00503A  501A               	movf	(??_dummy_clocks+1)^0,w,c
 17938  00503C  581D               	subwfb	(dummy_clocks@i+1)^0,w,c
 17939  00503E  B0D8               	btfsc	status,0,c
 17940  005040  0012               	return	
 17941  005042  D7F0               	goto	l576
 17942  005044                     __end_of_dummy_clocks:
 17943                           	callstack 0
 17944                           
 17945 ;; *************** function _leitura_SPI *****************
 17946 ;; Defined at:
 17947 ;;		line 82 in file "bibliotecas/SPI.c"
 17948 ;; Parameters:    Size  Location     Type
 17949 ;;		None
 17950 ;; Auto vars:     Size  Location     Type
 17951 ;;		None
 17952 ;; Return value:  Size  Location     Type
 17953 ;;                  1    wreg      unsigned char 
 17954 ;; Registers used:
 17955 ;;		wreg, status,2
 17956 ;; Tracked objects:
 17957 ;;		On entry : 0/0
 17958 ;;		On exit  : 0/0
 17959 ;;		Unchanged: 0/0
 17960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17961 ;;      Params:         0       0       0       0       0       0       0       0       0
 17962 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17963 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17964 ;;      Totals:         0       0       0       0       0       0       0       0       0
 17965 ;;Total ram usage:        0 bytes
 17966 ;; Hardware stack levels used:    1
 17967 ;; Hardware stack levels required when called:    3
 17968 ;; This function calls:
 17969 ;;		Nothing
 17970 ;; This function is called by:
 17971 ;;		_sdc_disk_write
 17972 ;;		_response
 17973 ;;		_dummy_clocks
 17974 ;;		_wait_ready
 17975 ;; This function uses a non-reentrant model
 17976 ;;
 17977                           
 17978                           	psect	text94
 17979  00547E                     __ptext94:
 17980                           	callstack 0
 17981  00547E                     _leitura_SPI:
 17982                           	callstack 15
 17983                           
 17984                           ;SPI.c: 84: SSPBUF = 0xFF;
 17985                           
 17986                           ;incstack = 0
 17987  00547E  68C9               	setf	201,c	;volatile
 17988                           
 17989                           ;SPI.c: 85: SSPSTATbits.BF = 0;
 17990  005480  90C7               	bcf	199,0,c	;volatile
 17991  005482                     l688:
 17992  005482  A0C7               	btfss	199,0,c	;volatile
 17993  005484  D7FE               	goto	l688
 17994                           
 17995                           ;SPI.c: 87: return (SSPBUF);
 17996  005486  50C9               	movf	201,w,c	;volatile
 17997  005488  0012               	return		;funcret
 17998  00548A                     __end_of_leitura_SPI:
 17999                           	callstack 0
 18000                           
 18001 ;; *************** function _disk_ioctl *****************
 18002 ;; Defined at:
 18003 ;;		line 198 in file "bibliotecas/diskio.c"
 18004 ;; Parameters:    Size  Location     Type
 18005 ;;  pdrv            1    wreg     unsigned char 
 18006 ;;  cmd             1   24[COMRAM] unsigned char 
 18007 ;;  buff            2   25[COMRAM] PTR void 
 18008 ;;		 -> NULL(0), 
 18009 ;; Auto vars:     Size  Location     Type
 18010 ;;  pdrv            1   27[COMRAM] unsigned char 
 18011 ;;  result          2    0        int 
 18012 ;;  res             1   28[COMRAM] enum E25
 18013 ;; Return value:  Size  Location     Type
 18014 ;;                  1    wreg      enum E25
 18015 ;; Registers used:
 18016 ;;		wreg, status,2, status,0
 18017 ;; Tracked objects:
 18018 ;;		On entry : 3F/0
 18019 ;;		On exit  : 0/0
 18020 ;;		Unchanged: 0/0
 18021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18022 ;;      Params:         3       0       0       0       0       0       0       0       0
 18023 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18024 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18025 ;;      Totals:         5       0       0       0       0       0       0       0       0
 18026 ;;Total ram usage:        5 bytes
 18027 ;; Hardware stack levels used:    1
 18028 ;; Hardware stack levels required when called:    3
 18029 ;; This function calls:
 18030 ;;		Nothing
 18031 ;; This function is called by:
 18032 ;;		_sync
 18033 ;; This function uses a non-reentrant model
 18034 ;;
 18035                           
 18036                           	psect	text95
 18037  0052DE                     __ptext95:
 18038                           	callstack 0
 18039  0052DE                     _disk_ioctl:
 18040                           	callstack 20
 18041                           
 18042                           ;incstack = 0
 18043                           ;disk_ioctl@pdrv stored from wreg
 18044  0052DE  6E1C               	movwf	disk_ioctl@pdrv^0,c
 18045                           
 18046                           ;diskio.c: 204: DRESULT res;;diskio.c: 205: int result;;diskio.c: 207: switch (pdrv) {
 18047  0052E0  D002               	goto	l10139
 18048  0052E2                     l68:
 18049                           
 18050                           ;diskio.c: 212: return res;
 18051  0052E2  501D               	movf	disk_ioctl@res^0,w,c
 18052  0052E4  0012               	return	
 18053  0052E6                     l10139:
 18054  0052E6  501C               	movf	disk_ioctl@pdrv^0,w,c
 18055                           
 18056                           ; Switch size 1, requested type "simple"
 18057                           ; Number of cases is 3, Range of values is 0 to 2
 18058                           ; switch strategies available:
 18059                           ; Name         Instructions Cycles
 18060                           ; simple_byte           10     6 (average)
 18061                           ;	Chosen strategy is simple_byte
 18062  0052E8  0A00               	xorlw	0	; case 0
 18063  0052EA  B4D8               	btfsc	status,2,c
 18064  0052EC  D7FA               	goto	l68
 18065  0052EE  0A01               	xorlw	1	; case 1
 18066  0052F0  B4D8               	btfsc	status,2,c
 18067  0052F2  D7F7               	goto	l68
 18068  0052F4  0A03               	xorlw	3	; case 2
 18069  0052F6  B4D8               	btfsc	status,2,c
 18070  0052F8  D7F4               	goto	l68
 18071                           
 18072                           ;diskio.c: 227: return RES_PARERR;
 18073  0052FA  0E04               	movlw	4
 18074  0052FC  0012               	return		;funcret
 18075  0052FE                     __end_of_disk_ioctl:
 18076                           	callstack 0
 18077                           
 18078 ;; *************** function _get_fattime *****************
 18079 ;; Defined at:
 18080 ;;		line 810 in file "bibliotecas/tff.c"
 18081 ;; Parameters:    Size  Location     Type
 18082 ;;		None
 18083 ;; Auto vars:     Size  Location     Type
 18084 ;;  f_time         10   32[COMRAM] struct .
 18085 ;; Return value:  Size  Location     Type
 18086 ;;                  4   28[COMRAM] unsigned long 
 18087 ;; Registers used:
 18088 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 18089 ;; Tracked objects:
 18090 ;;		On entry : 3F/0
 18091 ;;		On exit  : 3F/0
 18092 ;;		Unchanged: 0/0
 18093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18094 ;;      Params:         4       0       0       0       0       0       0       0       0
 18095 ;;      Locals:        10       0       0       0       0       0       0       0       0
 18096 ;;      Temps:          0      38       0       0       0       0       0       0       0
 18097 ;;      Totals:        14      38       0       0       0       0       0       0       0
 18098 ;;Total ram usage:       52 bytes
 18099 ;; Hardware stack levels used:    1
 18100 ;; Hardware stack levels required when called:    4
 18101 ;; This function calls:
 18102 ;;		_GPSDay
 18103 ;;		_GPSHour
 18104 ;;		_GPSMinute
 18105 ;;		_GPSMonth
 18106 ;;		_GPSSecond
 18107 ;;		_GPSyear
 18108 ;; This function is called by:
 18109 ;;		_f_open
 18110 ;;		_f_sync
 18111 ;; This function uses a non-reentrant model
 18112 ;;
 18113                           
 18114                           	psect	text96
 18115  003144                     __ptext96:
 18116                           	callstack 0
 18117  003144                     _get_fattime:
 18118                           	callstack 21
 18119                           
 18120                           ; BSR set to: 0
 18121                           ;tff.c: 812: fat_time f_time;;tff.c: 814: f_time.hora = GPSHour() - 3;
 18122                           
 18123                           ;incstack = 0
 18124  003144  ECD6  F028         	call	_GPSHour	;wreg free
 18125  003148  0EFD               	movlw	253
 18126  00314A  2419               	addwf	?_GPSHour^0,w,c
 18127  00314C  6E21               	movwf	get_fattime@f_time^0,c
 18128  00314E  0EFF               	movlw	255
 18129  003150  201A               	addwfc	(?_GPSHour+1)^0,w,c
 18130  003152  6E22               	movwf	(get_fattime@f_time+1)^0,c
 18131                           
 18132                           ;tff.c: 815: f_time.min = GPSMinute();
 18133  003154  EC3D  F029         	call	_GPSMinute	;wreg free
 18134  003158  C019  F023         	movff	?_GPSMinute,get_fattime@f_time+2
 18135  00315C  C01A  F024         	movff	?_GPSMinute+1,get_fattime@f_time+3
 18136                           
 18137                           ;tff.c: 816: f_time.seg = GPSSecond();
 18138  003160  EC1B  F029         	call	_GPSSecond	;wreg free
 18139  003164  C019  F025         	movff	?_GPSSecond,get_fattime@f_time+4
 18140  003168  C01A  F026         	movff	?_GPSSecond+1,get_fattime@f_time+5
 18141                           
 18142                           ;tff.c: 817: f_time.ano = GPSyear() + 2000;
 18143  00316C  EC0A  F029         	call	_GPSyear	;wreg free
 18144  003170  0ED0               	movlw	208
 18145  003172  2419               	addwf	?_GPSyear^0,w,c
 18146  003174  6E29               	movwf	(get_fattime@f_time+8)^0,c
 18147  003176  0E07               	movlw	7
 18148  003178  201A               	addwfc	(?_GPSyear+1)^0,w,c
 18149  00317A  6E2A               	movwf	(get_fattime@f_time+9)^0,c
 18150                           
 18151                           ;tff.c: 818: f_time.mes = GPSMonth();
 18152  00317C  EC2C  F029         	call	_GPSMonth	;wreg free
 18153  003180  5019               	movf	?_GPSMonth^0,w,c
 18154  003182  6E28               	movwf	(get_fattime@f_time+7)^0,c
 18155                           
 18156                           ;tff.c: 819: f_time.dia = GPSDay();
 18157  003184  EC4E  F029         	call	_GPSDay	;wreg free
 18158  003188  5019               	movf	?_GPSDay^0,w,c
 18159  00318A  6E27               	movwf	(get_fattime@f_time+6)^0,c
 18160                           
 18161                           ; BSR set to: 1
 18162                           ;tff.c: 821: return (DWORD)(f_time.ano - 60) << 25 |;tff.c: 822: (DWORD)(f_time.mes) << 
      +                          21 |;tff.c: 823: (DWORD)(f_time.dia) << 16 |;tff.c: 824: (DWORD)(f_time.hora) << 11 |;tf
      +                          f.c: 825: (DWORD)(f_time.min) << 5 |;tff.c: 826: (DWORD)(f_time.seg) >> 1;
 18163  00318C  90D8               	bcf	status,0,c
 18164  00318E  3026               	rrcf	(get_fattime@f_time+5)^0,w,c
 18165  003190  0100               	movlb	0	; () banked
 18166  003192  6F61               	movwf	(??_get_fattime+1)& (0+255),b
 18167  003194  3025               	rrcf	(get_fattime@f_time+4)^0,w,c
 18168  003196  6F60               	movwf	??_get_fattime& (0+255),b
 18169  003198  5023               	movf	(get_fattime@f_time+2)^0,w,c
 18170  00319A  6F62               	movwf	(??_get_fattime+2)& (0+255),b
 18171  00319C  5024               	movf	(get_fattime@f_time+3)^0,w,c
 18172  00319E  6F63               	movwf	(??_get_fattime+3)& (0+255),b
 18173  0031A0  6B64               	clrf	(??_get_fattime+4)& (0+255),b
 18174  0031A2  6B65               	clrf	(??_get_fattime+5)& (0+255),b
 18175  0031A4  0E05               	movlw	5
 18176  0031A6                     u11825:
 18177  0031A6  90D8               	bcf	status,0,c
 18178  0031A8  3762               	rlcf	(??_get_fattime+2)& (0+255),f,b
 18179  0031AA  3763               	rlcf	(??_get_fattime+3)& (0+255),f,b
 18180  0031AC  3764               	rlcf	(??_get_fattime+4)& (0+255),f,b
 18181  0031AE  3765               	rlcf	(??_get_fattime+5)& (0+255),f,b
 18182  0031B0  2EE8               	decfsz	wreg,f,c
 18183  0031B2  D7F9               	goto	u11825
 18184  0031B4  5021               	movf	get_fattime@f_time^0,w,c
 18185  0031B6  6F66               	movwf	(??_get_fattime+6)& (0+255),b
 18186  0031B8  5022               	movf	(get_fattime@f_time+1)^0,w,c
 18187  0031BA  6F67               	movwf	(??_get_fattime+7)& (0+255),b
 18188  0031BC  6B68               	clrf	(??_get_fattime+8)& (0+255),b
 18189  0031BE  6B69               	clrf	(??_get_fattime+9)& (0+255),b
 18190  0031C0  0E0B               	movlw	11
 18191  0031C2                     u11835:
 18192  0031C2  90D8               	bcf	status,0,c
 18193  0031C4  3766               	rlcf	(??_get_fattime+6)& (0+255),f,b
 18194  0031C6  3767               	rlcf	(??_get_fattime+7)& (0+255),f,b
 18195  0031C8  3768               	rlcf	(??_get_fattime+8)& (0+255),f,b
 18196  0031CA  3769               	rlcf	(??_get_fattime+9)& (0+255),f,b
 18197  0031CC  2EE8               	decfsz	wreg,f,c
 18198  0031CE  D7F9               	goto	u11835
 18199  0031D0  C027  F06A         	movff	get_fattime@f_time+6,??_get_fattime+10
 18200  0031D4  6B6B               	clrf	(??_get_fattime+11)& (0+255),b
 18201  0031D6  6B6C               	clrf	(??_get_fattime+12)& (0+255),b
 18202  0031D8  6B6D               	clrf	(??_get_fattime+13)& (0+255),b
 18203  0031DA  C06B  F06D         	movff	??_get_fattime+11,??_get_fattime+13
 18204  0031DE  C06A  F06C         	movff	??_get_fattime+10,??_get_fattime+12
 18205  0031E2  6B6B               	clrf	(??_get_fattime+11)& (0+255),b
 18206  0031E4  6B6A               	clrf	(??_get_fattime+10)& (0+255),b
 18207  0031E6  C028  F06E         	movff	get_fattime@f_time+7,??_get_fattime+14
 18208  0031EA  6B6F               	clrf	(??_get_fattime+15)& (0+255),b
 18209  0031EC  6B70               	clrf	(??_get_fattime+16)& (0+255),b
 18210  0031EE  6B71               	clrf	(??_get_fattime+17)& (0+255),b
 18211  0031F0  0E15               	movlw	21
 18212  0031F2                     u11845:
 18213  0031F2  90D8               	bcf	status,0,c
 18214  0031F4  376E               	rlcf	(??_get_fattime+14)& (0+255),f,b
 18215  0031F6  376F               	rlcf	(??_get_fattime+15)& (0+255),f,b
 18216  0031F8  3770               	rlcf	(??_get_fattime+16)& (0+255),f,b
 18217  0031FA  3771               	rlcf	(??_get_fattime+17)& (0+255),f,b
 18218  0031FC  2EE8               	decfsz	wreg,f,c
 18219  0031FE  D7F9               	goto	u11845
 18220  003200  0EC4               	movlw	196
 18221  003202  2429               	addwf	(get_fattime@f_time+8)^0,w,c
 18222  003204  6F72               	movwf	(??_get_fattime+18)& (0+255),b
 18223  003206  0EFF               	movlw	255
 18224  003208  202A               	addwfc	(get_fattime@f_time+9)^0,w,c
 18225  00320A  6F73               	movwf	(??_get_fattime+19)& (0+255),b
 18226  00320C  6B74               	clrf	(??_get_fattime+20)& (0+255),b
 18227  00320E  6B75               	clrf	(??_get_fattime+21)& (0+255),b
 18228  003210  0E19               	movlw	25
 18229  003212                     u11855:
 18230  003212  90D8               	bcf	status,0,c
 18231  003214  3772               	rlcf	(??_get_fattime+18)& (0+255),f,b
 18232  003216  3773               	rlcf	(??_get_fattime+19)& (0+255),f,b
 18233  003218  3774               	rlcf	(??_get_fattime+20)& (0+255),f,b
 18234  00321A  3775               	rlcf	(??_get_fattime+21)& (0+255),f,b
 18235  00321C  2EE8               	decfsz	wreg,f,c
 18236  00321E  D7F9               	goto	u11855
 18237  003220  516E               	movf	(??_get_fattime+14)& (0+255),w,b
 18238  003222  1172               	iorwf	(??_get_fattime+18)& (0+255),w,b
 18239  003224  6F76               	movwf	(??_get_fattime+22)& (0+255),b
 18240  003226  516F               	movf	(??_get_fattime+15)& (0+255),w,b
 18241  003228  1173               	iorwf	(??_get_fattime+19)& (0+255),w,b
 18242  00322A  6F77               	movwf	(??_get_fattime+23)& (0+255),b
 18243  00322C  5170               	movf	(??_get_fattime+16)& (0+255),w,b
 18244  00322E  1174               	iorwf	(??_get_fattime+20)& (0+255),w,b
 18245  003230  6F78               	movwf	(??_get_fattime+24)& (0+255),b
 18246  003232  5171               	movf	(??_get_fattime+17)& (0+255),w,b
 18247  003234  1175               	iorwf	(??_get_fattime+21)& (0+255),w,b
 18248  003236  6F79               	movwf	(??_get_fattime+25)& (0+255),b
 18249  003238  516A               	movf	(??_get_fattime+10)& (0+255),w,b
 18250  00323A  1176               	iorwf	(??_get_fattime+22)& (0+255),w,b
 18251  00323C  6F7A               	movwf	(??_get_fattime+26)& (0+255),b
 18252  00323E  516B               	movf	(??_get_fattime+11)& (0+255),w,b
 18253  003240  1177               	iorwf	(??_get_fattime+23)& (0+255),w,b
 18254  003242  6F7B               	movwf	(??_get_fattime+27)& (0+255),b
 18255  003244  516C               	movf	(??_get_fattime+12)& (0+255),w,b
 18256  003246  1178               	iorwf	(??_get_fattime+24)& (0+255),w,b
 18257  003248  6F7C               	movwf	(??_get_fattime+28)& (0+255),b
 18258  00324A  516D               	movf	(??_get_fattime+13)& (0+255),w,b
 18259  00324C  1179               	iorwf	(??_get_fattime+25)& (0+255),w,b
 18260  00324E  6F7D               	movwf	(??_get_fattime+29)& (0+255),b
 18261  003250  5166               	movf	(??_get_fattime+6)& (0+255),w,b
 18262  003252  117A               	iorwf	(??_get_fattime+26)& (0+255),w,b
 18263  003254  6F7E               	movwf	(??_get_fattime+30)& (0+255),b
 18264  003256  5167               	movf	(??_get_fattime+7)& (0+255),w,b
 18265  003258  117B               	iorwf	(??_get_fattime+27)& (0+255),w,b
 18266  00325A  6F7F               	movwf	(??_get_fattime+31)& (0+255),b
 18267  00325C  5168               	movf	(??_get_fattime+8)& (0+255),w,b
 18268  00325E  117C               	iorwf	(??_get_fattime+28)& (0+255),w,b
 18269  003260  6F80               	movwf	(??_get_fattime+32)& (0+255),b
 18270  003262  5169               	movf	(??_get_fattime+9)& (0+255),w,b
 18271  003264  117D               	iorwf	(??_get_fattime+29)& (0+255),w,b
 18272  003266  6F81               	movwf	(??_get_fattime+33)& (0+255),b
 18273  003268  5162               	movf	(??_get_fattime+2)& (0+255),w,b
 18274  00326A  117E               	iorwf	(??_get_fattime+30)& (0+255),w,b
 18275  00326C  6F82               	movwf	(??_get_fattime+34)& (0+255),b
 18276  00326E  5163               	movf	(??_get_fattime+3)& (0+255),w,b
 18277  003270  117F               	iorwf	(??_get_fattime+31)& (0+255),w,b
 18278  003272  6F83               	movwf	(??_get_fattime+35)& (0+255),b
 18279  003274  5164               	movf	(??_get_fattime+4)& (0+255),w,b
 18280  003276  1180               	iorwf	(??_get_fattime+32)& (0+255),w,b
 18281  003278  6F84               	movwf	(??_get_fattime+36)& (0+255),b
 18282  00327A  5165               	movf	(??_get_fattime+5)& (0+255),w,b
 18283  00327C  1181               	iorwf	(??_get_fattime+33)& (0+255),w,b
 18284  00327E  6F85               	movwf	(??_get_fattime+37)& (0+255),b
 18285  003280  5160               	movf	??_get_fattime& (0+255),w,b
 18286  003282  1182               	iorwf	(??_get_fattime+34)& (0+255),w,b
 18287  003284  6E1D               	movwf	?_get_fattime^0,c
 18288  003286  5161               	movf	(??_get_fattime+1)& (0+255),w,b
 18289  003288  1183               	iorwf	(??_get_fattime+35)& (0+255),w,b
 18290  00328A  6E1E               	movwf	(?_get_fattime+1)^0,c
 18291  00328C  0E00               	movlw	0
 18292  00328E  1184               	iorwf	(??_get_fattime+36)& (0+255),w,b
 18293  003290  6E1F               	movwf	(?_get_fattime+2)^0,c
 18294  003292  0E00               	movlw	0
 18295  003294  1185               	iorwf	(??_get_fattime+37)& (0+255),w,b
 18296  003296  6E20               	movwf	(?_get_fattime+3)^0,c
 18297                           
 18298                           ; BSR set to: 0
 18299  003298  0012               	return		;funcret
 18300  00329A                     __end_of_get_fattime:
 18301                           	callstack 0
 18302                           
 18303 ;; *************** function _GPSyear *****************
 18304 ;; Defined at:
 18305 ;;		line 179 in file "bibliotecas/GPS.c"
 18306 ;; Parameters:    Size  Location     Type
 18307 ;;		None
 18308 ;; Auto vars:     Size  Location     Type
 18309 ;;		None
 18310 ;; Return value:  Size  Location     Type
 18311 ;;                  2   24[COMRAM] unsigned int 
 18312 ;; Registers used:
 18313 ;;		wreg, status,2, status,0, prodl, prodh
 18314 ;; Tracked objects:
 18315 ;;		On entry : 3F/1
 18316 ;;		On exit  : 3F/1
 18317 ;;		Unchanged: 0/0
 18318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18319 ;;      Params:         2       0       0       0       0       0       0       0       0
 18320 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18321 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18322 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18323 ;;Total ram usage:        4 bytes
 18324 ;; Hardware stack levels used:    1
 18325 ;; Hardware stack levels required when called:    3
 18326 ;; This function calls:
 18327 ;;		Nothing
 18328 ;; This function is called by:
 18329 ;;		_get_fattime
 18330 ;; This function uses a non-reentrant model
 18331 ;;
 18332                           
 18333                           	psect	text97
 18334  005214                     __ptext97:
 18335                           	callstack 0
 18336  005214                     _GPSyear:
 18337                           	callstack 21
 18338                           
 18339                           ; BSR set to: 1
 18340                           ;GPS.c: 181: return ((rawDate[4] - '0') * 10 + (rawDate[5] - '0'));
 18341                           
 18342                           ; BSR set to: 0
 18343                           ;incstack = 0
 18344  005214  51C8               	movf	(_rawDate+4)& (0+255),w,b
 18345  005216  0D0A               	mullw	10
 18346  005218  CFF3 F01B          	movff	prodl,??_GPSyear
 18347  00521C  CFF4 F01C          	movff	prodh,??_GPSyear+1
 18348  005220  51C9               	movf	(_rawDate+5)& (0+255),w,b
 18349  005222  261B               	addwf	??_GPSyear^0,f,c
 18350  005224  0E00               	movlw	0
 18351  005226  221C               	addwfc	(??_GPSyear+1)^0,f,c
 18352  005228  0EF0               	movlw	240
 18353  00522A  241B               	addwf	??_GPSyear^0,w,c
 18354  00522C  6E19               	movwf	?_GPSyear^0,c
 18355  00522E  0EFD               	movlw	253
 18356  005230  201C               	addwfc	(??_GPSyear+1)^0,w,c
 18357  005232  6E1A               	movwf	(?_GPSyear+1)^0,c
 18358                           
 18359                           ; BSR set to: 1
 18360  005234  0012               	return		;funcret
 18361  005236                     __end_of_GPSyear:
 18362                           	callstack 0
 18363                           
 18364 ;; *************** function _GPSSecond *****************
 18365 ;; Defined at:
 18366 ;;		line 158 in file "bibliotecas/GPS.c"
 18367 ;; Parameters:    Size  Location     Type
 18368 ;;		None
 18369 ;; Auto vars:     Size  Location     Type
 18370 ;;		None
 18371 ;; Return value:  Size  Location     Type
 18372 ;;                  2   24[COMRAM] unsigned int 
 18373 ;; Registers used:
 18374 ;;		wreg, status,2, status,0, prodl, prodh
 18375 ;; Tracked objects:
 18376 ;;		On entry : 3F/1
 18377 ;;		On exit  : 3F/1
 18378 ;;		Unchanged: 0/0
 18379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18380 ;;      Params:         2       0       0       0       0       0       0       0       0
 18381 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18382 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18383 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18384 ;;Total ram usage:        4 bytes
 18385 ;; Hardware stack levels used:    1
 18386 ;; Hardware stack levels required when called:    3
 18387 ;; This function calls:
 18388 ;;		Nothing
 18389 ;; This function is called by:
 18390 ;;		_get_fattime
 18391 ;; This function uses a non-reentrant model
 18392 ;;
 18393                           
 18394                           	psect	text98
 18395  005236                     __ptext98:
 18396                           	callstack 0
 18397  005236                     _GPSSecond:
 18398                           	callstack 21
 18399                           
 18400                           ; BSR set to: 1
 18401                           ;GPS.c: 160: return ((rawTime[4] - '0') * 10 + (rawTime[5] - '0'));
 18402                           
 18403                           ; BSR set to: 1
 18404                           ;incstack = 0
 18405  005236  51BD               	movf	(_rawTime+4)& (0+255),w,b
 18406  005238  0D0A               	mullw	10
 18407  00523A  CFF3 F01B          	movff	prodl,??_GPSSecond
 18408  00523E  CFF4 F01C          	movff	prodh,??_GPSSecond+1
 18409  005242  51BE               	movf	(_rawTime+5)& (0+255),w,b
 18410  005244  261B               	addwf	??_GPSSecond^0,f,c
 18411  005246  0E00               	movlw	0
 18412  005248  221C               	addwfc	(??_GPSSecond+1)^0,f,c
 18413  00524A  0EF0               	movlw	240
 18414  00524C  241B               	addwf	??_GPSSecond^0,w,c
 18415  00524E  6E19               	movwf	?_GPSSecond^0,c
 18416  005250  0EFD               	movlw	253
 18417  005252  201C               	addwfc	(??_GPSSecond+1)^0,w,c
 18418  005254  6E1A               	movwf	(?_GPSSecond+1)^0,c
 18419                           
 18420                           ; BSR set to: 1
 18421  005256  0012               	return		;funcret
 18422  005258                     __end_of_GPSSecond:
 18423                           	callstack 0
 18424                           
 18425 ;; *************** function _GPSMonth *****************
 18426 ;; Defined at:
 18427 ;;		line 175 in file "bibliotecas/GPS.c"
 18428 ;; Parameters:    Size  Location     Type
 18429 ;;		None
 18430 ;; Auto vars:     Size  Location     Type
 18431 ;;		None
 18432 ;; Return value:  Size  Location     Type
 18433 ;;                  2   24[COMRAM] unsigned int 
 18434 ;; Registers used:
 18435 ;;		wreg, status,2, status,0, prodl, prodh
 18436 ;; Tracked objects:
 18437 ;;		On entry : 3F/1
 18438 ;;		On exit  : 3F/1
 18439 ;;		Unchanged: 0/0
 18440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18441 ;;      Params:         2       0       0       0       0       0       0       0       0
 18442 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18443 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18444 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18445 ;;Total ram usage:        4 bytes
 18446 ;; Hardware stack levels used:    1
 18447 ;; Hardware stack levels required when called:    3
 18448 ;; This function calls:
 18449 ;;		Nothing
 18450 ;; This function is called by:
 18451 ;;		_get_fattime
 18452 ;; This function uses a non-reentrant model
 18453 ;;
 18454                           
 18455                           	psect	text99
 18456  005258                     __ptext99:
 18457                           	callstack 0
 18458  005258                     _GPSMonth:
 18459                           	callstack 21
 18460                           
 18461                           ; BSR set to: 1
 18462                           ;GPS.c: 177: return ((rawDate[2] - '0') * 10 + (rawDate[3] - '0'));
 18463                           
 18464                           ; BSR set to: 1
 18465                           ;incstack = 0
 18466  005258  51C6               	movf	(_rawDate+2)& (0+255),w,b
 18467  00525A  0D0A               	mullw	10
 18468  00525C  CFF3 F01B          	movff	prodl,??_GPSMonth
 18469  005260  CFF4 F01C          	movff	prodh,??_GPSMonth+1
 18470  005264  51C7               	movf	(_rawDate+3)& (0+255),w,b
 18471  005266  261B               	addwf	??_GPSMonth^0,f,c
 18472  005268  0E00               	movlw	0
 18473  00526A  221C               	addwfc	(??_GPSMonth+1)^0,f,c
 18474  00526C  0EF0               	movlw	240
 18475  00526E  241B               	addwf	??_GPSMonth^0,w,c
 18476  005270  6E19               	movwf	?_GPSMonth^0,c
 18477  005272  0EFD               	movlw	253
 18478  005274  201C               	addwfc	(??_GPSMonth+1)^0,w,c
 18479  005276  6E1A               	movwf	(?_GPSMonth+1)^0,c
 18480                           
 18481                           ; BSR set to: 1
 18482  005278  0012               	return		;funcret
 18483  00527A                     __end_of_GPSMonth:
 18484                           	callstack 0
 18485                           
 18486 ;; *************** function _GPSMinute *****************
 18487 ;; Defined at:
 18488 ;;		line 162 in file "bibliotecas/GPS.c"
 18489 ;; Parameters:    Size  Location     Type
 18490 ;;		None
 18491 ;; Auto vars:     Size  Location     Type
 18492 ;;		None
 18493 ;; Return value:  Size  Location     Type
 18494 ;;                  2   24[COMRAM] unsigned int 
 18495 ;; Registers used:
 18496 ;;		wreg, status,2, status,0, prodl, prodh
 18497 ;; Tracked objects:
 18498 ;;		On entry : 3F/1
 18499 ;;		On exit  : 3F/1
 18500 ;;		Unchanged: 0/0
 18501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18502 ;;      Params:         2       0       0       0       0       0       0       0       0
 18503 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18504 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18505 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18506 ;;Total ram usage:        4 bytes
 18507 ;; Hardware stack levels used:    1
 18508 ;; Hardware stack levels required when called:    3
 18509 ;; This function calls:
 18510 ;;		Nothing
 18511 ;; This function is called by:
 18512 ;;		_get_fattime
 18513 ;; This function uses a non-reentrant model
 18514 ;;
 18515                           
 18516                           	psect	text100
 18517  00527A                     __ptext100:
 18518                           	callstack 0
 18519  00527A                     _GPSMinute:
 18520                           	callstack 21
 18521                           
 18522                           ; BSR set to: 1
 18523                           ;GPS.c: 164: return ((rawTime[2] - '0') * 10 + (rawTime[3] - '0'));
 18524                           
 18525                           ; BSR set to: 1
 18526                           ;incstack = 0
 18527  00527A  51BB               	movf	(_rawTime+2)& (0+255),w,b
 18528  00527C  0D0A               	mullw	10
 18529  00527E  CFF3 F01B          	movff	prodl,??_GPSMinute
 18530  005282  CFF4 F01C          	movff	prodh,??_GPSMinute+1
 18531  005286  51BC               	movf	(_rawTime+3)& (0+255),w,b
 18532  005288  261B               	addwf	??_GPSMinute^0,f,c
 18533  00528A  0E00               	movlw	0
 18534  00528C  221C               	addwfc	(??_GPSMinute+1)^0,f,c
 18535  00528E  0EF0               	movlw	240
 18536  005290  241B               	addwf	??_GPSMinute^0,w,c
 18537  005292  6E19               	movwf	?_GPSMinute^0,c
 18538  005294  0EFD               	movlw	253
 18539  005296  201C               	addwfc	(??_GPSMinute+1)^0,w,c
 18540  005298  6E1A               	movwf	(?_GPSMinute+1)^0,c
 18541                           
 18542                           ; BSR set to: 1
 18543  00529A  0012               	return		;funcret
 18544  00529C                     __end_of_GPSMinute:
 18545                           	callstack 0
 18546                           
 18547 ;; *************** function _GPSHour *****************
 18548 ;; Defined at:
 18549 ;;		line 166 in file "bibliotecas/GPS.c"
 18550 ;; Parameters:    Size  Location     Type
 18551 ;;		None
 18552 ;; Auto vars:     Size  Location     Type
 18553 ;;		None
 18554 ;; Return value:  Size  Location     Type
 18555 ;;                  2   24[COMRAM] unsigned int 
 18556 ;; Registers used:
 18557 ;;		wreg, status,2, status,0, prodl, prodh
 18558 ;; Tracked objects:
 18559 ;;		On entry : 3F/0
 18560 ;;		On exit  : 3F/1
 18561 ;;		Unchanged: 0/0
 18562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18563 ;;      Params:         2       0       0       0       0       0       0       0       0
 18564 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18565 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18566 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18567 ;;Total ram usage:        4 bytes
 18568 ;; Hardware stack levels used:    1
 18569 ;; Hardware stack levels required when called:    3
 18570 ;; This function calls:
 18571 ;;		Nothing
 18572 ;; This function is called by:
 18573 ;;		_get_fattime
 18574 ;; This function uses a non-reentrant model
 18575 ;;
 18576                           
 18577                           	psect	text101
 18578  0051AC                     __ptext101:
 18579                           	callstack 0
 18580  0051AC                     _GPSHour:
 18581                           	callstack 21
 18582                           
 18583                           ; BSR set to: 0
 18584                           ;GPS.c: 168: return (((rawTime[0] - '0') * 10 + (rawTime[1] - '0')));
 18585                           
 18586                           ; BSR set to: 1
 18587                           ;incstack = 0
 18588  0051AC  0101               	movlb	1	; () banked
 18589  0051AE  51B9               	movf	_rawTime& (0+255),w,b
 18590  0051B0  0D0A               	mullw	10
 18591  0051B2  CFF3 F01B          	movff	prodl,??_GPSHour
 18592  0051B6  CFF4 F01C          	movff	prodh,??_GPSHour+1
 18593  0051BA  51BA               	movf	(_rawTime+1)& (0+255),w,b
 18594  0051BC  261B               	addwf	??_GPSHour^0,f,c
 18595  0051BE  0E00               	movlw	0
 18596  0051C0  221C               	addwfc	(??_GPSHour+1)^0,f,c
 18597  0051C2  0EF0               	movlw	240
 18598  0051C4  241B               	addwf	??_GPSHour^0,w,c
 18599  0051C6  6E19               	movwf	?_GPSHour^0,c
 18600  0051C8  0EFD               	movlw	253
 18601  0051CA  201C               	addwfc	(??_GPSHour+1)^0,w,c
 18602  0051CC  6E1A               	movwf	(?_GPSHour+1)^0,c
 18603                           
 18604                           ; BSR set to: 1
 18605  0051CE  0012               	return		;funcret
 18606  0051D0                     __end_of_GPSHour:
 18607                           	callstack 0
 18608                           
 18609 ;; *************** function _GPSDay *****************
 18610 ;; Defined at:
 18611 ;;		line 171 in file "bibliotecas/GPS.c"
 18612 ;; Parameters:    Size  Location     Type
 18613 ;;		None
 18614 ;; Auto vars:     Size  Location     Type
 18615 ;;		None
 18616 ;; Return value:  Size  Location     Type
 18617 ;;                  2   24[COMRAM] unsigned int 
 18618 ;; Registers used:
 18619 ;;		wreg, status,2, status,0, prodl, prodh
 18620 ;; Tracked objects:
 18621 ;;		On entry : 3F/1
 18622 ;;		On exit  : 3F/1
 18623 ;;		Unchanged: 0/0
 18624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18625 ;;      Params:         2       0       0       0       0       0       0       0       0
 18626 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18627 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18628 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18629 ;;Total ram usage:        4 bytes
 18630 ;; Hardware stack levels used:    1
 18631 ;; Hardware stack levels required when called:    3
 18632 ;; This function calls:
 18633 ;;		Nothing
 18634 ;; This function is called by:
 18635 ;;		_get_fattime
 18636 ;; This function uses a non-reentrant model
 18637 ;;
 18638                           
 18639                           	psect	text102
 18640  00529C                     __ptext102:
 18641                           	callstack 0
 18642  00529C                     _GPSDay:
 18643                           	callstack 21
 18644                           
 18645                           ; BSR set to: 1
 18646                           ;GPS.c: 173: return ((rawDate[0] - '0') * 10 + (rawDate[1] - '0'));
 18647                           
 18648                           ; BSR set to: 1
 18649                           ;incstack = 0
 18650  00529C  51C4               	movf	_rawDate& (0+255),w,b
 18651  00529E  0D0A               	mullw	10
 18652  0052A0  CFF3 F01B          	movff	prodl,??_GPSDay
 18653  0052A4  CFF4 F01C          	movff	prodh,??_GPSDay+1
 18654  0052A8  51C5               	movf	(_rawDate+1)& (0+255),w,b
 18655  0052AA  261B               	addwf	??_GPSDay^0,f,c
 18656  0052AC  0E00               	movlw	0
 18657  0052AE  221C               	addwfc	(??_GPSDay+1)^0,f,c
 18658  0052B0  0EF0               	movlw	240
 18659  0052B2  241B               	addwf	??_GPSDay^0,w,c
 18660  0052B4  6E19               	movwf	?_GPSDay^0,c
 18661  0052B6  0EFD               	movlw	253
 18662  0052B8  201C               	addwfc	(??_GPSDay+1)^0,w,c
 18663  0052BA  6E1A               	movwf	(?_GPSDay+1)^0,c
 18664                           
 18665                           ; BSR set to: 1
 18666  0052BC  0012               	return		;funcret
 18667  0052BE                     __end_of_GPSDay:
 18668                           	callstack 0
 18669                           
 18670 ;; *************** function _dados_gps_to_sd *****************
 18671 ;; Defined at:
 18672 ;;		line 224 in file "bibliotecas/GPS.c"
 18673 ;; Parameters:    Size  Location     Type
 18674 ;;		None
 18675 ;; Auto vars:     Size  Location     Type
 18676 ;;		None
 18677 ;; Return value:  Size  Location     Type
 18678 ;;                  1    wreg      void 
 18679 ;; Registers used:
 18680 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18681 ;; Tracked objects:
 18682 ;;		On entry : 0/0
 18683 ;;		On exit  : 0/0
 18684 ;;		Unchanged: 0/0
 18685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18686 ;;      Params:         0       0       0       0       0       0       0       0       0
 18687 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18688 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18689 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18690 ;;Total ram usage:        0 bytes
 18691 ;; Hardware stack levels used:    1
 18692 ;; Hardware stack levels required when called:    5
 18693 ;; This function calls:
 18694 ;;		_monta_sd
 18695 ;; This function is called by:
 18696 ;;		_escrita_sdcard
 18697 ;; This function uses a non-reentrant model
 18698 ;;
 18699                           
 18700                           	psect	text103
 18701  004A1A                     __ptext103:
 18702                           	callstack 0
 18703  004A1A                     _dados_gps_to_sd:
 18704                           	callstack 21
 18705                           
 18706                           ;GPS.c: 226: monta_sd(0, rawTime);
 18707                           
 18708                           ; BSR set to: 1
 18709                           ;incstack = 0
 18710  004A1A  0EB9               	movlw	low _rawTime
 18711  004A1C  6E1D               	movwf	monta_sd@dado^0,c
 18712  004A1E  0E01               	movlw	high _rawTime
 18713  004A20  6E1E               	movwf	(monta_sd@dado+1)^0,c
 18714  004A22  0E00               	movlw	0
 18715  004A24  EC96  F012         	call	_monta_sd
 18716                           
 18717                           ;GPS.c: 227: monta_sd(1, rawDate);
 18718  004A28  0EC4               	movlw	low _rawDate
 18719  004A2A  6E1D               	movwf	monta_sd@dado^0,c
 18720  004A2C  0E01               	movlw	high _rawDate
 18721  004A2E  6E1E               	movwf	(monta_sd@dado+1)^0,c
 18722  004A30  0E01               	movlw	1
 18723  004A32  EC96  F012         	call	_monta_sd
 18724                           
 18725                           ;GPS.c: 228: monta_sd(2, rawLatitude);
 18726  004A36  0EA0               	movlw	low _rawLatitude
 18727  004A38  6E1D               	movwf	monta_sd@dado^0,c
 18728  004A3A  0E01               	movlw	high _rawLatitude
 18729  004A3C  6E1E               	movwf	(monta_sd@dado+1)^0,c
 18730  004A3E  0E02               	movlw	2
 18731  004A40  EC96  F012         	call	_monta_sd
 18732                           
 18733                           ;GPS.c: 229: monta_sd(3, rawLongitude);
 18734  004A44  0E93               	movlw	low _rawLongitude
 18735  004A46  6E1D               	movwf	monta_sd@dado^0,c
 18736  004A48  0E01               	movlw	high _rawLongitude
 18737  004A4A  6E1E               	movwf	(monta_sd@dado+1)^0,c
 18738  004A4C  0E03               	movlw	3
 18739  004A4E  EC96  F012         	call	_monta_sd
 18740                           
 18741                           ;GPS.c: 230: monta_sd(5, rawTime);
 18742  004A52  0EB9               	movlw	low _rawTime
 18743  004A54  6E1D               	movwf	monta_sd@dado^0,c
 18744  004A56  0E01               	movlw	high _rawTime
 18745  004A58  6E1E               	movwf	(monta_sd@dado+1)^0,c
 18746  004A5A  0E05               	movlw	5
 18747  004A5C  EC96  F012         	call	_monta_sd
 18748                           
 18749                           ;GPS.c: 231: monta_sd(6, rawDate);
 18750  004A60  0EC4               	movlw	low _rawDate
 18751  004A62  6E1D               	movwf	monta_sd@dado^0,c
 18752  004A64  0E01               	movlw	high _rawDate
 18753  004A66  6E1E               	movwf	(monta_sd@dado+1)^0,c
 18754  004A68  0E06               	movlw	6
 18755  004A6A  EC96  F012         	call	_monta_sd
 18756                           
 18757                           ;GPS.c: 232: monta_sd(7, rawSpeed);
 18758  004A6E  0ECB               	movlw	low _rawSpeed
 18759  004A70  6E1D               	movwf	monta_sd@dado^0,c
 18760  004A72  0E01               	movlw	high _rawSpeed
 18761  004A74  6E1E               	movwf	(monta_sd@dado+1)^0,c
 18762  004A76  0E07               	movlw	7
 18763  004A78  EC96  F012         	call	_monta_sd
 18764  004A7C  0012               	return		;funcret
 18765  004A7E                     __end_of_dados_gps_to_sd:
 18766                           	callstack 0
 18767                           
 18768 ;; *************** function _monta_sd *****************
 18769 ;; Defined at:
 18770 ;;		line 308 in file "bibliotecas/SDCard.c"
 18771 ;; Parameters:    Size  Location     Type
 18772 ;;  index           1    wreg     unsigned char 
 18773 ;;  dado            2   28[COMRAM] PTR unsigned char 
 18774 ;;		 -> STR_27(7), STR_26(5), rawDate(7), rawSpeed(6), 
 18775 ;;		 -> rawLongitude(13), rawLatitude(13), rawTime(11), 
 18776 ;; Auto vars:     Size  Location     Type
 18777 ;;  index           1   30[COMRAM] unsigned char 
 18778 ;;  i               1   32[COMRAM] unsigned char 
 18779 ;;  size            1   31[COMRAM] unsigned char 
 18780 ;; Return value:  Size  Location     Type
 18781 ;;                  1    wreg      void 
 18782 ;; Registers used:
 18783 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18784 ;; Tracked objects:
 18785 ;;		On entry : 0/1
 18786 ;;		On exit  : 0/0
 18787 ;;		Unchanged: 0/0
 18788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18789 ;;      Params:         2       0       0       0       0       0       0       0       0
 18790 ;;      Locals:         3       0       0       0       0       0       0       0       0
 18791 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18792 ;;      Totals:         5       0       0       0       0       0       0       0       0
 18793 ;;Total ram usage:        5 bytes
 18794 ;; Hardware stack levels used:    1
 18795 ;; Hardware stack levels required when called:    4
 18796 ;; This function calls:
 18797 ;;		_strlen
 18798 ;; This function is called by:
 18799 ;;		_dados_gps_to_sd
 18800 ;;		_verifica_fence_externo
 18801 ;; This function uses a non-reentrant model
 18802 ;;
 18803                           
 18804                           	psect	text104
 18805  00252C                     __ptext104:
 18806                           	callstack 0
 18807  00252C                     _monta_sd:
 18808                           	callstack 23
 18809                           
 18810                           ;incstack = 0
 18811                           ;monta_sd@index stored from wreg
 18812  00252C  6E1F               	movwf	monta_sd@index^0,c
 18813                           
 18814                           ;SDCard.c: 310: unsigned char i, size;;SDCard.c: 311: size = strlen(dado);
 18815  00252E  C01D  F019         	movff	monta_sd@dado,strlen@s
 18816  002532  C01E  F01A         	movff	monta_sd@dado+1,strlen@s+1
 18817  002536  EC86  F027         	call	_strlen	;wreg free
 18818  00253A  5019               	movf	?_strlen^0,w,c
 18819  00253C  6E20               	movwf	monta_sd@size^0,c
 18820                           
 18821                           ;SDCard.c: 312: switch(index)
 18822  00253E  D102               	goto	l10579
 18823  002540                     l10469:
 18824                           
 18825                           ;SDCard.c: 315: for(i=0; i<6;i++)
 18826  002540  0E00               	movlw	0
 18827  002542  6E21               	movwf	monta_sd@i^0,c
 18828  002544                     l10475:
 18829                           
 18830                           ;SDCard.c: 316: {;SDCard.c: 317: string_dado.hora[i] = *dado;
 18831  002544  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 18832  002548  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 18833  00254C  6AF8               	clrf	tblptru,c
 18834  00254E  0E07               	movlw	low (_string_dado+7)
 18835  002550  2421               	addwf	monta_sd@i^0,w,c
 18836  002552  6ED9               	movwf	fsr2l,c
 18837  002554  6ADA               	clrf	fsr2h,c
 18838  002556  0E02               	movlw	high (_string_dado+7)
 18839  002558  22DA               	addwfc	fsr2h,f,c
 18840  00255A  0E07               	movlw	(high __ramtop+-1)
 18841  00255C  64F7               	cpfsgt	tblptrh,c
 18842  00255E  D003               	bra	u11957
 18843  002560  0008               	tblrd		*
 18844  002562  50F5               	movf	tablat,w,c
 18845  002564  D005               	bra	u11950
 18846  002566                     u11957:
 18847  002566  CFF6 FFE1          	movff	tblptrl,fsr1l
 18848  00256A  CFF7 FFE2          	movff	tblptrh,fsr1h
 18849  00256E  50E7               	movf	indf1,w,c
 18850  002570                     u11950:
 18851  002570  6EDF               	movwf	indf2,c
 18852                           
 18853                           ;SDCard.c: 318: dado++;
 18854  002572  4A1D               	infsnz	monta_sd@dado^0,f,c
 18855  002574  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 18856  002576  2A21               	incf	monta_sd@i^0,f,c
 18857  002578  0E05               	movlw	5
 18858  00257A  6421               	cpfsgt	monta_sd@i^0,c
 18859  00257C  D7E3               	goto	l10475
 18860  00257E  0012               	return	
 18861  002580                     l10483:
 18862                           
 18863                           ;SDCard.c: 323: for(i=0; i<6;i++)
 18864  002580  0E00               	movlw	0
 18865  002582  6E21               	movwf	monta_sd@i^0,c
 18866  002584                     l10489:
 18867                           
 18868                           ;SDCard.c: 324: {;SDCard.c: 325: string_dado.data[i] = *dado;
 18869  002584  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 18870  002588  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 18871  00258C  6AF8               	clrf	tblptru,c
 18872  00258E  0E00               	movlw	low _string_dado
 18873  002590  2421               	addwf	monta_sd@i^0,w,c
 18874  002592  6ED9               	movwf	fsr2l,c
 18875  002594  6ADA               	clrf	fsr2h,c
 18876  002596  0E02               	movlw	high _string_dado
 18877  002598  22DA               	addwfc	fsr2h,f,c
 18878  00259A  0E07               	movlw	(high __ramtop+-1)
 18879  00259C  64F7               	cpfsgt	tblptrh,c
 18880  00259E  D003               	bra	u11977
 18881  0025A0  0008               	tblrd		*
 18882  0025A2  50F5               	movf	tablat,w,c
 18883  0025A4  D005               	bra	u11970
 18884  0025A6                     u11977:
 18885  0025A6  CFF6 FFE1          	movff	tblptrl,fsr1l
 18886  0025AA  CFF7 FFE2          	movff	tblptrh,fsr1h
 18887  0025AE  50E7               	movf	indf1,w,c
 18888  0025B0                     u11970:
 18889  0025B0  6EDF               	movwf	indf2,c
 18890                           
 18891                           ;SDCard.c: 326: dado++;
 18892  0025B2  4A1D               	infsnz	monta_sd@dado^0,f,c
 18893  0025B4  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 18894  0025B6  2A21               	incf	monta_sd@i^0,f,c
 18895  0025B8  0E05               	movlw	5
 18896  0025BA  6421               	cpfsgt	monta_sd@i^0,c
 18897  0025BC  D7E3               	goto	l10489
 18898  0025BE  0012               	return	
 18899  0025C0                     l10497:
 18900                           
 18901                           ;SDCard.c: 331: for(i=0; i<13;i++)
 18902  0025C0  0E00               	movlw	0
 18903  0025C2  6E21               	movwf	monta_sd@i^0,c
 18904  0025C4                     l10503:
 18905                           
 18906                           ;SDCard.c: 332: {;SDCard.c: 333: string_dado.lt[i] = *dado;
 18907  0025C4  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 18908  0025C8  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 18909  0025CC  6AF8               	clrf	tblptru,c
 18910  0025CE  0E16               	movlw	low (_string_dado+22)
 18911  0025D0  2421               	addwf	monta_sd@i^0,w,c
 18912  0025D2  6ED9               	movwf	fsr2l,c
 18913  0025D4  6ADA               	clrf	fsr2h,c
 18914  0025D6  0E02               	movlw	high (_string_dado+22)
 18915  0025D8  22DA               	addwfc	fsr2h,f,c
 18916  0025DA  0E07               	movlw	(high __ramtop+-1)
 18917  0025DC  64F7               	cpfsgt	tblptrh,c
 18918  0025DE  D003               	bra	u11997
 18919  0025E0  0008               	tblrd		*
 18920  0025E2  50F5               	movf	tablat,w,c
 18921  0025E4  D005               	bra	u11990
 18922  0025E6                     u11997:
 18923  0025E6  CFF6 FFE1          	movff	tblptrl,fsr1l
 18924  0025EA  CFF7 FFE2          	movff	tblptrh,fsr1h
 18925  0025EE  50E7               	movf	indf1,w,c
 18926  0025F0                     u11990:
 18927  0025F0  6EDF               	movwf	indf2,c
 18928                           
 18929                           ;SDCard.c: 334: dado++;
 18930  0025F2  4A1D               	infsnz	monta_sd@dado^0,f,c
 18931  0025F4  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 18932  0025F6  2A21               	incf	monta_sd@i^0,f,c
 18933  0025F8  0E0C               	movlw	12
 18934  0025FA  6421               	cpfsgt	monta_sd@i^0,c
 18935  0025FC  D7E3               	goto	l10503
 18936  0025FE  0012               	return	
 18937  002600                     l10511:
 18938                           
 18939                           ;SDCard.c: 339: for(i=0; i<13;i++)
 18940  002600  0E00               	movlw	0
 18941  002602  6E21               	movwf	monta_sd@i^0,c
 18942  002604                     l10517:
 18943                           
 18944                           ;SDCard.c: 340: {;SDCard.c: 341: string_dado.lo[i] = *dado;
 18945  002604  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 18946  002608  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 18947  00260C  6AF8               	clrf	tblptru,c
 18948  00260E  0E23               	movlw	low (_string_dado+35)
 18949  002610  2421               	addwf	monta_sd@i^0,w,c
 18950  002612  6ED9               	movwf	fsr2l,c
 18951  002614  6ADA               	clrf	fsr2h,c
 18952  002616  0E02               	movlw	high (_string_dado+35)
 18953  002618  22DA               	addwfc	fsr2h,f,c
 18954  00261A  0E07               	movlw	(high __ramtop+-1)
 18955  00261C  64F7               	cpfsgt	tblptrh,c
 18956  00261E  D003               	bra	u12017
 18957  002620  0008               	tblrd		*
 18958  002622  50F5               	movf	tablat,w,c
 18959  002624  D005               	bra	u12010
 18960  002626                     u12017:
 18961  002626  CFF6 FFE1          	movff	tblptrl,fsr1l
 18962  00262A  CFF7 FFE2          	movff	tblptrh,fsr1h
 18963  00262E  50E7               	movf	indf1,w,c
 18964  002630                     u12010:
 18965  002630  6EDF               	movwf	indf2,c
 18966                           
 18967                           ;SDCard.c: 342: dado++;
 18968  002632  4A1D               	infsnz	monta_sd@dado^0,f,c
 18969  002634  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 18970  002636  2A21               	incf	monta_sd@i^0,f,c
 18971  002638  0E0C               	movlw	12
 18972  00263A  6421               	cpfsgt	monta_sd@i^0,c
 18973  00263C  D7E3               	goto	l10517
 18974  00263E  0012               	return	
 18975  002640                     l10525:
 18976                           
 18977                           ;SDCard.c: 348: for(i=0; i<size;i++)
 18978  002640  0E00               	movlw	0
 18979  002642  6E21               	movwf	monta_sd@i^0,c
 18980  002644  D01A               	goto	l10533
 18981  002646                     l10527:
 18982                           
 18983                           ;SDCard.c: 349: {;SDCard.c: 350: string_dado.fence[i] = *dado;
 18984  002646  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 18985  00264A  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 18986  00264E  6AF8               	clrf	tblptru,c
 18987  002650  0E34               	movlw	low (_string_dado+52)
 18988  002652  2421               	addwf	monta_sd@i^0,w,c
 18989  002654  6ED9               	movwf	fsr2l,c
 18990  002656  6ADA               	clrf	fsr2h,c
 18991  002658  0E02               	movlw	high (_string_dado+52)
 18992  00265A  22DA               	addwfc	fsr2h,f,c
 18993  00265C  0E07               	movlw	(high __ramtop+-1)
 18994  00265E  64F7               	cpfsgt	tblptrh,c
 18995  002660  D003               	bra	u12037
 18996  002662  0008               	tblrd		*
 18997  002664  50F5               	movf	tablat,w,c
 18998  002666  D005               	bra	u12030
 18999  002668                     u12037:
 19000  002668  CFF6 FFE1          	movff	tblptrl,fsr1l
 19001  00266C  CFF7 FFE2          	movff	tblptrh,fsr1h
 19002  002670  50E7               	movf	indf1,w,c
 19003  002672                     u12030:
 19004  002672  6EDF               	movwf	indf2,c
 19005                           
 19006                           ;SDCard.c: 351: dado++;
 19007  002674  4A1D               	infsnz	monta_sd@dado^0,f,c
 19008  002676  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 19009  002678  2A21               	incf	monta_sd@i^0,f,c
 19010  00267A                     l10533:
 19011  00267A  5020               	movf	monta_sd@size^0,w,c
 19012  00267C  5C21               	subwf	monta_sd@i^0,w,c
 19013  00267E  B0D8               	btfsc	status,0,c
 19014  002680  0012               	return	
 19015  002682  D7E1               	goto	l10527
 19016  002684                     l10535:
 19017                           
 19018                           ;SDCard.c: 356: for(i=0; i<4;i++)
 19019  002684  0E00               	movlw	0
 19020  002686  6E21               	movwf	monta_sd@i^0,c
 19021  002688                     l10541:
 19022                           
 19023                           ;SDCard.c: 357: {;SDCard.c: 358: string_dado.hora_name[i] = *dado;
 19024  002688  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 19025  00268C  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 19026  002690  6AF8               	clrf	tblptru,c
 19027  002692  0E14               	movlw	low (_string_dado+20)
 19028  002694  2421               	addwf	monta_sd@i^0,w,c
 19029  002696  6ED9               	movwf	fsr2l,c
 19030  002698  6ADA               	clrf	fsr2h,c
 19031  00269A  0E02               	movlw	high (_string_dado+20)
 19032  00269C  22DA               	addwfc	fsr2h,f,c
 19033  00269E  0E07               	movlw	(high __ramtop+-1)
 19034  0026A0  64F7               	cpfsgt	tblptrh,c
 19035  0026A2  D003               	bra	u12057
 19036  0026A4  0008               	tblrd		*
 19037  0026A6  50F5               	movf	tablat,w,c
 19038  0026A8  D005               	bra	u12050
 19039  0026AA                     u12057:
 19040  0026AA  CFF6 FFE1          	movff	tblptrl,fsr1l
 19041  0026AE  CFF7 FFE2          	movff	tblptrh,fsr1h
 19042  0026B2  50E7               	movf	indf1,w,c
 19043  0026B4                     u12050:
 19044  0026B4  6EDF               	movwf	indf2,c
 19045                           
 19046                           ;SDCard.c: 359: dado++;
 19047  0026B6  4A1D               	infsnz	monta_sd@dado^0,f,c
 19048  0026B8  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 19049  0026BA  2A21               	incf	monta_sd@i^0,f,c
 19050  0026BC  0E03               	movlw	3
 19051  0026BE  6421               	cpfsgt	monta_sd@i^0,c
 19052  0026C0  D7E3               	goto	l10541
 19053  0026C2  0012               	return	
 19054  0026C4                     l10549:
 19055                           
 19056                           ;SDCard.c: 365: for(i=0; i<6;i++)
 19057  0026C4  0E00               	movlw	0
 19058  0026C6  6E21               	movwf	monta_sd@i^0,c
 19059  0026C8                     l10555:
 19060                           
 19061                           ;SDCard.c: 366: {;SDCard.c: 367: string_dado.data_name[i] = *dado;
 19062  0026C8  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 19063  0026CC  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 19064  0026D0  6AF8               	clrf	tblptru,c
 19065  0026D2  0E12               	movlw	low (_string_dado+18)
 19066  0026D4  2421               	addwf	monta_sd@i^0,w,c
 19067  0026D6  6ED9               	movwf	fsr2l,c
 19068  0026D8  6ADA               	clrf	fsr2h,c
 19069  0026DA  0E02               	movlw	high (_string_dado+18)
 19070  0026DC  22DA               	addwfc	fsr2h,f,c
 19071  0026DE  0E07               	movlw	(high __ramtop+-1)
 19072  0026E0  64F7               	cpfsgt	tblptrh,c
 19073  0026E2  D003               	bra	u12077
 19074  0026E4  0008               	tblrd		*
 19075  0026E6  50F5               	movf	tablat,w,c
 19076  0026E8  D005               	bra	u12070
 19077  0026EA                     u12077:
 19078  0026EA  CFF6 FFE1          	movff	tblptrl,fsr1l
 19079  0026EE  CFF7 FFE2          	movff	tblptrh,fsr1h
 19080  0026F2  50E7               	movf	indf1,w,c
 19081  0026F4                     u12070:
 19082  0026F4  6EDF               	movwf	indf2,c
 19083                           
 19084                           ;SDCard.c: 368: dado++;
 19085  0026F6  4A1D               	infsnz	monta_sd@dado^0,f,c
 19086  0026F8  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 19087  0026FA  2A21               	incf	monta_sd@i^0,f,c
 19088  0026FC  0E05               	movlw	5
 19089  0026FE  6421               	cpfsgt	monta_sd@i^0,c
 19090  002700  D7E3               	goto	l10555
 19091  002702  0012               	return	
 19092  002704                     l10563:
 19093                           
 19094                           ;SDCard.c: 373: for(i=0; i<6;i++)
 19095  002704  0E00               	movlw	0
 19096  002706  6E21               	movwf	monta_sd@i^0,c
 19097  002708                     l10569:
 19098                           
 19099                           ;SDCard.c: 374: {;SDCard.c: 375: string_dado.vel[i] = *dado;
 19100  002708  C01D  FFF6         	movff	monta_sd@dado,tblptrl
 19101  00270C  C01E  FFF7         	movff	monta_sd@dado+1,tblptrh
 19102  002710  6AF8               	clrf	tblptru,c
 19103  002712  0E30               	movlw	low (_string_dado+48)
 19104  002714  2421               	addwf	monta_sd@i^0,w,c
 19105  002716  6ED9               	movwf	fsr2l,c
 19106  002718  6ADA               	clrf	fsr2h,c
 19107  00271A  0E02               	movlw	high (_string_dado+48)
 19108  00271C  22DA               	addwfc	fsr2h,f,c
 19109  00271E  0E07               	movlw	(high __ramtop+-1)
 19110  002720  64F7               	cpfsgt	tblptrh,c
 19111  002722  D003               	bra	u12097
 19112  002724  0008               	tblrd		*
 19113  002726  50F5               	movf	tablat,w,c
 19114  002728  D005               	bra	u12090
 19115  00272A                     u12097:
 19116  00272A  CFF6 FFE1          	movff	tblptrl,fsr1l
 19117  00272E  CFF7 FFE2          	movff	tblptrh,fsr1h
 19118  002732  50E7               	movf	indf1,w,c
 19119  002734                     u12090:
 19120  002734  6EDF               	movwf	indf2,c
 19121                           
 19122                           ;SDCard.c: 376: dado++;
 19123  002736  4A1D               	infsnz	monta_sd@dado^0,f,c
 19124  002738  2A1E               	incf	(monta_sd@dado+1)^0,f,c
 19125  00273A  2A21               	incf	monta_sd@i^0,f,c
 19126  00273C  0E05               	movlw	5
 19127  00273E  6421               	cpfsgt	monta_sd@i^0,c
 19128  002740  D7E3               	goto	l10569
 19129  002742  0012               	return	
 19130  002744                     l10579:
 19131  002744  501F               	movf	monta_sd@index^0,w,c
 19132                           
 19133                           ; Switch size 1, requested type "simple"
 19134                           ; Number of cases is 8, Range of values is 0 to 7
 19135                           ; switch strategies available:
 19136                           ; Name         Instructions Cycles
 19137                           ; simple_byte           25    13 (average)
 19138                           ;	Chosen strategy is simple_byte
 19139  002746  0A00               	xorlw	0	; case 0
 19140  002748  B4D8               	btfsc	status,2,c
 19141  00274A  D6FA               	goto	l10469
 19142  00274C  0A01               	xorlw	1	; case 1
 19143  00274E  B4D8               	btfsc	status,2,c
 19144  002750  D717               	goto	l10483
 19145  002752  0A03               	xorlw	3	; case 2
 19146  002754  B4D8               	btfsc	status,2,c
 19147  002756  D734               	goto	l10497
 19148  002758  0A01               	xorlw	1	; case 3
 19149  00275A  B4D8               	btfsc	status,2,c
 19150  00275C  D751               	goto	l10511
 19151  00275E  0A07               	xorlw	7	; case 4
 19152  002760  B4D8               	btfsc	status,2,c
 19153  002762  D76E               	goto	l10525
 19154  002764  0A01               	xorlw	1	; case 5
 19155  002766  B4D8               	btfsc	status,2,c
 19156  002768  D78D               	goto	l10535
 19157  00276A  0A03               	xorlw	3	; case 6
 19158  00276C  B4D8               	btfsc	status,2,c
 19159  00276E  D7AA               	goto	l10549
 19160  002770  0A01               	xorlw	1	; case 7
 19161  002772  A4D8               	btfss	status,2,c
 19162  002774  0012               	return	
 19163  002776  D7C6               	goto	l10563
 19164  002778                     __end_of_monta_sd:
 19165                           	callstack 0
 19166                           
 19167 ;; *************** function _strlen *****************
 19168 ;; Defined at:
 19169 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strlen.c"
 19170 ;; Parameters:    Size  Location     Type
 19171 ;;  s               2   24[COMRAM] PTR const unsigned char 
 19172 ;;		 -> STR_27(7), STR_26(5), rawDate(7), rawSpeed(6), 
 19173 ;;		 -> rawLongitude(13), rawLatitude(13), rawTime(11), 
 19174 ;; Auto vars:     Size  Location     Type
 19175 ;;  cp              2   26[COMRAM] PTR const unsigned char 
 19176 ;;		 -> STR_27(7), STR_26(5), rawDate(7), rawSpeed(6), 
 19177 ;;		 -> rawLongitude(13), rawLatitude(13), rawTime(11), 
 19178 ;; Return value:  Size  Location     Type
 19179 ;;                  2   24[COMRAM] unsigned int 
 19180 ;; Registers used:
 19181 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
 19182 ;; Tracked objects:
 19183 ;;		On entry : 0/1
 19184 ;;		On exit  : 0/0
 19185 ;;		Unchanged: 0/0
 19186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19187 ;;      Params:         2       0       0       0       0       0       0       0       0
 19188 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19189 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19190 ;;      Totals:         4       0       0       0       0       0       0       0       0
 19191 ;;Total ram usage:        4 bytes
 19192 ;; Hardware stack levels used:    1
 19193 ;; Hardware stack levels required when called:    3
 19194 ;; This function calls:
 19195 ;;		Nothing
 19196 ;; This function is called by:
 19197 ;;		_monta_sd
 19198 ;; This function uses a non-reentrant model
 19199 ;;
 19200                           
 19201                           	psect	text105
 19202  004F0C                     __ptext105:
 19203                           	callstack 0
 19204  004F0C                     _strlen:
 19205                           	callstack 23
 19206                           
 19207                           ;incstack = 0
 19208  004F0C  C019  F01B         	movff	strlen@s,strlen@cp
 19209  004F10  C01A  F01C         	movff	strlen@s+1,strlen@cp+1
 19210  004F14  D002               	goto	l10327
 19211  004F16                     l10325:
 19212  004F16  4A1B               	infsnz	strlen@cp^0,f,c
 19213  004F18  2A1C               	incf	(strlen@cp+1)^0,f,c
 19214  004F1A                     l10327:
 19215  004F1A  C01B  FFF6         	movff	strlen@cp,tblptrl
 19216  004F1E  C01C  FFF7         	movff	strlen@cp+1,tblptrh
 19217  004F22  6AF8               	clrf	tblptru,c
 19218  004F24  0E07               	movlw	(high __ramtop+-1)
 19219  004F26  64F7               	cpfsgt	tblptrh,c
 19220  004F28  D003               	bra	u11687
 19221  004F2A  0008               	tblrd		*
 19222  004F2C  50F5               	movf	tablat,w,c
 19223  004F2E  D005               	bra	u11680
 19224  004F30                     u11687:
 19225  004F30  CFF6 FFE1          	movff	tblptrl,fsr1l
 19226  004F34  CFF7 FFE2          	movff	tblptrh,fsr1h
 19227  004F38  50E7               	movf	indf1,w,c
 19228  004F3A                     u11680:
 19229  004F3A  0900               	iorlw	0
 19230  004F3C  A4D8               	btfss	status,2,c
 19231  004F3E  D7EB               	goto	l10325
 19232  004F40  5019               	movf	strlen@s^0,w,c
 19233  004F42  5C1B               	subwf	strlen@cp^0,w,c
 19234  004F44  6E19               	movwf	?_strlen^0,c
 19235  004F46  501A               	movf	(strlen@s+1)^0,w,c
 19236  004F48  581C               	subwfb	(strlen@cp+1)^0,w,c
 19237  004F4A  6E1A               	movwf	(?_strlen+1)^0,c
 19238  004F4C  0012               	return		;funcret
 19239  004F4E                     __end_of_strlen:
 19240                           	callstack 0
 19241                           
 19242 ;; *************** function _desliga_uart *****************
 19243 ;; Defined at:
 19244 ;;		line 219 in file "bibliotecas/uart.c"
 19245 ;; Parameters:    Size  Location     Type
 19246 ;;		None
 19247 ;; Auto vars:     Size  Location     Type
 19248 ;;		None
 19249 ;; Return value:  Size  Location     Type
 19250 ;;                  1    wreg      void 
 19251 ;; Registers used:
 19252 ;;		wreg, status,2
 19253 ;; Tracked objects:
 19254 ;;		On entry : 0/0
 19255 ;;		On exit  : 0/0
 19256 ;;		Unchanged: 0/0
 19257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19258 ;;      Params:         0       0       0       0       0       0       0       0       0
 19259 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19260 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19261 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19262 ;;Total ram usage:        0 bytes
 19263 ;; Hardware stack levels used:    1
 19264 ;; Hardware stack levels required when called:    3
 19265 ;; This function calls:
 19266 ;;		Nothing
 19267 ;; This function is called by:
 19268 ;;		_grava_sd
 19269 ;; This function uses a non-reentrant model
 19270 ;;
 19271                           
 19272                           	psect	text106
 19273  005458                     __ptext106:
 19274                           	callstack 0
 19275  005458                     _desliga_uart:
 19276                           	callstack 24
 19277                           
 19278                           ;uart.c: 221: TRISCbits.RC6 = 1;
 19279                           
 19280                           ;incstack = 0
 19281  005458  8C94               	bsf	148,6,c	;volatile
 19282                           
 19283                           ;uart.c: 222: TRISCbits.RC7 = 1;
 19284  00545A  8E94               	bsf	148,7,c	;volatile
 19285                           
 19286                           ;uart.c: 225: TXSTA = 0x00;
 19287  00545C  0E00               	movlw	0
 19288  00545E  6EAC               	movwf	172,c	;volatile
 19289                           
 19290                           ;uart.c: 227: RCSTA = 0x00;
 19291  005460  0E00               	movlw	0
 19292  005462  6EAB               	movwf	171,c	;volatile
 19293  005464  0012               	return		;funcret
 19294  005466                     __end_of_desliga_uart:
 19295                           	callstack 0
 19296                           
 19297 ;; *************** function _desliga_SPI *****************
 19298 ;; Defined at:
 19299 ;;		line 68 in file "bibliotecas/SPI.c"
 19300 ;; Parameters:    Size  Location     Type
 19301 ;;		None
 19302 ;; Auto vars:     Size  Location     Type
 19303 ;;		None
 19304 ;; Return value:  Size  Location     Type
 19305 ;;                  1    wreg      void 
 19306 ;; Registers used:
 19307 ;;		wreg, status,2
 19308 ;; Tracked objects:
 19309 ;;		On entry : 3F/0
 19310 ;;		On exit  : 3F/0
 19311 ;;		Unchanged: 3F/0
 19312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19313 ;;      Params:         0       0       0       0       0       0       0       0       0
 19314 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19315 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19316 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19317 ;;Total ram usage:        0 bytes
 19318 ;; Hardware stack levels used:    1
 19319 ;; Hardware stack levels required when called:    3
 19320 ;; This function calls:
 19321 ;;		Nothing
 19322 ;; This function is called by:
 19323 ;;		_grava_sd
 19324 ;; This function uses a non-reentrant model
 19325 ;;
 19326                           
 19327                           	psect	text107
 19328  00548A                     __ptext107:
 19329                           	callstack 0
 19330  00548A                     _desliga_SPI:
 19331                           	callstack 24
 19332                           
 19333                           ; BSR set to: 0
 19334                           ;SPI.c: 70: SSPSTAT = 0x00;
 19335                           
 19336                           ;incstack = 0
 19337  00548A  0E00               	movlw	0
 19338  00548C  6EC7               	movwf	199,c	;volatile
 19339                           
 19340                           ;SPI.c: 71: SSPCON1 = 0x00;
 19341  00548E  0E00               	movlw	0
 19342  005490  6EC6               	movwf	198,c	;volatile
 19343                           
 19344                           ; BSR set to: 0
 19345                           ;SPI.c: 72: SSPCON1bits.SSPEN = 0;
 19346  005492  9AC6               	bcf	198,5,c	;volatile
 19347                           
 19348                           ; BSR set to: 0
 19349  005494  0012               	return		;funcret
 19350  005496                     __end_of_desliga_SPI:
 19351                           	callstack 0
 19352                           
 19353 ;; *************** function _fix *****************
 19354 ;; Defined at:
 19355 ;;		line 197 in file "bibliotecas/GPS.c"
 19356 ;; Parameters:    Size  Location     Type
 19357 ;;		None
 19358 ;; Auto vars:     Size  Location     Type
 19359 ;;		None
 19360 ;; Return value:  Size  Location     Type
 19361 ;;                  2   24[COMRAM] PTR unsigned char 
 19362 ;; Registers used:
 19363 ;;		wreg, status,2, status,0
 19364 ;; Tracked objects:
 19365 ;;		On entry : 0/0
 19366 ;;		On exit  : 0/0
 19367 ;;		Unchanged: 0/0
 19368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19369 ;;      Params:         2       0       0       0       0       0       0       0       0
 19370 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19371 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19372 ;;      Totals:         2       0       0       0       0       0       0       0       0
 19373 ;;Total ram usage:        2 bytes
 19374 ;; Hardware stack levels used:    1
 19375 ;; Hardware stack levels required when called:    3
 19376 ;; This function calls:
 19377 ;;		Nothing
 19378 ;; This function is called by:
 19379 ;;		_disparo_gravacao
 19380 ;;		_troca_de_tela
 19381 ;; This function uses a non-reentrant model
 19382 ;;
 19383                           
 19384                           	psect	text108
 19385  0054A0                     __ptext108:
 19386                           	callstack 0
 19387  0054A0                     _fix:
 19388                           	callstack 25
 19389                           
 19390                           ;GPS.c: 199: return rawFix;
 19391                           
 19392                           ; BSR set to: 0
 19393                           ;incstack = 0
 19394  0054A0  0ED7               	movlw	low _rawFix
 19395  0054A2  6E19               	movwf	?_fix^0,c
 19396  0054A4  0E01               	movlw	high _rawFix
 19397  0054A6  6E1A               	movwf	(?_fix+1)^0,c
 19398  0054A8  0012               	return		;funcret
 19399  0054AA                     __end_of_fix:
 19400                           	callstack 0
 19401                           
 19402 ;; *************** function _isr *****************
 19403 ;; Defined at:
 19404 ;;		line 110 in file "main.c"
 19405 ;; Parameters:    Size  Location     Type
 19406 ;;		None
 19407 ;; Auto vars:     Size  Location     Type
 19408 ;;  cont            1   23[COMRAM] unsigned char 
 19409 ;; Return value:  Size  Location     Type
 19410 ;;                  1    wreg      void 
 19411 ;; Registers used:
 19412 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19413 ;; Tracked objects:
 19414 ;;		On entry : 0/0
 19415 ;;		On exit  : 0/0
 19416 ;;		Unchanged: 0/0
 19417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19418 ;;      Params:         0       0       0       0       0       0       0       0       0
 19419 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19420 ;;      Temps:         12       0       0       0       0       0       0       0       0
 19421 ;;      Totals:        13       0       0       0       0       0       0       0       0
 19422 ;;Total ram usage:       13 bytes
 19423 ;; Hardware stack levels used:    1
 19424 ;; Hardware stack levels required when called:    2
 19425 ;; This function calls:
 19426 ;;		_GPSRead
 19427 ;;		_recebe_dado_uart
 19428 ;;		i2_write_timer_zero
 19429 ;; This function is called by:
 19430 ;;		Interrupt level 2
 19431 ;; This function uses a non-reentrant model
 19432 ;;
 19433                           
 19434                           	psect	intcode
 19435  000008                     __pintcode:
 19436                           	callstack 0
 19437  000008                     _isr:
 19438                           	callstack 12
 19439                           
 19440                           ;incstack = 0
 19441  000008  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19442  00000A  ED35  F01C         	call	int_func,f	;refresh shadow registers
 19443                           
 19444                           	psect	intcode_body
 19445  00386A                     __pintcode_body:
 19446                           	callstack 12
 19447  00386A                     int_func:
 19448                           	callstack 12
 19449  00386A  0006               	pop		; remove dummy address from shadow register refresh
 19450  00386C  CFE1 F00E          	movff	fsr1l,??_isr+2
 19451  003870  CFE2 F00F          	movff	fsr1h,??_isr+3
 19452  003874  CFD9 F010          	movff	fsr2l,??_isr+4
 19453  003878  CFDA F011          	movff	fsr2h,??_isr+5
 19454  00387C  CFF3 F012          	movff	prodl,??_isr+6
 19455  003880  CFF4 F013          	movff	prodh,??_isr+7
 19456  003884  CFF6 F014          	movff	tblptrl,??_isr+8
 19457  003888  CFF7 F015          	movff	tblptrh,??_isr+9
 19458  00388C  CFF8 F016          	movff	tblptru,??_isr+10
 19459  003890  CFF5 F017          	movff	tablat,??_isr+11
 19460                           
 19461                           ;main.c: 112: unsigned char cont;;main.c: 115: if (PIE1bits.RCIE && PIR1bits.RCIF)
 19462  003894  BA9D               	btfsc	157,5,c	;volatile
 19463  003896  AA9E               	btfss	158,5,c	;volatile
 19464  003898  D014               	goto	i2l12317
 19465                           
 19466                           ;main.c: 116: {;main.c: 117: PIR1bits.RCIF = 0;
 19467  00389A  9A9E               	bcf	158,5,c	;volatile
 19468                           
 19469                           ;main.c: 118: data_uart_recebe = recebe_dado_uart();
 19470  00389C  ECF7  F029         	call	_recebe_dado_uart	;wreg free
 19471  0038A0  6E3E               	movwf	_data_uart_recebe^0,c
 19472                           
 19473                           ;main.c: 119: GPSRead(data_uart_recebe);
 19474  0038A2  503E               	movf	_data_uart_recebe^0,w,c
 19475  0038A4  EC6C  F011         	call	_GPSRead
 19476                           
 19477                           ;main.c: 121: PORTBbits.RB2 = !PORTBbits.RB2;
 19478  0038A8  B481               	btfsc	129,2,c	;volatile
 19479  0038AA  D003               	goto	i2u1493_40
 19480  0038AC  6A0C               	clrf	??_isr^0,c
 19481  0038AE  2A0C               	incf	??_isr^0,f,c
 19482  0038B0  D001               	goto	i2u1494_48
 19483  0038B2                     i2u1493_40:
 19484  0038B2  6A0C               	clrf	??_isr^0,c
 19485  0038B4                     i2u1494_48:
 19486  0038B4  460C               	rlncf	??_isr^0,f,c
 19487  0038B6  460C               	rlncf	??_isr^0,f,c
 19488  0038B8  5081               	movf	129,w,c	;volatile
 19489  0038BA  180C               	xorwf	??_isr^0,w,c
 19490  0038BC  0BFB               	andlw	-5
 19491  0038BE  180C               	xorwf	??_isr^0,w,c
 19492  0038C0  6E81               	movwf	129,c	;volatile
 19493  0038C2                     i2l12317:
 19494                           
 19495                           ;main.c: 122: };main.c: 125: unsigned char cont;;main.c: 127: if (TMR0IF && T0IF)
 19496  0038C2  B4F2               	btfsc	4082,2,c	;volatile
 19497  0038C4  A4F2               	btfss	4082,2,c	;volatile
 19498  0038C6  D044               	goto	i2l12355
 19499                           
 19500                           ;main.c: 128: {;main.c: 129: INTCONbits.TMR0IF = 0;
 19501  0038C8  94F2               	bcf	242,2,c	;volatile
 19502                           
 19503                           ;main.c: 130: sinaliza_int_timer = 1;
 19504  0038CA  0E01               	movlw	1
 19505  0038CC  6E3D               	movwf	_sinaliza_int_timer^0,c
 19506                           
 19507                           ;main.c: 132: for(cont= 0; cont<4;cont++)
 19508  0038CE  0E00               	movlw	0
 19509  0038D0  6E18               	movwf	isr@cont^0,c
 19510  0038D2                     i2l12329:
 19511                           
 19512                           ;main.c: 133: {;main.c: 134: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 19513  0038D2  5018               	movf	isr@cont^0,w,c
 19514  0038D4  0D02               	mullw	2
 19515  0038D6  0E10               	movlw	low _tempo_tarefa
 19516  0038D8  24F3               	addwf	243,w,c
 19517  0038DA  6ED9               	movwf	fsr2l,c
 19518  0038DC  0E01               	movlw	high _tempo_tarefa
 19519  0038DE  20F4               	addwfc	prodh,w,c
 19520  0038E0  6EDA               	movwf	fsr2h,c
 19521  0038E2  50DE               	movf	postinc2,w,c
 19522  0038E4  10DE               	iorwf	postinc2,w,c
 19523  0038E6  B4D8               	btfsc	status,2,c
 19524  0038E8  D00B               	goto	i2l12333
 19525  0038EA  5018               	movf	isr@cont^0,w,c
 19526  0038EC  0D02               	mullw	2
 19527  0038EE  0E10               	movlw	low _tempo_tarefa
 19528  0038F0  24F3               	addwf	243,w,c
 19529  0038F2  6ED9               	movwf	fsr2l,c
 19530  0038F4  0E01               	movlw	high _tempo_tarefa
 19531  0038F6  20F4               	addwfc	prodh,w,c
 19532  0038F8  6EDA               	movwf	fsr2h,c
 19533  0038FA  06DE               	decf	postinc2,f,c
 19534  0038FC  0E00               	movlw	0
 19535  0038FE  5ADD               	subwfb	postdec2,f,c
 19536  003900                     i2l12333:
 19537  003900  2A18               	incf	isr@cont^0,f,c
 19538  003902  0E03               	movlw	3
 19539  003904  6418               	cpfsgt	isr@cont^0,c
 19540  003906  D7E5               	goto	i2l12329
 19541                           
 19542                           ;main.c: 136: };main.c: 137: if(time_sd > 0) time_sd--;
 19543  003908  0100               	movlb	0	; () banked
 19544  00390A  51FA               	movf	_time_sd& (0+255),w,b
 19545  00390C  11FB               	iorwf	(_time_sd+1)& (0+255),w,b
 19546  00390E  B4D8               	btfsc	status,2,c
 19547  003910  D003               	goto	i2l12341
 19548                           
 19549                           ; BSR set to: 0
 19550  003912  07FA               	decf	_time_sd& (0+255),f,b
 19551  003914  A0D8               	btfss	status,0,c
 19552  003916  07FB               	decf	(_time_sd+1)& (0+255),f,b
 19553  003918                     i2l12341:
 19554                           
 19555                           ; BSR set to: 0
 19556                           ;main.c: 138: if(time_atualizacao > 0) time_atualizacao--;
 19557  003918  5036               	movf	_time_atualizacao^0,w,c
 19558  00391A  1037               	iorwf	(_time_atualizacao+1)^0,w,c
 19559  00391C  B4D8               	btfsc	status,2,c
 19560  00391E  D003               	goto	i2l12345
 19561                           
 19562                           ; BSR set to: 0
 19563  003920  0636               	decf	_time_atualizacao^0,f,c
 19564  003922  A0D8               	btfss	status,0,c
 19565  003924  0637               	decf	(_time_atualizacao+1)^0,f,c
 19566  003926                     i2l12345:
 19567                           
 19568                           ; BSR set to: 0
 19569                           ;main.c: 140: if(tarefa_em_execucao == 1)
 19570  003926  043C               	decf	_tarefa_em_execucao^0,w,c	;volatile
 19571  003928  A4D8               	btfss	status,2,c
 19572  00392A  D00C               	goto	i2l12353
 19573                           
 19574                           ; BSR set to: 0
 19575                           ;main.c: 141: {;main.c: 142: timeout_tarefa--;
 19576  00392C  0101               	movlb	1	; () banked
 19577  00392E  0745               	decf	_timeout_tarefa& (0+255),f,b
 19578  003930  A0D8               	btfss	status,0,c
 19579  003932  0746               	decf	(_timeout_tarefa+1)& (0+255),f,b
 19580                           
 19581                           ; BSR set to: 1
 19582                           ;main.c: 143: if(!timeout_tarefa)
 19583  003934  5145               	movf	_timeout_tarefa& (0+255),w,b
 19584  003936  1146               	iorwf	(_timeout_tarefa+1)& (0+255),w,b
 19585  003938  A4D8               	btfss	status,2,c
 19586  00393A  D004               	goto	i2l12353
 19587                           
 19588                           ; BSR set to: 1
 19589                           ;main.c: 144: {;main.c: 146: PCLATH = 0;
 19590  00393C  0E00               	movlw	0
 19591  00393E  6EFA               	movwf	250,c	;volatile
 19592                           
 19593                           ;main.c: 147: PCL = 0;
 19594  003940  0E00               	movlw	0
 19595  003942  6EF9               	movwf	249,c	;volatile
 19596  003944                     i2l12353:
 19597                           
 19598                           ;main.c: 148: };main.c: 149: };main.c: 153: write_timer_zero(0x45);
 19599  003944  0E00               	movlw	0
 19600  003946  6E02               	movwf	(i2write_timer_zero@timer0+1)^0,c
 19601  003948  0E45               	movlw	69
 19602  00394A  6E01               	movwf	i2write_timer_zero@timer0^0,c
 19603  00394C  EC55  F02A         	call	i2_write_timer_zero	;wreg free
 19604  003950                     i2l12355:
 19605                           
 19606                           ;main.c: 154: };main.c: 156: if (INT0IF && INT0IE)
 19607  003950  B2F2               	btfsc	4082,1,c	;volatile
 19608  003952  A8F2               	btfss	4082,4,c	;volatile
 19609  003954  D001               	goto	i2l1407
 19610                           
 19611                           ;main.c: 157: {;main.c: 158: INT0IF = 0;
 19612  003956  92F2               	bcf	4082,1,c	;volatile
 19613  003958                     i2l1407:
 19614  003958  C017  FFF5         	movff	??_isr+11,tablat
 19615  00395C  C016  FFF8         	movff	??_isr+10,tblptru
 19616  003960  C015  FFF7         	movff	??_isr+9,tblptrh
 19617  003964  C014  FFF6         	movff	??_isr+8,tblptrl
 19618  003968  C013  FFF4         	movff	??_isr+7,prodh
 19619  00396C  C012  FFF3         	movff	??_isr+6,prodl
 19620  003970  C011  FFDA         	movff	??_isr+5,fsr2h
 19621  003974  C010  FFD9         	movff	??_isr+4,fsr2l
 19622  003978  C00F  FFE2         	movff	??_isr+3,fsr1h
 19623  00397C  C00E  FFE1         	movff	??_isr+2,fsr1l
 19624  003980  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19625  003982  0011               	retfie		f
 19626  003984                     __end_of_isr:
 19627                           	callstack 0
 19628                           
 19629 ;; *************** function i2_write_timer_zero *****************
 19630 ;; Defined at:
 19631 ;;		line 134 in file "bibliotecas/hardware.c"
 19632 ;; Parameters:    Size  Location     Type
 19633 ;;  timer0          2    0[COMRAM] unsigned int 
 19634 ;; Auto vars:     Size  Location     Type
 19635 ;;		None
 19636 ;; Return value:  Size  Location     Type
 19637 ;;                  1    wreg      void 
 19638 ;; Registers used:
 19639 ;;		None
 19640 ;; Tracked objects:
 19641 ;;		On entry : 3E/0
 19642 ;;		On exit  : 3E/0
 19643 ;;		Unchanged: 3E/0
 19644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19645 ;;      Params:         2       0       0       0       0       0       0       0       0
 19646 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19647 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19648 ;;      Totals:         2       0       0       0       0       0       0       0       0
 19649 ;;Total ram usage:        2 bytes
 19650 ;; Hardware stack levels used:    1
 19651 ;; This function calls:
 19652 ;;		Nothing
 19653 ;; This function is called by:
 19654 ;;		_isr
 19655 ;; This function uses a non-reentrant model
 19656 ;;
 19657                           
 19658                           	psect	text110
 19659  0054AA                     __ptext110:
 19660                           	callstack 0
 19661  0054AA                     i2_write_timer_zero:
 19662                           	callstack 13
 19663                           
 19664                           ;hardware.c: 142: TMR0 = timer0;
 19665                           
 19666                           ;incstack = 0
 19667  0054AA  C001  FFD6         	movff	i2write_timer_zero@timer0,4054	;volatile
 19668  0054AE  C002  FFD7         	movff	i2write_timer_zero@timer0+1,4055	;volatile
 19669  0054B2  0012               	return		;funcret
 19670  0054B4                     __end_ofi2_write_timer_zero:
 19671                           	callstack 0
 19672                           
 19673 ;; *************** function _recebe_dado_uart *****************
 19674 ;; Defined at:
 19675 ;;		line 138 in file "bibliotecas/uart.c"
 19676 ;; Parameters:    Size  Location     Type
 19677 ;;		None
 19678 ;; Auto vars:     Size  Location     Type
 19679 ;;		None
 19680 ;; Return value:  Size  Location     Type
 19681 ;;                  1    wreg      unsigned char 
 19682 ;; Registers used:
 19683 ;;		wreg, status,2
 19684 ;; Tracked objects:
 19685 ;;		On entry : 0/0
 19686 ;;		On exit  : 0/0
 19687 ;;		Unchanged: 0/0
 19688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19689 ;;      Params:         0       0       0       0       0       0       0       0       0
 19690 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19691 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19692 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19693 ;;Total ram usage:        0 bytes
 19694 ;; Hardware stack levels used:    1
 19695 ;; This function calls:
 19696 ;;		Nothing
 19697 ;; This function is called by:
 19698 ;;		_isr
 19699 ;; This function uses a non-reentrant model
 19700 ;;
 19701                           
 19702                           	psect	text111
 19703  0053EE                     __ptext111:
 19704                           	callstack 0
 19705  0053EE                     _recebe_dado_uart:
 19706                           	callstack 13
 19707                           
 19708                           ;uart.c: 140: while(RCIF==0);
 19709                           
 19710                           ;incstack = 0
 19711  0053EE  AA9E               	btfss	3998,5,c	;volatile
 19712  0053F0  D7FE               	goto	_recebe_dado_uart
 19713                           
 19714                           ;uart.c: 141: if(RCSTAbits.OERR)
 19715  0053F2  A2AB               	btfss	171,1,c	;volatile
 19716  0053F4  D003               	goto	i2l9057
 19717                           
 19718                           ;uart.c: 142: {;uart.c: 143: CREN = 0;
 19719  0053F6  98AB               	bcf	4011,4,c	;volatile
 19720                           
 19721                           ;uart.c: 144: __nop();
 19722  0053F8  F000               	nop	
 19723                           
 19724                           ;uart.c: 145: CREN=1;
 19725  0053FA  88AB               	bsf	4011,4,c	;volatile
 19726  0053FC                     i2l9057:
 19727                           
 19728                           ;uart.c: 146: };uart.c: 147: return(RCREG);
 19729  0053FC  50AE               	movf	174,w,c	;volatile
 19730  0053FE  0012               	return		;funcret
 19731  005400                     __end_of_recebe_dado_uart:
 19732                           	callstack 0
 19733                           
 19734 ;; *************** function _GPSRead *****************
 19735 ;; Defined at:
 19736 ;;		line 49 in file "bibliotecas/GPS.c"
 19737 ;; Parameters:    Size  Location     Type
 19738 ;;  buff            1    wreg     unsigned char 
 19739 ;; Auto vars:     Size  Location     Type
 19740 ;;  buff            1    9[COMRAM] unsigned char 
 19741 ;;  c               1   10[COMRAM] unsigned char 
 19742 ;; Return value:  Size  Location     Type
 19743 ;;                  2  350[None  ] int 
 19744 ;; Registers used:
 19745 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19746 ;; Tracked objects:
 19747 ;;		On entry : 0/0
 19748 ;;		On exit  : 0/0
 19749 ;;		Unchanged: 0/0
 19750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19751 ;;      Params:         0       0       0       0       0       0       0       0       0
 19752 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19753 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19754 ;;      Totals:         2       0       0       0       0       0       0       0       0
 19755 ;;Total ram usage:        2 bytes
 19756 ;; Hardware stack levels used:    1
 19757 ;; Hardware stack levels required when called:    1
 19758 ;; This function calls:
 19759 ;;		_strcmp
 19760 ;;		_stringcpy
 19761 ;; This function is called by:
 19762 ;;		_isr
 19763 ;; This function uses a non-reentrant model
 19764 ;;
 19765                           
 19766                           	psect	text112
 19767  0022D8                     __ptext112:
 19768                           	callstack 0
 19769  0022D8                     _GPSRead:
 19770                           	callstack 12
 19771                           
 19772                           ;incstack = 0
 19773                           ;GPSRead@buff stored from wreg
 19774  0022D8  6E0A               	movwf	GPSRead@buff^0,c
 19775                           
 19776                           ;GPS.c: 51: uint8_t c = buff;
 19777  0022DA  C00A  F00B         	movff	GPSRead@buff,GPSRead@c
 19778                           
 19779                           ;GPS.c: 53: switch(c) {
 19780  0022DE  D11B               	goto	i2l12155
 19781  0022E0                     i2l12043:
 19782                           
 19783                           ;GPS.c: 55: if(SentenceType == 1)
 19784  0022E0  0444               	decf	_SentenceType^0,w,c
 19785  0022E2  A4D8               	btfss	status,2,c
 19786  0022E4  D005               	goto	i2l12047
 19787                           
 19788                           ;GPS.c: 56: GPRMC_ok = 1;
 19789  0022E6  0E00               	movlw	0
 19790  0022E8  0101               	movlb	1	; () banked
 19791  0022EA  6F4C               	movwf	(_GPRMC_ok+1)& (0+255),b
 19792  0022EC  0E01               	movlw	1
 19793  0022EE  6F4B               	movwf	_GPRMC_ok& (0+255),b
 19794  0022F0                     i2l12047:
 19795                           
 19796                           ;GPS.c: 57: if(SentenceType == 2)
 19797  0022F0  0E02               	movlw	2
 19798  0022F2  1844               	xorwf	_SentenceType^0,w,c
 19799  0022F4  A4D8               	btfss	status,2,c
 19800  0022F6  D005               	goto	i2l12051
 19801                           
 19802                           ;GPS.c: 58: GPGGA_ok = 1;
 19803  0022F8  0E00               	movlw	0
 19804  0022FA  0101               	movlb	1	; () banked
 19805  0022FC  6F4A               	movwf	(_GPGGA_ok+1)& (0+255),b
 19806  0022FE  0E01               	movlw	1
 19807  002300  6F49               	movwf	_GPGGA_ok& (0+255),b
 19808  002302                     i2l12051:
 19809                           
 19810                           ;GPS.c: 59: if(GPRMC_ok && GPGGA_ok) {
 19811  002302  0101               	movlb	1	; () banked
 19812  002304  514B               	movf	_GPRMC_ok& (0+255),w,b
 19813  002306  114C               	iorwf	(_GPRMC_ok+1)& (0+255),w,b
 19814  002308  B4D8               	btfsc	status,2,c
 19815  00230A  0012               	return	
 19816                           
 19817                           ; BSR set to: 1
 19818  00230C  5149               	movf	_GPGGA_ok& (0+255),w,b
 19819  00230E  114A               	iorwf	(_GPGGA_ok+1)& (0+255),w,b
 19820  002310  B4D8               	btfsc	status,2,c
 19821  002312  0012               	return	
 19822                           
 19823                           ; BSR set to: 1
 19824                           ;GPS.c: 60: GPRMC_ok = GPGGA_ok = 0;
 19825  002314  0E00               	movlw	0
 19826  002316  6F4A               	movwf	(_GPGGA_ok+1)& (0+255),b
 19827  002318  0E00               	movlw	0
 19828  00231A  6F49               	movwf	_GPGGA_ok& (0+255),b
 19829  00231C  C149  F14B         	movff	_GPGGA_ok,_GPRMC_ok
 19830  002320  C14A  F14C         	movff	_GPGGA_ok+1,_GPRMC_ok+1
 19831  002324  0012               	return	
 19832  002326                     i2l12059:
 19833                           
 19834                           ;GPS.c: 66: Term = char_number = 0;
 19835  002326  0E00               	movlw	0
 19836  002328  6E45               	movwf	_char_number^0,c
 19837  00232A  C045  F043         	movff	_char_number,_Term
 19838                           
 19839                           ;GPS.c: 67: break;
 19840  00232E  0012               	return	
 19841  002330                     i2l12061:
 19842                           
 19843                           ;GPS.c: 70: buffer[char_number] = '\0';
 19844  002330  0EAD               	movlw	low _buffer
 19845  002332  2445               	addwf	_char_number^0,w,c
 19846  002334  6ED9               	movwf	fsr2l,c
 19847  002336  6ADA               	clrf	fsr2h,c
 19848  002338  0E01               	movlw	high _buffer
 19849  00233A  22DA               	addwfc	fsr2h,f,c
 19850  00233C  0E00               	movlw	0
 19851  00233E  6EDF               	movwf	indf2,c
 19852                           
 19853                           ;GPS.c: 71: if(Term == 0) {
 19854  002340  5043               	movf	_Term^0,w,c
 19855  002342  A4D8               	btfss	status,2,c
 19856  002344  D030               	goto	i2l12077
 19857                           
 19858                           ;GPS.c: 72: stringcpy(buffer, sentence, 0);
 19859  002346  0EAD               	movlw	low _buffer
 19860  002348  6E01               	movwf	stringcpy@str1^0,c
 19861  00234A  0E01               	movlw	high _buffer
 19862  00234C  6E02               	movwf	(stringcpy@str1+1)^0,c
 19863  00234E  0ED1               	movlw	low _sentence
 19864  002350  6E03               	movwf	stringcpy@str2^0,c
 19865  002352  0E01               	movlw	high _sentence
 19866  002354  6E04               	movwf	(stringcpy@str2+1)^0,c
 19867  002356  0E00               	movlw	0
 19868  002358  6E06               	movwf	(stringcpy@dir+1)^0,c
 19869  00235A  0E00               	movlw	0
 19870  00235C  6E05               	movwf	stringcpy@dir^0,c
 19871  00235E  ECDC  F026         	call	_stringcpy	;wreg free
 19872                           
 19873                           ;GPS.c: 73: if(strcmp(sentence, "GPRMC") == 0)
 19874  002362  0ED1               	movlw	low _sentence
 19875  002364  6E01               	movwf	strcmp@s1^0,c
 19876  002366  0E01               	movlw	high _sentence
 19877  002368  6E02               	movwf	(strcmp@s1+1)^0,c
 19878  00236A  0E54               	movlw	low STR_5
 19879  00236C  6E03               	movwf	strcmp@s2^0,c
 19880  00236E  0E62               	movlw	high STR_5
 19881  002370  6E04               	movwf	(strcmp@s2+1)^0,c
 19882  002372  EC6F  F026         	call	_strcmp	;wreg free
 19883  002376  5001               	movf	?_strcmp^0,w,c
 19884  002378  1002               	iorwf	(?_strcmp+1)^0,w,c
 19885  00237A  A4D8               	btfss	status,2,c
 19886  00237C  D002               	goto	i2l12071
 19887                           
 19888                           ;GPS.c: 74: SentenceType = 1;
 19889  00237E  0E01               	movlw	1
 19890  002380  D011               	goto	L8
 19891  002382                     i2l12071:
 19892                           
 19893                           ;GPS.c: 75: else if(strcmp(sentence, "GPGGA") == 0)
 19894  002382  0ED1               	movlw	low _sentence
 19895  002384  6E01               	movwf	strcmp@s1^0,c
 19896  002386  0E01               	movlw	high _sentence
 19897  002388  6E02               	movwf	(strcmp@s1+1)^0,c
 19898  00238A  0E4E               	movlw	low STR_6
 19899  00238C  6E03               	movwf	strcmp@s2^0,c
 19900  00238E  0E62               	movlw	high STR_6
 19901  002390  6E04               	movwf	(strcmp@s2+1)^0,c
 19902  002392  EC6F  F026         	call	_strcmp	;wreg free
 19903  002396  5001               	movf	?_strcmp^0,w,c
 19904  002398  1002               	iorwf	(?_strcmp+1)^0,w,c
 19905  00239A  A4D8               	btfss	status,2,c
 19906  00239C  D002               	goto	i2l12075
 19907                           
 19908                           ;GPS.c: 76: SentenceType = 2;
 19909  00239E  0E02               	movlw	2
 19910  0023A0  D001               	goto	L8
 19911  0023A2                     i2l12075:
 19912                           
 19913                           ;GPS.c: 77: else;GPS.c: 78: SentenceType = 3;
 19914  0023A2  0E03               	movlw	3
 19915  0023A4                     L8:
 19916  0023A4  6E44               	movwf	_SentenceType^0,c
 19917  0023A6                     i2l12077:
 19918                           
 19919                           ;GPS.c: 79: };GPS.c: 82: if(Term == 1 && SentenceType == 1) {
 19920  0023A6  0443               	decf	_Term^0,w,c
 19921  0023A8  A4D8               	btfss	status,2,c
 19922  0023AA  D013               	goto	i2l12085
 19923  0023AC  0444               	decf	_SentenceType^0,w,c
 19924  0023AE  A4D8               	btfss	status,2,c
 19925  0023B0  D010               	goto	i2l12085
 19926                           
 19927                           ;GPS.c: 83: stringcpy(buffer, rawTime, 0);
 19928  0023B2  0EAD               	movlw	low _buffer
 19929  0023B4  6E01               	movwf	stringcpy@str1^0,c
 19930  0023B6  0E01               	movlw	high _buffer
 19931  0023B8  6E02               	movwf	(stringcpy@str1+1)^0,c
 19932  0023BA  0EB9               	movlw	low _rawTime
 19933  0023BC  6E03               	movwf	stringcpy@str2^0,c
 19934  0023BE  0E01               	movlw	high _rawTime
 19935  0023C0  6E04               	movwf	(stringcpy@str2+1)^0,c
 19936  0023C2  0E00               	movlw	0
 19937  0023C4  6E06               	movwf	(stringcpy@dir+1)^0,c
 19938  0023C6  0E00               	movlw	0
 19939  0023C8  6E05               	movwf	stringcpy@dir^0,c
 19940  0023CA  ECDC  F026         	call	_stringcpy	;wreg free
 19941                           
 19942                           ;GPS.c: 84: gps_flag[0].flag = 1;
 19943  0023CE  0101               	movlb	1	; () banked
 19944  0023D0  8135               	bsf	_gps_flag& (0+255),0,b
 19945  0023D2                     i2l12085:
 19946                           
 19947                           ;GPS.c: 85: };GPS.c: 88: if((Term == 3) && (SentenceType == 1)) {
 19948  0023D2  0E03               	movlw	3
 19949  0023D4  1843               	xorwf	_Term^0,w,c
 19950  0023D6  A4D8               	btfss	status,2,c
 19951  0023D8  D013               	goto	i2l12093
 19952  0023DA  0444               	decf	_SentenceType^0,w,c
 19953  0023DC  A4D8               	btfss	status,2,c
 19954  0023DE  D010               	goto	i2l12093
 19955                           
 19956                           ;GPS.c: 89: stringcpy(buffer, rawLatitude, 1);
 19957  0023E0  0EAD               	movlw	low _buffer
 19958  0023E2  6E01               	movwf	stringcpy@str1^0,c
 19959  0023E4  0E01               	movlw	high _buffer
 19960  0023E6  6E02               	movwf	(stringcpy@str1+1)^0,c
 19961  0023E8  0EA0               	movlw	low _rawLatitude
 19962  0023EA  6E03               	movwf	stringcpy@str2^0,c
 19963  0023EC  0E01               	movlw	high _rawLatitude
 19964  0023EE  6E04               	movwf	(stringcpy@str2+1)^0,c
 19965  0023F0  0E00               	movlw	0
 19966  0023F2  6E06               	movwf	(stringcpy@dir+1)^0,c
 19967  0023F4  0E01               	movlw	1
 19968  0023F6  6E05               	movwf	stringcpy@dir^0,c
 19969  0023F8  ECDC  F026         	call	_stringcpy	;wreg free
 19970                           
 19971                           ;GPS.c: 90: gps_flag[1].flag = 1;
 19972  0023FC  0101               	movlb	1	; () banked
 19973  0023FE  8136               	bsf	(_gps_flag+1)& (0+255),0,b
 19974  002400                     i2l12093:
 19975                           
 19976                           ;GPS.c: 91: };GPS.c: 93: if((Term == 4) && (SentenceType == 1)) {
 19977  002400  0E04               	movlw	4
 19978  002402  1843               	xorwf	_Term^0,w,c
 19979  002404  A4D8               	btfss	status,2,c
 19980  002406  D00C               	goto	i2l12103
 19981  002408  0444               	decf	_SentenceType^0,w,c
 19982  00240A  A4D8               	btfss	status,2,c
 19983  00240C  D009               	goto	i2l12103
 19984                           
 19985                           ;GPS.c: 94: if(buffer[0] == 'N')
 19986  00240E  0E4E               	movlw	78
 19987  002410  0101               	movlb	1	; () banked
 19988  002412  19AD               	xorwf	_buffer& (0+255),w,b
 19989  002414  A4D8               	btfss	status,2,c
 19990  002416  D002               	goto	i2l12101
 19991                           
 19992                           ; BSR set to: 1
 19993                           ;GPS.c: 95: rawLatitude[0] = '0';
 19994  002418  0E30               	movlw	48
 19995  00241A  D001               	goto	L9
 19996  00241C                     i2l12101:
 19997                           
 19998                           ; BSR set to: 1
 19999                           ;GPS.c: 96: else;GPS.c: 97: rawLatitude[0] = '-';
 20000  00241C  0E2D               	movlw	45
 20001  00241E                     L9:
 20002  00241E  6FA0               	movwf	_rawLatitude& (0+255),b
 20003  002420                     i2l12103:
 20004                           
 20005                           ;GPS.c: 98: };GPS.c: 101: if((Term == 5) && (SentenceType == 1)) {
 20006  002420  0E05               	movlw	5
 20007  002422  1843               	xorwf	_Term^0,w,c
 20008  002424  A4D8               	btfss	status,2,c
 20009  002426  D013               	goto	i2l12111
 20010  002428  0444               	decf	_SentenceType^0,w,c
 20011  00242A  A4D8               	btfss	status,2,c
 20012  00242C  D010               	goto	i2l12111
 20013                           
 20014                           ;GPS.c: 102: stringcpy(buffer, rawLongitude, 1);
 20015  00242E  0EAD               	movlw	low _buffer
 20016  002430  6E01               	movwf	stringcpy@str1^0,c
 20017  002432  0E01               	movlw	high _buffer
 20018  002434  6E02               	movwf	(stringcpy@str1+1)^0,c
 20019  002436  0E93               	movlw	low _rawLongitude
 20020  002438  6E03               	movwf	stringcpy@str2^0,c
 20021  00243A  0E01               	movlw	high _rawLongitude
 20022  00243C  6E04               	movwf	(stringcpy@str2+1)^0,c
 20023  00243E  0E00               	movlw	0
 20024  002440  6E06               	movwf	(stringcpy@dir+1)^0,c
 20025  002442  0E01               	movlw	1
 20026  002444  6E05               	movwf	stringcpy@dir^0,c
 20027  002446  ECDC  F026         	call	_stringcpy	;wreg free
 20028                           
 20029                           ;GPS.c: 103: gps_flag[2].flag = 1;
 20030  00244A  0101               	movlb	1	; () banked
 20031  00244C  8137               	bsf	(_gps_flag+2)& (0+255),0,b
 20032  00244E                     i2l12111:
 20033                           
 20034                           ;GPS.c: 104: };GPS.c: 106: if((Term == 6) && (SentenceType == 1)) {
 20035  00244E  0E06               	movlw	6
 20036  002450  1843               	xorwf	_Term^0,w,c
 20037  002452  A4D8               	btfss	status,2,c
 20038  002454  D00C               	goto	i2l12121
 20039  002456  0444               	decf	_SentenceType^0,w,c
 20040  002458  A4D8               	btfss	status,2,c
 20041  00245A  D009               	goto	i2l12121
 20042                           
 20043                           ;GPS.c: 107: if(buffer[0] == 'E')
 20044  00245C  0E45               	movlw	69
 20045  00245E  0101               	movlb	1	; () banked
 20046  002460  19AD               	xorwf	_buffer& (0+255),w,b
 20047  002462  A4D8               	btfss	status,2,c
 20048  002464  D002               	goto	i2l12119
 20049                           
 20050                           ; BSR set to: 1
 20051                           ;GPS.c: 108: rawLongitude[0] = '0';
 20052  002466  0E30               	movlw	48
 20053  002468  D001               	goto	L10
 20054  00246A                     i2l12119:
 20055                           
 20056                           ; BSR set to: 1
 20057                           ;GPS.c: 109: else;GPS.c: 110: rawLongitude[0] = '-';
 20058  00246A  0E2D               	movlw	45
 20059  00246C                     L10:
 20060  00246C  6F93               	movwf	_rawLongitude& (0+255),b
 20061  00246E                     i2l12121:
 20062                           
 20063                           ;GPS.c: 111: };GPS.c: 114: if((Term == 7) && (SentenceType == 1)) {
 20064  00246E  0E07               	movlw	7
 20065  002470  1843               	xorwf	_Term^0,w,c
 20066  002472  A4D8               	btfss	status,2,c
 20067  002474  D013               	goto	i2l12129
 20068  002476  0444               	decf	_SentenceType^0,w,c
 20069  002478  A4D8               	btfss	status,2,c
 20070  00247A  D010               	goto	i2l12129
 20071                           
 20072                           ;GPS.c: 115: stringcpy(buffer, rawSpeed, 0);
 20073  00247C  0EAD               	movlw	low _buffer
 20074  00247E  6E01               	movwf	stringcpy@str1^0,c
 20075  002480  0E01               	movlw	high _buffer
 20076  002482  6E02               	movwf	(stringcpy@str1+1)^0,c
 20077  002484  0ECB               	movlw	low _rawSpeed
 20078  002486  6E03               	movwf	stringcpy@str2^0,c
 20079  002488  0E01               	movlw	high _rawSpeed
 20080  00248A  6E04               	movwf	(stringcpy@str2+1)^0,c
 20081  00248C  0E00               	movlw	0
 20082  00248E  6E06               	movwf	(stringcpy@dir+1)^0,c
 20083  002490  0E00               	movlw	0
 20084  002492  6E05               	movwf	stringcpy@dir^0,c
 20085  002494  ECDC  F026         	call	_stringcpy	;wreg free
 20086                           
 20087                           ;GPS.c: 116: gps_flag[5].flag = 1;
 20088  002498  0101               	movlb	1	; () banked
 20089  00249A  813A               	bsf	(_gps_flag+5)& (0+255),0,b
 20090  00249C                     i2l12129:
 20091                           
 20092                           ;GPS.c: 117: };GPS.c: 125: if(Term == 9 && SentenceType == 1) {
 20093  00249C  0E09               	movlw	9
 20094  00249E  1843               	xorwf	_Term^0,w,c
 20095  0024A0  A4D8               	btfss	status,2,c
 20096  0024A2  D013               	goto	i2l12137
 20097  0024A4  0444               	decf	_SentenceType^0,w,c
 20098  0024A6  A4D8               	btfss	status,2,c
 20099  0024A8  D010               	goto	i2l12137
 20100                           
 20101                           ;GPS.c: 126: stringcpy(buffer, rawDate, 0);
 20102  0024AA  0EAD               	movlw	low _buffer
 20103  0024AC  6E01               	movwf	stringcpy@str1^0,c
 20104  0024AE  0E01               	movlw	high _buffer
 20105  0024B0  6E02               	movwf	(stringcpy@str1+1)^0,c
 20106  0024B2  0EC4               	movlw	low _rawDate
 20107  0024B4  6E03               	movwf	stringcpy@str2^0,c
 20108  0024B6  0E01               	movlw	high _rawDate
 20109  0024B8  6E04               	movwf	(stringcpy@str2+1)^0,c
 20110  0024BA  0E00               	movlw	0
 20111  0024BC  6E06               	movwf	(stringcpy@dir+1)^0,c
 20112  0024BE  0E00               	movlw	0
 20113  0024C0  6E05               	movwf	stringcpy@dir^0,c
 20114  0024C2  ECDC  F026         	call	_stringcpy	;wreg free
 20115                           
 20116                           ;GPS.c: 127: gps_flag[3].flag = 1;
 20117  0024C6  0101               	movlb	1	; () banked
 20118  0024C8  8138               	bsf	(_gps_flag+3)& (0+255),0,b
 20119  0024CA                     i2l12137:
 20120                           
 20121                           ;GPS.c: 128: };GPS.c: 141: if((Term == 6) && (SentenceType == 2)) {
 20122  0024CA  0E06               	movlw	6
 20123  0024CC  1843               	xorwf	_Term^0,w,c
 20124  0024CE  A4D8               	btfss	status,2,c
 20125  0024D0  D014               	goto	i2l12145
 20126  0024D2  0E02               	movlw	2
 20127  0024D4  1844               	xorwf	_SentenceType^0,w,c
 20128  0024D6  A4D8               	btfss	status,2,c
 20129  0024D8  D010               	goto	i2l12145
 20130                           
 20131                           ;GPS.c: 142: stringcpy(buffer, rawFix, 0);
 20132  0024DA  0EAD               	movlw	low _buffer
 20133  0024DC  6E01               	movwf	stringcpy@str1^0,c
 20134  0024DE  0E01               	movlw	high _buffer
 20135  0024E0  6E02               	movwf	(stringcpy@str1+1)^0,c
 20136  0024E2  0ED7               	movlw	low _rawFix
 20137  0024E4  6E03               	movwf	stringcpy@str2^0,c
 20138  0024E6  0E01               	movlw	high _rawFix
 20139  0024E8  6E04               	movwf	(stringcpy@str2+1)^0,c
 20140  0024EA  0E00               	movlw	0
 20141  0024EC  6E06               	movwf	(stringcpy@dir+1)^0,c
 20142  0024EE  0E00               	movlw	0
 20143  0024F0  6E05               	movwf	stringcpy@dir^0,c
 20144  0024F2  ECDC  F026         	call	_stringcpy	;wreg free
 20145                           
 20146                           ;GPS.c: 143: gps_flag[4].flag = 1;
 20147  0024F6  0101               	movlb	1	; () banked
 20148  0024F8  8139               	bsf	(_gps_flag+4)& (0+255),0,b
 20149  0024FA                     i2l12145:
 20150                           
 20151                           ;GPS.c: 145: };GPS.c: 146: Term++;
 20152  0024FA  2A43               	incf	_Term^0,f,c
 20153                           
 20154                           ;GPS.c: 147: char_number = 0;
 20155  0024FC  0E00               	movlw	0
 20156  0024FE  6E45               	movwf	_char_number^0,c
 20157                           
 20158                           ;GPS.c: 148: break;
 20159  002500  0012               	return	
 20160  002502                     i2l12149:
 20161                           
 20162                           ;GPS.c: 151: buffer[char_number++] = c;
 20163  002502  0EAD               	movlw	low _buffer
 20164  002504  2445               	addwf	_char_number^0,w,c
 20165  002506  6ED9               	movwf	fsr2l,c
 20166  002508  6ADA               	clrf	fsr2h,c
 20167  00250A  0E01               	movlw	high _buffer
 20168  00250C  22DA               	addwfc	fsr2h,f,c
 20169  00250E  C00B  FFDF         	movff	GPSRead@c,indf2
 20170  002512  2A45               	incf	_char_number^0,f,c
 20171                           
 20172                           ;GPS.c: 152: break;
 20173  002514  0012               	return	
 20174  002516                     i2l12155:
 20175  002516  500B               	movf	GPSRead@c^0,w,c
 20176                           
 20177                           ; Switch size 1, requested type "simple"
 20178                           ; Number of cases is 3, Range of values is 13 to 44
 20179                           ; switch strategies available:
 20180                           ; Name         Instructions Cycles
 20181                           ; simple_byte           10     6 (average)
 20182                           ;	Chosen strategy is simple_byte
 20183  002518  0A0D               	xorlw	13	; case 13
 20184  00251A  B4D8               	btfsc	status,2,c
 20185  00251C  D6E1               	goto	i2l12043
 20186  00251E  0A29               	xorlw	41	; case 36
 20187  002520  B4D8               	btfsc	status,2,c
 20188  002522  D701               	goto	i2l12059
 20189  002524  0A08               	xorlw	8	; case 44
 20190  002526  B4D8               	btfsc	status,2,c
 20191  002528  D703               	goto	i2l12061
 20192  00252A  D7EB               	goto	i2l12149
 20193  00252C                     __end_of_GPSRead:
 20194                           	callstack 0
 20195                           
 20196 ;; *************** function _stringcpy *****************
 20197 ;; Defined at:
 20198 ;;		line 40 in file "bibliotecas/GPS.c"
 20199 ;; Parameters:    Size  Location     Type
 20200 ;;  str1            2    0[COMRAM] PTR unsigned char 
 20201 ;;		 -> buffer(12), 
 20202 ;;  str2            2    2[COMRAM] PTR unsigned char 
 20203 ;;		 -> rawFix(2), rawDate(7), rawSpeed(6), rawLongitude(13), 
 20204 ;;		 -> rawLatitude(13), rawTime(11), sentence(6), 
 20205 ;;  dir             2    4[COMRAM] int 
 20206 ;; Auto vars:     Size  Location     Type
 20207 ;;  chr             1    8[COMRAM] unsigned char 
 20208 ;; Return value:  Size  Location     Type
 20209 ;;                  1    wreg      void 
 20210 ;; Registers used:
 20211 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 20212 ;; Tracked objects:
 20213 ;;		On entry : 0/0
 20214 ;;		On exit  : 0/0
 20215 ;;		Unchanged: 0/0
 20216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20217 ;;      Params:         6       0       0       0       0       0       0       0       0
 20218 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20219 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20220 ;;      Totals:         9       0       0       0       0       0       0       0       0
 20221 ;;Total ram usage:        9 bytes
 20222 ;; Hardware stack levels used:    1
 20223 ;; This function calls:
 20224 ;;		Nothing
 20225 ;; This function is called by:
 20226 ;;		_GPSRead
 20227 ;; This function uses a non-reentrant model
 20228 ;;
 20229                           
 20230                           	psect	text113
 20231  004DB8                     __ptext113:
 20232                           	callstack 0
 20233  004DB8                     _stringcpy:
 20234                           	callstack 12
 20235                           
 20236                           ;GPS.c: 42: uint8_t chr = 0;
 20237                           
 20238                           ;incstack = 0
 20239  004DB8  0E00               	movlw	0
 20240  004DBA  6E09               	movwf	stringcpy@chr^0,c
 20241  004DBC                     i2l11837:
 20242                           
 20243                           ;GPS.c: 45: str2[chr + dir] = str1[chr];
 20244  004DBC  5009               	movf	stringcpy@chr^0,w,c
 20245  004DBE  2401               	addwf	stringcpy@str1^0,w,c
 20246  004DC0  6ED9               	movwf	fsr2l,c
 20247  004DC2  0E00               	movlw	0
 20248  004DC4  2002               	addwfc	(stringcpy@str1+1)^0,w,c
 20249  004DC6  6EDA               	movwf	fsr2h,c
 20250  004DC8  5009               	movf	stringcpy@chr^0,w,c
 20251  004DCA  2403               	addwf	stringcpy@str2^0,w,c
 20252  004DCC  6E07               	movwf	??_stringcpy^0,c
 20253  004DCE  0E00               	movlw	0
 20254  004DD0  2004               	addwfc	(stringcpy@str2+1)^0,w,c
 20255  004DD2  6E08               	movwf	(??_stringcpy+1)^0,c
 20256  004DD4  5005               	movf	stringcpy@dir^0,w,c
 20257  004DD6  2407               	addwf	??_stringcpy^0,w,c
 20258  004DD8  6EE1               	movwf	fsr1l,c
 20259  004DDA  5006               	movf	(stringcpy@dir+1)^0,w,c
 20260  004DDC  2008               	addwfc	(??_stringcpy+1)^0,w,c
 20261  004DDE  6EE2               	movwf	fsr1h,c
 20262  004DE0  CFDF FFE7          	movff	indf2,indf1
 20263                           
 20264                           ;GPS.c: 46: } while(str1[chr++] != '\0');
 20265  004DE4  2A09               	incf	stringcpy@chr^0,f,c
 20266  004DE6  0409               	decf	stringcpy@chr^0,w,c
 20267  004DE8  6E07               	movwf	??_stringcpy^0,c
 20268  004DEA  5007               	movf	??_stringcpy^0,w,c
 20269  004DEC  2401               	addwf	stringcpy@str1^0,w,c
 20270  004DEE  6ED9               	movwf	fsr2l,c
 20271  004DF0  0E00               	movlw	0
 20272  004DF2  2002               	addwfc	(stringcpy@str1+1)^0,w,c
 20273  004DF4  6EDA               	movwf	fsr2h,c
 20274  004DF6  50DF               	movf	indf2,w,c
 20275  004DF8  B4D8               	btfsc	status,2,c
 20276  004DFA  0012               	return	
 20277  004DFC  D7DF               	goto	i2l11837
 20278  004DFE                     __end_of_stringcpy:
 20279                           	callstack 0
 20280                           
 20281 ;; *************** function _strcmp *****************
 20282 ;; Defined at:
 20283 ;;		line 33 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\strcmp.c"
 20284 ;; Parameters:    Size  Location     Type
 20285 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 20286 ;;		 -> sentence(6), 
 20287 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 20288 ;;		 -> STR_6(6), STR_5(6), 
 20289 ;; Auto vars:     Size  Location     Type
 20290 ;;  r               1    6[COMRAM] char 
 20291 ;; Return value:  Size  Location     Type
 20292 ;;                  2    0[COMRAM] int 
 20293 ;; Registers used:
 20294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20295 ;; Tracked objects:
 20296 ;;		On entry : 0/0
 20297 ;;		On exit  : 0/0
 20298 ;;		Unchanged: 0/0
 20299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20300 ;;      Params:         4       0       0       0       0       0       0       0       0
 20301 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20302 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20303 ;;      Totals:         7       0       0       0       0       0       0       0       0
 20304 ;;Total ram usage:        7 bytes
 20305 ;; Hardware stack levels used:    1
 20306 ;; This function calls:
 20307 ;;		Nothing
 20308 ;; This function is called by:
 20309 ;;		_GPSRead
 20310 ;; This function uses a non-reentrant model
 20311 ;;
 20312                           
 20313                           	psect	text114
 20314  004CDE                     __ptext114:
 20315                           	callstack 0
 20316  004CDE                     _strcmp:
 20317                           	callstack 12
 20318                           
 20319                           ;incstack = 0
 20320  004CDE  D004               	goto	i2l11845
 20321  004CE0                     i2l11843:
 20322  004CE0  4A01               	infsnz	strcmp@s1^0,f,c
 20323  004CE2  2A02               	incf	(strcmp@s1+1)^0,f,c
 20324  004CE4  4A03               	infsnz	strcmp@s2^0,f,c
 20325  004CE6  2A04               	incf	(strcmp@s2+1)^0,f,c
 20326  004CE8                     i2l11845:
 20327  004CE8  C003  FFF6         	movff	strcmp@s2,tblptrl
 20328  004CEC  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 20329  004CF0                     	if	0	;tblptru may be non-zero
 20330  004CF0                     	endif
 20331  004CF0                     	if	0	;tblptru may be non-zero
 20332  004CF0                     	endif
 20333  004CF0  0008               	tblrd		*
 20334  004CF2  CFF5 F005          	movff	tablat,??_strcmp
 20335  004CF6  C001  FFD9         	movff	strcmp@s1,fsr2l
 20336  004CFA  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 20337  004CFE  50DF               	movf	indf2,w,c
 20338  004D00  6E06               	movwf	(??_strcmp+1)^0,c
 20339  004D02  5005               	movf	??_strcmp^0,w,c
 20340  004D04  5C06               	subwf	(??_strcmp+1)^0,w,c
 20341  004D06  6E07               	movwf	strcmp@r^0,c
 20342  004D08  5007               	movf	strcmp@r^0,w,c
 20343  004D0A  A4D8               	btfss	status,2,c
 20344  004D0C  D007               	goto	i2u1425_40
 20345  004D0E  C001  FFD9         	movff	strcmp@s1,fsr2l
 20346  004D12  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 20347  004D16  50DF               	movf	indf2,w,c
 20348  004D18  A4D8               	btfss	status,2,c
 20349  004D1A  D7E2               	goto	i2l11843
 20350  004D1C                     i2u1425_40:
 20351  004D1C  5007               	movf	strcmp@r^0,w,c
 20352  004D1E  6E01               	movwf	?_strcmp^0,c
 20353  004D20  6A02               	clrf	(?_strcmp+1)^0,c
 20354  004D22  BE01               	btfsc	?_strcmp^0,7,c
 20355  004D24  0602               	decf	(?_strcmp+1)^0,f,c
 20356  004D26  0012               	return		;funcret
 20357  004D28                     __end_of_strcmp:
 20358                           	callstack 0
 20359                           
 20360                           	psect	text115
 20361  000000                     __ptext115:
 20362                           	callstack 0
 20363                           
 20364                           	psect	rparam
 20365  0000                     
 20366                           	psect	temp
 20367  000047                     btemp:
 20368                           	callstack 0
 20369  000047                     	ds	1
 20370  0000                     int$flags	set	btemp
 20371  0000                     wtemp8	set	btemp+1
 20372  0000                     ttemp5	set	btemp+1
 20373  0000                     ttemp6	set	btemp+4
 20374  0000                     ttemp7	set	btemp+8
 20375                           
 20376                           	psect	idloc
 20377                           
 20378                           ;Config register IDLOC0 @ 0x200000
 20379                           ;	unspecified, using default values
 20380  200000                     	org	2097152
 20381  200000  FF                 	db	255
 20382                           
 20383                           ;Config register IDLOC1 @ 0x200001
 20384                           ;	unspecified, using default values
 20385  200001                     	org	2097153
 20386  200001  FF                 	db	255
 20387                           
 20388                           ;Config register IDLOC2 @ 0x200002
 20389                           ;	unspecified, using default values
 20390  200002                     	org	2097154
 20391  200002  FF                 	db	255
 20392                           
 20393                           ;Config register IDLOC3 @ 0x200003
 20394                           ;	unspecified, using default values
 20395  200003                     	org	2097155
 20396  200003  FF                 	db	255
 20397                           
 20398                           ;Config register IDLOC4 @ 0x200004
 20399                           ;	unspecified, using default values
 20400  200004                     	org	2097156
 20401  200004  FF                 	db	255
 20402                           
 20403                           ;Config register IDLOC5 @ 0x200005
 20404                           ;	unspecified, using default values
 20405  200005                     	org	2097157
 20406  200005  FF                 	db	255
 20407                           
 20408                           ;Config register IDLOC6 @ 0x200006
 20409                           ;	unspecified, using default values
 20410  200006                     	org	2097158
 20411  200006  FF                 	db	255
 20412                           
 20413                           ;Config register IDLOC7 @ 0x200007
 20414                           ;	unspecified, using default values
 20415  200007                     	org	2097159
 20416  200007  FF                 	db	255
 20417                           
 20418                           	psect	config
 20419                           
 20420                           ;Config register CONFIG1L @ 0x300000
 20421                           ;	unspecified, using default values
 20422                           ;	PLL Prescaler Selection bits
 20423                           ;	PLLDIV = 0x0, unprogrammed default
 20424                           ;	System Clock Postscaler Selection bits
 20425                           ;	CPUDIV = 0x0, unprogrammed default
 20426                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
 20427                           ;	USBDIV = 0x0, unprogrammed default
 20428  300000                     	org	3145728
 20429  300000  00                 	db	0
 20430                           
 20431                           ;Config register CONFIG1H @ 0x300001
 20432                           ;	unspecified, using default values
 20433                           ;	Oscillator Selection bits
 20434                           ;	FOSC = 0x5, unprogrammed default
 20435                           ;	Fail-Safe Clock Monitor Enable bit
 20436                           ;	FCMEN = 0x0, unprogrammed default
 20437                           ;	Internal/External Oscillator Switchover bit
 20438                           ;	IESO = 0x0, unprogrammed default
 20439  300001                     	org	3145729
 20440  300001  05                 	db	5
 20441                           
 20442                           ;Config register CONFIG2L @ 0x300002
 20443                           ;	unspecified, using default values
 20444                           ;	Power-up Timer Enable bit
 20445                           ;	PWRT = 0x1, unprogrammed default
 20446                           ;	Brown-out Reset Enable bits
 20447                           ;	BOR = 0x3, unprogrammed default
 20448                           ;	Brown-out Reset Voltage bits
 20449                           ;	BORV = 0x3, unprogrammed default
 20450                           ;	USB Voltage Regulator Enable bit
 20451                           ;	VREGEN = 0x0, unprogrammed default
 20452  300002                     	org	3145730
 20453  300002  1F                 	db	31
 20454                           
 20455                           ;Config register CONFIG2H @ 0x300003
 20456                           ;	unspecified, using default values
 20457                           ;	Watchdog Timer Enable bit
 20458                           ;	WDT = 0x1, unprogrammed default
 20459                           ;	Watchdog Timer Postscale Select bits
 20460                           ;	WDTPS = 0xF, unprogrammed default
 20461  300003                     	org	3145731
 20462  300003  1F                 	db	31
 20463                           
 20464                           ; Padding undefined space
 20465  300004                     	org	3145732
 20466  300004  FF                 	db	255
 20467                           
 20468                           ;Config register CONFIG3H @ 0x300005
 20469                           ;	unspecified, using default values
 20470                           ;	CCP2 MUX bit
 20471                           ;	CCP2MX = 0x1, unprogrammed default
 20472                           ;	PORTB A/D Enable bit
 20473                           ;	PBADEN = 0x1, unprogrammed default
 20474                           ;	Low-Power Timer 1 Oscillator Enable bit
 20475                           ;	LPT1OSC = 0x0, unprogrammed default
 20476                           ;	MCLR Pin Enable bit
 20477                           ;	MCLRE = 0x1, unprogrammed default
 20478  300005                     	org	3145733
 20479  300005  83                 	db	131
 20480                           
 20481                           ;Config register CONFIG4L @ 0x300006
 20482                           ;	unspecified, using default values
 20483                           ;	Stack Full/Underflow Reset Enable bit
 20484                           ;	STVREN = 0x1, unprogrammed default
 20485                           ;	Single-Supply ICSP Enable bit
 20486                           ;	LVP = 0x1, unprogrammed default
 20487                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
 20488                           ;	ICPRT = 0x0, unprogrammed default
 20489                           ;	Extended Instruction Set Enable bit
 20490                           ;	XINST = 0x0, unprogrammed default
 20491                           ;	Background Debugger Enable bit
 20492                           ;	DEBUG = 0x1, unprogrammed default
 20493  300006                     	org	3145734
 20494  300006  85                 	db	133
 20495                           
 20496                           ; Padding undefined space
 20497  300007                     	org	3145735
 20498  300007  FF                 	db	255
 20499                           
 20500                           ;Config register CONFIG5L @ 0x300008
 20501                           ;	unspecified, using default values
 20502                           ;	Code Protection bit
 20503                           ;	CP0 = 0x1, unprogrammed default
 20504                           ;	Code Protection bit
 20505                           ;	CP1 = 0x1, unprogrammed default
 20506                           ;	Code Protection bit
 20507                           ;	CP2 = 0x1, unprogrammed default
 20508                           ;	Code Protection bit
 20509                           ;	CP3 = 0x1, unprogrammed default
 20510  300008                     	org	3145736
 20511  300008  0F                 	db	15
 20512                           
 20513                           ;Config register CONFIG5H @ 0x300009
 20514                           ;	unspecified, using default values
 20515                           ;	Boot Block Code Protection bit
 20516                           ;	CPB = 0x1, unprogrammed default
 20517                           ;	Data EEPROM Code Protection bit
 20518                           ;	CPD = 0x1, unprogrammed default
 20519  300009                     	org	3145737
 20520  300009  C0                 	db	192
 20521                           
 20522                           ;Config register CONFIG6L @ 0x30000A
 20523                           ;	unspecified, using default values
 20524                           ;	Write Protection bit
 20525                           ;	WRT0 = 0x1, unprogrammed default
 20526                           ;	Write Protection bit
 20527                           ;	WRT1 = 0x1, unprogrammed default
 20528                           ;	Write Protection bit
 20529                           ;	WRT2 = 0x1, unprogrammed default
 20530                           ;	Write Protection bit
 20531                           ;	WRT3 = 0x1, unprogrammed default
 20532  30000A                     	org	3145738
 20533  30000A  0F                 	db	15
 20534                           
 20535                           ;Config register CONFIG6H @ 0x30000B
 20536                           ;	unspecified, using default values
 20537                           ;	Configuration Register Write Protection bit
 20538                           ;	WRTC = 0x1, unprogrammed default
 20539                           ;	Boot Block Write Protection bit
 20540                           ;	WRTB = 0x1, unprogrammed default
 20541                           ;	Data EEPROM Write Protection bit
 20542                           ;	WRTD = 0x1, unprogrammed default
 20543  30000B                     	org	3145739
 20544  30000B  E0                 	db	224
 20545                           
 20546                           ;Config register CONFIG7L @ 0x30000C
 20547                           ;	unspecified, using default values
 20548                           ;	Table Read Protection bit
 20549                           ;	EBTR0 = 0x1, unprogrammed default
 20550                           ;	Table Read Protection bit
 20551                           ;	EBTR1 = 0x1, unprogrammed default
 20552                           ;	Table Read Protection bit
 20553                           ;	EBTR2 = 0x1, unprogrammed default
 20554                           ;	Table Read Protection bit
 20555                           ;	EBTR3 = 0x1, unprogrammed default
 20556  30000C                     	org	3145740
 20557  30000C  0F                 	db	15
 20558                           
 20559                           ;Config register CONFIG7H @ 0x30000D
 20560                           ;	unspecified, using default values
 20561                           ;	Boot Block Table Read Protection bit
 20562                           ;	EBTRB = 0x1, unprogrammed default
 20563  30000D                     	org	3145741
 20564  30000D  40                 	db	64
 20565                           tosu	equ	0xFFF
 20566                           tosh	equ	0xFFE
 20567                           tosl	equ	0xFFD
 20568                           stkptr	equ	0xFFC
 20569                           pclatu	equ	0xFFB
 20570                           pclath	equ	0xFFA
 20571                           pcl	equ	0xFF9
 20572                           tblptru	equ	0xFF8
 20573                           tblptrh	equ	0xFF7
 20574                           tblptrl	equ	0xFF6
 20575                           tablat	equ	0xFF5
 20576                           prodh	equ	0xFF4
 20577                           prodl	equ	0xFF3
 20578                           indf0	equ	0xFEF
 20579                           postinc0	equ	0xFEE
 20580                           postdec0	equ	0xFED
 20581                           preinc0	equ	0xFEC
 20582                           plusw0	equ	0xFEB
 20583                           fsr0h	equ	0xFEA
 20584                           fsr0l	equ	0xFE9
 20585                           wreg	equ	0xFE8
 20586                           indf1	equ	0xFE7
 20587                           postinc1	equ	0xFE6
 20588                           postdec1	equ	0xFE5
 20589                           preinc1	equ	0xFE4
 20590                           plusw1	equ	0xFE3
 20591                           fsr1h	equ	0xFE2
 20592                           fsr1l	equ	0xFE1
 20593                           bsr	equ	0xFE0
 20594                           indf2	equ	0xFDF
 20595                           postinc2	equ	0xFDE
 20596                           postdec2	equ	0xFDD
 20597                           preinc2	equ	0xFDC
 20598                           plusw2	equ	0xFDB
 20599                           fsr2h	equ	0xFDA
 20600                           fsr2l	equ	0xFD9
 20601                           status	equ	0xFD8

Data Sizes:
    Strings     301
    Constant    118
    Data        15
    BSS         849
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      70
    BANK0           160    152     158
    BANK1           256      0     231
    BANK2           256     34      96
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$3540	PTR FTN()void  size(2) Largest target is 1
		 -> troca_de_tela(), disparo_gravacao(), verifica_dados_operacionais(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_27(CODE[7]), STR_26(CODE[5]), rawDate(BANK1[7]), rawSpeed(BANK1[6]), 
		 -> rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_27(CODE[7]), STR_26(CODE[5]), rawDate(BANK1[7]), rawSpeed(BANK1[6]), 
		 -> rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 13
		 -> NULL(NULL[0]), STR_15(CODE[6]), STR_8(CODE[13]), STR_7(CODE[12]), 
		 -> rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 20
		 -> convert_to_int_point@temp_str(BANK0[12]), filename(BANK1[20]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 20
		 -> convert_to_int_point@temp_str(BANK0[12]), filename(BANK1[20]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_6(CODE[6]), STR_5(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 6
		 -> sentence(BANK1[6]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_16(CODE[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 20
		 -> filename(BANK1[20]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 20
		 -> filename(BANK1[20]), 

    memset@p1	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memset@p	PTR unsigned char  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d1	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK1[20]), fs(BIGRAM[544]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK1[20]), fs(BIGRAM[544]), 

    memcpy@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK0[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK0[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), STR_23(CODE[4]), 

    memcmp@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    ultoa@buf	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__ultoa	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_lcd@texto(BANK0[7]), 

    ltoa@buf	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_lcd@texto(BANK0[7]), 

    ltoa@cp	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), 

    atol@s	PTR const unsigned char  size(2) Largest target is 44
		 -> convert_to_int_point@convert_str(BANK0[10]), fence_diff_lat(CODE[40]), fence_diff_long(CODE[44]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 0

    convert_to_int_point@p_buff	PTR const unsigned char  size(2) Largest target is 13
		 -> NULL(NULL[0]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), 

    convert_to_int@p_buff	PTR const unsigned char  size(2) Largest target is 44
		 -> fence_diff_lat(CODE[40]), fence_diff_long(CODE[44]), 

    temp_buff_lat	PTR unsigned char  size(2) Largest target is 13
		 -> NULL(NULL[0]), rawLatitude(BANK1[13]), 

    temp_buff_long	PTR unsigned char  size(2) Largest target is 13
		 -> NULL(NULL[0]), rawLongitude(BANK1[13]), 

    point_buff_gps_long	PTR unsigned char  size(2) Largest target is 13
		 -> NULL(NULL[0]), rawLongitude(BANK1[13]), 

    point_buff_gps_lat	PTR unsigned char  size(2) Largest target is 13
		 -> NULL(NULL[0]), rawLatitude(BANK1[13]), 

    disparo_gravacao@fix_gps	PTR unsigned char  size(2) Largest target is 2
		 -> rawFix(BANK1[2]), 

    p_tarefas	PTR FTN()void [4] size(2) Largest target is 1
		 -> troca_de_tela(), disparo_gravacao(), verifica_dados_operacionais(), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), 

    fprintf@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fprintf@str	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_17(CODE[40]), 

    fprintf@arp	PTR void [1] size(1) Largest target is 2
		 -> ?_fprintf(BANK0[2]), 

    fputs@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fputs@str	PTR const unsigned char  size(2) Largest target is 62
		 -> fprintf@s(BANK2[16]), ?_fprintf(BANK0[2]), STR_21(CODE[4]), STR_20(CODE[2]), 
		 -> STR_19(CODE[2]), STR_18(CODE[2]), string_dado(BANK2[62]), 

    fputc@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    sp__fgets	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_readdir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_opendir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@bw	PTR unsigned int  size(1) Largest target is 2
		 -> fputc@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(1) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_write@wbuff	PTR const unsigned char  size(1) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__memcpy	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK1[20]), fs(BIGRAM[544]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_22(CODE[13]), filename(BANK1[20]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> fs(BIGRAM[544]), 

    validate@fs	PTR const struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@path	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> f_opendir@path(COMRAM[2]), f_open@path(BANK0[2]), 

    auto_mount@p	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_22(CODE[13]), filename(BANK1[20]), 

    check_fs@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dir	PTR PTR unsigned char  size(1) Largest target is 2
		 -> f_open@dir(BANK0[2]), 

    reserve_direntry@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj	PTR struct _DIR_E size(1) Largest target is 15
		 -> f_open@dj(BANK0[14]), 

    reserve_direntry@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@fn	PTR unsigned char  size(1) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), 

    trace_path@dir	PTR PTR unsigned char  size(1) Largest target is 2
		 -> f_opendir@dir(COMRAM[2]), f_open@dir(BANK0[2]), 

    trace_path@path	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_22(CODE[13]), filename(BANK1[20]), 

    trace_path@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dj	PTR struct _DIR_E size(1) Largest target is 15
		 -> f_open@dj(BANK0[14]), 

    trace_path@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@path	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> trace_path@path(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@dirname	PTR unsigned char  size(1) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK0[12]), 

    S1394_DIR_E$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj	PTR struct _DIR_E size(1) Largest target is 15
		 -> f_open@dj(BANK0[14]), 

    clust2sect@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    create_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    remove_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@p	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    get_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sync@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    FatFs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    move_window@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    monta_sd@dado	PTR unsigned char  size(2) Largest target is 13
		 -> STR_27(CODE[7]), STR_26(CODE[5]), rawDate(BANK1[7]), rawSpeed(BANK1[6]), 
		 -> rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), rawTime(BANK1[11]), 

    sp__leitura_sdcard	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK1[20]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 20
		 -> filename(BANK1[20]), 

    S724_FIL$dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    S724_FIL$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__Speed	PTR unsigned char  size(2) Largest target is 6
		 -> rawSpeed(BANK1[6]), 

    sp__fix	PTR unsigned char  size(2) Largest target is 2
		 -> rawFix(BANK1[2]), 

    sp__Longitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLongitude(BANK1[13]), 

    sp__Latitude	PTR unsigned char  size(2) Largest target is 13
		 -> rawLatitude(BANK1[13]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> convert_to_int_point@temp_str(BANK0[12]), filename(BANK1[20]), rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), 

    stringcpy@str1	PTR unsigned char  size(2) Largest target is 12
		 -> buffer(BANK1[12]), 

    stringcpy@str2	PTR unsigned char  size(2) Largest target is 13
		 -> rawFix(BANK1[2]), rawDate(BANK1[7]), rawSpeed(BANK1[6]), rawLongitude(BANK1[13]), 
		 -> rawLatitude(BANK1[13]), rawTime(BANK1[11]), sentence(BANK1[6]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 21
		 -> STR_36(CODE[8]), STR_35(CODE[9]), STR_34(CODE[4]), STR_33(CODE[4]), 
		 -> STR_32(CODE[5]), STR_31(CODE[2]), STR_30(CODE[5]), STR_29(CODE[7]), 
		 -> STR_28(CODE[7]), STR_25(CODE[11]), mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), 
		 -> NULL(NULL[0]), STR_14(CODE[9]), STR_13(CODE[10]), STR_12(CODE[10]), 
		 -> STR_11(CODE[14]), STR_10(CODE[21]), STR_9(CODE[15]), rawFix(BANK1[2]), 
		 -> rawLongitude(BANK1[13]), rawLatitude(BANK1[13]), escreve_inteiro_lcd@texto(BANK0[7]), STR_4(CODE[11]), 
		 -> STR_3(CODE[10]), STR_2(CODE[16]), STR_1(CODE[11]), 

    sp__ltoa	PTR unsigned char  size(1) Largest target is 7
		 -> escreve_inteiro_lcd@texto(BANK0[7]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK1[20]), fs(BIGRAM[544]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK1[20]), fs(BIGRAM[544]), 


Critical Paths under _main in COMRAM

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _atoi->___wmul
    ___ftmul->___awtoft
    ___ftge->___ftmul
    ___awtoft->_atoi
    _ltoa->_ultoa
    _ultoa->___lldiv
    _escreve_cmd_lcd->_delay
    _verifica_diferenca->_convert_to_int_point
    _convert_to_int_point->_atol
    _convert_to_int->_atol
    _atol->___lmul
    _armazena_longitude->_Longitude
    _Longitude->_strcpy
    _armazena_latitude->_Latitude
    _Latitude->_strcpy
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _escrita_sdcard->_f_close
    _fprintf->_fputs
    _f_write->_disk_write
    _trace_path->_next_dir_entry
    _make_dirfile->_memset
    _reserve_direntry->_next_dir_entry
    _clust2sect->___lmul
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_command
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _check_fs->_disk_read
    _validate->_disk_status
    _disk_status->_sdc_disk_status
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_command
    _proceed->_escreve_SPI
    _command->_dummy_clocks
    _command->_wait_ready
    _get_fattime->_GPSDay
    _get_fattime->_GPSHour
    _get_fattime->_GPSMinute
    _get_fattime->_GPSMonth
    _get_fattime->_GPSSecond
    _get_fattime->_GPSyear
    _dados_gps_to_sd->_monta_sd
    _monta_sd->_strlen

Critical Paths under _isr in COMRAM

    _isr->_GPSRead
    _GPSRead->_stringcpy

Critical Paths under _main in BANK0

    _main->_escalonador
    _escalonador->_disparo_gravacao
    _verifica_dados_operacionais->_verifica_fence_externo
    ___ftge->___ftmul
    _troca_de_tela->_escreve_inteiro_lcd
    _escreve_inteiro_lcd->_ltoa
    _disparo_gravacao->_grava_sd
    _verifica_fence_externo->_verifica_diferenca
    _verifica_diferenca->_convert_to_int_point
    _convert_to_int_point->_atol
    _convert_to_int->_atol
    _inicializa_uart->_configura_baudrate_uart
    _escrita_sdcard->_fprintf
    _fprintf->_fputs
    _fputs->_fputc
    _fputc->_f_write
    _f_write->_create_chain
    _f_open->_reserve_direntry
    _trace_path->_next_dir_entry
    _reserve_direntry->_create_chain
    _next_dir_entry->_get_cluster
    _remove_chain->_put_cluster
    _auto_mount->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _check_fs->_disk_read
    _f_lseek->_create_chain
    _create_chain->_put_cluster
    _put_cluster->_move_window
    _get_cluster->_move_window
    _f_close->_f_sync
    _f_sync->_sync
    _sync->_move_window
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _disk_read->_sdc_disk_read

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _escrita_sdcard->_fprintf

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  470088
                        _escalonador
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    6763
                                             30 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                             27 COMRAM     1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     148
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     148
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     2     0      2     148
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  461647
                                            149 BANK0      3     3      0
                   _disparo_gravacao *
                      _troca_de_tela *
        _verifica_dados_operacionais *
 ---------------------------------------------------------------------------------
 (2) _verifica_dados_operacionais                          1     1      0   18835
                                             37 BANK0      1     1      0
                           ___awtoft
                             ___ftge
                            ___ftmul
                               _atoi
             _verifica_fence_externo
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    1805
                                             30 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4147
                                             41 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___awtoft (ARG)
                           ___ftpack
                               _atoi (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     518
                                              9 BANK0      9     3      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                               _atoi (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3556
                                             37 COMRAM     4     1      3
                           ___ftpack
                               _atoi (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3193
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _troca_de_tela                                        1     1      0   14783
                                             19 BANK0      1     1      0
                           _Latitude
                          _Longitude
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                                _fix
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_inteiro_lcd                                 11     7      4    6442
                                              8 BANK0     11     7      4
              _escreve_frase_ram_lcd
                               _ltoa
 ---------------------------------------------------------------------------------
 (4) _ltoa                                                 8     1      7    3063
                                              0 BANK0      8     1      7
                              _ultoa
 ---------------------------------------------------------------------------------
 (5) _ultoa                                               12     5      7    2560
                                             37 COMRAM    12     5      7
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                             26 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _disparo_gravacao                                     3     3      0  427806
                                            146 BANK0      3     3      0
                                _fix
                           _grava_sd
             _verifica_fence_externo
 ---------------------------------------------------------------------------------
 (3) _verifica_fence_externo                               1     1      0    8806
                                             36 BANK0      1     1      0
                  _armazena_latitude
                 _armazena_longitude
                           _monta_sd
                 _verifica_diferenca
        _verifica_plausibilidade_lat
       _verifica_plausibilidade_long
 ---------------------------------------------------------------------------------
 (4) _verifica_plausibilidade_long                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _verifica_plausibilidade_lat                          1     1      0       3
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _verifica_diferenca                                   4     4      0    4986
                                             32 BANK0      4     4      0
                     _convert_to_int
               _convert_to_int_point
 ---------------------------------------------------------------------------------
 (5) _convert_to_int_point                                31    27      4    3147
                                             44 COMRAM     5     1      4
                                              6 BANK0     26    26      0
                               _atol
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _convert_to_int                                       7     3      4    1839
                                             44 COMRAM     4     0      4
                               _atol
 ---------------------------------------------------------------------------------
 (6) _atol                                                14    10      4    1445
                                             36 COMRAM     8     4      4
                                              0 BANK0      6     6      0
                             ___lmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              3     3      0      99
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _armazena_longitude                                   0     0      0     829
                          _Longitude
 ---------------------------------------------------------------------------------
 (5) _Longitude                                            2     0      2     829
                                             30 COMRAM     2     0      2
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _armazena_latitude                                    0     0      0     829
                           _Latitude
 ---------------------------------------------------------------------------------
 (5) _Latitude                                             2     0      2     829
                                             30 COMRAM     2     0      2
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _grava_sd                                             1     1      0  418966
                                            145 BANK0      1     1      0
                        _desliga_SPI
                       _desliga_uart
                     _escrita_sdcard
                     _inicializa_SPI
                    _inicializa_uart
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0     917
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4     917
                                             38 COMRAM     6     2      4
                                              0 BANK0      8     8      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     604
                                             24 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (4) _inicializa_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _escrita_sdcard                                       7     7      0  418046
                    _dados_gps_to_sd
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _fprintf
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               6     2      4     829
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _strcat                                               6     2      4     323
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _fprintf                                             58    36     22  128536
                                            121 BANK0     24     2     22
                                              0 BANK2     34    34      0
                            ___lldiv
                            ___llmod
                             ___wmul
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4   61743
                                             48 COMRAM     1     1      0
                                            115 BANK0      6     2      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                7     3      4   61250
                                            108 BANK0      7     3      4
                            _f_write
 ---------------------------------------------------------------------------------
 (8) _f_write                                             30    24      6   60438
                                             78 BANK0     30    24      6
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     592
                                             24 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (5) _f_open                                              44    39      5  200544
                                             96 BANK0     44    39      5
                         _auto_mount
                        _get_fattime
                             _memcpy
                             _memset
                        _move_window
                       _remove_chain
                   _reserve_direntry
                         _trace_path
 ---------------------------------------------------------------------------------
 (6) _trace_path                                          20    15      5   38678
                                             72 BANK0     20    15      5
                         _clust2sect
                       _make_dirfile
                             _memcmp
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (7) _make_dirfile                                        11     9      2    2102
                                             32 COMRAM    11     9      2
                             _memset
 ---------------------------------------------------------------------------------
 (6) _reserve_direntry                                    18    16      2   76583
                                             78 BANK0     18    16      2
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memset
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (7) _next_dir_entry                                      12    11      1   18672
                                             48 COMRAM     1     0      1
                                             61 BANK0     11    11      0
                         _clust2sect
                        _get_cluster
 ---------------------------------------------------------------------------------
 (9) _clust2sect                                          11     7      4    1615
                                             36 COMRAM    11     7      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) _remove_chain                                         8     6      2   33174
                                             64 BANK0      8     6      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (9) _memcpy                                              11     5      6     970
                                             24 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (6) _auto_mount                                          46    44      2   32633
                                             27 BANK0     46    44      2
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                             _memset
 ---------------------------------------------------------------------------------
 (8) _memset                                               8     2      6    1008
                                             24 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (7) _disk_initialize                                      4     4      0   20654
                                             44 COMRAM     2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (8) _sdc_disk_initialize                                 13    13      0   20524
                                             43 COMRAM     1     1      0
                                              0 BANK0     12    12      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (9) _sdc_reset                                           20    20      0    9828
                                             36 COMRAM     7     7      0
                            _command
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    3267
                                             27 COMRAM     3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                             26 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    2939
                                             27 COMRAM     2     0      2
              _escreve_caractere_lcd
                                _fix (ARG)
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                             26 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _check_fs                                             8     4      4    6616
                                             19 BANK0      8     4      4
                          _disk_read
                             _memcmp
 ---------------------------------------------------------------------------------
 (7) _memcmp                                               8     2      6     701
                                             24 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8     696
                                             24 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) _f_mount                                              3     1      2     290
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (5) _f_lseek                                             33    27      6   54940
                                             78 BANK0     33    27      6
                            ___lldiv
                       _create_chain
                        _get_cluster
                           _validate
 ---------------------------------------------------------------------------------
 (9) _create_chain                                        14    12      2   34237
                                             64 BANK0     14    12      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (10) _put_cluster                                        24    20      4   16553
                                             40 BANK0     24    20      4
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (10) _get_cluster                                        21    19      2   16243
                                             40 BANK0     21    19      2
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1282
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8    1261
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (5) _f_close                                              3     1      2   30425
                                             48 COMRAM     1     1      0
                                             51 BANK0      2     0      2
                             _f_sync
 ---------------------------------------------------------------------------------
 (6) _f_sync                                               9     7      2   30002
                                             42 BANK0      9     7      2
                        _get_fattime
                        _move_window
                               _sync
                           _validate
 ---------------------------------------------------------------------------------
 (9) _validate                                             6     2      4    1178
                                             30 COMRAM     6     2      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (10) _disk_status                                         4     4      0     226
                                             26 COMRAM     4     4      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (11) _sdc_disk_status                                     4     4      0      34
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _sync                                                 2     2      0   14103
                                             40 BANK0      2     2      0
                         _disk_ioctl
                        _move_window
 ---------------------------------------------------------------------------------
 (9) _move_window                                         21    17      4   13765
                                             19 BANK0     21    17      4
                          _disk_read
                         _disk_write
 ---------------------------------------------------------------------------------
 (10) _disk_write                                         12     5      7    6087
                                             47 COMRAM     1     1      0
                                              8 BANK0     11     4      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (11) _sdc_disk_write                                     19    12      7    4623
                                             36 COMRAM    11     4      7
                                              0 BANK0      8     8      0
                            _command
                       _dummy_clocks
                        _escreve_SPI
                        _leitura_SPI
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (10) _disk_read                                          12     5      7    5608
                                             47 COMRAM     1     1      0
                                              8 BANK0     11     4      7
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (11) _sdc_disk_read                                      24    17      7    4459
                                             36 COMRAM    11     4      7
                                              0 BANK0      8     8      0
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (12) _response                                            1     1      0      34
                                             24 COMRAM     1     1      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _proceed                                             0     0      0      34
                        _escreve_SPI
 ---------------------------------------------------------------------------------
 (12) _command                                             7     2      5    3412
                                             29 COMRAM     7     2      5
                       _dummy_clocks
                        _escreve_SPI
                         _wait_ready
 ---------------------------------------------------------------------------------
 (13) _wait_ready                                         15    15      0      99
                                             24 COMRAM     5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (13) _escreve_SPI                                         2     2      0      34
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (12) _dummy_clocks                                        5     5      0      68
                                             24 COMRAM     5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (13) _leitura_SPI                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _disk_ioctl                                           7     4      3     304
                                             24 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (6) _get_fattime                                         52    48      4     389
                                             28 COMRAM    14    10      4
                                              0 BANK0     38    38      0
                             _GPSDay
                            _GPSHour
                          _GPSMinute
                           _GPSMonth
                          _GPSSecond
                            _GPSyear
 ---------------------------------------------------------------------------------
 (7) _GPSyear                                              4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _GPSSecond                                            4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _GPSMonth                                             4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _GPSMinute                                            4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _GPSHour                                              4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _GPSDay                                               4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _dados_gps_to_sd                                      0     0      0    2159
                           _monta_sd
 ---------------------------------------------------------------------------------
 (4) _monta_sd                                             5     3      2    2159
                                             28 COMRAM     5     3      2
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               4     2      2     220
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _desliga_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _desliga_SPI                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fix                                                  2     0      2       0
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (17) _isr                                                13    13      0    2877
                                             11 COMRAM    13    13      0
                            _GPSRead
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (18) i2_write_timer_zero                                  2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (18) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (18) _GPSRead                                             2     2      0    2699
                                              9 COMRAM     2     2      0
                             _strcmp
                          _stringcpy
 ---------------------------------------------------------------------------------
 (19) _stringcpy                                           9     3      6    2110
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (19) _strcmp                                              7     3      4     493
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 19
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _escalonador
     _disparo_gravacao *
       _fix
       _grava_sd
         _desliga_SPI
         _desliga_uart
         _escrita_sdcard
           _dados_gps_to_sd
             _monta_sd
               _strlen
           _f_close
             _f_sync
               _get_fattime
                 _GPSDay
                 _GPSHour
                 _GPSMinute
                 _GPSMonth
                 _GPSSecond
                 _GPSyear
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _sync
                 _disk_ioctl
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _validate
                 _disk_status
                   _sdc_disk_status
           _f_lseek
             ___lldiv
             _create_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
           _f_mount
           _f_open
             _auto_mount
               ___lldiv
               ___lmul
               _check_fs
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _memcmp
               _disk_initialize
                 _sdc_disk_initialize
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                     _fix (ARG)
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
                   _sdc_reset
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                       _fix (ARG)
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _disk_status
                 _sdc_disk_status
               _memset
             _get_fattime
               _GPSDay
               _GPSHour
               _GPSMinute
               _GPSMonth
               _GPSSecond
               _GPSyear
             _memcpy
             _memset
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _remove_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _reserve_direntry
               _clust2sect
                 ___lmul
               _create_chain
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                 _put_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memset
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _next_dir_entry
                 _clust2sect
                   ___lmul
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
             _trace_path
               _clust2sect
                 ___lmul
               _make_dirfile
                 _memset
               _memcmp
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _next_dir_entry
                 _clust2sect
                   ___lmul
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
           _fprintf
             ___lldiv
             ___llmod
             ___wmul
             _fputc
               _f_write
                 _clust2sect
                   ___lmul
                 _create_chain
                   _get_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                   _put_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _memcpy
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                 _validate
                   _disk_status
                     _sdc_disk_status
             _fputs
               _fputc
                 _f_write
                   _clust2sect
                     ___lmul
                   _create_chain
                     _get_cluster
                       ___wmul
                       _move_window
                         _disk_read
                           _sdc_disk_read
                             _command
                               _dummy_clocks
                                 _leitura_SPI
                               _escreve_SPI
                               _wait_ready
                                 _leitura_SPI
                             _dummy_clocks
                               _leitura_SPI
                             _proceed
                               _escreve_SPI
                             _response
                               _leitura_SPI
                         _disk_write
                           _sdc_disk_write
                             _command
                               _dummy_clocks
                                 _leitura_SPI
                               _escreve_SPI
                               _wait_ready
                                 _leitura_SPI
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _leitura_SPI
                             _proceed
                               _escreve_SPI
                             _response
                               _leitura_SPI
                     _put_cluster
                       ___wmul
                       _move_window
                         _disk_read
                           _sdc_disk_read
                             _command
                               _dummy_clocks
                                 _leitura_SPI
                               _escreve_SPI
                               _wait_ready
                                 _leitura_SPI
                             _dummy_clocks
                               _leitura_SPI
                             _proceed
                               _escreve_SPI
                             _response
                               _leitura_SPI
                         _disk_write
                           _sdc_disk_write
                             _command
                               _dummy_clocks
                                 _leitura_SPI
                               _escreve_SPI
                               _wait_ready
                                 _leitura_SPI
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _leitura_SPI
                             _proceed
                               _escreve_SPI
                             _response
                               _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _memcpy
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                   _validate
                     _disk_status
                       _sdc_disk_status
           _strcat
           _strcpy
         _inicializa_SPI
         _inicializa_uart
           _configura_baudrate_uart
             ___aldiv
       _verifica_fence_externo
         _armazena_latitude
           _Latitude
             _strcpy
         _armazena_longitude
           _Longitude
             _strcpy
         _monta_sd
           _strlen
         _verifica_diferenca
           _convert_to_int
             _atol
               ___lmul
               _isdigit
           _convert_to_int_point
             _atol
               ___lmul
               _isdigit
             _strcpy
         _verifica_plausibilidade_lat
         _verifica_plausibilidade_long
     _troca_de_tela *
       _Latitude
         _strcpy
       _Longitude
         _strcpy
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
         _fix (ARG)
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
           _fix (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _fix
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
     _verifica_dados_operacionais *
       ___awtoft
         ___ftpack
         _atoi (ARG)
           ___wmul
           _isdigit
       ___ftge
         ___awtoft (ARG)
           ___ftpack
           _atoi (ARG)
             ___wmul
             _isdigit
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _atoi (ARG)
               ___wmul
               _isdigit
           ___ftpack (ARG)
           _atoi (ARG)
             ___wmul
             _isdigit
         _atoi (ARG)
           ___wmul
           _isdigit
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
           _atoi (ARG)
             ___wmul
             _isdigit
         ___ftpack (ARG)
         _atoi (ARG)
           ___wmul
           _isdigit
       _atoi
         ___wmul
         _isdigit
       _verifica_fence_externo
         _armazena_latitude
           _Latitude
             _strcpy
         _armazena_longitude
           _Longitude
             _strcpy
         _monta_sd
           _strlen
         _verifica_diferenca
           _convert_to_int
             _atol
               ___lmul
               _isdigit
           _convert_to_int_point
             _atol
               ___lmul
               _isdigit
             _strcpy
         _verifica_plausibilidade_lat
         _verifica_plausibilidade_long
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
       _fix (ARG)
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _GPSRead
     _strcmp
     _stringcpy
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     220      21       26.6%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     22      60       9       37.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E7       7       90.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     98      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     31      46       1       74.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     22B      20        0.0%
DATA                 0      0     44B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Wed May 11 15:01:37 2022

                    next_dir_entry@idx 00A6               __end_of_mensagem_inicial 4388  
         __end_of_convert_to_int_point 41DA                    next_dir_entry@clust 00A4  
                          _SSPSTATbits 000FC7                       ??_init_interrupt 0019  
                                   l68 52E2           __size_of_escreve_inteiro_lcd 003E  
                                   _fs 0260                    ___wmul@multiplicand 001B  
                          _put_cluster 1E1A                       disk_write@sector 006A  
                         ?_escalonador 0001                         create_chain@fs 00A6  
                     disk_write@result 0070                       ?_inicializa_uart 0001  
                                  l200 43CE                                    l201 43D6  
                                  l202 43D8                                    l203 43E0  
                                  l220 48B8                                    l204 43E2  
                                  l221 48C0                                    l213 488C  
                                  l205 43EA                                    l222 48C2  
                                  l206 43EC                                    l223 48CA  
                                  l215 4896                 __size_of_troca_de_tela 0258  
                                  l144 2A7C                                    l224 48CC  
                                  l232 4AE8                                    l225 48D4  
                                  l217 48A0                                    l250 47DC  
                                  l242 47A8                                    l226 48D6  
                                  l218 48A2                                    l251 47DE  
                                  l219 48B6                                    l252 47E6  
                                  l244 47B2                                    l181 535C  
                                  l253 47E8                                    l254 47F0  
                                  l246 47BC                                    l183 5362  
                                  l255 47F2                                    l191 4398  
                                  l256 47FA                                    l248 47C6  
                                  l257 47FC                                    l249 47C8  
                                  l193 43A2                                    l195 43AC  
                                  l197 43B6                                    l198 43B8  
                                  l199 43CC                                    l801 2D9C  
                                  l804 2D94                                    l576 5024  
                                  l592 4B50                                    l694 541A  
                                  l688 5482                                    l962 0772  
                                  l875 3126                                    l878 30D4  
                                  l992 13E8                                    l987 13BC  
                                  _PCL 000FF9                                    _PR2 000FCB  
                                  _fil 014F                       ??_init_oscilador 0019  
                                  _fix 54A0                                    _isr 0008  
                         disk_read@res 0072                                    prod 000FF3  
                       ??_create_chain 00A2                                    tosl 000FFD  
                                  wreg 000FE8              __size_of_write_timer_zero 000A  
                      create_chain@mcl 00A4                        create_chain@ncl 00AC  
                      create_chain@scl 00AA                ??_escreve_frase_ram_lcd 001E  
                                 l1002 152A                                   l1080 0D88  
                                 l1129 4F60                                   l1162 1122  
                                 l1076 0B78                                   l2231 3D2E  
                                 l1179 1272                                   l1435 49A2  
                                 l2245 34EC                                   l1581 469A  
                                 l2277 3C4E                                   l1962 4A08  
                                 ?_fix 0019                                   l7041 30CC  
                                 l7033 30BC                                   l7025 30AC  
                                 l7037 30C4                                   l7063 3106  
                                 l7055 30EE                                   l7073 3124  
                                 l7065 3108                                   l7083 3140  
                                 ?_isr 0001                                   l9221 5030  
                                 l6741 50EC                                   l9303 37E4  
                                 l9311 37FC                                   l7703 3DF2  
                                 l6745 50FC                                   l9243 4B4A  
                                 l9315 3810                                   l9403 2AEC  
                                 l9229 508C                                   l9309 37F4  
                                 l9319 3828                                   l7671 3D54  
                                 l9329 3858                                   l9433 483A  
                                 l7745 4D34                                   l9419 2B3C  
                                 l9371 2A42                                   l9611 2C54  
                                 l9603 2BD0                                   l7755 4D6C  
                                 l9531 4898                                   l7683 3D8E  
                                 l9293 37AC                                   l9437 483E  
                                 l9429 480E                                   l9453 4860  
                                 l9357 2A1E                                   l9349 29CC  
                                 l9461 4C94                                   l9517 540C  
                                 l7749 4D4C                                   l9701 4C16  
                                 l7685 3D9A                                   l7677 3D6C  
                                 l9607 2C4C                                   l9527 488E  
                                 l6975 3014                                   l7695 3DCE  
                                 l9465 4CC0                                   l9641 50B6  
                                 l9299 37C0                                   l9483 4CC4  
                                 l9619 2CA2                                   l9643 50BE  
                                 l9563 47B4                                   l6995 307E  
                                 l7699 3DDC                                   l9389 2AC4  
                                 l9629 2CF6                                   l9733 2910  
                                 l9709 27C2                                   l9805 2050  
                                 l9647 50C2                                   l9743 2976  
                                 l9807 206C                                   l9815 4BA6  
                                 l9567 47BE                                   l9559 47AA  
                                 l9729 28F0                                   l9745 2990  
                                 l9761 1EA0                                   l9753 1E40  
                                 l9905 2E06                                   l9681 4B10  
                                 l9673 4AF4                                   l9825 427C  
                _escreve_caractere_lcd 4798                                   l9659 50CA  
                                 l9923 2E7C                                   l9819 4BBA  
                                 l9691 4B38                                   l9677 4B02  
                                 l9829 429A                                   l9791 1FEA  
                                 l9767 1EE0                                   l9919 2E40  
                                 l9871 2D7E                                   l9863 2D54  
                                 l9847 42F4                                   l9935 3E56  
                                 STR_1 61F7                                   STR_2 618E  
                                 l9769 1F14                                   l9697 4BEE  
                                 l9689 4B1E                                   l9961 4E98  
                                 STR_3 6216                                   STR_4 61EC  
                                 l9955 4DB4                                   l9787 1FC0  
                                 l9875 2DA4                                   STR_5 6254  
                                 STR_6 624E                                   l9949 4DA4  
                                 STR_7 61D5                                   STR_8 61C8  
                                 l9887 2DD2                                   l9983 1674  
                                 STR_9 619E                                   l9993 1696  
                                 l9969 4EB8                                   l9989 168A  
                       timer_dois@flag 0042                                   _BRGH 007D62  
                      __end_of_GPSRead 252C                                   _CREN 007D5C  
                                 _T0IF 007F92                           ?_escreve_SPI 0001  
                      __end_of_GPSHour 51D0                                   _LATB 000F8A  
                                 _PIE1 000F9D                                   _RCIF 007CF5  
                                 u6600 304A                                   u6620 305A  
                                 u6607 3040                                   u7890 3D9E  
                                 _TMR0 000FD6                                   _TMR2 000FCC  
                                 _SPEN 007D5F                                   _TXEN 007D65  
                                 _SYNC 007D64                           trace_path@dj 00A8  
                         trace_path@fn 00A9                           trace_path@ds 00B9  
                         trace_path@fs 00B5                          ?_make_dirfile 0021  
                      __end_of_GPSyear 5236                                   _Term 0043  
                                 _atoi 3C6C                                   _atol 33D4  
                                 _main 5138                                   _fsid 0147  
                         ___ftpack@arg 0019                           ___ftpack@exp 001C  
                                 _ltoa 4ECA                __end_of_fence_diff_long 6129  
                                 fsr1h 000FE2                                   fsr2h 000FDA  
                                 indf1 000FE7                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 btemp 0047                                   _sync 4C3E  
                        disk_ioctl@cmd 0019                          disk_read@buff 0068  
                        disk_ioctl@res 001D                          disk_read@pdrv 006F  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                           ___ftmul@cntr 0067  
              ?_verifica_fence_externo 0001              sdc_disk_initialize@buff_i 0067  
                         ___param_bank 000000                           ___ftmul@sign 0068  
            sdc_disk_initialize@count1 0063              sdc_disk_initialize@count2 0069  
                          _string_dado 0200                                  ??_fix 001B  
                                ??_isr 000C                __size_of_escrita_sdcard 0124  
                   __size_of_GPSMinute 0022                     __size_of_GPSSecond 0022  
     __size_of_configura_baudrate_uart 010A                                  l10003 16CA  
                                l10013 16EE                                  l10107 18B0  
                                l10125 1914                                  l10117 18D8  
                                l10037 1772                                  l10301 516A  
                                l10221 01A6                                  l10071 17FE  
                                l11007 1328                                  l10231 01FE  
                                l10207 00CC                                  l11201 0F62  
                                l10081 182A                                  l10065 17EE  
                                l10241 02E4                                  l11121 4E60  
                                l10139 52E6                                  l10171 41DC  
                                l10091 1852                                  l10219 0186  
                                l11123 4E68                                  l10325 4F16  
                                l10317 516E                                  l11037 13C4  
                                l11213 0F94                                  l11117 4E4C  
                                l10327 4F1A                                  l10511 2600  
                                l10503 25C4                                  l10343 4C74  
                                l11151 0D3C                                  l10407 4626  
                                l11055 1484                                  l10271 0470  
                                l11303 116A                                  l11119 4E50  
                                l10433 464C                                  l10177 424A  
                                l10601 4114                                  l11057 14B0  
                                l10257 03A6                                  l10249 0338  
                                l11305 1182                                  l11209 0F8A  
                                l10435 4658                                  l11163 0D9C  
                                l10179 4252                                  l10603 411C  
                                l10275 04EC                                  l10259 03B4  
                                l10283 0520                                  l11315 11AA  
                                l11243 102C                                  l10541 2688  
                                l10533 267A                                  l10525 2640  
                                l10517 2604                                  l10445 468C  
                                l10365 2EFE                                  l10381 2FD4  
                                l11069 1508                                  l10293 058E  
                                l11325 11E6                                  l11261 1084  
                                l11229 0FEA                                  l10535 2684  
                                l10527 2646                                  l11175 0DE4  
                                l11167 0DA6                                  l10391 45DC  
                                l10631 19EA                                  l11343 1280  
                                l11319 11B6                                  l11239 1016  
                                l10463 4E08                                  l11177 0DF8  
                                l11185 0E68                                  l11193 0EFC  
                                l10705 1C0C                                  l11089 153E  
                                l10289 057C                                  l11249 1058  
                                l11353 12E8                                  l10465 4E10  
                                l10457 5314                                  l11521 475A  
                                l11409 3B94                                  l11441 4EEA  
                                l10563 2704                                  l10555 26C8  
                                l10483 2580                                  l10475 2544  
                                l10395 45E0                                  l10299 5164  
                                l10803 0658                                  l10715 1C6E  
                                l10707 1C32                                  l10627 19E6  
                                l11347 129E                                  l11339 1260  
                                l11283 110A                                  l11267 10B8  
                                l11611 4596                                  l11531 4770  
                                l11507 473E                                  l11419 3BE4  
                                l10549 26C4                                  l10469 2540  
                                l10725 1CD8                                  l10709 1C44  
                                l10653 1A8C                                  l10645 1A2E  
                                l11277 10FA                                  l11621 3ED4  
                                l10911 3742                                  l10807 065C  
                                l10591 40D2                                  l10583 40B2  
                                l10751 1DAE                                  l10671 1AF8  
                                l10639 1A04                                  l11287 1116  
                                l11471 35F4                                  l11463 3556  
                                l11551 4526                                  l11631 3F30  
                                l11623 3EDE                                  l12271 3F6A  
                                l10569 2708                                  l10497 25C0  
                                l10489 2584                                  l10825 0694  
                                l10817 068A                                  l10761 1DE8  
                                l10729 1CDC                                  l10665 1ADA  
                                l10657 1A98                                  l10921 4466  
                                l11297 1146                                  l11473 3604  
                                l11369 3A76                                  l11561 4540  
                                l11633 3F3A                                  l11625 3EFC  
                                l10579 2744                                  l10843 072A  
                                l10835 0708                                  l10771 05B0  
                                l10739 1D1E                                  l10683 1B1C  
                                l10675 1B04                                  l10923 446E  
                                l11571 4558                                  l11547 4786  
                                l11731 3CC4                                  l11715 3C6E  
                                l12283 4000                                  l10773 05B6  
                                l10917 4420                                  l11477 361E  
                                l11389 4168                                  l11629 3F12  
                                l11813 5058                                  l11821 46D0  
                                l11733 3CF8                                  l11717 3C72  
                                l10943 3454                                  l11399 41AE  
                                l11575 455C                                  l11663 43AE  
                                l11655 439A                                  l11831 471E  
                                l11735 3CFC                                  l11727 3CB2  
                                l12375 5150                                  l10873 09BC  
                                l10865 08AE                                  l10689 1B30  
                                l11585 4572                                  l11497 4724  
                                l11825 46F2                                  l11921 2178  
                                l10779 0608                                  l10955 34A6  
                                l10939 342A                                  l11595 4588  
                                l11659 43A4                                  l11763 3AB8  
                                l11907 20F8                                  l11931 21AC  
                                l10789 062C                                  l10949 345E  
                                l10879 09D2                                  l10975 49FA  
                                l10967 49C6                                  l11783 3B12  
                                l10897 368E                                  l10969 49D2  
                                l11793 3B3A                                  l11769 3AE0  
                                l11929 21A8                                  l11787 3B22  
                                l11875 4FFA                                  l11891 20B4  
                                l11797 3B4A                                  l11949 220C  
                                l11975 228E                                  l11977 2292  
                                l11987 22D2                        __end_of___aldiv 3E04  
                                ?_atoi 001F                                  ?_atol 0025  
                                ?_main 0001                                  STR_10 6179  
                                ?_ltoa 0060                                  STR_11 61AD  
                                STR_20 61D3                                  STR_12 620C  
                                STR_21 6275                                  STR_13 6202  
                                STR_30 625F                                  STR_14 6229  
                                STR_22 61BB                                  STR_31 627C  
                                STR_23 6271                                  STR_15 6248  
                                STR_24 6279                                  STR_16 6264  
                                STR_32 625A                                  STR_33 626D  
                                STR_25 61E1                                  STR_17 6151  
                                STR_18 61D3                                  STR_34 6269  
                                STR_26 625F                                  STR_19 61D3  
                                STR_27 6241                                  STR_35 6220  
                                STR_28 623A                                  STR_36 6232  
                                STR_29 6241                           ?_leitura_SPI 0001  
                      __end_of___lldiv 46AC                                  u11000 2D3E  
                                u11010 2D4A                                  ?_sync 0001  
                                u10300 4B5A                                  u11020 2D74  
                                u11120 2E6A                                  u12010 2630  
                                u10330 37BA                                  u11050 2DC8  
                                u11210 16A6                                  u10315 375E  
                                u11220 16B6                                  u10405 29F2  
                      __end_of___ftmul 3B84                                  u12030 2672  
                                u11310 17AE                                  u11230 16C2  
                                u12110 40CE                                  u11231 16C0  
                                u10280 50AE                                  u11160 4DA0  
                                u11400 18F0                                  _T0CON 000FD5  
                                u12017 2626                                  u12050 26B4  
                                u11410 1922                                  u11250 1710  
                                u12130 4102                                  u10435 2A98  
                                u10460 2B4A                                  u11420 4208  
                                u12140 4128                                  u12037 2668  
                                u12205 1A4A                                  u12070 26F4  
                                u12150 4140                                  u12310 1C6A  
                                u11440 423A                                  u11360 187A  
                                u12160 19D0                                  u12057 26AA  
                      __end_of___llmod 4A1A                                  u12090 2734  
                                u10650 2B8E                                  u10730 4C0E  
                                u11290 17A2                                  u11427 41FE  
                                u11700 4C70                                  u10740 4C36  
                                u12500 0654                                  u12420 05D6  
                                u12340 1CCA                                  u12077 26EA  
                                u10805 286C                                  u12325 1C8A  
                                u10670 2BCC                                  u13150 0E04  
                                u13310 10F8                                  u14030 440E  
                                u11447 4230                                  u12167 19C6  
                                u11615 0324                                  u10760 278C  
                                u12440 05FC                                  u13240 0FE0  
                                _T2CON 000FCA                                  u12097 272A  
                                u10737 4C04                                  u14041 4F98  
                                u13170 0E7C                                  u12610 09B8  
                                u12370 1D1A                                  u10835 28FC  
                                u10915 1FCC                                  u13075 0BEC  
                                u10747 4C2C                                  u12427 05CC  
                                u14131 3AA0                                  u10860 1E9C  
                                u13180 0EC2                                  u12620 09D0  
                                u11740 2EFA                                  u11660 0528  
                                u13420 1240                                  u14060 4990  
                                u12605 08C6                                  u13270 1066  
                                u12710 33F4                                  u14310 208A  
                                u10855 1E70                                  u12447 05F2  
                                u11575 024C                                  u14151 3AC8  
                                u11680 4F3A                                  u10960 42BA  
                                u12800 49D6                                  u11825 31A6  
                                u10785 27F2                                  u13185 0EB8  
                                u12570 0726                                  u11770 2F7A  
                                u11930 4E38                                  u11835 31C2  
                                u15107 1642                                  u12635 0A56  
                                u11755 2F0A                                  u13515 3A12  
                                u12820 1324                                  u11860 4F56  
                                u11845 31F2                                  u10885 1F40  
                                u15117 17B4                                  u13525 3A4A  
                                u12717 33EA                                  u11950 2570  
                                u11790 45DC                                  u12670 4440  
                                u13470 12C0                                  u12750 344A  
                                u13710 476C                                  u14350 2126  
                                u11687 4F30                                  u11855 3212  
                                u15127 1858                                  u12920 1480  
                                u14360 2166                                  u15137 5010  
                                u11937 4E2E                                  u11970 25B0  
                                u11890 465C                                  u12690 448E  
                                u13570 41BE                                  u15067 435E  
                                u13900 3F44                                  u14380 21B8  
                                u11957 2566                                  u12677 4436  
                                u13485 3996                                  u12757 3440  
                                u15077 402C                                  u11990 25F0  
                                u13750 4538                                  u14358 212A  
                                u13495 39D0                                  u15087 4048  
                                u12960 1526                                  u13760 453C  
                                u13680 473A                                  u14368 216A  
                                u11977 25A6                                  u12697 4484  
                                u15097 4064                                  u12890 13E4  
                                u13770 454C                                  u13860 3EC6  
                                u14900 4322                                  u11997 25E6  
                                u14890 430A                                  u14878 3FBE  
                                u14879 3FD2                       __end_of_GPSMonth 527A  
                                _RCREG 000FAE                                  _RCSTA 000FAB  
                                _SPBRG 000FAF                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                      __end_of_f_close 5138                          trace_path@dir 00AC  
                                _TXSTA 000FAC                                  _FatFs 0038  
                      __end_of_f_lseek 0F74                    ___lmul@multiplicand 001D  
           __size_of_config_timer_dois 000E                        __end_of_f_mount 4D70  
                      __end_of_f_write 05A0             __size_of_config_timer_zero 001A  
                                _Speed 000000                          get_cluster@bc 0099  
                        get_cluster@fs 009B                          get_cluster@wc 0093  
                      __end_of_command 4B96                          ___awtoft@sign 0029  
                                _delay 5358                        clust2sect@clust 0025  
                      __end_of_fprintf 12F4                                  _fputc 4F4E  
                                _fputs 4414                        __end_of_isdigit 531C  
             __size_of_escreve_cmd_lcd 008C                          ___ftpack@sign 001D  
                                atoi@a 0024                                  atol@a 0061  
                                atol@c 0065                                  atoi@s 001F  
                                atol@s 0025                                  _ultoa 3B84  
                       ??_make_dirfile 0023                         disk_ioctl@buff 001A  
                                pclath 000FFA                         disk_read@count 006E  
                                tablat 000FF5                         disk_ioctl@pdrv 001C  
                     ?_dados_gps_to_sd 0001                        __end_of_proceed 547E  
                                plusw1 000FE3                                  plusw2 000FDB  
                                ttemp5 0048                                  ttemp6 004B  
                                ttemp7 004F                                  status 000FD8  
                        _troca_de_tela 2080                                  wtemp8 0048  
                   _armazena_longitude 543C                          disk_write@res 0072  
       __end_of_verifica_fence_externo 49B4                        __initialization 449E  
                  disk_initialize@pdrv 002D                    ?_armazena_longitude 0001  
                  disk_initialize@stat 002E                           __end_of_atoi 3D38  
                         __end_of_atol 34FE                           __end_of_main 5160  
                         clust2sect@fs 002E                           __end_of_ltoa 4F0C  
                         __end_of_sync 4C90                     _inicializa_tarefas 4A7E  
                      escalonador@cont 00F7                       __end_of_Latitude 5358  
                  reserve_direntry@dir 00AF                      create_chain@clust 00A0  
                          auto_mount@p 009F                      create_chain@cstat 00A8  
                        sdc_reset@buff 002B                                 ??_atoi 0021  
                               ??_atol 0029                                 ??_main 0032  
                               ??_ltoa 0032                                 ??_sync 0031  
                        __activetblptr 000002                    ?_inicializa_tarefas 0001  
                 __end_of_desliga_uart 5466                              ??_GPSRead 000A  
                            ??_GPSHour 001B                         _next_dir_entry 2E86  
                 ??_armazena_longitude 0021                   __size_of_desliga_SPI 000C  
                    get_fattime@f_time 0021                              ??_GPSyear 001B  
                     ??_sdc_disk_write 002C                                 ?_delay 0001  
               ?_escreve_caractere_lcd 0001                                 _ADCON1 000FC1  
                               ?_fputc 00CC                       ___llmod@dividend 0019  
                               ?_fputs 00D3                         _convert_to_int 51D0  
                   auto_mount@bootsect 0097                       __end_of___awtoft 507C  
                     __end_of___ftpack 3F64                                 ?_ultoa 0026  
                 _convert_to_int_point 4144                                 _INT0IE 007F94  
                               _INT0IF 007F91                          ?_dummy_clocks 0001  
                    __end_of_GPSMinute 529C                                 i2l1407 3958  
                    __end_of_GPSSecond 5258                                 _PCLATH 000FFA  
                               _INTCON 000FF2                                 i2l9057 53FC  
                               _GPSDay 529C                __size_of_inicializa_SPI 0020  
                       ?_troca_de_tela 0001                                 _TMR0IF 007F92  
                   auto_mount@maxclust 0093               __end_of_recebe_dado_uart 5400  
                               _SPPCFG 000F63                                 _SPPCON 000F65  
                               _SSPBUF 000FC9               __size_of_sdc_disk_status 0010  
                     __end_of_check_fs 462A                   ??_inicializa_tarefas 0019  
                    ?_disparo_gravacao 0001                         trace_path@dptr 00BA  
                       trace_path@path 00AA                 reserve_direntry@sector 00B4  
             __size_of_disk_initialize 0026             __end_of_posicao_cursor_lcd 4B3C  
                   ??_disparo_gravacao 00F2                         auto_mount@path 007B  
                         ?_move_window 0073                   __end_of_create_chain 2E86  
                         _dado_arquivo 016B                 __size_of_init_hardware 0016  
                       auto_mount@stat 00A2                   __size_of_get_fattime 0156  
                         put_cluster@p 009C                                 ___ftge 46AC  
         ?_verifica_dados_operacionais 0001                   __size_of_get_cluster 0222  
                               ___lmul 4B96                              ??___aldiv 0021  
                 __size_of_disk_status 0030                                 ___wmul 5186  
                   __size_of_Longitude 001E                              ??___lldiv 0021  
                            ??___ftmul 0060                                 _f_open 12F4  
                            ??___llmod 0021                       __end_of_grava_sd 53C6  
                               _f_sync 3622                                 _buffer 01AD  
                               _estado 00FD                                 _memcmp 41DA  
                               _memcpy 4E86                       __end_of_init_lcd 40A8  
                               _memset 50E2                              ??_f_close 0031  
                               _rawFix 01D7                                 clear_0 44D8  
                               clear_1 44EA                                 clear_2 44F6  
                               clear_3 4510                              ??_f_lseek 00B4  
                            ??_f_mount 001B               configura_baudrate_uart@x 002B  
                            ??_f_write 00B4                                 _strcat 4E42  
                               _strcmp 4CDE                    _sdc_disk_initialize 1626  
                            ??_command 0023                            GPSRead@buff 000A  
                               _strcpy 4DFE                                 _strlen 4F0C  
                ___ftmul@f3_as_product 0064                       put_cluster@clust 0088  
                               fputc@c 00D0                     get_cluster@fatsect 0095  
                     __end_of_monta_sd 2778               __end_of_reserve_direntry 1E1A  
                     __end_of_validate 4DB8                 __end_of_next_dir_entry 2FEA  
                            ??_fprintf 00EF                           __pdataCOMRAM 0046  
                               fputs@n 00D7                              ??_isdigit 0019  
                 __size_of_escalonador 00A6                       __end_of_response 5472  
                         __mediumconst 60DA                        disk_read@sector 006A  
                      disk_read@result 0070                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
               __end_of_convert_to_int 51F2                              ??_proceed 001B  
                     _write_timer_zero 5496                                 ultoa@c 0031  
                               ultoa@v 002D                                 sync@fs 0088  
            escreve_caractere_lcd@data 001B                  ?_convert_to_int_point 002D  
                       ??_dummy_clocks 0019                    _escreve_inteiro_lcd 4F8E  
                      sdc_disk_write@j 0065                             __accesstop 0060  
              __end_of__initialization 4516                   ?_sdc_disk_initialize 0001  
                       disk_write@buff 0068             __end_of_verifica_diferenca 33D4  
                       disk_write@pdrv 006F                   __size_of_escreve_SPI 0010  
                           ___ftge@ff1 0069                             ___ftge@ff2 006C  
                        ___rparam_used 000001                      ??_escreve_cmd_lcd 001B  
         ?_verifica_plausibilidade_lat 0001                             ___awtoft@c 0026  
                            ?_GPSMonth 0019                             ___ftmul@f1 002A  
                           ___ftmul@f2 002D                         __pcstackCOMRAM 0001  
          __end_of_endereco_cursor_lcd 48E4                           __pidataBANK1 5420  
                    ?_mensagem_inicial 0001                _configura_baudrate_uart 3984  
                        __end_of_delay 5376                         _escrita_sdcard 34FE  
                        __end_of_fputc 4F8E                          __end_of_fputs 449E  
                 ?_escreve_inteiro_lcd 0068          ??_verifica_dados_operacionais 0032  
                        __end_of_ultoa 3C6C                     ??_mensagem_inicial 001F  
                 __end_of_make_dirfile 3144                           ?_put_cluster 0088  
                    reserve_direntry@c 00BB                      reserve_direntry@n 00B8  
                   _tarefa_em_execucao 003C             __end_ofi2_write_timer_zero 54B4  
                      ?_next_dir_entry 0031                 __size_of_sdc_disk_read 0124  
      configura_baudrate_uart@baudrate 0027                   reserve_direntry@dptr 00B9  
                 __size_of_leitura_SPI 000C                          _init_hardware 53C6  
                         auto_mount@fs 00A7                     __size_of_disk_read 0070  
                      ?_convert_to_int 002D                                ??_delay 0019  
                       sdc_reset@count 0029                                ??_fputc 0031  
                              ??_fputs 0031                        ??_troca_de_tela 0073  
                    __end_of_Longitude 533A                                ??_ultoa 002D  
         mensagem_inicial@msg_linha_um 0060                             __pbssBANK0 00F8  
                           __pbssBANK1 0100                             __pbssBANK2 0200  
         convert_to_int_point@temp_str 0070         __size_of_escreve_frase_ram_lcd 0052  
                              ?_GPSDay 0019          __end_of_escreve_frase_ram_lcd 4C3E  
                ??_sdc_disk_initialize 002C                              ?_Latitude 001F  
            escreve_inteiro_uart@F3215 01D9                             ??_GPSMonth 001B  
        ??_verifica_plausibilidade_lat 0019                 __end_of_escrita_sdcard 3622  
                   __size_of_sdc_reset 0090                                ?___ftge 0069  
                   troca_de_tela@state 003B                                ?___lmul 0019  
                    ??_sdc_disk_status 0019                          make_dirfile@a 0029  
                        make_dirfile@b 0027                          make_dirfile@c 002B  
                        make_dirfile@n 002A                          make_dirfile@t 0028  
                              ?___wmul 0019                  mensagem_inicial@F3654 60EC  
                mensagem_inicial@F3656 60DB                  ??_escreve_inteiro_lcd 0032  
                              ?_f_open 00C0                             _fence_flag 013B  
                              ?_f_sync 008A                      ??_disk_initialize 002D  
                __size_of_desliga_uart 000E                                ?_memcmp 0019  
                              ?_memcpy 0019                                ?_memset 0019  
                       ___lmul@product 0021                              ?___awtoft 0026  
                            ?___ftpack 0019                                ?_strcat 0019  
                              ?_strcmp 0001                                ?_strcpy 0019  
                              ?_strlen 0019                                i2l12101 241C  
                              i2l12111 244E                                i2l12103 2420  
                              i2l12121 246E                                i2l12051 2302  
                              i2l12043 22E0                                i2l12061 2330  
                              i2l12119 246A                                i2l12071 2382  
                              i2l12047 22F0                                i2l12145 24FA  
                              i2l12137 24CA                                i2l12129 249C  
                              i2l12075 23A2                                i2l12059 2326  
                              i2l12155 2516                                i2l12149 2502  
                              i2l12093 2400                                i2l12085 23D2  
                              i2l12077 23A6                                i2l12341 3918  
                              i2l12333 3900                                i2l12317 38C2  
                              i2l12353 3944                                i2l12345 3926  
                              i2l12329 38D2                                i2l12355 3950  
                              i2l11843 4CE0                                i2l11845 4CE8  
                              i2l11837 4DBC                                _INTCON2 000FF1  
                              _INTCON3 000FF0                         ?_init_hardware 0001  
                            ?_check_fs 0073                             _disk_ioctl 52DE  
                              _GPSRead 22D8                                _GPSHour 51AC  
                           _disk_write 4C90                 ??_convert_to_int_point 0031  
                              _GPSyear 5214                         remove_chain@fs 00A6  
 __size_of_verifica_dados_operacionais 0068                                _SSPCON1 000FC6  
             __size_of_inicializa_uart 0022                                _SSPSTAT 000FC7  
                           _clust2sect 3E04                         _inicializa_SPI 52BE  
                      trace_path@clust 00B7                              ?_grava_sd 0001  
                      __size_of_GPSDay 0022                             ??_Latitude 0021  
                        ?_remove_chain 00A0                  __size_of_create_chain 018C  
                            ?_init_lcd 0001                     __size_of_stringcpy 0046  
                        _sdc_disk_read 3746                           _desliga_uart 5458  
                           _auto_mount 05A0                                __Hparam 0000  
            ??_configura_baudrate_uart 0060                                __Lparam 0000  
                            ?_monta_sd 001D                              ?_validate 001F  
                      ?_escrita_sdcard 0001                      __end_of_disk_read 487A  
                        put_cluster@bc 009A                              ?_response 0001  
                        put_cluster@fs 009E                       _sinaliza_mcp2515 003F  
                              ___aldiv 3D38                             f_close@res 0031  
                      __size_of___ftge 0076                        __size_of___lmul 0056  
                              ___lldiv 462A                        __size_of___wmul 0026  
                              ___ftmul 3A8E                                ___llmod 49B4  
                 __size_of_move_window 01AA                             check_fs@fs 0079  
                      __size_of_f_open 0332                        __size_of_f_sync 0124  
                 __end_of_dummy_clocks 5044                                _f_close 510E  
                              __pcinit 449E                        __size_of_memcmp 0092  
                      __size_of_memcpy 0044                             ??___awtoft 0029  
                           ??___ftpack 001E                        __size_of_memset 002C  
                              _f_lseek 0AEA                             _init_ports 5376  
                              __ramtop 0800                                _f_mount 4D28  
                              __ptext0 5138                                __ptext1 42FC  
                              __ptext2 400A                                __ptext3 53C6  
                              __ptext4 5376                                __ptext5 54B4  
                              __ptext6 53DC                                __ptext7 5392  
                              __ptext8 5496                                __ptext9 542E  
                              _f_write 0012                                _command 4B3C  
                            _T0CONbits 000FD5                    auto_mount@totalsect 009B  
                      __size_of_strcat 0044                        __size_of_strcmp 004A  
                      __size_of_strcpy 0044                        __size_of_strlen 0042  
          endereco_cursor_lcd@endereco 001B                                _fprintf 0F74  
                         __size_of_fix 000A                                _rawDate 01C4  
                              _isdigit 52FE                           __size_of_isr 397C  
 __size_of_verifica_plausibilidade_lat 0084                ??_escreve_caractere_lcd 001B  
                           ??_check_fs 0077                                _rawTime 01B9  
                     ___aldiv@dividend 0019                           stringcpy@chr 0009  
                         stringcpy@dir 0005                                _time_sd 00FA  
                         _create_chain 2CFA                                _proceed 5472  
              __size_of_init_interrupt 0012                     _point_buff_gps_lat 00F8  
                    __end_of_sdc_reset 42FC                 __end_of_inicializa_SPI 52DE  
                           f_lseek@ofs 00B0                         __pintcode_body 386A  
                           f_lseek@res 00C4                   end_of_initialization 4516  
 __end_of_verifica_plausibilidade_long 4798  __size_of_verifica_plausibilidade_long 0076  
         _verifica_plausibilidade_long 4722                             f_open@mode 00C4  
                           f_open@path 00C2                         ??_remove_chain 00A2  
                              isr@cont 0018                                memcmp@n 001D  
                           ??_grava_sd 0032                                memcpy@d 0020  
                              memcpy@n 001D                                memcpy@s 0022  
              __size_of_init_oscilador 0008                                fputc@bw 00D1  
                              memset@c 001B                                memset@n 001D  
                              memset@p 001F                          __Lmediumconst 60DA  
                           ??_init_lcd 001C                                int_func 386A  
                    ?_recebe_dado_uart 0001                        disk_status@pdrv 001D  
                      disk_status@stat 001E                         ?_sdc_disk_read 0025  
                              ltoa@buf 0060                              i2u1425_40 4D1C  
                              ltoa@val 0061                              i2u1493_40 38B2  
                            _GPSMinute 527A                              _GPSSecond 5236  
                            i2u1494_48 38B4                 write_timer_zero@timer0 0019  
                      ___lldiv@divisor 001D                          _rawSatellites 013E  
                           f_mount@drv 001B                     ??_recebe_dado_uart 0001  
                      ___lldiv@counter 0025                             ??_monta_sd 001F  
                           ??_validate 0023                  __size_of_make_dirfile 015A  
             __size_of_dados_gps_to_sd 0064                         _fence_diff_lat 6129  
                           ??_response 0019                              _RCSTAbits 000FAB  
             __end_of_write_timer_zero 54A0                       ___aldiv@quotient 0023  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc1 000FE6  
                              postinc2 000FDE                             _wait_ready 507C  
                              strcmp@r 0007                                strlen@s 0019  
                            _PORTBbits 000F81              __size_of_disparo_gravacao 003C  
                            _PORTDbits 000F83                              _PORTEbits 000F84  
                      ??_init_hardware 001B                             _trace_path 1926  
                   _posicao_cursor_lcd 4ADE                      __end_of_stringcpy 4DFE  
                        ??_desliga_SPI 0019                   __size_of_put_cluster 0266  
      __end_of_configura_baudrate_uart 3A8E                            ?_disk_ioctl 0019  
                    ?_reserve_direntry 00AE                             f_write@btw 00B1  
                           f_write@res 00C0                              _TRISBbits 000F93  
                          ?_disk_write 0068                              _TRISCbits 000F94  
                            _TRISDbits 000F95                       next_dir_entry@dj 0031  
                      _escreve_cmd_lcd 4388                     ??_reserve_direntry 00B0  
          __size_of_armazena_longitude 000E                    ?_posicao_cursor_lcd 001C  
                      ?_inicializa_SPI 0001                        disk_write@count 006E  
                          ?_clust2sect 0025                       _put_cluster$1551 0092  
                     _put_cluster$1552 0094                             command@CMD 0023  
                           command@CRC 0022                             command@arg 001E  
                         _make_dirfile 2FEA          ?_verifica_plausibilidade_long 0001  
                       __end_of_GPSDay 52BE                          ??_get_fattime 0060  
                    ??_inicializa_uart 002D            __size_of_inicializa_tarefas 0060  
                           ?_GPSMinute 0019                             ?_GPSSecond 0019  
                        ??_get_cluster 008A                 __end_of_fence_diff_lat 6151  
                        ??_disk_status 001B                            ?_auto_mount 007B  
                    _make_dirfile$1661 0025                            ___ftmul@exp 0063  
                      command@argument 0024                   ??_posicao_cursor_lcd 001D  
                    __size_of_GPSMonth 0022                         __end_of___ftge 4722  
                       __end_of___lmul 4BEC                         _temp_buff_long 0032  
                     ??_next_dir_entry 009D                         __end_of___wmul 51AC  
                   _verifica_diferenca 329A                         __end_of_f_open 1626  
                        __pidataCOMRAM 54BC                          ??_escalonador 00F5  
                          ?_init_ports 0001                         __end_of_f_sync 3746  
                    _armazena_latitude 544A                       ??_convert_to_int 0031  
                       __end_of_memcmp 426C                         __end_of_memcpy 4ECA  
                       __end_of_memset 510E                     ?_armazena_latitude 0001  
                       __end_of_strcat 4E86                         __end_of_strcmp 4D28  
                       __end_of_strcpy 4E42                         __end_of_strlen 4F4E  
                     _time_atualizacao 0036                    start_initialization 449E  
                  ?_verifica_diferenca 0001                            __end_of_fix 54AA  
                          __end_of_isr 3984              __size_of_mensagem_inicial 008C  
                   reserve_direntry@dj 00AE                    ??_armazena_latitude 0021  
                   reserve_direntry@fs 00BE                    __end_of_desliga_SPI 5496  
                        ??_escreve_SPI 0019               ??_verifica_fence_externo 0084  
                             ??_GPSDay 001B                        _sdc_disk_status 5400  
                      ??_sdc_disk_read 002C                      auto_mount@fatsize 00A3  
                   i2_write_timer_zero 54AA                        ___llmod@divisor 001D  
                            _Longitude 531C                        _disk_initialize 5160  
                      ___llmod@counter 0021                      __size_of_Latitude 001E  
                reserve_direntry@clust 00BC                __size_of_sdc_disk_write 01B6  
                 ??_verifica_diferenca 0080                       _data_uart_recebe 003E  
                    wait_ready@timeout 0019                  __size_of_dummy_clocks 003C  
                        auto_mount@fmt 00A1                    __size_of_disk_ioctl 0020  
                  ?i2_write_timer_zero 0001                               ??___ftge 006F  
                  __size_of_disk_write 004E                               ??___lmul 0021  
                           fprintf@fil 00D9                             fprintf@arp 025A  
                             ??___wmul 001D                             fprintf@res 024E  
                           fprintf@val 0256                             fprintf@str 00DB  
                  __end_of_get_fattime 329A                               ??_f_open 00C5  
            __end_of_armazena_latitude 5458                               ??_f_sync 0031  
                          ?_wait_ready 0001                            __pdataBANK1 01D9  
                  __end_of_get_cluster 299A                               ??_memcmp 001F  
                  __end_of_disk_status 50E2                               ??_memcpy 001F  
                  __size_of_clust2sect 00B2                               ??_memset 001F  
               sdc_disk_read@start_add 0061                   __end_of_remove_chain 4144  
                    ??_dados_gps_to_sd 0022                sdc_disk_initialize@buff 006B  
                        ??_leitura_SPI 0019                __end_of_escreve_cmd_lcd 4414  
                             ??_strcat 001D                               ??_strcmp 0005  
                             ??_strcpy 001D                               ??_strlen 001B  
              sdc_disk_initialize@stat 0062                            ?_trace_path 00A8  
                         _fprintf$2154 0250           __size_of_endereco_cursor_lcd 006A  
                    __size_of___awtoft 0038                      __size_of___ftpack 00AE  
                          __pbssBIGRAM 0260                          monta_sd@index 001F  
                          __pbssCOMRAM 0032                        _trace_path$1710 00B3  
                      _trace_path$1708 00B1                               ?_GPSRead 0001  
                             ?_GPSHour 0019                          __pcstackBANK0 0060  
                        __pcstackBANK2 023E                         _init_interrupt 53DC  
                  __size_of_auto_mount 054A                   ??i2_write_timer_zero 0003  
                  __end_of_escalonador 400A            __end_of_sdc_disk_initialize 1926  
                             ?_GPSyear 0019                      __size_of_check_fs 0082  
                         _isdigit$3149 001A                           check_fs@sect 0073  
                          _char_number 0045                           _dummy_clocks 5008  
                       _init_oscilador 54B4                  __end_of_troca_de_tela 22D8  
                             GPSRead@c 000B                       ??_escrita_sdcard 0032  
                  __size_of_init_ports 001C                             ?_Longitude 001F  
                _escreve_frase_ram_lcd 4BEC                      __size_of_grava_sd 001A  
                          ??_GPSMinute 001B                            ??_GPSSecond 001B  
                            _data_buff 014D                              _data_hoje 0041  
          __end_of_escreve_inteiro_lcd 4FCC                    __end_of_escreve_SPI 5420  
                    __size_of_init_lcd 009E                      delay@contador_int 001A  
                    delay@contador_ext 0019         ??_verifica_plausibilidade_long 0019  
  __end_of_verifica_dados_operacionais 494C            _verifica_dados_operacionais 48E4  
                            __pintcode 0008                          __pmediumconst 60DA  
                             ?___aldiv 0019                              __ptext100 527A  
                            __ptext101 51AC                              __ptext110 54AA  
                            __ptext102 529C                              __ptext111 53EE  
                            __ptext103 4A1A                              __ptext112 22D8  
                            __ptext104 252C                              __ptext113 4DB8  
                            __ptext105 4F0C                              __ptext114 4CDE  
                            __ptext106 5458                              __ptext115 0000  
                            __ptext107 548A                              __ptext108 54A0  
                    __size_of_monta_sd 024C                               ?___lldiv 0019  
                             ?___ftmul 002A                               ?___llmod 0019  
                    __size_of_validate 0048                      __size_of_response 000C  
                             ?_f_close 0093                              _disk_read 480A  
                   _sinaliza_int_timer 003D                               ?_f_lseek 00AE  
                             ?_f_mount 0019                       _disparo_gravacao 4FCC  
                             ?_f_write 00AE                               ?_command 001E  
               __end_of_init_interrupt 53EE                               ?_fprintf 00D9  
                             ?_isdigit 0001                            _desliga_SPI 548A  
                  sdc_disk_read@p_buff 0025                troca_de_tela@last_state 003A  
                  sdc_disk_read@length 0065                    sdc_disk_read@sector 0027  
              __end_of_sdc_disk_status 5410         __size_of_escreve_caractere_lcd 0072  
        __end_of_escreve_caractere_lcd 480A                               ?_proceed 0001  
                            f_close@fp 0093                    __end_of_leitura_SPI 548A  
                       __size_of_delay 001E                __end_of_disk_initialize 5186  
               __end_of_init_oscilador 54BC                         __size_of_fputc 0040  
                       __size_of_fputs 008A                    make_dirfile@dirname 0022  
                           validate@id 0021                             validate@fs 001F  
                            _p_tarefas 0120          __size_of_convert_to_int_point 0096  
                       __size_of_ultoa 00E8                              _rawCourse 012F  
      __size_of_verifica_fence_externo 0068                       make_dirfile@path 0021  
                             _GPGGA_ok 0149                              _sdc_reset 426C  
                  __size_of_wait_ready 0036                        ___aldiv@divisor 001D  
                      ___aldiv@counter 0021                         ___wmul@product 001D  
                             _LATBbits 000F8A                              f_lseek@fp 00AE  
                             _LATCbits 000F8B    __end_of_verifica_plausibilidade_lat 45A8  
          _verifica_plausibilidade_lat 4524                               _GPRMC_ok 014B  
                            f_open@dir 00DC                              f_open@res 00DB  
                             _PIE1bits 000F9D                            _get_fattime 3144  
                         _rawLongitude 0193                    __size_of_trace_path 027E  
                          _get_cluster 2778                               _GPSMonth 5258  
                          _disk_status 50B2                          ??_move_window 0077  
                            f_mount@fs 0019                               _PIR1bits 000F9E  
                        move_window@fs 0086                      ?_write_timer_zero 0019  
                      remove_chain@nxt 00A4             __size_of_armazena_latitude 000E  
                            f_sync@dir 0091                              f_sync@res 0090  
                            f_sync@tim 008C               posicao_cursor_lcd@coluna 001C  
                           ?_disk_read 0068                     ??_write_timer_zero 001B  
                            f_write@cc 00C6             posicao_cursor_lcd@endereco 001E  
                            f_write@bw 00B3                              f_write@fp 00AE  
            __size_of_recebe_dado_uart 0012                            _escalonador 3F64  
                    ___wmul@multiplier 0019                       ?_escreve_cmd_lcd 0001  
          escreve_frase_ram_lcd@buffer 001C                       ??_inicializa_SPI 0019  
                      ?_init_interrupt 0001                           ??_disk_ioctl 001C  
                         ??_disk_write 0030                           f_lseek@clust 00CD  
                      _inicializa_uart 51F2                           f_lseek@csize 00C9  
                         f_lseek@ifptr 00C5                              _stringcpy 4DB8  
                     __size_of_GPSRead 0254                       _mensagem_inicial 42FC  
                     __size_of_GPSHour 0024                          _temp_buff_lat 0034  
                      ?_init_oscilador 0001                           ??_clust2sect 0029  
                     __size_of_GPSyear 0022                      ___lmul@multiplier 0019  
                            copy_data0 44B2                            _escreve_SPI 5410  
                        _flag_anomalia 00FC                             ?_sdc_reset 0001  
                  sdc_reset@count_nosd 0027                               _Latitude 533A  
             ?_configura_baudrate_uart 0027                 ?_escreve_frase_ram_lcd 001C  
                          ??_Longitude 0021                       auto_mount@chk_wp 007C  
                    move_window@sector 0073                         _sdc_disk_write 299A  
            __size_of_reserve_direntry 0276               escreve_inteiro_lcd@F3223 01E0  
                         ??_auto_mount 007D                               __Hrparam 0000  
                            memcpy@tmp 001F                               __Lrparam 0000  
                            fprintf@cc 025B                     __end_of_disk_ioctl 52FE  
                __size_of_remove_chain 009C                         put_cluster@val 008A  
                     get_cluster@clust 0088                     __end_of_disk_write 4CDE  
                         _SentenceType 0044                       __size_of___aldiv 00CC  
               sdc_disk_initialize@ocr 0068                           monta_sd@dado 001D  
               _verifica_fence_externo 494C                       __size_of___lldiv 0082  
                     __size_of___ftmul 00F6                       __size_of___llmod 0066  
                        ??_put_cluster 008C                           monta_sd@size 0020  
                         ??_init_ports 0019                    __end_of_move_window 2CFA  
                             ___awtoft 5044                               ___ftpack 3EB6  
                   __end_of_clust2sect 3EB6               escreve_inteiro_lcd@valor 0068  
                     __size_of_f_close 002A               escreve_inteiro_lcd@texto 006C  
                     __size_of_f_lseek 048A                       __size_of_f_mount 0048  
                          _leitura_SPI 547E                       __size_of_f_write 058E  
                     __size_of_command 005A             __end_of_armazena_longitude 544A  
                __end_of_init_hardware 53DC                               _check_fs 45A8  
                           strcat@from 001B                       __size_of_fprintf 0380  
                     __size_of_isdigit 001E                       ?_sdc_disk_status 0001  
                           ?_stringcpy 0001                          _time_recovery 0143  
                   __end_of_auto_mount 0AEA                               __ptext10 4A7E  
                             __ptext11 3F64                               __ptext20 4F8E  
                             __ptext12 2080                               __ptext21 4ECA  
                             __ptext13 4FCC                               __ptext30 33D4  
                             __ptext22 3B84                               __ptext14 48E4  
                             __ptext31 52FE                               __ptext23 4388  
                             __ptext15 3C6C                               __ptext40 52BE  
                             __ptext32 543C                               __ptext24 494C  
                             __ptext16 3A8E                               __ptext41 34FE  
                             __ptext33 531C                               __ptext25 4722  
                             __ptext17 46AC                               __ptext50 1926  
                             __ptext42 4DFE                               __ptext34 544A  
                             __ptext26 4524                               __ptext18 5044  
                             __ptext51 2FEA                               __ptext43 4E42  
                             __ptext35 533A                               __ptext27 329A  
                             __ptext19 3EB6                               __ptext60 1626  
                             __ptext52 1BA4                               __ptext44 0F74  
                             __ptext36 53AC                               __ptext28 4144  
                             __ptext61 426C                               __ptext53 2E86  
                             __ptext45 4414                               __ptext37 51F2  
                             __ptext29 51D0                               __ptext70 4D28  
                             __ptext62 4ADE                               __ptext54 3E04  
                             __ptext46 4F4E                               __ptext38 3984  
                             __ptext71 0AEA                               __ptext63 487A  
                             __ptext55 40A8                               __ptext47 0012  
                             __ptext39 3D38                               __ptext80 50B2  
                             __ptext72 2CFA                               __ptext64 4BEC  
                             __ptext56 4E86                               __ptext48 49B4  
                             __ptext81 5400                               __ptext73 1E1A  
                             __ptext65 4798                               __ptext57 05A0  
                             __ptext49 12F4                               __ptext90 4B3C  
                             __ptext82 4C3E                               __ptext74 2778  
                             __ptext66 5358                               __ptext58 50E2  
                             __ptext91 507C                               __ptext83 2B50  
                             __ptext75 5186                               __ptext67 45A8  
                             __ptext59 5160                               __ptext92 5410  
                             __ptext84 4C90                               __ptext76 462A  
                             __ptext68 41DA                               __ptext93 5008  
                             __ptext85 299A                               __ptext77 510E  
                             __ptext69 4B96                               __ptext94 547E  
                             __ptext86 480A                               __ptext78 3622  
                             __ptext95 52DE                               __ptext87 3746  
                             __ptext79 4D70                               __ptext96 3144  
                             __ptext88 5466                               __ptext97 5214  
                             __ptext89 5472                               __ptext98 5236  
                             __ptext99 5258                       __size_of_proceed 000C  
                             _filename 017F                            _rawAltitude 0128  
                     ?_disk_initialize 0001                         _timeout_tarefa 0145  
                   sdc_disk_read@count 002B                             strcpy@from 001B  
                  escrita_sdcard@f_fix 0040                  convert_to_int_point@i 007E  
                convert_to_int_point@j 007C             __end_of_inicializa_tarefas 4ADE  
             i2write_timer_zero@timer0 0001                               _grava_sd 53AC  
               __end_of_sdc_disk_write 2B50                              monta_sd@i 0021  
                             _gps_flag 0135                            _rawLatitude 01A0  
                             _init_lcd 400A                          __size_of_atoi 00CC  
                        __size_of_atol 012A                          __size_of_main 0028  
                         _remove_chain 40A8                          __size_of_ltoa 0042  
                        __size_of_sync 0052                    _endereco_cursor_lcd 487A  
                   __end_of_init_ports 5392                               _rawSpeed 01CB  
                        dummy_clocks@i 001C                               f_open@dj 00DE  
                        dummy_clocks@n 001B                               f_open@fn 00C9  
                             f_open@fp 00C0                               f_open@dw 00D7  
                             f_open@rs 00D5                        _dados_gps_to_sd 4A1A  
                             _monta_sd 252C                               _validate 4D70  
                             _sentence 01D1                           move_window@n 0081  
                        stringcpy@str1 0001                          stringcpy@str2 0003  
                             _response 5466                               f_sync@fp 008A  
                  _point_buff_gps_long 0141            __size_of_posicao_cursor_lcd 005E  
                             int$flags 0047                posicao_cursor_lcd@linha 001D  
                             atoi@sign 0023                           ??_wait_ready 0019  
                             atol@sign 0060                            ??_disk_read 0030  
              __end_of_inicializa_uart 5214                   convert_to_int@p_buff 002D  
                         ??_trace_path 00AD                   ?_endereco_cursor_lcd 0001  
                   put_cluster@fatsect 0096                             _INTCONbits 000FF2  
                             memcmp@s1 0019                               memcmp@s2 001B  
                     move_window@wsect 0082                               memcpy@d1 0019  
                             memcpy@s1 001B                    __end_of_put_cluster 2080  
                             fprintf@c 025F                               fprintf@f 0254  
                             fprintf@i 025D                               fprintf@r 0255  
                             fprintf@s 023E                               fprintf@w 0252  
                             fputc@chr 00CC                               fputc@fil 00CE  
                             isdigit@c 001B                               memset@p1 0019  
                            ultoa@base 002B                      _config_timer_dois 542E  
                         _tempo_backup 0118                               fputs@fil 00D5  
                             fputs@str 00D3                      _config_timer_zero 5392  
                         _poligono_ext 0100                          wait_ready@res 001D  
                             intlevel2 0000                     ?_config_timer_dois 0001  
             mensagem_inicial@msg_dois 0071                            ??_sdc_reset 0025  
                             ltoa@base 0065                     ?_config_timer_zero 0001  
                         _tempo_tarefa 0110        convert_to_int_point@convert_str 0066  
                      ?_sdc_disk_write 0025                     __end_of_wait_ready 50B2  
             __end_of_disparo_gravacao 5008                       ___lldiv@dividend 0019  
                    sdc_disk_read@buff 0067                  __end_of_sdc_disk_read 386A  
                  sdc_disk_status@pdrv 001A             convert_to_int_point@p_buff 002D  
                        ?_desliga_uart 0001                    ??_config_timer_dois 0019  
          __size_of_verifica_diferenca 013A                             _OSCCONbits 000FD3  
                   __end_of_trace_path 1BA4                    ??_config_timer_zero 001B  
                          _move_window 2B50                        _fence_diff_long 60FD  
                 sdc_disk_write@count1 0062                   sdc_disk_write@p_buff 0025  
                     _recebe_dado_uart 53EE                               ultoa@buf 0026  
                 sdc_disk_write@sector 0027                  ??_endereco_cursor_lcd 001B  
                             ultoa@val 0027                           response@buff 0019  
                             strcat@cp 001D                               strcat@to 0019  
                             strcmp@s1 0001                               strcmp@s2 0003  
                         ?_desliga_SPI 0001                       ___lldiv@quotient 0021  
                             strcpy@cp 001D                               strlen@cp 001B  
                             strcpy@to 0019                      remove_chain@clust 00A0  
            __end_of_config_timer_dois 543C                           ___aldiv@sign 0022  
                        ?_create_chain 00A0              __end_of_config_timer_zero 53AC  
                          ??_stringcpy 0007            __size_ofi2_write_timer_zero 000A  
                          _SSPCON1bits 000FC6                __size_of_next_dir_entry 0164  
               escreve_cmd_lcd@comando 001B                    sdc_disk_write@count 002B  
              __size_of_convert_to_int 0022          sdc_disk_initialize@crc_number 0065  
              __end_of_dados_gps_to_sd 4A7E                     sdc_disk_write@buff 0067  
         __size_of_sdc_disk_initialize 0300                           f_write@clust 00C8  
                       ??_desliga_uart 0019                     leitura_sdcard@size 0046  
                         f_write@wbuff 00C1                           ?_get_fattime 001D  
                     _reserve_direntry 1BA4                disparo_gravacao@fix_gps 00F3  
                          f_write@buff 00B0                      sdc_disk_write@res 0064  
                         ?_get_cluster 0088                            f_write@sect 00C2  
                          f_write@wcnt 00CA                           ?_disk_status 0001  
        __end_ofmensagem_inicial@F3654 60FD          __end_ofmensagem_inicial@F3656 60EC  
                      escreve_SPI@dado 001A  
