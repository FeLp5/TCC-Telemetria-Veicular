

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue May 17 16:26:04 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1
   110                           	psect	text90,global,reloc=2,class=CODE,delta=1
   111                           	psect	text91,global,reloc=2,class=CODE,delta=1
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1
   113                           	psect	text93,global,reloc=2,class=CODE,delta=1
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1
   115                           	psect	text95,global,reloc=2,class=CODE,delta=1
   116                           	psect	text96,global,reloc=2,class=CODE,delta=1
   117                           	psect	text97,global,reloc=2,class=CODE,delta=1
   118                           	psect	text98,global,reloc=2,class=CODE,delta=1
   119                           	psect	text99,global,reloc=2,class=CODE,delta=1
   120                           	psect	text100,global,reloc=2,class=CODE,delta=1
   121                           	psect	text101,global,reloc=2,class=CODE,delta=1
   122                           	psect	text102,global,reloc=2,class=CODE,delta=1
   123                           	psect	text103,global,reloc=2,class=CODE,delta=1
   124                           	psect	text104,global,reloc=2,class=CODE,delta=1
   125                           	psect	text105,global,reloc=2,class=CODE,delta=1
   126                           	psect	text106,global,reloc=2,class=CODE,delta=1,group=1
   127                           	psect	text107,global,reloc=2,class=CODE,delta=1
   128                           	psect	text108,global,reloc=2,class=CODE,delta=1
   129                           	psect	text109,global,reloc=2,class=CODE,delta=1,group=1
   130                           	psect	text110,global,reloc=2,class=CODE,delta=1
   131                           	psect	text111,global,reloc=2,class=CODE,delta=1
   132                           	psect	text112,global,reloc=2,class=CODE,delta=1
   133                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   134                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1,group=1
   140                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   141                           	psect	text119,global,reloc=2,class=CODE,delta=1,group=1
   142                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   143                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   144  0000                     
   145                           ; Version 1.45
   146                           ; Generated 16/11/2017 GMT
   147                           ; 
   148                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   149                           ; All rights reserved.
   150                           ; 
   151                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   152                           ; 
   153                           ; Redistribution and use in source and binary forms, with or without modification, are
   154                           ; permitted provided that the following conditions are met:
   155                           ; 
   156                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   157                           ;        conditions and the following disclaimer.
   158                           ; 
   159                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   160                           ;        of conditions and the following disclaimer in the documentation and/or other
   161                           ;        materials provided with the distribution.
   162                           ; 
   163                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   164                           ;        software without specific prior written permission.
   165                           ; 
   166                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   167                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   168                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   169                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   170                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   171                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   172                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   173                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   174                           ; 
   175                           ; 
   176                           ; Code-generator required, PIC18F4550 Definitions
   177                           ; 
   178                           ; SFR Addresses
   179  0000                     
   180 ;; Function _Speed is unused but had its address taken
   181  0000                     
   182                           	psect	idataCOMRAM
   183  005FC4                     __pidataCOMRAM:
   184                           	opt stack 0
   185                           
   186                           ;initializer for leitura_sdcard@size
   187  005FC4  58                 	db	88
   188                           
   189                           	psect	idataBANK1
   190  005F4E                     __pidataBANK1:
   191                           	opt stack 0
   192                           
   193                           ;initializer for escreve_inteiro_uart@F3958
   194  005F4E  30                 	db	48
   195  005F4F  30                 	db	48
   196  005F50  30                 	db	48
   197  005F51  30                 	db	48
   198  005F52  30                 	db	48
   199  005F53  30                 	db	48
   200  005F54  00                 	db	0
   201                           
   202                           ;initializer for escreve_inteiro_lcd@F3966
   203  005F55  30                 	db	48
   204  005F56  30                 	db	48
   205  005F57  30                 	db	48
   206  005F58  30                 	db	48
   207  005F59  30                 	db	48
   208  005F5A  30                 	db	48
   209  005F5B  00                 	db	0
   210                           
   211                           	psect	mediumconst
   212  0060D8                     __pmediumconst:
   213                           	opt stack 0
   214  0060D8  00                 	db	0
   215  0060D9                     mensagem_inicial@F4430:
   216                           	opt stack 0
   217  0060D9  54                 	db	84
   218  0060DA  43                 	db	67
   219  0060DB  43                 	db	67
   220  0060DC  2D                 	db	45
   221  0060DD  2D                 	db	45
   222  0060DE  54                 	db	84
   223  0060DF  45                 	db	69
   224  0060E0  4C                 	db	76
   225  0060E1  45                 	db	69
   226  0060E2  4D                 	db	77
   227  0060E3  54                 	db	84
   228  0060E4  52                 	db	82
   229  0060E5  49                 	db	73
   230  0060E6  41                 	db	65
   231  0060E7  00                 	db	0
   232  0060E8  00                 	db	0
   233  0060E9  00                 	db	0
   234  0060EA                     __end_ofmensagem_inicial@F4430:
   235                           	opt stack 0
   236  0060EA                     mensagem_inicial@F4428:
   237                           	opt stack 0
   238  0060EA  46                 	db	70
   239  0060EB  41                 	db	65
   240  0060EC  54                 	db	84
   241  0060ED  45                 	db	69
   242  0060EE  43                 	db	67
   243  0060EF  20                 	db	32
   244  0060F0  53                 	db	83
   245  0060F1  54                 	db	84
   246  0060F2  20                 	db	32
   247  0060F3  41                 	db	65
   248  0060F4  4E                 	db	78
   249  0060F5  44                 	db	68
   250  0060F6  52                 	db	82
   251  0060F7  45                 	db	69
   252  0060F8  00                 	db	0
   253  0060F9  00                 	db	0
   254  0060FA  00                 	db	0
   255  0060FB                     __end_ofmensagem_inicial@F4428:
   256                           	opt stack 0
   257  0060FB                     _fence_diff_long:
   258                           	opt stack 0
   259  0060FB  2D                 	db	45
   260  0060FC  30                 	db	48
   261  0060FD  34                 	db	52
   262  0060FE  36                 	db	54
   263  0060FF  33                 	db	51
   264  006100  33                 	db	51
   265  006101  39                 	db	57
   266  006102  34                 	db	52
   267  006103  30                 	db	48
   268  006104  35                 	db	53
   269  006105  30                 	db	48
   270  006106  2D                 	db	45
   271  006107  30                 	db	48
   272  006108  34                 	db	52
   273  006109  36                 	db	54
   274  00610A  32                 	db	50
   275  00610B  39                 	db	57
   276  00610C  34                 	db	52
   277  00610D  31                 	db	49
   278  00610E  34                 	db	52
   279  00610F  37                 	db	55
   280  006110  34                 	db	52
   281  006111  2D                 	db	45
   282  006112  30                 	db	48
   283  006113  34                 	db	52
   284  006114  36                 	db	54
   285  006115  32                 	db	50
   286  006116  39                 	db	57
   287  006117  34                 	db	52
   288  006118  31                 	db	49
   289  006119  34                 	db	52
   290  00611A  37                 	db	55
   291  00611B  34                 	db	52
   292  00611C  2D                 	db	45
   293  00611D  30                 	db	48
   294  00611E  34                 	db	52
   295  00611F  36                 	db	54
   296  006120  33                 	db	51
   297  006121  33                 	db	51
   298  006122  39                 	db	57
   299  006123  34                 	db	52
   300  006124  30                 	db	48
   301  006125  35                 	db	53
   302  006126  30                 	db	48
   303  006127                     __end_of_fence_diff_long:
   304                           	opt stack 0
   305  006127                     _fence_diff_lat:
   306                           	opt stack 0
   307  006127  2D                 	db	45
   308  006128  32                 	db	50
   309  006129  33                 	db	51
   310  00612A  33                 	db	51
   311  00612B  36                 	db	54
   312  00612C  34                 	db	52
   313  00612D  36                 	db	54
   314  00612E  36                 	db	54
   315  00612F  35                 	db	53
   316  006130  33                 	db	51
   317  006131  2D                 	db	45
   318  006132  32                 	db	50
   319  006133  33                 	db	51
   320  006134  33                 	db	51
   321  006135  36                 	db	54
   322  006136  34                 	db	52
   323  006137  36                 	db	54
   324  006138  36                 	db	54
   325  006139  35                 	db	53
   326  00613A  33                 	db	51
   327  00613B  2D                 	db	45
   328  00613C  32                 	db	50
   329  00613D  33                 	db	51
   330  00613E  34                 	db	52
   331  00613F  30                 	db	48
   332  006140  35                 	db	53
   333  006141  39                 	db	57
   334  006142  36                 	db	54
   335  006143  34                 	db	52
   336  006144  32                 	db	50
   337  006145  2D                 	db	45
   338  006146  32                 	db	50
   339  006147  33                 	db	51
   340  006148  34                 	db	52
   341  006149  30                 	db	48
   342  00614A  35                 	db	53
   343  00614B  39                 	db	57
   344  00614C  36                 	db	54
   345  00614D  34                 	db	52
   346  00614E  32                 	db	50
   347  00614F                     __end_of_fence_diff_lat:
   348                           	opt stack 0
   349  0000                     _TMR0	set	4054
   350  0000                     _PORTEbits	set	3972
   351  0000                     _PCL	set	4089
   352  0000                     _PCLATH	set	4090
   353  0000                     _PIE1bits	set	3997
   354  0000                     _RCSTA	set	4011
   355  0000                     _TXSTA	set	4012
   356  0000                     _RCREG	set	4014
   357  0000                     _RCSTAbits	set	4011
   358  0000                     _TXREG	set	4013
   359  0000                     _SPBRG	set	4015
   360  0000                     _PIR1bits	set	3998
   361  0000                     _SSPBUF	set	4041
   362  0000                     _SSPCON1bits	set	4038
   363  0000                     _SSPSTATbits	set	4039
   364  0000                     _SSPCON1	set	4038
   365  0000                     _SSPSTAT	set	4039
   366  0000                     _TRISCbits	set	3988
   367  0000                     _TRISBbits	set	3987
   368  0000                     _PORTBbits	set	3969
   369  0000                     _PR2	set	4043
   370  0000                     _TMR2	set	4044
   371  0000                     _T2CON	set	4042
   372  0000                     _OSCCONbits	set	4051
   373  0000                     _TRISE	set	3990
   374  0000                     _TRISC	set	3988
   375  0000                     _TRISA	set	3986
   376  0000                     _TRISD	set	3989
   377  0000                     _LATB	set	3978
   378  0000                     _TRISB	set	3987
   379  0000                     _ADCON1	set	4033
   380  0000                     _T0CONbits	set	4053
   381  0000                     _INTCONbits	set	4082
   382  0000                     _TMR0L	set	4054
   383  0000                     _TMR0H	set	4055
   384  0000                     _PIE1	set	3997
   385  0000                     _INTCON3	set	4080
   386  0000                     _INTCON2	set	4081
   387  0000                     _INTCON	set	4082
   388  0000                     _SPPCFG	set	3939
   389  0000                     _SPPCON	set	3941
   390  0000                     _T0CON	set	4053
   391  0000                     _PORTDbits	set	3971
   392  0000                     _TRISDbits	set	3989
   393  0000                     _LATBbits	set	3978
   394  0000                     _LATCbits	set	3979
   395  0000                     _INT0IE	set	32660
   396  0000                     _INT0IF	set	32657
   397  0000                     _T0IF	set	32658
   398  0000                     _TMR0IF	set	32658
   399  0000                     _RCIF	set	31989
   400  0000                     _TRMT	set	32097
   401  0000                     _TXEN	set	32101
   402  0000                     _CREN	set	32092
   403  0000                     _SPEN	set	32095
   404  0000                     _SYNC	set	32100
   405  0000                     _BRGH	set	32098
   406  0000                     _TMR2IF	set	31985
   407  00614F  6F                 	db	111	;'o'
   408  006150  20                 	db	32
   409  006151  53                 	db	83	;'S'
   410  006152  69                 	db	105	;'i'
   411  006153  73                 	db	115	;'s'
   412  006154  74                 	db	116	;'t'
   413  006155  65                 	db	101	;'e'
   414  006156  6D                 	db	109	;'m'
   415  006157  61                 	db	97	;'a'
   416  006158  20                 	db	32
   417  006159  64                 	db	100	;'d'
   418  00615A  65                 	db	101	;'e'
   419  00615B  20                 	db	32
   420  00615C  61                 	db	97	;'a'
   421  00615D  72                 	db	114	;'r'
   422  00615E  71                 	db	113	;'q'
   423  00615F  75                 	db	117	;'u'
   424  006160  69                 	db	105	;'i'
   425  006161  76                 	db	118	;'v'
   426  006162  6F                 	db	111	;'o'
   427  006163  00                 	db	0
   428  006164                     STR_2:
   429  006164  49                 	db	73	;'I'
   430  006165  6E                 	db	110	;'n'
   431  006166  73                 	db	115	;'s'
   432  006167  69                 	db	105	;'i'
   433  006168  72                 	db	114	;'r'
   434  006169  61                 	db	97	;'a'
   435  00616A  20                 	db	32
   436  00616B  6F                 	db	111	;'o'
   437  00616C  20                 	db	32
   438  00616D  43                 	db	67	;'C'
   439  00616E  61                 	db	97	;'a'
   440  00616F  72                 	db	114	;'r'
   441  006170  74                 	db	116	;'t'
   442  006171  61                 	db	97	;'a'
   443  006172  6F                 	db	111	;'o'
   444  006173  00                 	db	0
   445  006174                     STR_18:
   446  006174  6C                 	db	108	;'l'
   447  006175  74                 	db	116	;'t'
   448  006176  25                 	db	37
   449  006177  63                 	db	99	;'c'
   450  006178  25                 	db	37
   451  006179  73                 	db	115	;'s'
   452  00617A  3B                 	db	59	;';'
   453  00617B  6C                 	db	108	;'l'
   454  00617C  6F                 	db	111	;'o'
   455  00617D  25                 	db	37
   456  00617E  63                 	db	99	;'c'
   457  00617F  25                 	db	37
   458  006180  73                 	db	115	;'s'
   459  006181  3B                 	db	59	;';'
   460  006182  00                 	db	0
   461  006183  45                 	db	69	;'E'
   462  006184  72                 	db	114	;'r'
   463  006185  72                 	db	114	;'r'
   464  006186  6F                 	db	111	;'o'
   465  006187  20                 	db	32
   466  006188  61                 	db	97	;'a'
   467  006189  6F                 	db	111	;'o'
   468  00618A  20                 	db	32
   469  00618B  6D                 	db	109	;'m'
   470  00618C  6F                 	db	111	;'o'
   471  00618D  6E                 	db	110	;'n'
   472  00618E  74                 	db	116	;'t'
   473  00618F  61                 	db	97	;'a'
   474  006190  72                 	db	114	;'r'
   475  006191  00                 	db	0
   476  006192  45                 	db	69	;'E'
   477  006193  72                 	db	114	;'r'
   478  006194  72                 	db	114	;'r'
   479  006195  6F                 	db	111	;'o'
   480  006196  20                 	db	32
   481  006197  61                 	db	97	;'a'
   482  006198  6F                 	db	111	;'o'
   483  006199  20                 	db	32
   484  00619A  63                 	db	99	;'c'
   485  00619B  72                 	db	114	;'r'
   486  00619C  69                 	db	105	;'i'
   487  00619D  61                 	db	97	;'a'
   488  00619E  72                 	db	114	;'r'
   489  00619F  00                 	db	0
   490  0061A0  65                 	db	101	;'e'
   491  0061A1  78                 	db	120	;'x'
   492  0061A2  74                 	db	116	;'t'
   493  0061A3  66                 	db	102	;'f'
   494  0061A4  65                 	db	101	;'e'
   495  0061A5  6E                 	db	110	;'n'
   496  0061A6  63                 	db	99	;'c'
   497  0061A7  65                 	db	101	;'e'
   498  0061A8  2E                 	db	46
   499  0061A9  74                 	db	116	;'t'
   500  0061AA  78                 	db	120	;'x'
   501  0061AB  74                 	db	116	;'t'
   502  0061AC  00                 	db	0
   503  0061AD                     STR_8:
   504  0061AD  2D                 	db	45
   505  0061AE  30                 	db	48	;'0'
   506  0061AF  34                 	db	52	;'4'
   507  0061B0  36                 	db	54	;'6'
   508  0061B1  33                 	db	51	;'3'
   509  0061B2  39                 	db	57	;'9'
   510  0061B3  2E                 	db	46
   511  0061B4  38                 	db	56	;'8'
   512  0061B5  31                 	db	49	;'1'
   513  0061B6  34                 	db	52	;'4'
   514  0061B7  37                 	db	55	;'7'
   515  0061B8  39                 	db	57	;'9'
   516  0061B9  00                 	db	0
   517  0061BA                     STR_7:
   518  0061BA  2D                 	db	45
   519  0061BB  32                 	db	50	;'2'
   520  0061BC  33                 	db	51	;'3'
   521  0061BD  33                 	db	51	;'3'
   522  0061BE  37                 	db	55	;'7'
   523  0061BF  2E                 	db	46
   524  0061C0  36                 	db	54	;'6'
   525  0061C1  36                 	db	54	;'6'
   526  0061C2  36                 	db	54	;'6'
   527  0061C3  35                 	db	53	;'5'
   528  0061C4  33                 	db	51	;'3'
   529  0061C5  00                 	db	0
   530  0061C6                     STR_25:
   531  0061C6  41                 	db	65	;'A'
   532  0061C7  47                 	db	71	;'G'
   533  0061C8  55                 	db	85	;'U'
   534  0061C9  41                 	db	65	;'A'
   535  0061CA  52                 	db	82	;'R'
   536  0061CB  44                 	db	68	;'D'
   537  0061CC  45                 	db	69	;'E'
   538  0061CD  2E                 	db	46
   539  0061CE  2E                 	db	46
   540  0061CF  2E                 	db	46
   541  0061D0  00                 	db	0
   542  0061D1                     STR_4:
   543  0061D1  4D                 	db	77	;'M'
   544  0061D2  4D                 	db	77	;'M'
   545  0061D3  43                 	db	67	;'C'
   546  0061D4  20                 	db	32
   547  0061D5  56                 	db	86	;'V'
   548  0061D6  65                 	db	101	;'e'
   549  0061D7  72                 	db	114	;'r'
   550  0061D8  2E                 	db	46
   551  0061D9  20                 	db	32
   552  0061DA  33                 	db	51	;'3'
   553  0061DB  00                 	db	0
   554  0061DC                     STR_1:
   555  0061DC  53                 	db	83	;'S'
   556  0061DD  65                 	db	101	;'e'
   557  0061DE  6D                 	db	109	;'m'
   558  0061DF  20                 	db	32
   559  0061E0  43                 	db	67	;'C'
   560  0061E1  61                 	db	97	;'a'
   561  0061E2  72                 	db	114	;'r'
   562  0061E3  74                 	db	116	;'t'
   563  0061E4  61                 	db	97	;'a'
   564  0061E5  6F                 	db	111	;'o'
   565  0061E6  00                 	db	0
   566  0061E7                     STR_19:
   567  0061E7  72                 	db	114	;'r'
   568  0061E8  30                 	db	48	;'0'
   569  0061E9  3B                 	db	59	;';'
   570  0061EA  63                 	db	99	;'c'
   571  0061EB  30                 	db	48	;'0'
   572  0061EC  3B                 	db	59	;';'
   573  0061ED  6B                 	db	107	;'k'
   574  0061EE  30                 	db	48	;'0'
   575  0061EF  3B                 	db	59	;';'
   576  0061F0  00                 	db	0
   577  0061F1                     STR_20:
   578  0061F1  68                 	db	104	;'h'
   579  0061F2  25                 	db	37
   580  0061F3  73                 	db	115	;'s'
   581  0061F4  3B                 	db	59	;';'
   582  0061F5  64                 	db	100	;'d'
   583  0061F6  4E                 	db	78	;'N'
   584  0061F7  2F                 	db	47
   585  0061F8  41                 	db	65	;'A'
   586  0061F9  3B                 	db	59	;';'
   587  0061FA  00                 	db	0
   588  0061FB  56                 	db	86	;'V'
   589  0061FC  65                 	db	101	;'e'
   590  0061FD  72                 	db	114	;'r'
   591  0061FE  69                 	db	105	;'i'
   592  0061FF  66                 	db	102	;'f'
   593  006200  69                 	db	105	;'i'
   594  006201  71                 	db	113	;'q'
   595  006202  75                 	db	117	;'u'
   596  006203  65                 	db	101	;'e'
   597  006204  00                 	db	0
   598  006205  6F                 	db	111	;'o'
   599  006206  20                 	db	32
   600  006207  61                 	db	97	;'a'
   601  006208  72                 	db	114	;'r'
   602  006209  71                 	db	113	;'q'
   603  00620A  75                 	db	117	;'u'
   604  00620B  69                 	db	105	;'i'
   605  00620C  76                 	db	118	;'v'
   606  00620D  6F                 	db	111	;'o'
   607  00620E  00                 	db	0
   608  00620F                     STR_3:
   609  00620F  53                 	db	83	;'S'
   610  006210  44                 	db	68	;'D'
   611  006211  20                 	db	32
   612  006212  56                 	db	86	;'V'
   613  006213  45                 	db	69	;'E'
   614  006214  52                 	db	82	;'R'
   615  006215  2E                 	db	46
   616  006216  20                 	db	32
   617  006217  31                 	db	49	;'1'
   618  006218  00                 	db	0
   619  006219                     STR_38:
   620  006219  42                 	db	66	;'B'
   621  00621A  31                 	db	49	;'1'
   622  00621B  3A                 	db	58	;':'
   623  00621C  46                 	db	70	;'F'
   624  00621D  45                 	db	69	;'E'
   625  00621E  4E                 	db	78	;'N'
   626  00621F  43                 	db	67	;'C'
   627  006220  45                 	db	69	;'E'
   628  006221  00                 	db	0
   629  006222  6F                 	db	111	;'o'
   630  006223  20                 	db	32
   631  006224  63                 	db	99	;'c'
   632  006225  61                 	db	97	;'a'
   633  006226  72                 	db	114	;'r'
   634  006227  74                 	db	116	;'t'
   635  006228  61                 	db	97	;'a'
   636  006229  6F                 	db	111	;'o'
   637  00622A  00                 	db	0
   638  00622B                     STR_39:
   639  00622B  42                 	db	66	;'B'
   640  00622C  32                 	db	50	;'2'
   641  00622D  3A                 	db	58	;':'
   642  00622E  4C                 	db	76	;'L'
   643  00622F  54                 	db	84	;'T'
   644  006230  4C                 	db	76	;'L'
   645  006231  4F                 	db	79	;'O'
   646  006232  00                 	db	0
   647  006233                     STR_31:
   648  006233  46                 	db	70	;'F'
   649  006234  45                 	db	69	;'E'
   650  006235  4E                 	db	78	;'N'
   651  006236  43                 	db	67	;'C'
   652  006237  45                 	db	69	;'E'
   653  006238  3A                 	db	58	;':'
   654  006239  00                 	db	0
   655  00623A                     STR_27:
   656  00623A  44                 	db	68	;'D'
   657  00623B  45                 	db	69	;'E'
   658  00623C  4E                 	db	78	;'N'
   659  00623D  54                 	db	84	;'T'
   660  00623E  52                 	db	82	;'R'
   661  00623F  4F                 	db	79	;'O'
   662  006240  00                 	db	0
   663  006241                     STR_15:
   664  006241  74                 	db	116	;'t'
   665  006242  65                 	db	101	;'e'
   666  006243  73                 	db	115	;'s'
   667  006244  74                 	db	116	;'t'
   668  006245  65                 	db	101	;'e'
   669  006246  33                 	db	51	;'3'
   670  006247  00                 	db	0
   671  006248                     STR_21:
   672  006248  66                 	db	102	;'f'
   673  006249  25                 	db	37
   674  00624A  73                 	db	115	;'s'
   675  00624B  3B                 	db	59	;';'
   676  00624C  0A                 	db	10
   677  00624D  00                 	db	0
   678  00624E                     STR_6:
   679  00624E  47                 	db	71	;'G'
   680  00624F  50                 	db	80	;'P'
   681  006250  47                 	db	71	;'G'
   682  006251  47                 	db	71	;'G'
   683  006252  41                 	db	65	;'A'
   684  006253  00                 	db	0
   685  006254                     STR_5:
   686  006254  47                 	db	71	;'G'
   687  006255  50                 	db	80	;'P'
   688  006256  52                 	db	82	;'R'
   689  006257  4D                 	db	77	;'M'
   690  006258  43                 	db	67	;'C'
   691  006259  00                 	db	0
   692  00625A                     STR_35:
   693  00625A  46                 	db	70	;'F'
   694  00625B  49                 	db	73	;'I'
   695  00625C  58                 	db	88	;'X'
   696  00625D  3A                 	db	58	;':'
   697  00625E  00                 	db	0
   698  00625F                     STR_26:
   699  00625F  46                 	db	70	;'F'
   700  006260  4F                 	db	79	;'O'
   701  006261  52                 	db	82	;'R'
   702  006262  41                 	db	65	;'A'
   703  006263  00                 	db	0
   704  006264                     STR_17:
   705  006264  76                 	db	118	;'v'
   706  006265  25                 	db	37
   707  006266  73                 	db	115	;'s'
   708  006267  3B                 	db	59	;';'
   709  006268  00                 	db	0
   710  006269                     STR_16:
   711  006269  2E                 	db	46
   712  00626A  74                 	db	116	;'t'
   713  00626B  6C                 	db	108	;'l'
   714  00626C  6D                 	db	109	;'m'
   715  00626D  00                 	db	0
   716  00626E                     STR_37:
   717  00626E  6C                 	db	108	;'l'
   718  00626F  6F                 	db	111	;'o'
   719  006270  3A                 	db	58	;':'
   720  006271  00                 	db	0
   721  006272                     STR_36:
   722  006272  6C                 	db	108	;'l'
   723  006273  74                 	db	116	;'t'
   724  006274  3A                 	db	58	;':'
   725  006275  00                 	db	0
   726  006276                     STR_23:
   727  006276  46                 	db	70	;'F'
   728  006277  41                 	db	65	;'A'
   729  006278  54                 	db	84	;'T'
   730  006279  00                 	db	0
   731  00627A  0D                 	db	13
   732  00627B  0A                 	db	10
   733  00627C  00                 	db	0
   734  00627D                     STR_30:
   735  00627D  7C                 	db	124
   736  00627E  00                 	db	0
   737  00627F  00                 	db	0	; dummy byte at the end
   738  0000                     
   739                           ; #config settings
   740                           
   741                           	psect	cinit
   742  004FAC                     __pcinit:
   743                           	opt stack 0
   744  004FAC                     start_initialization:
   745                           	opt stack 0
   746  004FAC                     __initialization:
   747                           	opt stack 0
   748                           
   749                           ; Initialize objects allocated to BANK1 (14 bytes)
   750                           ; load TBLPTR registers with __pidataBANK1
   751  004FAC  0E4E               	movlw	low __pidataBANK1
   752  004FAE  6EF6               	movwf	tblptrl,c
   753  004FB0  0E5F               	movlw	high __pidataBANK1
   754  004FB2  6EF7               	movwf	tblptrh,c
   755  004FB4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   756  004FB6  6EF8               	movwf	tblptru,c
   757  004FB8  EE01  F0F2         	lfsr	0,__pdataBANK1
   758  004FBC  EE10 F00E          	lfsr	1,14
   759  004FC0                     copy_data0:
   760  004FC0  0009               	tblrd		*+
   761  004FC2  CFF5 FFEE          	movff	tablat,postinc0
   762  004FC6  50E5               	movf	postdec1,w,c
   763  004FC8  50E1               	movf	fsr1l,w,c
   764  004FCA  E1FA               	bnz	copy_data0
   765                           
   766                           ; Initialize objects allocated to COMRAM (1 bytes)
   767                           ; load TBLPTR registers with __pidataCOMRAM
   768  004FCC  0EC4               	movlw	low __pidataCOMRAM
   769  004FCE  6EF6               	movwf	tblptrl,c
   770  004FD0  0E5F               	movlw	high __pidataCOMRAM
   771  004FD2  6EF7               	movwf	tblptrh,c
   772  004FD4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   773  004FD6  6EF8               	movwf	tblptru,c
   774  004FD8  0009               	tblrd		*+	;fetch initializer
   775  004FDA  CFF5 F042          	movff	tablat,__pdataCOMRAM
   776                           
   777                           ; Clear objects allocated to BIGRAM (544 bytes)
   778  004FDE  EE02  F067         	lfsr	0,__pbssBIGRAM
   779  004FE2  EE12 F020          	lfsr	1,544
   780  004FE6                     clear_0:
   781  004FE6  6AEE               	clrf	postinc0,c
   782  004FE8  50E5               	movf	postdec1,w,c
   783  004FEA  50E1               	movf	fsr1l,w,c
   784  004FEC  E1FC               	bnz	clear_0
   785  004FEE  50E2               	movf	fsr1h,w,c
   786  004FF0  E1FA               	bnz	clear_0
   787                           
   788                           ; Clear objects allocated to BANK2 (62 bytes)
   789  004FF2  EE02  F000         	lfsr	0,__pbssBANK2
   790  004FF6  0E3E               	movlw	62
   791  004FF8                     clear_1:
   792  004FF8  6AEE               	clrf	postinc0,c
   793  004FFA  06E8               	decf	wreg,f,c
   794  004FFC  E1FD               	bnz	clear_1
   795                           
   796                           ; Clear objects allocated to BANK1 (205 bytes)
   797  004FFE  EE01  F000         	lfsr	0,__pbssBANK1
   798  005002  0ECD               	movlw	205
   799  005004                     clear_2:
   800  005004  6AEE               	clrf	postinc0,c
   801  005006  06E8               	decf	wreg,f,c
   802  005008  E1FD               	bnz	clear_2
   803                           
   804                           ; Clear objects allocated to BANK0 (17 bytes)
   805  00500A  EE00  F0EF         	lfsr	0,__pbssBANK0
   806  00500E  0E11               	movlw	17
   807  005010                     clear_3:
   808  005010  6AEE               	clrf	postinc0,c
   809  005012  06E8               	decf	wreg,f,c
   810  005014  E1FD               	bnz	clear_3
   811                           
   812                           ; Clear objects allocated to COMRAM (32 bytes)
   813  005016  EE00  F022         	lfsr	0,__pbssCOMRAM
   814  00501A  0E20               	movlw	32
   815  00501C                     clear_4:
   816  00501C  6AEE               	clrf	postinc0,c
   817  00501E  06E8               	decf	wreg,f,c
   818  005020  E1FD               	bnz	clear_4
   819  005022                     end_of_initialization:
   820                           	opt stack 0
   821  005022                     __end_of__initialization:
   822                           	opt stack 0
   823  005022  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   824  005024  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   825  005026  0E00               	movlw	low (__Lmediumconst shr (0+16))
   826  005028  6EF8               	movwf	tblptru,c
   827  00502A  0100               	movlb	0
   828  00502C  EFA3  F02E         	goto	_main	;jump to C main() function
   829                           tblptru	equ	0xFF8
   830                           tblptrh	equ	0xFF7
   831                           tblptrl	equ	0xFF6
   832                           tablat	equ	0xFF5
   833                           postinc0	equ	0xFEE
   834                           wreg	equ	0xFE8
   835                           postdec1	equ	0xFE5
   836                           fsr1h	equ	0xFE2
   837                           fsr1l	equ	0xFE1
   838                           
   839                           	psect	bssCOMRAM
   840  000022                     __pbssCOMRAM:
   841                           	opt stack 0
   842  000022                     _poligono_ext:
   843                           	opt stack 0
   844  000022                     	ds	16
   845  000032                     _time_atualizacao:
   846                           	opt stack 0
   847  000032                     	ds	2
   848  000034                     _time_sd:
   849                           	opt stack 0
   850  000034                     	ds	2
   851  000036                     troca_de_tela@last_state:
   852                           	opt stack 0
   853  000036                     	ds	1
   854  000037                     troca_de_tela@state:
   855                           	opt stack 0
   856  000037                     	ds	1
   857  000038                     _flag_anomalia:
   858                           	opt stack 0
   859  000038                     	ds	1
   860  000039                     _tarefa_em_execucao:
   861                           	opt stack 0
   862  000039                     	ds	1
   863  00003A                     _data_uart_recebe:
   864                           	opt stack 0
   865  00003A                     	ds	1
   866  00003B                     _estado:
   867                           	opt stack 0
   868  00003B                     	ds	1
   869  00003C                     escrita_sdcard@f_fix:
   870                           	opt stack 0
   871  00003C                     	ds	1
   872  00003D                     _data_hoje:
   873                           	opt stack 0
   874  00003D                     	ds	1
   875  00003E                     timer_dois@flag:
   876                           	opt stack 0
   877  00003E                     	ds	1
   878  00003F                     _Term:
   879                           	opt stack 0
   880  00003F                     	ds	1
   881  000040                     _SentenceType:
   882                           	opt stack 0
   883  000040                     	ds	1
   884  000041                     _char_number:
   885                           	opt stack 0
   886  000041                     	ds	1
   887                           tblptru	equ	0xFF8
   888                           tblptrh	equ	0xFF7
   889                           tblptrl	equ	0xFF6
   890                           tablat	equ	0xFF5
   891                           postinc0	equ	0xFEE
   892                           wreg	equ	0xFE8
   893                           postdec1	equ	0xFE5
   894                           fsr1h	equ	0xFE2
   895                           fsr1l	equ	0xFE1
   896                           
   897                           	psect	dataCOMRAM
   898  000042                     __pdataCOMRAM:
   899                           	opt stack 0
   900  000042                     leitura_sdcard@size:
   901                           	opt stack 0
   902  000042                     	ds	1
   903                           tblptru	equ	0xFF8
   904                           tblptrh	equ	0xFF7
   905                           tblptrl	equ	0xFF6
   906                           tablat	equ	0xFF5
   907                           postinc0	equ	0xFEE
   908                           wreg	equ	0xFE8
   909                           postdec1	equ	0xFE5
   910                           fsr1h	equ	0xFE2
   911                           fsr1l	equ	0xFE1
   912                           
   913                           	psect	bssBANK0
   914  0000EF                     __pbssBANK0:
   915                           	opt stack 0
   916  0000EF                     verifica_dados_operacionais@velocidade_media:
   917                           	opt stack 0
   918  0000EF                     	ds	4
   919  0000F3                     _fence_flag:
   920                           	opt stack 0
   921  0000F3                     	ds	3
   922  0000F6                     _FatFs:
   923                           	opt stack 0
   924  0000F6                     	ds	2
   925  0000F8                     _GPGGA_ok:
   926                           	opt stack 0
   927  0000F8                     	ds	2
   928  0000FA                     _GPRMC_ok:
   929                           	opt stack 0
   930  0000FA                     	ds	2
   931  0000FC                     _data_buff:
   932                           	opt stack 0
   933  0000FC                     	ds	2
   934  0000FE                     verifica_dados_operacionais@contador:
   935                           	opt stack 0
   936  0000FE                     	ds	1
   937  0000FF                     _sinaliza_int_timer:
   938                           	opt stack 0
   939  0000FF                     	ds	1
   940                           tblptru	equ	0xFF8
   941                           tblptrh	equ	0xFF7
   942                           tblptrl	equ	0xFF6
   943                           tablat	equ	0xFF5
   944                           postinc0	equ	0xFEE
   945                           wreg	equ	0xFE8
   946                           postdec1	equ	0xFE5
   947                           fsr1h	equ	0xFE2
   948                           fsr1l	equ	0xFE1
   949                           
   950                           	psect	bssBANK1
   951  000100                     __pbssBANK1:
   952                           	opt stack 0
   953  000100                     _dado:
   954                           	opt stack 0
   955  000100                     	ds	10
   956  00010A                     _tempo_tarefa:
   957                           	opt stack 0
   958  00010A                     	ds	8
   959  000112                     _tempo_backup:
   960                           	opt stack 0
   961  000112                     	ds	8
   962  00011A                     _p_tarefas:
   963                           	opt stack 0
   964  00011A                     	ds	8
   965  000122                     _rawAltitude:
   966                           	opt stack 0
   967  000122                     	ds	7
   968  000129                     _rawCourse:
   969                           	opt stack 0
   970  000129                     	ds	6
   971  00012F                     _gps_flag:
   972                           	opt stack 0
   973  00012F                     	ds	6
   974  000135                     _rawSatellites:
   975                           	opt stack 0
   976  000135                     	ds	3
   977  000138                     _temp_buff_lat:
   978                           	opt stack 0
   979  000138                     	ds	2
   980  00013A                     _temp_buff_long:
   981                           	opt stack 0
   982  00013A                     	ds	2
   983  00013C                     _point_buff_gps_long:
   984                           	opt stack 0
   985  00013C                     	ds	2
   986  00013E                     _point_buff_gps_lat:
   987                           	opt stack 0
   988  00013E                     	ds	2
   989  000140                     _time_recovery:
   990                           	opt stack 0
   991  000140                     	ds	2
   992  000142                     _timeout_tarefa:
   993                           	opt stack 0
   994  000142                     	ds	2
   995  000144                     _fsid:
   996                           	opt stack 0
   997  000144                     	ds	2
   998  000146                     _fil:
   999                           	opt stack 0
  1000  000146                     	ds	28
  1001  000162                     _dado_arquivo:
  1002                           	opt stack 0
  1003  000162                     	ds	20
  1004  000176                     _filename:
  1005                           	opt stack 0
  1006  000176                     	ds	20
  1007  00018A                     _rawLongitude:
  1008                           	opt stack 0
  1009  00018A                     	ds	12
  1010  000196                     _buffer:
  1011                           	opt stack 0
  1012  000196                     	ds	12
  1013  0001A2                     _rawLatitude:
  1014                           	opt stack 0
  1015  0001A2                     	ds	11
  1016  0001AD                     _rawTime:
  1017                           	opt stack 0
  1018  0001AD                     	ds	11
  1019  0001B8                     _rawDate:
  1020                           	opt stack 0
  1021  0001B8                     	ds	7
  1022  0001BF                     _rawSpeed:
  1023                           	opt stack 0
  1024  0001BF                     	ds	6
  1025  0001C5                     _sentence:
  1026                           	opt stack 0
  1027  0001C5                     	ds	6
  1028  0001CB                     _rawFix:
  1029                           	opt stack 0
  1030  0001CB                     	ds	2
  1031                           tblptru	equ	0xFF8
  1032                           tblptrh	equ	0xFF7
  1033                           tblptrl	equ	0xFF6
  1034                           tablat	equ	0xFF5
  1035                           postinc0	equ	0xFEE
  1036                           wreg	equ	0xFE8
  1037                           postdec1	equ	0xFE5
  1038                           fsr1h	equ	0xFE2
  1039                           fsr1l	equ	0xFE1
  1040                           
  1041                           	psect	dataBANK1
  1042  0001F2                     __pdataBANK1:
  1043                           	opt stack 0
  1044  0001F2                     escreve_inteiro_uart@F3958:
  1045                           	opt stack 0
  1046  0001F2                     	ds	7
  1047  0001F9                     escreve_inteiro_lcd@F3966:
  1048                           	opt stack 0
  1049  0001F9                     	ds	7
  1050                           tblptru	equ	0xFF8
  1051                           tblptrh	equ	0xFF7
  1052                           tblptrl	equ	0xFF6
  1053                           tablat	equ	0xFF5
  1054                           postinc0	equ	0xFEE
  1055                           wreg	equ	0xFE8
  1056                           postdec1	equ	0xFE5
  1057                           fsr1h	equ	0xFE2
  1058                           fsr1l	equ	0xFE1
  1059                           
  1060                           	psect	bssBANK2
  1061  000200                     __pbssBANK2:
  1062                           	opt stack 0
  1063  000200                     _string_dado:
  1064                           	opt stack 0
  1065  000200                     	ds	62
  1066                           tblptru	equ	0xFF8
  1067                           tblptrh	equ	0xFF7
  1068                           tblptrl	equ	0xFF6
  1069                           tablat	equ	0xFF5
  1070                           postinc0	equ	0xFEE
  1071                           wreg	equ	0xFE8
  1072                           postdec1	equ	0xFE5
  1073                           fsr1h	equ	0xFE2
  1074                           fsr1l	equ	0xFE1
  1075                           
  1076                           	psect	bssBIGRAM
  1077  000267                     __pbssBIGRAM:
  1078                           	opt stack 0
  1079  000267                     _fs:
  1080                           	opt stack 0
  1081  000267                     	ds	544
  1082                           tblptru	equ	0xFF8
  1083                           tblptrh	equ	0xFF7
  1084                           tblptrl	equ	0xFF6
  1085                           tablat	equ	0xFF5
  1086                           postinc0	equ	0xFEE
  1087                           wreg	equ	0xFE8
  1088                           postdec1	equ	0xFE5
  1089                           fsr1h	equ	0xFE2
  1090                           fsr1l	equ	0xFE1
  1091                           
  1092                           	psect	cstackBANK2
  1093  00023E                     __pcstackBANK2:
  1094                           	opt stack 0
  1095  00023E                     fprintf@s:
  1096                           	opt stack 0
  1097                           
  1098                           ; 16 bytes @ 0x0
  1099  00023E                     	ds	16
  1100  00024E                     fprintf@res:
  1101                           	opt stack 0
  1102                           
  1103                           ; 2 bytes @ 0x10
  1104  00024E                     	ds	2
  1105  000250                     _fprintf$2176:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x12
  1109  000250                     	ds	2
  1110  000252                     fprintf@w:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x14
  1114  000252                     	ds	2
  1115  000254                     fprintf@f:
  1116                           	opt stack 0
  1117                           
  1118                           ; 1 bytes @ 0x16
  1119  000254                     	ds	1
  1120  000255                     fprintf@r:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x17
  1124  000255                     	ds	1
  1125  000256                     fprintf@val:
  1126                           	opt stack 0
  1127                           
  1128                           ; 4 bytes @ 0x18
  1129  000256                     	ds	4
  1130  00025A                     fprintf@arp:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x1C
  1134  00025A                     	ds	2
  1135  00025C                     fprintf@cc:
  1136                           	opt stack 0
  1137                           
  1138                           ; 2 bytes @ 0x1E
  1139  00025C                     	ds	2
  1140  00025E                     fprintf@i:
  1141                           	opt stack 0
  1142                           
  1143                           ; 2 bytes @ 0x20
  1144  00025E                     	ds	2
  1145  000260                     fprintf@c:
  1146                           	opt stack 0
  1147                           
  1148                           ; 1 bytes @ 0x22
  1149  000260                     	ds	1
  1150  000261                     
  1151                           ; 1 bytes @ 0x23
  1152  000261                     	ds	1
  1153  000262                     disparo_gravacao@fix_gps:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x24
  1157  000262                     	ds	2
  1158  000264                     
  1159                           ; 1 bytes @ 0x26
  1160  000264                     	ds	2
  1161  000266                     escalonador@cont:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x28
  1165  000266                     	ds	1
  1166                           tblptru	equ	0xFF8
  1167                           tblptrh	equ	0xFF7
  1168                           tblptrl	equ	0xFF6
  1169                           tablat	equ	0xFF5
  1170                           postinc0	equ	0xFEE
  1171                           wreg	equ	0xFE8
  1172                           postdec1	equ	0xFE5
  1173                           fsr1h	equ	0xFE2
  1174                           fsr1l	equ	0xFE1
  1175                           
  1176                           	psect	cstackBANK1
  1177  0001CD                     __pcstackBANK1:
  1178                           	opt stack 0
  1179  0001CD                     ?_fputs:
  1180                           	opt stack 0
  1181  0001CD                     fputs@str:
  1182                           	opt stack 0
  1183  0001CD                     f_open@fn:
  1184                           	opt stack 0
  1185                           
  1186                           ; 12 bytes @ 0x0
  1187  0001CD                     	ds	2
  1188  0001CF                     fputs@fil:
  1189                           	opt stack 0
  1190                           
  1191                           ; 2 bytes @ 0x2
  1192  0001CF                     	ds	2
  1193  0001D1                     ?_fprintf:
  1194                           	opt stack 0
  1195  0001D1                     fprintf@fil:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x4
  1199  0001D1                     	ds	2
  1200  0001D3                     fprintf@str:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0x6
  1204  0001D3                     	ds	6
  1205  0001D9                     f_open@rs:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0xC
  1209  0001D9                     	ds	2
  1210  0001DB                     f_open@dw:
  1211                           	opt stack 0
  1212                           
  1213                           ; 4 bytes @ 0xE
  1214  0001DB                     	ds	2
  1215  0001DD                     ??_fprintf:
  1216                           
  1217                           ; 1 bytes @ 0x10
  1218  0001DD                     	ds	2
  1219  0001DF                     f_open@res:
  1220                           	opt stack 0
  1221                           
  1222                           ; 1 bytes @ 0x12
  1223  0001DF                     	ds	1
  1224  0001E0                     f_open@dir:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x13
  1228  0001E0                     	ds	2
  1229  0001E2                     f_open@dj:
  1230                           	opt stack 0
  1231                           
  1232                           ; 14 bytes @ 0x15
  1233  0001E2                     	ds	14
  1234  0001F0                     ??_escrita_sdcard:
  1235                           
  1236                           ; 1 bytes @ 0x23
  1237  0001F0                     	ds	2
  1238                           tblptru	equ	0xFF8
  1239                           tblptrh	equ	0xFF7
  1240                           tblptrl	equ	0xFF6
  1241                           tablat	equ	0xFF5
  1242                           postinc0	equ	0xFEE
  1243                           wreg	equ	0xFE8
  1244                           postdec1	equ	0xFE5
  1245                           fsr1h	equ	0xFE2
  1246                           fsr1l	equ	0xFE1
  1247                           
  1248                           	psect	cstackBANK0
  1249  000060                     __pcstackBANK0:
  1250                           	opt stack 0
  1251  000060                     ??_dummy_clocks:
  1252  000060                     ??_isdigit:
  1253  000060                     ?_fix:
  1254                           	opt stack 0
  1255  000060                     ?_strlen:
  1256                           	opt stack 0
  1257  000060                     ?_memcmp:
  1258                           	opt stack 0
  1259  000060                     ?___wmul:
  1260                           	opt stack 0
  1261  000060                     ?___ftpack:
  1262                           	opt stack 0
  1263  000060                     ?___lmul:
  1264                           	opt stack 0
  1265  000060                     ?___aldiv:
  1266                           	opt stack 0
  1267  000060                     ?___lldiv:
  1268                           	opt stack 0
  1269  000060                     ?___llmod:
  1270                           	opt stack 0
  1271  000060                     disk_ioctl@cmd:
  1272                           	opt stack 0
  1273  000060                     sdc_disk_status@stat:
  1274                           	opt stack 0
  1275  000060                     delay@contador_ext:
  1276                           	opt stack 0
  1277  000060                     response@buff:
  1278                           	opt stack 0
  1279  000060                     escreve_SPI@TempVar:
  1280                           	opt stack 0
  1281  000060                     verifica_plausibilidade_long@posicao:
  1282                           	opt stack 0
  1283  000060                     verifica_plausibilidade_lat@posicao:
  1284                           	opt stack 0
  1285  000060                     write_timer_zero@timer0:
  1286                           	opt stack 0
  1287  000060                     f_mount@fs:
  1288                           	opt stack 0
  1289  000060                     ___wmul@multiplier:
  1290                           	opt stack 0
  1291  000060                     memcmp@s1:
  1292                           	opt stack 0
  1293  000060                     memcpy@d1:
  1294                           	opt stack 0
  1295  000060                     memset@p1:
  1296                           	opt stack 0
  1297  000060                     strcat@to:
  1298                           	opt stack 0
  1299  000060                     strcpy@to:
  1300                           	opt stack 0
  1301  000060                     strlen@s:
  1302                           	opt stack 0
  1303  000060                     ___ftpack@arg:
  1304                           	opt stack 0
  1305  000060                     wait_ready@timeout:
  1306                           	opt stack 0
  1307  000060                     ___lmul@multiplier:
  1308                           	opt stack 0
  1309  000060                     ___aldiv@dividend:
  1310                           	opt stack 0
  1311  000060                     ___lldiv@dividend:
  1312                           	opt stack 0
  1313  000060                     ___llmod@dividend:
  1314                           	opt stack 0
  1315                           
  1316                           ; 4 bytes @ 0x0
  1317  000060                     	ds	1
  1318  000061                     sdc_disk_status@pdrv:
  1319                           	opt stack 0
  1320  000061                     delay@contador_int:
  1321                           	opt stack 0
  1322  000061                     escreve_SPI@dado:
  1323                           	opt stack 0
  1324  000061                     _isdigit$2961:
  1325                           	opt stack 0
  1326  000061                     disk_ioctl@buff:
  1327                           	opt stack 0
  1328                           
  1329                           ; 2 bytes @ 0x1
  1330  000061                     	ds	1
  1331  000062                     ??_strlen:
  1332  000062                     ??_disk_status:
  1333  000062                     escreve_cmd_lcd@comando:
  1334                           	opt stack 0
  1335  000062                     endereco_cursor_lcd@endereco:
  1336                           	opt stack 0
  1337  000062                     escreve_caractere_lcd@data:
  1338                           	opt stack 0
  1339  000062                     dummy_clocks@n:
  1340                           	opt stack 0
  1341  000062                     f_mount@drv:
  1342                           	opt stack 0
  1343  000062                     isdigit@c:
  1344                           	opt stack 0
  1345  000062                     ___wmul@multiplicand:
  1346                           	opt stack 0
  1347  000062                     memcmp@s2:
  1348                           	opt stack 0
  1349  000062                     memcpy@s1:
  1350                           	opt stack 0
  1351  000062                     memset@c:
  1352                           	opt stack 0
  1353  000062                     strcat@from:
  1354                           	opt stack 0
  1355  000062                     strcpy@from:
  1356                           	opt stack 0
  1357                           
  1358                           ; 2 bytes @ 0x2
  1359  000062                     	ds	1
  1360  000063                     ??_init_lcd:
  1361  000063                     disk_ioctl@pdrv:
  1362                           	opt stack 0
  1363  000063                     posicao_cursor_lcd@coluna:
  1364                           	opt stack 0
  1365  000063                     ___ftpack@exp:
  1366                           	opt stack 0
  1367  000063                     disk_status@result:
  1368                           	opt stack 0
  1369  000063                     escreve_frase_ram_lcd@buffer:
  1370                           	opt stack 0
  1371  000063                     dummy_clocks@i:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x3
  1375  000063                     	ds	1
  1376  000064                     disk_ioctl@res:
  1377                           	opt stack 0
  1378  000064                     posicao_cursor_lcd@linha:
  1379                           	opt stack 0
  1380  000064                     wait_ready@res:
  1381                           	opt stack 0
  1382  000064                     ___ftpack@sign:
  1383                           	opt stack 0
  1384  000064                     ___wmul@product:
  1385                           	opt stack 0
  1386  000064                     memcmp@n:
  1387                           	opt stack 0
  1388  000064                     memcpy@n:
  1389                           	opt stack 0
  1390  000064                     memset@n:
  1391                           	opt stack 0
  1392  000064                     strcat@cp:
  1393                           	opt stack 0
  1394  000064                     strcpy@cp:
  1395                           	opt stack 0
  1396  000064                     strlen@cp:
  1397                           	opt stack 0
  1398  000064                     ___lmul@multiplicand:
  1399                           	opt stack 0
  1400  000064                     ___aldiv@divisor:
  1401                           	opt stack 0
  1402  000064                     ___lldiv@divisor:
  1403                           	opt stack 0
  1404  000064                     ___llmod@divisor:
  1405                           	opt stack 0
  1406                           
  1407                           ; 4 bytes @ 0x4
  1408  000064                     	ds	1
  1409  000065                     ??___ftpack:
  1410  000065                     disk_status@pdrv:
  1411                           	opt stack 0
  1412  000065                     posicao_cursor_lcd@endereco:
  1413                           	opt stack 0
  1414  000065                     command@arg:
  1415                           	opt stack 0
  1416                           
  1417                           ; 4 bytes @ 0x5
  1418  000065                     	ds	1
  1419  000066                     ??_memcmp:
  1420  000066                     ??_mensagem_inicial:
  1421  000066                     ?_atoi:
  1422                           	opt stack 0
  1423  000066                     ?_GPSSecond:
  1424                           	opt stack 0
  1425  000066                     ?_GPSMinute:
  1426                           	opt stack 0
  1427  000066                     ?_GPSHour:
  1428                           	opt stack 0
  1429  000066                     ?_GPSDay:
  1430                           	opt stack 0
  1431  000066                     ?_GPSMonth:
  1432                           	opt stack 0
  1433  000066                     ?_GPSyear:
  1434                           	opt stack 0
  1435  000066                     disk_status@stat:
  1436                           	opt stack 0
  1437  000066                     memcpy@tmp:
  1438                           	opt stack 0
  1439  000066                     monta_sd@dado:
  1440                           	opt stack 0
  1441  000066                     atoi@s:
  1442                           	opt stack 0
  1443  000066                     memset@p:
  1444                           	opt stack 0
  1445                           
  1446                           ; 2 bytes @ 0x6
  1447  000066                     	ds	1
  1448  000067                     validate@fs:
  1449                           	opt stack 0
  1450  000067                     memcpy@d:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x7
  1454  000067                     	ds	1
  1455  000068                     ??_atoi:
  1456  000068                     ??_GPSSecond:
  1457  000068                     ??_GPSMinute:
  1458  000068                     ??_GPSHour:
  1459  000068                     ??_GPSDay:
  1460  000068                     ??_GPSMonth:
  1461  000068                     ??_GPSyear:
  1462  000068                     monta_sd@size:
  1463                           	opt stack 0
  1464  000068                     ___aldiv@counter:
  1465                           	opt stack 0
  1466  000068                     ___llmod@counter:
  1467                           	opt stack 0
  1468  000068                     make_dirfile@path:
  1469                           	opt stack 0
  1470  000068                     ___lmul@product:
  1471                           	opt stack 0
  1472  000068                     ___lldiv@quotient:
  1473                           	opt stack 0
  1474  000068                     mensagem_inicial@msg_linha_um:
  1475                           	opt stack 0
  1476                           
  1477                           ; 17 bytes @ 0x8
  1478  000068                     	ds	1
  1479  000069                     command@CRC:
  1480                           	opt stack 0
  1481  000069                     monta_sd@index:
  1482                           	opt stack 0
  1483  000069                     ___aldiv@sign:
  1484                           	opt stack 0
  1485  000069                     validate@id:
  1486                           	opt stack 0
  1487  000069                     memcpy@s:
  1488                           	opt stack 0
  1489                           
  1490                           ; 2 bytes @ 0x9
  1491  000069                     	ds	1
  1492  00006A                     ?_get_fattime:
  1493                           	opt stack 0
  1494  00006A                     command@CMD:
  1495                           	opt stack 0
  1496  00006A                     monta_sd@i:
  1497                           	opt stack 0
  1498  00006A                     atoi@sign:
  1499                           	opt stack 0
  1500  00006A                     make_dirfile@dirname:
  1501                           	opt stack 0
  1502  00006A                     ___aldiv@quotient:
  1503                           	opt stack 0
  1504                           
  1505                           ; 4 bytes @ 0xA
  1506  00006A                     	ds	1
  1507  00006B                     ??_validate:
  1508  00006B                     command@argument:
  1509                           	opt stack 0
  1510  00006B                     atoi@a:
  1511                           	opt stack 0
  1512                           
  1513                           ; 2 bytes @ 0xB
  1514  00006B                     	ds	1
  1515  00006C                     ??_make_dirfile:
  1516  00006C                     ?_atol:
  1517                           	opt stack 0
  1518  00006C                     ?_clust2sect:
  1519                           	opt stack 0
  1520  00006C                     ___lldiv@counter:
  1521                           	opt stack 0
  1522  00006C                     sdc_reset@i:
  1523                           	opt stack 0
  1524  00006C                     sdc_disk_read@p_buff:
  1525                           	opt stack 0
  1526  00006C                     sdc_disk_write@p_buff:
  1527                           	opt stack 0
  1528  00006C                     clust2sect@clust:
  1529                           	opt stack 0
  1530  00006C                     atol@s:
  1531                           	opt stack 0
  1532                           
  1533                           ; 2 bytes @ 0xC
  1534  00006C                     	ds	1
  1535  00006D                     ?___awtoft:
  1536                           	opt stack 0
  1537  00006D                     ___awtoft@c:
  1538                           	opt stack 0
  1539  00006D                     ultoa@buf:
  1540                           	opt stack 0
  1541                           
  1542                           ; 2 bytes @ 0xD
  1543  00006D                     	ds	1
  1544  00006E                     ??_get_fattime:
  1545  00006E                     sdc_reset@count_nosd:
  1546                           	opt stack 0
  1547  00006E                     _make_dirfile$1682:
  1548                           	opt stack 0
  1549  00006E                     sdc_disk_read@sector:
  1550                           	opt stack 0
  1551  00006E                     sdc_disk_write@sector:
  1552                           	opt stack 0
  1553  00006E                     configura_baudrate_uart@baudrate:
  1554                           	opt stack 0
  1555                           
  1556                           ; 4 bytes @ 0xE
  1557  00006E                     	ds	1
  1558  00006F                     ultoa@val:
  1559                           	opt stack 0
  1560                           
  1561                           ; 4 bytes @ 0xF
  1562  00006F                     	ds	1
  1563  000070                     ??_atol:
  1564  000070                     ??_clust2sect:
  1565  000070                     make_dirfile@b:
  1566                           	opt stack 0
  1567  000070                     ___awtoft@sign:
  1568                           	opt stack 0
  1569  000070                     sdc_reset@count:
  1570                           	opt stack 0
  1571                           
  1572                           ; 2 bytes @ 0x10
  1573  000070                     	ds	1
  1574  000071                     ?___ftmul:
  1575                           	opt stack 0
  1576  000071                     make_dirfile@t:
  1577                           	opt stack 0
  1578  000071                     ___ftmul@f1:
  1579                           	opt stack 0
  1580                           
  1581                           ; 3 bytes @ 0x11
  1582  000071                     	ds	1
  1583  000072                     ??_configura_baudrate_uart:
  1584  000072                     sdc_reset@buff:
  1585                           	opt stack 0
  1586  000072                     sdc_disk_read@count:
  1587                           	opt stack 0
  1588  000072                     sdc_disk_write@count:
  1589                           	opt stack 0
  1590  000072                     make_dirfile@a:
  1591                           	opt stack 0
  1592                           
  1593                           ; 1 bytes @ 0x12
  1594  000072                     	ds	1
  1595  000073                     ??_sdc_disk_initialize:
  1596  000073                     ??_sdc_disk_read:
  1597  000073                     ??_sdc_disk_write:
  1598  000073                     make_dirfile@n:
  1599                           	opt stack 0
  1600  000073                     ultoa@base:
  1601                           	opt stack 0
  1602                           
  1603                           ; 2 bytes @ 0x13
  1604  000073                     	ds	1
  1605  000074                     make_dirfile@c:
  1606                           	opt stack 0
  1607  000074                     atol@sign:
  1608                           	opt stack 0
  1609  000074                     sdc_disk_initialize@i:
  1610                           	opt stack 0
  1611  000074                     ___ftmul@f2:
  1612                           	opt stack 0
  1613                           
  1614                           ; 3 bytes @ 0x14
  1615  000074                     	ds	1
  1616  000075                     clust2sect@fs:
  1617                           	opt stack 0
  1618  000075                     atol@a:
  1619                           	opt stack 0
  1620  000075                     ultoa@v:
  1621                           	opt stack 0
  1622                           
  1623                           ; 4 bytes @ 0x15
  1624  000075                     	ds	1
  1625  000076                     sdc_disk_initialize@stat:
  1626                           	opt stack 0
  1627                           
  1628                           ; 1 bytes @ 0x16
  1629  000076                     	ds	1
  1630  000077                     ??___ftmul:
  1631  000077                     sdc_disk_read@ptr:
  1632                           	opt stack 0
  1633  000077                     sdc_disk_initialize@count1:
  1634                           	opt stack 0
  1635  000077                     sdc_disk_write@i:
  1636                           	opt stack 0
  1637                           
  1638                           ; 2 bytes @ 0x17
  1639  000077                     	ds	1
  1640  000078                     sdc_disk_read@start_add:
  1641                           	opt stack 0
  1642                           
  1643                           ; 4 bytes @ 0x18
  1644  000078                     	ds	1
  1645  000079                     atol@c:
  1646                           	opt stack 0
  1647  000079                     ultoa@c:
  1648                           	opt stack 0
  1649  000079                     sdc_disk_initialize@crc_number:
  1650                           	opt stack 0
  1651  000079                     sdc_disk_write@count1:
  1652                           	opt stack 0
  1653  000079                     mensagem_inicial@msg_dois:
  1654                           	opt stack 0
  1655                           
  1656                           ; 17 bytes @ 0x19
  1657  000079                     	ds	1
  1658  00007A                     ?_convert_to_int_point_lat:
  1659                           	opt stack 0
  1660  00007A                     ?_convert_to_int:
  1661                           	opt stack 0
  1662  00007A                     ?_convert_to_int_point_long:
  1663                           	opt stack 0
  1664  00007A                     ___ftmul@exp:
  1665                           	opt stack 0
  1666  00007A                     configura_baudrate_uart@x:
  1667                           	opt stack 0
  1668  00007A                     convert_to_int@p_buff:
  1669                           	opt stack 0
  1670  00007A                     ltoa@buf:
  1671                           	opt stack 0
  1672                           
  1673                           ; 2 bytes @ 0x1A
  1674  00007A                     	ds	1
  1675  00007B                     sdc_disk_initialize@buff_i:
  1676                           	opt stack 0
  1677  00007B                     sdc_disk_write@res:
  1678                           	opt stack 0
  1679  00007B                     ___ftmul@f3_as_product:
  1680                           	opt stack 0
  1681                           
  1682                           ; 3 bytes @ 0x1B
  1683  00007B                     	ds	1
  1684  00007C                     sdc_disk_initialize@ocr:
  1685                           	opt stack 0
  1686  00007C                     sdc_disk_read@length:
  1687                           	opt stack 0
  1688  00007C                     sdc_disk_write@j:
  1689                           	opt stack 0
  1690  00007C                     ltoa@val:
  1691                           	opt stack 0
  1692                           
  1693                           ; 4 bytes @ 0x1C
  1694  00007C                     	ds	1
  1695  00007D                     sdc_disk_initialize@count2:
  1696                           	opt stack 0
  1697                           
  1698                           ; 2 bytes @ 0x1D
  1699  00007D                     	ds	1
  1700  00007E                     sdc_disk_read@buff:
  1701                           	opt stack 0
  1702  00007E                     sdc_disk_write@buff:
  1703                           	opt stack 0
  1704  00007E                     ___ftmul@cntr:
  1705                           	opt stack 0
  1706  00007E                     convert_to_int_point_lat@convert_str_lat:
  1707                           	opt stack 0
  1708  00007E                     convert_to_int_point_long@convert_str_long:
  1709                           	opt stack 0
  1710                           
  1711                           ; 10 bytes @ 0x1E
  1712  00007E                     	ds	1
  1713  00007F                     sdc_disk_initialize@buff:
  1714                           	opt stack 0
  1715  00007F                     ___ftmul@sign:
  1716                           	opt stack 0
  1717  00007F                     disk_read@buff:
  1718                           	opt stack 0
  1719  00007F                     disk_write@buff:
  1720                           	opt stack 0
  1721                           
  1722                           ; 2 bytes @ 0x1F
  1723  00007F                     	ds	1
  1724  000080                     ?___fttol:
  1725                           	opt stack 0
  1726  000080                     disk_initialize@pdrv:
  1727                           	opt stack 0
  1728  000080                     ltoa@base:
  1729                           	opt stack 0
  1730  000080                     ___fttol@f1:
  1731                           	opt stack 0
  1732                           
  1733                           ; 3 bytes @ 0x20
  1734  000080                     	ds	1
  1735  000081                     disk_initialize@stat:
  1736                           	opt stack 0
  1737  000081                     disk_read@sector:
  1738                           	opt stack 0
  1739  000081                     disk_write@sector:
  1740                           	opt stack 0
  1741                           
  1742                           ; 4 bytes @ 0x21
  1743  000081                     	ds	1
  1744  000082                     ltoa@cp:
  1745                           	opt stack 0
  1746                           
  1747                           ; 2 bytes @ 0x22
  1748  000082                     	ds	2
  1749  000084                     ??___fttol:
  1750  000084                     escreve_inteiro_lcd@valor:
  1751                           	opt stack 0
  1752                           
  1753                           ; 4 bytes @ 0x24
  1754  000084                     	ds	1
  1755  000085                     disk_read@count:
  1756                           	opt stack 0
  1757  000085                     disk_write@count:
  1758                           	opt stack 0
  1759                           
  1760                           ; 1 bytes @ 0x25
  1761  000085                     	ds	1
  1762  000086                     ??_disk_read:
  1763  000086                     ??_disk_write:
  1764                           
  1765                           ; 1 bytes @ 0x26
  1766  000086                     	ds	1
  1767  000087                     disk_read@pdrv:
  1768                           	opt stack 0
  1769  000087                     disk_write@pdrv:
  1770                           	opt stack 0
  1771  000087                     convert_to_int_point_lat@temp_str_lat:
  1772                           	opt stack 0
  1773                           
  1774                           ; 2 bytes @ 0x27
  1775  000087                     	ds	1
  1776  000088                     convert_to_int_point_long@j:
  1777                           	opt stack 0
  1778  000088                     disk_read@result:
  1779                           	opt stack 0
  1780  000088                     disk_write@result:
  1781                           	opt stack 0
  1782  000088                     escreve_inteiro_lcd@texto:
  1783                           	opt stack 0
  1784                           
  1785                           ; 7 bytes @ 0x28
  1786  000088                     	ds	1
  1787  000089                     convert_to_int_point_lat@j:
  1788                           	opt stack 0
  1789  000089                     convert_to_int_point_long@i:
  1790                           	opt stack 0
  1791  000089                     ___fttol@sign1:
  1792                           	opt stack 0
  1793                           
  1794                           ; 1 bytes @ 0x29
  1795  000089                     	ds	1
  1796  00008A                     disk_read@res:
  1797                           	opt stack 0
  1798  00008A                     disk_write@res:
  1799                           	opt stack 0
  1800  00008A                     convert_to_int_point_lat@i:
  1801                           	opt stack 0
  1802  00008A                     ___fttol@lval:
  1803                           	opt stack 0
  1804                           
  1805                           ; 4 bytes @ 0x2A
  1806  00008A                     	ds	1
  1807  00008B                     ??_diferenca:
  1808  00008B                     move_window@sector:
  1809                           	opt stack 0
  1810  00008B                     check_fs@sect:
  1811                           	opt stack 0
  1812                           
  1813                           ; 4 bytes @ 0x2B
  1814  00008B                     	ds	3
  1815  00008E                     ___fttol@exp1:
  1816                           	opt stack 0
  1817                           
  1818                           ; 1 bytes @ 0x2E
  1819  00008E                     	ds	1
  1820  00008F                     ??_troca_de_tela:
  1821  00008F                     ??_move_window:
  1822  00008F                     diferenca@index:
  1823                           	opt stack 0
  1824                           
  1825                           ; 1 bytes @ 0x2F
  1826  00008F                     	ds	1
  1827  000090                     diferenca@valor_lat:
  1828                           	opt stack 0
  1829                           
  1830                           ; 4 bytes @ 0x30
  1831  000090                     	ds	1
  1832  000091                     check_fs@fs:
  1833                           	opt stack 0
  1834                           
  1835                           ; 2 bytes @ 0x31
  1836  000091                     	ds	2
  1837  000093                     auto_mount@path:
  1838                           	opt stack 0
  1839                           
  1840                           ; 2 bytes @ 0x33
  1841  000093                     	ds	1
  1842  000094                     diferenca@valor_long:
  1843                           	opt stack 0
  1844  000094                     get_fattime@f_time:
  1845                           	opt stack 0
  1846                           
  1847                           ; 10 bytes @ 0x34
  1848  000094                     	ds	1
  1849  000095                     auto_mount@chk_wp:
  1850                           	opt stack 0
  1851                           
  1852                           ; 1 bytes @ 0x35
  1853  000095                     	ds	1
  1854  000096                     ??_auto_mount:
  1855                           
  1856                           ; 1 bytes @ 0x36
  1857  000096                     	ds	2
  1858  000098                     armazena_ltlo@buffer:
  1859                           	opt stack 0
  1860                           
  1861                           ; 2 bytes @ 0x38
  1862  000098                     	ds	1
  1863  000099                     move_window@n:
  1864                           	opt stack 0
  1865                           
  1866                           ; 1 bytes @ 0x39
  1867  000099                     	ds	1
  1868  00009A                     armazena_ltlo@index:
  1869                           	opt stack 0
  1870  00009A                     move_window@wsect:
  1871                           	opt stack 0
  1872                           
  1873                           ; 4 bytes @ 0x3A
  1874  00009A                     	ds	1
  1875  00009B                     armazena_ltlo@j:
  1876                           	opt stack 0
  1877                           
  1878                           ; 1 bytes @ 0x3B
  1879  00009B                     	ds	1
  1880  00009C                     armazena_ltlo@i:
  1881                           	opt stack 0
  1882                           
  1883                           ; 1 bytes @ 0x3C
  1884  00009C                     	ds	1
  1885  00009D                     
  1886                           ; 1 bytes @ 0x3D
  1887  00009D                     	ds	1
  1888  00009E                     move_window@fs:
  1889                           	opt stack 0
  1890  00009E                     latitude_to_convert@latitude:
  1891                           	opt stack 0
  1892  00009E                     longitude_to_convert@longitude:
  1893                           	opt stack 0
  1894                           
  1895                           ; 11 bytes @ 0x3E
  1896  00009E                     	ds	2
  1897  0000A0                     ?_get_cluster:
  1898                           	opt stack 0
  1899  0000A0                     sync@fs:
  1900                           	opt stack 0
  1901  0000A0                     get_cluster@clust:
  1902                           	opt stack 0
  1903  0000A0                     put_cluster@clust:
  1904                           	opt stack 0
  1905                           
  1906                           ; 2 bytes @ 0x40
  1907  0000A0                     	ds	2
  1908  0000A2                     ??_get_cluster:
  1909  0000A2                     put_cluster@val:
  1910                           	opt stack 0
  1911  0000A2                     f_sync@fp:
  1912                           	opt stack 0
  1913                           
  1914                           ; 2 bytes @ 0x42
  1915  0000A2                     	ds	2
  1916  0000A4                     ??_put_cluster:
  1917  0000A4                     f_sync@tim:
  1918                           	opt stack 0
  1919                           
  1920                           ; 4 bytes @ 0x44
  1921  0000A4                     	ds	1
  1922  0000A5                     auto_mount@maxclust:
  1923                           	opt stack 0
  1924                           
  1925                           ; 4 bytes @ 0x45
  1926  0000A5                     	ds	2
  1927  0000A7                     latitude_to_convert@index:
  1928                           	opt stack 0
  1929                           
  1930                           ; 1 bytes @ 0x47
  1931  0000A7                     	ds	1
  1932  0000A8                     latitude_to_convert@j:
  1933                           	opt stack 0
  1934  0000A8                     f_sync@res:
  1935                           	opt stack 0
  1936  0000A8                     _put_cluster$1572:
  1937                           	opt stack 0
  1938                           
  1939                           ; 2 bytes @ 0x48
  1940  0000A8                     	ds	1
  1941  0000A9                     latitude_to_convert@i:
  1942                           	opt stack 0
  1943  0000A9                     longitude_to_convert@index:
  1944                           	opt stack 0
  1945  0000A9                     get_cluster@wc:
  1946                           	opt stack 0
  1947  0000A9                     f_sync@dir:
  1948                           	opt stack 0
  1949  0000A9                     auto_mount@bootsect:
  1950                           	opt stack 0
  1951                           
  1952                           ; 4 bytes @ 0x49
  1953  0000A9                     	ds	1
  1954  0000AA                     longitude_to_convert@j:
  1955                           	opt stack 0
  1956  0000AA                     _put_cluster$1573:
  1957                           	opt stack 0
  1958                           
  1959                           ; 2 bytes @ 0x4A
  1960  0000AA                     	ds	1
  1961  0000AB                     longitude_to_convert@i:
  1962                           	opt stack 0
  1963  0000AB                     f_close@fp:
  1964                           	opt stack 0
  1965  0000AB                     get_cluster@fatsect:
  1966                           	opt stack 0
  1967                           
  1968                           ; 4 bytes @ 0x4B
  1969  0000AB                     	ds	1
  1970  0000AC                     ??_verifica_fence:
  1971  0000AC                     put_cluster@fatsect:
  1972                           	opt stack 0
  1973                           
  1974                           ; 4 bytes @ 0x4C
  1975  0000AC                     	ds	1
  1976  0000AD                     f_close@res:
  1977                           	opt stack 0
  1978  0000AD                     verifica_fence@timeout:
  1979                           	opt stack 0
  1980  0000AD                     auto_mount@totalsect:
  1981                           	opt stack 0
  1982                           
  1983                           ; 4 bytes @ 0x4D
  1984  0000AD                     	ds	1
  1985  0000AE                     ??_verifica_dados_operacionais:
  1986                           
  1987                           ; 1 bytes @ 0x4E
  1988  0000AE                     	ds	1
  1989  0000AF                     get_cluster@bc:
  1990                           	opt stack 0
  1991                           
  1992                           ; 2 bytes @ 0x4F
  1993  0000AF                     	ds	1
  1994  0000B0                     put_cluster@bc:
  1995                           	opt stack 0
  1996                           
  1997                           ; 2 bytes @ 0x50
  1998  0000B0                     	ds	1
  1999  0000B1                     get_cluster@fs:
  2000                           	opt stack 0
  2001  0000B1                     auto_mount@p:
  2002                           	opt stack 0
  2003                           
  2004                           ; 2 bytes @ 0x51
  2005  0000B1                     	ds	1
  2006  0000B2                     verifica_dados_operacionais@flag_gps:
  2007                           	opt stack 0
  2008  0000B2                     put_cluster@p:
  2009                           	opt stack 0
  2010                           
  2011                           ; 2 bytes @ 0x52
  2012  0000B2                     	ds	1
  2013  0000B3                     auto_mount@fmt:
  2014                           	opt stack 0
  2015  0000B3                     verifica_dados_operacionais@vel:
  2016                           	opt stack 0
  2017  0000B3                     next_dir_entry@dj:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x53
  2021  0000B3                     	ds	1
  2022  0000B4                     auto_mount@stat:
  2023                           	opt stack 0
  2024  0000B4                     put_cluster@fs:
  2025                           	opt stack 0
  2026  0000B4                     verifica_dados_operacionais@velocidade_atual:
  2027                           	opt stack 0
  2028                           
  2029                           ; 2 bytes @ 0x54
  2030  0000B4                     	ds	1
  2031  0000B5                     ??_next_dir_entry:
  2032  0000B5                     auto_mount@fatsize:
  2033                           	opt stack 0
  2034                           
  2035                           ; 4 bytes @ 0x55
  2036  0000B5                     	ds	1
  2037  0000B6                     ?_create_chain:
  2038                           	opt stack 0
  2039  0000B6                     remove_chain@clust:
  2040                           	opt stack 0
  2041  0000B6                     create_chain@clust:
  2042                           	opt stack 0
  2043                           
  2044                           ; 2 bytes @ 0x56
  2045  0000B6                     	ds	2
  2046  0000B8                     
  2047                           ; 1 bytes @ 0x58
  2048  0000B8                     	ds	1
  2049  0000B9                     auto_mount@fs:
  2050                           	opt stack 0
  2051                           
  2052                           ; 2 bytes @ 0x59
  2053  0000B9                     	ds	1
  2054  0000BA                     remove_chain@nxt:
  2055                           	opt stack 0
  2056  0000BA                     create_chain@mcl:
  2057                           	opt stack 0
  2058                           
  2059                           ; 2 bytes @ 0x5A
  2060  0000BA                     	ds	2
  2061  0000BC                     remove_chain@fs:
  2062                           	opt stack 0
  2063  0000BC                     create_chain@fs:
  2064                           	opt stack 0
  2065  0000BC                     next_dir_entry@clust:
  2066                           	opt stack 0
  2067                           
  2068                           ; 2 bytes @ 0x5C
  2069  0000BC                     	ds	2
  2070  0000BE                     create_chain@cstat:
  2071                           	opt stack 0
  2072  0000BE                     next_dir_entry@idx:
  2073                           	opt stack 0
  2074                           
  2075                           ; 2 bytes @ 0x5E
  2076  0000BE                     	ds	2
  2077  0000C0                     create_chain@scl:
  2078                           	opt stack 0
  2079  0000C0                     trace_path@dj:
  2080                           	opt stack 0
  2081                           
  2082                           ; 2 bytes @ 0x60
  2083  0000C0                     	ds	2
  2084  0000C2                     create_chain@ncl:
  2085                           	opt stack 0
  2086  0000C2                     trace_path@fn:
  2087                           	opt stack 0
  2088                           
  2089                           ; 2 bytes @ 0x62
  2090  0000C2                     	ds	2
  2091  0000C4                     trace_path@path:
  2092                           	opt stack 0
  2093  0000C4                     reserve_direntry@dj:
  2094                           	opt stack 0
  2095  0000C4                     f_write@fp:
  2096                           	opt stack 0
  2097  0000C4                     f_lseek@fp:
  2098                           	opt stack 0
  2099                           
  2100                           ; 2 bytes @ 0x64
  2101  0000C4                     	ds	2
  2102  0000C6                     trace_path@dir:
  2103                           	opt stack 0
  2104  0000C6                     reserve_direntry@dir:
  2105                           	opt stack 0
  2106  0000C6                     f_write@buff:
  2107                           	opt stack 0
  2108  0000C6                     f_lseek@ofs:
  2109                           	opt stack 0
  2110                           
  2111                           ; 4 bytes @ 0x66
  2112  0000C6                     	ds	2
  2113  0000C8                     ??_trace_path:
  2114  0000C8                     ??_reserve_direntry:
  2115  0000C8                     f_write@btw:
  2116                           	opt stack 0
  2117                           
  2118                           ; 2 bytes @ 0x68
  2119  0000C8                     	ds	2
  2120  0000CA                     ??_f_lseek:
  2121  0000CA                     f_write@bw:
  2122                           	opt stack 0
  2123  0000CA                     reserve_direntry@sector:
  2124                           	opt stack 0
  2125                           
  2126                           ; 4 bytes @ 0x6A
  2127  0000CA                     	ds	2
  2128  0000CC                     ??_f_write:
  2129  0000CC                     _trace_path$1729:
  2130                           	opt stack 0
  2131                           
  2132                           ; 2 bytes @ 0x6C
  2133  0000CC                     	ds	2
  2134  0000CE                     reserve_direntry@n:
  2135                           	opt stack 0
  2136  0000CE                     _trace_path$1731:
  2137                           	opt stack 0
  2138                           
  2139                           ; 2 bytes @ 0x6E
  2140  0000CE                     	ds	1
  2141  0000CF                     reserve_direntry@dptr:
  2142                           	opt stack 0
  2143                           
  2144                           ; 2 bytes @ 0x6F
  2145  0000CF                     	ds	1
  2146  0000D0                     trace_path@fs:
  2147                           	opt stack 0
  2148                           
  2149                           ; 2 bytes @ 0x70
  2150  0000D0                     	ds	1
  2151  0000D1                     reserve_direntry@c:
  2152                           	opt stack 0
  2153                           
  2154                           ; 1 bytes @ 0x71
  2155  0000D1                     	ds	1
  2156  0000D2                     trace_path@clust:
  2157                           	opt stack 0
  2158  0000D2                     reserve_direntry@clust:
  2159                           	opt stack 0
  2160                           
  2161                           ; 2 bytes @ 0x72
  2162  0000D2                     	ds	2
  2163  0000D4                     trace_path@ds:
  2164                           	opt stack 0
  2165  0000D4                     reserve_direntry@fs:
  2166                           	opt stack 0
  2167                           
  2168                           ; 2 bytes @ 0x74
  2169  0000D4                     	ds	1
  2170  0000D5                     trace_path@dptr:
  2171                           	opt stack 0
  2172                           
  2173                           ; 2 bytes @ 0x75
  2174  0000D5                     	ds	1
  2175  0000D6                     f_lseek@res:
  2176                           	opt stack 0
  2177                           
  2178                           ; 1 bytes @ 0x76
  2179  0000D6                     	ds	1
  2180  0000D7                     f_open@fp:
  2181                           	opt stack 0
  2182  0000D7                     f_lseek@ifptr:
  2183                           	opt stack 0
  2184                           
  2185                           ; 4 bytes @ 0x77
  2186  0000D7                     	ds	1
  2187  0000D8                     f_write@res:
  2188                           	opt stack 0
  2189                           
  2190                           ; 1 bytes @ 0x78
  2191  0000D8                     	ds	1
  2192  0000D9                     f_open@path:
  2193                           	opt stack 0
  2194  0000D9                     f_write@wbuff:
  2195                           	opt stack 0
  2196                           
  2197                           ; 2 bytes @ 0x79
  2198  0000D9                     	ds	2
  2199  0000DB                     f_open@mode:
  2200                           	opt stack 0
  2201  0000DB                     f_write@sect:
  2202                           	opt stack 0
  2203  0000DB                     f_lseek@csize:
  2204                           	opt stack 0
  2205                           
  2206                           ; 4 bytes @ 0x7B
  2207  0000DB                     	ds	1
  2208  0000DC                     ??_f_open:
  2209                           
  2210                           ; 1 bytes @ 0x7C
  2211  0000DC                     	ds	3
  2212  0000DF                     f_write@cc:
  2213                           	opt stack 0
  2214  0000DF                     f_lseek@clust:
  2215                           	opt stack 0
  2216                           
  2217                           ; 2 bytes @ 0x7F
  2218  0000DF                     	ds	2
  2219  0000E1                     f_write@clust:
  2220                           	opt stack 0
  2221                           
  2222                           ; 2 bytes @ 0x81
  2223  0000E1                     	ds	2
  2224  0000E3                     f_write@wcnt:
  2225                           	opt stack 0
  2226                           
  2227                           ; 2 bytes @ 0x83
  2228  0000E3                     	ds	2
  2229  0000E5                     ?_fputc:
  2230                           	opt stack 0
  2231  0000E5                     fputc@chr:
  2232                           	opt stack 0
  2233                           
  2234                           ; 2 bytes @ 0x85
  2235  0000E5                     	ds	2
  2236  0000E7                     fputc@fil:
  2237                           	opt stack 0
  2238                           
  2239                           ; 2 bytes @ 0x87
  2240  0000E7                     	ds	2
  2241  0000E9                     fputc@c:
  2242                           	opt stack 0
  2243                           
  2244                           ; 1 bytes @ 0x89
  2245  0000E9                     	ds	1
  2246  0000EA                     fputc@bw:
  2247                           	opt stack 0
  2248                           
  2249                           ; 2 bytes @ 0x8A
  2250  0000EA                     	ds	2
  2251  0000EC                     ??_fputs:
  2252                           
  2253                           ; 1 bytes @ 0x8C
  2254  0000EC                     	ds	1
  2255  0000ED                     fputs@n:
  2256                           	opt stack 0
  2257                           
  2258                           ; 2 bytes @ 0x8D
  2259  0000ED                     	ds	2
  2260  0000EF                     tblptru	equ	0xFF8
  2261                           tblptrh	equ	0xFF7
  2262                           tblptrl	equ	0xFF6
  2263                           tablat	equ	0xFF5
  2264                           postinc0	equ	0xFEE
  2265                           wreg	equ	0xFE8
  2266                           postdec1	equ	0xFE5
  2267                           fsr1h	equ	0xFE2
  2268                           fsr1l	equ	0xFE1
  2269                           
  2270                           ; 1 bytes @ 0x8F
  2271                           
  2272                           	psect	cstackCOMRAM
  2273  000001                     __pcstackCOMRAM:
  2274                           	opt stack 0
  2275  000001                     ?_strcmp:
  2276                           	opt stack 0
  2277  000001                     stringcpy@str1:
  2278                           	opt stack 0
  2279  000001                     strcmp@s1:
  2280                           	opt stack 0
  2281  000001                     i2write_timer_zero@timer0:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x0
  2285  000001                     	ds	2
  2286  000003                     stringcpy@str2:
  2287                           	opt stack 0
  2288  000003                     strcmp@s2:
  2289                           	opt stack 0
  2290                           
  2291                           ; 2 bytes @ 0x2
  2292  000003                     	ds	2
  2293  000005                     ??_strcmp:
  2294  000005                     stringcpy@dir:
  2295                           	opt stack 0
  2296                           
  2297                           ; 2 bytes @ 0x4
  2298  000005                     	ds	1
  2299  000006                     strcmp@r:
  2300                           	opt stack 0
  2301                           
  2302                           ; 1 bytes @ 0x5
  2303  000006                     	ds	1
  2304  000007                     stringcpy@size:
  2305                           	opt stack 0
  2306                           
  2307                           ; 1 bytes @ 0x6
  2308  000007                     	ds	1
  2309  000008                     ??_stringcpy:
  2310                           
  2311                           ; 1 bytes @ 0x7
  2312  000008                     	ds	2
  2313  00000A                     stringcpy@chr:
  2314                           	opt stack 0
  2315                           
  2316                           ; 1 bytes @ 0x9
  2317  00000A                     	ds	1
  2318  00000B                     GPSRead@buff:
  2319                           	opt stack 0
  2320                           
  2321                           ; 1 bytes @ 0xA
  2322  00000B                     	ds	1
  2323  00000C                     GPSRead@c:
  2324                           	opt stack 0
  2325                           
  2326                           ; 1 bytes @ 0xB
  2327  00000C                     	ds	1
  2328  00000D                     ??_isr:
  2329                           
  2330                           ; 1 bytes @ 0xC
  2331  00000D                     	ds	20
  2332  000021                     isr@cont:
  2333                           	opt stack 0
  2334                           
  2335                           ; 1 bytes @ 0x20
  2336  000021                     	ds	1
  2337                           tblptru	equ	0xFF8
  2338                           tblptrh	equ	0xFF7
  2339                           tblptrl	equ	0xFF6
  2340                           tablat	equ	0xFF5
  2341                           postinc0	equ	0xFEE
  2342                           wreg	equ	0xFE8
  2343                           postdec1	equ	0xFE5
  2344                           fsr1h	equ	0xFE2
  2345                           fsr1l	equ	0xFE1
  2346                           
  2347 ;;
  2348 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2349 ;;
  2350 ;; *************** function _main *****************
  2351 ;; Defined at:
  2352 ;;		line 218 in file "main.c"
  2353 ;; Parameters:    Size  Location     Type
  2354 ;;		None
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;		None
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  1    wreg      void 
  2359 ;; Registers used:
  2360 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2366 ;;      Params:         0       0       0       0       0       0       0       0       0
  2367 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2368 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2369 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2370 ;;Total ram usage:        0 bytes
  2371 ;; Hardware stack levels required when called:   19
  2372 ;; This function calls:
  2373 ;;		_escalonador
  2374 ;;		_inicializa_tarefas
  2375 ;;		_inicializa_uart
  2376 ;;		_init_hardware
  2377 ;;		_init_lcd
  2378 ;;		_mensagem_inicial
  2379 ;; This function is called by:
  2380 ;;		Startup code after reset
  2381 ;; This function uses a non-reentrant model
  2382 ;;
  2383                           
  2384                           	psect	text0
  2385  005D46                     __ptext0:
  2386                           	opt stack 0
  2387  005D46                     _main:
  2388                           	opt stack 12
  2389                           
  2390                           ;main.c: 220: init_hardware();
  2391                           
  2392                           ;incstack = 0
  2393  005D46  EC6F  F02F         	call	_init_hardware	;wreg free
  2394                           
  2395                           ;main.c: 221: T0CONbits.TMR0ON = 0;
  2396  005D4A  9ED5               	bcf	4053,7,c	;volatile
  2397                           
  2398                           ;main.c: 222: init_lcd();
  2399  005D4C  EC27  F026         	call	_init_lcd	;wreg free
  2400                           
  2401                           ;main.c: 223: mensagem_inicial();
  2402  005D50  EC37  F025         	call	_mensagem_inicial	;wreg free
  2403                           
  2404                           ;main.c: 224: inicializa_tarefas();
  2405  005D54  EC93  F02B         	call	_inicializa_tarefas	;wreg free
  2406                           
  2407                           ;main.c: 225: inicializa_uart();
  2408  005D58  EC07  F02F         	call	_inicializa_uart	;wreg free
  2409                           
  2410                           ;main.c: 227: T0CONbits.TMR0ON = 1;
  2411  005D5C  8ED5               	bsf	4053,7,c	;volatile
  2412  005D5E                     
  2413                           ;main.c: 229: {
  2414                           ;main.c: 231: if ((sinaliza_int_timer == 1) && (4))
  2415  005D5E  0100               	movlb	0	; () banked
  2416  005D60  05FF               	decf	_sinaliza_int_timer& (0+255),w,b
  2417  005D62  A4D8               	btfss	status,2,c
  2418  005D64  D7FC               	goto	l1453
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;main.c: 232: {
  2422                           ;main.c: 233: sinaliza_int_timer = 0;
  2423  005D66  0E00               	movlw	0
  2424  005D68  6FFF               	movwf	_sinaliza_int_timer& (0+255),b
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;main.c: 234: escalonador();
  2428  005D6A  ECE9  F023         	call	_escalonador	;wreg free
  2429  005D6E  D7F7               	goto	l1453
  2430  005D70                     __end_of_main:
  2431                           	opt stack 0
  2432                           tblptru	equ	0xFF8
  2433                           tblptrh	equ	0xFF7
  2434                           tblptrl	equ	0xFF6
  2435                           tablat	equ	0xFF5
  2436                           postinc0	equ	0xFEE
  2437                           wreg	equ	0xFE8
  2438                           postdec1	equ	0xFE5
  2439                           fsr1h	equ	0xFE2
  2440                           fsr1l	equ	0xFE1
  2441                           status	equ	0xFD8
  2442                           
  2443 ;; *************** function _mensagem_inicial *****************
  2444 ;; Defined at:
  2445 ;;		line 244 in file "main.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;		None
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;  msg_dois       17   25[BANK0 ] const unsigned char [17]
  2450 ;;  msg_linha_um   17    8[BANK0 ] const unsigned char [17]
  2451 ;; Return value:  Size  Location     Type
  2452 ;;                  1    wreg      void 
  2453 ;; Registers used:
  2454 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2455 ;; Tracked objects:
  2456 ;;		On entry : 0/0
  2457 ;;		On exit  : 0/0
  2458 ;;		Unchanged: 0/0
  2459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2460 ;;      Params:         0       0       0       0       0       0       0       0       0
  2461 ;;      Locals:         0      34       0       0       0       0       0       0       0
  2462 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2463 ;;      Totals:         0      36       0       0       0       0       0       0       0
  2464 ;;Total ram usage:       36 bytes
  2465 ;; Hardware stack levels used:    1
  2466 ;; Hardware stack levels required when called:    6
  2467 ;; This function calls:
  2468 ;;		_escreve_cmd_lcd
  2469 ;;		_escreve_frase_ram_lcd
  2470 ;;		_posicao_cursor_lcd
  2471 ;; This function is called by:
  2472 ;;		_main
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476                           	psect	text1
  2477  004A6E                     __ptext1:
  2478                           	opt stack 0
  2479  004A6E                     _mensagem_inicial:
  2480                           	opt stack 24
  2481                           
  2482                           ;main.c: 246: const unsigned char msg_linha_um[17] = "FATEC ST ANDRE";
  2483                           
  2484                           ;incstack = 0
  2485  004A6E  0EEA               	movlw	low mensagem_inicial@F4428
  2486  004A70  6EF6               	movwf	tblptrl,c
  2487  004A72                     	if	1	;There is more than 1 active tblptr byte
  2488  004A72  0E60               	movlw	high mensagem_inicial@F4428
  2489  004A74  6EF7               	movwf	tblptrh,c
  2490  004A76                     	endif
  2491  004A76                     	if	0	;There are less than 3 active tblptr bytes
  2492  004A76                     	endif
  2493  004A76  EE20  F068         	lfsr	2,mensagem_inicial@msg_linha_um
  2494  004A7A  0E10               	movlw	16
  2495  004A7C                     u18300:
  2496  004A7C  0009               	tblrd		*+
  2497  004A7E  CFF5 FFDE          	movff	tablat,postinc2
  2498  004A82  06E8               	decf	wreg,f,c
  2499  004A84  E2FB               	bc	u18300
  2500                           
  2501                           ;main.c: 247: const unsigned char msg_dois[17] = "TCC--TELEMTRIA";
  2502  004A86  0ED9               	movlw	low mensagem_inicial@F4430
  2503  004A88  6EF6               	movwf	tblptrl,c
  2504  004A8A                     	if	1	;There is more than 1 active tblptr byte
  2505  004A8A  0E60               	movlw	high mensagem_inicial@F4430
  2506  004A8C  6EF7               	movwf	tblptrh,c
  2507  004A8E                     	endif
  2508  004A8E                     	if	0	;There are less than 3 active tblptr bytes
  2509  004A8E                     	endif
  2510  004A8E  EE20  F079         	lfsr	2,mensagem_inicial@msg_dois
  2511  004A92  0E10               	movlw	16
  2512  004A94                     u18310:
  2513  004A94  0009               	tblrd		*+
  2514  004A96  CFF5 FFDE          	movff	tablat,postinc2
  2515  004A9A  06E8               	decf	wreg,f,c
  2516  004A9C  E2FB               	bc	u18310
  2517                           
  2518                           ;main.c: 249: posicao_cursor_lcd(1,0);
  2519  004A9E  0E00               	movlw	0
  2520  004AA0  0100               	movlb	0	; () banked
  2521  004AA2  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2522  004AA4  0E01               	movlw	1
  2523  004AA6  EC5A  F028         	call	_posicao_cursor_lcd
  2524                           
  2525                           ;main.c: 250: escreve_frase_ram_lcd(msg_linha_um);
  2526  004AAA  0E68               	movlw	low mensagem_inicial@msg_linha_um
  2527  004AAC  0100               	movlb	0	; () banked
  2528  004AAE  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2529  004AB0  0E00               	movlw	high mensagem_inicial@msg_linha_um
  2530  004AB2  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2531  004AB4  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  2532                           
  2533                           ;main.c: 252: posicao_cursor_lcd(2,0);
  2534  004AB8  0E00               	movlw	0
  2535  004ABA  0100               	movlb	0	; () banked
  2536  004ABC  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2537  004ABE  0E02               	movlw	2
  2538  004AC0  EC5A  F028         	call	_posicao_cursor_lcd
  2539                           
  2540                           ;main.c: 253: escreve_frase_ram_lcd(msg_dois);
  2541  004AC4  0E79               	movlw	low mensagem_inicial@msg_dois
  2542  004AC6  0100               	movlb	0	; () banked
  2543  004AC8  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2544  004ACA  0E00               	movlw	high mensagem_inicial@msg_dois
  2545  004ACC  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2546  004ACE  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  2547                           
  2548                           ;main.c: 254: _delay((unsigned long)((1000)*(48000000/4000.0)));
  2549  004AD2  0E3D               	movlw	61
  2550  004AD4  0100               	movlb	0	; () banked
  2551  004AD6  6F67               	movwf	(??_mensagem_inicial+1)& (0+255),b
  2552  004AD8  0EE1               	movlw	225
  2553  004ADA  6F66               	movwf	??_mensagem_inicial& (0+255),b
  2554  004ADC  0E3F               	movlw	63
  2555  004ADE                     u18597:
  2556  004ADE  2EE8               	decfsz	wreg,f,c
  2557  004AE0  D7FE               	bra	u18597
  2558  004AE2  2F66               	decfsz	??_mensagem_inicial& (0+255),f,b
  2559  004AE4  D7FC               	bra	u18597
  2560  004AE6  2F67               	decfsz	(??_mensagem_inicial+1)& (0+255),f,b
  2561  004AE8  D7FA               	bra	u18597
  2562  004AEA  D000               	nop2	
  2563                           
  2564                           ;main.c: 255: escreve_cmd_lcd(0b00000001);
  2565  004AEC  0E01               	movlw	1
  2566  004AEE  EC76  F026         	call	_escreve_cmd_lcd
  2567                           
  2568                           ;main.c: 256: posicao_cursor_lcd(1,0);
  2569  004AF2  0E00               	movlw	0
  2570  004AF4  0100               	movlb	0	; () banked
  2571  004AF6  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  2572  004AF8  0E01               	movlw	1
  2573  004AFA  EC5A  F028         	call	_posicao_cursor_lcd
  2574                           
  2575                           ;main.c: 257: escreve_frase_ram_lcd("AGUARDE...");
  2576  004AFE  0EC6               	movlw	low STR_25
  2577  004B00  0100               	movlb	0	; () banked
  2578  004B02  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  2579  004B04  0E61               	movlw	high STR_25
  2580  004B06  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  2581  004B08  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  2582  004B0C  0012               	return		;funcret
  2583  004B0E                     __end_of_mensagem_inicial:
  2584                           	opt stack 0
  2585                           tblptru	equ	0xFF8
  2586                           tblptrh	equ	0xFF7
  2587                           tblptrl	equ	0xFF6
  2588                           tablat	equ	0xFF5
  2589                           postinc0	equ	0xFEE
  2590                           wreg	equ	0xFE8
  2591                           postdec1	equ	0xFE5
  2592                           fsr1h	equ	0xFE2
  2593                           fsr1l	equ	0xFE1
  2594                           postinc2	equ	0xFDE
  2595                           status	equ	0xFD8
  2596                           
  2597 ;; *************** function _init_lcd *****************
  2598 ;; Defined at:
  2599 ;;		line 71 in file "bibliotecas/display_lcd.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;		None
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;		None
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  1    wreg      void 
  2606 ;; Registers used:
  2607 ;;		wreg, status,2, status,0, cstack
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2613 ;;      Params:         0       0       0       0       0       0       0       0       0
  2614 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2615 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2616 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2617 ;;Total ram usage:        1 bytes
  2618 ;; Hardware stack levels used:    1
  2619 ;; Hardware stack levels required when called:    5
  2620 ;; This function calls:
  2621 ;;		_delay
  2622 ;;		_escreve_cmd_lcd
  2623 ;; This function is called by:
  2624 ;;		_main
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text2
  2629  004C4E                     __ptext2:
  2630                           	opt stack 0
  2631  004C4E                     _init_lcd:
  2632                           	opt stack 25
  2633                           
  2634                           ;display_lcd.c: 74: TRISDbits.RD2 = 0;
  2635                           
  2636                           ;incstack = 0
  2637  004C4E  9495               	bcf	3989,2,c	;volatile
  2638                           
  2639                           ;display_lcd.c: 75: TRISDbits.RD1 = 0;
  2640  004C50  9295               	bcf	3989,1,c	;volatile
  2641                           
  2642                           ;display_lcd.c: 76: TRISDbits.RD0 = 0;
  2643  004C52  9095               	bcf	3989,0,c	;volatile
  2644                           
  2645                           ;display_lcd.c: 79: TRISDbits.RD4=0;
  2646  004C54  9895               	bcf	3989,4,c	;volatile
  2647                           
  2648                           ;display_lcd.c: 80: TRISDbits.RD5=0;
  2649  004C56  9A95               	bcf	3989,5,c	;volatile
  2650                           
  2651                           ;display_lcd.c: 81: TRISDbits.RD6=0;
  2652  004C58  9C95               	bcf	3989,6,c	;volatile
  2653                           
  2654                           ;display_lcd.c: 82: TRISDbits.RD7=0;
  2655  004C5A  9E95               	bcf	3989,7,c	;volatile
  2656                           
  2657                           ;display_lcd.c: 89: PORTDbits.RD2 = 0;
  2658  004C5C  9483               	bcf	3971,2,c	;volatile
  2659                           
  2660                           ;display_lcd.c: 90: PORTDbits.RD1 = 0;
  2661  004C5E  9283               	bcf	3971,1,c	;volatile
  2662                           
  2663                           ;display_lcd.c: 91: PORTDbits.RD0 = 0;
  2664  004C60  9083               	bcf	3971,0,c	;volatile
  2665                           
  2666                           ;display_lcd.c: 95: PORTDbits.RD7=0;
  2667  004C62  9E83               	bcf	3971,7,c	;volatile
  2668                           
  2669                           ;display_lcd.c: 96: PORTDbits.RD6=0;
  2670  004C64  9C83               	bcf	3971,6,c	;volatile
  2671                           
  2672                           ;display_lcd.c: 97: PORTDbits.RD5=1;
  2673  004C66  8A83               	bsf	3971,5,c	;volatile
  2674                           
  2675                           ;display_lcd.c: 98: PORTDbits.RD4=1;
  2676  004C68  8883               	bsf	3971,4,c	;volatile
  2677                           
  2678                           ;display_lcd.c: 103: _delay((unsigned long)((15)*(48000000/4000.0)));
  2679  004C6A  0EEA               	movlw	234
  2680  004C6C  0100               	movlb	0	; () banked
  2681  004C6E  6F63               	movwf	??_init_lcd& (0+255),b
  2682  004C70  0EC3               	movlw	195
  2683  004C72                     u18607:
  2684  004C72  2EE8               	decfsz	wreg,f,c
  2685  004C74  D7FE               	bra	u18607
  2686  004C76  2F63               	decfsz	??_init_lcd& (0+255),f,b
  2687  004C78  D7FC               	bra	u18607
  2688                           
  2689                           ;display_lcd.c: 107: PORTDbits.RD0 = 1;
  2690  004C7A  8083               	bsf	3971,0,c	;volatile
  2691                           
  2692                           ;display_lcd.c: 108: delay();
  2693  004C7C  ECB8  F02E         	call	_delay	;wreg free
  2694                           
  2695                           ;display_lcd.c: 109: PORTDbits.RD0 = 0;
  2696  004C80  9083               	bcf	3971,0,c	;volatile
  2697                           
  2698                           ;display_lcd.c: 110: delay();
  2699  004C82  ECB8  F02E         	call	_delay	;wreg free
  2700                           
  2701                           ;display_lcd.c: 115: _delay((unsigned long)((5)*(48000000/4000.0)));
  2702  004C86  0E4E               	movlw	78
  2703  004C88  0100               	movlb	0	; () banked
  2704  004C8A  6F63               	movwf	??_init_lcd& (0+255),b
  2705  004C8C  0EEB               	movlw	235
  2706  004C8E                     u18617:
  2707  004C8E  2EE8               	decfsz	wreg,f,c
  2708  004C90  D7FE               	bra	u18617
  2709  004C92  2F63               	decfsz	??_init_lcd& (0+255),f,b
  2710  004C94  D7FC               	bra	u18617
  2711                           
  2712                           ;display_lcd.c: 118: PORTDbits.RD0 = 1;
  2713  004C96  8083               	bsf	3971,0,c	;volatile
  2714                           
  2715                           ;display_lcd.c: 119: delay();
  2716  004C98  ECB8  F02E         	call	_delay	;wreg free
  2717                           
  2718                           ;display_lcd.c: 120: PORTDbits.RD0 = 0;
  2719  004C9C  9083               	bcf	3971,0,c	;volatile
  2720                           
  2721                           ;display_lcd.c: 121: delay();
  2722  004C9E  ECB8  F02E         	call	_delay	;wreg free
  2723                           
  2724                           ;display_lcd.c: 126: _delay((unsigned long)((5)*(48000000/4000.0)));
  2725  004CA2  0E4E               	movlw	78
  2726  004CA4  0100               	movlb	0	; () banked
  2727  004CA6  6F63               	movwf	??_init_lcd& (0+255),b
  2728  004CA8  0EEB               	movlw	235
  2729  004CAA                     u18627:
  2730  004CAA  2EE8               	decfsz	wreg,f,c
  2731  004CAC  D7FE               	bra	u18627
  2732  004CAE  2F63               	decfsz	??_init_lcd& (0+255),f,b
  2733  004CB0  D7FC               	bra	u18627
  2734                           
  2735                           ;display_lcd.c: 129: PORTDbits.RD0 = 1;
  2736  004CB2  8083               	bsf	3971,0,c	;volatile
  2737                           
  2738                           ;display_lcd.c: 130: delay();
  2739  004CB4  ECB8  F02E         	call	_delay	;wreg free
  2740                           
  2741                           ;display_lcd.c: 131: PORTDbits.RD0 = 0;
  2742  004CB8  9083               	bcf	3971,0,c	;volatile
  2743                           
  2744                           ;display_lcd.c: 132: delay();
  2745  004CBA  ECB8  F02E         	call	_delay	;wreg free
  2746                           
  2747                           ;display_lcd.c: 135: PORTDbits.RD7=0;
  2748  004CBE  9E83               	bcf	3971,7,c	;volatile
  2749                           
  2750                           ;display_lcd.c: 136: PORTDbits.RD6=0;
  2751  004CC0  9C83               	bcf	3971,6,c	;volatile
  2752                           
  2753                           ;display_lcd.c: 137: PORTDbits.RD5=1;
  2754  004CC2  8A83               	bsf	3971,5,c	;volatile
  2755                           
  2756                           ;display_lcd.c: 138: PORTDbits.RD4=0;
  2757  004CC4  9883               	bcf	3971,4,c	;volatile
  2758                           
  2759                           ;display_lcd.c: 142: PORTDbits.RD0 = 1;
  2760  004CC6  8083               	bsf	3971,0,c	;volatile
  2761                           
  2762                           ;display_lcd.c: 143: delay();
  2763  004CC8  ECB8  F02E         	call	_delay	;wreg free
  2764                           
  2765                           ;display_lcd.c: 144: PORTDbits.RD0 = 0;
  2766  004CCC  9083               	bcf	3971,0,c	;volatile
  2767                           
  2768                           ;display_lcd.c: 145: delay();
  2769  004CCE  ECB8  F02E         	call	_delay	;wreg free
  2770                           
  2771                           ;display_lcd.c: 149: escreve_cmd_lcd(0b00101000);
  2772  004CD2  0E28               	movlw	40
  2773  004CD4  EC76  F026         	call	_escreve_cmd_lcd
  2774                           
  2775                           ;display_lcd.c: 150: escreve_cmd_lcd(0b00000110);
  2776  004CD8  0E06               	movlw	6
  2777  004CDA  EC76  F026         	call	_escreve_cmd_lcd
  2778                           
  2779                           ;display_lcd.c: 151: escreve_cmd_lcd(0b00001110);
  2780  004CDE  0E0E               	movlw	14
  2781  004CE0  EC76  F026         	call	_escreve_cmd_lcd
  2782                           
  2783                           ;display_lcd.c: 152: escreve_cmd_lcd(0b00000001);
  2784  004CE4  0E01               	movlw	1
  2785  004CE6  EC76  F026         	call	_escreve_cmd_lcd
  2786  004CEA  0012               	return		;funcret
  2787  004CEC                     __end_of_init_lcd:
  2788                           	opt stack 0
  2789                           tblptru	equ	0xFF8
  2790                           tblptrh	equ	0xFF7
  2791                           tblptrl	equ	0xFF6
  2792                           tablat	equ	0xFF5
  2793                           postinc0	equ	0xFEE
  2794                           wreg	equ	0xFE8
  2795                           postdec1	equ	0xFE5
  2796                           fsr1h	equ	0xFE2
  2797                           fsr1l	equ	0xFE1
  2798                           postinc2	equ	0xFDE
  2799                           status	equ	0xFD8
  2800                           
  2801 ;; *************** function _init_hardware *****************
  2802 ;; Defined at:
  2803 ;;		line 52 in file "bibliotecas/hardware.c"
  2804 ;; Parameters:    Size  Location     Type
  2805 ;;		None
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;		None
  2808 ;; Return value:  Size  Location     Type
  2809 ;;                  1    wreg      void 
  2810 ;; Registers used:
  2811 ;;		wreg, status,2, cstack
  2812 ;; Tracked objects:
  2813 ;;		On entry : 0/0
  2814 ;;		On exit  : 0/0
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2817 ;;      Params:         0       0       0       0       0       0       0       0       0
  2818 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2819 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2820 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2821 ;;Total ram usage:        0 bytes
  2822 ;; Hardware stack levels used:    1
  2823 ;; Hardware stack levels required when called:    5
  2824 ;; This function calls:
  2825 ;;		_config_timer_dois
  2826 ;;		_config_timer_zero
  2827 ;;		_init_interrupt
  2828 ;;		_init_oscilador
  2829 ;;		_init_ports
  2830 ;; This function is called by:
  2831 ;;		_main
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           	psect	text3
  2836  005EDE                     __ptext3:
  2837                           	opt stack 0
  2838  005EDE                     _init_hardware:
  2839                           	opt stack 25
  2840                           
  2841                           ;hardware.c: 55: init_oscilador();
  2842                           
  2843                           ;incstack = 0
  2844  005EDE  ECD8  F02F         	call	_init_oscilador	;wreg free
  2845                           
  2846                           ;hardware.c: 58: init_ports();
  2847  005EE2  EC3A  F02F         	call	_init_ports	;wreg free
  2848                           
  2849                           ;hardware.c: 61: config_timer_zero();
  2850  005EE6  EC48  F02F         	call	_config_timer_zero	;wreg free
  2851                           
  2852                           ;hardware.c: 64: config_timer_dois();
  2853  005EEA  ECAE  F02F         	call	_config_timer_dois	;wreg free
  2854                           
  2855                           ;hardware.c: 67: init_interrupt();
  2856  005EEE  EC84  F02F         	call	_init_interrupt	;wreg free
  2857  005EF2  0012               	return		;funcret
  2858  005EF4                     __end_of_init_hardware:
  2859                           	opt stack 0
  2860                           tblptru	equ	0xFF8
  2861                           tblptrh	equ	0xFF7
  2862                           tblptrl	equ	0xFF6
  2863                           tablat	equ	0xFF5
  2864                           postinc0	equ	0xFEE
  2865                           wreg	equ	0xFE8
  2866                           postdec1	equ	0xFE5
  2867                           fsr1h	equ	0xFE2
  2868                           fsr1l	equ	0xFE1
  2869                           postinc2	equ	0xFDE
  2870                           status	equ	0xFD8
  2871                           
  2872 ;; *************** function _init_ports *****************
  2873 ;; Defined at:
  2874 ;;		line 151 in file "bibliotecas/hardware.c"
  2875 ;; Parameters:    Size  Location     Type
  2876 ;;		None
  2877 ;; Auto vars:     Size  Location     Type
  2878 ;;		None
  2879 ;; Return value:  Size  Location     Type
  2880 ;;                  1    wreg      void 
  2881 ;; Registers used:
  2882 ;;		wreg, status,2
  2883 ;; Tracked objects:
  2884 ;;		On entry : 0/0
  2885 ;;		On exit  : 0/0
  2886 ;;		Unchanged: 0/0
  2887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2888 ;;      Params:         0       0       0       0       0       0       0       0       0
  2889 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2890 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2891 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2892 ;;Total ram usage:        0 bytes
  2893 ;; Hardware stack levels used:    1
  2894 ;; Hardware stack levels required when called:    3
  2895 ;; This function calls:
  2896 ;;		Nothing
  2897 ;; This function is called by:
  2898 ;;		_init_hardware
  2899 ;; This function uses a non-reentrant model
  2900 ;;
  2901                           
  2902                           	psect	text4
  2903  005E74                     __ptext4:
  2904                           	opt stack 0
  2905  005E74                     _init_ports:
  2906                           	opt stack 26
  2907                           
  2908                           ;hardware.c: 153: ADCON1 = 0X0F;
  2909                           
  2910                           ;incstack = 0
  2911  005E74  0E0F               	movlw	15
  2912  005E76  6EC1               	movwf	4033,c	;volatile
  2913                           
  2914                           ;hardware.c: 154: TRISB = 0b00000001;
  2915  005E78  0E01               	movlw	1
  2916  005E7A  6E93               	movwf	3987,c	;volatile
  2917                           
  2918                           ;hardware.c: 155: LATB = 0xFF;
  2919  005E7C  688A               	setf	3978,c	;volatile
  2920                           
  2921                           ;hardware.c: 156: TRISD = 0x00;
  2922  005E7E  0E00               	movlw	0
  2923  005E80  6E95               	movwf	3989,c	;volatile
  2924                           
  2925                           ;hardware.c: 157: TRISA = 0b00000111;
  2926  005E82  0E07               	movlw	7
  2927  005E84  6E92               	movwf	3986,c	;volatile
  2928                           
  2929                           ;hardware.c: 158: TRISC = 0x01111111;
  2930  005E86  0E11               	movlw	17
  2931  005E88  6E94               	movwf	3988,c	;volatile
  2932                           
  2933                           ;hardware.c: 159: TRISE = 0b00000011;
  2934  005E8A  0E03               	movlw	3
  2935  005E8C  6E96               	movwf	3990,c	;volatile
  2936  005E8E  0012               	return		;funcret
  2937  005E90                     __end_of_init_ports:
  2938                           	opt stack 0
  2939                           tblptru	equ	0xFF8
  2940                           tblptrh	equ	0xFF7
  2941                           tblptrl	equ	0xFF6
  2942                           tablat	equ	0xFF5
  2943                           postinc0	equ	0xFEE
  2944                           wreg	equ	0xFE8
  2945                           postdec1	equ	0xFE5
  2946                           fsr1h	equ	0xFE2
  2947                           fsr1l	equ	0xFE1
  2948                           postinc2	equ	0xFDE
  2949                           status	equ	0xFD8
  2950                           
  2951 ;; *************** function _init_oscilador *****************
  2952 ;; Defined at:
  2953 ;;		line 169 in file "bibliotecas/hardware.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;		None
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;		None
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  1    wreg      void 
  2960 ;; Registers used:
  2961 ;;		None
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2967 ;;      Params:         0       0       0       0       0       0       0       0       0
  2968 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2969 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2970 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2971 ;;Total ram usage:        0 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:    3
  2974 ;; This function calls:
  2975 ;;		Nothing
  2976 ;; This function is called by:
  2977 ;;		_init_hardware
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           	psect	text5
  2982  005FB0                     __ptext5:
  2983                           	opt stack 0
  2984  005FB0                     _init_oscilador:
  2985                           	opt stack 26
  2986                           
  2987                           ;hardware.c: 172: OSCCONbits.IRCF0 = 1;
  2988                           
  2989                           ;incstack = 0
  2990  005FB0  88D3               	bsf	4051,4,c	;volatile
  2991                           
  2992                           ;hardware.c: 173: OSCCONbits.IRCF1 = 1;
  2993  005FB2  8AD3               	bsf	4051,5,c	;volatile
  2994                           
  2995                           ;hardware.c: 174: OSCCONbits.IRCF2 = 1;
  2996  005FB4  8CD3               	bsf	4051,6,c	;volatile
  2997  005FB6  0012               	return		;funcret
  2998  005FB8                     __end_of_init_oscilador:
  2999                           	opt stack 0
  3000                           tblptru	equ	0xFF8
  3001                           tblptrh	equ	0xFF7
  3002                           tblptrl	equ	0xFF6
  3003                           tablat	equ	0xFF5
  3004                           postinc0	equ	0xFEE
  3005                           wreg	equ	0xFE8
  3006                           postdec1	equ	0xFE5
  3007                           fsr1h	equ	0xFE2
  3008                           fsr1l	equ	0xFE1
  3009                           postinc2	equ	0xFDE
  3010                           status	equ	0xFD8
  3011                           
  3012 ;; *************** function _init_interrupt *****************
  3013 ;; Defined at:
  3014 ;;		line 94 in file "bibliotecas/hardware.c"
  3015 ;; Parameters:    Size  Location     Type
  3016 ;;		None
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;		None
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg, status,2
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3028 ;;      Params:         0       0       0       0       0       0       0       0       0
  3029 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3030 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3031 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3032 ;;Total ram usage:        0 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:    3
  3035 ;; This function calls:
  3036 ;;		Nothing
  3037 ;; This function is called by:
  3038 ;;		_init_hardware
  3039 ;; This function uses a non-reentrant model
  3040 ;;
  3041                           
  3042                           	psect	text6
  3043  005F08                     __ptext6:
  3044                           	opt stack 0
  3045  005F08                     _init_interrupt:
  3046                           	opt stack 26
  3047                           
  3048                           ;hardware.c: 96: INTCON = 0b10110000;
  3049                           
  3050                           ;incstack = 0
  3051  005F08  0EB0               	movlw	176
  3052  005F0A  6EF2               	movwf	intcon,c	;volatile
  3053                           
  3054                           ;hardware.c: 97: INTCON2 = 0b00000000;
  3055  005F0C  0E00               	movlw	0
  3056  005F0E  6EF1               	movwf	intcon2,c	;volatile
  3057                           
  3058                           ;hardware.c: 98: INTCON3 = 0b00000000;
  3059  005F10  0E00               	movlw	0
  3060  005F12  6EF0               	movwf	intcon3,c	;volatile
  3061                           
  3062                           ;hardware.c: 100: PIE1 = 0b00101000;
  3063  005F14  0E28               	movlw	40
  3064  005F16  6E9D               	movwf	3997,c	;volatile
  3065  005F18  0012               	return		;funcret
  3066  005F1A                     __end_of_init_interrupt:
  3067                           	opt stack 0
  3068                           tblptru	equ	0xFF8
  3069                           tblptrh	equ	0xFF7
  3070                           tblptrl	equ	0xFF6
  3071                           tablat	equ	0xFF5
  3072                           intcon	equ	0xFF2
  3073                           intcon2	equ	0xFF1
  3074                           intcon3	equ	0xFF0
  3075                           postinc0	equ	0xFEE
  3076                           wreg	equ	0xFE8
  3077                           postdec1	equ	0xFE5
  3078                           fsr1h	equ	0xFE2
  3079                           fsr1l	equ	0xFE1
  3080                           postinc2	equ	0xFDE
  3081                           status	equ	0xFD8
  3082                           
  3083 ;; *************** function _config_timer_zero *****************
  3084 ;; Defined at:
  3085 ;;		line 79 in file "bibliotecas/hardware.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;		None
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;		None
  3090 ;; Return value:  Size  Location     Type
  3091 ;;                  1    wreg      void 
  3092 ;; Registers used:
  3093 ;;		wreg, status,2, cstack
  3094 ;; Tracked objects:
  3095 ;;		On entry : 0/0
  3096 ;;		On exit  : 0/0
  3097 ;;		Unchanged: 0/0
  3098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3099 ;;      Params:         0       0       0       0       0       0       0       0       0
  3100 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3101 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3102 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3103 ;;Total ram usage:        0 bytes
  3104 ;; Hardware stack levels used:    1
  3105 ;; Hardware stack levels required when called:    4
  3106 ;; This function calls:
  3107 ;;		_write_timer_zero
  3108 ;; This function is called by:
  3109 ;;		_init_hardware
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           	psect	text7
  3114  005E90                     __ptext7:
  3115                           	opt stack 0
  3116  005E90                     _config_timer_zero:
  3117                           	opt stack 25
  3118                           
  3119                           ;hardware.c: 81: T0CON = 0b11000101;
  3120                           
  3121                           ;incstack = 0
  3122  005E90  0EC5               	movlw	197
  3123  005E92  6ED5               	movwf	4053,c	;volatile
  3124                           
  3125                           ;hardware.c: 82: SPPCON = 0b00000000;
  3126  005E94  0E00               	movlw	0
  3127  005E96  6E65               	movwf	3941,c	;volatile
  3128                           
  3129                           ;hardware.c: 83: SPPCFG = 0b00000000;
  3130  005E98  0E00               	movlw	0
  3131  005E9A  6E63               	movwf	3939,c	;volatile
  3132                           
  3133                           ;hardware.c: 84: write_timer_zero(0x45);
  3134  005E9C  0E00               	movlw	0
  3135  005E9E  0100               	movlb	0	; () banked
  3136  005EA0  6F61               	movwf	(write_timer_zero@timer0+1)& (0+255),b
  3137  005EA2  0E45               	movlw	69
  3138  005EA4  6F60               	movwf	write_timer_zero@timer0& (0+255),b
  3139  005EA6  ECCE  F02F         	call	_write_timer_zero	;wreg free
  3140  005EAA  0012               	return		;funcret
  3141  005EAC                     __end_of_config_timer_zero:
  3142                           	opt stack 0
  3143                           tblptru	equ	0xFF8
  3144                           tblptrh	equ	0xFF7
  3145                           tblptrl	equ	0xFF6
  3146                           tablat	equ	0xFF5
  3147                           intcon	equ	0xFF2
  3148                           intcon2	equ	0xFF1
  3149                           intcon3	equ	0xFF0
  3150                           postinc0	equ	0xFEE
  3151                           wreg	equ	0xFE8
  3152                           postdec1	equ	0xFE5
  3153                           fsr1h	equ	0xFE2
  3154                           fsr1l	equ	0xFE1
  3155                           postinc2	equ	0xFDE
  3156                           status	equ	0xFD8
  3157                           
  3158 ;; *************** function _write_timer_zero *****************
  3159 ;; Defined at:
  3160 ;;		line 134 in file "bibliotecas/hardware.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;  timer0          2    0[BANK0 ] unsigned int 
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;		None
  3165 ;; Return value:  Size  Location     Type
  3166 ;;                  1    wreg      void 
  3167 ;; Registers used:
  3168 ;;		None
  3169 ;; Tracked objects:
  3170 ;;		On entry : 0/0
  3171 ;;		On exit  : 0/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3174 ;;      Params:         0       2       0       0       0       0       0       0       0
  3175 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3176 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3177 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3178 ;;Total ram usage:        2 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; Hardware stack levels required when called:    3
  3181 ;; This function calls:
  3182 ;;		Nothing
  3183 ;; This function is called by:
  3184 ;;		_config_timer_zero
  3185 ;; This function uses a non-reentrant model
  3186 ;;
  3187                           
  3188                           	psect	text8
  3189  005F9C                     __ptext8:
  3190                           	opt stack 0
  3191  005F9C                     _write_timer_zero:
  3192                           	opt stack 25
  3193                           
  3194                           ;hardware.c: 142: TMR0 = timer0;
  3195                           
  3196                           ;incstack = 0
  3197  005F9C  C060  FFD6         	movff	write_timer_zero@timer0,4054	;volatile
  3198  005FA0  C061  FFD7         	movff	write_timer_zero@timer0+1,4055	;volatile
  3199  005FA4  0012               	return		;funcret
  3200  005FA6                     __end_of_write_timer_zero:
  3201                           	opt stack 0
  3202                           tblptru	equ	0xFF8
  3203                           tblptrh	equ	0xFF7
  3204                           tblptrl	equ	0xFF6
  3205                           tablat	equ	0xFF5
  3206                           intcon	equ	0xFF2
  3207                           intcon2	equ	0xFF1
  3208                           intcon3	equ	0xFF0
  3209                           postinc0	equ	0xFEE
  3210                           wreg	equ	0xFE8
  3211                           postdec1	equ	0xFE5
  3212                           fsr1h	equ	0xFE2
  3213                           fsr1l	equ	0xFE1
  3214                           postinc2	equ	0xFDE
  3215                           status	equ	0xFD8
  3216                           
  3217 ;; *************** function _config_timer_dois *****************
  3218 ;; Defined at:
  3219 ;;		line 198 in file "bibliotecas/hardware.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;		None
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;		None
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  1    wreg      void 
  3226 ;; Registers used:
  3227 ;;		wreg, status,2
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3233 ;;      Params:         0       0       0       0       0       0       0       0       0
  3234 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3235 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3236 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3237 ;;Total ram usage:        0 bytes
  3238 ;; Hardware stack levels used:    1
  3239 ;; Hardware stack levels required when called:    3
  3240 ;; This function calls:
  3241 ;;		Nothing
  3242 ;; This function is called by:
  3243 ;;		_init_hardware
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           	psect	text9
  3248  005F5C                     __ptext9:
  3249                           	opt stack 0
  3250  005F5C                     _config_timer_dois:
  3251                           	opt stack 26
  3252                           
  3253                           ;hardware.c: 200: T2CON = 0b00000100;
  3254                           
  3255                           ;incstack = 0
  3256  005F5C  0E04               	movlw	4
  3257  005F5E  6ECA               	movwf	4042,c	;volatile
  3258                           
  3259                           ;hardware.c: 201: TMR2 = 0;
  3260  005F60  0E00               	movlw	0
  3261  005F62  6ECC               	movwf	4044,c	;volatile
  3262                           
  3263                           ;hardware.c: 202: PR2 = 0x01;
  3264  005F64  0E01               	movlw	1
  3265  005F66  6ECB               	movwf	4043,c	;volatile
  3266  005F68  0012               	return		;funcret
  3267  005F6A                     __end_of_config_timer_dois:
  3268                           	opt stack 0
  3269                           tblptru	equ	0xFF8
  3270                           tblptrh	equ	0xFF7
  3271                           tblptrl	equ	0xFF6
  3272                           tablat	equ	0xFF5
  3273                           intcon	equ	0xFF2
  3274                           intcon2	equ	0xFF1
  3275                           intcon3	equ	0xFF0
  3276                           postinc0	equ	0xFEE
  3277                           wreg	equ	0xFE8
  3278                           postdec1	equ	0xFE5
  3279                           fsr1h	equ	0xFE2
  3280                           fsr1l	equ	0xFE1
  3281                           postinc2	equ	0xFDE
  3282                           status	equ	0xFD8
  3283                           
  3284 ;; *************** function _inicializa_tarefas *****************
  3285 ;; Defined at:
  3286 ;;		line 167 in file "main.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;		None
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;		None
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  1    wreg      void 
  3293 ;; Registers used:
  3294 ;;		wreg, status,2, status,0
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3300 ;;      Params:         0       0       0       0       0       0       0       0       0
  3301 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3302 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3303 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3304 ;;Total ram usage:        0 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:    3
  3307 ;; This function calls:
  3308 ;;		Nothing
  3309 ;; This function is called by:
  3310 ;;		_main
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           	psect	text10
  3315  005726                     __ptext10:
  3316                           	opt stack 0
  3317  005726                     _inicializa_tarefas:
  3318                           	opt stack 27
  3319                           
  3320                           ;main.c: 170: p_tarefas[0] = verifica_dados_operacionais;
  3321                           
  3322                           ;incstack = 0
  3323  005726  0E3C               	movlw	low _verifica_dados_operacionais
  3324  005728  0101               	movlb	1	; () banked
  3325  00572A  6F1A               	movwf	_p_tarefas& (0+255),b
  3326  00572C  0E44               	movlw	high _verifica_dados_operacionais
  3327  00572E  6F1B               	movwf	(_p_tarefas+1)& (0+255),b
  3328                           
  3329                           ;main.c: 171: p_tarefas[1] = disparo_gravacao;
  3330  005730  0E20               	movlw	low _disparo_gravacao
  3331  005732  6F1C               	movwf	(_p_tarefas+2)& (0+255),b
  3332  005734  0E5C               	movlw	high _disparo_gravacao
  3333  005736  6F1D               	movwf	(_p_tarefas+3)& (0+255),b
  3334                           
  3335                           ;main.c: 172: p_tarefas[2] = troca_de_tela;
  3336  005738  0E70               	movlw	low _troca_de_tela
  3337  00573A  6F1E               	movwf	(_p_tarefas+4)& (0+255),b
  3338  00573C  0E20               	movlw	high _troca_de_tela
  3339  00573E  6F1F               	movwf	(_p_tarefas+5)& (0+255),b
  3340                           
  3341                           ; BSR set to: 1
  3342                           ;main.c: 176: tempo_backup[0] = 500;
  3343  005740  0E01               	movlw	1
  3344  005742  6F13               	movwf	(_tempo_backup+1)& (0+255),b
  3345  005744  0EF4               	movlw	244
  3346  005746  6F12               	movwf	_tempo_backup& (0+255),b
  3347                           
  3348                           ; BSR set to: 1
  3349                           ;main.c: 177: tempo_backup[1] = 1000;
  3350  005748  0E03               	movlw	3
  3351  00574A  6F15               	movwf	(_tempo_backup+3)& (0+255),b
  3352  00574C  0EE8               	movlw	232
  3353  00574E  6F14               	movwf	(_tempo_backup+2)& (0+255),b
  3354                           
  3355                           ; BSR set to: 1
  3356                           ;main.c: 178: tempo_backup[2] = 5000;
  3357  005750  0E13               	movlw	19
  3358  005752  6F17               	movwf	(_tempo_backup+5)& (0+255),b
  3359  005754  0E88               	movlw	136
  3360  005756  6F16               	movwf	(_tempo_backup+4)& (0+255),b
  3361                           
  3362                           ; BSR set to: 1
  3363                           ;main.c: 181: tempo_tarefa[0] = 500;
  3364  005758  0E01               	movlw	1
  3365  00575A  6F0B               	movwf	(_tempo_tarefa+1)& (0+255),b
  3366  00575C  0EF4               	movlw	244
  3367  00575E  6F0A               	movwf	_tempo_tarefa& (0+255),b
  3368                           
  3369                           ; BSR set to: 1
  3370                           ;main.c: 182: tempo_tarefa[1] = 1000;
  3371  005760  0E03               	movlw	3
  3372  005762  6F0D               	movwf	(_tempo_tarefa+3)& (0+255),b
  3373  005764  0EE8               	movlw	232
  3374  005766  6F0C               	movwf	(_tempo_tarefa+2)& (0+255),b
  3375                           
  3376                           ; BSR set to: 1
  3377                           ;main.c: 183: tempo_tarefa[2] = 5000;
  3378  005768  0E13               	movlw	19
  3379  00576A  6F0F               	movwf	(_tempo_tarefa+5)& (0+255),b
  3380  00576C  0E88               	movlw	136
  3381  00576E  6F0E               	movwf	(_tempo_tarefa+4)& (0+255),b
  3382                           
  3383                           ; BSR set to: 1
  3384                           ;main.c: 185: tarefa_em_execucao = 0;
  3385  005770  0E00               	movlw	0
  3386  005772  6E39               	movwf	_tarefa_em_execucao,c	;volatile
  3387                           
  3388                           ; BSR set to: 1
  3389  005774  0012               	return		;funcret
  3390  005776                     __end_of_inicializa_tarefas:
  3391                           	opt stack 0
  3392                           tblptru	equ	0xFF8
  3393                           tblptrh	equ	0xFF7
  3394                           tblptrl	equ	0xFF6
  3395                           tablat	equ	0xFF5
  3396                           intcon	equ	0xFF2
  3397                           intcon2	equ	0xFF1
  3398                           intcon3	equ	0xFF0
  3399                           postinc0	equ	0xFEE
  3400                           wreg	equ	0xFE8
  3401                           postdec1	equ	0xFE5
  3402                           fsr1h	equ	0xFE2
  3403                           fsr1l	equ	0xFE1
  3404                           postinc2	equ	0xFDE
  3405                           status	equ	0xFD8
  3406                           
  3407 ;; *************** function _escalonador *****************
  3408 ;; Defined at:
  3409 ;;		line 196 in file "main.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;		None
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  cont            1   40[BANK2 ] unsigned char 
  3414 ;; Return value:  Size  Location     Type
  3415 ;;                  1    wreg      void 
  3416 ;; Registers used:
  3417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3418 ;; Tracked objects:
  3419 ;;		On entry : 0/0
  3420 ;;		On exit  : 0/0
  3421 ;;		Unchanged: 0/0
  3422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3423 ;;      Params:         0       0       0       0       0       0       0       0       0
  3424 ;;      Locals:         0       0       0       1       0       0       0       0       0
  3425 ;;      Temps:          0       0       0       2       0       0       0       0       0
  3426 ;;      Totals:         0       0       0       3       0       0       0       0       0
  3427 ;;Total ram usage:        3 bytes
  3428 ;; Hardware stack levels used:    1
  3429 ;; Hardware stack levels required when called:   18
  3430 ;; This function calls:
  3431 ;;		_dados_gps_to_sd
  3432 ;;		_disparo_gravacao
  3433 ;;		_troca_de_tela
  3434 ;;		_verifica_dados_operacionais
  3435 ;; This function is called by:
  3436 ;;		_main
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           	psect	text11
  3441  0047D2                     __ptext11:
  3442                           	opt stack 0
  3443  0047D2                     _escalonador:
  3444                           	opt stack 12
  3445                           
  3446                           ;main.c: 198: unsigned char cont;
  3447                           ;main.c: 199: for(cont = 0; cont<4;cont++)
  3448                           
  3449                           ; BSR set to: 1
  3450                           ;incstack = 0
  3451  0047D2  0E00               	movlw	0
  3452  0047D4  0102               	movlb	2	; () banked
  3453  0047D6  6F66               	movwf	escalonador@cont& (0+255),b
  3454  0047D8                     l13786:
  3455                           
  3456                           ; BSR set to: 2
  3457  0047D8  0E03               	movlw	3
  3458  0047DA  6566               	cpfsgt	escalonador@cont& (0+255),b
  3459  0047DC  D001               	goto	l1445
  3460  0047DE  D04D               	goto	u18290
  3461  0047E0                     l1445:
  3462                           
  3463                           ; BSR set to: 2
  3464                           ;main.c: 200: {
  3465                           ;main.c: 201: if((p_tarefas[cont]!= 0 ) && tempo_tarefa[cont] == 0)
  3466                           
  3467                           ; BSR set to: 2
  3468  0047E0  5166               	movf	escalonador@cont& (0+255),w,b
  3469  0047E2  0D02               	mullw	2
  3470  0047E4  0E1A               	movlw	low _p_tarefas
  3471  0047E6  24F3               	addwf	prodl,w,c
  3472  0047E8  6ED9               	movwf	fsr2l,c
  3473  0047EA  0E01               	movlw	high _p_tarefas
  3474  0047EC  20F4               	addwfc	prodh,w,c
  3475  0047EE  6EDA               	movwf	fsr2h,c
  3476  0047F0  50DE               	movf	postinc2,w,c
  3477  0047F2  10DE               	iorwf	postinc2,w,c
  3478  0047F4  B4D8               	btfsc	status,2,c
  3479  0047F6  D03F               	goto	l1447
  3480                           
  3481                           ; BSR set to: 2
  3482  0047F8  5166               	movf	escalonador@cont& (0+255),w,b
  3483  0047FA  0D02               	mullw	2
  3484  0047FC  0E0A               	movlw	low _tempo_tarefa
  3485  0047FE  24F3               	addwf	prodl,w,c
  3486  004800  6ED9               	movwf	fsr2l,c
  3487  004802  0E01               	movlw	high _tempo_tarefa
  3488  004804  20F4               	addwfc	prodh,w,c
  3489  004806  6EDA               	movwf	fsr2h,c
  3490  004808  50DE               	movf	postinc2,w,c
  3491  00480A  10DE               	iorwf	postinc2,w,c
  3492  00480C  A4D8               	btfss	status,2,c
  3493  00480E  D033               	goto	l1447
  3494                           
  3495                           ; BSR set to: 2
  3496                           ;main.c: 202: {
  3497                           ;main.c: 203: tarefa_em_execucao = 1;
  3498  004810  0E01               	movlw	1
  3499  004812  6E39               	movwf	_tarefa_em_execucao,c	;volatile
  3500                           
  3501                           ;main.c: 204: timeout_tarefa = 65000;
  3502  004814  0EFD               	movlw	253
  3503  004816  0101               	movlb	1	; () banked
  3504  004818  6F43               	movwf	(_timeout_tarefa+1)& (0+255),b
  3505  00481A  0EE8               	movlw	232
  3506  00481C  6F42               	movwf	_timeout_tarefa& (0+255),b
  3507                           
  3508                           ; BSR set to: 1
  3509                           ;main.c: 205: p_tarefas[cont]();
  3510  00481E  0102               	movlb	2	; () banked
  3511  004820  5166               	movf	escalonador@cont& (0+255),w,b
  3512  004822  0D02               	mullw	2
  3513  004824  0E1A               	movlw	low _p_tarefas
  3514  004826  24F3               	addwf	prodl,w,c
  3515  004828  6ED9               	movwf	fsr2l,c
  3516  00482A  0E01               	movlw	high _p_tarefas
  3517  00482C  20F4               	addwfc	prodh,w,c
  3518  00482E  6EDA               	movwf	fsr2h,c
  3519  004830  D801               	call	u18288
  3520  004832  D00A               	goto	u18289
  3521  004834                     u18288:
  3522  004834  0005               	push	
  3523  004836  6EFA               	movwf	pclath,c
  3524  004838  50DE               	movf	postinc2,w,c
  3525  00483A  6EFD               	movwf	tosl,c
  3526  00483C  50DE               	movf	postinc2,w,c
  3527  00483E  6EFE               	movwf	tosh,c
  3528  004840  50F8               	movf	tblptru,w,c
  3529  004842  6EFF               	movwf	tosu,c
  3530  004844  50FA               	movf	pclath,w,c
  3531  004846  0012               	return		;indir
  3532  004848                     u18289:
  3533                           
  3534                           ;main.c: 206: tarefa_em_execucao = 0;
  3535  004848  0E00               	movlw	0
  3536  00484A  6E39               	movwf	_tarefa_em_execucao,c	;volatile
  3537                           
  3538                           ;main.c: 207: tempo_tarefa[cont] = tempo_backup[cont];
  3539  00484C  0102               	movlb	2	; () banked
  3540  00484E  5166               	movf	escalonador@cont& (0+255),w,b
  3541  004850  0D02               	mullw	2
  3542  004852  0E12               	movlw	low _tempo_backup
  3543  004854  24F3               	addwf	prodl,w,c
  3544  004856  6ED9               	movwf	fsr2l,c
  3545  004858  0E01               	movlw	high _tempo_backup
  3546  00485A  20F4               	addwfc	prodh,w,c
  3547  00485C  6EDA               	movwf	fsr2h,c
  3548  00485E  5166               	movf	escalonador@cont& (0+255),w,b
  3549  004860  0D02               	mullw	2
  3550  004862  0E0A               	movlw	low _tempo_tarefa
  3551  004864  24F3               	addwf	prodl,w,c
  3552  004866  6EE1               	movwf	fsr1l,c
  3553  004868  0E01               	movlw	high _tempo_tarefa
  3554  00486A  20F4               	addwfc	prodh,w,c
  3555  00486C  6EE2               	movwf	fsr1h,c
  3556  00486E  CFDE FFE6          	movff	postinc2,postinc1
  3557  004872  CFDD FFE5          	movff	postdec2,postdec1
  3558  004876                     l1447:
  3559                           
  3560                           ; BSR set to: 2
  3561                           
  3562                           ; BSR set to: 2
  3563  004876  2B66               	incf	escalonador@cont& (0+255),f,b
  3564  004878  D7AF               	goto	l13786
  3565  00487A                     u18290:
  3566                           
  3567                           ; BSR set to: 2
  3568                           ;main.c: 208: }
  3569                           ;main.c: 209: }
  3570                           ;main.c: 210: dados_gps_to_sd();
  3571                           
  3572                           ; BSR set to: 2
  3573  00487A  EC4E  F029         	call	_dados_gps_to_sd	;wreg free
  3574  00487E  0012               	return		;funcret
  3575  004880                     __end_of_escalonador:
  3576                           	opt stack 0
  3577                           tosu	equ	0xFFF
  3578                           tosh	equ	0xFFE
  3579                           tosl	equ	0xFFD
  3580                           pclath	equ	0xFFA
  3581                           tblptru	equ	0xFF8
  3582                           tblptrh	equ	0xFF7
  3583                           tblptrl	equ	0xFF6
  3584                           tablat	equ	0xFF5
  3585                           prodh	equ	0xFF4
  3586                           prodl	equ	0xFF3
  3587                           intcon	equ	0xFF2
  3588                           intcon2	equ	0xFF1
  3589                           intcon3	equ	0xFF0
  3590                           postinc0	equ	0xFEE
  3591                           wreg	equ	0xFE8
  3592                           postinc1	equ	0xFE6
  3593                           postdec1	equ	0xFE5
  3594                           fsr1h	equ	0xFE2
  3595                           fsr1l	equ	0xFE1
  3596                           postinc2	equ	0xFDE
  3597                           postdec2	equ	0xFDD
  3598                           fsr2h	equ	0xFDA
  3599                           fsr2l	equ	0xFD9
  3600                           status	equ	0xFD8
  3601                           
  3602 ;; *************** function _troca_de_tela *****************
  3603 ;; Defined at:
  3604 ;;		line 373 in file "main.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;		None
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;		None
  3609 ;; Return value:  Size  Location     Type
  3610 ;;                  1    wreg      void 
  3611 ;; Registers used:
  3612 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3613 ;; Tracked objects:
  3614 ;;		On entry : 0/0
  3615 ;;		On exit  : 0/0
  3616 ;;		Unchanged: 0/0
  3617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3618 ;;      Params:         0       0       0       0       0       0       0       0       0
  3619 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3620 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3621 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3622 ;;Total ram usage:        1 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:    7
  3625 ;; This function calls:
  3626 ;;		_escreve_cmd_lcd
  3627 ;;		_escreve_frase_ram_lcd
  3628 ;;		_escreve_inteiro_lcd
  3629 ;;		_fix
  3630 ;;		_mostra_dados_display
  3631 ;;		_posicao_cursor_lcd
  3632 ;; This function is called by:
  3633 ;;		_inicializa_tarefas
  3634 ;;		_escalonador
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           	psect	text12
  3639  002070                     __ptext12:
  3640                           	opt stack 0
  3641  002070                     _troca_de_tela:
  3642                           	opt stack 22
  3643                           
  3644                           ;main.c: 375: static unsigned char state = 0;
  3645                           ;main.c: 376: static unsigned char last_state = 0;
  3646                           ;main.c: 378: if(!PORTEbits.RE0 || (state == 1 ))
  3647                           
  3648                           ;incstack = 0
  3649  002070  A084               	btfss	3972,0,c	;volatile
  3650  002072  D003               	goto	u17930
  3651  002074  0437               	decf	troca_de_tela@state,w,c
  3652  002076  A4D8               	btfss	status,2,c
  3653  002078  D0F0               	goto	l1496
  3654  00207A                     u17930:
  3655                           
  3656                           ;main.c: 379: {
  3657                           ;main.c: 381: if(!time_atualizacao)
  3658  00207A  5032               	movf	_time_atualizacao,w,c
  3659  00207C  1033               	iorwf	_time_atualizacao+1,w,c
  3660  00207E  A4D8               	btfss	status,2,c
  3661  002080  D066               	goto	l1499
  3662                           
  3663                           ;main.c: 382: {
  3664                           ;main.c: 383: if(!fence_flag[2].point)
  3665  002082  0100               	movlb	0	; () banked
  3666  002084  B1F5               	btfsc	(_fence_flag+2)& (0+255),0,b
  3667  002086  D00D               	goto	l1500
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;main.c: 384: {
  3671                           ;main.c: 385: posicao_cursor_lcd(1,8);
  3672  002088  0E08               	movlw	8
  3673  00208A  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3674  00208C  0E01               	movlw	1
  3675  00208E  EC5A  F028         	call	_posicao_cursor_lcd
  3676                           
  3677                           ;main.c: 386: escreve_frase_ram_lcd("DENTRO");
  3678  002092  0E3A               	movlw	low STR_27
  3679  002094  0100               	movlb	0	; () banked
  3680  002096  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3681  002098  0E62               	movlw	high STR_27
  3682  00209A  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3683  00209C  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3684                           
  3685                           ;main.c: 387: }
  3686  0020A0  D044               	goto	l1501
  3687  0020A2                     l1500:
  3688                           
  3689                           ;main.c: 388: else
  3690                           ;main.c: 389: {
  3691                           ;main.c: 390: posicao_cursor_lcd(1,8);
  3692  0020A2  0E08               	movlw	8
  3693  0020A4  0100               	movlb	0	; () banked
  3694  0020A6  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3695  0020A8  0E01               	movlw	1
  3696  0020AA  EC5A  F028         	call	_posicao_cursor_lcd
  3697                           
  3698                           ;main.c: 391: escreve_frase_ram_lcd("FORA");
  3699  0020AE  0E5F               	movlw	low STR_26
  3700  0020B0  0100               	movlb	0	; () banked
  3701  0020B2  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3702  0020B4  0E62               	movlw	high STR_26
  3703  0020B6  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3704  0020B8  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3705                           
  3706                           ;main.c: 392: posicao_cursor_lcd(1,13);
  3707  0020BC  0E0D               	movlw	13
  3708  0020BE  0100               	movlb	0	; () banked
  3709  0020C0  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3710  0020C2  0E01               	movlw	1
  3711  0020C4  EC5A  F028         	call	_posicao_cursor_lcd
  3712                           
  3713                           ;main.c: 393: escreve_inteiro_lcd(fence_flag[0].point);
  3714  0020C8  0100               	movlb	0	; () banked
  3715  0020CA  A1F3               	btfss	_fence_flag& (0+255),0,b
  3716  0020CC  D003               	goto	u17960
  3717  0020CE  6B8F               	clrf	??_troca_de_tela& (0+255),b
  3718  0020D0  2B8F               	incf	??_troca_de_tela& (0+255),f,b
  3719  0020D2  D002               	goto	u17968
  3720  0020D4                     u17960:
  3721  0020D4  0100               	movlb	0	; () banked
  3722  0020D6  6B8F               	clrf	??_troca_de_tela& (0+255),b
  3723  0020D8                     u17968:
  3724  0020D8  518F               	movf	??_troca_de_tela& (0+255),w,b
  3725  0020DA  6F84               	movwf	escreve_inteiro_lcd@valor& (0+255),b
  3726  0020DC  6B85               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  3727  0020DE  6B86               	clrf	(escreve_inteiro_lcd@valor+2)& (0+255),b
  3728  0020E0  6B87               	clrf	(escreve_inteiro_lcd@valor+3)& (0+255),b
  3729  0020E2  EC2E  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3730                           
  3731                           ;main.c: 394: posicao_cursor_lcd(1,14);
  3732  0020E6  0E0E               	movlw	14
  3733  0020E8  0100               	movlb	0	; () banked
  3734  0020EA  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3735  0020EC  0E01               	movlw	1
  3736  0020EE  EC5A  F028         	call	_posicao_cursor_lcd
  3737                           
  3738                           ;main.c: 395: escreve_frase_ram_lcd("|");
  3739  0020F2  0E7D               	movlw	low STR_30
  3740  0020F4  0100               	movlb	0	; () banked
  3741  0020F6  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3742  0020F8  0E62               	movlw	high STR_30
  3743  0020FA  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3744  0020FC  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3745                           
  3746                           ;main.c: 396: posicao_cursor_lcd(1,15);
  3747  002100  0E0F               	movlw	15
  3748  002102  0100               	movlb	0	; () banked
  3749  002104  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3750  002106  0E01               	movlw	1
  3751  002108  EC5A  F028         	call	_posicao_cursor_lcd
  3752                           
  3753                           ;main.c: 397: escreve_inteiro_lcd(fence_flag[1].point);
  3754  00210C  0100               	movlb	0	; () banked
  3755  00210E  A1F4               	btfss	(_fence_flag+1)& (0+255),0,b
  3756  002110  D003               	goto	u17970
  3757  002112  6B8F               	clrf	??_troca_de_tela& (0+255),b
  3758  002114  2B8F               	incf	??_troca_de_tela& (0+255),f,b
  3759  002116  D002               	goto	u17978
  3760  002118                     u17970:
  3761  002118  0100               	movlb	0	; () banked
  3762  00211A  6B8F               	clrf	??_troca_de_tela& (0+255),b
  3763  00211C                     u17978:
  3764  00211C  518F               	movf	??_troca_de_tela& (0+255),w,b
  3765  00211E  6F84               	movwf	escreve_inteiro_lcd@valor& (0+255),b
  3766  002120  6B85               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  3767  002122  6B86               	clrf	(escreve_inteiro_lcd@valor+2)& (0+255),b
  3768  002124  6B87               	clrf	(escreve_inteiro_lcd@valor+3)& (0+255),b
  3769  002126  EC2E  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3770  00212A                     l1501:
  3771                           
  3772                           ;main.c: 398: }
  3773                           ;main.c: 400: posicao_cursor_lcd(2,8);
  3774  00212A  0E08               	movlw	8
  3775  00212C  0100               	movlb	0	; () banked
  3776  00212E  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3777  002130  0E02               	movlw	2
  3778  002132  EC5A  F028         	call	_posicao_cursor_lcd
  3779                           
  3780                           ;main.c: 401: escreve_frase_ram_lcd(fix());
  3781  002136  ECC8  F02F         	call	_fix	;wreg free
  3782  00213A  C060  F063         	movff	?_fix,escreve_frase_ram_lcd@buffer
  3783  00213E  C061  F064         	movff	?_fix+1,escreve_frase_ram_lcd@buffer+1
  3784  002142  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3785                           
  3786                           ;main.c: 402: time_atualizacao = 10000;
  3787  002146  0E27               	movlw	39
  3788  002148  6E33               	movwf	_time_atualizacao+1,c
  3789  00214A  0E10               	movlw	16
  3790  00214C  6E32               	movwf	_time_atualizacao,c
  3791  00214E                     l1499:
  3792                           
  3793                           ;main.c: 403: }
  3794                           ;main.c: 405: if(last_state != 1)
  3795  00214E  0436               	decf	troca_de_tela@last_state,w,c
  3796  002150  B4D8               	btfsc	status,2,c
  3797  002152  D081               	goto	l1502
  3798                           
  3799                           ;main.c: 406: {
  3800                           ;main.c: 407: state = 1;
  3801  002154  0E01               	movlw	1
  3802  002156  6E37               	movwf	troca_de_tela@state,c
  3803                           
  3804                           ;main.c: 408: escreve_cmd_lcd(0b00000001);
  3805  002158  0E01               	movlw	1
  3806  00215A  EC76  F026         	call	_escreve_cmd_lcd
  3807                           
  3808                           ;main.c: 409: posicao_cursor_lcd(1,0);
  3809  00215E  0E00               	movlw	0
  3810  002160  0100               	movlb	0	; () banked
  3811  002162  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3812  002164  0E01               	movlw	1
  3813  002166  EC5A  F028         	call	_posicao_cursor_lcd
  3814                           
  3815                           ;main.c: 410: escreve_frase_ram_lcd("FENCE:");
  3816  00216A  0E33               	movlw	low STR_31
  3817  00216C  0100               	movlb	0	; () banked
  3818  00216E  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3819  002170  0E62               	movlw	high STR_31
  3820  002172  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3821  002174  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3822                           
  3823                           ;main.c: 412: if(!fence_flag[2].point)
  3824  002178  0100               	movlb	0	; () banked
  3825  00217A  B1F5               	btfsc	(_fence_flag+2)& (0+255),0,b
  3826  00217C  D00D               	goto	l1503
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;main.c: 413: {
  3830                           ;main.c: 414: posicao_cursor_lcd(1,8);
  3831  00217E  0E08               	movlw	8
  3832  002180  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3833  002182  0E01               	movlw	1
  3834  002184  EC5A  F028         	call	_posicao_cursor_lcd
  3835                           
  3836                           ;main.c: 415: escreve_frase_ram_lcd("DENTRO");
  3837  002188  0E3A               	movlw	low STR_27
  3838  00218A  0100               	movlb	0	; () banked
  3839  00218C  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3840  00218E  0E62               	movlw	high STR_27
  3841  002190  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3842  002192  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3843                           
  3844                           ;main.c: 416: }
  3845  002196  D044               	goto	l1504
  3846  002198                     l1503:
  3847                           
  3848                           ;main.c: 417: else
  3849                           ;main.c: 418: {
  3850                           ;main.c: 419: posicao_cursor_lcd(1,8);
  3851  002198  0E08               	movlw	8
  3852  00219A  0100               	movlb	0	; () banked
  3853  00219C  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3854  00219E  0E01               	movlw	1
  3855  0021A0  EC5A  F028         	call	_posicao_cursor_lcd
  3856                           
  3857                           ;main.c: 420: escreve_frase_ram_lcd("FORA");
  3858  0021A4  0E5F               	movlw	low STR_26
  3859  0021A6  0100               	movlb	0	; () banked
  3860  0021A8  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3861  0021AA  0E62               	movlw	high STR_26
  3862  0021AC  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3863  0021AE  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3864                           
  3865                           ;main.c: 421: posicao_cursor_lcd(1,13);
  3866  0021B2  0E0D               	movlw	13
  3867  0021B4  0100               	movlb	0	; () banked
  3868  0021B6  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3869  0021B8  0E01               	movlw	1
  3870  0021BA  EC5A  F028         	call	_posicao_cursor_lcd
  3871                           
  3872                           ;main.c: 422: escreve_inteiro_lcd(fence_flag[0].point);
  3873  0021BE  0100               	movlb	0	; () banked
  3874  0021C0  A1F3               	btfss	_fence_flag& (0+255),0,b
  3875  0021C2  D003               	goto	u18000
  3876  0021C4  6B8F               	clrf	??_troca_de_tela& (0+255),b
  3877  0021C6  2B8F               	incf	??_troca_de_tela& (0+255),f,b
  3878  0021C8  D002               	goto	u18008
  3879  0021CA                     u18000:
  3880  0021CA  0100               	movlb	0	; () banked
  3881  0021CC  6B8F               	clrf	??_troca_de_tela& (0+255),b
  3882  0021CE                     u18008:
  3883  0021CE  518F               	movf	??_troca_de_tela& (0+255),w,b
  3884  0021D0  6F84               	movwf	escreve_inteiro_lcd@valor& (0+255),b
  3885  0021D2  6B85               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  3886  0021D4  6B86               	clrf	(escreve_inteiro_lcd@valor+2)& (0+255),b
  3887  0021D6  6B87               	clrf	(escreve_inteiro_lcd@valor+3)& (0+255),b
  3888  0021D8  EC2E  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3889                           
  3890                           ;main.c: 423: posicao_cursor_lcd(1,14);
  3891  0021DC  0E0E               	movlw	14
  3892  0021DE  0100               	movlb	0	; () banked
  3893  0021E0  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3894  0021E2  0E01               	movlw	1
  3895  0021E4  EC5A  F028         	call	_posicao_cursor_lcd
  3896                           
  3897                           ;main.c: 424: escreve_frase_ram_lcd("|");
  3898  0021E8  0E7D               	movlw	low STR_30
  3899  0021EA  0100               	movlb	0	; () banked
  3900  0021EC  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3901  0021EE  0E62               	movlw	high STR_30
  3902  0021F0  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3903  0021F2  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3904                           
  3905                           ;main.c: 425: posicao_cursor_lcd(1,15);
  3906  0021F6  0E0F               	movlw	15
  3907  0021F8  0100               	movlb	0	; () banked
  3908  0021FA  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3909  0021FC  0E01               	movlw	1
  3910  0021FE  EC5A  F028         	call	_posicao_cursor_lcd
  3911                           
  3912                           ;main.c: 426: escreve_inteiro_lcd(fence_flag[1].point);
  3913  002202  0100               	movlb	0	; () banked
  3914  002204  A1F4               	btfss	(_fence_flag+1)& (0+255),0,b
  3915  002206  D003               	goto	u18010
  3916  002208  6B8F               	clrf	??_troca_de_tela& (0+255),b
  3917  00220A  2B8F               	incf	??_troca_de_tela& (0+255),f,b
  3918  00220C  D002               	goto	u18018
  3919  00220E                     u18010:
  3920  00220E  0100               	movlb	0	; () banked
  3921  002210  6B8F               	clrf	??_troca_de_tela& (0+255),b
  3922  002212                     u18018:
  3923  002212  518F               	movf	??_troca_de_tela& (0+255),w,b
  3924  002214  6F84               	movwf	escreve_inteiro_lcd@valor& (0+255),b
  3925  002216  6B85               	clrf	(escreve_inteiro_lcd@valor+1)& (0+255),b
  3926  002218  6B86               	clrf	(escreve_inteiro_lcd@valor+2)& (0+255),b
  3927  00221A  6B87               	clrf	(escreve_inteiro_lcd@valor+3)& (0+255),b
  3928  00221C  EC2E  F02C         	call	_escreve_inteiro_lcd	;wreg free
  3929  002220                     l1504:
  3930                           
  3931                           ;main.c: 427: }
  3932                           ;main.c: 429: posicao_cursor_lcd(2,0);
  3933  002220  0E00               	movlw	0
  3934  002222  0100               	movlb	0	; () banked
  3935  002224  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3936  002226  0E02               	movlw	2
  3937  002228  EC5A  F028         	call	_posicao_cursor_lcd
  3938                           
  3939                           ;main.c: 430: escreve_frase_ram_lcd("FIX:");
  3940  00222C  0E5A               	movlw	low STR_35
  3941  00222E  0100               	movlb	0	; () banked
  3942  002230  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  3943  002232  0E62               	movlw	high STR_35
  3944  002234  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  3945  002236  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3946                           
  3947                           ;main.c: 431: posicao_cursor_lcd(2,8);
  3948  00223A  0E08               	movlw	8
  3949  00223C  0100               	movlb	0	; () banked
  3950  00223E  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  3951  002240  0E02               	movlw	2
  3952  002242  EC5A  F028         	call	_posicao_cursor_lcd
  3953                           
  3954                           ;main.c: 432: escreve_frase_ram_lcd(fix());
  3955  002246  ECC8  F02F         	call	_fix	;wreg free
  3956  00224A  C060  F063         	movff	?_fix,escreve_frase_ram_lcd@buffer
  3957  00224E  C061  F064         	movff	?_fix+1,escreve_frase_ram_lcd@buffer+1
  3958  002252  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  3959  002256                     l1502:
  3960                           
  3961                           ;main.c: 433: }
  3962                           ;main.c: 434: last_state = 1;
  3963  002256  0E01               	movlw	1
  3964  002258  6E36               	movwf	troca_de_tela@last_state,c
  3965  00225A                     l1496:
  3966                           
  3967                           ;main.c: 436: }
  3968                           ;main.c: 446: if(!PORTEbits.RE1 || (state == 2))
  3969  00225A  A284               	btfss	3972,1,c	;volatile
  3970  00225C  D004               	goto	u18030
  3971  00225E  0E02               	movlw	2
  3972  002260  1837               	xorwf	troca_de_tela@state,w,c
  3973  002262  A4D8               	btfss	status,2,c
  3974  002264  D031               	goto	l1505
  3975  002266                     u18030:
  3976                           
  3977                           ;main.c: 447: {
  3978                           ;main.c: 448: if(!time_atualizacao)
  3979  002266  5032               	movf	_time_atualizacao,w,c
  3980  002268  1033               	iorwf	_time_atualizacao+1,w,c
  3981  00226A  A4D8               	btfss	status,2,c
  3982  00226C  D006               	goto	l1508
  3983                           
  3984                           ;main.c: 449: {
  3985                           ;main.c: 450: mostra_dados_display();
  3986  00226E  EC2B  F02E         	call	_mostra_dados_display	;wreg free
  3987                           
  3988                           ;main.c: 451: time_atualizacao = 2000;
  3989  002272  0E07               	movlw	7
  3990  002274  6E33               	movwf	_time_atualizacao+1,c
  3991  002276  0ED0               	movlw	208
  3992  002278  6E32               	movwf	_time_atualizacao,c
  3993  00227A                     l1508:
  3994                           
  3995                           ;main.c: 452: }
  3996                           ;main.c: 455: if(last_state != 2)
  3997  00227A  0E02               	movlw	2
  3998  00227C  1836               	xorwf	troca_de_tela@last_state,w,c
  3999  00227E  B4D8               	btfsc	status,2,c
  4000  002280  D021               	goto	l1509
  4001                           
  4002                           ;main.c: 456: {
  4003                           ;main.c: 457: state = 2;
  4004  002282  0E02               	movlw	2
  4005  002284  6E37               	movwf	troca_de_tela@state,c
  4006                           
  4007                           ;main.c: 458: escreve_cmd_lcd(0b00000001);
  4008  002286  0E01               	movlw	1
  4009  002288  EC76  F026         	call	_escreve_cmd_lcd
  4010                           
  4011                           ;main.c: 459: posicao_cursor_lcd(1,0);
  4012  00228C  0E00               	movlw	0
  4013  00228E  0100               	movlb	0	; () banked
  4014  002290  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  4015  002292  0E01               	movlw	1
  4016  002294  EC5A  F028         	call	_posicao_cursor_lcd
  4017                           
  4018                           ;main.c: 460: escreve_frase_ram_lcd("lt:");
  4019  002298  0E72               	movlw	low STR_36
  4020  00229A  0100               	movlb	0	; () banked
  4021  00229C  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  4022  00229E  0E62               	movlw	high STR_36
  4023  0022A0  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  4024  0022A2  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  4025                           
  4026                           ;main.c: 461: posicao_cursor_lcd(2,0);
  4027  0022A6  0E00               	movlw	0
  4028  0022A8  0100               	movlb	0	; () banked
  4029  0022AA  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  4030  0022AC  0E02               	movlw	2
  4031  0022AE  EC5A  F028         	call	_posicao_cursor_lcd
  4032                           
  4033                           ;main.c: 462: escreve_frase_ram_lcd("lo:");
  4034  0022B2  0E6E               	movlw	low STR_37
  4035  0022B4  0100               	movlb	0	; () banked
  4036  0022B6  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  4037  0022B8  0E62               	movlw	high STR_37
  4038  0022BA  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  4039  0022BC  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  4040                           
  4041                           ;main.c: 463: mostra_dados_display();
  4042  0022C0  EC2B  F02E         	call	_mostra_dados_display	;wreg free
  4043  0022C4                     l1509:
  4044                           
  4045                           ;main.c: 464: }
  4046                           ;main.c: 465: last_state = 2;
  4047  0022C4  0E02               	movlw	2
  4048  0022C6  6E36               	movwf	troca_de_tela@last_state,c
  4049  0022C8                     l1505:
  4050                           
  4051                           ;main.c: 466: }
  4052                           ;main.c: 471: if(!state)
  4053  0022C8  5037               	movf	troca_de_tela@state,w,c
  4054  0022CA  A4D8               	btfss	status,2,c
  4055  0022CC  0012               	return	
  4056                           
  4057                           ;main.c: 472: {
  4058                           ;main.c: 473: if(last_state != 4)
  4059  0022CE  0E04               	movlw	4
  4060  0022D0  1836               	xorwf	troca_de_tela@last_state,w,c
  4061  0022D2  B4D8               	btfsc	status,2,c
  4062  0022D4  D01D               	goto	l1511
  4063                           
  4064                           ;main.c: 474: {
  4065                           ;main.c: 475: escreve_cmd_lcd(0b00000001);
  4066  0022D6  0E01               	movlw	1
  4067  0022D8  EC76  F026         	call	_escreve_cmd_lcd
  4068                           
  4069                           ;main.c: 476: posicao_cursor_lcd(1,0);
  4070  0022DC  0E00               	movlw	0
  4071  0022DE  0100               	movlb	0	; () banked
  4072  0022E0  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  4073  0022E2  0E01               	movlw	1
  4074  0022E4  EC5A  F028         	call	_posicao_cursor_lcd
  4075                           
  4076                           ;main.c: 477: escreve_frase_ram_lcd("B1:FENCE");
  4077  0022E8  0E19               	movlw	low STR_38
  4078  0022EA  0100               	movlb	0	; () banked
  4079  0022EC  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  4080  0022EE  0E62               	movlw	high STR_38
  4081  0022F0  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  4082  0022F2  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  4083                           
  4084                           ;main.c: 478: posicao_cursor_lcd(2,0);
  4085  0022F6  0E00               	movlw	0
  4086  0022F8  0100               	movlb	0	; () banked
  4087  0022FA  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  4088  0022FC  0E02               	movlw	2
  4089  0022FE  EC5A  F028         	call	_posicao_cursor_lcd
  4090                           
  4091                           ;main.c: 479: escreve_frase_ram_lcd("B2:LTLO");
  4092  002302  0E2B               	movlw	low STR_39
  4093  002304  0100               	movlb	0	; () banked
  4094  002306  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  4095  002308  0E62               	movlw	high STR_39
  4096  00230A  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  4097  00230C  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  4098  002310                     l1511:
  4099                           
  4100                           ;main.c: 481: }
  4101                           ;main.c: 482: last_state = 4;
  4102  002310  0E04               	movlw	4
  4103  002312  6E36               	movwf	troca_de_tela@last_state,c
  4104  002314  0012               	return	
  4105  002316                     __end_of_troca_de_tela:
  4106                           	opt stack 0
  4107                           tosu	equ	0xFFF
  4108                           tosh	equ	0xFFE
  4109                           tosl	equ	0xFFD
  4110                           pclath	equ	0xFFA
  4111                           tblptru	equ	0xFF8
  4112                           tblptrh	equ	0xFF7
  4113                           tblptrl	equ	0xFF6
  4114                           tablat	equ	0xFF5
  4115                           prodh	equ	0xFF4
  4116                           prodl	equ	0xFF3
  4117                           intcon	equ	0xFF2
  4118                           intcon2	equ	0xFF1
  4119                           intcon3	equ	0xFF0
  4120                           postinc0	equ	0xFEE
  4121                           wreg	equ	0xFE8
  4122                           postinc1	equ	0xFE6
  4123                           postdec1	equ	0xFE5
  4124                           fsr1h	equ	0xFE2
  4125                           fsr1l	equ	0xFE1
  4126                           postinc2	equ	0xFDE
  4127                           postdec2	equ	0xFDD
  4128                           fsr2h	equ	0xFDA
  4129                           fsr2l	equ	0xFD9
  4130                           status	equ	0xFD8
  4131                           
  4132 ;; *************** function _disparo_gravacao *****************
  4133 ;; Defined at:
  4134 ;;		line 350 in file "main.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;		None
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;  fix_gps         2   36[BANK2 ] PTR unsigned char 
  4139 ;;		 -> rawFix(2), 
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4149 ;;      Params:         0       0       0       0       0       0       0       0       0
  4150 ;;      Locals:         0       0       0       2       0       0       0       0       0
  4151 ;;      Temps:          0       0       0       1       0       0       0       0       0
  4152 ;;      Totals:         0       0       0       3       0       0       0       0       0
  4153 ;;Total ram usage:        3 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:   17
  4156 ;; This function calls:
  4157 ;;		_fix
  4158 ;;		_grava_sd
  4159 ;;		_verifica_fence
  4160 ;; This function is called by:
  4161 ;;		_inicializa_tarefas
  4162 ;;		_escalonador
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text13
  4167  005C20                     __ptext13:
  4168                           	opt stack 0
  4169  005C20                     _disparo_gravacao:
  4170                           	opt stack 12
  4171                           
  4172                           ;main.c: 352: unsigned char *fix_gps;
  4173                           ;main.c: 353: if(!time_sd)
  4174                           
  4175                           ;incstack = 0
  4176  005C20  5034               	movf	_time_sd,w,c
  4177  005C22  1035               	iorwf	_time_sd+1,w,c
  4178  005C24  A4D8               	btfss	status,2,c
  4179  005C26  0012               	return	
  4180                           
  4181                           ;main.c: 354: {
  4182                           ;main.c: 355: fix_gps = fix();
  4183  005C28  ECC8  F02F         	call	_fix	;wreg free
  4184  005C2C  C060  F262         	movff	?_fix,disparo_gravacao@fix_gps
  4185  005C30  C061  F263         	movff	?_fix+1,disparo_gravacao@fix_gps+1
  4186                           
  4187                           ;main.c: 356: if(fix_gps[0] == '0')
  4188  005C34  C262  FFD9         	movff	disparo_gravacao@fix_gps,fsr2l
  4189  005C38  C263  FFDA         	movff	disparo_gravacao@fix_gps+1,fsr2h
  4190  005C3C  0E30               	movlw	48
  4191  005C3E  18DE               	xorwf	postinc2,w,c
  4192  005C40  A4D8               	btfss	status,2,c
  4193  005C42  D004               	goto	l1488
  4194                           
  4195                           ;main.c: 357: {
  4196                           ;main.c: 358: verifica_fence();
  4197  005C44  EC99  F028         	call	_verifica_fence	;wreg free
  4198                           
  4199                           ;main.c: 359: grava_sd();
  4200  005C48  EC56  F02F         	call	_grava_sd	;wreg free
  4201  005C4C                     l1488:
  4202                           
  4203                           ;main.c: 360: }
  4204                           ;main.c: 361: time_sd = 1000;
  4205  005C4C  0E03               	movlw	3
  4206  005C4E  6E35               	movwf	_time_sd+1,c
  4207  005C50  0EE8               	movlw	232
  4208  005C52  6E34               	movwf	_time_sd,c
  4209  005C54  0012               	return	
  4210  005C56                     __end_of_disparo_gravacao:
  4211                           	opt stack 0
  4212                           tosu	equ	0xFFF
  4213                           tosh	equ	0xFFE
  4214                           tosl	equ	0xFFD
  4215                           pclath	equ	0xFFA
  4216                           tblptru	equ	0xFF8
  4217                           tblptrh	equ	0xFF7
  4218                           tblptrl	equ	0xFF6
  4219                           tablat	equ	0xFF5
  4220                           prodh	equ	0xFF4
  4221                           prodl	equ	0xFF3
  4222                           intcon	equ	0xFF2
  4223                           intcon2	equ	0xFF1
  4224                           intcon3	equ	0xFF0
  4225                           postinc0	equ	0xFEE
  4226                           wreg	equ	0xFE8
  4227                           postinc1	equ	0xFE6
  4228                           postdec1	equ	0xFE5
  4229                           fsr1h	equ	0xFE2
  4230                           fsr1l	equ	0xFE1
  4231                           postinc2	equ	0xFDE
  4232                           postdec2	equ	0xFDD
  4233                           fsr2h	equ	0xFDA
  4234                           fsr2l	equ	0xFD9
  4235                           status	equ	0xFD8
  4236                           
  4237 ;; *************** function _verifica_dados_operacionais *****************
  4238 ;; Defined at:
  4239 ;;		line 306 in file "main.c"
  4240 ;; Parameters:    Size  Location     Type
  4241 ;;		None
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;  velocidade_a    2   84[BANK0 ] unsigned int 
  4244 ;;  vel             1   83[BANK0 ] unsigned char 
  4245 ;;  flag_gps        1   82[BANK0 ] unsigned char 
  4246 ;; Return value:  Size  Location     Type
  4247 ;;                  1    wreg      void 
  4248 ;; Registers used:
  4249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4255 ;;      Params:         0       0       0       0       0       0       0       0       0
  4256 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4257 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4258 ;;      Totals:         0       8       0       0       0       0       0       0       0
  4259 ;;Total ram usage:        8 bytes
  4260 ;; Hardware stack levels used:    1
  4261 ;; Hardware stack levels required when called:   10
  4262 ;; This function calls:
  4263 ;;		___awtoft
  4264 ;;		___ftmul
  4265 ;;		___fttol
  4266 ;;		_atoi
  4267 ;;		_verifica_fence
  4268 ;; This function is called by:
  4269 ;;		_inicializa_tarefas
  4270 ;;		_escalonador
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           	psect	text14
  4275  00443C                     __ptext14:
  4276                           	opt stack 0
  4277  00443C                     _verifica_dados_operacionais:
  4278                           	opt stack 19
  4279                           
  4280                           ;main.c: 308: unsigned char flag_gps = 0;
  4281                           
  4282                           ;incstack = 0
  4283  00443C  0E00               	movlw	0
  4284  00443E  0100               	movlb	0	; () banked
  4285  004440  6FB2               	movwf	verifica_dados_operacionais@flag_gps& (0+255),b
  4286                           
  4287                           ;main.c: 309: unsigned char vel = 50;
  4288  004442  0E32               	movlw	50
  4289  004444  6FB3               	movwf	verifica_dados_operacionais@vel& (0+255),b
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;main.c: 310: static unsigned char contador;
  4293                           ;main.c: 311: static unsigned long int velocidade_media;
  4294                           ;main.c: 313: unsigned int velocidade_atual = (atoi(Speed)*1.852);
  4295  004446  0E0E               	movlw	14
  4296  004448  6F74               	movwf	___ftmul@f2& (0+255),b
  4297  00444A  0EED               	movlw	237
  4298  00444C  6F75               	movwf	(___ftmul@f2+1)& (0+255),b
  4299  00444E  0E3F               	movlw	63
  4300  004450  6F76               	movwf	(___ftmul@f2+2)& (0+255),b
  4301  004452  0E00               	movlw	0
  4302  004454  6F66               	movwf	atoi@s& (0+255),b
  4303  004456  0E00               	movlw	0
  4304  004458  6F67               	movwf	(atoi@s+1)& (0+255),b
  4305  00445A  EC4B  F021         	call	_atoi	;wreg free
  4306  00445E  C066  F06D         	movff	?_atoi,___awtoft@c
  4307  004462  C067  F06E         	movff	?_atoi+1,___awtoft@c+1
  4308  004466  ECD6  F02D         	call	___awtoft	;wreg free
  4309  00446A  C06D  F071         	movff	?___awtoft,___ftmul@f1
  4310  00446E  C06E  F072         	movff	?___awtoft+1,___ftmul@f1+1
  4311  004472  C06F  F073         	movff	?___awtoft+2,___ftmul@f1+2
  4312  004476  ECD0  F020         	call	___ftmul	;wreg free
  4313  00447A  C071  F080         	movff	?___ftmul,___fttol@f1
  4314  00447E  C072  F081         	movff	?___ftmul+1,___fttol@f1+1
  4315  004482  C073  F082         	movff	?___ftmul+2,___fttol@f1+2
  4316  004486  EC54  F020         	call	___fttol	;wreg free
  4317  00448A  C080  F0B4         	movff	?___fttol,verifica_dados_operacionais@velocidade_atual
  4318  00448E  C081  F0B5         	movff	?___fttol+1,verifica_dados_operacionais@velocidade_atual+1
  4319                           
  4320                           ;main.c: 314: verifica_fence();
  4321  004492  EC99  F028         	call	_verifica_fence	;wreg free
  4322                           
  4323                           ;main.c: 316: if( velocidade_atual > vel)
  4324  004496  0100               	movlb	0	; () banked
  4325  004498  51B3               	movf	verifica_dados_operacionais@vel& (0+255),w,b
  4326  00449A  6FAE               	movwf	??_verifica_dados_operacionais& (0+255),b
  4327  00449C  6BAF               	clrf	(??_verifica_dados_operacionais+1)& (0+255),b
  4328  00449E  51B4               	movf	verifica_dados_operacionais@velocidade_atual& (0+255),w,b
  4329  0044A0  5DAE               	subwf	??_verifica_dados_operacionais& (0+255),w,b
  4330  0044A2  51B5               	movf	(verifica_dados_operacionais@velocidade_atual+1)& (0+255),w,b
  4331  0044A4  59AF               	subwfb	(??_verifica_dados_operacionais+1)& (0+255),w,b
  4332  0044A6  B0D8               	btfsc	status,0,c
  4333  0044A8  D00C               	goto	l1481
  4334                           
  4335                           ; BSR set to: 0
  4336                           ;main.c: 317: {
  4337                           ;main.c: 318: velocidade_media = velocidade_media + velocidade_atual;
  4338  0044AA  51B4               	movf	verifica_dados_operacionais@velocidade_atual& (0+255),w,b
  4339  0044AC  25EF               	addwf	verifica_dados_operacionais@velocidade_media& (0+255),w,b
  4340  0044AE  6FEF               	movwf	verifica_dados_operacionais@velocidade_media& (0+255),b
  4341  0044B0  51B5               	movf	(verifica_dados_operacionais@velocidade_atual+1)& (0+255),w,b
  4342  0044B2  21F0               	addwfc	(verifica_dados_operacionais@velocidade_media+1)& (0+255),w,b
  4343  0044B4  6FF0               	movwf	(verifica_dados_operacionais@velocidade_media+1)& (0+255),b
  4344  0044B6  0E00               	movlw	0
  4345  0044B8  21F1               	addwfc	(verifica_dados_operacionais@velocidade_media+2)& (0+255),w,b
  4346  0044BA  6FF1               	movwf	(verifica_dados_operacionais@velocidade_media+2)& (0+255),b
  4347  0044BC  0E00               	movlw	0
  4348  0044BE  21F2               	addwfc	(verifica_dados_operacionais@velocidade_media+3)& (0+255),w,b
  4349  0044C0  6FF2               	movwf	(verifica_dados_operacionais@velocidade_media+3)& (0+255),b
  4350  0044C2                     l1481:
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;main.c: 320: }
  4354                           ;main.c: 321: contador++;
  4355                           
  4356                           ; BSR set to: 0
  4357  0044C2  2BFE               	incf	verifica_dados_operacionais@contador& (0+255),f,b
  4358                           
  4359                           ; BSR set to: 0
  4360                           ;main.c: 322: if(contador == 8)
  4361  0044C4  0E08               	movlw	8
  4362  0044C6  19FE               	xorwf	verifica_dados_operacionais@contador& (0+255),w,b
  4363  0044C8  A4D8               	btfss	status,2,c
  4364  0044CA  0012               	return	
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;main.c: 325: if(velocidade_media> velocidade_atual)
  4368  0044CC  C0EF  F0AE         	movff	verifica_dados_operacionais@velocidade_media,??_verifica_dados_operacionais
  4369  0044D0  C0F0  F0AF         	movff	verifica_dados_operacionais@velocidade_media+1,??_verifica_dados_operacionais+1
  4370  0044D4  C0F1  F0B0         	movff	verifica_dados_operacionais@velocidade_media+2,??_verifica_dados_operacionais+2
  4371  0044D8  C0F2  F0B1         	movff	verifica_dados_operacionais@velocidade_media+3,??_verifica_dados_operacionais+3
  4372  0044DC  0E04               	movlw	4
  4373  0044DE  D005               	goto	u17890
  4374  0044E0                     u17895:
  4375  0044E0  90D8               	bcf	status,0,c
  4376  0044E2  33B1               	rrcf	(??_verifica_dados_operacionais+3)& (0+255),f,b
  4377  0044E4  33B0               	rrcf	(??_verifica_dados_operacionais+2)& (0+255),f,b
  4378  0044E6  33AF               	rrcf	(??_verifica_dados_operacionais+1)& (0+255),f,b
  4379  0044E8  33AE               	rrcf	??_verifica_dados_operacionais& (0+255),f,b
  4380  0044EA                     u17890:
  4381  0044EA  2EE8               	decfsz	wreg,f,c
  4382  0044EC  D7F9               	goto	u17895
  4383  0044EE  C0AE  F0EF         	movff	??_verifica_dados_operacionais,verifica_dados_operacionais@velocidade_media
  4384  0044F2  C0AF  F0F0         	movff	??_verifica_dados_operacionais+1,verifica_dados_operacionais@velocidade_media+1
  4385  0044F6  C0B0  F0F1         	movff	??_verifica_dados_operacionais+2,verifica_dados_operacionais@velocidade_media+2
  4386  0044FA  C0B1  F0F2         	movff	??_verifica_dados_operacionais+3,verifica_dados_operacionais@velocidade_media+3
  4387                           
  4388                           ; BSR set to: 0
  4389                           ;main.c: 330: }
  4390                           ;main.c: 334: contador = 0;
  4391                           
  4392                           ; BSR set to: 0
  4393                           
  4394                           ;main.c: 326: {
  4395  0044FE  0E00               	movlw	0
  4396  004500  6FFE               	movwf	verifica_dados_operacionais@contador& (0+255),b
  4397  004502  0012               	return	
  4398  004504                     __end_of_verifica_dados_operacionais:
  4399                           	opt stack 0
  4400                           tosu	equ	0xFFF
  4401                           tosh	equ	0xFFE
  4402                           tosl	equ	0xFFD
  4403                           pclath	equ	0xFFA
  4404                           tblptru	equ	0xFF8
  4405                           tblptrh	equ	0xFF7
  4406                           tblptrl	equ	0xFF6
  4407                           tablat	equ	0xFF5
  4408                           prodh	equ	0xFF4
  4409                           prodl	equ	0xFF3
  4410                           intcon	equ	0xFF2
  4411                           intcon2	equ	0xFF1
  4412                           intcon3	equ	0xFF0
  4413                           postinc0	equ	0xFEE
  4414                           wreg	equ	0xFE8
  4415                           postinc1	equ	0xFE6
  4416                           postdec1	equ	0xFE5
  4417                           fsr1h	equ	0xFE2
  4418                           fsr1l	equ	0xFE1
  4419                           postinc2	equ	0xFDE
  4420                           postdec2	equ	0xFDD
  4421                           fsr2h	equ	0xFDA
  4422                           fsr2l	equ	0xFD9
  4423                           status	equ	0xFD8
  4424                           
  4425 ;; *************** function _atoi *****************
  4426 ;; Defined at:
  4427 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  4428 ;; Parameters:    Size  Location     Type
  4429 ;;  s               2    6[BANK0 ] PTR const unsigned char 
  4430 ;;		 -> Speed(2), 
  4431 ;; Auto vars:     Size  Location     Type
  4432 ;;  a               2   11[BANK0 ] int 
  4433 ;;  sign            1   10[BANK0 ] unsigned char 
  4434 ;; Return value:  Size  Location     Type
  4435 ;;                  2    6[BANK0 ] int 
  4436 ;; Registers used:
  4437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4443 ;;      Params:         0       2       0       0       0       0       0       0       0
  4444 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4445 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4446 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4447 ;;Total ram usage:        7 bytes
  4448 ;; Hardware stack levels used:    1
  4449 ;; Hardware stack levels required when called:    4
  4450 ;; This function calls:
  4451 ;;		___wmul
  4452 ;;		_isdigit
  4453 ;; This function is called by:
  4454 ;;		_verifica_dados_operacionais
  4455 ;; This function uses a non-reentrant model
  4456 ;;
  4457                           
  4458                           	psect	text15
  4459  004296                     __ptext15:
  4460                           	opt stack 0
  4461  004296                     _atoi:
  4462                           	opt stack 24
  4463                           
  4464                           ; BSR set to: 0
  4465                           ;incstack = 0
  4466  004296  D003               	goto	l1786
  4467  004298  0100               	movlb	0	; () banked
  4468  00429A  4B66               	infsnz	atoi@s& (0+255),f,b
  4469  00429C  2B67               	incf	(atoi@s+1)& (0+255),f,b
  4470  00429E                     l1786:
  4471                           
  4472                           ; BSR set to: 0
  4473  00429E  C066  FFD9         	movff	atoi@s,fsr2l
  4474  0042A2  C067  FFDA         	movff	atoi@s+1,fsr2h
  4475  0042A6  0E20               	movlw	32
  4476  0042A8  18DE               	xorwf	postinc2,w,c
  4477  0042AA  B4D8               	btfsc	status,2,c
  4478  0042AC  D7F5               	goto	l1787
  4479  0042AE  C066  FFD9         	movff	atoi@s,fsr2l
  4480  0042B2  C067  FFDA         	movff	atoi@s+1,fsr2h
  4481  0042B6  0E09               	movlw	9
  4482  0042B8  18DE               	xorwf	postinc2,w,c
  4483  0042BA  B4D8               	btfsc	status,2,c
  4484  0042BC  D7ED               	goto	l1787
  4485  0042BE  0E00               	movlw	0
  4486  0042C0  0100               	movlb	0	; () banked
  4487  0042C2  6F6C               	movwf	(atoi@a+1)& (0+255),b
  4488  0042C4  0E00               	movlw	0
  4489  0042C6  6F6B               	movwf	atoi@a& (0+255),b
  4490  0042C8  0E00               	movlw	0
  4491  0042CA  6F6A               	movwf	atoi@sign& (0+255),b
  4492                           
  4493                           ; BSR set to: 0
  4494  0042CC  C066  FFD9         	movff	atoi@s,fsr2l
  4495  0042D0  C067  FFDA         	movff	atoi@s+1,fsr2h
  4496  0042D4  0E2D               	movlw	45
  4497  0042D6  18DE               	xorwf	postinc2,w,c
  4498  0042D8  A4D8               	btfss	status,2,c
  4499  0042DA  D002               	goto	l1789
  4500                           
  4501                           ; BSR set to: 0
  4502  0042DC  2B6A               	incf	atoi@sign& (0+255),f,b
  4503  0042DE  D026               	goto	l13336
  4504  0042E0                     l1789:
  4505                           
  4506                           ; BSR set to: 0
  4507                           
  4508                           ; BSR set to: 0
  4509  0042E0  C066  FFD9         	movff	atoi@s,fsr2l
  4510  0042E4  C067  FFDA         	movff	atoi@s+1,fsr2h
  4511  0042E8  0E2B               	movlw	43
  4512  0042EA  18DE               	xorwf	postinc2,w,c
  4513  0042EC  A4D8               	btfss	status,2,c
  4514  0042EE  D020               	goto	l1792
  4515  0042F0  D01D               	goto	l13336
  4516  0042F2                     
  4517                           ; BSR set to: 0
  4518  0042F2  C06B  F060         	movff	atoi@a,___wmul@multiplier
  4519  0042F6  C06C  F061         	movff	atoi@a+1,___wmul@multiplier+1
  4520  0042FA  0E00               	movlw	0
  4521  0042FC  0100               	movlb	0	; () banked
  4522  0042FE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4523  004300  0E0A               	movlw	10
  4524  004302  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4525  004304  ECE1  F02E         	call	___wmul	;wreg free
  4526  004308  C066  FFD9         	movff	atoi@s,fsr2l
  4527  00430C  C067  FFDA         	movff	atoi@s+1,fsr2h
  4528  004310  50DF               	movf	indf2,w,c
  4529  004312  0100               	movlb	0	; () banked
  4530  004314  6F68               	movwf	??_atoi& (0+255),b
  4531  004316  6B69               	clrf	(??_atoi+1)& (0+255),b
  4532  004318  5160               	movf	?___wmul& (0+255),w,b
  4533  00431A  2768               	addwf	??_atoi& (0+255),f,b
  4534  00431C  5161               	movf	(?___wmul+1)& (0+255),w,b
  4535  00431E  2369               	addwfc	(??_atoi+1)& (0+255),f,b
  4536  004320  0ED0               	movlw	208
  4537  004322  2568               	addwf	??_atoi& (0+255),w,b
  4538  004324  6F6B               	movwf	atoi@a& (0+255),b
  4539  004326  0EFF               	movlw	255
  4540  004328  2169               	addwfc	(??_atoi+1)& (0+255),w,b
  4541  00432A  6F6C               	movwf	(atoi@a+1)& (0+255),b
  4542  00432C                     l13336:
  4543                           
  4544                           ; BSR set to: 0
  4545  00432C  4B66               	infsnz	atoi@s& (0+255),f,b
  4546  00432E  2B67               	incf	(atoi@s+1)& (0+255),f,b
  4547  004330                     l1792:
  4548                           
  4549                           ; BSR set to: 0
  4550                           
  4551                           ; BSR set to: 0
  4552  004330  C066  FFD9         	movff	atoi@s,fsr2l
  4553  004334  C067  FFDA         	movff	atoi@s+1,fsr2h
  4554  004338  50DF               	movf	indf2,w,c
  4555  00433A  EC19  F02F         	call	_isdigit
  4556  00433E  B0D8               	btfsc	status,0,c
  4557  004340  D7D8               	goto	l1793
  4558  004342  0100               	movlb	0	; () banked
  4559  004344  516A               	movf	atoi@sign& (0+255),w,b
  4560  004346  B4D8               	btfsc	status,2,c
  4561  004348  D00D               	goto	l1795
  4562                           
  4563                           ; BSR set to: 0
  4564  00434A  C06B  F068         	movff	atoi@a,??_atoi
  4565  00434E  C06C  F069         	movff	atoi@a+1,??_atoi+1
  4566  004352  1F68               	comf	??_atoi& (0+255),f,b
  4567  004354  1F69               	comf	(??_atoi+1)& (0+255),f,b
  4568  004356  4B68               	infsnz	??_atoi& (0+255),f,b
  4569  004358  2B69               	incf	(??_atoi+1)& (0+255),f,b
  4570  00435A  C068  F066         	movff	??_atoi,?_atoi
  4571  00435E  C069  F067         	movff	??_atoi+1,?_atoi+1
  4572  004362  0012               	return	
  4573  004364                     l1795:
  4574                           
  4575                           ; BSR set to: 0
  4576  004364  C06B  F066         	movff	atoi@a,?_atoi
  4577  004368  C06C  F067         	movff	atoi@a+1,?_atoi+1
  4578                           
  4579                           ; BSR set to: 0
  4580  00436C  0012               	return		;funcret
  4581  00436E                     __end_of_atoi:
  4582                           	opt stack 0
  4583                           tosu	equ	0xFFF
  4584                           tosh	equ	0xFFE
  4585                           tosl	equ	0xFFD
  4586                           pclath	equ	0xFFA
  4587                           tblptru	equ	0xFF8
  4588                           tblptrh	equ	0xFF7
  4589                           tblptrl	equ	0xFF6
  4590                           tablat	equ	0xFF5
  4591                           prodh	equ	0xFF4
  4592                           prodl	equ	0xFF3
  4593                           intcon	equ	0xFF2
  4594                           intcon2	equ	0xFF1
  4595                           intcon3	equ	0xFF0
  4596                           postinc0	equ	0xFEE
  4597                           wreg	equ	0xFE8
  4598                           postinc1	equ	0xFE6
  4599                           postdec1	equ	0xFE5
  4600                           fsr1h	equ	0xFE2
  4601                           fsr1l	equ	0xFE1
  4602                           indf2	equ	0xFDF
  4603                           postinc2	equ	0xFDE
  4604                           postdec2	equ	0xFDD
  4605                           fsr2h	equ	0xFDA
  4606                           fsr2l	equ	0xFD9
  4607                           status	equ	0xFD8
  4608                           
  4609 ;; *************** function ___fttol *****************
  4610 ;; Defined at:
  4611 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4612 ;; Parameters:    Size  Location     Type
  4613 ;;  f1              3   32[BANK0 ] float 
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;  lval            4   42[BANK0 ] unsigned long 
  4616 ;;  exp1            1   46[BANK0 ] unsigned char 
  4617 ;;  sign1           1   41[BANK0 ] unsigned char 
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  4   32[BANK0 ] long 
  4620 ;; Registers used:
  4621 ;;		wreg, status,2, status,0
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4627 ;;      Params:         0       4       0       0       0       0       0       0       0
  4628 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4629 ;;      Temps:          0       5       0       0       0       0       0       0       0
  4630 ;;      Totals:         0      15       0       0       0       0       0       0       0
  4631 ;;Total ram usage:       15 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    3
  4634 ;; This function calls:
  4635 ;;		Nothing
  4636 ;; This function is called by:
  4637 ;;		_verifica_dados_operacionais
  4638 ;;		_escreve_float_lcd
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           	psect	text16
  4643  0040A8                     __ptext16:
  4644                           	opt stack 0
  4645  0040A8                     ___fttol:
  4646                           	opt stack 25
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;incstack = 0
  4650  0040A8  C082  F084         	movff	___fttol@f1+2,??___fttol
  4651  0040AC  0100               	movlb	0	; () banked
  4652  0040AE  6B85               	clrf	(??___fttol+1)& (0+255),b
  4653  0040B0  6B86               	clrf	(??___fttol+2)& (0+255),b
  4654  0040B2  3581               	rlcf	(___fttol@f1+1)& (0+255),w,b
  4655  0040B4  3784               	rlcf	??___fttol& (0+255),f,b
  4656  0040B6  E301               	bnc	u17791
  4657  0040B8  8185               	bsf	(??___fttol+1)& (0+255),0,b
  4658  0040BA                     u17791:
  4659  0040BA  5184               	movf	??___fttol& (0+255),w,b
  4660  0040BC  6F8E               	movwf	___fttol@exp1& (0+255),b
  4661  0040BE  518E               	movf	___fttol@exp1& (0+255),w,b
  4662  0040C0  A4D8               	btfss	status,2,c
  4663  0040C2  D009               	goto	l1966
  4664                           
  4665                           ; BSR set to: 0
  4666  0040C4  0E00               	movlw	0
  4667  0040C6  6F80               	movwf	?___fttol& (0+255),b
  4668  0040C8  0E00               	movlw	0
  4669  0040CA  6F81               	movwf	(?___fttol+1)& (0+255),b
  4670  0040CC  0E00               	movlw	0
  4671  0040CE  6F82               	movwf	(?___fttol+2)& (0+255),b
  4672  0040D0  0E00               	movlw	0
  4673  0040D2  6F83               	movwf	(?___fttol+3)& (0+255),b
  4674                           
  4675                           ; BSR set to: 0
  4676  0040D4  0012               	return	
  4677  0040D6                     l1966:
  4678                           
  4679                           ; BSR set to: 0
  4680                           
  4681                           ; BSR set to: 0
  4682  0040D6  0E17               	movlw	23
  4683  0040D8  6F84               	movwf	??___fttol& (0+255),b
  4684  0040DA  C080  F085         	movff	___fttol@f1,??___fttol+1
  4685  0040DE  C081  F086         	movff	___fttol@f1+1,??___fttol+2
  4686  0040E2  C082  F087         	movff	___fttol@f1+2,??___fttol+3
  4687  0040E6  2984               	incf	??___fttol& (0+255),w,b
  4688  0040E8  6F88               	movwf	(??___fttol+4)& (0+255),b
  4689  0040EA  D004               	goto	u17810
  4690  0040EC                     u17815:
  4691  0040EC  90D8               	bcf	status,0,c
  4692  0040EE  3387               	rrcf	(??___fttol+3)& (0+255),f,b
  4693  0040F0  3386               	rrcf	(??___fttol+2)& (0+255),f,b
  4694  0040F2  3385               	rrcf	(??___fttol+1)& (0+255),f,b
  4695  0040F4                     u17810:
  4696  0040F4  2F88               	decfsz	(??___fttol+4)& (0+255),f,b
  4697  0040F6  D7FA               	goto	u17815
  4698  0040F8  0100               	movlb	0	; () banked
  4699  0040FA  5185               	movf	(??___fttol+1)& (0+255),w,b
  4700  0040FC  6F89               	movwf	___fttol@sign1& (0+255),b
  4701                           
  4702                           ; BSR set to: 0
  4703  0040FE  8F81               	bsf	(___fttol@f1+1)& (0+255),7,b
  4704                           
  4705                           ; BSR set to: 0
  4706  004100  0EFF               	movlw	255
  4707  004102  1780               	andwf	___fttol@f1& (0+255),f,b
  4708  004104  0EFF               	movlw	255
  4709  004106  1781               	andwf	(___fttol@f1+1)& (0+255),f,b
  4710  004108  0E00               	movlw	0
  4711  00410A  1782               	andwf	(___fttol@f1+2)& (0+255),f,b
  4712                           
  4713                           ; BSR set to: 0
  4714  00410C  5180               	movf	___fttol@f1& (0+255),w,b
  4715  00410E  6F8A               	movwf	___fttol@lval& (0+255),b
  4716  004110  5181               	movf	(___fttol@f1+1)& (0+255),w,b
  4717  004112  6F8B               	movwf	(___fttol@lval+1)& (0+255),b
  4718  004114  5182               	movf	(___fttol@f1+2)& (0+255),w,b
  4719  004116  6F8C               	movwf	(___fttol@lval+2)& (0+255),b
  4720  004118  6B8D               	clrf	(___fttol@lval+3)& (0+255),b
  4721                           
  4722                           ; BSR set to: 0
  4723  00411A  0E8E               	movlw	142
  4724  00411C  5F8E               	subwf	___fttol@exp1& (0+255),f,b
  4725                           
  4726                           ; BSR set to: 0
  4727  00411E  AF8E               	btfss	___fttol@exp1& (0+255),7,b
  4728  004120  D016               	goto	l1968
  4729                           
  4730                           ; BSR set to: 0
  4731  004122  518E               	movf	___fttol@exp1& (0+255),w,b
  4732  004124  0A80               	xorlw	128
  4733  004126  0F8F               	addlw	143
  4734  004128  B0D8               	btfsc	status,0,c
  4735  00412A  D009               	goto	l1969
  4736                           
  4737                           ; BSR set to: 0
  4738  00412C  0E00               	movlw	0
  4739  00412E  6F80               	movwf	?___fttol& (0+255),b
  4740  004130  0E00               	movlw	0
  4741  004132  6F81               	movwf	(?___fttol+1)& (0+255),b
  4742  004134  0E00               	movlw	0
  4743  004136  6F82               	movwf	(?___fttol+2)& (0+255),b
  4744  004138  0E00               	movlw	0
  4745  00413A  6F83               	movwf	(?___fttol+3)& (0+255),b
  4746                           
  4747                           ; BSR set to: 0
  4748  00413C  0012               	return	
  4749  00413E                     l1969:
  4750                           
  4751                           ; BSR set to: 0
  4752                           
  4753                           ; BSR set to: 0
  4754                           
  4755                           ; BSR set to: 0
  4756  00413E  90D8               	bcf	status,0,c
  4757  004140  338D               	rrcf	(___fttol@lval+3)& (0+255),f,b
  4758  004142  338C               	rrcf	(___fttol@lval+2)& (0+255),f,b
  4759  004144  338B               	rrcf	(___fttol@lval+1)& (0+255),f,b
  4760  004146  338A               	rrcf	___fttol@lval& (0+255),f,b
  4761                           
  4762                           ; BSR set to: 0
  4763  004148  3F8E               	incfsz	___fttol@exp1& (0+255),f,b
  4764  00414A  D7F9               	goto	l1969
  4765                           
  4766                           ; BSR set to: 0
  4767  00414C  D015               	goto	u17850
  4768  00414E                     l1968:
  4769                           
  4770                           ; BSR set to: 0
  4771                           
  4772                           ; BSR set to: 0
  4773  00414E  0E17               	movlw	23
  4774  004150  658E               	cpfsgt	___fttol@exp1& (0+255),b
  4775  004152  D00F               	goto	l1974
  4776                           
  4777                           ; BSR set to: 0
  4778  004154  0E00               	movlw	0
  4779  004156  6F80               	movwf	?___fttol& (0+255),b
  4780  004158  0E00               	movlw	0
  4781  00415A  6F81               	movwf	(?___fttol+1)& (0+255),b
  4782  00415C  0E00               	movlw	0
  4783  00415E  6F82               	movwf	(?___fttol+2)& (0+255),b
  4784  004160  0E00               	movlw	0
  4785  004162  6F83               	movwf	(?___fttol+3)& (0+255),b
  4786                           
  4787                           ; BSR set to: 0
  4788  004164  0012               	return	
  4789  004166                     
  4790                           ; BSR set to: 0
  4791                           
  4792                           ; BSR set to: 0
  4793  004166  90D8               	bcf	status,0,c
  4794  004168  378A               	rlcf	___fttol@lval& (0+255),f,b
  4795  00416A  378B               	rlcf	(___fttol@lval+1)& (0+255),f,b
  4796  00416C  378C               	rlcf	(___fttol@lval+2)& (0+255),f,b
  4797  00416E  378D               	rlcf	(___fttol@lval+3)& (0+255),f,b
  4798  004170  078E               	decf	___fttol@exp1& (0+255),f,b
  4799  004172                     l1974:
  4800                           
  4801                           ; BSR set to: 0
  4802                           
  4803                           ; BSR set to: 0
  4804  004172  518E               	movf	___fttol@exp1& (0+255),w,b
  4805  004174  A4D8               	btfss	status,2,c
  4806  004176  D7F7               	goto	l1975
  4807  004178                     u17850:
  4808                           
  4809                           ; BSR set to: 0
  4810                           
  4811                           ; BSR set to: 0
  4812                           
  4813                           ; BSR set to: 0
  4814  004178  5189               	movf	___fttol@sign1& (0+255),w,b
  4815  00417A  B4D8               	btfsc	status,2,c
  4816  00417C  D008               	goto	l1977
  4817                           
  4818                           ; BSR set to: 0
  4819  00417E  1F8D               	comf	(___fttol@lval+3)& (0+255),f,b
  4820  004180  1F8C               	comf	(___fttol@lval+2)& (0+255),f,b
  4821  004182  1F8B               	comf	(___fttol@lval+1)& (0+255),f,b
  4822  004184  6D8A               	negf	___fttol@lval& (0+255),b
  4823  004186  0E00               	movlw	0
  4824  004188  238B               	addwfc	(___fttol@lval+1)& (0+255),f,b
  4825  00418A  238C               	addwfc	(___fttol@lval+2)& (0+255),f,b
  4826  00418C  238D               	addwfc	(___fttol@lval+3)& (0+255),f,b
  4827  00418E                     l1977:
  4828                           
  4829                           ; BSR set to: 0
  4830                           
  4831                           ; BSR set to: 0
  4832  00418E  C08A  F080         	movff	___fttol@lval,?___fttol
  4833  004192  C08B  F081         	movff	___fttol@lval+1,?___fttol+1
  4834  004196  C08C  F082         	movff	___fttol@lval+2,?___fttol+2
  4835  00419A  C08D  F083         	movff	___fttol@lval+3,?___fttol+3
  4836  00419E  0012               	return	
  4837  0041A0                     __end_of___fttol:
  4838                           	opt stack 0
  4839                           tosu	equ	0xFFF
  4840                           tosh	equ	0xFFE
  4841                           tosl	equ	0xFFD
  4842                           pclath	equ	0xFFA
  4843                           tblptru	equ	0xFF8
  4844                           tblptrh	equ	0xFF7
  4845                           tblptrl	equ	0xFF6
  4846                           tablat	equ	0xFF5
  4847                           prodh	equ	0xFF4
  4848                           prodl	equ	0xFF3
  4849                           intcon	equ	0xFF2
  4850                           intcon2	equ	0xFF1
  4851                           intcon3	equ	0xFF0
  4852                           postinc0	equ	0xFEE
  4853                           wreg	equ	0xFE8
  4854                           postinc1	equ	0xFE6
  4855                           postdec1	equ	0xFE5
  4856                           fsr1h	equ	0xFE2
  4857                           fsr1l	equ	0xFE1
  4858                           indf2	equ	0xFDF
  4859                           postinc2	equ	0xFDE
  4860                           postdec2	equ	0xFDD
  4861                           fsr2h	equ	0xFDA
  4862                           fsr2l	equ	0xFD9
  4863                           status	equ	0xFD8
  4864                           
  4865 ;; *************** function ___ftmul *****************
  4866 ;; Defined at:
  4867 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;  f1              3   17[BANK0 ] float 
  4870 ;;  f2              3   20[BANK0 ] float 
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
  4873 ;;  sign            1   31[BANK0 ] unsigned char 
  4874 ;;  cntr            1   30[BANK0 ] unsigned char 
  4875 ;;  exp             1   26[BANK0 ] unsigned char 
  4876 ;; Return value:  Size  Location     Type
  4877 ;;                  3   17[BANK0 ] float 
  4878 ;; Registers used:
  4879 ;;		wreg, status,2, status,0, cstack
  4880 ;; Tracked objects:
  4881 ;;		On entry : 0/0
  4882 ;;		On exit  : 0/0
  4883 ;;		Unchanged: 0/0
  4884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4885 ;;      Params:         0       6       0       0       0       0       0       0       0
  4886 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4887 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4888 ;;      Totals:         0      15       0       0       0       0       0       0       0
  4889 ;;Total ram usage:       15 bytes
  4890 ;; Hardware stack levels used:    1
  4891 ;; Hardware stack levels required when called:    4
  4892 ;; This function calls:
  4893 ;;		___ftpack
  4894 ;; This function is called by:
  4895 ;;		_verifica_dados_operacionais
  4896 ;;		_escreve_float_lcd
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           	psect	text17
  4901  0041A0                     __ptext17:
  4902                           	opt stack 0
  4903  0041A0                     ___ftmul:
  4904                           	opt stack 24
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;incstack = 0
  4908  0041A0  C073  F077         	movff	___ftmul@f1+2,??___ftmul
  4909  0041A4  0100               	movlb	0	; () banked
  4910  0041A6  6B78               	clrf	(??___ftmul+1)& (0+255),b
  4911  0041A8  6B79               	clrf	(??___ftmul+2)& (0+255),b
  4912  0041AA  3572               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  4913  0041AC  3777               	rlcf	??___ftmul& (0+255),f,b
  4914  0041AE  E301               	bnc	u17721
  4915  0041B0  8178               	bsf	(??___ftmul+1)& (0+255),0,b
  4916  0041B2                     u17721:
  4917  0041B2  5177               	movf	??___ftmul& (0+255),w,b
  4918  0041B4  6F7A               	movwf	___ftmul@exp& (0+255),b
  4919  0041B6  517A               	movf	___ftmul@exp& (0+255),w,b
  4920  0041B8  A4D8               	btfss	status,2,c
  4921  0041BA  D007               	goto	l1945
  4922                           
  4923                           ; BSR set to: 0
  4924  0041BC  0E00               	movlw	0
  4925  0041BE  6F71               	movwf	?___ftmul& (0+255),b
  4926  0041C0  0E00               	movlw	0
  4927  0041C2  6F72               	movwf	(?___ftmul+1)& (0+255),b
  4928  0041C4  0E00               	movlw	0
  4929  0041C6  6F73               	movwf	(?___ftmul+2)& (0+255),b
  4930                           
  4931                           ; BSR set to: 0
  4932  0041C8  0012               	return	
  4933  0041CA                     l1945:
  4934                           
  4935                           ; BSR set to: 0
  4936                           
  4937                           ; BSR set to: 0
  4938  0041CA  C076  F077         	movff	___ftmul@f2+2,??___ftmul
  4939  0041CE  6B78               	clrf	(??___ftmul+1)& (0+255),b
  4940  0041D0  6B79               	clrf	(??___ftmul+2)& (0+255),b
  4941  0041D2  3575               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  4942  0041D4  3777               	rlcf	??___ftmul& (0+255),f,b
  4943  0041D6  E301               	bnc	u17741
  4944  0041D8  8178               	bsf	(??___ftmul+1)& (0+255),0,b
  4945  0041DA                     u17741:
  4946  0041DA  5177               	movf	??___ftmul& (0+255),w,b
  4947  0041DC  6F7F               	movwf	___ftmul@sign& (0+255),b
  4948  0041DE  517F               	movf	___ftmul@sign& (0+255),w,b
  4949  0041E0  A4D8               	btfss	status,2,c
  4950  0041E2  D007               	goto	l1947
  4951                           
  4952                           ; BSR set to: 0
  4953  0041E4  0E00               	movlw	0
  4954  0041E6  6F71               	movwf	?___ftmul& (0+255),b
  4955  0041E8  0E00               	movlw	0
  4956  0041EA  6F72               	movwf	(?___ftmul+1)& (0+255),b
  4957  0041EC  0E00               	movlw	0
  4958  0041EE  6F73               	movwf	(?___ftmul+2)& (0+255),b
  4959                           
  4960                           ; BSR set to: 0
  4961  0041F0  0012               	return	
  4962  0041F2                     l1947:
  4963                           
  4964                           ; BSR set to: 0
  4965                           
  4966                           ; BSR set to: 0
  4967  0041F2  517F               	movf	___ftmul@sign& (0+255),w,b
  4968  0041F4  0F7B               	addlw	123
  4969  0041F6  277A               	addwf	___ftmul@exp& (0+255),f,b
  4970                           
  4971                           ; BSR set to: 0
  4972  0041F8  C073  F07F         	movff	___ftmul@f1+2,___ftmul@sign
  4973  0041FC  5176               	movf	(___ftmul@f2+2)& (0+255),w,b
  4974  0041FE  1B7F               	xorwf	___ftmul@sign& (0+255),f,b
  4975  004200  0E80               	movlw	128
  4976  004202  177F               	andwf	___ftmul@sign& (0+255),f,b
  4977                           
  4978                           ; BSR set to: 0
  4979  004204  8F72               	bsf	(___ftmul@f1+1)& (0+255),7,b
  4980                           
  4981                           ; BSR set to: 0
  4982  004206  8F75               	bsf	(___ftmul@f2+1)& (0+255),7,b
  4983                           
  4984                           ; BSR set to: 0
  4985  004208  0EFF               	movlw	255
  4986  00420A  1774               	andwf	___ftmul@f2& (0+255),f,b
  4987  00420C  0EFF               	movlw	255
  4988  00420E  1775               	andwf	(___ftmul@f2+1)& (0+255),f,b
  4989  004210  0E00               	movlw	0
  4990  004212  1776               	andwf	(___ftmul@f2+2)& (0+255),f,b
  4991                           
  4992                           ; BSR set to: 0
  4993  004214  0E00               	movlw	0
  4994  004216  6F7B               	movwf	___ftmul@f3_as_product& (0+255),b
  4995  004218  0E00               	movlw	0
  4996  00421A  6F7C               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4997  00421C  0E00               	movlw	0
  4998  00421E  6F7D               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4999                           
  5000                           ; BSR set to: 0
  5001  004220  0E07               	movlw	7
  5002  004222  6F7E               	movwf	___ftmul@cntr& (0+255),b
  5003  004224                     
  5004                           ; BSR set to: 0
  5005                           
  5006                           ; BSR set to: 0
  5007  004224  A171               	btfss	___ftmul@f1& (0+255),0,b
  5008  004226  D006               	goto	l1949
  5009                           
  5010                           ; BSR set to: 0
  5011  004228  5174               	movf	___ftmul@f2& (0+255),w,b
  5012  00422A  277B               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5013  00422C  5175               	movf	(___ftmul@f2+1)& (0+255),w,b
  5014  00422E  237C               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5015  004230  5176               	movf	(___ftmul@f2+2)& (0+255),w,b
  5016  004232  237D               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5017  004234                     l1949:
  5018                           
  5019                           ; BSR set to: 0
  5020                           
  5021                           ; BSR set to: 0
  5022  004234  90D8               	bcf	status,0,c
  5023  004236  3373               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  5024  004238  3372               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  5025  00423A  3371               	rrcf	___ftmul@f1& (0+255),f,b
  5026  00423C  90D8               	bcf	status,0,c
  5027  00423E  3774               	rlcf	___ftmul@f2& (0+255),f,b
  5028  004240  3775               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  5029  004242  3776               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  5030                           
  5031                           ; BSR set to: 0
  5032  004244  2F7E               	decfsz	___ftmul@cntr& (0+255),f,b
  5033  004246  D7EE               	goto	l1948
  5034                           
  5035                           ; BSR set to: 0
  5036                           
  5037                           ; BSR set to: 0
  5038  004248  0E09               	movlw	9
  5039  00424A  6F7E               	movwf	___ftmul@cntr& (0+255),b
  5040  00424C                     
  5041                           ; BSR set to: 0
  5042                           
  5043                           ; BSR set to: 0
  5044  00424C  A171               	btfss	___ftmul@f1& (0+255),0,b
  5045  00424E  D006               	goto	l1952
  5046                           
  5047                           ; BSR set to: 0
  5048  004250  5174               	movf	___ftmul@f2& (0+255),w,b
  5049  004252  277B               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5050  004254  5175               	movf	(___ftmul@f2+1)& (0+255),w,b
  5051  004256  237C               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5052  004258  5176               	movf	(___ftmul@f2+2)& (0+255),w,b
  5053  00425A  237D               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5054  00425C                     l1952:
  5055                           
  5056                           ; BSR set to: 0
  5057                           
  5058                           ; BSR set to: 0
  5059  00425C  90D8               	bcf	status,0,c
  5060  00425E  3373               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  5061  004260  3372               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  5062  004262  3371               	rrcf	___ftmul@f1& (0+255),f,b
  5063  004264  90D8               	bcf	status,0,c
  5064  004266  337D               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  5065  004268  337C               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  5066  00426A  337B               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  5067                           
  5068                           ; BSR set to: 0
  5069  00426C  2F7E               	decfsz	___ftmul@cntr& (0+255),f,b
  5070  00426E  D7EE               	goto	l1951
  5071                           
  5072                           ; BSR set to: 0
  5073                           
  5074                           ; BSR set to: 0
  5075  004270  C07B  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
  5076  004274  C07C  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5077  004278  C07D  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5078  00427C  C07A  F063         	movff	___ftmul@exp,___ftpack@exp
  5079  004280  C07F  F064         	movff	___ftmul@sign,___ftpack@sign
  5080  004284  EC91  F023         	call	___ftpack	;wreg free
  5081  004288  C060  F071         	movff	?___ftpack,?___ftmul
  5082  00428C  C061  F072         	movff	?___ftpack+1,?___ftmul+1
  5083  004290  C062  F073         	movff	?___ftpack+2,?___ftmul+2
  5084  004294  0012               	return	
  5085  004296                     __end_of___ftmul:
  5086                           	opt stack 0
  5087                           tosu	equ	0xFFF
  5088                           tosh	equ	0xFFE
  5089                           tosl	equ	0xFFD
  5090                           pclath	equ	0xFFA
  5091                           tblptru	equ	0xFF8
  5092                           tblptrh	equ	0xFF7
  5093                           tblptrl	equ	0xFF6
  5094                           tablat	equ	0xFF5
  5095                           prodh	equ	0xFF4
  5096                           prodl	equ	0xFF3
  5097                           intcon	equ	0xFF2
  5098                           intcon2	equ	0xFF1
  5099                           intcon3	equ	0xFF0
  5100                           postinc0	equ	0xFEE
  5101                           wreg	equ	0xFE8
  5102                           postinc1	equ	0xFE6
  5103                           postdec1	equ	0xFE5
  5104                           fsr1h	equ	0xFE2
  5105                           fsr1l	equ	0xFE1
  5106                           indf2	equ	0xFDF
  5107                           postinc2	equ	0xFDE
  5108                           postdec2	equ	0xFDD
  5109                           fsr2h	equ	0xFDA
  5110                           fsr2l	equ	0xFD9
  5111                           status	equ	0xFD8
  5112                           
  5113 ;; *************** function ___awtoft *****************
  5114 ;; Defined at:
  5115 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;  c               2   13[BANK0 ] int 
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;  sign            1   16[BANK0 ] unsigned char 
  5120 ;; Return value:  Size  Location     Type
  5121 ;;                  3   13[BANK0 ] float 
  5122 ;; Registers used:
  5123 ;;		wreg, status,2, status,0, cstack
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5129 ;;      Params:         0       3       0       0       0       0       0       0       0
  5130 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5131 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5132 ;;      Totals:         0       4       0       0       0       0       0       0       0
  5133 ;;Total ram usage:        4 bytes
  5134 ;; Hardware stack levels used:    1
  5135 ;; Hardware stack levels required when called:    4
  5136 ;; This function calls:
  5137 ;;		___ftpack
  5138 ;; This function is called by:
  5139 ;;		_verifica_dados_operacionais
  5140 ;;		_escreve_float_lcd
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           	psect	text18
  5145  005BAC                     __ptext18:
  5146                           	opt stack 0
  5147  005BAC                     ___awtoft:
  5148                           	opt stack 24
  5149                           
  5150                           ;incstack = 0
  5151  005BAC  0E00               	movlw	0
  5152  005BAE  0100               	movlb	0	; () banked
  5153  005BB0  6F70               	movwf	___awtoft@sign& (0+255),b
  5154                           
  5155                           ; BSR set to: 0
  5156  005BB2  AF6E               	btfss	(___awtoft@c+1)& (0+255),7,b
  5157  005BB4  D006               	goto	l1847
  5158                           
  5159                           ; BSR set to: 0
  5160  005BB6  6D6D               	negf	___awtoft@c& (0+255),b
  5161  005BB8  1F6E               	comf	(___awtoft@c+1)& (0+255),f,b
  5162  005BBA  B0D8               	btfsc	status,0,c
  5163  005BBC  2B6E               	incf	(___awtoft@c+1)& (0+255),f,b
  5164                           
  5165                           ; BSR set to: 0
  5166  005BBE  0E01               	movlw	1
  5167  005BC0  6F70               	movwf	___awtoft@sign& (0+255),b
  5168  005BC2                     l1847:
  5169                           
  5170                           ; BSR set to: 0
  5171                           
  5172                           ; BSR set to: 0
  5173  005BC2  C06D  F060         	movff	___awtoft@c,___ftpack@arg
  5174  005BC6  C06E  F061         	movff	___awtoft@c+1,___ftpack@arg+1
  5175  005BCA  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
  5176  005BCC  0E8E               	movlw	142
  5177  005BCE  6F63               	movwf	___ftpack@exp& (0+255),b
  5178  005BD0  C070  F064         	movff	___awtoft@sign,___ftpack@sign
  5179  005BD4  EC91  F023         	call	___ftpack	;wreg free
  5180  005BD8  C060  F06D         	movff	?___ftpack,?___awtoft
  5181  005BDC  C061  F06E         	movff	?___ftpack+1,?___awtoft+1
  5182  005BE0  C062  F06F         	movff	?___ftpack+2,?___awtoft+2
  5183  005BE4  0012               	return	
  5184  005BE6                     __end_of___awtoft:
  5185                           	opt stack 0
  5186                           tosu	equ	0xFFF
  5187                           tosh	equ	0xFFE
  5188                           tosl	equ	0xFFD
  5189                           pclath	equ	0xFFA
  5190                           tblptru	equ	0xFF8
  5191                           tblptrh	equ	0xFF7
  5192                           tblptrl	equ	0xFF6
  5193                           tablat	equ	0xFF5
  5194                           prodh	equ	0xFF4
  5195                           prodl	equ	0xFF3
  5196                           intcon	equ	0xFF2
  5197                           intcon2	equ	0xFF1
  5198                           intcon3	equ	0xFF0
  5199                           postinc0	equ	0xFEE
  5200                           wreg	equ	0xFE8
  5201                           postinc1	equ	0xFE6
  5202                           postdec1	equ	0xFE5
  5203                           fsr1h	equ	0xFE2
  5204                           fsr1l	equ	0xFE1
  5205                           indf2	equ	0xFDF
  5206                           postinc2	equ	0xFDE
  5207                           postdec2	equ	0xFDD
  5208                           fsr2h	equ	0xFDA
  5209                           fsr2l	equ	0xFD9
  5210                           status	equ	0xFD8
  5211                           
  5212 ;; *************** function ___ftpack *****************
  5213 ;; Defined at:
  5214 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  5215 ;; Parameters:    Size  Location     Type
  5216 ;;  arg             3    0[BANK0 ] unsigned um
  5217 ;;  exp             1    3[BANK0 ] unsigned char 
  5218 ;;  sign            1    4[BANK0 ] unsigned char 
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;		None
  5221 ;; Return value:  Size  Location     Type
  5222 ;;                  3    0[BANK0 ] float 
  5223 ;; Registers used:
  5224 ;;		wreg, status,2, status,0
  5225 ;; Tracked objects:
  5226 ;;		On entry : 0/0
  5227 ;;		On exit  : 0/0
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5230 ;;      Params:         0       5       0       0       0       0       0       0       0
  5231 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5232 ;;      Temps:          0       3       0       0       0       0       0       0       0
  5233 ;;      Totals:         0       8       0       0       0       0       0       0       0
  5234 ;;Total ram usage:        8 bytes
  5235 ;; Hardware stack levels used:    1
  5236 ;; Hardware stack levels required when called:    3
  5237 ;; This function calls:
  5238 ;;		Nothing
  5239 ;; This function is called by:
  5240 ;;		___awtoft
  5241 ;;		___ftmul
  5242 ;; This function uses a non-reentrant model
  5243 ;;
  5244                           
  5245                           	psect	text19
  5246  004722                     __ptext19:
  5247                           	opt stack 0
  5248  004722                     ___ftpack:
  5249                           	opt stack 24
  5250                           
  5251                           ;incstack = 0
  5252  004722  0100               	movlb	0	; () banked
  5253  004724  5163               	movf	___ftpack@exp& (0+255),w,b
  5254  004726  B4D8               	btfsc	status,2,c
  5255  004728  D005               	goto	u17430
  5256                           
  5257                           ; BSR set to: 0
  5258  00472A  5160               	movf	___ftpack@arg& (0+255),w,b
  5259  00472C  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  5260  00472E  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  5261  004730  A4D8               	btfss	status,2,c
  5262  004732  D00C               	goto	l1866
  5263  004734                     u17430:
  5264                           
  5265                           ; BSR set to: 0
  5266                           
  5267                           ; BSR set to: 0
  5268  004734  0E00               	movlw	0
  5269  004736  6F60               	movwf	?___ftpack& (0+255),b
  5270  004738  0E00               	movlw	0
  5271  00473A  6F61               	movwf	(?___ftpack+1)& (0+255),b
  5272  00473C  0E00               	movlw	0
  5273  00473E  6F62               	movwf	(?___ftpack+2)& (0+255),b
  5274                           
  5275                           ; BSR set to: 0
  5276  004740  0012               	return	
  5277  004742                     
  5278                           ; BSR set to: 0
  5279                           
  5280                           ; BSR set to: 0
  5281  004742  2B63               	incf	___ftpack@exp& (0+255),f,b
  5282  004744  90D8               	bcf	status,0,c
  5283  004746  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  5284  004748  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  5285  00474A  3360               	rrcf	___ftpack@arg& (0+255),f,b
  5286  00474C                     l1866:
  5287                           
  5288                           ; BSR set to: 0
  5289                           
  5290                           ; BSR set to: 0
  5291  00474C  0E00               	movlw	0
  5292  00474E  1560               	andwf	___ftpack@arg& (0+255),w,b
  5293  004750  6F65               	movwf	??___ftpack& (0+255),b
  5294  004752  0E00               	movlw	0
  5295  004754  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  5296  004756  6F66               	movwf	(??___ftpack+1)& (0+255),b
  5297  004758  0EFE               	movlw	254
  5298  00475A  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  5299  00475C  6F67               	movwf	(??___ftpack+2)& (0+255),b
  5300  00475E  5165               	movf	??___ftpack& (0+255),w,b
  5301  004760  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  5302  004762  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  5303  004764  B4D8               	btfsc	status,2,c
  5304  004766  D00C               	goto	l1869
  5305  004768  D7EC               	goto	l1867
  5306  00476A                     
  5307                           ; BSR set to: 0
  5308                           
  5309                           ; BSR set to: 0
  5310  00476A  2B63               	incf	___ftpack@exp& (0+255),f,b
  5311                           
  5312                           ; BSR set to: 0
  5313  00476C  0E01               	movlw	1
  5314  00476E  2760               	addwf	___ftpack@arg& (0+255),f,b
  5315  004770  0E00               	movlw	0
  5316  004772  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  5317  004774  0E00               	movlw	0
  5318  004776  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  5319  004778  90D8               	bcf	status,0,c
  5320  00477A  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  5321  00477C  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  5322  00477E  3360               	rrcf	___ftpack@arg& (0+255),f,b
  5323  004780                     l1869:
  5324                           
  5325                           ; BSR set to: 0
  5326                           
  5327                           ; BSR set to: 0
  5328  004780  0E00               	movlw	0
  5329  004782  1560               	andwf	___ftpack@arg& (0+255),w,b
  5330  004784  6F65               	movwf	??___ftpack& (0+255),b
  5331  004786  0E00               	movlw	0
  5332  004788  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  5333  00478A  6F66               	movwf	(??___ftpack+1)& (0+255),b
  5334  00478C  0EFF               	movlw	255
  5335  00478E  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  5336  004790  6F67               	movwf	(??___ftpack+2)& (0+255),b
  5337  004792  5165               	movf	??___ftpack& (0+255),w,b
  5338  004794  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  5339  004796  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  5340  004798  B4D8               	btfsc	status,2,c
  5341  00479A  D006               	goto	l1872
  5342  00479C  D7E6               	goto	l1870
  5343  00479E                     
  5344                           ; BSR set to: 0
  5345                           
  5346                           ; BSR set to: 0
  5347  00479E  0763               	decf	___ftpack@exp& (0+255),f,b
  5348  0047A0  90D8               	bcf	status,0,c
  5349  0047A2  3760               	rlcf	___ftpack@arg& (0+255),f,b
  5350  0047A4  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  5351  0047A6  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  5352  0047A8                     l1872:
  5353                           
  5354                           ; BSR set to: 0
  5355                           
  5356                           ; BSR set to: 0
  5357  0047A8  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  5358  0047AA  D003               	goto	u17470
  5359                           
  5360                           ; BSR set to: 0
  5361  0047AC  0E02               	movlw	2
  5362  0047AE  6163               	cpfslt	___ftpack@exp& (0+255),b
  5363  0047B0  D7F6               	goto	l1873
  5364  0047B2                     u17470:
  5365                           
  5366                           ; BSR set to: 0
  5367                           
  5368                           ; BSR set to: 0
  5369  0047B2  A163               	btfss	___ftpack@exp& (0+255),0,b
  5370                           
  5371                           ; BSR set to: 0
  5372  0047B4  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
  5373                           
  5374                           ; BSR set to: 0
  5375                           
  5376                           ; BSR set to: 0
  5377  0047B6  90D8               	bcf	status,0,c
  5378  0047B8  3363               	rrcf	___ftpack@exp& (0+255),f,b
  5379  0047BA  5163               	movf	___ftpack@exp& (0+255),w,b
  5380  0047BC  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  5381                           
  5382                           ; BSR set to: 0
  5383  0047BE  5164               	movf	___ftpack@sign& (0+255),w,b
  5384  0047C0  A4D8               	btfss	status,2,c
  5385                           
  5386                           ; BSR set to: 0
  5387  0047C2  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
  5388                           
  5389                           ; BSR set to: 0
  5390                           
  5391                           ; BSR set to: 0
  5392  0047C4  C060  F060         	movff	___ftpack@arg,?___ftpack
  5393  0047C8  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
  5394  0047CC  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
  5395  0047D0  0012               	return	
  5396  0047D2                     __end_of___ftpack:
  5397                           	opt stack 0
  5398                           tosu	equ	0xFFF
  5399                           tosh	equ	0xFFE
  5400                           tosl	equ	0xFFD
  5401                           pclath	equ	0xFFA
  5402                           tblptru	equ	0xFF8
  5403                           tblptrh	equ	0xFF7
  5404                           tblptrl	equ	0xFF6
  5405                           tablat	equ	0xFF5
  5406                           prodh	equ	0xFF4
  5407                           prodl	equ	0xFF3
  5408                           intcon	equ	0xFF2
  5409                           intcon2	equ	0xFF1
  5410                           intcon3	equ	0xFF0
  5411                           postinc0	equ	0xFEE
  5412                           wreg	equ	0xFE8
  5413                           postinc1	equ	0xFE6
  5414                           postdec1	equ	0xFE5
  5415                           fsr1h	equ	0xFE2
  5416                           fsr1l	equ	0xFE1
  5417                           indf2	equ	0xFDF
  5418                           postinc2	equ	0xFDE
  5419                           postdec2	equ	0xFDD
  5420                           fsr2h	equ	0xFDA
  5421                           fsr2l	equ	0xFD9
  5422                           status	equ	0xFD8
  5423                           
  5424 ;; *************** function _mostra_dados_display *****************
  5425 ;; Defined at:
  5426 ;;		line 276 in file "bibliotecas/GPS.c"
  5427 ;; Parameters:    Size  Location     Type
  5428 ;;		None
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;		None
  5431 ;; Return value:  Size  Location     Type
  5432 ;;                  1    wreg      void 
  5433 ;; Registers used:
  5434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5435 ;; Tracked objects:
  5436 ;;		On entry : 0/0
  5437 ;;		On exit  : 0/0
  5438 ;;		Unchanged: 0/0
  5439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5440 ;;      Params:         0       0       0       0       0       0       0       0       0
  5441 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5442 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5443 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5444 ;;Total ram usage:        0 bytes
  5445 ;; Hardware stack levels used:    1
  5446 ;; Hardware stack levels required when called:    6
  5447 ;; This function calls:
  5448 ;;		_escreve_frase_ram_lcd
  5449 ;;		_posicao_cursor_lcd
  5450 ;; This function is called by:
  5451 ;;		_troca_de_tela
  5452 ;; This function uses a non-reentrant model
  5453 ;;
  5454                           
  5455                           	psect	text20
  5456  005C56                     __ptext20:
  5457                           	opt stack 0
  5458  005C56                     _mostra_dados_display:
  5459                           	opt stack 22
  5460                           
  5461                           ;GPS.c: 278: posicao_cursor_lcd(1,4);
  5462                           
  5463                           ; BSR set to: 0
  5464                           ;incstack = 0
  5465  005C56  0E04               	movlw	4
  5466  005C58  0100               	movlb	0	; () banked
  5467  005C5A  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  5468  005C5C  0E01               	movlw	1
  5469  005C5E  EC5A  F028         	call	_posicao_cursor_lcd
  5470                           
  5471                           ;GPS.c: 279: escreve_frase_ram_lcd(rawLatitude);
  5472  005C62  0EA2               	movlw	low _rawLatitude
  5473  005C64  0100               	movlb	0	; () banked
  5474  005C66  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  5475  005C68  0E01               	movlw	high _rawLatitude
  5476  005C6A  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  5477  005C6C  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  5478                           
  5479                           ;GPS.c: 280: posicao_cursor_lcd(2,4);
  5480  005C70  0E04               	movlw	4
  5481  005C72  0100               	movlb	0	; () banked
  5482  005C74  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
  5483  005C76  0E02               	movlw	2
  5484  005C78  EC5A  F028         	call	_posicao_cursor_lcd
  5485                           
  5486                           ;GPS.c: 281: escreve_frase_ram_lcd(rawLongitude);
  5487  005C7C  0E8A               	movlw	low _rawLongitude
  5488  005C7E  0100               	movlb	0	; () banked
  5489  005C80  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  5490  005C82  0E01               	movlw	high _rawLongitude
  5491  005C84  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  5492  005C86  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  5493  005C8A  0012               	return		;funcret
  5494  005C8C                     __end_of_mostra_dados_display:
  5495                           	opt stack 0
  5496                           tosu	equ	0xFFF
  5497                           tosh	equ	0xFFE
  5498                           tosl	equ	0xFFD
  5499                           pclath	equ	0xFFA
  5500                           tblptru	equ	0xFF8
  5501                           tblptrh	equ	0xFF7
  5502                           tblptrl	equ	0xFF6
  5503                           tablat	equ	0xFF5
  5504                           prodh	equ	0xFF4
  5505                           prodl	equ	0xFF3
  5506                           intcon	equ	0xFF2
  5507                           intcon2	equ	0xFF1
  5508                           intcon3	equ	0xFF0
  5509                           postinc0	equ	0xFEE
  5510                           wreg	equ	0xFE8
  5511                           postinc1	equ	0xFE6
  5512                           postdec1	equ	0xFE5
  5513                           fsr1h	equ	0xFE2
  5514                           fsr1l	equ	0xFE1
  5515                           indf2	equ	0xFDF
  5516                           postinc2	equ	0xFDE
  5517                           postdec2	equ	0xFDD
  5518                           fsr2h	equ	0xFDA
  5519                           fsr2l	equ	0xFD9
  5520                           status	equ	0xFD8
  5521                           
  5522 ;; *************** function _escreve_inteiro_lcd *****************
  5523 ;; Defined at:
  5524 ;;		line 376 in file "bibliotecas/display_lcd.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  valor           4   36[BANK0 ] long 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;  texto           7   40[BANK0 ] unsigned char [7]
  5529 ;; Return value:  Size  Location     Type
  5530 ;;                  1    wreg      void 
  5531 ;; Registers used:
  5532 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5533 ;; Tracked objects:
  5534 ;;		On entry : 0/0
  5535 ;;		On exit  : 0/0
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5538 ;;      Params:         0       4       0       0       0       0       0       0       0
  5539 ;;      Locals:         0       7       0       0       0       0       0       0       0
  5540 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5541 ;;      Totals:         0      11       0       0       0       0       0       0       0
  5542 ;;Total ram usage:       11 bytes
  5543 ;; Hardware stack levels used:    1
  5544 ;; Hardware stack levels required when called:    6
  5545 ;; This function calls:
  5546 ;;		_escreve_frase_ram_lcd
  5547 ;;		_ltoa
  5548 ;; This function is called by:
  5549 ;;		_troca_de_tela
  5550 ;;		_escreve_float_lcd
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           	psect	text21
  5555  00585C                     __ptext21:
  5556                           	opt stack 0
  5557  00585C                     _escreve_inteiro_lcd:
  5558                           	opt stack 22
  5559                           
  5560                           ;display_lcd.c: 378: char texto[7] = "000000";
  5561                           
  5562                           ;incstack = 0
  5563  00585C  EE21  F0F9         	lfsr	2,escreve_inteiro_lcd@F3966
  5564  005860  EE10  F088         	lfsr	1,escreve_inteiro_lcd@texto
  5565  005864  0E06               	movlw	6
  5566  005866                     u17611:
  5567  005866  CFDB FFE3          	movff	plusw2,plusw1
  5568  00586A  06E8               	decf	wreg,f,c
  5569  00586C  E2FC               	bc	u17611
  5570                           
  5571                           ;display_lcd.c: 379: ltoa(texto,valor, 10);
  5572  00586E  0E88               	movlw	low escreve_inteiro_lcd@texto
  5573  005870  0100               	movlb	0	; () banked
  5574  005872  6F7A               	movwf	ltoa@buf& (0+255),b
  5575  005874  0E00               	movlw	high escreve_inteiro_lcd@texto
  5576  005876  6F7B               	movwf	(ltoa@buf+1)& (0+255),b
  5577  005878  C084  F07C         	movff	escreve_inteiro_lcd@valor,ltoa@val
  5578  00587C  C085  F07D         	movff	escreve_inteiro_lcd@valor+1,ltoa@val+1
  5579  005880  C086  F07E         	movff	escreve_inteiro_lcd@valor+2,ltoa@val+2
  5580  005884  C087  F07F         	movff	escreve_inteiro_lcd@valor+3,ltoa@val+3
  5581  005888  0E00               	movlw	0
  5582  00588A  6F81               	movwf	(ltoa@base+1)& (0+255),b
  5583  00588C  0E0A               	movlw	10
  5584  00588E  6F80               	movwf	ltoa@base& (0+255),b
  5585  005890  EC3F  F02B         	call	_ltoa	;wreg free
  5586                           
  5587                           ;display_lcd.c: 380: escreve_frase_ram_lcd(texto);
  5588  005894  0E88               	movlw	low escreve_inteiro_lcd@texto
  5589  005896  0100               	movlb	0	; () banked
  5590  005898  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
  5591  00589A  0E00               	movlw	high escreve_inteiro_lcd@texto
  5592  00589C  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
  5593  00589E  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
  5594  0058A2  0012               	return		;funcret
  5595  0058A4                     __end_of_escreve_inteiro_lcd:
  5596                           	opt stack 0
  5597                           tosu	equ	0xFFF
  5598                           tosh	equ	0xFFE
  5599                           tosl	equ	0xFFD
  5600                           pclath	equ	0xFFA
  5601                           tblptru	equ	0xFF8
  5602                           tblptrh	equ	0xFF7
  5603                           tblptrl	equ	0xFF6
  5604                           tablat	equ	0xFF5
  5605                           prodh	equ	0xFF4
  5606                           prodl	equ	0xFF3
  5607                           intcon	equ	0xFF2
  5608                           intcon2	equ	0xFF1
  5609                           intcon3	equ	0xFF0
  5610                           postinc0	equ	0xFEE
  5611                           wreg	equ	0xFE8
  5612                           postinc1	equ	0xFE6
  5613                           postdec1	equ	0xFE5
  5614                           plusw1	equ	0xFE3
  5615                           fsr1h	equ	0xFE2
  5616                           fsr1l	equ	0xFE1
  5617                           indf2	equ	0xFDF
  5618                           postinc2	equ	0xFDE
  5619                           postdec2	equ	0xFDD
  5620                           plusw2	equ	0xFDB
  5621                           fsr2h	equ	0xFDA
  5622                           fsr2l	equ	0xFD9
  5623                           status	equ	0xFD8
  5624                           
  5625 ;; *************** function _ltoa *****************
  5626 ;; Defined at:
  5627 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
  5628 ;; Parameters:    Size  Location     Type
  5629 ;;  buf             2   26[BANK0 ] PTR unsigned char 
  5630 ;;		 -> escreve_inteiro_lcd@texto(7), 
  5631 ;;  val             4   28[BANK0 ] long 
  5632 ;;  base            2   32[BANK0 ] int 
  5633 ;; Auto vars:     Size  Location     Type
  5634 ;;  cp              2   34[BANK0 ] PTR unsigned char 
  5635 ;;		 -> escreve_inteiro_lcd@texto(7), 
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  2   26[BANK0 ] PTR unsigned char 
  5638 ;; Registers used:
  5639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5645 ;;      Params:         0       8       0       0       0       0       0       0       0
  5646 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5647 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5648 ;;      Totals:         0      10       0       0       0       0       0       0       0
  5649 ;;Total ram usage:       10 bytes
  5650 ;; Hardware stack levels used:    1
  5651 ;; Hardware stack levels required when called:    5
  5652 ;; This function calls:
  5653 ;;		_ultoa
  5654 ;; This function is called by:
  5655 ;;		_escreve_inteiro_lcd
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659                           	psect	text22
  5660  00567E                     __ptext22:
  5661                           	opt stack 0
  5662  00567E                     _ltoa:
  5663                           	opt stack 22
  5664                           
  5665                           ;incstack = 0
  5666  00567E  C07A  F082         	movff	ltoa@buf,ltoa@cp
  5667  005682  C07B  F083         	movff	ltoa@buf+1,ltoa@cp+1
  5668  005686  0100               	movlb	0	; () banked
  5669  005688  AF7F               	btfss	(ltoa@val+3)& (0+255),7,b
  5670  00568A  D010               	goto	l2070
  5671                           
  5672                           ; BSR set to: 0
  5673  00568C  C07A  FFD9         	movff	ltoa@buf,fsr2l
  5674  005690  C07B  FFDA         	movff	ltoa@buf+1,fsr2h
  5675  005694  0E2D               	movlw	45
  5676  005696  6EDF               	movwf	indf2,c
  5677                           
  5678                           ; BSR set to: 0
  5679  005698  4B7A               	infsnz	ltoa@buf& (0+255),f,b
  5680  00569A  2B7B               	incf	(ltoa@buf+1)& (0+255),f,b
  5681                           
  5682                           ; BSR set to: 0
  5683  00569C  1F7F               	comf	(ltoa@val+3)& (0+255),f,b
  5684  00569E  1F7E               	comf	(ltoa@val+2)& (0+255),f,b
  5685  0056A0  1F7D               	comf	(ltoa@val+1)& (0+255),f,b
  5686  0056A2  6D7C               	negf	ltoa@val& (0+255),b
  5687  0056A4  0E00               	movlw	0
  5688  0056A6  237D               	addwfc	(ltoa@val+1)& (0+255),f,b
  5689  0056A8  237E               	addwfc	(ltoa@val+2)& (0+255),f,b
  5690  0056AA  237F               	addwfc	(ltoa@val+3)& (0+255),f,b
  5691  0056AC                     l2070:
  5692                           
  5693                           ; BSR set to: 0
  5694                           
  5695                           ; BSR set to: 0
  5696  0056AC  C07A  F06D         	movff	ltoa@buf,ultoa@buf
  5697  0056B0  C07B  F06E         	movff	ltoa@buf+1,ultoa@buf+1
  5698  0056B4  C07C  F06F         	movff	ltoa@val,ultoa@val
  5699  0056B8  C07D  F070         	movff	ltoa@val+1,ultoa@val+1
  5700  0056BC  C07E  F071         	movff	ltoa@val+2,ultoa@val+2
  5701  0056C0  C07F  F072         	movff	ltoa@val+3,ultoa@val+3
  5702  0056C4  C080  F073         	movff	ltoa@base,ultoa@base
  5703  0056C8  C081  F074         	movff	ltoa@base+1,ultoa@base+1
  5704  0056CC  ECD5  F01F         	call	_ultoa	;wreg free
  5705  0056D0  0012               	return	
  5706  0056D2                     __end_of_ltoa:
  5707                           	opt stack 0
  5708                           tosu	equ	0xFFF
  5709                           tosh	equ	0xFFE
  5710                           tosl	equ	0xFFD
  5711                           pclath	equ	0xFFA
  5712                           tblptru	equ	0xFF8
  5713                           tblptrh	equ	0xFF7
  5714                           tblptrl	equ	0xFF6
  5715                           tablat	equ	0xFF5
  5716                           prodh	equ	0xFF4
  5717                           prodl	equ	0xFF3
  5718                           intcon	equ	0xFF2
  5719                           intcon2	equ	0xFF1
  5720                           intcon3	equ	0xFF0
  5721                           postinc0	equ	0xFEE
  5722                           wreg	equ	0xFE8
  5723                           postinc1	equ	0xFE6
  5724                           postdec1	equ	0xFE5
  5725                           plusw1	equ	0xFE3
  5726                           fsr1h	equ	0xFE2
  5727                           fsr1l	equ	0xFE1
  5728                           indf2	equ	0xFDF
  5729                           postinc2	equ	0xFDE
  5730                           postdec2	equ	0xFDD
  5731                           plusw2	equ	0xFDB
  5732                           fsr2h	equ	0xFDA
  5733                           fsr2l	equ	0xFD9
  5734                           status	equ	0xFD8
  5735                           
  5736 ;; *************** function _ultoa *****************
  5737 ;; Defined at:
  5738 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;  buf             2   13[BANK0 ] PTR unsigned char 
  5741 ;;		 -> escreve_inteiro_lcd@texto(7), 
  5742 ;;  val             4   15[BANK0 ] unsigned long 
  5743 ;;  base            2   19[BANK0 ] int 
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;  v               4   21[BANK0 ] unsigned long 
  5746 ;;  c               1   25[BANK0 ] unsigned char 
  5747 ;; Return value:  Size  Location     Type
  5748 ;;                  2   13[BANK0 ] PTR unsigned char 
  5749 ;; Registers used:
  5750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5756 ;;      Params:         0       8       0       0       0       0       0       0       0
  5757 ;;      Locals:         0       5       0       0       0       0       0       0       0
  5758 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5759 ;;      Totals:         0      13       0       0       0       0       0       0       0
  5760 ;;Total ram usage:       13 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; Hardware stack levels required when called:    4
  5763 ;; This function calls:
  5764 ;;		___lldiv
  5765 ;;		___llmod
  5766 ;; This function is called by:
  5767 ;;		_ltoa
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           	psect	text23
  5772  003FAA                     __ptext23:
  5773                           	opt stack 0
  5774  003FAA                     _ultoa:
  5775                           	opt stack 22
  5776                           
  5777                           ;incstack = 0
  5778  003FAA  C06F  F075         	movff	ultoa@val,ultoa@v
  5779  003FAE  C070  F076         	movff	ultoa@val+1,ultoa@v+1
  5780  003FB2  C071  F077         	movff	ultoa@val+2,ultoa@v+2
  5781  003FB6  C072  F078         	movff	ultoa@val+3,ultoa@v+3
  5782  003FBA  C075  F060         	movff	ultoa@v,___lldiv@dividend
  5783  003FBE  C076  F061         	movff	ultoa@v+1,___lldiv@dividend+1
  5784  003FC2  C077  F062         	movff	ultoa@v+2,___lldiv@dividend+2
  5785  003FC6  C078  F063         	movff	ultoa@v+3,___lldiv@dividend+3
  5786  003FCA  C073  F064         	movff	ultoa@base,___lldiv@divisor
  5787  003FCE  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
  5788  003FD2  0100               	movlb	0	; () banked
  5789  003FD4  0E00               	movlw	0
  5790  003FD6  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
  5791  003FD8  0EFF               	movlw	-1
  5792  003FDA  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  5793  003FDC  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  5794  003FDE  EC18  F028         	call	___lldiv	;wreg free
  5795  003FE2  C060  F075         	movff	?___lldiv,ultoa@v
  5796  003FE6  C061  F076         	movff	?___lldiv+1,ultoa@v+1
  5797  003FEA  C062  F077         	movff	?___lldiv+2,ultoa@v+2
  5798  003FEE  C063  F078         	movff	?___lldiv+3,ultoa@v+3
  5799  003FF2  0100               	movlb	0	; () banked
  5800  003FF4  4B6D               	infsnz	ultoa@buf& (0+255),f,b
  5801  003FF6  2B6E               	incf	(ultoa@buf+1)& (0+255),f,b
  5802                           
  5803                           ; BSR set to: 0
  5804  003FF8  5175               	movf	ultoa@v& (0+255),w,b
  5805  003FFA  1176               	iorwf	(ultoa@v+1)& (0+255),w,b
  5806  003FFC  1177               	iorwf	(ultoa@v+2)& (0+255),w,b
  5807  003FFE  1178               	iorwf	(ultoa@v+3)& (0+255),w,b
  5808  004000  A4D8               	btfss	status,2,c
  5809  004002  D7DB               	goto	l2074
  5810                           
  5811                           ; BSR set to: 0
  5812                           
  5813                           ; BSR set to: 0
  5814  004004  C06D  FFD9         	movff	ultoa@buf,fsr2l
  5815  004008  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
  5816  00400C  0E00               	movlw	0
  5817  00400E  6EDF               	movwf	indf2,c
  5818                           
  5819                           ; BSR set to: 0
  5820  004010  076D               	decf	ultoa@buf& (0+255),f,b
  5821  004012  A0D8               	btfss	status,0,c
  5822  004014  076E               	decf	(ultoa@buf+1)& (0+255),f,b
  5823  004016                     
  5824                           ; BSR set to: 0
  5825                           
  5826                           ; BSR set to: 0
  5827  004016  C06F  F060         	movff	ultoa@val,___llmod@dividend
  5828  00401A  C070  F061         	movff	ultoa@val+1,___llmod@dividend+1
  5829  00401E  C071  F062         	movff	ultoa@val+2,___llmod@dividend+2
  5830  004022  C072  F063         	movff	ultoa@val+3,___llmod@dividend+3
  5831  004026  C073  F064         	movff	ultoa@base,___llmod@divisor
  5832  00402A  C074  F065         	movff	ultoa@base+1,___llmod@divisor+1
  5833  00402E  0E00               	movlw	0
  5834  004030  BF65               	btfsc	(___llmod@divisor+1)& (0+255),7,b
  5835  004032  0EFF               	movlw	-1
  5836  004034  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  5837  004036  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  5838  004038  ECF7  F029         	call	___llmod	;wreg free
  5839  00403C  0100               	movlb	0	; () banked
  5840  00403E  5160               	movf	?___llmod& (0+255),w,b
  5841  004040  6F79               	movwf	ultoa@c& (0+255),b
  5842                           
  5843                           ; BSR set to: 0
  5844  004042  C06F  F060         	movff	ultoa@val,___lldiv@dividend
  5845  004046  C070  F061         	movff	ultoa@val+1,___lldiv@dividend+1
  5846  00404A  C071  F062         	movff	ultoa@val+2,___lldiv@dividend+2
  5847  00404E  C072  F063         	movff	ultoa@val+3,___lldiv@dividend+3
  5848  004052  C073  F064         	movff	ultoa@base,___lldiv@divisor
  5849  004056  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
  5850  00405A  0E00               	movlw	0
  5851  00405C  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
  5852  00405E  0EFF               	movlw	-1
  5853  004060  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  5854  004062  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  5855  004064  EC18  F028         	call	___lldiv	;wreg free
  5856  004068  C060  F06F         	movff	?___lldiv,ultoa@val
  5857  00406C  C061  F070         	movff	?___lldiv+1,ultoa@val+1
  5858  004070  C062  F071         	movff	?___lldiv+2,ultoa@val+2
  5859  004074  C063  F072         	movff	?___lldiv+3,ultoa@val+3
  5860  004078  0E09               	movlw	9
  5861  00407A  0100               	movlb	0	; () banked
  5862  00407C  6579               	cpfsgt	ultoa@c& (0+255),b
  5863  00407E  D002               	goto	l2077
  5864                           
  5865                           ; BSR set to: 0
  5866  004080  0E07               	movlw	7
  5867  004082  2779               	addwf	ultoa@c& (0+255),f,b
  5868  004084                     l2077:
  5869                           
  5870                           ; BSR set to: 0
  5871  004084  0E30               	movlw	48
  5872  004086  2779               	addwf	ultoa@c& (0+255),f,b
  5873                           
  5874                           ; BSR set to: 0
  5875  004088  C06D  FFD9         	movff	ultoa@buf,fsr2l
  5876  00408C  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
  5877  004090  C079  FFDF         	movff	ultoa@c,indf2
  5878                           
  5879                           ; BSR set to: 0
  5880  004094  076D               	decf	ultoa@buf& (0+255),f,b
  5881  004096  A0D8               	btfss	status,0,c
  5882  004098  076E               	decf	(ultoa@buf+1)& (0+255),f,b
  5883                           
  5884                           ; BSR set to: 0
  5885  00409A  516F               	movf	ultoa@val& (0+255),w,b
  5886  00409C  1170               	iorwf	(ultoa@val+1)& (0+255),w,b
  5887  00409E  1171               	iorwf	(ultoa@val+2)& (0+255),w,b
  5888  0040A0  1172               	iorwf	(ultoa@val+3)& (0+255),w,b
  5889  0040A2  B4D8               	btfsc	status,2,c
  5890  0040A4  0012               	return	
  5891  0040A6  D7B7               	goto	l2076
  5892  0040A8                     __end_of_ultoa:
  5893                           	opt stack 0
  5894                           tosu	equ	0xFFF
  5895                           tosh	equ	0xFFE
  5896                           tosl	equ	0xFFD
  5897                           pclath	equ	0xFFA
  5898                           tblptru	equ	0xFF8
  5899                           tblptrh	equ	0xFF7
  5900                           tblptrl	equ	0xFF6
  5901                           tablat	equ	0xFF5
  5902                           prodh	equ	0xFF4
  5903                           prodl	equ	0xFF3
  5904                           intcon	equ	0xFF2
  5905                           intcon2	equ	0xFF1
  5906                           intcon3	equ	0xFF0
  5907                           postinc0	equ	0xFEE
  5908                           wreg	equ	0xFE8
  5909                           postinc1	equ	0xFE6
  5910                           postdec1	equ	0xFE5
  5911                           plusw1	equ	0xFE3
  5912                           fsr1h	equ	0xFE2
  5913                           fsr1l	equ	0xFE1
  5914                           indf2	equ	0xFDF
  5915                           postinc2	equ	0xFDE
  5916                           postdec2	equ	0xFDD
  5917                           plusw2	equ	0xFDB
  5918                           fsr2h	equ	0xFDA
  5919                           fsr2l	equ	0xFD9
  5920                           status	equ	0xFD8
  5921                           
  5922 ;; *************** function _escreve_cmd_lcd *****************
  5923 ;; Defined at:
  5924 ;;		line 162 in file "bibliotecas/display_lcd.c"
  5925 ;; Parameters:    Size  Location     Type
  5926 ;;  comando         1    wreg     unsigned char 
  5927 ;; Auto vars:     Size  Location     Type
  5928 ;;  comando         1    2[BANK0 ] unsigned char 
  5929 ;; Return value:  Size  Location     Type
  5930 ;;                  1    wreg      void 
  5931 ;; Registers used:
  5932 ;;		wreg, status,2, status,0, cstack
  5933 ;; Tracked objects:
  5934 ;;		On entry : 0/0
  5935 ;;		On exit  : 0/0
  5936 ;;		Unchanged: 0/0
  5937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5938 ;;      Params:         0       0       0       0       0       0       0       0       0
  5939 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5940 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5941 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5942 ;;Total ram usage:        1 bytes
  5943 ;; Hardware stack levels used:    1
  5944 ;; Hardware stack levels required when called:    4
  5945 ;; This function calls:
  5946 ;;		_delay
  5947 ;; This function is called by:
  5948 ;;		_init_lcd
  5949 ;;		_mensagem_inicial
  5950 ;;		_troca_de_tela
  5951 ;;		_cria_caractere_lcd
  5952 ;; This function uses a non-reentrant model
  5953 ;;
  5954                           
  5955                           	psect	text24
  5956  004CEC                     __ptext24:
  5957                           	opt stack 0
  5958  004CEC                     _escreve_cmd_lcd:
  5959                           	opt stack 25
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;incstack = 0
  5963                           ;escreve_cmd_lcd@comando stored from wreg
  5964  004CEC  0100               	movlb	0	; () banked
  5965  004CEE  6F62               	movwf	escreve_cmd_lcd@comando& (0+255),b
  5966                           
  5967                           ;display_lcd.c: 165: PORTDbits.RD2 = 0;
  5968  004CF0  9483               	bcf	3971,2,c	;volatile
  5969                           
  5970                           ;display_lcd.c: 166: PORTDbits.RD1 = 0;
  5971  004CF2  9283               	bcf	3971,1,c	;volatile
  5972                           
  5973                           ;display_lcd.c: 167: PORTDbits.RD0 = 0;
  5974  004CF4  9083               	bcf	3971,0,c	;volatile
  5975                           
  5976                           ;display_lcd.c: 170: if(comando&0b00010000){PORTDbits.RD4=1;}
  5977  004CF6  0100               	movlb	0	; () banked
  5978  004CF8  A962               	btfss	escreve_cmd_lcd@comando& (0+255),4,b
  5979  004CFA  D002               	goto	l191
  5980                           
  5981                           ; BSR set to: 0
  5982  004CFC  8883               	bsf	3971,4,c	;volatile
  5983  004CFE  D001               	goto	l192
  5984  004D00                     l191:
  5985                           
  5986                           ; BSR set to: 0
  5987                           ;display_lcd.c: 171: else {PORTDbits.RD4=0;}
  5988  004D00  9883               	bcf	3971,4,c	;volatile
  5989  004D02                     l192:
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;display_lcd.c: 172: if(comando&0b00100000){PORTDbits.RD5=1;}
  5993                           
  5994                           ; BSR set to: 0
  5995  004D02  AB62               	btfss	escreve_cmd_lcd@comando& (0+255),5,b
  5996  004D04  D002               	goto	l193
  5997                           
  5998                           ; BSR set to: 0
  5999  004D06  8A83               	bsf	3971,5,c	;volatile
  6000  004D08  D001               	goto	l194
  6001  004D0A                     l193:
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;display_lcd.c: 173: else {PORTDbits.RD5=0;}
  6005  004D0A  9A83               	bcf	3971,5,c	;volatile
  6006  004D0C                     l194:
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;display_lcd.c: 174: if(comando&0b01000000){PORTDbits.RD6=1;}
  6010                           
  6011                           ; BSR set to: 0
  6012  004D0C  AD62               	btfss	escreve_cmd_lcd@comando& (0+255),6,b
  6013  004D0E  D002               	goto	l195
  6014                           
  6015                           ; BSR set to: 0
  6016  004D10  8C83               	bsf	3971,6,c	;volatile
  6017  004D12  D001               	goto	l196
  6018  004D14                     l195:
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;display_lcd.c: 175: else {PORTDbits.RD6=0;}
  6022  004D14  9C83               	bcf	3971,6,c	;volatile
  6023  004D16                     l196:
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;display_lcd.c: 176: if(comando&0b10000000){PORTDbits.RD7=1;}
  6027                           
  6028                           ; BSR set to: 0
  6029  004D16  AF62               	btfss	escreve_cmd_lcd@comando& (0+255),7,b
  6030  004D18  D002               	goto	l197
  6031                           
  6032                           ; BSR set to: 0
  6033  004D1A  8E83               	bsf	3971,7,c	;volatile
  6034  004D1C  D001               	goto	l198
  6035  004D1E                     l197:
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;display_lcd.c: 177: else {PORTDbits.RD7=0;}
  6039  004D1E  9E83               	bcf	3971,7,c	;volatile
  6040  004D20                     l198:
  6041                           
  6042                           ; BSR set to: 0
  6043                           ;display_lcd.c: 180: PORTDbits.RD0 = 1;
  6044  004D20  8083               	bsf	3971,0,c	;volatile
  6045                           
  6046                           ; BSR set to: 0
  6047                           ;display_lcd.c: 181: delay();
  6048  004D22  ECB8  F02E         	call	_delay	;wreg free
  6049                           
  6050                           ;display_lcd.c: 182: PORTDbits.RD0 = 0;
  6051  004D26  9083               	bcf	3971,0,c	;volatile
  6052                           
  6053                           ;display_lcd.c: 183: delay();
  6054  004D28  ECB8  F02E         	call	_delay	;wreg free
  6055                           
  6056                           ;display_lcd.c: 186: if(comando&0b00000001){PORTDbits.RD4=1;}
  6057  004D2C  0100               	movlb	0	; () banked
  6058  004D2E  A162               	btfss	escreve_cmd_lcd@comando& (0+255),0,b
  6059  004D30  D002               	goto	l199
  6060                           
  6061                           ; BSR set to: 0
  6062  004D32  8883               	bsf	3971,4,c	;volatile
  6063  004D34  D001               	goto	l200
  6064  004D36                     l199:
  6065                           
  6066                           ; BSR set to: 0
  6067                           ;display_lcd.c: 187: else {PORTDbits.RD4=0;}
  6068  004D36  9883               	bcf	3971,4,c	;volatile
  6069  004D38                     l200:
  6070                           
  6071                           ; BSR set to: 0
  6072                           ;display_lcd.c: 188: if(comando&0b00000010){PORTDbits.RD5=1;}
  6073  004D38  A362               	btfss	escreve_cmd_lcd@comando& (0+255),1,b
  6074  004D3A  D002               	goto	l201
  6075                           
  6076                           ; BSR set to: 0
  6077  004D3C  8A83               	bsf	3971,5,c	;volatile
  6078  004D3E  D001               	goto	l202
  6079  004D40                     l201:
  6080                           
  6081                           ; BSR set to: 0
  6082                           ;display_lcd.c: 189: else {PORTDbits.RD5=0;}
  6083  004D40  9A83               	bcf	3971,5,c	;volatile
  6084  004D42                     l202:
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;display_lcd.c: 190: if(comando&0b00000100){PORTDbits.RD6=1;}
  6088  004D42  A562               	btfss	escreve_cmd_lcd@comando& (0+255),2,b
  6089  004D44  D002               	goto	l203
  6090                           
  6091                           ; BSR set to: 0
  6092  004D46  8C83               	bsf	3971,6,c	;volatile
  6093  004D48  D001               	goto	l204
  6094  004D4A                     l203:
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;display_lcd.c: 191: else {PORTDbits.RD6=0;}
  6098  004D4A  9C83               	bcf	3971,6,c	;volatile
  6099  004D4C                     l204:
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;display_lcd.c: 192: if(comando&0b00001000){PORTDbits.RD7=1;}
  6103  004D4C  A762               	btfss	escreve_cmd_lcd@comando& (0+255),3,b
  6104  004D4E  D002               	goto	l205
  6105                           
  6106                           ; BSR set to: 0
  6107  004D50  8E83               	bsf	3971,7,c	;volatile
  6108  004D52  D001               	goto	l206
  6109  004D54                     l205:
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;display_lcd.c: 193: else {PORTDbits.RD7=0;}
  6113  004D54  9E83               	bcf	3971,7,c	;volatile
  6114  004D56                     l206:
  6115                           
  6116                           ; BSR set to: 0
  6117                           ;display_lcd.c: 196: PORTDbits.RD0 = 1;
  6118  004D56  8083               	bsf	3971,0,c	;volatile
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;display_lcd.c: 197: delay();
  6122  004D58  ECB8  F02E         	call	_delay	;wreg free
  6123                           
  6124                           ;display_lcd.c: 198: PORTDbits.RD0 = 0;
  6125  004D5C  9083               	bcf	3971,0,c	;volatile
  6126                           
  6127                           ;display_lcd.c: 199: delay();
  6128  004D5E  ECB8  F02E         	call	_delay	;wreg free
  6129                           
  6130                           ;display_lcd.c: 204: if (comando==0x01 || comando==0x02 || comando==0x03)
  6131  004D62  0100               	movlb	0	; () banked
  6132  004D64  0562               	decf	escreve_cmd_lcd@comando& (0+255),w,b
  6133  004D66  B4D8               	btfsc	status,2,c
  6134  004D68  D008               	goto	u17600
  6135                           
  6136                           ; BSR set to: 0
  6137  004D6A  0E02               	movlw	2
  6138  004D6C  1962               	xorwf	escreve_cmd_lcd@comando& (0+255),w,b
  6139  004D6E  B4D8               	btfsc	status,2,c
  6140  004D70  D004               	goto	u17600
  6141                           
  6142                           ; BSR set to: 0
  6143  004D72  0E03               	movlw	3
  6144  004D74  1962               	xorwf	escreve_cmd_lcd@comando& (0+255),w,b
  6145  004D76  A4D8               	btfss	status,2,c
  6146  004D78  0012               	return	
  6147  004D7A                     u17600:
  6148                           
  6149                           ; BSR set to: 0
  6150                           ;display_lcd.c: 205: { delay(); }
  6151                           
  6152                           ; BSR set to: 0
  6153  004D7A  ECB8  F02E         	call	_delay	;wreg free
  6154  004D7E  0012               	return	
  6155  004D80                     __end_of_escreve_cmd_lcd:
  6156                           	opt stack 0
  6157                           tosu	equ	0xFFF
  6158                           tosh	equ	0xFFE
  6159                           tosl	equ	0xFFD
  6160                           pclath	equ	0xFFA
  6161                           tblptru	equ	0xFF8
  6162                           tblptrh	equ	0xFF7
  6163                           tblptrl	equ	0xFF6
  6164                           tablat	equ	0xFF5
  6165                           prodh	equ	0xFF4
  6166                           prodl	equ	0xFF3
  6167                           intcon	equ	0xFF2
  6168                           intcon2	equ	0xFF1
  6169                           intcon3	equ	0xFF0
  6170                           postinc0	equ	0xFEE
  6171                           wreg	equ	0xFE8
  6172                           postinc1	equ	0xFE6
  6173                           postdec1	equ	0xFE5
  6174                           plusw1	equ	0xFE3
  6175                           fsr1h	equ	0xFE2
  6176                           fsr1l	equ	0xFE1
  6177                           indf2	equ	0xFDF
  6178                           postinc2	equ	0xFDE
  6179                           postdec2	equ	0xFDD
  6180                           plusw2	equ	0xFDB
  6181                           fsr2h	equ	0xFDA
  6182                           fsr2l	equ	0xFD9
  6183                           status	equ	0xFD8
  6184                           
  6185 ;; *************** function _verifica_fence *****************
  6186 ;; Defined at:
  6187 ;;		line 269 in file "main.c"
  6188 ;; Parameters:    Size  Location     Type
  6189 ;;		None
  6190 ;; Auto vars:     Size  Location     Type
  6191 ;;  timeout         1   77[BANK0 ] unsigned char 
  6192 ;; Return value:  Size  Location     Type
  6193 ;;                  1    wreg      void 
  6194 ;; Registers used:
  6195 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6196 ;; Tracked objects:
  6197 ;;		On entry : 0/0
  6198 ;;		On exit  : 0/0
  6199 ;;		Unchanged: 0/0
  6200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6201 ;;      Params:         0       0       0       0       0       0       0       0       0
  6202 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6203 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6204 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6205 ;;Total ram usage:        2 bytes
  6206 ;; Hardware stack levels used:    1
  6207 ;; Hardware stack levels required when called:    9
  6208 ;; This function calls:
  6209 ;;		_latitude_to_convert
  6210 ;;		_longitude_to_convert
  6211 ;;		_monta_sd
  6212 ;;		_verifica_plausibilidade_lat
  6213 ;;		_verifica_plausibilidade_long
  6214 ;;		_verifica_recep_gps
  6215 ;; This function is called by:
  6216 ;;		_verifica_dados_operacionais
  6217 ;;		_disparo_gravacao
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           	psect	text25
  6222  005132                     __ptext25:
  6223                           	opt stack 0
  6224  005132                     _verifica_fence:
  6225                           	opt stack 19
  6226                           
  6227                           ;main.c: 271: unsigned char timeout = 10;
  6228                           
  6229                           ;incstack = 0
  6230  005132  0E0A               	movlw	10
  6231  005134  0100               	movlb	0	; () banked
  6232  005136  6FAD               	movwf	verifica_fence@timeout& (0+255),b
  6233                           
  6234                           ;main.c: 272: while(!(verifica_recep_gps() && timeout))
  6235  005138  D002               	goto	l1467
  6236  00513A                     
  6237                           ;main.c: 273: {
  6238                           ;main.c: 274: timeout--;
  6239                           
  6240                           ; BSR set to: 0
  6241  00513A  0100               	movlb	0	; () banked
  6242  00513C  07AD               	decf	verifica_fence@timeout& (0+255),f,b
  6243  00513E                     l1467:
  6244                           
  6245                           ; BSR set to: 0
  6246                           
  6247                           ; BSR set to: 0
  6248  00513E  ECCD  F02E         	call	_verifica_recep_gps	;wreg free
  6249  005142  0900               	iorlw	0
  6250  005144  B4D8               	btfsc	status,2,c
  6251  005146  D7F9               	goto	l1468
  6252  005148  0100               	movlb	0	; () banked
  6253  00514A  51AD               	movf	verifica_fence@timeout& (0+255),w,b
  6254  00514C  B4D8               	btfsc	status,2,c
  6255  00514E  D7F5               	goto	l1468
  6256                           
  6257                           ; BSR set to: 0
  6258                           ;main.c: 275: }
  6259                           ;main.c: 277: longitude_to_convert(0);
  6260                           
  6261                           ; BSR set to: 0
  6262  005150  0E00               	movlw	0
  6263  005152  ECDD  F022         	call	_longitude_to_convert
  6264                           
  6265                           ;main.c: 278: latitude_to_convert(1);
  6266  005156  0E01               	movlw	1
  6267  005158  EC37  F023         	call	_latitude_to_convert
  6268                           
  6269                           ;main.c: 279: fence_flag[0].point = verifica_plausibilidade_long();
  6270  00515C  EC4E  F027         	call	_verifica_plausibilidade_long	;wreg free
  6271  005160  0100               	movlb	0	; () banked
  6272  005162  6FAC               	movwf	??_verifica_fence& (0+255),b
  6273  005164  51F3               	movf	_fence_flag& (0+255),w,b
  6274  005166  19AC               	xorwf	??_verifica_fence& (0+255),w,b
  6275  005168  0BFE               	andlw	-2
  6276  00516A  19AC               	xorwf	??_verifica_fence& (0+255),w,b
  6277  00516C  6FF3               	movwf	_fence_flag& (0+255),b
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;main.c: 280: fence_flag[1].point = verifica_plausibilidade_lat();
  6281  00516E  EC87  F025         	call	_verifica_plausibilidade_lat	;wreg free
  6282  005172  0100               	movlb	0	; () banked
  6283  005174  6FAC               	movwf	??_verifica_fence& (0+255),b
  6284  005176  51F4               	movf	(_fence_flag+1)& (0+255),w,b
  6285  005178  19AC               	xorwf	??_verifica_fence& (0+255),w,b
  6286  00517A  0BFE               	andlw	-2
  6287  00517C  19AC               	xorwf	??_verifica_fence& (0+255),w,b
  6288  00517E  6FF4               	movwf	(_fence_flag+1)& (0+255),b
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;main.c: 285: if(fence_flag[0].point || fence_flag[1].point)
  6292  005180  B1F3               	btfsc	_fence_flag& (0+255),0,b
  6293  005182  D002               	goto	u17650
  6294                           
  6295                           ; BSR set to: 0
  6296  005184  A1F4               	btfss	(_fence_flag+1)& (0+255),0,b
  6297  005186  D009               	goto	l1470
  6298  005188                     u17650:
  6299                           
  6300                           ; BSR set to: 0
  6301                           ;main.c: 286: {
  6302                           ;main.c: 287: fence_flag[2].point = 1;
  6303  005188  81F5               	bsf	(_fence_flag+2)& (0+255),0,b
  6304                           
  6305                           ; BSR set to: 0
  6306                           ;main.c: 288: monta_sd(4, "FORA");
  6307  00518A  0E5F               	movlw	low STR_26
  6308  00518C  6F66               	movwf	monta_sd@dado& (0+255),b
  6309  00518E  0E62               	movlw	high STR_26
  6310  005190  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
  6311  005192  0E04               	movlw	4
  6312  005194  EC7F  F00B         	call	_monta_sd
  6313                           
  6314                           ;main.c: 289: }
  6315  005198  0012               	return	
  6316  00519A                     l1470:
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;main.c: 290: else
  6320                           ;main.c: 291: {
  6321                           ;main.c: 292: fence_flag[2].point = 0;
  6322  00519A  91F5               	bcf	(_fence_flag+2)& (0+255),0,b
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;main.c: 293: monta_sd(4, "DENTRO");
  6326  00519C  0E3A               	movlw	low STR_27
  6327  00519E  6F66               	movwf	monta_sd@dado& (0+255),b
  6328  0051A0  0E62               	movlw	high STR_27
  6329  0051A2  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
  6330  0051A4  0E04               	movlw	4
  6331  0051A6  EC7F  F00B         	call	_monta_sd
  6332  0051AA  0012               	return	
  6333  0051AC                     __end_of_verifica_fence:
  6334                           	opt stack 0
  6335                           tosu	equ	0xFFF
  6336                           tosh	equ	0xFFE
  6337                           tosl	equ	0xFFD
  6338                           pclath	equ	0xFFA
  6339                           tblptru	equ	0xFF8
  6340                           tblptrh	equ	0xFF7
  6341                           tblptrl	equ	0xFF6
  6342                           tablat	equ	0xFF5
  6343                           prodh	equ	0xFF4
  6344                           prodl	equ	0xFF3
  6345                           intcon	equ	0xFF2
  6346                           intcon2	equ	0xFF1
  6347                           intcon3	equ	0xFF0
  6348                           postinc0	equ	0xFEE
  6349                           wreg	equ	0xFE8
  6350                           postinc1	equ	0xFE6
  6351                           postdec1	equ	0xFE5
  6352                           plusw1	equ	0xFE3
  6353                           fsr1h	equ	0xFE2
  6354                           fsr1l	equ	0xFE1
  6355                           indf2	equ	0xFDF
  6356                           postinc2	equ	0xFDE
  6357                           postdec2	equ	0xFDD
  6358                           plusw2	equ	0xFDB
  6359                           fsr2h	equ	0xFDA
  6360                           fsr2l	equ	0xFD9
  6361                           status	equ	0xFD8
  6362                           
  6363 ;; *************** function _verifica_recep_gps *****************
  6364 ;; Defined at:
  6365 ;;		line 304 in file "bibliotecas/GPS.c"
  6366 ;; Parameters:    Size  Location     Type
  6367 ;;		None
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;		None
  6370 ;; Return value:  Size  Location     Type
  6371 ;;                  1    wreg      unsigned char 
  6372 ;; Registers used:
  6373 ;;		wreg
  6374 ;; Tracked objects:
  6375 ;;		On entry : 0/0
  6376 ;;		On exit  : 0/0
  6377 ;;		Unchanged: 0/0
  6378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6379 ;;      Params:         0       0       0       0       0       0       0       0       0
  6380 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6381 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6382 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6383 ;;Total ram usage:        0 bytes
  6384 ;; Hardware stack levels used:    1
  6385 ;; Hardware stack levels required when called:    3
  6386 ;; This function calls:
  6387 ;;		Nothing
  6388 ;; This function is called by:
  6389 ;;		_verifica_fence
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           	psect	text26
  6394  005D9A                     __ptext26:
  6395                           	opt stack 0
  6396  005D9A                     _verifica_recep_gps:
  6397                           	opt stack 24
  6398                           
  6399                           ;GPS.c: 307: if(gps_flag[0].flag && gps_flag[1].flag && gps_flag[2].flag && gps_flag[3].
      +                          flag && gps_flag[4].flag && gps_flag[5].flag)
  6400                           
  6401                           ;incstack = 0
  6402  005D9A  0101               	movlb	1	; () banked
  6403  005D9C  B12F               	btfsc	_gps_flag& (0+255),0,b
  6404                           
  6405                           ; BSR set to: 1
  6406  005D9E  A130               	btfss	(_gps_flag+1)& (0+255),0,b
  6407  005DA0  D00E               	goto	l440
  6408                           
  6409                           ; BSR set to: 1
  6410  005DA2  B131               	btfsc	(_gps_flag+2)& (0+255),0,b
  6411                           
  6412                           ; BSR set to: 1
  6413  005DA4  A132               	btfss	(_gps_flag+3)& (0+255),0,b
  6414  005DA6  D00B               	goto	l440
  6415                           
  6416                           ; BSR set to: 1
  6417  005DA8  B133               	btfsc	(_gps_flag+4)& (0+255),0,b
  6418                           
  6419                           ; BSR set to: 1
  6420  005DAA  A134               	btfss	(_gps_flag+5)& (0+255),0,b
  6421  005DAC  D008               	goto	l440
  6422                           
  6423                           ; BSR set to: 1
  6424                           ;GPS.c: 308: {
  6425                           ;GPS.c: 309: gps_flag[0].flag = 0;
  6426  005DAE  912F               	bcf	_gps_flag& (0+255),0,b
  6427                           
  6428                           ;GPS.c: 310: gps_flag[1].flag = 0;
  6429  005DB0  9130               	bcf	(_gps_flag+1)& (0+255),0,b
  6430                           
  6431                           ;GPS.c: 311: gps_flag[2].flag = 0;
  6432  005DB2  9131               	bcf	(_gps_flag+2)& (0+255),0,b
  6433                           
  6434                           ;GPS.c: 312: gps_flag[3].flag = 0;
  6435  005DB4  9132               	bcf	(_gps_flag+3)& (0+255),0,b
  6436                           
  6437                           ;GPS.c: 313: gps_flag[4].flag = 0;
  6438  005DB6  9133               	bcf	(_gps_flag+4)& (0+255),0,b
  6439                           
  6440                           ;GPS.c: 314: gps_flag[5].flag = 0;
  6441  005DB8  9134               	bcf	(_gps_flag+5)& (0+255),0,b
  6442                           
  6443                           ; BSR set to: 1
  6444                           ;GPS.c: 315: return 1;
  6445  005DBA  0E01               	movlw	1
  6446                           
  6447                           ; BSR set to: 1
  6448                           ;GPS.c: 316: }
  6449                           
  6450                           ; BSR set to: 1
  6451  005DBC  0012               	return	
  6452  005DBE                     l440:
  6453                           
  6454                           ; BSR set to: 1
  6455                           ;GPS.c: 317: else
  6456                           ;GPS.c: 318: {
  6457                           ;GPS.c: 320: return 0;
  6458                           
  6459                           ; BSR set to: 1
  6460  005DBE  0E00               	movlw	0
  6461                           
  6462                           ; BSR set to: 1
  6463  005DC0  0012               	return	
  6464  005DC2                     __end_of_verifica_recep_gps:
  6465                           	opt stack 0
  6466                           tosu	equ	0xFFF
  6467                           tosh	equ	0xFFE
  6468                           tosl	equ	0xFFD
  6469                           pclath	equ	0xFFA
  6470                           tblptru	equ	0xFF8
  6471                           tblptrh	equ	0xFF7
  6472                           tblptrl	equ	0xFF6
  6473                           tablat	equ	0xFF5
  6474                           prodh	equ	0xFF4
  6475                           prodl	equ	0xFF3
  6476                           intcon	equ	0xFF2
  6477                           intcon2	equ	0xFF1
  6478                           intcon3	equ	0xFF0
  6479                           postinc0	equ	0xFEE
  6480                           wreg	equ	0xFE8
  6481                           postinc1	equ	0xFE6
  6482                           postdec1	equ	0xFE5
  6483                           plusw1	equ	0xFE3
  6484                           fsr1h	equ	0xFE2
  6485                           fsr1l	equ	0xFE1
  6486                           indf2	equ	0xFDF
  6487                           postinc2	equ	0xFDE
  6488                           postdec2	equ	0xFDD
  6489                           plusw2	equ	0xFDB
  6490                           fsr2h	equ	0xFDA
  6491                           fsr2l	equ	0xFD9
  6492                           status	equ	0xFD8
  6493                           
  6494 ;; *************** function _verifica_plausibilidade_long *****************
  6495 ;; Defined at:
  6496 ;;		line 311 in file "bibliotecas/fence.c"
  6497 ;; Parameters:    Size  Location     Type
  6498 ;;		None
  6499 ;; Auto vars:     Size  Location     Type
  6500 ;;  posicao         1    0[BANK0 ] unsigned char 
  6501 ;; Return value:  Size  Location     Type
  6502 ;;                  1    wreg      unsigned char 
  6503 ;; Registers used:
  6504 ;;		wreg, status,2, status,0, cstack
  6505 ;; Tracked objects:
  6506 ;;		On entry : 0/0
  6507 ;;		On exit  : 0/0
  6508 ;;		Unchanged: 0/0
  6509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6510 ;;      Params:         0       0       0       0       0       0       0       0       0
  6511 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6512 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6513 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6514 ;;Total ram usage:        1 bytes
  6515 ;; Hardware stack levels used:    1
  6516 ;; Hardware stack levels required when called:    4
  6517 ;; This function calls:
  6518 ;;		_posicao_long
  6519 ;; This function is called by:
  6520 ;;		_verifica_fence
  6521 ;; This function uses a non-reentrant model
  6522 ;;
  6523                           
  6524                           	psect	text27
  6525  004E9C                     __ptext27:
  6526                           	opt stack 0
  6527  004E9C                     _verifica_plausibilidade_long:
  6528                           	opt stack 23
  6529                           
  6530                           ;fence.c: 313: char posicao = posicao_long();
  6531                           
  6532                           ; BSR set to: 1
  6533                           ;incstack = 0
  6534  004E9C  ECDC  F02F         	call	_posicao_long	;wreg free
  6535  004EA0  0100               	movlb	0	; () banked
  6536  004EA2  6F60               	movwf	verifica_plausibilidade_long@posicao& (0+255),b
  6537                           
  6538                           ;fence.c: 314: switch(posicao)
  6539  004EA4  D03A               	goto	l1564
  6540  004EA6                     
  6541                           ; BSR set to: 0
  6542                           ;fence.c: 317: if(
  6543                           ;fence.c: 318: (poligono_ext[0].diff_long >= 0 &&
  6544                           ;fence.c: 319: poligono_ext[1].diff_long <= 0))
  6545                           
  6546                           ; BSR set to: 0
  6547  004EA6  BE29               	btfsc	_poligono_ext+7,7,c
  6548  004EA8  D00B               	goto	l1566
  6549                           
  6550                           ; BSR set to: 0
  6551  004EAA  BE31               	btfsc	_poligono_ext+15,7,c
  6552  004EAC  D007               	goto	u17250
  6553  004EAE  5031               	movf	_poligono_ext+15,w,c
  6554  004EB0  1030               	iorwf	_poligono_ext+14,w,c
  6555  004EB2  102F               	iorwf	_poligono_ext+13,w,c
  6556  004EB4  E105               	bnz	l13090
  6557  004EB6  042E               	decf	_poligono_ext+12,w,c
  6558  004EB8  B0D8               	btfsc	status,0,c
  6559  004EBA  D002               	goto	l1566
  6560  004EBC                     u17250:
  6561                           
  6562                           ; BSR set to: 0
  6563                           ;fence.c: 320: {
  6564                           ;fence.c: 321: return 0;
  6565  004EBC  0E00               	movlw	0
  6566                           
  6567                           ; BSR set to: 0
  6568                           ;fence.c: 322: }
  6569                           
  6570                           ; BSR set to: 0
  6571  004EBE  0012               	return	
  6572  004EC0                     l1566:
  6573  004EC0                     l13090:
  6574                           
  6575                           ; BSR set to: 0
  6576                           ;fence.c: 323: else if(
  6577                           ;fence.c: 324: (poligono_ext[0].diff_long == 0 ||
  6578                           ;fence.c: 325: poligono_ext[1].diff_long == 0 ))
  6579  004EC0  5026               	movf	_poligono_ext+4,w,c
  6580  004EC2  1027               	iorwf	_poligono_ext+5,w,c
  6581  004EC4  1028               	iorwf	_poligono_ext+6,w,c
  6582  004EC6  1029               	iorwf	_poligono_ext+7,w,c
  6583  004EC8  B4D8               	btfsc	status,2,c
  6584  004ECA  D006               	goto	u17270
  6585                           
  6586                           ; BSR set to: 0
  6587  004ECC  502E               	movf	_poligono_ext+12,w,c
  6588  004ECE  102F               	iorwf	_poligono_ext+13,w,c
  6589  004ED0  1030               	iorwf	_poligono_ext+14,w,c
  6590  004ED2  1031               	iorwf	_poligono_ext+15,w,c
  6591  004ED4  A4D8               	btfss	status,2,c
  6592  004ED6  D002               	goto	l1569
  6593  004ED8                     u17270:
  6594                           
  6595                           ; BSR set to: 0
  6596                           ;fence.c: 326: {
  6597                           ;fence.c: 327: return 0;
  6598                           
  6599                           ; BSR set to: 0
  6600  004ED8  0E00               	movlw	0
  6601                           
  6602                           ; BSR set to: 0
  6603                           ;fence.c: 328: }
  6604                           
  6605                           ; BSR set to: 0
  6606  004EDA  0012               	return	
  6607  004EDC                     l1569:
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;fence.c: 329: else
  6611                           ;fence.c: 330: {
  6612                           ;fence.c: 331: return 1;
  6613                           
  6614                           ; BSR set to: 0
  6615  004EDC  0E01               	movlw	1
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;fence.c: 332: }
  6619                           ;fence.c: 333: break;
  6620                           
  6621                           ; BSR set to: 0
  6622                           
  6623                           ; BSR set to: 0
  6624  004EDE  0012               	return	
  6625  004EE0                     
  6626                           ; BSR set to: 0
  6627                           ;fence.c: 336: if(
  6628                           ;fence.c: 337: (poligono_ext[0].diff_long <= 0 &&
  6629                           ;fence.c: 338: poligono_ext[1].diff_long >= 0 ) )
  6630                           
  6631                           ; BSR set to: 0
  6632  004EE0  BE29               	btfsc	_poligono_ext+7,7,c
  6633  004EE2  D007               	goto	u17280
  6634  004EE4  5029               	movf	_poligono_ext+7,w,c
  6635  004EE6  1028               	iorwf	_poligono_ext+6,w,c
  6636  004EE8  1027               	iorwf	_poligono_ext+5,w,c
  6637  004EEA  E107               	bnz	l13114
  6638  004EEC  0426               	decf	_poligono_ext+4,w,c
  6639  004EEE  B0D8               	btfsc	status,0,c
  6640  004EF0  D004               	goto	l1575
  6641  004EF2                     u17280:
  6642                           
  6643                           ; BSR set to: 0
  6644  004EF2  BE31               	btfsc	_poligono_ext+15,7,c
  6645  004EF4  D002               	goto	l1575
  6646                           
  6647                           ; BSR set to: 0
  6648                           ;fence.c: 339: {
  6649                           ;fence.c: 340: return 0;
  6650  004EF6  0E00               	movlw	0
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;fence.c: 341: }
  6654                           
  6655                           ; BSR set to: 0
  6656  004EF8  0012               	return	
  6657  004EFA                     l1575:
  6658  004EFA                     l13114:
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;fence.c: 342: else if(
  6662                           ;fence.c: 343: (poligono_ext[0].diff_long == 0 ||
  6663                           ;fence.c: 344: poligono_ext[1].diff_long == 0 ))
  6664  004EFA  5026               	movf	_poligono_ext+4,w,c
  6665  004EFC  1027               	iorwf	_poligono_ext+5,w,c
  6666  004EFE  1028               	iorwf	_poligono_ext+6,w,c
  6667  004F00  1029               	iorwf	_poligono_ext+7,w,c
  6668  004F02  B4D8               	btfsc	status,2,c
  6669  004F04  D006               	goto	u17310
  6670                           
  6671                           ; BSR set to: 0
  6672  004F06  502E               	movf	_poligono_ext+12,w,c
  6673  004F08  102F               	iorwf	_poligono_ext+13,w,c
  6674  004F0A  1030               	iorwf	_poligono_ext+14,w,c
  6675  004F0C  1031               	iorwf	_poligono_ext+15,w,c
  6676  004F0E  A4D8               	btfss	status,2,c
  6677  004F10  D002               	goto	l1577
  6678  004F12                     u17310:
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;fence.c: 345: {
  6682                           ;fence.c: 346: return 0;
  6683                           
  6684                           ; BSR set to: 0
  6685  004F12  0E00               	movlw	0
  6686                           
  6687                           ; BSR set to: 0
  6688                           ;fence.c: 347: }
  6689                           
  6690                           ; BSR set to: 0
  6691  004F14  0012               	return	
  6692  004F16                     l1577:
  6693                           
  6694                           ; BSR set to: 0
  6695                           ;fence.c: 348: else
  6696                           ;fence.c: 349: {
  6697                           ;fence.c: 350: return 1;
  6698                           
  6699                           ; BSR set to: 0
  6700  004F16  0E01               	movlw	1
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;fence.c: 354: }
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;fence.c: 351: }
  6707                           ;fence.c: 352: break;
  6708                           
  6709                           ; BSR set to: 0
  6710                           
  6711                           ; BSR set to: 0
  6712  004F18  0012               	return	
  6713  004F1A                     l1564:
  6714                           
  6715                           ; BSR set to: 0
  6716                           
  6717                           ; BSR set to: 0
  6718  004F1A  5160               	movf	verifica_plausibilidade_long@posicao& (0+255),w,b
  6719                           
  6720                           ; Switch size 1, requested type "space"
  6721                           ; Number of cases is 1, Range of values is 45 to 45
  6722                           ; switch strategies available:
  6723                           ; Name         Instructions Cycles
  6724                           ; simple_byte            4     3 (average)
  6725                           ;	Chosen strategy is simple_byte
  6726  004F1C  0A2D               	xorlw	45	; case 45
  6727  004F1E  B4D8               	btfsc	status,2,c
  6728  004F20  D7C2               	goto	l1565
  6729  004F22  D7DE               	goto	l1574
  6730  004F24                     __end_of_verifica_plausibilidade_long:
  6731                           	opt stack 0
  6732                           tosu	equ	0xFFF
  6733                           tosh	equ	0xFFE
  6734                           tosl	equ	0xFFD
  6735                           pclath	equ	0xFFA
  6736                           tblptru	equ	0xFF8
  6737                           tblptrh	equ	0xFF7
  6738                           tblptrl	equ	0xFF6
  6739                           tablat	equ	0xFF5
  6740                           prodh	equ	0xFF4
  6741                           prodl	equ	0xFF3
  6742                           intcon	equ	0xFF2
  6743                           intcon2	equ	0xFF1
  6744                           intcon3	equ	0xFF0
  6745                           postinc0	equ	0xFEE
  6746                           wreg	equ	0xFE8
  6747                           postinc1	equ	0xFE6
  6748                           postdec1	equ	0xFE5
  6749                           plusw1	equ	0xFE3
  6750                           fsr1h	equ	0xFE2
  6751                           fsr1l	equ	0xFE1
  6752                           indf2	equ	0xFDF
  6753                           postinc2	equ	0xFDE
  6754                           postdec2	equ	0xFDD
  6755                           plusw2	equ	0xFDB
  6756                           fsr2h	equ	0xFDA
  6757                           fsr2l	equ	0xFD9
  6758                           status	equ	0xFD8
  6759                           
  6760 ;; *************** function _verifica_plausibilidade_lat *****************
  6761 ;; Defined at:
  6762 ;;		line 365 in file "bibliotecas/fence.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;		None
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;  posicao         1    0[BANK0 ] unsigned char 
  6767 ;; Return value:  Size  Location     Type
  6768 ;;                  1    wreg      unsigned char 
  6769 ;; Registers used:
  6770 ;;		wreg, status,2, status,0, cstack
  6771 ;; Tracked objects:
  6772 ;;		On entry : 0/0
  6773 ;;		On exit  : 0/0
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6776 ;;      Params:         0       0       0       0       0       0       0       0       0
  6777 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6778 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6779 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6780 ;;Total ram usage:        1 bytes
  6781 ;; Hardware stack levels used:    1
  6782 ;; Hardware stack levels required when called:    4
  6783 ;; This function calls:
  6784 ;;		_posicao_lat
  6785 ;; This function is called by:
  6786 ;;		_verifica_fence
  6787 ;; This function uses a non-reentrant model
  6788 ;;
  6789                           
  6790                           	psect	text28
  6791  004B0E                     __ptext28:
  6792                           	opt stack 0
  6793  004B0E                     _verifica_plausibilidade_lat:
  6794                           	opt stack 23
  6795                           
  6796                           ;fence.c: 367: char posicao = posicao_lat();
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;incstack = 0
  6800  004B0E  ECDF  F02F         	call	_posicao_lat	;wreg free
  6801  004B12  0100               	movlb	0	; () banked
  6802  004B14  6F60               	movwf	verifica_plausibilidade_lat@posicao& (0+255),b
  6803                           
  6804                           ;fence.c: 368: switch(posicao)
  6805  004B16  D046               	goto	l1583
  6806  004B18                     
  6807                           ; BSR set to: 0
  6808                           ;fence.c: 371: if(
  6809                           ;fence.c: 372: ( poligono_ext[0].diff_lat <= 0 &&
  6810                           ;fence.c: 373: poligono_ext[1].diff_lat >= 0))
  6811                           
  6812                           ; BSR set to: 0
  6813  004B18  BE25               	btfsc	_poligono_ext+3,7,c
  6814  004B1A  D007               	goto	u17320
  6815  004B1C  5025               	movf	_poligono_ext+3,w,c
  6816  004B1E  1024               	iorwf	_poligono_ext+2,w,c
  6817  004B20  1023               	iorwf	_poligono_ext+1,w,c
  6818  004B22  E107               	bnz	l13144
  6819  004B24  0422               	decf	_poligono_ext,w,c
  6820  004B26  B0D8               	btfsc	status,0,c
  6821  004B28  D004               	goto	l1585
  6822  004B2A                     u17320:
  6823                           
  6824                           ; BSR set to: 0
  6825  004B2A  BE2D               	btfsc	_poligono_ext+11,7,c
  6826  004B2C  D002               	goto	l1585
  6827                           
  6828                           ; BSR set to: 0
  6829                           ;fence.c: 374: {
  6830                           ;fence.c: 375: return 0;
  6831  004B2E  0E00               	movlw	0
  6832                           
  6833                           ; BSR set to: 0
  6834                           ;fence.c: 376: }
  6835                           
  6836                           ; BSR set to: 0
  6837  004B30  0012               	return	
  6838  004B32                     l1585:
  6839  004B32                     l13144:
  6840                           
  6841                           ; BSR set to: 0
  6842                           ;fence.c: 377: else if(
  6843                           ;fence.c: 378: (poligono_ext[0].diff_lat == 0 ||
  6844                           ;fence.c: 379: poligono_ext[1].diff_lat == 0))
  6845  004B32  5022               	movf	_poligono_ext,w,c
  6846  004B34  1023               	iorwf	_poligono_ext+1,w,c
  6847  004B36  1024               	iorwf	_poligono_ext+2,w,c
  6848  004B38  1025               	iorwf	_poligono_ext+3,w,c
  6849  004B3A  B4D8               	btfsc	status,2,c
  6850  004B3C  D006               	goto	u17350
  6851                           
  6852                           ; BSR set to: 0
  6853  004B3E  502A               	movf	_poligono_ext+8,w,c
  6854  004B40  102B               	iorwf	_poligono_ext+9,w,c
  6855  004B42  102C               	iorwf	_poligono_ext+10,w,c
  6856  004B44  102D               	iorwf	_poligono_ext+11,w,c
  6857  004B46  A4D8               	btfss	status,2,c
  6858  004B48  D002               	goto	l1588
  6859  004B4A                     u17350:
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;fence.c: 381: {
  6863                           ;fence.c: 382: return 0;
  6864                           
  6865                           ; BSR set to: 0
  6866  004B4A  0E00               	movlw	0
  6867                           
  6868                           ; BSR set to: 0
  6869                           ;fence.c: 383: }
  6870                           
  6871                           ; BSR set to: 0
  6872  004B4C  0012               	return	
  6873  004B4E                     l1588:
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;fence.c: 384: else
  6877                           ;fence.c: 385: {
  6878                           ;fence.c: 387: return 1;
  6879                           
  6880                           ; BSR set to: 0
  6881  004B4E  0E01               	movlw	1
  6882                           
  6883                           ; BSR set to: 0
  6884                           ;fence.c: 388: }
  6885                           ;fence.c: 389: break;
  6886                           
  6887                           ; BSR set to: 0
  6888                           
  6889                           ; BSR set to: 0
  6890  004B50  0012               	return	
  6891  004B52                     
  6892                           ; BSR set to: 0
  6893                           ;fence.c: 392: if((poligono_ext[0].diff_lat >= 0 &&
  6894                           ;fence.c: 393: poligono_ext[1].diff_lat <= 0 ))
  6895                           
  6896                           ; BSR set to: 0
  6897  004B52  BE25               	btfsc	_poligono_ext+3,7,c
  6898  004B54  D00B               	goto	l1594
  6899                           
  6900                           ; BSR set to: 0
  6901  004B56  BE2D               	btfsc	_poligono_ext+11,7,c
  6902  004B58  D007               	goto	u17370
  6903  004B5A  502D               	movf	_poligono_ext+11,w,c
  6904  004B5C  102C               	iorwf	_poligono_ext+10,w,c
  6905  004B5E  102B               	iorwf	_poligono_ext+9,w,c
  6906  004B60  E105               	bnz	l13168
  6907  004B62  042A               	decf	_poligono_ext+8,w,c
  6908  004B64  B0D8               	btfsc	status,0,c
  6909  004B66  D002               	goto	l1594
  6910  004B68                     u17370:
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;fence.c: 394: {
  6914                           ;fence.c: 395: return 0;
  6915  004B68  0E00               	movlw	0
  6916                           
  6917                           ; BSR set to: 0
  6918                           ;fence.c: 396: }
  6919                           
  6920                           ; BSR set to: 0
  6921  004B6A  0012               	return	
  6922  004B6C                     l1594:
  6923  004B6C                     l13168:
  6924                           
  6925                           ; BSR set to: 0
  6926                           ;fence.c: 397: else if(
  6927                           ;fence.c: 398: (poligono_ext[0].diff_lat >= 0 ||
  6928                           ;fence.c: 399: poligono_ext[1].diff_lat <= 0))
  6929  004B6C  BE25               	btfsc	_poligono_ext+3,7,c
  6930                           
  6931                           ; BSR set to: 0
  6932  004B6E  BE2D               	btfsc	_poligono_ext+11,7,c
  6933  004B70  D007               	goto	u17390
  6934  004B72  502D               	movf	_poligono_ext+11,w,c
  6935  004B74  102C               	iorwf	_poligono_ext+10,w,c
  6936  004B76  102B               	iorwf	_poligono_ext+9,w,c
  6937  004B78  E105               	bnz	l13178
  6938  004B7A  042A               	decf	_poligono_ext+8,w,c
  6939  004B7C  B0D8               	btfsc	status,0,c
  6940  004B7E  D002               	goto	l1596
  6941  004B80                     u17390:
  6942                           
  6943                           ; BSR set to: 0
  6944                           ;fence.c: 400: {
  6945                           ;fence.c: 401: return 0;
  6946                           
  6947                           ; BSR set to: 0
  6948  004B80  0E00               	movlw	0
  6949                           
  6950                           ; BSR set to: 0
  6951                           ;fence.c: 402: }
  6952                           
  6953                           ; BSR set to: 0
  6954  004B82  0012               	return	
  6955  004B84                     l1596:
  6956  004B84                     l13178:
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;fence.c: 403: else if(
  6960                           ;fence.c: 404: (poligono_ext[0].diff_lat == 0 ||
  6961                           ;fence.c: 405: poligono_ext[1].diff_lat == 0))
  6962  004B84  5022               	movf	_poligono_ext,w,c
  6963  004B86  1023               	iorwf	_poligono_ext+1,w,c
  6964  004B88  1024               	iorwf	_poligono_ext+2,w,c
  6965  004B8A  1025               	iorwf	_poligono_ext+3,w,c
  6966  004B8C  B4D8               	btfsc	status,2,c
  6967  004B8E  D006               	goto	u17410
  6968                           
  6969                           ; BSR set to: 0
  6970  004B90  502A               	movf	_poligono_ext+8,w,c
  6971  004B92  102B               	iorwf	_poligono_ext+9,w,c
  6972  004B94  102C               	iorwf	_poligono_ext+10,w,c
  6973  004B96  102D               	iorwf	_poligono_ext+11,w,c
  6974  004B98  A4D8               	btfss	status,2,c
  6975  004B9A  D002               	goto	l1600
  6976  004B9C                     u17410:
  6977                           
  6978                           ; BSR set to: 0
  6979                           ;fence.c: 406: {
  6980                           ;fence.c: 407: return 0;
  6981                           
  6982                           ; BSR set to: 0
  6983  004B9C  0E00               	movlw	0
  6984                           
  6985                           ; BSR set to: 0
  6986                           ;fence.c: 408: }
  6987                           
  6988                           ; BSR set to: 0
  6989  004B9E  0012               	return	
  6990  004BA0                     l1600:
  6991                           
  6992                           ; BSR set to: 0
  6993                           ;fence.c: 409: else
  6994                           ;fence.c: 410: {
  6995                           ;fence.c: 411: return 1;
  6996                           
  6997                           ; BSR set to: 0
  6998  004BA0  0E01               	movlw	1
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;fence.c: 415: }
  7002                           
  7003                           ; BSR set to: 0
  7004                           ;fence.c: 412: }
  7005                           ;fence.c: 413: break;
  7006                           
  7007                           ; BSR set to: 0
  7008                           
  7009                           ; BSR set to: 0
  7010                           
  7011                           ; BSR set to: 0
  7012  004BA2  0012               	return	
  7013  004BA4                     l1583:
  7014                           
  7015                           ; BSR set to: 0
  7016                           
  7017                           ; BSR set to: 0
  7018  004BA4  5160               	movf	verifica_plausibilidade_lat@posicao& (0+255),w,b
  7019                           
  7020                           ; Switch size 1, requested type "space"
  7021                           ; Number of cases is 1, Range of values is 45 to 45
  7022                           ; switch strategies available:
  7023                           ; Name         Instructions Cycles
  7024                           ; simple_byte            4     3 (average)
  7025                           ;	Chosen strategy is simple_byte
  7026  004BA6  0A2D               	xorlw	45	; case 45
  7027  004BA8  B4D8               	btfsc	status,2,c
  7028  004BAA  D7B6               	goto	l1584
  7029  004BAC  D7D2               	goto	l1593
  7030  004BAE                     __end_of_verifica_plausibilidade_lat:
  7031                           	opt stack 0
  7032                           tosu	equ	0xFFF
  7033                           tosh	equ	0xFFE
  7034                           tosl	equ	0xFFD
  7035                           pclath	equ	0xFFA
  7036                           tblptru	equ	0xFF8
  7037                           tblptrh	equ	0xFF7
  7038                           tblptrl	equ	0xFF6
  7039                           tablat	equ	0xFF5
  7040                           prodh	equ	0xFF4
  7041                           prodl	equ	0xFF3
  7042                           intcon	equ	0xFF2
  7043                           intcon2	equ	0xFF1
  7044                           intcon3	equ	0xFF0
  7045                           postinc0	equ	0xFEE
  7046                           wreg	equ	0xFE8
  7047                           postinc1	equ	0xFE6
  7048                           postdec1	equ	0xFE5
  7049                           plusw1	equ	0xFE3
  7050                           fsr1h	equ	0xFE2
  7051                           fsr1l	equ	0xFE1
  7052                           indf2	equ	0xFDF
  7053                           postinc2	equ	0xFDE
  7054                           postdec2	equ	0xFDD
  7055                           plusw2	equ	0xFDB
  7056                           fsr2h	equ	0xFDA
  7057                           fsr2l	equ	0xFD9
  7058                           status	equ	0xFD8
  7059                           
  7060 ;; *************** function _longitude_to_convert *****************
  7061 ;; Defined at:
  7062 ;;		line 216 in file "bibliotecas/GPS.c"
  7063 ;; Parameters:    Size  Location     Type
  7064 ;;  index           1    wreg     unsigned char 
  7065 ;; Auto vars:     Size  Location     Type
  7066 ;;  index           1   73[BANK0 ] unsigned char 
  7067 ;;  longitude      11   62[BANK0 ] unsigned char [11]
  7068 ;;  i               1   75[BANK0 ] unsigned char 
  7069 ;;  j               1   74[BANK0 ] unsigned char 
  7070 ;; Return value:  Size  Location     Type
  7071 ;;                  1    wreg      void 
  7072 ;; Registers used:
  7073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7074 ;; Tracked objects:
  7075 ;;		On entry : 0/0
  7076 ;;		On exit  : 0/0
  7077 ;;		Unchanged: 0/0
  7078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7079 ;;      Params:         0       0       0       0       0       0       0       0       0
  7080 ;;      Locals:         0      14       0       0       0       0       0       0       0
  7081 ;;      Temps:          0       1       0       0       0       0       0       0       0
  7082 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7083 ;;Total ram usage:       15 bytes
  7084 ;; Hardware stack levels used:    1
  7085 ;; Hardware stack levels required when called:    8
  7086 ;; This function calls:
  7087 ;;		_armazena_ltlo
  7088 ;;		_strcpy
  7089 ;; This function is called by:
  7090 ;;		_verifica_fence
  7091 ;; This function uses a non-reentrant model
  7092 ;;
  7093                           
  7094                           	psect	text29
  7095  0045BA                     __ptext29:
  7096                           	opt stack 0
  7097  0045BA                     _longitude_to_convert:
  7098                           	opt stack 19
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;incstack = 0
  7102                           ;longitude_to_convert@index stored from wreg
  7103  0045BA  0100               	movlb	0	; () banked
  7104  0045BC  6FA9               	movwf	longitude_to_convert@index& (0+255),b
  7105                           
  7106                           ;GPS.c: 218: unsigned char i,j;
  7107                           ;GPS.c: 219: unsigned char longitude[11];
  7108                           ;GPS.c: 220: strcpy(rawLongitude, "-04639.81479");
  7109  0045BE  0E8A               	movlw	low _rawLongitude
  7110  0045C0  0100               	movlb	0	; () banked
  7111  0045C2  6F60               	movwf	strcpy@to& (0+255),b
  7112  0045C4  0E01               	movlw	high _rawLongitude
  7113  0045C6  6F61               	movwf	(strcpy@to+1)& (0+255),b
  7114  0045C8  0EAD               	movlw	low STR_8
  7115  0045CA  6F62               	movwf	strcpy@from& (0+255),b
  7116  0045CC  0E61               	movlw	high STR_8
  7117  0045CE  6F63               	movwf	(strcpy@from+1)& (0+255),b
  7118  0045D0  EC46  F02E         	call	_strcpy	;wreg free
  7119                           
  7120                           ;GPS.c: 222: j = 0;
  7121  0045D4  0E00               	movlw	0
  7122  0045D6  0100               	movlb	0	; () banked
  7123  0045D8  6FAA               	movwf	longitude_to_convert@j& (0+255),b
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;GPS.c: 223: for(i=0; i<12; i++)
  7127  0045DA  0E00               	movlw	0
  7128  0045DC  6FAB               	movwf	longitude_to_convert@i& (0+255),b
  7129  0045DE                     l12958:
  7130                           
  7131                           ; BSR set to: 0
  7132  0045DE  0E0B               	movlw	11
  7133  0045E0  65AB               	cpfsgt	longitude_to_convert@i& (0+255),b
  7134  0045E2  D001               	goto	l410
  7135  0045E4  D03B               	goto	u17120
  7136  0045E6                     l410:
  7137                           
  7138                           ; BSR set to: 0
  7139                           ;GPS.c: 224: {
  7140                           ;GPS.c: 225: if(rawLongitude[i] != '\0' && rawLongitude[i] != '-' && rawLongitude[i]!= '
      +                          .' && j <10)
  7141                           
  7142                           ; BSR set to: 0
  7143  0045E6  51AB               	movf	longitude_to_convert@i& (0+255),w,b
  7144  0045E8  0D01               	mullw	1
  7145  0045EA  0E8A               	movlw	low _rawLongitude
  7146  0045EC  24F3               	addwf	prodl,w,c
  7147  0045EE  6ED9               	movwf	fsr2l,c
  7148  0045F0  0E01               	movlw	high _rawLongitude
  7149  0045F2  20F4               	addwfc	prodh,w,c
  7150  0045F4  6EDA               	movwf	fsr2h,c
  7151  0045F6  50DF               	movf	indf2,w,c
  7152  0045F8  B4D8               	btfsc	status,2,c
  7153  0045FA  D02E               	goto	l412
  7154                           
  7155                           ; BSR set to: 0
  7156  0045FC  51AB               	movf	longitude_to_convert@i& (0+255),w,b
  7157  0045FE  0D01               	mullw	1
  7158  004600  0E8A               	movlw	low _rawLongitude
  7159  004602  24F3               	addwf	prodl,w,c
  7160  004604  6ED9               	movwf	fsr2l,c
  7161  004606  0E01               	movlw	high _rawLongitude
  7162  004608  20F4               	addwfc	prodh,w,c
  7163  00460A  6EDA               	movwf	fsr2h,c
  7164  00460C  0E2D               	movlw	45
  7165  00460E  18DE               	xorwf	postinc2,w,c
  7166  004610  B4D8               	btfsc	status,2,c
  7167  004612  D022               	goto	l412
  7168                           
  7169                           ; BSR set to: 0
  7170  004614  51AB               	movf	longitude_to_convert@i& (0+255),w,b
  7171  004616  0D01               	mullw	1
  7172  004618  0E8A               	movlw	low _rawLongitude
  7173  00461A  24F3               	addwf	prodl,w,c
  7174  00461C  6ED9               	movwf	fsr2l,c
  7175  00461E  0E01               	movlw	high _rawLongitude
  7176  004620  20F4               	addwfc	prodh,w,c
  7177  004622  6EDA               	movwf	fsr2h,c
  7178  004624  0E2E               	movlw	46
  7179  004626  18DE               	xorwf	postinc2,w,c
  7180  004628  B4D8               	btfsc	status,2,c
  7181  00462A  D016               	goto	l412
  7182                           
  7183                           ; BSR set to: 0
  7184  00462C  0E0A               	movlw	10
  7185  00462E  61AA               	cpfslt	longitude_to_convert@j& (0+255),b
  7186  004630  D013               	goto	l412
  7187                           
  7188                           ; BSR set to: 0
  7189                           ;GPS.c: 226: {
  7190                           ;GPS.c: 228: longitude[j] = rawLongitude[i];
  7191  004632  51AB               	movf	longitude_to_convert@i& (0+255),w,b
  7192  004634  0D01               	mullw	1
  7193  004636  0E8A               	movlw	low _rawLongitude
  7194  004638  24F3               	addwf	prodl,w,c
  7195  00463A  6ED9               	movwf	fsr2l,c
  7196  00463C  0E01               	movlw	high _rawLongitude
  7197  00463E  20F4               	addwfc	prodh,w,c
  7198  004640  6EDA               	movwf	fsr2h,c
  7199  004642  51AA               	movf	longitude_to_convert@j& (0+255),w,b
  7200  004644  0D01               	mullw	1
  7201  004646  0E9E               	movlw	low longitude_to_convert@longitude
  7202  004648  24F3               	addwf	prodl,w,c
  7203  00464A  6EE1               	movwf	fsr1l,c
  7204  00464C  0E00               	movlw	high longitude_to_convert@longitude
  7205  00464E  20F4               	addwfc	prodh,w,c
  7206  004650  6EE2               	movwf	fsr1h,c
  7207  004652  CFDF FFE7          	movff	indf2,indf1
  7208                           
  7209                           ; BSR set to: 0
  7210                           ;GPS.c: 229: j++;
  7211  004656  2BAA               	incf	longitude_to_convert@j& (0+255),f,b
  7212  004658                     l412:
  7213                           
  7214                           ; BSR set to: 0
  7215                           
  7216                           ; BSR set to: 0
  7217  004658  2BAB               	incf	longitude_to_convert@i& (0+255),f,b
  7218  00465A  D7C1               	goto	l12958
  7219  00465C                     u17120:
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;GPS.c: 230: }
  7223                           ;GPS.c: 231: }
  7224                           ;GPS.c: 232: armazena_ltlo(longitude, index);
  7225                           
  7226                           ; BSR set to: 0
  7227  00465C  0E9E               	movlw	low longitude_to_convert@longitude
  7228  00465E  6F98               	movwf	armazena_ltlo@buffer& (0+255),b
  7229  004660  0E00               	movlw	high longitude_to_convert@longitude
  7230  004662  6F99               	movwf	(armazena_ltlo@buffer+1)& (0+255),b
  7231  004664  C0A9  F09A         	movff	longitude_to_convert@index,armazena_ltlo@index
  7232  004668  ECD7  F025         	call	_armazena_ltlo	;wreg free
  7233  00466C  0012               	return		;funcret
  7234  00466E                     __end_of_longitude_to_convert:
  7235                           	opt stack 0
  7236                           tosu	equ	0xFFF
  7237                           tosh	equ	0xFFE
  7238                           tosl	equ	0xFFD
  7239                           pclath	equ	0xFFA
  7240                           tblptru	equ	0xFF8
  7241                           tblptrh	equ	0xFF7
  7242                           tblptrl	equ	0xFF6
  7243                           tablat	equ	0xFF5
  7244                           prodh	equ	0xFF4
  7245                           prodl	equ	0xFF3
  7246                           intcon	equ	0xFF2
  7247                           intcon2	equ	0xFF1
  7248                           intcon3	equ	0xFF0
  7249                           postinc0	equ	0xFEE
  7250                           wreg	equ	0xFE8
  7251                           indf1	equ	0xFE7
  7252                           postinc1	equ	0xFE6
  7253                           postdec1	equ	0xFE5
  7254                           plusw1	equ	0xFE3
  7255                           fsr1h	equ	0xFE2
  7256                           fsr1l	equ	0xFE1
  7257                           indf2	equ	0xFDF
  7258                           postinc2	equ	0xFDE
  7259                           postdec2	equ	0xFDD
  7260                           plusw2	equ	0xFDB
  7261                           fsr2h	equ	0xFDA
  7262                           fsr2l	equ	0xFD9
  7263                           status	equ	0xFD8
  7264                           
  7265 ;; *************** function _latitude_to_convert *****************
  7266 ;; Defined at:
  7267 ;;		line 198 in file "bibliotecas/GPS.c"
  7268 ;; Parameters:    Size  Location     Type
  7269 ;;  index           1    wreg     unsigned char 
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;  index           1   71[BANK0 ] unsigned char 
  7272 ;;  latitude        9   62[BANK0 ] unsigned char [9]
  7273 ;;  i               1   73[BANK0 ] unsigned char 
  7274 ;;  j               1   72[BANK0 ] unsigned char 
  7275 ;; Return value:  Size  Location     Type
  7276 ;;                  1    wreg      void 
  7277 ;; Registers used:
  7278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7279 ;; Tracked objects:
  7280 ;;		On entry : 0/0
  7281 ;;		On exit  : 0/0
  7282 ;;		Unchanged: 0/0
  7283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7284 ;;      Params:         0       0       0       0       0       0       0       0       0
  7285 ;;      Locals:         0      12       0       0       0       0       0       0       0
  7286 ;;      Temps:          0       1       0       0       0       0       0       0       0
  7287 ;;      Totals:         0      13       0       0       0       0       0       0       0
  7288 ;;Total ram usage:       13 bytes
  7289 ;; Hardware stack levels used:    1
  7290 ;; Hardware stack levels required when called:    8
  7291 ;; This function calls:
  7292 ;;		_armazena_ltlo
  7293 ;;		_strcpy
  7294 ;; This function is called by:
  7295 ;;		_verifica_fence
  7296 ;; This function uses a non-reentrant model
  7297 ;;
  7298                           
  7299                           	psect	text30
  7300  00466E                     __ptext30:
  7301                           	opt stack 0
  7302  00466E                     _latitude_to_convert:
  7303                           	opt stack 19
  7304                           
  7305                           ;incstack = 0
  7306                           ;latitude_to_convert@index stored from wreg
  7307  00466E  0100               	movlb	0	; () banked
  7308  004670  6FA7               	movwf	latitude_to_convert@index& (0+255),b
  7309                           
  7310                           ;GPS.c: 200: unsigned char i,j;
  7311                           ;GPS.c: 201: unsigned char latitude[9];
  7312                           ;GPS.c: 202: strcpy(rawLatitude, "-2337.66653");
  7313  004672  0EA2               	movlw	low _rawLatitude
  7314  004674  0100               	movlb	0	; () banked
  7315  004676  6F60               	movwf	strcpy@to& (0+255),b
  7316  004678  0E01               	movlw	high _rawLatitude
  7317  00467A  6F61               	movwf	(strcpy@to+1)& (0+255),b
  7318  00467C  0EBA               	movlw	low STR_7
  7319  00467E  6F62               	movwf	strcpy@from& (0+255),b
  7320  004680  0E61               	movlw	high STR_7
  7321  004682  6F63               	movwf	(strcpy@from+1)& (0+255),b
  7322  004684  EC46  F02E         	call	_strcpy	;wreg free
  7323                           
  7324                           ;GPS.c: 204: j = 0;
  7325  004688  0E00               	movlw	0
  7326  00468A  0100               	movlb	0	; () banked
  7327  00468C  6FA8               	movwf	latitude_to_convert@j& (0+255),b
  7328                           
  7329                           ; BSR set to: 0
  7330                           ;GPS.c: 205: for(i=0; i<12; i++)
  7331  00468E  0E00               	movlw	0
  7332  004690  6FA9               	movwf	latitude_to_convert@i& (0+255),b
  7333  004692                     l12930:
  7334                           
  7335                           ; BSR set to: 0
  7336  004692  0E0B               	movlw	11
  7337  004694  65A9               	cpfsgt	latitude_to_convert@i& (0+255),b
  7338  004696  D001               	goto	l404
  7339  004698  D03B               	goto	u17060
  7340  00469A                     l404:
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;GPS.c: 206: {
  7344                           ;GPS.c: 207: if(rawLatitude[i] != '\0' && rawLatitude[i] != '-' && rawLatitude[i]!= '.' 
      +                          && j <9)
  7345                           
  7346                           ; BSR set to: 0
  7347  00469A  51A9               	movf	latitude_to_convert@i& (0+255),w,b
  7348  00469C  0D01               	mullw	1
  7349  00469E  0EA2               	movlw	low _rawLatitude
  7350  0046A0  24F3               	addwf	prodl,w,c
  7351  0046A2  6ED9               	movwf	fsr2l,c
  7352  0046A4  0E01               	movlw	high _rawLatitude
  7353  0046A6  20F4               	addwfc	prodh,w,c
  7354  0046A8  6EDA               	movwf	fsr2h,c
  7355  0046AA  50DF               	movf	indf2,w,c
  7356  0046AC  B4D8               	btfsc	status,2,c
  7357  0046AE  D02E               	goto	l406
  7358                           
  7359                           ; BSR set to: 0
  7360  0046B0  51A9               	movf	latitude_to_convert@i& (0+255),w,b
  7361  0046B2  0D01               	mullw	1
  7362  0046B4  0EA2               	movlw	low _rawLatitude
  7363  0046B6  24F3               	addwf	prodl,w,c
  7364  0046B8  6ED9               	movwf	fsr2l,c
  7365  0046BA  0E01               	movlw	high _rawLatitude
  7366  0046BC  20F4               	addwfc	prodh,w,c
  7367  0046BE  6EDA               	movwf	fsr2h,c
  7368  0046C0  0E2D               	movlw	45
  7369  0046C2  18DE               	xorwf	postinc2,w,c
  7370  0046C4  B4D8               	btfsc	status,2,c
  7371  0046C6  D022               	goto	l406
  7372                           
  7373                           ; BSR set to: 0
  7374  0046C8  51A9               	movf	latitude_to_convert@i& (0+255),w,b
  7375  0046CA  0D01               	mullw	1
  7376  0046CC  0EA2               	movlw	low _rawLatitude
  7377  0046CE  24F3               	addwf	prodl,w,c
  7378  0046D0  6ED9               	movwf	fsr2l,c
  7379  0046D2  0E01               	movlw	high _rawLatitude
  7380  0046D4  20F4               	addwfc	prodh,w,c
  7381  0046D6  6EDA               	movwf	fsr2h,c
  7382  0046D8  0E2E               	movlw	46
  7383  0046DA  18DE               	xorwf	postinc2,w,c
  7384  0046DC  B4D8               	btfsc	status,2,c
  7385  0046DE  D016               	goto	l406
  7386                           
  7387                           ; BSR set to: 0
  7388  0046E0  0E09               	movlw	9
  7389  0046E2  61A8               	cpfslt	latitude_to_convert@j& (0+255),b
  7390  0046E4  D013               	goto	l406
  7391                           
  7392                           ; BSR set to: 0
  7393                           ;GPS.c: 208: {
  7394                           ;GPS.c: 209: latitude[j] = rawLatitude[i];
  7395  0046E6  51A9               	movf	latitude_to_convert@i& (0+255),w,b
  7396  0046E8  0D01               	mullw	1
  7397  0046EA  0EA2               	movlw	low _rawLatitude
  7398  0046EC  24F3               	addwf	prodl,w,c
  7399  0046EE  6ED9               	movwf	fsr2l,c
  7400  0046F0  0E01               	movlw	high _rawLatitude
  7401  0046F2  20F4               	addwfc	prodh,w,c
  7402  0046F4  6EDA               	movwf	fsr2h,c
  7403  0046F6  51A8               	movf	latitude_to_convert@j& (0+255),w,b
  7404  0046F8  0D01               	mullw	1
  7405  0046FA  0E9E               	movlw	low latitude_to_convert@latitude
  7406  0046FC  24F3               	addwf	prodl,w,c
  7407  0046FE  6EE1               	movwf	fsr1l,c
  7408  004700  0E00               	movlw	high latitude_to_convert@latitude
  7409  004702  20F4               	addwfc	prodh,w,c
  7410  004704  6EE2               	movwf	fsr1h,c
  7411  004706  CFDF FFE7          	movff	indf2,indf1
  7412                           
  7413                           ; BSR set to: 0
  7414                           ;GPS.c: 210: j++;
  7415  00470A  2BA8               	incf	latitude_to_convert@j& (0+255),f,b
  7416  00470C                     l406:
  7417                           
  7418                           ; BSR set to: 0
  7419                           
  7420                           ; BSR set to: 0
  7421  00470C  2BA9               	incf	latitude_to_convert@i& (0+255),f,b
  7422  00470E  D7C1               	goto	l12930
  7423  004710                     u17060:
  7424                           
  7425                           ; BSR set to: 0
  7426                           ;GPS.c: 211: }
  7427                           ;GPS.c: 212: }
  7428                           ;GPS.c: 213: armazena_ltlo(latitude, index);
  7429                           
  7430                           ; BSR set to: 0
  7431  004710  0E9E               	movlw	low latitude_to_convert@latitude
  7432  004712  6F98               	movwf	armazena_ltlo@buffer& (0+255),b
  7433  004714  0E00               	movlw	high latitude_to_convert@latitude
  7434  004716  6F99               	movwf	(armazena_ltlo@buffer+1)& (0+255),b
  7435  004718  C0A7  F09A         	movff	latitude_to_convert@index,armazena_ltlo@index
  7436  00471C  ECD7  F025         	call	_armazena_ltlo	;wreg free
  7437  004720  0012               	return		;funcret
  7438  004722                     __end_of_latitude_to_convert:
  7439                           	opt stack 0
  7440                           tosu	equ	0xFFF
  7441                           tosh	equ	0xFFE
  7442                           tosl	equ	0xFFD
  7443                           pclath	equ	0xFFA
  7444                           tblptru	equ	0xFF8
  7445                           tblptrh	equ	0xFF7
  7446                           tblptrl	equ	0xFF6
  7447                           tablat	equ	0xFF5
  7448                           prodh	equ	0xFF4
  7449                           prodl	equ	0xFF3
  7450                           intcon	equ	0xFF2
  7451                           intcon2	equ	0xFF1
  7452                           intcon3	equ	0xFF0
  7453                           postinc0	equ	0xFEE
  7454                           wreg	equ	0xFE8
  7455                           indf1	equ	0xFE7
  7456                           postinc1	equ	0xFE6
  7457                           postdec1	equ	0xFE5
  7458                           plusw1	equ	0xFE3
  7459                           fsr1h	equ	0xFE2
  7460                           fsr1l	equ	0xFE1
  7461                           indf2	equ	0xFDF
  7462                           postinc2	equ	0xFDE
  7463                           postdec2	equ	0xFDD
  7464                           plusw2	equ	0xFDB
  7465                           fsr2h	equ	0xFDA
  7466                           fsr2l	equ	0xFD9
  7467                           status	equ	0xFD8
  7468                           
  7469 ;; *************** function _armazena_ltlo *****************
  7470 ;; Defined at:
  7471 ;;		line 64 in file "bibliotecas/fence.c"
  7472 ;; Parameters:    Size  Location     Type
  7473 ;;  buffer          2   56[BANK0 ] PTR unsigned char 
  7474 ;;		 -> longitude_to_convert@longitude(11), latitude_to_convert@latitude(9), 
  7475 ;;  index           1   58[BANK0 ] unsigned char 
  7476 ;; Auto vars:     Size  Location     Type
  7477 ;;  i               1   60[BANK0 ] unsigned char 
  7478 ;;  j               1   59[BANK0 ] unsigned char 
  7479 ;; Return value:  Size  Location     Type
  7480 ;;                  1    wreg      void 
  7481 ;; Registers used:
  7482 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7483 ;; Tracked objects:
  7484 ;;		On entry : 0/0
  7485 ;;		On exit  : 0/0
  7486 ;;		Unchanged: 0/0
  7487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7488 ;;      Params:         0       3       0       0       0       0       0       0       0
  7489 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7490 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7491 ;;      Totals:         0       5       0       0       0       0       0       0       0
  7492 ;;Total ram usage:        5 bytes
  7493 ;; Hardware stack levels used:    1
  7494 ;; Hardware stack levels required when called:    7
  7495 ;; This function calls:
  7496 ;;		_diferenca
  7497 ;; This function is called by:
  7498 ;;		_latitude_to_convert
  7499 ;;		_longitude_to_convert
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503                           	psect	text31
  7504  004BAE                     __ptext31:
  7505                           	opt stack 0
  7506  004BAE                     _armazena_ltlo:
  7507                           	opt stack 19
  7508                           
  7509                           ;fence.c: 67: unsigned char i, j;
  7510                           ;fence.c: 72: switch(index)
  7511                           
  7512                           ;incstack = 0
  7513  004BAE  D045               	goto	l1544
  7514  004BB0                     
  7515                           ;fence.c: 75: j = 0;
  7516  004BB0  0E00               	movlw	0
  7517  004BB2  0100               	movlb	0	; () banked
  7518  004BB4  6F9B               	movwf	armazena_ltlo@j& (0+255),b
  7519                           
  7520                           ;fence.c: 76: for(i=0; i<10; i++)
  7521  004BB6  0E00               	movlw	0
  7522  004BB8  6F9C               	movwf	armazena_ltlo@i& (0+255),b
  7523  004BBA                     l12438:
  7524                           
  7525                           ; BSR set to: 0
  7526  004BBA  0E09               	movlw	9
  7527  004BBC  659C               	cpfsgt	armazena_ltlo@i& (0+255),b
  7528  004BBE  D001               	goto	l1546
  7529  004BC0  D042               	goto	l1549
  7530  004BC2                     l1546:
  7531                           
  7532                           ; BSR set to: 0
  7533                           ;fence.c: 77: {
  7534                           ;fence.c: 78: if(*buffer != '\0')
  7535                           
  7536                           ; BSR set to: 0
  7537  004BC2  C098  FFD9         	movff	armazena_ltlo@buffer,fsr2l
  7538  004BC6  C099  FFDA         	movff	armazena_ltlo@buffer+1,fsr2h
  7539  004BCA  50DF               	movf	indf2,w,c
  7540  004BCC  B4D8               	btfsc	status,2,c
  7541  004BCE  D00F               	goto	l1548
  7542                           
  7543                           ; BSR set to: 0
  7544                           ;fence.c: 79: {
  7545                           ;fence.c: 81: dado[j] = *buffer;
  7546  004BD0  C098  FFD9         	movff	armazena_ltlo@buffer,fsr2l
  7547  004BD4  C099  FFDA         	movff	armazena_ltlo@buffer+1,fsr2h
  7548  004BD8  519B               	movf	armazena_ltlo@j& (0+255),w,b
  7549  004BDA  0D01               	mullw	1
  7550  004BDC  0E00               	movlw	low _dado
  7551  004BDE  24F3               	addwf	prodl,w,c
  7552  004BE0  6EE1               	movwf	fsr1l,c
  7553  004BE2  0E01               	movlw	high _dado
  7554  004BE4  20F4               	addwfc	prodh,w,c
  7555  004BE6  6EE2               	movwf	fsr1h,c
  7556  004BE8  CFDF FFE7          	movff	indf2,indf1
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;fence.c: 82: j++;
  7560  004BEC  2B9B               	incf	armazena_ltlo@j& (0+255),f,b
  7561  004BEE                     l1548:
  7562                           
  7563                           ; BSR set to: 0
  7564                           ;fence.c: 83: }
  7565                           ;fence.c: 85: buffer++;
  7566                           
  7567                           ; BSR set to: 0
  7568  004BEE  4B98               	infsnz	armazena_ltlo@buffer& (0+255),f,b
  7569  004BF0  2B99               	incf	(armazena_ltlo@buffer+1)& (0+255),f,b
  7570                           
  7571                           ; BSR set to: 0
  7572  004BF2  2B9C               	incf	armazena_ltlo@i& (0+255),f,b
  7573  004BF4  D7E2               	goto	l12438
  7574  004BF6                     
  7575                           ; BSR set to: 0
  7576                           ;fence.c: 91: j = 0;
  7577                           
  7578                           ; BSR set to: 0
  7579  004BF6  0E00               	movlw	0
  7580  004BF8  6F9B               	movwf	armazena_ltlo@j& (0+255),b
  7581                           
  7582                           ;fence.c: 92: for(i=0; i<11; i++)
  7583  004BFA  0E00               	movlw	0
  7584  004BFC  6F9C               	movwf	armazena_ltlo@i& (0+255),b
  7585  004BFE                     l12456:
  7586                           
  7587                           ; BSR set to: 0
  7588  004BFE  0E0A               	movlw	10
  7589  004C00  659C               	cpfsgt	armazena_ltlo@i& (0+255),b
  7590  004C02  D001               	goto	l1551
  7591  004C04  D020               	goto	l1549
  7592  004C06                     l1551:
  7593                           
  7594                           ; BSR set to: 0
  7595                           ;fence.c: 93: {
  7596                           ;fence.c: 94: if(*buffer != '\0')
  7597                           
  7598                           ; BSR set to: 0
  7599  004C06  C098  FFD9         	movff	armazena_ltlo@buffer,fsr2l
  7600  004C0A  C099  FFDA         	movff	armazena_ltlo@buffer+1,fsr2h
  7601  004C0E  50DF               	movf	indf2,w,c
  7602  004C10  B4D8               	btfsc	status,2,c
  7603  004C12  D00F               	goto	l1553
  7604                           
  7605                           ; BSR set to: 0
  7606                           ;fence.c: 95: {
  7607                           ;fence.c: 97: dado[j] = *buffer;
  7608  004C14  C098  FFD9         	movff	armazena_ltlo@buffer,fsr2l
  7609  004C18  C099  FFDA         	movff	armazena_ltlo@buffer+1,fsr2h
  7610  004C1C  519B               	movf	armazena_ltlo@j& (0+255),w,b
  7611  004C1E  0D01               	mullw	1
  7612  004C20  0E00               	movlw	low _dado
  7613  004C22  24F3               	addwf	prodl,w,c
  7614  004C24  6EE1               	movwf	fsr1l,c
  7615  004C26  0E01               	movlw	high _dado
  7616  004C28  20F4               	addwfc	prodh,w,c
  7617  004C2A  6EE2               	movwf	fsr1h,c
  7618  004C2C  CFDF FFE7          	movff	indf2,indf1
  7619                           
  7620                           ; BSR set to: 0
  7621                           ;fence.c: 98: j++;
  7622  004C30  2B9B               	incf	armazena_ltlo@j& (0+255),f,b
  7623  004C32                     l1553:
  7624                           
  7625                           ; BSR set to: 0
  7626                           ;fence.c: 99: }
  7627                           ;fence.c: 101: buffer++;
  7628                           
  7629                           ; BSR set to: 0
  7630  004C32  4B98               	infsnz	armazena_ltlo@buffer& (0+255),f,b
  7631  004C34  2B99               	incf	(armazena_ltlo@buffer+1)& (0+255),f,b
  7632                           
  7633                           ; BSR set to: 0
  7634  004C36  2B9C               	incf	armazena_ltlo@i& (0+255),f,b
  7635  004C38  D7E2               	goto	l12456
  7636  004C3A                     l1544:
  7637                           
  7638                           ; BSR set to: 0
  7639  004C3A  0100               	movlb	0	; () banked
  7640  004C3C  519A               	movf	armazena_ltlo@index& (0+255),w,b
  7641                           
  7642                           ; Switch size 1, requested type "space"
  7643                           ; Number of cases is 1, Range of values is 1 to 1
  7644                           ; switch strategies available:
  7645                           ; Name         Instructions Cycles
  7646                           ; simple_byte            4     3 (average)
  7647                           ;	Chosen strategy is simple_byte
  7648  004C3E  0A01               	xorlw	1	; case 1
  7649  004C40  B4D8               	btfsc	status,2,c
  7650  004C42  D7B6               	goto	l1545
  7651  004C44  D7D8               	goto	l1550
  7652  004C46                     l1549:
  7653                           
  7654                           ; BSR set to: 0
  7655                           ;fence.c: 108: diferenca(index);
  7656                           
  7657                           ; BSR set to: 0
  7658  004C46  519A               	movf	armazena_ltlo@index& (0+255),w,b
  7659  004C48  EC45  F01B         	call	_diferenca
  7660  004C4C  0012               	return		;funcret
  7661  004C4E                     __end_of_armazena_ltlo:
  7662                           	opt stack 0
  7663                           tosu	equ	0xFFF
  7664                           tosh	equ	0xFFE
  7665                           tosl	equ	0xFFD
  7666                           pclath	equ	0xFFA
  7667                           tblptru	equ	0xFF8
  7668                           tblptrh	equ	0xFF7
  7669                           tblptrl	equ	0xFF6
  7670                           tablat	equ	0xFF5
  7671                           prodh	equ	0xFF4
  7672                           prodl	equ	0xFF3
  7673                           intcon	equ	0xFF2
  7674                           intcon2	equ	0xFF1
  7675                           intcon3	equ	0xFF0
  7676                           postinc0	equ	0xFEE
  7677                           wreg	equ	0xFE8
  7678                           indf1	equ	0xFE7
  7679                           postinc1	equ	0xFE6
  7680                           postdec1	equ	0xFE5
  7681                           plusw1	equ	0xFE3
  7682                           fsr1h	equ	0xFE2
  7683                           fsr1l	equ	0xFE1
  7684                           indf2	equ	0xFDF
  7685                           postinc2	equ	0xFDE
  7686                           postdec2	equ	0xFDD
  7687                           plusw2	equ	0xFDB
  7688                           fsr2h	equ	0xFDA
  7689                           fsr2l	equ	0xFD9
  7690                           status	equ	0xFD8
  7691                           
  7692 ;; *************** function _diferenca *****************
  7693 ;; Defined at:
  7694 ;;		line 145 in file "bibliotecas/fence.c"
  7695 ;; Parameters:    Size  Location     Type
  7696 ;;  index           1    wreg     unsigned char 
  7697 ;; Auto vars:     Size  Location     Type
  7698 ;;  index           1   47[BANK0 ] unsigned char 
  7699 ;;  valor_long      4   52[BANK0 ] unsigned long 
  7700 ;;  valor_lat       4   48[BANK0 ] unsigned long 
  7701 ;; Return value:  Size  Location     Type
  7702 ;;                  1    wreg      void 
  7703 ;; Registers used:
  7704 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7705 ;; Tracked objects:
  7706 ;;		On entry : 0/0
  7707 ;;		On exit  : 0/0
  7708 ;;		Unchanged: 0/0
  7709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7710 ;;      Params:         0       0       0       0       0       0       0       0       0
  7711 ;;      Locals:         0       9       0       0       0       0       0       0       0
  7712 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7713 ;;      Totals:         0      13       0       0       0       0       0       0       0
  7714 ;;Total ram usage:       13 bytes
  7715 ;; Hardware stack levels used:    1
  7716 ;; Hardware stack levels required when called:    6
  7717 ;; This function calls:
  7718 ;;		_convert_to_int
  7719 ;;		_convert_to_int_point_lat
  7720 ;;		_convert_to_int_point_long
  7721 ;; This function is called by:
  7722 ;;		_armazena_ltlo
  7723 ;; This function uses a non-reentrant model
  7724 ;;
  7725                           
  7726                           	psect	text32
  7727  00368A                     __ptext32:
  7728                           	opt stack 0
  7729  00368A                     _diferenca:
  7730                           	opt stack 19
  7731                           
  7732                           ;incstack = 0
  7733                           ;diferenca@index stored from wreg
  7734  00368A  0100               	movlb	0	; () banked
  7735  00368C  6F8F               	movwf	diferenca@index& (0+255),b
  7736                           
  7737                           ;fence.c: 147: unsigned long int valor_lat, valor_long;
  7738                           ;fence.c: 149: switch(index)
  7739  00368E  D0A8               	goto	l1557
  7740  003690                     
  7741                           ;fence.c: 152: valor_lat = convert_to_int_point_lat();
  7742  003690  ECD6  F028         	call	_convert_to_int_point_lat	;wreg free
  7743  003694  C07A  F090         	movff	?_convert_to_int_point_lat,diferenca@valor_lat
  7744  003698  C07B  F091         	movff	?_convert_to_int_point_lat+1,diferenca@valor_lat+1
  7745  00369C  C07C  F092         	movff	?_convert_to_int_point_lat+2,diferenca@valor_lat+2
  7746  0036A0  C07D  F093         	movff	?_convert_to_int_point_lat+3,diferenca@valor_lat+3
  7747                           
  7748                           ;fence.c: 153: poligono_ext[0].diff_lat = convert_to_int(fence_diff_lat[0]) - valor_lat;
  7749  0036A4  C090  F08B         	movff	diferenca@valor_lat,??_diferenca
  7750  0036A8  C091  F08C         	movff	diferenca@valor_lat+1,??_diferenca+1
  7751  0036AC  C092  F08D         	movff	diferenca@valor_lat+2,??_diferenca+2
  7752  0036B0  C093  F08E         	movff	diferenca@valor_lat+3,??_diferenca+3
  7753  0036B4  0100               	movlb	0	; () banked
  7754  0036B6  1F8B               	comf	??_diferenca& (0+255),f,b
  7755  0036B8  1F8C               	comf	(??_diferenca+1)& (0+255),f,b
  7756  0036BA  1F8D               	comf	(??_diferenca+2)& (0+255),f,b
  7757  0036BC  1F8E               	comf	(??_diferenca+3)& (0+255),f,b
  7758  0036BE  2B8B               	incf	??_diferenca& (0+255),f,b
  7759  0036C0  0E00               	movlw	0
  7760  0036C2  238C               	addwfc	(??_diferenca+1)& (0+255),f,b
  7761  0036C4  238D               	addwfc	(??_diferenca+2)& (0+255),f,b
  7762  0036C6  238E               	addwfc	(??_diferenca+3)& (0+255),f,b
  7763  0036C8  0E27               	movlw	low _fence_diff_lat
  7764  0036CA  6F7A               	movwf	convert_to_int@p_buff& (0+255),b
  7765  0036CC  0E61               	movlw	high _fence_diff_lat
  7766  0036CE  6F7B               	movwf	(convert_to_int@p_buff+1)& (0+255),b
  7767  0036D0  ECF5  F02E         	call	_convert_to_int	;wreg free
  7768  0036D4  0100               	movlb	0	; () banked
  7769  0036D6  518B               	movf	??_diferenca& (0+255),w,b
  7770  0036D8  257A               	addwf	?_convert_to_int& (0+255),w,b
  7771  0036DA  6E22               	movwf	_poligono_ext,c
  7772  0036DC  518C               	movf	(??_diferenca+1)& (0+255),w,b
  7773  0036DE  217B               	addwfc	(?_convert_to_int+1)& (0+255),w,b
  7774  0036E0  6E23               	movwf	_poligono_ext+1,c
  7775  0036E2  518D               	movf	(??_diferenca+2)& (0+255),w,b
  7776  0036E4  217C               	addwfc	(?_convert_to_int+2)& (0+255),w,b
  7777  0036E6  6E24               	movwf	_poligono_ext+2,c
  7778  0036E8  518E               	movf	(??_diferenca+3)& (0+255),w,b
  7779  0036EA  217D               	addwfc	(?_convert_to_int+3)& (0+255),w,b
  7780  0036EC  6E25               	movwf	_poligono_ext+3,c
  7781                           
  7782                           ; BSR set to: 0
  7783                           ;fence.c: 154: poligono_ext[1].diff_lat = convert_to_int(fence_diff_lat[2]) - valor_lat;
  7784  0036EE  C090  F08B         	movff	diferenca@valor_lat,??_diferenca
  7785  0036F2  C091  F08C         	movff	diferenca@valor_lat+1,??_diferenca+1
  7786  0036F6  C092  F08D         	movff	diferenca@valor_lat+2,??_diferenca+2
  7787  0036FA  C093  F08E         	movff	diferenca@valor_lat+3,??_diferenca+3
  7788  0036FE  1F8B               	comf	??_diferenca& (0+255),f,b
  7789  003700  1F8C               	comf	(??_diferenca+1)& (0+255),f,b
  7790  003702  1F8D               	comf	(??_diferenca+2)& (0+255),f,b
  7791  003704  1F8E               	comf	(??_diferenca+3)& (0+255),f,b
  7792  003706  2B8B               	incf	??_diferenca& (0+255),f,b
  7793  003708  0E00               	movlw	0
  7794  00370A  238C               	addwfc	(??_diferenca+1)& (0+255),f,b
  7795  00370C  238D               	addwfc	(??_diferenca+2)& (0+255),f,b
  7796  00370E  238E               	addwfc	(??_diferenca+3)& (0+255),f,b
  7797  003710  0E3B               	movlw	low (_fence_diff_lat+20)
  7798  003712  6F7A               	movwf	convert_to_int@p_buff& (0+255),b
  7799  003714  0E61               	movlw	high (_fence_diff_lat+20)
  7800  003716  6F7B               	movwf	(convert_to_int@p_buff+1)& (0+255),b
  7801  003718  ECF5  F02E         	call	_convert_to_int	;wreg free
  7802  00371C  0100               	movlb	0	; () banked
  7803  00371E  518B               	movf	??_diferenca& (0+255),w,b
  7804  003720  257A               	addwf	?_convert_to_int& (0+255),w,b
  7805  003722  6E2A               	movwf	_poligono_ext+8,c
  7806  003724  518C               	movf	(??_diferenca+1)& (0+255),w,b
  7807  003726  217B               	addwfc	(?_convert_to_int+1)& (0+255),w,b
  7808  003728  6E2B               	movwf	_poligono_ext+9,c
  7809  00372A  518D               	movf	(??_diferenca+2)& (0+255),w,b
  7810  00372C  217C               	addwfc	(?_convert_to_int+2)& (0+255),w,b
  7811  00372E  6E2C               	movwf	_poligono_ext+10,c
  7812  003730  518E               	movf	(??_diferenca+3)& (0+255),w,b
  7813  003732  217D               	addwfc	(?_convert_to_int+3)& (0+255),w,b
  7814  003734  6E2D               	movwf	_poligono_ext+11,c
  7815                           
  7816                           ;fence.c: 157: break;
  7817  003736  0012               	return	
  7818  003738                     
  7819                           ; BSR set to: 0
  7820                           ;fence.c: 160: valor_long = convert_to_int_point_long();
  7821                           
  7822                           ; BSR set to: 0
  7823  003738  EC87  F029         	call	_convert_to_int_point_long	;wreg free
  7824  00373C  C07A  F094         	movff	?_convert_to_int_point_long,diferenca@valor_long
  7825  003740  C07B  F095         	movff	?_convert_to_int_point_long+1,diferenca@valor_long+1
  7826  003744  C07C  F096         	movff	?_convert_to_int_point_long+2,diferenca@valor_long+2
  7827  003748  C07D  F097         	movff	?_convert_to_int_point_long+3,diferenca@valor_long+3
  7828                           
  7829                           ;fence.c: 161: poligono_ext[0].diff_long = convert_to_int(fence_diff_long[0]) - valor_lo
      +                          ng;
  7830  00374C  C094  F08B         	movff	diferenca@valor_long,??_diferenca
  7831  003750  C095  F08C         	movff	diferenca@valor_long+1,??_diferenca+1
  7832  003754  C096  F08D         	movff	diferenca@valor_long+2,??_diferenca+2
  7833  003758  C097  F08E         	movff	diferenca@valor_long+3,??_diferenca+3
  7834  00375C  0100               	movlb	0	; () banked
  7835  00375E  1F8B               	comf	??_diferenca& (0+255),f,b
  7836  003760  1F8C               	comf	(??_diferenca+1)& (0+255),f,b
  7837  003762  1F8D               	comf	(??_diferenca+2)& (0+255),f,b
  7838  003764  1F8E               	comf	(??_diferenca+3)& (0+255),f,b
  7839  003766  2B8B               	incf	??_diferenca& (0+255),f,b
  7840  003768  0E00               	movlw	0
  7841  00376A  238C               	addwfc	(??_diferenca+1)& (0+255),f,b
  7842  00376C  238D               	addwfc	(??_diferenca+2)& (0+255),f,b
  7843  00376E  238E               	addwfc	(??_diferenca+3)& (0+255),f,b
  7844  003770  0EFB               	movlw	low _fence_diff_long
  7845  003772  6F7A               	movwf	convert_to_int@p_buff& (0+255),b
  7846  003774  0E60               	movlw	high _fence_diff_long
  7847  003776  6F7B               	movwf	(convert_to_int@p_buff+1)& (0+255),b
  7848  003778  ECF5  F02E         	call	_convert_to_int	;wreg free
  7849  00377C  0100               	movlb	0	; () banked
  7850  00377E  518B               	movf	??_diferenca& (0+255),w,b
  7851  003780  257A               	addwf	?_convert_to_int& (0+255),w,b
  7852  003782  6E26               	movwf	_poligono_ext+4,c
  7853  003784  518C               	movf	(??_diferenca+1)& (0+255),w,b
  7854  003786  217B               	addwfc	(?_convert_to_int+1)& (0+255),w,b
  7855  003788  6E27               	movwf	_poligono_ext+5,c
  7856  00378A  518D               	movf	(??_diferenca+2)& (0+255),w,b
  7857  00378C  217C               	addwfc	(?_convert_to_int+2)& (0+255),w,b
  7858  00378E  6E28               	movwf	_poligono_ext+6,c
  7859  003790  518E               	movf	(??_diferenca+3)& (0+255),w,b
  7860  003792  217D               	addwfc	(?_convert_to_int+3)& (0+255),w,b
  7861  003794  6E29               	movwf	_poligono_ext+7,c
  7862                           
  7863                           ; BSR set to: 0
  7864                           ;fence.c: 162: poligono_ext[1].diff_long = convert_to_int(fence_diff_long[2]) - valor_lo
      +                          ng;
  7865  003796  C094  F08B         	movff	diferenca@valor_long,??_diferenca
  7866  00379A  C095  F08C         	movff	diferenca@valor_long+1,??_diferenca+1
  7867  00379E  C096  F08D         	movff	diferenca@valor_long+2,??_diferenca+2
  7868  0037A2  C097  F08E         	movff	diferenca@valor_long+3,??_diferenca+3
  7869  0037A6  1F8B               	comf	??_diferenca& (0+255),f,b
  7870  0037A8  1F8C               	comf	(??_diferenca+1)& (0+255),f,b
  7871  0037AA  1F8D               	comf	(??_diferenca+2)& (0+255),f,b
  7872  0037AC  1F8E               	comf	(??_diferenca+3)& (0+255),f,b
  7873  0037AE  2B8B               	incf	??_diferenca& (0+255),f,b
  7874  0037B0  0E00               	movlw	0
  7875  0037B2  238C               	addwfc	(??_diferenca+1)& (0+255),f,b
  7876  0037B4  238D               	addwfc	(??_diferenca+2)& (0+255),f,b
  7877  0037B6  238E               	addwfc	(??_diferenca+3)& (0+255),f,b
  7878  0037B8  0E11               	movlw	low (_fence_diff_long+22)
  7879  0037BA  6F7A               	movwf	convert_to_int@p_buff& (0+255),b
  7880  0037BC  0E61               	movlw	high (_fence_diff_long+22)
  7881  0037BE  6F7B               	movwf	(convert_to_int@p_buff+1)& (0+255),b
  7882  0037C0  ECF5  F02E         	call	_convert_to_int	;wreg free
  7883  0037C4  0100               	movlb	0	; () banked
  7884  0037C6  518B               	movf	??_diferenca& (0+255),w,b
  7885  0037C8  257A               	addwf	?_convert_to_int& (0+255),w,b
  7886  0037CA  6E2E               	movwf	_poligono_ext+12,c
  7887  0037CC  518C               	movf	(??_diferenca+1)& (0+255),w,b
  7888  0037CE  217B               	addwfc	(?_convert_to_int+1)& (0+255),w,b
  7889  0037D0  6E2F               	movwf	_poligono_ext+13,c
  7890  0037D2  518D               	movf	(??_diferenca+2)& (0+255),w,b
  7891  0037D4  217C               	addwfc	(?_convert_to_int+2)& (0+255),w,b
  7892  0037D6  6E30               	movwf	_poligono_ext+14,c
  7893  0037D8  518E               	movf	(??_diferenca+3)& (0+255),w,b
  7894  0037DA  217D               	addwfc	(?_convert_to_int+3)& (0+255),w,b
  7895  0037DC  6E31               	movwf	_poligono_ext+15,c
  7896                           
  7897                           ; BSR set to: 0
  7898                           ;fence.c: 166: }
  7899                           
  7900                           ;fence.c: 165: break;
  7901  0037DE  0012               	return	
  7902  0037E0                     l1557:
  7903                           
  7904                           ; BSR set to: 0
  7905  0037E0  0100               	movlb	0	; () banked
  7906  0037E2  518F               	movf	diferenca@index& (0+255),w,b
  7907                           
  7908                           ; Switch size 1, requested type "space"
  7909                           ; Number of cases is 1, Range of values is 1 to 1
  7910                           ; switch strategies available:
  7911                           ; Name         Instructions Cycles
  7912                           ; simple_byte            4     3 (average)
  7913                           ;	Chosen strategy is simple_byte
  7914  0037E4  0A01               	xorlw	1	; case 1
  7915  0037E6  B4D8               	btfsc	status,2,c
  7916  0037E8  D753               	goto	l1558
  7917  0037EA  D7A6               	goto	l1560
  7918  0037EC                     __end_of_diferenca:
  7919                           	opt stack 0
  7920                           tosu	equ	0xFFF
  7921                           tosh	equ	0xFFE
  7922                           tosl	equ	0xFFD
  7923                           pclath	equ	0xFFA
  7924                           tblptru	equ	0xFF8
  7925                           tblptrh	equ	0xFF7
  7926                           tblptrl	equ	0xFF6
  7927                           tablat	equ	0xFF5
  7928                           prodh	equ	0xFF4
  7929                           prodl	equ	0xFF3
  7930                           intcon	equ	0xFF2
  7931                           intcon2	equ	0xFF1
  7932                           intcon3	equ	0xFF0
  7933                           postinc0	equ	0xFEE
  7934                           wreg	equ	0xFE8
  7935                           indf1	equ	0xFE7
  7936                           postinc1	equ	0xFE6
  7937                           postdec1	equ	0xFE5
  7938                           plusw1	equ	0xFE3
  7939                           fsr1h	equ	0xFE2
  7940                           fsr1l	equ	0xFE1
  7941                           indf2	equ	0xFDF
  7942                           postinc2	equ	0xFDE
  7943                           postdec2	equ	0xFDD
  7944                           plusw2	equ	0xFDB
  7945                           fsr2h	equ	0xFDA
  7946                           fsr2l	equ	0xFD9
  7947                           status	equ	0xFD8
  7948                           
  7949 ;; *************** function _convert_to_int_point_long *****************
  7950 ;; Defined at:
  7951 ;;		line 455 in file "bibliotecas/fence.c"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;		None
  7954 ;; Auto vars:     Size  Location     Type
  7955 ;;  convert_str_   10   30[BANK0 ] unsigned char [10]
  7956 ;;  p               3    0        PTR unsigned char 
  7957 ;;  i               1   41[BANK0 ] unsigned char 
  7958 ;;  j               1   40[BANK0 ] unsigned char 
  7959 ;; Return value:  Size  Location     Type
  7960 ;;                  4   26[BANK0 ] unsigned long 
  7961 ;; Registers used:
  7962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7963 ;; Tracked objects:
  7964 ;;		On entry : 0/0
  7965 ;;		On exit  : 0/0
  7966 ;;		Unchanged: 0/0
  7967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7968 ;;      Params:         0       4       0       0       0       0       0       0       0
  7969 ;;      Locals:         0      12       0       0       0       0       0       0       0
  7970 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7971 ;;      Totals:         0      16       0       0       0       0       0       0       0
  7972 ;;Total ram usage:       16 bytes
  7973 ;; Hardware stack levels used:    1
  7974 ;; Hardware stack levels required when called:    5
  7975 ;; This function calls:
  7976 ;;		_atol
  7977 ;; This function is called by:
  7978 ;;		_diferenca
  7979 ;; This function uses a non-reentrant model
  7980 ;;
  7981                           
  7982                           	psect	text33
  7983  00530E                     __ptext33:
  7984                           	opt stack 0
  7985  00530E                     _convert_to_int_point_long:
  7986                           	opt stack 19
  7987                           
  7988                           ;fence.c: 457: unsigned char *p;;
  7989                           ;fence.c: 458: unsigned char i, j;
  7990                           ;fence.c: 459: unsigned char convert_str_long[10];
  7991                           ;fence.c: 462: j = 0;
  7992                           
  7993                           ; BSR set to: 0
  7994                           ;incstack = 0
  7995  00530E  0E00               	movlw	0
  7996  005310  0100               	movlb	0	; () banked
  7997  005312  6F88               	movwf	convert_to_int_point_long@j& (0+255),b
  7998                           
  7999                           ;fence.c: 463: for(i=0; i<10;i++)
  8000  005314  0E00               	movlw	0
  8001  005316  6F89               	movwf	convert_to_int_point_long@i& (0+255),b
  8002  005318                     l11832:
  8003                           
  8004                           ; BSR set to: 0
  8005  005318  0E09               	movlw	9
  8006  00531A  6589               	cpfsgt	convert_to_int_point_long@i& (0+255),b
  8007  00531C  D001               	goto	l1615
  8008  00531E  D020               	goto	u15070
  8009  005320                     l1615:
  8010                           
  8011                           ; BSR set to: 0
  8012                           ;fence.c: 464: {
  8013                           ;fence.c: 465: if(dado[i] != '\0')
  8014                           
  8015                           ; BSR set to: 0
  8016  005320  5189               	movf	convert_to_int_point_long@i& (0+255),w,b
  8017  005322  0D01               	mullw	1
  8018  005324  0E00               	movlw	low _dado
  8019  005326  24F3               	addwf	prodl,w,c
  8020  005328  6ED9               	movwf	fsr2l,c
  8021  00532A  0E01               	movlw	high _dado
  8022  00532C  20F4               	addwfc	prodh,w,c
  8023  00532E  6EDA               	movwf	fsr2h,c
  8024  005330  50DF               	movf	indf2,w,c
  8025  005332  B4D8               	btfsc	status,2,c
  8026  005334  D013               	goto	l1617
  8027                           
  8028                           ; BSR set to: 0
  8029                           ;fence.c: 466: {
  8030                           ;fence.c: 468: convert_str_long[j] = dado[i];
  8031  005336  5189               	movf	convert_to_int_point_long@i& (0+255),w,b
  8032  005338  0D01               	mullw	1
  8033  00533A  0E00               	movlw	low _dado
  8034  00533C  24F3               	addwf	prodl,w,c
  8035  00533E  6ED9               	movwf	fsr2l,c
  8036  005340  0E01               	movlw	high _dado
  8037  005342  20F4               	addwfc	prodh,w,c
  8038  005344  6EDA               	movwf	fsr2h,c
  8039  005346  5188               	movf	convert_to_int_point_long@j& (0+255),w,b
  8040  005348  0D01               	mullw	1
  8041  00534A  0E7E               	movlw	low convert_to_int_point_long@convert_str_long
  8042  00534C  24F3               	addwf	prodl,w,c
  8043  00534E  6EE1               	movwf	fsr1l,c
  8044  005350  0E00               	movlw	high convert_to_int_point_long@convert_str_long
  8045  005352  20F4               	addwfc	prodh,w,c
  8046  005354  6EE2               	movwf	fsr1h,c
  8047  005356  CFDF FFE7          	movff	indf2,indf1
  8048                           
  8049                           ; BSR set to: 0
  8050                           ;fence.c: 469: j++;
  8051  00535A  2B88               	incf	convert_to_int_point_long@j& (0+255),f,b
  8052  00535C                     l1617:
  8053                           
  8054                           ; BSR set to: 0
  8055                           
  8056                           ; BSR set to: 0
  8057  00535C  2B89               	incf	convert_to_int_point_long@i& (0+255),f,b
  8058  00535E  D7DC               	goto	l11832
  8059  005360                     u15070:
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;fence.c: 470: }
  8063                           ;fence.c: 471: }
  8064                           ;fence.c: 474: return (atol(convert_str_long));
  8065                           
  8066                           ; BSR set to: 0
  8067  005360  0E7E               	movlw	low convert_to_int_point_long@convert_str_long
  8068  005362  6F6C               	movwf	atol@s& (0+255),b
  8069  005364  0E00               	movlw	high convert_to_int_point_long@convert_str_long
  8070  005366  6F6D               	movwf	(atol@s+1)& (0+255),b
  8071  005368  ECF6  F01B         	call	_atol	;wreg free
  8072  00536C  C06C  F07A         	movff	?_atol,?_convert_to_int_point_long
  8073  005370  C06D  F07B         	movff	?_atol+1,?_convert_to_int_point_long+1
  8074  005374  C06E  F07C         	movff	?_atol+2,?_convert_to_int_point_long+2
  8075  005378  C06F  F07D         	movff	?_atol+3,?_convert_to_int_point_long+3
  8076  00537C  0012               	return	
  8077  00537E                     __end_of_convert_to_int_point_long:
  8078                           	opt stack 0
  8079                           tosu	equ	0xFFF
  8080                           tosh	equ	0xFFE
  8081                           tosl	equ	0xFFD
  8082                           pclath	equ	0xFFA
  8083                           tblptru	equ	0xFF8
  8084                           tblptrh	equ	0xFF7
  8085                           tblptrl	equ	0xFF6
  8086                           tablat	equ	0xFF5
  8087                           prodh	equ	0xFF4
  8088                           prodl	equ	0xFF3
  8089                           intcon	equ	0xFF2
  8090                           intcon2	equ	0xFF1
  8091                           intcon3	equ	0xFF0
  8092                           postinc0	equ	0xFEE
  8093                           wreg	equ	0xFE8
  8094                           indf1	equ	0xFE7
  8095                           postinc1	equ	0xFE6
  8096                           postdec1	equ	0xFE5
  8097                           plusw1	equ	0xFE3
  8098                           fsr1h	equ	0xFE2
  8099                           fsr1l	equ	0xFE1
  8100                           indf2	equ	0xFDF
  8101                           postinc2	equ	0xFDE
  8102                           postdec2	equ	0xFDD
  8103                           plusw2	equ	0xFDB
  8104                           fsr2h	equ	0xFDA
  8105                           fsr2l	equ	0xFD9
  8106                           status	equ	0xFD8
  8107                           
  8108 ;; *************** function _convert_to_int_point_lat *****************
  8109 ;; Defined at:
  8110 ;;		line 428 in file "bibliotecas/fence.c"
  8111 ;; Parameters:    Size  Location     Type
  8112 ;;		None
  8113 ;; Auto vars:     Size  Location     Type
  8114 ;;  convert_str_    9   30[BANK0 ] unsigned char [9]
  8115 ;;  temp_str_lat    2   39[BANK0 ] PTR PTR unsigned char 
  8116 ;;		 -> NULL(0), 
  8117 ;;  i               1   42[BANK0 ] unsigned char 
  8118 ;;  j               1   41[BANK0 ] unsigned char 
  8119 ;; Return value:  Size  Location     Type
  8120 ;;                  4   26[BANK0 ] long 
  8121 ;; Registers used:
  8122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8128 ;;      Params:         0       4       0       0       0       0       0       0       0
  8129 ;;      Locals:         0      13       0       0       0       0       0       0       0
  8130 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8131 ;;      Totals:         0      17       0       0       0       0       0       0       0
  8132 ;;Total ram usage:       17 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:    5
  8135 ;; This function calls:
  8136 ;;		_atol
  8137 ;; This function is called by:
  8138 ;;		_diferenca
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           	psect	text34
  8143  0051AC                     __ptext34:
  8144                           	opt stack 0
  8145  0051AC                     _convert_to_int_point_lat:
  8146                           	opt stack 19
  8147                           
  8148                           ;fence.c: 430: unsigned char **temp_str_lat = temp_buff_lat;
  8149                           
  8150                           ;incstack = 0
  8151  0051AC  C138  F087         	movff	_temp_buff_lat,convert_to_int_point_lat@temp_str_lat
  8152  0051B0  C139  F088         	movff	_temp_buff_lat+1,convert_to_int_point_lat@temp_str_lat+1
  8153                           
  8154                           ;fence.c: 431: unsigned char convert_str_lat[9];
  8155                           ;fence.c: 433: unsigned char i, j;
  8156                           ;fence.c: 435: j= 0;
  8157  0051B4  0E00               	movlw	0
  8158  0051B6  0100               	movlb	0	; () banked
  8159  0051B8  6F89               	movwf	convert_to_int_point_lat@j& (0+255),b
  8160                           
  8161                           ; BSR set to: 0
  8162                           ;fence.c: 436: for(i=0; i<10;i++)
  8163  0051BA  0E00               	movlw	0
  8164  0051BC  6F8A               	movwf	convert_to_int_point_lat@i& (0+255),b
  8165  0051BE  0E09               	movlw	9
  8166  0051C0  658A               	cpfsgt	convert_to_int_point_lat@i& (0+255),b
  8167  0051C2  D001               	goto	l1609
  8168  0051C4  D020               	goto	u15040
  8169  0051C6                     l1609:
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;fence.c: 437: {
  8173                           ;fence.c: 438: if(dado[i] != '\0')
  8174                           
  8175                           ; BSR set to: 0
  8176  0051C6  518A               	movf	convert_to_int_point_lat@i& (0+255),w,b
  8177  0051C8  0D01               	mullw	1
  8178  0051CA  0E00               	movlw	low _dado
  8179  0051CC  24F3               	addwf	prodl,w,c
  8180  0051CE  6ED9               	movwf	fsr2l,c
  8181  0051D0  0E01               	movlw	high _dado
  8182  0051D2  20F4               	addwfc	prodh,w,c
  8183  0051D4  6EDA               	movwf	fsr2h,c
  8184  0051D6  50DF               	movf	indf2,w,c
  8185  0051D8  B4D8               	btfsc	status,2,c
  8186  0051DA  D013               	goto	l1611
  8187                           
  8188                           ; BSR set to: 0
  8189                           ;fence.c: 439: {
  8190                           ;fence.c: 441: convert_str_lat[j] = dado[i];
  8191  0051DC  518A               	movf	convert_to_int_point_lat@i& (0+255),w,b
  8192  0051DE  0D01               	mullw	1
  8193  0051E0  0E00               	movlw	low _dado
  8194  0051E2  24F3               	addwf	prodl,w,c
  8195  0051E4  6ED9               	movwf	fsr2l,c
  8196  0051E6  0E01               	movlw	high _dado
  8197  0051E8  20F4               	addwfc	prodh,w,c
  8198  0051EA  6EDA               	movwf	fsr2h,c
  8199  0051EC  5189               	movf	convert_to_int_point_lat@j& (0+255),w,b
  8200  0051EE  0D01               	mullw	1
  8201  0051F0  0E7E               	movlw	low convert_to_int_point_lat@convert_str_lat
  8202  0051F2  24F3               	addwf	prodl,w,c
  8203  0051F4  6EE1               	movwf	fsr1l,c
  8204  0051F6  0E00               	movlw	high convert_to_int_point_lat@convert_str_lat
  8205  0051F8  20F4               	addwfc	prodh,w,c
  8206  0051FA  6EE2               	movwf	fsr1h,c
  8207  0051FC  CFDF FFE7          	movff	indf2,indf1
  8208                           
  8209                           ; BSR set to: 0
  8210                           ;fence.c: 442: j++;
  8211  005200  2B89               	incf	convert_to_int_point_lat@j& (0+255),f,b
  8212  005202                     l1611:
  8213                           
  8214                           ; BSR set to: 0
  8215                           
  8216                           ; BSR set to: 0
  8217  005202  2B8A               	incf	convert_to_int_point_lat@i& (0+255),f,b
  8218  005204  D7DC               	goto	L1
  8219  005206                     u15040:
  8220                           
  8221                           ; BSR set to: 0
  8222                           ;fence.c: 443: }
  8223                           ;fence.c: 444: }
  8224                           ;fence.c: 446: return (atol(convert_str_lat));
  8225                           
  8226                           ; BSR set to: 0
  8227  005206  0E7E               	movlw	low convert_to_int_point_lat@convert_str_lat
  8228  005208  6F6C               	movwf	atol@s& (0+255),b
  8229  00520A  0E00               	movlw	high convert_to_int_point_lat@convert_str_lat
  8230  00520C  6F6D               	movwf	(atol@s+1)& (0+255),b
  8231  00520E  ECF6  F01B         	call	_atol	;wreg free
  8232  005212  C06C  F07A         	movff	?_atol,?_convert_to_int_point_lat
  8233  005216  C06D  F07B         	movff	?_atol+1,?_convert_to_int_point_lat+1
  8234  00521A  C06E  F07C         	movff	?_atol+2,?_convert_to_int_point_lat+2
  8235  00521E  C06F  F07D         	movff	?_atol+3,?_convert_to_int_point_lat+3
  8236  005222  0012               	return	
  8237  005224                     __end_of_convert_to_int_point_lat:
  8238                           	opt stack 0
  8239                           tosu	equ	0xFFF
  8240                           tosh	equ	0xFFE
  8241                           tosl	equ	0xFFD
  8242                           pclath	equ	0xFFA
  8243                           tblptru	equ	0xFF8
  8244                           tblptrh	equ	0xFF7
  8245                           tblptrl	equ	0xFF6
  8246                           tablat	equ	0xFF5
  8247                           prodh	equ	0xFF4
  8248                           prodl	equ	0xFF3
  8249                           intcon	equ	0xFF2
  8250                           intcon2	equ	0xFF1
  8251                           intcon3	equ	0xFF0
  8252                           postinc0	equ	0xFEE
  8253                           wreg	equ	0xFE8
  8254                           indf1	equ	0xFE7
  8255                           postinc1	equ	0xFE6
  8256                           postdec1	equ	0xFE5
  8257                           plusw1	equ	0xFE3
  8258                           fsr1h	equ	0xFE2
  8259                           fsr1l	equ	0xFE1
  8260                           indf2	equ	0xFDF
  8261                           postinc2	equ	0xFDE
  8262                           postdec2	equ	0xFDD
  8263                           plusw2	equ	0xFDB
  8264                           fsr2h	equ	0xFDA
  8265                           fsr2l	equ	0xFD9
  8266                           status	equ	0xFD8
  8267                           
  8268 ;; *************** function _convert_to_int *****************
  8269 ;; Defined at:
  8270 ;;		line 420 in file "bibliotecas/fence.c"
  8271 ;; Parameters:    Size  Location     Type
  8272 ;;  p_buff          2   26[BANK0 ] PTR const unsigned char 
  8273 ;;		 -> fence_diff_long(44), fence_diff_lat(40), 
  8274 ;; Auto vars:     Size  Location     Type
  8275 ;;		None
  8276 ;; Return value:  Size  Location     Type
  8277 ;;                  4   26[BANK0 ] long 
  8278 ;; Registers used:
  8279 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8280 ;; Tracked objects:
  8281 ;;		On entry : 0/0
  8282 ;;		On exit  : 0/0
  8283 ;;		Unchanged: 0/0
  8284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8285 ;;      Params:         0       4       0       0       0       0       0       0       0
  8286 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8287 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8288 ;;      Totals:         0       4       0       0       0       0       0       0       0
  8289 ;;Total ram usage:        4 bytes
  8290 ;; Hardware stack levels used:    1
  8291 ;; Hardware stack levels required when called:    5
  8292 ;; This function calls:
  8293 ;;		_atol
  8294 ;; This function is called by:
  8295 ;;		_diferenca
  8296 ;; This function uses a non-reentrant model
  8297 ;;
  8298                           
  8299                           	psect	text35
  8300  005DEA                     __ptext35:
  8301                           	opt stack 0
  8302  005DEA                     _convert_to_int:
  8303                           	opt stack 19
  8304                           
  8305                           ;fence.c: 423: p_buff++;
  8306                           
  8307                           ;incstack = 0
  8308  005DEA  0100               	movlb	0	; () banked
  8309  005DEC  4B7A               	infsnz	convert_to_int@p_buff& (0+255),f,b
  8310  005DEE  2B7B               	incf	(convert_to_int@p_buff+1)& (0+255),f,b
  8311                           
  8312                           ; BSR set to: 0
  8313                           ;fence.c: 424: return atol(p_buff);
  8314  005DF0  C07A  F06C         	movff	convert_to_int@p_buff,atol@s
  8315  005DF4  C07B  F06D         	movff	convert_to_int@p_buff+1,atol@s+1
  8316  005DF8  ECF6  F01B         	call	_atol	;wreg free
  8317  005DFC  C06C  F07A         	movff	?_atol,?_convert_to_int
  8318  005E00  C06D  F07B         	movff	?_atol+1,?_convert_to_int+1
  8319  005E04  C06E  F07C         	movff	?_atol+2,?_convert_to_int+2
  8320  005E08  C06F  F07D         	movff	?_atol+3,?_convert_to_int+3
  8321  005E0C  0012               	return	
  8322  005E0E                     __end_of_convert_to_int:
  8323                           	opt stack 0
  8324                           tosu	equ	0xFFF
  8325                           tosh	equ	0xFFE
  8326                           tosl	equ	0xFFD
  8327                           pclath	equ	0xFFA
  8328                           tblptru	equ	0xFF8
  8329                           tblptrh	equ	0xFF7
  8330                           tblptrl	equ	0xFF6
  8331                           tablat	equ	0xFF5
  8332                           prodh	equ	0xFF4
  8333                           prodl	equ	0xFF3
  8334                           intcon	equ	0xFF2
  8335                           intcon2	equ	0xFF1
  8336                           intcon3	equ	0xFF0
  8337                           postinc0	equ	0xFEE
  8338                           wreg	equ	0xFE8
  8339                           indf1	equ	0xFE7
  8340                           postinc1	equ	0xFE6
  8341                           postdec1	equ	0xFE5
  8342                           plusw1	equ	0xFE3
  8343                           fsr1h	equ	0xFE2
  8344                           fsr1l	equ	0xFE1
  8345                           indf2	equ	0xFDF
  8346                           postinc2	equ	0xFDE
  8347                           postdec2	equ	0xFDD
  8348                           plusw2	equ	0xFDB
  8349                           fsr2h	equ	0xFDA
  8350                           fsr2l	equ	0xFD9
  8351                           status	equ	0xFD8
  8352                           
  8353 ;; *************** function _atol *****************
  8354 ;; Defined at:
  8355 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atol.c"
  8356 ;; Parameters:    Size  Location     Type
  8357 ;;  s               2   12[BANK0 ] PTR const unsigned char 
  8358 ;;		 -> convert_to_int_point_long@convert_str_long(10), convert_to_int_point_lat@convert_str_lat(9), fence_diff_long(44)
      +, fence_diff_lat(40), 
  8359 ;; Auto vars:     Size  Location     Type
  8360 ;;  a               4   21[BANK0 ] long 
  8361 ;;  c               1   25[BANK0 ] unsigned char 
  8362 ;;  sign            1   20[BANK0 ] unsigned char 
  8363 ;; Return value:  Size  Location     Type
  8364 ;;                  4   12[BANK0 ] long 
  8365 ;; Registers used:
  8366 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8367 ;; Tracked objects:
  8368 ;;		On entry : 0/0
  8369 ;;		On exit  : 0/0
  8370 ;;		Unchanged: 0/0
  8371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8372 ;;      Params:         0       4       0       0       0       0       0       0       0
  8373 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8374 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8375 ;;      Totals:         0      14       0       0       0       0       0       0       0
  8376 ;;Total ram usage:       14 bytes
  8377 ;; Hardware stack levels used:    1
  8378 ;; Hardware stack levels required when called:    4
  8379 ;; This function calls:
  8380 ;;		___lmul
  8381 ;;		_isdigit
  8382 ;; This function is called by:
  8383 ;;		_convert_to_int
  8384 ;;		_convert_to_int_point_lat
  8385 ;;		_convert_to_int_point_long
  8386 ;; This function uses a non-reentrant model
  8387 ;;
  8388                           
  8389                           	psect	text36
  8390  0037EC                     __ptext36:
  8391                           	opt stack 0
  8392  0037EC                     _atol:
  8393                           	opt stack 19
  8394                           
  8395                           ;incstack = 0
  8396  0037EC  C06C  FFF6         	movff	atol@s,tblptrl
  8397  0037F0  C06D  FFF7         	movff	atol@s+1,tblptrh
  8398  0037F4  6AF8               	clrf	tblptru,c
  8399  0037F6  0E07               	movlw	(high __ramtop+-1)
  8400  0037F8  64F7               	cpfsgt	tblptrh,c
  8401  0037FA  D003               	bra	u14407
  8402  0037FC  0008               	tblrd		*
  8403  0037FE  50F5               	movf	tablat,w,c
  8404  003800  D005               	bra	u14400
  8405  003802                     u14407:
  8406  003802  CFF6 FFE9          	movff	tblptrl,fsr0l
  8407  003806  CFF7 FFEA          	movff	tblptrh,fsr0h
  8408  00380A  50EF               	movf	indf0,w,c
  8409  00380C                     u14400:
  8410  00380C  0100               	movlb	0	; () banked
  8411  00380E  6F79               	movwf	atol@c& (0+255),b
  8412                           
  8413                           ; BSR set to: 0
  8414  003810  4B6C               	infsnz	atol@s& (0+255),f,b
  8415  003812  2B6D               	incf	(atol@s+1)& (0+255),f,b
  8416                           
  8417                           ; BSR set to: 0
  8418  003814  0E20               	movlw	32
  8419  003816  1979               	xorwf	atol@c& (0+255),w,b
  8420  003818  B4D8               	btfsc	status,2,c
  8421  00381A  D7E8               	goto	_atol
  8422                           
  8423                           ; BSR set to: 0
  8424  00381C  0E09               	movlw	9
  8425  00381E  1979               	xorwf	atol@c& (0+255),w,b
  8426  003820  B4D8               	btfsc	status,2,c
  8427  003822  D7E4               	goto	_atol
  8428                           
  8429                           ; BSR set to: 0
  8430                           
  8431                           ; BSR set to: 0
  8432  003824  0E00               	movlw	0
  8433  003826  6F75               	movwf	atol@a& (0+255),b
  8434  003828  0E00               	movlw	0
  8435  00382A  6F76               	movwf	(atol@a+1)& (0+255),b
  8436  00382C  0E00               	movlw	0
  8437  00382E  6F77               	movwf	(atol@a+2)& (0+255),b
  8438  003830  0E00               	movlw	0
  8439  003832  6F78               	movwf	(atol@a+3)& (0+255),b
  8440  003834  0E00               	movlw	0
  8441  003836  6F74               	movwf	atol@sign& (0+255),b
  8442                           
  8443                           ; BSR set to: 0
  8444  003838  0E2D               	movlw	45
  8445  00383A  1979               	xorwf	atol@c& (0+255),w,b
  8446  00383C  A4D8               	btfss	status,2,c
  8447  00383E  D00E               	goto	l1803
  8448                           
  8449                           ; BSR set to: 0
  8450  003840  2B74               	incf	atol@sign& (0+255),f,b
  8451                           
  8452                           ; BSR set to: 0
  8453  003842  C06C  FFF6         	movff	atol@s,tblptrl
  8454  003846  C06D  FFF7         	movff	atol@s+1,tblptrh
  8455  00384A  6AF8               	clrf	tblptru,c
  8456  00384C  0E07               	movlw	(high __ramtop+-1)
  8457  00384E  64F7               	cpfsgt	tblptrh,c
  8458  003850  D003               	bra	u14447
  8459  003852  0008               	tblrd		*
  8460  003854  50F5               	movf	tablat,w,c
  8461  003856  D001               	bra	u14440
  8462  003858                     u14447:
  8463  003858  D010               	goto	u14467
  8464  00385A                     u14440:
  8465  00385A  D049               	goto	u14470
  8466  00385C                     l1803:
  8467                           
  8468                           ; BSR set to: 0
  8469                           
  8470                           ; BSR set to: 0
  8471  00385C  0E2B               	movlw	43
  8472  00385E  1979               	xorwf	atol@c& (0+255),w,b
  8473  003860  A4D8               	btfss	status,2,c
  8474  003862  D049               	goto	l1806
  8475                           
  8476                           ; BSR set to: 0
  8477  003864  C06C  FFF6         	movff	atol@s,tblptrl
  8478  003868  C06D  FFF7         	movff	atol@s+1,tblptrh
  8479  00386C  6AF8               	clrf	tblptru,c
  8480  00386E  0E07               	movlw	(high __ramtop+-1)
  8481  003870  64F7               	cpfsgt	tblptrh,c
  8482  003872  D003               	bra	u14467
  8483  003874  0008               	tblrd		*
  8484  003876  50F5               	movf	tablat,w,c
  8485  003878  D005               	bra	u14460
  8486  00387A                     u14467:
  8487  00387A  CFF6 FFE9          	movff	tblptrl,fsr0l
  8488  00387E  CFF7 FFEA          	movff	tblptrh,fsr0h
  8489  003882  50EF               	movf	indf0,w,c
  8490  003884                     u14460:
  8491  003884  D034               	goto	u14470
  8492  003886                     
  8493                           ; BSR set to: 0
  8494  003886  C075  F060         	movff	atol@a,___lmul@multiplier
  8495  00388A  C076  F061         	movff	atol@a+1,___lmul@multiplier+1
  8496  00388E  C077  F062         	movff	atol@a+2,___lmul@multiplier+2
  8497  003892  C078  F063         	movff	atol@a+3,___lmul@multiplier+3
  8498  003896  0E0A               	movlw	10
  8499  003898  0100               	movlb	0	; () banked
  8500  00389A  6F64               	movwf	___lmul@multiplicand& (0+255),b
  8501  00389C  0E00               	movlw	0
  8502  00389E  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  8503  0038A0  0E00               	movlw	0
  8504  0038A2  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
  8505  0038A4  0E00               	movlw	0
  8506  0038A6  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
  8507  0038A8  ECBD  F02A         	call	___lmul	;wreg free
  8508  0038AC  C079  F070         	movff	atol@c,??_atol
  8509  0038B0  0ED0               	movlw	208
  8510  0038B2  0100               	movlb	0	; () banked
  8511  0038B4  2770               	addwf	??_atol& (0+255),f,b
  8512  0038B6  5170               	movf	??_atol& (0+255),w,b
  8513  0038B8  2560               	addwf	?___lmul& (0+255),w,b
  8514  0038BA  6F75               	movwf	atol@a& (0+255),b
  8515  0038BC  0E00               	movlw	0
  8516  0038BE  2161               	addwfc	(?___lmul+1)& (0+255),w,b
  8517  0038C0  6F76               	movwf	(atol@a+1)& (0+255),b
  8518  0038C2  0E00               	movlw	0
  8519  0038C4  2162               	addwfc	(?___lmul+2)& (0+255),w,b
  8520  0038C6  6F77               	movwf	(atol@a+2)& (0+255),b
  8521  0038C8  0E00               	movlw	0
  8522  0038CA  2163               	addwfc	(?___lmul+3)& (0+255),w,b
  8523  0038CC  6F78               	movwf	(atol@a+3)& (0+255),b
  8524                           
  8525                           ; BSR set to: 0
  8526  0038CE  C06C  FFF6         	movff	atol@s,tblptrl
  8527  0038D2  C06D  FFF7         	movff	atol@s+1,tblptrh
  8528  0038D6  6AF8               	clrf	tblptru,c
  8529  0038D8  0E07               	movlw	(high __ramtop+-1)
  8530  0038DA  64F7               	cpfsgt	tblptrh,c
  8531  0038DC  D003               	bra	u14477
  8532  0038DE  0008               	tblrd		*
  8533  0038E0  50F5               	movf	tablat,w,c
  8534  0038E2  D005               	bra	u14470
  8535  0038E4                     u14477:
  8536  0038E4  CFF6 FFE9          	movff	tblptrl,fsr0l
  8537  0038E8  CFF7 FFEA          	movff	tblptrh,fsr0h
  8538  0038EC  50EF               	movf	indf0,w,c
  8539  0038EE                     u14470:
  8540  0038EE  0100               	movlb	0	; () banked
  8541  0038F0  6F79               	movwf	atol@c& (0+255),b
  8542                           
  8543                           ; BSR set to: 0
  8544  0038F2  4B6C               	infsnz	atol@s& (0+255),f,b
  8545  0038F4  2B6D               	incf	(atol@s+1)& (0+255),f,b
  8546  0038F6                     l1806:
  8547                           
  8548                           ; BSR set to: 0
  8549                           
  8550                           ; BSR set to: 0
  8551  0038F6  5179               	movf	atol@c& (0+255),w,b
  8552  0038F8  EC19  F02F         	call	_isdigit
  8553  0038FC  B0D8               	btfsc	status,0,c
  8554  0038FE  D7C3               	goto	l1807
  8555  003900  0100               	movlb	0	; () banked
  8556  003902  5174               	movf	atol@sign& (0+255),w,b
  8557  003904  B4D8               	btfsc	status,2,c
  8558  003906  D01A               	goto	l1809
  8559                           
  8560                           ; BSR set to: 0
  8561  003908  C075  F070         	movff	atol@a,??_atol
  8562  00390C  C076  F071         	movff	atol@a+1,??_atol+1
  8563  003910  C077  F072         	movff	atol@a+2,??_atol+2
  8564  003914  C078  F073         	movff	atol@a+3,??_atol+3
  8565  003918  1F70               	comf	??_atol& (0+255),f,b
  8566  00391A  1F71               	comf	(??_atol+1)& (0+255),f,b
  8567  00391C  1F72               	comf	(??_atol+2)& (0+255),f,b
  8568  00391E  1F73               	comf	(??_atol+3)& (0+255),f,b
  8569  003920  2B70               	incf	??_atol& (0+255),f,b
  8570  003922  0E00               	movlw	0
  8571  003924  2371               	addwfc	(??_atol+1)& (0+255),f,b
  8572  003926  2372               	addwfc	(??_atol+2)& (0+255),f,b
  8573  003928  2373               	addwfc	(??_atol+3)& (0+255),f,b
  8574  00392A  C070  F06C         	movff	??_atol,?_atol
  8575  00392E  C071  F06D         	movff	??_atol+1,?_atol+1
  8576  003932  C072  F06E         	movff	??_atol+2,?_atol+2
  8577  003936  C073  F06F         	movff	??_atol+3,?_atol+3
  8578                           
  8579                           ; BSR set to: 0
  8580  00393A  0012               	return	
  8581  00393C                     l1809:
  8582                           
  8583                           ; BSR set to: 0
  8584  00393C  C075  F06C         	movff	atol@a,?_atol
  8585  003940  C076  F06D         	movff	atol@a+1,?_atol+1
  8586  003944  C077  F06E         	movff	atol@a+2,?_atol+2
  8587  003948  C078  F06F         	movff	atol@a+3,?_atol+3
  8588                           
  8589                           ; BSR set to: 0
  8590  00394C  0012               	return		;funcret
  8591  00394E                     __end_of_atol:
  8592                           	opt stack 0
  8593                           tosu	equ	0xFFF
  8594                           tosh	equ	0xFFE
  8595                           tosl	equ	0xFFD
  8596                           pclath	equ	0xFFA
  8597                           tblptru	equ	0xFF8
  8598                           tblptrh	equ	0xFF7
  8599                           tblptrl	equ	0xFF6
  8600                           tablat	equ	0xFF5
  8601                           prodh	equ	0xFF4
  8602                           prodl	equ	0xFF3
  8603                           intcon	equ	0xFF2
  8604                           intcon2	equ	0xFF1
  8605                           intcon3	equ	0xFF0
  8606                           indf0	equ	0xFEF
  8607                           postinc0	equ	0xFEE
  8608                           fsr0h	equ	0xFEA
  8609                           fsr0l	equ	0xFE9
  8610                           wreg	equ	0xFE8
  8611                           indf1	equ	0xFE7
  8612                           postinc1	equ	0xFE6
  8613                           postdec1	equ	0xFE5
  8614                           plusw1	equ	0xFE3
  8615                           fsr1h	equ	0xFE2
  8616                           fsr1l	equ	0xFE1
  8617                           indf2	equ	0xFDF
  8618                           postinc2	equ	0xFDE
  8619                           postdec2	equ	0xFDD
  8620                           plusw2	equ	0xFDB
  8621                           fsr2h	equ	0xFDA
  8622                           fsr2l	equ	0xFD9
  8623                           status	equ	0xFD8
  8624                           
  8625 ;; *************** function _isdigit *****************
  8626 ;; Defined at:
  8627 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  8628 ;; Parameters:    Size  Location     Type
  8629 ;;  c               1    wreg     unsigned char 
  8630 ;; Auto vars:     Size  Location     Type
  8631 ;;  c               1    2[BANK0 ] unsigned char 
  8632 ;; Return value:  Size  Location     Type
  8633 ;;		None               void
  8634 ;; Registers used:
  8635 ;;		wreg, status,2, status,0
  8636 ;; Tracked objects:
  8637 ;;		On entry : 0/0
  8638 ;;		On exit  : 0/0
  8639 ;;		Unchanged: 0/0
  8640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8641 ;;      Params:         0       0       0       0       0       0       0       0       0
  8642 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8643 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8644 ;;      Totals:         0       3       0       0       0       0       0       0       0
  8645 ;;Total ram usage:        3 bytes
  8646 ;; Hardware stack levels used:    1
  8647 ;; Hardware stack levels required when called:    3
  8648 ;; This function calls:
  8649 ;;		Nothing
  8650 ;; This function is called by:
  8651 ;;		_atoi
  8652 ;;		_atol
  8653 ;; This function uses a non-reentrant model
  8654 ;;
  8655                           
  8656                           	psect	text37
  8657  005E32                     __ptext37:
  8658                           	opt stack 0
  8659  005E32                     _isdigit:
  8660                           	opt stack 19
  8661                           
  8662                           ; BSR set to: 0
  8663                           ;incstack = 0
  8664                           ;isdigit@c stored from wreg
  8665  005E32  0100               	movlb	0	; () banked
  8666  005E34  6F62               	movwf	isdigit@c& (0+255),b
  8667  005E36  0E00               	movlw	0
  8668  005E38  0100               	movlb	0	; () banked
  8669  005E3A  6F61               	movwf	_isdigit$2961& (0+255),b
  8670                           
  8671                           ; BSR set to: 0
  8672  005E3C  0E3A               	movlw	58
  8673  005E3E  6162               	cpfslt	isdigit@c& (0+255),b
  8674  005E40  D005               	goto	l1981
  8675                           
  8676                           ; BSR set to: 0
  8677  005E42  0E2F               	movlw	47
  8678  005E44  6562               	cpfsgt	isdigit@c& (0+255),b
  8679  005E46  D002               	goto	l1981
  8680                           
  8681                           ; BSR set to: 0
  8682  005E48  0E01               	movlw	1
  8683  005E4A  6F61               	movwf	_isdigit$2961& (0+255),b
  8684  005E4C                     l1981:
  8685                           
  8686                           ; BSR set to: 0
  8687                           
  8688                           ; BSR set to: 0
  8689  005E4C  C061  F060         	movff	_isdigit$2961,??_isdigit
  8690  005E50  3160               	rrcf	??_isdigit& (0+255),w,b
  8691  005E52  0012               	return	
  8692  005E54                     __end_of_isdigit:
  8693                           	opt stack 0
  8694                           tosu	equ	0xFFF
  8695                           tosh	equ	0xFFE
  8696                           tosl	equ	0xFFD
  8697                           pclath	equ	0xFFA
  8698                           tblptru	equ	0xFF8
  8699                           tblptrh	equ	0xFF7
  8700                           tblptrl	equ	0xFF6
  8701                           tablat	equ	0xFF5
  8702                           prodh	equ	0xFF4
  8703                           prodl	equ	0xFF3
  8704                           intcon	equ	0xFF2
  8705                           intcon2	equ	0xFF1
  8706                           intcon3	equ	0xFF0
  8707                           indf0	equ	0xFEF
  8708                           postinc0	equ	0xFEE
  8709                           fsr0h	equ	0xFEA
  8710                           fsr0l	equ	0xFE9
  8711                           wreg	equ	0xFE8
  8712                           indf1	equ	0xFE7
  8713                           postinc1	equ	0xFE6
  8714                           postdec1	equ	0xFE5
  8715                           plusw1	equ	0xFE3
  8716                           fsr1h	equ	0xFE2
  8717                           fsr1l	equ	0xFE1
  8718                           indf2	equ	0xFDF
  8719                           postinc2	equ	0xFDE
  8720                           postdec2	equ	0xFDD
  8721                           plusw2	equ	0xFDB
  8722                           fsr2h	equ	0xFDA
  8723                           fsr2l	equ	0xFD9
  8724                           status	equ	0xFD8
  8725                           
  8726 ;; *************** function _grava_sd *****************
  8727 ;; Defined at:
  8728 ;;		line 494 in file "main.c"
  8729 ;; Parameters:    Size  Location     Type
  8730 ;;		None
  8731 ;; Auto vars:     Size  Location     Type
  8732 ;;		None
  8733 ;; Return value:  Size  Location     Type
  8734 ;;                  1    wreg      void 
  8735 ;; Registers used:
  8736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8737 ;; Tracked objects:
  8738 ;;		On entry : 0/0
  8739 ;;		On exit  : 0/0
  8740 ;;		Unchanged: 0/0
  8741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8742 ;;      Params:         0       0       0       0       0       0       0       0       0
  8743 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8744 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8745 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8746 ;;Total ram usage:        0 bytes
  8747 ;; Hardware stack levels used:    1
  8748 ;; Hardware stack levels required when called:   16
  8749 ;; This function calls:
  8750 ;;		_desliga_SPI
  8751 ;;		_desliga_uart
  8752 ;;		_escrita_sdcard
  8753 ;;		_inicializa_SPI
  8754 ;;		_inicializa_uart
  8755 ;; This function is called by:
  8756 ;;		_disparo_gravacao
  8757 ;; This function uses a non-reentrant model
  8758 ;;
  8759                           
  8760                           	psect	text38
  8761  005EAC                     __ptext38:
  8762                           	opt stack 0
  8763  005EAC                     _grava_sd:
  8764                           	opt stack 12
  8765                           
  8766                           ;main.c: 496: PORTBbits.RB3 = 0;
  8767                           
  8768                           ; BSR set to: 0
  8769                           ;incstack = 0
  8770  005EAC  9681               	bcf	3969,3,c	;volatile
  8771                           
  8772                           ;main.c: 497: desliga_uart();
  8773  005EAE  EC8D  F02F         	call	_desliga_uart	;wreg free
  8774                           
  8775                           ;main.c: 498: inicializa_SPI();
  8776  005EB2  EC2A  F02F         	call	_inicializa_SPI	;wreg free
  8777                           
  8778                           ;main.c: 499: escrita_sdcard();
  8779  005EB6  EC02  F019         	call	_escrita_sdcard	;wreg free
  8780                           
  8781                           ;main.c: 500: desliga_SPI();
  8782  005EBA  EC9F  F02F         	call	_desliga_SPI	;wreg free
  8783                           
  8784                           ;main.c: 501: inicializa_uart();
  8785  005EBE  EC07  F02F         	call	_inicializa_uart	;wreg free
  8786                           
  8787                           ;main.c: 502: PORTBbits.RB3 = 1;
  8788  005EC2  8681               	bsf	3969,3,c	;volatile
  8789  005EC4  0012               	return		;funcret
  8790  005EC6                     __end_of_grava_sd:
  8791                           	opt stack 0
  8792                           tosu	equ	0xFFF
  8793                           tosh	equ	0xFFE
  8794                           tosl	equ	0xFFD
  8795                           pclath	equ	0xFFA
  8796                           tblptru	equ	0xFF8
  8797                           tblptrh	equ	0xFF7
  8798                           tblptrl	equ	0xFF6
  8799                           tablat	equ	0xFF5
  8800                           prodh	equ	0xFF4
  8801                           prodl	equ	0xFF3
  8802                           intcon	equ	0xFF2
  8803                           intcon2	equ	0xFF1
  8804                           intcon3	equ	0xFF0
  8805                           indf0	equ	0xFEF
  8806                           postinc0	equ	0xFEE
  8807                           fsr0h	equ	0xFEA
  8808                           fsr0l	equ	0xFE9
  8809                           wreg	equ	0xFE8
  8810                           indf1	equ	0xFE7
  8811                           postinc1	equ	0xFE6
  8812                           postdec1	equ	0xFE5
  8813                           plusw1	equ	0xFE3
  8814                           fsr1h	equ	0xFE2
  8815                           fsr1l	equ	0xFE1
  8816                           indf2	equ	0xFDF
  8817                           postinc2	equ	0xFDE
  8818                           postdec2	equ	0xFDD
  8819                           plusw2	equ	0xFDB
  8820                           fsr2h	equ	0xFDA
  8821                           fsr2l	equ	0xFD9
  8822                           status	equ	0xFD8
  8823                           
  8824 ;; *************** function _inicializa_uart *****************
  8825 ;; Defined at:
  8826 ;;		line 206 in file "bibliotecas/uart.c"
  8827 ;; Parameters:    Size  Location     Type
  8828 ;;		None
  8829 ;; Auto vars:     Size  Location     Type
  8830 ;;		None
  8831 ;; Return value:  Size  Location     Type
  8832 ;;                  1    wreg      void 
  8833 ;; Registers used:
  8834 ;;		wreg, status,2, status,0, cstack
  8835 ;; Tracked objects:
  8836 ;;		On entry : 0/0
  8837 ;;		On exit  : 0/0
  8838 ;;		Unchanged: 0/0
  8839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8840 ;;      Params:         0       0       0       0       0       0       0       0       0
  8841 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8842 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8843 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8844 ;;Total ram usage:        0 bytes
  8845 ;; Hardware stack levels used:    1
  8846 ;; Hardware stack levels required when called:    5
  8847 ;; This function calls:
  8848 ;;		_configura_baudrate_uart
  8849 ;; This function is called by:
  8850 ;;		_main
  8851 ;;		_grava_sd
  8852 ;;		_leitura_sdcard
  8853 ;; This function uses a non-reentrant model
  8854 ;;
  8855                           
  8856                           	psect	text39
  8857  005E0E                     __ptext39:
  8858                           	opt stack 0
  8859  005E0E                     _inicializa_uart:
  8860                           	opt stack 25
  8861                           
  8862                           ;uart.c: 208: TRISCbits.RC6 = 0;
  8863                           
  8864                           ;incstack = 0
  8865  005E0E  9C94               	bcf	3988,6,c	;volatile
  8866                           
  8867                           ;uart.c: 209: TRISCbits.RC7 = 0;
  8868  005E10  9E94               	bcf	3988,7,c	;volatile
  8869                           
  8870                           ;uart.c: 211: (void)configura_baudrate_uart(9600);
  8871  005E12  0E80               	movlw	128
  8872  005E14  0100               	movlb	0	; () banked
  8873  005E16  6F6E               	movwf	configura_baudrate_uart@baudrate& (0+255),b
  8874  005E18  0E25               	movlw	37
  8875  005E1A  6F6F               	movwf	(configura_baudrate_uart@baudrate+1)& (0+255),b
  8876  005E1C  0E00               	movlw	0
  8877  005E1E  6F70               	movwf	(configura_baudrate_uart@baudrate+2)& (0+255),b
  8878  005E20  0E00               	movlw	0
  8879  005E22  6F71               	movwf	(configura_baudrate_uart@baudrate+3)& (0+255),b
  8880  005E24  ECA7  F01E         	call	_configura_baudrate_uart	;wreg free
  8881                           
  8882                           ;uart.c: 213: TXSTA = 0x20;
  8883  005E28  0E20               	movlw	32
  8884  005E2A  6EAC               	movwf	4012,c	;volatile
  8885                           
  8886                           ;uart.c: 214: RCSTA = 0x90;
  8887  005E2C  0E90               	movlw	144
  8888  005E2E  6EAB               	movwf	4011,c	;volatile
  8889  005E30  0012               	return		;funcret
  8890  005E32                     __end_of_inicializa_uart:
  8891                           	opt stack 0
  8892                           tosu	equ	0xFFF
  8893                           tosh	equ	0xFFE
  8894                           tosl	equ	0xFFD
  8895                           pclath	equ	0xFFA
  8896                           tblptru	equ	0xFF8
  8897                           tblptrh	equ	0xFF7
  8898                           tblptrl	equ	0xFF6
  8899                           tablat	equ	0xFF5
  8900                           prodh	equ	0xFF4
  8901                           prodl	equ	0xFF3
  8902                           intcon	equ	0xFF2
  8903                           intcon2	equ	0xFF1
  8904                           intcon3	equ	0xFF0
  8905                           indf0	equ	0xFEF
  8906                           postinc0	equ	0xFEE
  8907                           fsr0h	equ	0xFEA
  8908                           fsr0l	equ	0xFE9
  8909                           wreg	equ	0xFE8
  8910                           indf1	equ	0xFE7
  8911                           postinc1	equ	0xFE6
  8912                           postdec1	equ	0xFE5
  8913                           plusw1	equ	0xFE3
  8914                           fsr1h	equ	0xFE2
  8915                           fsr1l	equ	0xFE1
  8916                           indf2	equ	0xFDF
  8917                           postinc2	equ	0xFDE
  8918                           postdec2	equ	0xFDD
  8919                           plusw2	equ	0xFDB
  8920                           fsr2h	equ	0xFDA
  8921                           fsr2l	equ	0xFD9
  8922                           status	equ	0xFD8
  8923                           
  8924 ;; *************** function _configura_baudrate_uart *****************
  8925 ;; Defined at:
  8926 ;;		line 50 in file "bibliotecas/uart.c"
  8927 ;; Parameters:    Size  Location     Type
  8928 ;;  baudrate        4   14[BANK0 ] const long 
  8929 ;; Auto vars:     Size  Location     Type
  8930 ;;  x               2   26[BANK0 ] unsigned int 
  8931 ;; Return value:  Size  Location     Type
  8932 ;;                  1    wreg      unsigned char 
  8933 ;; Registers used:
  8934 ;;		wreg, status,2, status,0, cstack
  8935 ;; Tracked objects:
  8936 ;;		On entry : 0/0
  8937 ;;		On exit  : 0/0
  8938 ;;		Unchanged: 0/0
  8939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8940 ;;      Params:         0       4       0       0       0       0       0       0       0
  8941 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8942 ;;      Temps:          0       8       0       0       0       0       0       0       0
  8943 ;;      Totals:         0      14       0       0       0       0       0       0       0
  8944 ;;Total ram usage:       14 bytes
  8945 ;; Hardware stack levels used:    1
  8946 ;; Hardware stack levels required when called:    4
  8947 ;; This function calls:
  8948 ;;		___aldiv
  8949 ;; This function is called by:
  8950 ;;		_inicializa_uart
  8951 ;; This function uses a non-reentrant model
  8952 ;;
  8953                           
  8954                           	psect	text40
  8955  003D4E                     __ptext40:
  8956                           	opt stack 0
  8957  003D4E                     _configura_baudrate_uart:
  8958                           	opt stack 25
  8959                           
  8960                           ;uart.c: 52: unsigned int x;
  8961                           ;uart.c: 54: x = (48000000 - baudrate*64)/(baudrate*64);
  8962                           
  8963                           ;incstack = 0
  8964  003D4E  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  8965  003D52  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  8966  003D56  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  8967  003D5A  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  8968  003D5E  0E06               	movlw	6
  8969  003D60                     u16915:
  8970  003D60  90D8               	bcf	status,0,c
  8971  003D62  0100               	movlb	0	; () banked
  8972  003D64  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  8973  003D66  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  8974  003D68  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  8975  003D6A  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  8976  003D6C  2EE8               	decfsz	wreg,f,c
  8977  003D6E  D7F8               	goto	u16915
  8978  003D70  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  8979  003D72  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  8980  003D74  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  8981  003D76  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  8982  003D78  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  8983  003D7A  0E00               	movlw	0
  8984  003D7C  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  8985  003D7E  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  8986  003D80  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  8987  003D82  0E00               	movlw	0
  8988  003D84  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  8989  003D86  6F60               	movwf	___aldiv@dividend& (0+255),b
  8990  003D88  0E6C               	movlw	108
  8991  003D8A  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  8992  003D8C  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  8993  003D8E  0EDC               	movlw	220
  8994  003D90  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  8995  003D92  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  8996  003D94  0E02               	movlw	2
  8997  003D96  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  8998  003D98  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  8999  003D9A  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  9000  003D9E  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  9001  003DA2  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  9002  003DA6  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  9003  003DAA  0E06               	movlw	6
  9004  003DAC                     u16925:
  9005  003DAC  90D8               	bcf	status,0,c
  9006  003DAE  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  9007  003DB0  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  9008  003DB2  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  9009  003DB4  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  9010  003DB6  2EE8               	decfsz	wreg,f,c
  9011  003DB8  D7F9               	goto	u16925
  9012  003DBA  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  9013  003DBE  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  9014  003DC2  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  9015  003DC6  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  9016  003DCA  ECB7  F021         	call	___aldiv	;wreg free
  9017  003DCE  C060  F07A         	movff	?___aldiv,configura_baudrate_uart@x
  9018  003DD2  C061  F07B         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  9019                           
  9020                           ;uart.c: 55: if(x > 255)
  9021  003DD6  0100               	movlb	0	; () banked
  9022  003DD8  057B               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  9023  003DDA  A0D8               	btfss	status,0,c
  9024  003DDC  D044               	goto	l1262
  9025                           
  9026                           ; BSR set to: 0
  9027                           ;uart.c: 56: {
  9028                           ;uart.c: 57: x = (48000000 - baudrate*16)/(baudrate*16);
  9029  003DDE  C06E  F072         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart
  9030  003DE2  C06F  F073         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+1
  9031  003DE6  C070  F074         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+2
  9032  003DEA  C071  F075         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+3
  9033  003DEE  0E04               	movlw	4
  9034  003DF0                     u16945:
  9035  003DF0  90D8               	bcf	status,0,c
  9036  003DF2  3772               	rlcf	??_configura_baudrate_uart& (0+255),f,b
  9037  003DF4  3773               	rlcf	(??_configura_baudrate_uart+1)& (0+255),f,b
  9038  003DF6  3774               	rlcf	(??_configura_baudrate_uart+2)& (0+255),f,b
  9039  003DF8  3775               	rlcf	(??_configura_baudrate_uart+3)& (0+255),f,b
  9040  003DFA  2EE8               	decfsz	wreg,f,c
  9041  003DFC  D7F9               	goto	u16945
  9042  003DFE  1F72               	comf	??_configura_baudrate_uart& (0+255),f,b
  9043  003E00  1F73               	comf	(??_configura_baudrate_uart+1)& (0+255),f,b
  9044  003E02  1F74               	comf	(??_configura_baudrate_uart+2)& (0+255),f,b
  9045  003E04  1F75               	comf	(??_configura_baudrate_uart+3)& (0+255),f,b
  9046  003E06  2B72               	incf	??_configura_baudrate_uart& (0+255),f,b
  9047  003E08  0E00               	movlw	0
  9048  003E0A  2373               	addwfc	(??_configura_baudrate_uart+1)& (0+255),f,b
  9049  003E0C  2374               	addwfc	(??_configura_baudrate_uart+2)& (0+255),f,b
  9050  003E0E  2375               	addwfc	(??_configura_baudrate_uart+3)& (0+255),f,b
  9051  003E10  0E00               	movlw	0
  9052  003E12  2572               	addwf	??_configura_baudrate_uart& (0+255),w,b
  9053  003E14  6F60               	movwf	___aldiv@dividend& (0+255),b
  9054  003E16  0E6C               	movlw	108
  9055  003E18  2173               	addwfc	(??_configura_baudrate_uart+1)& (0+255),w,b
  9056  003E1A  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  9057  003E1C  0EDC               	movlw	220
  9058  003E1E  2174               	addwfc	(??_configura_baudrate_uart+2)& (0+255),w,b
  9059  003E20  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  9060  003E22  0E02               	movlw	2
  9061  003E24  2175               	addwfc	(??_configura_baudrate_uart+3)& (0+255),w,b
  9062  003E26  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  9063  003E28  C06E  F076         	movff	configura_baudrate_uart@baudrate,??_configura_baudrate_uart+4
  9064  003E2C  C06F  F077         	movff	configura_baudrate_uart@baudrate+1,??_configura_baudrate_uart+5
  9065  003E30  C070  F078         	movff	configura_baudrate_uart@baudrate+2,??_configura_baudrate_uart+6
  9066  003E34  C071  F079         	movff	configura_baudrate_uart@baudrate+3,??_configura_baudrate_uart+7
  9067  003E38  0E04               	movlw	4
  9068  003E3A                     u16955:
  9069  003E3A  90D8               	bcf	status,0,c
  9070  003E3C  3776               	rlcf	(??_configura_baudrate_uart+4)& (0+255),f,b
  9071  003E3E  3777               	rlcf	(??_configura_baudrate_uart+5)& (0+255),f,b
  9072  003E40  3778               	rlcf	(??_configura_baudrate_uart+6)& (0+255),f,b
  9073  003E42  3779               	rlcf	(??_configura_baudrate_uart+7)& (0+255),f,b
  9074  003E44  2EE8               	decfsz	wreg,f,c
  9075  003E46  D7F9               	goto	u16955
  9076  003E48  C076  F064         	movff	??_configura_baudrate_uart+4,___aldiv@divisor
  9077  003E4C  C077  F065         	movff	??_configura_baudrate_uart+5,___aldiv@divisor+1
  9078  003E50  C078  F066         	movff	??_configura_baudrate_uart+6,___aldiv@divisor+2
  9079  003E54  C079  F067         	movff	??_configura_baudrate_uart+7,___aldiv@divisor+3
  9080  003E58  ECB7  F021         	call	___aldiv	;wreg free
  9081  003E5C  C060  F07A         	movff	?___aldiv,configura_baudrate_uart@x
  9082  003E60  C061  F07B         	movff	?___aldiv+1,configura_baudrate_uart@x+1
  9083                           
  9084                           ;uart.c: 58: BRGH = 1;
  9085  003E64  84AC               	bsf	4012,2,c	;volatile
  9086  003E66                     l1262:
  9087                           
  9088                           ;uart.c: 59: }
  9089                           ;uart.c: 60: if(x < 256)
  9090  003E66  0100               	movlb	0	; () banked
  9091  003E68  057B               	decf	(configura_baudrate_uart@x+1)& (0+255),w,b
  9092  003E6A  B0D8               	btfsc	status,0,c
  9093  003E6C  0012               	return	
  9094                           
  9095                           ; BSR set to: 0
  9096                           ;uart.c: 61: {
  9097                           ;uart.c: 62: SPBRG = x;
  9098  003E6E  C07A  FFAF         	movff	configura_baudrate_uart@x,4015	;volatile
  9099                           
  9100                           ;uart.c: 63: SYNC = 0;
  9101  003E72  98AC               	bcf	4012,4,c	;volatile
  9102                           
  9103                           ;uart.c: 64: SPEN = 1;
  9104  003E74  8EAB               	bsf	4011,7,c	;volatile
  9105                           
  9106                           ;uart.c: 65: TRISCbits.RC7 = 1;
  9107  003E76  8E94               	bsf	3988,7,c	;volatile
  9108                           
  9109                           ;uart.c: 66: TRISCbits.RC6 = 0;
  9110  003E78  9C94               	bcf	3988,6,c	;volatile
  9111                           
  9112                           ;uart.c: 67: CREN = 1;
  9113  003E7A  88AB               	bsf	4011,4,c	;volatile
  9114                           
  9115                           ;uart.c: 68: TXEN = 1;
  9116  003E7C  8AAC               	bsf	4012,5,c	;volatile
  9117                           
  9118                           ;uart.c: 70: return (1);
  9119                           ;	Return value of _configura_baudrate_uart is never used
  9120  003E7E  0012               	return	
  9121  003E80                     __end_of_configura_baudrate_uart:
  9122                           	opt stack 0
  9123                           tosu	equ	0xFFF
  9124                           tosh	equ	0xFFE
  9125                           tosl	equ	0xFFD
  9126                           pclath	equ	0xFFA
  9127                           tblptru	equ	0xFF8
  9128                           tblptrh	equ	0xFF7
  9129                           tblptrl	equ	0xFF6
  9130                           tablat	equ	0xFF5
  9131                           prodh	equ	0xFF4
  9132                           prodl	equ	0xFF3
  9133                           intcon	equ	0xFF2
  9134                           intcon2	equ	0xFF1
  9135                           intcon3	equ	0xFF0
  9136                           indf0	equ	0xFEF
  9137                           postinc0	equ	0xFEE
  9138                           fsr0h	equ	0xFEA
  9139                           fsr0l	equ	0xFE9
  9140                           wreg	equ	0xFE8
  9141                           indf1	equ	0xFE7
  9142                           postinc1	equ	0xFE6
  9143                           postdec1	equ	0xFE5
  9144                           plusw1	equ	0xFE3
  9145                           fsr1h	equ	0xFE2
  9146                           fsr1l	equ	0xFE1
  9147                           indf2	equ	0xFDF
  9148                           postinc2	equ	0xFDE
  9149                           postdec2	equ	0xFDD
  9150                           plusw2	equ	0xFDB
  9151                           fsr2h	equ	0xFDA
  9152                           fsr2l	equ	0xFD9
  9153                           status	equ	0xFD8
  9154                           
  9155 ;; *************** function ___aldiv *****************
  9156 ;; Defined at:
  9157 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  9158 ;; Parameters:    Size  Location     Type
  9159 ;;  dividend        4    0[BANK0 ] long 
  9160 ;;  divisor         4    4[BANK0 ] long 
  9161 ;; Auto vars:     Size  Location     Type
  9162 ;;  quotient        4   10[BANK0 ] long 
  9163 ;;  sign            1    9[BANK0 ] unsigned char 
  9164 ;;  counter         1    8[BANK0 ] unsigned char 
  9165 ;; Return value:  Size  Location     Type
  9166 ;;                  4    0[BANK0 ] long 
  9167 ;; Registers used:
  9168 ;;		wreg, status,2, status,0
  9169 ;; Tracked objects:
  9170 ;;		On entry : 0/0
  9171 ;;		On exit  : 0/0
  9172 ;;		Unchanged: 0/0
  9173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9174 ;;      Params:         0       8       0       0       0       0       0       0       0
  9175 ;;      Locals:         0       6       0       0       0       0       0       0       0
  9176 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9177 ;;      Totals:         0      14       0       0       0       0       0       0       0
  9178 ;;Total ram usage:       14 bytes
  9179 ;; Hardware stack levels used:    1
  9180 ;; Hardware stack levels required when called:    3
  9181 ;; This function calls:
  9182 ;;		Nothing
  9183 ;; This function is called by:
  9184 ;;		_configura_baudrate_uart
  9185 ;; This function uses a non-reentrant model
  9186 ;;
  9187                           
  9188                           	psect	text41
  9189  00436E                     __ptext41:
  9190                           	opt stack 0
  9191  00436E                     ___aldiv:
  9192                           	opt stack 25
  9193                           
  9194                           ; BSR set to: 0
  9195                           ;incstack = 0
  9196  00436E  0E00               	movlw	0
  9197  004370  0100               	movlb	0	; () banked
  9198  004372  6F69               	movwf	___aldiv@sign& (0+255),b
  9199                           
  9200                           ; BSR set to: 0
  9201  004374  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  9202  004376  D00A               	goto	l1678
  9203                           
  9204                           ; BSR set to: 0
  9205  004378  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  9206  00437A  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  9207  00437C  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  9208  00437E  6D64               	negf	___aldiv@divisor& (0+255),b
  9209  004380  0E00               	movlw	0
  9210  004382  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  9211  004384  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  9212  004386  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  9213                           
  9214                           ; BSR set to: 0
  9215  004388  0E01               	movlw	1
  9216  00438A  6F69               	movwf	___aldiv@sign& (0+255),b
  9217  00438C                     l1678:
  9218                           
  9219                           ; BSR set to: 0
  9220                           
  9221                           ; BSR set to: 0
  9222  00438C  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  9223  00438E  D00A               	goto	l1679
  9224                           
  9225                           ; BSR set to: 0
  9226  004390  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  9227  004392  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  9228  004394  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  9229  004396  6D60               	negf	___aldiv@dividend& (0+255),b
  9230  004398  0E00               	movlw	0
  9231  00439A  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  9232  00439C  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  9233  00439E  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  9234                           
  9235                           ; BSR set to: 0
  9236  0043A0  0E01               	movlw	1
  9237  0043A2  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  9238  0043A4                     l1679:
  9239                           
  9240                           ; BSR set to: 0
  9241                           
  9242                           ; BSR set to: 0
  9243  0043A4  0E00               	movlw	0
  9244  0043A6  6F6A               	movwf	___aldiv@quotient& (0+255),b
  9245  0043A8  0E00               	movlw	0
  9246  0043AA  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
  9247  0043AC  0E00               	movlw	0
  9248  0043AE  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
  9249  0043B0  0E00               	movlw	0
  9250  0043B2  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
  9251                           
  9252                           ; BSR set to: 0
  9253  0043B4  5164               	movf	___aldiv@divisor& (0+255),w,b
  9254  0043B6  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  9255  0043B8  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  9256  0043BA  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  9257  0043BC  B4D8               	btfsc	status,2,c
  9258  0043BE  D02A               	goto	l1686
  9259                           
  9260                           ; BSR set to: 0
  9261  0043C0  0E01               	movlw	1
  9262  0043C2  6F68               	movwf	___aldiv@counter& (0+255),b
  9263  0043C4  D006               	goto	l1681
  9264  0043C6                     
  9265                           ; BSR set to: 0
  9266                           
  9267                           ; BSR set to: 0
  9268  0043C6  90D8               	bcf	status,0,c
  9269  0043C8  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  9270  0043CA  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  9271  0043CC  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  9272  0043CE  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  9273  0043D0  2B68               	incf	___aldiv@counter& (0+255),f,b
  9274  0043D2                     l1681:
  9275                           
  9276                           ; BSR set to: 0
  9277                           
  9278                           ; BSR set to: 0
  9279  0043D2  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  9280  0043D4  D7F8               	goto	l1682
  9281  0043D6                     u16080:
  9282                           
  9283                           ; BSR set to: 0
  9284                           
  9285                           ; BSR set to: 0
  9286                           
  9287                           ; BSR set to: 0
  9288  0043D6  90D8               	bcf	status,0,c
  9289  0043D8  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  9290  0043DA  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  9291  0043DC  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  9292  0043DE  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  9293                           
  9294                           ; BSR set to: 0
  9295  0043E0  5164               	movf	___aldiv@divisor& (0+255),w,b
  9296  0043E2  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  9297  0043E4  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  9298  0043E6  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  9299  0043E8  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  9300  0043EA  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  9301  0043EC  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  9302  0043EE  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  9303  0043F0  A0D8               	btfss	status,0,c
  9304  0043F2  D009               	goto	l1685
  9305                           
  9306                           ; BSR set to: 0
  9307  0043F4  5164               	movf	___aldiv@divisor& (0+255),w,b
  9308  0043F6  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  9309  0043F8  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  9310  0043FA  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  9311  0043FC  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  9312  0043FE  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  9313  004400  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  9314  004402  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  9315                           
  9316                           ; BSR set to: 0
  9317  004404  816A               	bsf	___aldiv@quotient& (0+255),0,b
  9318  004406                     l1685:
  9319                           
  9320                           ; BSR set to: 0
  9321                           
  9322                           ; BSR set to: 0
  9323  004406  90D8               	bcf	status,0,c
  9324  004408  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  9325  00440A  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  9326  00440C  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  9327  00440E  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  9328                           
  9329                           ; BSR set to: 0
  9330  004410  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  9331  004412  D7E1               	goto	u16080
  9332  004414                     l1686:
  9333                           
  9334                           ; BSR set to: 0
  9335                           
  9336                           ; BSR set to: 0
  9337                           
  9338                           ; BSR set to: 0
  9339  004414  5169               	movf	___aldiv@sign& (0+255),w,b
  9340  004416  B4D8               	btfsc	status,2,c
  9341  004418  D008               	goto	l1687
  9342                           
  9343                           ; BSR set to: 0
  9344  00441A  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  9345  00441C  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  9346  00441E  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  9347  004420  6D6A               	negf	___aldiv@quotient& (0+255),b
  9348  004422  0E00               	movlw	0
  9349  004424  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  9350  004426  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  9351  004428  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  9352  00442A                     l1687:
  9353                           
  9354                           ; BSR set to: 0
  9355                           
  9356                           ; BSR set to: 0
  9357  00442A  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  9358  00442E  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  9359  004432  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  9360  004436  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  9361  00443A  0012               	return	
  9362  00443C                     __end_of___aldiv:
  9363                           	opt stack 0
  9364                           tosu	equ	0xFFF
  9365                           tosh	equ	0xFFE
  9366                           tosl	equ	0xFFD
  9367                           pclath	equ	0xFFA
  9368                           tblptru	equ	0xFF8
  9369                           tblptrh	equ	0xFF7
  9370                           tblptrl	equ	0xFF6
  9371                           tablat	equ	0xFF5
  9372                           prodh	equ	0xFF4
  9373                           prodl	equ	0xFF3
  9374                           intcon	equ	0xFF2
  9375                           intcon2	equ	0xFF1
  9376                           intcon3	equ	0xFF0
  9377                           indf0	equ	0xFEF
  9378                           postinc0	equ	0xFEE
  9379                           fsr0h	equ	0xFEA
  9380                           fsr0l	equ	0xFE9
  9381                           wreg	equ	0xFE8
  9382                           indf1	equ	0xFE7
  9383                           postinc1	equ	0xFE6
  9384                           postdec1	equ	0xFE5
  9385                           plusw1	equ	0xFE3
  9386                           fsr1h	equ	0xFE2
  9387                           fsr1l	equ	0xFE1
  9388                           indf2	equ	0xFDF
  9389                           postinc2	equ	0xFDE
  9390                           postdec2	equ	0xFDD
  9391                           plusw2	equ	0xFDB
  9392                           fsr2h	equ	0xFDA
  9393                           fsr2l	equ	0xFD9
  9394                           status	equ	0xFD8
  9395                           
  9396 ;; *************** function _inicializa_SPI *****************
  9397 ;; Defined at:
  9398 ;;		line 48 in file "bibliotecas/SPI.c"
  9399 ;; Parameters:    Size  Location     Type
  9400 ;;		None
  9401 ;; Auto vars:     Size  Location     Type
  9402 ;;		None
  9403 ;; Return value:  Size  Location     Type
  9404 ;;                  1    wreg      void 
  9405 ;; Registers used:
  9406 ;;		wreg, status,2, status,0
  9407 ;; Tracked objects:
  9408 ;;		On entry : 0/0
  9409 ;;		On exit  : 0/0
  9410 ;;		Unchanged: 0/0
  9411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9412 ;;      Params:         0       0       0       0       0       0       0       0       0
  9413 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9414 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9415 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9416 ;;Total ram usage:        0 bytes
  9417 ;; Hardware stack levels used:    1
  9418 ;; Hardware stack levels required when called:    3
  9419 ;; This function calls:
  9420 ;;		Nothing
  9421 ;; This function is called by:
  9422 ;;		_grava_sd
  9423 ;;		_sdcard_init
  9424 ;;		_leitura_sdcard
  9425 ;; This function uses a non-reentrant model
  9426 ;;
  9427                           
  9428                           	psect	text42
  9429  005E54                     __ptext42:
  9430                           	opt stack 0
  9431  005E54                     _inicializa_SPI:
  9432                           	opt stack 24
  9433                           
  9434                           ;SPI.c: 50: TRISBbits.RB1 = 0;
  9435                           
  9436                           ; BSR set to: 0
  9437                           ;incstack = 0
  9438  005E54  9293               	bcf	3987,1,c	;volatile
  9439                           
  9440                           ;SPI.c: 51: TRISBbits.RB5 = 0;
  9441  005E56  9A93               	bcf	3987,5,c	;volatile
  9442                           
  9443                           ;SPI.c: 52: TRISBbits.RB0 = 1;
  9444  005E58  8093               	bsf	3987,0,c	;volatile
  9445                           
  9446                           ;SPI.c: 53: TRISCbits.RC7 = 0;
  9447  005E5A  9E94               	bcf	3988,7,c	;volatile
  9448                           
  9449                           ;SPI.c: 55: LATBbits.LATB5 = 1;
  9450  005E5C  8A8A               	bsf	3978,5,c	;volatile
  9451                           
  9452                           ;SPI.c: 56: SSPSTAT &= 0x3F;
  9453  005E5E  0E3F               	movlw	63
  9454  005E60  16C7               	andwf	4039,f,c	;volatile
  9455                           
  9456                           ;SPI.c: 57: SSPCON1 = 0x00;
  9457  005E62  0E00               	movlw	0
  9458  005E64  6EC6               	movwf	4038,c	;volatile
  9459                           
  9460                           ;SPI.c: 59: SSPSTATbits.SMP = 0;
  9461  005E66  9EC7               	bcf	4039,7,c	;volatile
  9462                           
  9463                           ;SPI.c: 60: SSPSTATbits.CKE = 1;
  9464  005E68  8CC7               	bsf	4039,6,c	;volatile
  9465                           
  9466                           ;SPI.c: 61: SSPCON1bits.CKP = 0;
  9467  005E6A  98C6               	bcf	4038,4,c	;volatile
  9468                           
  9469                           ;SPI.c: 63: SSPCON1 = 0b00000011;
  9470  005E6C  0E03               	movlw	3
  9471  005E6E  6EC6               	movwf	4038,c	;volatile
  9472                           
  9473                           ;SPI.c: 65: SSPCON1bits.SSPEN = 1;
  9474  005E70  8AC6               	bsf	4038,5,c	;volatile
  9475  005E72  0012               	return		;funcret
  9476  005E74                     __end_of_inicializa_SPI:
  9477                           	opt stack 0
  9478                           tosu	equ	0xFFF
  9479                           tosh	equ	0xFFE
  9480                           tosl	equ	0xFFD
  9481                           pclath	equ	0xFFA
  9482                           tblptru	equ	0xFF8
  9483                           tblptrh	equ	0xFF7
  9484                           tblptrl	equ	0xFF6
  9485                           tablat	equ	0xFF5
  9486                           prodh	equ	0xFF4
  9487                           prodl	equ	0xFF3
  9488                           intcon	equ	0xFF2
  9489                           intcon2	equ	0xFF1
  9490                           intcon3	equ	0xFF0
  9491                           indf0	equ	0xFEF
  9492                           postinc0	equ	0xFEE
  9493                           fsr0h	equ	0xFEA
  9494                           fsr0l	equ	0xFE9
  9495                           wreg	equ	0xFE8
  9496                           indf1	equ	0xFE7
  9497                           postinc1	equ	0xFE6
  9498                           postdec1	equ	0xFE5
  9499                           plusw1	equ	0xFE3
  9500                           fsr1h	equ	0xFE2
  9501                           fsr1l	equ	0xFE1
  9502                           indf2	equ	0xFDF
  9503                           postinc2	equ	0xFDE
  9504                           postdec2	equ	0xFDD
  9505                           plusw2	equ	0xFDB
  9506                           fsr2h	equ	0xFDA
  9507                           fsr2l	equ	0xFD9
  9508                           status	equ	0xFD8
  9509                           
  9510 ;; *************** function _escrita_sdcard *****************
  9511 ;; Defined at:
  9512 ;;		line 199 in file "bibliotecas/SDCard.c"
  9513 ;; Parameters:    Size  Location     Type
  9514 ;;		None
  9515 ;; Auto vars:     Size  Location     Type
  9516 ;;  fix_gps         3    0        PTR unsigned char 
  9517 ;;  bw              2    0        unsigned short 
  9518 ;;  j               1    0        unsigned char 
  9519 ;;  i               1    0        unsigned char 
  9520 ;; Return value:  Size  Location     Type
  9521 ;;                  1    wreg      void 
  9522 ;; Registers used:
  9523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9524 ;; Tracked objects:
  9525 ;;		On entry : 0/0
  9526 ;;		On exit  : 0/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9529 ;;      Params:         0       0       0       0       0       0       0       0       0
  9530 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9531 ;;      Temps:          0       0       2       0       0       0       0       0       0
  9532 ;;      Totals:         0       0       2       0       0       0       0       0       0
  9533 ;;Total ram usage:        2 bytes
  9534 ;; Hardware stack levels used:    1
  9535 ;; Hardware stack levels required when called:   15
  9536 ;; This function calls:
  9537 ;;		_dados_gps_to_sd
  9538 ;;		_f_close
  9539 ;;		_f_lseek
  9540 ;;		_f_mount
  9541 ;;		_f_open
  9542 ;;		_fprintf
  9543 ;;		_posicao_lat
  9544 ;;		_posicao_long
  9545 ;;		_strcat
  9546 ;;		_strcpy
  9547 ;; This function is called by:
  9548 ;;		_grava_sd
  9549 ;; This function uses a non-reentrant model
  9550 ;;
  9551                           
  9552                           	psect	text43
  9553  003204                     __ptext43:
  9554                           	opt stack 0
  9555  003204                     _escrita_sdcard:
  9556                           	opt stack 12
  9557                           
  9558                           ;SDCard.c: 201: unsigned char *fix_gps;
  9559                           ;SDCard.c: 202: unsigned char i, j;
  9560                           ;SDCard.c: 203: static unsigned char f_fix = 0;
  9561                           ;SDCard.c: 204: WORD bw;
  9562                           ;SDCard.c: 205: PORTBbits.RB3 = 0;
  9563                           
  9564                           ;incstack = 0
  9565  003204  9681               	bcf	3969,3,c	;volatile
  9566                           
  9567                           ;SDCard.c: 206: dados_gps_to_sd();
  9568  003206  EC4E  F029         	call	_dados_gps_to_sd	;wreg free
  9569                           
  9570                           ;SDCard.c: 207: f_mount(0,&fs);
  9571  00320A  0E67               	movlw	low _fs
  9572  00320C  0100               	movlb	0	; () banked
  9573  00320E  6F60               	movwf	f_mount@fs& (0+255),b
  9574  003210  0E02               	movlw	high _fs
  9575  003212  6F61               	movwf	(f_mount@fs+1)& (0+255),b
  9576  003214  0E00               	movlw	0
  9577  003216  ECE2  F02B         	call	_f_mount
  9578                           
  9579                           ;SDCard.c: 208: if(!f_fix)
  9580  00321A  503C               	movf	escrita_sdcard@f_fix,w,c
  9581  00321C  A4D8               	btfss	status,2,c
  9582  00321E  D021               	goto	l640
  9583                           
  9584                           ;SDCard.c: 209: {
  9585                           ;SDCard.c: 210: if(string_dado.data_name[0] != ' ' && string_dado.hora_name[0] != ' ')
  9586  003220  0E20               	movlw	32
  9587  003222  0102               	movlb	2	; () banked
  9588  003224  1912               	xorwf	(_string_dado+18)& (0+255),w,b
  9589  003226  B4D8               	btfsc	status,2,c
  9590  003228  D01C               	goto	l640
  9591                           
  9592                           ; BSR set to: 2
  9593  00322A  0E20               	movlw	32
  9594  00322C  1914               	xorwf	(_string_dado+20)& (0+255),w,b
  9595  00322E  B4D8               	btfsc	status,2,c
  9596  003230  D018               	goto	l640
  9597                           
  9598                           ; BSR set to: 2
  9599                           ;SDCard.c: 211: {
  9600                           ;SDCard.c: 214: strcpy(filename, "teste3");
  9601  003232  0E76               	movlw	low _filename
  9602  003234  0100               	movlb	0	; () banked
  9603  003236  6F60               	movwf	strcpy@to& (0+255),b
  9604  003238  0E01               	movlw	high _filename
  9605  00323A  6F61               	movwf	(strcpy@to+1)& (0+255),b
  9606  00323C  0E41               	movlw	low STR_15
  9607  00323E  6F62               	movwf	strcpy@from& (0+255),b
  9608  003240  0E62               	movlw	high STR_15
  9609  003242  6F63               	movwf	(strcpy@from+1)& (0+255),b
  9610  003244  EC46  F02E         	call	_strcpy	;wreg free
  9611                           
  9612                           ;SDCard.c: 215: strcat(filename, ".tlm");
  9613  003248  0E76               	movlw	low _filename
  9614  00324A  0100               	movlb	0	; () banked
  9615  00324C  6F60               	movwf	strcat@to& (0+255),b
  9616  00324E  0E01               	movlw	high _filename
  9617  003250  6F61               	movwf	(strcat@to+1)& (0+255),b
  9618  003252  0E69               	movlw	low STR_16
  9619  003254  6F62               	movwf	strcat@from& (0+255),b
  9620  003256  0E62               	movlw	high STR_16
  9621  003258  6F63               	movwf	(strcat@from+1)& (0+255),b
  9622  00325A  EC52  F02C         	call	_strcat	;wreg free
  9623                           
  9624                           ;SDCard.c: 216: f_fix = 1;
  9625  00325E  0E01               	movlw	1
  9626  003260  6E3C               	movwf	escrita_sdcard@f_fix,c
  9627  003262                     l640:
  9628                           
  9629                           ;SDCard.c: 217: }
  9630                           ;SDCard.c: 218: }
  9631                           ;SDCard.c: 220: if(f_fix)
  9632  003262  503C               	movf	escrita_sdcard@f_fix,w,c
  9633  003264  B4D8               	btfsc	status,2,c
  9634  003266  D094               	goto	l643
  9635                           
  9636                           ;SDCard.c: 221: {
  9637                           ;SDCard.c: 222: if (f_open(&fil, filename, 0x02 ) == FR_OK)
  9638  003268  0E46               	movlw	low _fil
  9639  00326A  0100               	movlb	0	; () banked
  9640  00326C  6FD7               	movwf	f_open@fp& (0+255),b
  9641  00326E  0E01               	movlw	high _fil
  9642  003270  6FD8               	movwf	(f_open@fp+1)& (0+255),b
  9643  003272  0E76               	movlw	low _filename
  9644  003274  6FD9               	movwf	f_open@path& (0+255),b
  9645  003276  0E01               	movlw	high _filename
  9646  003278  6FDA               	movwf	(f_open@path+1)& (0+255),b
  9647  00327A  0E02               	movlw	2
  9648  00327C  6FDB               	movwf	f_open@mode& (0+255),b
  9649  00327E  ECB4  F009         	call	_f_open	;wreg free
  9650  003282  0900               	iorlw	0
  9651  003284  A4D8               	btfss	status,2,c
  9652  003286  D070               	goto	l642
  9653                           
  9654                           ;SDCard.c: 223: {
  9655                           ;SDCard.c: 225: f_lseek(&fil, ((&fil)->fsize));
  9656  003288  0E46               	movlw	low _fil
  9657  00328A  0100               	movlb	0	; () banked
  9658  00328C  6FC4               	movwf	f_lseek@fp& (0+255),b
  9659  00328E  0E01               	movlw	high _fil
  9660  003290  6FC5               	movwf	(f_lseek@fp+1)& (0+255),b
  9661  003292  C150  F0C6         	movff	_fil+10,f_lseek@ofs
  9662  003296  C151  F0C7         	movff	_fil+11,f_lseek@ofs+1
  9663  00329A  C152  F0C8         	movff	_fil+12,f_lseek@ofs+2
  9664  00329E  C153  F0C9         	movff	_fil+13,f_lseek@ofs+3
  9665  0032A2  EC80  F005         	call	_f_lseek	;wreg free
  9666                           
  9667                           ;SDCard.c: 226: fprintf(&fil, "v%s;", string_dado.vel);
  9668  0032A6  0E46               	movlw	low _fil
  9669  0032A8  0101               	movlb	1	; () banked
  9670  0032AA  6FD1               	movwf	fprintf@fil& (0+255),b
  9671  0032AC  0E01               	movlw	high _fil
  9672  0032AE  6FD2               	movwf	(fprintf@fil+1)& (0+255),b
  9673  0032B0  0E64               	movlw	low STR_17
  9674  0032B2  6FD3               	movwf	fprintf@str& (0+255),b
  9675  0032B4  0E62               	movlw	high STR_17
  9676  0032B6  6FD4               	movwf	(fprintf@str+1)& (0+255),b
  9677  0032B8  0E30               	movlw	low (_string_dado+48)
  9678  0032BA  6FD5               	movwf	(?_fprintf+4)& (0+255),b
  9679  0032BC  0E02               	movlw	high (_string_dado+48)
  9680  0032BE  6FD6               	movwf	(?_fprintf+5)& (0+255),b
  9681  0032C0  ECC5  F007         	call	_fprintf	;wreg free
  9682                           
  9683                           ;SDCard.c: 227: fprintf(&fil, "lt%c%s;lo%c%s;", posicao_lat() ,string_dado.lt, posicao_l
      +                          ong(),string_dado.lo);
  9684  0032C4  0E46               	movlw	low _fil
  9685  0032C6  0101               	movlb	1	; () banked
  9686  0032C8  6FD1               	movwf	fprintf@fil& (0+255),b
  9687  0032CA  0E01               	movlw	high _fil
  9688  0032CC  6FD2               	movwf	(fprintf@fil+1)& (0+255),b
  9689  0032CE  0E74               	movlw	low STR_18
  9690  0032D0  6FD3               	movwf	fprintf@str& (0+255),b
  9691  0032D2  0E61               	movlw	high STR_18
  9692  0032D4  6FD4               	movwf	(fprintf@str+1)& (0+255),b
  9693  0032D6  ECDF  F02F         	call	_posicao_lat	;wreg free
  9694  0032DA  0101               	movlb	1	; () banked
  9695  0032DC  6FF0               	movwf	??_escrita_sdcard& (0+255),b
  9696  0032DE  51F0               	movf	??_escrita_sdcard& (0+255),w,b
  9697  0032E0  6FD5               	movwf	(?_fprintf+4)& (0+255),b
  9698  0032E2  6BD6               	clrf	(?_fprintf+5)& (0+255),b
  9699  0032E4  0E16               	movlw	low (_string_dado+22)
  9700  0032E6  6FD7               	movwf	(?_fprintf+6)& (0+255),b
  9701  0032E8  0E02               	movlw	high (_string_dado+22)
  9702  0032EA  6FD8               	movwf	(?_fprintf+7)& (0+255),b
  9703  0032EC  ECDC  F02F         	call	_posicao_long	;wreg free
  9704  0032F0  0101               	movlb	1	; () banked
  9705  0032F2  6FF1               	movwf	(??_escrita_sdcard+1)& (0+255),b
  9706  0032F4  51F1               	movf	(??_escrita_sdcard+1)& (0+255),w,b
  9707  0032F6  6FD9               	movwf	(?_fprintf+8)& (0+255),b
  9708  0032F8  6BDA               	clrf	(?_fprintf+9)& (0+255),b
  9709  0032FA  0E23               	movlw	low (_string_dado+35)
  9710  0032FC  6FDB               	movwf	(?_fprintf+10)& (0+255),b
  9711  0032FE  0E02               	movlw	high (_string_dado+35)
  9712  003300  6FDC               	movwf	(?_fprintf+11)& (0+255),b
  9713  003302  ECC5  F007         	call	_fprintf	;wreg free
  9714                           
  9715                           ;SDCard.c: 228: fprintf(&fil, "r0;c0;k0;");
  9716  003306  0E46               	movlw	low _fil
  9717  003308  0101               	movlb	1	; () banked
  9718  00330A  6FD1               	movwf	fprintf@fil& (0+255),b
  9719  00330C  0E01               	movlw	high _fil
  9720  00330E  6FD2               	movwf	(fprintf@fil+1)& (0+255),b
  9721  003310  0EE7               	movlw	low STR_19
  9722  003312  6FD3               	movwf	fprintf@str& (0+255),b
  9723  003314  0E61               	movlw	high STR_19
  9724  003316  6FD4               	movwf	(fprintf@str+1)& (0+255),b
  9725  003318  ECC5  F007         	call	_fprintf	;wreg free
  9726                           
  9727                           ;SDCard.c: 229: fprintf(&fil, "h%s;dN/A;", string_dado.hora);
  9728  00331C  0E46               	movlw	low _fil
  9729  00331E  0101               	movlb	1	; () banked
  9730  003320  6FD1               	movwf	fprintf@fil& (0+255),b
  9731  003322  0E01               	movlw	high _fil
  9732  003324  6FD2               	movwf	(fprintf@fil+1)& (0+255),b
  9733  003326  0EF1               	movlw	low STR_20
  9734  003328  6FD3               	movwf	fprintf@str& (0+255),b
  9735  00332A  0E61               	movlw	high STR_20
  9736  00332C  6FD4               	movwf	(fprintf@str+1)& (0+255),b
  9737  00332E  0E07               	movlw	low (_string_dado+7)
  9738  003330  6FD5               	movwf	(?_fprintf+4)& (0+255),b
  9739  003332  0E02               	movlw	high (_string_dado+7)
  9740  003334  6FD6               	movwf	(?_fprintf+5)& (0+255),b
  9741  003336  ECC5  F007         	call	_fprintf	;wreg free
  9742                           
  9743                           ;SDCard.c: 230: fprintf(&fil, "f%s;\n", string_dado.fence);
  9744  00333A  0E46               	movlw	low _fil
  9745  00333C  0101               	movlb	1	; () banked
  9746  00333E  6FD1               	movwf	fprintf@fil& (0+255),b
  9747  003340  0E01               	movlw	high _fil
  9748  003342  6FD2               	movwf	(fprintf@fil+1)& (0+255),b
  9749  003344  0E48               	movlw	low STR_21
  9750  003346  6FD3               	movwf	fprintf@str& (0+255),b
  9751  003348  0E62               	movlw	high STR_21
  9752  00334A  6FD4               	movwf	(fprintf@str+1)& (0+255),b
  9753  00334C  0E34               	movlw	low (_string_dado+52)
  9754  00334E  6FD5               	movwf	(?_fprintf+4)& (0+255),b
  9755  003350  0E02               	movlw	high (_string_dado+52)
  9756  003352  6FD6               	movwf	(?_fprintf+5)& (0+255),b
  9757  003354  ECC5  F007         	call	_fprintf	;wreg free
  9758                           
  9759                           ;SDCard.c: 233: f_close(&fil);
  9760  003358  0E46               	movlw	low _fil
  9761  00335A  0100               	movlb	0	; () banked
  9762  00335C  6FAB               	movwf	f_close@fp& (0+255),b
  9763  00335E  0E01               	movlw	high _fil
  9764  003360  6FAC               	movwf	(f_close@fp+1)& (0+255),b
  9765  003362  EC77  F02E         	call	_f_close	;wreg free
  9766                           
  9767                           ;SDCard.c: 234: }
  9768  003366  D014               	goto	l643
  9769  003368                     l642:
  9770                           
  9771                           ;SDCard.c: 235: else
  9772                           ;SDCard.c: 236: {
  9773                           ;SDCard.c: 237: f_open(&fil, filename, 0x08 );
  9774  003368  0E46               	movlw	low _fil
  9775  00336A  0100               	movlb	0	; () banked
  9776  00336C  6FD7               	movwf	f_open@fp& (0+255),b
  9777  00336E  0E01               	movlw	high _fil
  9778  003370  6FD8               	movwf	(f_open@fp+1)& (0+255),b
  9779  003372  0E76               	movlw	low _filename
  9780  003374  6FD9               	movwf	f_open@path& (0+255),b
  9781  003376  0E01               	movlw	high _filename
  9782  003378  6FDA               	movwf	(f_open@path+1)& (0+255),b
  9783  00337A  0E08               	movlw	8
  9784  00337C  6FDB               	movwf	f_open@mode& (0+255),b
  9785  00337E  ECB4  F009         	call	_f_open	;wreg free
  9786                           
  9787                           ;SDCard.c: 238: f_close(&fil);
  9788  003382  0E46               	movlw	low _fil
  9789  003384  0100               	movlb	0	; () banked
  9790  003386  6FAB               	movwf	f_close@fp& (0+255),b
  9791  003388  0E01               	movlw	high _fil
  9792  00338A  6FAC               	movwf	(f_close@fp+1)& (0+255),b
  9793  00338C  EC77  F02E         	call	_f_close	;wreg free
  9794  003390                     l643:
  9795                           
  9796                           ;SDCard.c: 240: }
  9797                           ;SDCard.c: 241: }
  9798                           ;SDCard.c: 242: PORTBbits.RB3 = 1;
  9799  003390  8681               	bsf	3969,3,c	;volatile
  9800  003392  0012               	return	
  9801  003394                     __end_of_escrita_sdcard:
  9802                           	opt stack 0
  9803                           tosu	equ	0xFFF
  9804                           tosh	equ	0xFFE
  9805                           tosl	equ	0xFFD
  9806                           pclath	equ	0xFFA
  9807                           tblptru	equ	0xFF8
  9808                           tblptrh	equ	0xFF7
  9809                           tblptrl	equ	0xFF6
  9810                           tablat	equ	0xFF5
  9811                           prodh	equ	0xFF4
  9812                           prodl	equ	0xFF3
  9813                           intcon	equ	0xFF2
  9814                           intcon2	equ	0xFF1
  9815                           intcon3	equ	0xFF0
  9816                           indf0	equ	0xFEF
  9817                           postinc0	equ	0xFEE
  9818                           fsr0h	equ	0xFEA
  9819                           fsr0l	equ	0xFE9
  9820                           wreg	equ	0xFE8
  9821                           indf1	equ	0xFE7
  9822                           postinc1	equ	0xFE6
  9823                           postdec1	equ	0xFE5
  9824                           plusw1	equ	0xFE3
  9825                           fsr1h	equ	0xFE2
  9826                           fsr1l	equ	0xFE1
  9827                           indf2	equ	0xFDF
  9828                           postinc2	equ	0xFDE
  9829                           postdec2	equ	0xFDD
  9830                           plusw2	equ	0xFDB
  9831                           fsr2h	equ	0xFDA
  9832                           fsr2l	equ	0xFD9
  9833                           status	equ	0xFD8
  9834                           
  9835 ;; *************** function _strcpy *****************
  9836 ;; Defined at:
  9837 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  9838 ;; Parameters:    Size  Location     Type
  9839 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9840 ;;		 -> filename(20), rawLongitude(12), rawLatitude(11), 
  9841 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9842 ;;		 -> STR_15(7), STR_8(13), STR_7(12), 
  9843 ;; Auto vars:     Size  Location     Type
  9844 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9845 ;;		 -> filename(20), rawLongitude(12), rawLatitude(11), 
  9846 ;; Return value:  Size  Location     Type
  9847 ;;                  2    0[BANK0 ] PTR unsigned char 
  9848 ;; Registers used:
  9849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9850 ;; Tracked objects:
  9851 ;;		On entry : 0/0
  9852 ;;		On exit  : 0/0
  9853 ;;		Unchanged: 0/0
  9854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9855 ;;      Params:         0       4       0       0       0       0       0       0       0
  9856 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9857 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9858 ;;      Totals:         0       6       0       0       0       0       0       0       0
  9859 ;;Total ram usage:        6 bytes
  9860 ;; Hardware stack levels used:    1
  9861 ;; Hardware stack levels required when called:    3
  9862 ;; This function calls:
  9863 ;;		Nothing
  9864 ;; This function is called by:
  9865 ;;		_latitude_to_convert
  9866 ;;		_longitude_to_convert
  9867 ;;		_escrita_sdcard
  9868 ;; This function uses a non-reentrant model
  9869 ;;
  9870                           
  9871                           	psect	text44
  9872  005C8C                     __ptext44:
  9873                           	opt stack 0
  9874  005C8C                     _strcpy:
  9875                           	opt stack 23
  9876                           
  9877                           ;incstack = 0
  9878  005C8C  C060  F064         	movff	strcpy@to,strcpy@cp
  9879  005C90  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
  9880  005C94  D005               	goto	l2268
  9881  005C96  0100               	movlb	0	; () banked
  9882  005C98  4B64               	infsnz	strcpy@cp& (0+255),f,b
  9883  005C9A  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
  9884  005C9C  4B62               	infsnz	strcpy@from& (0+255),f,b
  9885  005C9E  2B63               	incf	(strcpy@from+1)& (0+255),f,b
  9886  005CA0                     l2268:
  9887                           
  9888                           ; BSR set to: 0
  9889  005CA0  C062  FFF6         	movff	strcpy@from,tblptrl
  9890  005CA4  C063  FFF7         	movff	strcpy@from+1,tblptrh
  9891  005CA8                     	if	0	;tblptru may be non-zero
  9892  005CA8                     	endif
  9893  005CA8                     	if	0	;tblptru may be non-zero
  9894  005CA8                     	endif
  9895  005CA8  C064  FFD9         	movff	strcpy@cp,fsr2l
  9896  005CAC  C065  FFDA         	movff	strcpy@cp+1,fsr2h
  9897  005CB0  0008               	tblrd		*
  9898  005CB2  CFF5 FFDF          	movff	tablat,indf2
  9899  005CB6  50DF               	movf	indf2,w,c
  9900  005CB8  B4D8               	btfsc	status,2,c
  9901  005CBA  0012               	return	
  9902  005CBC  D7EC               	goto	l2269
  9903  005CBE                     __end_of_strcpy:
  9904                           	opt stack 0
  9905                           tosu	equ	0xFFF
  9906                           tosh	equ	0xFFE
  9907                           tosl	equ	0xFFD
  9908                           pclath	equ	0xFFA
  9909                           tblptru	equ	0xFF8
  9910                           tblptrh	equ	0xFF7
  9911                           tblptrl	equ	0xFF6
  9912                           tablat	equ	0xFF5
  9913                           prodh	equ	0xFF4
  9914                           prodl	equ	0xFF3
  9915                           intcon	equ	0xFF2
  9916                           intcon2	equ	0xFF1
  9917                           intcon3	equ	0xFF0
  9918                           indf0	equ	0xFEF
  9919                           postinc0	equ	0xFEE
  9920                           fsr0h	equ	0xFEA
  9921                           fsr0l	equ	0xFE9
  9922                           wreg	equ	0xFE8
  9923                           indf1	equ	0xFE7
  9924                           postinc1	equ	0xFE6
  9925                           postdec1	equ	0xFE5
  9926                           plusw1	equ	0xFE3
  9927                           fsr1h	equ	0xFE2
  9928                           fsr1l	equ	0xFE1
  9929                           indf2	equ	0xFDF
  9930                           postinc2	equ	0xFDE
  9931                           postdec2	equ	0xFDD
  9932                           plusw2	equ	0xFDB
  9933                           fsr2h	equ	0xFDA
  9934                           fsr2l	equ	0xFD9
  9935                           status	equ	0xFD8
  9936                           
  9937 ;; *************** function _strcat *****************
  9938 ;; Defined at:
  9939 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcat.c"
  9940 ;; Parameters:    Size  Location     Type
  9941 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9942 ;;		 -> filename(20), 
  9943 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9944 ;;		 -> STR_16(5), 
  9945 ;; Auto vars:     Size  Location     Type
  9946 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9947 ;;		 -> filename(20), 
  9948 ;; Return value:  Size  Location     Type
  9949 ;;                  2    0[BANK0 ] PTR unsigned char 
  9950 ;; Registers used:
  9951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9952 ;; Tracked objects:
  9953 ;;		On entry : 0/0
  9954 ;;		On exit  : 0/0
  9955 ;;		Unchanged: 0/0
  9956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9957 ;;      Params:         0       4       0       0       0       0       0       0       0
  9958 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9959 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9960 ;;      Totals:         0       6       0       0       0       0       0       0       0
  9961 ;;Total ram usage:        6 bytes
  9962 ;; Hardware stack levels used:    1
  9963 ;; Hardware stack levels required when called:    3
  9964 ;; This function calls:
  9965 ;;		Nothing
  9966 ;; This function is called by:
  9967 ;;		_escrita_sdcard
  9968 ;; This function uses a non-reentrant model
  9969 ;;
  9970                           
  9971                           	psect	text45
  9972  0058A4                     __ptext45:
  9973                           	opt stack 0
  9974  0058A4                     _strcat:
  9975                           	opt stack 23
  9976                           
  9977                           ;incstack = 0
  9978  0058A4  C060  F064         	movff	strcat@to,strcat@cp
  9979  0058A8  C061  F065         	movff	strcat@to+1,strcat@cp+1
  9980  0058AC  D003               	goto	l2251
  9981  0058AE  0100               	movlb	0	; () banked
  9982  0058B0  4B64               	infsnz	strcat@cp& (0+255),f,b
  9983  0058B2  2B65               	incf	(strcat@cp+1)& (0+255),f,b
  9984  0058B4                     l2251:
  9985                           
  9986                           ; BSR set to: 0
  9987  0058B4  C064  FFD9         	movff	strcat@cp,fsr2l
  9988  0058B8  C065  FFDA         	movff	strcat@cp+1,fsr2h
  9989  0058BC  50DF               	movf	indf2,w,c
  9990  0058BE  B4D8               	btfsc	status,2,c
  9991  0058C0  D006               	goto	l2254
  9992  0058C2  D7F5               	goto	l2252
  9993  0058C4  0100               	movlb	0	; () banked
  9994  0058C6  4B64               	infsnz	strcat@cp& (0+255),f,b
  9995  0058C8  2B65               	incf	(strcat@cp+1)& (0+255),f,b
  9996  0058CA  4B62               	infsnz	strcat@from& (0+255),f,b
  9997  0058CC  2B63               	incf	(strcat@from+1)& (0+255),f,b
  9998  0058CE                     l2254:
  9999                           
 10000                           ; BSR set to: 0
 10001  0058CE  C062  FFF6         	movff	strcat@from,tblptrl
 10002  0058D2  C063  FFF7         	movff	strcat@from+1,tblptrh
 10003  0058D6                     	if	0	;tblptru may be non-zero
 10004  0058D6                     	endif
 10005  0058D6                     	if	0	;tblptru may be non-zero
 10006  0058D6                     	endif
 10007  0058D6  C064  FFD9         	movff	strcat@cp,fsr2l
 10008  0058DA  C065  FFDA         	movff	strcat@cp+1,fsr2h
 10009  0058DE  0008               	tblrd		*
 10010  0058E0  CFF5 FFDF          	movff	tablat,indf2
 10011  0058E4  50DF               	movf	indf2,w,c
 10012  0058E6  B4D8               	btfsc	status,2,c
 10013  0058E8  0012               	return	
 10014  0058EA  D7EC               	goto	l2255
 10015  0058EC                     __end_of_strcat:
 10016                           	opt stack 0
 10017                           tosu	equ	0xFFF
 10018                           tosh	equ	0xFFE
 10019                           tosl	equ	0xFFD
 10020                           pclath	equ	0xFFA
 10021                           tblptru	equ	0xFF8
 10022                           tblptrh	equ	0xFF7
 10023                           tblptrl	equ	0xFF6
 10024                           tablat	equ	0xFF5
 10025                           prodh	equ	0xFF4
 10026                           prodl	equ	0xFF3
 10027                           intcon	equ	0xFF2
 10028                           intcon2	equ	0xFF1
 10029                           intcon3	equ	0xFF0
 10030                           indf0	equ	0xFEF
 10031                           postinc0	equ	0xFEE
 10032                           fsr0h	equ	0xFEA
 10033                           fsr0l	equ	0xFE9
 10034                           wreg	equ	0xFE8
 10035                           indf1	equ	0xFE7
 10036                           postinc1	equ	0xFE6
 10037                           postdec1	equ	0xFE5
 10038                           plusw1	equ	0xFE3
 10039                           fsr1h	equ	0xFE2
 10040                           fsr1l	equ	0xFE1
 10041                           indf2	equ	0xFDF
 10042                           postinc2	equ	0xFDE
 10043                           postdec2	equ	0xFDD
 10044                           plusw2	equ	0xFDB
 10045                           fsr2h	equ	0xFDA
 10046                           fsr2l	equ	0xFD9
 10047                           status	equ	0xFD8
 10048                           
 10049 ;; *************** function _posicao_long *****************
 10050 ;; Defined at:
 10051 ;;		line 235 in file "bibliotecas/GPS.c"
 10052 ;; Parameters:    Size  Location     Type
 10053 ;;		None
 10054 ;; Auto vars:     Size  Location     Type
 10055 ;;		None
 10056 ;; Return value:  Size  Location     Type
 10057 ;;                  1    wreg      unsigned char 
 10058 ;; Registers used:
 10059 ;;		wreg, status,2
 10060 ;; Tracked objects:
 10061 ;;		On entry : 0/0
 10062 ;;		On exit  : 0/0
 10063 ;;		Unchanged: 0/0
 10064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10065 ;;      Params:         0       0       0       0       0       0       0       0       0
 10066 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10067 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10068 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10069 ;;Total ram usage:        0 bytes
 10070 ;; Hardware stack levels used:    1
 10071 ;; Hardware stack levels required when called:    3
 10072 ;; This function calls:
 10073 ;;		Nothing
 10074 ;; This function is called by:
 10075 ;;		_escrita_sdcard
 10076 ;;		_verifica_plausibilidade_long
 10077 ;; This function uses a non-reentrant model
 10078 ;;
 10079                           
 10080                           	psect	text46
 10081  005FB8                     __ptext46:
 10082                           	opt stack 0
 10083  005FB8                     _posicao_long:
 10084                           	opt stack 23
 10085                           
 10086                           ;GPS.c: 238: return rawLongitude[0];
 10087                           
 10088                           ;incstack = 0
 10089  005FB8  0101               	movlb	1	; () banked
 10090  005FBA  518A               	movf	_rawLongitude& (0+255),w,b
 10091  005FBC  0012               	return	
 10092  005FBE                     __end_of_posicao_long:
 10093                           	opt stack 0
 10094                           tosu	equ	0xFFF
 10095                           tosh	equ	0xFFE
 10096                           tosl	equ	0xFFD
 10097                           pclath	equ	0xFFA
 10098                           tblptru	equ	0xFF8
 10099                           tblptrh	equ	0xFF7
 10100                           tblptrl	equ	0xFF6
 10101                           tablat	equ	0xFF5
 10102                           prodh	equ	0xFF4
 10103                           prodl	equ	0xFF3
 10104                           intcon	equ	0xFF2
 10105                           intcon2	equ	0xFF1
 10106                           intcon3	equ	0xFF0
 10107                           indf0	equ	0xFEF
 10108                           postinc0	equ	0xFEE
 10109                           fsr0h	equ	0xFEA
 10110                           fsr0l	equ	0xFE9
 10111                           wreg	equ	0xFE8
 10112                           indf1	equ	0xFE7
 10113                           postinc1	equ	0xFE6
 10114                           postdec1	equ	0xFE5
 10115                           plusw1	equ	0xFE3
 10116                           fsr1h	equ	0xFE2
 10117                           fsr1l	equ	0xFE1
 10118                           indf2	equ	0xFDF
 10119                           postinc2	equ	0xFDE
 10120                           postdec2	equ	0xFDD
 10121                           plusw2	equ	0xFDB
 10122                           fsr2h	equ	0xFDA
 10123                           fsr2l	equ	0xFD9
 10124                           status	equ	0xFD8
 10125                           
 10126 ;; *************** function _posicao_lat *****************
 10127 ;; Defined at:
 10128 ;;		line 241 in file "bibliotecas/GPS.c"
 10129 ;; Parameters:    Size  Location     Type
 10130 ;;		None
 10131 ;; Auto vars:     Size  Location     Type
 10132 ;;		None
 10133 ;; Return value:  Size  Location     Type
 10134 ;;                  1    wreg      unsigned char 
 10135 ;; Registers used:
 10136 ;;		wreg, status,2
 10137 ;; Tracked objects:
 10138 ;;		On entry : 0/0
 10139 ;;		On exit  : 0/0
 10140 ;;		Unchanged: 0/0
 10141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10142 ;;      Params:         0       0       0       0       0       0       0       0       0
 10143 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10144 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10145 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10146 ;;Total ram usage:        0 bytes
 10147 ;; Hardware stack levels used:    1
 10148 ;; Hardware stack levels required when called:    3
 10149 ;; This function calls:
 10150 ;;		Nothing
 10151 ;; This function is called by:
 10152 ;;		_escrita_sdcard
 10153 ;;		_verifica_plausibilidade_lat
 10154 ;; This function uses a non-reentrant model
 10155 ;;
 10156                           
 10157                           	psect	text47
 10158  005FBE                     __ptext47:
 10159                           	opt stack 0
 10160  005FBE                     _posicao_lat:
 10161                           	opt stack 23
 10162                           
 10163                           ;GPS.c: 244: return rawLatitude[0];
 10164                           
 10165                           ; BSR set to: 1
 10166                           ;incstack = 0
 10167  005FBE  0101               	movlb	1	; () banked
 10168  005FC0  51A2               	movf	_rawLatitude& (0+255),w,b
 10169  005FC2  0012               	return	
 10170  005FC4                     __end_of_posicao_lat:
 10171                           	opt stack 0
 10172                           tosu	equ	0xFFF
 10173                           tosh	equ	0xFFE
 10174                           tosl	equ	0xFFD
 10175                           pclath	equ	0xFFA
 10176                           tblptru	equ	0xFF8
 10177                           tblptrh	equ	0xFF7
 10178                           tblptrl	equ	0xFF6
 10179                           tablat	equ	0xFF5
 10180                           prodh	equ	0xFF4
 10181                           prodl	equ	0xFF3
 10182                           intcon	equ	0xFF2
 10183                           intcon2	equ	0xFF1
 10184                           intcon3	equ	0xFF0
 10185                           indf0	equ	0xFEF
 10186                           postinc0	equ	0xFEE
 10187                           fsr0h	equ	0xFEA
 10188                           fsr0l	equ	0xFE9
 10189                           wreg	equ	0xFE8
 10190                           indf1	equ	0xFE7
 10191                           postinc1	equ	0xFE6
 10192                           postdec1	equ	0xFE5
 10193                           plusw1	equ	0xFE3
 10194                           fsr1h	equ	0xFE2
 10195                           fsr1l	equ	0xFE1
 10196                           indf2	equ	0xFDF
 10197                           postinc2	equ	0xFDE
 10198                           postdec2	equ	0xFDD
 10199                           plusw2	equ	0xFDB
 10200                           fsr2h	equ	0xFDA
 10201                           fsr2l	equ	0xFD9
 10202                           status	equ	0xFD8
 10203                           
 10204 ;; *************** function _fprintf *****************
 10205 ;; Defined at:
 10206 ;;		line 1816 in file "bibliotecas/tff.c"
 10207 ;; Parameters:    Size  Location     Type
 10208 ;;  fil             2    4[BANK1 ] PTR struct _FIL
 10209 ;;		 -> fil(28), 
 10210 ;;  str             2    6[BANK1 ] PTR const unsigned char 
 10211 ;;		 -> STR_21(6), STR_20(10), STR_19(10), STR_18(15), 
 10212 ;;		 -> STR_17(5), 
 10213 ;; Auto vars:     Size  Location     Type
 10214 ;;  s              16    0[BANK2 ] unsigned char [16]
 10215 ;;  val             4   24[BANK2 ] unsigned long 
 10216 ;;  i               2   32[BANK2 ] int 
 10217 ;;  cc              2   30[BANK2 ] int 
 10218 ;;  arp             2   28[BANK2 ] PTR void [1]
 10219 ;;		 -> ?_fprintf(2), 
 10220 ;;  w               2   20[BANK2 ] int 
 10221 ;;  res             2   16[BANK2 ] int 
 10222 ;;  c               1   34[BANK2 ] unsigned char 
 10223 ;;  r               1   23[BANK2 ] unsigned char 
 10224 ;;  f               1   22[BANK2 ] unsigned char 
 10225 ;; Return value:  Size  Location     Type
 10226 ;;                  2    4[BANK1 ] int 
 10227 ;; Registers used:
 10228 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10229 ;; Tracked objects:
 10230 ;;		On entry : 0/0
 10231 ;;		On exit  : 0/0
 10232 ;;		Unchanged: 0/0
 10233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10234 ;;      Params:         0       0      12       0       0       0       0       0       0
 10235 ;;      Locals:         0       0       0      35       0       0       0       0       0
 10236 ;;      Temps:          0       0       2       0       0       0       0       0       0
 10237 ;;      Totals:         0       0      14      35       0       0       0       0       0
 10238 ;;Total ram usage:       49 bytes
 10239 ;; Hardware stack levels used:    1
 10240 ;; Hardware stack levels required when called:   14
 10241 ;; This function calls:
 10242 ;;		___lldiv
 10243 ;;		___llmod
 10244 ;;		___wmul
 10245 ;;		_fputc
 10246 ;;		_fputs
 10247 ;; This function is called by:
 10248 ;;		_escrita_sdcard
 10249 ;; This function uses a non-reentrant model
 10250 ;;
 10251                           
 10252                           	psect	text48
 10253  000F8A                     __ptext48:
 10254                           	opt stack 0
 10255  000F8A                     _fprintf:
 10256                           	opt stack 12
 10257                           
 10258                           ;tff.c: 1822: va_list arp;
 10259                           ;tff.c: 1823: UCHAR c, f, r;
 10260                           ;tff.c: 1824: ULONG val;
 10261                           ;tff.c: 1825: char s[16];
 10262                           ;tff.c: 1826: int i, w, res, cc;
 10263                           ;tff.c: 1829: *arp = __va_start();
 10264                           
 10265                           ; BSR set to: 1
 10266                           ;incstack = 0
 10267  000F8A  0ED5               	movlw	low (?_fprintf+4)
 10268  000F8C  0102               	movlb	2	; () banked
 10269  000F8E  6F5A               	movwf	fprintf@arp& (0+255),b
 10270  000F90  0E01               	movlw	high (?_fprintf+4)
 10271  000F92  6F5B               	movwf	(fprintf@arp+1)& (0+255),b
 10272                           
 10273                           ; BSR set to: 2
 10274                           ;tff.c: 1831: for (cc = res = 0; cc != -1; res += cc) {
 10275  000F94  0E00               	movlw	0
 10276  000F96  6F4F               	movwf	(fprintf@res+1)& (0+255),b
 10277  000F98  0E00               	movlw	0
 10278  000F9A  6F4E               	movwf	fprintf@res& (0+255),b
 10279  000F9C  C24E  F25C         	movff	fprintf@res,fprintf@cc
 10280  000FA0  C24F  F25D         	movff	fprintf@res+1,fprintf@cc+1
 10281                           
 10282                           ; BSR set to: 2
 10283  000FA4  295C               	incf	fprintf@cc& (0+255),w,b
 10284  000FA6  E103               	bnz	l12728
 10285  000FA8  295D               	incf	(fprintf@cc+1)& (0+255),w,b
 10286  000FAA  B4D8               	btfsc	status,2,c
 10287  000FAC  0012               	return	
 10288  000FAE                     l12728:
 10289                           
 10290                           ; BSR set to: 2
 10291                           ;tff.c: 1832: c = *str++;
 10292  000FAE  C1D3  FFF6         	movff	fprintf@str,tblptrl
 10293  000FB2  C1D4  FFF7         	movff	fprintf@str+1,tblptrh
 10294  000FB6                     	if	0	;tblptru may be non-zero
 10295  000FB6                     	endif
 10296  000FB6                     	if	0	;tblptru may be non-zero
 10297  000FB6                     	endif
 10298  000FB6  0008               	tblrd		*
 10299  000FB8  CFF5 F260          	movff	tablat,fprintf@c
 10300                           
 10301                           ; BSR set to: 2
 10302  000FBC  0101               	movlb	1	; () banked
 10303  000FBE  4BD3               	infsnz	fprintf@str& (0+255),f,b
 10304  000FC0  2BD4               	incf	(fprintf@str+1)& (0+255),f,b
 10305                           
 10306                           ; BSR set to: 1
 10307                           ;tff.c: 1833: if (c == 0) break;
 10308  000FC2  0102               	movlb	2	; () banked
 10309  000FC4  5160               	movf	fprintf@c& (0+255),w,b
 10310  000FC6  B4D8               	btfsc	status,2,c
 10311  000FC8  0012               	return	
 10312                           
 10313                           ; BSR set to: 2
 10314                           ;tff.c: 1834: if (c != '%') {
 10315                           
 10316                           ; BSR set to: 2
 10317                           
 10318                           ; BSR set to: 2
 10319  000FCA  0E25               	movlw	37
 10320  000FCC  1960               	xorwf	fprintf@c& (0+255),w,b
 10321  000FCE  B4D8               	btfsc	status,2,c
 10322  000FD0  D015               	goto	l1181
 10323                           
 10324                           ; BSR set to: 2
 10325                           ;tff.c: 1835: cc = fputc(c, fil);
 10326  000FD2  C260  F0E5         	movff	fprintf@c,fputc@chr
 10327  000FD6  0100               	movlb	0	; () banked
 10328  000FD8  6BE6               	clrf	(fputc@chr+1)& (0+255),b
 10329  000FDA  C1D1  F0E7         	movff	fprintf@fil,fputc@fil
 10330  000FDE  C1D2  F0E8         	movff	fprintf@fil+1,fputc@fil+1
 10331  000FE2  ECE9  F02A         	call	_fputc	;wreg free
 10332  000FE6  C0E5  F25C         	movff	?_fputc,fprintf@cc
 10333  000FEA  C0E6  F25D         	movff	?_fputc+1,fprintf@cc+1
 10334                           
 10335                           ;tff.c: 1836: if (cc != -1) cc = 1;
 10336  000FEE  0102               	movlb	2	; () banked
 10337  000FF0  295C               	incf	fprintf@cc& (0+255),w,b
 10338  000FF2  E103               	bnz	u16660
 10339  000FF4  295D               	incf	(fprintf@cc+1)& (0+255),w,b
 10340  000FF6  B4D8               	btfsc	status,2,c
 10341  000FF8  D1AE               	goto	l1183
 10342  000FFA                     u16660:
 10343  000FFA  D096               	goto	u16730
 10344  000FFC                     l1181:
 10345                           
 10346                           ; BSR set to: 2
 10347                           ;tff.c: 1838: }
 10348                           ;tff.c: 1839: w = f = 0;
 10349                           
 10350                           ; BSR set to: 2
 10351  000FFC  0E00               	movlw	0
 10352  000FFE  6F54               	movwf	fprintf@f& (0+255),b
 10353  001000  C254  F252         	movff	fprintf@f,fprintf@w
 10354  001004  6B53               	clrf	(fprintf@w+1)& (0+255),b
 10355                           
 10356                           ; BSR set to: 2
 10357                           ;tff.c: 1840: c = *str++;
 10358  001006  C1D3  FFF6         	movff	fprintf@str,tblptrl
 10359  00100A  C1D4  FFF7         	movff	fprintf@str+1,tblptrh
 10360  00100E                     	if	0	;tblptru may be non-zero
 10361  00100E                     	endif
 10362  00100E                     	if	0	;tblptru may be non-zero
 10363  00100E                     	endif
 10364  00100E  0008               	tblrd		*
 10365  001010  CFF5 F260          	movff	tablat,fprintf@c
 10366                           
 10367                           ; BSR set to: 2
 10368  001014  0101               	movlb	1	; () banked
 10369  001016  4BD3               	infsnz	fprintf@str& (0+255),f,b
 10370  001018  2BD4               	incf	(fprintf@str+1)& (0+255),f,b
 10371                           
 10372                           ; BSR set to: 1
 10373                           ;tff.c: 1841: if (c == '0') {
 10374  00101A  0E30               	movlw	48
 10375  00101C  0102               	movlb	2	; () banked
 10376  00101E  1960               	xorwf	fprintf@c& (0+255),w,b
 10377  001020  A4D8               	btfss	status,2,c
 10378  001022  D02E               	goto	l1185
 10379                           
 10380                           ; BSR set to: 2
 10381                           ;tff.c: 1842: f = 1; c = *str++;
 10382  001024  0E01               	movlw	1
 10383  001026  6F54               	movwf	fprintf@f& (0+255),b
 10384  001028  D021               	goto	l12760
 10385  00102A                     
 10386                           ;tff.c: 1845: w = w * 10 + (c - '0');
 10387                           
 10388                           ; BSR set to: 1
 10389  00102A  C252  F060         	movff	fprintf@w,___wmul@multiplier
 10390  00102E  C253  F061         	movff	fprintf@w+1,___wmul@multiplier+1
 10391  001032  0E00               	movlw	0
 10392  001034  0100               	movlb	0	; () banked
 10393  001036  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10394  001038  0E0A               	movlw	10
 10395  00103A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10396  00103C  ECE1  F02E         	call	___wmul	;wreg free
 10397  001040  0102               	movlb	2	; () banked
 10398  001042  5160               	movf	fprintf@c& (0+255),w,b
 10399  001044  0101               	movlb	1	; () banked
 10400  001046  6FDD               	movwf	??_fprintf& (0+255),b
 10401  001048  6BDE               	clrf	(??_fprintf+1)& (0+255),b
 10402  00104A  0100               	movlb	0	; () banked
 10403  00104C  5160               	movf	?___wmul& (0+255),w,b
 10404  00104E  0101               	movlb	1	; () banked
 10405  001050  27DD               	addwf	??_fprintf& (0+255),f,b
 10406  001052  0100               	movlb	0	; () banked
 10407  001054  5161               	movf	(?___wmul+1)& (0+255),w,b
 10408  001056  0101               	movlb	1	; () banked
 10409  001058  23DE               	addwfc	(??_fprintf+1)& (0+255),f,b
 10410  00105A  0ED0               	movlw	208
 10411  00105C  25DD               	addwf	??_fprintf& (0+255),w,b
 10412  00105E  0102               	movlb	2	; () banked
 10413  001060  6F52               	movwf	fprintf@w& (0+255),b
 10414  001062  0EFF               	movlw	255
 10415  001064  0101               	movlb	1	; () banked
 10416  001066  21DE               	addwfc	(??_fprintf+1)& (0+255),w,b
 10417  001068  0102               	movlb	2	; () banked
 10418  00106A  6F53               	movwf	(fprintf@w+1)& (0+255),b
 10419  00106C                     l12760:
 10420                           
 10421                           ; BSR set to: 2
 10422                           ;tff.c: 1846: c = *str++;
 10423  00106C  C1D3  FFF6         	movff	fprintf@str,tblptrl
 10424  001070  C1D4  FFF7         	movff	fprintf@str+1,tblptrh
 10425  001074                     	if	0	;tblptru may be non-zero
 10426  001074                     	endif
 10427  001074                     	if	0	;tblptru may be non-zero
 10428  001074                     	endif
 10429  001074  0008               	tblrd		*
 10430  001076  CFF5 F260          	movff	tablat,fprintf@c
 10431                           
 10432                           ; BSR set to: 2
 10433  00107A  0101               	movlb	1	; () banked
 10434  00107C  4BD3               	infsnz	fprintf@str& (0+255),f,b
 10435  00107E  2BD4               	incf	(fprintf@str+1)& (0+255),f,b
 10436  001080                     l1185:
 10437                           
 10438                           ; BSR set to: 1
 10439  001080  0E2F               	movlw	47
 10440  001082  0102               	movlb	2	; () banked
 10441  001084  6560               	cpfsgt	fprintf@c& (0+255),b
 10442  001086  D003               	goto	u16690
 10443                           
 10444                           ; BSR set to: 2
 10445  001088  0E39               	movlw	57
 10446  00108A  6560               	cpfsgt	fprintf@c& (0+255),b
 10447  00108C  D7CE               	goto	l1186
 10448  00108E                     u16690:
 10449                           
 10450                           ; BSR set to: 2
 10451                           ;tff.c: 1847: }
 10452                           ;tff.c: 1848: if (c == 'l') {
 10453                           
 10454                           ; BSR set to: 2
 10455                           
 10456                           ; BSR set to: 2
 10457  00108E  0E6C               	movlw	108
 10458  001090  1960               	xorwf	fprintf@c& (0+255),w,b
 10459  001092  A4D8               	btfss	status,2,c
 10460  001094  D00B               	goto	l1190
 10461                           
 10462                           ; BSR set to: 2
 10463                           ;tff.c: 1849: f |= 2; c = *str++;
 10464  001096  8354               	bsf	fprintf@f& (0+255),1,b
 10465                           
 10466                           ; BSR set to: 2
 10467  001098  C1D3  FFF6         	movff	fprintf@str,tblptrl
 10468  00109C  C1D4  FFF7         	movff	fprintf@str+1,tblptrh
 10469  0010A0                     	if	0	;tblptru may be non-zero
 10470  0010A0                     	endif
 10471  0010A0                     	if	0	;tblptru may be non-zero
 10472  0010A0                     	endif
 10473  0010A0  0008               	tblrd		*
 10474  0010A2  CFF5 F260          	movff	tablat,fprintf@c
 10475                           
 10476                           ; BSR set to: 2
 10477  0010A6  0101               	movlb	1	; () banked
 10478  0010A8  4BD3               	infsnz	fprintf@str& (0+255),f,b
 10479  0010AA  2BD4               	incf	(fprintf@str+1)& (0+255),f,b
 10480  0010AC                     l1190:
 10481                           
 10482                           ;tff.c: 1850: }
 10483                           ;tff.c: 1851: if (c == 's') {
 10484                           
 10485                           ; BSR set to: 1
 10486  0010AC  0E73               	movlw	115
 10487  0010AE  0102               	movlb	2	; () banked
 10488  0010B0  1960               	xorwf	fprintf@c& (0+255),w,b
 10489  0010B2  A4D8               	btfss	status,2,c
 10490  0010B4  D018               	goto	l1191
 10491                           
 10492                           ; BSR set to: 2
 10493                           ;tff.c: 1852: cc = fputs((*(char* *)__va_arg((*(char* **)arp), (char*)0)), fil);
 10494  0010B6  C25A  FFD9         	movff	fprintf@arp,fsr2l
 10495  0010BA  C25B  FFDA         	movff	fprintf@arp+1,fsr2h
 10496  0010BE  CFDE F1CD          	movff	postinc2,fputs@str
 10497  0010C2  CFDD F1CE          	movff	postdec2,fputs@str+1
 10498  0010C6  C1D1  F1CF         	movff	fprintf@fil,fputs@fil
 10499  0010CA  C1D2  F1D0         	movff	fprintf@fil+1,fputs@fil+1
 10500  0010CE  EC5F  F02A         	call	_fputs	;wreg free
 10501  0010D2  C1CD  F25C         	movff	?_fputs,fprintf@cc
 10502  0010D6  C1CE  F25D         	movff	?_fputs+1,fprintf@cc+1
 10503  0010DA  0E02               	movlw	2
 10504  0010DC  0102               	movlb	2	; () banked
 10505  0010DE  275A               	addwf	fprintf@arp& (0+255),f,b
 10506  0010E0  0E00               	movlw	0
 10507  0010E2  235B               	addwfc	(fprintf@arp+1)& (0+255),f,b
 10508                           
 10509                           ;tff.c: 1853: continue;
 10510  0010E4  D138               	goto	l1183
 10511  0010E6                     l1191:
 10512                           
 10513                           ; BSR set to: 2
 10514                           ;tff.c: 1854: }
 10515                           ;tff.c: 1855: if (c == 'c') {
 10516                           
 10517                           ; BSR set to: 2
 10518  0010E6  0E63               	movlw	99
 10519  0010E8  1960               	xorwf	fprintf@c& (0+255),w,b
 10520  0010EA  A4D8               	btfss	status,2,c
 10521  0010EC  D022               	goto	l1192
 10522                           
 10523                           ; BSR set to: 2
 10524                           ;tff.c: 1856: cc = fputc((*(char *)__va_arg((*(char **)arp), (char)0)), fil);
 10525  0010EE  C25A  FFD9         	movff	fprintf@arp,fsr2l
 10526  0010F2  C25B  FFDA         	movff	fprintf@arp+1,fsr2h
 10527  0010F6  50DF               	movf	indf2,w,c
 10528  0010F8  0101               	movlb	1	; () banked
 10529  0010FA  6FDD               	movwf	??_fprintf& (0+255),b
 10530  0010FC  51DD               	movf	??_fprintf& (0+255),w,b
 10531  0010FE  0100               	movlb	0	; () banked
 10532  001100  6FE5               	movwf	fputc@chr& (0+255),b
 10533  001102  6BE6               	clrf	(fputc@chr+1)& (0+255),b
 10534  001104  C1D1  F0E7         	movff	fprintf@fil,fputc@fil
 10535  001108  C1D2  F0E8         	movff	fprintf@fil+1,fputc@fil+1
 10536  00110C  ECE9  F02A         	call	_fputc	;wreg free
 10537  001110  C0E5  F25C         	movff	?_fputc,fprintf@cc
 10538  001114  C0E6  F25D         	movff	?_fputc+1,fprintf@cc+1
 10539  001118  0E02               	movlw	2
 10540  00111A  0102               	movlb	2	; () banked
 10541  00111C  275A               	addwf	fprintf@arp& (0+255),f,b
 10542  00111E  0E00               	movlw	0
 10543  001120  235B               	addwfc	(fprintf@arp+1)& (0+255),f,b
 10544                           
 10545                           ; BSR set to: 2
 10546                           ;tff.c: 1857: if (cc != -1) cc = 1;
 10547  001122  295C               	incf	fprintf@cc& (0+255),w,b
 10548  001124  E101               	bnz	u16730
 10549  001126  D766               	goto	L2
 10550  001128                     u16730:
 10551                           
 10552                           ; BSR set to: 2
 10553  001128  0E00               	movlw	0
 10554  00112A  6F5D               	movwf	(fprintf@cc+1)& (0+255),b
 10555  00112C  0E01               	movlw	1
 10556  00112E  6F5C               	movwf	fprintf@cc& (0+255),b
 10557                           
 10558                           ; BSR set to: 2
 10559                           ;tff.c: 1858: continue;
 10560  001130  D112               	goto	l1183
 10561  001132                     l1192:
 10562                           
 10563                           ; BSR set to: 2
 10564                           ;tff.c: 1859: }
 10565                           ;tff.c: 1860: r = 0;
 10566                           
 10567                           ; BSR set to: 2
 10568  001132  0E00               	movlw	0
 10569  001134  6F55               	movwf	fprintf@r& (0+255),b
 10570                           
 10571                           ; BSR set to: 2
 10572                           ;tff.c: 1861: if (c == 'd') r = 10;
 10573  001136  0E64               	movlw	100
 10574  001138  1960               	xorwf	fprintf@c& (0+255),w,b
 10575  00113A  A4D8               	btfss	status,2,c
 10576  00113C  D002               	goto	l1194
 10577                           
 10578                           ; BSR set to: 2
 10579  00113E  0E0A               	movlw	10
 10580  001140  6F55               	movwf	fprintf@r& (0+255),b
 10581  001142                     l1194:
 10582                           
 10583                           ; BSR set to: 2
 10584                           ;tff.c: 1862: if (c == 'u') r = 10;
 10585                           
 10586                           ; BSR set to: 2
 10587  001142  0E75               	movlw	117
 10588  001144  1960               	xorwf	fprintf@c& (0+255),w,b
 10589  001146  A4D8               	btfss	status,2,c
 10590  001148  D002               	goto	l1195
 10591                           
 10592                           ; BSR set to: 2
 10593  00114A  0E0A               	movlw	10
 10594  00114C  6F55               	movwf	fprintf@r& (0+255),b
 10595  00114E                     l1195:
 10596                           
 10597                           ; BSR set to: 2
 10598                           ;tff.c: 1863: if (c == 'X') r = 16;
 10599                           
 10600                           ; BSR set to: 2
 10601  00114E  0E58               	movlw	88
 10602  001150  1960               	xorwf	fprintf@c& (0+255),w,b
 10603  001152  A4D8               	btfss	status,2,c
 10604  001154  D002               	goto	l1196
 10605                           
 10606                           ; BSR set to: 2
 10607  001156  0E10               	movlw	16
 10608  001158  6F55               	movwf	fprintf@r& (0+255),b
 10609  00115A                     l1196:
 10610                           
 10611                           ; BSR set to: 2
 10612                           ;tff.c: 1864: if (r == 0) break;
 10613  00115A  5155               	movf	fprintf@r& (0+255),w,b
 10614  00115C  B4D8               	btfsc	status,2,c
 10615  00115E  0012               	return	
 10616                           
 10617                           ; BSR set to: 2
 10618                           ;tff.c: 1865: if (f & 2) {
 10619                           
 10620                           ; BSR set to: 2
 10621  001160  A354               	btfss	fprintf@f& (0+255),1,b
 10622  001162  D00E               	goto	l1198
 10623                           
 10624                           ; BSR set to: 2
 10625                           ;tff.c: 1866: val = (ULONG)(*(long *)__va_arg((*(long **)arp), (long)0));
 10626  001164  C25A  FFD9         	movff	fprintf@arp,fsr2l
 10627  001168  C25B  FFDA         	movff	fprintf@arp+1,fsr2h
 10628  00116C  CFDE F256          	movff	postinc2,fprintf@val
 10629  001170  CFDE F257          	movff	postinc2,fprintf@val+1
 10630  001174  CFDE F258          	movff	postinc2,fprintf@val+2
 10631  001178  CFDE F259          	movff	postinc2,fprintf@val+3
 10632                           
 10633                           ; BSR set to: 2
 10634  00117C  0E04               	movlw	4
 10635  00117E  D021               	goto	L6
 10636  001180                     l1198:
 10637                           
 10638                           ; BSR set to: 2
 10639                           ;tff.c: 1868: val = (c == 'd') ? (ULONG)(long)(*(int *)__va_arg((*(int **)arp), (int)0))
      +                           : (ULONG)(*(unsigned int *)__va_arg((*(unsigned int **)arp), (unsigned int)0));
 10640                           
 10641                           ; BSR set to: 2
 10642  001180  0E64               	movlw	100
 10643  001182  1960               	xorwf	fprintf@c& (0+255),w,b
 10644  001184  B4D8               	btfsc	status,2,c
 10645  001186  D00F               	goto	l1201
 10646                           
 10647                           ; BSR set to: 2
 10648  001188  C25A  FFD9         	movff	fprintf@arp,fsr2l
 10649  00118C  C25B  FFDA         	movff	fprintf@arp+1,fsr2h
 10650  001190  CFDE F1DD          	movff	postinc2,??_fprintf
 10651  001194  CFDD F1DE          	movff	postdec2,??_fprintf+1
 10652  001198  C1DD  F256         	movff	??_fprintf,fprintf@val
 10653  00119C  C1DE  F257         	movff	??_fprintf+1,fprintf@val+1
 10654  0011A0  6B58               	clrf	(fprintf@val+2)& (0+255),b
 10655  0011A2  6B59               	clrf	(fprintf@val+3)& (0+255),b
 10656  0011A4  D00D               	goto	l12820
 10657  0011A6                     l1201:
 10658                           
 10659                           ; BSR set to: 2
 10660                           
 10661                           ; BSR set to: 2
 10662  0011A6  C25A  FFD9         	movff	fprintf@arp,fsr2l
 10663  0011AA  C25B  FFDA         	movff	fprintf@arp+1,fsr2h
 10664  0011AE  CFDE F256          	movff	postinc2,fprintf@val
 10665  0011B2  CFDD F257          	movff	postdec2,fprintf@val+1
 10666  0011B6  0E00               	movlw	0
 10667  0011B8  BF57               	btfsc	(fprintf@val+1)& (0+255),7,b
 10668  0011BA  0EFF               	movlw	-1
 10669  0011BC  6F58               	movwf	(fprintf@val+2)& (0+255),b
 10670  0011BE  6F59               	movwf	(fprintf@val+3)& (0+255),b
 10671  0011C0                     l12820:
 10672                           
 10673                           ; BSR set to: 2
 10674  0011C0  0E02               	movlw	2
 10675  0011C2                     L6:
 10676  0011C2  275A               	addwf	fprintf@arp& (0+255),f,b
 10677  0011C4  0E00               	movlw	0
 10678  0011C6  235B               	addwfc	(fprintf@arp+1)& (0+255),f,b
 10679                           
 10680                           ; BSR set to: 2
 10681                           ;tff.c: 1869: }
 10682                           ;tff.c: 1871: if (c == 'd') {
 10683                           
 10684                           ; BSR set to: 2
 10685                           
 10686                           ; BSR set to: 2
 10687  0011C8  0E64               	movlw	100
 10688  0011CA  1960               	xorwf	fprintf@c& (0+255),w,b
 10689  0011CC  A4D8               	btfss	status,2,c
 10690  0011CE  D00D               	goto	l1205
 10691                           
 10692                           ; BSR set to: 2
 10693                           ;tff.c: 1872: if (val >= 0x80000000) {
 10694  0011D0  0E80               	movlw	128
 10695  0011D2  5D59               	subwf	(fprintf@val+3)& (0+255),w,b
 10696  0011D4  A0D8               	btfss	status,0,c
 10697  0011D6  D009               	goto	l1205
 10698                           
 10699                           ; BSR set to: 2
 10700                           ;tff.c: 1873: val = 0 - val;
 10701  0011D8  1F59               	comf	(fprintf@val+3)& (0+255),f,b
 10702  0011DA  1F58               	comf	(fprintf@val+2)& (0+255),f,b
 10703  0011DC  1F57               	comf	(fprintf@val+1)& (0+255),f,b
 10704  0011DE  6D56               	negf	fprintf@val& (0+255),b
 10705  0011E0  0E00               	movlw	0
 10706  0011E2  2357               	addwfc	(fprintf@val+1)& (0+255),f,b
 10707  0011E4  2358               	addwfc	(fprintf@val+2)& (0+255),f,b
 10708  0011E6  2359               	addwfc	(fprintf@val+3)& (0+255),f,b
 10709                           
 10710                           ;tff.c: 1874: f |= 4;
 10711  0011E8  8554               	bsf	fprintf@f& (0+255),2,b
 10712  0011EA                     l1205:
 10713                           
 10714                           ; BSR set to: 2
 10715                           ;tff.c: 1875: }
 10716                           ;tff.c: 1876: }
 10717                           ;tff.c: 1877: i = sizeof(s) - 1; s[i] = 0;
 10718                           
 10719                           ; BSR set to: 2
 10720                           
 10721                           ; BSR set to: 2
 10722  0011EA  0E00               	movlw	0
 10723  0011EC  6F5F               	movwf	(fprintf@i+1)& (0+255),b
 10724  0011EE  0E0F               	movlw	15
 10725  0011F0  6F5E               	movwf	fprintf@i& (0+255),b
 10726                           
 10727                           ; BSR set to: 2
 10728  0011F2  0E3E               	movlw	low fprintf@s
 10729  0011F4  255E               	addwf	fprintf@i& (0+255),w,b
 10730  0011F6  6ED9               	movwf	fsr2l,c
 10731  0011F8  0E02               	movlw	high fprintf@s
 10732  0011FA  215F               	addwfc	(fprintf@i+1)& (0+255),w,b
 10733  0011FC  6EDA               	movwf	fsr2h,c
 10734  0011FE  0E00               	movlw	0
 10735  001200  6EDF               	movwf	indf2,c
 10736  001202                     
 10737                           ; BSR set to: 2
 10738                           ;tff.c: 1879: c = (UCHAR)(val % r + '0');
 10739                           
 10740                           ; BSR set to: 2
 10741  001202  C256  F060         	movff	fprintf@val,___llmod@dividend
 10742  001206  C257  F061         	movff	fprintf@val+1,___llmod@dividend+1
 10743  00120A  C258  F062         	movff	fprintf@val+2,___llmod@dividend+2
 10744  00120E  C259  F063         	movff	fprintf@val+3,___llmod@dividend+3
 10745  001212  5155               	movf	fprintf@r& (0+255),w,b
 10746  001214  0100               	movlb	0	; () banked
 10747  001216  6F64               	movwf	___llmod@divisor& (0+255),b
 10748  001218  6B65               	clrf	(___llmod@divisor+1)& (0+255),b
 10749  00121A  6B66               	clrf	(___llmod@divisor+2)& (0+255),b
 10750  00121C  6B67               	clrf	(___llmod@divisor+3)& (0+255),b
 10751  00121E  ECF7  F029         	call	___llmod	;wreg free
 10752  001222  0100               	movlb	0	; () banked
 10753  001224  5160               	movf	?___llmod& (0+255),w,b
 10754  001226  0F30               	addlw	48
 10755  001228  0102               	movlb	2	; () banked
 10756  00122A  6F60               	movwf	fprintf@c& (0+255),b
 10757                           
 10758                           ; BSR set to: 2
 10759                           ;tff.c: 1880: if (c > '9') c += 7;
 10760  00122C  0E39               	movlw	57
 10761  00122E  6560               	cpfsgt	fprintf@c& (0+255),b
 10762  001230  D002               	goto	l1207
 10763                           
 10764                           ; BSR set to: 2
 10765  001232  0E07               	movlw	7
 10766  001234  2760               	addwf	fprintf@c& (0+255),f,b
 10767  001236                     l1207:
 10768                           
 10769                           ; BSR set to: 2
 10770                           ;tff.c: 1881: s[--i] = c;
 10771                           
 10772                           ; BSR set to: 2
 10773  001236  075E               	decf	fprintf@i& (0+255),f,b
 10774  001238  A0D8               	btfss	status,0,c
 10775  00123A  075F               	decf	(fprintf@i+1)& (0+255),f,b
 10776  00123C  0E3E               	movlw	low fprintf@s
 10777  00123E  255E               	addwf	fprintf@i& (0+255),w,b
 10778  001240  6ED9               	movwf	fsr2l,c
 10779  001242  0E02               	movlw	high fprintf@s
 10780  001244  215F               	addwfc	(fprintf@i+1)& (0+255),w,b
 10781  001246  6EDA               	movwf	fsr2h,c
 10782  001248  C260  FFDF         	movff	fprintf@c,indf2
 10783                           
 10784                           ; BSR set to: 2
 10785                           ;tff.c: 1882: val /= r;
 10786  00124C  C256  F060         	movff	fprintf@val,___lldiv@dividend
 10787  001250  C257  F061         	movff	fprintf@val+1,___lldiv@dividend+1
 10788  001254  C258  F062         	movff	fprintf@val+2,___lldiv@dividend+2
 10789  001258  C259  F063         	movff	fprintf@val+3,___lldiv@dividend+3
 10790  00125C  5155               	movf	fprintf@r& (0+255),w,b
 10791  00125E  0100               	movlb	0	; () banked
 10792  001260  6F64               	movwf	___lldiv@divisor& (0+255),b
 10793  001262  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 10794  001264  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 10795  001266  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 10796  001268  EC18  F028         	call	___lldiv	;wreg free
 10797  00126C  C060  F256         	movff	?___lldiv,fprintf@val
 10798  001270  C061  F257         	movff	?___lldiv+1,fprintf@val+1
 10799  001274  C062  F258         	movff	?___lldiv+2,fprintf@val+2
 10800  001278  C063  F259         	movff	?___lldiv+3,fprintf@val+3
 10801                           
 10802                           ;tff.c: 1883: } while (i && val);
 10803  00127C  0102               	movlb	2	; () banked
 10804  00127E  515E               	movf	fprintf@i& (0+255),w,b
 10805  001280  115F               	iorwf	(fprintf@i+1)& (0+255),w,b
 10806  001282  B4D8               	btfsc	status,2,c
 10807  001284  D006               	goto	u16840
 10808                           
 10809                           ; BSR set to: 2
 10810  001286  5156               	movf	fprintf@val& (0+255),w,b
 10811  001288  1157               	iorwf	(fprintf@val+1)& (0+255),w,b
 10812  00128A  1158               	iorwf	(fprintf@val+2)& (0+255),w,b
 10813  00128C  1159               	iorwf	(fprintf@val+3)& (0+255),w,b
 10814  00128E  A4D8               	btfss	status,2,c
 10815  001290  D7B8               	goto	l1206
 10816  001292                     u16840:
 10817                           
 10818                           ; BSR set to: 2
 10819                           ;tff.c: 1884: if (i && (f & 4)) s[--i] = '-';
 10820                           
 10821                           ; BSR set to: 2
 10822                           
 10823                           ; BSR set to: 2
 10824  001292  515E               	movf	fprintf@i& (0+255),w,b
 10825  001294  115F               	iorwf	(fprintf@i+1)& (0+255),w,b
 10826  001296  A4D8               	btfss	status,2,c
 10827                           
 10828                           ; BSR set to: 2
 10829  001298  A554               	btfss	fprintf@f& (0+255),2,b
 10830  00129A  D00B               	goto	l1211
 10831                           
 10832                           ; BSR set to: 2
 10833  00129C  075E               	decf	fprintf@i& (0+255),f,b
 10834  00129E  A0D8               	btfss	status,0,c
 10835  0012A0  075F               	decf	(fprintf@i+1)& (0+255),f,b
 10836  0012A2  0E3E               	movlw	low fprintf@s
 10837  0012A4  255E               	addwf	fprintf@i& (0+255),w,b
 10838  0012A6  6ED9               	movwf	fsr2l,c
 10839  0012A8  0E02               	movlw	high fprintf@s
 10840  0012AA  215F               	addwfc	(fprintf@i+1)& (0+255),w,b
 10841  0012AC  6EDA               	movwf	fsr2h,c
 10842  0012AE  0E2D               	movlw	45
 10843  0012B0  6EDF               	movwf	indf2,c
 10844  0012B2                     l1211:
 10845                           
 10846                           ; BSR set to: 2
 10847                           ;tff.c: 1885: w = sizeof(s) - 1 - w;
 10848                           
 10849                           ; BSR set to: 2
 10850  0012B2  0E01               	movlw	1
 10851  0012B4  2552               	addwf	fprintf@w& (0+255),w,b
 10852  0012B6  0101               	movlb	1	; () banked
 10853  0012B8  6FDD               	movwf	??_fprintf& (0+255),b
 10854  0012BA  0E00               	movlw	0
 10855  0012BC  0102               	movlb	2	; () banked
 10856  0012BE  2153               	addwfc	(fprintf@w+1)& (0+255),w,b
 10857  0012C0  0101               	movlb	1	; () banked
 10858  0012C2  6FDE               	movwf	(??_fprintf+1)& (0+255),b
 10859  0012C4  1FDD               	comf	??_fprintf& (0+255),f,b
 10860  0012C6  1FDE               	comf	(??_fprintf+1)& (0+255),f,b
 10861  0012C8  4BDD               	infsnz	??_fprintf& (0+255),f,b
 10862  0012CA  2BDE               	incf	(??_fprintf+1)& (0+255),f,b
 10863  0012CC  0E10               	movlw	16
 10864  0012CE  25DD               	addwf	??_fprintf& (0+255),w,b
 10865  0012D0  0102               	movlb	2	; () banked
 10866  0012D2  6F52               	movwf	fprintf@w& (0+255),b
 10867  0012D4  0E00               	movlw	0
 10868  0012D6  0101               	movlb	1	; () banked
 10869  0012D8  21DE               	addwfc	(??_fprintf+1)& (0+255),w,b
 10870  0012DA  0102               	movlb	2	; () banked
 10871  0012DC  6F53               	movwf	(fprintf@w+1)& (0+255),b
 10872                           
 10873                           ;tff.c: 1886: while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
 10874  0012DE  D016               	goto	l1212
 10875  0012E0                     l1213:
 10876                           
 10877                           ; BSR set to: 1
 10878  0012E0  0102               	movlb	2	; () banked
 10879  0012E2  B154               	btfsc	fprintf@f& (0+255),0,b
 10880  0012E4  D004               	goto	l1215
 10881                           
 10882                           ; BSR set to: 2
 10883  0012E6  0E00               	movlw	0
 10884  0012E8  6F51               	movwf	(_fprintf$2176+1)& (0+255),b
 10885  0012EA  0E20               	movlw	32
 10886  0012EC  D003               	goto	L4
 10887  0012EE                     l1215:
 10888                           
 10889                           ; BSR set to: 2
 10890                           
 10891                           ; BSR set to: 2
 10892  0012EE  0E00               	movlw	0
 10893  0012F0  6F51               	movwf	(_fprintf$2176+1)& (0+255),b
 10894  0012F2  0E30               	movlw	48
 10895  0012F4                     L4:
 10896  0012F4  6F50               	movwf	_fprintf$2176& (0+255),b
 10897                           
 10898                           ; BSR set to: 2
 10899                           
 10900                           ; BSR set to: 2
 10901  0012F6  075E               	decf	fprintf@i& (0+255),f,b
 10902  0012F8  A0D8               	btfss	status,0,c
 10903  0012FA  075F               	decf	(fprintf@i+1)& (0+255),f,b
 10904  0012FC  0E3E               	movlw	low fprintf@s
 10905  0012FE  255E               	addwf	fprintf@i& (0+255),w,b
 10906  001300  6ED9               	movwf	fsr2l,c
 10907  001302  0E02               	movlw	high fprintf@s
 10908  001304  215F               	addwfc	(fprintf@i+1)& (0+255),w,b
 10909  001306  6EDA               	movwf	fsr2h,c
 10910  001308  C250  FFDF         	movff	_fprintf$2176,indf2
 10911  00130C                     l1212:
 10912                           
 10913                           ; BSR set to: 2
 10914                           
 10915                           ; BSR set to: 2
 10916  00130C  515E               	movf	fprintf@i& (0+255),w,b
 10917  00130E  115F               	iorwf	(fprintf@i+1)& (0+255),w,b
 10918  001310  B4D8               	btfsc	status,2,c
 10919  001312  D00D               	goto	u16890
 10920                           
 10921                           ; BSR set to: 2
 10922  001314  515E               	movf	fprintf@i& (0+255),w,b
 10923  001316  5D52               	subwf	fprintf@w& (0+255),w,b
 10924  001318  5153               	movf	(fprintf@w+1)& (0+255),w,b
 10925  00131A  0A80               	xorlw	128
 10926  00131C  0101               	movlb	1	; () banked
 10927  00131E  6FDD               	movwf	??_fprintf& (0+255),b
 10928  001320  0102               	movlb	2	; () banked
 10929  001322  515F               	movf	(fprintf@i+1)& (0+255),w,b
 10930  001324  0A80               	xorlw	128
 10931  001326  0101               	movlb	1	; () banked
 10932  001328  59DD               	subwfb	??_fprintf& (0+255),w,b
 10933  00132A  A0D8               	btfss	status,0,c
 10934  00132C  D7D9               	goto	l1213
 10935  00132E                     u16890:
 10936                           
 10937                           ;tff.c: 1887: cc = fputs(&s[i], fil);
 10938                           
 10939                           ; BSR set to: 1
 10940                           
 10941                           ; BSR set to: 1
 10942  00132E  0E3E               	movlw	low fprintf@s
 10943  001330  0102               	movlb	2	; () banked
 10944  001332  255E               	addwf	fprintf@i& (0+255),w,b
 10945  001334  0101               	movlb	1	; () banked
 10946  001336  6FCD               	movwf	fputs@str& (0+255),b
 10947  001338  0E02               	movlw	high fprintf@s
 10948  00133A  0102               	movlb	2	; () banked
 10949  00133C  215F               	addwfc	(fprintf@i+1)& (0+255),w,b
 10950  00133E  0101               	movlb	1	; () banked
 10951  001340  6FCE               	movwf	(fputs@str+1)& (0+255),b
 10952  001342  C1D1  F1CF         	movff	fprintf@fil,fputs@fil
 10953  001346  C1D2  F1D0         	movff	fprintf@fil+1,fputs@fil+1
 10954  00134A  EC5F  F02A         	call	_fputs	;wreg free
 10955  00134E  C1CD  F25C         	movff	?_fputs,fprintf@cc
 10956  001352  C1CE  F25D         	movff	?_fputs+1,fprintf@cc+1
 10957  001356                     l1183:
 10958  001356  0102               	movlb	2	; () banked
 10959  001358  515C               	movf	fprintf@cc& (0+255),w,b
 10960  00135A  274E               	addwf	fprintf@res& (0+255),f,b
 10961  00135C  515D               	movf	(fprintf@cc+1)& (0+255),w,b
 10962  00135E  234F               	addwfc	(fprintf@res+1)& (0+255),f,b
 10963                           
 10964                           ; BSR set to: 2
 10965  001360  295C               	incf	fprintf@cc& (0+255),w,b
 10966  001362  E101               	bnz	u16901
 10967  001364  D621               	goto	L5
 10968  001366                     u16901:
 10969  001366  D623               	goto	l1178
 10970  001368                     __end_of_fprintf:
 10971                           	opt stack 0
 10972                           tosu	equ	0xFFF
 10973                           tosh	equ	0xFFE
 10974                           tosl	equ	0xFFD
 10975                           pclath	equ	0xFFA
 10976                           tblptru	equ	0xFF8
 10977                           tblptrh	equ	0xFF7
 10978                           tblptrl	equ	0xFF6
 10979                           tablat	equ	0xFF5
 10980                           prodh	equ	0xFF4
 10981                           prodl	equ	0xFF3
 10982                           intcon	equ	0xFF2
 10983                           intcon2	equ	0xFF1
 10984                           intcon3	equ	0xFF0
 10985                           indf0	equ	0xFEF
 10986                           postinc0	equ	0xFEE
 10987                           fsr0h	equ	0xFEA
 10988                           fsr0l	equ	0xFE9
 10989                           wreg	equ	0xFE8
 10990                           indf1	equ	0xFE7
 10991                           postinc1	equ	0xFE6
 10992                           postdec1	equ	0xFE5
 10993                           plusw1	equ	0xFE3
 10994                           fsr1h	equ	0xFE2
 10995                           fsr1l	equ	0xFE1
 10996                           indf2	equ	0xFDF
 10997                           postinc2	equ	0xFDE
 10998                           postdec2	equ	0xFDD
 10999                           plusw2	equ	0xFDB
 11000                           fsr2h	equ	0xFDA
 11001                           fsr2l	equ	0xFD9
 11002                           status	equ	0xFD8
 11003                           
 11004 ;; *************** function _fputs *****************
 11005 ;; Defined at:
 11006 ;;		line 1796 in file "bibliotecas/tff.c"
 11007 ;; Parameters:    Size  Location     Type
 11008 ;;  str             2    0[BANK1 ] PTR const unsigned char 
 11009 ;;		 -> fprintf@s(16), string_dado(62), 
 11010 ;;  fil             2    2[BANK1 ] PTR struct _FIL
 11011 ;;		 -> fil(28), 
 11012 ;; Auto vars:     Size  Location     Type
 11013 ;;  n               2  141[BANK0 ] int 
 11014 ;; Return value:  Size  Location     Type
 11015 ;;                  2    0[BANK1 ] int 
 11016 ;; Registers used:
 11017 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11018 ;; Tracked objects:
 11019 ;;		On entry : 0/0
 11020 ;;		On exit  : 0/0
 11021 ;;		Unchanged: 0/0
 11022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11023 ;;      Params:         0       0       4       0       0       0       0       0       0
 11024 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11025 ;;      Temps:          0       1       0       0       0       0       0       0       0
 11026 ;;      Totals:         0       3       4       0       0       0       0       0       0
 11027 ;;Total ram usage:        7 bytes
 11028 ;; Hardware stack levels used:    1
 11029 ;; Hardware stack levels required when called:   13
 11030 ;; This function calls:
 11031 ;;		_fputc
 11032 ;; This function is called by:
 11033 ;;		_fprintf
 11034 ;; This function uses a non-reentrant model
 11035 ;;
 11036                           
 11037                           	psect	text49
 11038  0054BE                     __ptext49:
 11039                           	opt stack 0
 11040  0054BE                     _fputs:
 11041                           	opt stack 12
 11042                           
 11043                           ;tff.c: 1801: int n;
 11044                           ;tff.c: 1804: for (n = 0; *str; str++, n++) {
 11045                           
 11046                           ; BSR set to: 2
 11047                           ;incstack = 0
 11048  0054BE  0E00               	movlw	0
 11049  0054C0  0100               	movlb	0	; () banked
 11050  0054C2  6FEE               	movwf	(fputs@n+1)& (0+255),b
 11051  0054C4  0E00               	movlw	0
 11052  0054C6  6FED               	movwf	fputs@n& (0+255),b
 11053  0054C8  D01F               	goto	l1171
 11054  0054CA                     
 11055                           ; BSR set to: 0
 11056                           ;tff.c: 1805: if (fputc(*str, fil) == -1) return -1;
 11057                           
 11058                           ; BSR set to: 0
 11059  0054CA  C1CD  FFD9         	movff	fputs@str,fsr2l
 11060  0054CE  C1CE  FFDA         	movff	fputs@str+1,fsr2h
 11061  0054D2  50DF               	movf	indf2,w,c
 11062  0054D4  6FEC               	movwf	??_fputs& (0+255),b
 11063  0054D6  51EC               	movf	??_fputs& (0+255),w,b
 11064  0054D8  6FE5               	movwf	fputc@chr& (0+255),b
 11065  0054DA  6BE6               	clrf	(fputc@chr+1)& (0+255),b
 11066  0054DC  C1CF  F0E7         	movff	fputs@fil,fputc@fil
 11067  0054E0  C1D0  F0E8         	movff	fputs@fil+1,fputc@fil+1
 11068  0054E4  ECE9  F02A         	call	_fputc	;wreg free
 11069  0054E8  0100               	movlb	0	; () banked
 11070  0054EA  29E5               	incf	?_fputc& (0+255),w,b
 11071  0054EC  E107               	bnz	l12346
 11072  0054EE  29E6               	incf	(?_fputc+1)& (0+255),w,b
 11073  0054F0  A4D8               	btfss	status,2,c
 11074  0054F2  D004               	goto	l1173
 11075                           
 11076                           ; BSR set to: 0
 11077  0054F4  0101               	movlb	1	; () banked
 11078  0054F6  69CD               	setf	?_fputs& (0+255),b
 11079  0054F8  69CE               	setf	(?_fputs+1)& (0+255),b
 11080  0054FA  0012               	return	
 11081  0054FC                     l1173:
 11082  0054FC                     l12346:
 11083  0054FC  0101               	movlb	1	; () banked
 11084  0054FE  4BCD               	infsnz	fputs@str& (0+255),f,b
 11085  005500  2BCE               	incf	(fputs@str+1)& (0+255),f,b
 11086  005502  0100               	movlb	0	; () banked
 11087  005504  4BED               	infsnz	fputs@n& (0+255),f,b
 11088  005506  2BEE               	incf	(fputs@n+1)& (0+255),f,b
 11089  005508                     l1171:
 11090                           
 11091                           ; BSR set to: 0
 11092                           
 11093                           ; BSR set to: 0
 11094  005508  C1CD  FFD9         	movff	fputs@str,fsr2l
 11095  00550C  C1CE  FFDA         	movff	fputs@str+1,fsr2h
 11096  005510  50DF               	movf	indf2,w,c
 11097  005512  A4D8               	btfss	status,2,c
 11098  005514  D7DA               	goto	l1172
 11099                           
 11100                           ; BSR set to: 0
 11101                           ;tff.c: 1806: }
 11102                           ;tff.c: 1807: return n;
 11103  005516  C0ED  F1CD         	movff	fputs@n,?_fputs
 11104  00551A  C0EE  F1CE         	movff	fputs@n+1,?_fputs+1
 11105  00551E  0012               	return		;funcret
 11106  005520                     __end_of_fputs:
 11107                           	opt stack 0
 11108                           tosu	equ	0xFFF
 11109                           tosh	equ	0xFFE
 11110                           tosl	equ	0xFFD
 11111                           pclath	equ	0xFFA
 11112                           tblptru	equ	0xFF8
 11113                           tblptrh	equ	0xFF7
 11114                           tblptrl	equ	0xFF6
 11115                           tablat	equ	0xFF5
 11116                           prodh	equ	0xFF4
 11117                           prodl	equ	0xFF3
 11118                           intcon	equ	0xFF2
 11119                           intcon2	equ	0xFF1
 11120                           intcon3	equ	0xFF0
 11121                           indf0	equ	0xFEF
 11122                           postinc0	equ	0xFEE
 11123                           fsr0h	equ	0xFEA
 11124                           fsr0l	equ	0xFE9
 11125                           wreg	equ	0xFE8
 11126                           indf1	equ	0xFE7
 11127                           postinc1	equ	0xFE6
 11128                           postdec1	equ	0xFE5
 11129                           plusw1	equ	0xFE3
 11130                           fsr1h	equ	0xFE2
 11131                           fsr1l	equ	0xFE1
 11132                           indf2	equ	0xFDF
 11133                           postinc2	equ	0xFDE
 11134                           postdec2	equ	0xFDD
 11135                           plusw2	equ	0xFDB
 11136                           fsr2h	equ	0xFDA
 11137                           fsr2l	equ	0xFD9
 11138                           status	equ	0xFD8
 11139                           
 11140 ;; *************** function _fputc *****************
 11141 ;; Defined at:
 11142 ;;		line 1769 in file "bibliotecas/tff.c"
 11143 ;; Parameters:    Size  Location     Type
 11144 ;;  chr             2  133[BANK0 ] int 
 11145 ;;  fil             2  135[BANK0 ] PTR struct _FIL
 11146 ;;		 -> fil(28), 
 11147 ;; Auto vars:     Size  Location     Type
 11148 ;;  bw              2  138[BANK0 ] unsigned int 
 11149 ;;  c               1  137[BANK0 ] unsigned char 
 11150 ;; Return value:  Size  Location     Type
 11151 ;;                  2  133[BANK0 ] int 
 11152 ;; Registers used:
 11153 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11154 ;; Tracked objects:
 11155 ;;		On entry : 0/0
 11156 ;;		On exit  : 0/0
 11157 ;;		Unchanged: 0/0
 11158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11159 ;;      Params:         0       4       0       0       0       0       0       0       0
 11160 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11161 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11162 ;;      Totals:         0       7       0       0       0       0       0       0       0
 11163 ;;Total ram usage:        7 bytes
 11164 ;; Hardware stack levels used:    1
 11165 ;; Hardware stack levels required when called:   12
 11166 ;; This function calls:
 11167 ;;		_f_write
 11168 ;; This function is called by:
 11169 ;;		_fputs
 11170 ;;		_fprintf
 11171 ;; This function uses a non-reentrant model
 11172 ;;
 11173                           
 11174                           	psect	text50
 11175  0055D2                     __ptext50:
 11176                           	opt stack 0
 11177  0055D2                     _fputc:
 11178                           	opt stack 12
 11179                           
 11180                           ;tff.c: 1774: UINT bw;
 11181                           ;tff.c: 1775: char c;
 11182                           ;tff.c: 1781: if (!fil) {
 11183                           
 11184                           ;incstack = 0
 11185  0055D2  0100               	movlb	0	; () banked
 11186  0055D4  51E7               	movf	fputc@fil& (0+255),w,b
 11187  0055D6  11E8               	iorwf	(fputc@fil+1)& (0+255),w,b
 11188  0055D8  A4D8               	btfss	status,2,c
 11189  0055DA  D005               	goto	l1163
 11190                           
 11191                           ; BSR set to: 0
 11192                           ;tff.c: 1783: return chr;
 11193  0055DC  C0E5  F0E5         	movff	fputc@chr,?_fputc
 11194  0055E0  C0E6  F0E6         	movff	fputc@chr+1,?_fputc+1
 11195  0055E4  0012               	return	
 11196  0055E6                     l1163:
 11197                           
 11198                           ; BSR set to: 0
 11199                           ;tff.c: 1784: }
 11200                           ;tff.c: 1785: c = (char)chr;
 11201  0055E6  C0E5  F0E9         	movff	fputc@chr,fputc@c
 11202                           
 11203                           ; BSR set to: 0
 11204                           ;tff.c: 1786: f_write(fil, &c, 1, &bw);
 11205  0055EA  C0E7  F0C4         	movff	fputc@fil,f_write@fp
 11206  0055EE  C0E8  F0C5         	movff	fputc@fil+1,f_write@fp+1
 11207  0055F2  0EE9               	movlw	low fputc@c
 11208  0055F4  6FC6               	movwf	f_write@buff& (0+255),b
 11209  0055F6  0E00               	movlw	high fputc@c
 11210  0055F8  6FC7               	movwf	(f_write@buff+1)& (0+255),b
 11211  0055FA  0E00               	movlw	0
 11212  0055FC  6FC9               	movwf	(f_write@btw+1)& (0+255),b
 11213  0055FE  0E01               	movlw	1
 11214  005600  6FC8               	movwf	f_write@btw& (0+255),b
 11215  005602  0EEA               	movlw	low fputc@bw
 11216  005604  6FCA               	movwf	f_write@bw& (0+255),b
 11217  005606  0E00               	movlw	high fputc@bw
 11218  005608  6FCB               	movwf	(f_write@bw+1)& (0+255),b
 11219  00560A  EC09  F000         	call	_f_write	;wreg free
 11220                           
 11221                           ;tff.c: 1787: return bw ? chr : -1;
 11222  00560E  0100               	movlb	0	; () banked
 11223  005610  51EA               	movf	fputc@bw& (0+255),w,b
 11224  005612  11EB               	iorwf	(fputc@bw+1)& (0+255),w,b
 11225  005614  A4D8               	btfss	status,2,c
 11226  005616  D003               	goto	l1166
 11227                           
 11228                           ; BSR set to: 0
 11229  005618  69E5               	setf	?_fputc& (0+255),b
 11230  00561A  69E6               	setf	(?_fputc+1)& (0+255),b
 11231  00561C  0012               	return	
 11232  00561E                     l1166:
 11233                           
 11234                           ; BSR set to: 0
 11235  00561E  C0E5  F0E5         	movff	fputc@chr,?_fputc
 11236  005622  C0E6  F0E6         	movff	fputc@chr+1,?_fputc+1
 11237  005626  0012               	return	
 11238  005628                     __end_of_fputc:
 11239                           	opt stack 0
 11240                           tosu	equ	0xFFF
 11241                           tosh	equ	0xFFE
 11242                           tosl	equ	0xFFD
 11243                           pclath	equ	0xFFA
 11244                           tblptru	equ	0xFF8
 11245                           tblptrh	equ	0xFF7
 11246                           tblptrl	equ	0xFF6
 11247                           tablat	equ	0xFF5
 11248                           prodh	equ	0xFF4
 11249                           prodl	equ	0xFF3
 11250                           intcon	equ	0xFF2
 11251                           intcon2	equ	0xFF1
 11252                           intcon3	equ	0xFF0
 11253                           indf0	equ	0xFEF
 11254                           postinc0	equ	0xFEE
 11255                           fsr0h	equ	0xFEA
 11256                           fsr0l	equ	0xFE9
 11257                           wreg	equ	0xFE8
 11258                           indf1	equ	0xFE7
 11259                           postinc1	equ	0xFE6
 11260                           postdec1	equ	0xFE5
 11261                           plusw1	equ	0xFE3
 11262                           fsr1h	equ	0xFE2
 11263                           fsr1l	equ	0xFE1
 11264                           indf2	equ	0xFDF
 11265                           postinc2	equ	0xFDE
 11266                           postdec2	equ	0xFDD
 11267                           plusw2	equ	0xFDB
 11268                           fsr2h	equ	0xFDA
 11269                           fsr2l	equ	0xFD9
 11270                           status	equ	0xFD8
 11271                           
 11272 ;; *************** function _f_write *****************
 11273 ;; Defined at:
 11274 ;;		line 999 in file "bibliotecas/tff.c"
 11275 ;; Parameters:    Size  Location     Type
 11276 ;;  fp              2  100[BANK0 ] PTR struct _FIL
 11277 ;;		 -> fil(28), 
 11278 ;;  buff            2  102[BANK0 ] PTR const void 
 11279 ;;		 -> fputc@c(1), 
 11280 ;;  btw             2  104[BANK0 ] unsigned int 
 11281 ;;  bw              2  106[BANK0 ] PTR unsigned int 
 11282 ;;		 -> fputc@bw(2), 
 11283 ;; Auto vars:     Size  Location     Type
 11284 ;;  sect            4  123[BANK0 ] unsigned long 
 11285 ;;  wcnt            2  131[BANK0 ] unsigned int 
 11286 ;;  clust           2  129[BANK0 ] unsigned short 
 11287 ;;  cc              2  127[BANK0 ] unsigned int 
 11288 ;;  wbuff           2  121[BANK0 ] PTR const unsigned char 
 11289 ;;		 -> fputc@c(1), 
 11290 ;;  res             1  120[BANK0 ] enum E155
 11291 ;; Return value:  Size  Location     Type
 11292 ;;                  1    wreg      enum E155
 11293 ;; Registers used:
 11294 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11295 ;; Tracked objects:
 11296 ;;		On entry : 0/0
 11297 ;;		On exit  : 0/0
 11298 ;;		Unchanged: 0/0
 11299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11300 ;;      Params:         0       8       0       0       0       0       0       0       0
 11301 ;;      Locals:         0      13       0       0       0       0       0       0       0
 11302 ;;      Temps:          0      12       0       0       0       0       0       0       0
 11303 ;;      Totals:         0      33       0       0       0       0       0       0       0
 11304 ;;Total ram usage:       33 bytes
 11305 ;; Hardware stack levels used:    1
 11306 ;; Hardware stack levels required when called:   11
 11307 ;; This function calls:
 11308 ;;		_clust2sect
 11309 ;;		_create_chain
 11310 ;;		_disk_write
 11311 ;;		_memcpy
 11312 ;;		_move_window
 11313 ;;		_validate
 11314 ;; This function is called by:
 11315 ;;		_fputc
 11316 ;; This function uses a non-reentrant model
 11317 ;;
 11318                           
 11319                           	psect	text51
 11320  000012                     __ptext51:
 11321                           	opt stack 0
 11322  000012                     _f_write:
 11323                           	opt stack 12
 11324                           
 11325                           ;tff.c: 1006: FRESULT res;
 11326                           ;tff.c: 1007: DWORD sect;
 11327                           ;tff.c: 1008: UINT wcnt, cc;
 11328                           ;tff.c: 1009: CLUST clust;
 11329                           ;tff.c: 1010: const BYTE *wbuff = buff;
 11330                           
 11331                           ; BSR set to: 0
 11332                           ;incstack = 0
 11333  000012  C0C6  F0D9         	movff	f_write@buff,f_write@wbuff
 11334  000016  C0C7  F0DA         	movff	f_write@buff+1,f_write@wbuff+1
 11335                           
 11336                           ;tff.c: 1013: *bw = 0;
 11337  00001A  C0CA  FFD9         	movff	f_write@bw,fsr2l
 11338  00001E  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
 11339  000022  0E00               	movlw	0
 11340  000024  6EDE               	movwf	postinc2,c
 11341  000026  0E00               	movlw	0
 11342  000028  6EDD               	movwf	postdec2,c
 11343                           
 11344                           ;tff.c: 1014: res = validate(fp->fs, fp->id);
 11345  00002A  0100               	movlb	0	; () banked
 11346  00002C  EE20 F004          	lfsr	2,4
 11347  000030  51C4               	movf	f_write@fp& (0+255),w,b
 11348  000032  26D9               	addwf	fsr2l,f,c
 11349  000034  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11350  000036  22DA               	addwfc	fsr2h,f,c
 11351  000038  CFDE F067          	movff	postinc2,validate@fs
 11352  00003C  CFDD F068          	movff	postdec2,validate@fs+1
 11353  000040  C0C4  FFD9         	movff	f_write@fp,fsr2l
 11354  000044  C0C5  FFDA         	movff	f_write@fp+1,fsr2h
 11355  000048  CFDE F069          	movff	postinc2,validate@id
 11356  00004C  CFDD F06A          	movff	postdec2,validate@id+1
 11357  000050  EC08  F02C         	call	_validate	;wreg free
 11358  000054  0100               	movlb	0	; () banked
 11359  000056  6FD8               	movwf	f_write@res& (0+255),b
 11360                           
 11361                           ; BSR set to: 0
 11362                           ;tff.c: 1015: if (res != FR_OK) return res;
 11363  000058  51D8               	movf	f_write@res& (0+255),w,b
 11364  00005A  A4D8               	btfss	status,2,c
 11365  00005C  0012               	return	
 11366                           
 11367                           ; BSR set to: 0
 11368                           ;tff.c: 1016: if (fp->flag & 0x80) return FR_RW_ERROR;
 11369                           
 11370                           ; BSR set to: 0
 11371                           
 11372                           ; BSR set to: 0
 11373                           ;	Return value of _f_write is never used
 11374  00005E  EE20 F002          	lfsr	2,2
 11375  000062  51C4               	movf	f_write@fp& (0+255),w,b
 11376  000064  26D9               	addwf	fsr2l,f,c
 11377  000066  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11378  000068  22DA               	addwfc	fsr2h,f,c
 11379  00006A  BEDF               	btfsc	indf2,7,c
 11380  00006C  0012               	return	
 11381                           
 11382                           ; BSR set to: 0
 11383                           ;tff.c: 1017: if (!(fp->flag & 0x02)) return FR_DENIED;
 11384                           
 11385                           ; BSR set to: 0
 11386                           
 11387                           ; BSR set to: 0
 11388                           ;	Return value of _f_write is never used
 11389  00006E  EE20 F002          	lfsr	2,2
 11390  000072  51C4               	movf	f_write@fp& (0+255),w,b
 11391  000074  26D9               	addwf	fsr2l,f,c
 11392  000076  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11393  000078  22DA               	addwfc	fsr2h,f,c
 11394  00007A  A2DF               	btfss	indf2,1,c
 11395  00007C  0012               	return	
 11396                           
 11397                           ; BSR set to: 0
 11398                           ;tff.c: 1018: if (fp->fsize + btw < fp->fsize) return FR_OK;
 11399                           
 11400                           ; BSR set to: 0
 11401                           
 11402                           ; BSR set to: 0
 11403                           ;	Return value of _f_write is never used
 11404  00007E  EE20 F00A          	lfsr	2,10
 11405  000082  51C4               	movf	f_write@fp& (0+255),w,b
 11406  000084  26D9               	addwf	fsr2l,f,c
 11407  000086  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11408  000088  22DA               	addwfc	fsr2h,f,c
 11409  00008A  EE10 F00A          	lfsr	1,10
 11410  00008E  51C4               	movf	f_write@fp& (0+255),w,b
 11411  000090  26E1               	addwf	fsr1l,f,c
 11412  000092  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11413  000094  22E2               	addwfc	fsr1h,f,c
 11414  000096  CFE6 F0D0          	movff	postinc1,??_f_write+4
 11415  00009A  CFE6 F0D1          	movff	postinc1,??_f_write+5
 11416  00009E  CFE6 F0D2          	movff	postinc1,??_f_write+6
 11417  0000A2  CFE6 F0D3          	movff	postinc1,??_f_write+7
 11418  0000A6  51C8               	movf	f_write@btw& (0+255),w,b
 11419  0000A8  25D0               	addwf	(??_f_write+4)& (0+255),w,b
 11420  0000AA  6FD4               	movwf	(??_f_write+8)& (0+255),b
 11421  0000AC  51C9               	movf	(f_write@btw+1)& (0+255),w,b
 11422  0000AE  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
 11423  0000B0  6FD5               	movwf	(??_f_write+9)& (0+255),b
 11424  0000B2  0E00               	movlw	0
 11425  0000B4  21D2               	addwfc	(??_f_write+6)& (0+255),w,b
 11426  0000B6  6FD6               	movwf	(??_f_write+10)& (0+255),b
 11427  0000B8  0E00               	movlw	0
 11428  0000BA  21D3               	addwfc	(??_f_write+7)& (0+255),w,b
 11429  0000BC  6FD7               	movwf	(??_f_write+11)& (0+255),b
 11430  0000BE  50DE               	movf	postinc2,w,c
 11431  0000C0  5DD4               	subwf	(??_f_write+8)& (0+255),w,b
 11432  0000C2  50DE               	movf	postinc2,w,c
 11433  0000C4  59D5               	subwfb	(??_f_write+9)& (0+255),w,b
 11434  0000C6  50DE               	movf	postinc2,w,c
 11435  0000C8  59D6               	subwfb	(??_f_write+10)& (0+255),w,b
 11436  0000CA  50DE               	movf	postinc2,w,c
 11437  0000CC  59D7               	subwfb	(??_f_write+11)& (0+255),w,b
 11438  0000CE  A0D8               	btfss	status,0,c
 11439  0000D0  0012               	return	
 11440  0000D2  D23B               	goto	l1073
 11441  0000D4                     
 11442                           ; BSR set to: 0
 11443                           ;tff.c: 1022: if ((fp->fptr % 512U) == 0) {
 11444                           
 11445                           ; BSR set to: 0
 11446  0000D4  EE20 F006          	lfsr	2,6
 11447  0000D8  51C4               	movf	f_write@fp& (0+255),w,b
 11448  0000DA  26D9               	addwf	fsr2l,f,c
 11449  0000DC  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11450  0000DE  22DA               	addwfc	fsr2h,f,c
 11451  0000E0  0EFF               	movlw	255
 11452  0000E2  14DE               	andwf	postinc2,w,c
 11453  0000E4  6FCC               	movwf	??_f_write& (0+255),b
 11454  0000E6  0E01               	movlw	1
 11455  0000E8  14DE               	andwf	postinc2,w,c
 11456  0000EA  6FCD               	movwf	(??_f_write+1)& (0+255),b
 11457  0000EC  0E00               	movlw	0
 11458  0000EE  14DE               	andwf	postinc2,w,c
 11459  0000F0  6FCE               	movwf	(??_f_write+2)& (0+255),b
 11460  0000F2  0E00               	movlw	0
 11461  0000F4  14DE               	andwf	postinc2,w,c
 11462  0000F6  6FCF               	movwf	(??_f_write+3)& (0+255),b
 11463  0000F8  51CC               	movf	??_f_write& (0+255),w,b
 11464  0000FA  11CD               	iorwf	(??_f_write+1)& (0+255),w,b
 11465  0000FC  11CE               	iorwf	(??_f_write+2)& (0+255),w,b
 11466  0000FE  11CF               	iorwf	(??_f_write+3)& (0+255),w,b
 11467  000100  A4D8               	btfss	status,2,c
 11468  000102  D166               	goto	l1075
 11469                           
 11470                           ; BSR set to: 0
 11471                           ;tff.c: 1023: if (fp->csect >= fp->fs->csize) {
 11472  000104  EE20 F004          	lfsr	2,4
 11473  000108  51C4               	movf	f_write@fp& (0+255),w,b
 11474  00010A  26D9               	addwf	fsr2l,f,c
 11475  00010C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11476  00010E  22DA               	addwfc	fsr2h,f,c
 11477  000110  EE10 F01D          	lfsr	1,29
 11478  000114  50DE               	movf	postinc2,w,c
 11479  000116  26E1               	addwf	fsr1l,f,c
 11480  000118  50DD               	movf	postdec2,w,c
 11481  00011A  22E2               	addwfc	fsr1h,f,c
 11482  00011C  EE20 F003          	lfsr	2,3
 11483  000120  51C4               	movf	f_write@fp& (0+255),w,b
 11484  000122  26D9               	addwf	fsr2l,f,c
 11485  000124  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11486  000126  22DA               	addwfc	fsr2h,f,c
 11487  000128  50E6               	movf	postinc1,w,c
 11488  00012A  5CDE               	subwf	postinc2,w,c
 11489  00012C  A0D8               	btfss	status,0,c
 11490  00012E  D06D               	goto	l1076
 11491                           
 11492                           ; BSR set to: 0
 11493                           ;tff.c: 1024: if (fp->fptr == 0) {
 11494  000130  EE20 F006          	lfsr	2,6
 11495  000134  51C4               	movf	f_write@fp& (0+255),w,b
 11496  000136  26D9               	addwf	fsr2l,f,c
 11497  000138  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11498  00013A  22DA               	addwfc	fsr2h,f,c
 11499  00013C  50DE               	movf	postinc2,w,c
 11500  00013E  10DE               	iorwf	postinc2,w,c
 11501  000140  10DE               	iorwf	postinc2,w,c
 11502  000142  10DE               	iorwf	postinc2,w,c
 11503  000144  A4D8               	btfss	status,2,c
 11504  000146  D024               	goto	l1077
 11505                           
 11506                           ; BSR set to: 0
 11507                           ;tff.c: 1025: clust = fp->org_clust;
 11508  000148  EE20 F00E          	lfsr	2,14
 11509  00014C  51C4               	movf	f_write@fp& (0+255),w,b
 11510  00014E  26D9               	addwf	fsr2l,f,c
 11511  000150  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11512  000152  22DA               	addwfc	fsr2h,f,c
 11513  000154  CFDE F0E1          	movff	postinc2,f_write@clust
 11514  000158  CFDD F0E2          	movff	postdec2,f_write@clust+1
 11515                           
 11516                           ; BSR set to: 0
 11517                           ;tff.c: 1026: if (clust == 0)
 11518  00015C  51E1               	movf	f_write@clust& (0+255),w,b
 11519  00015E  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
 11520  000160  A4D8               	btfss	status,2,c
 11521  000162  D026               	goto	l1079
 11522                           
 11523                           ; BSR set to: 0
 11524                           ;tff.c: 1027: fp->org_clust = clust = create_chain(0);
 11525  000164  0E00               	movlw	0
 11526  000166  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
 11527  000168  0E00               	movlw	0
 11528  00016A  6FB6               	movwf	create_chain@clust& (0+255),b
 11529  00016C  EC47  F017         	call	_create_chain	;wreg free
 11530  000170  C0B6  F0E1         	movff	?_create_chain,f_write@clust
 11531  000174  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
 11532  000178  0100               	movlb	0	; () banked
 11533  00017A  EE20 F00E          	lfsr	2,14
 11534  00017E  51C4               	movf	f_write@fp& (0+255),w,b
 11535  000180  26D9               	addwf	fsr2l,f,c
 11536  000182  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11537  000184  22DA               	addwfc	fsr2h,f,c
 11538  000186  C0E1  FFDE         	movff	f_write@clust,postinc2
 11539  00018A  C0E2  FFDD         	movff	f_write@clust+1,postdec2
 11540                           
 11541                           ; BSR set to: 0
 11542                           ;tff.c: 1028: } else {
 11543  00018E  D010               	goto	l1079
 11544  000190                     l1077:
 11545                           
 11546                           ; BSR set to: 0
 11547                           ;tff.c: 1029: clust = create_chain(fp->curr_clust);
 11548                           
 11549                           ; BSR set to: 0
 11550  000190  EE20 F010          	lfsr	2,16
 11551  000194  51C4               	movf	f_write@fp& (0+255),w,b
 11552  000196  26D9               	addwf	fsr2l,f,c
 11553  000198  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11554  00019A  22DA               	addwfc	fsr2h,f,c
 11555  00019C  CFDE F0B6          	movff	postinc2,create_chain@clust
 11556  0001A0  CFDD F0B7          	movff	postdec2,create_chain@clust+1
 11557  0001A4  EC47  F017         	call	_create_chain	;wreg free
 11558  0001A8  C0B6  F0E1         	movff	?_create_chain,f_write@clust
 11559  0001AC  C0B7  F0E2         	movff	?_create_chain+1,f_write@clust+1
 11560  0001B0                     l1079:
 11561                           
 11562                           ;tff.c: 1030: }
 11563                           ;tff.c: 1031: if (clust == 0) break;
 11564  0001B0  0100               	movlb	0	; () banked
 11565  0001B2  51E1               	movf	f_write@clust& (0+255),w,b
 11566  0001B4  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
 11567  0001B6  B4D8               	btfsc	status,2,c
 11568  0001B8  D1CC               	goto	u14380
 11569                           
 11570                           ; BSR set to: 0
 11571                           ;tff.c: 1032: if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
 11572                           
 11573                           ; BSR set to: 0
 11574                           
 11575                           ; BSR set to: 0
 11576  0001BA  05E1               	decf	f_write@clust& (0+255),w,b
 11577  0001BC  11E2               	iorwf	(f_write@clust+1)& (0+255),w,b
 11578  0001BE  B4D8               	btfsc	status,2,c
 11579  0001C0  D1FB               	goto	l1085
 11580                           
 11581                           ; BSR set to: 0
 11582  0001C2  EE20 F004          	lfsr	2,4
 11583  0001C6  51C4               	movf	f_write@fp& (0+255),w,b
 11584  0001C8  26D9               	addwf	fsr2l,f,c
 11585  0001CA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11586  0001CC  22DA               	addwfc	fsr2h,f,c
 11587  0001CE  EE10 F016          	lfsr	1,22
 11588  0001D2  50DE               	movf	postinc2,w,c
 11589  0001D4  26E1               	addwf	fsr1l,f,c
 11590  0001D6  50DD               	movf	postdec2,w,c
 11591  0001D8  22E2               	addwfc	fsr1h,f,c
 11592  0001DA  50E6               	movf	postinc1,w,c
 11593  0001DC  5DE1               	subwf	f_write@clust& (0+255),w,b
 11594  0001DE  50E6               	movf	postinc1,w,c
 11595  0001E0  59E2               	subwfb	(f_write@clust+1)& (0+255),w,b
 11596  0001E2  B0D8               	btfsc	status,0,c
 11597  0001E4  D1E9               	goto	l1085
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;tff.c: 1033: fp->curr_clust = clust;
 11601                           
 11602                           ; BSR set to: 0
 11603                           
 11604                           ; BSR set to: 0
 11605  0001E6  EE20 F010          	lfsr	2,16
 11606  0001EA  51C4               	movf	f_write@fp& (0+255),w,b
 11607  0001EC  26D9               	addwf	fsr2l,f,c
 11608  0001EE  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11609  0001F0  22DA               	addwfc	fsr2h,f,c
 11610  0001F2  C0E1  FFDE         	movff	f_write@clust,postinc2
 11611  0001F6  C0E2  FFDD         	movff	f_write@clust+1,postdec2
 11612                           
 11613                           ;tff.c: 1034: fp->csect = 0;
 11614  0001FA  EE20 F003          	lfsr	2,3
 11615  0001FE  51C4               	movf	f_write@fp& (0+255),w,b
 11616  000200  26D9               	addwf	fsr2l,f,c
 11617  000202  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11618  000204  22DA               	addwfc	fsr2h,f,c
 11619  000206  0E00               	movlw	0
 11620  000208  6EDF               	movwf	indf2,c
 11621  00020A                     l1076:
 11622                           
 11623                           ; BSR set to: 0
 11624                           ;tff.c: 1035: }
 11625                           ;tff.c: 1036: sect = clust2sect(fp->curr_clust) + fp->csect;
 11626                           
 11627                           ; BSR set to: 0
 11628  00020A  EE20 F010          	lfsr	2,16
 11629  00020E  51C4               	movf	f_write@fp& (0+255),w,b
 11630  000210  26D9               	addwf	fsr2l,f,c
 11631  000212  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11632  000214  22DA               	addwfc	fsr2h,f,c
 11633  000216  CFDE F06C          	movff	postinc2,clust2sect@clust
 11634  00021A  CFDD F06D          	movff	postdec2,clust2sect@clust+1
 11635  00021E  EC82  F022         	call	_clust2sect	;wreg free
 11636  000222  0100               	movlb	0	; () banked
 11637  000224  EE20 F003          	lfsr	2,3
 11638  000228  51C4               	movf	f_write@fp& (0+255),w,b
 11639  00022A  26D9               	addwf	fsr2l,f,c
 11640  00022C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11641  00022E  22DA               	addwfc	fsr2h,f,c
 11642  000230  50DF               	movf	indf2,w,c
 11643  000232  6FCC               	movwf	??_f_write& (0+255),b
 11644  000234  51CC               	movf	??_f_write& (0+255),w,b
 11645  000236  256C               	addwf	?_clust2sect& (0+255),w,b
 11646  000238  6FDB               	movwf	f_write@sect& (0+255),b
 11647  00023A  0E00               	movlw	0
 11648  00023C  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
 11649  00023E  6FDC               	movwf	(f_write@sect+1)& (0+255),b
 11650  000240  0E00               	movlw	0
 11651  000242  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
 11652  000244  6FDD               	movwf	(f_write@sect+2)& (0+255),b
 11653  000246  0E00               	movlw	0
 11654  000248  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
 11655  00024A  6FDE               	movwf	(f_write@sect+3)& (0+255),b
 11656                           
 11657                           ; BSR set to: 0
 11658                           ;tff.c: 1037: cc = btw / 512U;
 11659  00024C  C0C8  F0CC         	movff	f_write@btw,??_f_write
 11660  000250  C0C9  F0CD         	movff	f_write@btw+1,??_f_write+1
 11661  000254  0E09               	movlw	9
 11662  000256  6FCE               	movwf	(??_f_write+2)& (0+255),b
 11663  000258                     u14295:
 11664  000258  90D8               	bcf	status,0,c
 11665  00025A  33CD               	rrcf	(??_f_write+1)& (0+255),f,b
 11666  00025C  33CC               	rrcf	??_f_write& (0+255),f,b
 11667  00025E  2FCE               	decfsz	(??_f_write+2)& (0+255),f,b
 11668  000260  D7FB               	goto	u14295
 11669  000262  C0CC  F0DF         	movff	??_f_write,f_write@cc
 11670  000266  C0CD  F0E0         	movff	??_f_write+1,f_write@cc+1
 11671                           
 11672                           ; BSR set to: 0
 11673                           ;tff.c: 1038: if (cc) {
 11674  00026A  51DF               	movf	f_write@cc& (0+255),w,b
 11675  00026C  11E0               	iorwf	(f_write@cc+1)& (0+255),w,b
 11676  00026E  B4D8               	btfsc	status,2,c
 11677  000270  D070               	goto	l1086
 11678                           
 11679                           ; BSR set to: 0
 11680                           ;tff.c: 1039: if (fp->csect + cc > fp->fs->csize)
 11681  000272  EE20 F003          	lfsr	2,3
 11682  000276  51C4               	movf	f_write@fp& (0+255),w,b
 11683  000278  26D9               	addwf	fsr2l,f,c
 11684  00027A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11685  00027C  22DA               	addwfc	fsr2h,f,c
 11686  00027E  50DF               	movf	indf2,w,c
 11687  000280  6FCC               	movwf	??_f_write& (0+255),b
 11688  000282  51CC               	movf	??_f_write& (0+255),w,b
 11689  000284  25DF               	addwf	f_write@cc& (0+255),w,b
 11690  000286  6FCD               	movwf	(??_f_write+1)& (0+255),b
 11691  000288  0E00               	movlw	0
 11692  00028A  21E0               	addwfc	(f_write@cc+1)& (0+255),w,b
 11693  00028C  6FCE               	movwf	(??_f_write+2)& (0+255),b
 11694  00028E  EE20 F004          	lfsr	2,4
 11695  000292  51C4               	movf	f_write@fp& (0+255),w,b
 11696  000294  26D9               	addwf	fsr2l,f,c
 11697  000296  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11698  000298  22DA               	addwfc	fsr2h,f,c
 11699  00029A  EE10 F01D          	lfsr	1,29
 11700  00029E  50DE               	movf	postinc2,w,c
 11701  0002A0  26E1               	addwf	fsr1l,f,c
 11702  0002A2  50DD               	movf	postdec2,w,c
 11703  0002A4  22E2               	addwfc	fsr1h,f,c
 11704  0002A6  50E7               	movf	indf1,w,c
 11705  0002A8  6FCF               	movwf	(??_f_write+3)& (0+255),b
 11706  0002AA  6BD0               	clrf	(??_f_write+4)& (0+255),b
 11707  0002AC  51CD               	movf	(??_f_write+1)& (0+255),w,b
 11708  0002AE  5DCF               	subwf	(??_f_write+3)& (0+255),w,b
 11709  0002B0  51CE               	movf	(??_f_write+2)& (0+255),w,b
 11710  0002B2  59D0               	subwfb	(??_f_write+4)& (0+255),w,b
 11711  0002B4  B0D8               	btfsc	status,0,c
 11712  0002B6  D021               	goto	l1087
 11713                           
 11714                           ; BSR set to: 0
 11715                           ;tff.c: 1040: cc = fp->fs->csize - fp->csect;
 11716  0002B8  EE20 F003          	lfsr	2,3
 11717  0002BC  51C4               	movf	f_write@fp& (0+255),w,b
 11718  0002BE  26D9               	addwf	fsr2l,f,c
 11719  0002C0  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11720  0002C2  22DA               	addwfc	fsr2h,f,c
 11721  0002C4  50DF               	movf	indf2,w,c
 11722  0002C6  6FCC               	movwf	??_f_write& (0+255),b
 11723  0002C8  6BCD               	clrf	(??_f_write+1)& (0+255),b
 11724  0002CA  1FCC               	comf	??_f_write& (0+255),f,b
 11725  0002CC  1FCD               	comf	(??_f_write+1)& (0+255),f,b
 11726  0002CE  4BCC               	infsnz	??_f_write& (0+255),f,b
 11727  0002D0  2BCD               	incf	(??_f_write+1)& (0+255),f,b
 11728  0002D2  EE20 F004          	lfsr	2,4
 11729  0002D6  51C4               	movf	f_write@fp& (0+255),w,b
 11730  0002D8  26D9               	addwf	fsr2l,f,c
 11731  0002DA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11732  0002DC  22DA               	addwfc	fsr2h,f,c
 11733  0002DE  EE10 F01D          	lfsr	1,29
 11734  0002E2  50DE               	movf	postinc2,w,c
 11735  0002E4  26E1               	addwf	fsr1l,f,c
 11736  0002E6  50DD               	movf	postdec2,w,c
 11737  0002E8  22E2               	addwfc	fsr1h,f,c
 11738  0002EA  50E7               	movf	indf1,w,c
 11739  0002EC  6FCE               	movwf	(??_f_write+2)& (0+255),b
 11740  0002EE  51CE               	movf	(??_f_write+2)& (0+255),w,b
 11741  0002F0  25CC               	addwf	??_f_write& (0+255),w,b
 11742  0002F2  6FDF               	movwf	f_write@cc& (0+255),b
 11743  0002F4  0E00               	movlw	0
 11744  0002F6  21CD               	addwfc	(??_f_write+1)& (0+255),w,b
 11745  0002F8  6FE0               	movwf	(f_write@cc+1)& (0+255),b
 11746  0002FA                     l1087:
 11747                           
 11748                           ; BSR set to: 0
 11749                           ;tff.c: 1041: if (disk_write(0, wbuff, sect, (BYTE)cc) != RES_OK)
 11750                           
 11751                           ; BSR set to: 0
 11752  0002FA  C0D9  F07F         	movff	f_write@wbuff,disk_write@buff
 11753  0002FE  C0DA  F080         	movff	f_write@wbuff+1,disk_write@buff+1
 11754  000302  C0DB  F081         	movff	f_write@sect,disk_write@sector
 11755  000306  C0DC  F082         	movff	f_write@sect+1,disk_write@sector+1
 11756  00030A  C0DD  F083         	movff	f_write@sect+2,disk_write@sector+2
 11757  00030E  C0DE  F084         	movff	f_write@sect+3,disk_write@sector+3
 11758  000312  C0DF  F085         	movff	f_write@cc,disk_write@count
 11759  000316  0E00               	movlw	0
 11760  000318  EC92  F027         	call	_disk_write
 11761  00031C  0900               	iorlw	0
 11762  00031E  A4D8               	btfss	status,2,c
 11763  000320  D14B               	goto	l1085
 11764                           
 11765                           ;tff.c: 1043: fp->csect += (BYTE)cc;
 11766                           
 11767                           ;tff.c: 1042: goto fw_error;
 11768  000322  0100               	movlb	0	; () banked
 11769  000324  EE20 F003          	lfsr	2,3
 11770  000328  51C4               	movf	f_write@fp& (0+255),w,b
 11771  00032A  26D9               	addwf	fsr2l,f,c
 11772  00032C  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11773  00032E  22DA               	addwfc	fsr2h,f,c
 11774  000330  51DF               	movf	f_write@cc& (0+255),w,b
 11775  000332  26DF               	addwf	indf2,f,c
 11776                           
 11777                           ; BSR set to: 0
 11778                           ;tff.c: 1044: wcnt = 512U * cc;
 11779  000334  C0DF  F0CC         	movff	f_write@cc,??_f_write
 11780  000338  C0E0  F0CD         	movff	f_write@cc+1,??_f_write+1
 11781  00033C  0E09               	movlw	9
 11782  00033E                     u14335:
 11783  00033E  90D8               	bcf	status,0,c
 11784  000340  37CC               	rlcf	??_f_write& (0+255),f,b
 11785  000342  37CD               	rlcf	(??_f_write+1)& (0+255),f,b
 11786  000344  2EE8               	decfsz	wreg,f,c
 11787  000346  D7FB               	goto	u14335
 11788  000348  C0CC  F0E3         	movff	??_f_write,f_write@wcnt
 11789  00034C  C0CD  F0E4         	movff	??_f_write+1,f_write@wcnt+1
 11790                           
 11791                           ;tff.c: 1045: continue;
 11792  000350  D0DF               	goto	l1089
 11793  000352                     l1086:
 11794                           
 11795                           ; BSR set to: 0
 11796                           ;tff.c: 1046: }
 11797                           ;tff.c: 1047: if (fp->fptr >= fp->fsize) {
 11798                           
 11799                           ; BSR set to: 0
 11800  000352  EE20 F00A          	lfsr	2,10
 11801  000356  51C4               	movf	f_write@fp& (0+255),w,b
 11802  000358  26D9               	addwf	fsr2l,f,c
 11803  00035A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11804  00035C  22DA               	addwfc	fsr2h,f,c
 11805  00035E  EE10 F006          	lfsr	1,6
 11806  000362  51C4               	movf	f_write@fp& (0+255),w,b
 11807  000364  26E1               	addwf	fsr1l,f,c
 11808  000366  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11809  000368  22E2               	addwfc	fsr1h,f,c
 11810  00036A  50DE               	movf	postinc2,w,c
 11811  00036C  5CE6               	subwf	postinc1,w,c
 11812  00036E  50DE               	movf	postinc2,w,c
 11813  000370  58E6               	subwfb	postinc1,w,c
 11814  000372  50DE               	movf	postinc2,w,c
 11815  000374  58E6               	subwfb	postinc1,w,c
 11816  000376  50DE               	movf	postinc2,w,c
 11817  000378  58E6               	subwfb	postinc1,w,c
 11818  00037A  A0D8               	btfss	status,0,c
 11819  00037C  D022               	goto	l1090
 11820                           
 11821                           ; BSR set to: 0
 11822                           ;tff.c: 1048: if (!move_window(0)) goto fw_error;
 11823  00037E  0E00               	movlw	0
 11824  000380  6F8B               	movwf	move_window@sector& (0+255),b
 11825  000382  0E00               	movlw	0
 11826  000384  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 11827  000386  0E00               	movlw	0
 11828  000388  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 11829  00038A  0E00               	movlw	0
 11830  00038C  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 11831  00038E  EC27  F018         	call	_move_window	;wreg free
 11832  000392  0900               	iorlw	0
 11833  000394  B4D8               	btfsc	status,2,c
 11834  000396  D110               	goto	l1085
 11835                           
 11836                           ;tff.c: 1049: fp->fs->winsect = sect;
 11837  000398  0100               	movlb	0	; () banked
 11838  00039A  EE20 F004          	lfsr	2,4
 11839  00039E  51C4               	movf	f_write@fp& (0+255),w,b
 11840  0003A0  26D9               	addwf	fsr2l,f,c
 11841  0003A2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11842  0003A4  22DA               	addwfc	fsr2h,f,c
 11843  0003A6  EE10 F004          	lfsr	1,4
 11844  0003AA  50DE               	movf	postinc2,w,c
 11845  0003AC  26E1               	addwf	fsr1l,f,c
 11846  0003AE  50DD               	movf	postdec2,w,c
 11847  0003B0  22E2               	addwfc	fsr1h,f,c
 11848  0003B2  C0DB  FFE6         	movff	f_write@sect,postinc1
 11849  0003B6  C0DC  FFE6         	movff	f_write@sect+1,postinc1
 11850  0003BA  C0DD  FFE6         	movff	f_write@sect+2,postinc1
 11851  0003BE  C0DE  FFE6         	movff	f_write@sect+3,postinc1
 11852  0003C2                     l1090:
 11853                           
 11854                           ; BSR set to: 0
 11855                           ;tff.c: 1050: }
 11856                           ;tff.c: 1051: fp->csect++;
 11857                           
 11858                           ; BSR set to: 0
 11859  0003C2  EE20 F003          	lfsr	2,3
 11860  0003C6  51C4               	movf	f_write@fp& (0+255),w,b
 11861  0003C8  26D9               	addwf	fsr2l,f,c
 11862  0003CA  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11863  0003CC  22DA               	addwfc	fsr2h,f,c
 11864  0003CE  2ADF               	incf	indf2,f,c
 11865  0003D0                     l1075:
 11866                           
 11867                           ; BSR set to: 0
 11868                           ;tff.c: 1052: }
 11869                           ;tff.c: 1053: sect = clust2sect(fp->curr_clust) + fp->csect - 1;
 11870                           
 11871                           ; BSR set to: 0
 11872  0003D0  EE20 F010          	lfsr	2,16
 11873  0003D4  51C4               	movf	f_write@fp& (0+255),w,b
 11874  0003D6  26D9               	addwf	fsr2l,f,c
 11875  0003D8  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11876  0003DA  22DA               	addwfc	fsr2h,f,c
 11877  0003DC  CFDE F06C          	movff	postinc2,clust2sect@clust
 11878  0003E0  CFDD F06D          	movff	postdec2,clust2sect@clust+1
 11879  0003E4  EC82  F022         	call	_clust2sect	;wreg free
 11880  0003E8  0100               	movlb	0	; () banked
 11881  0003EA  EE20 F003          	lfsr	2,3
 11882  0003EE  51C4               	movf	f_write@fp& (0+255),w,b
 11883  0003F0  26D9               	addwf	fsr2l,f,c
 11884  0003F2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11885  0003F4  22DA               	addwfc	fsr2h,f,c
 11886  0003F6  50DF               	movf	indf2,w,c
 11887  0003F8  6FCC               	movwf	??_f_write& (0+255),b
 11888  0003FA  51CC               	movf	??_f_write& (0+255),w,b
 11889  0003FC  256C               	addwf	?_clust2sect& (0+255),w,b
 11890  0003FE  6FCD               	movwf	(??_f_write+1)& (0+255),b
 11891  000400  0E00               	movlw	0
 11892  000402  216D               	addwfc	(?_clust2sect+1)& (0+255),w,b
 11893  000404  6FCE               	movwf	(??_f_write+2)& (0+255),b
 11894  000406  0E00               	movlw	0
 11895  000408  216E               	addwfc	(?_clust2sect+2)& (0+255),w,b
 11896  00040A  6FCF               	movwf	(??_f_write+3)& (0+255),b
 11897  00040C  0E00               	movlw	0
 11898  00040E  216F               	addwfc	(?_clust2sect+3)& (0+255),w,b
 11899  000410  6FD0               	movwf	(??_f_write+4)& (0+255),b
 11900  000412  0EFF               	movlw	255
 11901  000414  25CD               	addwf	(??_f_write+1)& (0+255),w,b
 11902  000416  6FDB               	movwf	f_write@sect& (0+255),b
 11903  000418  0EFF               	movlw	255
 11904  00041A  21CE               	addwfc	(??_f_write+2)& (0+255),w,b
 11905  00041C  6FDC               	movwf	(f_write@sect+1)& (0+255),b
 11906  00041E  0EFF               	movlw	255
 11907  000420  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
 11908  000422  6FDD               	movwf	(f_write@sect+2)& (0+255),b
 11909  000424  0EFF               	movlw	255
 11910  000426  21D0               	addwfc	(??_f_write+4)& (0+255),w,b
 11911  000428  6FDE               	movwf	(f_write@sect+3)& (0+255),b
 11912                           
 11913                           ; BSR set to: 0
 11914                           ;tff.c: 1054: if (!move_window(sect)) goto fw_error;
 11915  00042A  C0DB  F08B         	movff	f_write@sect,move_window@sector
 11916  00042E  C0DC  F08C         	movff	f_write@sect+1,move_window@sector+1
 11917  000432  C0DD  F08D         	movff	f_write@sect+2,move_window@sector+2
 11918  000436  C0DE  F08E         	movff	f_write@sect+3,move_window@sector+3
 11919  00043A  EC27  F018         	call	_move_window	;wreg free
 11920  00043E  0900               	iorlw	0
 11921  000440  B4D8               	btfsc	status,2,c
 11922  000442  D0BA               	goto	l1085
 11923                           
 11924                           ;tff.c: 1055: wcnt = 512U - (fp->fptr % 512U);
 11925  000444  0EFF               	movlw	255
 11926  000446  0100               	movlb	0	; () banked
 11927  000448  6FCC               	movwf	??_f_write& (0+255),b
 11928  00044A  0E01               	movlw	1
 11929  00044C  6FCD               	movwf	(??_f_write+1)& (0+255),b
 11930  00044E  EE20 F006          	lfsr	2,6
 11931  000452  51C4               	movf	f_write@fp& (0+255),w,b
 11932  000454  26D9               	addwf	fsr2l,f,c
 11933  000456  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11934  000458  22DA               	addwfc	fsr2h,f,c
 11935  00045A  CFDE F0CE          	movff	postinc2,??_f_write+2
 11936  00045E  CFDD F0CF          	movff	postdec2,??_f_write+3
 11937  000462  51CC               	movf	??_f_write& (0+255),w,b
 11938  000464  17CE               	andwf	(??_f_write+2)& (0+255),f,b
 11939  000466  51CD               	movf	(??_f_write+1)& (0+255),w,b
 11940  000468  17CF               	andwf	(??_f_write+3)& (0+255),f,b
 11941  00046A  1FCE               	comf	(??_f_write+2)& (0+255),f,b
 11942  00046C  1FCF               	comf	(??_f_write+3)& (0+255),f,b
 11943  00046E  4BCE               	infsnz	(??_f_write+2)& (0+255),f,b
 11944  000470  2BCF               	incf	(??_f_write+3)& (0+255),f,b
 11945  000472  0E00               	movlw	0
 11946  000474  25CE               	addwf	(??_f_write+2)& (0+255),w,b
 11947  000476  6FE3               	movwf	f_write@wcnt& (0+255),b
 11948  000478  0E02               	movlw	2
 11949  00047A  21CF               	addwfc	(??_f_write+3)& (0+255),w,b
 11950  00047C  6FE4               	movwf	(f_write@wcnt+1)& (0+255),b
 11951                           
 11952                           ; BSR set to: 0
 11953                           ;tff.c: 1056: if (wcnt > btw) wcnt = btw;
 11954  00047E  51E3               	movf	f_write@wcnt& (0+255),w,b
 11955  000480  5DC8               	subwf	f_write@btw& (0+255),w,b
 11956  000482  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
 11957  000484  59C9               	subwfb	(f_write@btw+1)& (0+255),w,b
 11958  000486  B0D8               	btfsc	status,0,c
 11959  000488  D004               	goto	l1093
 11960                           
 11961                           ; BSR set to: 0
 11962  00048A  C0C8  F0E3         	movff	f_write@btw,f_write@wcnt
 11963  00048E  C0C9  F0E4         	movff	f_write@btw+1,f_write@wcnt+1
 11964  000492                     l1093:
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;tff.c: 1057: memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
 11968                           
 11969                           ; BSR set to: 0
 11970  000492  0EFF               	movlw	255
 11971  000494  6FCC               	movwf	??_f_write& (0+255),b
 11972  000496  0E01               	movlw	1
 11973  000498  6FCD               	movwf	(??_f_write+1)& (0+255),b
 11974  00049A  EE20 F006          	lfsr	2,6
 11975  00049E  51C4               	movf	f_write@fp& (0+255),w,b
 11976  0004A0  26D9               	addwf	fsr2l,f,c
 11977  0004A2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11978  0004A4  22DA               	addwfc	fsr2h,f,c
 11979  0004A6  CFDE F0CE          	movff	postinc2,??_f_write+2
 11980  0004AA  CFDD F0CF          	movff	postdec2,??_f_write+3
 11981  0004AE  51CC               	movf	??_f_write& (0+255),w,b
 11982  0004B0  17CE               	andwf	(??_f_write+2)& (0+255),f,b
 11983  0004B2  51CD               	movf	(??_f_write+1)& (0+255),w,b
 11984  0004B4  17CF               	andwf	(??_f_write+3)& (0+255),f,b
 11985  0004B6  0E20               	movlw	32
 11986  0004B8  27CE               	addwf	(??_f_write+2)& (0+255),f,b
 11987  0004BA  0E00               	movlw	0
 11988  0004BC  23CF               	addwfc	(??_f_write+3)& (0+255),f,b
 11989  0004BE  EE20 F004          	lfsr	2,4
 11990  0004C2  51C4               	movf	f_write@fp& (0+255),w,b
 11991  0004C4  26D9               	addwf	fsr2l,f,c
 11992  0004C6  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 11993  0004C8  22DA               	addwfc	fsr2h,f,c
 11994  0004CA  CFDE F0D0          	movff	postinc2,??_f_write+4
 11995  0004CE  CFDD F0D1          	movff	postdec2,??_f_write+5
 11996  0004D2  51CE               	movf	(??_f_write+2)& (0+255),w,b
 11997  0004D4  25D0               	addwf	(??_f_write+4)& (0+255),w,b
 11998  0004D6  6F60               	movwf	memcpy@d1& (0+255),b
 11999  0004D8  51CF               	movf	(??_f_write+3)& (0+255),w,b
 12000  0004DA  21D1               	addwfc	(??_f_write+5)& (0+255),w,b
 12001  0004DC  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12002  0004DE  C0D9  F062         	movff	f_write@wbuff,memcpy@s1
 12003  0004E2  C0DA  F063         	movff	f_write@wbuff+1,memcpy@s1+1
 12004  0004E6  C0E3  F064         	movff	f_write@wcnt,memcpy@n
 12005  0004EA  C0E4  F065         	movff	f_write@wcnt+1,memcpy@n+1
 12006  0004EE  EC76  F02C         	call	_memcpy	;wreg free
 12007                           
 12008                           ;tff.c: 1058: fp->fs->winflag = 1;
 12009  0004F2  0100               	movlb	0	; () banked
 12010  0004F4  EE20 F004          	lfsr	2,4
 12011  0004F8  51C4               	movf	f_write@fp& (0+255),w,b
 12012  0004FA  26D9               	addwf	fsr2l,f,c
 12013  0004FC  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 12014  0004FE  22DA               	addwfc	fsr2h,f,c
 12015  000500  EE10 F01F          	lfsr	1,31
 12016  000504  50DE               	movf	postinc2,w,c
 12017  000506  26E1               	addwf	fsr1l,f,c
 12018  000508  50DD               	movf	postdec2,w,c
 12019  00050A  22E2               	addwfc	fsr1h,f,c
 12020  00050C  0E01               	movlw	1
 12021  00050E  6EE7               	movwf	indf1,c
 12022  000510                     l1089:
 12023                           
 12024                           ; BSR set to: 0
 12025                           
 12026                           ; BSR set to: 0
 12027  000510  51E3               	movf	f_write@wcnt& (0+255),w,b
 12028  000512  27D9               	addwf	f_write@wbuff& (0+255),f,b
 12029  000514  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
 12030  000516  23DA               	addwfc	(f_write@wbuff+1)& (0+255),f,b
 12031                           
 12032                           ; BSR set to: 0
 12033  000518  EE20 F006          	lfsr	2,6
 12034  00051C  51C4               	movf	f_write@fp& (0+255),w,b
 12035  00051E  26D9               	addwf	fsr2l,f,c
 12036  000520  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 12037  000522  22DA               	addwfc	fsr2h,f,c
 12038  000524  51E3               	movf	f_write@wcnt& (0+255),w,b
 12039  000526  26DE               	addwf	postinc2,f,c
 12040  000528  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
 12041  00052A  22DE               	addwfc	postinc2,f,c
 12042  00052C  0E00               	movlw	0
 12043  00052E  22DE               	addwfc	postinc2,f,c
 12044  000530  22DE               	addwfc	postinc2,f,c
 12045                           
 12046                           ; BSR set to: 0
 12047  000532  C0CA  FFD9         	movff	f_write@bw,fsr2l
 12048  000536  C0CB  FFDA         	movff	f_write@bw+1,fsr2h
 12049  00053A  51E3               	movf	f_write@wcnt& (0+255),w,b
 12050  00053C  26DE               	addwf	postinc2,f,c
 12051  00053E  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
 12052  000540  22DD               	addwfc	postdec2,f,c
 12053                           
 12054                           ; BSR set to: 0
 12055  000542  51E3               	movf	f_write@wcnt& (0+255),w,b
 12056  000544  5FC8               	subwf	f_write@btw& (0+255),f,b
 12057  000546  51E4               	movf	(f_write@wcnt+1)& (0+255),w,b
 12058  000548  5BC9               	subwfb	(f_write@btw+1)& (0+255),f,b
 12059  00054A                     l1073:
 12060                           
 12061                           ; BSR set to: 0
 12062                           
 12063                           ; BSR set to: 0
 12064  00054A  51C8               	movf	f_write@btw& (0+255),w,b
 12065  00054C  11C9               	iorwf	(f_write@btw+1)& (0+255),w,b
 12066  00054E  A4D8               	btfss	status,2,c
 12067  000550  D5C1               	goto	l1074
 12068  000552                     u14380:
 12069                           
 12070                           ; BSR set to: 0
 12071                           ;tff.c: 1059: }
 12072                           ;tff.c: 1061: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
 12073                           
 12074                           ; BSR set to: 0
 12075  000552  EE20 F006          	lfsr	2,6
 12076  000556  51C4               	movf	f_write@fp& (0+255),w,b
 12077  000558  26D9               	addwf	fsr2l,f,c
 12078  00055A  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 12079  00055C  22DA               	addwfc	fsr2h,f,c
 12080  00055E  EE10 F00A          	lfsr	1,10
 12081  000562  51C4               	movf	f_write@fp& (0+255),w,b
 12082  000564  26E1               	addwf	fsr1l,f,c
 12083  000566  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 12084  000568  22E2               	addwfc	fsr1h,f,c
 12085  00056A  50DE               	movf	postinc2,w,c
 12086  00056C  5CE6               	subwf	postinc1,w,c
 12087  00056E  50DE               	movf	postinc2,w,c
 12088  000570  58E6               	subwfb	postinc1,w,c
 12089  000572  50DE               	movf	postinc2,w,c
 12090  000574  58E6               	subwfb	postinc1,w,c
 12091  000576  50DE               	movf	postinc2,w,c
 12092  000578  58E6               	subwfb	postinc1,w,c
 12093  00057A  B0D8               	btfsc	status,0,c
 12094  00057C  D014               	goto	l1094
 12095                           
 12096                           ; BSR set to: 0
 12097  00057E  EE20 F006          	lfsr	2,6
 12098  000582  51C4               	movf	f_write@fp& (0+255),w,b
 12099  000584  26D9               	addwf	fsr2l,f,c
 12100  000586  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 12101  000588  22DA               	addwfc	fsr2h,f,c
 12102  00058A  EE10 F00A          	lfsr	1,10
 12103  00058E  51C4               	movf	f_write@fp& (0+255),w,b
 12104  000590  26E1               	addwf	fsr1l,f,c
 12105  000592  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 12106  000594  22E2               	addwfc	fsr1h,f,c
 12107  000596  CFDE FFE6          	movff	postinc2,postinc1
 12108  00059A  CFDE FFE6          	movff	postinc2,postinc1
 12109  00059E  CFDE FFE6          	movff	postinc2,postinc1
 12110  0005A2  CFDE FFE6          	movff	postinc2,postinc1
 12111  0005A6                     l1094:
 12112                           
 12113                           ; BSR set to: 0
 12114                           ;tff.c: 1062: fp->flag |= 0x20;
 12115                           
 12116                           ; BSR set to: 0
 12117  0005A6  EE20 F002          	lfsr	2,2
 12118  0005AA  51C4               	movf	f_write@fp& (0+255),w,b
 12119  0005AC  26D9               	addwf	fsr2l,f,c
 12120  0005AE  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 12121  0005B0  22DA               	addwfc	fsr2h,f,c
 12122  0005B2  0E00               	movlw	0
 12123  0005B4  8ADB               	bsf	plusw2,5,c
 12124                           
 12125                           ; BSR set to: 0
 12126                           ;tff.c: 1063: return res;
 12127                           ;	Return value of _f_write is never used
 12128  0005B6  0012               	return	
 12129  0005B8                     l1085:
 12130                           
 12131                           ;tff.c: 1066: fp->flag |= 0x80;
 12132                           
 12133                           ; BSR set to: 0
 12134  0005B8  0100               	movlb	0	; () banked
 12135  0005BA  EE20 F002          	lfsr	2,2
 12136  0005BE  51C4               	movf	f_write@fp& (0+255),w,b
 12137  0005C0  26D9               	addwf	fsr2l,f,c
 12138  0005C2  51C5               	movf	(f_write@fp+1)& (0+255),w,b
 12139  0005C4  22DA               	addwfc	fsr2h,f,c
 12140  0005C6  0E00               	movlw	0
 12141  0005C8  8EDB               	bsf	plusw2,7,c
 12142  0005CA  0012               	return	
 12143  0005CC                     __end_of_f_write:
 12144                           	opt stack 0
 12145                           tosu	equ	0xFFF
 12146                           tosh	equ	0xFFE
 12147                           tosl	equ	0xFFD
 12148                           pclath	equ	0xFFA
 12149                           tblptru	equ	0xFF8
 12150                           tblptrh	equ	0xFF7
 12151                           tblptrl	equ	0xFF6
 12152                           tablat	equ	0xFF5
 12153                           prodh	equ	0xFF4
 12154                           prodl	equ	0xFF3
 12155                           intcon	equ	0xFF2
 12156                           intcon2	equ	0xFF1
 12157                           intcon3	equ	0xFF0
 12158                           indf0	equ	0xFEF
 12159                           postinc0	equ	0xFEE
 12160                           fsr0h	equ	0xFEA
 12161                           fsr0l	equ	0xFE9
 12162                           wreg	equ	0xFE8
 12163                           indf1	equ	0xFE7
 12164                           postinc1	equ	0xFE6
 12165                           postdec1	equ	0xFE5
 12166                           plusw1	equ	0xFE3
 12167                           fsr1h	equ	0xFE2
 12168                           fsr1l	equ	0xFE1
 12169                           indf2	equ	0xFDF
 12170                           postinc2	equ	0xFDE
 12171                           postdec2	equ	0xFDD
 12172                           plusw2	equ	0xFDB
 12173                           fsr2h	equ	0xFDA
 12174                           fsr2l	equ	0xFD9
 12175                           status	equ	0xFD8
 12176                           
 12177 ;; *************** function ___llmod *****************
 12178 ;; Defined at:
 12179 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 12180 ;; Parameters:    Size  Location     Type
 12181 ;;  dividend        4    0[BANK0 ] unsigned long 
 12182 ;;  divisor         4    4[BANK0 ] unsigned long 
 12183 ;; Auto vars:     Size  Location     Type
 12184 ;;  counter         1    8[BANK0 ] unsigned char 
 12185 ;; Return value:  Size  Location     Type
 12186 ;;                  4    0[BANK0 ] unsigned long 
 12187 ;; Registers used:
 12188 ;;		wreg, status,2, status,0
 12189 ;; Tracked objects:
 12190 ;;		On entry : 0/0
 12191 ;;		On exit  : 0/0
 12192 ;;		Unchanged: 0/0
 12193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12194 ;;      Params:         0       8       0       0       0       0       0       0       0
 12195 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12196 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12197 ;;      Totals:         0       9       0       0       0       0       0       0       0
 12198 ;;Total ram usage:        9 bytes
 12199 ;; Hardware stack levels used:    1
 12200 ;; Hardware stack levels required when called:    3
 12201 ;; This function calls:
 12202 ;;		Nothing
 12203 ;; This function is called by:
 12204 ;;		_fprintf
 12205 ;;		_ultoa
 12206 ;; This function uses a non-reentrant model
 12207 ;;
 12208                           
 12209                           	psect	text52
 12210  0053EE                     __ptext52:
 12211                           	opt stack 0
 12212  0053EE                     ___llmod:
 12213                           	opt stack 22
 12214                           
 12215                           ; BSR set to: 0
 12216                           ;incstack = 0
 12217  0053EE  0100               	movlb	0	; () banked
 12218  0053F0  5164               	movf	___llmod@divisor& (0+255),w,b
 12219  0053F2  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 12220  0053F4  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 12221  0053F6  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 12222  0053F8  B4D8               	btfsc	status,2,c
 12223  0053FA  D024               	goto	l2036
 12224                           
 12225                           ; BSR set to: 0
 12226  0053FC  0E01               	movlw	1
 12227  0053FE  6F68               	movwf	___llmod@counter& (0+255),b
 12228  005400  D006               	goto	l2031
 12229  005402                     
 12230                           ; BSR set to: 0
 12231                           
 12232                           ; BSR set to: 0
 12233  005402  90D8               	bcf	status,0,c
 12234  005404  3764               	rlcf	___llmod@divisor& (0+255),f,b
 12235  005406  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 12236  005408  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 12237  00540A  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 12238  00540C  2B68               	incf	___llmod@counter& (0+255),f,b
 12239  00540E                     l2031:
 12240                           
 12241                           ; BSR set to: 0
 12242                           
 12243                           ; BSR set to: 0
 12244  00540E  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
 12245  005410  D7F8               	goto	l2032
 12246  005412                     u16120:
 12247                           
 12248                           ; BSR set to: 0
 12249                           
 12250                           ; BSR set to: 0
 12251                           
 12252                           ; BSR set to: 0
 12253  005412  5164               	movf	___llmod@divisor& (0+255),w,b
 12254  005414  5D60               	subwf	___llmod@dividend& (0+255),w,b
 12255  005416  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 12256  005418  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 12257  00541A  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 12258  00541C  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 12259  00541E  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 12260  005420  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 12261  005422  A0D8               	btfss	status,0,c
 12262  005424  D008               	goto	l2035
 12263                           
 12264                           ; BSR set to: 0
 12265  005426  5164               	movf	___llmod@divisor& (0+255),w,b
 12266  005428  5F60               	subwf	___llmod@dividend& (0+255),f,b
 12267  00542A  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 12268  00542C  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 12269  00542E  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 12270  005430  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 12271  005432  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 12272  005434  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 12273  005436                     l2035:
 12274                           
 12275                           ; BSR set to: 0
 12276                           
 12277                           ; BSR set to: 0
 12278  005436  90D8               	bcf	status,0,c
 12279  005438  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 12280  00543A  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 12281  00543C  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 12282  00543E  3364               	rrcf	___llmod@divisor& (0+255),f,b
 12283                           
 12284                           ; BSR set to: 0
 12285  005440  2F68               	decfsz	___llmod@counter& (0+255),f,b
 12286  005442  D7E7               	goto	u16120
 12287  005444                     l2036:
 12288                           
 12289                           ; BSR set to: 0
 12290                           
 12291                           ; BSR set to: 0
 12292  005444  C060  F060         	movff	___llmod@dividend,?___llmod
 12293  005448  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 12294  00544C  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 12295  005450  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 12296                           
 12297                           ; BSR set to: 0
 12298  005454  0012               	return		;funcret
 12299  005456                     __end_of___llmod:
 12300                           	opt stack 0
 12301                           tosu	equ	0xFFF
 12302                           tosh	equ	0xFFE
 12303                           tosl	equ	0xFFD
 12304                           pclath	equ	0xFFA
 12305                           tblptru	equ	0xFF8
 12306                           tblptrh	equ	0xFF7
 12307                           tblptrl	equ	0xFF6
 12308                           tablat	equ	0xFF5
 12309                           prodh	equ	0xFF4
 12310                           prodl	equ	0xFF3
 12311                           intcon	equ	0xFF2
 12312                           intcon2	equ	0xFF1
 12313                           intcon3	equ	0xFF0
 12314                           indf0	equ	0xFEF
 12315                           postinc0	equ	0xFEE
 12316                           fsr0h	equ	0xFEA
 12317                           fsr0l	equ	0xFE9
 12318                           wreg	equ	0xFE8
 12319                           indf1	equ	0xFE7
 12320                           postinc1	equ	0xFE6
 12321                           postdec1	equ	0xFE5
 12322                           plusw1	equ	0xFE3
 12323                           fsr1h	equ	0xFE2
 12324                           fsr1l	equ	0xFE1
 12325                           indf2	equ	0xFDF
 12326                           postinc2	equ	0xFDE
 12327                           postdec2	equ	0xFDD
 12328                           plusw2	equ	0xFDB
 12329                           fsr2h	equ	0xFDA
 12330                           fsr2l	equ	0xFD9
 12331                           status	equ	0xFD8
 12332                           
 12333 ;; *************** function _f_open *****************
 12334 ;; Defined at:
 12335 ;;		line 833 in file "bibliotecas/tff.c"
 12336 ;; Parameters:    Size  Location     Type
 12337 ;;  fp              2  119[BANK0 ] PTR struct _FIL
 12338 ;;		 -> fil(28), 
 12339 ;;  path            2  121[BANK0 ] PTR const unsigned char 
 12340 ;;		 -> STR_22(13), filename(20), 
 12341 ;;  mode            1  123[BANK0 ] unsigned char 
 12342 ;; Auto vars:     Size  Location     Type
 12343 ;;  dw              4   14[BANK1 ] unsigned long 
 12344 ;;  rs              2   12[BANK1 ] unsigned short 
 12345 ;;  dj             14   21[BANK1 ] struct _DIR_E
 12346 ;;  fn             12    0[BANK1 ] unsigned char [12]
 12347 ;;  dir             2   19[BANK1 ] PTR unsigned char 
 12348 ;;		 -> NULL(0), fs(544), 
 12349 ;;  res             1   18[BANK1 ] enum E155
 12350 ;; Return value:  Size  Location     Type
 12351 ;;                  1    wreg      enum E3979
 12352 ;; Registers used:
 12353 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12354 ;; Tracked objects:
 12355 ;;		On entry : 0/0
 12356 ;;		On exit  : 0/0
 12357 ;;		Unchanged: 0/0
 12358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12359 ;;      Params:         0       5       0       0       0       0       0       0       0
 12360 ;;      Locals:         0       0      35       0       0       0       0       0       0
 12361 ;;      Temps:          0       4       0       0       0       0       0       0       0
 12362 ;;      Totals:         0       9      35       0       0       0       0       0       0
 12363 ;;Total ram usage:       44 bytes
 12364 ;; Hardware stack levels used:    1
 12365 ;; Hardware stack levels required when called:   12
 12366 ;; This function calls:
 12367 ;;		_auto_mount
 12368 ;;		_get_fattime
 12369 ;;		_memcpy
 12370 ;;		_memset
 12371 ;;		_move_window
 12372 ;;		_remove_chain
 12373 ;;		_reserve_direntry
 12374 ;;		_trace_path
 12375 ;; This function is called by:
 12376 ;;		_escrita_sdcard
 12377 ;;		_sdcard_init
 12378 ;;		_leitura_sdcard
 12379 ;; This function uses a non-reentrant model
 12380 ;;
 12381                           
 12382                           	psect	text53
 12383  001368                     __ptext53:
 12384                           	opt stack 0
 12385  001368                     _f_open:
 12386                           	opt stack 14
 12387                           
 12388                           ;tff.c: 839: FRESULT res;
 12389                           ;tff.c: 840: DIR_E dj;
 12390                           ;tff.c: 841: BYTE *dir;
 12391                           ;tff.c: 842: char fn[8+3+1];
 12392                           ;tff.c: 845: fp->fs = (0);
 12393                           
 12394                           ; BSR set to: 0
 12395                           ;incstack = 0
 12396  001368  0100               	movlb	0	; () banked
 12397  00136A  EE20 F004          	lfsr	2,4
 12398  00136E  51D7               	movf	f_open@fp& (0+255),w,b
 12399  001370  26D9               	addwf	fsr2l,f,c
 12400  001372  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 12401  001374  22DA               	addwfc	fsr2h,f,c
 12402  001376  0E00               	movlw	0
 12403  001378  6EDE               	movwf	postinc2,c
 12404  00137A  0E00               	movlw	0
 12405  00137C  6EDD               	movwf	postdec2,c
 12406                           
 12407                           ; BSR set to: 0
 12408                           ;tff.c: 847: mode &= (0x01|0x02|0x08|0x10|0x04);
 12409  00137E  0E1F               	movlw	31
 12410  001380  17DB               	andwf	f_open@mode& (0+255),f,b
 12411                           
 12412                           ; BSR set to: 0
 12413                           ;tff.c: 848: res = auto_mount(&path, (BYTE)(mode & (0x02|0x08|0x10|0x04)));
 12414  001382  0ED9               	movlw	low f_open@path
 12415  001384  6F93               	movwf	auto_mount@path& (0+255),b
 12416  001386  0E00               	movlw	high f_open@path
 12417  001388  6F94               	movwf	(auto_mount@path+1)& (0+255),b
 12418  00138A  51DB               	movf	f_open@mode& (0+255),w,b
 12419  00138C  0B1E               	andlw	30
 12420  00138E  6F95               	movwf	auto_mount@chk_wp& (0+255),b
 12421  001390  ECE6  F002         	call	_auto_mount	;wreg free
 12422  001394  0101               	movlb	1	; () banked
 12423  001396  6FDF               	movwf	f_open@res& (0+255),b
 12424                           
 12425                           ; BSR set to: 1
 12426                           ;tff.c: 853: if (res != FR_OK) return res;
 12427  001398  51DF               	movf	f_open@res& (0+255),w,b
 12428  00139A  B4D8               	btfsc	status,2,c
 12429  00139C  D002               	goto	l1018
 12430                           
 12431                           ; BSR set to: 1
 12432  00139E  51DF               	movf	f_open@res& (0+255),w,b
 12433                           
 12434                           ; BSR set to: 1
 12435  0013A0  0012               	return	
 12436  0013A2                     l1018:
 12437                           
 12438                           ; BSR set to: 1
 12439                           ;tff.c: 854: res = trace_path(&dj, fn, path, &dir);
 12440                           
 12441                           ; BSR set to: 1
 12442  0013A2  0EE2               	movlw	low f_open@dj
 12443  0013A4  0100               	movlb	0	; () banked
 12444  0013A6  6FC0               	movwf	trace_path@dj& (0+255),b
 12445  0013A8  0E01               	movlw	high f_open@dj
 12446  0013AA  6FC1               	movwf	(trace_path@dj+1)& (0+255),b
 12447  0013AC  0ECD               	movlw	low f_open@fn
 12448  0013AE  6FC2               	movwf	trace_path@fn& (0+255),b
 12449  0013B0  0E01               	movlw	high f_open@fn
 12450  0013B2  6FC3               	movwf	(trace_path@fn+1)& (0+255),b
 12451  0013B4  C0D9  F0C4         	movff	f_open@path,trace_path@path
 12452  0013B8  C0DA  F0C5         	movff	f_open@path+1,trace_path@path+1
 12453  0013BC  0EE0               	movlw	low f_open@dir
 12454  0013BE  6FC6               	movwf	trace_path@dir& (0+255),b
 12455  0013C0  0E01               	movlw	high f_open@dir
 12456  0013C2  6FC7               	movwf	(trace_path@dir+1)& (0+255),b
 12457  0013C4  ECE2  F00E         	call	_trace_path	;wreg free
 12458  0013C8  0101               	movlb	1	; () banked
 12459  0013CA  6FDF               	movwf	f_open@res& (0+255),b
 12460                           
 12461                           ; BSR set to: 1
 12462                           ;tff.c: 858: if (mode & (0x08|0x10|0x04)) {
 12463  0013CC  C0DB  F0DC         	movff	f_open@mode,??_f_open
 12464  0013D0  0E1C               	movlw	28
 12465  0013D2  0100               	movlb	0	; () banked
 12466  0013D4  17DC               	andwf	??_f_open& (0+255),f,b
 12467  0013D6  B4D8               	btfsc	status,2,c
 12468  0013D8  D0F6               	goto	l1020
 12469                           
 12470                           ; BSR set to: 0
 12471                           ;tff.c: 859: CLUST rs;
 12472                           ;tff.c: 860: DWORD dw;
 12473                           ;tff.c: 861: if (res != FR_OK) {
 12474  0013DA  0101               	movlb	1	; () banked
 12475  0013DC  51DF               	movf	f_open@res& (0+255),w,b
 12476  0013DE  B4D8               	btfsc	status,2,c
 12477  0013E0  D042               	goto	l1021
 12478                           
 12479                           ; BSR set to: 1
 12480                           ;tff.c: 862: if (res != FR_NO_FILE) return res;
 12481  0013E2  0E02               	movlw	2
 12482  0013E4  19DF               	xorwf	f_open@res& (0+255),w,b
 12483  0013E6  B4D8               	btfsc	status,2,c
 12484  0013E8  D002               	goto	l1022
 12485                           
 12486                           ; BSR set to: 1
 12487  0013EA  51DF               	movf	f_open@res& (0+255),w,b
 12488                           
 12489                           ; BSR set to: 1
 12490  0013EC  0012               	return	
 12491  0013EE                     l1022:
 12492                           
 12493                           ; BSR set to: 1
 12494                           ;tff.c: 863: res = reserve_direntry(&dj, &dir);
 12495                           
 12496                           ; BSR set to: 1
 12497  0013EE  0EE2               	movlw	low f_open@dj
 12498  0013F0  0100               	movlb	0	; () banked
 12499  0013F2  6FC4               	movwf	reserve_direntry@dj& (0+255),b
 12500  0013F4  0E01               	movlw	high f_open@dj
 12501  0013F6  6FC5               	movwf	(reserve_direntry@dj+1)& (0+255),b
 12502  0013F8  0EE0               	movlw	low f_open@dir
 12503  0013FA  6FC6               	movwf	reserve_direntry@dir& (0+255),b
 12504  0013FC  0E01               	movlw	high f_open@dir
 12505  0013FE  6FC7               	movwf	(reserve_direntry@dir+1)& (0+255),b
 12506  001400  EC8B  F011         	call	_reserve_direntry	;wreg free
 12507  001404  0101               	movlb	1	; () banked
 12508  001406  6FDF               	movwf	f_open@res& (0+255),b
 12509                           
 12510                           ; BSR set to: 1
 12511                           ;tff.c: 864: if (res != FR_OK) return res;
 12512  001408  51DF               	movf	f_open@res& (0+255),w,b
 12513  00140A  B4D8               	btfsc	status,2,c
 12514  00140C  D002               	goto	l1023
 12515                           
 12516                           ; BSR set to: 1
 12517  00140E  51DF               	movf	f_open@res& (0+255),w,b
 12518                           
 12519                           ; BSR set to: 1
 12520  001410  0012               	return	
 12521  001412                     l1023:
 12522                           
 12523                           ; BSR set to: 1
 12524                           ;tff.c: 865: memset(dir, 0, 32);
 12525                           
 12526                           ; BSR set to: 1
 12527  001412  C1E0  F060         	movff	f_open@dir,memset@p1
 12528  001416  C1E1  F061         	movff	f_open@dir+1,memset@p1+1
 12529  00141A  0E00               	movlw	0
 12530  00141C  0100               	movlb	0	; () banked
 12531  00141E  6F63               	movwf	(memset@c+1)& (0+255),b
 12532  001420  0E00               	movlw	0
 12533  001422  6F62               	movwf	memset@c& (0+255),b
 12534  001424  0E00               	movlw	0
 12535  001426  6F65               	movwf	(memset@n+1)& (0+255),b
 12536  001428  0E20               	movlw	32
 12537  00142A  6F64               	movwf	memset@n& (0+255),b
 12538  00142C  EC5F  F02E         	call	_memset	;wreg free
 12539                           
 12540                           ;tff.c: 866: memcpy(&dir[0], fn, 8+3);
 12541  001430  C1E0  F060         	movff	f_open@dir,memcpy@d1
 12542  001434  C1E1  F061         	movff	f_open@dir+1,memcpy@d1+1
 12543  001438  0ECD               	movlw	low f_open@fn
 12544  00143A  0100               	movlb	0	; () banked
 12545  00143C  6F62               	movwf	memcpy@s1& (0+255),b
 12546  00143E  0E01               	movlw	high f_open@fn
 12547  001440  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 12548  001442  0E00               	movlw	0
 12549  001444  6F65               	movwf	(memcpy@n+1)& (0+255),b
 12550  001446  0E0B               	movlw	11
 12551  001448  6F64               	movwf	memcpy@n& (0+255),b
 12552  00144A  EC76  F02C         	call	_memcpy	;wreg free
 12553                           
 12554                           ;tff.c: 867: dir[12] = fn[11];
 12555  00144E  0101               	movlb	1	; () banked
 12556  001450  EE20 F00C          	lfsr	2,12
 12557  001454  51E0               	movf	f_open@dir& (0+255),w,b
 12558  001456  26D9               	addwf	fsr2l,f,c
 12559  001458  51E1               	movf	(f_open@dir+1)& (0+255),w,b
 12560  00145A  22DA               	addwfc	fsr2h,f,c
 12561  00145C  C1D8  FFDF         	movff	f_open@fn+11,indf2
 12562                           
 12563                           ; BSR set to: 1
 12564                           ;tff.c: 868: mode |= 0x08;
 12565  001460  0100               	movlb	0	; () banked
 12566  001462  87DB               	bsf	f_open@mode& (0+255),3,b
 12567                           
 12568                           ;tff.c: 869: }
 12569  001464  D080               	goto	l1029
 12570  001466                     l1021:
 12571                           
 12572                           ; BSR set to: 1
 12573                           ;tff.c: 870: else {
 12574                           ;tff.c: 871: if (mode & 0x04)
 12575  001466  0100               	movlb	0	; () banked
 12576  001468  A5DB               	btfss	f_open@mode& (0+255),2,b
 12577  00146A  D002               	goto	l1025
 12578                           
 12579                           ; BSR set to: 0
 12580                           ;tff.c: 872: return FR_EXIST;
 12581  00146C  0E07               	movlw	7
 12582                           
 12583                           ; BSR set to: 0
 12584  00146E  0012               	return	
 12585  001470                     l1025:
 12586                           
 12587                           ; BSR set to: 0
 12588                           ;tff.c: 873: if (!dir || (dir[11] & (0x01|0x10)))
 12589                           
 12590                           ; BSR set to: 0
 12591  001470  0101               	movlb	1	; () banked
 12592  001472  51E0               	movf	f_open@dir& (0+255),w,b
 12593  001474  11E1               	iorwf	(f_open@dir+1)& (0+255),w,b
 12594  001476  B4D8               	btfsc	status,2,c
 12595  001478  D00D               	goto	u16310
 12596                           
 12597                           ; BSR set to: 1
 12598  00147A  EE20 F00B          	lfsr	2,11
 12599  00147E  51E0               	movf	f_open@dir& (0+255),w,b
 12600  001480  26D9               	addwf	fsr2l,f,c
 12601  001482  51E1               	movf	(f_open@dir+1)& (0+255),w,b
 12602  001484  22DA               	addwfc	fsr2h,f,c
 12603  001486  50DF               	movf	indf2,w,c
 12604  001488  0100               	movlb	0	; () banked
 12605  00148A  6FDC               	movwf	??_f_open& (0+255),b
 12606  00148C  0E11               	movlw	17
 12607  00148E  17DC               	andwf	??_f_open& (0+255),f,b
 12608  001490  B4D8               	btfsc	status,2,c
 12609  001492  D002               	goto	l1026
 12610  001494                     u16310:
 12611                           
 12612                           ;tff.c: 874: return FR_DENIED;
 12613                           
 12614                           ; BSR set to: 0
 12615  001494  0E06               	movlw	6
 12616  001496  0012               	return	
 12617  001498                     l1026:
 12618                           
 12619                           ; BSR set to: 0
 12620                           ;tff.c: 875: if (mode & 0x08) {
 12621  001498  A7DB               	btfss	f_open@mode& (0+255),3,b
 12622  00149A  D065               	goto	l1029
 12623                           
 12624                           ; BSR set to: 0
 12625                           ;tff.c: 880: rs = (WORD)(*(WORD*)(BYTE*)(&dir[26]));
 12626  00149C  0101               	movlb	1	; () banked
 12627  00149E  EE20 F01A          	lfsr	2,26
 12628  0014A2  51E0               	movf	f_open@dir& (0+255),w,b
 12629  0014A4  26D9               	addwf	fsr2l,f,c
 12630  0014A6  51E1               	movf	(f_open@dir+1)& (0+255),w,b
 12631  0014A8  22DA               	addwfc	fsr2h,f,c
 12632  0014AA  CFDE F1D9          	movff	postinc2,f_open@rs
 12633  0014AE  CFDD F1DA          	movff	postdec2,f_open@rs+1
 12634                           
 12635                           ;tff.c: 882: *(WORD*)(BYTE*)(&dir[26])=(WORD)(0);
 12636  0014B2  EE20 F01A          	lfsr	2,26
 12637  0014B6  51E0               	movf	f_open@dir& (0+255),w,b
 12638  0014B8  26D9               	addwf	fsr2l,f,c
 12639  0014BA  51E1               	movf	(f_open@dir+1)& (0+255),w,b
 12640  0014BC  22DA               	addwfc	fsr2h,f,c
 12641  0014BE  0E00               	movlw	0
 12642  0014C0  6EDE               	movwf	postinc2,c
 12643  0014C2  0E00               	movlw	0
 12644  0014C4  6EDD               	movwf	postdec2,c
 12645                           
 12646                           ;tff.c: 883: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(0);
 12647  0014C6  EE20 F01C          	lfsr	2,28
 12648  0014CA  51E0               	movf	f_open@dir& (0+255),w,b
 12649  0014CC  26D9               	addwf	fsr2l,f,c
 12650  0014CE  51E1               	movf	(f_open@dir+1)& (0+255),w,b
 12651  0014D0  22DA               	addwfc	fsr2h,f,c
 12652  0014D2  6ADE               	clrf	postinc2,c
 12653  0014D4  6ADE               	clrf	postinc2,c
 12654  0014D6  6ADE               	clrf	postinc2,c
 12655  0014D8  6ADD               	clrf	postdec2,c
 12656                           
 12657                           ;tff.c: 884: dj.fs->winflag = 1;
 12658  0014DA  EE20 F01F          	lfsr	2,31
 12659  0014DE  51E6               	movf	(f_open@dj+4)& (0+255),w,b
 12660  0014E0  26D9               	addwf	fsr2l,f,c
 12661  0014E2  51E7               	movf	(f_open@dj+5)& (0+255),w,b
 12662  0014E4  22DA               	addwfc	fsr2h,f,c
 12663  0014E6  0E01               	movlw	1
 12664  0014E8  6EDF               	movwf	indf2,c
 12665                           
 12666                           ;tff.c: 885: dw = dj.fs->winsect;
 12667  0014EA  EE20 F004          	lfsr	2,4
 12668  0014EE  51E6               	movf	(f_open@dj+4)& (0+255),w,b
 12669  0014F0  26D9               	addwf	fsr2l,f,c
 12670  0014F2  51E7               	movf	(f_open@dj+5)& (0+255),w,b
 12671  0014F4  22DA               	addwfc	fsr2h,f,c
 12672  0014F6  CFDE F1DB          	movff	postinc2,f_open@dw
 12673  0014FA  CFDE F1DC          	movff	postinc2,f_open@dw+1
 12674  0014FE  CFDE F1DD          	movff	postinc2,f_open@dw+2
 12675  001502  CFDE F1DE          	movff	postinc2,f_open@dw+3
 12676                           
 12677                           ; BSR set to: 1
 12678                           ;tff.c: 886: if (!remove_chain(rs) || !move_window(dw))
 12679  001506  C1D9  F0B6         	movff	f_open@rs,remove_chain@clust
 12680  00150A  C1DA  F0B7         	movff	f_open@rs+1,remove_chain@clust+1
 12681  00150E  EC40  F024         	call	_remove_chain	;wreg free
 12682  001512  0900               	iorlw	0
 12683  001514  B4D8               	btfsc	status,2,c
 12684  001516  D00D               	goto	u16340
 12685  001518  C1DB  F08B         	movff	f_open@dw,move_window@sector
 12686  00151C  C1DC  F08C         	movff	f_open@dw+1,move_window@sector+1
 12687  001520  C1DD  F08D         	movff	f_open@dw+2,move_window@sector+2
 12688  001524  C1DE  F08E         	movff	f_open@dw+3,move_window@sector+3
 12689  001528  EC27  F018         	call	_move_window	;wreg free
 12690  00152C  0900               	iorlw	0
 12691  00152E  A4D8               	btfss	status,2,c
 12692  001530  D002               	goto	l1030
 12693  001532                     u16340:
 12694                           
 12695                           ;tff.c: 887: return FR_RW_ERROR;
 12696  001532  0E08               	movlw	8
 12697  001534  0012               	return	
 12698  001536                     l1030:
 12699                           
 12700                           ;tff.c: 888: dj.fs->last_clust = rs - 1;
 12701  001536  0EFF               	movlw	255
 12702  001538  0100               	movlb	0	; () banked
 12703  00153A  6FDC               	movwf	??_f_open& (0+255),b
 12704  00153C  0EFF               	movlw	255
 12705  00153E  6FDD               	movwf	(??_f_open+1)& (0+255),b
 12706  001540  C1D9  F0DE         	movff	f_open@rs,??_f_open+2
 12707  001544  C1DA  F0DF         	movff	f_open@rs+1,??_f_open+3
 12708  001548  51DC               	movf	??_f_open& (0+255),w,b
 12709  00154A  27DE               	addwf	(??_f_open+2)& (0+255),f,b
 12710  00154C  51DD               	movf	(??_f_open+1)& (0+255),w,b
 12711  00154E  23DF               	addwfc	(??_f_open+3)& (0+255),f,b
 12712  001550  0101               	movlb	1	; () banked
 12713  001552  EE20 F018          	lfsr	2,24
 12714  001556  51E6               	movf	(f_open@dj+4)& (0+255),w,b
 12715  001558  26D9               	addwf	fsr2l,f,c
 12716  00155A  51E7               	movf	(f_open@dj+5)& (0+255),w,b
 12717  00155C  22DA               	addwfc	fsr2h,f,c
 12718  00155E  C0DE  FFDE         	movff	??_f_open+2,postinc2
 12719  001562  C0DF  FFDD         	movff	??_f_open+3,postdec2
 12720  001566                     l1029:
 12721                           
 12722                           ;tff.c: 889: }
 12723                           ;tff.c: 890: }
 12724                           ;tff.c: 891: if (mode & 0x08) {
 12725                           
 12726                           ; BSR set to: 1
 12727                           
 12728                           ; BSR set to: 1
 12729  001566  0100               	movlb	0	; () banked
 12730  001568  A7DB               	btfss	f_open@mode& (0+255),3,b
 12731  00156A  D04F               	goto	l1039
 12732                           
 12733                           ; BSR set to: 0
 12734                           ;tff.c: 892: dir[11] = 0;
 12735  00156C  0101               	movlb	1	; () banked
 12736  00156E  EE20 F00B          	lfsr	2,11
 12737  001572  51E0               	movf	f_open@dir& (0+255),w,b
 12738  001574  26D9               	addwf	fsr2l,f,c
 12739  001576  51E1               	movf	(f_open@dir+1)& (0+255),w,b
 12740  001578  22DA               	addwfc	fsr2h,f,c
 12741  00157A  0E00               	movlw	0
 12742  00157C  6EDF               	movwf	indf2,c
 12743                           
 12744                           ; BSR set to: 1
 12745                           ;tff.c: 893: dw = get_fattime();
 12746  00157E  EC56  F01D         	call	_get_fattime	;wreg free
 12747  001582  C06A  F1DB         	movff	?_get_fattime,f_open@dw
 12748  001586  C06B  F1DC         	movff	?_get_fattime+1,f_open@dw+1
 12749  00158A  C06C  F1DD         	movff	?_get_fattime+2,f_open@dw+2
 12750  00158E  C06D  F1DE         	movff	?_get_fattime+3,f_open@dw+3
 12751                           
 12752                           ;tff.c: 894: *(DWORD*)(BYTE*)(&dir[14])=(DWORD)(dw);
 12753  001592  0101               	movlb	1	; () banked
 12754  001594  EE20 F00E          	lfsr	2,14
 12755  001598  51E0               	movf	f_open@dir& (0+255),w,b
 12756  00159A  26D9               	addwf	fsr2l,f,c
 12757  00159C  51E1               	movf	(f_open@dir+1)& (0+255),w,b
 12758  00159E  22DA               	addwfc	fsr2h,f,c
 12759  0015A0  C1DB  FFDE         	movff	f_open@dw,postinc2
 12760  0015A4  C1DC  FFDE         	movff	f_open@dw+1,postinc2
 12761  0015A8  C1DD  FFDE         	movff	f_open@dw+2,postinc2
 12762  0015AC  C1DE  FFDE         	movff	f_open@dw+3,postinc2
 12763                           
 12764                           ; BSR set to: 1
 12765                           ;tff.c: 895: dj.fs->winflag = 1;
 12766  0015B0  EE20 F01F          	lfsr	2,31
 12767  0015B4  51E6               	movf	(f_open@dj+4)& (0+255),w,b
 12768  0015B6  26D9               	addwf	fsr2l,f,c
 12769  0015B8  51E7               	movf	(f_open@dj+5)& (0+255),w,b
 12770  0015BA  22DA               	addwfc	fsr2h,f,c
 12771  0015BC  0E01               	movlw	1
 12772  0015BE  6EDF               	movwf	indf2,c
 12773                           
 12774                           ; BSR set to: 1
 12775                           ;tff.c: 896: mode |= 0x20;
 12776  0015C0  0100               	movlb	0	; () banked
 12777  0015C2  8BDB               	bsf	f_open@mode& (0+255),5,b
 12778                           
 12779                           ; BSR set to: 0
 12780                           ;tff.c: 897: }
 12781                           ;tff.c: 898: }
 12782  0015C4  D022               	goto	l1039
 12783  0015C6                     l1020:
 12784                           
 12785                           ; BSR set to: 0
 12786                           ;tff.c: 900: else {
 12787                           ;tff.c: 902: if (res != FR_OK) return res;
 12788                           
 12789                           ; BSR set to: 0
 12790  0015C6  0101               	movlb	1	; () banked
 12791  0015C8  51DF               	movf	f_open@res& (0+255),w,b
 12792  0015CA  B4D8               	btfsc	status,2,c
 12793  0015CC  D002               	goto	l1035
 12794                           
 12795                           ; BSR set to: 1
 12796  0015CE  51DF               	movf	f_open@res& (0+255),w,b
 12797                           
 12798                           ; BSR set to: 1
 12799  0015D0  0012               	return	
 12800  0015D2                     l1035:
 12801                           
 12802                           ; BSR set to: 1
 12803                           ;tff.c: 903: if (!dir || (dir[11] & 0x10))
 12804                           
 12805                           ; BSR set to: 1
 12806  0015D2  51E0               	movf	f_open@dir& (0+255),w,b
 12807  0015D4  11E1               	iorwf	(f_open@dir+1)& (0+255),w,b
 12808  0015D6  B4D8               	btfsc	status,2,c
 12809  0015D8  D008               	goto	u16380
 12810                           
 12811                           ; BSR set to: 1
 12812  0015DA  EE20 F00B          	lfsr	2,11
 12813  0015DE  51E0               	movf	f_open@dir& (0+255),w,b
 12814  0015E0  26D9               	addwf	fsr2l,f,c
 12815  0015E2  51E1               	movf	(f_open@dir+1)& (0+255),w,b
 12816  0015E4  22DA               	addwfc	fsr2h,f,c
 12817  0015E6  A8DF               	btfss	indf2,4,c
 12818  0015E8  D002               	goto	l1036
 12819  0015EA                     u16380:
 12820                           
 12821                           ; BSR set to: 1
 12822                           ;tff.c: 904: return FR_NO_FILE;
 12823                           
 12824                           ; BSR set to: 1
 12825  0015EA  0E02               	movlw	2
 12826                           
 12827                           ; BSR set to: 1
 12828  0015EC  0012               	return	
 12829  0015EE                     l1036:
 12830                           
 12831                           ; BSR set to: 1
 12832                           ;tff.c: 906: if ((mode & 0x02) && (dir[11] & 0x01))
 12833  0015EE  0100               	movlb	0	; () banked
 12834  0015F0  A3DB               	btfss	f_open@mode& (0+255),1,b
 12835  0015F2  D00B               	goto	l1039
 12836                           
 12837                           ; BSR set to: 0
 12838  0015F4  0101               	movlb	1	; () banked
 12839  0015F6  EE20 F00B          	lfsr	2,11
 12840  0015FA  51E0               	movf	f_open@dir& (0+255),w,b
 12841  0015FC  26D9               	addwf	fsr2l,f,c
 12842  0015FE  51E1               	movf	(f_open@dir+1)& (0+255),w,b
 12843  001600  22DA               	addwfc	fsr2h,f,c
 12844  001602  A0DF               	btfss	indf2,0,c
 12845  001604  D002               	goto	l1039
 12846                           
 12847                           ; BSR set to: 1
 12848                           ;tff.c: 907: return FR_DENIED;
 12849  001606  0E06               	movlw	6
 12850                           
 12851                           ; BSR set to: 1
 12852  001608  0012               	return	
 12853  00160A                     l1039:
 12854                           
 12855                           ;tff.c: 908: }
 12856                           ;tff.c: 909: fp->dir_sect = dj.fs->winsect;
 12857                           
 12858                           ; BSR set to: 1
 12859                           
 12860                           ; BSR set to: 1
 12861  00160A  0101               	movlb	1	; () banked
 12862  00160C  EE20 F004          	lfsr	2,4
 12863  001610  51E6               	movf	(f_open@dj+4)& (0+255),w,b
 12864  001612  26D9               	addwf	fsr2l,f,c
 12865  001614  51E7               	movf	(f_open@dj+5)& (0+255),w,b
 12866  001616  22DA               	addwfc	fsr2h,f,c
 12867  001618  0100               	movlb	0	; () banked
 12868  00161A  EE10 F016          	lfsr	1,22
 12869  00161E  51D7               	movf	f_open@fp& (0+255),w,b
 12870  001620  26E1               	addwf	fsr1l,f,c
 12871  001622  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 12872  001624  22E2               	addwfc	fsr1h,f,c
 12873  001626  CFDE FFE6          	movff	postinc2,postinc1
 12874  00162A  CFDE FFE6          	movff	postinc2,postinc1
 12875  00162E  CFDE FFE6          	movff	postinc2,postinc1
 12876  001632  CFDE FFE6          	movff	postinc2,postinc1
 12877                           
 12878                           ; BSR set to: 0
 12879                           ;tff.c: 910: fp->dir_ptr = dir;
 12880  001636  EE20 F01A          	lfsr	2,26
 12881  00163A  51D7               	movf	f_open@fp& (0+255),w,b
 12882  00163C  26D9               	addwf	fsr2l,f,c
 12883  00163E  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 12884  001640  22DA               	addwfc	fsr2h,f,c
 12885  001642  C1E0  FFDE         	movff	f_open@dir,postinc2
 12886  001646  C1E1  FFDD         	movff	f_open@dir+1,postdec2
 12887                           
 12888                           ; BSR set to: 0
 12889                           ;tff.c: 912: fp->flag = mode;
 12890  00164A  EE20 F002          	lfsr	2,2
 12891  00164E  51D7               	movf	f_open@fp& (0+255),w,b
 12892  001650  26D9               	addwf	fsr2l,f,c
 12893  001652  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 12894  001654  22DA               	addwfc	fsr2h,f,c
 12895  001656  C0DB  FFDF         	movff	f_open@mode,indf2
 12896                           
 12897                           ;tff.c: 913: fp->org_clust =
 12898                           ;tff.c: 917: (WORD)(*(WORD*)(BYTE*)(&dir[26]));
 12899  00165A  0101               	movlb	1	; () banked
 12900  00165C  EE20 F01A          	lfsr	2,26
 12901  001660  51E0               	movf	f_open@dir& (0+255),w,b
 12902  001662  26D9               	addwf	fsr2l,f,c
 12903  001664  51E1               	movf	(f_open@dir+1)& (0+255),w,b
 12904  001666  22DA               	addwfc	fsr2h,f,c
 12905  001668  0100               	movlb	0	; () banked
 12906  00166A  EE10 F00E          	lfsr	1,14
 12907  00166E  51D7               	movf	f_open@fp& (0+255),w,b
 12908  001670  26E1               	addwf	fsr1l,f,c
 12909  001672  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 12910  001674  22E2               	addwfc	fsr1h,f,c
 12911  001676  CFDE FFE6          	movff	postinc2,postinc1
 12912  00167A  CFDD FFE5          	movff	postdec2,postdec1
 12913                           
 12914                           ;tff.c: 918: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(&dir[28]));
 12915  00167E  0101               	movlb	1	; () banked
 12916  001680  EE20 F01C          	lfsr	2,28
 12917  001684  51E0               	movf	f_open@dir& (0+255),w,b
 12918  001686  26D9               	addwf	fsr2l,f,c
 12919  001688  51E1               	movf	(f_open@dir+1)& (0+255),w,b
 12920  00168A  22DA               	addwfc	fsr2h,f,c
 12921  00168C  0100               	movlb	0	; () banked
 12922  00168E  EE10 F00A          	lfsr	1,10
 12923  001692  51D7               	movf	f_open@fp& (0+255),w,b
 12924  001694  26E1               	addwf	fsr1l,f,c
 12925  001696  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 12926  001698  22E2               	addwfc	fsr1h,f,c
 12927  00169A  CFDE FFE6          	movff	postinc2,postinc1
 12928  00169E  CFDE FFE6          	movff	postinc2,postinc1
 12929  0016A2  CFDE FFE6          	movff	postinc2,postinc1
 12930  0016A6  CFDE FFE6          	movff	postinc2,postinc1
 12931                           
 12932                           ; BSR set to: 0
 12933                           ;tff.c: 919: fp->fptr = 0; fp->csect = 255;
 12934  0016AA  EE20 F006          	lfsr	2,6
 12935  0016AE  51D7               	movf	f_open@fp& (0+255),w,b
 12936  0016B0  26D9               	addwf	fsr2l,f,c
 12937  0016B2  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 12938  0016B4  22DA               	addwfc	fsr2h,f,c
 12939  0016B6  6ADE               	clrf	postinc2,c
 12940  0016B8  6ADE               	clrf	postinc2,c
 12941  0016BA  6ADE               	clrf	postinc2,c
 12942  0016BC  6ADD               	clrf	postdec2,c
 12943                           
 12944                           ; BSR set to: 0
 12945  0016BE  EE20 F003          	lfsr	2,3
 12946  0016C2  51D7               	movf	f_open@fp& (0+255),w,b
 12947  0016C4  26D9               	addwf	fsr2l,f,c
 12948  0016C6  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 12949  0016C8  22DA               	addwfc	fsr2h,f,c
 12950  0016CA  0EFF               	movlw	255
 12951  0016CC  6EDF               	movwf	indf2,c
 12952                           
 12953                           ; BSR set to: 0
 12954                           ;tff.c: 920: fp->fs = dj.fs; fp->id = dj.fs->id;
 12955  0016CE  EE20 F004          	lfsr	2,4
 12956  0016D2  51D7               	movf	f_open@fp& (0+255),w,b
 12957  0016D4  26D9               	addwf	fsr2l,f,c
 12958  0016D6  51D8               	movf	(f_open@fp+1)& (0+255),w,b
 12959  0016D8  22DA               	addwfc	fsr2h,f,c
 12960  0016DA  C1E6  FFDE         	movff	f_open@dj+4,postinc2
 12961  0016DE  C1E7  FFDD         	movff	f_open@dj+5,postdec2
 12962                           
 12963                           ; BSR set to: 0
 12964  0016E2  C1E6  FFD9         	movff	f_open@dj+4,fsr2l
 12965  0016E6  C1E7  FFDA         	movff	f_open@dj+5,fsr2h
 12966  0016EA  C0D7  FFE1         	movff	f_open@fp,fsr1l
 12967  0016EE  C0D8  FFE2         	movff	f_open@fp+1,fsr1h
 12968  0016F2  CFDE FFE6          	movff	postinc2,postinc1
 12969  0016F6  CFDD FFE5          	movff	postdec2,postdec1
 12970                           
 12971                           ; BSR set to: 0
 12972                           ;tff.c: 922: return FR_OK;
 12973  0016FA  0E00               	movlw	0
 12974  0016FC  0012               	return	
 12975  0016FE                     __end_of_f_open:
 12976                           	opt stack 0
 12977                           tosu	equ	0xFFF
 12978                           tosh	equ	0xFFE
 12979                           tosl	equ	0xFFD
 12980                           pclath	equ	0xFFA
 12981                           tblptru	equ	0xFF8
 12982                           tblptrh	equ	0xFF7
 12983                           tblptrl	equ	0xFF6
 12984                           tablat	equ	0xFF5
 12985                           prodh	equ	0xFF4
 12986                           prodl	equ	0xFF3
 12987                           intcon	equ	0xFF2
 12988                           intcon2	equ	0xFF1
 12989                           intcon3	equ	0xFF0
 12990                           indf0	equ	0xFEF
 12991                           postinc0	equ	0xFEE
 12992                           fsr0h	equ	0xFEA
 12993                           fsr0l	equ	0xFE9
 12994                           wreg	equ	0xFE8
 12995                           indf1	equ	0xFE7
 12996                           postinc1	equ	0xFE6
 12997                           postdec1	equ	0xFE5
 12998                           plusw1	equ	0xFE3
 12999                           fsr1h	equ	0xFE2
 13000                           fsr1l	equ	0xFE1
 13001                           indf2	equ	0xFDF
 13002                           postinc2	equ	0xFDE
 13003                           postdec2	equ	0xFDD
 13004                           plusw2	equ	0xFDB
 13005                           fsr2h	equ	0xFDA
 13006                           fsr2l	equ	0xFD9
 13007                           status	equ	0xFD8
 13008                           
 13009 ;; *************** function _trace_path *****************
 13010 ;; Defined at:
 13011 ;;		line 502 in file "bibliotecas/tff.c"
 13012 ;; Parameters:    Size  Location     Type
 13013 ;;  dj              2   96[BANK0 ] PTR struct _DIR_E
 13014 ;;		 -> f_open@dj(14), 
 13015 ;;  fn              2   98[BANK0 ] PTR unsigned char 
 13016 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
 13017 ;;  path            2  100[BANK0 ] PTR const unsigned char 
 13018 ;;		 -> STR_22(13), filename(20), 
 13019 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
 13020 ;;		 -> f_opendir@dir(2), f_open@dir(2), 
 13021 ;; Auto vars:     Size  Location     Type
 13022 ;;  dptr            2  117[BANK0 ] PTR unsigned char 
 13023 ;;		 -> fs.win(512), NULL(0), fs(544), 
 13024 ;;  clust           2  114[BANK0 ] unsigned short 
 13025 ;;  fs              2  112[BANK0 ] PTR struct _FATFS
 13026 ;;		 -> NULL(0), fs(544), 
 13027 ;;  ds              1  116[BANK0 ] unsigned char 
 13028 ;; Return value:  Size  Location     Type
 13029 ;;                  1    wreg      enum E155
 13030 ;; Registers used:
 13031 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13032 ;; Tracked objects:
 13033 ;;		On entry : 0/0
 13034 ;;		On exit  : 0/0
 13035 ;;		Unchanged: 0/0
 13036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13037 ;;      Params:         0       8       0       0       0       0       0       0       0
 13038 ;;      Locals:         0      11       0       0       0       0       0       0       0
 13039 ;;      Temps:          0       4       0       0       0       0       0       0       0
 13040 ;;      Totals:         0      23       0       0       0       0       0       0       0
 13041 ;;Total ram usage:       23 bytes
 13042 ;; Hardware stack levels used:    1
 13043 ;; Hardware stack levels required when called:   11
 13044 ;; This function calls:
 13045 ;;		_clust2sect
 13046 ;;		_make_dirfile
 13047 ;;		_memcmp
 13048 ;;		_move_window
 13049 ;;		_next_dir_entry
 13050 ;; This function is called by:
 13051 ;;		_f_open
 13052 ;;		_f_opendir
 13053 ;; This function uses a non-reentrant model
 13054 ;;
 13055                           
 13056                           	psect	text54
 13057  001DC4                     __ptext54:
 13058                           	opt stack 0
 13059  001DC4                     _trace_path:
 13060                           	opt stack 14
 13061                           
 13062                           ;tff.c: 509: CLUST clust;
 13063                           ;tff.c: 510: char ds;
 13064                           ;tff.c: 511: BYTE *dptr = (0);
 13065                           
 13066                           ;incstack = 0
 13067  001DC4  0E00               	movlw	0
 13068  001DC6  0100               	movlb	0	; () banked
 13069  001DC8  6FD5               	movwf	trace_path@dptr& (0+255),b
 13070  001DCA  0E00               	movlw	0
 13071  001DCC  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
 13072                           
 13073                           ;tff.c: 512: FATFS *fs = FatFs;
 13074  001DCE  C0F6  F0D0         	movff	_FatFs,trace_path@fs
 13075  001DD2  C0F7  F0D1         	movff	_FatFs+1,trace_path@fs+1
 13076                           
 13077                           ; BSR set to: 0
 13078                           ;tff.c: 515: dj->fs = fs;
 13079  001DD6  EE20 F004          	lfsr	2,4
 13080  001DDA  51C0               	movf	trace_path@dj& (0+255),w,b
 13081  001DDC  26D9               	addwf	fsr2l,f,c
 13082  001DDE  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 13083  001DE0  22DA               	addwfc	fsr2h,f,c
 13084  001DE2  C0D0  FFDE         	movff	trace_path@fs,postinc2
 13085  001DE6  C0D1  FFDD         	movff	trace_path@fs+1,postdec2
 13086                           
 13087                           ; BSR set to: 0
 13088                           ;tff.c: 516: clust = fs->dirbase;
 13089  001DEA  EE20 F00C          	lfsr	2,12
 13090  001DEE  51D0               	movf	trace_path@fs& (0+255),w,b
 13091  001DF0  26D9               	addwf	fsr2l,f,c
 13092  001DF2  51D1               	movf	(trace_path@fs+1)& (0+255),w,b
 13093  001DF4  22DA               	addwfc	fsr2h,f,c
 13094  001DF6  CFDE F0D2          	movff	postinc2,trace_path@clust
 13095  001DFA  CFDD F0D3          	movff	postdec2,trace_path@clust+1
 13096                           
 13097                           ; BSR set to: 0
 13098                           ;tff.c: 523: {
 13099                           ;tff.c: 524: dj->clust = dj->sclust = 0;
 13100  001DFE  EE20 F006          	lfsr	2,6
 13101  001E02  51C0               	movf	trace_path@dj& (0+255),w,b
 13102  001E04  26D9               	addwf	fsr2l,f,c
 13103  001E06  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 13104  001E08  22DA               	addwfc	fsr2h,f,c
 13105  001E0A  0E00               	movlw	0
 13106  001E0C  6EDE               	movwf	postinc2,c
 13107  001E0E  0E00               	movlw	0
 13108  001E10  6EDD               	movwf	postdec2,c
 13109  001E12  EE10 F008          	lfsr	1,8
 13110  001E16  51C0               	movf	trace_path@dj& (0+255),w,b
 13111  001E18  26E1               	addwf	fsr1l,f,c
 13112  001E1A  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 13113  001E1C  22E2               	addwfc	fsr1h,f,c
 13114  001E1E  CFDE FFE6          	movff	postinc2,postinc1
 13115  001E22  CFDD FFE5          	movff	postdec2,postdec1
 13116                           
 13117                           ; BSR set to: 0
 13118                           ;tff.c: 525: dj->sect = clust;
 13119  001E26  51D2               	movf	trace_path@clust& (0+255),w,b
 13120  001E28  6FC8               	movwf	??_trace_path& (0+255),b
 13121  001E2A  51D3               	movf	(trace_path@clust+1)& (0+255),w,b
 13122  001E2C  6FC9               	movwf	(??_trace_path+1)& (0+255),b
 13123  001E2E  6BCA               	clrf	(??_trace_path+2)& (0+255),b
 13124  001E30  6BCB               	clrf	(??_trace_path+3)& (0+255),b
 13125  001E32  EE20 F00A          	lfsr	2,10
 13126  001E36  51C0               	movf	trace_path@dj& (0+255),w,b
 13127  001E38  26D9               	addwf	fsr2l,f,c
 13128  001E3A  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 13129  001E3C  22DA               	addwfc	fsr2h,f,c
 13130  001E3E  C0C8  FFDE         	movff	??_trace_path,postinc2
 13131  001E42  C0C9  FFDE         	movff	??_trace_path+1,postinc2
 13132  001E46  C0CA  FFDE         	movff	??_trace_path+2,postinc2
 13133  001E4A  C0CB  FFDE         	movff	??_trace_path+3,postinc2
 13134                           
 13135                           ; BSR set to: 0
 13136                           ;tff.c: 526: }
 13137                           ;tff.c: 527: dj->index = 0;
 13138  001E4E  EE20 F002          	lfsr	2,2
 13139  001E52  51C0               	movf	trace_path@dj& (0+255),w,b
 13140  001E54  26D9               	addwf	fsr2l,f,c
 13141  001E56  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 13142  001E58  22DA               	addwfc	fsr2h,f,c
 13143  001E5A  0E00               	movlw	0
 13144  001E5C  6EDE               	movwf	postinc2,c
 13145  001E5E  0E00               	movlw	0
 13146  001E60  6EDD               	movwf	postdec2,c
 13147                           
 13148                           ; BSR set to: 0
 13149                           ;tff.c: 529: if (*path == '\0') {
 13150  001E62  C0C4  FFF6         	movff	trace_path@path,tblptrl
 13151  001E66  C0C5  FFF7         	movff	trace_path@path+1,tblptrh
 13152  001E6A  6AF8               	clrf	tblptru,c
 13153  001E6C  0E07               	movlw	(high __ramtop+-1)
 13154  001E6E  64F7               	cpfsgt	tblptrh,c
 13155  001E70  D003               	bra	u15527
 13156  001E72  0008               	tblrd		*
 13157  001E74  50F5               	movf	tablat,w,c
 13158  001E76  D005               	bra	u15520
 13159  001E78                     u15527:
 13160  001E78  CFF6 FFE9          	movff	tblptrl,fsr0l
 13161  001E7C  CFF7 FFEA          	movff	tblptrh,fsr0h
 13162  001E80  50EF               	movf	indf0,w,c
 13163  001E82                     u15520:
 13164  001E82  0900               	iorlw	0
 13165  001E84  A4D8               	btfss	status,2,c
 13166  001E86  D00A               	goto	l930
 13167                           
 13168                           ;tff.c: 530: *dir = (0); return FR_OK;
 13169  001E88  C0C6  FFD9         	movff	trace_path@dir,fsr2l
 13170  001E8C  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
 13171  001E90  0E00               	movlw	0
 13172  001E92  6EDE               	movwf	postinc2,c
 13173  001E94  0E00               	movlw	0
 13174  001E96  6EDD               	movwf	postdec2,c
 13175  001E98  0E00               	movlw	0
 13176  001E9A  0012               	return	
 13177  001E9C                     l930:
 13178                           
 13179                           ;tff.c: 534: ds = make_dirfile(&path, fn);
 13180                           
 13181                           ;tff.c: 531: }
 13182                           ;tff.c: 533: for (;;) {
 13183  001E9C  0EC4               	movlw	low trace_path@path
 13184  001E9E  0100               	movlb	0	; () banked
 13185  001EA0  6F68               	movwf	make_dirfile@path& (0+255),b
 13186  001EA2  0E00               	movlw	high trace_path@path
 13187  001EA4  6F69               	movwf	(make_dirfile@path+1)& (0+255),b
 13188  001EA6  C0C2  F06A         	movff	trace_path@fn,make_dirfile@dirname
 13189  001EAA  C0C3  F06B         	movff	trace_path@fn+1,make_dirfile@dirname+1
 13190  001EAE  EC8E  F01A         	call	_make_dirfile	;wreg free
 13191  001EB2  0100               	movlb	0	; () banked
 13192  001EB4  6FD4               	movwf	trace_path@ds& (0+255),b
 13193                           
 13194                           ; BSR set to: 0
 13195                           ;tff.c: 535: if (ds == 1) return FR_INVALID_NAME;
 13196  001EB6  05D4               	decf	trace_path@ds& (0+255),w,b
 13197  001EB8  A4D8               	btfss	status,2,c
 13198  001EBA  D002               	goto	l933
 13199                           
 13200                           ; BSR set to: 0
 13201  001EBC  0E04               	movlw	4
 13202                           
 13203                           ; BSR set to: 0
 13204  001EBE  0012               	return	
 13205  001EC0                     l933:
 13206                           
 13207                           ;tff.c: 537: if (!move_window(dj->sect)) return FR_RW_ERROR;
 13208                           
 13209                           ; BSR set to: 0
 13210                           
 13211                           ;tff.c: 536: for (;;) {
 13212                           
 13213                           ; BSR set to: 0
 13214  001EC0  0100               	movlb	0	; () banked
 13215  001EC2  EE20 F00A          	lfsr	2,10
 13216  001EC6  51C0               	movf	trace_path@dj& (0+255),w,b
 13217  001EC8  26D9               	addwf	fsr2l,f,c
 13218  001ECA  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 13219  001ECC  22DA               	addwfc	fsr2h,f,c
 13220  001ECE  CFDE F08B          	movff	postinc2,move_window@sector
 13221  001ED2  CFDE F08C          	movff	postinc2,move_window@sector+1
 13222  001ED6  CFDE F08D          	movff	postinc2,move_window@sector+2
 13223  001EDA  CFDE F08E          	movff	postinc2,move_window@sector+3
 13224  001EDE  EC27  F018         	call	_move_window	;wreg free
 13225  001EE2  0900               	iorlw	0
 13226  001EE4  A4D8               	btfss	status,2,c
 13227  001EE6  D002               	goto	l935
 13228  001EE8  0E08               	movlw	8
 13229  001EEA  0012               	return	
 13230  001EEC                     l935:
 13231                           
 13232                           ;tff.c: 538: dptr = &fs->win[(dj->index & 15) * 32];
 13233  001EEC  0100               	movlb	0	; () banked
 13234  001EEE  EE20 F002          	lfsr	2,2
 13235  001EF2  51C0               	movf	trace_path@dj& (0+255),w,b
 13236  001EF4  26D9               	addwf	fsr2l,f,c
 13237  001EF6  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 13238  001EF8  22DA               	addwfc	fsr2h,f,c
 13239  001EFA  CFDE F0C8          	movff	postinc2,??_trace_path
 13240  001EFE  CFDD F0C9          	movff	postdec2,??_trace_path+1
 13241  001F02  0E0F               	movlw	15
 13242  001F04  17C8               	andwf	??_trace_path& (0+255),f,b
 13243  001F06  0E00               	movlw	0
 13244  001F08  17C9               	andwf	(??_trace_path+1)& (0+255),f,b
 13245  001F0A  0E05               	movlw	5
 13246  001F0C                     u15565:
 13247  001F0C  90D8               	bcf	status,0,c
 13248  001F0E  37C8               	rlcf	??_trace_path& (0+255),f,b
 13249  001F10  37C9               	rlcf	(??_trace_path+1)& (0+255),f,b
 13250  001F12  2EE8               	decfsz	wreg,f,c
 13251  001F14  D7FB               	goto	u15565
 13252  001F16  0E20               	movlw	32
 13253  001F18  27C8               	addwf	??_trace_path& (0+255),f,b
 13254  001F1A  0E00               	movlw	0
 13255  001F1C  23C9               	addwfc	(??_trace_path+1)& (0+255),f,b
 13256  001F1E  51C8               	movf	??_trace_path& (0+255),w,b
 13257  001F20  25D0               	addwf	trace_path@fs& (0+255),w,b
 13258  001F22  6FD5               	movwf	trace_path@dptr& (0+255),b
 13259  001F24  51C9               	movf	(??_trace_path+1)& (0+255),w,b
 13260  001F26  21D1               	addwfc	(trace_path@fs+1)& (0+255),w,b
 13261  001F28  6FD6               	movwf	(trace_path@dptr+1)& (0+255),b
 13262                           
 13263                           ; BSR set to: 0
 13264                           ;tff.c: 539: if (dptr[0] == 0)
 13265  001F2A  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
 13266  001F2E  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
 13267  001F32  50DF               	movf	indf2,w,c
 13268  001F34  A4D8               	btfss	status,2,c
 13269  001F36  D00D               	goto	l936
 13270                           
 13271                           ; BSR set to: 0
 13272                           ;tff.c: 540: return !ds ? FR_NO_FILE : FR_NO_PATH;
 13273  001F38  51D4               	movf	trace_path@ds& (0+255),w,b
 13274  001F3A  B4D8               	btfsc	status,2,c
 13275  001F3C  D004               	goto	l938
 13276                           
 13277                           ; BSR set to: 0
 13278  001F3E  0E00               	movlw	0
 13279  001F40  6FCD               	movwf	(_trace_path$1729+1)& (0+255),b
 13280  001F42  0E03               	movlw	3
 13281  001F44  D003               	goto	L7
 13282  001F46                     l938:
 13283                           
 13284                           ; BSR set to: 0
 13285                           
 13286                           ; BSR set to: 0
 13287  001F46  0E00               	movlw	0
 13288  001F48  6FCD               	movwf	(_trace_path$1729+1)& (0+255),b
 13289  001F4A  0E02               	movlw	2
 13290  001F4C                     L7:
 13291  001F4C  6FCC               	movwf	_trace_path$1729& (0+255),b
 13292                           
 13293                           ; BSR set to: 0
 13294  001F4E  51CC               	movf	_trace_path$1729& (0+255),w,b
 13295                           
 13296                           ; BSR set to: 0
 13297  001F50  0012               	return	
 13298  001F52                     l936:
 13299                           
 13300                           ; BSR set to: 0
 13301                           ;tff.c: 541: if (dptr[0] != 0xE5
 13302                           ;tff.c: 542: && !(dptr[11] & 0x08)
 13303                           ;tff.c: 543: && !memcmp(&dptr[0], fn, 8+3) ) break;
 13304                           
 13305                           ; BSR set to: 0
 13306  001F52  C0D5  FFD9         	movff	trace_path@dptr,fsr2l
 13307  001F56  C0D6  FFDA         	movff	trace_path@dptr+1,fsr2h
 13308  001F5A  0EE5               	movlw	229
 13309  001F5C  18DE               	xorwf	postinc2,w,c
 13310  001F5E  B4D8               	btfsc	status,2,c
 13311  001F60  D01B               	goto	l941
 13312                           
 13313                           ; BSR set to: 0
 13314  001F62  EE20 F00B          	lfsr	2,11
 13315  001F66  51D5               	movf	trace_path@dptr& (0+255),w,b
 13316  001F68  26D9               	addwf	fsr2l,f,c
 13317  001F6A  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
 13318  001F6C  22DA               	addwfc	fsr2h,f,c
 13319  001F6E  B6DF               	btfsc	indf2,3,c
 13320  001F70  D013               	goto	l941
 13321                           
 13322                           ; BSR set to: 0
 13323  001F72  C0D5  F060         	movff	trace_path@dptr,memcmp@s1
 13324  001F76  C0D6  F061         	movff	trace_path@dptr+1,memcmp@s1+1
 13325  001F7A  C0C2  F062         	movff	trace_path@fn,memcmp@s2
 13326  001F7E  C0C3  F063         	movff	trace_path@fn+1,memcmp@s2+1
 13327  001F82  0E00               	movlw	0
 13328  001F84  6F65               	movwf	(memcmp@n+1)& (0+255),b
 13329  001F86  0E0B               	movlw	11
 13330  001F88  6F64               	movwf	memcmp@n& (0+255),b
 13331  001F8A  ECE5  F024         	call	_memcmp	;wreg free
 13332  001F8E  0100               	movlb	0	; () banked
 13333  001F90  5160               	movf	?_memcmp& (0+255),w,b
 13334  001F92  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
 13335  001F94  B4D8               	btfsc	status,2,c
 13336  001F96  D017               	goto	l942
 13337  001F98                     l941:
 13338                           
 13339                           ; BSR set to: 0
 13340                           ;tff.c: 544: if (!next_dir_entry(dj))
 13341                           
 13342                           ; BSR set to: 0
 13343  001F98  C0C0  F0B3         	movff	trace_path@dj,next_dir_entry@dj
 13344  001F9C  C0C1  F0B4         	movff	trace_path@dj+1,next_dir_entry@dj+1
 13345  001FA0  ECCA  F019         	call	_next_dir_entry	;wreg free
 13346  001FA4  0900               	iorlw	0
 13347  001FA6  A4D8               	btfss	status,2,c
 13348  001FA8  D78B               	goto	l933
 13349                           
 13350                           ;tff.c: 545: return !ds ? FR_NO_FILE : FR_NO_PATH;
 13351  001FAA  0100               	movlb	0	; () banked
 13352  001FAC  51D4               	movf	trace_path@ds& (0+255),w,b
 13353  001FAE  B4D8               	btfsc	status,2,c
 13354  001FB0  D004               	goto	l945
 13355                           
 13356                           ; BSR set to: 0
 13357  001FB2  0E00               	movlw	0
 13358  001FB4  6FCF               	movwf	(_trace_path$1731+1)& (0+255),b
 13359  001FB6  0E03               	movlw	3
 13360  001FB8  D003               	goto	L8
 13361  001FBA                     l945:
 13362                           
 13363                           ; BSR set to: 0
 13364                           
 13365                           ; BSR set to: 0
 13366  001FBA  0E00               	movlw	0
 13367  001FBC  6FCF               	movwf	(_trace_path$1731+1)& (0+255),b
 13368  001FBE  0E02               	movlw	2
 13369  001FC0                     L8:
 13370  001FC0  6FCE               	movwf	_trace_path$1731& (0+255),b
 13371                           
 13372                           ; BSR set to: 0
 13373  001FC2  51CE               	movf	_trace_path$1731& (0+255),w,b
 13374                           
 13375                           ; BSR set to: 0
 13376  001FC4  0012               	return	
 13377  001FC6                     l942:
 13378                           
 13379                           ; BSR set to: 0
 13380                           ;tff.c: 547: if (!ds) { *dir = dptr; return FR_OK; }
 13381                           
 13382                           ; BSR set to: 0
 13383  001FC6  51D4               	movf	trace_path@ds& (0+255),w,b
 13384  001FC8  A4D8               	btfss	status,2,c
 13385  001FCA  D00A               	goto	l948
 13386                           
 13387                           ; BSR set to: 0
 13388  001FCC  C0C6  FFD9         	movff	trace_path@dir,fsr2l
 13389  001FD0  C0C7  FFDA         	movff	trace_path@dir+1,fsr2h
 13390  001FD4  C0D5  FFDE         	movff	trace_path@dptr,postinc2
 13391  001FD8  C0D6  FFDD         	movff	trace_path@dptr+1,postdec2
 13392                           
 13393                           ; BSR set to: 0
 13394  001FDC  0E00               	movlw	0
 13395                           
 13396                           ; BSR set to: 0
 13397  001FDE  0012               	return	
 13398  001FE0                     l948:
 13399                           
 13400                           ; BSR set to: 0
 13401                           ;tff.c: 548: if (!(dptr[11] & 0x10)) return FR_NO_PATH;
 13402                           
 13403                           ; BSR set to: 0
 13404  001FE0  EE20 F00B          	lfsr	2,11
 13405  001FE4  51D5               	movf	trace_path@dptr& (0+255),w,b
 13406  001FE6  26D9               	addwf	fsr2l,f,c
 13407  001FE8  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
 13408  001FEA  22DA               	addwfc	fsr2h,f,c
 13409  001FEC  B8DF               	btfsc	indf2,4,c
 13410  001FEE  D002               	goto	l949
 13411                           
 13412                           ; BSR set to: 0
 13413  001FF0  0E03               	movlw	3
 13414                           
 13415                           ; BSR set to: 0
 13416  001FF2  0012               	return	
 13417  001FF4                     l949:
 13418                           
 13419                           ; BSR set to: 0
 13420                           ;tff.c: 549: clust =
 13421                           ;tff.c: 553: (WORD)(*(WORD*)(BYTE*)(&dptr[26]));
 13422                           
 13423                           ; BSR set to: 0
 13424  001FF4  EE20 F01A          	lfsr	2,26
 13425  001FF8  51D5               	movf	trace_path@dptr& (0+255),w,b
 13426  001FFA  26D9               	addwf	fsr2l,f,c
 13427  001FFC  51D6               	movf	(trace_path@dptr+1)& (0+255),w,b
 13428  001FFE  22DA               	addwfc	fsr2h,f,c
 13429  002000  CFDE F0D2          	movff	postinc2,trace_path@clust
 13430  002004  CFDD F0D3          	movff	postdec2,trace_path@clust+1
 13431                           
 13432                           ; BSR set to: 0
 13433                           ;tff.c: 554: dj->clust = dj->sclust = clust;
 13434  002008  EE20 F006          	lfsr	2,6
 13435  00200C  51C0               	movf	trace_path@dj& (0+255),w,b
 13436  00200E  26D9               	addwf	fsr2l,f,c
 13437  002010  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 13438  002012  22DA               	addwfc	fsr2h,f,c
 13439  002014  C0D2  FFDE         	movff	trace_path@clust,postinc2
 13440  002018  C0D3  FFDD         	movff	trace_path@clust+1,postdec2
 13441  00201C  EE10 F008          	lfsr	1,8
 13442  002020  51C0               	movf	trace_path@dj& (0+255),w,b
 13443  002022  26E1               	addwf	fsr1l,f,c
 13444  002024  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 13445  002026  22E2               	addwfc	fsr1h,f,c
 13446  002028  CFDE FFE6          	movff	postinc2,postinc1
 13447  00202C  CFDD FFE5          	movff	postdec2,postdec1
 13448                           
 13449                           ; BSR set to: 0
 13450                           ;tff.c: 555: dj->sect = clust2sect(clust);
 13451  002030  C0D2  F06C         	movff	trace_path@clust,clust2sect@clust
 13452  002034  C0D3  F06D         	movff	trace_path@clust+1,clust2sect@clust+1
 13453  002038  EC82  F022         	call	_clust2sect	;wreg free
 13454  00203C  0100               	movlb	0	; () banked
 13455  00203E  EE20 F00A          	lfsr	2,10
 13456  002042  51C0               	movf	trace_path@dj& (0+255),w,b
 13457  002044  26D9               	addwf	fsr2l,f,c
 13458  002046  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 13459  002048  22DA               	addwfc	fsr2h,f,c
 13460  00204A  C06C  FFDE         	movff	?_clust2sect,postinc2
 13461  00204E  C06D  FFDE         	movff	?_clust2sect+1,postinc2
 13462  002052  C06E  FFDE         	movff	?_clust2sect+2,postinc2
 13463  002056  C06F  FFDE         	movff	?_clust2sect+3,postinc2
 13464                           
 13465                           ; BSR set to: 0
 13466                           ;tff.c: 556: dj->index = 2;
 13467  00205A  EE20 F002          	lfsr	2,2
 13468  00205E  51C0               	movf	trace_path@dj& (0+255),w,b
 13469  002060  26D9               	addwf	fsr2l,f,c
 13470  002062  51C1               	movf	(trace_path@dj+1)& (0+255),w,b
 13471  002064  22DA               	addwfc	fsr2h,f,c
 13472  002066  0E02               	movlw	2
 13473  002068  6EDE               	movwf	postinc2,c
 13474  00206A  0E00               	movlw	0
 13475  00206C  6EDD               	movwf	postdec2,c
 13476                           
 13477                           ;tff.c: 557: }
 13478  00206E  D716               	goto	l930
 13479  002070                     __end_of_trace_path:
 13480                           	opt stack 0
 13481                           tosu	equ	0xFFF
 13482                           tosh	equ	0xFFE
 13483                           tosl	equ	0xFFD
 13484                           pclath	equ	0xFFA
 13485                           tblptru	equ	0xFF8
 13486                           tblptrh	equ	0xFF7
 13487                           tblptrl	equ	0xFF6
 13488                           tablat	equ	0xFF5
 13489                           prodh	equ	0xFF4
 13490                           prodl	equ	0xFF3
 13491                           intcon	equ	0xFF2
 13492                           intcon2	equ	0xFF1
 13493                           intcon3	equ	0xFF0
 13494                           indf0	equ	0xFEF
 13495                           postinc0	equ	0xFEE
 13496                           fsr0h	equ	0xFEA
 13497                           fsr0l	equ	0xFE9
 13498                           wreg	equ	0xFE8
 13499                           indf1	equ	0xFE7
 13500                           postinc1	equ	0xFE6
 13501                           postdec1	equ	0xFE5
 13502                           plusw1	equ	0xFE3
 13503                           fsr1h	equ	0xFE2
 13504                           fsr1l	equ	0xFE1
 13505                           indf2	equ	0xFDF
 13506                           postinc2	equ	0xFDE
 13507                           postdec2	equ	0xFDD
 13508                           plusw2	equ	0xFDB
 13509                           fsr2h	equ	0xFDA
 13510                           fsr2l	equ	0xFD9
 13511                           status	equ	0xFD8
 13512                           
 13513 ;; *************** function _make_dirfile *****************
 13514 ;; Defined at:
 13515 ;;		line 439 in file "bibliotecas/tff.c"
 13516 ;; Parameters:    Size  Location     Type
 13517 ;;  path            2    8[BANK0 ] PTR PTR const unsigned c
 13518 ;;		 -> trace_path@path(2), 
 13519 ;;  dirname         2   10[BANK0 ] PTR unsigned char 
 13520 ;;		 -> f_opendir@fn(12), f_open@fn(12), 
 13521 ;; Auto vars:     Size  Location     Type
 13522 ;;  c               1   20[BANK0 ] unsigned char 
 13523 ;;  n               1   19[BANK0 ] unsigned char 
 13524 ;;  a               1   18[BANK0 ] unsigned char 
 13525 ;;  t               1   17[BANK0 ] unsigned char 
 13526 ;;  b               1   16[BANK0 ] unsigned char 
 13527 ;; Return value:  Size  Location     Type
 13528 ;;                  1    wreg      unsigned char 
 13529 ;; Registers used:
 13530 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13531 ;; Tracked objects:
 13532 ;;		On entry : 0/0
 13533 ;;		On exit  : 0/0
 13534 ;;		Unchanged: 0/0
 13535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13536 ;;      Params:         0       4       0       0       0       0       0       0       0
 13537 ;;      Locals:         0       7       0       0       0       0       0       0       0
 13538 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13539 ;;      Totals:         0      13       0       0       0       0       0       0       0
 13540 ;;Total ram usage:       13 bytes
 13541 ;; Hardware stack levels used:    1
 13542 ;; Hardware stack levels required when called:    4
 13543 ;; This function calls:
 13544 ;;		_memset
 13545 ;; This function is called by:
 13546 ;;		_trace_path
 13547 ;; This function uses a non-reentrant model
 13548 ;;
 13549                           
 13550                           	psect	text55
 13551  00351C                     __ptext55:
 13552                           	opt stack 0
 13553  00351C                     _make_dirfile:
 13554                           	opt stack 20
 13555                           
 13556                           ;tff.c: 444: BYTE n, t, c, a, b;
 13557                           ;tff.c: 447: memset(dirname, ' ', 8+3);
 13558                           
 13559                           ;incstack = 0
 13560  00351C  C06A  F060         	movff	make_dirfile@dirname,memset@p1
 13561  003520  C06B  F061         	movff	make_dirfile@dirname+1,memset@p1+1
 13562  003524  0E00               	movlw	0
 13563  003526  0100               	movlb	0	; () banked
 13564  003528  6F63               	movwf	(memset@c+1)& (0+255),b
 13565  00352A  0E20               	movlw	32
 13566  00352C  6F62               	movwf	memset@c& (0+255),b
 13567  00352E  0E00               	movlw	0
 13568  003530  6F65               	movwf	(memset@n+1)& (0+255),b
 13569  003532  0E0B               	movlw	11
 13570  003534  6F64               	movwf	memset@n& (0+255),b
 13571  003536  EC5F  F02E         	call	_memset	;wreg free
 13572                           
 13573                           ;tff.c: 448: a = 0; b = 0x18;
 13574  00353A  0E00               	movlw	0
 13575  00353C  0100               	movlb	0	; () banked
 13576  00353E  6F72               	movwf	make_dirfile@a& (0+255),b
 13577                           
 13578                           ; BSR set to: 0
 13579  003540  0E18               	movlw	24
 13580  003542  6F70               	movwf	make_dirfile@b& (0+255),b
 13581                           
 13582                           ; BSR set to: 0
 13583                           ;tff.c: 449: n = 0; t = 8;
 13584  003544  0E00               	movlw	0
 13585  003546  6F73               	movwf	make_dirfile@n& (0+255),b
 13586                           
 13587                           ; BSR set to: 0
 13588  003548  0E08               	movlw	8
 13589  00354A  6F71               	movwf	make_dirfile@t& (0+255),b
 13590  00354C                     
 13591                           ; BSR set to: 0
 13592                           ;tff.c: 451: c = *(*path)++;
 13593                           
 13594                           ; BSR set to: 0
 13595  00354C  C068  FFD9         	movff	make_dirfile@path,fsr2l
 13596  003550  C069  FFDA         	movff	make_dirfile@path+1,fsr2h
 13597  003554  CFDF F06C          	movff	indf2,??_make_dirfile
 13598  003558  0E01               	movlw	1
 13599  00355A  26DE               	addwf	postinc2,f,c
 13600  00355C  CFDF F06D          	movff	indf2,??_make_dirfile+1
 13601  003560  0E00               	movlw	0
 13602  003562  22DD               	addwfc	postdec2,f,c
 13603  003564  C06C  FFF6         	movff	??_make_dirfile,tblptrl
 13604  003568  C06D  FFF7         	movff	??_make_dirfile+1,tblptrh
 13605  00356C  6AF8               	clrf	tblptru,c
 13606  00356E  0E07               	movlw	(high __ramtop+-1)
 13607  003570  64F7               	cpfsgt	tblptrh,c
 13608  003572  D003               	bra	u14617
 13609  003574  0008               	tblrd		*
 13610  003576  50F5               	movf	tablat,w,c
 13611  003578  D005               	bra	u14610
 13612  00357A                     u14617:
 13613  00357A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13614  00357E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13615  003582  50EF               	movf	indf0,w,c
 13616  003584                     u14610:
 13617  003584  0100               	movlb	0	; () banked
 13618  003586  6F74               	movwf	make_dirfile@c& (0+255),b
 13619                           
 13620                           ; BSR set to: 0
 13621                           ;tff.c: 452: if (c == '\0' || c == '/') {
 13622  003588  5174               	movf	make_dirfile@c& (0+255),w,b
 13623  00358A  B4D8               	btfsc	status,2,c
 13624  00358C  D004               	goto	u14630
 13625                           
 13626                           ; BSR set to: 0
 13627  00358E  0E2F               	movlw	47
 13628  003590  1974               	xorwf	make_dirfile@c& (0+255),w,b
 13629  003592  A4D8               	btfss	status,2,c
 13630  003594  D013               	goto	l884
 13631  003596                     u14630:
 13632                           
 13633                           ; BSR set to: 0
 13634                           ;tff.c: 453: if (n == 0) break;
 13635                           
 13636                           ; BSR set to: 0
 13637  003596  5173               	movf	make_dirfile@n& (0+255),w,b
 13638  003598  B4D8               	btfsc	status,2,c
 13639  00359A  D075               	goto	l888
 13640                           
 13641                           ; BSR set to: 0
 13642                           
 13643                           ; BSR set to: 0
 13644                           
 13645                           ; BSR set to: 0
 13646                           
 13647                           ; BSR set to: 0
 13648                           ;tff.c: 454: dirname[11] = 1 ? (a & b) : 0;
 13649                           
 13650                           ; BSR set to: 0
 13651  00359C  5172               	movf	make_dirfile@a& (0+255),w,b
 13652  00359E  1570               	andwf	make_dirfile@b& (0+255),w,b
 13653  0035A0  6F6C               	movwf	??_make_dirfile& (0+255),b
 13654  0035A2  516C               	movf	??_make_dirfile& (0+255),w,b
 13655  0035A4  6F6E               	movwf	_make_dirfile$1682& (0+255),b
 13656  0035A6  6B6F               	clrf	(_make_dirfile$1682+1)& (0+255),b
 13657                           
 13658                           ; BSR set to: 0
 13659                           
 13660                           ; BSR set to: 0
 13661  0035A8  EE20 F00B          	lfsr	2,11
 13662  0035AC  516A               	movf	make_dirfile@dirname& (0+255),w,b
 13663  0035AE  26D9               	addwf	fsr2l,f,c
 13664  0035B0  516B               	movf	(make_dirfile@dirname+1)& (0+255),w,b
 13665  0035B2  22DA               	addwfc	fsr2h,f,c
 13666  0035B4  C06E  FFDF         	movff	_make_dirfile$1682,indf2
 13667                           
 13668                           ; BSR set to: 0
 13669                           ;tff.c: 455: return c;
 13670  0035B8  5174               	movf	make_dirfile@c& (0+255),w,b
 13671                           
 13672                           ; BSR set to: 0
 13673  0035BA  0012               	return	
 13674  0035BC                     l884:
 13675                           
 13676                           ; BSR set to: 0
 13677                           ;tff.c: 456: }
 13678                           ;tff.c: 457: if (c <= ' ' || c == 0x7F) break;
 13679                           
 13680                           ; BSR set to: 0
 13681  0035BC  0E20               	movlw	32
 13682  0035BE  6574               	cpfsgt	make_dirfile@c& (0+255),b
 13683  0035C0  D062               	goto	l888
 13684                           
 13685                           ; BSR set to: 0
 13686  0035C2  0E7F               	movlw	127
 13687  0035C4  1974               	xorwf	make_dirfile@c& (0+255),w,b
 13688  0035C6  B4D8               	btfsc	status,2,c
 13689  0035C8  D05E               	goto	l888
 13690                           
 13691                           ; BSR set to: 0
 13692                           ;tff.c: 458: if (c == '.') {
 13693                           
 13694                           ; BSR set to: 0
 13695                           
 13696                           ; BSR set to: 0
 13697  0035CA  0E2E               	movlw	46
 13698  0035CC  1974               	xorwf	make_dirfile@c& (0+255),w,b
 13699  0035CE  A4D8               	btfss	status,2,c
 13700  0035D0  D00C               	goto	l900
 13701                           
 13702                           ; BSR set to: 0
 13703                           ;tff.c: 459: if (!(a & 1) && n >= 1 && n <= 8) {
 13704  0035D2  B172               	btfsc	make_dirfile@a& (0+255),0,b
 13705  0035D4  D058               	goto	l888
 13706                           
 13707                           ; BSR set to: 0
 13708  0035D6  5173               	movf	make_dirfile@n& (0+255),w,b
 13709  0035D8  B4D8               	btfsc	status,2,c
 13710  0035DA  D055               	goto	l888
 13711                           
 13712                           ; BSR set to: 0
 13713  0035DC  0E09               	movlw	9
 13714  0035DE  6173               	cpfslt	make_dirfile@n& (0+255),b
 13715  0035E0  D052               	goto	l888
 13716                           
 13717                           ; BSR set to: 0
 13718                           ;tff.c: 460: n = 8; t = 11; continue;
 13719  0035E2  0E08               	movlw	8
 13720  0035E4  6F73               	movwf	make_dirfile@n& (0+255),b
 13721  0035E6  0E0B               	movlw	11
 13722  0035E8  D7B0               	goto	L9
 13723  0035EA                     l900:
 13724                           
 13725                           ; BSR set to: 0
 13726                           ;tff.c: 470: }
 13727                           ;tff.c: 471: if (c == '"') break;
 13728                           
 13729                           ; BSR set to: 0
 13730  0035EA  0E22               	movlw	34
 13731  0035EC  1974               	xorwf	make_dirfile@c& (0+255),w,b
 13732  0035EE  B4D8               	btfsc	status,2,c
 13733  0035F0  D04A               	goto	l888
 13734                           
 13735                           ; BSR set to: 0
 13736                           ;tff.c: 472: if (c <= ')') goto md_l1;
 13737                           
 13738                           ; BSR set to: 0
 13739                           
 13740                           ; BSR set to: 0
 13741  0035F2  0E2A               	movlw	42
 13742  0035F4  6174               	cpfslt	make_dirfile@c& (0+255),b
 13743  0035F6  D001               	goto	l908
 13744  0035F8  D035               	goto	l926
 13745  0035FA                     l908:
 13746                           
 13747                           ; BSR set to: 0
 13748                           ;tff.c: 473: if (c <= ',') break;
 13749                           
 13750                           ; BSR set to: 0
 13751  0035FA  0E2D               	movlw	45
 13752  0035FC  6174               	cpfslt	make_dirfile@c& (0+255),b
 13753  0035FE  D001               	goto	l910
 13754  003600  D042               	goto	l888
 13755  003602                     l910:
 13756                           
 13757                           ; BSR set to: 0
 13758                           ;tff.c: 474: if (c <= '9') goto md_l1;
 13759                           
 13760                           ; BSR set to: 0
 13761  003602  0E3A               	movlw	58
 13762  003604  6174               	cpfslt	make_dirfile@c& (0+255),b
 13763  003606  D001               	goto	l911
 13764  003608  D02D               	goto	l926
 13765  00360A                     l911:
 13766                           
 13767                           ; BSR set to: 0
 13768                           ;tff.c: 475: if (c <= '?') break;
 13769                           
 13770                           ; BSR set to: 0
 13771  00360A  0E40               	movlw	64
 13772  00360C  6174               	cpfslt	make_dirfile@c& (0+255),b
 13773  00360E  D001               	goto	l912
 13774  003610  D03A               	goto	l888
 13775  003612                     l912:
 13776                           
 13777                           ; BSR set to: 0
 13778                           ;tff.c: 476: if (!(a & 1)) {
 13779  003612  B172               	btfsc	make_dirfile@a& (0+255),0,b
 13780  003614  D027               	goto	l926
 13781                           
 13782                           ; BSR set to: 0
 13783                           ;tff.c: 477: if (c == '|') break;
 13784  003616  0E7C               	movlw	124
 13785  003618  1974               	xorwf	make_dirfile@c& (0+255),w,b
 13786  00361A  B4D8               	btfsc	status,2,c
 13787  00361C  D034               	goto	l888
 13788                           
 13789                           ; BSR set to: 0
 13790                           ;tff.c: 478: if (c >= '[' && c <= ']') break;
 13791                           
 13792                           ; BSR set to: 0
 13793                           
 13794                           ; BSR set to: 0
 13795  00361E  0E5A               	movlw	90
 13796  003620  6574               	cpfsgt	make_dirfile@c& (0+255),b
 13797  003622  D004               	goto	l915
 13798                           
 13799                           ; BSR set to: 0
 13800  003624  0E5E               	movlw	94
 13801  003626  6174               	cpfslt	make_dirfile@c& (0+255),b
 13802  003628  D001               	goto	l915
 13803  00362A  D02D               	goto	l888
 13804  00362C                     l915:
 13805                           
 13806                           ; BSR set to: 0
 13807                           
 13808                           ; BSR set to: 0
 13809  00362C  0E40               	movlw	64
 13810  00362E  6574               	cpfsgt	make_dirfile@c& (0+255),b
 13811  003630  D00A               	goto	l920
 13812                           
 13813                           ; BSR set to: 0
 13814  003632  0E5B               	movlw	91
 13815  003634  6174               	cpfslt	make_dirfile@c& (0+255),b
 13816  003636  D007               	goto	l920
 13817                           
 13818                           ; BSR set to: 0
 13819                           ;tff.c: 480: (t == 8) ? (b &= 0xF7) : (b &= 0xEF);
 13820  003638  0E08               	movlw	8
 13821  00363A  1971               	xorwf	make_dirfile@t& (0+255),w,b
 13822  00363C  A4D8               	btfss	status,2,c
 13823  00363E  D002               	goto	l918
 13824                           
 13825                           ; BSR set to: 0
 13826  003640  9770               	bcf	make_dirfile@b& (0+255),3,b
 13827  003642  D001               	goto	l920
 13828  003644                     l918:
 13829                           
 13830                           ; BSR set to: 0
 13831                           
 13832                           ; BSR set to: 0
 13833  003644  9970               	bcf	make_dirfile@b& (0+255),4,b
 13834  003646                     l920:
 13835                           
 13836                           ; BSR set to: 0
 13837                           ;tff.c: 481: if (c >= 'a' && c <= 'z') {
 13838                           
 13839                           ; BSR set to: 0
 13840                           
 13841                           ; BSR set to: 0
 13842  003646  0E60               	movlw	96
 13843  003648  6574               	cpfsgt	make_dirfile@c& (0+255),b
 13844  00364A  D00C               	goto	l926
 13845                           
 13846                           ; BSR set to: 0
 13847  00364C  0E7B               	movlw	123
 13848  00364E  6174               	cpfslt	make_dirfile@c& (0+255),b
 13849  003650  D009               	goto	l926
 13850                           
 13851                           ; BSR set to: 0
 13852                           ;tff.c: 483: if (1) (t == 8) ? (a |= 0x08) : (a |= 0x10);
 13853  003652  0E20               	movlw	32
 13854  003654  5F74               	subwf	make_dirfile@c& (0+255),f,b
 13855  003656  0E08               	movlw	8
 13856  003658  1971               	xorwf	make_dirfile@t& (0+255),w,b
 13857  00365A  A4D8               	btfss	status,2,c
 13858  00365C  D002               	goto	l924
 13859                           
 13860                           ; BSR set to: 0
 13861  00365E  8772               	bsf	make_dirfile@a& (0+255),3,b
 13862  003660  D001               	goto	l926
 13863  003662                     l924:
 13864                           
 13865                           ; BSR set to: 0
 13866                           
 13867                           ; BSR set to: 0
 13868  003662  8972               	bsf	make_dirfile@a& (0+255),4,b
 13869  003664                     l926:
 13870                           
 13871                           ; BSR set to: 0
 13872                           ;tff.c: 487: a &= 0xFE;
 13873                           
 13874                           ; BSR set to: 0
 13875                           ;tff.c: 484: }
 13876                           ;tff.c: 485: }
 13877                           ;tff.c: 486: md_l1:
 13878                           
 13879                           ; BSR set to: 0
 13880                           
 13881                           ; BSR set to: 0
 13882                           
 13883                           ; BSR set to: 0
 13884  003664  9172               	bcf	make_dirfile@a& (0+255),0,b
 13885                           
 13886                           ; BSR set to: 0
 13887                           ;tff.c: 489: if (n >= t) break;
 13888                           
 13889                           ; BSR set to: 0
 13890                           
 13891                           ;tff.c: 488: md_l2:
 13892  003666  5171               	movf	make_dirfile@t& (0+255),w,b
 13893  003668  5D73               	subwf	make_dirfile@n& (0+255),w,b
 13894  00366A  B0D8               	btfsc	status,0,c
 13895  00366C  D00C               	goto	l888
 13896                           
 13897                           ; BSR set to: 0
 13898                           ;tff.c: 490: dirname[n++] = c;
 13899                           
 13900                           ; BSR set to: 0
 13901                           
 13902                           ; BSR set to: 0
 13903  00366E  5173               	movf	make_dirfile@n& (0+255),w,b
 13904  003670  0D01               	mullw	1
 13905  003672  50F3               	movf	prodl,w,c
 13906  003674  256A               	addwf	make_dirfile@dirname& (0+255),w,b
 13907  003676  6ED9               	movwf	fsr2l,c
 13908  003678  50F4               	movf	prodh,w,c
 13909  00367A  216B               	addwfc	(make_dirfile@dirname+1)& (0+255),w,b
 13910  00367C  6EDA               	movwf	fsr2h,c
 13911  00367E  C074  FFDF         	movff	make_dirfile@c,indf2
 13912                           
 13913                           ; BSR set to: 0
 13914  003682  2B73               	incf	make_dirfile@n& (0+255),f,b
 13915                           
 13916                           ; BSR set to: 0
 13917                           ;tff.c: 491: }
 13918  003684  D763               	goto	l883
 13919  003686                     l888:
 13920                           
 13921                           ; BSR set to: 0
 13922                           ;tff.c: 492: return 1;
 13923                           
 13924                           ; BSR set to: 0
 13925  003686  0E01               	movlw	1
 13926  003688  0012               	return	
 13927  00368A                     __end_of_make_dirfile:
 13928                           	opt stack 0
 13929                           tosu	equ	0xFFF
 13930                           tosh	equ	0xFFE
 13931                           tosl	equ	0xFFD
 13932                           pclath	equ	0xFFA
 13933                           tblptru	equ	0xFF8
 13934                           tblptrh	equ	0xFF7
 13935                           tblptrl	equ	0xFF6
 13936                           tablat	equ	0xFF5
 13937                           prodh	equ	0xFF4
 13938                           prodl	equ	0xFF3
 13939                           intcon	equ	0xFF2
 13940                           intcon2	equ	0xFF1
 13941                           intcon3	equ	0xFF0
 13942                           indf0	equ	0xFEF
 13943                           postinc0	equ	0xFEE
 13944                           fsr0h	equ	0xFEA
 13945                           fsr0l	equ	0xFE9
 13946                           wreg	equ	0xFE8
 13947                           indf1	equ	0xFE7
 13948                           postinc1	equ	0xFE6
 13949                           postdec1	equ	0xFE5
 13950                           plusw1	equ	0xFE3
 13951                           fsr1h	equ	0xFE2
 13952                           fsr1l	equ	0xFE1
 13953                           indf2	equ	0xFDF
 13954                           postinc2	equ	0xFDE
 13955                           postdec2	equ	0xFDD
 13956                           plusw2	equ	0xFDB
 13957                           fsr2h	equ	0xFDA
 13958                           fsr2l	equ	0xFD9
 13959                           status	equ	0xFD8
 13960                           
 13961 ;; *************** function _reserve_direntry *****************
 13962 ;; Defined at:
 13963 ;;		line 568 in file "bibliotecas/tff.c"
 13964 ;; Parameters:    Size  Location     Type
 13965 ;;  dj              2  100[BANK0 ] PTR struct _DIR_E
 13966 ;;		 -> f_open@dj(14), 
 13967 ;;  dir             2  102[BANK0 ] PTR PTR unsigned char 
 13968 ;;		 -> f_open@dir(2), 
 13969 ;; Auto vars:     Size  Location     Type
 13970 ;;  sector          4  106[BANK0 ] unsigned long 
 13971 ;;  fs              2  116[BANK0 ] PTR struct _FATFS
 13972 ;;		 -> NULL(0), fs(544), 
 13973 ;;  clust           2  114[BANK0 ] unsigned short 
 13974 ;;  dptr            2  111[BANK0 ] PTR unsigned char 
 13975 ;;		 -> fs.win(512), NULL(0), fs(544), 
 13976 ;;  c               1  113[BANK0 ] unsigned char 
 13977 ;;  n               1  110[BANK0 ] unsigned char 
 13978 ;; Return value:  Size  Location     Type
 13979 ;;                  1    wreg      enum E155
 13980 ;; Registers used:
 13981 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13982 ;; Tracked objects:
 13983 ;;		On entry : 0/0
 13984 ;;		On exit  : 0/0
 13985 ;;		Unchanged: 0/0
 13986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13987 ;;      Params:         0       4       0       0       0       0       0       0       0
 13988 ;;      Locals:         0      12       0       0       0       0       0       0       0
 13989 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13990 ;;      Totals:         0      18       0       0       0       0       0       0       0
 13991 ;;Total ram usage:       18 bytes
 13992 ;; Hardware stack levels used:    1
 13993 ;; Hardware stack levels required when called:   11
 13994 ;; This function calls:
 13995 ;;		_clust2sect
 13996 ;;		_create_chain
 13997 ;;		_disk_write
 13998 ;;		_memset
 13999 ;;		_move_window
 14000 ;;		_next_dir_entry
 14001 ;; This function is called by:
 14002 ;;		_f_open
 14003 ;; This function uses a non-reentrant model
 14004 ;;
 14005                           
 14006                           	psect	text56
 14007  002316                     __ptext56:
 14008                           	opt stack 0
 14009  002316                     _reserve_direntry:
 14010                           	opt stack 14
 14011                           
 14012                           ;tff.c: 573: CLUST clust;
 14013                           ;tff.c: 574: DWORD sector;
 14014                           ;tff.c: 575: BYTE c, n, *dptr;
 14015                           ;tff.c: 576: FATFS *fs = dj->fs;
 14016                           
 14017                           ; BSR set to: 0
 14018                           ;incstack = 0
 14019  002316  0100               	movlb	0	; () banked
 14020  002318  EE20 F004          	lfsr	2,4
 14021  00231C  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 14022  00231E  26D9               	addwf	fsr2l,f,c
 14023  002320  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 14024  002322  22DA               	addwfc	fsr2h,f,c
 14025  002324  CFDE F0D4          	movff	postinc2,reserve_direntry@fs
 14026  002328  CFDD F0D5          	movff	postdec2,reserve_direntry@fs+1
 14027                           
 14028                           ;tff.c: 580: clust = dj->sclust;
 14029  00232C  EE20 F006          	lfsr	2,6
 14030  002330  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 14031  002332  26D9               	addwf	fsr2l,f,c
 14032  002334  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 14033  002336  22DA               	addwfc	fsr2h,f,c
 14034  002338  CFDE F0D2          	movff	postinc2,reserve_direntry@clust
 14035  00233C  CFDD F0D3          	movff	postdec2,reserve_direntry@clust+1
 14036                           
 14037                           ; BSR set to: 0
 14038                           ;tff.c: 581: if (clust != 0) {
 14039  002340  51D2               	movf	reserve_direntry@clust& (0+255),w,b
 14040  002342  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 14041  002344  B4D8               	btfsc	status,2,c
 14042  002346  D020               	goto	l953
 14043                           
 14044                           ; BSR set to: 0
 14045                           ;tff.c: 582: dj->clust = clust;
 14046  002348  EE20 F008          	lfsr	2,8
 14047  00234C  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 14048  00234E  26D9               	addwf	fsr2l,f,c
 14049  002350  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 14050  002352  22DA               	addwfc	fsr2h,f,c
 14051  002354  C0D2  FFDE         	movff	reserve_direntry@clust,postinc2
 14052  002358  C0D3  FFDD         	movff	reserve_direntry@clust+1,postdec2
 14053                           
 14054                           ; BSR set to: 0
 14055                           ;tff.c: 583: dj->sect = clust2sect(clust);
 14056  00235C  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
 14057  002360  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 14058  002364  EC82  F022         	call	_clust2sect	;wreg free
 14059  002368  0100               	movlb	0	; () banked
 14060  00236A  EE20 F00A          	lfsr	2,10
 14061  00236E  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 14062  002370  26D9               	addwf	fsr2l,f,c
 14063  002372  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 14064  002374  22DA               	addwfc	fsr2h,f,c
 14065  002376  C06C  FFDE         	movff	?_clust2sect,postinc2
 14066  00237A  C06D  FFDE         	movff	?_clust2sect+1,postinc2
 14067  00237E  C06E  FFDE         	movff	?_clust2sect+2,postinc2
 14068  002382  C06F  FFDE         	movff	?_clust2sect+3,postinc2
 14069                           
 14070                           ;tff.c: 584: } else {
 14071  002386  D014               	goto	l954
 14072  002388                     l953:
 14073                           
 14074                           ; BSR set to: 0
 14075                           ;tff.c: 585: dj->sect = fs->dirbase;
 14076                           
 14077                           ; BSR set to: 0
 14078  002388  EE20 F00C          	lfsr	2,12
 14079  00238C  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 14080  00238E  26D9               	addwf	fsr2l,f,c
 14081  002390  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 14082  002392  22DA               	addwfc	fsr2h,f,c
 14083  002394  EE10 F00A          	lfsr	1,10
 14084  002398  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 14085  00239A  26E1               	addwf	fsr1l,f,c
 14086  00239C  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 14087  00239E  22E2               	addwfc	fsr1h,f,c
 14088  0023A0  CFDE FFE6          	movff	postinc2,postinc1
 14089  0023A4  CFDE FFE6          	movff	postinc2,postinc1
 14090  0023A8  CFDE FFE6          	movff	postinc2,postinc1
 14091  0023AC  CFDE FFE6          	movff	postinc2,postinc1
 14092  0023B0                     l954:
 14093                           
 14094                           ; BSR set to: 0
 14095                           ;tff.c: 586: }
 14096                           ;tff.c: 587: dj->index = 0;
 14097                           
 14098                           ; BSR set to: 0
 14099  0023B0  EE20 F002          	lfsr	2,2
 14100  0023B4  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 14101  0023B6  26D9               	addwf	fsr2l,f,c
 14102  0023B8  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 14103  0023BA  22DA               	addwfc	fsr2h,f,c
 14104  0023BC  0E00               	movlw	0
 14105  0023BE  6EDE               	movwf	postinc2,c
 14106  0023C0  0E00               	movlw	0
 14107  0023C2  6EDD               	movwf	postdec2,c
 14108  0023C4                     
 14109                           ;tff.c: 590: if (!move_window(dj->sect)) return FR_RW_ERROR;
 14110                           
 14111                           ; BSR set to: 0
 14112  0023C4  0100               	movlb	0	; () banked
 14113  0023C6  EE20 F00A          	lfsr	2,10
 14114  0023CA  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 14115  0023CC  26D9               	addwf	fsr2l,f,c
 14116  0023CE  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 14117  0023D0  22DA               	addwfc	fsr2h,f,c
 14118  0023D2  CFDE F08B          	movff	postinc2,move_window@sector
 14119  0023D6  CFDE F08C          	movff	postinc2,move_window@sector+1
 14120  0023DA  CFDE F08D          	movff	postinc2,move_window@sector+2
 14121  0023DE  CFDE F08E          	movff	postinc2,move_window@sector+3
 14122  0023E2  EC27  F018         	call	_move_window	;wreg free
 14123  0023E6  0900               	iorlw	0
 14124  0023E8  A4D8               	btfss	status,2,c
 14125  0023EA  D002               	goto	l956
 14126  0023EC  0E08               	movlw	8
 14127  0023EE  0012               	return	
 14128  0023F0                     l956:
 14129                           
 14130                           ;tff.c: 591: dptr = &fs->win[(dj->index & 15) * 32];
 14131  0023F0  0100               	movlb	0	; () banked
 14132  0023F2  EE20 F002          	lfsr	2,2
 14133  0023F6  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 14134  0023F8  26D9               	addwf	fsr2l,f,c
 14135  0023FA  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 14136  0023FC  22DA               	addwfc	fsr2h,f,c
 14137  0023FE  CFDE F0C8          	movff	postinc2,??_reserve_direntry
 14138  002402  CFDD F0C9          	movff	postdec2,??_reserve_direntry+1
 14139  002406  0E0F               	movlw	15
 14140  002408  17C8               	andwf	??_reserve_direntry& (0+255),f,b
 14141  00240A  0E00               	movlw	0
 14142  00240C  17C9               	andwf	(??_reserve_direntry+1)& (0+255),f,b
 14143  00240E  0E05               	movlw	5
 14144  002410                     u15685:
 14145  002410  90D8               	bcf	status,0,c
 14146  002412  37C8               	rlcf	??_reserve_direntry& (0+255),f,b
 14147  002414  37C9               	rlcf	(??_reserve_direntry+1)& (0+255),f,b
 14148  002416  2EE8               	decfsz	wreg,f,c
 14149  002418  D7FB               	goto	u15685
 14150  00241A  0E20               	movlw	32
 14151  00241C  27C8               	addwf	??_reserve_direntry& (0+255),f,b
 14152  00241E  0E00               	movlw	0
 14153  002420  23C9               	addwfc	(??_reserve_direntry+1)& (0+255),f,b
 14154  002422  51C8               	movf	??_reserve_direntry& (0+255),w,b
 14155  002424  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 14156  002426  6FCF               	movwf	reserve_direntry@dptr& (0+255),b
 14157  002428  51C9               	movf	(??_reserve_direntry+1)& (0+255),w,b
 14158  00242A  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 14159  00242C  6FD0               	movwf	(reserve_direntry@dptr+1)& (0+255),b
 14160                           
 14161                           ; BSR set to: 0
 14162                           ;tff.c: 592: c = dptr[0];
 14163  00242E  C0CF  FFD9         	movff	reserve_direntry@dptr,fsr2l
 14164  002432  C0D0  FFDA         	movff	reserve_direntry@dptr+1,fsr2h
 14165  002436  50DF               	movf	indf2,w,c
 14166  002438  6FD1               	movwf	reserve_direntry@c& (0+255),b
 14167                           
 14168                           ; BSR set to: 0
 14169                           ;tff.c: 593: if (c == 0 || c == 0xE5) {
 14170  00243A  51D1               	movf	reserve_direntry@c& (0+255),w,b
 14171  00243C  B4D8               	btfsc	status,2,c
 14172  00243E  D004               	goto	u15700
 14173                           
 14174                           ; BSR set to: 0
 14175  002440  0EE5               	movlw	229
 14176  002442  19D1               	xorwf	reserve_direntry@c& (0+255),w,b
 14177  002444  A4D8               	btfss	status,2,c
 14178  002446  D00A               	goto	l958
 14179  002448                     u15700:
 14180                           
 14181                           ; BSR set to: 0
 14182                           ;tff.c: 594: *dir = dptr; return FR_OK;
 14183                           
 14184                           ; BSR set to: 0
 14185  002448  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
 14186  00244C  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
 14187  002450  C0CF  FFDE         	movff	reserve_direntry@dptr,postinc2
 14188  002454  C0D0  FFDD         	movff	reserve_direntry@dptr+1,postdec2
 14189                           
 14190                           ; BSR set to: 0
 14191  002458  0E00               	movlw	0
 14192                           
 14193                           ; BSR set to: 0
 14194  00245A  0012               	return	
 14195  00245C                     l958:
 14196                           
 14197                           ; BSR set to: 0
 14198                           ;tff.c: 595: }
 14199                           ;tff.c: 596: } while (next_dir_entry(dj));
 14200                           
 14201                           ; BSR set to: 0
 14202  00245C  C0C4  F0B3         	movff	reserve_direntry@dj,next_dir_entry@dj
 14203  002460  C0C5  F0B4         	movff	reserve_direntry@dj+1,next_dir_entry@dj+1
 14204  002464  ECCA  F019         	call	_next_dir_entry	;wreg free
 14205  002468  0900               	iorlw	0
 14206  00246A  A4D8               	btfss	status,2,c
 14207  00246C  D7AB               	goto	l955
 14208                           
 14209                           ;tff.c: 600: if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
 14210  00246E  0100               	movlb	0	; () banked
 14211  002470  51D2               	movf	reserve_direntry@clust& (0+255),w,b
 14212  002472  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 14213  002474  B4D8               	btfsc	status,2,c
 14214  002476  D015               	goto	u15730
 14215                           
 14216                           ; BSR set to: 0
 14217  002478  EE20 F008          	lfsr	2,8
 14218  00247C  51C4               	movf	reserve_direntry@dj& (0+255),w,b
 14219  00247E  26D9               	addwf	fsr2l,f,c
 14220  002480  51C5               	movf	(reserve_direntry@dj+1)& (0+255),w,b
 14221  002482  22DA               	addwfc	fsr2h,f,c
 14222  002484  CFDE F0B6          	movff	postinc2,create_chain@clust
 14223  002488  CFDD F0B7          	movff	postdec2,create_chain@clust+1
 14224  00248C  EC47  F017         	call	_create_chain	;wreg free
 14225  002490  C0B6  F0D2         	movff	?_create_chain,reserve_direntry@clust
 14226  002494  C0B7  F0D3         	movff	?_create_chain+1,reserve_direntry@clust+1
 14227  002498  0100               	movlb	0	; () banked
 14228  00249A  51D2               	movf	reserve_direntry@clust& (0+255),w,b
 14229  00249C  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 14230  00249E  A4D8               	btfss	status,2,c
 14231  0024A0  D002               	goto	l962
 14232  0024A2                     u15730:
 14233                           
 14234                           ; BSR set to: 0
 14235                           
 14236                           ; BSR set to: 0
 14237  0024A2  0E06               	movlw	6
 14238                           
 14239                           ; BSR set to: 0
 14240  0024A4  0012               	return	
 14241  0024A6                     l962:
 14242                           
 14243                           ; BSR set to: 0
 14244                           ;tff.c: 601: if (clust == 1 || !move_window(0)) return FR_RW_ERROR;
 14245                           
 14246                           ; BSR set to: 0
 14247  0024A6  05D2               	decf	reserve_direntry@clust& (0+255),w,b
 14248  0024A8  11D3               	iorwf	(reserve_direntry@clust+1)& (0+255),w,b
 14249  0024AA  B4D8               	btfsc	status,2,c
 14250  0024AC  D00D               	goto	u15750
 14251                           
 14252                           ; BSR set to: 0
 14253  0024AE  0E00               	movlw	0
 14254  0024B0  6F8B               	movwf	move_window@sector& (0+255),b
 14255  0024B2  0E00               	movlw	0
 14256  0024B4  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 14257  0024B6  0E00               	movlw	0
 14258  0024B8  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 14259  0024BA  0E00               	movlw	0
 14260  0024BC  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 14261  0024BE  EC27  F018         	call	_move_window	;wreg free
 14262  0024C2  0900               	iorlw	0
 14263  0024C4  A4D8               	btfss	status,2,c
 14264  0024C6  D002               	goto	l965
 14265  0024C8                     u15750:
 14266  0024C8  0E08               	movlw	8
 14267  0024CA  0012               	return	
 14268  0024CC                     l965:
 14269                           
 14270                           ;tff.c: 603: fs->winsect = sector = clust2sect(clust);
 14271  0024CC  C0D2  F06C         	movff	reserve_direntry@clust,clust2sect@clust
 14272  0024D0  C0D3  F06D         	movff	reserve_direntry@clust+1,clust2sect@clust+1
 14273  0024D4  EC82  F022         	call	_clust2sect	;wreg free
 14274  0024D8  C06C  F0CA         	movff	?_clust2sect,reserve_direntry@sector
 14275  0024DC  C06D  F0CB         	movff	?_clust2sect+1,reserve_direntry@sector+1
 14276  0024E0  C06E  F0CC         	movff	?_clust2sect+2,reserve_direntry@sector+2
 14277  0024E4  C06F  F0CD         	movff	?_clust2sect+3,reserve_direntry@sector+3
 14278  0024E8  0100               	movlb	0	; () banked
 14279  0024EA  EE20 F004          	lfsr	2,4
 14280  0024EE  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 14281  0024F0  26D9               	addwf	fsr2l,f,c
 14282  0024F2  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 14283  0024F4  22DA               	addwfc	fsr2h,f,c
 14284  0024F6  C0CA  FFDE         	movff	reserve_direntry@sector,postinc2
 14285  0024FA  C0CB  FFDE         	movff	reserve_direntry@sector+1,postinc2
 14286  0024FE  C0CC  FFDE         	movff	reserve_direntry@sector+2,postinc2
 14287  002502  C0CD  FFDE         	movff	reserve_direntry@sector+3,postinc2
 14288                           
 14289                           ;tff.c: 604: memset(fs->win, 0, 512U);
 14290  002506  0E20               	movlw	32
 14291  002508  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 14292  00250A  6F60               	movwf	memset@p1& (0+255),b
 14293  00250C  0E00               	movlw	0
 14294  00250E  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 14295  002510  6F61               	movwf	(memset@p1+1)& (0+255),b
 14296  002512  0E00               	movlw	0
 14297  002514  6F63               	movwf	(memset@c+1)& (0+255),b
 14298  002516  0E00               	movlw	0
 14299  002518  6F62               	movwf	memset@c& (0+255),b
 14300  00251A  0E02               	movlw	2
 14301  00251C  6F65               	movwf	(memset@n+1)& (0+255),b
 14302  00251E  0E00               	movlw	0
 14303  002520  6F64               	movwf	memset@n& (0+255),b
 14304  002522  EC5F  F02E         	call	_memset	;wreg free
 14305                           
 14306                           ;tff.c: 605: for (n = fs->csize; n; n--) {
 14307  002526  0100               	movlb	0	; () banked
 14308  002528  EE20 F01D          	lfsr	2,29
 14309  00252C  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 14310  00252E  26D9               	addwf	fsr2l,f,c
 14311  002530  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 14312  002532  22DA               	addwfc	fsr2h,f,c
 14313  002534  50DF               	movf	indf2,w,c
 14314  002536  6FCE               	movwf	reserve_direntry@n& (0+255),b
 14315  002538  D020               	goto	l968
 14316  00253A                     
 14317                           ; BSR set to: 0
 14318                           ;tff.c: 606: if (disk_write(0, fs->win, sector, 1) != RES_OK)
 14319                           
 14320                           ; BSR set to: 0
 14321  00253A  0E20               	movlw	32
 14322  00253C  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 14323  00253E  6F7F               	movwf	disk_write@buff& (0+255),b
 14324  002540  0E00               	movlw	0
 14325  002542  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 14326  002544  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 14327  002546  C0CA  F081         	movff	reserve_direntry@sector,disk_write@sector
 14328  00254A  C0CB  F082         	movff	reserve_direntry@sector+1,disk_write@sector+1
 14329  00254E  C0CC  F083         	movff	reserve_direntry@sector+2,disk_write@sector+2
 14330  002552  C0CD  F084         	movff	reserve_direntry@sector+3,disk_write@sector+3
 14331  002556  0E01               	movlw	1
 14332  002558  6F85               	movwf	disk_write@count& (0+255),b
 14333  00255A  0E00               	movlw	0
 14334  00255C  EC92  F027         	call	_disk_write
 14335  002560  0900               	iorlw	0
 14336  002562  B4D8               	btfsc	status,2,c
 14337  002564  D002               	goto	l970
 14338                           
 14339                           ;tff.c: 607: return FR_RW_ERROR;
 14340  002566  0E08               	movlw	8
 14341  002568  0012               	return	
 14342  00256A                     l970:
 14343                           
 14344                           ;tff.c: 608: sector++;
 14345  00256A  0E01               	movlw	1
 14346  00256C  0100               	movlb	0	; () banked
 14347  00256E  27CA               	addwf	reserve_direntry@sector& (0+255),f,b
 14348  002570  0E00               	movlw	0
 14349  002572  23CB               	addwfc	(reserve_direntry@sector+1)& (0+255),f,b
 14350  002574  23CC               	addwfc	(reserve_direntry@sector+2)& (0+255),f,b
 14351  002576  23CD               	addwfc	(reserve_direntry@sector+3)& (0+255),f,b
 14352                           
 14353                           ; BSR set to: 0
 14354  002578  07CE               	decf	reserve_direntry@n& (0+255),f,b
 14355  00257A                     l968:
 14356                           
 14357                           ; BSR set to: 0
 14358                           
 14359                           ; BSR set to: 0
 14360  00257A  51CE               	movf	reserve_direntry@n& (0+255),w,b
 14361  00257C  A4D8               	btfss	status,2,c
 14362  00257E  D7DD               	goto	l969
 14363                           
 14364                           ; BSR set to: 0
 14365                           ;tff.c: 609: }
 14366                           ;tff.c: 610: fs->winflag = 1;
 14367                           
 14368                           ; BSR set to: 0
 14369  002580  EE20 F01F          	lfsr	2,31
 14370  002584  51D4               	movf	reserve_direntry@fs& (0+255),w,b
 14371  002586  26D9               	addwf	fsr2l,f,c
 14372  002588  51D5               	movf	(reserve_direntry@fs+1)& (0+255),w,b
 14373  00258A  22DA               	addwfc	fsr2h,f,c
 14374  00258C  0E01               	movlw	1
 14375  00258E  6EDF               	movwf	indf2,c
 14376                           
 14377                           ;tff.c: 611: *dir = fs->win;
 14378  002590  0E20               	movlw	32
 14379  002592  25D4               	addwf	reserve_direntry@fs& (0+255),w,b
 14380  002594  6FC8               	movwf	??_reserve_direntry& (0+255),b
 14381  002596  0E00               	movlw	0
 14382  002598  21D5               	addwfc	(reserve_direntry@fs+1)& (0+255),w,b
 14383  00259A  6FC9               	movwf	(??_reserve_direntry+1)& (0+255),b
 14384  00259C  C0C6  FFD9         	movff	reserve_direntry@dir,fsr2l
 14385  0025A0  C0C7  FFDA         	movff	reserve_direntry@dir+1,fsr2h
 14386  0025A4  C0C8  FFDE         	movff	??_reserve_direntry,postinc2
 14387  0025A8  C0C9  FFDD         	movff	??_reserve_direntry+1,postdec2
 14388                           
 14389                           ; BSR set to: 0
 14390                           ;tff.c: 612: return FR_OK;
 14391  0025AC  0E00               	movlw	0
 14392  0025AE  0012               	return	
 14393  0025B0                     __end_of_reserve_direntry:
 14394                           	opt stack 0
 14395                           tosu	equ	0xFFF
 14396                           tosh	equ	0xFFE
 14397                           tosl	equ	0xFFD
 14398                           pclath	equ	0xFFA
 14399                           tblptru	equ	0xFF8
 14400                           tblptrh	equ	0xFF7
 14401                           tblptrl	equ	0xFF6
 14402                           tablat	equ	0xFF5
 14403                           prodh	equ	0xFF4
 14404                           prodl	equ	0xFF3
 14405                           intcon	equ	0xFF2
 14406                           intcon2	equ	0xFF1
 14407                           intcon3	equ	0xFF0
 14408                           indf0	equ	0xFEF
 14409                           postinc0	equ	0xFEE
 14410                           fsr0h	equ	0xFEA
 14411                           fsr0l	equ	0xFE9
 14412                           wreg	equ	0xFE8
 14413                           indf1	equ	0xFE7
 14414                           postinc1	equ	0xFE6
 14415                           postdec1	equ	0xFE5
 14416                           plusw1	equ	0xFE3
 14417                           fsr1h	equ	0xFE2
 14418                           fsr1l	equ	0xFE1
 14419                           indf2	equ	0xFDF
 14420                           postinc2	equ	0xFDE
 14421                           postdec2	equ	0xFDD
 14422                           plusw2	equ	0xFDB
 14423                           fsr2h	equ	0xFDA
 14424                           fsr2l	equ	0xFD9
 14425                           status	equ	0xFD8
 14426                           
 14427 ;; *************** function _next_dir_entry *****************
 14428 ;; Defined at:
 14429 ;;		line 359 in file "bibliotecas/tff.c"
 14430 ;; Parameters:    Size  Location     Type
 14431 ;;  dj              2   83[BANK0 ] PTR struct _DIR_E
 14432 ;;		 -> f_open@dj(14), 
 14433 ;; Auto vars:     Size  Location     Type
 14434 ;;  idx             2   94[BANK0 ] unsigned short 
 14435 ;;  clust           2   92[BANK0 ] unsigned short 
 14436 ;; Return value:  Size  Location     Type
 14437 ;;                  1    wreg      enum E105
 14438 ;; Registers used:
 14439 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14440 ;; Tracked objects:
 14441 ;;		On entry : 0/0
 14442 ;;		On exit  : 0/0
 14443 ;;		Unchanged: 0/0
 14444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14445 ;;      Params:         0       2       0       0       0       0       0       0       0
 14446 ;;      Locals:         0       4       0       0       0       0       0       0       0
 14447 ;;      Temps:          0       7       0       0       0       0       0       0       0
 14448 ;;      Totals:         0      13       0       0       0       0       0       0       0
 14449 ;;Total ram usage:       13 bytes
 14450 ;; Hardware stack levels used:    1
 14451 ;; Hardware stack levels required when called:   10
 14452 ;; This function calls:
 14453 ;;		_clust2sect
 14454 ;;		_get_cluster
 14455 ;; This function is called by:
 14456 ;;		_trace_path
 14457 ;;		_reserve_direntry
 14458 ;;		_f_readdir
 14459 ;; This function uses a non-reentrant model
 14460 ;;
 14461                           
 14462                           	psect	text57
 14463  003394                     __ptext57:
 14464                           	opt stack 0
 14465  003394                     _next_dir_entry:
 14466                           	opt stack 14
 14467                           
 14468                           ;tff.c: 363: CLUST clust;
 14469                           ;tff.c: 364: WORD idx;
 14470                           ;tff.c: 367: idx = dj->index + 1;
 14471                           
 14472                           ;incstack = 0
 14473  003394  0100               	movlb	0	; () banked
 14474  003396  EE20 F002          	lfsr	2,2
 14475  00339A  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 14476  00339C  26D9               	addwf	fsr2l,f,c
 14477  00339E  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 14478  0033A0  22DA               	addwfc	fsr2h,f,c
 14479  0033A2  CFDE F0B5          	movff	postinc2,??_next_dir_entry
 14480  0033A6  CFDD F0B6          	movff	postdec2,??_next_dir_entry+1
 14481  0033AA  0E01               	movlw	1
 14482  0033AC  25B5               	addwf	??_next_dir_entry& (0+255),w,b
 14483  0033AE  6FBE               	movwf	next_dir_entry@idx& (0+255),b
 14484  0033B0  0E00               	movlw	0
 14485  0033B2  21B6               	addwfc	(??_next_dir_entry+1)& (0+255),w,b
 14486  0033B4  6FBF               	movwf	(next_dir_entry@idx+1)& (0+255),b
 14487                           
 14488                           ; BSR set to: 0
 14489                           ;tff.c: 368: if ((idx & 15) == 0) {
 14490  0033B6  0E0F               	movlw	15
 14491  0033B8  15BE               	andwf	next_dir_entry@idx& (0+255),w,b
 14492  0033BA  6FB5               	movwf	??_next_dir_entry& (0+255),b
 14493  0033BC  0E00               	movlw	0
 14494  0033BE  15BF               	andwf	(next_dir_entry@idx+1)& (0+255),w,b
 14495  0033C0  6FB6               	movwf	(??_next_dir_entry+1)& (0+255),b
 14496  0033C2  51B5               	movf	??_next_dir_entry& (0+255),w,b
 14497  0033C4  11B6               	iorwf	(??_next_dir_entry+1)& (0+255),w,b
 14498  0033C6  A4D8               	btfss	status,2,c
 14499  0033C8  D09D               	goto	l860
 14500                           
 14501                           ; BSR set to: 0
 14502                           ;tff.c: 369: dj->sect++;
 14503  0033CA  EE20 F00A          	lfsr	2,10
 14504  0033CE  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 14505  0033D0  26D9               	addwf	fsr2l,f,c
 14506  0033D2  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 14507  0033D4  22DA               	addwfc	fsr2h,f,c
 14508  0033D6  2ADE               	incf	postinc2,f,c
 14509  0033D8  0E00               	movlw	0
 14510  0033DA  22DE               	addwfc	postinc2,f,c
 14511  0033DC  22DE               	addwfc	postinc2,f,c
 14512  0033DE  22DE               	addwfc	postinc2,f,c
 14513                           
 14514                           ;tff.c: 370: if (dj->clust == 0) {
 14515  0033E0  EE20 F008          	lfsr	2,8
 14516  0033E4  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 14517  0033E6  26D9               	addwf	fsr2l,f,c
 14518  0033E8  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 14519  0033EA  22DA               	addwfc	fsr2h,f,c
 14520  0033EC  50DE               	movf	postinc2,w,c
 14521  0033EE  10DE               	iorwf	postinc2,w,c
 14522  0033F0  A4D8               	btfss	status,2,c
 14523  0033F2  D014               	goto	l856
 14524                           
 14525                           ; BSR set to: 0
 14526                           ;tff.c: 371: if (idx >= dj->fs->n_rootdir) return FALSE;
 14527  0033F4  EE20 F004          	lfsr	2,4
 14528  0033F8  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 14529  0033FA  26D9               	addwf	fsr2l,f,c
 14530  0033FC  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 14531  0033FE  22DA               	addwfc	fsr2h,f,c
 14532  003400  EE10 F002          	lfsr	1,2
 14533  003404  50DE               	movf	postinc2,w,c
 14534  003406  26E1               	addwf	fsr1l,f,c
 14535  003408  50DD               	movf	postdec2,w,c
 14536  00340A  22E2               	addwfc	fsr1h,f,c
 14537  00340C  50E6               	movf	postinc1,w,c
 14538  00340E  5DBE               	subwf	next_dir_entry@idx& (0+255),w,b
 14539  003410  50E6               	movf	postinc1,w,c
 14540  003412  59BF               	subwfb	(next_dir_entry@idx+1)& (0+255),w,b
 14541  003414  A0D8               	btfss	status,0,c
 14542  003416  D076               	goto	l860
 14543                           
 14544                           ; BSR set to: 0
 14545  003418  0E00               	movlw	0
 14546                           
 14547                           ; BSR set to: 0
 14548  00341A  0012               	return	
 14549  00341C                     l856:
 14550                           
 14551                           ; BSR set to: 0
 14552                           ;tff.c: 373: if (((idx / 16) & (dj->fs->csize - 1)) == 0) {
 14553                           
 14554                           ; BSR set to: 0
 14555  00341C  C0BE  F0B5         	movff	next_dir_entry@idx,??_next_dir_entry
 14556  003420  C0BF  F0B6         	movff	next_dir_entry@idx+1,??_next_dir_entry+1
 14557  003424  0E04               	movlw	4
 14558  003426  6FB7               	movwf	(??_next_dir_entry+2)& (0+255),b
 14559  003428                     u14575:
 14560  003428  90D8               	bcf	status,0,c
 14561  00342A  33B6               	rrcf	(??_next_dir_entry+1)& (0+255),f,b
 14562  00342C  33B5               	rrcf	??_next_dir_entry& (0+255),f,b
 14563  00342E  2FB7               	decfsz	(??_next_dir_entry+2)& (0+255),f,b
 14564  003430  D7FB               	goto	u14575
 14565  003432  0EFF               	movlw	255
 14566  003434  6FB8               	movwf	(??_next_dir_entry+3)& (0+255),b
 14567  003436  0EFF               	movlw	255
 14568  003438  6FB9               	movwf	(??_next_dir_entry+4)& (0+255),b
 14569  00343A  EE20 F004          	lfsr	2,4
 14570  00343E  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 14571  003440  26D9               	addwf	fsr2l,f,c
 14572  003442  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 14573  003444  22DA               	addwfc	fsr2h,f,c
 14574  003446  EE10 F01D          	lfsr	1,29
 14575  00344A  50DE               	movf	postinc2,w,c
 14576  00344C  26E1               	addwf	fsr1l,f,c
 14577  00344E  50DD               	movf	postdec2,w,c
 14578  003450  22E2               	addwfc	fsr1h,f,c
 14579  003452  50E7               	movf	indf1,w,c
 14580  003454  6FBA               	movwf	(??_next_dir_entry+5)& (0+255),b
 14581  003456  6BBB               	clrf	(??_next_dir_entry+6)& (0+255),b
 14582  003458  51B8               	movf	(??_next_dir_entry+3)& (0+255),w,b
 14583  00345A  27BA               	addwf	(??_next_dir_entry+5)& (0+255),f,b
 14584  00345C  51B9               	movf	(??_next_dir_entry+4)& (0+255),w,b
 14585  00345E  23BB               	addwfc	(??_next_dir_entry+6)& (0+255),f,b
 14586  003460  51B5               	movf	??_next_dir_entry& (0+255),w,b
 14587  003462  17BA               	andwf	(??_next_dir_entry+5)& (0+255),f,b
 14588  003464  51B6               	movf	(??_next_dir_entry+1)& (0+255),w,b
 14589  003466  17BB               	andwf	(??_next_dir_entry+6)& (0+255),f,b
 14590  003468  51BA               	movf	(??_next_dir_entry+5)& (0+255),w,b
 14591  00346A  11BB               	iorwf	(??_next_dir_entry+6)& (0+255),w,b
 14592  00346C  A4D8               	btfss	status,2,c
 14593  00346E  D04A               	goto	l860
 14594                           
 14595                           ; BSR set to: 0
 14596                           ;tff.c: 374: clust = get_cluster(dj->clust);
 14597  003470  EE20 F008          	lfsr	2,8
 14598  003474  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 14599  003476  26D9               	addwf	fsr2l,f,c
 14600  003478  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 14601  00347A  22DA               	addwfc	fsr2h,f,c
 14602  00347C  CFDE F0A0          	movff	postinc2,get_cluster@clust
 14603  003480  CFDD F0A1          	movff	postdec2,get_cluster@clust+1
 14604  003484  EC51  F015         	call	_get_cluster	;wreg free
 14605  003488  C0A0  F0BC         	movff	?_get_cluster,next_dir_entry@clust
 14606  00348C  C0A1  F0BD         	movff	?_get_cluster+1,next_dir_entry@clust+1
 14607                           
 14608                           ;tff.c: 375: if (clust < 2 || clust >= dj->fs->max_clust)
 14609  003490  0100               	movlb	0	; () banked
 14610  003492  51BD               	movf	(next_dir_entry@clust+1)& (0+255),w,b
 14611  003494  E104               	bnz	u14590
 14612  003496  0E02               	movlw	2
 14613  003498  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
 14614  00349A  A0D8               	btfss	status,0,c
 14615  00349C  D012               	goto	u14600
 14616  00349E                     u14590:
 14617                           
 14618                           ; BSR set to: 0
 14619  00349E  EE20 F004          	lfsr	2,4
 14620  0034A2  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 14621  0034A4  26D9               	addwf	fsr2l,f,c
 14622  0034A6  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 14623  0034A8  22DA               	addwfc	fsr2h,f,c
 14624  0034AA  EE10 F016          	lfsr	1,22
 14625  0034AE  50DE               	movf	postinc2,w,c
 14626  0034B0  26E1               	addwf	fsr1l,f,c
 14627  0034B2  50DD               	movf	postdec2,w,c
 14628  0034B4  22E2               	addwfc	fsr1h,f,c
 14629  0034B6  50E6               	movf	postinc1,w,c
 14630  0034B8  5DBC               	subwf	next_dir_entry@clust& (0+255),w,b
 14631  0034BA  50E6               	movf	postinc1,w,c
 14632  0034BC  59BD               	subwfb	(next_dir_entry@clust+1)& (0+255),w,b
 14633  0034BE  A0D8               	btfss	status,0,c
 14634  0034C0  D002               	goto	l861
 14635  0034C2                     u14600:
 14636                           
 14637                           ; BSR set to: 0
 14638                           ;tff.c: 376: return FALSE;
 14639                           
 14640                           ; BSR set to: 0
 14641  0034C2  0E00               	movlw	0
 14642                           
 14643                           ; BSR set to: 0
 14644  0034C4  0012               	return	
 14645  0034C6                     l861:
 14646                           
 14647                           ; BSR set to: 0
 14648                           ;tff.c: 377: dj->clust = clust;
 14649                           
 14650                           ; BSR set to: 0
 14651  0034C6  EE20 F008          	lfsr	2,8
 14652  0034CA  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 14653  0034CC  26D9               	addwf	fsr2l,f,c
 14654  0034CE  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 14655  0034D0  22DA               	addwfc	fsr2h,f,c
 14656  0034D2  C0BC  FFDE         	movff	next_dir_entry@clust,postinc2
 14657  0034D6  C0BD  FFDD         	movff	next_dir_entry@clust+1,postdec2
 14658                           
 14659                           ; BSR set to: 0
 14660                           ;tff.c: 378: dj->sect = clust2sect(clust);
 14661  0034DA  C0BC  F06C         	movff	next_dir_entry@clust,clust2sect@clust
 14662  0034DE  C0BD  F06D         	movff	next_dir_entry@clust+1,clust2sect@clust+1
 14663  0034E2  EC82  F022         	call	_clust2sect	;wreg free
 14664  0034E6  0100               	movlb	0	; () banked
 14665  0034E8  EE20 F00A          	lfsr	2,10
 14666  0034EC  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 14667  0034EE  26D9               	addwf	fsr2l,f,c
 14668  0034F0  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 14669  0034F2  22DA               	addwfc	fsr2h,f,c
 14670  0034F4  C06C  FFDE         	movff	?_clust2sect,postinc2
 14671  0034F8  C06D  FFDE         	movff	?_clust2sect+1,postinc2
 14672  0034FC  C06E  FFDE         	movff	?_clust2sect+2,postinc2
 14673  003500  C06F  FFDE         	movff	?_clust2sect+3,postinc2
 14674  003504                     l860:
 14675                           
 14676                           ; BSR set to: 0
 14677                           ;tff.c: 379: }
 14678                           ;tff.c: 380: }
 14679                           ;tff.c: 381: }
 14680                           ;tff.c: 382: dj->index = idx;
 14681                           
 14682                           ; BSR set to: 0
 14683                           
 14684                           ; BSR set to: 0
 14685                           
 14686                           ; BSR set to: 0
 14687  003504  EE20 F002          	lfsr	2,2
 14688  003508  51B3               	movf	next_dir_entry@dj& (0+255),w,b
 14689  00350A  26D9               	addwf	fsr2l,f,c
 14690  00350C  51B4               	movf	(next_dir_entry@dj+1)& (0+255),w,b
 14691  00350E  22DA               	addwfc	fsr2h,f,c
 14692  003510  C0BE  FFDE         	movff	next_dir_entry@idx,postinc2
 14693  003514  C0BF  FFDD         	movff	next_dir_entry@idx+1,postdec2
 14694                           
 14695                           ; BSR set to: 0
 14696                           ;tff.c: 383: return TRUE;
 14697  003518  0E01               	movlw	1
 14698  00351A  0012               	return	
 14699  00351C                     __end_of_next_dir_entry:
 14700                           	opt stack 0
 14701                           tosu	equ	0xFFF
 14702                           tosh	equ	0xFFE
 14703                           tosl	equ	0xFFD
 14704                           pclath	equ	0xFFA
 14705                           tblptru	equ	0xFF8
 14706                           tblptrh	equ	0xFF7
 14707                           tblptrl	equ	0xFF6
 14708                           tablat	equ	0xFF5
 14709                           prodh	equ	0xFF4
 14710                           prodl	equ	0xFF3
 14711                           intcon	equ	0xFF2
 14712                           intcon2	equ	0xFF1
 14713                           intcon3	equ	0xFF0
 14714                           indf0	equ	0xFEF
 14715                           postinc0	equ	0xFEE
 14716                           fsr0h	equ	0xFEA
 14717                           fsr0l	equ	0xFE9
 14718                           wreg	equ	0xFE8
 14719                           indf1	equ	0xFE7
 14720                           postinc1	equ	0xFE6
 14721                           postdec1	equ	0xFE5
 14722                           plusw1	equ	0xFE3
 14723                           fsr1h	equ	0xFE2
 14724                           fsr1l	equ	0xFE1
 14725                           indf2	equ	0xFDF
 14726                           postinc2	equ	0xFDE
 14727                           postdec2	equ	0xFDD
 14728                           plusw2	equ	0xFDB
 14729                           fsr2h	equ	0xFDA
 14730                           fsr2l	equ	0xFD9
 14731                           status	equ	0xFD8
 14732                           
 14733 ;; *************** function _clust2sect *****************
 14734 ;; Defined at:
 14735 ;;		line 339 in file "bibliotecas/tff.c"
 14736 ;; Parameters:    Size  Location     Type
 14737 ;;  clust           2   12[BANK0 ] unsigned short 
 14738 ;; Auto vars:     Size  Location     Type
 14739 ;;  fs              2   21[BANK0 ] PTR struct _FATFS
 14740 ;;		 -> NULL(0), fs(544), 
 14741 ;; Return value:  Size  Location     Type
 14742 ;;                  4   12[BANK0 ] unsigned long 
 14743 ;; Registers used:
 14744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14745 ;; Tracked objects:
 14746 ;;		On entry : 0/0
 14747 ;;		On exit  : 0/0
 14748 ;;		Unchanged: 0/0
 14749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14750 ;;      Params:         0       4       0       0       0       0       0       0       0
 14751 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14752 ;;      Temps:          0       5       0       0       0       0       0       0       0
 14753 ;;      Totals:         0      11       0       0       0       0       0       0       0
 14754 ;;Total ram usage:       11 bytes
 14755 ;; Hardware stack levels used:    1
 14756 ;; Hardware stack levels required when called:    4
 14757 ;; This function calls:
 14758 ;;		___lmul
 14759 ;; This function is called by:
 14760 ;;		_next_dir_entry
 14761 ;;		_trace_path
 14762 ;;		_reserve_direntry
 14763 ;;		_f_write
 14764 ;;		_f_read
 14765 ;;		_f_opendir
 14766 ;; This function uses a non-reentrant model
 14767 ;;
 14768                           
 14769                           	psect	text58
 14770  004504                     __ptext58:
 14771                           	opt stack 0
 14772  004504                     _clust2sect:
 14773                           	opt stack 18
 14774                           
 14775                           ;tff.c: 343: FATFS *fs = FatFs;
 14776                           
 14777                           ; BSR set to: 0
 14778                           ;incstack = 0
 14779  004504  C0F6  F075         	movff	_FatFs,clust2sect@fs
 14780  004508  C0F7  F076         	movff	_FatFs+1,clust2sect@fs+1
 14781                           
 14782                           ;tff.c: 346: clust -= 2;
 14783  00450C  0E02               	movlw	2
 14784  00450E  0100               	movlb	0	; () banked
 14785  004510  5F6C               	subwf	clust2sect@clust& (0+255),f,b
 14786  004512  0E00               	movlw	0
 14787  004514  5B6D               	subwfb	(clust2sect@clust+1)& (0+255),f,b
 14788                           
 14789                           ; BSR set to: 0
 14790                           ;tff.c: 347: if (clust >= (fs->max_clust - 2)) return 0;
 14791  004516  0EFE               	movlw	254
 14792  004518  6F70               	movwf	??_clust2sect& (0+255),b
 14793  00451A  0EFF               	movlw	255
 14794  00451C  6F71               	movwf	(??_clust2sect+1)& (0+255),b
 14795  00451E  EE20 F016          	lfsr	2,22
 14796  004522  5175               	movf	clust2sect@fs& (0+255),w,b
 14797  004524  26D9               	addwf	fsr2l,f,c
 14798  004526  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 14799  004528  22DA               	addwfc	fsr2h,f,c
 14800  00452A  CFDE F072          	movff	postinc2,??_clust2sect+2
 14801  00452E  CFDD F073          	movff	postdec2,??_clust2sect+3
 14802  004532  5170               	movf	??_clust2sect& (0+255),w,b
 14803  004534  2772               	addwf	(??_clust2sect+2)& (0+255),f,b
 14804  004536  5171               	movf	(??_clust2sect+1)& (0+255),w,b
 14805  004538  2373               	addwfc	(??_clust2sect+3)& (0+255),f,b
 14806  00453A  5172               	movf	(??_clust2sect+2)& (0+255),w,b
 14807  00453C  5D6C               	subwf	clust2sect@clust& (0+255),w,b
 14808  00453E  5173               	movf	(??_clust2sect+3)& (0+255),w,b
 14809  004540  596D               	subwfb	(clust2sect@clust+1)& (0+255),w,b
 14810  004542  A0D8               	btfss	status,0,c
 14811  004544  D009               	goto	l851
 14812                           
 14813                           ; BSR set to: 0
 14814  004546  0E00               	movlw	0
 14815  004548  6F6C               	movwf	?_clust2sect& (0+255),b
 14816  00454A  0E00               	movlw	0
 14817  00454C  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
 14818  00454E  0E00               	movlw	0
 14819  004550  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
 14820  004552  0E00               	movlw	0
 14821  004554  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
 14822                           
 14823                           ; BSR set to: 0
 14824  004556  0012               	return	
 14825  004558                     l851:
 14826                           
 14827                           ; BSR set to: 0
 14828                           ;tff.c: 348: return (DWORD)clust * fs->csize + fs->database;
 14829                           
 14830                           ; BSR set to: 0
 14831  004558  EE20 F010          	lfsr	2,16
 14832  00455C  5175               	movf	clust2sect@fs& (0+255),w,b
 14833  00455E  26D9               	addwf	fsr2l,f,c
 14834  004560  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 14835  004562  22DA               	addwfc	fsr2h,f,c
 14836  004564  CFDE F070          	movff	postinc2,??_clust2sect
 14837  004568  CFDE F071          	movff	postinc2,??_clust2sect+1
 14838  00456C  CFDE F072          	movff	postinc2,??_clust2sect+2
 14839  004570  CFDE F073          	movff	postinc2,??_clust2sect+3
 14840  004574  C06C  F060         	movff	clust2sect@clust,___lmul@multiplier
 14841  004578  C06D  F061         	movff	clust2sect@clust+1,___lmul@multiplier+1
 14842  00457C  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
 14843  00457E  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
 14844  004580  EE20 F01D          	lfsr	2,29
 14845  004584  5175               	movf	clust2sect@fs& (0+255),w,b
 14846  004586  26D9               	addwf	fsr2l,f,c
 14847  004588  5176               	movf	(clust2sect@fs+1)& (0+255),w,b
 14848  00458A  22DA               	addwfc	fsr2h,f,c
 14849  00458C  50DF               	movf	indf2,w,c
 14850  00458E  6F74               	movwf	(??_clust2sect+4)& (0+255),b
 14851  004590  5174               	movf	(??_clust2sect+4)& (0+255),w,b
 14852  004592  6F64               	movwf	___lmul@multiplicand& (0+255),b
 14853  004594  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
 14854  004596  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
 14855  004598  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
 14856  00459A  ECBD  F02A         	call	___lmul	;wreg free
 14857  00459E  0100               	movlb	0	; () banked
 14858  0045A0  5170               	movf	??_clust2sect& (0+255),w,b
 14859  0045A2  2560               	addwf	?___lmul& (0+255),w,b
 14860  0045A4  6F6C               	movwf	?_clust2sect& (0+255),b
 14861  0045A6  5171               	movf	(??_clust2sect+1)& (0+255),w,b
 14862  0045A8  2161               	addwfc	(?___lmul+1)& (0+255),w,b
 14863  0045AA  6F6D               	movwf	(?_clust2sect+1)& (0+255),b
 14864  0045AC  5172               	movf	(??_clust2sect+2)& (0+255),w,b
 14865  0045AE  2162               	addwfc	(?___lmul+2)& (0+255),w,b
 14866  0045B0  6F6E               	movwf	(?_clust2sect+2)& (0+255),b
 14867  0045B2  5173               	movf	(??_clust2sect+3)& (0+255),w,b
 14868  0045B4  2163               	addwfc	(?___lmul+3)& (0+255),w,b
 14869  0045B6  6F6F               	movwf	(?_clust2sect+3)& (0+255),b
 14870  0045B8  0012               	return	
 14871  0045BA                     __end_of_clust2sect:
 14872                           	opt stack 0
 14873                           tosu	equ	0xFFF
 14874                           tosh	equ	0xFFE
 14875                           tosl	equ	0xFFD
 14876                           pclath	equ	0xFFA
 14877                           tblptru	equ	0xFF8
 14878                           tblptrh	equ	0xFF7
 14879                           tblptrl	equ	0xFF6
 14880                           tablat	equ	0xFF5
 14881                           prodh	equ	0xFF4
 14882                           prodl	equ	0xFF3
 14883                           intcon	equ	0xFF2
 14884                           intcon2	equ	0xFF1
 14885                           intcon3	equ	0xFF0
 14886                           indf0	equ	0xFEF
 14887                           postinc0	equ	0xFEE
 14888                           fsr0h	equ	0xFEA
 14889                           fsr0l	equ	0xFE9
 14890                           wreg	equ	0xFE8
 14891                           indf1	equ	0xFE7
 14892                           postinc1	equ	0xFE6
 14893                           postdec1	equ	0xFE5
 14894                           plusw1	equ	0xFE3
 14895                           fsr1h	equ	0xFE2
 14896                           fsr1l	equ	0xFE1
 14897                           indf2	equ	0xFDF
 14898                           postinc2	equ	0xFDE
 14899                           postdec2	equ	0xFDD
 14900                           plusw2	equ	0xFDB
 14901                           fsr2h	equ	0xFDA
 14902                           fsr2l	equ	0xFD9
 14903                           status	equ	0xFD8
 14904                           
 14905 ;; *************** function _remove_chain *****************
 14906 ;; Defined at:
 14907 ;;		line 250 in file "bibliotecas/tff.c"
 14908 ;; Parameters:    Size  Location     Type
 14909 ;;  clust           2   86[BANK0 ] unsigned short 
 14910 ;; Auto vars:     Size  Location     Type
 14911 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
 14912 ;;		 -> NULL(0), fs(544), 
 14913 ;;  nxt             2   90[BANK0 ] unsigned short 
 14914 ;; Return value:  Size  Location     Type
 14915 ;;                  1    wreg      enum E105
 14916 ;; Registers used:
 14917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14918 ;; Tracked objects:
 14919 ;;		On entry : 0/0
 14920 ;;		On exit  : 0/0
 14921 ;;		Unchanged: 0/0
 14922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14923 ;;      Params:         0       2       0       0       0       0       0       0       0
 14924 ;;      Locals:         0       4       0       0       0       0       0       0       0
 14925 ;;      Temps:          0       2       0       0       0       0       0       0       0
 14926 ;;      Totals:         0       8       0       0       0       0       0       0       0
 14927 ;;Total ram usage:        8 bytes
 14928 ;; Hardware stack levels used:    1
 14929 ;; Hardware stack levels required when called:   10
 14930 ;; This function calls:
 14931 ;;		_get_cluster
 14932 ;;		_put_cluster
 14933 ;; This function is called by:
 14934 ;;		_f_open
 14935 ;; This function uses a non-reentrant model
 14936 ;;
 14937                           
 14938                           	psect	text59
 14939  004880                     __ptext59:
 14940                           	opt stack 0
 14941  004880                     _remove_chain:
 14942                           	opt stack 15
 14943                           
 14944                           ;tff.c: 254: CLUST nxt;
 14945                           ;tff.c: 255: FATFS *fs = FatFs;
 14946                           
 14947                           ; BSR set to: 0
 14948                           ;incstack = 0
 14949  004880  C0F6  F0BC         	movff	_FatFs,remove_chain@fs
 14950  004884  C0F7  F0BD         	movff	_FatFs+1,remove_chain@fs+1
 14951                           
 14952                           ;tff.c: 258: while (clust >= 2 && clust < fs->max_clust) {
 14953  004888  D039               	goto	l820
 14954  00488A                     
 14955                           ;tff.c: 259: nxt = get_cluster(clust);
 14956  00488A  C0B6  F0A0         	movff	remove_chain@clust,get_cluster@clust
 14957  00488E  C0B7  F0A1         	movff	remove_chain@clust+1,get_cluster@clust+1
 14958  004892  EC51  F015         	call	_get_cluster	;wreg free
 14959  004896  C0A0  F0BA         	movff	?_get_cluster,remove_chain@nxt
 14960  00489A  C0A1  F0BB         	movff	?_get_cluster+1,remove_chain@nxt+1
 14961                           
 14962                           ;tff.c: 260: if (nxt == 1) return FALSE;
 14963  00489E  0100               	movlb	0	; () banked
 14964  0048A0  05BA               	decf	remove_chain@nxt& (0+255),w,b
 14965  0048A2  11BB               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
 14966  0048A4  A4D8               	btfss	status,2,c
 14967  0048A6  D002               	goto	l822
 14968                           
 14969                           ; BSR set to: 0
 14970  0048A8  0E00               	movlw	0
 14971                           
 14972                           ; BSR set to: 0
 14973  0048AA  0012               	return	
 14974  0048AC                     l822:
 14975                           
 14976                           ; BSR set to: 0
 14977                           ;tff.c: 261: if (!put_cluster(clust, 0)) return FALSE;
 14978                           
 14979                           ; BSR set to: 0
 14980  0048AC  C0B6  F0A0         	movff	remove_chain@clust,put_cluster@clust
 14981  0048B0  C0B7  F0A1         	movff	remove_chain@clust+1,put_cluster@clust+1
 14982  0048B4  0E00               	movlw	0
 14983  0048B6  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
 14984  0048B8  0E00               	movlw	0
 14985  0048BA  6FA2               	movwf	put_cluster@val& (0+255),b
 14986  0048BC  ECD8  F012         	call	_put_cluster	;wreg free
 14987  0048C0  0900               	iorlw	0
 14988  0048C2  A4D8               	btfss	status,2,c
 14989  0048C4  D002               	goto	l824
 14990  0048C6  0E00               	movlw	0
 14991  0048C8  0012               	return	
 14992  0048CA                     l824:
 14993                           
 14994                           ;tff.c: 262: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 14995  0048CA  0100               	movlb	0	; () banked
 14996  0048CC  EE20 F01A          	lfsr	2,26
 14997  0048D0  51BC               	movf	remove_chain@fs& (0+255),w,b
 14998  0048D2  26D9               	addwf	fsr2l,f,c
 14999  0048D4  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 15000  0048D6  22DA               	addwfc	fsr2h,f,c
 15001  0048D8  28DE               	incf	postinc2,w,c
 15002  0048DA  E103               	bnz	u15490
 15003  0048DC  28DE               	incf	postinc2,w,c
 15004  0048DE  B4D8               	btfsc	status,2,c
 15005  0048E0  D009               	goto	l825
 15006  0048E2                     u15490:
 15007                           
 15008                           ; BSR set to: 0
 15009                           ;tff.c: 263: fs->free_clust++;
 15010  0048E2  EE20 F01A          	lfsr	2,26
 15011  0048E6  51BC               	movf	remove_chain@fs& (0+255),w,b
 15012  0048E8  26D9               	addwf	fsr2l,f,c
 15013  0048EA  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 15014  0048EC  22DA               	addwfc	fsr2h,f,c
 15015  0048EE  2ADE               	incf	postinc2,f,c
 15016  0048F0  0E00               	movlw	0
 15017  0048F2  22DD               	addwfc	postdec2,f,c
 15018  0048F4                     l825:
 15019                           
 15020                           ; BSR set to: 0
 15021                           ;tff.c: 267: }
 15022                           ;tff.c: 268: clust = nxt;
 15023                           
 15024                           ; BSR set to: 0
 15025  0048F4  C0BA  F0B6         	movff	remove_chain@nxt,remove_chain@clust
 15026  0048F8  C0BB  F0B7         	movff	remove_chain@nxt+1,remove_chain@clust+1
 15027  0048FC                     l820:
 15028                           
 15029                           ; BSR set to: 0
 15030  0048FC  0100               	movlb	0	; () banked
 15031  0048FE  51B7               	movf	(remove_chain@clust+1)& (0+255),w,b
 15032  004900  E104               	bnz	u15500
 15033  004902  0E02               	movlw	2
 15034  004904  5DB6               	subwf	remove_chain@clust& (0+255),w,b
 15035  004906  A0D8               	btfss	status,0,c
 15036  004908  D00C               	goto	u15510
 15037  00490A                     u15500:
 15038                           
 15039                           ; BSR set to: 0
 15040  00490A  EE20 F016          	lfsr	2,22
 15041  00490E  51BC               	movf	remove_chain@fs& (0+255),w,b
 15042  004910  26D9               	addwf	fsr2l,f,c
 15043  004912  51BD               	movf	(remove_chain@fs+1)& (0+255),w,b
 15044  004914  22DA               	addwfc	fsr2h,f,c
 15045  004916  50DE               	movf	postinc2,w,c
 15046  004918  5DB6               	subwf	remove_chain@clust& (0+255),w,b
 15047  00491A  50DE               	movf	postinc2,w,c
 15048  00491C  59B7               	subwfb	(remove_chain@clust+1)& (0+255),w,b
 15049  00491E  A0D8               	btfss	status,0,c
 15050  004920  D7B4               	goto	l821
 15051  004922                     u15510:
 15052                           
 15053                           ; BSR set to: 0
 15054                           ;tff.c: 269: }
 15055                           ;tff.c: 270: return TRUE;
 15056                           
 15057                           ; BSR set to: 0
 15058                           
 15059                           ; BSR set to: 0
 15060  004922  0E01               	movlw	1
 15061  004924  0012               	return	
 15062  004926                     __end_of_remove_chain:
 15063                           	opt stack 0
 15064                           tosu	equ	0xFFF
 15065                           tosh	equ	0xFFE
 15066                           tosl	equ	0xFFD
 15067                           pclath	equ	0xFFA
 15068                           tblptru	equ	0xFF8
 15069                           tblptrh	equ	0xFF7
 15070                           tblptrl	equ	0xFF6
 15071                           tablat	equ	0xFF5
 15072                           prodh	equ	0xFF4
 15073                           prodl	equ	0xFF3
 15074                           intcon	equ	0xFF2
 15075                           intcon2	equ	0xFF1
 15076                           intcon3	equ	0xFF0
 15077                           indf0	equ	0xFEF
 15078                           postinc0	equ	0xFEE
 15079                           fsr0h	equ	0xFEA
 15080                           fsr0l	equ	0xFE9
 15081                           wreg	equ	0xFE8
 15082                           indf1	equ	0xFE7
 15083                           postinc1	equ	0xFE6
 15084                           postdec1	equ	0xFE5
 15085                           plusw1	equ	0xFE3
 15086                           fsr1h	equ	0xFE2
 15087                           fsr1l	equ	0xFE1
 15088                           indf2	equ	0xFDF
 15089                           postinc2	equ	0xFDE
 15090                           postdec2	equ	0xFDD
 15091                           plusw2	equ	0xFDB
 15092                           fsr2h	equ	0xFDA
 15093                           fsr2l	equ	0xFD9
 15094                           status	equ	0xFD8
 15095                           
 15096 ;; *************** function _memcpy *****************
 15097 ;; Defined at:
 15098 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
 15099 ;; Parameters:    Size  Location     Type
 15100 ;;  d1              2    0[BANK0 ] PTR void 
 15101 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 15102 ;;  s1              2    2[BANK0 ] PTR const void 
 15103 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 15104 ;;		 -> fs(544), 
 15105 ;;  n               2    4[BANK0 ] unsigned int 
 15106 ;; Auto vars:     Size  Location     Type
 15107 ;;  s               2    9[BANK0 ] PTR const unsigned char 
 15108 ;;		 -> fs.win(512), fputc@c(1), f_open@fn(12), NULL(0), 
 15109 ;;		 -> fs(544), 
 15110 ;;  d               2    7[BANK0 ] PTR unsigned char 
 15111 ;;		 -> fs.win(512), NULL(0), dado_arquivo(20), fs(544), 
 15112 ;;  tmp             1    6[BANK0 ] unsigned char 
 15113 ;; Return value:  Size  Location     Type
 15114 ;;                  2    0[BANK0 ] PTR void 
 15115 ;; Registers used:
 15116 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15117 ;; Tracked objects:
 15118 ;;		On entry : 0/0
 15119 ;;		On exit  : 0/0
 15120 ;;		Unchanged: 0/0
 15121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15122 ;;      Params:         0       6       0       0       0       0       0       0       0
 15123 ;;      Locals:         0       5       0       0       0       0       0       0       0
 15124 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15125 ;;      Totals:         0      11       0       0       0       0       0       0       0
 15126 ;;Total ram usage:       11 bytes
 15127 ;; Hardware stack levels used:    1
 15128 ;; Hardware stack levels required when called:    3
 15129 ;; This function calls:
 15130 ;;		Nothing
 15131 ;; This function is called by:
 15132 ;;		_f_open
 15133 ;;		_f_write
 15134 ;;		_f_read
 15135 ;; This function uses a non-reentrant model
 15136 ;;
 15137                           
 15138                           	psect	text60
 15139  0058EC                     __ptext60:
 15140                           	opt stack 0
 15141  0058EC                     _memcpy:
 15142                           	opt stack 19
 15143                           
 15144                           ;incstack = 0
 15145  0058EC  C062  F069         	movff	memcpy@s1,memcpy@s
 15146  0058F0  C063  F06A         	movff	memcpy@s1+1,memcpy@s+1
 15147  0058F4  C060  F067         	movff	memcpy@d1,memcpy@d
 15148  0058F8  C061  F068         	movff	memcpy@d1+1,memcpy@d+1
 15149  0058FC  D011               	goto	l2119
 15150  0058FE                     l11156:
 15151  0058FE  C069  FFD9         	movff	memcpy@s,fsr2l
 15152  005902  C06A  FFDA         	movff	memcpy@s+1,fsr2h
 15153  005906  50DF               	movf	indf2,w,c
 15154  005908  0100               	movlb	0	; () banked
 15155  00590A  6F66               	movwf	memcpy@tmp& (0+255),b
 15156                           
 15157                           ; BSR set to: 0
 15158  00590C  4B69               	infsnz	memcpy@s& (0+255),f,b
 15159  00590E  2B6A               	incf	(memcpy@s+1)& (0+255),f,b
 15160                           
 15161                           ; BSR set to: 0
 15162  005910  C067  FFD9         	movff	memcpy@d,fsr2l
 15163  005914  C068  FFDA         	movff	memcpy@d+1,fsr2h
 15164  005918  C066  FFDF         	movff	memcpy@tmp,indf2
 15165                           
 15166                           ; BSR set to: 0
 15167  00591C  4B67               	infsnz	memcpy@d& (0+255),f,b
 15168  00591E  2B68               	incf	(memcpy@d+1)& (0+255),f,b
 15169  005920                     l2119:
 15170                           
 15171                           ; BSR set to: 0
 15172  005920  0100               	movlb	0	; () banked
 15173  005922  0764               	decf	memcpy@n& (0+255),f,b
 15174  005924  A0D8               	btfss	status,0,c
 15175  005926  0765               	decf	(memcpy@n+1)& (0+255),f,b
 15176  005928  2964               	incf	memcpy@n& (0+255),w,b
 15177  00592A  E1E9               	bnz	l11156
 15178  00592C  2965               	incf	(memcpy@n+1)& (0+255),w,b
 15179  00592E  B4D8               	btfsc	status,2,c
 15180  005930  0012               	return	
 15181  005932  D7E5               	goto	l2120
 15182  005934                     __end_of_memcpy:
 15183                           	opt stack 0
 15184                           tosu	equ	0xFFF
 15185                           tosh	equ	0xFFE
 15186                           tosl	equ	0xFFD
 15187                           pclath	equ	0xFFA
 15188                           tblptru	equ	0xFF8
 15189                           tblptrh	equ	0xFF7
 15190                           tblptrl	equ	0xFF6
 15191                           tablat	equ	0xFF5
 15192                           prodh	equ	0xFF4
 15193                           prodl	equ	0xFF3
 15194                           intcon	equ	0xFF2
 15195                           intcon2	equ	0xFF1
 15196                           intcon3	equ	0xFF0
 15197                           indf0	equ	0xFEF
 15198                           postinc0	equ	0xFEE
 15199                           fsr0h	equ	0xFEA
 15200                           fsr0l	equ	0xFE9
 15201                           wreg	equ	0xFE8
 15202                           indf1	equ	0xFE7
 15203                           postinc1	equ	0xFE6
 15204                           postdec1	equ	0xFE5
 15205                           plusw1	equ	0xFE3
 15206                           fsr1h	equ	0xFE2
 15207                           fsr1l	equ	0xFE1
 15208                           indf2	equ	0xFDF
 15209                           postinc2	equ	0xFDE
 15210                           postdec2	equ	0xFDD
 15211                           plusw2	equ	0xFDB
 15212                           fsr2h	equ	0xFDA
 15213                           fsr2l	equ	0xFD9
 15214                           status	equ	0xFD8
 15215                           
 15216 ;; *************** function _auto_mount *****************
 15217 ;; Defined at:
 15218 ;;		line 652 in file "bibliotecas/tff.c"
 15219 ;; Parameters:    Size  Location     Type
 15220 ;;  path            2   51[BANK0 ] PTR PTR const unsigned c
 15221 ;;		 -> f_opendir@path(2), f_open@path(2), 
 15222 ;;  chk_wp          1   53[BANK0 ] unsigned char 
 15223 ;; Auto vars:     Size  Location     Type
 15224 ;;  fatsize         4   85[BANK0 ] unsigned long 
 15225 ;;  totalsect       4   77[BANK0 ] unsigned long 
 15226 ;;  bootsect        4   73[BANK0 ] unsigned long 
 15227 ;;  maxclust        4   69[BANK0 ] unsigned long 
 15228 ;;  fs              2   89[BANK0 ] PTR struct _FATFS
 15229 ;;		 -> NULL(0), fs(544), 
 15230 ;;  p               2   81[BANK0 ] PTR const unsigned char 
 15231 ;;		 -> STR_22(13), filename(20), 
 15232 ;;  stat            1   84[BANK0 ] unsigned char 
 15233 ;;  fmt             1   83[BANK0 ] unsigned char 
 15234 ;; Return value:  Size  Location     Type
 15235 ;;                  1    wreg      enum E155
 15236 ;; Registers used:
 15237 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15238 ;; Tracked objects:
 15239 ;;		On entry : 0/0
 15240 ;;		On exit  : 0/0
 15241 ;;		Unchanged: 0/0
 15242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15243 ;;      Params:         0       3       0       0       0       0       0       0       0
 15244 ;;      Locals:         0      22       0       0       0       0       0       0       0
 15245 ;;      Temps:          0      15       0       0       0       0       0       0       0
 15246 ;;      Totals:         0      40       0       0       0       0       0       0       0
 15247 ;;Total ram usage:       40 bytes
 15248 ;; Hardware stack levels used:    1
 15249 ;; Hardware stack levels required when called:    9
 15250 ;; This function calls:
 15251 ;;		___lldiv
 15252 ;;		___lmul
 15253 ;;		_check_fs
 15254 ;;		_disk_initialize
 15255 ;;		_disk_status
 15256 ;;		_memset
 15257 ;; This function is called by:
 15258 ;;		_f_open
 15259 ;;		_f_opendir
 15260 ;; This function uses a non-reentrant model
 15261 ;;
 15262                           
 15263                           	psect	text61
 15264  0005CC                     __ptext61:
 15265                           	opt stack 0
 15266  0005CC                     _auto_mount:
 15267                           	opt stack 16
 15268                           
 15269                           ;tff.c: 657: BYTE fmt;
 15270                           ;tff.c: 658: DSTATUS stat;
 15271                           ;tff.c: 659: DWORD bootsect, fatsize, totalsect, maxclust;
 15272                           ;tff.c: 660: const char *p = *path;
 15273                           
 15274                           ; BSR set to: 0
 15275                           ;incstack = 0
 15276  0005CC  C093  FFD9         	movff	auto_mount@path,fsr2l
 15277  0005D0  C094  FFDA         	movff	auto_mount@path+1,fsr2h
 15278  0005D4  CFDE F0B1          	movff	postinc2,auto_mount@p
 15279  0005D8  CFDD F0B2          	movff	postdec2,auto_mount@p+1
 15280                           
 15281                           ;tff.c: 661: FATFS *fs;
 15282                           ;tff.c: 664: while (*p == ' ') p++;
 15283  0005DC  D003               	goto	l980
 15284  0005DE  0100               	movlb	0	; () banked
 15285  0005E0  4BB1               	infsnz	auto_mount@p& (0+255),f,b
 15286  0005E2  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
 15287  0005E4                     l980:
 15288                           
 15289                           ; BSR set to: 0
 15290  0005E4  C0B1  FFF6         	movff	auto_mount@p,tblptrl
 15291  0005E8  C0B2  FFF7         	movff	auto_mount@p+1,tblptrh
 15292  0005EC  6AF8               	clrf	tblptru,c
 15293  0005EE  0E07               	movlw	(high __ramtop+-1)
 15294  0005F0  64F7               	cpfsgt	tblptrh,c
 15295  0005F2  D003               	bra	u15787
 15296  0005F4  0008               	tblrd		*
 15297  0005F6  50F5               	movf	tablat,w,c
 15298  0005F8  D005               	bra	u15780
 15299  0005FA                     u15787:
 15300  0005FA  CFF6 FFE9          	movff	tblptrl,fsr0l
 15301  0005FE  CFF7 FFEA          	movff	tblptrh,fsr0h
 15302  000602  50EF               	movf	indf0,w,c
 15303  000604                     u15780:
 15304  000604  0A20               	xorlw	32
 15305  000606  B4D8               	btfsc	status,2,c
 15306  000608  D7EA               	goto	l981
 15307                           
 15308                           ;tff.c: 665: if (*p == '/') p++;
 15309  00060A  C0B1  FFF6         	movff	auto_mount@p,tblptrl
 15310  00060E  C0B2  FFF7         	movff	auto_mount@p+1,tblptrh
 15311  000612  6AF8               	clrf	tblptru,c
 15312  000614  0E07               	movlw	(high __ramtop+-1)
 15313  000616  64F7               	cpfsgt	tblptrh,c
 15314  000618  D003               	bra	u15807
 15315  00061A  0008               	tblrd		*
 15316  00061C  50F5               	movf	tablat,w,c
 15317  00061E  D005               	bra	u15800
 15318  000620                     u15807:
 15319  000620  CFF6 FFE9          	movff	tblptrl,fsr0l
 15320  000624  CFF7 FFEA          	movff	tblptrh,fsr0h
 15321  000628  50EF               	movf	indf0,w,c
 15322  00062A                     u15800:
 15323  00062A  0A2F               	xorlw	47
 15324  00062C  A4D8               	btfss	status,2,c
 15325  00062E  D003               	goto	l983
 15326  000630  0100               	movlb	0	; () banked
 15327  000632  4BB1               	infsnz	auto_mount@p& (0+255),f,b
 15328  000634  2BB2               	incf	(auto_mount@p+1)& (0+255),f,b
 15329  000636                     l983:
 15330                           
 15331                           ;tff.c: 666: *path = p;
 15332                           
 15333                           ; BSR set to: 0
 15334  000636  C093  FFD9         	movff	auto_mount@path,fsr2l
 15335  00063A  C094  FFDA         	movff	auto_mount@path+1,fsr2h
 15336  00063E  C0B1  FFDE         	movff	auto_mount@p,postinc2
 15337  000642  C0B2  FFDD         	movff	auto_mount@p+1,postdec2
 15338                           
 15339                           ;tff.c: 669: fs = FatFs;
 15340  000646  C0F6  F0B9         	movff	_FatFs,auto_mount@fs
 15341  00064A  C0F7  F0BA         	movff	_FatFs+1,auto_mount@fs+1
 15342                           
 15343                           ;tff.c: 670: if (!fs) return FR_NOT_ENABLED;
 15344  00064E  0100               	movlb	0	; () banked
 15345  000650  51B9               	movf	auto_mount@fs& (0+255),w,b
 15346  000652  11BA               	iorwf	(auto_mount@fs+1)& (0+255),w,b
 15347  000654  A4D8               	btfss	status,2,c
 15348  000656  D002               	goto	l984
 15349                           
 15350                           ; BSR set to: 0
 15351  000658  0E0A               	movlw	10
 15352                           
 15353                           ; BSR set to: 0
 15354  00065A  0012               	return	
 15355  00065C                     l984:
 15356                           
 15357                           ; BSR set to: 0
 15358                           ;tff.c: 672: if (fs->fs_type) {
 15359                           
 15360                           ; BSR set to: 0
 15361  00065C  EE20 F01C          	lfsr	2,28
 15362  000660  51B9               	movf	auto_mount@fs& (0+255),w,b
 15363  000662  26D9               	addwf	fsr2l,f,c
 15364  000664  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15365  000666  22DA               	addwfc	fsr2h,f,c
 15366  000668  50DF               	movf	indf2,w,c
 15367  00066A  B4D8               	btfsc	status,2,c
 15368  00066C  D00F               	goto	l987
 15369                           
 15370                           ; BSR set to: 0
 15371                           ;tff.c: 673: stat = disk_status(0);
 15372  00066E  0E00               	movlw	0
 15373  000670  EC9A  F02C         	call	_disk_status
 15374  000674  0100               	movlb	0	; () banked
 15375  000676  6FB4               	movwf	auto_mount@stat& (0+255),b
 15376                           
 15377                           ; BSR set to: 0
 15378                           ;tff.c: 674: if (!(stat & 0x01)) {
 15379  000678  B1B4               	btfsc	auto_mount@stat& (0+255),0,b
 15380  00067A  D008               	goto	l987
 15381                           
 15382                           ; BSR set to: 0
 15383                           ;tff.c: 676: if (chk_wp && (stat & 0x04))
 15384  00067C  5195               	movf	auto_mount@chk_wp& (0+255),w,b
 15385  00067E  A4D8               	btfss	status,2,c
 15386                           
 15387                           ; BSR set to: 0
 15388  000680  A5B4               	btfss	auto_mount@stat& (0+255),2,b
 15389  000682  D002               	goto	l988
 15390                           
 15391                           ; BSR set to: 0
 15392                           ;tff.c: 677: return FR_WRITE_PROTECTED;
 15393  000684  0E09               	movlw	9
 15394                           
 15395                           ; BSR set to: 0
 15396  000686  0012               	return	
 15397  000688                     l988:
 15398                           
 15399                           ; BSR set to: 0
 15400                           ;tff.c: 679: return FR_OK;
 15401                           
 15402                           ; BSR set to: 0
 15403  000688  0E00               	movlw	0
 15404                           
 15405                           ; BSR set to: 0
 15406  00068A  0012               	return	
 15407  00068C                     l987:
 15408                           
 15409                           ; BSR set to: 0
 15410                           ;tff.c: 680: }
 15411                           ;tff.c: 681: }
 15412                           ;tff.c: 685: memset(fs, 0, sizeof(FATFS));
 15413                           
 15414                           ; BSR set to: 0
 15415                           
 15416                           ; BSR set to: 0
 15417  00068C  C0B9  F060         	movff	auto_mount@fs,memset@p1
 15418  000690  C0BA  F061         	movff	auto_mount@fs+1,memset@p1+1
 15419  000694  0E00               	movlw	0
 15420  000696  6F63               	movwf	(memset@c+1)& (0+255),b
 15421  000698  0E00               	movlw	0
 15422  00069A  6F62               	movwf	memset@c& (0+255),b
 15423  00069C  0E02               	movlw	2
 15424  00069E  6F65               	movwf	(memset@n+1)& (0+255),b
 15425  0006A0  0E20               	movlw	32
 15426  0006A2  6F64               	movwf	memset@n& (0+255),b
 15427  0006A4  EC5F  F02E         	call	_memset	;wreg free
 15428                           
 15429                           ;tff.c: 686: stat = disk_initialize(0);
 15430  0006A8  0E00               	movlw	0
 15431  0006AA  EC04  F02D         	call	_disk_initialize
 15432  0006AE  0100               	movlb	0	; () banked
 15433  0006B0  6FB4               	movwf	auto_mount@stat& (0+255),b
 15434                           
 15435                           ; BSR set to: 0
 15436                           ;tff.c: 687: if (stat & 0x01)
 15437  0006B2  A1B4               	btfss	auto_mount@stat& (0+255),0,b
 15438  0006B4  D002               	goto	l989
 15439                           
 15440                           ; BSR set to: 0
 15441                           ;tff.c: 688: return FR_NOT_READY;
 15442  0006B6  0E01               	movlw	1
 15443                           
 15444                           ; BSR set to: 0
 15445  0006B8  0012               	return	
 15446  0006BA                     l989:
 15447                           
 15448                           ; BSR set to: 0
 15449                           ;tff.c: 690: if (chk_wp && (stat & 0x04))
 15450                           
 15451                           ; BSR set to: 0
 15452  0006BA  5195               	movf	auto_mount@chk_wp& (0+255),w,b
 15453  0006BC  A4D8               	btfss	status,2,c
 15454                           
 15455                           ; BSR set to: 0
 15456  0006BE  A5B4               	btfss	auto_mount@stat& (0+255),2,b
 15457  0006C0  D002               	goto	l990
 15458                           
 15459                           ; BSR set to: 0
 15460                           ;tff.c: 691: return FR_WRITE_PROTECTED;
 15461  0006C2  0E09               	movlw	9
 15462                           
 15463                           ; BSR set to: 0
 15464  0006C4  0012               	return	
 15465  0006C6                     l990:
 15466                           
 15467                           ; BSR set to: 0
 15468                           ;tff.c: 695: fmt = check_fs(bootsect = 0);
 15469                           
 15470                           ; BSR set to: 0
 15471  0006C6  0E00               	movlw	0
 15472  0006C8  6FA9               	movwf	auto_mount@bootsect& (0+255),b
 15473  0006CA  0E00               	movlw	0
 15474  0006CC  6FAA               	movwf	(auto_mount@bootsect+1)& (0+255),b
 15475  0006CE  0E00               	movlw	0
 15476  0006D0  6FAB               	movwf	(auto_mount@bootsect+2)& (0+255),b
 15477  0006D2  0E00               	movlw	0
 15478  0006D4  6FAC               	movwf	(auto_mount@bootsect+3)& (0+255),b
 15479  0006D6  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
 15480  0006DA  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
 15481  0006DE  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
 15482  0006E2  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
 15483  0006E6  EC08  F027         	call	_check_fs	;wreg free
 15484  0006EA  0100               	movlb	0	; () banked
 15485  0006EC  6FB3               	movwf	auto_mount@fmt& (0+255),b
 15486                           
 15487                           ; BSR set to: 0
 15488                           ;tff.c: 697: if (fmt == 1) {
 15489  0006EE  05B3               	decf	auto_mount@fmt& (0+255),w,b
 15490  0006F0  A4D8               	btfss	status,2,c
 15491  0006F2  D023               	goto	l992
 15492                           
 15493                           ; BSR set to: 0
 15494                           ;tff.c: 699: if (fs->win[446+4]) {
 15495  0006F4  EE21 F0E2          	lfsr	2,482
 15496  0006F8  51B9               	movf	auto_mount@fs& (0+255),w,b
 15497  0006FA  26D9               	addwf	fsr2l,f,c
 15498  0006FC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15499  0006FE  22DA               	addwfc	fsr2h,f,c
 15500  000700  50DF               	movf	indf2,w,c
 15501  000702  B4D8               	btfsc	status,2,c
 15502  000704  D01A               	goto	l992
 15503                           
 15504                           ; BSR set to: 0
 15505                           ;tff.c: 700: bootsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[446+8]));
 15506  000706  EE21 F0E6          	lfsr	2,486
 15507  00070A  51B9               	movf	auto_mount@fs& (0+255),w,b
 15508  00070C  26D9               	addwf	fsr2l,f,c
 15509  00070E  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15510  000710  22DA               	addwfc	fsr2h,f,c
 15511  000712  CFDE F0A9          	movff	postinc2,auto_mount@bootsect
 15512  000716  CFDE F0AA          	movff	postinc2,auto_mount@bootsect+1
 15513  00071A  CFDE F0AB          	movff	postinc2,auto_mount@bootsect+2
 15514  00071E  CFDE F0AC          	movff	postinc2,auto_mount@bootsect+3
 15515                           
 15516                           ; BSR set to: 0
 15517                           ;tff.c: 701: fmt = check_fs(bootsect);
 15518  000722  C0A9  F08B         	movff	auto_mount@bootsect,check_fs@sect
 15519  000726  C0AA  F08C         	movff	auto_mount@bootsect+1,check_fs@sect+1
 15520  00072A  C0AB  F08D         	movff	auto_mount@bootsect+2,check_fs@sect+2
 15521  00072E  C0AC  F08E         	movff	auto_mount@bootsect+3,check_fs@sect+3
 15522  000732  EC08  F027         	call	_check_fs	;wreg free
 15523  000736  0100               	movlb	0	; () banked
 15524  000738  6FB3               	movwf	auto_mount@fmt& (0+255),b
 15525  00073A                     l992:
 15526                           
 15527                           ; BSR set to: 0
 15528                           ;tff.c: 702: }
 15529                           ;tff.c: 703: }
 15530                           ;tff.c: 704: if (fmt || (WORD)(*(WORD*)(BYTE*)(&fs->win[11])) != 512U)
 15531                           
 15532                           ; BSR set to: 0
 15533                           
 15534                           ; BSR set to: 0
 15535  00073A  51B3               	movf	auto_mount@fmt& (0+255),w,b
 15536  00073C  A4D8               	btfss	status,2,c
 15537  00073E  D00C               	goto	u15930
 15538                           
 15539                           ; BSR set to: 0
 15540  000740  EE20 F02B          	lfsr	2,43
 15541  000744  51B9               	movf	auto_mount@fs& (0+255),w,b
 15542  000746  26D9               	addwf	fsr2l,f,c
 15543  000748  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15544  00074A  22DA               	addwfc	fsr2h,f,c
 15545  00074C  50DE               	movf	postinc2,w,c
 15546  00074E  E104               	bnz	l12264
 15547  000750  0E02               	movlw	2
 15548  000752  18DE               	xorwf	postinc2,w,c
 15549  000754  B4D8               	btfsc	status,2,c
 15550  000756  D002               	goto	l993
 15551  000758                     u15930:
 15552  000758                     l12264:
 15553                           
 15554                           ; BSR set to: 0
 15555                           ;tff.c: 705: return FR_NO_FILESYSTEM;
 15556  000758  0E0B               	movlw	11
 15557                           
 15558                           ; BSR set to: 0
 15559  00075A  0012               	return	
 15560  00075C                     l993:
 15561                           
 15562                           ; BSR set to: 0
 15563                           ;tff.c: 708: fatsize = (WORD)(*(WORD*)(BYTE*)(&fs->win[22]));
 15564                           
 15565                           ; BSR set to: 0
 15566  00075C  EE20 F036          	lfsr	2,54
 15567  000760  51B9               	movf	auto_mount@fs& (0+255),w,b
 15568  000762  26D9               	addwf	fsr2l,f,c
 15569  000764  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15570  000766  22DA               	addwfc	fsr2h,f,c
 15571  000768  CFDE F096          	movff	postinc2,??_auto_mount
 15572  00076C  CFDD F097          	movff	postdec2,??_auto_mount+1
 15573  000770  C096  F0B5         	movff	??_auto_mount,auto_mount@fatsize
 15574  000774  C097  F0B6         	movff	??_auto_mount+1,auto_mount@fatsize+1
 15575  000778  6BB7               	clrf	(auto_mount@fatsize+2)& (0+255),b
 15576  00077A  6BB8               	clrf	(auto_mount@fatsize+3)& (0+255),b
 15577                           
 15578                           ; BSR set to: 0
 15579                           ;tff.c: 709: if (!fatsize) fatsize = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[36]));
 15580  00077C  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 15581  00077E  11B6               	iorwf	(auto_mount@fatsize+1)& (0+255),w,b
 15582  000780  11B7               	iorwf	(auto_mount@fatsize+2)& (0+255),w,b
 15583  000782  11B8               	iorwf	(auto_mount@fatsize+3)& (0+255),w,b
 15584  000784  A4D8               	btfss	status,2,c
 15585  000786  D00E               	goto	l996
 15586                           
 15587                           ; BSR set to: 0
 15588  000788  EE20 F044          	lfsr	2,68
 15589  00078C  51B9               	movf	auto_mount@fs& (0+255),w,b
 15590  00078E  26D9               	addwf	fsr2l,f,c
 15591  000790  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15592  000792  22DA               	addwfc	fsr2h,f,c
 15593  000794  CFDE F0B5          	movff	postinc2,auto_mount@fatsize
 15594  000798  CFDE F0B6          	movff	postinc2,auto_mount@fatsize+1
 15595  00079C  CFDE F0B7          	movff	postinc2,auto_mount@fatsize+2
 15596  0007A0  CFDE F0B8          	movff	postinc2,auto_mount@fatsize+3
 15597  0007A4                     l996:
 15598                           
 15599                           ; BSR set to: 0
 15600                           ;tff.c: 710: fs->sects_fat = (CLUST)fatsize;
 15601  0007A4  EE20 F014          	lfsr	2,20
 15602  0007A8  51B9               	movf	auto_mount@fs& (0+255),w,b
 15603  0007AA  26D9               	addwf	fsr2l,f,c
 15604  0007AC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15605  0007AE  22DA               	addwfc	fsr2h,f,c
 15606  0007B0  C0B5  FFDE         	movff	auto_mount@fatsize,postinc2
 15607  0007B4  C0B6  FFDD         	movff	auto_mount@fatsize+1,postdec2
 15608                           
 15609                           ; BSR set to: 0
 15610                           ;tff.c: 711: fs->n_fats = fs->win[16];
 15611  0007B8  EE20 F030          	lfsr	2,48
 15612  0007BC  51B9               	movf	auto_mount@fs& (0+255),w,b
 15613  0007BE  26D9               	addwf	fsr2l,f,c
 15614  0007C0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15615  0007C2  22DA               	addwfc	fsr2h,f,c
 15616  0007C4  EE10 F01E          	lfsr	1,30
 15617  0007C8  51B9               	movf	auto_mount@fs& (0+255),w,b
 15618  0007CA  26E1               	addwf	fsr1l,f,c
 15619  0007CC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15620  0007CE  22E2               	addwfc	fsr1h,f,c
 15621  0007D0  CFDF FFE7          	movff	indf2,indf1
 15622                           
 15623                           ; BSR set to: 0
 15624                           ;tff.c: 712: fatsize *= fs->n_fats;
 15625  0007D4  C0B5  F060         	movff	auto_mount@fatsize,___lmul@multiplier
 15626  0007D8  C0B6  F061         	movff	auto_mount@fatsize+1,___lmul@multiplier+1
 15627  0007DC  C0B7  F062         	movff	auto_mount@fatsize+2,___lmul@multiplier+2
 15628  0007E0  C0B8  F063         	movff	auto_mount@fatsize+3,___lmul@multiplier+3
 15629  0007E4  EE20 F01E          	lfsr	2,30
 15630  0007E8  51B9               	movf	auto_mount@fs& (0+255),w,b
 15631  0007EA  26D9               	addwf	fsr2l,f,c
 15632  0007EC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15633  0007EE  22DA               	addwfc	fsr2h,f,c
 15634  0007F0  50DF               	movf	indf2,w,c
 15635  0007F2  6F96               	movwf	??_auto_mount& (0+255),b
 15636  0007F4  5196               	movf	??_auto_mount& (0+255),w,b
 15637  0007F6  6F64               	movwf	___lmul@multiplicand& (0+255),b
 15638  0007F8  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
 15639  0007FA  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
 15640  0007FC  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
 15641  0007FE  ECBD  F02A         	call	___lmul	;wreg free
 15642  000802  C060  F0B5         	movff	?___lmul,auto_mount@fatsize
 15643  000806  C061  F0B6         	movff	?___lmul+1,auto_mount@fatsize+1
 15644  00080A  C062  F0B7         	movff	?___lmul+2,auto_mount@fatsize+2
 15645  00080E  C063  F0B8         	movff	?___lmul+3,auto_mount@fatsize+3
 15646                           
 15647                           ;tff.c: 713: fs->fatbase = bootsect + (WORD)(*(WORD*)(BYTE*)(&fs->win[14]));
 15648  000812  0100               	movlb	0	; () banked
 15649  000814  EE20 F02E          	lfsr	2,46
 15650  000818  51B9               	movf	auto_mount@fs& (0+255),w,b
 15651  00081A  26D9               	addwf	fsr2l,f,c
 15652  00081C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15653  00081E  22DA               	addwfc	fsr2h,f,c
 15654  000820  CFDE F096          	movff	postinc2,??_auto_mount
 15655  000824  CFDD F097          	movff	postdec2,??_auto_mount+1
 15656  000828  5196               	movf	??_auto_mount& (0+255),w,b
 15657  00082A  25A9               	addwf	auto_mount@bootsect& (0+255),w,b
 15658  00082C  6F98               	movwf	(??_auto_mount+2)& (0+255),b
 15659  00082E  5197               	movf	(??_auto_mount+1)& (0+255),w,b
 15660  000830  21AA               	addwfc	(auto_mount@bootsect+1)& (0+255),w,b
 15661  000832  6F99               	movwf	(??_auto_mount+3)& (0+255),b
 15662  000834  0E00               	movlw	0
 15663  000836  21AB               	addwfc	(auto_mount@bootsect+2)& (0+255),w,b
 15664  000838  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
 15665  00083A  0E00               	movlw	0
 15666  00083C  21AC               	addwfc	(auto_mount@bootsect+3)& (0+255),w,b
 15667  00083E  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 15668  000840  EE20 F008          	lfsr	2,8
 15669  000844  51B9               	movf	auto_mount@fs& (0+255),w,b
 15670  000846  26D9               	addwf	fsr2l,f,c
 15671  000848  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15672  00084A  22DA               	addwfc	fsr2h,f,c
 15673  00084C  C098  FFDE         	movff	??_auto_mount+2,postinc2
 15674  000850  C099  FFDE         	movff	??_auto_mount+3,postinc2
 15675  000854  C09A  FFDE         	movff	??_auto_mount+4,postinc2
 15676  000858  C09B  FFDE         	movff	??_auto_mount+5,postinc2
 15677                           
 15678                           ; BSR set to: 0
 15679                           ;tff.c: 714: fs->csize = fs->win[13];
 15680  00085C  EE20 F02D          	lfsr	2,45
 15681  000860  51B9               	movf	auto_mount@fs& (0+255),w,b
 15682  000862  26D9               	addwf	fsr2l,f,c
 15683  000864  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15684  000866  22DA               	addwfc	fsr2h,f,c
 15685  000868  EE10 F01D          	lfsr	1,29
 15686  00086C  51B9               	movf	auto_mount@fs& (0+255),w,b
 15687  00086E  26E1               	addwf	fsr1l,f,c
 15688  000870  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15689  000872  22E2               	addwfc	fsr1h,f,c
 15690  000874  CFDF FFE7          	movff	indf2,indf1
 15691                           
 15692                           ; BSR set to: 0
 15693                           ;tff.c: 715: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(&fs->win[17]));
 15694  000878  EE20 F031          	lfsr	2,49
 15695  00087C  51B9               	movf	auto_mount@fs& (0+255),w,b
 15696  00087E  26D9               	addwf	fsr2l,f,c
 15697  000880  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15698  000882  22DA               	addwfc	fsr2h,f,c
 15699  000884  EE10 F002          	lfsr	1,2
 15700  000888  51B9               	movf	auto_mount@fs& (0+255),w,b
 15701  00088A  26E1               	addwf	fsr1l,f,c
 15702  00088C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15703  00088E  22E2               	addwfc	fsr1h,f,c
 15704  000890  CFDE FFE6          	movff	postinc2,postinc1
 15705  000894  CFDD FFE5          	movff	postdec2,postdec1
 15706                           
 15707                           ; BSR set to: 0
 15708                           ;tff.c: 716: totalsect = (WORD)(*(WORD*)(BYTE*)(&fs->win[19]));
 15709  000898  EE20 F033          	lfsr	2,51
 15710  00089C  51B9               	movf	auto_mount@fs& (0+255),w,b
 15711  00089E  26D9               	addwf	fsr2l,f,c
 15712  0008A0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15713  0008A2  22DA               	addwfc	fsr2h,f,c
 15714  0008A4  CFDE F096          	movff	postinc2,??_auto_mount
 15715  0008A8  CFDD F097          	movff	postdec2,??_auto_mount+1
 15716  0008AC  C096  F0AD         	movff	??_auto_mount,auto_mount@totalsect
 15717  0008B0  C097  F0AE         	movff	??_auto_mount+1,auto_mount@totalsect+1
 15718  0008B4  6BAF               	clrf	(auto_mount@totalsect+2)& (0+255),b
 15719  0008B6  6BB0               	clrf	(auto_mount@totalsect+3)& (0+255),b
 15720                           
 15721                           ; BSR set to: 0
 15722                           ;tff.c: 717: if (!totalsect) totalsect = (DWORD)(*(DWORD*)(BYTE*)(&fs->win[32]));
 15723  0008B8  51AD               	movf	auto_mount@totalsect& (0+255),w,b
 15724  0008BA  11AE               	iorwf	(auto_mount@totalsect+1)& (0+255),w,b
 15725  0008BC  11AF               	iorwf	(auto_mount@totalsect+2)& (0+255),w,b
 15726  0008BE  11B0               	iorwf	(auto_mount@totalsect+3)& (0+255),w,b
 15727  0008C0  A4D8               	btfss	status,2,c
 15728  0008C2  D00E               	goto	l997
 15729                           
 15730                           ; BSR set to: 0
 15731  0008C4  EE20 F040          	lfsr	2,64
 15732  0008C8  51B9               	movf	auto_mount@fs& (0+255),w,b
 15733  0008CA  26D9               	addwf	fsr2l,f,c
 15734  0008CC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15735  0008CE  22DA               	addwfc	fsr2h,f,c
 15736  0008D0  CFDE F0AD          	movff	postinc2,auto_mount@totalsect
 15737  0008D4  CFDE F0AE          	movff	postinc2,auto_mount@totalsect+1
 15738  0008D8  CFDE F0AF          	movff	postinc2,auto_mount@totalsect+2
 15739  0008DC  CFDE F0B0          	movff	postinc2,auto_mount@totalsect+3
 15740  0008E0                     l997:
 15741                           
 15742                           ; BSR set to: 0
 15743                           ;tff.c: 718: fs->max_clust = maxclust = (totalsect
 15744                           ;tff.c: 719: - (WORD)(*(WORD*)(BYTE*)(&fs->win[14])) - fatsize - fs->n_rootdir / 16
 15745                           ;tff.c: 720: ) / fs->csize + 2;
 15746                           
 15747                           ; BSR set to: 0
 15748  0008E0  EE20 F002          	lfsr	2,2
 15749  0008E4  51B9               	movf	auto_mount@fs& (0+255),w,b
 15750  0008E6  26D9               	addwf	fsr2l,f,c
 15751  0008E8  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15752  0008EA  22DA               	addwfc	fsr2h,f,c
 15753  0008EC  CFDE F096          	movff	postinc2,??_auto_mount
 15754  0008F0  CFDD F097          	movff	postdec2,??_auto_mount+1
 15755  0008F4  0E04               	movlw	4
 15756  0008F6  6F98               	movwf	(??_auto_mount+2)& (0+255),b
 15757  0008F8                     u15965:
 15758  0008F8  90D8               	bcf	status,0,c
 15759  0008FA  3397               	rrcf	(??_auto_mount+1)& (0+255),f,b
 15760  0008FC  3396               	rrcf	??_auto_mount& (0+255),f,b
 15761  0008FE  2F98               	decfsz	(??_auto_mount+2)& (0+255),f,b
 15762  000900  D7FB               	goto	u15965
 15763  000902  EE20 F02E          	lfsr	2,46
 15764  000906  51B9               	movf	auto_mount@fs& (0+255),w,b
 15765  000908  26D9               	addwf	fsr2l,f,c
 15766  00090A  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15767  00090C  22DA               	addwfc	fsr2h,f,c
 15768  00090E  CFDE F099          	movff	postinc2,??_auto_mount+3
 15769  000912  CFDD F09A          	movff	postdec2,??_auto_mount+4
 15770  000916  5199               	movf	(??_auto_mount+3)& (0+255),w,b
 15771  000918  2596               	addwf	??_auto_mount& (0+255),w,b
 15772  00091A  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 15773  00091C  519A               	movf	(??_auto_mount+4)& (0+255),w,b
 15774  00091E  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 15775  000920  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 15776  000922  6B9D               	clrf	(??_auto_mount+7)& (0+255),b
 15777  000924  B0D8               	btfsc	status,0,c
 15778  000926  2B9D               	incf	(??_auto_mount+7)& (0+255),f,b
 15779  000928  6B9E               	clrf	(??_auto_mount+8)& (0+255),b
 15780  00092A  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 15781  00092C  259B               	addwf	(??_auto_mount+5)& (0+255),w,b
 15782  00092E  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
 15783  000930  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 15784  000932  219C               	addwfc	(??_auto_mount+6)& (0+255),w,b
 15785  000934  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
 15786  000936  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 15787  000938  219D               	addwfc	(??_auto_mount+7)& (0+255),w,b
 15788  00093A  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
 15789  00093C  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 15790  00093E  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
 15791  000940  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
 15792  000942  1F9F               	comf	(??_auto_mount+9)& (0+255),f,b
 15793  000944  1FA0               	comf	(??_auto_mount+10)& (0+255),f,b
 15794  000946  1FA1               	comf	(??_auto_mount+11)& (0+255),f,b
 15795  000948  1FA2               	comf	(??_auto_mount+12)& (0+255),f,b
 15796  00094A  2B9F               	incf	(??_auto_mount+9)& (0+255),f,b
 15797  00094C  0E00               	movlw	0
 15798  00094E  23A0               	addwfc	(??_auto_mount+10)& (0+255),f,b
 15799  000950  23A1               	addwfc	(??_auto_mount+11)& (0+255),f,b
 15800  000952  23A2               	addwfc	(??_auto_mount+12)& (0+255),f,b
 15801  000954  51AD               	movf	auto_mount@totalsect& (0+255),w,b
 15802  000956  259F               	addwf	(??_auto_mount+9)& (0+255),w,b
 15803  000958  6F60               	movwf	___lldiv@dividend& (0+255),b
 15804  00095A  51AE               	movf	(auto_mount@totalsect+1)& (0+255),w,b
 15805  00095C  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
 15806  00095E  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 15807  000960  51AF               	movf	(auto_mount@totalsect+2)& (0+255),w,b
 15808  000962  21A1               	addwfc	(??_auto_mount+11)& (0+255),w,b
 15809  000964  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 15810  000966  51B0               	movf	(auto_mount@totalsect+3)& (0+255),w,b
 15811  000968  21A2               	addwfc	(??_auto_mount+12)& (0+255),w,b
 15812  00096A  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 15813  00096C  EE20 F01D          	lfsr	2,29
 15814  000970  51B9               	movf	auto_mount@fs& (0+255),w,b
 15815  000972  26D9               	addwf	fsr2l,f,c
 15816  000974  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15817  000976  22DA               	addwfc	fsr2h,f,c
 15818  000978  50DF               	movf	indf2,w,c
 15819  00097A  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
 15820  00097C  51A3               	movf	(??_auto_mount+13)& (0+255),w,b
 15821  00097E  6F64               	movwf	___lldiv@divisor& (0+255),b
 15822  000980  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 15823  000982  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 15824  000984  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 15825  000986  EC18  F028         	call	___lldiv	;wreg free
 15826  00098A  0E02               	movlw	2
 15827  00098C  0100               	movlb	0	; () banked
 15828  00098E  2560               	addwf	?___lldiv& (0+255),w,b
 15829  000990  6FA5               	movwf	auto_mount@maxclust& (0+255),b
 15830  000992  0E00               	movlw	0
 15831  000994  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 15832  000996  6FA6               	movwf	(auto_mount@maxclust+1)& (0+255),b
 15833  000998  0E00               	movlw	0
 15834  00099A  2162               	addwfc	(?___lldiv+2)& (0+255),w,b
 15835  00099C  6FA7               	movwf	(auto_mount@maxclust+2)& (0+255),b
 15836  00099E  0E00               	movlw	0
 15837  0009A0  2163               	addwfc	(?___lldiv+3)& (0+255),w,b
 15838  0009A2  6FA8               	movwf	(auto_mount@maxclust+3)& (0+255),b
 15839  0009A4  EE20 F016          	lfsr	2,22
 15840  0009A8  51B9               	movf	auto_mount@fs& (0+255),w,b
 15841  0009AA  26D9               	addwf	fsr2l,f,c
 15842  0009AC  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15843  0009AE  22DA               	addwfc	fsr2h,f,c
 15844  0009B0  C0A5  FFDE         	movff	auto_mount@maxclust,postinc2
 15845  0009B4  C0A6  FFDD         	movff	auto_mount@maxclust+1,postdec2
 15846                           
 15847                           ; BSR set to: 0
 15848                           ;tff.c: 722: fmt = 1;
 15849  0009B8  0E01               	movlw	1
 15850  0009BA  6FB3               	movwf	auto_mount@fmt& (0+255),b
 15851                           
 15852                           ; BSR set to: 0
 15853                           ;tff.c: 723: if (maxclust >= 0xFF7) fmt = 2;
 15854  0009BC  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 15855  0009BE  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 15856  0009C0  E106               	bnz	u15970
 15857  0009C2  0EF7               	movlw	247
 15858  0009C4  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
 15859  0009C6  0E0F               	movlw	15
 15860  0009C8  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 15861  0009CA  A0D8               	btfss	status,0,c
 15862  0009CC  D002               	goto	l998
 15863  0009CE                     u15970:
 15864                           
 15865                           ; BSR set to: 0
 15866  0009CE  0E02               	movlw	2
 15867  0009D0  6FB3               	movwf	auto_mount@fmt& (0+255),b
 15868  0009D2                     l998:
 15869                           
 15870                           ; BSR set to: 0
 15871                           ;tff.c: 724: if (maxclust >= 0xFFF7)
 15872                           
 15873                           ; BSR set to: 0
 15874  0009D2  51A8               	movf	(auto_mount@maxclust+3)& (0+255),w,b
 15875  0009D4  11A7               	iorwf	(auto_mount@maxclust+2)& (0+255),w,b
 15876  0009D6  E106               	bnz	u15980
 15877  0009D8  0EF7               	movlw	247
 15878  0009DA  5DA5               	subwf	auto_mount@maxclust& (0+255),w,b
 15879  0009DC  0EFF               	movlw	255
 15880  0009DE  59A6               	subwfb	(auto_mount@maxclust+1)& (0+255),w,b
 15881  0009E0  A0D8               	btfss	status,0,c
 15882  0009E2  D002               	goto	l999
 15883  0009E4                     u15980:
 15884                           
 15885                           ; BSR set to: 0
 15886                           ;tff.c: 726: return FR_NO_FILESYSTEM;
 15887  0009E4  0E0B               	movlw	11
 15888                           
 15889                           ; BSR set to: 0
 15890  0009E6  0012               	return	
 15891  0009E8                     l999:
 15892                           
 15893                           ; BSR set to: 0
 15894                           ;tff.c: 733: fs->dirbase = fs->fatbase + fatsize;
 15895                           
 15896                           ; BSR set to: 0
 15897  0009E8  EE20 F008          	lfsr	2,8
 15898  0009EC  51B9               	movf	auto_mount@fs& (0+255),w,b
 15899  0009EE  26D9               	addwf	fsr2l,f,c
 15900  0009F0  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15901  0009F2  22DA               	addwfc	fsr2h,f,c
 15902  0009F4  CFDE F096          	movff	postinc2,??_auto_mount
 15903  0009F8  CFDE F097          	movff	postinc2,??_auto_mount+1
 15904  0009FC  CFDE F098          	movff	postinc2,??_auto_mount+2
 15905  000A00  CFDE F099          	movff	postinc2,??_auto_mount+3
 15906  000A04  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 15907  000A06  2596               	addwf	??_auto_mount& (0+255),w,b
 15908  000A08  6F9A               	movwf	(??_auto_mount+4)& (0+255),b
 15909  000A0A  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 15910  000A0C  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 15911  000A0E  6F9B               	movwf	(??_auto_mount+5)& (0+255),b
 15912  000A10  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 15913  000A12  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
 15914  000A14  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 15915  000A16  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 15916  000A18  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
 15917  000A1A  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
 15918  000A1C  EE20 F00C          	lfsr	2,12
 15919  000A20  51B9               	movf	auto_mount@fs& (0+255),w,b
 15920  000A22  26D9               	addwf	fsr2l,f,c
 15921  000A24  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15922  000A26  22DA               	addwfc	fsr2h,f,c
 15923  000A28  C09A  FFDE         	movff	??_auto_mount+4,postinc2
 15924  000A2C  C09B  FFDE         	movff	??_auto_mount+5,postinc2
 15925  000A30  C09C  FFDE         	movff	??_auto_mount+6,postinc2
 15926  000A34  C09D  FFDE         	movff	??_auto_mount+7,postinc2
 15927                           
 15928                           ;tff.c: 734: fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;
 15929  000A38  EE20 F008          	lfsr	2,8
 15930  000A3C  51B9               	movf	auto_mount@fs& (0+255),w,b
 15931  000A3E  26D9               	addwf	fsr2l,f,c
 15932  000A40  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15933  000A42  22DA               	addwfc	fsr2h,f,c
 15934  000A44  CFDE F096          	movff	postinc2,??_auto_mount
 15935  000A48  CFDE F097          	movff	postinc2,??_auto_mount+1
 15936  000A4C  CFDE F098          	movff	postinc2,??_auto_mount+2
 15937  000A50  CFDE F099          	movff	postinc2,??_auto_mount+3
 15938  000A54  EE20 F002          	lfsr	2,2
 15939  000A58  51B9               	movf	auto_mount@fs& (0+255),w,b
 15940  000A5A  26D9               	addwf	fsr2l,f,c
 15941  000A5C  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15942  000A5E  22DA               	addwfc	fsr2h,f,c
 15943  000A60  CFDE F09A          	movff	postinc2,??_auto_mount+4
 15944  000A64  CFDD F09B          	movff	postdec2,??_auto_mount+5
 15945  000A68  0E04               	movlw	4
 15946  000A6A  6F9C               	movwf	(??_auto_mount+6)& (0+255),b
 15947  000A6C                     u15995:
 15948  000A6C  90D8               	bcf	status,0,c
 15949  000A6E  339B               	rrcf	(??_auto_mount+5)& (0+255),f,b
 15950  000A70  339A               	rrcf	(??_auto_mount+4)& (0+255),f,b
 15951  000A72  2F9C               	decfsz	(??_auto_mount+6)& (0+255),f,b
 15952  000A74  D7FB               	goto	u15995
 15953  000A76  519A               	movf	(??_auto_mount+4)& (0+255),w,b
 15954  000A78  2596               	addwf	??_auto_mount& (0+255),w,b
 15955  000A7A  6F9D               	movwf	(??_auto_mount+7)& (0+255),b
 15956  000A7C  519B               	movf	(??_auto_mount+5)& (0+255),w,b
 15957  000A7E  2197               	addwfc	(??_auto_mount+1)& (0+255),w,b
 15958  000A80  6F9E               	movwf	(??_auto_mount+8)& (0+255),b
 15959  000A82  0E00               	movlw	0
 15960  000A84  2198               	addwfc	(??_auto_mount+2)& (0+255),w,b
 15961  000A86  6F9F               	movwf	(??_auto_mount+9)& (0+255),b
 15962  000A88  0E00               	movlw	0
 15963  000A8A  2199               	addwfc	(??_auto_mount+3)& (0+255),w,b
 15964  000A8C  6FA0               	movwf	(??_auto_mount+10)& (0+255),b
 15965  000A8E  51B5               	movf	auto_mount@fatsize& (0+255),w,b
 15966  000A90  259D               	addwf	(??_auto_mount+7)& (0+255),w,b
 15967  000A92  6FA1               	movwf	(??_auto_mount+11)& (0+255),b
 15968  000A94  51B6               	movf	(auto_mount@fatsize+1)& (0+255),w,b
 15969  000A96  219E               	addwfc	(??_auto_mount+8)& (0+255),w,b
 15970  000A98  6FA2               	movwf	(??_auto_mount+12)& (0+255),b
 15971  000A9A  51B7               	movf	(auto_mount@fatsize+2)& (0+255),w,b
 15972  000A9C  219F               	addwfc	(??_auto_mount+9)& (0+255),w,b
 15973  000A9E  6FA3               	movwf	(??_auto_mount+13)& (0+255),b
 15974  000AA0  51B8               	movf	(auto_mount@fatsize+3)& (0+255),w,b
 15975  000AA2  21A0               	addwfc	(??_auto_mount+10)& (0+255),w,b
 15976  000AA4  6FA4               	movwf	(??_auto_mount+14)& (0+255),b
 15977  000AA6  EE20 F010          	lfsr	2,16
 15978  000AAA  51B9               	movf	auto_mount@fs& (0+255),w,b
 15979  000AAC  26D9               	addwf	fsr2l,f,c
 15980  000AAE  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15981  000AB0  22DA               	addwfc	fsr2h,f,c
 15982  000AB2  C0A1  FFDE         	movff	??_auto_mount+11,postinc2
 15983  000AB6  C0A2  FFDE         	movff	??_auto_mount+12,postinc2
 15984  000ABA  C0A3  FFDE         	movff	??_auto_mount+13,postinc2
 15985  000ABE  C0A4  FFDE         	movff	??_auto_mount+14,postinc2
 15986                           
 15987                           ;tff.c: 738: fs->free_clust = (CLUST)0xFFFFFFFF;
 15988  000AC2  EE20 F01A          	lfsr	2,26
 15989  000AC6  51B9               	movf	auto_mount@fs& (0+255),w,b
 15990  000AC8  26D9               	addwf	fsr2l,f,c
 15991  000ACA  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 15992  000ACC  22DA               	addwfc	fsr2h,f,c
 15993  000ACE  0EFF               	movlw	255
 15994  000AD0  6EDE               	movwf	postinc2,c
 15995  000AD2  0EFF               	movlw	255
 15996  000AD4  6EDD               	movwf	postdec2,c
 15997                           
 15998                           ;tff.c: 754: fs->fs_type = fmt;
 15999  000AD6  EE20 F01C          	lfsr	2,28
 16000  000ADA  51B9               	movf	auto_mount@fs& (0+255),w,b
 16001  000ADC  26D9               	addwf	fsr2l,f,c
 16002  000ADE  51BA               	movf	(auto_mount@fs+1)& (0+255),w,b
 16003  000AE0  22DA               	addwfc	fsr2h,f,c
 16004  000AE2  C0B3  FFDF         	movff	auto_mount@fmt,indf2
 16005                           
 16006                           ; BSR set to: 0
 16007                           ;tff.c: 755: fs->id = ++fsid;
 16008  000AE6  0101               	movlb	1	; () banked
 16009  000AE8  4B44               	infsnz	_fsid& (0+255),f,b
 16010  000AEA  2B45               	incf	(_fsid+1)& (0+255),f,b
 16011  000AEC  C0B9  FFD9         	movff	auto_mount@fs,fsr2l
 16012  000AF0  C0BA  FFDA         	movff	auto_mount@fs+1,fsr2h
 16013  000AF4  C144  FFDE         	movff	_fsid,postinc2
 16014  000AF8  C145  FFDD         	movff	_fsid+1,postdec2
 16015                           
 16016                           ;tff.c: 756: return FR_OK;
 16017  000AFC  0E00               	movlw	0
 16018  000AFE  0012               	return	
 16019  000B00                     __end_of_auto_mount:
 16020                           	opt stack 0
 16021                           tosu	equ	0xFFF
 16022                           tosh	equ	0xFFE
 16023                           tosl	equ	0xFFD
 16024                           pclath	equ	0xFFA
 16025                           tblptru	equ	0xFF8
 16026                           tblptrh	equ	0xFF7
 16027                           tblptrl	equ	0xFF6
 16028                           tablat	equ	0xFF5
 16029                           prodh	equ	0xFF4
 16030                           prodl	equ	0xFF3
 16031                           intcon	equ	0xFF2
 16032                           intcon2	equ	0xFF1
 16033                           intcon3	equ	0xFF0
 16034                           indf0	equ	0xFEF
 16035                           postinc0	equ	0xFEE
 16036                           fsr0h	equ	0xFEA
 16037                           fsr0l	equ	0xFE9
 16038                           wreg	equ	0xFE8
 16039                           indf1	equ	0xFE7
 16040                           postinc1	equ	0xFE6
 16041                           postdec1	equ	0xFE5
 16042                           plusw1	equ	0xFE3
 16043                           fsr1h	equ	0xFE2
 16044                           fsr1l	equ	0xFE1
 16045                           indf2	equ	0xFDF
 16046                           postinc2	equ	0xFDE
 16047                           postdec2	equ	0xFDD
 16048                           plusw2	equ	0xFDB
 16049                           fsr2h	equ	0xFDA
 16050                           fsr2l	equ	0xFD9
 16051                           status	equ	0xFD8
 16052                           
 16053 ;; *************** function _memset *****************
 16054 ;; Defined at:
 16055 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 16056 ;; Parameters:    Size  Location     Type
 16057 ;;  p1              2    0[BANK0 ] PTR void 
 16058 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 16059 ;;  c               2    2[BANK0 ] int 
 16060 ;;  n               2    4[BANK0 ] unsigned int 
 16061 ;; Auto vars:     Size  Location     Type
 16062 ;;  p               2    6[BANK0 ] PTR unsigned char 
 16063 ;;		 -> f_opendir@fn(12), f_open@fn(12), NULL(0), fs(544), 
 16064 ;; Return value:  Size  Location     Type
 16065 ;;                  2    0[BANK0 ] PTR void 
 16066 ;; Registers used:
 16067 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16068 ;; Tracked objects:
 16069 ;;		On entry : 0/0
 16070 ;;		On exit  : 0/0
 16071 ;;		Unchanged: 0/0
 16072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16073 ;;      Params:         0       6       0       0       0       0       0       0       0
 16074 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16075 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16076 ;;      Totals:         0       8       0       0       0       0       0       0       0
 16077 ;;Total ram usage:        8 bytes
 16078 ;; Hardware stack levels used:    1
 16079 ;; Hardware stack levels required when called:    3
 16080 ;; This function calls:
 16081 ;;		Nothing
 16082 ;; This function is called by:
 16083 ;;		_make_dirfile
 16084 ;;		_reserve_direntry
 16085 ;;		_auto_mount
 16086 ;;		_f_open
 16087 ;; This function uses a non-reentrant model
 16088 ;;
 16089                           
 16090                           	psect	text62
 16091  005CBE                     __ptext62:
 16092                           	opt stack 0
 16093  005CBE                     _memset:
 16094                           	opt stack 20
 16095                           
 16096                           ;incstack = 0
 16097  005CBE  C060  F066         	movff	memset@p1,memset@p
 16098  005CC2  C061  F067         	movff	memset@p1+1,memset@p+1
 16099  005CC6  D009               	goto	l2125
 16100  005CC8                     l11378:
 16101  005CC8  C066  FFD9         	movff	memset@p,fsr2l
 16102  005CCC  C067  FFDA         	movff	memset@p+1,fsr2h
 16103  005CD0  C062  FFDF         	movff	memset@c,indf2
 16104  005CD4  0100               	movlb	0	; () banked
 16105  005CD6  4B66               	infsnz	memset@p& (0+255),f,b
 16106  005CD8  2B67               	incf	(memset@p+1)& (0+255),f,b
 16107  005CDA                     l2125:
 16108                           
 16109                           ; BSR set to: 0
 16110  005CDA  0100               	movlb	0	; () banked
 16111  005CDC  0764               	decf	memset@n& (0+255),f,b
 16112  005CDE  A0D8               	btfss	status,0,c
 16113  005CE0  0765               	decf	(memset@n+1)& (0+255),f,b
 16114  005CE2  2964               	incf	memset@n& (0+255),w,b
 16115  005CE4  E1F1               	bnz	l11378
 16116  005CE6  2965               	incf	(memset@n+1)& (0+255),w,b
 16117  005CE8  B4D8               	btfsc	status,2,c
 16118  005CEA  0012               	return	
 16119  005CEC  D7ED               	goto	l2126
 16120  005CEE                     __end_of_memset:
 16121                           	opt stack 0
 16122                           tosu	equ	0xFFF
 16123                           tosh	equ	0xFFE
 16124                           tosl	equ	0xFFD
 16125                           pclath	equ	0xFFA
 16126                           tblptru	equ	0xFF8
 16127                           tblptrh	equ	0xFF7
 16128                           tblptrl	equ	0xFF6
 16129                           tablat	equ	0xFF5
 16130                           prodh	equ	0xFF4
 16131                           prodl	equ	0xFF3
 16132                           intcon	equ	0xFF2
 16133                           intcon2	equ	0xFF1
 16134                           intcon3	equ	0xFF0
 16135                           indf0	equ	0xFEF
 16136                           postinc0	equ	0xFEE
 16137                           fsr0h	equ	0xFEA
 16138                           fsr0l	equ	0xFE9
 16139                           wreg	equ	0xFE8
 16140                           indf1	equ	0xFE7
 16141                           postinc1	equ	0xFE6
 16142                           postdec1	equ	0xFE5
 16143                           plusw1	equ	0xFE3
 16144                           fsr1h	equ	0xFE2
 16145                           fsr1l	equ	0xFE1
 16146                           indf2	equ	0xFDF
 16147                           postinc2	equ	0xFDE
 16148                           postdec2	equ	0xFDD
 16149                           plusw2	equ	0xFDB
 16150                           fsr2h	equ	0xFDA
 16151                           fsr2l	equ	0xFD9
 16152                           status	equ	0xFD8
 16153                           
 16154 ;; *************** function _disk_initialize *****************
 16155 ;; Defined at:
 16156 ;;		line 59 in file "bibliotecas/diskio.c"
 16157 ;; Parameters:    Size  Location     Type
 16158 ;;  pdrv            1    wreg     unsigned char 
 16159 ;; Auto vars:     Size  Location     Type
 16160 ;;  pdrv            1   32[BANK0 ] unsigned char 
 16161 ;;  result          2    0        int 
 16162 ;;  stat            1   33[BANK0 ] unsigned char 
 16163 ;; Return value:  Size  Location     Type
 16164 ;;                  1    wreg      unsigned char 
 16165 ;; Registers used:
 16166 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16167 ;; Tracked objects:
 16168 ;;		On entry : 0/0
 16169 ;;		On exit  : 0/0
 16170 ;;		Unchanged: 0/0
 16171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16172 ;;      Params:         0       0       0       0       0       0       0       0       0
 16173 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16174 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16175 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16176 ;;Total ram usage:        2 bytes
 16177 ;; Hardware stack levels used:    1
 16178 ;; Hardware stack levels required when called:    8
 16179 ;; This function calls:
 16180 ;;		_sdc_disk_initialize
 16181 ;; This function is called by:
 16182 ;;		_auto_mount
 16183 ;; This function uses a non-reentrant model
 16184 ;;
 16185                           
 16186                           	psect	text63
 16187  005A08                     __ptext63:
 16188                           	opt stack 0
 16189  005A08                     _disk_initialize:
 16190                           	opt stack 16
 16191                           
 16192                           ; BSR set to: 0
 16193                           ;incstack = 0
 16194                           ;disk_initialize@pdrv stored from wreg
 16195  005A08  0100               	movlb	0	; () banked
 16196  005A0A  6F80               	movwf	disk_initialize@pdrv& (0+255),b
 16197                           
 16198                           ;diskio.c: 63: DSTATUS stat;
 16199                           ;diskio.c: 64: int result;
 16200                           ;diskio.c: 66: switch (pdrv) {
 16201  005A0C  D00E               	goto	l43
 16202  005A0E                     
 16203                           ;diskio.c: 68: stat = sdc_disk_initialize();
 16204  005A0E  EC3F  F00D         	call	_sdc_disk_initialize	;wreg free
 16205  005A12  0100               	movlb	0	; () banked
 16206  005A14  6F81               	movwf	disk_initialize@stat& (0+255),b
 16207                           
 16208                           ; BSR set to: 0
 16209                           ;diskio.c: 72: return stat;
 16210  005A16  5181               	movf	disk_initialize@stat& (0+255),w,b
 16211                           
 16212                           ; BSR set to: 0
 16213  005A18  0012               	return	
 16214  005A1A                     
 16215                           ; BSR set to: 0
 16216                           ;diskio.c: 75: stat = sdc_disk_initialize();
 16217                           
 16218                           ; BSR set to: 0
 16219  005A1A  EC3F  F00D         	call	_sdc_disk_initialize	;wreg free
 16220  005A1E  0100               	movlb	0	; () banked
 16221  005A20  6F81               	movwf	disk_initialize@stat& (0+255),b
 16222                           
 16223                           ; BSR set to: 0
 16224                           ;diskio.c: 79: return stat;
 16225  005A22  5181               	movf	disk_initialize@stat& (0+255),w,b
 16226                           
 16227                           ; BSR set to: 0
 16228  005A24  0012               	return	
 16229  005A26                     
 16230                           ; BSR set to: 0
 16231                           ;diskio.c: 86: return stat;
 16232                           
 16233                           ; BSR set to: 0
 16234  005A26  5181               	movf	disk_initialize@stat& (0+255),w,b
 16235                           
 16236                           ; BSR set to: 0
 16237  005A28  0012               	return	
 16238  005A2A                     l43:
 16239                           
 16240                           ; BSR set to: 0
 16241  005A2A  0100               	movlb	0	; () banked
 16242  005A2C  5180               	movf	disk_initialize@pdrv& (0+255),w,b
 16243                           
 16244                           ; Switch size 1, requested type "space"
 16245                           ; Number of cases is 3, Range of values is 0 to 2
 16246                           ; switch strategies available:
 16247                           ; Name         Instructions Cycles
 16248                           ; simple_byte           10     6 (average)
 16249                           ;	Chosen strategy is simple_byte
 16250  005A2E  0A00               	xorlw	0	; case 0
 16251  005A30  B4D8               	btfsc	status,2,c
 16252  005A32  D7ED               	goto	l44
 16253  005A34  0A01               	xorlw	1	; case 1
 16254  005A36  B4D8               	btfsc	status,2,c
 16255  005A38  D7F0               	goto	l46
 16256  005A3A  0A03               	xorlw	3	; case 2
 16257  005A3C  B4D8               	btfsc	status,2,c
 16258  005A3E  D7F3               	goto	l47
 16259                           
 16260                           ; BSR set to: 0
 16261                           ;diskio.c: 88: return 0x01;
 16262                           
 16263                           ; BSR set to: 0
 16264  005A40  0E01               	movlw	1
 16265  005A42  0012               	return	
 16266  005A44                     __end_of_disk_initialize:
 16267                           	opt stack 0
 16268                           tosu	equ	0xFFF
 16269                           tosh	equ	0xFFE
 16270                           tosl	equ	0xFFD
 16271                           pclath	equ	0xFFA
 16272                           tblptru	equ	0xFF8
 16273                           tblptrh	equ	0xFF7
 16274                           tblptrl	equ	0xFF6
 16275                           tablat	equ	0xFF5
 16276                           prodh	equ	0xFF4
 16277                           prodl	equ	0xFF3
 16278                           intcon	equ	0xFF2
 16279                           intcon2	equ	0xFF1
 16280                           intcon3	equ	0xFF0
 16281                           indf0	equ	0xFEF
 16282                           postinc0	equ	0xFEE
 16283                           fsr0h	equ	0xFEA
 16284                           fsr0l	equ	0xFE9
 16285                           wreg	equ	0xFE8
 16286                           indf1	equ	0xFE7
 16287                           postinc1	equ	0xFE6
 16288                           postdec1	equ	0xFE5
 16289                           plusw1	equ	0xFE3
 16290                           fsr1h	equ	0xFE2
 16291                           fsr1l	equ	0xFE1
 16292                           indf2	equ	0xFDF
 16293                           postinc2	equ	0xFDE
 16294                           postdec2	equ	0xFDD
 16295                           plusw2	equ	0xFDB
 16296                           fsr2h	equ	0xFDA
 16297                           fsr2l	equ	0xFD9
 16298                           status	equ	0xFD8
 16299                           
 16300 ;; *************** function _sdc_disk_initialize *****************
 16301 ;; Defined at:
 16302 ;;		line 275 in file "bibliotecas/diskio.c"
 16303 ;; Parameters:    Size  Location     Type
 16304 ;;		None
 16305 ;; Auto vars:     Size  Location     Type
 16306 ;;  count2          2   29[BANK0 ] int 
 16307 ;;  crc_number      2   25[BANK0 ] int 
 16308 ;;  count1          2   23[BANK0 ] int 
 16309 ;;  i               2   20[BANK0 ] int 
 16310 ;;  buff            1   31[BANK0 ] unsigned char 
 16311 ;;  ocr             1   28[BANK0 ] unsigned char 
 16312 ;;  buff_i          1   27[BANK0 ] unsigned char 
 16313 ;;  stat            1   22[BANK0 ] unsigned char 
 16314 ;; Return value:  Size  Location     Type
 16315 ;;                  1    wreg      unsigned char 
 16316 ;; Registers used:
 16317 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16318 ;; Tracked objects:
 16319 ;;		On entry : 0/0
 16320 ;;		On exit  : 0/0
 16321 ;;		Unchanged: 0/0
 16322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16323 ;;      Params:         0       0       0       0       0       0       0       0       0
 16324 ;;      Locals:         0      12       0       0       0       0       0       0       0
 16325 ;;      Temps:          0       1       0       0       0       0       0       0       0
 16326 ;;      Totals:         0      13       0       0       0       0       0       0       0
 16327 ;;Total ram usage:       13 bytes
 16328 ;; Hardware stack levels used:    1
 16329 ;; Hardware stack levels required when called:    7
 16330 ;; This function calls:
 16331 ;;		_command
 16332 ;;		_dummy_clocks
 16333 ;;		_escreve_frase_ram_lcd
 16334 ;;		_posicao_cursor_lcd
 16335 ;;		_proceed
 16336 ;;		_response
 16337 ;;		_sdc_reset
 16338 ;; This function is called by:
 16339 ;;		_disk_initialize
 16340 ;; This function uses a non-reentrant model
 16341 ;;
 16342                           
 16343                           	psect	text64
 16344  001A7E                     __ptext64:
 16345                           	opt stack 0
 16346  001A7E                     _sdc_disk_initialize:
 16347                           	opt stack 16
 16348                           
 16349                           ;diskio.c: 277: BYTE ocr;
 16350                           ;diskio.c: 278: DSTATUS stat;
 16351                           ;diskio.c: 279: int i = 0, count1 = 0, count2 = 0;
 16352                           
 16353                           ; BSR set to: 0
 16354                           ;incstack = 0
 16355  001A7E  0E00               	movlw	0
 16356  001A80  0100               	movlb	0	; () banked
 16357  001A82  6F75               	movwf	(sdc_disk_initialize@i+1)& (0+255),b
 16358  001A84  0E00               	movlw	0
 16359  001A86  6F74               	movwf	sdc_disk_initialize@i& (0+255),b
 16360  001A88  0E00               	movlw	0
 16361  001A8A  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 16362  001A8C  0E00               	movlw	0
 16363  001A8E  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 16364  001A90  0E00               	movlw	0
 16365  001A92  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 16366  001A94  0E00               	movlw	0
 16367  001A96  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 16368                           
 16369                           ;diskio.c: 280: BYTE buff = 0;
 16370  001A98  0E00               	movlw	0
 16371  001A9A  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 16372                           
 16373                           ; BSR set to: 0
 16374                           ;diskio.c: 281: BYTE buff_i;
 16375                           ;diskio.c: 282: int crc_number;
 16376                           ;diskio.c: 283: _delay((unsigned long)((1)*(48000000/4000.0)));
 16377  001A9C  0E10               	movlw	16
 16378  001A9E  0100               	movlb	0	; () banked
 16379  001AA0  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 16380  001AA2  0E94               	movlw	148
 16381  001AA4                     u18637:
 16382  001AA4  2EE8               	decfsz	wreg,f,c
 16383  001AA6  D7FE               	bra	u18637
 16384  001AA8  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 16385  001AAA  D7FC               	bra	u18637
 16386  001AAC  F000               	nop	
 16387                           
 16388                           ;diskio.c: 284: dummy_clocks(100);
 16389  001AAE  0E64               	movlw	100
 16390  001AB0  ECE2  F02C         	call	_dummy_clocks
 16391                           
 16392                           ;diskio.c: 287: sdc_reset();
 16393  001AB4  EC93  F024         	call	_sdc_reset	;wreg free
 16394                           
 16395                           ;diskio.c: 288: command(0X48, 0x000001AA, 0x87);
 16396  001AB8  0EAA               	movlw	170
 16397  001ABA  0100               	movlb	0	; () banked
 16398  001ABC  6F65               	movwf	command@arg& (0+255),b
 16399  001ABE  0E01               	movlw	1
 16400  001AC0  6F66               	movwf	(command@arg+1)& (0+255),b
 16401  001AC2  0E00               	movlw	0
 16402  001AC4  6F67               	movwf	(command@arg+2)& (0+255),b
 16403  001AC6  0E00               	movlw	0
 16404  001AC8  6F68               	movwf	(command@arg+3)& (0+255),b
 16405  001ACA  0E87               	movlw	135
 16406  001ACC  6F69               	movwf	command@CRC& (0+255),b
 16407  001ACE  0E48               	movlw	72
 16408  001AD0  EC2B  F02A         	call	_command
 16409                           
 16410                           ;diskio.c: 289: proceed();
 16411  001AD4  ECBC  F02F         	call	_proceed	;wreg free
 16412  001AD8                     
 16413                           ;diskio.c: 291: buff_i = response();
 16414  001AD8  ECB5  F02F         	call	_response	;wreg free
 16415  001ADC  0100               	movlb	0	; () banked
 16416  001ADE  6F7B               	movwf	sdc_disk_initialize@buff_i& (0+255),b
 16417                           
 16418                           ; BSR set to: 0
 16419                           ;diskio.c: 292: if(buff_i == 1)
 16420  001AE0  057B               	decf	sdc_disk_initialize@buff_i& (0+255),w,b
 16421  001AE2  A4D8               	btfss	status,2,c
 16422  001AE4  D004               	goto	l86
 16423                           
 16424                           ; BSR set to: 0
 16425                           ;diskio.c: 293: {
 16426                           ;diskio.c: 294: crc_number = buff_i<<8;
 16427  001AE6  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 16428  001AE8  6F7A               	movwf	(sdc_disk_initialize@crc_number+1)& (0+255),b
 16429  001AEA  6B79               	clrf	sdc_disk_initialize@crc_number& (0+255),b
 16430                           
 16431                           ;diskio.c: 295: }
 16432  001AEC  D006               	goto	l88
 16433  001AEE                     l86:
 16434                           
 16435                           ; BSR set to: 0
 16436                           ;diskio.c: 296: else if(buff_i==0xAA)
 16437                           
 16438                           ; BSR set to: 0
 16439  001AEE  0EAA               	movlw	170
 16440  001AF0  197B               	xorwf	sdc_disk_initialize@buff_i& (0+255),w,b
 16441  001AF2  A4D8               	btfss	status,2,c
 16442  001AF4  D002               	goto	l88
 16443                           
 16444                           ; BSR set to: 0
 16445                           ;diskio.c: 297: {
 16446                           ;diskio.c: 298: crc_number |= buff_i;
 16447  001AF6  517B               	movf	sdc_disk_initialize@buff_i& (0+255),w,b
 16448  001AF8  1379               	iorwf	sdc_disk_initialize@crc_number& (0+255),f,b
 16449  001AFA                     l88:
 16450                           
 16451                           ; BSR set to: 0
 16452                           ;diskio.c: 299: }
 16453                           ;diskio.c: 300: count1++;
 16454                           
 16455                           ; BSR set to: 0
 16456                           
 16457                           ; BSR set to: 0
 16458  001AFA  4B77               	infsnz	sdc_disk_initialize@count1& (0+255),f,b
 16459  001AFC  2B78               	incf	(sdc_disk_initialize@count1+1)& (0+255),f,b
 16460                           
 16461                           ; BSR set to: 0
 16462                           ;diskio.c: 301: }while(crc_number != 0x1AA && count1<1000);
 16463  001AFE  0EAA               	movlw	170
 16464  001B00  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 16465  001B02  E103               	bnz	u13920
 16466  001B04  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 16467  001B06  B4D8               	btfsc	status,2,c
 16468  001B08  D008               	goto	u13930
 16469  001B0A                     u13920:
 16470                           
 16471                           ; BSR set to: 0
 16472  001B0A  BF78               	btfsc	(sdc_disk_initialize@count1+1)& (0+255),7,b
 16473  001B0C  D7E5               	goto	l85
 16474  001B0E  0EE8               	movlw	232
 16475  001B10  5D77               	subwf	sdc_disk_initialize@count1& (0+255),w,b
 16476  001B12  0E03               	movlw	3
 16477  001B14  5978               	subwfb	(sdc_disk_initialize@count1+1)& (0+255),w,b
 16478  001B16  A0D8               	btfss	status,0,c
 16479  001B18  D7DF               	goto	l85
 16480  001B1A                     u13930:
 16481                           
 16482                           ; BSR set to: 0
 16483                           ;diskio.c: 306: if (crc_number == 0x1AA)
 16484                           
 16485                           ; BSR set to: 0
 16486                           
 16487                           ; BSR set to: 0
 16488  001B1A  0EAA               	movlw	170
 16489  001B1C  1979               	xorwf	sdc_disk_initialize@crc_number& (0+255),w,b
 16490  001B1E  E102               	bnz	u13941
 16491  001B20  057A               	decf	(sdc_disk_initialize@crc_number+1)& (0+255),w,b
 16492  001B22  A4D8               	btfss	status,2,c
 16493  001B24                     u13941:
 16494  001B24  D0B1               	goto	l92
 16495                           
 16496                           ; BSR set to: 0
 16497                           ;diskio.c: 307: {
 16498                           ;diskio.c: 308: count1 = 0;
 16499  001B26  0E00               	movlw	0
 16500  001B28  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 16501  001B2A  0E00               	movlw	0
 16502  001B2C  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 16503  001B2E                     l93:
 16504                           
 16505                           ; BSR set to: 0
 16506                           ;diskio.c: 310: count2 = 0;
 16507  001B2E  0E00               	movlw	0
 16508  001B30  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 16509  001B32  0E00               	movlw	0
 16510  001B34  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 16511                           
 16512                           ; BSR set to: 0
 16513                           ;diskio.c: 311: buff = 0XFF;
 16514  001B36  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 16515  001B38                     
 16516                           ; BSR set to: 0
 16517                           ;diskio.c: 319: dummy_clocks(10);
 16518                           
 16519                           ; BSR set to: 0
 16520  001B38  0E0A               	movlw	10
 16521  001B3A  ECE2  F02C         	call	_dummy_clocks
 16522                           
 16523                           ;diskio.c: 320: command(0X77, 0X00000000, 0X00);
 16524  001B3E  0E00               	movlw	0
 16525  001B40  0100               	movlb	0	; () banked
 16526  001B42  6F65               	movwf	command@arg& (0+255),b
 16527  001B44  0E00               	movlw	0
 16528  001B46  6F66               	movwf	(command@arg+1)& (0+255),b
 16529  001B48  0E00               	movlw	0
 16530  001B4A  6F67               	movwf	(command@arg+2)& (0+255),b
 16531  001B4C  0E00               	movlw	0
 16532  001B4E  6F68               	movwf	(command@arg+3)& (0+255),b
 16533  001B50  0E00               	movlw	0
 16534  001B52  6F69               	movwf	command@CRC& (0+255),b
 16535  001B54  0E77               	movlw	119
 16536  001B56  EC2B  F02A         	call	_command
 16537                           
 16538                           ;diskio.c: 321: buff = 0XFF;
 16539  001B5A  0100               	movlb	0	; () banked
 16540  001B5C  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 16541                           
 16542                           ; BSR set to: 0
 16543                           ;diskio.c: 323: proceed();
 16544  001B5E  ECBC  F02F         	call	_proceed	;wreg free
 16545  001B62                     
 16546                           ;diskio.c: 325: buff = response();
 16547  001B62  ECB5  F02F         	call	_response	;wreg free
 16548  001B66  0100               	movlb	0	; () banked
 16549  001B68  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 16550                           
 16551                           ; BSR set to: 0
 16552                           ;diskio.c: 326: count2++;
 16553  001B6A  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 16554  001B6C  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 16555                           
 16556                           ;diskio.c: 327: }while((buff!=0X01)&&(count2<10));
 16557  001B6E  057F               	decf	sdc_disk_initialize@buff& (0+255),w,b
 16558  001B70  B4D8               	btfsc	status,2,c
 16559  001B72  D008               	goto	u13960
 16560                           
 16561                           ; BSR set to: 0
 16562  001B74  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 16563  001B76  D7F5               	goto	l95
 16564  001B78  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 16565  001B7A  E104               	bnz	l11226
 16566  001B7C  0E0A               	movlw	10
 16567  001B7E  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 16568  001B80  A0D8               	btfss	status,0,c
 16569  001B82  D7EF               	goto	l95
 16570  001B84                     u13960:
 16571  001B84                     l11226:
 16572                           
 16573                           ; BSR set to: 0
 16574                           ;diskio.c: 328: count2 = 0;
 16575  001B84  0E00               	movlw	0
 16576  001B86  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 16577  001B88  0E00               	movlw	0
 16578  001B8A  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 16579                           
 16580                           ; BSR set to: 0
 16581                           ;diskio.c: 332: dummy_clocks(10);
 16582  001B8C  0E0A               	movlw	10
 16583  001B8E  ECE2  F02C         	call	_dummy_clocks
 16584                           
 16585                           ;diskio.c: 333: command(0X69, 0X40000000 , 0x00);
 16586  001B92  0E00               	movlw	0
 16587  001B94  0100               	movlb	0	; () banked
 16588  001B96  6F65               	movwf	command@arg& (0+255),b
 16589  001B98  0E00               	movlw	0
 16590  001B9A  6F66               	movwf	(command@arg+1)& (0+255),b
 16591  001B9C  0E00               	movlw	0
 16592  001B9E  6F67               	movwf	(command@arg+2)& (0+255),b
 16593  001BA0  0E40               	movlw	64
 16594  001BA2  6F68               	movwf	(command@arg+3)& (0+255),b
 16595  001BA4  0E00               	movlw	0
 16596  001BA6  6F69               	movwf	command@CRC& (0+255),b
 16597  001BA8  0E69               	movlw	105
 16598  001BAA  EC2B  F02A         	call	_command
 16599                           
 16600                           ;diskio.c: 334: proceed();
 16601  001BAE  ECBC  F02F         	call	_proceed	;wreg free
 16602                           
 16603                           ;diskio.c: 335: buff = response();
 16604  001BB2  ECB5  F02F         	call	_response	;wreg free
 16605  001BB6  0100               	movlb	0	; () banked
 16606  001BB8  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 16607                           
 16608                           ; BSR set to: 0
 16609                           ;diskio.c: 336: count2++;
 16610  001BBA  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 16611  001BBC  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 16612                           
 16613                           ; BSR set to: 0
 16614                           ;diskio.c: 337: }while(buff!=0X00);
 16615  001BBE  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16616  001BC0  A4D8               	btfss	status,2,c
 16617  001BC2  D7BA               	goto	l94
 16618                           
 16619                           ; BSR set to: 0
 16620                           ;diskio.c: 339: buff = 0xFF;
 16621  001BC4  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 16622                           
 16623                           ; BSR set to: 0
 16624                           ;diskio.c: 342: dummy_clocks(10);
 16625  001BC6  0E0A               	movlw	10
 16626  001BC8  ECE2  F02C         	call	_dummy_clocks
 16627                           
 16628                           ;diskio.c: 343: command(0X7A, 0X00000000, 0XFF);
 16629  001BCC  0E00               	movlw	0
 16630  001BCE  0100               	movlb	0	; () banked
 16631  001BD0  6F65               	movwf	command@arg& (0+255),b
 16632  001BD2  0E00               	movlw	0
 16633  001BD4  6F66               	movwf	(command@arg+1)& (0+255),b
 16634  001BD6  0E00               	movlw	0
 16635  001BD8  6F67               	movwf	(command@arg+2)& (0+255),b
 16636  001BDA  0E00               	movlw	0
 16637  001BDC  6F68               	movwf	(command@arg+3)& (0+255),b
 16638  001BDE  0EFF               	movlw	255
 16639  001BE0  6F69               	movwf	command@CRC& (0+255),b
 16640  001BE2  0E7A               	movlw	122
 16641  001BE4  EC2B  F02A         	call	_command
 16642                           
 16643                           ;diskio.c: 344: proceed();
 16644  001BE8  ECBC  F02F         	call	_proceed	;wreg free
 16645  001BEC                     
 16646                           ;diskio.c: 346: buff = response();
 16647  001BEC  ECB5  F02F         	call	_response	;wreg free
 16648  001BF0  0100               	movlb	0	; () banked
 16649  001BF2  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 16650                           
 16651                           ; BSR set to: 0
 16652                           ;diskio.c: 347: ocr = (buff << 1) & 0b10000000;
 16653  001BF4  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16654  001BF6  257F               	addwf	sdc_disk_initialize@buff& (0+255),w,b
 16655  001BF8  0B80               	andlw	128
 16656  001BFA  6F7C               	movwf	sdc_disk_initialize@ocr& (0+255),b
 16657                           
 16658                           ; BSR set to: 0
 16659                           ;diskio.c: 348: count2++;
 16660  001BFC  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 16661  001BFE  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 16662                           
 16663                           ; BSR set to: 0
 16664                           ;diskio.c: 349: }while(ocr!=0X00 && ocr != 0x01 && count2<10);
 16665  001C00  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 16666  001C02  B4D8               	btfsc	status,2,c
 16667  001C04  D00B               	goto	u14000
 16668                           
 16669                           ; BSR set to: 0
 16670  001C06  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 16671  001C08  B4D8               	btfsc	status,2,c
 16672  001C0A  D008               	goto	u14000
 16673                           
 16674                           ; BSR set to: 0
 16675  001C0C  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 16676  001C0E  D7EE               	goto	l100
 16677  001C10  517E               	movf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 16678  001C12  E104               	bnz	l11256
 16679  001C14  0E0A               	movlw	10
 16680  001C16  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 16681  001C18  A0D8               	btfss	status,0,c
 16682  001C1A  D7E8               	goto	l100
 16683  001C1C                     u14000:
 16684  001C1C                     l11256:
 16685                           
 16686                           ; BSR set to: 0
 16687                           ;diskio.c: 350: }while(ocr != 0X00 && ocr !=0x01);
 16688  001C1C  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 16689  001C1E  B4D8               	btfsc	status,2,c
 16690  001C20  D003               	goto	u14020
 16691                           
 16692                           ; BSR set to: 0
 16693  001C22  057C               	decf	sdc_disk_initialize@ocr& (0+255),w,b
 16694  001C24  A4D8               	btfss	status,2,c
 16695  001C26  D783               	goto	l93
 16696  001C28                     u14020:
 16697                           
 16698                           ; BSR set to: 0
 16699                           ;diskio.c: 353: count1 = 0;
 16700                           
 16701                           ; BSR set to: 0
 16702                           
 16703                           ; BSR set to: 0
 16704  001C28  0E00               	movlw	0
 16705  001C2A  6F78               	movwf	(sdc_disk_initialize@count1+1)& (0+255),b
 16706  001C2C  0E00               	movlw	0
 16707  001C2E  6F77               	movwf	sdc_disk_initialize@count1& (0+255),b
 16708                           
 16709                           ; BSR set to: 0
 16710                           ;diskio.c: 355: _delay((unsigned long)((1)*(48000000/4000.0)));
 16711  001C30  0E10               	movlw	16
 16712  001C32  0100               	movlb	0	; () banked
 16713  001C34  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 16714  001C36  0E94               	movlw	148
 16715  001C38                     u18647:
 16716  001C38  2EE8               	decfsz	wreg,f,c
 16717  001C3A  D7FE               	bra	u18647
 16718  001C3C  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 16719  001C3E  D7FC               	bra	u18647
 16720  001C40  F000               	nop	
 16721                           
 16722                           ;diskio.c: 356: stat = 0X00;
 16723  001C42  0E00               	movlw	0
 16724  001C44  0100               	movlb	0	; () banked
 16725  001C46  6F76               	movwf	sdc_disk_initialize@stat& (0+255),b
 16726                           
 16727                           ; BSR set to: 0
 16728                           ;diskio.c: 358: if(!ocr)
 16729  001C48  517C               	movf	sdc_disk_initialize@ocr& (0+255),w,b
 16730  001C4A  A4D8               	btfss	status,2,c
 16731  001C4C  D0B9               	goto	u14120
 16732                           
 16733                           ; BSR set to: 0
 16734                           ;diskio.c: 359: {
 16735                           ;diskio.c: 361: dummy_clocks(10);
 16736  001C4E  0E0A               	movlw	10
 16737  001C50  ECE2  F02C         	call	_dummy_clocks
 16738                           
 16739                           ;diskio.c: 362: command(0x50, 0x00000200,0XFF);
 16740  001C54  0E00               	movlw	0
 16741  001C56  0100               	movlb	0	; () banked
 16742  001C58  6F65               	movwf	command@arg& (0+255),b
 16743  001C5A  0E02               	movlw	2
 16744  001C5C  6F66               	movwf	(command@arg+1)& (0+255),b
 16745  001C5E  0E00               	movlw	0
 16746  001C60  6F67               	movwf	(command@arg+2)& (0+255),b
 16747  001C62  0E00               	movlw	0
 16748  001C64  6F68               	movwf	(command@arg+3)& (0+255),b
 16749  001C66  0EFF               	movlw	255
 16750  001C68  6F69               	movwf	command@CRC& (0+255),b
 16751  001C6A  0E50               	movlw	80
 16752  001C6C  EC2B  F02A         	call	_command
 16753                           
 16754                           ;diskio.c: 363: proceed();
 16755  001C70  ECBC  F02F         	call	_proceed	;wreg free
 16756                           
 16757                           ;diskio.c: 365: buff = 0xFF;
 16758  001C74  0100               	movlb	0	; () banked
 16759  001C76  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 16760  001C78                     
 16761                           ; BSR set to: 0
 16762                           ;diskio.c: 367: buff = response();
 16763                           
 16764                           ; BSR set to: 0
 16765  001C78  ECB5  F02F         	call	_response	;wreg free
 16766  001C7C  0100               	movlb	0	; () banked
 16767  001C7E  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 16768                           
 16769                           ; BSR set to: 0
 16770                           ;diskio.c: 368: }while(buff!=0X00);
 16771  001C80  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16772  001C82  B4D8               	btfsc	status,2,c
 16773  001C84  D09D               	goto	u14120
 16774  001C86  D7F8               	goto	l108
 16775  001C88                     l92:
 16776                           
 16777                           ; BSR set to: 0
 16778                           ;diskio.c: 373: else
 16779                           ;diskio.c: 374: {
 16780                           ;diskio.c: 376: count2 = 0;
 16781                           
 16782                           ; BSR set to: 0
 16783  001C88  0E00               	movlw	0
 16784  001C8A  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 16785  001C8C  0E00               	movlw	0
 16786  001C8E  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 16787                           
 16788                           ; BSR set to: 0
 16789                           ;diskio.c: 377: buff = 0XFF;
 16790  001C90  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 16791                           
 16792                           ; BSR set to: 0
 16793                           ;diskio.c: 378: dummy_clocks(1);
 16794  001C92  0E01               	movlw	1
 16795  001C94  ECE2  F02C         	call	_dummy_clocks
 16796                           
 16797                           ;diskio.c: 379: command(0X69, 0X00000000, 0XFF);
 16798  001C98  0E00               	movlw	0
 16799  001C9A  0100               	movlb	0	; () banked
 16800  001C9C  6F65               	movwf	command@arg& (0+255),b
 16801  001C9E  0E00               	movlw	0
 16802  001CA0  6F66               	movwf	(command@arg+1)& (0+255),b
 16803  001CA2  0E00               	movlw	0
 16804  001CA4  6F67               	movwf	(command@arg+2)& (0+255),b
 16805  001CA6  0E00               	movlw	0
 16806  001CA8  6F68               	movwf	(command@arg+3)& (0+255),b
 16807  001CAA  0EFF               	movlw	255
 16808  001CAC  6F69               	movwf	command@CRC& (0+255),b
 16809  001CAE  0E69               	movlw	105
 16810  001CB0  EC2B  F02A         	call	_command
 16811                           
 16812                           ;diskio.c: 380: proceed();
 16813  001CB4  ECBC  F02F         	call	_proceed	;wreg free
 16814  001CB8                     
 16815                           ;diskio.c: 382: buff = response();
 16816  001CB8  ECB5  F02F         	call	_response	;wreg free
 16817  001CBC  0100               	movlb	0	; () banked
 16818  001CBE  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 16819                           
 16820                           ; BSR set to: 0
 16821                           ;diskio.c: 383: count2++;
 16822  001CC0  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 16823  001CC2  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 16824                           
 16825                           ; BSR set to: 0
 16826                           ;diskio.c: 384: if(buff==0x00)
 16827  001CC4  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16828  001CC6  A4D8               	btfss	status,2,c
 16829  001CC8  D00C               	goto	l112
 16830                           
 16831                           ; BSR set to: 0
 16832                           ;diskio.c: 385: {
 16833                           ;diskio.c: 386: posicao_cursor_lcd(1,0);
 16834  001CCA  0E00               	movlw	0
 16835  001CCC  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 16836  001CCE  0E01               	movlw	1
 16837  001CD0  EC5A  F028         	call	_posicao_cursor_lcd
 16838                           
 16839                           ;diskio.c: 387: escreve_frase_ram_lcd("SD VER. 1");
 16840  001CD4  0E0F               	movlw	low STR_3
 16841  001CD6  0100               	movlb	0	; () banked
 16842  001CD8  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 16843  001CDA  0E62               	movlw	high STR_3
 16844  001CDC  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 16845  001CDE  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 16846  001CE2                     l112:
 16847                           
 16848                           ;diskio.c: 388: }
 16849                           ;diskio.c: 389: _delay((unsigned long)((1)*(48000000/4000.0)));
 16850  001CE2  0E10               	movlw	16
 16851  001CE4  0100               	movlb	0	; () banked
 16852  001CE6  6F73               	movwf	??_sdc_disk_initialize& (0+255),b
 16853  001CE8  0E94               	movlw	148
 16854  001CEA                     u18657:
 16855  001CEA  2EE8               	decfsz	wreg,f,c
 16856  001CEC  D7FE               	bra	u18657
 16857  001CEE  2F73               	decfsz	??_sdc_disk_initialize& (0+255),f,b
 16858  001CF0  D7FC               	bra	u18657
 16859  001CF2  F000               	nop	
 16860                           
 16861                           ;diskio.c: 390: }while(buff!=0X00 && count2<10000);
 16862  001CF4  0100               	movlb	0	; () banked
 16863  001CF6  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16864  001CF8  B4D8               	btfsc	status,2,c
 16865  001CFA  D008               	goto	u14070
 16866                           
 16867                           ; BSR set to: 0
 16868  001CFC  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 16869  001CFE  D7DC               	goto	l111
 16870  001D00  0E10               	movlw	16
 16871  001D02  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 16872  001D04  0E27               	movlw	39
 16873  001D06  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 16874  001D08  A0D8               	btfss	status,0,c
 16875  001D0A  D7D6               	goto	l111
 16876  001D0C                     u14070:
 16877                           
 16878                           ; BSR set to: 0
 16879                           ;diskio.c: 392: buff = 0xFF;
 16880                           
 16881                           ; BSR set to: 0
 16882  001D0C  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 16883                           
 16884                           ; BSR set to: 0
 16885                           ;diskio.c: 393: if(count2==10)
 16886  001D0E  0E0A               	movlw	10
 16887  001D10  197D               	xorwf	sdc_disk_initialize@count2& (0+255),w,b
 16888  001D12  117E               	iorwf	(sdc_disk_initialize@count2+1)& (0+255),w,b
 16889  001D14  A4D8               	btfss	status,2,c
 16890  001D16  D038               	goto	u14110
 16891                           
 16892                           ; BSR set to: 0
 16893                           ;diskio.c: 394: {
 16894                           ;diskio.c: 395: count2 = 0;
 16895  001D18  0E00               	movlw	0
 16896  001D1A  6F7E               	movwf	(sdc_disk_initialize@count2+1)& (0+255),b
 16897  001D1C  0E00               	movlw	0
 16898  001D1E  6F7D               	movwf	sdc_disk_initialize@count2& (0+255),b
 16899                           
 16900                           ; BSR set to: 0
 16901                           ;diskio.c: 396: dummy_clocks(10);
 16902  001D20  0E0A               	movlw	10
 16903  001D22  ECE2  F02C         	call	_dummy_clocks
 16904                           
 16905                           ;diskio.c: 397: command(0X41, 0X00000000, 0XFF);
 16906  001D26  0E00               	movlw	0
 16907  001D28  0100               	movlb	0	; () banked
 16908  001D2A  6F65               	movwf	command@arg& (0+255),b
 16909  001D2C  0E00               	movlw	0
 16910  001D2E  6F66               	movwf	(command@arg+1)& (0+255),b
 16911  001D30  0E00               	movlw	0
 16912  001D32  6F67               	movwf	(command@arg+2)& (0+255),b
 16913  001D34  0E00               	movlw	0
 16914  001D36  6F68               	movwf	(command@arg+3)& (0+255),b
 16915  001D38  0EFF               	movlw	255
 16916  001D3A  6F69               	movwf	command@CRC& (0+255),b
 16917  001D3C  0E41               	movlw	65
 16918  001D3E  EC2B  F02A         	call	_command
 16919                           
 16920                           ;diskio.c: 398: proceed();
 16921  001D42  ECBC  F02F         	call	_proceed	;wreg free
 16922  001D46                     
 16923                           ;diskio.c: 400: buff = response();
 16924  001D46  ECB5  F02F         	call	_response	;wreg free
 16925  001D4A  0100               	movlb	0	; () banked
 16926  001D4C  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 16927                           
 16928                           ; BSR set to: 0
 16929                           ;diskio.c: 401: count2++;
 16930  001D4E  4B7D               	infsnz	sdc_disk_initialize@count2& (0+255),f,b
 16931  001D50  2B7E               	incf	(sdc_disk_initialize@count2+1)& (0+255),f,b
 16932                           
 16933                           ; BSR set to: 0
 16934                           ;diskio.c: 402: if(buff==0x00)
 16935  001D52  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16936  001D54  A4D8               	btfss	status,2,c
 16937  001D56  D00C               	goto	l118
 16938                           
 16939                           ; BSR set to: 0
 16940                           ;diskio.c: 403: {
 16941                           ;diskio.c: 404: posicao_cursor_lcd(1,0);
 16942  001D58  0E00               	movlw	0
 16943  001D5A  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 16944  001D5C  0E01               	movlw	1
 16945  001D5E  EC5A  F028         	call	_posicao_cursor_lcd
 16946                           
 16947                           ;diskio.c: 405: escreve_frase_ram_lcd("MMC Ver. 3");
 16948  001D62  0ED1               	movlw	low STR_4
 16949  001D64  0100               	movlb	0	; () banked
 16950  001D66  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 16951  001D68  0E61               	movlw	high STR_4
 16952  001D6A  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 16953  001D6C  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 16954  001D70                     l118:
 16955                           
 16956                           ;diskio.c: 406: }
 16957                           ;diskio.c: 408: }while(buff!=0X00 && count2<10000);
 16958  001D70  0100               	movlb	0	; () banked
 16959  001D72  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 16960  001D74  B4D8               	btfsc	status,2,c
 16961  001D76  D008               	goto	u14110
 16962                           
 16963                           ; BSR set to: 0
 16964  001D78  BF7E               	btfsc	(sdc_disk_initialize@count2+1)& (0+255),7,b
 16965  001D7A  D7E5               	goto	l117
 16966  001D7C  0E10               	movlw	16
 16967  001D7E  5D7D               	subwf	sdc_disk_initialize@count2& (0+255),w,b
 16968  001D80  0E27               	movlw	39
 16969  001D82  597E               	subwfb	(sdc_disk_initialize@count2+1)& (0+255),w,b
 16970  001D84  A0D8               	btfss	status,0,c
 16971  001D86  D7DF               	goto	l117
 16972  001D88                     u14110:
 16973                           
 16974                           ; BSR set to: 0
 16975                           ;diskio.c: 409: }
 16976                           ;diskio.c: 412: dummy_clocks(10);
 16977                           
 16978                           ; BSR set to: 0
 16979                           
 16980                           ; BSR set to: 0
 16981                           
 16982                           ; BSR set to: 0
 16983  001D88  0E0A               	movlw	10
 16984  001D8A  ECE2  F02C         	call	_dummy_clocks
 16985                           
 16986                           ;diskio.c: 413: command(0X50,0X00000200,0XFF);
 16987  001D8E  0E00               	movlw	0
 16988  001D90  0100               	movlb	0	; () banked
 16989  001D92  6F65               	movwf	command@arg& (0+255),b
 16990  001D94  0E02               	movlw	2
 16991  001D96  6F66               	movwf	(command@arg+1)& (0+255),b
 16992  001D98  0E00               	movlw	0
 16993  001D9A  6F67               	movwf	(command@arg+2)& (0+255),b
 16994  001D9C  0E00               	movlw	0
 16995  001D9E  6F68               	movwf	(command@arg+3)& (0+255),b
 16996  001DA0  0EFF               	movlw	255
 16997  001DA2  6F69               	movwf	command@CRC& (0+255),b
 16998  001DA4  0E50               	movlw	80
 16999  001DA6  EC2B  F02A         	call	_command
 17000                           
 17001                           ;diskio.c: 414: proceed();
 17002  001DAA  ECBC  F02F         	call	_proceed	;wreg free
 17003                           
 17004                           ;diskio.c: 416: buff = 0xFF;
 17005  001DAE  0100               	movlb	0	; () banked
 17006  001DB0  697F               	setf	sdc_disk_initialize@buff& (0+255),b
 17007  001DB2                     
 17008                           ; BSR set to: 0
 17009                           ;diskio.c: 418: buff = response();
 17010                           
 17011                           ; BSR set to: 0
 17012  001DB2  ECB5  F02F         	call	_response	;wreg free
 17013  001DB6  0100               	movlb	0	; () banked
 17014  001DB8  6F7F               	movwf	sdc_disk_initialize@buff& (0+255),b
 17015                           
 17016                           ; BSR set to: 0
 17017                           ;diskio.c: 419: }while(buff!=0X00);
 17018  001DBA  517F               	movf	sdc_disk_initialize@buff& (0+255),w,b
 17019  001DBC  A4D8               	btfss	status,2,c
 17020  001DBE  D7F9               	goto	l122
 17021  001DC0                     u14120:
 17022                           
 17023                           ; BSR set to: 0
 17024                           ;diskio.c: 421: }
 17025                           ;diskio.c: 425: return stat;
 17026                           
 17027                           ; BSR set to: 0
 17028                           
 17029                           ; BSR set to: 0
 17030  001DC0  5176               	movf	sdc_disk_initialize@stat& (0+255),w,b
 17031  001DC2  0012               	return	
 17032  001DC4                     __end_of_sdc_disk_initialize:
 17033                           	opt stack 0
 17034                           tosu	equ	0xFFF
 17035                           tosh	equ	0xFFE
 17036                           tosl	equ	0xFFD
 17037                           pclath	equ	0xFFA
 17038                           tblptru	equ	0xFF8
 17039                           tblptrh	equ	0xFF7
 17040                           tblptrl	equ	0xFF6
 17041                           tablat	equ	0xFF5
 17042                           prodh	equ	0xFF4
 17043                           prodl	equ	0xFF3
 17044                           intcon	equ	0xFF2
 17045                           intcon2	equ	0xFF1
 17046                           intcon3	equ	0xFF0
 17047                           indf0	equ	0xFEF
 17048                           postinc0	equ	0xFEE
 17049                           fsr0h	equ	0xFEA
 17050                           fsr0l	equ	0xFE9
 17051                           wreg	equ	0xFE8
 17052                           indf1	equ	0xFE7
 17053                           postinc1	equ	0xFE6
 17054                           postdec1	equ	0xFE5
 17055                           plusw1	equ	0xFE3
 17056                           fsr1h	equ	0xFE2
 17057                           fsr1l	equ	0xFE1
 17058                           indf2	equ	0xFDF
 17059                           postinc2	equ	0xFDE
 17060                           postdec2	equ	0xFDD
 17061                           plusw2	equ	0xFDB
 17062                           fsr2h	equ	0xFDA
 17063                           fsr2l	equ	0xFD9
 17064                           status	equ	0xFD8
 17065                           
 17066 ;; *************** function _sdc_reset *****************
 17067 ;; Defined at:
 17068 ;;		line 238 in file "bibliotecas/diskio.c"
 17069 ;; Parameters:    Size  Location     Type
 17070 ;;		None
 17071 ;; Auto vars:     Size  Location     Type
 17072 ;;  teste          10    0        unsigned char [10]
 17073 ;;  count           2   16[BANK0 ] int 
 17074 ;;  count_nosd      2   14[BANK0 ] int 
 17075 ;;  i               2   12[BANK0 ] int 
 17076 ;;  receive         2    0        unsigned int 
 17077 ;;  buff            1   18[BANK0 ] unsigned char 
 17078 ;;  stat            1    0        unsigned char 
 17079 ;; Return value:  Size  Location     Type
 17080 ;;                  1    wreg      void 
 17081 ;; Registers used:
 17082 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17083 ;; Tracked objects:
 17084 ;;		On entry : 0/0
 17085 ;;		On exit  : 0/0
 17086 ;;		Unchanged: 0/0
 17087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17088 ;;      Params:         0       0       0       0       0       0       0       0       0
 17089 ;;      Locals:         0       7       0       0       0       0       0       0       0
 17090 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17091 ;;      Totals:         0       7       0       0       0       0       0       0       0
 17092 ;;Total ram usage:        7 bytes
 17093 ;; Hardware stack levels used:    1
 17094 ;; Hardware stack levels required when called:    6
 17095 ;; This function calls:
 17096 ;;		_command
 17097 ;;		_escreve_frase_ram_lcd
 17098 ;;		_posicao_cursor_lcd
 17099 ;;		_proceed
 17100 ;;		_response
 17101 ;; This function is called by:
 17102 ;;		_sdc_disk_initialize
 17103 ;; This function uses a non-reentrant model
 17104 ;;
 17105                           
 17106                           	psect	text65
 17107  004926                     __ptext65:
 17108                           	opt stack 0
 17109  004926                     _sdc_reset:
 17110                           	opt stack 16
 17111                           
 17112                           ;diskio.c: 240: int i = 0, count = 0, count_nosd = 0;
 17113                           
 17114                           ; BSR set to: 0
 17115                           ;incstack = 0
 17116  004926  0E00               	movlw	0
 17117  004928  0100               	movlb	0	; () banked
 17118  00492A  6F6D               	movwf	(sdc_reset@i+1)& (0+255),b
 17119  00492C  0E00               	movlw	0
 17120  00492E  6F6C               	movwf	sdc_reset@i& (0+255),b
 17121  004930  0E00               	movlw	0
 17122  004932  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 17123  004934  0E00               	movlw	0
 17124  004936  6F70               	movwf	sdc_reset@count& (0+255),b
 17125  004938  0E00               	movlw	0
 17126  00493A  6F6F               	movwf	(sdc_reset@count_nosd+1)& (0+255),b
 17127  00493C  0E00               	movlw	0
 17128  00493E  6F6E               	movwf	sdc_reset@count_nosd& (0+255),b
 17129  004940                     
 17130                           ; BSR set to: 0
 17131                           ;diskio.c: 248: command(0x40, 0X00000000, 0X95);
 17132                           
 17133                           ; BSR set to: 0
 17134  004940  0E00               	movlw	0
 17135  004942  6F65               	movwf	command@arg& (0+255),b
 17136  004944  0E00               	movlw	0
 17137  004946  6F66               	movwf	(command@arg+1)& (0+255),b
 17138  004948  0E00               	movlw	0
 17139  00494A  6F67               	movwf	(command@arg+2)& (0+255),b
 17140  00494C  0E00               	movlw	0
 17141  00494E  6F68               	movwf	(command@arg+3)& (0+255),b
 17142  004950  0E95               	movlw	149
 17143  004952  6F69               	movwf	command@CRC& (0+255),b
 17144  004954  0E40               	movlw	64
 17145  004956  EC2B  F02A         	call	_command
 17146                           
 17147                           ;diskio.c: 249: proceed();
 17148  00495A  ECBC  F02F         	call	_proceed	;wreg free
 17149  00495E                     
 17150                           ;diskio.c: 251: buff = response();
 17151  00495E  ECB5  F02F         	call	_response	;wreg free
 17152  004962  0100               	movlb	0	; () banked
 17153  004964  6F72               	movwf	sdc_reset@buff& (0+255),b
 17154                           
 17155                           ; BSR set to: 0
 17156                           ;diskio.c: 252: count++;
 17157  004966  4B70               	infsnz	sdc_reset@count& (0+255),f,b
 17158  004968  2B71               	incf	(sdc_reset@count+1)& (0+255),f,b
 17159                           
 17160                           ; BSR set to: 0
 17161                           ;diskio.c: 253: }while(buff!=0X01 && count<10);
 17162  00496A  0572               	decf	sdc_reset@buff& (0+255),w,b
 17163  00496C  B4D8               	btfsc	status,2,c
 17164  00496E  D008               	goto	u13650
 17165                           
 17166                           ; BSR set to: 0
 17167  004970  BF71               	btfsc	(sdc_reset@count+1)& (0+255),7,b
 17168  004972  D7F5               	goto	l76
 17169  004974  5171               	movf	(sdc_reset@count+1)& (0+255),w,b
 17170  004976  E104               	bnz	l11032
 17171  004978  0E0A               	movlw	10
 17172  00497A  5D70               	subwf	sdc_reset@count& (0+255),w,b
 17173  00497C  A0D8               	btfss	status,0,c
 17174  00497E  D7EF               	goto	l76
 17175  004980                     u13650:
 17176  004980                     l11032:
 17177                           
 17178                           ; BSR set to: 0
 17179                           ;diskio.c: 254: count = 0;
 17180  004980  0E00               	movlw	0
 17181  004982  6F71               	movwf	(sdc_reset@count+1)& (0+255),b
 17182  004984  0E00               	movlw	0
 17183  004986  6F70               	movwf	sdc_reset@count& (0+255),b
 17184                           
 17185                           ; BSR set to: 0
 17186                           ;diskio.c: 255: if(buff != 0x01)
 17187  004988  0572               	decf	sdc_reset@buff& (0+255),w,b
 17188  00498A  B4D8               	btfsc	status,2,c
 17189  00498C  D019               	goto	l80
 17190                           
 17191                           ; BSR set to: 0
 17192                           ;diskio.c: 256: {
 17193                           ;diskio.c: 257: posicao_cursor_lcd(1,0);
 17194  00498E  0E00               	movlw	0
 17195  004990  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 17196  004992  0E01               	movlw	1
 17197  004994  EC5A  F028         	call	_posicao_cursor_lcd
 17198                           
 17199                           ;diskio.c: 258: escreve_frase_ram_lcd("Sem Cartao");
 17200  004998  0EDC               	movlw	low STR_1
 17201  00499A  0100               	movlb	0	; () banked
 17202  00499C  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 17203  00499E  0E61               	movlw	high STR_1
 17204  0049A0  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 17205  0049A2  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 17206                           
 17207                           ;diskio.c: 259: posicao_cursor_lcd(2,0);
 17208  0049A6  0E00               	movlw	0
 17209  0049A8  0100               	movlb	0	; () banked
 17210  0049AA  6F63               	movwf	posicao_cursor_lcd@coluna& (0+255),b
 17211  0049AC  0E02               	movlw	2
 17212  0049AE  EC5A  F028         	call	_posicao_cursor_lcd
 17213                           
 17214                           ;diskio.c: 260: escreve_frase_ram_lcd("Insira o Cartao");
 17215  0049B2  0E64               	movlw	low STR_2
 17216  0049B4  0100               	movlb	0	; () banked
 17217  0049B6  6F63               	movwf	escreve_frase_ram_lcd@buffer& (0+255),b
 17218  0049B8  0E61               	movlw	high STR_2
 17219  0049BA  6F64               	movwf	(escreve_frase_ram_lcd@buffer+1)& (0+255),b
 17220  0049BC  EC69  F02B         	call	_escreve_frase_ram_lcd	;wreg free
 17221  0049C0                     l80:
 17222                           
 17223                           ;diskio.c: 261: }
 17224                           ;diskio.c: 263: }while(buff!=0X01);
 17225  0049C0  0100               	movlb	0	; () banked
 17226  0049C2  0572               	decf	sdc_reset@buff& (0+255),w,b
 17227  0049C4  B4D8               	btfsc	status,2,c
 17228  0049C6  0012               	return	
 17229  0049C8  D7BB               	goto	l75
 17230  0049CA                     __end_of_sdc_reset:
 17231                           	opt stack 0
 17232                           tosu	equ	0xFFF
 17233                           tosh	equ	0xFFE
 17234                           tosl	equ	0xFFD
 17235                           pclath	equ	0xFFA
 17236                           tblptru	equ	0xFF8
 17237                           tblptrh	equ	0xFF7
 17238                           tblptrl	equ	0xFF6
 17239                           tablat	equ	0xFF5
 17240                           prodh	equ	0xFF4
 17241                           prodl	equ	0xFF3
 17242                           intcon	equ	0xFF2
 17243                           intcon2	equ	0xFF1
 17244                           intcon3	equ	0xFF0
 17245                           indf0	equ	0xFEF
 17246                           postinc0	equ	0xFEE
 17247                           fsr0h	equ	0xFEA
 17248                           fsr0l	equ	0xFE9
 17249                           wreg	equ	0xFE8
 17250                           indf1	equ	0xFE7
 17251                           postinc1	equ	0xFE6
 17252                           postdec1	equ	0xFE5
 17253                           plusw1	equ	0xFE3
 17254                           fsr1h	equ	0xFE2
 17255                           fsr1l	equ	0xFE1
 17256                           indf2	equ	0xFDF
 17257                           postinc2	equ	0xFDE
 17258                           postdec2	equ	0xFDD
 17259                           plusw2	equ	0xFDB
 17260                           fsr2h	equ	0xFDA
 17261                           fsr2l	equ	0xFD9
 17262                           status	equ	0xFD8
 17263                           
 17264 ;; *************** function _posicao_cursor_lcd *****************
 17265 ;; Defined at:
 17266 ;;		line 271 in file "bibliotecas/display_lcd.c"
 17267 ;; Parameters:    Size  Location     Type
 17268 ;;  linha           1    wreg     unsigned char 
 17269 ;;  coluna          1    3[BANK0 ] unsigned char 
 17270 ;; Auto vars:     Size  Location     Type
 17271 ;;  linha           1    4[BANK0 ] unsigned char 
 17272 ;;  endereco        1    5[BANK0 ] unsigned char 
 17273 ;; Return value:  Size  Location     Type
 17274 ;;                  1    wreg      void 
 17275 ;; Registers used:
 17276 ;;		wreg, status,2, status,0, cstack
 17277 ;; Tracked objects:
 17278 ;;		On entry : 0/0
 17279 ;;		On exit  : 0/0
 17280 ;;		Unchanged: 0/0
 17281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17282 ;;      Params:         0       1       0       0       0       0       0       0       0
 17283 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17284 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17285 ;;      Totals:         0       3       0       0       0       0       0       0       0
 17286 ;;Total ram usage:        3 bytes
 17287 ;; Hardware stack levels used:    1
 17288 ;; Hardware stack levels required when called:    5
 17289 ;; This function calls:
 17290 ;;		_endereco_cursor_lcd
 17291 ;; This function is called by:
 17292 ;;		_sdc_reset
 17293 ;;		_sdc_disk_initialize
 17294 ;;		_mostra_dados_display
 17295 ;;		_mensagem_inicial
 17296 ;;		_troca_de_tela
 17297 ;;		_sdcard_init
 17298 ;; This function uses a non-reentrant model
 17299 ;;
 17300                           
 17301                           	psect	text66
 17302  0050B4                     __ptext66:
 17303                           	opt stack 0
 17304  0050B4                     _posicao_cursor_lcd:
 17305                           	opt stack 24
 17306                           
 17307                           ; BSR set to: 0
 17308                           ;incstack = 0
 17309                           ;posicao_cursor_lcd@linha stored from wreg
 17310  0050B4  0100               	movlb	0	; () banked
 17311  0050B6  6F64               	movwf	posicao_cursor_lcd@linha& (0+255),b
 17312                           
 17313                           ;display_lcd.c: 273: unsigned char endereco = 0x00;
 17314  0050B8  0E00               	movlw	0
 17315  0050BA  0100               	movlb	0	; () banked
 17316  0050BC  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 17317                           
 17318                           ; BSR set to: 0
 17319                           ;display_lcd.c: 275: if(coluna <= 0x10U)
 17320  0050BE  0E11               	movlw	17
 17321  0050C0  6163               	cpfslt	posicao_cursor_lcd@coluna& (0+255),b
 17322  0050C2  D034               	goto	l230
 17323  0050C4  D022               	goto	l231
 17324  0050C6                     l232:
 17325                           
 17326                           ; BSR set to: 0
 17327                           ;display_lcd.c: 282: endereco = 0x00U + coluna;
 17328  0050C6  C063  F065         	movff	posicao_cursor_lcd@coluna,posicao_cursor_lcd@endereco
 17329                           
 17330                           ; BSR set to: 0
 17331                           ;display_lcd.c: 283: endereco_cursor_lcd(endereco);
 17332  0050CA  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 17333  0050CC  ECBF  F029         	call	_endereco_cursor_lcd
 17334                           
 17335                           ;display_lcd.c: 284: break;
 17336  0050D0  D02A               	goto	l233
 17337  0050D2                     
 17338                           ;display_lcd.c: 287: endereco = 0x40U + coluna;
 17339  0050D2  0100               	movlb	0	; () banked
 17340  0050D4  5163               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 17341  0050D6  0F40               	addlw	64
 17342  0050D8  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 17343                           
 17344                           ; BSR set to: 0
 17345                           ;display_lcd.c: 288: endereco_cursor_lcd(endereco);
 17346  0050DA  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 17347  0050DC  ECBF  F029         	call	_endereco_cursor_lcd
 17348                           
 17349                           ;display_lcd.c: 289: break;
 17350  0050E0  D022               	goto	l233
 17351  0050E2                     
 17352                           ;display_lcd.c: 292: endereco = 0x14U + coluna;
 17353  0050E2  0100               	movlb	0	; () banked
 17354  0050E4  5163               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 17355  0050E6  0F14               	addlw	20
 17356  0050E8  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 17357                           
 17358                           ; BSR set to: 0
 17359                           ;display_lcd.c: 293: endereco_cursor_lcd(endereco);
 17360  0050EA  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 17361  0050EC  ECBF  F029         	call	_endereco_cursor_lcd
 17362                           
 17363                           ;display_lcd.c: 294: break;
 17364  0050F0  D01A               	goto	l233
 17365  0050F2                     
 17366                           ;display_lcd.c: 297: endereco = 0x54U + coluna;
 17367  0050F2  0100               	movlb	0	; () banked
 17368  0050F4  5163               	movf	posicao_cursor_lcd@coluna& (0+255),w,b
 17369  0050F6  0F54               	addlw	84
 17370  0050F8  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 17371                           
 17372                           ; BSR set to: 0
 17373                           ;display_lcd.c: 298: endereco_cursor_lcd(endereco);
 17374  0050FA  5165               	movf	posicao_cursor_lcd@endereco& (0+255),w,b
 17375  0050FC  ECBF  F029         	call	_endereco_cursor_lcd
 17376                           
 17377                           ;display_lcd.c: 299: break;
 17378  005100  D012               	goto	l233
 17379  005102                     
 17380                           ;display_lcd.c: 302: endereco = 0x00U;
 17381  005102  0E00               	movlw	0
 17382  005104  0100               	movlb	0	; () banked
 17383  005106  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 17384                           
 17385                           ; BSR set to: 0
 17386                           ;display_lcd.c: 304: }
 17387                           
 17388                           ;display_lcd.c: 303: break;
 17389  005108  D00E               	goto	l233
 17390  00510A                     l231:
 17391                           
 17392                           ; BSR set to: 0
 17393                           
 17394                           ; BSR set to: 0
 17395  00510A  5164               	movf	posicao_cursor_lcd@linha& (0+255),w,b
 17396                           
 17397                           ; Switch size 1, requested type "space"
 17398                           ; Number of cases is 4, Range of values is 1 to 4
 17399                           ; switch strategies available:
 17400                           ; Name         Instructions Cycles
 17401                           ; simple_byte           13     7 (average)
 17402                           ;	Chosen strategy is simple_byte
 17403  00510C  0A01               	xorlw	1	; case 1
 17404  00510E  B4D8               	btfsc	status,2,c
 17405  005110  D7DA               	goto	l232
 17406  005112  0A03               	xorlw	3	; case 2
 17407  005114  B4D8               	btfsc	status,2,c
 17408  005116  D7DD               	goto	l234
 17409  005118  0A01               	xorlw	1	; case 3
 17410  00511A  B4D8               	btfsc	status,2,c
 17411  00511C  D7E2               	goto	l235
 17412  00511E  0A07               	xorlw	7	; case 4
 17413  005120  B4D8               	btfsc	status,2,c
 17414  005122  D7E7               	goto	l236
 17415  005124  D7EE               	goto	l237
 17416  005126                     l233:
 17417                           
 17418                           ;display_lcd.c: 306: coluna++;
 17419                           
 17420                           ; BSR set to: 0
 17421  005126  0100               	movlb	0	; () banked
 17422  005128  2B63               	incf	posicao_cursor_lcd@coluna& (0+255),f,b
 17423                           
 17424                           ;display_lcd.c: 307: }
 17425  00512A  0012               	return	
 17426  00512C                     l230:
 17427                           
 17428                           ; BSR set to: 0
 17429                           ;display_lcd.c: 308: else
 17430                           ;display_lcd.c: 309: {
 17431                           ;display_lcd.c: 310: endereco = 0x00U;
 17432                           
 17433                           ; BSR set to: 0
 17434  00512C  0E00               	movlw	0
 17435  00512E  6F65               	movwf	posicao_cursor_lcd@endereco& (0+255),b
 17436  005130  0012               	return	
 17437  005132                     __end_of_posicao_cursor_lcd:
 17438                           	opt stack 0
 17439                           tosu	equ	0xFFF
 17440                           tosh	equ	0xFFE
 17441                           tosl	equ	0xFFD
 17442                           pclath	equ	0xFFA
 17443                           tblptru	equ	0xFF8
 17444                           tblptrh	equ	0xFF7
 17445                           tblptrl	equ	0xFF6
 17446                           tablat	equ	0xFF5
 17447                           prodh	equ	0xFF4
 17448                           prodl	equ	0xFF3
 17449                           intcon	equ	0xFF2
 17450                           intcon2	equ	0xFF1
 17451                           intcon3	equ	0xFF0
 17452                           indf0	equ	0xFEF
 17453                           postinc0	equ	0xFEE
 17454                           fsr0h	equ	0xFEA
 17455                           fsr0l	equ	0xFE9
 17456                           wreg	equ	0xFE8
 17457                           indf1	equ	0xFE7
 17458                           postinc1	equ	0xFE6
 17459                           postdec1	equ	0xFE5
 17460                           plusw1	equ	0xFE3
 17461                           fsr1h	equ	0xFE2
 17462                           fsr1l	equ	0xFE1
 17463                           indf2	equ	0xFDF
 17464                           postinc2	equ	0xFDE
 17465                           postdec2	equ	0xFDD
 17466                           plusw2	equ	0xFDB
 17467                           fsr2h	equ	0xFDA
 17468                           fsr2l	equ	0xFD9
 17469                           status	equ	0xFD8
 17470                           
 17471 ;; *************** function _endereco_cursor_lcd *****************
 17472 ;; Defined at:
 17473 ;;		line 218 in file "bibliotecas/display_lcd.c"
 17474 ;; Parameters:    Size  Location     Type
 17475 ;;  endereco        1    wreg     unsigned char 
 17476 ;; Auto vars:     Size  Location     Type
 17477 ;;  endereco        1    2[BANK0 ] unsigned char 
 17478 ;; Return value:  Size  Location     Type
 17479 ;;                  1    wreg      void 
 17480 ;; Registers used:
 17481 ;;		wreg, status,2, status,0, cstack
 17482 ;; Tracked objects:
 17483 ;;		On entry : 0/0
 17484 ;;		On exit  : 0/0
 17485 ;;		Unchanged: 0/0
 17486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17487 ;;      Params:         0       0       0       0       0       0       0       0       0
 17488 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17489 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17490 ;;      Totals:         0       1       0       0       0       0       0       0       0
 17491 ;;Total ram usage:        1 bytes
 17492 ;; Hardware stack levels used:    1
 17493 ;; Hardware stack levels required when called:    4
 17494 ;; This function calls:
 17495 ;;		_delay
 17496 ;; This function is called by:
 17497 ;;		_posicao_cursor_lcd
 17498 ;;		_cria_caractere_lcd
 17499 ;; This function uses a non-reentrant model
 17500 ;;
 17501                           
 17502                           	psect	text67
 17503  00537E                     __ptext67:
 17504                           	opt stack 0
 17505  00537E                     _endereco_cursor_lcd:
 17506                           	opt stack 24
 17507                           
 17508                           ; BSR set to: 0
 17509                           ;incstack = 0
 17510                           ;endereco_cursor_lcd@endereco stored from wreg
 17511  00537E  0100               	movlb	0	; () banked
 17512  005380  6F62               	movwf	endereco_cursor_lcd@endereco& (0+255),b
 17513                           
 17514                           ;display_lcd.c: 221: PORTDbits.RD2 = 0;
 17515  005382  9483               	bcf	3971,2,c	;volatile
 17516                           
 17517                           ;display_lcd.c: 222: PORTDbits.RD1 = 0;
 17518  005384  9283               	bcf	3971,1,c	;volatile
 17519                           
 17520                           ;display_lcd.c: 223: PORTDbits.RD0 = 0;
 17521  005386  9083               	bcf	3971,0,c	;volatile
 17522                           
 17523                           ;display_lcd.c: 226: PORTDbits.RD7 = 1;
 17524  005388  8E83               	bsf	3971,7,c	;volatile
 17525                           
 17526                           ;display_lcd.c: 227: if(endereco&0b00010000){PORTDbits.RD4=1;}
 17527  00538A  0100               	movlb	0	; () banked
 17528  00538C  A962               	btfss	endereco_cursor_lcd@endereco& (0+255),4,b
 17529  00538E  D002               	goto	l213
 17530                           
 17531                           ; BSR set to: 0
 17532  005390  8883               	bsf	3971,4,c	;volatile
 17533  005392  D001               	goto	l214
 17534  005394                     l213:
 17535                           
 17536                           ; BSR set to: 0
 17537                           ;display_lcd.c: 228: else {PORTDbits.RD4=0;}
 17538  005394  9883               	bcf	3971,4,c	;volatile
 17539  005396                     l214:
 17540                           
 17541                           ; BSR set to: 0
 17542                           ;display_lcd.c: 229: if(endereco&0b00100000){PORTDbits.RD5=1;}
 17543                           
 17544                           ; BSR set to: 0
 17545  005396  AB62               	btfss	endereco_cursor_lcd@endereco& (0+255),5,b
 17546  005398  D002               	goto	l215
 17547                           
 17548                           ; BSR set to: 0
 17549  00539A  8A83               	bsf	3971,5,c	;volatile
 17550  00539C  D001               	goto	l216
 17551  00539E                     l215:
 17552                           
 17553                           ; BSR set to: 0
 17554                           ;display_lcd.c: 230: else {PORTDbits.RD5=0;}
 17555  00539E  9A83               	bcf	3971,5,c	;volatile
 17556  0053A0                     l216:
 17557                           
 17558                           ; BSR set to: 0
 17559                           ;display_lcd.c: 231: if(endereco&0b01000000){PORTDbits.RD6=1;}
 17560                           
 17561                           ; BSR set to: 0
 17562  0053A0  AD62               	btfss	endereco_cursor_lcd@endereco& (0+255),6,b
 17563  0053A2  D002               	goto	l217
 17564                           
 17565                           ; BSR set to: 0
 17566  0053A4  8C83               	bsf	3971,6,c	;volatile
 17567  0053A6  D001               	goto	l218
 17568  0053A8                     l217:
 17569                           
 17570                           ; BSR set to: 0
 17571                           ;display_lcd.c: 232: else {PORTDbits.RD6=0;}
 17572  0053A8  9C83               	bcf	3971,6,c	;volatile
 17573  0053AA                     l218:
 17574                           
 17575                           ; BSR set to: 0
 17576                           ;display_lcd.c: 235: PORTDbits.RD0 = 1;
 17577  0053AA  8083               	bsf	3971,0,c	;volatile
 17578                           
 17579                           ; BSR set to: 0
 17580                           ;display_lcd.c: 236: delay();
 17581  0053AC  ECB8  F02E         	call	_delay	;wreg free
 17582                           
 17583                           ;display_lcd.c: 237: PORTDbits.RD0 = 0;
 17584  0053B0  9083               	bcf	3971,0,c	;volatile
 17585                           
 17586                           ;display_lcd.c: 238: delay();
 17587  0053B2  ECB8  F02E         	call	_delay	;wreg free
 17588                           
 17589                           ;display_lcd.c: 241: if(endereco&0b00000001){PORTDbits.RD4=1;}
 17590  0053B6  0100               	movlb	0	; () banked
 17591  0053B8  A162               	btfss	endereco_cursor_lcd@endereco& (0+255),0,b
 17592  0053BA  D002               	goto	l219
 17593                           
 17594                           ; BSR set to: 0
 17595  0053BC  8883               	bsf	3971,4,c	;volatile
 17596  0053BE  D001               	goto	l220
 17597  0053C0                     l219:
 17598                           
 17599                           ; BSR set to: 0
 17600                           ;display_lcd.c: 242: else {PORTDbits.RD4=0;}
 17601  0053C0  9883               	bcf	3971,4,c	;volatile
 17602  0053C2                     l220:
 17603                           
 17604                           ; BSR set to: 0
 17605                           ;display_lcd.c: 243: if(endereco&0b00000010){PORTDbits.RD5=1;}
 17606  0053C2  A362               	btfss	endereco_cursor_lcd@endereco& (0+255),1,b
 17607  0053C4  D002               	goto	l221
 17608                           
 17609                           ; BSR set to: 0
 17610  0053C6  8A83               	bsf	3971,5,c	;volatile
 17611  0053C8  D001               	goto	l222
 17612  0053CA                     l221:
 17613                           
 17614                           ; BSR set to: 0
 17615                           ;display_lcd.c: 244: else {PORTDbits.RD5=0;}
 17616  0053CA  9A83               	bcf	3971,5,c	;volatile
 17617  0053CC                     l222:
 17618                           
 17619                           ; BSR set to: 0
 17620                           ;display_lcd.c: 245: if(endereco&0b00000100){PORTDbits.RD6=1;}
 17621  0053CC  A562               	btfss	endereco_cursor_lcd@endereco& (0+255),2,b
 17622  0053CE  D002               	goto	l223
 17623                           
 17624                           ; BSR set to: 0
 17625  0053D0  8C83               	bsf	3971,6,c	;volatile
 17626  0053D2  D001               	goto	l224
 17627  0053D4                     l223:
 17628                           
 17629                           ; BSR set to: 0
 17630                           ;display_lcd.c: 246: else {PORTDbits.RD6=0;}
 17631  0053D4  9C83               	bcf	3971,6,c	;volatile
 17632  0053D6                     l224:
 17633                           
 17634                           ; BSR set to: 0
 17635                           ;display_lcd.c: 247: if(endereco&0b00001000){PORTDbits.RD7=1;}
 17636  0053D6  A762               	btfss	endereco_cursor_lcd@endereco& (0+255),3,b
 17637  0053D8  D002               	goto	l225
 17638                           
 17639                           ; BSR set to: 0
 17640  0053DA  8E83               	bsf	3971,7,c	;volatile
 17641  0053DC  D001               	goto	l226
 17642  0053DE                     l225:
 17643                           
 17644                           ; BSR set to: 0
 17645                           ;display_lcd.c: 248: else {PORTDbits.RD7=0;}
 17646  0053DE  9E83               	bcf	3971,7,c	;volatile
 17647  0053E0                     l226:
 17648                           
 17649                           ; BSR set to: 0
 17650                           ;display_lcd.c: 251: PORTDbits.RD0 = 1;
 17651  0053E0  8083               	bsf	3971,0,c	;volatile
 17652                           
 17653                           ; BSR set to: 0
 17654                           ;display_lcd.c: 252: delay();
 17655  0053E2  ECB8  F02E         	call	_delay	;wreg free
 17656                           
 17657                           ;display_lcd.c: 253: PORTDbits.RD0 = 0;
 17658  0053E6  9083               	bcf	3971,0,c	;volatile
 17659                           
 17660                           ;display_lcd.c: 254: delay();
 17661  0053E8  ECB8  F02E         	call	_delay	;wreg free
 17662  0053EC  0012               	return		;funcret
 17663  0053EE                     __end_of_endereco_cursor_lcd:
 17664                           	opt stack 0
 17665                           tosu	equ	0xFFF
 17666                           tosh	equ	0xFFE
 17667                           tosl	equ	0xFFD
 17668                           pclath	equ	0xFFA
 17669                           tblptru	equ	0xFF8
 17670                           tblptrh	equ	0xFF7
 17671                           tblptrl	equ	0xFF6
 17672                           tablat	equ	0xFF5
 17673                           prodh	equ	0xFF4
 17674                           prodl	equ	0xFF3
 17675                           intcon	equ	0xFF2
 17676                           intcon2	equ	0xFF1
 17677                           intcon3	equ	0xFF0
 17678                           indf0	equ	0xFEF
 17679                           postinc0	equ	0xFEE
 17680                           fsr0h	equ	0xFEA
 17681                           fsr0l	equ	0xFE9
 17682                           wreg	equ	0xFE8
 17683                           indf1	equ	0xFE7
 17684                           postinc1	equ	0xFE6
 17685                           postdec1	equ	0xFE5
 17686                           plusw1	equ	0xFE3
 17687                           fsr1h	equ	0xFE2
 17688                           fsr1l	equ	0xFE1
 17689                           indf2	equ	0xFDF
 17690                           postinc2	equ	0xFDE
 17691                           postdec2	equ	0xFDD
 17692                           plusw2	equ	0xFDB
 17693                           fsr2h	equ	0xFDA
 17694                           fsr2l	equ	0xFD9
 17695                           status	equ	0xFD8
 17696                           
 17697 ;; *************** function _escreve_frase_ram_lcd *****************
 17698 ;; Defined at:
 17699 ;;		line 445 in file "bibliotecas/display_lcd.c"
 17700 ;; Parameters:    Size  Location     Type
 17701 ;;  buffer          2    3[BANK0 ] PTR unsigned char 
 17702 ;;		 -> STR_39(8), STR_38(9), STR_37(4), STR_36(4), 
 17703 ;;		 -> STR_35(5), STR_34(2), STR_33(5), STR_32(7), 
 17704 ;;		 -> STR_31(7), STR_30(2), STR_29(5), STR_28(7), 
 17705 ;;		 -> STR_25(11), mensagem_inicial@msg_dois(17), mensagem_inicial@msg_linha_um(17), STR_14(9), 
 17706 ;;		 -> STR_13(10), STR_12(10), STR_11(14), STR_10(21), 
 17707 ;;		 -> STR_9(15), rawFix(2), rawLongitude(12), rawLatitude(11), 
 17708 ;;		 -> escreve_inteiro_lcd@texto(7), STR_4(11), STR_3(10), STR_2(16), 
 17709 ;;		 -> STR_1(11), 
 17710 ;; Auto vars:     Size  Location     Type
 17711 ;;		None
 17712 ;; Return value:  Size  Location     Type
 17713 ;;                  1    wreg      void 
 17714 ;; Registers used:
 17715 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17716 ;; Tracked objects:
 17717 ;;		On entry : 0/0
 17718 ;;		On exit  : 0/0
 17719 ;;		Unchanged: 0/0
 17720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17721 ;;      Params:         0       2       0       0       0       0       0       0       0
 17722 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17723 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17724 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17725 ;;Total ram usage:        2 bytes
 17726 ;; Hardware stack levels used:    1
 17727 ;; Hardware stack levels required when called:    5
 17728 ;; This function calls:
 17729 ;;		_escreve_caractere_lcd
 17730 ;; This function is called by:
 17731 ;;		_sdc_reset
 17732 ;;		_sdc_disk_initialize
 17733 ;;		_escreve_inteiro_lcd
 17734 ;;		_mostra_dados_display
 17735 ;;		_mensagem_inicial
 17736 ;;		_troca_de_tela
 17737 ;;		_sdcard_init
 17738 ;; This function uses a non-reentrant model
 17739 ;;
 17740                           
 17741                           	psect	text68
 17742  0056D2                     __ptext68:
 17743                           	opt stack 0
 17744  0056D2                     _escreve_frase_ram_lcd:
 17745                           	opt stack 24
 17746                           
 17747                           ;display_lcd.c: 447: while(*buffer)
 17748                           
 17749                           ;incstack = 0
 17750  0056D2  D015               	goto	l275
 17751  0056D4                     
 17752                           ;display_lcd.c: 448: {
 17753                           ;display_lcd.c: 449: escreve_caractere_lcd(*buffer);
 17754  0056D4  C063  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 17755  0056D8  C064  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 17756  0056DC  6AF8               	clrf	tblptru,c
 17757  0056DE  0E07               	movlw	(high __ramtop+-1)
 17758  0056E0  64F7               	cpfsgt	tblptrh,c
 17759  0056E2  D003               	bra	u13427
 17760  0056E4  0008               	tblrd		*
 17761  0056E6  50F5               	movf	tablat,w,c
 17762  0056E8  D005               	bra	u13420
 17763  0056EA                     u13427:
 17764  0056EA  CFF6 FFE9          	movff	tblptrl,fsr0l
 17765  0056EE  CFF7 FFEA          	movff	tblptrh,fsr0h
 17766  0056F2  50EF               	movf	indf0,w,c
 17767  0056F4                     u13420:
 17768  0056F4  EC12  F029         	call	_escreve_caractere_lcd
 17769                           
 17770                           ;display_lcd.c: 450: buffer++;
 17771  0056F8  0100               	movlb	0	; () banked
 17772  0056FA  4B63               	infsnz	escreve_frase_ram_lcd@buffer& (0+255),f,b
 17773  0056FC  2B64               	incf	(escreve_frase_ram_lcd@buffer+1)& (0+255),f,b
 17774  0056FE                     l275:
 17775                           
 17776                           ; BSR set to: 0
 17777  0056FE  C063  FFF6         	movff	escreve_frase_ram_lcd@buffer,tblptrl
 17778  005702  C064  FFF7         	movff	escreve_frase_ram_lcd@buffer+1,tblptrh
 17779  005706  6AF8               	clrf	tblptru,c
 17780  005708  0E07               	movlw	(high __ramtop+-1)
 17781  00570A  64F7               	cpfsgt	tblptrh,c
 17782  00570C  D003               	bra	u13437
 17783  00570E  0008               	tblrd		*
 17784  005710  50F5               	movf	tablat,w,c
 17785  005712  D005               	bra	u13430
 17786  005714                     u13437:
 17787  005714  CFF6 FFE9          	movff	tblptrl,fsr0l
 17788  005718  CFF7 FFEA          	movff	tblptrh,fsr0h
 17789  00571C  50EF               	movf	indf0,w,c
 17790  00571E                     u13430:
 17791  00571E  0900               	iorlw	0
 17792  005720  B4D8               	btfsc	status,2,c
 17793  005722  0012               	return	
 17794  005724  D7D7               	goto	l276
 17795  005726                     __end_of_escreve_frase_ram_lcd:
 17796                           	opt stack 0
 17797                           tosu	equ	0xFFF
 17798                           tosh	equ	0xFFE
 17799                           tosl	equ	0xFFD
 17800                           pclath	equ	0xFFA
 17801                           tblptru	equ	0xFF8
 17802                           tblptrh	equ	0xFF7
 17803                           tblptrl	equ	0xFF6
 17804                           tablat	equ	0xFF5
 17805                           prodh	equ	0xFF4
 17806                           prodl	equ	0xFF3
 17807                           intcon	equ	0xFF2
 17808                           intcon2	equ	0xFF1
 17809                           intcon3	equ	0xFF0
 17810                           indf0	equ	0xFEF
 17811                           postinc0	equ	0xFEE
 17812                           fsr0h	equ	0xFEA
 17813                           fsr0l	equ	0xFE9
 17814                           wreg	equ	0xFE8
 17815                           indf1	equ	0xFE7
 17816                           postinc1	equ	0xFE6
 17817                           postdec1	equ	0xFE5
 17818                           plusw1	equ	0xFE3
 17819                           fsr1h	equ	0xFE2
 17820                           fsr1l	equ	0xFE1
 17821                           indf2	equ	0xFDF
 17822                           postinc2	equ	0xFDE
 17823                           postdec2	equ	0xFDD
 17824                           plusw2	equ	0xFDB
 17825                           fsr2h	equ	0xFDA
 17826                           fsr2l	equ	0xFD9
 17827                           status	equ	0xFD8
 17828                           
 17829 ;; *************** function _escreve_caractere_lcd *****************
 17830 ;; Defined at:
 17831 ;;		line 323 in file "bibliotecas/display_lcd.c"
 17832 ;; Parameters:    Size  Location     Type
 17833 ;;  data            1    wreg     unsigned char 
 17834 ;; Auto vars:     Size  Location     Type
 17835 ;;  data            1    2[BANK0 ] unsigned char 
 17836 ;; Return value:  Size  Location     Type
 17837 ;;                  1    wreg      void 
 17838 ;; Registers used:
 17839 ;;		wreg, status,2, status,0, cstack
 17840 ;; Tracked objects:
 17841 ;;		On entry : 0/0
 17842 ;;		On exit  : 0/0
 17843 ;;		Unchanged: 0/0
 17844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17845 ;;      Params:         0       0       0       0       0       0       0       0       0
 17846 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17847 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17848 ;;      Totals:         0       1       0       0       0       0       0       0       0
 17849 ;;Total ram usage:        1 bytes
 17850 ;; Hardware stack levels used:    1
 17851 ;; Hardware stack levels required when called:    4
 17852 ;; This function calls:
 17853 ;;		_delay
 17854 ;; This function is called by:
 17855 ;;		_escreve_frase_ram_lcd
 17856 ;;		_escreve_float_lcd
 17857 ;;		_escreve_frase_lcd
 17858 ;;		_cria_caractere_lcd
 17859 ;; This function uses a non-reentrant model
 17860 ;;
 17861                           
 17862                           	psect	text69
 17863  005224                     __ptext69:
 17864                           	opt stack 0
 17865  005224                     _escreve_caractere_lcd:
 17866                           	opt stack 24
 17867                           
 17868                           ;incstack = 0
 17869                           ;escreve_caractere_lcd@data stored from wreg
 17870  005224  0100               	movlb	0	; () banked
 17871  005226  6F62               	movwf	escreve_caractere_lcd@data& (0+255),b
 17872                           
 17873                           ;display_lcd.c: 326: PORTDbits.RD2 = 0;
 17874  005228  9483               	bcf	3971,2,c	;volatile
 17875                           
 17876                           ;display_lcd.c: 327: PORTDbits.RD1 = 1;
 17877  00522A  8283               	bsf	3971,1,c	;volatile
 17878                           
 17879                           ;display_lcd.c: 328: PORTDbits.RD0 = 0;
 17880  00522C  9083               	bcf	3971,0,c	;volatile
 17881                           
 17882                           ;display_lcd.c: 331: if(data&0b00010000){PORTDbits.RD4=1;}
 17883  00522E  0100               	movlb	0	; () banked
 17884  005230  A962               	btfss	escreve_caractere_lcd@data& (0+255),4,b
 17885  005232  D002               	goto	l242
 17886                           
 17887                           ; BSR set to: 0
 17888  005234  8883               	bsf	3971,4,c	;volatile
 17889  005236  D001               	goto	l243
 17890  005238                     l242:
 17891                           
 17892                           ; BSR set to: 0
 17893                           ;display_lcd.c: 332: else {PORTDbits.RD4=0;}
 17894  005238  9883               	bcf	3971,4,c	;volatile
 17895  00523A                     l243:
 17896                           
 17897                           ; BSR set to: 0
 17898                           ;display_lcd.c: 333: if(data&0b00100000){PORTDbits.RD5=1;}
 17899                           
 17900                           ; BSR set to: 0
 17901  00523A  AB62               	btfss	escreve_caractere_lcd@data& (0+255),5,b
 17902  00523C  D002               	goto	l244
 17903                           
 17904                           ; BSR set to: 0
 17905  00523E  8A83               	bsf	3971,5,c	;volatile
 17906  005240  D001               	goto	l245
 17907  005242                     l244:
 17908                           
 17909                           ; BSR set to: 0
 17910                           ;display_lcd.c: 334: else {PORTDbits.RD5=0;}
 17911  005242  9A83               	bcf	3971,5,c	;volatile
 17912  005244                     l245:
 17913                           
 17914                           ; BSR set to: 0
 17915                           ;display_lcd.c: 335: if(data&0b01000000){PORTDbits.RD6=1;}
 17916                           
 17917                           ; BSR set to: 0
 17918  005244  AD62               	btfss	escreve_caractere_lcd@data& (0+255),6,b
 17919  005246  D002               	goto	l246
 17920                           
 17921                           ; BSR set to: 0
 17922  005248  8C83               	bsf	3971,6,c	;volatile
 17923  00524A  D001               	goto	l247
 17924  00524C                     l246:
 17925                           
 17926                           ; BSR set to: 0
 17927                           ;display_lcd.c: 336: else {PORTDbits.RD6=0;}
 17928  00524C  9C83               	bcf	3971,6,c	;volatile
 17929  00524E                     l247:
 17930                           
 17931                           ; BSR set to: 0
 17932                           ;display_lcd.c: 337: if(data&0b10000000){PORTDbits.RD7=1;}
 17933                           
 17934                           ; BSR set to: 0
 17935  00524E  AF62               	btfss	escreve_caractere_lcd@data& (0+255),7,b
 17936  005250  D002               	goto	l248
 17937                           
 17938                           ; BSR set to: 0
 17939  005252  8E83               	bsf	3971,7,c	;volatile
 17940  005254  D001               	goto	l249
 17941  005256                     l248:
 17942                           
 17943                           ; BSR set to: 0
 17944                           ;display_lcd.c: 338: else {PORTDbits.RD7=0;}
 17945  005256  9E83               	bcf	3971,7,c	;volatile
 17946  005258                     l249:
 17947                           
 17948                           ; BSR set to: 0
 17949                           ;display_lcd.c: 341: PORTDbits.RD0 = 1;
 17950  005258  8083               	bsf	3971,0,c	;volatile
 17951                           
 17952                           ; BSR set to: 0
 17953                           ;display_lcd.c: 342: delay();
 17954  00525A  ECB8  F02E         	call	_delay	;wreg free
 17955                           
 17956                           ;display_lcd.c: 343: PORTDbits.RD0 = 0;
 17957  00525E  9083               	bcf	3971,0,c	;volatile
 17958                           
 17959                           ;display_lcd.c: 344: delay();
 17960  005260  ECB8  F02E         	call	_delay	;wreg free
 17961                           
 17962                           ;display_lcd.c: 348: if(data&0b00000001){PORTDbits.RD4=1;}
 17963  005264  0100               	movlb	0	; () banked
 17964  005266  A162               	btfss	escreve_caractere_lcd@data& (0+255),0,b
 17965  005268  D002               	goto	l250
 17966                           
 17967                           ; BSR set to: 0
 17968  00526A  8883               	bsf	3971,4,c	;volatile
 17969  00526C  D001               	goto	l251
 17970  00526E                     l250:
 17971                           
 17972                           ; BSR set to: 0
 17973                           ;display_lcd.c: 349: else {PORTDbits.RD4=0;}
 17974  00526E  9883               	bcf	3971,4,c	;volatile
 17975  005270                     l251:
 17976                           
 17977                           ; BSR set to: 0
 17978                           ;display_lcd.c: 350: if(data&0b00000010){PORTDbits.RD5=1;}
 17979  005270  A362               	btfss	escreve_caractere_lcd@data& (0+255),1,b
 17980  005272  D002               	goto	l252
 17981                           
 17982                           ; BSR set to: 0
 17983  005274  8A83               	bsf	3971,5,c	;volatile
 17984  005276  D001               	goto	l253
 17985  005278                     l252:
 17986                           
 17987                           ; BSR set to: 0
 17988                           ;display_lcd.c: 351: else {PORTDbits.RD5=0;}
 17989  005278  9A83               	bcf	3971,5,c	;volatile
 17990  00527A                     l253:
 17991                           
 17992                           ; BSR set to: 0
 17993                           ;display_lcd.c: 352: if(data&0b00000100){PORTDbits.RD6=1;}
 17994  00527A  A562               	btfss	escreve_caractere_lcd@data& (0+255),2,b
 17995  00527C  D002               	goto	l254
 17996                           
 17997                           ; BSR set to: 0
 17998  00527E  8C83               	bsf	3971,6,c	;volatile
 17999  005280  D001               	goto	l255
 18000  005282                     l254:
 18001                           
 18002                           ; BSR set to: 0
 18003                           ;display_lcd.c: 353: else {PORTDbits.RD6=0;}
 18004  005282  9C83               	bcf	3971,6,c	;volatile
 18005  005284                     l255:
 18006                           
 18007                           ; BSR set to: 0
 18008                           ;display_lcd.c: 354: if(data&0b00001000){PORTDbits.RD7=1;}
 18009  005284  A762               	btfss	escreve_caractere_lcd@data& (0+255),3,b
 18010  005286  D002               	goto	l256
 18011                           
 18012                           ; BSR set to: 0
 18013  005288  8E83               	bsf	3971,7,c	;volatile
 18014  00528A  D001               	goto	l257
 18015  00528C                     l256:
 18016                           
 18017                           ; BSR set to: 0
 18018                           ;display_lcd.c: 355: else {PORTDbits.RD7=0;}
 18019  00528C  9E83               	bcf	3971,7,c	;volatile
 18020  00528E                     l257:
 18021                           
 18022                           ; BSR set to: 0
 18023                           ;display_lcd.c: 358: PORTDbits.RD0 = 1;
 18024  00528E  8083               	bsf	3971,0,c	;volatile
 18025                           
 18026                           ; BSR set to: 0
 18027                           ;display_lcd.c: 359: delay();
 18028  005290  ECB8  F02E         	call	_delay	;wreg free
 18029                           
 18030                           ;display_lcd.c: 360: PORTDbits.RD0 = 0;
 18031  005294  9083               	bcf	3971,0,c	;volatile
 18032                           
 18033                           ;display_lcd.c: 361: delay();
 18034  005296  ECB8  F02E         	call	_delay	;wreg free
 18035  00529A  0012               	return		;funcret
 18036  00529C                     __end_of_escreve_caractere_lcd:
 18037                           	opt stack 0
 18038                           tosu	equ	0xFFF
 18039                           tosh	equ	0xFFE
 18040                           tosl	equ	0xFFD
 18041                           pclath	equ	0xFFA
 18042                           tblptru	equ	0xFF8
 18043                           tblptrh	equ	0xFF7
 18044                           tblptrl	equ	0xFF6
 18045                           tablat	equ	0xFF5
 18046                           prodh	equ	0xFF4
 18047                           prodl	equ	0xFF3
 18048                           intcon	equ	0xFF2
 18049                           intcon2	equ	0xFF1
 18050                           intcon3	equ	0xFF0
 18051                           indf0	equ	0xFEF
 18052                           postinc0	equ	0xFEE
 18053                           fsr0h	equ	0xFEA
 18054                           fsr0l	equ	0xFE9
 18055                           wreg	equ	0xFE8
 18056                           indf1	equ	0xFE7
 18057                           postinc1	equ	0xFE6
 18058                           postdec1	equ	0xFE5
 18059                           plusw1	equ	0xFE3
 18060                           fsr1h	equ	0xFE2
 18061                           fsr1l	equ	0xFE1
 18062                           indf2	equ	0xFDF
 18063                           postinc2	equ	0xFDE
 18064                           postdec2	equ	0xFDD
 18065                           plusw2	equ	0xFDB
 18066                           fsr2h	equ	0xFDA
 18067                           fsr2l	equ	0xFD9
 18068                           status	equ	0xFD8
 18069                           
 18070 ;; *************** function _delay *****************
 18071 ;; Defined at:
 18072 ;;		line 45 in file "bibliotecas/display_lcd.c"
 18073 ;; Parameters:    Size  Location     Type
 18074 ;;		None
 18075 ;; Auto vars:     Size  Location     Type
 18076 ;;  contador_int    1    1[BANK0 ] unsigned char 
 18077 ;;  contador_ext    1    0[BANK0 ] unsigned char 
 18078 ;; Return value:  Size  Location     Type
 18079 ;;                  1    wreg      void 
 18080 ;; Registers used:
 18081 ;;		wreg, status,2, status,0
 18082 ;; Tracked objects:
 18083 ;;		On entry : 0/0
 18084 ;;		On exit  : 0/0
 18085 ;;		Unchanged: 0/0
 18086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18087 ;;      Params:         0       0       0       0       0       0       0       0       0
 18088 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18089 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18090 ;;      Totals:         0       2       0       0       0       0       0       0       0
 18091 ;;Total ram usage:        2 bytes
 18092 ;; Hardware stack levels used:    1
 18093 ;; Hardware stack levels required when called:    3
 18094 ;; This function calls:
 18095 ;;		Nothing
 18096 ;; This function is called by:
 18097 ;;		_init_lcd
 18098 ;;		_escreve_cmd_lcd
 18099 ;;		_endereco_cursor_lcd
 18100 ;;		_escreve_caractere_lcd
 18101 ;; This function uses a non-reentrant model
 18102 ;;
 18103                           
 18104                           	psect	text70
 18105  005D70                     __ptext70:
 18106                           	opt stack 0
 18107  005D70                     _delay:
 18108                           	opt stack 24
 18109                           
 18110                           ;display_lcd.c: 47: unsigned char contador_ext, contador_int;
 18111                           ;display_lcd.c: 49: for(contador_ext = 0; contador_ext<100; contador_ext++)
 18112                           
 18113                           ;incstack = 0
 18114  005D70  0E00               	movlw	0
 18115  005D72  0100               	movlb	0	; () banked
 18116  005D74  6F60               	movwf	delay@contador_ext& (0+255),b
 18117  005D76                     l10686:
 18118                           
 18119                           ; BSR set to: 0
 18120  005D76  0E63               	movlw	99
 18121  005D78  6560               	cpfsgt	delay@contador_ext& (0+255),b
 18122  005D7A  D001               	goto	l181
 18123  005D7C  0012               	return	
 18124  005D7E                     l181:
 18125                           
 18126                           ; BSR set to: 0
 18127                           ;display_lcd.c: 50: {
 18128                           ;display_lcd.c: 51: __nop();
 18129  005D7E  F000               	nop	
 18130                           
 18131                           ;display_lcd.c: 52: for(contador_int = 0; contador_int<50; contador_int++)
 18132  005D80  0E00               	movlw	0
 18133  005D82  0100               	movlb	0	; () banked
 18134  005D84  6F61               	movwf	delay@contador_int& (0+255),b
 18135  005D86                     l10692:
 18136                           
 18137                           ; BSR set to: 0
 18138  005D86  0E31               	movlw	49
 18139  005D88  6561               	cpfsgt	delay@contador_int& (0+255),b
 18140  005D8A  D001               	goto	l183
 18141  005D8C  D004               	goto	u13150
 18142  005D8E                     l183:
 18143                           
 18144                           ; BSR set to: 0
 18145                           ;display_lcd.c: 53: {
 18146                           ;display_lcd.c: 54: __nop();
 18147  005D8E  F000               	nop	
 18148  005D90  0100               	movlb	0	; () banked
 18149  005D92  2B61               	incf	delay@contador_int& (0+255),f,b
 18150  005D94  D7F8               	goto	l10692
 18151  005D96                     u13150:
 18152                           
 18153                           ; BSR set to: 0
 18154                           
 18155                           ; BSR set to: 0
 18156  005D96  2B60               	incf	delay@contador_ext& (0+255),f,b
 18157  005D98  D7EE               	goto	l10686
 18158  005D9A                     __end_of_delay:
 18159                           	opt stack 0
 18160                           tosu	equ	0xFFF
 18161                           tosh	equ	0xFFE
 18162                           tosl	equ	0xFFD
 18163                           pclath	equ	0xFFA
 18164                           tblptru	equ	0xFF8
 18165                           tblptrh	equ	0xFF7
 18166                           tblptrl	equ	0xFF6
 18167                           tablat	equ	0xFF5
 18168                           prodh	equ	0xFF4
 18169                           prodl	equ	0xFF3
 18170                           intcon	equ	0xFF2
 18171                           intcon2	equ	0xFF1
 18172                           intcon3	equ	0xFF0
 18173                           indf0	equ	0xFEF
 18174                           postinc0	equ	0xFEE
 18175                           fsr0h	equ	0xFEA
 18176                           fsr0l	equ	0xFE9
 18177                           wreg	equ	0xFE8
 18178                           indf1	equ	0xFE7
 18179                           postinc1	equ	0xFE6
 18180                           postdec1	equ	0xFE5
 18181                           plusw1	equ	0xFE3
 18182                           fsr1h	equ	0xFE2
 18183                           fsr1l	equ	0xFE1
 18184                           indf2	equ	0xFDF
 18185                           postinc2	equ	0xFDE
 18186                           postdec2	equ	0xFDD
 18187                           plusw2	equ	0xFDB
 18188                           fsr2h	equ	0xFDA
 18189                           fsr2l	equ	0xFD9
 18190                           status	equ	0xFD8
 18191                           
 18192 ;; *************** function _check_fs *****************
 18193 ;; Defined at:
 18194 ;;		line 624 in file "bibliotecas/tff.c"
 18195 ;; Parameters:    Size  Location     Type
 18196 ;;  sect            4   43[BANK0 ] unsigned long 
 18197 ;; Auto vars:     Size  Location     Type
 18198 ;;  fs              2   49[BANK0 ] PTR struct _FATFS
 18199 ;;		 -> NULL(0), fs(544), 
 18200 ;; Return value:  Size  Location     Type
 18201 ;;                  1    wreg      unsigned char 
 18202 ;; Registers used:
 18203 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18204 ;; Tracked objects:
 18205 ;;		On entry : 0/0
 18206 ;;		On exit  : 0/0
 18207 ;;		Unchanged: 0/0
 18208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18209 ;;      Params:         0       4       0       0       0       0       0       0       0
 18210 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18211 ;;      Temps:          0       2       0       0       0       0       0       0       0
 18212 ;;      Totals:         0       8       0       0       0       0       0       0       0
 18213 ;;Total ram usage:        8 bytes
 18214 ;; Hardware stack levels used:    1
 18215 ;; Hardware stack levels required when called:    8
 18216 ;; This function calls:
 18217 ;;		_disk_read
 18218 ;;		_memcmp
 18219 ;; This function is called by:
 18220 ;;		_auto_mount
 18221 ;; This function uses a non-reentrant model
 18222 ;;
 18223                           
 18224                           	psect	text71
 18225  004E10                     __ptext71:
 18226                           	opt stack 0
 18227  004E10                     _check_fs:
 18228                           	opt stack 16
 18229                           
 18230                           ;tff.c: 628: FATFS *fs = FatFs;
 18231                           
 18232                           ; BSR set to: 0
 18233                           ;incstack = 0
 18234  004E10  C0F6  F091         	movff	_FatFs,check_fs@fs
 18235  004E14  C0F7  F092         	movff	_FatFs+1,check_fs@fs+1
 18236                           
 18237                           ;tff.c: 630: if (disk_read(0, fs->win, sect, 1) != RES_OK)
 18238  004E18  0E20               	movlw	32
 18239  004E1A  0100               	movlb	0	; () banked
 18240  004E1C  2591               	addwf	check_fs@fs& (0+255),w,b
 18241  004E1E  6F7F               	movwf	disk_read@buff& (0+255),b
 18242  004E20  0E00               	movlw	0
 18243  004E22  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 18244  004E24  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 18245  004E26  C08B  F081         	movff	check_fs@sect,disk_read@sector
 18246  004E2A  C08C  F082         	movff	check_fs@sect+1,disk_read@sector+1
 18247  004E2E  C08D  F083         	movff	check_fs@sect+2,disk_read@sector+2
 18248  004E32  C08E  F084         	movff	check_fs@sect+3,disk_read@sector+3
 18249  004E36  0E01               	movlw	1
 18250  004E38  6F85               	movwf	disk_read@count& (0+255),b
 18251  004E3A  0E00               	movlw	0
 18252  004E3C  ECC0  F026         	call	_disk_read
 18253  004E40  0900               	iorlw	0
 18254  004E42  B4D8               	btfsc	status,2,c
 18255  004E44  D002               	goto	l974
 18256                           
 18257                           ;tff.c: 631: return 2;
 18258  004E46  0E02               	movlw	2
 18259  004E48  0012               	return	
 18260  004E4A                     l974:
 18261                           
 18262                           ;tff.c: 632: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 18263  004E4A  0100               	movlb	0	; () banked
 18264  004E4C  EE22 F01E          	lfsr	2,542
 18265  004E50  5191               	movf	check_fs@fs& (0+255),w,b
 18266  004E52  26D9               	addwf	fsr2l,f,c
 18267  004E54  5192               	movf	(check_fs@fs+1)& (0+255),w,b
 18268  004E56  22DA               	addwfc	fsr2h,f,c
 18269  004E58  0E55               	movlw	85
 18270  004E5A  18DE               	xorwf	postinc2,w,c
 18271  004E5C  E104               	bnz	u14940
 18272  004E5E  0EAA               	movlw	170
 18273  004E60  18DE               	xorwf	postinc2,w,c
 18274  004E62  B4D8               	btfsc	status,2,c
 18275  004E64  D002               	goto	l976
 18276  004E66                     u14940:
 18277                           
 18278                           ; BSR set to: 0
 18279                           ;tff.c: 633: return 2;
 18280  004E66  0E02               	movlw	2
 18281                           
 18282                           ; BSR set to: 0
 18283  004E68  0012               	return	
 18284  004E6A                     l976:
 18285                           
 18286                           ; BSR set to: 0
 18287                           ;tff.c: 635: if (!memcmp(&fs->win[54], "FAT", 3))
 18288                           
 18289                           ; BSR set to: 0
 18290  004E6A  0E56               	movlw	86
 18291  004E6C  2591               	addwf	check_fs@fs& (0+255),w,b
 18292  004E6E  6F60               	movwf	memcmp@s1& (0+255),b
 18293  004E70  0E00               	movlw	0
 18294  004E72  2192               	addwfc	(check_fs@fs+1)& (0+255),w,b
 18295  004E74  6F61               	movwf	(memcmp@s1+1)& (0+255),b
 18296  004E76  0E76               	movlw	low STR_23
 18297  004E78  6F62               	movwf	memcmp@s2& (0+255),b
 18298  004E7A  0E62               	movlw	high STR_23
 18299  004E7C  6F63               	movwf	(memcmp@s2+1)& (0+255),b
 18300  004E7E  0E00               	movlw	0
 18301  004E80  6F65               	movwf	(memcmp@n+1)& (0+255),b
 18302  004E82  0E03               	movlw	3
 18303  004E84  6F64               	movwf	memcmp@n& (0+255),b
 18304  004E86  ECE5  F024         	call	_memcmp	;wreg free
 18305  004E8A  0100               	movlb	0	; () banked
 18306  004E8C  5160               	movf	?_memcmp& (0+255),w,b
 18307  004E8E  1161               	iorwf	(?_memcmp+1)& (0+255),w,b
 18308  004E90  A4D8               	btfss	status,2,c
 18309  004E92  D002               	goto	l977
 18310                           
 18311                           ; BSR set to: 0
 18312                           ;tff.c: 636: return 0;
 18313  004E94  0E00               	movlw	0
 18314                           
 18315                           ; BSR set to: 0
 18316  004E96  0012               	return	
 18317  004E98                     l977:
 18318                           
 18319                           ; BSR set to: 0
 18320                           ;tff.c: 641: return 1;
 18321                           
 18322                           ; BSR set to: 0
 18323  004E98  0E01               	movlw	1
 18324  004E9A  0012               	return	
 18325  004E9C                     __end_of_check_fs:
 18326                           	opt stack 0
 18327                           tosu	equ	0xFFF
 18328                           tosh	equ	0xFFE
 18329                           tosl	equ	0xFFD
 18330                           pclath	equ	0xFFA
 18331                           tblptru	equ	0xFF8
 18332                           tblptrh	equ	0xFF7
 18333                           tblptrl	equ	0xFF6
 18334                           tablat	equ	0xFF5
 18335                           prodh	equ	0xFF4
 18336                           prodl	equ	0xFF3
 18337                           intcon	equ	0xFF2
 18338                           intcon2	equ	0xFF1
 18339                           intcon3	equ	0xFF0
 18340                           indf0	equ	0xFEF
 18341                           postinc0	equ	0xFEE
 18342                           fsr0h	equ	0xFEA
 18343                           fsr0l	equ	0xFE9
 18344                           wreg	equ	0xFE8
 18345                           indf1	equ	0xFE7
 18346                           postinc1	equ	0xFE6
 18347                           postdec1	equ	0xFE5
 18348                           plusw1	equ	0xFE3
 18349                           fsr1h	equ	0xFE2
 18350                           fsr1l	equ	0xFE1
 18351                           indf2	equ	0xFDF
 18352                           postinc2	equ	0xFDE
 18353                           postdec2	equ	0xFDD
 18354                           plusw2	equ	0xFDB
 18355                           fsr2h	equ	0xFDA
 18356                           fsr2l	equ	0xFD9
 18357                           status	equ	0xFD8
 18358                           
 18359 ;; *************** function _memcmp *****************
 18360 ;; Defined at:
 18361 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcmp.c"
 18362 ;; Parameters:    Size  Location     Type
 18363 ;;  s1              2    0[BANK0 ] PTR const void 
 18364 ;;		 -> fs.win(512), NULL(0), fs(544), 
 18365 ;;  s2              2    2[BANK0 ] PTR const void 
 18366 ;;		 -> f_opendir@fn(12), f_open@fn(12), STR_23(4), 
 18367 ;;  n               2    4[BANK0 ] unsigned int 
 18368 ;; Auto vars:     Size  Location     Type
 18369 ;;		None
 18370 ;; Return value:  Size  Location     Type
 18371 ;;                  2    0[BANK0 ] int 
 18372 ;; Registers used:
 18373 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 18374 ;; Tracked objects:
 18375 ;;		On entry : 0/0
 18376 ;;		On exit  : 0/0
 18377 ;;		Unchanged: 0/0
 18378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18379 ;;      Params:         0       6       0       0       0       0       0       0       0
 18380 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18381 ;;      Temps:          0       3       0       0       0       0       0       0       0
 18382 ;;      Totals:         0       9       0       0       0       0       0       0       0
 18383 ;;Total ram usage:        9 bytes
 18384 ;; Hardware stack levels used:    1
 18385 ;; Hardware stack levels required when called:    3
 18386 ;; This function calls:
 18387 ;;		Nothing
 18388 ;; This function is called by:
 18389 ;;		_trace_path
 18390 ;;		_check_fs
 18391 ;; This function uses a non-reentrant model
 18392 ;;
 18393                           
 18394                           	psect	text72
 18395  0049CA                     __ptext72:
 18396                           	opt stack 0
 18397  0049CA                     _memcmp:
 18398                           	opt stack 21
 18399                           
 18400                           ;incstack = 0
 18401  0049CA  D043               	goto	l2112
 18402  0049CC                     l11386:
 18403  0049CC  C060  FFD9         	movff	memcmp@s1,fsr2l
 18404  0049D0  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 18405  0049D4  50DF               	movf	indf2,w,c
 18406  0049D6  0100               	movlb	0	; () banked
 18407  0049D8  6F66               	movwf	??_memcmp& (0+255),b
 18408  0049DA  C062  FFF6         	movff	memcmp@s2,tblptrl
 18409  0049DE  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 18410  0049E2  6AF8               	clrf	tblptru,c
 18411  0049E4  0E07               	movlw	(high __ramtop+-1)
 18412  0049E6  64F7               	cpfsgt	tblptrh,c
 18413  0049E8  D003               	bra	u14147
 18414  0049EA  0008               	tblrd		*
 18415  0049EC  50F5               	movf	tablat,w,c
 18416  0049EE  D005               	bra	u14140
 18417  0049F0                     u14147:
 18418  0049F0  CFF6 FFE9          	movff	tblptrl,fsr0l
 18419  0049F4  CFF7 FFEA          	movff	tblptrh,fsr0h
 18420  0049F8  50EF               	movf	indf0,w,c
 18421  0049FA                     u14140:
 18422  0049FA  0100               	movlb	0	; () banked
 18423  0049FC  1966               	xorwf	??_memcmp& (0+255),w,b
 18424  0049FE  B4D8               	btfsc	status,2,c
 18425  004A00  D024               	goto	l2114
 18426                           
 18427                           ; BSR set to: 0
 18428  004A02  C062  FFF6         	movff	memcmp@s2,tblptrl
 18429  004A06  C063  FFF7         	movff	memcmp@s2+1,tblptrh
 18430  004A0A  6AF8               	clrf	tblptru,c
 18431  004A0C  0E07               	movlw	(high __ramtop+-1)
 18432  004A0E  64F7               	cpfsgt	tblptrh,c
 18433  004A10  D003               	bra	u14167
 18434  004A12  0008               	tblrd		*
 18435  004A14  50F5               	movf	tablat,w,c
 18436  004A16  D005               	bra	u14160
 18437  004A18                     u14167:
 18438  004A18  CFF6 FFE9          	movff	tblptrl,fsr0l
 18439  004A1C  CFF7 FFEA          	movff	tblptrh,fsr0h
 18440  004A20  50EF               	movf	indf0,w,c
 18441  004A22                     u14160:
 18442  004A22  0100               	movlb	0	; () banked
 18443  004A24  6F66               	movwf	??_memcmp& (0+255),b
 18444  004A26  6B67               	clrf	(??_memcmp+1)& (0+255),b
 18445  004A28  1F66               	comf	??_memcmp& (0+255),f,b
 18446  004A2A  1F67               	comf	(??_memcmp+1)& (0+255),f,b
 18447  004A2C  4B66               	infsnz	??_memcmp& (0+255),f,b
 18448  004A2E  2B67               	incf	(??_memcmp+1)& (0+255),f,b
 18449  004A30  C060  FFD9         	movff	memcmp@s1,fsr2l
 18450  004A34  C061  FFDA         	movff	memcmp@s1+1,fsr2h
 18451  004A38  50DF               	movf	indf2,w,c
 18452  004A3A  6F68               	movwf	(??_memcmp+2)& (0+255),b
 18453  004A3C  5168               	movf	(??_memcmp+2)& (0+255),w,b
 18454  004A3E  2566               	addwf	??_memcmp& (0+255),w,b
 18455  004A40  6F60               	movwf	?_memcmp& (0+255),b
 18456  004A42  0E00               	movlw	0
 18457  004A44  2167               	addwfc	(??_memcmp+1)& (0+255),w,b
 18458  004A46  6F61               	movwf	(?_memcmp+1)& (0+255),b
 18459                           
 18460                           ; BSR set to: 0
 18461  004A48  0012               	return	
 18462  004A4A                     l2114:
 18463                           
 18464                           ; BSR set to: 0
 18465                           
 18466                           ; BSR set to: 0
 18467  004A4A  4B60               	infsnz	memcmp@s1& (0+255),f,b
 18468  004A4C  2B61               	incf	(memcmp@s1+1)& (0+255),f,b
 18469  004A4E  4B62               	infsnz	memcmp@s2& (0+255),f,b
 18470  004A50  2B63               	incf	(memcmp@s2+1)& (0+255),f,b
 18471  004A52                     l2112:
 18472                           
 18473                           ; BSR set to: 0
 18474  004A52  0100               	movlb	0	; () banked
 18475  004A54  0764               	decf	memcmp@n& (0+255),f,b
 18476  004A56  A0D8               	btfss	status,0,c
 18477  004A58  0765               	decf	(memcmp@n+1)& (0+255),f,b
 18478  004A5A  2964               	incf	memcmp@n& (0+255),w,b
 18479  004A5C  E1B7               	bnz	l11386
 18480  004A5E  2965               	incf	(memcmp@n+1)& (0+255),w,b
 18481  004A60  A4D8               	btfss	status,2,c
 18482  004A62  D7B4               	goto	l2113
 18483                           
 18484                           ; BSR set to: 0
 18485                           
 18486                           ; BSR set to: 0
 18487  004A64  0E00               	movlw	0
 18488  004A66  6F61               	movwf	(?_memcmp+1)& (0+255),b
 18489  004A68  0E00               	movlw	0
 18490  004A6A  6F60               	movwf	?_memcmp& (0+255),b
 18491  004A6C  0012               	return	
 18492  004A6E                     __end_of_memcmp:
 18493                           	opt stack 0
 18494                           tosu	equ	0xFFF
 18495                           tosh	equ	0xFFE
 18496                           tosl	equ	0xFFD
 18497                           pclath	equ	0xFFA
 18498                           tblptru	equ	0xFF8
 18499                           tblptrh	equ	0xFF7
 18500                           tblptrl	equ	0xFF6
 18501                           tablat	equ	0xFF5
 18502                           prodh	equ	0xFF4
 18503                           prodl	equ	0xFF3
 18504                           intcon	equ	0xFF2
 18505                           intcon2	equ	0xFF1
 18506                           intcon3	equ	0xFF0
 18507                           indf0	equ	0xFEF
 18508                           postinc0	equ	0xFEE
 18509                           fsr0h	equ	0xFEA
 18510                           fsr0l	equ	0xFE9
 18511                           wreg	equ	0xFE8
 18512                           indf1	equ	0xFE7
 18513                           postinc1	equ	0xFE6
 18514                           postdec1	equ	0xFE5
 18515                           plusw1	equ	0xFE3
 18516                           fsr1h	equ	0xFE2
 18517                           fsr1l	equ	0xFE1
 18518                           indf2	equ	0xFDF
 18519                           postinc2	equ	0xFDE
 18520                           postdec2	equ	0xFDD
 18521                           plusw2	equ	0xFDB
 18522                           fsr2h	equ	0xFDA
 18523                           fsr2l	equ	0xFD9
 18524                           status	equ	0xFD8
 18525                           
 18526 ;; *************** function ___lmul *****************
 18527 ;; Defined at:
 18528 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 18529 ;; Parameters:    Size  Location     Type
 18530 ;;  multiplier      4    0[BANK0 ] unsigned long 
 18531 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 18532 ;; Auto vars:     Size  Location     Type
 18533 ;;  product         4    8[BANK0 ] unsigned long 
 18534 ;; Return value:  Size  Location     Type
 18535 ;;                  4    0[BANK0 ] unsigned long 
 18536 ;; Registers used:
 18537 ;;		wreg, status,2, status,0
 18538 ;; Tracked objects:
 18539 ;;		On entry : 0/0
 18540 ;;		On exit  : 0/0
 18541 ;;		Unchanged: 0/0
 18542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18543 ;;      Params:         0       8       0       0       0       0       0       0       0
 18544 ;;      Locals:         0       4       0       0       0       0       0       0       0
 18545 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18546 ;;      Totals:         0      12       0       0       0       0       0       0       0
 18547 ;;Total ram usage:       12 bytes
 18548 ;; Hardware stack levels used:    1
 18549 ;; Hardware stack levels required when called:    3
 18550 ;; This function calls:
 18551 ;;		Nothing
 18552 ;; This function is called by:
 18553 ;;		_clust2sect
 18554 ;;		_auto_mount
 18555 ;;		_atol
 18556 ;; This function uses a non-reentrant model
 18557 ;;
 18558                           
 18559                           	psect	text73
 18560  00557A                     __ptext73:
 18561                           	opt stack 0
 18562  00557A                     ___lmul:
 18563                           	opt stack 19
 18564                           
 18565                           ; BSR set to: 0
 18566                           ;incstack = 0
 18567  00557A  0E00               	movlw	0
 18568  00557C  0100               	movlb	0	; () banked
 18569  00557E  6F68               	movwf	___lmul@product& (0+255),b
 18570  005580  0E00               	movlw	0
 18571  005582  6F69               	movwf	(___lmul@product+1)& (0+255),b
 18572  005584  0E00               	movlw	0
 18573  005586  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 18574  005588  0E00               	movlw	0
 18575  00558A  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 18576  00558C                     
 18577                           ; BSR set to: 0
 18578                           
 18579                           ; BSR set to: 0
 18580  00558C  A160               	btfss	___lmul@multiplier& (0+255),0,b
 18581  00558E  D008               	goto	l1631
 18582                           
 18583                           ; BSR set to: 0
 18584  005590  5164               	movf	___lmul@multiplicand& (0+255),w,b
 18585  005592  2768               	addwf	___lmul@product& (0+255),f,b
 18586  005594  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 18587  005596  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 18588  005598  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 18589  00559A  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 18590  00559C  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 18591  00559E  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 18592  0055A0                     l1631:
 18593                           
 18594                           ; BSR set to: 0
 18595                           
 18596                           ; BSR set to: 0
 18597  0055A0  90D8               	bcf	status,0,c
 18598  0055A2  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 18599  0055A4  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 18600  0055A6  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 18601  0055A8  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 18602                           
 18603                           ; BSR set to: 0
 18604  0055AA  90D8               	bcf	status,0,c
 18605  0055AC  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 18606  0055AE  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 18607  0055B0  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 18608  0055B2  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 18609  0055B4  5160               	movf	___lmul@multiplier& (0+255),w,b
 18610  0055B6  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 18611  0055B8  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 18612  0055BA  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 18613  0055BC  A4D8               	btfss	status,2,c
 18614  0055BE  D7E6               	goto	l1630
 18615                           
 18616                           ; BSR set to: 0
 18617  0055C0  C068  F060         	movff	___lmul@product,?___lmul
 18618  0055C4  C069  F061         	movff	___lmul@product+1,?___lmul+1
 18619  0055C8  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 18620  0055CC  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 18621                           
 18622                           ; BSR set to: 0
 18623  0055D0  0012               	return		;funcret
 18624  0055D2                     __end_of___lmul:
 18625                           	opt stack 0
 18626                           tosu	equ	0xFFF
 18627                           tosh	equ	0xFFE
 18628                           tosl	equ	0xFFD
 18629                           pclath	equ	0xFFA
 18630                           tblptru	equ	0xFF8
 18631                           tblptrh	equ	0xFF7
 18632                           tblptrl	equ	0xFF6
 18633                           tablat	equ	0xFF5
 18634                           prodh	equ	0xFF4
 18635                           prodl	equ	0xFF3
 18636                           intcon	equ	0xFF2
 18637                           intcon2	equ	0xFF1
 18638                           intcon3	equ	0xFF0
 18639                           indf0	equ	0xFEF
 18640                           postinc0	equ	0xFEE
 18641                           fsr0h	equ	0xFEA
 18642                           fsr0l	equ	0xFE9
 18643                           wreg	equ	0xFE8
 18644                           indf1	equ	0xFE7
 18645                           postinc1	equ	0xFE6
 18646                           postdec1	equ	0xFE5
 18647                           plusw1	equ	0xFE3
 18648                           fsr1h	equ	0xFE2
 18649                           fsr1l	equ	0xFE1
 18650                           indf2	equ	0xFDF
 18651                           postinc2	equ	0xFDE
 18652                           postdec2	equ	0xFDD
 18653                           plusw2	equ	0xFDB
 18654                           fsr2h	equ	0xFDA
 18655                           fsr2l	equ	0xFD9
 18656                           status	equ	0xFD8
 18657                           
 18658 ;; *************** function _f_mount *****************
 18659 ;; Defined at:
 18660 ;;		line 794 in file "bibliotecas/tff.c"
 18661 ;; Parameters:    Size  Location     Type
 18662 ;;  drv             1    wreg     unsigned char 
 18663 ;;  fs              2    0[BANK0 ] PTR struct _FATFS
 18664 ;;		 -> fs(544), 
 18665 ;; Auto vars:     Size  Location     Type
 18666 ;;  drv             1    2[BANK0 ] unsigned char 
 18667 ;; Return value:  Size  Location     Type
 18668 ;;                  1    wreg      enum E3979
 18669 ;; Registers used:
 18670 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18671 ;; Tracked objects:
 18672 ;;		On entry : 0/0
 18673 ;;		On exit  : 0/0
 18674 ;;		Unchanged: 0/0
 18675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18676 ;;      Params:         0       2       0       0       0       0       0       0       0
 18677 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18678 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18679 ;;      Totals:         0       3       0       0       0       0       0       0       0
 18680 ;;Total ram usage:        3 bytes
 18681 ;; Hardware stack levels used:    1
 18682 ;; Hardware stack levels required when called:    3
 18683 ;; This function calls:
 18684 ;;		Nothing
 18685 ;; This function is called by:
 18686 ;;		_escrita_sdcard
 18687 ;;		_sdcard_init
 18688 ;;		_leitura_sdcard
 18689 ;; This function uses a non-reentrant model
 18690 ;;
 18691                           
 18692                           	psect	text74
 18693  0057C4                     __ptext74:
 18694                           	opt stack 0
 18695  0057C4                     _f_mount:
 18696                           	opt stack 23
 18697                           
 18698                           ; BSR set to: 0
 18699                           ;incstack = 0
 18700                           ;f_mount@drv stored from wreg
 18701  0057C4  0100               	movlb	0	; () banked
 18702  0057C6  6F62               	movwf	f_mount@drv& (0+255),b
 18703                           
 18704                           ;tff.c: 799: if (drv) return FR_INVALID_DRIVE;
 18705  0057C8  0100               	movlb	0	; () banked
 18706  0057CA  5162               	movf	f_mount@drv& (0+255),w,b
 18707  0057CC  B4D8               	btfsc	status,2,c
 18708  0057CE  D002               	goto	l1009
 18709                           
 18710                           ; BSR set to: 0
 18711  0057D0  0E05               	movlw	5
 18712                           
 18713                           ; BSR set to: 0
 18714  0057D2  0012               	return	
 18715  0057D4                     l1009:
 18716                           
 18717                           ; BSR set to: 0
 18718                           ;tff.c: 801: if (FatFs) FatFs->fs_type = 0;
 18719                           
 18720                           ; BSR set to: 0
 18721  0057D4  51F6               	movf	_FatFs& (0+255),w,b
 18722  0057D6  11F7               	iorwf	(_FatFs+1)& (0+255),w,b
 18723  0057D8  B4D8               	btfsc	status,2,c
 18724  0057DA  D008               	goto	l1011
 18725                           
 18726                           ; BSR set to: 0
 18727  0057DC  EE20 F01C          	lfsr	2,28
 18728  0057E0  51F6               	movf	_FatFs& (0+255),w,b
 18729  0057E2  26D9               	addwf	fsr2l,f,c
 18730  0057E4  51F7               	movf	(_FatFs+1)& (0+255),w,b
 18731  0057E6  22DA               	addwfc	fsr2h,f,c
 18732  0057E8  0E00               	movlw	0
 18733  0057EA  6EDF               	movwf	indf2,c
 18734  0057EC                     l1011:
 18735                           
 18736                           ; BSR set to: 0
 18737                           ;tff.c: 803: FatFs = fs;
 18738                           
 18739                           ; BSR set to: 0
 18740  0057EC  C060  F0F6         	movff	f_mount@fs,_FatFs
 18741  0057F0  C061  F0F7         	movff	f_mount@fs+1,_FatFs+1
 18742                           
 18743                           ; BSR set to: 0
 18744                           ;tff.c: 804: if (fs) fs->fs_type = 0;
 18745  0057F4  5160               	movf	f_mount@fs& (0+255),w,b
 18746  0057F6  1161               	iorwf	(f_mount@fs+1)& (0+255),w,b
 18747  0057F8  B4D8               	btfsc	status,2,c
 18748  0057FA  D008               	goto	l1012
 18749                           
 18750                           ; BSR set to: 0
 18751  0057FC  EE20 F01C          	lfsr	2,28
 18752  005800  5160               	movf	f_mount@fs& (0+255),w,b
 18753  005802  26D9               	addwf	fsr2l,f,c
 18754  005804  5161               	movf	(f_mount@fs+1)& (0+255),w,b
 18755  005806  22DA               	addwfc	fsr2h,f,c
 18756  005808  0E00               	movlw	0
 18757  00580A  6EDF               	movwf	indf2,c
 18758  00580C                     l1012:
 18759                           
 18760                           ; BSR set to: 0
 18761                           ;tff.c: 806: return FR_OK;
 18762                           
 18763                           ; BSR set to: 0
 18764  00580C  0E00               	movlw	0
 18765  00580E  0012               	return	
 18766  005810                     __end_of_f_mount:
 18767                           	opt stack 0
 18768                           tosu	equ	0xFFF
 18769                           tosh	equ	0xFFE
 18770                           tosl	equ	0xFFD
 18771                           pclath	equ	0xFFA
 18772                           tblptru	equ	0xFF8
 18773                           tblptrh	equ	0xFF7
 18774                           tblptrl	equ	0xFF6
 18775                           tablat	equ	0xFF5
 18776                           prodh	equ	0xFF4
 18777                           prodl	equ	0xFF3
 18778                           intcon	equ	0xFF2
 18779                           intcon2	equ	0xFF1
 18780                           intcon3	equ	0xFF0
 18781                           indf0	equ	0xFEF
 18782                           postinc0	equ	0xFEE
 18783                           fsr0h	equ	0xFEA
 18784                           fsr0l	equ	0xFE9
 18785                           wreg	equ	0xFE8
 18786                           indf1	equ	0xFE7
 18787                           postinc1	equ	0xFE6
 18788                           postdec1	equ	0xFE5
 18789                           plusw1	equ	0xFE3
 18790                           fsr1h	equ	0xFE2
 18791                           fsr1l	equ	0xFE1
 18792                           indf2	equ	0xFDF
 18793                           postinc2	equ	0xFDE
 18794                           postdec2	equ	0xFDD
 18795                           plusw2	equ	0xFDB
 18796                           fsr2h	equ	0xFDA
 18797                           fsr2l	equ	0xFD9
 18798                           status	equ	0xFD8
 18799                           
 18800 ;; *************** function _f_lseek *****************
 18801 ;; Defined at:
 18802 ;;		line 1140 in file "bibliotecas/tff.c"
 18803 ;; Parameters:    Size  Location     Type
 18804 ;;  fp              2  100[BANK0 ] PTR struct _FIL
 18805 ;;		 -> fil(28), 
 18806 ;;  ofs             4  102[BANK0 ] unsigned long 
 18807 ;; Auto vars:     Size  Location     Type
 18808 ;;  csize           4  123[BANK0 ] unsigned long 
 18809 ;;  ifptr           4  119[BANK0 ] unsigned long 
 18810 ;;  clust           2  127[BANK0 ] unsigned short 
 18811 ;;  res             1  118[BANK0 ] enum E155
 18812 ;; Return value:  Size  Location     Type
 18813 ;;                  1    wreg      enum E3979
 18814 ;; Registers used:
 18815 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18816 ;; Tracked objects:
 18817 ;;		On entry : 0/0
 18818 ;;		On exit  : 0/0
 18819 ;;		Unchanged: 0/0
 18820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18821 ;;      Params:         0       6       0       0       0       0       0       0       0
 18822 ;;      Locals:         0      11       0       0       0       0       0       0       0
 18823 ;;      Temps:          0      12       0       0       0       0       0       0       0
 18824 ;;      Totals:         0      29       0       0       0       0       0       0       0
 18825 ;;Total ram usage:       29 bytes
 18826 ;; Hardware stack levels used:    1
 18827 ;; Hardware stack levels required when called:   11
 18828 ;; This function calls:
 18829 ;;		___lldiv
 18830 ;;		_create_chain
 18831 ;;		_get_cluster
 18832 ;;		_validate
 18833 ;; This function is called by:
 18834 ;;		_escrita_sdcard
 18835 ;; This function uses a non-reentrant model
 18836 ;;
 18837                           
 18838                           	psect	text75
 18839  000B00                     __ptext75:
 18840                           	opt stack 0
 18841  000B00                     _f_lseek:
 18842                           	opt stack 15
 18843                           
 18844                           ;tff.c: 1145: FRESULT res;
 18845                           ;tff.c: 1146: CLUST clust;
 18846                           ;tff.c: 1147: DWORD csize, ifptr;
 18847                           ;tff.c: 1150: res = validate(fp->fs, fp->id);
 18848                           
 18849                           ; BSR set to: 0
 18850                           ;incstack = 0
 18851  000B00  0100               	movlb	0	; () banked
 18852  000B02  EE20 F004          	lfsr	2,4
 18853  000B06  51C4               	movf	f_lseek@fp& (0+255),w,b
 18854  000B08  26D9               	addwf	fsr2l,f,c
 18855  000B0A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 18856  000B0C  22DA               	addwfc	fsr2h,f,c
 18857  000B0E  CFDE F067          	movff	postinc2,validate@fs
 18858  000B12  CFDD F068          	movff	postdec2,validate@fs+1
 18859  000B16  C0C4  FFD9         	movff	f_lseek@fp,fsr2l
 18860  000B1A  C0C5  FFDA         	movff	f_lseek@fp+1,fsr2h
 18861  000B1E  CFDE F069          	movff	postinc2,validate@id
 18862  000B22  CFDD F06A          	movff	postdec2,validate@id+1
 18863  000B26  EC08  F02C         	call	_validate	;wreg free
 18864  000B2A  0100               	movlb	0	; () banked
 18865  000B2C  6FD6               	movwf	f_lseek@res& (0+255),b
 18866                           
 18867                           ; BSR set to: 0
 18868                           ;tff.c: 1151: if (res != FR_OK) return res;
 18869  000B2E  51D6               	movf	f_lseek@res& (0+255),w,b
 18870  000B30  A4D8               	btfss	status,2,c
 18871  000B32  0012               	return	
 18872                           
 18873                           ; BSR set to: 0
 18874                           ;tff.c: 1152: if (fp->flag & 0x80) return FR_RW_ERROR;
 18875                           
 18876                           ; BSR set to: 0
 18877                           
 18878                           ; BSR set to: 0
 18879                           ;	Return value of _f_lseek is never used
 18880  000B34  EE20 F002          	lfsr	2,2
 18881  000B38  51C4               	movf	f_lseek@fp& (0+255),w,b
 18882  000B3A  26D9               	addwf	fsr2l,f,c
 18883  000B3C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 18884  000B3E  22DA               	addwfc	fsr2h,f,c
 18885  000B40  BEDF               	btfsc	indf2,7,c
 18886  000B42  0012               	return	
 18887                           
 18888                           ; BSR set to: 0
 18889                           ;tff.c: 1153: if (ofs > fp->fsize
 18890                           ;tff.c: 1155: && !(fp->flag & 0x02)
 18891                           ;tff.c: 1157: ) ofs = fp->fsize;
 18892                           
 18893                           ; BSR set to: 0
 18894                           
 18895                           ; BSR set to: 0
 18896                           ;	Return value of _f_lseek is never used
 18897  000B44  EE20 F00A          	lfsr	2,10
 18898  000B48  51C4               	movf	f_lseek@fp& (0+255),w,b
 18899  000B4A  26D9               	addwf	fsr2l,f,c
 18900  000B4C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 18901  000B4E  22DA               	addwfc	fsr2h,f,c
 18902  000B50  51C6               	movf	f_lseek@ofs& (0+255),w,b
 18903  000B52  5CDE               	subwf	postinc2,w,c
 18904  000B54  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 18905  000B56  58DE               	subwfb	postinc2,w,c
 18906  000B58  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 18907  000B5A  58DE               	subwfb	postinc2,w,c
 18908  000B5C  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 18909  000B5E  58DE               	subwfb	postinc2,w,c
 18910  000B60  B0D8               	btfsc	status,0,c
 18911  000B62  D016               	goto	l1110
 18912                           
 18913                           ; BSR set to: 0
 18914  000B64  EE20 F002          	lfsr	2,2
 18915  000B68  51C4               	movf	f_lseek@fp& (0+255),w,b
 18916  000B6A  26D9               	addwf	fsr2l,f,c
 18917  000B6C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 18918  000B6E  22DA               	addwfc	fsr2h,f,c
 18919  000B70  B2DF               	btfsc	indf2,1,c
 18920  000B72  D00E               	goto	l1110
 18921                           
 18922                           ; BSR set to: 0
 18923  000B74  EE20 F00A          	lfsr	2,10
 18924  000B78  51C4               	movf	f_lseek@fp& (0+255),w,b
 18925  000B7A  26D9               	addwf	fsr2l,f,c
 18926  000B7C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 18927  000B7E  22DA               	addwfc	fsr2h,f,c
 18928  000B80  CFDE F0C6          	movff	postinc2,f_lseek@ofs
 18929  000B84  CFDE F0C7          	movff	postinc2,f_lseek@ofs+1
 18930  000B88  CFDE F0C8          	movff	postinc2,f_lseek@ofs+2
 18931  000B8C  CFDE F0C9          	movff	postinc2,f_lseek@ofs+3
 18932  000B90                     l1110:
 18933                           
 18934                           ; BSR set to: 0
 18935                           ;tff.c: 1159: ifptr = fp->fptr;
 18936  000B90  EE20 F006          	lfsr	2,6
 18937  000B94  51C4               	movf	f_lseek@fp& (0+255),w,b
 18938  000B96  26D9               	addwf	fsr2l,f,c
 18939  000B98  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 18940  000B9A  22DA               	addwfc	fsr2h,f,c
 18941  000B9C  CFDE F0D7          	movff	postinc2,f_lseek@ifptr
 18942  000BA0  CFDE F0D8          	movff	postinc2,f_lseek@ifptr+1
 18943  000BA4  CFDE F0D9          	movff	postinc2,f_lseek@ifptr+2
 18944  000BA8  CFDE F0DA          	movff	postinc2,f_lseek@ifptr+3
 18945                           
 18946                           ;tff.c: 1160: fp->fptr = 0; fp->csect = 255;
 18947  000BAC  EE20 F006          	lfsr	2,6
 18948  000BB0  51C4               	movf	f_lseek@fp& (0+255),w,b
 18949  000BB2  26D9               	addwf	fsr2l,f,c
 18950  000BB4  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 18951  000BB6  22DA               	addwfc	fsr2h,f,c
 18952  000BB8  6ADE               	clrf	postinc2,c
 18953  000BBA  6ADE               	clrf	postinc2,c
 18954  000BBC  6ADE               	clrf	postinc2,c
 18955  000BBE  6ADD               	clrf	postdec2,c
 18956  000BC0  EE20 F003          	lfsr	2,3
 18957  000BC4  51C4               	movf	f_lseek@fp& (0+255),w,b
 18958  000BC6  26D9               	addwf	fsr2l,f,c
 18959  000BC8  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 18960  000BCA  22DA               	addwfc	fsr2h,f,c
 18961  000BCC  0EFF               	movlw	255
 18962  000BCE  6EDF               	movwf	indf2,c
 18963                           
 18964                           ; BSR set to: 0
 18965                           ;tff.c: 1161: if (ofs > 0) {
 18966  000BD0  51C6               	movf	f_lseek@ofs& (0+255),w,b
 18967  000BD2  11C7               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 18968  000BD4  11C8               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 18969  000BD6  11C9               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 18970  000BD8  B4D8               	btfsc	status,2,c
 18971  000BDA  D19B               	goto	l1127
 18972                           
 18973                           ; BSR set to: 0
 18974                           ;tff.c: 1162: csize = (DWORD)fp->fs->csize * 512U;
 18975  000BDC  EE20 F004          	lfsr	2,4
 18976  000BE0  51C4               	movf	f_lseek@fp& (0+255),w,b
 18977  000BE2  26D9               	addwf	fsr2l,f,c
 18978  000BE4  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 18979  000BE6  22DA               	addwfc	fsr2h,f,c
 18980  000BE8  EE10 F01D          	lfsr	1,29
 18981  000BEC  50DE               	movf	postinc2,w,c
 18982  000BEE  26E1               	addwf	fsr1l,f,c
 18983  000BF0  50DD               	movf	postdec2,w,c
 18984  000BF2  22E2               	addwfc	fsr1h,f,c
 18985  000BF4  50E7               	movf	indf1,w,c
 18986  000BF6  6FCA               	movwf	??_f_lseek& (0+255),b
 18987  000BF8  C0CA  F0CB         	movff	??_f_lseek,??_f_lseek+1
 18988  000BFC  6BCC               	clrf	(??_f_lseek+2)& (0+255),b
 18989  000BFE  6BCD               	clrf	(??_f_lseek+3)& (0+255),b
 18990  000C00  6BCE               	clrf	(??_f_lseek+4)& (0+255),b
 18991  000C02  0E09               	movlw	9
 18992  000C04                     u16495:
 18993  000C04  90D8               	bcf	status,0,c
 18994  000C06  37CB               	rlcf	(??_f_lseek+1)& (0+255),f,b
 18995  000C08  37CC               	rlcf	(??_f_lseek+2)& (0+255),f,b
 18996  000C0A  37CD               	rlcf	(??_f_lseek+3)& (0+255),f,b
 18997  000C0C  37CE               	rlcf	(??_f_lseek+4)& (0+255),f,b
 18998  000C0E  2EE8               	decfsz	wreg,f,c
 18999  000C10  D7F9               	goto	u16495
 19000  000C12  C0CB  F0DB         	movff	??_f_lseek+1,f_lseek@csize
 19001  000C16  C0CC  F0DC         	movff	??_f_lseek+2,f_lseek@csize+1
 19002  000C1A  C0CD  F0DD         	movff	??_f_lseek+3,f_lseek@csize+2
 19003  000C1E  C0CE  F0DE         	movff	??_f_lseek+4,f_lseek@csize+3
 19004                           
 19005                           ; BSR set to: 0
 19006                           ;tff.c: 1163: if (ifptr > 0 &&
 19007                           ;tff.c: 1164: (ofs - 1) / csize >= (ifptr - 1) / csize) {
 19008  000C22  51D7               	movf	f_lseek@ifptr& (0+255),w,b
 19009  000C24  11D8               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 19010  000C26  11D9               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 19011  000C28  11DA               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 19012  000C2A  B4D8               	btfsc	status,2,c
 19013  000C2C  D08F               	goto	l1112
 19014                           
 19015                           ; BSR set to: 0
 19016  000C2E  0EFF               	movlw	255
 19017  000C30  25C6               	addwf	f_lseek@ofs& (0+255),w,b
 19018  000C32  6F60               	movwf	___lldiv@dividend& (0+255),b
 19019  000C34  0EFF               	movlw	255
 19020  000C36  21C7               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 19021  000C38  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 19022  000C3A  0EFF               	movlw	255
 19023  000C3C  21C8               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 19024  000C3E  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 19025  000C40  0EFF               	movlw	255
 19026  000C42  21C9               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 19027  000C44  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 19028  000C46  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 19029  000C4A  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 19030  000C4E  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 19031  000C52  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 19032  000C56  EC18  F028         	call	___lldiv	;wreg free
 19033  000C5A  C060  F0CA         	movff	?___lldiv,??_f_lseek
 19034  000C5E  C061  F0CB         	movff	?___lldiv+1,??_f_lseek+1
 19035  000C62  C062  F0CC         	movff	?___lldiv+2,??_f_lseek+2
 19036  000C66  C063  F0CD         	movff	?___lldiv+3,??_f_lseek+3
 19037  000C6A  0EFF               	movlw	255
 19038  000C6C  0100               	movlb	0	; () banked
 19039  000C6E  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 19040  000C70  6F60               	movwf	___lldiv@dividend& (0+255),b
 19041  000C72  0EFF               	movlw	255
 19042  000C74  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 19043  000C76  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 19044  000C78  0EFF               	movlw	255
 19045  000C7A  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 19046  000C7C  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 19047  000C7E  0EFF               	movlw	255
 19048  000C80  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 19049  000C82  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 19050  000C84  C0DB  F064         	movff	f_lseek@csize,___lldiv@divisor
 19051  000C88  C0DC  F065         	movff	f_lseek@csize+1,___lldiv@divisor+1
 19052  000C8C  C0DD  F066         	movff	f_lseek@csize+2,___lldiv@divisor+2
 19053  000C90  C0DE  F067         	movff	f_lseek@csize+3,___lldiv@divisor+3
 19054  000C94  EC18  F028         	call	___lldiv	;wreg free
 19055  000C98  0100               	movlb	0	; () banked
 19056  000C9A  5160               	movf	?___lldiv& (0+255),w,b
 19057  000C9C  5DCA               	subwf	??_f_lseek& (0+255),w,b
 19058  000C9E  5161               	movf	(?___lldiv+1)& (0+255),w,b
 19059  000CA0  59CB               	subwfb	(??_f_lseek+1)& (0+255),w,b
 19060  000CA2  5162               	movf	(?___lldiv+2)& (0+255),w,b
 19061  000CA4  59CC               	subwfb	(??_f_lseek+2)& (0+255),w,b
 19062  000CA6  5163               	movf	(?___lldiv+3)& (0+255),w,b
 19063  000CA8  59CD               	subwfb	(??_f_lseek+3)& (0+255),w,b
 19064  000CAA  A0D8               	btfss	status,0,c
 19065  000CAC  D04F               	goto	l1112
 19066                           
 19067                           ; BSR set to: 0
 19068                           ;tff.c: 1165: fp->fptr = (ifptr - 1) & ~(csize - 1);
 19069  000CAE  0EFF               	movlw	255
 19070  000CB0  25DB               	addwf	f_lseek@csize& (0+255),w,b
 19071  000CB2  6FCA               	movwf	??_f_lseek& (0+255),b
 19072  000CB4  0EFF               	movlw	255
 19073  000CB6  21DC               	addwfc	(f_lseek@csize+1)& (0+255),w,b
 19074  000CB8  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 19075  000CBA  0EFF               	movlw	255
 19076  000CBC  21DD               	addwfc	(f_lseek@csize+2)& (0+255),w,b
 19077  000CBE  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 19078  000CC0  0EFF               	movlw	255
 19079  000CC2  21DE               	addwfc	(f_lseek@csize+3)& (0+255),w,b
 19080  000CC4  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 19081  000CC6  1FCA               	comf	??_f_lseek& (0+255),f,b
 19082  000CC8  1FCB               	comf	(??_f_lseek+1)& (0+255),f,b
 19083  000CCA  1FCC               	comf	(??_f_lseek+2)& (0+255),f,b
 19084  000CCC  1FCD               	comf	(??_f_lseek+3)& (0+255),f,b
 19085  000CCE  0EFF               	movlw	255
 19086  000CD0  25D7               	addwf	f_lseek@ifptr& (0+255),w,b
 19087  000CD2  6FCE               	movwf	(??_f_lseek+4)& (0+255),b
 19088  000CD4  0EFF               	movlw	255
 19089  000CD6  21D8               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 19090  000CD8  6FCF               	movwf	(??_f_lseek+5)& (0+255),b
 19091  000CDA  0EFF               	movlw	255
 19092  000CDC  21D9               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 19093  000CDE  6FD0               	movwf	(??_f_lseek+6)& (0+255),b
 19094  000CE0  0EFF               	movlw	255
 19095  000CE2  21DA               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 19096  000CE4  6FD1               	movwf	(??_f_lseek+7)& (0+255),b
 19097  000CE6  51CA               	movf	??_f_lseek& (0+255),w,b
 19098  000CE8  15CE               	andwf	(??_f_lseek+4)& (0+255),w,b
 19099  000CEA  6FD2               	movwf	(??_f_lseek+8)& (0+255),b
 19100  000CEC  51CB               	movf	(??_f_lseek+1)& (0+255),w,b
 19101  000CEE  15CF               	andwf	(??_f_lseek+5)& (0+255),w,b
 19102  000CF0  6FD3               	movwf	(??_f_lseek+9)& (0+255),b
 19103  000CF2  51CC               	movf	(??_f_lseek+2)& (0+255),w,b
 19104  000CF4  15D0               	andwf	(??_f_lseek+6)& (0+255),w,b
 19105  000CF6  6FD4               	movwf	(??_f_lseek+10)& (0+255),b
 19106  000CF8  51CD               	movf	(??_f_lseek+3)& (0+255),w,b
 19107  000CFA  15D1               	andwf	(??_f_lseek+7)& (0+255),w,b
 19108  000CFC  6FD5               	movwf	(??_f_lseek+11)& (0+255),b
 19109  000CFE  EE20 F006          	lfsr	2,6
 19110  000D02  51C4               	movf	f_lseek@fp& (0+255),w,b
 19111  000D04  26D9               	addwf	fsr2l,f,c
 19112  000D06  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19113  000D08  22DA               	addwfc	fsr2h,f,c
 19114  000D0A  C0D2  FFDE         	movff	??_f_lseek+8,postinc2
 19115  000D0E  C0D3  FFDE         	movff	??_f_lseek+9,postinc2
 19116  000D12  C0D4  FFDE         	movff	??_f_lseek+10,postinc2
 19117  000D16  C0D5  FFDE         	movff	??_f_lseek+11,postinc2
 19118                           
 19119                           ;tff.c: 1166: ofs -= fp->fptr;
 19120  000D1A  EE20 F006          	lfsr	2,6
 19121  000D1E  51C4               	movf	f_lseek@fp& (0+255),w,b
 19122  000D20  26D9               	addwf	fsr2l,f,c
 19123  000D22  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19124  000D24  22DA               	addwfc	fsr2h,f,c
 19125  000D26  50DE               	movf	postinc2,w,c
 19126  000D28  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 19127  000D2A  50DE               	movf	postinc2,w,c
 19128  000D2C  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 19129  000D2E  50DE               	movf	postinc2,w,c
 19130  000D30  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 19131  000D32  50DD               	movf	postdec2,w,c
 19132  000D34  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 19133                           
 19134                           ;tff.c: 1167: clust = fp->curr_clust;
 19135  000D36  EE20 F010          	lfsr	2,16
 19136  000D3A  51C4               	movf	f_lseek@fp& (0+255),w,b
 19137  000D3C  26D9               	addwf	fsr2l,f,c
 19138  000D3E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19139  000D40  22DA               	addwfc	fsr2h,f,c
 19140  000D42  CFDE F0DF          	movff	postinc2,f_lseek@clust
 19141  000D46  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 19142                           
 19143                           ;tff.c: 1168: } else {
 19144  000D4A  D031               	goto	l1113
 19145  000D4C                     l1112:
 19146                           
 19147                           ; BSR set to: 0
 19148                           ;tff.c: 1169: clust = fp->org_clust;
 19149                           
 19150                           ; BSR set to: 0
 19151  000D4C  EE20 F00E          	lfsr	2,14
 19152  000D50  51C4               	movf	f_lseek@fp& (0+255),w,b
 19153  000D52  26D9               	addwf	fsr2l,f,c
 19154  000D54  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19155  000D56  22DA               	addwfc	fsr2h,f,c
 19156  000D58  CFDE F0DF          	movff	postinc2,f_lseek@clust
 19157  000D5C  CFDD F0E0          	movff	postdec2,f_lseek@clust+1
 19158                           
 19159                           ; BSR set to: 0
 19160                           ;tff.c: 1171: if (clust == 0) {
 19161  000D60  51DF               	movf	f_lseek@clust& (0+255),w,b
 19162  000D62  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 19163  000D64  A4D8               	btfss	status,2,c
 19164  000D66  D019               	goto	l1114
 19165                           
 19166                           ; BSR set to: 0
 19167                           ;tff.c: 1172: clust = create_chain(0);
 19168  000D68  0E00               	movlw	0
 19169  000D6A  6FB7               	movwf	(create_chain@clust+1)& (0+255),b
 19170  000D6C  0E00               	movlw	0
 19171  000D6E  6FB6               	movwf	create_chain@clust& (0+255),b
 19172  000D70  EC47  F017         	call	_create_chain	;wreg free
 19173  000D74  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 19174  000D78  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 19175                           
 19176                           ;tff.c: 1173: if (clust == 1) goto fk_error;
 19177  000D7C  0100               	movlb	0	; () banked
 19178  000D7E  05DF               	decf	f_lseek@clust& (0+255),w,b
 19179  000D80  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 19180  000D82  B4D8               	btfsc	status,2,c
 19181  000D84  D0F9               	goto	l1116
 19182                           
 19183                           ; BSR set to: 0
 19184                           ;tff.c: 1174: fp->org_clust = clust;
 19185                           
 19186                           ; BSR set to: 0
 19187                           
 19188                           ; BSR set to: 0
 19189  000D86  EE20 F00E          	lfsr	2,14
 19190  000D8A  51C4               	movf	f_lseek@fp& (0+255),w,b
 19191  000D8C  26D9               	addwf	fsr2l,f,c
 19192  000D8E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19193  000D90  22DA               	addwfc	fsr2h,f,c
 19194  000D92  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 19195  000D96  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 19196  000D9A                     l1114:
 19197                           
 19198                           ; BSR set to: 0
 19199                           ;tff.c: 1175: }
 19200                           ;tff.c: 1177: fp->curr_clust = clust;
 19201  000D9A  EE20 F010          	lfsr	2,16
 19202  000D9E  51C4               	movf	f_lseek@fp& (0+255),w,b
 19203  000DA0  26D9               	addwf	fsr2l,f,c
 19204  000DA2  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19205  000DA4  22DA               	addwfc	fsr2h,f,c
 19206  000DA6  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 19207  000DAA  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 19208  000DAE                     l1113:
 19209                           
 19210                           ; BSR set to: 0
 19211                           ;tff.c: 1178: }
 19212                           ;tff.c: 1179: if (clust != 0) {
 19213                           
 19214                           ; BSR set to: 0
 19215  000DAE  51DF               	movf	f_lseek@clust& (0+255),w,b
 19216  000DB0  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 19217  000DB2  A4D8               	btfss	status,2,c
 19218  000DB4  D064               	goto	l1118
 19219  000DB6  D0AD               	goto	l1127
 19220  000DB8                     
 19221                           ; BSR set to: 0
 19222                           ;tff.c: 1182: if (fp->flag & 0x02) {
 19223                           
 19224                           ; BSR set to: 0
 19225  000DB8  EE20 F002          	lfsr	2,2
 19226  000DBC  51C4               	movf	f_lseek@fp& (0+255),w,b
 19227  000DBE  26D9               	addwf	fsr2l,f,c
 19228  000DC0  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19229  000DC2  22DA               	addwfc	fsr2h,f,c
 19230  000DC4  A2DF               	btfss	indf2,1,c
 19231  000DC6  D018               	goto	l1120
 19232                           
 19233                           ; BSR set to: 0
 19234                           ;tff.c: 1183: clust = create_chain(clust);
 19235  000DC8  C0DF  F0B6         	movff	f_lseek@clust,create_chain@clust
 19236  000DCC  C0E0  F0B7         	movff	f_lseek@clust+1,create_chain@clust+1
 19237  000DD0  EC47  F017         	call	_create_chain	;wreg free
 19238  000DD4  C0B6  F0DF         	movff	?_create_chain,f_lseek@clust
 19239  000DD8  C0B7  F0E0         	movff	?_create_chain+1,f_lseek@clust+1
 19240                           
 19241                           ;tff.c: 1184: if (clust == 0) {
 19242  000DDC  0100               	movlb	0	; () banked
 19243  000DDE  51DF               	movf	f_lseek@clust& (0+255),w,b
 19244  000DE0  11E0               	iorwf	(f_lseek@clust+1)& (0+255),w,b
 19245  000DE2  A4D8               	btfss	status,2,c
 19246  000DE4  D013               	goto	l1123
 19247                           
 19248                           ; BSR set to: 0
 19249                           ;tff.c: 1185: ofs = csize; break;
 19250  000DE6  C0DB  F0C6         	movff	f_lseek@csize,f_lseek@ofs
 19251  000DEA  C0DC  F0C7         	movff	f_lseek@csize+1,f_lseek@ofs+1
 19252  000DEE  C0DD  F0C8         	movff	f_lseek@csize+2,f_lseek@ofs+2
 19253  000DF2  C0DE  F0C9         	movff	f_lseek@csize+3,f_lseek@ofs+3
 19254  000DF6  D04D               	goto	u16590
 19255  000DF8                     l1120:
 19256                           
 19257                           ; BSR set to: 0
 19258                           ;tff.c: 1189: clust = get_cluster(clust);
 19259                           
 19260                           ; BSR set to: 0
 19261  000DF8  C0DF  F0A0         	movff	f_lseek@clust,get_cluster@clust
 19262  000DFC  C0E0  F0A1         	movff	f_lseek@clust+1,get_cluster@clust+1
 19263  000E00  EC51  F015         	call	_get_cluster	;wreg free
 19264  000E04  C0A0  F0DF         	movff	?_get_cluster,f_lseek@clust
 19265  000E08  C0A1  F0E0         	movff	?_get_cluster+1,f_lseek@clust+1
 19266  000E0C                     l1123:
 19267                           
 19268                           ;tff.c: 1190: if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
 19269  000E0C  0100               	movlb	0	; () banked
 19270  000E0E  51E0               	movf	(f_lseek@clust+1)& (0+255),w,b
 19271  000E10  E104               	bnz	u16570
 19272  000E12  0E02               	movlw	2
 19273  000E14  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 19274  000E16  A0D8               	btfss	status,0,c
 19275  000E18  D0AF               	goto	l1116
 19276  000E1A                     u16570:
 19277                           
 19278                           ; BSR set to: 0
 19279  000E1A  EE20 F004          	lfsr	2,4
 19280  000E1E  51C4               	movf	f_lseek@fp& (0+255),w,b
 19281  000E20  26D9               	addwf	fsr2l,f,c
 19282  000E22  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19283  000E24  22DA               	addwfc	fsr2h,f,c
 19284  000E26  EE10 F016          	lfsr	1,22
 19285  000E2A  50DE               	movf	postinc2,w,c
 19286  000E2C  26E1               	addwf	fsr1l,f,c
 19287  000E2E  50DD               	movf	postdec2,w,c
 19288  000E30  22E2               	addwfc	fsr1h,f,c
 19289  000E32  50E6               	movf	postinc1,w,c
 19290  000E34  5DDF               	subwf	f_lseek@clust& (0+255),w,b
 19291  000E36  50E6               	movf	postinc1,w,c
 19292  000E38  59E0               	subwfb	(f_lseek@clust+1)& (0+255),w,b
 19293  000E3A  B0D8               	btfsc	status,0,c
 19294  000E3C  D09D               	goto	l1116
 19295                           
 19296                           ; BSR set to: 0
 19297                           ;tff.c: 1191: fp->curr_clust = clust;
 19298                           
 19299                           ; BSR set to: 0
 19300                           
 19301                           ; BSR set to: 0
 19302  000E3E  EE20 F010          	lfsr	2,16
 19303  000E42  51C4               	movf	f_lseek@fp& (0+255),w,b
 19304  000E44  26D9               	addwf	fsr2l,f,c
 19305  000E46  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19306  000E48  22DA               	addwfc	fsr2h,f,c
 19307  000E4A  C0DF  FFDE         	movff	f_lseek@clust,postinc2
 19308  000E4E  C0E0  FFDD         	movff	f_lseek@clust+1,postdec2
 19309                           
 19310                           ;tff.c: 1192: fp->fptr += csize;
 19311  000E52  EE20 F006          	lfsr	2,6
 19312  000E56  51C4               	movf	f_lseek@fp& (0+255),w,b
 19313  000E58  26D9               	addwf	fsr2l,f,c
 19314  000E5A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19315  000E5C  22DA               	addwfc	fsr2h,f,c
 19316  000E5E  51DB               	movf	f_lseek@csize& (0+255),w,b
 19317  000E60  26DE               	addwf	postinc2,f,c
 19318  000E62  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 19319  000E64  22DE               	addwfc	postinc2,f,c
 19320  000E66  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 19321  000E68  22DE               	addwfc	postinc2,f,c
 19322  000E6A  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 19323  000E6C  22DE               	addwfc	postinc2,f,c
 19324                           
 19325                           ; BSR set to: 0
 19326                           ;tff.c: 1193: ofs -= csize;
 19327  000E6E  51DB               	movf	f_lseek@csize& (0+255),w,b
 19328  000E70  5FC6               	subwf	f_lseek@ofs& (0+255),f,b
 19329  000E72  51DC               	movf	(f_lseek@csize+1)& (0+255),w,b
 19330  000E74  5BC7               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 19331  000E76  51DD               	movf	(f_lseek@csize+2)& (0+255),w,b
 19332  000E78  5BC8               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 19333  000E7A  51DE               	movf	(f_lseek@csize+3)& (0+255),w,b
 19334  000E7C  5BC9               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 19335  000E7E                     l1118:
 19336                           
 19337                           ; BSR set to: 0
 19338                           
 19339                           ; BSR set to: 0
 19340  000E7E  51C6               	movf	f_lseek@ofs& (0+255),w,b
 19341  000E80  5DDB               	subwf	f_lseek@csize& (0+255),w,b
 19342  000E82  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 19343  000E84  59DC               	subwfb	(f_lseek@csize+1)& (0+255),w,b
 19344  000E86  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 19345  000E88  59DD               	subwfb	(f_lseek@csize+2)& (0+255),w,b
 19346  000E8A  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 19347  000E8C  59DE               	subwfb	(f_lseek@csize+3)& (0+255),w,b
 19348  000E8E  A0D8               	btfss	status,0,c
 19349  000E90  D793               	goto	l1119
 19350  000E92                     u16590:
 19351                           
 19352                           ; BSR set to: 0
 19353                           ;tff.c: 1194: }
 19354                           ;tff.c: 1195: fp->fptr += ofs;
 19355                           
 19356                           ; BSR set to: 0
 19357  000E92  EE20 F006          	lfsr	2,6
 19358  000E96  51C4               	movf	f_lseek@fp& (0+255),w,b
 19359  000E98  26D9               	addwf	fsr2l,f,c
 19360  000E9A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19361  000E9C  22DA               	addwfc	fsr2h,f,c
 19362  000E9E  51C6               	movf	f_lseek@ofs& (0+255),w,b
 19363  000EA0  26DE               	addwf	postinc2,f,c
 19364  000EA2  51C7               	movf	(f_lseek@ofs+1)& (0+255),w,b
 19365  000EA4  22DE               	addwfc	postinc2,f,c
 19366  000EA6  51C8               	movf	(f_lseek@ofs+2)& (0+255),w,b
 19367  000EA8  22DE               	addwfc	postinc2,f,c
 19368  000EAA  51C9               	movf	(f_lseek@ofs+3)& (0+255),w,b
 19369  000EAC  22DE               	addwfc	postinc2,f,c
 19370                           
 19371                           ;tff.c: 1196: fp->csect = (BYTE)(ofs / 512U);
 19372  000EAE  EE20 F003          	lfsr	2,3
 19373  000EB2  51C4               	movf	f_lseek@fp& (0+255),w,b
 19374  000EB4  26D9               	addwf	fsr2l,f,c
 19375  000EB6  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19376  000EB8  22DA               	addwfc	fsr2h,f,c
 19377  000EBA  C0C6  F0CA         	movff	f_lseek@ofs,??_f_lseek
 19378  000EBE  C0C7  F0CB         	movff	f_lseek@ofs+1,??_f_lseek+1
 19379  000EC2  C0C8  F0CC         	movff	f_lseek@ofs+2,??_f_lseek+2
 19380  000EC6  C0C9  F0CD         	movff	f_lseek@ofs+3,??_f_lseek+3
 19381  000ECA  0E0A               	movlw	10
 19382  000ECC  D005               	goto	u16600
 19383  000ECE                     u16605:
 19384  000ECE  90D8               	bcf	status,0,c
 19385  000ED0  33CD               	rrcf	(??_f_lseek+3)& (0+255),f,b
 19386  000ED2  33CC               	rrcf	(??_f_lseek+2)& (0+255),f,b
 19387  000ED4  33CB               	rrcf	(??_f_lseek+1)& (0+255),f,b
 19388  000ED6  33CA               	rrcf	??_f_lseek& (0+255),f,b
 19389  000ED8                     u16600:
 19390  000ED8  2EE8               	decfsz	wreg,f,c
 19391  000EDA  D7F9               	goto	u16605
 19392  000EDC  51CA               	movf	??_f_lseek& (0+255),w,b
 19393  000EDE  6EDF               	movwf	indf2,c
 19394                           
 19395                           ; BSR set to: 0
 19396                           ;tff.c: 1197: if (ofs % 512U) fp->csect++;
 19397  000EE0  0EFF               	movlw	255
 19398  000EE2  15C6               	andwf	f_lseek@ofs& (0+255),w,b
 19399  000EE4  6FCA               	movwf	??_f_lseek& (0+255),b
 19400  000EE6  0E01               	movlw	1
 19401  000EE8  15C7               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 19402  000EEA  6FCB               	movwf	(??_f_lseek+1)& (0+255),b
 19403  000EEC  0E00               	movlw	0
 19404  000EEE  15C8               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 19405  000EF0  6FCC               	movwf	(??_f_lseek+2)& (0+255),b
 19406  000EF2  0E00               	movlw	0
 19407  000EF4  15C9               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 19408  000EF6  6FCD               	movwf	(??_f_lseek+3)& (0+255),b
 19409  000EF8  51CA               	movf	??_f_lseek& (0+255),w,b
 19410  000EFA  11CB               	iorwf	(??_f_lseek+1)& (0+255),w,b
 19411  000EFC  11CC               	iorwf	(??_f_lseek+2)& (0+255),w,b
 19412  000EFE  11CD               	iorwf	(??_f_lseek+3)& (0+255),w,b
 19413  000F00  B4D8               	btfsc	status,2,c
 19414  000F02  D007               	goto	l1127
 19415                           
 19416                           ; BSR set to: 0
 19417  000F04  EE20 F003          	lfsr	2,3
 19418  000F08  51C4               	movf	f_lseek@fp& (0+255),w,b
 19419  000F0A  26D9               	addwf	fsr2l,f,c
 19420  000F0C  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19421  000F0E  22DA               	addwfc	fsr2h,f,c
 19422  000F10  2ADF               	incf	indf2,f,c
 19423  000F12                     l1127:
 19424                           
 19425                           ; BSR set to: 0
 19426                           ;tff.c: 1198: }
 19427                           ;tff.c: 1199: }
 19428                           ;tff.c: 1202: if (fp->fptr > fp->fsize) {
 19429                           
 19430                           ; BSR set to: 0
 19431                           
 19432                           ; BSR set to: 0
 19433                           
 19434                           ; BSR set to: 0
 19435  000F12  EE20 F006          	lfsr	2,6
 19436  000F16  51C4               	movf	f_lseek@fp& (0+255),w,b
 19437  000F18  26D9               	addwf	fsr2l,f,c
 19438  000F1A  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19439  000F1C  22DA               	addwfc	fsr2h,f,c
 19440  000F1E  EE10 F00A          	lfsr	1,10
 19441  000F22  51C4               	movf	f_lseek@fp& (0+255),w,b
 19442  000F24  26E1               	addwf	fsr1l,f,c
 19443  000F26  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19444  000F28  22E2               	addwfc	fsr1h,f,c
 19445  000F2A  50DE               	movf	postinc2,w,c
 19446  000F2C  5CE6               	subwf	postinc1,w,c
 19447  000F2E  50DE               	movf	postinc2,w,c
 19448  000F30  58E6               	subwfb	postinc1,w,c
 19449  000F32  50DE               	movf	postinc2,w,c
 19450  000F34  58E6               	subwfb	postinc1,w,c
 19451  000F36  50DE               	movf	postinc2,w,c
 19452  000F38  58E6               	subwfb	postinc1,w,c
 19453  000F3A  B0D8               	btfsc	status,0,c
 19454  000F3C  0012               	return	
 19455                           
 19456                           ; BSR set to: 0
 19457                           ;tff.c: 1203: fp->fsize = fp->fptr;
 19458  000F3E  EE20 F006          	lfsr	2,6
 19459  000F42  51C4               	movf	f_lseek@fp& (0+255),w,b
 19460  000F44  26D9               	addwf	fsr2l,f,c
 19461  000F46  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19462  000F48  22DA               	addwfc	fsr2h,f,c
 19463  000F4A  EE10 F00A          	lfsr	1,10
 19464  000F4E  51C4               	movf	f_lseek@fp& (0+255),w,b
 19465  000F50  26E1               	addwf	fsr1l,f,c
 19466  000F52  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19467  000F54  22E2               	addwfc	fsr1h,f,c
 19468  000F56  CFDE FFE6          	movff	postinc2,postinc1
 19469  000F5A  CFDE FFE6          	movff	postinc2,postinc1
 19470  000F5E  CFDE FFE6          	movff	postinc2,postinc1
 19471  000F62  CFDE FFE6          	movff	postinc2,postinc1
 19472                           
 19473                           ; BSR set to: 0
 19474                           ;tff.c: 1204: fp->flag |= 0x20;
 19475  000F66  EE20 F002          	lfsr	2,2
 19476  000F6A  51C4               	movf	f_lseek@fp& (0+255),w,b
 19477  000F6C  26D9               	addwf	fsr2l,f,c
 19478  000F6E  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19479  000F70  22DA               	addwfc	fsr2h,f,c
 19480  000F72  0E00               	movlw	0
 19481  000F74  8ADB               	bsf	plusw2,5,c
 19482                           
 19483                           ; BSR set to: 0
 19484                           ;tff.c: 1205: }
 19485                           ;tff.c: 1208: return FR_OK;
 19486                           ;	Return value of _f_lseek is never used
 19487                           
 19488                           ; BSR set to: 0
 19489  000F76  0012               	return	
 19490  000F78                     l1116:
 19491                           
 19492                           ; BSR set to: 0
 19493                           ;tff.c: 1211: fp->flag |= 0x80;
 19494                           
 19495                           ; BSR set to: 0
 19496  000F78  EE20 F002          	lfsr	2,2
 19497  000F7C  51C4               	movf	f_lseek@fp& (0+255),w,b
 19498  000F7E  26D9               	addwf	fsr2l,f,c
 19499  000F80  51C5               	movf	(f_lseek@fp+1)& (0+255),w,b
 19500  000F82  22DA               	addwfc	fsr2h,f,c
 19501  000F84  0E00               	movlw	0
 19502  000F86  8EDB               	bsf	plusw2,7,c
 19503  000F88  0012               	return	
 19504  000F8A                     __end_of_f_lseek:
 19505                           	opt stack 0
 19506                           tosu	equ	0xFFF
 19507                           tosh	equ	0xFFE
 19508                           tosl	equ	0xFFD
 19509                           pclath	equ	0xFFA
 19510                           tblptru	equ	0xFF8
 19511                           tblptrh	equ	0xFF7
 19512                           tblptrl	equ	0xFF6
 19513                           tablat	equ	0xFF5
 19514                           prodh	equ	0xFF4
 19515                           prodl	equ	0xFF3
 19516                           intcon	equ	0xFF2
 19517                           intcon2	equ	0xFF1
 19518                           intcon3	equ	0xFF0
 19519                           indf0	equ	0xFEF
 19520                           postinc0	equ	0xFEE
 19521                           fsr0h	equ	0xFEA
 19522                           fsr0l	equ	0xFE9
 19523                           wreg	equ	0xFE8
 19524                           indf1	equ	0xFE7
 19525                           postinc1	equ	0xFE6
 19526                           postdec1	equ	0xFE5
 19527                           plusw1	equ	0xFE3
 19528                           fsr1h	equ	0xFE2
 19529                           fsr1l	equ	0xFE1
 19530                           indf2	equ	0xFDF
 19531                           postinc2	equ	0xFDE
 19532                           postdec2	equ	0xFDD
 19533                           plusw2	equ	0xFDB
 19534                           fsr2h	equ	0xFDA
 19535                           fsr2l	equ	0xFD9
 19536                           status	equ	0xFD8
 19537                           
 19538 ;; *************** function _create_chain *****************
 19539 ;; Defined at:
 19540 ;;		line 283 in file "bibliotecas/tff.c"
 19541 ;; Parameters:    Size  Location     Type
 19542 ;;  clust           2   86[BANK0 ] unsigned short 
 19543 ;; Auto vars:     Size  Location     Type
 19544 ;;  ncl             2   98[BANK0 ] unsigned short 
 19545 ;;  scl             2   96[BANK0 ] unsigned short 
 19546 ;;  cstat           2   94[BANK0 ] unsigned short 
 19547 ;;  fs              2   92[BANK0 ] PTR struct _FATFS
 19548 ;;		 -> NULL(0), fs(544), 
 19549 ;;  mcl             2   90[BANK0 ] unsigned short 
 19550 ;; Return value:  Size  Location     Type
 19551 ;;                  2   86[BANK0 ] unsigned short 
 19552 ;; Registers used:
 19553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19554 ;; Tracked objects:
 19555 ;;		On entry : 0/0
 19556 ;;		On exit  : 0/0
 19557 ;;		Unchanged: 0/0
 19558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19559 ;;      Params:         0       2       0       0       0       0       0       0       0
 19560 ;;      Locals:         0      10       0       0       0       0       0       0       0
 19561 ;;      Temps:          0       2       0       0       0       0       0       0       0
 19562 ;;      Totals:         0      14       0       0       0       0       0       0       0
 19563 ;;Total ram usage:       14 bytes
 19564 ;; Hardware stack levels used:    1
 19565 ;; Hardware stack levels required when called:   10
 19566 ;; This function calls:
 19567 ;;		_get_cluster
 19568 ;;		_put_cluster
 19569 ;; This function is called by:
 19570 ;;		_reserve_direntry
 19571 ;;		_f_write
 19572 ;;		_f_lseek
 19573 ;; This function uses a non-reentrant model
 19574 ;;
 19575                           
 19576                           	psect	text76
 19577  002E8E                     __ptext76:
 19578                           	opt stack 0
 19579  002E8E                     _create_chain:
 19580                           	opt stack 12
 19581                           
 19582                           ;tff.c: 287: CLUST cstat, ncl, scl, mcl;
 19583                           ;tff.c: 288: FATFS *fs = FatFs;
 19584                           
 19585                           ; BSR set to: 0
 19586                           ;incstack = 0
 19587  002E8E  C0F6  F0BC         	movff	_FatFs,create_chain@fs
 19588  002E92  C0F7  F0BD         	movff	_FatFs+1,create_chain@fs+1
 19589                           
 19590                           ;tff.c: 291: mcl = fs->max_clust;
 19591  002E96  0100               	movlb	0	; () banked
 19592  002E98  EE20 F016          	lfsr	2,22
 19593  002E9C  51BC               	movf	create_chain@fs& (0+255),w,b
 19594  002E9E  26D9               	addwf	fsr2l,f,c
 19595  002EA0  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 19596  002EA2  22DA               	addwfc	fsr2h,f,c
 19597  002EA4  CFDE F0BA          	movff	postinc2,create_chain@mcl
 19598  002EA8  CFDD F0BB          	movff	postdec2,create_chain@mcl+1
 19599                           
 19600                           ; BSR set to: 0
 19601                           ;tff.c: 292: if (clust == 0) {
 19602  002EAC  51B6               	movf	create_chain@clust& (0+255),w,b
 19603  002EAE  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 19604  002EB0  A4D8               	btfss	status,2,c
 19605  002EB2  D01B               	goto	l831
 19606                           
 19607                           ; BSR set to: 0
 19608                           ;tff.c: 293: scl = fs->last_clust;
 19609  002EB4  EE20 F018          	lfsr	2,24
 19610  002EB8  51BC               	movf	create_chain@fs& (0+255),w,b
 19611  002EBA  26D9               	addwf	fsr2l,f,c
 19612  002EBC  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 19613  002EBE  22DA               	addwfc	fsr2h,f,c
 19614  002EC0  CFDE F0C0          	movff	postinc2,create_chain@scl
 19615  002EC4  CFDD F0C1          	movff	postdec2,create_chain@scl+1
 19616                           
 19617                           ; BSR set to: 0
 19618                           ;tff.c: 294: if (scl < 2 || scl >= mcl) scl = 1;
 19619  002EC8  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 19620  002ECA  E104               	bnz	u13690
 19621  002ECC  0E02               	movlw	2
 19622  002ECE  5DC0               	subwf	create_chain@scl& (0+255),w,b
 19623  002ED0  A0D8               	btfss	status,0,c
 19624  002ED2  D006               	goto	u13700
 19625  002ED4                     u13690:
 19626                           
 19627                           ; BSR set to: 0
 19628  002ED4  51BA               	movf	create_chain@mcl& (0+255),w,b
 19629  002ED6  5DC0               	subwf	create_chain@scl& (0+255),w,b
 19630  002ED8  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 19631  002EDA  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 19632  002EDC  A0D8               	btfss	status,0,c
 19633  002EDE  D02A               	goto	l835
 19634  002EE0                     u13700:
 19635                           
 19636                           ; BSR set to: 0
 19637                           
 19638                           ; BSR set to: 0
 19639  002EE0  0E00               	movlw	0
 19640  002EE2  6FC1               	movwf	(create_chain@scl+1)& (0+255),b
 19641  002EE4  0E01               	movlw	1
 19642  002EE6  6FC0               	movwf	create_chain@scl& (0+255),b
 19643                           
 19644                           ; BSR set to: 0
 19645                           ;tff.c: 295: }
 19646  002EE8  D025               	goto	l835
 19647  002EEA                     l831:
 19648                           
 19649                           ; BSR set to: 0
 19650                           ;tff.c: 296: else {
 19651                           ;tff.c: 297: cstat = get_cluster(clust);
 19652                           
 19653                           ; BSR set to: 0
 19654  002EEA  C0B6  F0A0         	movff	create_chain@clust,get_cluster@clust
 19655  002EEE  C0B7  F0A1         	movff	create_chain@clust+1,get_cluster@clust+1
 19656  002EF2  EC51  F015         	call	_get_cluster	;wreg free
 19657  002EF6  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 19658  002EFA  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 19659                           
 19660                           ;tff.c: 298: if (cstat < 2) return 1;
 19661  002EFE  0100               	movlb	0	; () banked
 19662  002F00  51BF               	movf	(create_chain@cstat+1)& (0+255),w,b
 19663  002F02  E109               	bnz	l11066
 19664  002F04  0E02               	movlw	2
 19665  002F06  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 19666  002F08  B0D8               	btfsc	status,0,c
 19667  002F0A  D005               	goto	l836
 19668                           
 19669                           ; BSR set to: 0
 19670  002F0C  0E00               	movlw	0
 19671  002F0E  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 19672  002F10  0E01               	movlw	1
 19673  002F12  6FB6               	movwf	?_create_chain& (0+255),b
 19674                           
 19675                           ; BSR set to: 0
 19676  002F14  0012               	return	
 19677  002F16                     l836:
 19678  002F16                     l11066:
 19679                           
 19680                           ; BSR set to: 0
 19681                           ;tff.c: 299: if (cstat < mcl) return cstat;
 19682  002F16  51BA               	movf	create_chain@mcl& (0+255),w,b
 19683  002F18  5DBE               	subwf	create_chain@cstat& (0+255),w,b
 19684  002F1A  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 19685  002F1C  59BF               	subwfb	(create_chain@cstat+1)& (0+255),w,b
 19686  002F1E  B0D8               	btfsc	status,0,c
 19687  002F20  D005               	goto	l838
 19688                           
 19689                           ; BSR set to: 0
 19690  002F22  C0BE  F0B6         	movff	create_chain@cstat,?_create_chain
 19691  002F26  C0BF  F0B7         	movff	create_chain@cstat+1,?_create_chain+1
 19692  002F2A  0012               	return	
 19693  002F2C                     l838:
 19694                           
 19695                           ; BSR set to: 0
 19696                           ;tff.c: 300: scl = clust;
 19697  002F2C  C0B6  F0C0         	movff	create_chain@clust,create_chain@scl
 19698  002F30  C0B7  F0C1         	movff	create_chain@clust+1,create_chain@scl+1
 19699  002F34                     l835:
 19700                           
 19701                           ; BSR set to: 0
 19702                           ;tff.c: 301: }
 19703                           ;tff.c: 303: ncl = scl;
 19704  002F34  C0C0  F0C2         	movff	create_chain@scl,create_chain@ncl
 19705  002F38  C0C1  F0C3         	movff	create_chain@scl+1,create_chain@ncl+1
 19706  002F3C                     l11070:
 19707                           
 19708                           ; BSR set to: 0
 19709                           ;tff.c: 305: ncl++;
 19710  002F3C  4BC2               	infsnz	create_chain@ncl& (0+255),f,b
 19711  002F3E  2BC3               	incf	(create_chain@ncl+1)& (0+255),f,b
 19712                           
 19713                           ; BSR set to: 0
 19714                           ;tff.c: 306: if (ncl >= mcl) {
 19715  002F40  51BA               	movf	create_chain@mcl& (0+255),w,b
 19716  002F42  5DC2               	subwf	create_chain@ncl& (0+255),w,b
 19717  002F44  51BB               	movf	(create_chain@mcl+1)& (0+255),w,b
 19718  002F46  59C3               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 19719  002F48  A0D8               	btfss	status,0,c
 19720  002F4A  D00F               	goto	l841
 19721                           
 19722                           ; BSR set to: 0
 19723                           ;tff.c: 307: ncl = 2;
 19724  002F4C  0E00               	movlw	0
 19725  002F4E  6FC3               	movwf	(create_chain@ncl+1)& (0+255),b
 19726  002F50  0E02               	movlw	2
 19727  002F52  6FC2               	movwf	create_chain@ncl& (0+255),b
 19728                           
 19729                           ; BSR set to: 0
 19730                           ;tff.c: 308: if (ncl > scl) return 0;
 19731  002F54  51C2               	movf	create_chain@ncl& (0+255),w,b
 19732  002F56  5DC0               	subwf	create_chain@scl& (0+255),w,b
 19733  002F58  51C3               	movf	(create_chain@ncl+1)& (0+255),w,b
 19734  002F5A  59C1               	subwfb	(create_chain@scl+1)& (0+255),w,b
 19735  002F5C  B0D8               	btfsc	status,0,c
 19736  002F5E  D005               	goto	l841
 19737                           
 19738                           ; BSR set to: 0
 19739  002F60  0E00               	movlw	0
 19740  002F62  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 19741  002F64  0E00               	movlw	0
 19742  002F66  6FB6               	movwf	?_create_chain& (0+255),b
 19743                           
 19744                           ; BSR set to: 0
 19745  002F68  0012               	return	
 19746  002F6A                     l841:
 19747                           
 19748                           ; BSR set to: 0
 19749                           ;tff.c: 309: }
 19750                           ;tff.c: 310: cstat = get_cluster(ncl);
 19751                           
 19752                           ; BSR set to: 0
 19753                           
 19754                           ; BSR set to: 0
 19755  002F6A  C0C2  F0A0         	movff	create_chain@ncl,get_cluster@clust
 19756  002F6E  C0C3  F0A1         	movff	create_chain@ncl+1,get_cluster@clust+1
 19757  002F72  EC51  F015         	call	_get_cluster	;wreg free
 19758  002F76  C0A0  F0BE         	movff	?_get_cluster,create_chain@cstat
 19759  002F7A  C0A1  F0BF         	movff	?_get_cluster+1,create_chain@cstat+1
 19760                           
 19761                           ;tff.c: 311: if (cstat == 0) break;
 19762  002F7E  0100               	movlb	0	; () banked
 19763  002F80  51BE               	movf	create_chain@cstat& (0+255),w,b
 19764  002F82  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 19765  002F84  B4D8               	btfsc	status,2,c
 19766  002F86  D015               	goto	l843
 19767                           
 19768                           ; BSR set to: 0
 19769                           ;tff.c: 312: if (cstat == 1) return 1;
 19770                           
 19771                           ; BSR set to: 0
 19772                           
 19773                           ; BSR set to: 0
 19774  002F88  05BE               	decf	create_chain@cstat& (0+255),w,b
 19775  002F8A  11BF               	iorwf	(create_chain@cstat+1)& (0+255),w,b
 19776  002F8C  A4D8               	btfss	status,2,c
 19777  002F8E  D005               	goto	l844
 19778                           
 19779                           ; BSR set to: 0
 19780  002F90  0E00               	movlw	0
 19781  002F92  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 19782  002F94  0E01               	movlw	1
 19783  002F96  6FB6               	movwf	?_create_chain& (0+255),b
 19784                           
 19785                           ; BSR set to: 0
 19786  002F98  0012               	return	
 19787  002F9A                     l844:
 19788                           
 19789                           ; BSR set to: 0
 19790                           ;tff.c: 313: if (ncl == scl) return 0;
 19791                           
 19792                           ; BSR set to: 0
 19793  002F9A  51C0               	movf	create_chain@scl& (0+255),w,b
 19794  002F9C  19C2               	xorwf	create_chain@ncl& (0+255),w,b
 19795  002F9E  E1CE               	bnz	l11070
 19796  002FA0  51C1               	movf	(create_chain@scl+1)& (0+255),w,b
 19797  002FA2  19C3               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 19798  002FA4  A4D8               	btfss	status,2,c
 19799  002FA6  D7CA               	goto	l839
 19800                           
 19801                           ; BSR set to: 0
 19802  002FA8  0E00               	movlw	0
 19803  002FAA  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 19804  002FAC  0E00               	movlw	0
 19805  002FAE  6FB6               	movwf	?_create_chain& (0+255),b
 19806                           
 19807                           ; BSR set to: 0
 19808  002FB0  0012               	return	
 19809  002FB2                     l843:
 19810                           
 19811                           ; BSR set to: 0
 19812                           ;tff.c: 316: if (!put_cluster(ncl, (CLUST)0x0FFFFFFF)) return 1;
 19813                           
 19814                           ; BSR set to: 0
 19815  002FB2  C0C2  F0A0         	movff	create_chain@ncl,put_cluster@clust
 19816  002FB6  C0C3  F0A1         	movff	create_chain@ncl+1,put_cluster@clust+1
 19817  002FBA  0EFF               	movlw	255
 19818  002FBC  6FA3               	movwf	(put_cluster@val+1)& (0+255),b
 19819  002FBE  69A2               	setf	put_cluster@val& (0+255),b
 19820  002FC0  ECD8  F012         	call	_put_cluster	;wreg free
 19821  002FC4  0900               	iorlw	0
 19822  002FC6  A4D8               	btfss	status,2,c
 19823  002FC8  D006               	goto	l846
 19824  002FCA  0E00               	movlw	0
 19825  002FCC  0100               	movlb	0	; () banked
 19826  002FCE  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 19827  002FD0  0E01               	movlw	1
 19828  002FD2  6FB6               	movwf	?_create_chain& (0+255),b
 19829                           
 19830                           ; BSR set to: 0
 19831  002FD4  0012               	return	
 19832  002FD6                     l846:
 19833                           
 19834                           ;tff.c: 317: if (clust != 0 && !put_cluster(clust, ncl)) return 1;
 19835                           
 19836                           ; BSR set to: 0
 19837  002FD6  0100               	movlb	0	; () banked
 19838  002FD8  51B6               	movf	create_chain@clust& (0+255),w,b
 19839  002FDA  11B7               	iorwf	(create_chain@clust+1)& (0+255),w,b
 19840  002FDC  B4D8               	btfsc	status,2,c
 19841  002FDE  D013               	goto	l847
 19842                           
 19843                           ; BSR set to: 0
 19844  002FE0  C0B6  F0A0         	movff	create_chain@clust,put_cluster@clust
 19845  002FE4  C0B7  F0A1         	movff	create_chain@clust+1,put_cluster@clust+1
 19846  002FE8  C0C2  F0A2         	movff	create_chain@ncl,put_cluster@val
 19847  002FEC  C0C3  F0A3         	movff	create_chain@ncl+1,put_cluster@val+1
 19848  002FF0  ECD8  F012         	call	_put_cluster	;wreg free
 19849  002FF4  0900               	iorlw	0
 19850  002FF6  A4D8               	btfss	status,2,c
 19851  002FF8  D006               	goto	l847
 19852  002FFA  0E00               	movlw	0
 19853  002FFC  0100               	movlb	0	; () banked
 19854  002FFE  6FB7               	movwf	(?_create_chain+1)& (0+255),b
 19855  003000  0E01               	movlw	1
 19856  003002  6FB6               	movwf	?_create_chain& (0+255),b
 19857                           
 19858                           ; BSR set to: 0
 19859  003004  0012               	return	
 19860  003006                     l847:
 19861                           
 19862                           ;tff.c: 319: fs->last_clust = ncl;
 19863                           
 19864                           ; BSR set to: 0
 19865  003006  0100               	movlb	0	; () banked
 19866  003008  EE20 F018          	lfsr	2,24
 19867  00300C  51BC               	movf	create_chain@fs& (0+255),w,b
 19868  00300E  26D9               	addwf	fsr2l,f,c
 19869  003010  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 19870  003012  22DA               	addwfc	fsr2h,f,c
 19871  003014  C0C2  FFDE         	movff	create_chain@ncl,postinc2
 19872  003018  C0C3  FFDD         	movff	create_chain@ncl+1,postdec2
 19873                           
 19874                           ;tff.c: 320: if (fs->free_clust != (CLUST)0xFFFFFFFF) {
 19875  00301C  EE20 F01A          	lfsr	2,26
 19876  003020  51BC               	movf	create_chain@fs& (0+255),w,b
 19877  003022  26D9               	addwf	fsr2l,f,c
 19878  003024  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 19879  003026  22DA               	addwfc	fsr2h,f,c
 19880  003028  28DE               	incf	postinc2,w,c
 19881  00302A  E103               	bnz	u13810
 19882  00302C  28DE               	incf	postinc2,w,c
 19883  00302E  B4D8               	btfsc	status,2,c
 19884  003030  D009               	goto	l848
 19885  003032                     u13810:
 19886                           
 19887                           ; BSR set to: 0
 19888                           ;tff.c: 321: fs->free_clust--;
 19889  003032  EE20 F01A          	lfsr	2,26
 19890  003036  51BC               	movf	create_chain@fs& (0+255),w,b
 19891  003038  26D9               	addwf	fsr2l,f,c
 19892  00303A  51BD               	movf	(create_chain@fs+1)& (0+255),w,b
 19893  00303C  22DA               	addwfc	fsr2h,f,c
 19894  00303E  06DE               	decf	postinc2,f,c
 19895  003040  0E00               	movlw	0
 19896  003042  5ADD               	subwfb	postdec2,f,c
 19897  003044                     l848:
 19898                           
 19899                           ; BSR set to: 0
 19900                           ;tff.c: 325: }
 19901                           ;tff.c: 327: return ncl;
 19902                           
 19903                           ; BSR set to: 0
 19904  003044  C0C2  F0B6         	movff	create_chain@ncl,?_create_chain
 19905  003048  C0C3  F0B7         	movff	create_chain@ncl+1,?_create_chain+1
 19906  00304C  0012               	return	
 19907  00304E                     __end_of_create_chain:
 19908                           	opt stack 0
 19909                           tosu	equ	0xFFF
 19910                           tosh	equ	0xFFE
 19911                           tosl	equ	0xFFD
 19912                           pclath	equ	0xFFA
 19913                           tblptru	equ	0xFF8
 19914                           tblptrh	equ	0xFF7
 19915                           tblptrl	equ	0xFF6
 19916                           tablat	equ	0xFF5
 19917                           prodh	equ	0xFF4
 19918                           prodl	equ	0xFF3
 19919                           intcon	equ	0xFF2
 19920                           intcon2	equ	0xFF1
 19921                           intcon3	equ	0xFF0
 19922                           indf0	equ	0xFEF
 19923                           postinc0	equ	0xFEE
 19924                           fsr0h	equ	0xFEA
 19925                           fsr0l	equ	0xFE9
 19926                           wreg	equ	0xFE8
 19927                           indf1	equ	0xFE7
 19928                           postinc1	equ	0xFE6
 19929                           postdec1	equ	0xFE5
 19930                           plusw1	equ	0xFE3
 19931                           fsr1h	equ	0xFE2
 19932                           fsr1l	equ	0xFE1
 19933                           indf2	equ	0xFDF
 19934                           postinc2	equ	0xFDE
 19935                           postdec2	equ	0xFDD
 19936                           plusw2	equ	0xFDB
 19937                           fsr2h	equ	0xFDA
 19938                           fsr2l	equ	0xFD9
 19939                           status	equ	0xFD8
 19940                           
 19941 ;; *************** function _put_cluster *****************
 19942 ;; Defined at:
 19943 ;;		line 198 in file "bibliotecas/tff.c"
 19944 ;; Parameters:    Size  Location     Type
 19945 ;;  clust           2   64[BANK0 ] unsigned short 
 19946 ;;  val             2   66[BANK0 ] unsigned short 
 19947 ;; Auto vars:     Size  Location     Type
 19948 ;;  fatsect         4   76[BANK0 ] unsigned long 
 19949 ;;  fs              2   84[BANK0 ] PTR struct _FATFS
 19950 ;;		 -> NULL(0), fs(544), 
 19951 ;;  p               2   82[BANK0 ] PTR unsigned char 
 19952 ;;		 -> fs.win(512), NULL(0), fs(544), 
 19953 ;;  bc              2   80[BANK0 ] unsigned short 
 19954 ;; Return value:  Size  Location     Type
 19955 ;;                  1    wreg      enum E105
 19956 ;; Registers used:
 19957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19958 ;; Tracked objects:
 19959 ;;		On entry : 0/0
 19960 ;;		On exit  : 0/0
 19961 ;;		Unchanged: 0/0
 19962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19963 ;;      Params:         0       4       0       0       0       0       0       0       0
 19964 ;;      Locals:         0      14       0       0       0       0       0       0       0
 19965 ;;      Temps:          0       4       0       0       0       0       0       0       0
 19966 ;;      Totals:         0      22       0       0       0       0       0       0       0
 19967 ;;Total ram usage:       22 bytes
 19968 ;; Hardware stack levels used:    1
 19969 ;; Hardware stack levels required when called:    9
 19970 ;; This function calls:
 19971 ;;		___wmul
 19972 ;;		_move_window
 19973 ;; This function is called by:
 19974 ;;		_remove_chain
 19975 ;;		_create_chain
 19976 ;; This function uses a non-reentrant model
 19977 ;;
 19978                           
 19979                           	psect	text77
 19980  0025B0                     __ptext77:
 19981                           	opt stack 0
 19982  0025B0                     _put_cluster:
 19983                           	opt stack 12
 19984                           
 19985                           ;tff.c: 203: WORD bc;
 19986                           ;tff.c: 204: BYTE *p;
 19987                           ;tff.c: 205: DWORD fatsect;
 19988                           ;tff.c: 206: FATFS *fs = FatFs;
 19989                           
 19990                           ; BSR set to: 0
 19991                           ;incstack = 0
 19992  0025B0  C0F6  F0B4         	movff	_FatFs,put_cluster@fs
 19993  0025B4  C0F7  F0B5         	movff	_FatFs+1,put_cluster@fs+1
 19994                           
 19995                           ;tff.c: 209: fatsect = fs->fatbase;
 19996  0025B8  0100               	movlb	0	; () banked
 19997  0025BA  EE20 F008          	lfsr	2,8
 19998  0025BE  51B4               	movf	put_cluster@fs& (0+255),w,b
 19999  0025C0  26D9               	addwf	fsr2l,f,c
 20000  0025C2  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 20001  0025C4  22DA               	addwfc	fsr2h,f,c
 20002  0025C6  CFDE F0AC          	movff	postinc2,put_cluster@fatsect
 20003  0025CA  CFDE F0AD          	movff	postinc2,put_cluster@fatsect+1
 20004  0025CE  CFDE F0AE          	movff	postinc2,put_cluster@fatsect+2
 20005  0025D2  CFDE F0AF          	movff	postinc2,put_cluster@fatsect+3
 20006                           
 20007                           ;tff.c: 210: switch (fs->fs_type) {
 20008  0025D6  D111               	goto	l801
 20009  0025D8                     
 20010                           ; BSR set to: 0
 20011                           ;tff.c: 212: bc = (WORD)clust * 3 / 2;
 20012                           
 20013                           ; BSR set to: 0
 20014  0025D8  C0A0  F060         	movff	put_cluster@clust,___wmul@multiplier
 20015  0025DC  C0A1  F061         	movff	put_cluster@clust+1,___wmul@multiplier+1
 20016  0025E0  0E00               	movlw	0
 20017  0025E2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20018  0025E4  0E03               	movlw	3
 20019  0025E6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20020  0025E8  ECE1  F02E         	call	___wmul	;wreg free
 20021  0025EC  90D8               	bcf	status,0,c
 20022  0025EE  0100               	movlb	0	; () banked
 20023  0025F0  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 20024  0025F2  6FA4               	movwf	??_put_cluster& (0+255),b
 20025  0025F4  3160               	rrcf	?___wmul& (0+255),w,b
 20026  0025F6  6FB0               	movwf	put_cluster@bc& (0+255),b
 20027  0025F8  C0A4  F0B1         	movff	??_put_cluster,put_cluster@bc+1
 20028                           
 20029                           ; BSR set to: 0
 20030                           ;tff.c: 213: if (!move_window(fatsect + bc / 512U)) return FALSE;
 20031  0025FC  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 20032  002600  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 20033  002604  0E09               	movlw	9
 20034  002606  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 20035  002608                     u13545:
 20036  002608  90D8               	bcf	status,0,c
 20037  00260A  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 20038  00260C  33A4               	rrcf	??_put_cluster& (0+255),f,b
 20039  00260E  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 20040  002610  D7FB               	goto	u13545
 20041  002612  51A4               	movf	??_put_cluster& (0+255),w,b
 20042  002614  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 20043  002616  6F8B               	movwf	move_window@sector& (0+255),b
 20044  002618  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 20045  00261A  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 20046  00261C  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 20047  00261E  0E00               	movlw	0
 20048  002620  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 20049  002622  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 20050  002624  0E00               	movlw	0
 20051  002626  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 20052  002628  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 20053  00262A  EC27  F018         	call	_move_window	;wreg free
 20054  00262E  0900               	iorlw	0
 20055  002630  A4D8               	btfss	status,2,c
 20056  002632  D002               	goto	l803
 20057  002634  0E00               	movlw	0
 20058  002636  0012               	return	
 20059  002638                     l803:
 20060                           
 20061                           ;tff.c: 214: p = &fs->win[bc % 512U];
 20062  002638  0EFF               	movlw	255
 20063  00263A  0100               	movlb	0	; () banked
 20064  00263C  6FA4               	movwf	??_put_cluster& (0+255),b
 20065  00263E  0E01               	movlw	1
 20066  002640  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 20067  002642  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 20068  002646  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 20069  00264A  51A4               	movf	??_put_cluster& (0+255),w,b
 20070  00264C  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 20071  00264E  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 20072  002650  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 20073  002652  0E20               	movlw	32
 20074  002654  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 20075  002656  0E00               	movlw	0
 20076  002658  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 20077  00265A  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 20078  00265C  25B4               	addwf	put_cluster@fs& (0+255),w,b
 20079  00265E  6FB2               	movwf	put_cluster@p& (0+255),b
 20080  002660  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 20081  002662  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 20082  002664  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 20083                           
 20084                           ; BSR set to: 0
 20085                           ;tff.c: 215: *p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 20086  002666  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 20087  002668  D004               	goto	l806
 20088                           
 20089                           ; BSR set to: 0
 20090  00266A  C0A2  F0A8         	movff	put_cluster@val,_put_cluster$1572
 20091  00266E  6BA9               	clrf	(_put_cluster$1572+1)& (0+255),b
 20092  002670  D01A               	goto	l808
 20093  002672                     l806:
 20094                           
 20095                           ; BSR set to: 0
 20096                           
 20097                           ; BSR set to: 0
 20098  002672  51A2               	movf	put_cluster@val& (0+255),w,b
 20099  002674  6FA4               	movwf	??_put_cluster& (0+255),b
 20100  002676  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 20101  002678  3BA4               	swapf	??_put_cluster& (0+255),f,b
 20102  00267A  3BA5               	swapf	(??_put_cluster+1)& (0+255),f,b
 20103  00267C  0EF0               	movlw	240
 20104  00267E  17A5               	andwf	(??_put_cluster+1)& (0+255),f,b
 20105  002680  51A4               	movf	??_put_cluster& (0+255),w,b
 20106  002682  0B0F               	andlw	15
 20107  002684  13A5               	iorwf	(??_put_cluster+1)& (0+255),f,b
 20108  002686  0EF0               	movlw	240
 20109  002688  17A4               	andwf	??_put_cluster& (0+255),f,b
 20110  00268A  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 20111  00268E  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 20112  002692  50DF               	movf	indf2,w,c
 20113  002694  0B0F               	andlw	15
 20114  002696  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 20115  002698  6BA7               	clrf	(??_put_cluster+3)& (0+255),b
 20116  00269A  51A4               	movf	??_put_cluster& (0+255),w,b
 20117  00269C  11A6               	iorwf	(??_put_cluster+2)& (0+255),w,b
 20118  00269E  6FA8               	movwf	_put_cluster$1572& (0+255),b
 20119  0026A0  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 20120  0026A2  11A7               	iorwf	(??_put_cluster+3)& (0+255),w,b
 20121  0026A4  6FA9               	movwf	(_put_cluster$1572+1)& (0+255),b
 20122  0026A6                     l808:
 20123                           
 20124                           ; BSR set to: 0
 20125                           
 20126                           ; BSR set to: 0
 20127  0026A6  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 20128  0026AA  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 20129  0026AE  C0A8  FFDF         	movff	_put_cluster$1572,indf2
 20130                           
 20131                           ; BSR set to: 0
 20132                           ;tff.c: 216: bc++;
 20133  0026B2  4BB0               	infsnz	put_cluster@bc& (0+255),f,b
 20134  0026B4  2BB1               	incf	(put_cluster@bc+1)& (0+255),f,b
 20135                           
 20136                           ; BSR set to: 0
 20137                           ;tff.c: 217: fs->winflag = 1;
 20138  0026B6  EE20 F01F          	lfsr	2,31
 20139  0026BA  51B4               	movf	put_cluster@fs& (0+255),w,b
 20140  0026BC  26D9               	addwf	fsr2l,f,c
 20141  0026BE  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 20142  0026C0  22DA               	addwfc	fsr2h,f,c
 20143  0026C2  0E01               	movlw	1
 20144  0026C4  6EDF               	movwf	indf2,c
 20145                           
 20146                           ; BSR set to: 0
 20147                           ;tff.c: 218: if (!move_window(fatsect + bc / 512U)) return FALSE;
 20148  0026C6  C0B0  F0A4         	movff	put_cluster@bc,??_put_cluster
 20149  0026CA  C0B1  F0A5         	movff	put_cluster@bc+1,??_put_cluster+1
 20150  0026CE  0E09               	movlw	9
 20151  0026D0  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 20152  0026D2                     u13575:
 20153  0026D2  90D8               	bcf	status,0,c
 20154  0026D4  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 20155  0026D6  33A4               	rrcf	??_put_cluster& (0+255),f,b
 20156  0026D8  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 20157  0026DA  D7FB               	goto	u13575
 20158  0026DC  51A4               	movf	??_put_cluster& (0+255),w,b
 20159  0026DE  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 20160  0026E0  6F8B               	movwf	move_window@sector& (0+255),b
 20161  0026E2  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 20162  0026E4  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 20163  0026E6  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 20164  0026E8  0E00               	movlw	0
 20165  0026EA  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 20166  0026EC  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 20167  0026EE  0E00               	movlw	0
 20168  0026F0  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 20169  0026F2  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 20170  0026F4  EC27  F018         	call	_move_window	;wreg free
 20171  0026F8  0900               	iorlw	0
 20172  0026FA  A4D8               	btfss	status,2,c
 20173  0026FC  D002               	goto	l809
 20174  0026FE  0E00               	movlw	0
 20175  002700  0012               	return	
 20176  002702                     l809:
 20177                           
 20178                           ;tff.c: 219: p = &fs->win[bc % 512U];
 20179  002702  0EFF               	movlw	255
 20180  002704  0100               	movlb	0	; () banked
 20181  002706  6FA4               	movwf	??_put_cluster& (0+255),b
 20182  002708  0E01               	movlw	1
 20183  00270A  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 20184  00270C  C0B0  F0A6         	movff	put_cluster@bc,??_put_cluster+2
 20185  002710  C0B1  F0A7         	movff	put_cluster@bc+1,??_put_cluster+3
 20186  002714  51A4               	movf	??_put_cluster& (0+255),w,b
 20187  002716  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 20188  002718  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 20189  00271A  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 20190  00271C  0E20               	movlw	32
 20191  00271E  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 20192  002720  0E00               	movlw	0
 20193  002722  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 20194  002724  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 20195  002726  25B4               	addwf	put_cluster@fs& (0+255),w,b
 20196  002728  6FB2               	movwf	put_cluster@p& (0+255),b
 20197  00272A  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 20198  00272C  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 20199  00272E  6FB3               	movwf	(put_cluster@p+1)& (0+255),b
 20200                           
 20201                           ; BSR set to: 0
 20202                           ;tff.c: 220: *p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x
      +                          0F));
 20203  002730  B1A0               	btfsc	put_cluster@clust& (0+255),0,b
 20204  002732  D013               	goto	l811
 20205                           
 20206                           ; BSR set to: 0
 20207  002734  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 20208  002738  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 20209  00273C  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 20210  002740  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 20211  002742  0E0F               	movlw	15
 20212  002744  17A4               	andwf	??_put_cluster& (0+255),f,b
 20213  002746  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 20214  00274A  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 20215  00274E  50DF               	movf	indf2,w,c
 20216  002750  0BF0               	andlw	240
 20217  002752  11A4               	iorwf	??_put_cluster& (0+255),w,b
 20218  002754  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 20219  002756  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 20220  002758  D00C               	goto	L10
 20221  00275A                     l811:
 20222                           
 20223                           ; BSR set to: 0
 20224                           
 20225                           ; BSR set to: 0
 20226  00275A  C0A2  F0A4         	movff	put_cluster@val,??_put_cluster
 20227  00275E  C0A3  F0A5         	movff	put_cluster@val+1,??_put_cluster+1
 20228  002762  0E04               	movlw	4
 20229  002764  6FA6               	movwf	(??_put_cluster+2)& (0+255),b
 20230  002766                     u13605:
 20231  002766  90D8               	bcf	status,0,c
 20232  002768  33A5               	rrcf	(??_put_cluster+1)& (0+255),f,b
 20233  00276A  33A4               	rrcf	??_put_cluster& (0+255),f,b
 20234  00276C  2FA6               	decfsz	(??_put_cluster+2)& (0+255),f,b
 20235  00276E  D7FB               	goto	u13605
 20236  002770  51A4               	movf	??_put_cluster& (0+255),w,b
 20237  002772                     L10:
 20238  002772  6FAA               	movwf	_put_cluster$1573& (0+255),b
 20239  002774  6BAB               	clrf	(_put_cluster$1573+1)& (0+255),b
 20240                           
 20241                           ; BSR set to: 0
 20242                           
 20243                           ; BSR set to: 0
 20244  002776  C0B2  FFD9         	movff	put_cluster@p,fsr2l
 20245  00277A  C0B3  FFDA         	movff	put_cluster@p+1,fsr2h
 20246  00277E  C0AA  FFDF         	movff	_put_cluster$1573,indf2
 20247                           
 20248                           ;tff.c: 221: break;
 20249  002782  D049               	goto	l814
 20250  002784                     
 20251                           ; BSR set to: 0
 20252                           ;tff.c: 224: if (!move_window(fatsect + clust / 256)) return FALSE;
 20253                           
 20254                           ; BSR set to: 0
 20255  002784  C0A0  F0A4         	movff	put_cluster@clust,??_put_cluster
 20256  002788  C0A1  F0A5         	movff	put_cluster@clust+1,??_put_cluster+1
 20257  00278C  C0A5  F0A4         	movff	??_put_cluster+1,??_put_cluster
 20258  002790  6BA5               	clrf	(??_put_cluster+1)& (0+255),b
 20259  002792  51A4               	movf	??_put_cluster& (0+255),w,b
 20260  002794  25AC               	addwf	put_cluster@fatsect& (0+255),w,b
 20261  002796  6F8B               	movwf	move_window@sector& (0+255),b
 20262  002798  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 20263  00279A  21AD               	addwfc	(put_cluster@fatsect+1)& (0+255),w,b
 20264  00279C  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 20265  00279E  0E00               	movlw	0
 20266  0027A0  21AE               	addwfc	(put_cluster@fatsect+2)& (0+255),w,b
 20267  0027A2  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 20268  0027A4  0E00               	movlw	0
 20269  0027A6  21AF               	addwfc	(put_cluster@fatsect+3)& (0+255),w,b
 20270  0027A8  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 20271  0027AA  EC27  F018         	call	_move_window	;wreg free
 20272  0027AE  0900               	iorlw	0
 20273  0027B0  A4D8               	btfss	status,2,c
 20274  0027B2  D002               	goto	l816
 20275  0027B4  0E00               	movlw	0
 20276  0027B6  0012               	return	
 20277  0027B8                     l816:
 20278                           
 20279                           ;tff.c: 225: *(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U])=(WORD)((WORD)val);
 20280  0027B8  0EFF               	movlw	255
 20281  0027BA  0100               	movlb	0	; () banked
 20282  0027BC  6FA4               	movwf	??_put_cluster& (0+255),b
 20283  0027BE  0E01               	movlw	1
 20284  0027C0  6FA5               	movwf	(??_put_cluster+1)& (0+255),b
 20285  0027C2  C0A0  F0A6         	movff	put_cluster@clust,??_put_cluster+2
 20286  0027C6  C0A1  F0A7         	movff	put_cluster@clust+1,??_put_cluster+3
 20287  0027CA  90D8               	bcf	status,0,c
 20288  0027CC  37A6               	rlcf	(??_put_cluster+2)& (0+255),f,b
 20289  0027CE  37A7               	rlcf	(??_put_cluster+3)& (0+255),f,b
 20290  0027D0  51A4               	movf	??_put_cluster& (0+255),w,b
 20291  0027D2  17A6               	andwf	(??_put_cluster+2)& (0+255),f,b
 20292  0027D4  51A5               	movf	(??_put_cluster+1)& (0+255),w,b
 20293  0027D6  17A7               	andwf	(??_put_cluster+3)& (0+255),f,b
 20294  0027D8  0E20               	movlw	32
 20295  0027DA  27A6               	addwf	(??_put_cluster+2)& (0+255),f,b
 20296  0027DC  0E00               	movlw	0
 20297  0027DE  23A7               	addwfc	(??_put_cluster+3)& (0+255),f,b
 20298  0027E0  51A6               	movf	(??_put_cluster+2)& (0+255),w,b
 20299  0027E2  25B4               	addwf	put_cluster@fs& (0+255),w,b
 20300  0027E4  6ED9               	movwf	fsr2l,c
 20301  0027E6  51A7               	movf	(??_put_cluster+3)& (0+255),w,b
 20302  0027E8  21B5               	addwfc	(put_cluster@fs+1)& (0+255),w,b
 20303  0027EA  6EDA               	movwf	fsr2h,c
 20304  0027EC  C0A2  FFDE         	movff	put_cluster@val,postinc2
 20305  0027F0  C0A3  FFDD         	movff	put_cluster@val+1,postdec2
 20306                           
 20307                           ;tff.c: 226: break;
 20308  0027F4  D010               	goto	l814
 20309  0027F6                     
 20310                           ; BSR set to: 0
 20311                           ;tff.c: 234: return FALSE;
 20312                           
 20313                           ; BSR set to: 0
 20314  0027F6  0E00               	movlw	0
 20315                           
 20316                           ; BSR set to: 0
 20317  0027F8  0012               	return	
 20318  0027FA                     l801:
 20319                           
 20320                           ; BSR set to: 0
 20321                           
 20322                           ; BSR set to: 0
 20323  0027FA  EE20 F01C          	lfsr	2,28
 20324  0027FE  51B4               	movf	put_cluster@fs& (0+255),w,b
 20325  002800  26D9               	addwf	fsr2l,f,c
 20326  002802  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 20327  002804  22DA               	addwfc	fsr2h,f,c
 20328  002806  50DF               	movf	indf2,w,c
 20329                           
 20330                           ; Switch size 1, requested type "space"
 20331                           ; Number of cases is 2, Range of values is 1 to 2
 20332                           ; switch strategies available:
 20333                           ; Name         Instructions Cycles
 20334                           ; simple_byte            7     4 (average)
 20335                           ;	Chosen strategy is simple_byte
 20336  002808  0A01               	xorlw	1	; case 1
 20337  00280A  B4D8               	btfsc	status,2,c
 20338  00280C  D6E5               	goto	l802
 20339  00280E  0A03               	xorlw	3	; case 2
 20340  002810  B4D8               	btfsc	status,2,c
 20341  002812  D7B8               	goto	l815
 20342  002814  D7F0               	goto	l817
 20343  002816                     l814:
 20344                           
 20345                           ; BSR set to: 0
 20346                           ;tff.c: 236: fs->winflag = 1;
 20347                           
 20348                           ; BSR set to: 0
 20349  002816  EE20 F01F          	lfsr	2,31
 20350  00281A  51B4               	movf	put_cluster@fs& (0+255),w,b
 20351  00281C  26D9               	addwf	fsr2l,f,c
 20352  00281E  51B5               	movf	(put_cluster@fs+1)& (0+255),w,b
 20353  002820  22DA               	addwfc	fsr2h,f,c
 20354  002822  0E01               	movlw	1
 20355  002824  6EDF               	movwf	indf2,c
 20356                           
 20357                           ; BSR set to: 0
 20358                           ;tff.c: 237: return TRUE;
 20359  002826  0E01               	movlw	1
 20360  002828  0012               	return	
 20361  00282A                     __end_of_put_cluster:
 20362                           	opt stack 0
 20363                           tosu	equ	0xFFF
 20364                           tosh	equ	0xFFE
 20365                           tosl	equ	0xFFD
 20366                           pclath	equ	0xFFA
 20367                           tblptru	equ	0xFF8
 20368                           tblptrh	equ	0xFF7
 20369                           tblptrl	equ	0xFF6
 20370                           tablat	equ	0xFF5
 20371                           prodh	equ	0xFF4
 20372                           prodl	equ	0xFF3
 20373                           intcon	equ	0xFF2
 20374                           intcon2	equ	0xFF1
 20375                           intcon3	equ	0xFF0
 20376                           indf0	equ	0xFEF
 20377                           postinc0	equ	0xFEE
 20378                           fsr0h	equ	0xFEA
 20379                           fsr0l	equ	0xFE9
 20380                           wreg	equ	0xFE8
 20381                           indf1	equ	0xFE7
 20382                           postinc1	equ	0xFE6
 20383                           postdec1	equ	0xFE5
 20384                           plusw1	equ	0xFE3
 20385                           fsr1h	equ	0xFE2
 20386                           fsr1l	equ	0xFE1
 20387                           indf2	equ	0xFDF
 20388                           postinc2	equ	0xFDE
 20389                           postdec2	equ	0xFDD
 20390                           plusw2	equ	0xFDB
 20391                           fsr2h	equ	0xFDA
 20392                           fsr2l	equ	0xFD9
 20393                           status	equ	0xFD8
 20394                           
 20395 ;; *************** function _get_cluster *****************
 20396 ;; Defined at:
 20397 ;;		line 155 in file "bibliotecas/tff.c"
 20398 ;; Parameters:    Size  Location     Type
 20399 ;;  clust           2   64[BANK0 ] unsigned short 
 20400 ;; Auto vars:     Size  Location     Type
 20401 ;;  fatsect         4   75[BANK0 ] unsigned long 
 20402 ;;  fs              2   81[BANK0 ] PTR struct _FATFS
 20403 ;;		 -> NULL(0), fs(544), 
 20404 ;;  bc              2   79[BANK0 ] unsigned short 
 20405 ;;  wc              2   73[BANK0 ] unsigned short 
 20406 ;; Return value:  Size  Location     Type
 20407 ;;                  2   64[BANK0 ] unsigned short 
 20408 ;; Registers used:
 20409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20410 ;; Tracked objects:
 20411 ;;		On entry : 0/0
 20412 ;;		On exit  : 0/0
 20413 ;;		Unchanged: 0/0
 20414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20415 ;;      Params:         0       2       0       0       0       0       0       0       0
 20416 ;;      Locals:         0      10       0       0       0       0       0       0       0
 20417 ;;      Temps:          0       7       0       0       0       0       0       0       0
 20418 ;;      Totals:         0      19       0       0       0       0       0       0       0
 20419 ;;Total ram usage:       19 bytes
 20420 ;; Hardware stack levels used:    1
 20421 ;; Hardware stack levels required when called:    9
 20422 ;; This function calls:
 20423 ;;		___wmul
 20424 ;;		_move_window
 20425 ;; This function is called by:
 20426 ;;		_remove_chain
 20427 ;;		_create_chain
 20428 ;;		_next_dir_entry
 20429 ;;		_f_lseek
 20430 ;;		_f_read
 20431 ;; This function uses a non-reentrant model
 20432 ;;
 20433                           
 20434                           	psect	text78
 20435  002AA2                     __ptext78:
 20436                           	opt stack 0
 20437  002AA2                     _get_cluster:
 20438                           	opt stack 12
 20439                           
 20440                           ;tff.c: 159: WORD wc, bc;
 20441                           ;tff.c: 160: DWORD fatsect;
 20442                           ;tff.c: 161: FATFS *fs = FatFs;
 20443                           
 20444                           ;incstack = 0
 20445  002AA2  C0F6  F0B1         	movff	_FatFs,get_cluster@fs
 20446  002AA6  C0F7  F0B2         	movff	_FatFs+1,get_cluster@fs+1
 20447                           
 20448                           ;tff.c: 164: if (clust >= 2 && clust < fs->max_clust) {
 20449  002AAA  0100               	movlb	0	; () banked
 20450  002AAC  51A1               	movf	(get_cluster@clust+1)& (0+255),w,b
 20451  002AAE  E104               	bnz	u13450
 20452  002AB0  0E02               	movlw	2
 20453  002AB2  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 20454  002AB4  A0D8               	btfss	status,0,c
 20455  002AB6  D100               	goto	l790
 20456  002AB8                     u13450:
 20457                           
 20458                           ; BSR set to: 0
 20459  002AB8  EE20 F016          	lfsr	2,22
 20460  002ABC  51B1               	movf	get_cluster@fs& (0+255),w,b
 20461  002ABE  26D9               	addwf	fsr2l,f,c
 20462  002AC0  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 20463  002AC2  22DA               	addwfc	fsr2h,f,c
 20464  002AC4  50DE               	movf	postinc2,w,c
 20465  002AC6  5DA0               	subwf	get_cluster@clust& (0+255),w,b
 20466  002AC8  50DE               	movf	postinc2,w,c
 20467  002ACA  59A1               	subwfb	(get_cluster@clust+1)& (0+255),w,b
 20468  002ACC  B0D8               	btfsc	status,0,c
 20469  002ACE  D0F4               	goto	l790
 20470                           
 20471                           ; BSR set to: 0
 20472                           ;tff.c: 165: fatsect = fs->fatbase;
 20473  002AD0  EE20 F008          	lfsr	2,8
 20474  002AD4  51B1               	movf	get_cluster@fs& (0+255),w,b
 20475  002AD6  26D9               	addwf	fsr2l,f,c
 20476  002AD8  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 20477  002ADA  22DA               	addwfc	fsr2h,f,c
 20478  002ADC  CFDE F0AB          	movff	postinc2,get_cluster@fatsect
 20479  002AE0  CFDE F0AC          	movff	postinc2,get_cluster@fatsect+1
 20480  002AE4  CFDE F0AD          	movff	postinc2,get_cluster@fatsect+2
 20481  002AE8  CFDE F0AE          	movff	postinc2,get_cluster@fatsect+3
 20482                           
 20483                           ;tff.c: 166: switch (fs->fs_type) {
 20484  002AEC  D0D8               	goto	l787
 20485  002AEE                     
 20486                           ; BSR set to: 0
 20487                           ;tff.c: 168: bc = (WORD)clust * 3 / 2;
 20488                           
 20489                           ; BSR set to: 0
 20490  002AEE  C0A0  F060         	movff	get_cluster@clust,___wmul@multiplier
 20491  002AF2  C0A1  F061         	movff	get_cluster@clust+1,___wmul@multiplier+1
 20492  002AF6  0E00               	movlw	0
 20493  002AF8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20494  002AFA  0E03               	movlw	3
 20495  002AFC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20496  002AFE  ECE1  F02E         	call	___wmul	;wreg free
 20497  002B02  90D8               	bcf	status,0,c
 20498  002B04  0100               	movlb	0	; () banked
 20499  002B06  3161               	rrcf	(?___wmul+1)& (0+255),w,b
 20500  002B08  6FA2               	movwf	??_get_cluster& (0+255),b
 20501  002B0A  3160               	rrcf	?___wmul& (0+255),w,b
 20502  002B0C  6FAF               	movwf	get_cluster@bc& (0+255),b
 20503  002B0E  C0A2  F0B0         	movff	??_get_cluster,get_cluster@bc+1
 20504                           
 20505                           ; BSR set to: 0
 20506                           ;tff.c: 169: if (!move_window(fatsect + bc / 512U)) break;
 20507  002B12  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 20508  002B16  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 20509  002B1A  0E09               	movlw	9
 20510  002B1C  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 20511  002B1E                     u13475:
 20512  002B1E  90D8               	bcf	status,0,c
 20513  002B20  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 20514  002B22  33A2               	rrcf	??_get_cluster& (0+255),f,b
 20515  002B24  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 20516  002B26  D7FB               	goto	u13475
 20517  002B28  51A2               	movf	??_get_cluster& (0+255),w,b
 20518  002B2A  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 20519  002B2C  6F8B               	movwf	move_window@sector& (0+255),b
 20520  002B2E  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 20521  002B30  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 20522  002B32  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 20523  002B34  0E00               	movlw	0
 20524  002B36  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 20525  002B38  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 20526  002B3A  0E00               	movlw	0
 20527  002B3C  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 20528  002B3E  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 20529  002B40  EC27  F018         	call	_move_window	;wreg free
 20530  002B44  0900               	iorlw	0
 20531  002B46  B4D8               	btfsc	status,2,c
 20532  002B48  D0B7               	goto	l790
 20533                           
 20534                           ;tff.c: 170: wc = fs->win[bc % 512U]; bc++;
 20535  002B4A  0EFF               	movlw	255
 20536  002B4C  0100               	movlb	0	; () banked
 20537  002B4E  6FA2               	movwf	??_get_cluster& (0+255),b
 20538  002B50  0E01               	movlw	1
 20539  002B52  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 20540  002B54  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 20541  002B58  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 20542  002B5C  51A2               	movf	??_get_cluster& (0+255),w,b
 20543  002B5E  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 20544  002B60  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 20545  002B62  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 20546  002B64  0E20               	movlw	32
 20547  002B66  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 20548  002B68  0E00               	movlw	0
 20549  002B6A  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 20550  002B6C  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 20551  002B6E  25B1               	addwf	get_cluster@fs& (0+255),w,b
 20552  002B70  6ED9               	movwf	fsr2l,c
 20553  002B72  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 20554  002B74  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 20555  002B76  6EDA               	movwf	fsr2h,c
 20556  002B78  50DF               	movf	indf2,w,c
 20557  002B7A  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 20558  002B7C  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 20559  002B7E  6FA9               	movwf	get_cluster@wc& (0+255),b
 20560  002B80  6BAA               	clrf	(get_cluster@wc+1)& (0+255),b
 20561                           
 20562                           ; BSR set to: 0
 20563  002B82  4BAF               	infsnz	get_cluster@bc& (0+255),f,b
 20564  002B84  2BB0               	incf	(get_cluster@bc+1)& (0+255),f,b
 20565                           
 20566                           ; BSR set to: 0
 20567                           ;tff.c: 171: if (!move_window(fatsect + bc / 512U)) break;
 20568  002B86  C0AF  F0A2         	movff	get_cluster@bc,??_get_cluster
 20569  002B8A  C0B0  F0A3         	movff	get_cluster@bc+1,??_get_cluster+1
 20570  002B8E  0E09               	movlw	9
 20571  002B90  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 20572  002B92                     u13495:
 20573  002B92  90D8               	bcf	status,0,c
 20574  002B94  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 20575  002B96  33A2               	rrcf	??_get_cluster& (0+255),f,b
 20576  002B98  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 20577  002B9A  D7FB               	goto	u13495
 20578  002B9C  51A2               	movf	??_get_cluster& (0+255),w,b
 20579  002B9E  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 20580  002BA0  6F8B               	movwf	move_window@sector& (0+255),b
 20581  002BA2  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 20582  002BA4  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 20583  002BA6  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 20584  002BA8  0E00               	movlw	0
 20585  002BAA  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 20586  002BAC  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 20587  002BAE  0E00               	movlw	0
 20588  002BB0  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 20589  002BB2  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 20590  002BB4  EC27  F018         	call	_move_window	;wreg free
 20591  002BB8  0900               	iorlw	0
 20592  002BBA  B4D8               	btfsc	status,2,c
 20593  002BBC  D07D               	goto	l790
 20594                           
 20595                           ;tff.c: 172: wc |= (WORD)fs->win[bc % 512U] << 8;
 20596  002BBE  0EFF               	movlw	255
 20597  002BC0  0100               	movlb	0	; () banked
 20598  002BC2  6FA2               	movwf	??_get_cluster& (0+255),b
 20599  002BC4  0E01               	movlw	1
 20600  002BC6  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 20601  002BC8  C0AF  F0A4         	movff	get_cluster@bc,??_get_cluster+2
 20602  002BCC  C0B0  F0A5         	movff	get_cluster@bc+1,??_get_cluster+3
 20603  002BD0  51A2               	movf	??_get_cluster& (0+255),w,b
 20604  002BD2  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 20605  002BD4  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 20606  002BD6  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 20607  002BD8  0E20               	movlw	32
 20608  002BDA  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 20609  002BDC  0E00               	movlw	0
 20610  002BDE  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 20611  002BE0  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 20612  002BE2  25B1               	addwf	get_cluster@fs& (0+255),w,b
 20613  002BE4  6ED9               	movwf	fsr2l,c
 20614  002BE6  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 20615  002BE8  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 20616  002BEA  6EDA               	movwf	fsr2h,c
 20617  002BEC  50DF               	movf	indf2,w,c
 20618  002BEE  6FA6               	movwf	(??_get_cluster+4)& (0+255),b
 20619  002BF0  51A6               	movf	(??_get_cluster+4)& (0+255),w,b
 20620  002BF2  6FA8               	movwf	(??_get_cluster+6)& (0+255),b
 20621  002BF4  6BA7               	clrf	(??_get_cluster+5)& (0+255),b
 20622  002BF6  51A7               	movf	(??_get_cluster+5)& (0+255),w,b
 20623  002BF8  13A9               	iorwf	get_cluster@wc& (0+255),f,b
 20624  002BFA  51A8               	movf	(??_get_cluster+6)& (0+255),w,b
 20625  002BFC  13AA               	iorwf	(get_cluster@wc+1)& (0+255),f,b
 20626                           
 20627                           ; BSR set to: 0
 20628                           ;tff.c: 173: return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
 20629  002BFE  B1A0               	btfsc	get_cluster@clust& (0+255),0,b
 20630  002C00  D007               	goto	l793
 20631                           
 20632                           ; BSR set to: 0
 20633  002C02  0EFF               	movlw	255
 20634  002C04  15A9               	andwf	get_cluster@wc& (0+255),w,b
 20635  002C06  6FA0               	movwf	?_get_cluster& (0+255),b
 20636  002C08  0E0F               	movlw	15
 20637  002C0A  15AA               	andwf	(get_cluster@wc+1)& (0+255),w,b
 20638  002C0C  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 20639  002C0E  0012               	return	
 20640  002C10                     l793:
 20641                           
 20642                           ; BSR set to: 0
 20643                           
 20644                           ; BSR set to: 0
 20645  002C10  C0A9  F0A2         	movff	get_cluster@wc,??_get_cluster
 20646  002C14  C0AA  F0A3         	movff	get_cluster@wc+1,??_get_cluster+1
 20647  002C18  0E04               	movlw	4
 20648  002C1A  6FA4               	movwf	(??_get_cluster+2)& (0+255),b
 20649  002C1C                     u13525:
 20650  002C1C  90D8               	bcf	status,0,c
 20651  002C1E  33A3               	rrcf	(??_get_cluster+1)& (0+255),f,b
 20652  002C20  33A2               	rrcf	??_get_cluster& (0+255),f,b
 20653  002C22  2FA4               	decfsz	(??_get_cluster+2)& (0+255),f,b
 20654  002C24  D7FB               	goto	u13525
 20655  002C26  C0A2  F0A0         	movff	??_get_cluster,?_get_cluster
 20656  002C2A  C0A3  F0A1         	movff	??_get_cluster+1,?_get_cluster+1
 20657                           
 20658                           ; BSR set to: 0
 20659                           
 20660                           ; BSR set to: 0
 20661  002C2E  0012               	return	
 20662  002C30                     
 20663                           ; BSR set to: 0
 20664                           ;tff.c: 176: if (!move_window(fatsect + clust / 256)) break;
 20665                           
 20666                           ; BSR set to: 0
 20667  002C30  C0A0  F0A2         	movff	get_cluster@clust,??_get_cluster
 20668  002C34  C0A1  F0A3         	movff	get_cluster@clust+1,??_get_cluster+1
 20669  002C38  C0A3  F0A2         	movff	??_get_cluster+1,??_get_cluster
 20670  002C3C  6BA3               	clrf	(??_get_cluster+1)& (0+255),b
 20671  002C3E  51A2               	movf	??_get_cluster& (0+255),w,b
 20672  002C40  25AB               	addwf	get_cluster@fatsect& (0+255),w,b
 20673  002C42  6F8B               	movwf	move_window@sector& (0+255),b
 20674  002C44  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 20675  002C46  21AC               	addwfc	(get_cluster@fatsect+1)& (0+255),w,b
 20676  002C48  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 20677  002C4A  0E00               	movlw	0
 20678  002C4C  21AD               	addwfc	(get_cluster@fatsect+2)& (0+255),w,b
 20679  002C4E  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 20680  002C50  0E00               	movlw	0
 20681  002C52  21AE               	addwfc	(get_cluster@fatsect+3)& (0+255),w,b
 20682  002C54  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 20683  002C56  EC27  F018         	call	_move_window	;wreg free
 20684  002C5A  0900               	iorlw	0
 20685  002C5C  B4D8               	btfsc	status,2,c
 20686  002C5E  D02C               	goto	l790
 20687                           
 20688                           ;tff.c: 177: return (WORD)(*(WORD*)(BYTE*)(&fs->win[((WORD)clust * 2) % 512U]));
 20689  002C60  0EFF               	movlw	255
 20690  002C62  0100               	movlb	0	; () banked
 20691  002C64  6FA2               	movwf	??_get_cluster& (0+255),b
 20692  002C66  0E01               	movlw	1
 20693  002C68  6FA3               	movwf	(??_get_cluster+1)& (0+255),b
 20694  002C6A  C0A0  F0A4         	movff	get_cluster@clust,??_get_cluster+2
 20695  002C6E  C0A1  F0A5         	movff	get_cluster@clust+1,??_get_cluster+3
 20696  002C72  90D8               	bcf	status,0,c
 20697  002C74  37A4               	rlcf	(??_get_cluster+2)& (0+255),f,b
 20698  002C76  37A5               	rlcf	(??_get_cluster+3)& (0+255),f,b
 20699  002C78  51A2               	movf	??_get_cluster& (0+255),w,b
 20700  002C7A  17A4               	andwf	(??_get_cluster+2)& (0+255),f,b
 20701  002C7C  51A3               	movf	(??_get_cluster+1)& (0+255),w,b
 20702  002C7E  17A5               	andwf	(??_get_cluster+3)& (0+255),f,b
 20703  002C80  0E20               	movlw	32
 20704  002C82  27A4               	addwf	(??_get_cluster+2)& (0+255),f,b
 20705  002C84  0E00               	movlw	0
 20706  002C86  23A5               	addwfc	(??_get_cluster+3)& (0+255),f,b
 20707  002C88  51A4               	movf	(??_get_cluster+2)& (0+255),w,b
 20708  002C8A  25B1               	addwf	get_cluster@fs& (0+255),w,b
 20709  002C8C  6ED9               	movwf	fsr2l,c
 20710  002C8E  51A5               	movf	(??_get_cluster+3)& (0+255),w,b
 20711  002C90  21B2               	addwfc	(get_cluster@fs+1)& (0+255),w,b
 20712  002C92  6EDA               	movwf	fsr2h,c
 20713  002C94  CFDE F0A0          	movff	postinc2,?_get_cluster
 20714  002C98  CFDD F0A1          	movff	postdec2,?_get_cluster+1
 20715                           
 20716                           ; BSR set to: 0
 20717  002C9C  0012               	return	
 20718  002C9E                     l787:
 20719                           
 20720                           ; BSR set to: 0
 20721                           
 20722                           ; BSR set to: 0
 20723  002C9E  EE20 F01C          	lfsr	2,28
 20724  002CA2  51B1               	movf	get_cluster@fs& (0+255),w,b
 20725  002CA4  26D9               	addwf	fsr2l,f,c
 20726  002CA6  51B2               	movf	(get_cluster@fs+1)& (0+255),w,b
 20727  002CA8  22DA               	addwfc	fsr2h,f,c
 20728  002CAA  50DF               	movf	indf2,w,c
 20729                           
 20730                           ; Switch size 1, requested type "space"
 20731                           ; Number of cases is 2, Range of values is 1 to 2
 20732                           ; switch strategies available:
 20733                           ; Name         Instructions Cycles
 20734                           ; simple_byte            7     4 (average)
 20735                           ;	Chosen strategy is simple_byte
 20736  002CAC  0A01               	xorlw	1	; case 1
 20737  002CAE  B4D8               	btfsc	status,2,c
 20738  002CB0  D71E               	goto	l788
 20739  002CB2  0A03               	xorlw	3	; case 2
 20740  002CB4  B4D8               	btfsc	status,2,c
 20741  002CB6  D7BC               	goto	l797
 20742  002CB8                     l790:
 20743                           
 20744                           ;tff.c: 184: }
 20745                           ;tff.c: 186: return 1;
 20746                           
 20747                           ; BSR set to: 0
 20748                           
 20749                           ; BSR set to: 0
 20750  002CB8  0E00               	movlw	0
 20751  002CBA  0100               	movlb	0	; () banked
 20752  002CBC  6FA1               	movwf	(?_get_cluster+1)& (0+255),b
 20753  002CBE  0E01               	movlw	1
 20754  002CC0  6FA0               	movwf	?_get_cluster& (0+255),b
 20755  002CC2  0012               	return	
 20756  002CC4                     __end_of_get_cluster:
 20757                           	opt stack 0
 20758                           tosu	equ	0xFFF
 20759                           tosh	equ	0xFFE
 20760                           tosl	equ	0xFFD
 20761                           pclath	equ	0xFFA
 20762                           tblptru	equ	0xFF8
 20763                           tblptrh	equ	0xFF7
 20764                           tblptrl	equ	0xFF6
 20765                           tablat	equ	0xFF5
 20766                           prodh	equ	0xFF4
 20767                           prodl	equ	0xFF3
 20768                           intcon	equ	0xFF2
 20769                           intcon2	equ	0xFF1
 20770                           intcon3	equ	0xFF0
 20771                           indf0	equ	0xFEF
 20772                           postinc0	equ	0xFEE
 20773                           fsr0h	equ	0xFEA
 20774                           fsr0l	equ	0xFE9
 20775                           wreg	equ	0xFE8
 20776                           indf1	equ	0xFE7
 20777                           postinc1	equ	0xFE6
 20778                           postdec1	equ	0xFE5
 20779                           plusw1	equ	0xFE3
 20780                           fsr1h	equ	0xFE2
 20781                           fsr1l	equ	0xFE1
 20782                           indf2	equ	0xFDF
 20783                           postinc2	equ	0xFDE
 20784                           postdec2	equ	0xFDD
 20785                           plusw2	equ	0xFDB
 20786                           fsr2h	equ	0xFDA
 20787                           fsr2l	equ	0xFD9
 20788                           status	equ	0xFD8
 20789                           
 20790 ;; *************** function ___lldiv *****************
 20791 ;; Defined at:
 20792 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 20793 ;; Parameters:    Size  Location     Type
 20794 ;;  dividend        4    0[BANK0 ] unsigned long 
 20795 ;;  divisor         4    4[BANK0 ] unsigned long 
 20796 ;; Auto vars:     Size  Location     Type
 20797 ;;  quotient        4    8[BANK0 ] unsigned long 
 20798 ;;  counter         1   12[BANK0 ] unsigned char 
 20799 ;; Return value:  Size  Location     Type
 20800 ;;                  4    0[BANK0 ] unsigned long 
 20801 ;; Registers used:
 20802 ;;		wreg, status,2, status,0
 20803 ;; Tracked objects:
 20804 ;;		On entry : 0/0
 20805 ;;		On exit  : 0/0
 20806 ;;		Unchanged: 0/0
 20807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20808 ;;      Params:         0       8       0       0       0       0       0       0       0
 20809 ;;      Locals:         0       5       0       0       0       0       0       0       0
 20810 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20811 ;;      Totals:         0      13       0       0       0       0       0       0       0
 20812 ;;Total ram usage:       13 bytes
 20813 ;; Hardware stack levels used:    1
 20814 ;; Hardware stack levels required when called:    3
 20815 ;; This function calls:
 20816 ;;		Nothing
 20817 ;; This function is called by:
 20818 ;;		_auto_mount
 20819 ;;		_f_lseek
 20820 ;;		_fprintf
 20821 ;;		_ultoa
 20822 ;; This function uses a non-reentrant model
 20823 ;;
 20824                           
 20825                           	psect	text79
 20826  005030                     __ptext79:
 20827                           	opt stack 0
 20828  005030                     ___lldiv:
 20829                           	opt stack 22
 20830                           
 20831                           ; BSR set to: 0
 20832                           ;incstack = 0
 20833  005030  0E00               	movlw	0
 20834  005032  0100               	movlb	0	; () banked
 20835  005034  6F68               	movwf	___lldiv@quotient& (0+255),b
 20836  005036  0E00               	movlw	0
 20837  005038  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 20838  00503A  0E00               	movlw	0
 20839  00503C  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 20840  00503E  0E00               	movlw	0
 20841  005040  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 20842                           
 20843                           ; BSR set to: 0
 20844  005042  5164               	movf	___lldiv@divisor& (0+255),w,b
 20845  005044  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 20846  005046  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 20847  005048  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 20848  00504A  B4D8               	btfsc	status,2,c
 20849  00504C  D02A               	goto	l2026
 20850                           
 20851                           ; BSR set to: 0
 20852  00504E  0E01               	movlw	1
 20853  005050  6F6C               	movwf	___lldiv@counter& (0+255),b
 20854  005052  D006               	goto	l2021
 20855  005054                     
 20856                           ; BSR set to: 0
 20857                           
 20858                           ; BSR set to: 0
 20859  005054  90D8               	bcf	status,0,c
 20860  005056  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 20861  005058  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 20862  00505A  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 20863  00505C  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 20864  00505E  2B6C               	incf	___lldiv@counter& (0+255),f,b
 20865  005060                     l2021:
 20866                           
 20867                           ; BSR set to: 0
 20868                           
 20869                           ; BSR set to: 0
 20870  005060  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 20871  005062  D7F8               	goto	l2022
 20872  005064                     u15090:
 20873                           
 20874                           ; BSR set to: 0
 20875                           
 20876                           ; BSR set to: 0
 20877                           
 20878                           ; BSR set to: 0
 20879  005064  90D8               	bcf	status,0,c
 20880  005066  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 20881  005068  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 20882  00506A  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 20883  00506C  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 20884                           
 20885                           ; BSR set to: 0
 20886  00506E  5164               	movf	___lldiv@divisor& (0+255),w,b
 20887  005070  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 20888  005072  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 20889  005074  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 20890  005076  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 20891  005078  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 20892  00507A  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 20893  00507C  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 20894  00507E  A0D8               	btfss	status,0,c
 20895  005080  D009               	goto	l2025
 20896                           
 20897                           ; BSR set to: 0
 20898  005082  5164               	movf	___lldiv@divisor& (0+255),w,b
 20899  005084  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 20900  005086  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 20901  005088  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 20902  00508A  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 20903  00508C  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 20904  00508E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 20905  005090  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 20906                           
 20907                           ; BSR set to: 0
 20908  005092  8168               	bsf	___lldiv@quotient& (0+255),0,b
 20909  005094                     l2025:
 20910                           
 20911                           ; BSR set to: 0
 20912                           
 20913                           ; BSR set to: 0
 20914  005094  90D8               	bcf	status,0,c
 20915  005096  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 20916  005098  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 20917  00509A  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 20918  00509C  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 20919                           
 20920                           ; BSR set to: 0
 20921  00509E  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 20922  0050A0  D7E1               	goto	u15090
 20923  0050A2                     l2026:
 20924                           
 20925                           ; BSR set to: 0
 20926                           
 20927                           ; BSR set to: 0
 20928  0050A2  C068  F060         	movff	___lldiv@quotient,?___lldiv
 20929  0050A6  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 20930  0050AA  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 20931  0050AE  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 20932                           
 20933                           ; BSR set to: 0
 20934  0050B2  0012               	return		;funcret
 20935  0050B4                     __end_of___lldiv:
 20936                           	opt stack 0
 20937                           tosu	equ	0xFFF
 20938                           tosh	equ	0xFFE
 20939                           tosl	equ	0xFFD
 20940                           pclath	equ	0xFFA
 20941                           tblptru	equ	0xFF8
 20942                           tblptrh	equ	0xFF7
 20943                           tblptrl	equ	0xFF6
 20944                           tablat	equ	0xFF5
 20945                           prodh	equ	0xFF4
 20946                           prodl	equ	0xFF3
 20947                           intcon	equ	0xFF2
 20948                           intcon2	equ	0xFF1
 20949                           intcon3	equ	0xFF0
 20950                           indf0	equ	0xFEF
 20951                           postinc0	equ	0xFEE
 20952                           fsr0h	equ	0xFEA
 20953                           fsr0l	equ	0xFE9
 20954                           wreg	equ	0xFE8
 20955                           indf1	equ	0xFE7
 20956                           postinc1	equ	0xFE6
 20957                           postdec1	equ	0xFE5
 20958                           plusw1	equ	0xFE3
 20959                           fsr1h	equ	0xFE2
 20960                           fsr1l	equ	0xFE1
 20961                           indf2	equ	0xFDF
 20962                           postinc2	equ	0xFDE
 20963                           postdec2	equ	0xFDD
 20964                           plusw2	equ	0xFDB
 20965                           fsr2h	equ	0xFDA
 20966                           fsr2l	equ	0xFD9
 20967                           status	equ	0xFD8
 20968                           
 20969 ;; *************** function _f_close *****************
 20970 ;; Defined at:
 20971 ;;		line 1116 in file "bibliotecas/tff.c"
 20972 ;; Parameters:    Size  Location     Type
 20973 ;;  fp              2   75[BANK0 ] PTR struct _FIL
 20974 ;;		 -> fil(28), 
 20975 ;; Auto vars:     Size  Location     Type
 20976 ;;  res             1   77[BANK0 ] enum E155
 20977 ;; Return value:  Size  Location     Type
 20978 ;;                  1    wreg      enum E3979
 20979 ;; Registers used:
 20980 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20981 ;; Tracked objects:
 20982 ;;		On entry : 0/0
 20983 ;;		On exit  : 0/0
 20984 ;;		Unchanged: 0/0
 20985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20986 ;;      Params:         0       2       0       0       0       0       0       0       0
 20987 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20988 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20989 ;;      Totals:         0       3       0       0       0       0       0       0       0
 20990 ;;Total ram usage:        3 bytes
 20991 ;; Hardware stack levels used:    1
 20992 ;; Hardware stack levels required when called:   11
 20993 ;; This function calls:
 20994 ;;		_f_sync
 20995 ;; This function is called by:
 20996 ;;		_escrita_sdcard
 20997 ;;		_sdcard_init
 20998 ;;		_leitura_sdcard
 20999 ;; This function uses a non-reentrant model
 21000 ;;
 21001                           
 21002                           	psect	text80
 21003  005CEE                     __ptext80:
 21004                           	opt stack 0
 21005  005CEE                     _f_close:
 21006                           	opt stack 15
 21007                           
 21008                           ;tff.c: 1120: FRESULT res;
 21009                           ;tff.c: 1124: res = f_sync(fp);
 21010                           
 21011                           ; BSR set to: 0
 21012                           ;incstack = 0
 21013  005CEE  C0AB  F0A2         	movff	f_close@fp,f_sync@fp
 21014  005CF2  C0AC  F0A3         	movff	f_close@fp+1,f_sync@fp+1
 21015  005CF6  EC40  F01F         	call	_f_sync	;wreg free
 21016  005CFA  0100               	movlb	0	; () banked
 21017  005CFC  6FAD               	movwf	f_close@res& (0+255),b
 21018                           
 21019                           ; BSR set to: 0
 21020                           ;tff.c: 1128: if (res == FR_OK) fp->fs = (0);
 21021  005CFE  51AD               	movf	f_close@res& (0+255),w,b
 21022  005D00  A4D8               	btfss	status,2,c
 21023  005D02  0012               	return	
 21024                           
 21025                           ; BSR set to: 0
 21026  005D04  EE20 F004          	lfsr	2,4
 21027  005D08  51AB               	movf	f_close@fp& (0+255),w,b
 21028  005D0A  26D9               	addwf	fsr2l,f,c
 21029  005D0C  51AC               	movf	(f_close@fp+1)& (0+255),w,b
 21030  005D0E  22DA               	addwfc	fsr2h,f,c
 21031  005D10  0E00               	movlw	0
 21032  005D12  6EDE               	movwf	postinc2,c
 21033  005D14  0E00               	movlw	0
 21034  005D16  6EDD               	movwf	postdec2,c
 21035                           
 21036                           ; BSR set to: 0
 21037  005D18  0012               	return	
 21038  005D1A                     __end_of_f_close:
 21039                           	opt stack 0
 21040                           tosu	equ	0xFFF
 21041                           tosh	equ	0xFFE
 21042                           tosl	equ	0xFFD
 21043                           pclath	equ	0xFFA
 21044                           tblptru	equ	0xFF8
 21045                           tblptrh	equ	0xFF7
 21046                           tblptrl	equ	0xFF6
 21047                           tablat	equ	0xFF5
 21048                           prodh	equ	0xFF4
 21049                           prodl	equ	0xFF3
 21050                           intcon	equ	0xFF2
 21051                           intcon2	equ	0xFF1
 21052                           intcon3	equ	0xFF0
 21053                           indf0	equ	0xFEF
 21054                           postinc0	equ	0xFEE
 21055                           fsr0h	equ	0xFEA
 21056                           fsr0l	equ	0xFE9
 21057                           wreg	equ	0xFE8
 21058                           indf1	equ	0xFE7
 21059                           postinc1	equ	0xFE6
 21060                           postdec1	equ	0xFE5
 21061                           plusw1	equ	0xFE3
 21062                           fsr1h	equ	0xFE2
 21063                           fsr1l	equ	0xFE1
 21064                           indf2	equ	0xFDF
 21065                           postinc2	equ	0xFDE
 21066                           postdec2	equ	0xFDD
 21067                           plusw2	equ	0xFDB
 21068                           fsr2h	equ	0xFDA
 21069                           fsr2l	equ	0xFD9
 21070                           status	equ	0xFD8
 21071                           
 21072 ;; *************** function _f_sync *****************
 21073 ;; Defined at:
 21074 ;;		line 1077 in file "bibliotecas/tff.c"
 21075 ;; Parameters:    Size  Location     Type
 21076 ;;  fp              2   66[BANK0 ] PTR struct _FIL
 21077 ;;		 -> fil(28), 
 21078 ;; Auto vars:     Size  Location     Type
 21079 ;;  tim             4   68[BANK0 ] unsigned long 
 21080 ;;  dir             2   73[BANK0 ] PTR unsigned char 
 21081 ;;		 -> NULL(0), fs(544), 
 21082 ;;  res             1   72[BANK0 ] enum E155
 21083 ;; Return value:  Size  Location     Type
 21084 ;;                  1    wreg      enum E155
 21085 ;; Registers used:
 21086 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21087 ;; Tracked objects:
 21088 ;;		On entry : 0/0
 21089 ;;		On exit  : 0/0
 21090 ;;		Unchanged: 0/0
 21091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21092 ;;      Params:         0       2       0       0       0       0       0       0       0
 21093 ;;      Locals:         0       7       0       0       0       0       0       0       0
 21094 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21095 ;;      Totals:         0       9       0       0       0       0       0       0       0
 21096 ;;Total ram usage:        9 bytes
 21097 ;; Hardware stack levels used:    1
 21098 ;; Hardware stack levels required when called:   10
 21099 ;; This function calls:
 21100 ;;		_get_fattime
 21101 ;;		_move_window
 21102 ;;		_sync
 21103 ;;		_validate
 21104 ;; This function is called by:
 21105 ;;		_f_close
 21106 ;; This function uses a non-reentrant model
 21107 ;;
 21108                           
 21109                           	psect	text81
 21110  003E80                     __ptext81:
 21111                           	opt stack 0
 21112  003E80                     _f_sync:
 21113                           	opt stack 15
 21114                           
 21115                           ;tff.c: 1081: FRESULT res;
 21116                           ;tff.c: 1082: DWORD tim;
 21117                           ;tff.c: 1083: BYTE *dir;
 21118                           ;tff.c: 1086: res = validate(fp->fs, fp->id);
 21119                           
 21120                           ; BSR set to: 0
 21121                           ;incstack = 0
 21122  003E80  0100               	movlb	0	; () banked
 21123  003E82  EE20 F004          	lfsr	2,4
 21124  003E86  51A2               	movf	f_sync@fp& (0+255),w,b
 21125  003E88  26D9               	addwf	fsr2l,f,c
 21126  003E8A  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 21127  003E8C  22DA               	addwfc	fsr2h,f,c
 21128  003E8E  CFDE F067          	movff	postinc2,validate@fs
 21129  003E92  CFDD F068          	movff	postdec2,validate@fs+1
 21130  003E96  C0A2  FFD9         	movff	f_sync@fp,fsr2l
 21131  003E9A  C0A3  FFDA         	movff	f_sync@fp+1,fsr2h
 21132  003E9E  CFDE F069          	movff	postinc2,validate@id
 21133  003EA2  CFDD F06A          	movff	postdec2,validate@id+1
 21134  003EA6  EC08  F02C         	call	_validate	;wreg free
 21135  003EAA  0100               	movlb	0	; () banked
 21136  003EAC  6FA8               	movwf	f_sync@res& (0+255),b
 21137                           
 21138                           ; BSR set to: 0
 21139                           ;tff.c: 1087: if (res == FR_OK) {
 21140  003EAE  51A8               	movf	f_sync@res& (0+255),w,b
 21141  003EB0  A4D8               	btfss	status,2,c
 21142  003EB2  D079               	goto	l1098
 21143                           
 21144                           ; BSR set to: 0
 21145                           ;tff.c: 1088: if (fp->flag & 0x20) {
 21146  003EB4  EE20 F002          	lfsr	2,2
 21147  003EB8  51A2               	movf	f_sync@fp& (0+255),w,b
 21148  003EBA  26D9               	addwf	fsr2l,f,c
 21149  003EBC  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 21150  003EBE  22DA               	addwfc	fsr2h,f,c
 21151  003EC0  AADF               	btfss	indf2,5,c
 21152  003EC2  D071               	goto	l1098
 21153                           
 21154                           ; BSR set to: 0
 21155                           ;tff.c: 1090: if (!move_window(fp->dir_sect))
 21156  003EC4  EE20 F016          	lfsr	2,22
 21157  003EC8  51A2               	movf	f_sync@fp& (0+255),w,b
 21158  003ECA  26D9               	addwf	fsr2l,f,c
 21159  003ECC  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 21160  003ECE  22DA               	addwfc	fsr2h,f,c
 21161  003ED0  CFDE F08B          	movff	postinc2,move_window@sector
 21162  003ED4  CFDE F08C          	movff	postinc2,move_window@sector+1
 21163  003ED8  CFDE F08D          	movff	postinc2,move_window@sector+2
 21164  003EDC  CFDE F08E          	movff	postinc2,move_window@sector+3
 21165  003EE0  EC27  F018         	call	_move_window	;wreg free
 21166  003EE4  0900               	iorlw	0
 21167  003EE6  A4D8               	btfss	status,2,c
 21168  003EE8  D002               	goto	l1099
 21169                           
 21170                           ;tff.c: 1091: return FR_RW_ERROR;
 21171  003EEA  0E08               	movlw	8
 21172  003EEC  0012               	return	
 21173  003EEE                     l1099:
 21174                           
 21175                           ;tff.c: 1092: dir = fp->dir_ptr;
 21176  003EEE  0100               	movlb	0	; () banked
 21177  003EF0  EE20 F01A          	lfsr	2,26
 21178  003EF4  51A2               	movf	f_sync@fp& (0+255),w,b
 21179  003EF6  26D9               	addwf	fsr2l,f,c
 21180  003EF8  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 21181  003EFA  22DA               	addwfc	fsr2h,f,c
 21182  003EFC  CFDE F0A9          	movff	postinc2,f_sync@dir
 21183  003F00  CFDD F0AA          	movff	postdec2,f_sync@dir+1
 21184                           
 21185                           ;tff.c: 1093: dir[11] |= 0x20;
 21186  003F04  EE20 F00B          	lfsr	2,11
 21187  003F08  51A9               	movf	f_sync@dir& (0+255),w,b
 21188  003F0A  26D9               	addwf	fsr2l,f,c
 21189  003F0C  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 21190  003F0E  22DA               	addwfc	fsr2h,f,c
 21191  003F10  0E00               	movlw	0
 21192  003F12  8ADB               	bsf	plusw2,5,c
 21193                           
 21194                           ; BSR set to: 0
 21195                           ;tff.c: 1094: *(DWORD*)(BYTE*)(&dir[28])=(DWORD)(fp->fsize);
 21196  003F14  EE20 F00A          	lfsr	2,10
 21197  003F18  51A2               	movf	f_sync@fp& (0+255),w,b
 21198  003F1A  26D9               	addwf	fsr2l,f,c
 21199  003F1C  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 21200  003F1E  22DA               	addwfc	fsr2h,f,c
 21201  003F20  EE10 F01C          	lfsr	1,28
 21202  003F24  51A9               	movf	f_sync@dir& (0+255),w,b
 21203  003F26  26E1               	addwf	fsr1l,f,c
 21204  003F28  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 21205  003F2A  22E2               	addwfc	fsr1h,f,c
 21206  003F2C  CFDE FFE6          	movff	postinc2,postinc1
 21207  003F30  CFDE FFE6          	movff	postinc2,postinc1
 21208  003F34  CFDE FFE6          	movff	postinc2,postinc1
 21209  003F38  CFDE FFE6          	movff	postinc2,postinc1
 21210                           
 21211                           ; BSR set to: 0
 21212                           ;tff.c: 1095: *(WORD*)(BYTE*)(&dir[26])=(WORD)(fp->org_clust);
 21213  003F3C  EE20 F00E          	lfsr	2,14
 21214  003F40  51A2               	movf	f_sync@fp& (0+255),w,b
 21215  003F42  26D9               	addwf	fsr2l,f,c
 21216  003F44  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 21217  003F46  22DA               	addwfc	fsr2h,f,c
 21218  003F48  EE10 F01A          	lfsr	1,26
 21219  003F4C  51A9               	movf	f_sync@dir& (0+255),w,b
 21220  003F4E  26E1               	addwf	fsr1l,f,c
 21221  003F50  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 21222  003F52  22E2               	addwfc	fsr1h,f,c
 21223  003F54  CFDE FFE6          	movff	postinc2,postinc1
 21224  003F58  CFDD FFE5          	movff	postdec2,postdec1
 21225                           
 21226                           ; BSR set to: 0
 21227                           ;tff.c: 1099: tim = get_fattime();
 21228  003F5C  EC56  F01D         	call	_get_fattime	;wreg free
 21229  003F60  C06A  F0A4         	movff	?_get_fattime,f_sync@tim
 21230  003F64  C06B  F0A5         	movff	?_get_fattime+1,f_sync@tim+1
 21231  003F68  C06C  F0A6         	movff	?_get_fattime+2,f_sync@tim+2
 21232  003F6C  C06D  F0A7         	movff	?_get_fattime+3,f_sync@tim+3
 21233                           
 21234                           ;tff.c: 1100: *(DWORD*)(BYTE*)(&dir[22])=(DWORD)(tim);
 21235  003F70  0100               	movlb	0	; () banked
 21236  003F72  EE20 F016          	lfsr	2,22
 21237  003F76  51A9               	movf	f_sync@dir& (0+255),w,b
 21238  003F78  26D9               	addwf	fsr2l,f,c
 21239  003F7A  51AA               	movf	(f_sync@dir+1)& (0+255),w,b
 21240  003F7C  22DA               	addwfc	fsr2h,f,c
 21241  003F7E  C0A4  FFDE         	movff	f_sync@tim,postinc2
 21242  003F82  C0A5  FFDE         	movff	f_sync@tim+1,postinc2
 21243  003F86  C0A6  FFDE         	movff	f_sync@tim+2,postinc2
 21244  003F8A  C0A7  FFDE         	movff	f_sync@tim+3,postinc2
 21245                           
 21246                           ; BSR set to: 0
 21247                           ;tff.c: 1101: fp->flag &= (BYTE)~0x20;
 21248  003F8E  EE20 F002          	lfsr	2,2
 21249  003F92  51A2               	movf	f_sync@fp& (0+255),w,b
 21250  003F94  26D9               	addwf	fsr2l,f,c
 21251  003F96  51A3               	movf	(f_sync@fp+1)& (0+255),w,b
 21252  003F98  22DA               	addwfc	fsr2h,f,c
 21253  003F9A  0EDF               	movlw	223
 21254  003F9C  16DF               	andwf	indf2,f,c
 21255                           
 21256                           ; BSR set to: 0
 21257                           ;tff.c: 1102: res = sync();
 21258  003F9E  EC90  F02A         	call	_sync	;wreg free
 21259  003FA2  0100               	movlb	0	; () banked
 21260  003FA4  6FA8               	movwf	f_sync@res& (0+255),b
 21261  003FA6                     l1098:
 21262                           
 21263                           ; BSR set to: 0
 21264                           ;tff.c: 1103: }
 21265                           ;tff.c: 1104: }
 21266                           ;tff.c: 1105: return res;
 21267                           
 21268                           ; BSR set to: 0
 21269                           
 21270                           ; BSR set to: 0
 21271  003FA6  51A8               	movf	f_sync@res& (0+255),w,b
 21272  003FA8  0012               	return	
 21273  003FAA                     __end_of_f_sync:
 21274                           	opt stack 0
 21275                           tosu	equ	0xFFF
 21276                           tosh	equ	0xFFE
 21277                           tosl	equ	0xFFD
 21278                           pclath	equ	0xFFA
 21279                           tblptru	equ	0xFF8
 21280                           tblptrh	equ	0xFF7
 21281                           tblptrl	equ	0xFF6
 21282                           tablat	equ	0xFF5
 21283                           prodh	equ	0xFF4
 21284                           prodl	equ	0xFF3
 21285                           intcon	equ	0xFF2
 21286                           intcon2	equ	0xFF1
 21287                           intcon3	equ	0xFF0
 21288                           indf0	equ	0xFEF
 21289                           postinc0	equ	0xFEE
 21290                           fsr0h	equ	0xFEA
 21291                           fsr0l	equ	0xFE9
 21292                           wreg	equ	0xFE8
 21293                           indf1	equ	0xFE7
 21294                           postinc1	equ	0xFE6
 21295                           postdec1	equ	0xFE5
 21296                           plusw1	equ	0xFE3
 21297                           fsr1h	equ	0xFE2
 21298                           fsr1l	equ	0xFE1
 21299                           indf2	equ	0xFDF
 21300                           postinc2	equ	0xFDE
 21301                           postdec2	equ	0xFDD
 21302                           plusw2	equ	0xFDB
 21303                           fsr2h	equ	0xFDA
 21304                           fsr2l	equ	0xFD9
 21305                           status	equ	0xFD8
 21306                           
 21307 ;; *************** function _validate *****************
 21308 ;; Defined at:
 21309 ;;		line 767 in file "bibliotecas/tff.c"
 21310 ;; Parameters:    Size  Location     Type
 21311 ;;  fs              2    7[BANK0 ] PTR const struct _FATFS
 21312 ;;		 -> NULL(0), fs(544), 
 21313 ;;  id              2    9[BANK0 ] unsigned short 
 21314 ;; Auto vars:     Size  Location     Type
 21315 ;;		None
 21316 ;; Return value:  Size  Location     Type
 21317 ;;                  1    wreg      enum E155
 21318 ;; Registers used:
 21319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21320 ;; Tracked objects:
 21321 ;;		On entry : 0/0
 21322 ;;		On exit  : 0/0
 21323 ;;		Unchanged: 0/0
 21324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21325 ;;      Params:         0       4       0       0       0       0       0       0       0
 21326 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21327 ;;      Temps:          0       2       0       0       0       0       0       0       0
 21328 ;;      Totals:         0       6       0       0       0       0       0       0       0
 21329 ;;Total ram usage:        6 bytes
 21330 ;; Hardware stack levels used:    1
 21331 ;; Hardware stack levels required when called:    5
 21332 ;; This function calls:
 21333 ;;		_disk_status
 21334 ;; This function is called by:
 21335 ;;		_f_write
 21336 ;;		_f_sync
 21337 ;;		_f_lseek
 21338 ;;		_f_read
 21339 ;;		_f_readdir
 21340 ;; This function uses a non-reentrant model
 21341 ;;
 21342                           
 21343                           	psect	text82
 21344  005810                     __ptext82:
 21345                           	opt stack 0
 21346  005810                     _validate:
 21347                           	opt stack 17
 21348                           
 21349                           ;tff.c: 772: if (!fs || !fs->fs_type || fs->id != id)
 21350                           
 21351                           ;incstack = 0
 21352  005810  0100               	movlb	0	; () banked
 21353  005812  5167               	movf	validate@fs& (0+255),w,b
 21354  005814  1168               	iorwf	(validate@fs+1)& (0+255),w,b
 21355  005816  B4D8               	btfsc	status,2,c
 21356  005818  D014               	goto	u13850
 21357                           
 21358                           ; BSR set to: 0
 21359  00581A  EE20 F01C          	lfsr	2,28
 21360  00581E  5167               	movf	validate@fs& (0+255),w,b
 21361  005820  26D9               	addwf	fsr2l,f,c
 21362  005822  5168               	movf	(validate@fs+1)& (0+255),w,b
 21363  005824  22DA               	addwfc	fsr2h,f,c
 21364  005826  50DF               	movf	indf2,w,c
 21365  005828  B4D8               	btfsc	status,2,c
 21366  00582A  D00B               	goto	u13850
 21367                           
 21368                           ; BSR set to: 0
 21369  00582C  C067  FFD9         	movff	validate@fs,fsr2l
 21370  005830  C068  FFDA         	movff	validate@fs+1,fsr2h
 21371  005834  5169               	movf	validate@id& (0+255),w,b
 21372  005836  18DE               	xorwf	postinc2,w,c
 21373  005838  E104               	bnz	l11140
 21374  00583A  516A               	movf	(validate@id+1)& (0+255),w,b
 21375  00583C  18DE               	xorwf	postinc2,w,c
 21376  00583E  B4D8               	btfsc	status,2,c
 21377  005840  D002               	goto	l1002
 21378  005842                     u13850:
 21379  005842                     l11140:
 21380                           
 21381                           ; BSR set to: 0
 21382                           ;tff.c: 773: return FR_INVALID_OBJECT;
 21383  005842  0E0C               	movlw	12
 21384                           
 21385                           ; BSR set to: 0
 21386  005844  0012               	return	
 21387  005846                     l1002:
 21388                           
 21389                           ; BSR set to: 0
 21390                           ;tff.c: 774: if (disk_status(0) & 0x01)
 21391                           
 21392                           ; BSR set to: 0
 21393  005846  0E00               	movlw	0
 21394  005848  EC9A  F02C         	call	_disk_status
 21395  00584C  0100               	movlb	0	; () banked
 21396  00584E  6F6B               	movwf	??_validate& (0+255),b
 21397  005850  A16B               	btfss	??_validate& (0+255),0,b
 21398  005852  D002               	goto	l1006
 21399                           
 21400                           ; BSR set to: 0
 21401                           ;tff.c: 775: return FR_NOT_READY;
 21402  005854  0E01               	movlw	1
 21403                           
 21404                           ; BSR set to: 0
 21405  005856  0012               	return	
 21406  005858                     l1006:
 21407                           
 21408                           ; BSR set to: 0
 21409                           ;tff.c: 777: return FR_OK;
 21410                           
 21411                           ; BSR set to: 0
 21412  005858  0E00               	movlw	0
 21413  00585A  0012               	return	
 21414  00585C                     __end_of_validate:
 21415                           	opt stack 0
 21416                           tosu	equ	0xFFF
 21417                           tosh	equ	0xFFE
 21418                           tosl	equ	0xFFD
 21419                           pclath	equ	0xFFA
 21420                           tblptru	equ	0xFF8
 21421                           tblptrh	equ	0xFF7
 21422                           tblptrl	equ	0xFF6
 21423                           tablat	equ	0xFF5
 21424                           prodh	equ	0xFF4
 21425                           prodl	equ	0xFF3
 21426                           intcon	equ	0xFF2
 21427                           intcon2	equ	0xFF1
 21428                           intcon3	equ	0xFF0
 21429                           indf0	equ	0xFEF
 21430                           postinc0	equ	0xFEE
 21431                           fsr0h	equ	0xFEA
 21432                           fsr0l	equ	0xFE9
 21433                           wreg	equ	0xFE8
 21434                           indf1	equ	0xFE7
 21435                           postinc1	equ	0xFE6
 21436                           postdec1	equ	0xFE5
 21437                           plusw1	equ	0xFE3
 21438                           fsr1h	equ	0xFE2
 21439                           fsr1l	equ	0xFE1
 21440                           indf2	equ	0xFDF
 21441                           postinc2	equ	0xFDE
 21442                           postdec2	equ	0xFDD
 21443                           plusw2	equ	0xFDB
 21444                           fsr2h	equ	0xFDA
 21445                           fsr2l	equ	0xFD9
 21446                           status	equ	0xFD8
 21447                           
 21448 ;; *************** function _disk_status *****************
 21449 ;; Defined at:
 21450 ;;		line 27 in file "bibliotecas/diskio.c"
 21451 ;; Parameters:    Size  Location     Type
 21452 ;;  pdrv            1    wreg     unsigned char 
 21453 ;; Auto vars:     Size  Location     Type
 21454 ;;  pdrv            1    5[BANK0 ] unsigned char 
 21455 ;;  result          2    3[BANK0 ] int 
 21456 ;;  stat            1    6[BANK0 ] unsigned char 
 21457 ;; Return value:  Size  Location     Type
 21458 ;;                  1    wreg      unsigned char 
 21459 ;; Registers used:
 21460 ;;		wreg, status,2, status,0, cstack
 21461 ;; Tracked objects:
 21462 ;;		On entry : 0/0
 21463 ;;		On exit  : 0/0
 21464 ;;		Unchanged: 0/0
 21465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21466 ;;      Params:         0       0       0       0       0       0       0       0       0
 21467 ;;      Locals:         0       4       0       0       0       0       0       0       0
 21468 ;;      Temps:          0       1       0       0       0       0       0       0       0
 21469 ;;      Totals:         0       5       0       0       0       0       0       0       0
 21470 ;;Total ram usage:        5 bytes
 21471 ;; Hardware stack levels used:    1
 21472 ;; Hardware stack levels required when called:    4
 21473 ;; This function calls:
 21474 ;;		_sdc_disk_status
 21475 ;; This function is called by:
 21476 ;;		_auto_mount
 21477 ;;		_validate
 21478 ;; This function uses a non-reentrant model
 21479 ;;
 21480                           
 21481                           	psect	text83
 21482  005934                     __ptext83:
 21483                           	opt stack 0
 21484  005934                     _disk_status:
 21485                           	opt stack 17
 21486                           
 21487                           ; BSR set to: 0
 21488                           ;incstack = 0
 21489                           ;disk_status@pdrv stored from wreg
 21490  005934  0100               	movlb	0	; () banked
 21491  005936  6F65               	movwf	disk_status@pdrv& (0+255),b
 21492                           
 21493                           ;diskio.c: 31: DSTATUS stat;
 21494                           ;diskio.c: 32: int result;
 21495                           ;diskio.c: 34: switch (pdrv) {
 21496  005938  D014               	goto	l35
 21497  00593A                     
 21498                           ;diskio.c: 36: stat = sdc_disk_status(pdrv);
 21499  00593A  0100               	movlb	0	; () banked
 21500  00593C  5165               	movf	disk_status@pdrv& (0+255),w,b
 21501  00593E  EC63  F02F         	call	_sdc_disk_status
 21502  005942  0100               	movlb	0	; () banked
 21503  005944  6F66               	movwf	disk_status@stat& (0+255),b
 21504                           
 21505                           ; BSR set to: 0
 21506                           ;diskio.c: 39: return stat;
 21507  005946  5166               	movf	disk_status@stat& (0+255),w,b
 21508                           
 21509                           ; BSR set to: 0
 21510  005948  0012               	return	
 21511  00594A                     
 21512                           ; BSR set to: 0
 21513                           ;diskio.c: 42: result = sdc_disk_status(pdrv);
 21514                           
 21515                           ; BSR set to: 0
 21516  00594A  5165               	movf	disk_status@pdrv& (0+255),w,b
 21517  00594C  EC63  F02F         	call	_sdc_disk_status
 21518  005950  0100               	movlb	0	; () banked
 21519  005952  6F62               	movwf	??_disk_status& (0+255),b
 21520  005954  5162               	movf	??_disk_status& (0+255),w,b
 21521  005956  6F63               	movwf	disk_status@result& (0+255),b
 21522  005958  6B64               	clrf	(disk_status@result+1)& (0+255),b
 21523                           
 21524                           ; BSR set to: 0
 21525                           ;diskio.c: 44: return stat;
 21526  00595A  5166               	movf	disk_status@stat& (0+255),w,b
 21527                           
 21528                           ; BSR set to: 0
 21529  00595C  0012               	return	
 21530  00595E                     
 21531                           ; BSR set to: 0
 21532                           ;diskio.c: 48: return stat;
 21533                           
 21534                           ; BSR set to: 0
 21535  00595E  5166               	movf	disk_status@stat& (0+255),w,b
 21536                           
 21537                           ; BSR set to: 0
 21538  005960  0012               	return	
 21539  005962                     l35:
 21540                           
 21541                           ; BSR set to: 0
 21542  005962  0100               	movlb	0	; () banked
 21543  005964  5165               	movf	disk_status@pdrv& (0+255),w,b
 21544                           
 21545                           ; Switch size 1, requested type "space"
 21546                           ; Number of cases is 3, Range of values is 0 to 2
 21547                           ; switch strategies available:
 21548                           ; Name         Instructions Cycles
 21549                           ; simple_byte           10     6 (average)
 21550                           ;	Chosen strategy is simple_byte
 21551  005966  0A00               	xorlw	0	; case 0
 21552  005968  B4D8               	btfsc	status,2,c
 21553  00596A  D7E7               	goto	l36
 21554  00596C  0A01               	xorlw	1	; case 1
 21555  00596E  B4D8               	btfsc	status,2,c
 21556  005970  D7EC               	goto	l38
 21557  005972  0A03               	xorlw	3	; case 2
 21558  005974  B4D8               	btfsc	status,2,c
 21559  005976  D7F3               	goto	l39
 21560                           
 21561                           ; BSR set to: 0
 21562                           ;diskio.c: 50: return 0x01;
 21563                           
 21564                           ; BSR set to: 0
 21565  005978  0E01               	movlw	1
 21566  00597A  0012               	return	
 21567  00597C                     __end_of_disk_status:
 21568                           	opt stack 0
 21569                           tosu	equ	0xFFF
 21570                           tosh	equ	0xFFE
 21571                           tosl	equ	0xFFD
 21572                           pclath	equ	0xFFA
 21573                           tblptru	equ	0xFF8
 21574                           tblptrh	equ	0xFF7
 21575                           tblptrl	equ	0xFF6
 21576                           tablat	equ	0xFF5
 21577                           prodh	equ	0xFF4
 21578                           prodl	equ	0xFF3
 21579                           intcon	equ	0xFF2
 21580                           intcon2	equ	0xFF1
 21581                           intcon3	equ	0xFF0
 21582                           indf0	equ	0xFEF
 21583                           postinc0	equ	0xFEE
 21584                           fsr0h	equ	0xFEA
 21585                           fsr0l	equ	0xFE9
 21586                           wreg	equ	0xFE8
 21587                           indf1	equ	0xFE7
 21588                           postinc1	equ	0xFE6
 21589                           postdec1	equ	0xFE5
 21590                           plusw1	equ	0xFE3
 21591                           fsr1h	equ	0xFE2
 21592                           fsr1l	equ	0xFE1
 21593                           indf2	equ	0xFDF
 21594                           postinc2	equ	0xFDE
 21595                           postdec2	equ	0xFDD
 21596                           plusw2	equ	0xFDB
 21597                           fsr2h	equ	0xFDA
 21598                           fsr2l	equ	0xFD9
 21599                           status	equ	0xFD8
 21600                           
 21601 ;; *************** function _sdc_disk_status *****************
 21602 ;; Defined at:
 21603 ;;		line 588 in file "bibliotecas/diskio.c"
 21604 ;; Parameters:    Size  Location     Type
 21605 ;;  pdrv            1    wreg     unsigned char 
 21606 ;; Auto vars:     Size  Location     Type
 21607 ;;  pdrv            1    1[BANK0 ] unsigned char 
 21608 ;;  stat            1    0[BANK0 ] unsigned char 
 21609 ;;  cont            1    0        unsigned char 
 21610 ;;  buff            1    0        unsigned char 
 21611 ;; Return value:  Size  Location     Type
 21612 ;;                  1    wreg      unsigned char 
 21613 ;; Registers used:
 21614 ;;		wreg, status,2
 21615 ;; Tracked objects:
 21616 ;;		On entry : 0/0
 21617 ;;		On exit  : 0/0
 21618 ;;		Unchanged: 0/0
 21619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21620 ;;      Params:         0       0       0       0       0       0       0       0       0
 21621 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21622 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21623 ;;      Totals:         0       2       0       0       0       0       0       0       0
 21624 ;;Total ram usage:        2 bytes
 21625 ;; Hardware stack levels used:    1
 21626 ;; Hardware stack levels required when called:    3
 21627 ;; This function calls:
 21628 ;;		Nothing
 21629 ;; This function is called by:
 21630 ;;		_disk_status
 21631 ;; This function uses a non-reentrant model
 21632 ;;
 21633                           
 21634                           	psect	text84
 21635  005EC6                     __ptext84:
 21636                           	opt stack 0
 21637  005EC6                     _sdc_disk_status:
 21638                           	opt stack 17
 21639                           
 21640                           ; BSR set to: 0
 21641                           ;incstack = 0
 21642                           ;sdc_disk_status@pdrv stored from wreg
 21643  005EC6  0100               	movlb	0	; () banked
 21644  005EC8  6F61               	movwf	sdc_disk_status@pdrv& (0+255),b
 21645                           
 21646                           ;diskio.c: 590: DSTATUS stat = 0;
 21647  005ECA  0E00               	movlw	0
 21648  005ECC  0100               	movlb	0	; () banked
 21649  005ECE  6F60               	movwf	sdc_disk_status@stat& (0+255),b
 21650                           
 21651                           ; BSR set to: 0
 21652                           ;diskio.c: 591: unsigned char buff, cont;
 21653                           ;diskio.c: 593: if (pdrv != 0) return 0x01;
 21654  005ED0  5161               	movf	sdc_disk_status@pdrv& (0+255),w,b
 21655  005ED2  B4D8               	btfsc	status,2,c
 21656  005ED4  D002               	goto	l161
 21657                           
 21658                           ; BSR set to: 0
 21659  005ED6  0E01               	movlw	1
 21660                           
 21661                           ; BSR set to: 0
 21662  005ED8  0012               	return	
 21663  005EDA                     l161:
 21664                           
 21665                           ; BSR set to: 0
 21666                           ;diskio.c: 595: return FR_OK;
 21667                           
 21668                           ; BSR set to: 0
 21669  005EDA  0E00               	movlw	0
 21670  005EDC  0012               	return	
 21671  005EDE                     __end_of_sdc_disk_status:
 21672                           	opt stack 0
 21673                           tosu	equ	0xFFF
 21674                           tosh	equ	0xFFE
 21675                           tosl	equ	0xFFD
 21676                           pclath	equ	0xFFA
 21677                           tblptru	equ	0xFF8
 21678                           tblptrh	equ	0xFF7
 21679                           tblptrl	equ	0xFF6
 21680                           tablat	equ	0xFF5
 21681                           prodh	equ	0xFF4
 21682                           prodl	equ	0xFF3
 21683                           intcon	equ	0xFF2
 21684                           intcon2	equ	0xFF1
 21685                           intcon3	equ	0xFF0
 21686                           indf0	equ	0xFEF
 21687                           postinc0	equ	0xFEE
 21688                           fsr0h	equ	0xFEA
 21689                           fsr0l	equ	0xFE9
 21690                           wreg	equ	0xFE8
 21691                           indf1	equ	0xFE7
 21692                           postinc1	equ	0xFE6
 21693                           postdec1	equ	0xFE5
 21694                           plusw1	equ	0xFE3
 21695                           fsr1h	equ	0xFE2
 21696                           fsr1l	equ	0xFE1
 21697                           indf2	equ	0xFDF
 21698                           postinc2	equ	0xFDE
 21699                           postdec2	equ	0xFDD
 21700                           plusw2	equ	0xFDB
 21701                           fsr2h	equ	0xFDA
 21702                           fsr2l	equ	0xFD9
 21703                           status	equ	0xFD8
 21704                           
 21705 ;; *************** function _sync *****************
 21706 ;; Defined at:
 21707 ;;		line 119 in file "bibliotecas/tff.c"
 21708 ;; Parameters:    Size  Location     Type
 21709 ;;		None
 21710 ;; Auto vars:     Size  Location     Type
 21711 ;;  fs              2   64[BANK0 ] PTR struct _FATFS
 21712 ;;		 -> NULL(0), fs(544), 
 21713 ;; Return value:  Size  Location     Type
 21714 ;;                  1    wreg      enum E155
 21715 ;; Registers used:
 21716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21717 ;; Tracked objects:
 21718 ;;		On entry : 0/0
 21719 ;;		On exit  : 0/0
 21720 ;;		Unchanged: 0/0
 21721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21722 ;;      Params:         0       0       0       0       0       0       0       0       0
 21723 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21724 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21725 ;;      Totals:         0       2       0       0       0       0       0       0       0
 21726 ;;Total ram usage:        2 bytes
 21727 ;; Hardware stack levels used:    1
 21728 ;; Hardware stack levels required when called:    9
 21729 ;; This function calls:
 21730 ;;		_disk_ioctl
 21731 ;;		_move_window
 21732 ;; This function is called by:
 21733 ;;		_f_sync
 21734 ;; This function uses a non-reentrant model
 21735 ;;
 21736                           
 21737                           	psect	text85
 21738  005520                     __ptext85:
 21739                           	opt stack 0
 21740  005520                     _sync:
 21741                           	opt stack 15
 21742                           
 21743                           ;tff.c: 121: FATFS *fs = FatFs;
 21744                           
 21745                           ; BSR set to: 0
 21746                           ;incstack = 0
 21747  005520  C0F6  F0A0         	movff	_FatFs,sync@fs
 21748  005524  C0F7  F0A1         	movff	_FatFs+1,sync@fs+1
 21749                           
 21750                           ;tff.c: 124: fs->winflag = 1;
 21751  005528  0100               	movlb	0	; () banked
 21752  00552A  EE20 F01F          	lfsr	2,31
 21753  00552E  51A0               	movf	sync@fs& (0+255),w,b
 21754  005530  26D9               	addwf	fsr2l,f,c
 21755  005532  51A1               	movf	(sync@fs+1)& (0+255),w,b
 21756  005534  22DA               	addwfc	fsr2h,f,c
 21757  005536  0E01               	movlw	1
 21758  005538  6EDF               	movwf	indf2,c
 21759                           
 21760                           ; BSR set to: 0
 21761                           ;tff.c: 125: if (!move_window(0)) return FR_RW_ERROR;
 21762  00553A  0E00               	movlw	0
 21763  00553C  6F8B               	movwf	move_window@sector& (0+255),b
 21764  00553E  0E00               	movlw	0
 21765  005540  6F8C               	movwf	(move_window@sector+1)& (0+255),b
 21766  005542  0E00               	movlw	0
 21767  005544  6F8D               	movwf	(move_window@sector+2)& (0+255),b
 21768  005546  0E00               	movlw	0
 21769  005548  6F8E               	movwf	(move_window@sector+3)& (0+255),b
 21770  00554A  EC27  F018         	call	_move_window	;wreg free
 21771  00554E  0900               	iorlw	0
 21772  005550  A4D8               	btfss	status,2,c
 21773  005552  D002               	goto	l781
 21774  005554  0E08               	movlw	8
 21775  005556  0012               	return	
 21776  005558                     l781:
 21777                           
 21778                           ;tff.c: 141: if (disk_ioctl(0, 0, (0)) != RES_OK)
 21779  005558  0E00               	movlw	0
 21780  00555A  0100               	movlb	0	; () banked
 21781  00555C  6F60               	movwf	disk_ioctl@cmd& (0+255),b
 21782  00555E  0E00               	movlw	0
 21783  005560  6F61               	movwf	disk_ioctl@buff& (0+255),b
 21784  005562  0E00               	movlw	0
 21785  005564  6F62               	movwf	(disk_ioctl@buff+1)& (0+255),b
 21786  005566  0E00               	movlw	0
 21787  005568  EC8D  F02E         	call	_disk_ioctl
 21788  00556C  0900               	iorlw	0
 21789  00556E  B4D8               	btfsc	status,2,c
 21790  005570  D002               	goto	l783
 21791                           
 21792                           ;tff.c: 142: return FR_RW_ERROR;
 21793  005572  0E08               	movlw	8
 21794  005574  0012               	return	
 21795  005576                     l783:
 21796                           
 21797                           ;tff.c: 143: return FR_OK;
 21798  005576  0E00               	movlw	0
 21799  005578  0012               	return	
 21800  00557A                     __end_of_sync:
 21801                           	opt stack 0
 21802                           tosu	equ	0xFFF
 21803                           tosh	equ	0xFFE
 21804                           tosl	equ	0xFFD
 21805                           pclath	equ	0xFFA
 21806                           tblptru	equ	0xFF8
 21807                           tblptrh	equ	0xFF7
 21808                           tblptrl	equ	0xFF6
 21809                           tablat	equ	0xFF5
 21810                           prodh	equ	0xFF4
 21811                           prodl	equ	0xFF3
 21812                           intcon	equ	0xFF2
 21813                           intcon2	equ	0xFF1
 21814                           intcon3	equ	0xFF0
 21815                           indf0	equ	0xFEF
 21816                           postinc0	equ	0xFEE
 21817                           fsr0h	equ	0xFEA
 21818                           fsr0l	equ	0xFE9
 21819                           wreg	equ	0xFE8
 21820                           indf1	equ	0xFE7
 21821                           postinc1	equ	0xFE6
 21822                           postdec1	equ	0xFE5
 21823                           plusw1	equ	0xFE3
 21824                           fsr1h	equ	0xFE2
 21825                           fsr1l	equ	0xFE1
 21826                           indf2	equ	0xFDF
 21827                           postinc2	equ	0xFDE
 21828                           postdec2	equ	0xFDD
 21829                           plusw2	equ	0xFDB
 21830                           fsr2h	equ	0xFDA
 21831                           fsr2l	equ	0xFD9
 21832                           status	equ	0xFD8
 21833                           
 21834 ;; *************** function _move_window *****************
 21835 ;; Defined at:
 21836 ;;		line 77 in file "bibliotecas/tff.c"
 21837 ;; Parameters:    Size  Location     Type
 21838 ;;  sector          4   43[BANK0 ] unsigned long 
 21839 ;; Auto vars:     Size  Location     Type
 21840 ;;  n               1   57[BANK0 ] unsigned char 
 21841 ;;  wsect           4   58[BANK0 ] unsigned long 
 21842 ;;  fs              2   62[BANK0 ] PTR struct _FATFS
 21843 ;;		 -> NULL(0), fs(544), 
 21844 ;; Return value:  Size  Location     Type
 21845 ;;                  1    wreg      enum E105
 21846 ;; Registers used:
 21847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21848 ;; Tracked objects:
 21849 ;;		On entry : 0/0
 21850 ;;		On exit  : 0/0
 21851 ;;		Unchanged: 0/0
 21852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21853 ;;      Params:         0       4       0       0       0       0       0       0       0
 21854 ;;      Locals:         0       7       0       0       0       0       0       0       0
 21855 ;;      Temps:          0      10       0       0       0       0       0       0       0
 21856 ;;      Totals:         0      21       0       0       0       0       0       0       0
 21857 ;;Total ram usage:       21 bytes
 21858 ;; Hardware stack levels used:    1
 21859 ;; Hardware stack levels required when called:    8
 21860 ;; This function calls:
 21861 ;;		_disk_read
 21862 ;;		_disk_write
 21863 ;; This function is called by:
 21864 ;;		_sync
 21865 ;;		_get_cluster
 21866 ;;		_put_cluster
 21867 ;;		_trace_path
 21868 ;;		_reserve_direntry
 21869 ;;		_f_open
 21870 ;;		_f_write
 21871 ;;		_f_sync
 21872 ;;		_f_read
 21873 ;;		_f_readdir
 21874 ;; This function uses a non-reentrant model
 21875 ;;
 21876                           
 21877                           	psect	text86
 21878  00304E                     __ptext86:
 21879                           	opt stack 0
 21880  00304E                     _move_window:
 21881                           	opt stack 14
 21882                           
 21883                           ;tff.c: 81: DWORD wsect;
 21884                           ;tff.c: 82: FATFS *fs = FatFs;
 21885                           
 21886                           ;incstack = 0
 21887  00304E  C0F6  F09E         	movff	_FatFs,move_window@fs
 21888  003052  C0F7  F09F         	movff	_FatFs+1,move_window@fs+1
 21889                           
 21890                           ;tff.c: 85: wsect = fs->winsect;
 21891  003056  0100               	movlb	0	; () banked
 21892  003058  EE20 F004          	lfsr	2,4
 21893  00305C  519E               	movf	move_window@fs& (0+255),w,b
 21894  00305E  26D9               	addwf	fsr2l,f,c
 21895  003060  519F               	movf	(move_window@fs+1)& (0+255),w,b
 21896  003062  22DA               	addwfc	fsr2h,f,c
 21897  003064  CFDE F09A          	movff	postinc2,move_window@wsect
 21898  003068  CFDE F09B          	movff	postinc2,move_window@wsect+1
 21899  00306C  CFDE F09C          	movff	postinc2,move_window@wsect+2
 21900  003070  CFDE F09D          	movff	postinc2,move_window@wsect+3
 21901                           
 21902                           ; BSR set to: 0
 21903                           ;tff.c: 86: if (wsect != sector) {
 21904  003074  518B               	movf	move_window@sector& (0+255),w,b
 21905  003076  199A               	xorwf	move_window@wsect& (0+255),w,b
 21906  003078  E10A               	bnz	u13330
 21907  00307A  518C               	movf	(move_window@sector+1)& (0+255),w,b
 21908  00307C  199B               	xorwf	(move_window@wsect+1)& (0+255),w,b
 21909  00307E  E107               	bnz	u13330
 21910  003080  518D               	movf	(move_window@sector+2)& (0+255),w,b
 21911  003082  199C               	xorwf	(move_window@wsect+2)& (0+255),w,b
 21912  003084  E104               	bnz	u13330
 21913  003086  518E               	movf	(move_window@sector+3)& (0+255),w,b
 21914  003088  199D               	xorwf	(move_window@wsect+3)& (0+255),w,b
 21915  00308A  B4D8               	btfsc	status,2,c
 21916  00308C  D0B9               	goto	l777
 21917  00308E                     u13330:
 21918                           
 21919                           ; BSR set to: 0
 21920                           ;tff.c: 88: BYTE n;
 21921                           ;tff.c: 89: if (fs->winflag) {
 21922  00308E  EE20 F01F          	lfsr	2,31
 21923  003092  519E               	movf	move_window@fs& (0+255),w,b
 21924  003094  26D9               	addwf	fsr2l,f,c
 21925  003096  519F               	movf	(move_window@fs+1)& (0+255),w,b
 21926  003098  22DA               	addwfc	fsr2h,f,c
 21927  00309A  50DF               	movf	indf2,w,c
 21928  00309C  B4D8               	btfsc	status,2,c
 21929  00309E  D083               	goto	u13380
 21930                           
 21931                           ; BSR set to: 0
 21932                           ;tff.c: 90: if (disk_write(0, fs->win, wsect, 1) != RES_OK)
 21933  0030A0  0E20               	movlw	32
 21934  0030A2  259E               	addwf	move_window@fs& (0+255),w,b
 21935  0030A4  6F7F               	movwf	disk_write@buff& (0+255),b
 21936  0030A6  0E00               	movlw	0
 21937  0030A8  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 21938  0030AA  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 21939  0030AC  C09A  F081         	movff	move_window@wsect,disk_write@sector
 21940  0030B0  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 21941  0030B4  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 21942  0030B8  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 21943  0030BC  0E01               	movlw	1
 21944  0030BE  6F85               	movwf	disk_write@count& (0+255),b
 21945  0030C0  0E00               	movlw	0
 21946  0030C2  EC92  F027         	call	_disk_write
 21947  0030C6  0900               	iorlw	0
 21948  0030C8  B4D8               	btfsc	status,2,c
 21949  0030CA  D002               	goto	l772
 21950                           
 21951                           ;tff.c: 91: return FALSE;
 21952  0030CC  0E00               	movlw	0
 21953  0030CE  0012               	return	
 21954  0030D0                     l772:
 21955                           
 21956                           ;tff.c: 92: fs->winflag = 0;
 21957  0030D0  0100               	movlb	0	; () banked
 21958  0030D2  EE20 F01F          	lfsr	2,31
 21959  0030D6  519E               	movf	move_window@fs& (0+255),w,b
 21960  0030D8  26D9               	addwf	fsr2l,f,c
 21961  0030DA  519F               	movf	(move_window@fs+1)& (0+255),w,b
 21962  0030DC  22DA               	addwfc	fsr2h,f,c
 21963  0030DE  0E00               	movlw	0
 21964  0030E0  6EDF               	movwf	indf2,c
 21965                           
 21966                           ;tff.c: 93: if (wsect < (fs->fatbase + fs->sects_fat)) {
 21967  0030E2  EE20 F008          	lfsr	2,8
 21968  0030E6  519E               	movf	move_window@fs& (0+255),w,b
 21969  0030E8  26D9               	addwf	fsr2l,f,c
 21970  0030EA  519F               	movf	(move_window@fs+1)& (0+255),w,b
 21971  0030EC  22DA               	addwfc	fsr2h,f,c
 21972  0030EE  CFDE F08F          	movff	postinc2,??_move_window
 21973  0030F2  CFDE F090          	movff	postinc2,??_move_window+1
 21974  0030F6  CFDE F091          	movff	postinc2,??_move_window+2
 21975  0030FA  CFDE F092          	movff	postinc2,??_move_window+3
 21976  0030FE  EE20 F014          	lfsr	2,20
 21977  003102  519E               	movf	move_window@fs& (0+255),w,b
 21978  003104  26D9               	addwf	fsr2l,f,c
 21979  003106  519F               	movf	(move_window@fs+1)& (0+255),w,b
 21980  003108  22DA               	addwfc	fsr2h,f,c
 21981  00310A  CFDE F093          	movff	postinc2,??_move_window+4
 21982  00310E  CFDD F094          	movff	postdec2,??_move_window+5
 21983  003112  5193               	movf	(??_move_window+4)& (0+255),w,b
 21984  003114  258F               	addwf	??_move_window& (0+255),w,b
 21985  003116  6F95               	movwf	(??_move_window+6)& (0+255),b
 21986  003118  5194               	movf	(??_move_window+5)& (0+255),w,b
 21987  00311A  2190               	addwfc	(??_move_window+1)& (0+255),w,b
 21988  00311C  6F96               	movwf	(??_move_window+7)& (0+255),b
 21989  00311E  0E00               	movlw	0
 21990  003120  2191               	addwfc	(??_move_window+2)& (0+255),w,b
 21991  003122  6F97               	movwf	(??_move_window+8)& (0+255),b
 21992  003124  0E00               	movlw	0
 21993  003126  2192               	addwfc	(??_move_window+3)& (0+255),w,b
 21994  003128  6F98               	movwf	(??_move_window+9)& (0+255),b
 21995  00312A  5195               	movf	(??_move_window+6)& (0+255),w,b
 21996  00312C  5D9A               	subwf	move_window@wsect& (0+255),w,b
 21997  00312E  5196               	movf	(??_move_window+7)& (0+255),w,b
 21998  003130  599B               	subwfb	(move_window@wsect+1)& (0+255),w,b
 21999  003132  5197               	movf	(??_move_window+8)& (0+255),w,b
 22000  003134  599C               	subwfb	(move_window@wsect+2)& (0+255),w,b
 22001  003136  5198               	movf	(??_move_window+9)& (0+255),w,b
 22002  003138  599D               	subwfb	(move_window@wsect+3)& (0+255),w,b
 22003  00313A  B0D8               	btfsc	status,0,c
 22004  00313C  D034               	goto	u13380
 22005                           
 22006                           ; BSR set to: 0
 22007                           ;tff.c: 94: for (n = fs->n_fats; n >= 2; n--) {
 22008  00313E  EE20 F01E          	lfsr	2,30
 22009  003142  519E               	movf	move_window@fs& (0+255),w,b
 22010  003144  26D9               	addwf	fsr2l,f,c
 22011  003146  519F               	movf	(move_window@fs+1)& (0+255),w,b
 22012  003148  22DA               	addwfc	fsr2h,f,c
 22013  00314A  50DF               	movf	indf2,w,c
 22014  00314C  6F99               	movwf	move_window@n& (0+255),b
 22015  00314E                     l10802:
 22016                           
 22017                           ; BSR set to: 0
 22018  00314E  0E02               	movlw	2
 22019  003150  6199               	cpfslt	move_window@n& (0+255),b
 22020  003152  D001               	goto	l775
 22021  003154  D028               	goto	u13380
 22022  003156                     l775:
 22023                           
 22024                           ; BSR set to: 0
 22025                           ;tff.c: 95: wsect += fs->sects_fat;
 22026                           
 22027                           ; BSR set to: 0
 22028  003156  EE20 F014          	lfsr	2,20
 22029  00315A  519E               	movf	move_window@fs& (0+255),w,b
 22030  00315C  26D9               	addwf	fsr2l,f,c
 22031  00315E  519F               	movf	(move_window@fs+1)& (0+255),w,b
 22032  003160  22DA               	addwfc	fsr2h,f,c
 22033  003162  CFDE F08F          	movff	postinc2,??_move_window
 22034  003166  CFDD F090          	movff	postdec2,??_move_window+1
 22035  00316A  518F               	movf	??_move_window& (0+255),w,b
 22036  00316C  279A               	addwf	move_window@wsect& (0+255),f,b
 22037  00316E  5190               	movf	(??_move_window+1)& (0+255),w,b
 22038  003170  239B               	addwfc	(move_window@wsect+1)& (0+255),f,b
 22039  003172  0E00               	movlw	0
 22040  003174  239C               	addwfc	(move_window@wsect+2)& (0+255),f,b
 22041  003176  0E00               	movlw	0
 22042  003178  239D               	addwfc	(move_window@wsect+3)& (0+255),f,b
 22043                           
 22044                           ; BSR set to: 0
 22045                           ;tff.c: 96: disk_write(0, fs->win, wsect, 1);
 22046  00317A  0E20               	movlw	32
 22047  00317C  259E               	addwf	move_window@fs& (0+255),w,b
 22048  00317E  6F7F               	movwf	disk_write@buff& (0+255),b
 22049  003180  0E00               	movlw	0
 22050  003182  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 22051  003184  6F80               	movwf	(disk_write@buff+1)& (0+255),b
 22052  003186  C09A  F081         	movff	move_window@wsect,disk_write@sector
 22053  00318A  C09B  F082         	movff	move_window@wsect+1,disk_write@sector+1
 22054  00318E  C09C  F083         	movff	move_window@wsect+2,disk_write@sector+2
 22055  003192  C09D  F084         	movff	move_window@wsect+3,disk_write@sector+3
 22056  003196  0E01               	movlw	1
 22057  003198  6F85               	movwf	disk_write@count& (0+255),b
 22058  00319A  0E00               	movlw	0
 22059  00319C  EC92  F027         	call	_disk_write
 22060  0031A0  0100               	movlb	0	; () banked
 22061  0031A2  0799               	decf	move_window@n& (0+255),f,b
 22062  0031A4  D7D4               	goto	l10802
 22063  0031A6                     u13380:
 22064                           
 22065                           ; BSR set to: 0
 22066                           ;tff.c: 97: }
 22067                           ;tff.c: 98: }
 22068                           ;tff.c: 99: }
 22069                           ;tff.c: 101: if (sector) {
 22070                           
 22071                           ; BSR set to: 0
 22072                           
 22073                           ; BSR set to: 0
 22074                           
 22075                           ; BSR set to: 0
 22076  0031A6  518B               	movf	move_window@sector& (0+255),w,b
 22077  0031A8  118C               	iorwf	(move_window@sector+1)& (0+255),w,b
 22078  0031AA  118D               	iorwf	(move_window@sector+2)& (0+255),w,b
 22079  0031AC  118E               	iorwf	(move_window@sector+3)& (0+255),w,b
 22080  0031AE  B4D8               	btfsc	status,2,c
 22081  0031B0  D027               	goto	l777
 22082                           
 22083                           ; BSR set to: 0
 22084                           ;tff.c: 102: if (disk_read(0, fs->win, sector, 1) != RES_OK)
 22085  0031B2  0E20               	movlw	32
 22086  0031B4  259E               	addwf	move_window@fs& (0+255),w,b
 22087  0031B6  6F7F               	movwf	disk_read@buff& (0+255),b
 22088  0031B8  0E00               	movlw	0
 22089  0031BA  219F               	addwfc	(move_window@fs+1)& (0+255),w,b
 22090  0031BC  6F80               	movwf	(disk_read@buff+1)& (0+255),b
 22091  0031BE  C08B  F081         	movff	move_window@sector,disk_read@sector
 22092  0031C2  C08C  F082         	movff	move_window@sector+1,disk_read@sector+1
 22093  0031C6  C08D  F083         	movff	move_window@sector+2,disk_read@sector+2
 22094  0031CA  C08E  F084         	movff	move_window@sector+3,disk_read@sector+3
 22095  0031CE  0E01               	movlw	1
 22096  0031D0  6F85               	movwf	disk_read@count& (0+255),b
 22097  0031D2  0E00               	movlw	0
 22098  0031D4  ECC0  F026         	call	_disk_read
 22099  0031D8  0900               	iorlw	0
 22100  0031DA  B4D8               	btfsc	status,2,c
 22101  0031DC  D002               	goto	l778
 22102                           
 22103                           ;tff.c: 103: return FALSE;
 22104  0031DE  0E00               	movlw	0
 22105  0031E0  0012               	return	
 22106  0031E2                     l778:
 22107                           
 22108                           ;tff.c: 104: fs->winsect = sector;
 22109  0031E2  0100               	movlb	0	; () banked
 22110  0031E4  EE20 F004          	lfsr	2,4
 22111  0031E8  519E               	movf	move_window@fs& (0+255),w,b
 22112  0031EA  26D9               	addwf	fsr2l,f,c
 22113  0031EC  519F               	movf	(move_window@fs+1)& (0+255),w,b
 22114  0031EE  22DA               	addwfc	fsr2h,f,c
 22115  0031F0  C08B  FFDE         	movff	move_window@sector,postinc2
 22116  0031F4  C08C  FFDE         	movff	move_window@sector+1,postinc2
 22117  0031F8  C08D  FFDE         	movff	move_window@sector+2,postinc2
 22118  0031FC  C08E  FFDE         	movff	move_window@sector+3,postinc2
 22119  003200                     l777:
 22120                           
 22121                           ; BSR set to: 0
 22122                           ;tff.c: 105: }
 22123                           ;tff.c: 106: }
 22124                           ;tff.c: 107: return TRUE;
 22125                           
 22126                           ; BSR set to: 0
 22127                           
 22128                           ; BSR set to: 0
 22129  003200  0E01               	movlw	1
 22130  003202  0012               	return	
 22131  003204                     __end_of_move_window:
 22132                           	opt stack 0
 22133                           tosu	equ	0xFFF
 22134                           tosh	equ	0xFFE
 22135                           tosl	equ	0xFFD
 22136                           pclath	equ	0xFFA
 22137                           tblptru	equ	0xFF8
 22138                           tblptrh	equ	0xFF7
 22139                           tblptrl	equ	0xFF6
 22140                           tablat	equ	0xFF5
 22141                           prodh	equ	0xFF4
 22142                           prodl	equ	0xFF3
 22143                           intcon	equ	0xFF2
 22144                           intcon2	equ	0xFF1
 22145                           intcon3	equ	0xFF0
 22146                           indf0	equ	0xFEF
 22147                           postinc0	equ	0xFEE
 22148                           fsr0h	equ	0xFEA
 22149                           fsr0l	equ	0xFE9
 22150                           wreg	equ	0xFE8
 22151                           indf1	equ	0xFE7
 22152                           postinc1	equ	0xFE6
 22153                           postdec1	equ	0xFE5
 22154                           plusw1	equ	0xFE3
 22155                           fsr1h	equ	0xFE2
 22156                           fsr1l	equ	0xFE1
 22157                           indf2	equ	0xFDF
 22158                           postinc2	equ	0xFDE
 22159                           postdec2	equ	0xFDD
 22160                           plusw2	equ	0xFDB
 22161                           fsr2h	equ	0xFDA
 22162                           fsr2l	equ	0xFD9
 22163                           status	equ	0xFD8
 22164                           
 22165 ;; *************** function _disk_write *****************
 22166 ;; Defined at:
 22167 ;;		line 150 in file "bibliotecas/diskio.c"
 22168 ;; Parameters:    Size  Location     Type
 22169 ;;  pdrv            1    wreg     unsigned char 
 22170 ;;  buff            2   31[BANK0 ] PTR const unsigned char 
 22171 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 22172 ;;  sector          4   33[BANK0 ] unsigned long 
 22173 ;;  count           1   37[BANK0 ] unsigned char 
 22174 ;; Auto vars:     Size  Location     Type
 22175 ;;  pdrv            1   39[BANK0 ] unsigned char 
 22176 ;;  result          2   40[BANK0 ] int 
 22177 ;;  res             1   42[BANK0 ] enum E25
 22178 ;; Return value:  Size  Location     Type
 22179 ;;                  1    wreg      enum E25
 22180 ;; Registers used:
 22181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22182 ;; Tracked objects:
 22183 ;;		On entry : 0/0
 22184 ;;		On exit  : 0/0
 22185 ;;		Unchanged: 0/0
 22186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22187 ;;      Params:         0       7       0       0       0       0       0       0       0
 22188 ;;      Locals:         0       4       0       0       0       0       0       0       0
 22189 ;;      Temps:          0       1       0       0       0       0       0       0       0
 22190 ;;      Totals:         0      12       0       0       0       0       0       0       0
 22191 ;;Total ram usage:       12 bytes
 22192 ;; Hardware stack levels used:    1
 22193 ;; Hardware stack levels required when called:    7
 22194 ;; This function calls:
 22195 ;;		_sdc_disk_write
 22196 ;; This function is called by:
 22197 ;;		_move_window
 22198 ;;		_reserve_direntry
 22199 ;;		_f_write
 22200 ;; This function uses a non-reentrant model
 22201 ;;
 22202                           
 22203                           	psect	text87
 22204  004F24                     __ptext87:
 22205                           	opt stack 0
 22206  004F24                     _disk_write:
 22207                           	opt stack 14
 22208                           
 22209                           ;incstack = 0
 22210                           ;disk_write@pdrv stored from wreg
 22211  004F24  0100               	movlb	0	; () banked
 22212  004F26  6F87               	movwf	disk_write@pdrv& (0+255),b
 22213                           
 22214                           ;diskio.c: 157: DRESULT res;
 22215                           ;diskio.c: 158: int result;
 22216                           ;diskio.c: 160: switch (pdrv) {
 22217  004F28  D034               	goto	l59
 22218  004F2A                     
 22219                           ;diskio.c: 163: result = sdc_disk_write(buff, sector, count);
 22220  004F2A  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 22221  004F2E  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 22222  004F32  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 22223  004F36  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 22224  004F3A  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 22225  004F3E  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 22226  004F42  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 22227  004F46  EC62  F016         	call	_sdc_disk_write	;wreg free
 22228  004F4A  0100               	movlb	0	; () banked
 22229  004F4C  6F86               	movwf	??_disk_write& (0+255),b
 22230  004F4E  5186               	movf	??_disk_write& (0+255),w,b
 22231  004F50  6F88               	movwf	disk_write@result& (0+255),b
 22232  004F52  6B89               	clrf	(disk_write@result+1)& (0+255),b
 22233                           
 22234                           ; BSR set to: 0
 22235                           ;diskio.c: 165: res = result;
 22236  004F54  C088  F08A         	movff	disk_write@result,disk_write@res
 22237                           
 22238                           ; BSR set to: 0
 22239                           ;diskio.c: 168: return res;
 22240  004F58  518A               	movf	disk_write@res& (0+255),w,b
 22241                           
 22242                           ; BSR set to: 0
 22243  004F5A  0012               	return	
 22244  004F5C                     
 22245                           ; BSR set to: 0
 22246                           ;diskio.c: 173: result = sdc_disk_write(buff, sector, count);
 22247                           
 22248                           ; BSR set to: 0
 22249  004F5C  C07F  F06C         	movff	disk_write@buff,sdc_disk_write@p_buff
 22250  004F60  C080  F06D         	movff	disk_write@buff+1,sdc_disk_write@p_buff+1
 22251  004F64  C081  F06E         	movff	disk_write@sector,sdc_disk_write@sector
 22252  004F68  C082  F06F         	movff	disk_write@sector+1,sdc_disk_write@sector+1
 22253  004F6C  C083  F070         	movff	disk_write@sector+2,sdc_disk_write@sector+2
 22254  004F70  C084  F071         	movff	disk_write@sector+3,sdc_disk_write@sector+3
 22255  004F74  C085  F072         	movff	disk_write@count,sdc_disk_write@count
 22256  004F78  EC62  F016         	call	_sdc_disk_write	;wreg free
 22257  004F7C  0100               	movlb	0	; () banked
 22258  004F7E  6F86               	movwf	??_disk_write& (0+255),b
 22259  004F80  5186               	movf	??_disk_write& (0+255),w,b
 22260  004F82  6F88               	movwf	disk_write@result& (0+255),b
 22261  004F84  6B89               	clrf	(disk_write@result+1)& (0+255),b
 22262                           
 22263                           ; BSR set to: 0
 22264                           ;diskio.c: 174: res = result;
 22265  004F86  C088  F08A         	movff	disk_write@result,disk_write@res
 22266                           
 22267                           ; BSR set to: 0
 22268                           ;diskio.c: 177: return res;
 22269  004F8A  518A               	movf	disk_write@res& (0+255),w,b
 22270                           
 22271                           ; BSR set to: 0
 22272  004F8C  0012               	return	
 22273  004F8E                     
 22274                           ; BSR set to: 0
 22275                           ;diskio.c: 186: return res;
 22276                           
 22277                           ; BSR set to: 0
 22278  004F8E  518A               	movf	disk_write@res& (0+255),w,b
 22279                           
 22280                           ; BSR set to: 0
 22281  004F90  0012               	return	
 22282  004F92                     l59:
 22283                           
 22284                           ; BSR set to: 0
 22285  004F92  0100               	movlb	0	; () banked
 22286  004F94  5187               	movf	disk_write@pdrv& (0+255),w,b
 22287                           
 22288                           ; Switch size 1, requested type "space"
 22289                           ; Number of cases is 3, Range of values is 0 to 2
 22290                           ; switch strategies available:
 22291                           ; Name         Instructions Cycles
 22292                           ; simple_byte           10     6 (average)
 22293                           ;	Chosen strategy is simple_byte
 22294  004F96  0A00               	xorlw	0	; case 0
 22295  004F98  B4D8               	btfsc	status,2,c
 22296  004F9A  D7C7               	goto	l60
 22297  004F9C  0A01               	xorlw	1	; case 1
 22298  004F9E  B4D8               	btfsc	status,2,c
 22299  004FA0  D7DD               	goto	l62
 22300  004FA2  0A03               	xorlw	3	; case 2
 22301  004FA4  B4D8               	btfsc	status,2,c
 22302  004FA6  D7F3               	goto	l63
 22303                           
 22304                           ; BSR set to: 0
 22305                           ;diskio.c: 189: return RES_PARERR;
 22306                           
 22307                           ; BSR set to: 0
 22308  004FA8  0E04               	movlw	4
 22309  004FAA  0012               	return	
 22310  004FAC                     __end_of_disk_write:
 22311                           	opt stack 0
 22312                           tosu	equ	0xFFF
 22313                           tosh	equ	0xFFE
 22314                           tosl	equ	0xFFD
 22315                           pclath	equ	0xFFA
 22316                           tblptru	equ	0xFF8
 22317                           tblptrh	equ	0xFF7
 22318                           tblptrl	equ	0xFF6
 22319                           tablat	equ	0xFF5
 22320                           prodh	equ	0xFF4
 22321                           prodl	equ	0xFF3
 22322                           intcon	equ	0xFF2
 22323                           intcon2	equ	0xFF1
 22324                           intcon3	equ	0xFF0
 22325                           indf0	equ	0xFEF
 22326                           postinc0	equ	0xFEE
 22327                           fsr0h	equ	0xFEA
 22328                           fsr0l	equ	0xFE9
 22329                           wreg	equ	0xFE8
 22330                           indf1	equ	0xFE7
 22331                           postinc1	equ	0xFE6
 22332                           postdec1	equ	0xFE5
 22333                           plusw1	equ	0xFE3
 22334                           fsr1h	equ	0xFE2
 22335                           fsr1l	equ	0xFE1
 22336                           indf2	equ	0xFDF
 22337                           postinc2	equ	0xFDE
 22338                           postdec2	equ	0xFDD
 22339                           plusw2	equ	0xFDB
 22340                           fsr2h	equ	0xFDA
 22341                           fsr2l	equ	0xFD9
 22342                           status	equ	0xFD8
 22343                           
 22344 ;; *************** function _sdc_disk_write *****************
 22345 ;; Defined at:
 22346 ;;		line 509 in file "bibliotecas/diskio.c"
 22347 ;; Parameters:    Size  Location     Type
 22348 ;;  p_buff          2   12[BANK0 ] PTR const unsigned char 
 22349 ;;		 -> fs.win(512), fputc@c(1), NULL(0), fs(544), 
 22350 ;;  sector          4   14[BANK0 ] unsigned long 
 22351 ;;  count           1   18[BANK0 ] unsigned char 
 22352 ;; Auto vars:     Size  Location     Type
 22353 ;;  j               2   28[BANK0 ] int 
 22354 ;;  count1          2   25[BANK0 ] int 
 22355 ;;  i               2   23[BANK0 ] int 
 22356 ;;  buff            1   30[BANK0 ] unsigned char 
 22357 ;;  res             1   27[BANK0 ] enum E25
 22358 ;; Return value:  Size  Location     Type
 22359 ;;                  1    wreg      enum E25
 22360 ;; Registers used:
 22361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22362 ;; Tracked objects:
 22363 ;;		On entry : 0/0
 22364 ;;		On exit  : 0/0
 22365 ;;		Unchanged: 0/0
 22366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22367 ;;      Params:         0       7       0       0       0       0       0       0       0
 22368 ;;      Locals:         0       8       0       0       0       0       0       0       0
 22369 ;;      Temps:          0       4       0       0       0       0       0       0       0
 22370 ;;      Totals:         0      19       0       0       0       0       0       0       0
 22371 ;;Total ram usage:       19 bytes
 22372 ;; Hardware stack levels used:    1
 22373 ;; Hardware stack levels required when called:    6
 22374 ;; This function calls:
 22375 ;;		_command
 22376 ;;		_dummy_clocks
 22377 ;;		_escreve_SPI
 22378 ;;		_leitura_SPI
 22379 ;;		_proceed
 22380 ;;		_response
 22381 ;; This function is called by:
 22382 ;;		_disk_write
 22383 ;; This function uses a non-reentrant model
 22384 ;;
 22385                           
 22386                           	psect	text88
 22387  002CC4                     __ptext88:
 22388                           	opt stack 0
 22389  002CC4                     _sdc_disk_write:
 22390                           	opt stack 14
 22391                           
 22392                           ;diskio.c: 511: DRESULT res;
 22393                           ;diskio.c: 512: unsigned char buff;
 22394                           ;diskio.c: 513: int i=0,j, count1 = 0;
 22395                           
 22396                           ; BSR set to: 0
 22397                           ;incstack = 0
 22398  002CC4  0E00               	movlw	0
 22399  002CC6  0100               	movlb	0	; () banked
 22400  002CC8  6F78               	movwf	(sdc_disk_write@i+1)& (0+255),b
 22401  002CCA  0E00               	movlw	0
 22402  002CCC  6F77               	movwf	sdc_disk_write@i& (0+255),b
 22403  002CCE  0E00               	movlw	0
 22404  002CD0  6F7A               	movwf	(sdc_disk_write@count1+1)& (0+255),b
 22405  002CD2  0E00               	movlw	0
 22406  002CD4  6F79               	movwf	sdc_disk_write@count1& (0+255),b
 22407                           
 22408                           ; BSR set to: 0
 22409                           ;diskio.c: 515: if(count>1)
 22410  002CD6  0E01               	movlw	1
 22411  002CD8  6572               	cpfsgt	sdc_disk_write@count& (0+255),b
 22412  002CDA  D06C               	goto	l144
 22413                           
 22414                           ; BSR set to: 0
 22415                           ;diskio.c: 516: {
 22416                           ;diskio.c: 517: LATCbits.LATC7 = 0;
 22417  002CDC  9E8B               	bcf	3979,7,c	;volatile
 22418                           
 22419                           ;diskio.c: 518: LATBbits.LATB5 = 0;
 22420  002CDE  9A8A               	bcf	3978,5,c	;volatile
 22421                           
 22422                           ; BSR set to: 0
 22423                           ;diskio.c: 519: dummy_clocks(10);
 22424  002CE0  0E0A               	movlw	10
 22425  002CE2  ECE2  F02C         	call	_dummy_clocks
 22426                           
 22427                           ;diskio.c: 520: command(0X57, count, 0XFF);
 22428  002CE6  0100               	movlb	0	; () banked
 22429  002CE8  5172               	movf	sdc_disk_write@count& (0+255),w,b
 22430  002CEA  6F65               	movwf	command@arg& (0+255),b
 22431  002CEC  6B66               	clrf	(command@arg+1)& (0+255),b
 22432  002CEE  6B67               	clrf	(command@arg+2)& (0+255),b
 22433  002CF0  6B68               	clrf	(command@arg+3)& (0+255),b
 22434  002CF2  0EFF               	movlw	255
 22435  002CF4  6F69               	movwf	command@CRC& (0+255),b
 22436  002CF6  0E57               	movlw	87
 22437  002CF8  EC2B  F02A         	call	_command
 22438                           
 22439                           ;diskio.c: 521: proceed();
 22440  002CFC  ECBC  F02F         	call	_proceed	;wreg free
 22441  002D00                     
 22442                           ;diskio.c: 523: buff = response();
 22443  002D00  ECB5  F02F         	call	_response	;wreg free
 22444  002D04  0100               	movlb	0	; () banked
 22445  002D06  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 22446                           
 22447                           ; BSR set to: 0
 22448                           ;diskio.c: 524: }while(buff!=0X00);
 22449  002D08  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 22450  002D0A  A4D8               	btfss	status,2,c
 22451  002D0C  D7F9               	goto	l145
 22452                           
 22453                           ; BSR set to: 0
 22454                           ;diskio.c: 526: dummy_clocks(10);
 22455                           
 22456                           ; BSR set to: 0
 22457  002D0E  0E0A               	movlw	10
 22458  002D10  ECE2  F02C         	call	_dummy_clocks
 22459                           
 22460                           ;diskio.c: 527: command(0X59, sector*512, 0XFF);
 22461  002D14  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 22462  002D18  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 22463  002D1C  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 22464  002D20  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 22465  002D24  0E09               	movlw	9
 22466  002D26                     u13045:
 22467  002D26  90D8               	bcf	status,0,c
 22468  002D28  0100               	movlb	0	; () banked
 22469  002D2A  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 22470  002D2C  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 22471  002D2E  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 22472  002D30  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 22473  002D32  2EE8               	decfsz	wreg,f,c
 22474  002D34  D7F8               	goto	u13045
 22475  002D36  C073  F065         	movff	??_sdc_disk_write,command@arg
 22476  002D3A  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 22477  002D3E  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 22478  002D42  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 22479  002D46  0EFF               	movlw	255
 22480  002D48  6F69               	movwf	command@CRC& (0+255),b
 22481  002D4A  0E59               	movlw	89
 22482  002D4C  EC2B  F02A         	call	_command
 22483                           
 22484                           ;diskio.c: 528: proceed();
 22485  002D50  ECBC  F02F         	call	_proceed	;wreg free
 22486  002D54                     
 22487                           ;diskio.c: 530: buff = response();
 22488  002D54  ECB5  F02F         	call	_response	;wreg free
 22489  002D58  0100               	movlb	0	; () banked
 22490  002D5A  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 22491                           
 22492                           ; BSR set to: 0
 22493                           ;diskio.c: 531: }while(buff!=0X00);
 22494  002D5C  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 22495  002D5E  A4D8               	btfss	status,2,c
 22496  002D60  D7F9               	goto	l147
 22497                           
 22498                           ; BSR set to: 0
 22499                           ;diskio.c: 533: dummy_clocks(1);
 22500                           
 22501                           ; BSR set to: 0
 22502  002D62  0E01               	movlw	1
 22503  002D64  ECE2  F02C         	call	_dummy_clocks
 22504                           
 22505                           ;diskio.c: 534: escreve_SPI(0XFC);
 22506  002D68  0EFC               	movlw	252
 22507  002D6A  EC7A  F02F         	call	_escreve_SPI
 22508                           
 22509                           ;diskio.c: 535: for(j=0;j<512;j++)
 22510  002D6E  0E00               	movlw	0
 22511  002D70  0100               	movlb	0	; () banked
 22512  002D72  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 22513  002D74  0E00               	movlw	0
 22514  002D76  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 22515  002D78                     l10562:
 22516                           
 22517                           ; BSR set to: 0
 22518  002D78  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 22519  002D7A  D004               	goto	l149
 22520  002D7C  0E02               	movlw	2
 22521  002D7E  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 22522  002D80  B0D8               	btfsc	status,0,c
 22523  002D82  D00D               	goto	u13070
 22524  002D84                     l149:
 22525                           
 22526                           ; BSR set to: 0
 22527                           ;diskio.c: 536: {
 22528                           ;diskio.c: 537: escreve_SPI(*p_buff);
 22529                           
 22530                           ; BSR set to: 0
 22531  002D84  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 22532  002D88  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 22533  002D8C  50DF               	movf	indf2,w,c
 22534  002D8E  EC7A  F02F         	call	_escreve_SPI
 22535                           
 22536                           ;diskio.c: 538: p_buff++;
 22537  002D92  0100               	movlb	0	; () banked
 22538  002D94  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 22539  002D96  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 22540                           
 22541                           ; BSR set to: 0
 22542  002D98  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 22543  002D9A  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 22544  002D9C  D7ED               	goto	l10562
 22545  002D9E                     u13070:
 22546                           
 22547                           ; BSR set to: 0
 22548                           ;diskio.c: 539: }
 22549                           ;diskio.c: 540: leitura_SPI();
 22550                           
 22551                           ; BSR set to: 0
 22552  002D9E  ECC2  F02F         	call	_leitura_SPI	;wreg free
 22553                           
 22554                           ;diskio.c: 541: leitura_SPI();
 22555  002DA2  ECC2  F02F         	call	_leitura_SPI	;wreg free
 22556                           
 22557                           ;diskio.c: 543: dummy_clocks(1);
 22558  002DA6  0E01               	movlw	1
 22559  002DA8  ECE2  F02C         	call	_dummy_clocks
 22560                           
 22561                           ;diskio.c: 544: escreve_SPI(0XFD);
 22562  002DAC  0EFD               	movlw	253
 22563  002DAE  EC7A  F02F         	call	_escreve_SPI
 22564                           
 22565                           ;diskio.c: 546: }
 22566  002DB2  D06A               	goto	u13120
 22567  002DB4                     l144:
 22568                           
 22569                           ; BSR set to: 0
 22570                           ;diskio.c: 547: else
 22571                           ;diskio.c: 548: {
 22572                           ;diskio.c: 549: LATCbits.LATC7 = 0;
 22573  002DB4  9E8B               	bcf	3979,7,c	;volatile
 22574                           
 22575                           ;diskio.c: 550: LATBbits.LATB5 = 0;
 22576  002DB6  9A8A               	bcf	3978,5,c	;volatile
 22577                           
 22578                           ; BSR set to: 0
 22579                           ;diskio.c: 551: dummy_clocks(10);
 22580  002DB8  0E0A               	movlw	10
 22581  002DBA  ECE2  F02C         	call	_dummy_clocks
 22582                           
 22583                           ;diskio.c: 552: command(0X58, sector*512, 0X00);
 22584  002DBE  C06E  F073         	movff	sdc_disk_write@sector,??_sdc_disk_write
 22585  002DC2  C06F  F074         	movff	sdc_disk_write@sector+1,??_sdc_disk_write+1
 22586  002DC6  C070  F075         	movff	sdc_disk_write@sector+2,??_sdc_disk_write+2
 22587  002DCA  C071  F076         	movff	sdc_disk_write@sector+3,??_sdc_disk_write+3
 22588  002DCE  0E09               	movlw	9
 22589  002DD0                     u13085:
 22590  002DD0  90D8               	bcf	status,0,c
 22591  002DD2  0100               	movlb	0	; () banked
 22592  002DD4  3773               	rlcf	??_sdc_disk_write& (0+255),f,b
 22593  002DD6  3774               	rlcf	(??_sdc_disk_write+1)& (0+255),f,b
 22594  002DD8  3775               	rlcf	(??_sdc_disk_write+2)& (0+255),f,b
 22595  002DDA  3776               	rlcf	(??_sdc_disk_write+3)& (0+255),f,b
 22596  002DDC  2EE8               	decfsz	wreg,f,c
 22597  002DDE  D7F8               	goto	u13085
 22598  002DE0  C073  F065         	movff	??_sdc_disk_write,command@arg
 22599  002DE4  C074  F066         	movff	??_sdc_disk_write+1,command@arg+1
 22600  002DE8  C075  F067         	movff	??_sdc_disk_write+2,command@arg+2
 22601  002DEC  C076  F068         	movff	??_sdc_disk_write+3,command@arg+3
 22602  002DF0  0E00               	movlw	0
 22603  002DF2  6F69               	movwf	command@CRC& (0+255),b
 22604  002DF4  0E58               	movlw	88
 22605  002DF6  EC2B  F02A         	call	_command
 22606                           
 22607                           ;diskio.c: 553: proceed();
 22608  002DFA  ECBC  F02F         	call	_proceed	;wreg free
 22609  002DFE                     
 22610                           ;diskio.c: 555: buff = response();
 22611  002DFE  ECB5  F02F         	call	_response	;wreg free
 22612  002E02  0100               	movlb	0	; () banked
 22613  002E04  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 22614                           
 22615                           ; BSR set to: 0
 22616                           ;diskio.c: 556: }while(buff!=0X00);
 22617  002E06  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 22618  002E08  A4D8               	btfss	status,2,c
 22619  002E0A  D7F9               	goto	l152
 22620                           
 22621                           ; BSR set to: 0
 22622                           ;diskio.c: 558: LATBbits.LATB5 = 0;
 22623  002E0C  9A8A               	bcf	3978,5,c	;volatile
 22624                           
 22625                           ;diskio.c: 559: LATCbits.LATC7 = 0;
 22626  002E0E  9E8B               	bcf	3979,7,c	;volatile
 22627                           
 22628                           ; BSR set to: 0
 22629                           ;diskio.c: 560: dummy_clocks(1);
 22630  002E10  0E01               	movlw	1
 22631  002E12  ECE2  F02C         	call	_dummy_clocks
 22632                           
 22633                           ;diskio.c: 561: escreve_SPI(0XFE);
 22634  002E16  0EFE               	movlw	254
 22635  002E18  EC7A  F02F         	call	_escreve_SPI
 22636                           
 22637                           ;diskio.c: 562: for(j=0;j<512;j++)
 22638  002E1C  0E00               	movlw	0
 22639  002E1E  0100               	movlb	0	; () banked
 22640  002E20  6F7D               	movwf	(sdc_disk_write@j+1)& (0+255),b
 22641  002E22  0E00               	movlw	0
 22642  002E24  6F7C               	movwf	sdc_disk_write@j& (0+255),b
 22643  002E26                     l10594:
 22644                           
 22645                           ; BSR set to: 0
 22646  002E26  BF7D               	btfsc	(sdc_disk_write@j+1)& (0+255),7,b
 22647  002E28  D004               	goto	l154
 22648  002E2A  0E02               	movlw	2
 22649  002E2C  5D7D               	subwf	(sdc_disk_write@j+1)& (0+255),w,b
 22650  002E2E  B0D8               	btfsc	status,0,c
 22651  002E30  D00D               	goto	u13110
 22652  002E32                     l154:
 22653                           
 22654                           ; BSR set to: 0
 22655                           ;diskio.c: 563: {
 22656                           ;diskio.c: 564: escreve_SPI(*p_buff);
 22657                           
 22658                           ; BSR set to: 0
 22659  002E32  C06C  FFD9         	movff	sdc_disk_write@p_buff,fsr2l
 22660  002E36  C06D  FFDA         	movff	sdc_disk_write@p_buff+1,fsr2h
 22661  002E3A  50DF               	movf	indf2,w,c
 22662  002E3C  EC7A  F02F         	call	_escreve_SPI
 22663                           
 22664                           ;diskio.c: 565: p_buff++;
 22665  002E40  0100               	movlb	0	; () banked
 22666  002E42  4B6C               	infsnz	sdc_disk_write@p_buff& (0+255),f,b
 22667  002E44  2B6D               	incf	(sdc_disk_write@p_buff+1)& (0+255),f,b
 22668                           
 22669                           ; BSR set to: 0
 22670  002E46  4B7C               	infsnz	sdc_disk_write@j& (0+255),f,b
 22671  002E48  2B7D               	incf	(sdc_disk_write@j+1)& (0+255),f,b
 22672  002E4A  D7ED               	goto	l10594
 22673  002E4C                     u13110:
 22674                           
 22675                           ; BSR set to: 0
 22676                           ;diskio.c: 566: }
 22677                           ;diskio.c: 567: leitura_SPI();
 22678                           
 22679                           ; BSR set to: 0
 22680  002E4C  ECC2  F02F         	call	_leitura_SPI	;wreg free
 22681                           
 22682                           ;diskio.c: 568: leitura_SPI();
 22683  002E50  ECC2  F02F         	call	_leitura_SPI	;wreg free
 22684                           
 22685                           ;diskio.c: 570: dummy_clocks(10);
 22686  002E54  0E0A               	movlw	10
 22687  002E56  ECE2  F02C         	call	_dummy_clocks
 22688                           
 22689                           ;diskio.c: 571: command(0X4D,0X00000000,0X00);
 22690  002E5A  0E00               	movlw	0
 22691  002E5C  0100               	movlb	0	; () banked
 22692  002E5E  6F65               	movwf	command@arg& (0+255),b
 22693  002E60  0E00               	movlw	0
 22694  002E62  6F66               	movwf	(command@arg+1)& (0+255),b
 22695  002E64  0E00               	movlw	0
 22696  002E66  6F67               	movwf	(command@arg+2)& (0+255),b
 22697  002E68  0E00               	movlw	0
 22698  002E6A  6F68               	movwf	(command@arg+3)& (0+255),b
 22699  002E6C  0E00               	movlw	0
 22700  002E6E  6F69               	movwf	command@CRC& (0+255),b
 22701  002E70  0E4D               	movlw	77
 22702  002E72  EC2B  F02A         	call	_command
 22703                           
 22704                           ;diskio.c: 572: proceed();
 22705  002E76  ECBC  F02F         	call	_proceed	;wreg free
 22706  002E7A                     
 22707                           ;diskio.c: 574: buff = response();
 22708  002E7A  ECB5  F02F         	call	_response	;wreg free
 22709  002E7E  0100               	movlb	0	; () banked
 22710  002E80  6F7E               	movwf	sdc_disk_write@buff& (0+255),b
 22711                           
 22712                           ; BSR set to: 0
 22713                           ;diskio.c: 575: }while(buff!=0X00 );
 22714  002E82  517E               	movf	sdc_disk_write@buff& (0+255),w,b
 22715  002E84  A4D8               	btfss	status,2,c
 22716  002E86  D7F9               	goto	l156
 22717  002E88                     u13120:
 22718                           
 22719                           ;diskio.c: 576: }
 22720                           ;diskio.c: 577: return res;
 22721                           
 22722                           ; BSR set to: 0
 22723                           
 22724                           ; BSR set to: 0
 22725  002E88  0100               	movlb	0	; () banked
 22726  002E8A  517B               	movf	sdc_disk_write@res& (0+255),w,b
 22727  002E8C  0012               	return	
 22728  002E8E                     __end_of_sdc_disk_write:
 22729                           	opt stack 0
 22730                           tosu	equ	0xFFF
 22731                           tosh	equ	0xFFE
 22732                           tosl	equ	0xFFD
 22733                           pclath	equ	0xFFA
 22734                           tblptru	equ	0xFF8
 22735                           tblptrh	equ	0xFF7
 22736                           tblptrl	equ	0xFF6
 22737                           tablat	equ	0xFF5
 22738                           prodh	equ	0xFF4
 22739                           prodl	equ	0xFF3
 22740                           intcon	equ	0xFF2
 22741                           intcon2	equ	0xFF1
 22742                           intcon3	equ	0xFF0
 22743                           indf0	equ	0xFEF
 22744                           postinc0	equ	0xFEE
 22745                           fsr0h	equ	0xFEA
 22746                           fsr0l	equ	0xFE9
 22747                           wreg	equ	0xFE8
 22748                           indf1	equ	0xFE7
 22749                           postinc1	equ	0xFE6
 22750                           postdec1	equ	0xFE5
 22751                           plusw1	equ	0xFE3
 22752                           fsr1h	equ	0xFE2
 22753                           fsr1l	equ	0xFE1
 22754                           indf2	equ	0xFDF
 22755                           postinc2	equ	0xFDE
 22756                           postdec2	equ	0xFDD
 22757                           plusw2	equ	0xFDB
 22758                           fsr2h	equ	0xFDA
 22759                           fsr2l	equ	0xFD9
 22760                           status	equ	0xFD8
 22761                           
 22762 ;; *************** function _disk_read *****************
 22763 ;; Defined at:
 22764 ;;		line 97 in file "bibliotecas/diskio.c"
 22765 ;; Parameters:    Size  Location     Type
 22766 ;;  pdrv            1    wreg     unsigned char 
 22767 ;;  buff            2   31[BANK0 ] PTR unsigned char 
 22768 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 22769 ;;  sector          4   33[BANK0 ] unsigned long 
 22770 ;;  count           1   37[BANK0 ] unsigned char 
 22771 ;; Auto vars:     Size  Location     Type
 22772 ;;  pdrv            1   39[BANK0 ] unsigned char 
 22773 ;;  result          2   40[BANK0 ] int 
 22774 ;;  res             1   42[BANK0 ] enum E25
 22775 ;; Return value:  Size  Location     Type
 22776 ;;                  1    wreg      enum E25
 22777 ;; Registers used:
 22778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22779 ;; Tracked objects:
 22780 ;;		On entry : 0/0
 22781 ;;		On exit  : 0/0
 22782 ;;		Unchanged: 0/0
 22783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22784 ;;      Params:         0       7       0       0       0       0       0       0       0
 22785 ;;      Locals:         0       4       0       0       0       0       0       0       0
 22786 ;;      Temps:          0       1       0       0       0       0       0       0       0
 22787 ;;      Totals:         0      12       0       0       0       0       0       0       0
 22788 ;;Total ram usage:       12 bytes
 22789 ;; Hardware stack levels used:    1
 22790 ;; Hardware stack levels required when called:    7
 22791 ;; This function calls:
 22792 ;;		_sdc_disk_read
 22793 ;; This function is called by:
 22794 ;;		_move_window
 22795 ;;		_check_fs
 22796 ;;		_f_read
 22797 ;; This function uses a non-reentrant model
 22798 ;;
 22799                           
 22800                           	psect	text89
 22801  004D80                     __ptext89:
 22802                           	opt stack 0
 22803  004D80                     _disk_read:
 22804                           	opt stack 14
 22805                           
 22806                           ; BSR set to: 0
 22807                           ;incstack = 0
 22808                           ;disk_read@pdrv stored from wreg
 22809  004D80  0100               	movlb	0	; () banked
 22810  004D82  6F87               	movwf	disk_read@pdrv& (0+255),b
 22811                           
 22812                           ;diskio.c: 104: DRESULT res;
 22813                           ;diskio.c: 105: int result;
 22814                           ;diskio.c: 107: switch (pdrv) {
 22815  004D84  D038               	goto	l51
 22816  004D86                     
 22817                           ;diskio.c: 111: result = sdc_disk_read(buff, sector, count);
 22818  004D86  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 22819  004D8A  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 22820  004D8E  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 22821  004D92  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 22822  004D96  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 22823  004D9A  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 22824  004D9E  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 22825  004DA2  EC04  F01E         	call	_sdc_disk_read	;wreg free
 22826  004DA6  0100               	movlb	0	; () banked
 22827  004DA8  6F86               	movwf	??_disk_read& (0+255),b
 22828  004DAA  5186               	movf	??_disk_read& (0+255),w,b
 22829  004DAC  6F88               	movwf	disk_read@result& (0+255),b
 22830  004DAE  6B89               	clrf	(disk_read@result+1)& (0+255),b
 22831                           
 22832                           ; BSR set to: 0
 22833                           ;diskio.c: 115: res = result;
 22834  004DB0  C088  F08A         	movff	disk_read@result,disk_read@res
 22835                           
 22836                           ; BSR set to: 0
 22837                           ;diskio.c: 117: return res;
 22838  004DB4  518A               	movf	disk_read@res& (0+255),w,b
 22839                           
 22840                           ; BSR set to: 0
 22841  004DB6  0012               	return	
 22842  004DB8                     
 22843                           ; BSR set to: 0
 22844                           ;diskio.c: 122: result = sdc_disk_read(buff, sector, count);
 22845                           
 22846                           ; BSR set to: 0
 22847  004DB8  C07F  F06C         	movff	disk_read@buff,sdc_disk_read@p_buff
 22848  004DBC  C080  F06D         	movff	disk_read@buff+1,sdc_disk_read@p_buff+1
 22849  004DC0  C081  F06E         	movff	disk_read@sector,sdc_disk_read@sector
 22850  004DC4  C082  F06F         	movff	disk_read@sector+1,sdc_disk_read@sector+1
 22851  004DC8  C083  F070         	movff	disk_read@sector+2,sdc_disk_read@sector+2
 22852  004DCC  C084  F071         	movff	disk_read@sector+3,sdc_disk_read@sector+3
 22853  004DD0  C085  F072         	movff	disk_read@count,sdc_disk_read@count
 22854  004DD4  EC04  F01E         	call	_sdc_disk_read	;wreg free
 22855  004DD8  0100               	movlb	0	; () banked
 22856  004DDA  6F86               	movwf	??_disk_read& (0+255),b
 22857  004DDC  5186               	movf	??_disk_read& (0+255),w,b
 22858  004DDE  6F88               	movwf	disk_read@result& (0+255),b
 22859  004DE0  6B89               	clrf	(disk_read@result+1)& (0+255),b
 22860                           
 22861                           ; BSR set to: 0
 22862                           ;diskio.c: 126: res = result;
 22863  004DE2  C088  F08A         	movff	disk_read@result,disk_read@res
 22864                           
 22865                           ; BSR set to: 0
 22866                           ;diskio.c: 128: buff = data_buff;
 22867  004DE6  C0FC  F07F         	movff	_data_buff,disk_read@buff
 22868  004DEA  C0FD  F080         	movff	_data_buff+1,disk_read@buff+1
 22869                           
 22870                           ; BSR set to: 0
 22871                           ;diskio.c: 129: return res;
 22872  004DEE  518A               	movf	disk_read@res& (0+255),w,b
 22873                           
 22874                           ; BSR set to: 0
 22875  004DF0  0012               	return	
 22876  004DF2                     
 22877                           ; BSR set to: 0
 22878                           ;diskio.c: 138: return res;
 22879                           
 22880                           ; BSR set to: 0
 22881  004DF2  518A               	movf	disk_read@res& (0+255),w,b
 22882                           
 22883                           ; BSR set to: 0
 22884  004DF4  0012               	return	
 22885  004DF6                     l51:
 22886                           
 22887                           ; BSR set to: 0
 22888  004DF6  0100               	movlb	0	; () banked
 22889  004DF8  5187               	movf	disk_read@pdrv& (0+255),w,b
 22890                           
 22891                           ; Switch size 1, requested type "space"
 22892                           ; Number of cases is 3, Range of values is 0 to 2
 22893                           ; switch strategies available:
 22894                           ; Name         Instructions Cycles
 22895                           ; simple_byte           10     6 (average)
 22896                           ;	Chosen strategy is simple_byte
 22897  004DFA  0A00               	xorlw	0	; case 0
 22898  004DFC  B4D8               	btfsc	status,2,c
 22899  004DFE  D7C3               	goto	l52
 22900  004E00  0A01               	xorlw	1	; case 1
 22901  004E02  B4D8               	btfsc	status,2,c
 22902  004E04  D7D9               	goto	l54
 22903  004E06  0A03               	xorlw	3	; case 2
 22904  004E08  B4D8               	btfsc	status,2,c
 22905  004E0A  D7F3               	goto	l55
 22906                           
 22907                           ; BSR set to: 0
 22908                           ;diskio.c: 141: return RES_PARERR;
 22909                           
 22910                           ; BSR set to: 0
 22911  004E0C  0E04               	movlw	4
 22912  004E0E  0012               	return	
 22913  004E10                     __end_of_disk_read:
 22914                           	opt stack 0
 22915                           tosu	equ	0xFFF
 22916                           tosh	equ	0xFFE
 22917                           tosl	equ	0xFFD
 22918                           pclath	equ	0xFFA
 22919                           tblptru	equ	0xFF8
 22920                           tblptrh	equ	0xFF7
 22921                           tblptrl	equ	0xFF6
 22922                           tablat	equ	0xFF5
 22923                           prodh	equ	0xFF4
 22924                           prodl	equ	0xFF3
 22925                           intcon	equ	0xFF2
 22926                           intcon2	equ	0xFF1
 22927                           intcon3	equ	0xFF0
 22928                           indf0	equ	0xFEF
 22929                           postinc0	equ	0xFEE
 22930                           fsr0h	equ	0xFEA
 22931                           fsr0l	equ	0xFE9
 22932                           wreg	equ	0xFE8
 22933                           indf1	equ	0xFE7
 22934                           postinc1	equ	0xFE6
 22935                           postdec1	equ	0xFE5
 22936                           plusw1	equ	0xFE3
 22937                           fsr1h	equ	0xFE2
 22938                           fsr1l	equ	0xFE1
 22939                           indf2	equ	0xFDF
 22940                           postinc2	equ	0xFDE
 22941                           postdec2	equ	0xFDD
 22942                           plusw2	equ	0xFDB
 22943                           fsr2h	equ	0xFDA
 22944                           fsr2l	equ	0xFD9
 22945                           status	equ	0xFD8
 22946                           
 22947 ;; *************** function _sdc_disk_read *****************
 22948 ;; Defined at:
 22949 ;;		line 439 in file "bibliotecas/diskio.c"
 22950 ;; Parameters:    Size  Location     Type
 22951 ;;  p_buff          2   12[BANK0 ] PTR unsigned char 
 22952 ;;		 -> NULL(0), dado_arquivo(20), fs(544), 
 22953 ;;  sector          4   14[BANK0 ] unsigned long 
 22954 ;;  count           1   18[BANK0 ] unsigned char 
 22955 ;; Auto vars:     Size  Location     Type
 22956 ;;  start_add       4   24[BANK0 ] unsigned long 
 22957 ;;  length          2   28[BANK0 ] int 
 22958 ;;  count1          2    0        int 
 22959 ;;  i               2    0        int 
 22960 ;;  buff            1   30[BANK0 ] unsigned char 
 22961 ;;  ptr             1   23[BANK0 ] unsigned char 
 22962 ;;  res             1    0        enum E25
 22963 ;; Return value:  Size  Location     Type
 22964 ;;                  1    wreg      enum E25
 22965 ;; Registers used:
 22966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22967 ;; Tracked objects:
 22968 ;;		On entry : 0/0
 22969 ;;		On exit  : 0/0
 22970 ;;		Unchanged: 0/0
 22971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22972 ;;      Params:         0       7       0       0       0       0       0       0       0
 22973 ;;      Locals:         0       8       0       0       0       0       0       0       0
 22974 ;;      Temps:          0       4       0       0       0       0       0       0       0
 22975 ;;      Totals:         0      19       0       0       0       0       0       0       0
 22976 ;;Total ram usage:       19 bytes
 22977 ;; Hardware stack levels used:    1
 22978 ;; Hardware stack levels required when called:    6
 22979 ;; This function calls:
 22980 ;;		_command
 22981 ;;		_dummy_clocks
 22982 ;;		_proceed
 22983 ;;		_response
 22984 ;; This function is called by:
 22985 ;;		_disk_read
 22986 ;; This function uses a non-reentrant model
 22987 ;;
 22988                           
 22989                           	psect	text90
 22990  003C08                     __ptext90:
 22991                           	opt stack 0
 22992  003C08                     _sdc_disk_read:
 22993                           	opt stack 14
 22994                           
 22995                           ;diskio.c: 446: DRESULT res;
 22996                           ;diskio.c: 447: unsigned char ptr=0X00, buff;
 22997                           
 22998                           ; BSR set to: 0
 22999                           ;incstack = 0
 23000  003C08  0E00               	movlw	0
 23001  003C0A  0100               	movlb	0	; () banked
 23002  003C0C  6F77               	movwf	sdc_disk_read@ptr& (0+255),b
 23003                           
 23004                           ; BSR set to: 0
 23005                           ;diskio.c: 448: unsigned long int start_add;
 23006                           ;diskio.c: 449: int length,i, count1;
 23007                           ;diskio.c: 450: dummy_clocks(10);
 23008  003C0E  0E0A               	movlw	10
 23009  003C10  ECE2  F02C         	call	_dummy_clocks
 23010                           
 23011                           ;diskio.c: 452: start_add = sector*512;
 23012  003C14  C06E  F073         	movff	sdc_disk_read@sector,??_sdc_disk_read
 23013  003C18  C06F  F074         	movff	sdc_disk_read@sector+1,??_sdc_disk_read+1
 23014  003C1C  C070  F075         	movff	sdc_disk_read@sector+2,??_sdc_disk_read+2
 23015  003C20  C071  F076         	movff	sdc_disk_read@sector+3,??_sdc_disk_read+3
 23016  003C24  0E09               	movlw	9
 23017  003C26                     u12955:
 23018  003C26  90D8               	bcf	status,0,c
 23019  003C28  0100               	movlb	0	; () banked
 23020  003C2A  3773               	rlcf	??_sdc_disk_read& (0+255),f,b
 23021  003C2C  3774               	rlcf	(??_sdc_disk_read+1)& (0+255),f,b
 23022  003C2E  3775               	rlcf	(??_sdc_disk_read+2)& (0+255),f,b
 23023  003C30  3776               	rlcf	(??_sdc_disk_read+3)& (0+255),f,b
 23024  003C32  2EE8               	decfsz	wreg,f,c
 23025  003C34  D7F8               	goto	u12955
 23026  003C36  C073  F078         	movff	??_sdc_disk_read,sdc_disk_read@start_add
 23027  003C3A  C074  F079         	movff	??_sdc_disk_read+1,sdc_disk_read@start_add+1
 23028  003C3E  C075  F07A         	movff	??_sdc_disk_read+2,sdc_disk_read@start_add+2
 23029  003C42  C076  F07B         	movff	??_sdc_disk_read+3,sdc_disk_read@start_add+3
 23030                           
 23031                           ; BSR set to: 0
 23032                           ;diskio.c: 455: if(sector != 1)
 23033  003C46  056E               	decf	sdc_disk_read@sector& (0+255),w,b
 23034  003C48  116F               	iorwf	(sdc_disk_read@sector+1)& (0+255),w,b
 23035  003C4A  1170               	iorwf	(sdc_disk_read@sector+2)& (0+255),w,b
 23036  003C4C  1171               	iorwf	(sdc_disk_read@sector+3)& (0+255),w,b
 23037  003C4E  B4D8               	btfsc	status,2,c
 23038  003C50  D01D               	goto	l127
 23039                           
 23040                           ; BSR set to: 0
 23041                           ;diskio.c: 456: {
 23042                           ;diskio.c: 457: dummy_clocks(10);
 23043  003C52  0E0A               	movlw	10
 23044  003C54  ECE2  F02C         	call	_dummy_clocks
 23045                           
 23046                           ;diskio.c: 458: command(0X52,start_add ,0X00);
 23047  003C58  C078  F065         	movff	sdc_disk_read@start_add,command@arg
 23048  003C5C  C079  F066         	movff	sdc_disk_read@start_add+1,command@arg+1
 23049  003C60  C07A  F067         	movff	sdc_disk_read@start_add+2,command@arg+2
 23050  003C64  C07B  F068         	movff	sdc_disk_read@start_add+3,command@arg+3
 23051  003C68  0E00               	movlw	0
 23052  003C6A  0100               	movlb	0	; () banked
 23053  003C6C  6F69               	movwf	command@CRC& (0+255),b
 23054  003C6E  0E52               	movlw	82
 23055  003C70  EC2B  F02A         	call	_command
 23056                           
 23057                           ;diskio.c: 459: proceed();
 23058  003C74  ECBC  F02F         	call	_proceed	;wreg free
 23059  003C78                     
 23060                           ;diskio.c: 461: buff = response();
 23061  003C78  ECB5  F02F         	call	_response	;wreg free
 23062  003C7C  0100               	movlb	0	; () banked
 23063  003C7E  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 23064                           
 23065                           ; BSR set to: 0
 23066                           ;diskio.c: 462: }while(buff!=0X00);
 23067  003C80  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 23068  003C82  A4D8               	btfss	status,2,c
 23069  003C84  D7F9               	goto	l128
 23070                           
 23071                           ; BSR set to: 0
 23072                           ;diskio.c: 463: proceed();
 23073                           
 23074                           ; BSR set to: 0
 23075  003C86  ECBC  F02F         	call	_proceed	;wreg free
 23076                           
 23077                           ;diskio.c: 464: }
 23078  003C8A  D021               	goto	l133
 23079  003C8C                     l127:
 23080                           
 23081                           ;diskio.c: 465: else
 23082                           ;diskio.c: 466: {
 23083                           ;diskio.c: 467: dummy_clocks(10);
 23084  003C8C  0E0A               	movlw	10
 23085  003C8E  ECE2  F02C         	call	_dummy_clocks
 23086                           
 23087                           ;diskio.c: 468: command(0X51,sector ,0X00);
 23088  003C92  C06E  F065         	movff	sdc_disk_read@sector,command@arg
 23089  003C96  C06F  F066         	movff	sdc_disk_read@sector+1,command@arg+1
 23090  003C9A  C070  F067         	movff	sdc_disk_read@sector+2,command@arg+2
 23091  003C9E  C071  F068         	movff	sdc_disk_read@sector+3,command@arg+3
 23092  003CA2  0E00               	movlw	0
 23093  003CA4  0100               	movlb	0	; () banked
 23094  003CA6  6F69               	movwf	command@CRC& (0+255),b
 23095  003CA8  0E51               	movlw	81
 23096  003CAA  EC2B  F02A         	call	_command
 23097                           
 23098                           ;diskio.c: 469: proceed();
 23099  003CAE  ECBC  F02F         	call	_proceed	;wreg free
 23100  003CB2                     
 23101                           ;diskio.c: 471: buff = response();
 23102  003CB2  ECB5  F02F         	call	_response	;wreg free
 23103  003CB6  0100               	movlb	0	; () banked
 23104  003CB8  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 23105                           
 23106                           ; BSR set to: 0
 23107                           ;diskio.c: 472: }while(buff!=0X00);
 23108  003CBA  517E               	movf	sdc_disk_read@buff& (0+255),w,b
 23109  003CBC  A4D8               	btfss	status,2,c
 23110  003CBE  D7F9               	goto	l131
 23111                           
 23112                           ; BSR set to: 0
 23113                           ;diskio.c: 473: proceed();
 23114                           
 23115                           ; BSR set to: 0
 23116  003CC0  ECBC  F02F         	call	_proceed	;wreg free
 23117                           
 23118                           ;diskio.c: 474: }
 23119                           ;diskio.c: 478: while(buff!=0xFE)
 23120  003CC4  D004               	goto	l133
 23121  003CC6                     
 23122                           ;diskio.c: 479: {
 23123                           ;diskio.c: 480: buff = response();
 23124  003CC6  ECB5  F02F         	call	_response	;wreg free
 23125  003CCA  0100               	movlb	0	; () banked
 23126  003CCC  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 23127  003CCE                     l133:
 23128                           
 23129                           ; BSR set to: 0
 23130  003CCE  0EFE               	movlw	254
 23131  003CD0  0100               	movlb	0	; () banked
 23132  003CD2  197E               	xorwf	sdc_disk_read@buff& (0+255),w,b
 23133  003CD4  A4D8               	btfss	status,2,c
 23134  003CD6  D7F7               	goto	l134
 23135                           
 23136                           ; BSR set to: 0
 23137                           ;diskio.c: 481: }
 23138                           ;diskio.c: 483: length = 0;
 23139                           
 23140                           ; BSR set to: 0
 23141  003CD8  0E00               	movlw	0
 23142  003CDA  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 23143  003CDC  0E00               	movlw	0
 23144  003CDE  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 23145                           
 23146                           ;diskio.c: 484: while ( length < 512 )
 23147  003CE0  D00C               	goto	l136
 23148  003CE2                     
 23149                           ; BSR set to: 0
 23150                           ;diskio.c: 485: {
 23151                           ;diskio.c: 486: p_buff[length] = response();
 23152                           
 23153                           ; BSR set to: 0
 23154  003CE2  517C               	movf	sdc_disk_read@length& (0+255),w,b
 23155  003CE4  256C               	addwf	sdc_disk_read@p_buff& (0+255),w,b
 23156  003CE6  6ED9               	movwf	fsr2l,c
 23157  003CE8  517D               	movf	(sdc_disk_read@length+1)& (0+255),w,b
 23158  003CEA  216D               	addwfc	(sdc_disk_read@p_buff+1)& (0+255),w,b
 23159  003CEC  6EDA               	movwf	fsr2h,c
 23160  003CEE  ECB5  F02F         	call	_response	;wreg free
 23161  003CF2  6EDF               	movwf	indf2,c
 23162                           
 23163                           ;diskio.c: 487: length++;
 23164  003CF4  0100               	movlb	0	; () banked
 23165  003CF6  4B7C               	infsnz	sdc_disk_read@length& (0+255),f,b
 23166  003CF8  2B7D               	incf	(sdc_disk_read@length+1)& (0+255),f,b
 23167  003CFA                     l136:
 23168                           
 23169                           ; BSR set to: 0
 23170                           
 23171                           ; BSR set to: 0
 23172  003CFA  BF7D               	btfsc	(sdc_disk_read@length+1)& (0+255),7,b
 23173  003CFC  D7F2               	goto	l137
 23174  003CFE  0E02               	movlw	2
 23175  003D00  5D7D               	subwf	(sdc_disk_read@length+1)& (0+255),w,b
 23176  003D02  A0D8               	btfss	status,0,c
 23177  003D04  D7EE               	goto	l137
 23178                           
 23179                           ; BSR set to: 0
 23180                           ;diskio.c: 488: }
 23181                           ;diskio.c: 490: length = 0;
 23182                           
 23183                           ; BSR set to: 0
 23184  003D06  0E00               	movlw	0
 23185  003D08  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 23186  003D0A  0E00               	movlw	0
 23187  003D0C  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 23188                           
 23189                           ; BSR set to: 0
 23190                           ;diskio.c: 491: dummy_clocks(10);
 23191  003D0E  0E0A               	movlw	10
 23192  003D10  ECE2  F02C         	call	_dummy_clocks
 23193                           
 23194                           ;diskio.c: 493: command(0X4C,0X00000000,0X00);
 23195  003D14  0E00               	movlw	0
 23196  003D16  0100               	movlb	0	; () banked
 23197  003D18  6F65               	movwf	command@arg& (0+255),b
 23198  003D1A  0E00               	movlw	0
 23199  003D1C  6F66               	movwf	(command@arg+1)& (0+255),b
 23200  003D1E  0E00               	movlw	0
 23201  003D20  6F67               	movwf	(command@arg+2)& (0+255),b
 23202  003D22  0E00               	movlw	0
 23203  003D24  6F68               	movwf	(command@arg+3)& (0+255),b
 23204  003D26  0E00               	movlw	0
 23205  003D28  6F69               	movwf	command@CRC& (0+255),b
 23206  003D2A  0E4C               	movlw	76
 23207  003D2C  EC2B  F02A         	call	_command
 23208                           
 23209                           ;diskio.c: 494: proceed();
 23210  003D30  ECBC  F02F         	call	_proceed	;wreg free
 23211  003D34                     
 23212                           ;diskio.c: 496: buff = response();
 23213  003D34  ECB5  F02F         	call	_response	;wreg free
 23214  003D38  0100               	movlb	0	; () banked
 23215  003D3A  6F7E               	movwf	sdc_disk_read@buff& (0+255),b
 23216                           
 23217                           ; BSR set to: 0
 23218                           ;diskio.c: 497: }while(buff!=0xFF);
 23219  003D3C  297E               	incf	sdc_disk_read@buff& (0+255),w,b
 23220  003D3E  A4D8               	btfss	status,2,c
 23221  003D40  D7F9               	goto	l139
 23222                           
 23223                           ; BSR set to: 0
 23224                           ;diskio.c: 499: length = 0;
 23225                           
 23226                           ; BSR set to: 0
 23227  003D42  0E00               	movlw	0
 23228  003D44  6F7D               	movwf	(sdc_disk_read@length+1)& (0+255),b
 23229  003D46  0E00               	movlw	0
 23230  003D48  6F7C               	movwf	sdc_disk_read@length& (0+255),b
 23231                           
 23232                           ; BSR set to: 0
 23233                           ;diskio.c: 500: return RES_OK;
 23234  003D4A  0E00               	movlw	0
 23235  003D4C  0012               	return	
 23236  003D4E                     __end_of_sdc_disk_read:
 23237                           	opt stack 0
 23238                           tosu	equ	0xFFF
 23239                           tosh	equ	0xFFE
 23240                           tosl	equ	0xFFD
 23241                           pclath	equ	0xFFA
 23242                           tblptru	equ	0xFF8
 23243                           tblptrh	equ	0xFF7
 23244                           tblptrl	equ	0xFF6
 23245                           tablat	equ	0xFF5
 23246                           prodh	equ	0xFF4
 23247                           prodl	equ	0xFF3
 23248                           intcon	equ	0xFF2
 23249                           intcon2	equ	0xFF1
 23250                           intcon3	equ	0xFF0
 23251                           indf0	equ	0xFEF
 23252                           postinc0	equ	0xFEE
 23253                           fsr0h	equ	0xFEA
 23254                           fsr0l	equ	0xFE9
 23255                           wreg	equ	0xFE8
 23256                           indf1	equ	0xFE7
 23257                           postinc1	equ	0xFE6
 23258                           postdec1	equ	0xFE5
 23259                           plusw1	equ	0xFE3
 23260                           fsr1h	equ	0xFE2
 23261                           fsr1l	equ	0xFE1
 23262                           indf2	equ	0xFDF
 23263                           postinc2	equ	0xFDE
 23264                           postdec2	equ	0xFDD
 23265                           plusw2	equ	0xFDB
 23266                           fsr2h	equ	0xFDA
 23267                           fsr2l	equ	0xFD9
 23268                           status	equ	0xFD8
 23269                           
 23270 ;; *************** function _response *****************
 23271 ;; Defined at:
 23272 ;;		line 52 in file "bibliotecas/SDCard.c"
 23273 ;; Parameters:    Size  Location     Type
 23274 ;;		None
 23275 ;; Auto vars:     Size  Location     Type
 23276 ;;  buff            1    0[BANK0 ] unsigned char 
 23277 ;; Return value:  Size  Location     Type
 23278 ;;                  1    wreg      unsigned char 
 23279 ;; Registers used:
 23280 ;;		wreg, status,2, cstack
 23281 ;; Tracked objects:
 23282 ;;		On entry : 0/0
 23283 ;;		On exit  : 0/0
 23284 ;;		Unchanged: 0/0
 23285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23286 ;;      Params:         0       0       0       0       0       0       0       0       0
 23287 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23288 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23289 ;;      Totals:         0       1       0       0       0       0       0       0       0
 23290 ;;Total ram usage:        1 bytes
 23291 ;; Hardware stack levels used:    1
 23292 ;; Hardware stack levels required when called:    4
 23293 ;; This function calls:
 23294 ;;		_leitura_SPI
 23295 ;; This function is called by:
 23296 ;;		_sdc_reset
 23297 ;;		_sdc_disk_initialize
 23298 ;;		_sdc_disk_read
 23299 ;;		_sdc_disk_write
 23300 ;; This function uses a non-reentrant model
 23301 ;;
 23302                           
 23303                           	psect	text91
 23304  005F6A                     __ptext91:
 23305                           	opt stack 0
 23306  005F6A                     _response:
 23307                           	opt stack 15
 23308                           
 23309                           ;SDCard.c: 54: unsigned char buff;
 23310                           ;SDCard.c: 55: LATBbits.LATB5 = 0;
 23311                           
 23312                           ; BSR set to: 0
 23313                           ;incstack = 0
 23314  005F6A  9A8A               	bcf	3978,5,c	;volatile
 23315                           
 23316                           ;SDCard.c: 56: buff= leitura_SPI();
 23317  005F6C  ECC2  F02F         	call	_leitura_SPI	;wreg free
 23318  005F70  0100               	movlb	0	; () banked
 23319  005F72  6F60               	movwf	response@buff& (0+255),b
 23320                           
 23321                           ; BSR set to: 0
 23322                           ;SDCard.c: 57: return buff;
 23323  005F74  5160               	movf	response@buff& (0+255),w,b
 23324  005F76  0012               	return	
 23325  005F78                     __end_of_response:
 23326                           	opt stack 0
 23327                           tosu	equ	0xFFF
 23328                           tosh	equ	0xFFE
 23329                           tosl	equ	0xFFD
 23330                           pclath	equ	0xFFA
 23331                           tblptru	equ	0xFF8
 23332                           tblptrh	equ	0xFF7
 23333                           tblptrl	equ	0xFF6
 23334                           tablat	equ	0xFF5
 23335                           prodh	equ	0xFF4
 23336                           prodl	equ	0xFF3
 23337                           intcon	equ	0xFF2
 23338                           intcon2	equ	0xFF1
 23339                           intcon3	equ	0xFF0
 23340                           indf0	equ	0xFEF
 23341                           postinc0	equ	0xFEE
 23342                           fsr0h	equ	0xFEA
 23343                           fsr0l	equ	0xFE9
 23344                           wreg	equ	0xFE8
 23345                           indf1	equ	0xFE7
 23346                           postinc1	equ	0xFE6
 23347                           postdec1	equ	0xFE5
 23348                           plusw1	equ	0xFE3
 23349                           fsr1h	equ	0xFE2
 23350                           fsr1l	equ	0xFE1
 23351                           indf2	equ	0xFDF
 23352                           postinc2	equ	0xFDE
 23353                           postdec2	equ	0xFDD
 23354                           plusw2	equ	0xFDB
 23355                           fsr2h	equ	0xFDA
 23356                           fsr2l	equ	0xFD9
 23357                           status	equ	0xFD8
 23358                           
 23359 ;; *************** function _proceed *****************
 23360 ;; Defined at:
 23361 ;;		line 85 in file "bibliotecas/SDCard.c"
 23362 ;; Parameters:    Size  Location     Type
 23363 ;;		None
 23364 ;; Auto vars:     Size  Location     Type
 23365 ;;		None
 23366 ;; Return value:  Size  Location     Type
 23367 ;;                  1    wreg      void 
 23368 ;; Registers used:
 23369 ;;		wreg, cstack
 23370 ;; Tracked objects:
 23371 ;;		On entry : 0/0
 23372 ;;		On exit  : 0/0
 23373 ;;		Unchanged: 0/0
 23374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23375 ;;      Params:         0       0       0       0       0       0       0       0       0
 23376 ;;      Locals:         0       0       0       0       0       0       0       0       0
 23377 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23378 ;;      Totals:         0       0       0       0       0       0       0       0       0
 23379 ;;Total ram usage:        0 bytes
 23380 ;; Hardware stack levels used:    1
 23381 ;; Hardware stack levels required when called:    4
 23382 ;; This function calls:
 23383 ;;		_escreve_SPI
 23384 ;; This function is called by:
 23385 ;;		_sdc_reset
 23386 ;;		_sdc_disk_initialize
 23387 ;;		_sdc_disk_read
 23388 ;;		_sdc_disk_write
 23389 ;;		_sdcard_init
 23390 ;; This function uses a non-reentrant model
 23391 ;;
 23392                           
 23393                           	psect	text92
 23394  005F78                     __ptext92:
 23395                           	opt stack 0
 23396  005F78                     _proceed:
 23397                           	opt stack 15
 23398                           
 23399                           ;SDCard.c: 87: LATBbits.LATB5 = 0;
 23400                           
 23401                           ; BSR set to: 0
 23402                           ;incstack = 0
 23403  005F78  9A8A               	bcf	3978,5,c	;volatile
 23404                           
 23405                           ;SDCard.c: 88: escreve_SPI(0xFF);
 23406  005F7A  0EFF               	movlw	255
 23407  005F7C  EC7A  F02F         	call	_escreve_SPI
 23408                           
 23409                           ;SDCard.c: 89: LATBbits.LATB5 = 1;
 23410  005F80  8A8A               	bsf	3978,5,c	;volatile
 23411  005F82  0012               	return		;funcret
 23412  005F84                     __end_of_proceed:
 23413                           	opt stack 0
 23414                           tosu	equ	0xFFF
 23415                           tosh	equ	0xFFE
 23416                           tosl	equ	0xFFD
 23417                           pclath	equ	0xFFA
 23418                           tblptru	equ	0xFF8
 23419                           tblptrh	equ	0xFF7
 23420                           tblptrl	equ	0xFF6
 23421                           tablat	equ	0xFF5
 23422                           prodh	equ	0xFF4
 23423                           prodl	equ	0xFF3
 23424                           intcon	equ	0xFF2
 23425                           intcon2	equ	0xFF1
 23426                           intcon3	equ	0xFF0
 23427                           indf0	equ	0xFEF
 23428                           postinc0	equ	0xFEE
 23429                           fsr0h	equ	0xFEA
 23430                           fsr0l	equ	0xFE9
 23431                           wreg	equ	0xFE8
 23432                           indf1	equ	0xFE7
 23433                           postinc1	equ	0xFE6
 23434                           postdec1	equ	0xFE5
 23435                           plusw1	equ	0xFE3
 23436                           fsr1h	equ	0xFE2
 23437                           fsr1l	equ	0xFE1
 23438                           indf2	equ	0xFDF
 23439                           postinc2	equ	0xFDE
 23440                           postdec2	equ	0xFDD
 23441                           plusw2	equ	0xFDB
 23442                           fsr2h	equ	0xFDA
 23443                           fsr2l	equ	0xFD9
 23444                           status	equ	0xFD8
 23445                           
 23446 ;; *************** function _command *****************
 23447 ;; Defined at:
 23448 ;;		line 118 in file "bibliotecas/SDCard.c"
 23449 ;; Parameters:    Size  Location     Type
 23450 ;;  CMD             1    wreg     unsigned char 
 23451 ;;  arg             4    5[BANK0 ] unsigned long 
 23452 ;;  CRC             1    9[BANK0 ] unsigned char 
 23453 ;; Auto vars:     Size  Location     Type
 23454 ;;  CMD             1   10[BANK0 ] unsigned char 
 23455 ;;  argument        1   11[BANK0 ] unsigned char 
 23456 ;; Return value:  Size  Location     Type
 23457 ;;                  1    wreg      void 
 23458 ;; Registers used:
 23459 ;;		wreg, status,2, status,0, cstack
 23460 ;; Tracked objects:
 23461 ;;		On entry : 0/0
 23462 ;;		On exit  : 0/0
 23463 ;;		Unchanged: 0/0
 23464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23465 ;;      Params:         0       5       0       0       0       0       0       0       0
 23466 ;;      Locals:         0       2       0       0       0       0       0       0       0
 23467 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23468 ;;      Totals:         0       7       0       0       0       0       0       0       0
 23469 ;;Total ram usage:        7 bytes
 23470 ;; Hardware stack levels used:    1
 23471 ;; Hardware stack levels required when called:    5
 23472 ;; This function calls:
 23473 ;;		_dummy_clocks
 23474 ;;		_escreve_SPI
 23475 ;;		_wait_ready
 23476 ;; This function is called by:
 23477 ;;		_sdc_reset
 23478 ;;		_sdc_disk_initialize
 23479 ;;		_sdc_disk_read
 23480 ;;		_sdc_disk_write
 23481 ;; This function uses a non-reentrant model
 23482 ;;
 23483                           
 23484                           	psect	text93
 23485  005456                     __ptext93:
 23486                           	opt stack 0
 23487  005456                     _command:
 23488                           	opt stack 14
 23489                           
 23490                           ;incstack = 0
 23491                           ;command@CMD stored from wreg
 23492  005456  0100               	movlb	0	; () banked
 23493  005458  6F6A               	movwf	command@CMD& (0+255),b
 23494                           
 23495                           ;SDCard.c: 120: unsigned char argument;
 23496                           ;SDCard.c: 122: if (wait_ready() != 0xFF)
 23497  00545A  ECF3  F02D         	call	_wait_ready	;wreg free
 23498  00545E  0AFF               	xorlw	255
 23499  005460  A4D8               	btfss	status,2,c
 23500  005462  D004               	goto	l623
 23501  005464  D008               	goto	u12940
 23502  005466                     
 23503                           ;SDCard.c: 125: {
 23504                           ;SDCard.c: 126: dummy_clocks(10);
 23505  005466  0E0A               	movlw	10
 23506  005468  ECE2  F02C         	call	_dummy_clocks
 23507  00546C                     l623:
 23508  00546C  ECF3  F02D         	call	_wait_ready	;wreg free
 23509  005470  0AFF               	xorlw	255
 23510  005472  A4D8               	btfss	status,2,c
 23511  005474  D7F8               	goto	l624
 23512  005476                     u12940:
 23513                           
 23514                           ;SDCard.c: 127: }
 23515                           ;SDCard.c: 128: }
 23516                           ;SDCard.c: 129: escreve_SPI(0xFF);
 23517  005476  0EFF               	movlw	255
 23518  005478  EC7A  F02F         	call	_escreve_SPI
 23519                           
 23520                           ;SDCard.c: 130: escreve_SPI(CMD);
 23521  00547C  0100               	movlb	0	; () banked
 23522  00547E  516A               	movf	command@CMD& (0+255),w,b
 23523  005480  EC7A  F02F         	call	_escreve_SPI
 23524                           
 23525                           ;SDCard.c: 131: argument = arg>>24;
 23526  005484  C068  F06B         	movff	command@arg+3,command@argument
 23527                           
 23528                           ;SDCard.c: 132: escreve_SPI(argument);
 23529  005488  0100               	movlb	0	; () banked
 23530  00548A  516B               	movf	command@argument& (0+255),w,b
 23531  00548C  EC7A  F02F         	call	_escreve_SPI
 23532                           
 23533                           ;SDCard.c: 133: argument = arg>>16;
 23534  005490  C067  F06B         	movff	command@arg+2,command@argument
 23535                           
 23536                           ;SDCard.c: 134: escreve_SPI(argument);
 23537  005494  0100               	movlb	0	; () banked
 23538  005496  516B               	movf	command@argument& (0+255),w,b
 23539  005498  EC7A  F02F         	call	_escreve_SPI
 23540                           
 23541                           ;SDCard.c: 135: argument = arg>>8;
 23542  00549C  C066  F06B         	movff	command@arg+1,command@argument
 23543                           
 23544                           ;SDCard.c: 136: escreve_SPI(argument);
 23545  0054A0  0100               	movlb	0	; () banked
 23546  0054A2  516B               	movf	command@argument& (0+255),w,b
 23547  0054A4  EC7A  F02F         	call	_escreve_SPI
 23548                           
 23549                           ;SDCard.c: 137: argument = arg;
 23550  0054A8  C065  F06B         	movff	command@arg,command@argument
 23551                           
 23552                           ;SDCard.c: 138: escreve_SPI(argument);
 23553  0054AC  0100               	movlb	0	; () banked
 23554  0054AE  516B               	movf	command@argument& (0+255),w,b
 23555  0054B0  EC7A  F02F         	call	_escreve_SPI
 23556                           
 23557                           ;SDCard.c: 139: escreve_SPI(CRC);
 23558  0054B4  0100               	movlb	0	; () banked
 23559  0054B6  5169               	movf	command@CRC& (0+255),w,b
 23560  0054B8  EC7A  F02F         	call	_escreve_SPI
 23561  0054BC  0012               	return		;funcret
 23562  0054BE                     __end_of_command:
 23563                           	opt stack 0
 23564                           tosu	equ	0xFFF
 23565                           tosh	equ	0xFFE
 23566                           tosl	equ	0xFFD
 23567                           pclath	equ	0xFFA
 23568                           tblptru	equ	0xFF8
 23569                           tblptrh	equ	0xFF7
 23570                           tblptrl	equ	0xFF6
 23571                           tablat	equ	0xFF5
 23572                           prodh	equ	0xFF4
 23573                           prodl	equ	0xFF3
 23574                           intcon	equ	0xFF2
 23575                           intcon2	equ	0xFF1
 23576                           intcon3	equ	0xFF0
 23577                           indf0	equ	0xFEF
 23578                           postinc0	equ	0xFEE
 23579                           fsr0h	equ	0xFEA
 23580                           fsr0l	equ	0xFE9
 23581                           wreg	equ	0xFE8
 23582                           indf1	equ	0xFE7
 23583                           postinc1	equ	0xFE6
 23584                           postdec1	equ	0xFE5
 23585                           plusw1	equ	0xFE3
 23586                           fsr1h	equ	0xFE2
 23587                           fsr1l	equ	0xFE1
 23588                           indf2	equ	0xFDF
 23589                           postinc2	equ	0xFDE
 23590                           postdec2	equ	0xFDD
 23591                           plusw2	equ	0xFDB
 23592                           fsr2h	equ	0xFDA
 23593                           fsr2l	equ	0xFD9
 23594                           status	equ	0xFD8
 23595                           
 23596 ;; *************** function _wait_ready *****************
 23597 ;; Defined at:
 23598 ;;		line 98 in file "bibliotecas/SDCard.c"
 23599 ;; Parameters:    Size  Location     Type
 23600 ;;		None
 23601 ;; Auto vars:     Size  Location     Type
 23602 ;;  msg            10    0        unsigned char [10]
 23603 ;;  timeout         4    0[BANK0 ] unsigned long 
 23604 ;;  res             1    4[BANK0 ] unsigned char 
 23605 ;; Return value:  Size  Location     Type
 23606 ;;                  1    wreg      unsigned char 
 23607 ;; Registers used:
 23608 ;;		wreg, status,2, status,0, cstack
 23609 ;; Tracked objects:
 23610 ;;		On entry : 0/0
 23611 ;;		On exit  : 0/0
 23612 ;;		Unchanged: 0/0
 23613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23614 ;;      Params:         0       0       0       0       0       0       0       0       0
 23615 ;;      Locals:         0       5       0       0       0       0       0       0       0
 23616 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23617 ;;      Totals:         0       5       0       0       0       0       0       0       0
 23618 ;;Total ram usage:        5 bytes
 23619 ;; Hardware stack levels used:    1
 23620 ;; Hardware stack levels required when called:    4
 23621 ;; This function calls:
 23622 ;;		_leitura_SPI
 23623 ;; This function is called by:
 23624 ;;		_command
 23625 ;; This function uses a non-reentrant model
 23626 ;;
 23627                           
 23628                           	psect	text94
 23629  005BE6                     __ptext94:
 23630                           	opt stack 0
 23631  005BE6                     _wait_ready:
 23632                           	opt stack 14
 23633                           
 23634                           ;SDCard.c: 100: BYTE res;
 23635                           ;SDCard.c: 101: DWORD timeout = 0x7FFF;
 23636                           
 23637                           ;incstack = 0
 23638  005BE6  0EFF               	movlw	255
 23639  005BE8  0100               	movlb	0	; () banked
 23640  005BEA  6F60               	movwf	wait_ready@timeout& (0+255),b
 23641  005BEC  0E7F               	movlw	127
 23642  005BEE  6F61               	movwf	(wait_ready@timeout+1)& (0+255),b
 23643  005BF0  0E00               	movlw	0
 23644  005BF2  6F62               	movwf	(wait_ready@timeout+2)& (0+255),b
 23645  005BF4  0E00               	movlw	0
 23646  005BF6  6F63               	movwf	(wait_ready@timeout+3)& (0+255),b
 23647  005BF8                     
 23648                           ; BSR set to: 0
 23649                           ;SDCard.c: 105: res = leitura_SPI();
 23650                           
 23651                           ; BSR set to: 0
 23652  005BF8  ECC2  F02F         	call	_leitura_SPI	;wreg free
 23653  005BFC  0100               	movlb	0	; () banked
 23654  005BFE  6F64               	movwf	wait_ready@res& (0+255),b
 23655                           
 23656                           ; BSR set to: 0
 23657                           ;SDCard.c: 106: }while ((res != 0xFF) && (--timeout));
 23658  005C00  2964               	incf	wait_ready@res& (0+255),w,b
 23659  005C02  B4D8               	btfsc	status,2,c
 23660  005C04  D00B               	goto	u12920
 23661                           
 23662                           ; BSR set to: 0
 23663  005C06  0760               	decf	wait_ready@timeout& (0+255),f,b
 23664  005C08  0E00               	movlw	0
 23665  005C0A  5B61               	subwfb	(wait_ready@timeout+1)& (0+255),f,b
 23666  005C0C  5B62               	subwfb	(wait_ready@timeout+2)& (0+255),f,b
 23667  005C0E  5B63               	subwfb	(wait_ready@timeout+3)& (0+255),f,b
 23668  005C10  5160               	movf	wait_ready@timeout& (0+255),w,b
 23669  005C12  1161               	iorwf	(wait_ready@timeout+1)& (0+255),w,b
 23670  005C14  1162               	iorwf	(wait_ready@timeout+2)& (0+255),w,b
 23671  005C16  1163               	iorwf	(wait_ready@timeout+3)& (0+255),w,b
 23672  005C18  A4D8               	btfss	status,2,c
 23673  005C1A  D7EE               	goto	l615
 23674  005C1C                     u12920:
 23675                           
 23676                           ; BSR set to: 0
 23677                           ;SDCard.c: 108: return res;
 23678                           
 23679                           ; BSR set to: 0
 23680                           
 23681                           ; BSR set to: 0
 23682  005C1C  5164               	movf	wait_ready@res& (0+255),w,b
 23683  005C1E  0012               	return	
 23684  005C20                     __end_of_wait_ready:
 23685                           	opt stack 0
 23686                           tosu	equ	0xFFF
 23687                           tosh	equ	0xFFE
 23688                           tosl	equ	0xFFD
 23689                           pclath	equ	0xFFA
 23690                           tblptru	equ	0xFF8
 23691                           tblptrh	equ	0xFF7
 23692                           tblptrl	equ	0xFF6
 23693                           tablat	equ	0xFF5
 23694                           prodh	equ	0xFF4
 23695                           prodl	equ	0xFF3
 23696                           intcon	equ	0xFF2
 23697                           intcon2	equ	0xFF1
 23698                           intcon3	equ	0xFF0
 23699                           indf0	equ	0xFEF
 23700                           postinc0	equ	0xFEE
 23701                           fsr0h	equ	0xFEA
 23702                           fsr0l	equ	0xFE9
 23703                           wreg	equ	0xFE8
 23704                           indf1	equ	0xFE7
 23705                           postinc1	equ	0xFE6
 23706                           postdec1	equ	0xFE5
 23707                           plusw1	equ	0xFE3
 23708                           fsr1h	equ	0xFE2
 23709                           fsr1l	equ	0xFE1
 23710                           indf2	equ	0xFDF
 23711                           postinc2	equ	0xFDE
 23712                           postdec2	equ	0xFDD
 23713                           plusw2	equ	0xFDB
 23714                           fsr2h	equ	0xFDA
 23715                           fsr2l	equ	0xFD9
 23716                           status	equ	0xFD8
 23717                           
 23718 ;; *************** function _escreve_SPI *****************
 23719 ;; Defined at:
 23720 ;;		line 105 in file "bibliotecas/SPI.c"
 23721 ;; Parameters:    Size  Location     Type
 23722 ;;  dado            1    wreg     unsigned char 
 23723 ;; Auto vars:     Size  Location     Type
 23724 ;;  dado            1    1[BANK0 ] unsigned char 
 23725 ;;  TempVar         1    0[BANK0 ] unsigned char 
 23726 ;; Return value:  Size  Location     Type
 23727 ;;                  1    wreg      void 
 23728 ;; Registers used:
 23729 ;;		wreg
 23730 ;; Tracked objects:
 23731 ;;		On entry : 0/0
 23732 ;;		On exit  : 0/0
 23733 ;;		Unchanged: 0/0
 23734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23735 ;;      Params:         0       0       0       0       0       0       0       0       0
 23736 ;;      Locals:         0       2       0       0       0       0       0       0       0
 23737 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23738 ;;      Totals:         0       2       0       0       0       0       0       0       0
 23739 ;;Total ram usage:        2 bytes
 23740 ;; Hardware stack levels used:    1
 23741 ;; Hardware stack levels required when called:    3
 23742 ;; This function calls:
 23743 ;;		Nothing
 23744 ;; This function is called by:
 23745 ;;		_sdc_disk_write
 23746 ;;		_proceed
 23747 ;;		_command
 23748 ;; This function uses a non-reentrant model
 23749 ;;
 23750                           
 23751                           	psect	text95
 23752  005EF4                     __ptext95:
 23753                           	opt stack 0
 23754  005EF4                     _escreve_SPI:
 23755                           	opt stack 15
 23756                           
 23757                           ; BSR set to: 0
 23758                           ;incstack = 0
 23759                           ;escreve_SPI@dado stored from wreg
 23760  005EF4  0100               	movlb	0	; () banked
 23761  005EF6  6F61               	movwf	escreve_SPI@dado& (0+255),b
 23762                           
 23763                           ;SPI.c: 107: unsigned char TempVar;
 23764                           ;SPI.c: 108: TempVar = SSPBUF;
 23765  005EF8  CFC9 F060          	movff	4041,escreve_SPI@TempVar	;volatile
 23766                           
 23767                           ;SPI.c: 109: PIR1bits.SSPIF = 0;
 23768  005EFC  969E               	bcf	3998,3,c	;volatile
 23769                           
 23770                           ;SPI.c: 111: SSPBUF = dado;
 23771  005EFE  C061  FFC9         	movff	escreve_SPI@dado,4041	;volatile
 23772  005F02  B69E               	btfsc	3998,3,c	;volatile
 23773  005F04  0012               	return	
 23774  005F06  D7FD               	goto	l729
 23775  005F08                     __end_of_escreve_SPI:
 23776                           	opt stack 0
 23777                           tosu	equ	0xFFF
 23778                           tosh	equ	0xFFE
 23779                           tosl	equ	0xFFD
 23780                           pclath	equ	0xFFA
 23781                           tblptru	equ	0xFF8
 23782                           tblptrh	equ	0xFF7
 23783                           tblptrl	equ	0xFF6
 23784                           tablat	equ	0xFF5
 23785                           prodh	equ	0xFF4
 23786                           prodl	equ	0xFF3
 23787                           intcon	equ	0xFF2
 23788                           intcon2	equ	0xFF1
 23789                           intcon3	equ	0xFF0
 23790                           indf0	equ	0xFEF
 23791                           postinc0	equ	0xFEE
 23792                           fsr0h	equ	0xFEA
 23793                           fsr0l	equ	0xFE9
 23794                           wreg	equ	0xFE8
 23795                           indf1	equ	0xFE7
 23796                           postinc1	equ	0xFE6
 23797                           postdec1	equ	0xFE5
 23798                           plusw1	equ	0xFE3
 23799                           fsr1h	equ	0xFE2
 23800                           fsr1l	equ	0xFE1
 23801                           indf2	equ	0xFDF
 23802                           postinc2	equ	0xFDE
 23803                           postdec2	equ	0xFDD
 23804                           plusw2	equ	0xFDB
 23805                           fsr2h	equ	0xFDA
 23806                           fsr2l	equ	0xFD9
 23807                           status	equ	0xFD8
 23808                           
 23809 ;; *************** function _dummy_clocks *****************
 23810 ;; Defined at:
 23811 ;;		line 67 in file "bibliotecas/SDCard.c"
 23812 ;; Parameters:    Size  Location     Type
 23813 ;;  n               1    wreg     unsigned char 
 23814 ;; Auto vars:     Size  Location     Type
 23815 ;;  n               1    2[BANK0 ] unsigned char 
 23816 ;;  i               2    3[BANK0 ] unsigned int 
 23817 ;; Return value:  Size  Location     Type
 23818 ;;                  1    wreg      void 
 23819 ;; Registers used:
 23820 ;;		wreg, status,2, status,0, cstack
 23821 ;; Tracked objects:
 23822 ;;		On entry : 0/0
 23823 ;;		On exit  : 0/0
 23824 ;;		Unchanged: 0/0
 23825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23826 ;;      Params:         0       0       0       0       0       0       0       0       0
 23827 ;;      Locals:         0       3       0       0       0       0       0       0       0
 23828 ;;      Temps:          0       2       0       0       0       0       0       0       0
 23829 ;;      Totals:         0       5       0       0       0       0       0       0       0
 23830 ;;Total ram usage:        5 bytes
 23831 ;; Hardware stack levels used:    1
 23832 ;; Hardware stack levels required when called:    4
 23833 ;; This function calls:
 23834 ;;		_leitura_SPI
 23835 ;; This function is called by:
 23836 ;;		_sdc_disk_initialize
 23837 ;;		_sdc_disk_read
 23838 ;;		_sdc_disk_write
 23839 ;;		_command
 23840 ;; This function uses a non-reentrant model
 23841 ;;
 23842                           
 23843                           	psect	text96
 23844  0059C4                     __ptext96:
 23845                           	opt stack 0
 23846  0059C4                     _dummy_clocks:
 23847                           	opt stack 15
 23848                           
 23849                           ;incstack = 0
 23850                           ;dummy_clocks@n stored from wreg
 23851  0059C4  0100               	movlb	0	; () banked
 23852  0059C6  6F62               	movwf	dummy_clocks@n& (0+255),b
 23853                           
 23854                           ;SDCard.c: 69: unsigned int i;
 23855                           ;SDCard.c: 70: _delay((unsigned long)((1)*(48000000/4000.0)));
 23856  0059C8  0E10               	movlw	16
 23857  0059CA  0100               	movlb	0	; () banked
 23858  0059CC  6F60               	movwf	??_dummy_clocks& (0+255),b
 23859  0059CE  0E94               	movlw	148
 23860  0059D0                     u18667:
 23861  0059D0  2EE8               	decfsz	wreg,f,c
 23862  0059D2  D7FE               	bra	u18667
 23863  0059D4  2F60               	decfsz	??_dummy_clocks& (0+255),f,b
 23864  0059D6  D7FC               	bra	u18667
 23865  0059D8  F000               	nop	
 23866                           
 23867                           ;SDCard.c: 71: for(i=0;i<n;i++)
 23868  0059DA  0E00               	movlw	0
 23869  0059DC  0100               	movlb	0	; () banked
 23870  0059DE  6F64               	movwf	(dummy_clocks@i+1)& (0+255),b
 23871  0059E0  0E00               	movlw	0
 23872  0059E2  6F63               	movwf	dummy_clocks@i& (0+255),b
 23873  0059E4  D007               	goto	l606
 23874  0059E6                     l607:
 23875                           
 23876                           ; BSR set to: 0
 23877                           ;SDCard.c: 72: {
 23878                           ;SDCard.c: 73: LATBbits.LATB5 = 1;
 23879  0059E6  8A8A               	bsf	3978,5,c	;volatile
 23880                           
 23881                           ; BSR set to: 0
 23882                           ;SDCard.c: 74: leitura_SPI();
 23883  0059E8  ECC2  F02F         	call	_leitura_SPI	;wreg free
 23884                           
 23885                           ;SDCard.c: 75: LATBbits.LATB5 = 0;
 23886  0059EC  9A8A               	bcf	3978,5,c	;volatile
 23887  0059EE  0100               	movlb	0	; () banked
 23888  0059F0  4B63               	infsnz	dummy_clocks@i& (0+255),f,b
 23889  0059F2  2B64               	incf	(dummy_clocks@i+1)& (0+255),f,b
 23890  0059F4                     l606:
 23891                           
 23892                           ; BSR set to: 0
 23893                           
 23894                           ; BSR set to: 0
 23895  0059F4  5162               	movf	dummy_clocks@n& (0+255),w,b
 23896  0059F6  6F60               	movwf	??_dummy_clocks& (0+255),b
 23897  0059F8  6B61               	clrf	(??_dummy_clocks+1)& (0+255),b
 23898  0059FA  5160               	movf	??_dummy_clocks& (0+255),w,b
 23899  0059FC  5D63               	subwf	dummy_clocks@i& (0+255),w,b
 23900  0059FE  5161               	movf	(??_dummy_clocks+1)& (0+255),w,b
 23901  005A00  5964               	subwfb	(dummy_clocks@i+1)& (0+255),w,b
 23902  005A02  B0D8               	btfsc	status,0,c
 23903  005A04  0012               	return	
 23904  005A06  D7EF               	goto	l607
 23905  005A08                     __end_of_dummy_clocks:
 23906                           	opt stack 0
 23907                           tosu	equ	0xFFF
 23908                           tosh	equ	0xFFE
 23909                           tosl	equ	0xFFD
 23910                           pclath	equ	0xFFA
 23911                           tblptru	equ	0xFF8
 23912                           tblptrh	equ	0xFF7
 23913                           tblptrl	equ	0xFF6
 23914                           tablat	equ	0xFF5
 23915                           prodh	equ	0xFF4
 23916                           prodl	equ	0xFF3
 23917                           intcon	equ	0xFF2
 23918                           intcon2	equ	0xFF1
 23919                           intcon3	equ	0xFF0
 23920                           indf0	equ	0xFEF
 23921                           postinc0	equ	0xFEE
 23922                           fsr0h	equ	0xFEA
 23923                           fsr0l	equ	0xFE9
 23924                           wreg	equ	0xFE8
 23925                           indf1	equ	0xFE7
 23926                           postinc1	equ	0xFE6
 23927                           postdec1	equ	0xFE5
 23928                           plusw1	equ	0xFE3
 23929                           fsr1h	equ	0xFE2
 23930                           fsr1l	equ	0xFE1
 23931                           indf2	equ	0xFDF
 23932                           postinc2	equ	0xFDE
 23933                           postdec2	equ	0xFDD
 23934                           plusw2	equ	0xFDB
 23935                           fsr2h	equ	0xFDA
 23936                           fsr2l	equ	0xFD9
 23937                           status	equ	0xFD8
 23938                           
 23939 ;; *************** function _leitura_SPI *****************
 23940 ;; Defined at:
 23941 ;;		line 90 in file "bibliotecas/SPI.c"
 23942 ;; Parameters:    Size  Location     Type
 23943 ;;		None
 23944 ;; Auto vars:     Size  Location     Type
 23945 ;;		None
 23946 ;; Return value:  Size  Location     Type
 23947 ;;                  1    wreg      unsigned char 
 23948 ;; Registers used:
 23949 ;;		wreg, status,2
 23950 ;; Tracked objects:
 23951 ;;		On entry : 0/0
 23952 ;;		On exit  : 0/0
 23953 ;;		Unchanged: 0/0
 23954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23955 ;;      Params:         0       0       0       0       0       0       0       0       0
 23956 ;;      Locals:         0       0       0       0       0       0       0       0       0
 23957 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23958 ;;      Totals:         0       0       0       0       0       0       0       0       0
 23959 ;;Total ram usage:        0 bytes
 23960 ;; Hardware stack levels used:    1
 23961 ;; Hardware stack levels required when called:    3
 23962 ;; This function calls:
 23963 ;;		Nothing
 23964 ;; This function is called by:
 23965 ;;		_sdc_disk_write
 23966 ;;		_response
 23967 ;;		_dummy_clocks
 23968 ;;		_wait_ready
 23969 ;; This function uses a non-reentrant model
 23970 ;;
 23971                           
 23972                           	psect	text97
 23973  005F84                     __ptext97:
 23974                           	opt stack 0
 23975  005F84                     _leitura_SPI:
 23976                           	opt stack 15
 23977                           
 23978                           ;SPI.c: 92: SSPBUF = 0xFF;
 23979                           
 23980                           ; BSR set to: 0
 23981                           ;incstack = 0
 23982  005F84  68C9               	setf	4041,c	;volatile
 23983                           
 23984                           ;SPI.c: 93: SSPSTATbits.BF = 0;
 23985  005F86  90C7               	bcf	4039,0,c	;volatile
 23986  005F88  A0C7               	btfss	4039,0,c	;volatile
 23987  005F8A  D7FE               	goto	l723
 23988                           
 23989                           ;SPI.c: 95: return (SSPBUF);
 23990  005F8C  50C9               	movf	4041,w,c	;volatile
 23991  005F8E  0012               	return	
 23992  005F90                     __end_of_leitura_SPI:
 23993                           	opt stack 0
 23994                           tosu	equ	0xFFF
 23995                           tosh	equ	0xFFE
 23996                           tosl	equ	0xFFD
 23997                           pclath	equ	0xFFA
 23998                           tblptru	equ	0xFF8
 23999                           tblptrh	equ	0xFF7
 24000                           tblptrl	equ	0xFF6
 24001                           tablat	equ	0xFF5
 24002                           prodh	equ	0xFF4
 24003                           prodl	equ	0xFF3
 24004                           intcon	equ	0xFF2
 24005                           intcon2	equ	0xFF1
 24006                           intcon3	equ	0xFF0
 24007                           indf0	equ	0xFEF
 24008                           postinc0	equ	0xFEE
 24009                           fsr0h	equ	0xFEA
 24010                           fsr0l	equ	0xFE9
 24011                           wreg	equ	0xFE8
 24012                           indf1	equ	0xFE7
 24013                           postinc1	equ	0xFE6
 24014                           postdec1	equ	0xFE5
 24015                           plusw1	equ	0xFE3
 24016                           fsr1h	equ	0xFE2
 24017                           fsr1l	equ	0xFE1
 24018                           indf2	equ	0xFDF
 24019                           postinc2	equ	0xFDE
 24020                           postdec2	equ	0xFDD
 24021                           plusw2	equ	0xFDB
 24022                           fsr2h	equ	0xFDA
 24023                           fsr2l	equ	0xFD9
 24024                           status	equ	0xFD8
 24025                           
 24026 ;; *************** function _disk_ioctl *****************
 24027 ;; Defined at:
 24028 ;;		line 198 in file "bibliotecas/diskio.c"
 24029 ;; Parameters:    Size  Location     Type
 24030 ;;  pdrv            1    wreg     unsigned char 
 24031 ;;  cmd             1    0[BANK0 ] unsigned char 
 24032 ;;  buff            2    1[BANK0 ] PTR void 
 24033 ;;		 -> NULL(0), 
 24034 ;; Auto vars:     Size  Location     Type
 24035 ;;  pdrv            1    3[BANK0 ] unsigned char 
 24036 ;;  result          2    0        int 
 24037 ;;  res             1    4[BANK0 ] enum E25
 24038 ;; Return value:  Size  Location     Type
 24039 ;;                  1    wreg      enum E25
 24040 ;; Registers used:
 24041 ;;		wreg, status,2, status,0
 24042 ;; Tracked objects:
 24043 ;;		On entry : 0/0
 24044 ;;		On exit  : 0/0
 24045 ;;		Unchanged: 0/0
 24046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24047 ;;      Params:         0       3       0       0       0       0       0       0       0
 24048 ;;      Locals:         0       2       0       0       0       0       0       0       0
 24049 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24050 ;;      Totals:         0       5       0       0       0       0       0       0       0
 24051 ;;Total ram usage:        5 bytes
 24052 ;; Hardware stack levels used:    1
 24053 ;; Hardware stack levels required when called:    3
 24054 ;; This function calls:
 24055 ;;		Nothing
 24056 ;; This function is called by:
 24057 ;;		_sync
 24058 ;; This function uses a non-reentrant model
 24059 ;;
 24060                           
 24061                           	psect	text98
 24062  005D1A                     __ptext98:
 24063                           	opt stack 0
 24064  005D1A                     _disk_ioctl:
 24065                           	opt stack 20
 24066                           
 24067                           ;incstack = 0
 24068                           ;disk_ioctl@pdrv stored from wreg
 24069  005D1A  0100               	movlb	0	; () banked
 24070  005D1C  6F63               	movwf	disk_ioctl@pdrv& (0+255),b
 24071                           
 24072                           ;diskio.c: 204: DRESULT res;
 24073                           ;diskio.c: 205: int result;
 24074                           ;diskio.c: 207: switch (pdrv) {
 24075  005D1E  D006               	goto	l67
 24076  005D20                     l68:
 24077                           
 24078                           ; BSR set to: 0
 24079                           ;diskio.c: 212: return res;
 24080  005D20  5164               	movf	disk_ioctl@res& (0+255),w,b
 24081  005D22  0012               	return	
 24082  005D24                     l70:
 24083                           
 24084                           ; BSR set to: 0
 24085                           ;diskio.c: 218: return res;
 24086  005D24  5164               	movf	disk_ioctl@res& (0+255),w,b
 24087  005D26  0012               	return	
 24088  005D28                     l71:
 24089                           
 24090                           ; BSR set to: 0
 24091                           ;diskio.c: 224: return res;
 24092  005D28  5164               	movf	disk_ioctl@res& (0+255),w,b
 24093  005D2A  0012               	return	
 24094  005D2C                     l67:
 24095                           
 24096                           ; BSR set to: 0
 24097  005D2C  0100               	movlb	0	; () banked
 24098  005D2E  5163               	movf	disk_ioctl@pdrv& (0+255),w,b
 24099                           
 24100                           ; Switch size 1, requested type "space"
 24101                           ; Number of cases is 3, Range of values is 0 to 2
 24102                           ; switch strategies available:
 24103                           ; Name         Instructions Cycles
 24104                           ; simple_byte           10     6 (average)
 24105                           ;	Chosen strategy is simple_byte
 24106  005D30  0A00               	xorlw	0	; case 0
 24107  005D32  B4D8               	btfsc	status,2,c
 24108  005D34  D7F5               	goto	l68
 24109  005D36  0A01               	xorlw	1	; case 1
 24110  005D38  B4D8               	btfsc	status,2,c
 24111  005D3A  D7F4               	goto	l70
 24112  005D3C  0A03               	xorlw	3	; case 2
 24113  005D3E  B4D8               	btfsc	status,2,c
 24114  005D40  D7F3               	goto	l71
 24115                           
 24116                           ; BSR set to: 0
 24117                           ;diskio.c: 227: return RES_PARERR;
 24118                           
 24119                           ; BSR set to: 0
 24120  005D42  0E04               	movlw	4
 24121  005D44  0012               	return	
 24122  005D46                     __end_of_disk_ioctl:
 24123                           	opt stack 0
 24124                           tosu	equ	0xFFF
 24125                           tosh	equ	0xFFE
 24126                           tosl	equ	0xFFD
 24127                           pclath	equ	0xFFA
 24128                           tblptru	equ	0xFF8
 24129                           tblptrh	equ	0xFF7
 24130                           tblptrl	equ	0xFF6
 24131                           tablat	equ	0xFF5
 24132                           prodh	equ	0xFF4
 24133                           prodl	equ	0xFF3
 24134                           intcon	equ	0xFF2
 24135                           intcon2	equ	0xFF1
 24136                           intcon3	equ	0xFF0
 24137                           indf0	equ	0xFEF
 24138                           postinc0	equ	0xFEE
 24139                           fsr0h	equ	0xFEA
 24140                           fsr0l	equ	0xFE9
 24141                           wreg	equ	0xFE8
 24142                           indf1	equ	0xFE7
 24143                           postinc1	equ	0xFE6
 24144                           postdec1	equ	0xFE5
 24145                           plusw1	equ	0xFE3
 24146                           fsr1h	equ	0xFE2
 24147                           fsr1l	equ	0xFE1
 24148                           indf2	equ	0xFDF
 24149                           postinc2	equ	0xFDE
 24150                           postdec2	equ	0xFDD
 24151                           plusw2	equ	0xFDB
 24152                           fsr2h	equ	0xFDA
 24153                           fsr2l	equ	0xFD9
 24154                           status	equ	0xFD8
 24155                           
 24156 ;; *************** function _get_fattime *****************
 24157 ;; Defined at:
 24158 ;;		line 810 in file "bibliotecas/tff.c"
 24159 ;; Parameters:    Size  Location     Type
 24160 ;;		None
 24161 ;; Auto vars:     Size  Location     Type
 24162 ;;  f_time         10   52[BANK0 ] struct .
 24163 ;; Return value:  Size  Location     Type
 24164 ;;                  4   10[BANK0 ] unsigned long 
 24165 ;; Registers used:
 24166 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 24167 ;; Tracked objects:
 24168 ;;		On entry : 0/0
 24169 ;;		On exit  : 0/0
 24170 ;;		Unchanged: 0/0
 24171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24172 ;;      Params:         0       4       0       0       0       0       0       0       0
 24173 ;;      Locals:         0      10       0       0       0       0       0       0       0
 24174 ;;      Temps:          0      38       0       0       0       0       0       0       0
 24175 ;;      Totals:         0      52       0       0       0       0       0       0       0
 24176 ;;Total ram usage:       52 bytes
 24177 ;; Hardware stack levels used:    1
 24178 ;; Hardware stack levels required when called:    5
 24179 ;; This function calls:
 24180 ;;		_GPSDay
 24181 ;;		_GPSHour
 24182 ;;		_GPSMinute
 24183 ;;		_GPSMonth
 24184 ;;		_GPSSecond
 24185 ;;		_GPSyear
 24186 ;; This function is called by:
 24187 ;;		_f_open
 24188 ;;		_f_sync
 24189 ;; This function uses a non-reentrant model
 24190 ;;
 24191                           
 24192                           	psect	text99
 24193  003AAC                     __ptext99:
 24194                           	opt stack 0
 24195  003AAC                     _get_fattime:
 24196                           	opt stack 20
 24197                           
 24198                           ;tff.c: 812: fat_time f_time;
 24199                           ;tff.c: 814: f_time.hora = GPSHour() - 3;
 24200                           
 24201                           ; BSR set to: 0
 24202                           ;incstack = 0
 24203  003AAC  EC9A  F02D         	call	_GPSHour	;wreg free
 24204  003AB0  0EFD               	movlw	253
 24205  003AB2  0100               	movlb	0	; () banked
 24206  003AB4  2566               	addwf	?_GPSHour& (0+255),w,b
 24207  003AB6  6F94               	movwf	get_fattime@f_time& (0+255),b
 24208  003AB8  0EFF               	movlw	255
 24209  003ABA  2167               	addwfc	(?_GPSHour+1)& (0+255),w,b
 24210  003ABC  6F95               	movwf	(get_fattime@f_time+1)& (0+255),b
 24211                           
 24212                           ;tff.c: 815: f_time.min = GPSMinute();
 24213  003ABE  EC7C  F02D         	call	_GPSMinute	;wreg free
 24214  003AC2  C066  F096         	movff	?_GPSMinute,get_fattime@f_time+2
 24215  003AC6  C067  F097         	movff	?_GPSMinute+1,get_fattime@f_time+3
 24216                           
 24217                           ;tff.c: 816: f_time.seg = GPSSecond();
 24218  003ACA  EC40  F02D         	call	_GPSSecond	;wreg free
 24219  003ACE  C066  F098         	movff	?_GPSSecond,get_fattime@f_time+4
 24220  003AD2  C067  F099         	movff	?_GPSSecond+1,get_fattime@f_time+5
 24221                           
 24222                           ;tff.c: 817: f_time.ano = GPSyear() + 2000;
 24223  003AD6  EC22  F02D         	call	_GPSyear	;wreg free
 24224  003ADA  0ED0               	movlw	208
 24225  003ADC  0100               	movlb	0	; () banked
 24226  003ADE  2566               	addwf	?_GPSyear& (0+255),w,b
 24227  003AE0  6F9C               	movwf	(get_fattime@f_time+8)& (0+255),b
 24228  003AE2  0E07               	movlw	7
 24229  003AE4  2167               	addwfc	(?_GPSyear+1)& (0+255),w,b
 24230  003AE6  6F9D               	movwf	(get_fattime@f_time+9)& (0+255),b
 24231                           
 24232                           ;tff.c: 818: f_time.mes = GPSMonth();
 24233  003AE8  EC5E  F02D         	call	_GPSMonth	;wreg free
 24234  003AEC  0100               	movlb	0	; () banked
 24235  003AEE  5166               	movf	?_GPSMonth& (0+255),w,b
 24236  003AF0  6F9B               	movwf	(get_fattime@f_time+7)& (0+255),b
 24237                           
 24238                           ;tff.c: 819: f_time.dia = GPSDay();
 24239  003AF2  ECB8  F02D         	call	_GPSDay	;wreg free
 24240  003AF6  0100               	movlb	0	; () banked
 24241  003AF8  5166               	movf	?_GPSDay& (0+255),w,b
 24242  003AFA  6F9A               	movwf	(get_fattime@f_time+6)& (0+255),b
 24243                           
 24244                           ; BSR set to: 0
 24245                           ;tff.c: 821: return (DWORD)(f_time.ano - 60) << 25 |
 24246                           ;tff.c: 822: (DWORD)(f_time.mes) << 21 |
 24247                           ;tff.c: 823: (DWORD)(f_time.dia) << 16 |
 24248                           ;tff.c: 824: (DWORD)(f_time.hora) << 11 |
 24249                           ;tff.c: 825: (DWORD)(f_time.min) << 5 |
 24250                           ;tff.c: 826: (DWORD)(f_time.seg) >> 1;
 24251  003AFC  90D8               	bcf	status,0,c
 24252  003AFE  3199               	rrcf	(get_fattime@f_time+5)& (0+255),w,b
 24253  003B00  6F6F               	movwf	(??_get_fattime+1)& (0+255),b
 24254  003B02  3198               	rrcf	(get_fattime@f_time+4)& (0+255),w,b
 24255  003B04  6F6E               	movwf	??_get_fattime& (0+255),b
 24256  003B06  5196               	movf	(get_fattime@f_time+2)& (0+255),w,b
 24257  003B08  6F70               	movwf	(??_get_fattime+2)& (0+255),b
 24258  003B0A  5197               	movf	(get_fattime@f_time+3)& (0+255),w,b
 24259  003B0C  6F71               	movwf	(??_get_fattime+3)& (0+255),b
 24260  003B0E  6B72               	clrf	(??_get_fattime+4)& (0+255),b
 24261  003B10  6B73               	clrf	(??_get_fattime+5)& (0+255),b
 24262  003B12  0E05               	movlw	5
 24263  003B14                     u14965:
 24264  003B14  90D8               	bcf	status,0,c
 24265  003B16  3770               	rlcf	(??_get_fattime+2)& (0+255),f,b
 24266  003B18  3771               	rlcf	(??_get_fattime+3)& (0+255),f,b
 24267  003B1A  3772               	rlcf	(??_get_fattime+4)& (0+255),f,b
 24268  003B1C  3773               	rlcf	(??_get_fattime+5)& (0+255),f,b
 24269  003B1E  2EE8               	decfsz	wreg,f,c
 24270  003B20  D7F9               	goto	u14965
 24271  003B22  5194               	movf	get_fattime@f_time& (0+255),w,b
 24272  003B24  6F74               	movwf	(??_get_fattime+6)& (0+255),b
 24273  003B26  5195               	movf	(get_fattime@f_time+1)& (0+255),w,b
 24274  003B28  6F75               	movwf	(??_get_fattime+7)& (0+255),b
 24275  003B2A  6B76               	clrf	(??_get_fattime+8)& (0+255),b
 24276  003B2C  6B77               	clrf	(??_get_fattime+9)& (0+255),b
 24277  003B2E  0E0B               	movlw	11
 24278  003B30                     u14975:
 24279  003B30  90D8               	bcf	status,0,c
 24280  003B32  3774               	rlcf	(??_get_fattime+6)& (0+255),f,b
 24281  003B34  3775               	rlcf	(??_get_fattime+7)& (0+255),f,b
 24282  003B36  3776               	rlcf	(??_get_fattime+8)& (0+255),f,b
 24283  003B38  3777               	rlcf	(??_get_fattime+9)& (0+255),f,b
 24284  003B3A  2EE8               	decfsz	wreg,f,c
 24285  003B3C  D7F9               	goto	u14975
 24286  003B3E  C09A  F078         	movff	get_fattime@f_time+6,??_get_fattime+10
 24287  003B42  6B79               	clrf	(??_get_fattime+11)& (0+255),b
 24288  003B44  6B7A               	clrf	(??_get_fattime+12)& (0+255),b
 24289  003B46  6B7B               	clrf	(??_get_fattime+13)& (0+255),b
 24290  003B48  C079  F07B         	movff	??_get_fattime+11,??_get_fattime+13
 24291  003B4C  C078  F07A         	movff	??_get_fattime+10,??_get_fattime+12
 24292  003B50  6B79               	clrf	(??_get_fattime+11)& (0+255),b
 24293  003B52  6B78               	clrf	(??_get_fattime+10)& (0+255),b
 24294  003B54  C09B  F07C         	movff	get_fattime@f_time+7,??_get_fattime+14
 24295  003B58  6B7D               	clrf	(??_get_fattime+15)& (0+255),b
 24296  003B5A  6B7E               	clrf	(??_get_fattime+16)& (0+255),b
 24297  003B5C  6B7F               	clrf	(??_get_fattime+17)& (0+255),b
 24298  003B5E  0E15               	movlw	21
 24299  003B60                     u14985:
 24300  003B60  90D8               	bcf	status,0,c
 24301  003B62  377C               	rlcf	(??_get_fattime+14)& (0+255),f,b
 24302  003B64  377D               	rlcf	(??_get_fattime+15)& (0+255),f,b
 24303  003B66  377E               	rlcf	(??_get_fattime+16)& (0+255),f,b
 24304  003B68  377F               	rlcf	(??_get_fattime+17)& (0+255),f,b
 24305  003B6A  2EE8               	decfsz	wreg,f,c
 24306  003B6C  D7F9               	goto	u14985
 24307  003B6E  0EC4               	movlw	196
 24308  003B70  259C               	addwf	(get_fattime@f_time+8)& (0+255),w,b
 24309  003B72  6F80               	movwf	(??_get_fattime+18)& (0+255),b
 24310  003B74  0EFF               	movlw	255
 24311  003B76  219D               	addwfc	(get_fattime@f_time+9)& (0+255),w,b
 24312  003B78  6F81               	movwf	(??_get_fattime+19)& (0+255),b
 24313  003B7A  6B82               	clrf	(??_get_fattime+20)& (0+255),b
 24314  003B7C  6B83               	clrf	(??_get_fattime+21)& (0+255),b
 24315  003B7E  0E19               	movlw	25
 24316  003B80                     u14995:
 24317  003B80  90D8               	bcf	status,0,c
 24318  003B82  3780               	rlcf	(??_get_fattime+18)& (0+255),f,b
 24319  003B84  3781               	rlcf	(??_get_fattime+19)& (0+255),f,b
 24320  003B86  3782               	rlcf	(??_get_fattime+20)& (0+255),f,b
 24321  003B88  3783               	rlcf	(??_get_fattime+21)& (0+255),f,b
 24322  003B8A  2EE8               	decfsz	wreg,f,c
 24323  003B8C  D7F9               	goto	u14995
 24324  003B8E  517C               	movf	(??_get_fattime+14)& (0+255),w,b
 24325  003B90  1180               	iorwf	(??_get_fattime+18)& (0+255),w,b
 24326  003B92  6F84               	movwf	(??_get_fattime+22)& (0+255),b
 24327  003B94  517D               	movf	(??_get_fattime+15)& (0+255),w,b
 24328  003B96  1181               	iorwf	(??_get_fattime+19)& (0+255),w,b
 24329  003B98  6F85               	movwf	(??_get_fattime+23)& (0+255),b
 24330  003B9A  517E               	movf	(??_get_fattime+16)& (0+255),w,b
 24331  003B9C  1182               	iorwf	(??_get_fattime+20)& (0+255),w,b
 24332  003B9E  6F86               	movwf	(??_get_fattime+24)& (0+255),b
 24333  003BA0  517F               	movf	(??_get_fattime+17)& (0+255),w,b
 24334  003BA2  1183               	iorwf	(??_get_fattime+21)& (0+255),w,b
 24335  003BA4  6F87               	movwf	(??_get_fattime+25)& (0+255),b
 24336  003BA6  5178               	movf	(??_get_fattime+10)& (0+255),w,b
 24337  003BA8  1184               	iorwf	(??_get_fattime+22)& (0+255),w,b
 24338  003BAA  6F88               	movwf	(??_get_fattime+26)& (0+255),b
 24339  003BAC  5179               	movf	(??_get_fattime+11)& (0+255),w,b
 24340  003BAE  1185               	iorwf	(??_get_fattime+23)& (0+255),w,b
 24341  003BB0  6F89               	movwf	(??_get_fattime+27)& (0+255),b
 24342  003BB2  517A               	movf	(??_get_fattime+12)& (0+255),w,b
 24343  003BB4  1186               	iorwf	(??_get_fattime+24)& (0+255),w,b
 24344  003BB6  6F8A               	movwf	(??_get_fattime+28)& (0+255),b
 24345  003BB8  517B               	movf	(??_get_fattime+13)& (0+255),w,b
 24346  003BBA  1187               	iorwf	(??_get_fattime+25)& (0+255),w,b
 24347  003BBC  6F8B               	movwf	(??_get_fattime+29)& (0+255),b
 24348  003BBE  5174               	movf	(??_get_fattime+6)& (0+255),w,b
 24349  003BC0  1188               	iorwf	(??_get_fattime+26)& (0+255),w,b
 24350  003BC2  6F8C               	movwf	(??_get_fattime+30)& (0+255),b
 24351  003BC4  5175               	movf	(??_get_fattime+7)& (0+255),w,b
 24352  003BC6  1189               	iorwf	(??_get_fattime+27)& (0+255),w,b
 24353  003BC8  6F8D               	movwf	(??_get_fattime+31)& (0+255),b
 24354  003BCA  5176               	movf	(??_get_fattime+8)& (0+255),w,b
 24355  003BCC  118A               	iorwf	(??_get_fattime+28)& (0+255),w,b
 24356  003BCE  6F8E               	movwf	(??_get_fattime+32)& (0+255),b
 24357  003BD0  5177               	movf	(??_get_fattime+9)& (0+255),w,b
 24358  003BD2  118B               	iorwf	(??_get_fattime+29)& (0+255),w,b
 24359  003BD4  6F8F               	movwf	(??_get_fattime+33)& (0+255),b
 24360  003BD6  5170               	movf	(??_get_fattime+2)& (0+255),w,b
 24361  003BD8  118C               	iorwf	(??_get_fattime+30)& (0+255),w,b
 24362  003BDA  6F90               	movwf	(??_get_fattime+34)& (0+255),b
 24363  003BDC  5171               	movf	(??_get_fattime+3)& (0+255),w,b
 24364  003BDE  118D               	iorwf	(??_get_fattime+31)& (0+255),w,b
 24365  003BE0  6F91               	movwf	(??_get_fattime+35)& (0+255),b
 24366  003BE2  5172               	movf	(??_get_fattime+4)& (0+255),w,b
 24367  003BE4  118E               	iorwf	(??_get_fattime+32)& (0+255),w,b
 24368  003BE6  6F92               	movwf	(??_get_fattime+36)& (0+255),b
 24369  003BE8  5173               	movf	(??_get_fattime+5)& (0+255),w,b
 24370  003BEA  118F               	iorwf	(??_get_fattime+33)& (0+255),w,b
 24371  003BEC  6F93               	movwf	(??_get_fattime+37)& (0+255),b
 24372  003BEE  516E               	movf	??_get_fattime& (0+255),w,b
 24373  003BF0  1190               	iorwf	(??_get_fattime+34)& (0+255),w,b
 24374  003BF2  6F6A               	movwf	?_get_fattime& (0+255),b
 24375  003BF4  516F               	movf	(??_get_fattime+1)& (0+255),w,b
 24376  003BF6  1191               	iorwf	(??_get_fattime+35)& (0+255),w,b
 24377  003BF8  6F6B               	movwf	(?_get_fattime+1)& (0+255),b
 24378  003BFA  0E00               	movlw	0
 24379  003BFC  1192               	iorwf	(??_get_fattime+36)& (0+255),w,b
 24380  003BFE  6F6C               	movwf	(?_get_fattime+2)& (0+255),b
 24381  003C00  0E00               	movlw	0
 24382  003C02  1193               	iorwf	(??_get_fattime+37)& (0+255),w,b
 24383  003C04  6F6D               	movwf	(?_get_fattime+3)& (0+255),b
 24384  003C06  0012               	return	
 24385  003C08                     __end_of_get_fattime:
 24386                           	opt stack 0
 24387                           tosu	equ	0xFFF
 24388                           tosh	equ	0xFFE
 24389                           tosl	equ	0xFFD
 24390                           pclath	equ	0xFFA
 24391                           tblptru	equ	0xFF8
 24392                           tblptrh	equ	0xFF7
 24393                           tblptrl	equ	0xFF6
 24394                           tablat	equ	0xFF5
 24395                           prodh	equ	0xFF4
 24396                           prodl	equ	0xFF3
 24397                           intcon	equ	0xFF2
 24398                           intcon2	equ	0xFF1
 24399                           intcon3	equ	0xFF0
 24400                           indf0	equ	0xFEF
 24401                           postinc0	equ	0xFEE
 24402                           fsr0h	equ	0xFEA
 24403                           fsr0l	equ	0xFE9
 24404                           wreg	equ	0xFE8
 24405                           indf1	equ	0xFE7
 24406                           postinc1	equ	0xFE6
 24407                           postdec1	equ	0xFE5
 24408                           plusw1	equ	0xFE3
 24409                           fsr1h	equ	0xFE2
 24410                           fsr1l	equ	0xFE1
 24411                           indf2	equ	0xFDF
 24412                           postinc2	equ	0xFDE
 24413                           postdec2	equ	0xFDD
 24414                           plusw2	equ	0xFDB
 24415                           fsr2h	equ	0xFDA
 24416                           fsr2l	equ	0xFD9
 24417                           status	equ	0xFD8
 24418                           
 24419 ;; *************** function _GPSyear *****************
 24420 ;; Defined at:
 24421 ;;		line 192 in file "bibliotecas/GPS.c"
 24422 ;; Parameters:    Size  Location     Type
 24423 ;;		None
 24424 ;; Auto vars:     Size  Location     Type
 24425 ;;		None
 24426 ;; Return value:  Size  Location     Type
 24427 ;;                  2    6[BANK0 ] unsigned int 
 24428 ;; Registers used:
 24429 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 24430 ;; Tracked objects:
 24431 ;;		On entry : 0/0
 24432 ;;		On exit  : 0/0
 24433 ;;		Unchanged: 0/0
 24434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24435 ;;      Params:         0       2       0       0       0       0       0       0       0
 24436 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24437 ;;      Temps:          0       2       0       0       0       0       0       0       0
 24438 ;;      Totals:         0       4       0       0       0       0       0       0       0
 24439 ;;Total ram usage:        4 bytes
 24440 ;; Hardware stack levels used:    1
 24441 ;; Hardware stack levels required when called:    4
 24442 ;; This function calls:
 24443 ;;		___wmul
 24444 ;; This function is called by:
 24445 ;;		_get_fattime
 24446 ;; This function uses a non-reentrant model
 24447 ;;
 24448                           
 24449                           	psect	text100
 24450  005A44                     __ptext100:
 24451                           	opt stack 0
 24452  005A44                     _GPSyear:
 24453                           	opt stack 20
 24454                           
 24455                           ;GPS.c: 194: return ((rawDate[4] - '0') * 10 + (rawDate[5] - '0'));
 24456                           
 24457                           ; BSR set to: 0
 24458                           ;incstack = 0
 24459  005A44  0ED0               	movlw	208
 24460  005A46  0101               	movlb	1	; () banked
 24461  005A48  25BC               	addwf	(_rawDate+4)& (0+255),w,b
 24462  005A4A  0100               	movlb	0	; () banked
 24463  005A4C  6F60               	movwf	___wmul@multiplier& (0+255),b
 24464  005A4E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 24465  005A50  0EFF               	movlw	255
 24466  005A52  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 24467  005A54  0E00               	movlw	0
 24468  005A56  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24469  005A58  0E0A               	movlw	10
 24470  005A5A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 24471  005A5C  ECE1  F02E         	call	___wmul	;wreg free
 24472  005A60  0101               	movlb	1	; () banked
 24473  005A62  51BD               	movf	(_rawDate+5)& (0+255),w,b
 24474  005A64  0100               	movlb	0	; () banked
 24475  005A66  6F68               	movwf	??_GPSyear& (0+255),b
 24476  005A68  6B69               	clrf	(??_GPSyear+1)& (0+255),b
 24477  005A6A  5160               	movf	?___wmul& (0+255),w,b
 24478  005A6C  2768               	addwf	??_GPSyear& (0+255),f,b
 24479  005A6E  5161               	movf	(?___wmul+1)& (0+255),w,b
 24480  005A70  2369               	addwfc	(??_GPSyear+1)& (0+255),f,b
 24481  005A72  0ED0               	movlw	208
 24482  005A74  2568               	addwf	??_GPSyear& (0+255),w,b
 24483  005A76  6F66               	movwf	?_GPSyear& (0+255),b
 24484  005A78  0EFF               	movlw	255
 24485  005A7A  2169               	addwfc	(??_GPSyear+1)& (0+255),w,b
 24486  005A7C  6F67               	movwf	(?_GPSyear+1)& (0+255),b
 24487  005A7E  0012               	return	
 24488  005A80                     __end_of_GPSyear:
 24489                           	opt stack 0
 24490                           tosu	equ	0xFFF
 24491                           tosh	equ	0xFFE
 24492                           tosl	equ	0xFFD
 24493                           pclath	equ	0xFFA
 24494                           tblptru	equ	0xFF8
 24495                           tblptrh	equ	0xFF7
 24496                           tblptrl	equ	0xFF6
 24497                           tablat	equ	0xFF5
 24498                           prodh	equ	0xFF4
 24499                           prodl	equ	0xFF3
 24500                           intcon	equ	0xFF2
 24501                           intcon2	equ	0xFF1
 24502                           intcon3	equ	0xFF0
 24503                           indf0	equ	0xFEF
 24504                           postinc0	equ	0xFEE
 24505                           fsr0h	equ	0xFEA
 24506                           fsr0l	equ	0xFE9
 24507                           wreg	equ	0xFE8
 24508                           indf1	equ	0xFE7
 24509                           postinc1	equ	0xFE6
 24510                           postdec1	equ	0xFE5
 24511                           plusw1	equ	0xFE3
 24512                           fsr1h	equ	0xFE2
 24513                           fsr1l	equ	0xFE1
 24514                           indf2	equ	0xFDF
 24515                           postinc2	equ	0xFDE
 24516                           postdec2	equ	0xFDD
 24517                           plusw2	equ	0xFDB
 24518                           fsr2h	equ	0xFDA
 24519                           fsr2l	equ	0xFD9
 24520                           status	equ	0xFD8
 24521                           
 24522 ;; *************** function _GPSSecond *****************
 24523 ;; Defined at:
 24524 ;;		line 171 in file "bibliotecas/GPS.c"
 24525 ;; Parameters:    Size  Location     Type
 24526 ;;		None
 24527 ;; Auto vars:     Size  Location     Type
 24528 ;;		None
 24529 ;; Return value:  Size  Location     Type
 24530 ;;                  2    6[BANK0 ] unsigned int 
 24531 ;; Registers used:
 24532 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 24533 ;; Tracked objects:
 24534 ;;		On entry : 0/0
 24535 ;;		On exit  : 0/0
 24536 ;;		Unchanged: 0/0
 24537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24538 ;;      Params:         0       2       0       0       0       0       0       0       0
 24539 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24540 ;;      Temps:          0       2       0       0       0       0       0       0       0
 24541 ;;      Totals:         0       4       0       0       0       0       0       0       0
 24542 ;;Total ram usage:        4 bytes
 24543 ;; Hardware stack levels used:    1
 24544 ;; Hardware stack levels required when called:    4
 24545 ;; This function calls:
 24546 ;;		___wmul
 24547 ;; This function is called by:
 24548 ;;		_get_fattime
 24549 ;; This function uses a non-reentrant model
 24550 ;;
 24551                           
 24552                           	psect	text101
 24553  005A80                     __ptext101:
 24554                           	opt stack 0
 24555  005A80                     _GPSSecond:
 24556                           	opt stack 20
 24557                           
 24558                           ;GPS.c: 173: return ((rawTime[4] - '0') * 10 + (rawTime[5] - '0'));
 24559                           
 24560                           ; BSR set to: 0
 24561                           ;incstack = 0
 24562  005A80  0ED0               	movlw	208
 24563  005A82  0101               	movlb	1	; () banked
 24564  005A84  25B1               	addwf	(_rawTime+4)& (0+255),w,b
 24565  005A86  0100               	movlb	0	; () banked
 24566  005A88  6F60               	movwf	___wmul@multiplier& (0+255),b
 24567  005A8A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 24568  005A8C  0EFF               	movlw	255
 24569  005A8E  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 24570  005A90  0E00               	movlw	0
 24571  005A92  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24572  005A94  0E0A               	movlw	10
 24573  005A96  6F62               	movwf	___wmul@multiplicand& (0+255),b
 24574  005A98  ECE1  F02E         	call	___wmul	;wreg free
 24575  005A9C  0101               	movlb	1	; () banked
 24576  005A9E  51B2               	movf	(_rawTime+5)& (0+255),w,b
 24577  005AA0  0100               	movlb	0	; () banked
 24578  005AA2  6F68               	movwf	??_GPSSecond& (0+255),b
 24579  005AA4  6B69               	clrf	(??_GPSSecond+1)& (0+255),b
 24580  005AA6  5160               	movf	?___wmul& (0+255),w,b
 24581  005AA8  2768               	addwf	??_GPSSecond& (0+255),f,b
 24582  005AAA  5161               	movf	(?___wmul+1)& (0+255),w,b
 24583  005AAC  2369               	addwfc	(??_GPSSecond+1)& (0+255),f,b
 24584  005AAE  0ED0               	movlw	208
 24585  005AB0  2568               	addwf	??_GPSSecond& (0+255),w,b
 24586  005AB2  6F66               	movwf	?_GPSSecond& (0+255),b
 24587  005AB4  0EFF               	movlw	255
 24588  005AB6  2169               	addwfc	(??_GPSSecond+1)& (0+255),w,b
 24589  005AB8  6F67               	movwf	(?_GPSSecond+1)& (0+255),b
 24590  005ABA  0012               	return	
 24591  005ABC                     __end_of_GPSSecond:
 24592                           	opt stack 0
 24593                           tosu	equ	0xFFF
 24594                           tosh	equ	0xFFE
 24595                           tosl	equ	0xFFD
 24596                           pclath	equ	0xFFA
 24597                           tblptru	equ	0xFF8
 24598                           tblptrh	equ	0xFF7
 24599                           tblptrl	equ	0xFF6
 24600                           tablat	equ	0xFF5
 24601                           prodh	equ	0xFF4
 24602                           prodl	equ	0xFF3
 24603                           intcon	equ	0xFF2
 24604                           intcon2	equ	0xFF1
 24605                           intcon3	equ	0xFF0
 24606                           indf0	equ	0xFEF
 24607                           postinc0	equ	0xFEE
 24608                           fsr0h	equ	0xFEA
 24609                           fsr0l	equ	0xFE9
 24610                           wreg	equ	0xFE8
 24611                           indf1	equ	0xFE7
 24612                           postinc1	equ	0xFE6
 24613                           postdec1	equ	0xFE5
 24614                           plusw1	equ	0xFE3
 24615                           fsr1h	equ	0xFE2
 24616                           fsr1l	equ	0xFE1
 24617                           indf2	equ	0xFDF
 24618                           postinc2	equ	0xFDE
 24619                           postdec2	equ	0xFDD
 24620                           plusw2	equ	0xFDB
 24621                           fsr2h	equ	0xFDA
 24622                           fsr2l	equ	0xFD9
 24623                           status	equ	0xFD8
 24624                           
 24625 ;; *************** function _GPSMonth *****************
 24626 ;; Defined at:
 24627 ;;		line 188 in file "bibliotecas/GPS.c"
 24628 ;; Parameters:    Size  Location     Type
 24629 ;;		None
 24630 ;; Auto vars:     Size  Location     Type
 24631 ;;		None
 24632 ;; Return value:  Size  Location     Type
 24633 ;;                  2    6[BANK0 ] unsigned int 
 24634 ;; Registers used:
 24635 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 24636 ;; Tracked objects:
 24637 ;;		On entry : 0/0
 24638 ;;		On exit  : 0/0
 24639 ;;		Unchanged: 0/0
 24640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24641 ;;      Params:         0       2       0       0       0       0       0       0       0
 24642 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24643 ;;      Temps:          0       2       0       0       0       0       0       0       0
 24644 ;;      Totals:         0       4       0       0       0       0       0       0       0
 24645 ;;Total ram usage:        4 bytes
 24646 ;; Hardware stack levels used:    1
 24647 ;; Hardware stack levels required when called:    4
 24648 ;; This function calls:
 24649 ;;		___wmul
 24650 ;; This function is called by:
 24651 ;;		_get_fattime
 24652 ;; This function uses a non-reentrant model
 24653 ;;
 24654                           
 24655                           	psect	text102
 24656  005ABC                     __ptext102:
 24657                           	opt stack 0
 24658  005ABC                     _GPSMonth:
 24659                           	opt stack 20
 24660                           
 24661                           ;GPS.c: 190: return ((rawDate[2] - '0') * 10 + (rawDate[3] - '0'));
 24662                           
 24663                           ; BSR set to: 0
 24664                           ;incstack = 0
 24665  005ABC  0ED0               	movlw	208
 24666  005ABE  0101               	movlb	1	; () banked
 24667  005AC0  25BA               	addwf	(_rawDate+2)& (0+255),w,b
 24668  005AC2  0100               	movlb	0	; () banked
 24669  005AC4  6F60               	movwf	___wmul@multiplier& (0+255),b
 24670  005AC6  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 24671  005AC8  0EFF               	movlw	255
 24672  005ACA  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 24673  005ACC  0E00               	movlw	0
 24674  005ACE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24675  005AD0  0E0A               	movlw	10
 24676  005AD2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 24677  005AD4  ECE1  F02E         	call	___wmul	;wreg free
 24678  005AD8  0101               	movlb	1	; () banked
 24679  005ADA  51BB               	movf	(_rawDate+3)& (0+255),w,b
 24680  005ADC  0100               	movlb	0	; () banked
 24681  005ADE  6F68               	movwf	??_GPSMonth& (0+255),b
 24682  005AE0  6B69               	clrf	(??_GPSMonth+1)& (0+255),b
 24683  005AE2  5160               	movf	?___wmul& (0+255),w,b
 24684  005AE4  2768               	addwf	??_GPSMonth& (0+255),f,b
 24685  005AE6  5161               	movf	(?___wmul+1)& (0+255),w,b
 24686  005AE8  2369               	addwfc	(??_GPSMonth+1)& (0+255),f,b
 24687  005AEA  0ED0               	movlw	208
 24688  005AEC  2568               	addwf	??_GPSMonth& (0+255),w,b
 24689  005AEE  6F66               	movwf	?_GPSMonth& (0+255),b
 24690  005AF0  0EFF               	movlw	255
 24691  005AF2  2169               	addwfc	(??_GPSMonth+1)& (0+255),w,b
 24692  005AF4  6F67               	movwf	(?_GPSMonth+1)& (0+255),b
 24693  005AF6  0012               	return	
 24694  005AF8                     __end_of_GPSMonth:
 24695                           	opt stack 0
 24696                           tosu	equ	0xFFF
 24697                           tosh	equ	0xFFE
 24698                           tosl	equ	0xFFD
 24699                           pclath	equ	0xFFA
 24700                           tblptru	equ	0xFF8
 24701                           tblptrh	equ	0xFF7
 24702                           tblptrl	equ	0xFF6
 24703                           tablat	equ	0xFF5
 24704                           prodh	equ	0xFF4
 24705                           prodl	equ	0xFF3
 24706                           intcon	equ	0xFF2
 24707                           intcon2	equ	0xFF1
 24708                           intcon3	equ	0xFF0
 24709                           indf0	equ	0xFEF
 24710                           postinc0	equ	0xFEE
 24711                           fsr0h	equ	0xFEA
 24712                           fsr0l	equ	0xFE9
 24713                           wreg	equ	0xFE8
 24714                           indf1	equ	0xFE7
 24715                           postinc1	equ	0xFE6
 24716                           postdec1	equ	0xFE5
 24717                           plusw1	equ	0xFE3
 24718                           fsr1h	equ	0xFE2
 24719                           fsr1l	equ	0xFE1
 24720                           indf2	equ	0xFDF
 24721                           postinc2	equ	0xFDE
 24722                           postdec2	equ	0xFDD
 24723                           plusw2	equ	0xFDB
 24724                           fsr2h	equ	0xFDA
 24725                           fsr2l	equ	0xFD9
 24726                           status	equ	0xFD8
 24727                           
 24728 ;; *************** function _GPSMinute *****************
 24729 ;; Defined at:
 24730 ;;		line 175 in file "bibliotecas/GPS.c"
 24731 ;; Parameters:    Size  Location     Type
 24732 ;;		None
 24733 ;; Auto vars:     Size  Location     Type
 24734 ;;		None
 24735 ;; Return value:  Size  Location     Type
 24736 ;;                  2    6[BANK0 ] unsigned int 
 24737 ;; Registers used:
 24738 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 24739 ;; Tracked objects:
 24740 ;;		On entry : 0/0
 24741 ;;		On exit  : 0/0
 24742 ;;		Unchanged: 0/0
 24743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24744 ;;      Params:         0       2       0       0       0       0       0       0       0
 24745 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24746 ;;      Temps:          0       2       0       0       0       0       0       0       0
 24747 ;;      Totals:         0       4       0       0       0       0       0       0       0
 24748 ;;Total ram usage:        4 bytes
 24749 ;; Hardware stack levels used:    1
 24750 ;; Hardware stack levels required when called:    4
 24751 ;; This function calls:
 24752 ;;		___wmul
 24753 ;; This function is called by:
 24754 ;;		_get_fattime
 24755 ;; This function uses a non-reentrant model
 24756 ;;
 24757                           
 24758                           	psect	text103
 24759  005AF8                     __ptext103:
 24760                           	opt stack 0
 24761  005AF8                     _GPSMinute:
 24762                           	opt stack 20
 24763                           
 24764                           ;GPS.c: 177: return ((rawTime[2] - '0') * 10 + (rawTime[3] - '0'));
 24765                           
 24766                           ; BSR set to: 0
 24767                           ;incstack = 0
 24768  005AF8  0ED0               	movlw	208
 24769  005AFA  0101               	movlb	1	; () banked
 24770  005AFC  25AF               	addwf	(_rawTime+2)& (0+255),w,b
 24771  005AFE  0100               	movlb	0	; () banked
 24772  005B00  6F60               	movwf	___wmul@multiplier& (0+255),b
 24773  005B02  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 24774  005B04  0EFF               	movlw	255
 24775  005B06  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 24776  005B08  0E00               	movlw	0
 24777  005B0A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24778  005B0C  0E0A               	movlw	10
 24779  005B0E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 24780  005B10  ECE1  F02E         	call	___wmul	;wreg free
 24781  005B14  0101               	movlb	1	; () banked
 24782  005B16  51B0               	movf	(_rawTime+3)& (0+255),w,b
 24783  005B18  0100               	movlb	0	; () banked
 24784  005B1A  6F68               	movwf	??_GPSMinute& (0+255),b
 24785  005B1C  6B69               	clrf	(??_GPSMinute+1)& (0+255),b
 24786  005B1E  5160               	movf	?___wmul& (0+255),w,b
 24787  005B20  2768               	addwf	??_GPSMinute& (0+255),f,b
 24788  005B22  5161               	movf	(?___wmul+1)& (0+255),w,b
 24789  005B24  2369               	addwfc	(??_GPSMinute+1)& (0+255),f,b
 24790  005B26  0ED0               	movlw	208
 24791  005B28  2568               	addwf	??_GPSMinute& (0+255),w,b
 24792  005B2A  6F66               	movwf	?_GPSMinute& (0+255),b
 24793  005B2C  0EFF               	movlw	255
 24794  005B2E  2169               	addwfc	(??_GPSMinute+1)& (0+255),w,b
 24795  005B30  6F67               	movwf	(?_GPSMinute+1)& (0+255),b
 24796  005B32  0012               	return	
 24797  005B34                     __end_of_GPSMinute:
 24798                           	opt stack 0
 24799                           tosu	equ	0xFFF
 24800                           tosh	equ	0xFFE
 24801                           tosl	equ	0xFFD
 24802                           pclath	equ	0xFFA
 24803                           tblptru	equ	0xFF8
 24804                           tblptrh	equ	0xFF7
 24805                           tblptrl	equ	0xFF6
 24806                           tablat	equ	0xFF5
 24807                           prodh	equ	0xFF4
 24808                           prodl	equ	0xFF3
 24809                           intcon	equ	0xFF2
 24810                           intcon2	equ	0xFF1
 24811                           intcon3	equ	0xFF0
 24812                           indf0	equ	0xFEF
 24813                           postinc0	equ	0xFEE
 24814                           fsr0h	equ	0xFEA
 24815                           fsr0l	equ	0xFE9
 24816                           wreg	equ	0xFE8
 24817                           indf1	equ	0xFE7
 24818                           postinc1	equ	0xFE6
 24819                           postdec1	equ	0xFE5
 24820                           plusw1	equ	0xFE3
 24821                           fsr1h	equ	0xFE2
 24822                           fsr1l	equ	0xFE1
 24823                           indf2	equ	0xFDF
 24824                           postinc2	equ	0xFDE
 24825                           postdec2	equ	0xFDD
 24826                           plusw2	equ	0xFDB
 24827                           fsr2h	equ	0xFDA
 24828                           fsr2l	equ	0xFD9
 24829                           status	equ	0xFD8
 24830                           
 24831 ;; *************** function _GPSHour *****************
 24832 ;; Defined at:
 24833 ;;		line 179 in file "bibliotecas/GPS.c"
 24834 ;; Parameters:    Size  Location     Type
 24835 ;;		None
 24836 ;; Auto vars:     Size  Location     Type
 24837 ;;		None
 24838 ;; Return value:  Size  Location     Type
 24839 ;;                  2    6[BANK0 ] unsigned int 
 24840 ;; Registers used:
 24841 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 24842 ;; Tracked objects:
 24843 ;;		On entry : 0/0
 24844 ;;		On exit  : 0/0
 24845 ;;		Unchanged: 0/0
 24846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24847 ;;      Params:         0       2       0       0       0       0       0       0       0
 24848 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24849 ;;      Temps:          0       2       0       0       0       0       0       0       0
 24850 ;;      Totals:         0       4       0       0       0       0       0       0       0
 24851 ;;Total ram usage:        4 bytes
 24852 ;; Hardware stack levels used:    1
 24853 ;; Hardware stack levels required when called:    4
 24854 ;; This function calls:
 24855 ;;		___wmul
 24856 ;; This function is called by:
 24857 ;;		_get_fattime
 24858 ;; This function uses a non-reentrant model
 24859 ;;
 24860                           
 24861                           	psect	text104
 24862  005B34                     __ptext104:
 24863                           	opt stack 0
 24864  005B34                     _GPSHour:
 24865                           	opt stack 20
 24866                           
 24867                           ;GPS.c: 181: return (((rawTime[0] - '0') * 10 + (rawTime[1] - '0')));
 24868                           
 24869                           ; BSR set to: 0
 24870                           ;incstack = 0
 24871  005B34  0ED0               	movlw	208
 24872  005B36  0101               	movlb	1	; () banked
 24873  005B38  25AD               	addwf	_rawTime& (0+255),w,b
 24874  005B3A  0100               	movlb	0	; () banked
 24875  005B3C  6F60               	movwf	___wmul@multiplier& (0+255),b
 24876  005B3E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 24877  005B40  0EFF               	movlw	255
 24878  005B42  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 24879  005B44  0E00               	movlw	0
 24880  005B46  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24881  005B48  0E0A               	movlw	10
 24882  005B4A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 24883  005B4C  ECE1  F02E         	call	___wmul	;wreg free
 24884  005B50  0101               	movlb	1	; () banked
 24885  005B52  51AE               	movf	(_rawTime+1)& (0+255),w,b
 24886  005B54  0100               	movlb	0	; () banked
 24887  005B56  6F68               	movwf	??_GPSHour& (0+255),b
 24888  005B58  6B69               	clrf	(??_GPSHour+1)& (0+255),b
 24889  005B5A  5160               	movf	?___wmul& (0+255),w,b
 24890  005B5C  2768               	addwf	??_GPSHour& (0+255),f,b
 24891  005B5E  5161               	movf	(?___wmul+1)& (0+255),w,b
 24892  005B60  2369               	addwfc	(??_GPSHour+1)& (0+255),f,b
 24893  005B62  0ED0               	movlw	208
 24894  005B64  2568               	addwf	??_GPSHour& (0+255),w,b
 24895  005B66  6F66               	movwf	?_GPSHour& (0+255),b
 24896  005B68  0EFF               	movlw	255
 24897  005B6A  2169               	addwfc	(??_GPSHour+1)& (0+255),w,b
 24898  005B6C  6F67               	movwf	(?_GPSHour+1)& (0+255),b
 24899  005B6E  0012               	return	
 24900  005B70                     __end_of_GPSHour:
 24901                           	opt stack 0
 24902                           tosu	equ	0xFFF
 24903                           tosh	equ	0xFFE
 24904                           tosl	equ	0xFFD
 24905                           pclath	equ	0xFFA
 24906                           tblptru	equ	0xFF8
 24907                           tblptrh	equ	0xFF7
 24908                           tblptrl	equ	0xFF6
 24909                           tablat	equ	0xFF5
 24910                           prodh	equ	0xFF4
 24911                           prodl	equ	0xFF3
 24912                           intcon	equ	0xFF2
 24913                           intcon2	equ	0xFF1
 24914                           intcon3	equ	0xFF0
 24915                           indf0	equ	0xFEF
 24916                           postinc0	equ	0xFEE
 24917                           fsr0h	equ	0xFEA
 24918                           fsr0l	equ	0xFE9
 24919                           wreg	equ	0xFE8
 24920                           indf1	equ	0xFE7
 24921                           postinc1	equ	0xFE6
 24922                           postdec1	equ	0xFE5
 24923                           plusw1	equ	0xFE3
 24924                           fsr1h	equ	0xFE2
 24925                           fsr1l	equ	0xFE1
 24926                           indf2	equ	0xFDF
 24927                           postinc2	equ	0xFDE
 24928                           postdec2	equ	0xFDD
 24929                           plusw2	equ	0xFDB
 24930                           fsr2h	equ	0xFDA
 24931                           fsr2l	equ	0xFD9
 24932                           status	equ	0xFD8
 24933                           
 24934 ;; *************** function _GPSDay *****************
 24935 ;; Defined at:
 24936 ;;		line 184 in file "bibliotecas/GPS.c"
 24937 ;; Parameters:    Size  Location     Type
 24938 ;;		None
 24939 ;; Auto vars:     Size  Location     Type
 24940 ;;		None
 24941 ;; Return value:  Size  Location     Type
 24942 ;;                  2    6[BANK0 ] unsigned int 
 24943 ;; Registers used:
 24944 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 24945 ;; Tracked objects:
 24946 ;;		On entry : 0/0
 24947 ;;		On exit  : 0/0
 24948 ;;		Unchanged: 0/0
 24949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24950 ;;      Params:         0       2       0       0       0       0       0       0       0
 24951 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24952 ;;      Temps:          0       2       0       0       0       0       0       0       0
 24953 ;;      Totals:         0       4       0       0       0       0       0       0       0
 24954 ;;Total ram usage:        4 bytes
 24955 ;; Hardware stack levels used:    1
 24956 ;; Hardware stack levels required when called:    4
 24957 ;; This function calls:
 24958 ;;		___wmul
 24959 ;; This function is called by:
 24960 ;;		_get_fattime
 24961 ;; This function uses a non-reentrant model
 24962 ;;
 24963                           
 24964                           	psect	text105
 24965  005B70                     __ptext105:
 24966                           	opt stack 0
 24967  005B70                     _GPSDay:
 24968                           	opt stack 20
 24969                           
 24970                           ;GPS.c: 186: return ((rawDate[0] - '0') * 10 + (rawDate[1] - '0'));
 24971                           
 24972                           ; BSR set to: 0
 24973                           ;incstack = 0
 24974  005B70  0ED0               	movlw	208
 24975  005B72  0101               	movlb	1	; () banked
 24976  005B74  25B8               	addwf	_rawDate& (0+255),w,b
 24977  005B76  0100               	movlb	0	; () banked
 24978  005B78  6F60               	movwf	___wmul@multiplier& (0+255),b
 24979  005B7A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 24980  005B7C  0EFF               	movlw	255
 24981  005B7E  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 24982  005B80  0E00               	movlw	0
 24983  005B82  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24984  005B84  0E0A               	movlw	10
 24985  005B86  6F62               	movwf	___wmul@multiplicand& (0+255),b
 24986  005B88  ECE1  F02E         	call	___wmul	;wreg free
 24987  005B8C  0101               	movlb	1	; () banked
 24988  005B8E  51B9               	movf	(_rawDate+1)& (0+255),w,b
 24989  005B90  0100               	movlb	0	; () banked
 24990  005B92  6F68               	movwf	??_GPSDay& (0+255),b
 24991  005B94  6B69               	clrf	(??_GPSDay+1)& (0+255),b
 24992  005B96  5160               	movf	?___wmul& (0+255),w,b
 24993  005B98  2768               	addwf	??_GPSDay& (0+255),f,b
 24994  005B9A  5161               	movf	(?___wmul+1)& (0+255),w,b
 24995  005B9C  2369               	addwfc	(??_GPSDay+1)& (0+255),f,b
 24996  005B9E  0ED0               	movlw	208
 24997  005BA0  2568               	addwf	??_GPSDay& (0+255),w,b
 24998  005BA2  6F66               	movwf	?_GPSDay& (0+255),b
 24999  005BA4  0EFF               	movlw	255
 25000  005BA6  2169               	addwfc	(??_GPSDay+1)& (0+255),w,b
 25001  005BA8  6F67               	movwf	(?_GPSDay+1)& (0+255),b
 25002  005BAA  0012               	return	
 25003  005BAC                     __end_of_GPSDay:
 25004                           	opt stack 0
 25005                           tosu	equ	0xFFF
 25006                           tosh	equ	0xFFE
 25007                           tosl	equ	0xFFD
 25008                           pclath	equ	0xFFA
 25009                           tblptru	equ	0xFF8
 25010                           tblptrh	equ	0xFF7
 25011                           tblptrl	equ	0xFF6
 25012                           tablat	equ	0xFF5
 25013                           prodh	equ	0xFF4
 25014                           prodl	equ	0xFF3
 25015                           intcon	equ	0xFF2
 25016                           intcon2	equ	0xFF1
 25017                           intcon3	equ	0xFF0
 25018                           indf0	equ	0xFEF
 25019                           postinc0	equ	0xFEE
 25020                           fsr0h	equ	0xFEA
 25021                           fsr0l	equ	0xFE9
 25022                           wreg	equ	0xFE8
 25023                           indf1	equ	0xFE7
 25024                           postinc1	equ	0xFE6
 25025                           postdec1	equ	0xFE5
 25026                           plusw1	equ	0xFE3
 25027                           fsr1h	equ	0xFE2
 25028                           fsr1l	equ	0xFE1
 25029                           indf2	equ	0xFDF
 25030                           postinc2	equ	0xFDE
 25031                           postdec2	equ	0xFDD
 25032                           plusw2	equ	0xFDB
 25033                           fsr2h	equ	0xFDA
 25034                           fsr2l	equ	0xFD9
 25035                           status	equ	0xFD8
 25036                           
 25037 ;; *************** function ___wmul *****************
 25038 ;; Defined at:
 25039 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 25040 ;; Parameters:    Size  Location     Type
 25041 ;;  multiplier      2    0[BANK0 ] unsigned int 
 25042 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 25043 ;; Auto vars:     Size  Location     Type
 25044 ;;  product         2    4[BANK0 ] unsigned int 
 25045 ;; Return value:  Size  Location     Type
 25046 ;;                  2    0[BANK0 ] unsigned int 
 25047 ;; Registers used:
 25048 ;;		wreg, status,2, status,0, prodl, prodh
 25049 ;; Tracked objects:
 25050 ;;		On entry : 0/0
 25051 ;;		On exit  : 0/0
 25052 ;;		Unchanged: 0/0
 25053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25054 ;;      Params:         0       4       0       0       0       0       0       0       0
 25055 ;;      Locals:         0       2       0       0       0       0       0       0       0
 25056 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25057 ;;      Totals:         0       6       0       0       0       0       0       0       0
 25058 ;;Total ram usage:        6 bytes
 25059 ;; Hardware stack levels used:    1
 25060 ;; Hardware stack levels required when called:    3
 25061 ;; This function calls:
 25062 ;;		Nothing
 25063 ;; This function is called by:
 25064 ;;		_GPSSecond
 25065 ;;		_GPSMinute
 25066 ;;		_GPSHour
 25067 ;;		_GPSDay
 25068 ;;		_GPSMonth
 25069 ;;		_GPSyear
 25070 ;;		_get_cluster
 25071 ;;		_put_cluster
 25072 ;;		_fprintf
 25073 ;;		_atoi
 25074 ;; This function uses a non-reentrant model
 25075 ;;
 25076                           
 25077                           	psect	text106
 25078  005DC2                     __ptext106:
 25079                           	opt stack 0
 25080  005DC2                     ___wmul:
 25081                           	opt stack 24
 25082                           
 25083                           ; BSR set to: 0
 25084                           ;incstack = 0
 25085  005DC2  0100               	movlb	0	; () banked
 25086  005DC4  5160               	movf	___wmul@multiplier& (0+255),w,b
 25087  005DC6  0362               	mulwf	___wmul@multiplicand& (0+255),b
 25088  005DC8  CFF3 F064          	movff	prodl,___wmul@product
 25089  005DCC  CFF4 F065          	movff	prodh,___wmul@product+1
 25090  005DD0  5160               	movf	___wmul@multiplier& (0+255),w,b
 25091  005DD2  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 25092  005DD4  50F3               	movf	prodl,w,c
 25093  005DD6  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 25094  005DD8  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 25095  005DDA  0362               	mulwf	___wmul@multiplicand& (0+255),b
 25096  005DDC  50F3               	movf	prodl,w,c
 25097  005DDE  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 25098                           
 25099                           ; BSR set to: 0
 25100  005DE0  C064  F060         	movff	___wmul@product,?___wmul
 25101  005DE4  C065  F061         	movff	___wmul@product+1,?___wmul+1
 25102  005DE8  0012               	return	
 25103  005DEA                     __end_of___wmul:
 25104                           	opt stack 0
 25105                           tosu	equ	0xFFF
 25106                           tosh	equ	0xFFE
 25107                           tosl	equ	0xFFD
 25108                           pclath	equ	0xFFA
 25109                           tblptru	equ	0xFF8
 25110                           tblptrh	equ	0xFF7
 25111                           tblptrl	equ	0xFF6
 25112                           tablat	equ	0xFF5
 25113                           prodh	equ	0xFF4
 25114                           prodl	equ	0xFF3
 25115                           intcon	equ	0xFF2
 25116                           intcon2	equ	0xFF1
 25117                           intcon3	equ	0xFF0
 25118                           indf0	equ	0xFEF
 25119                           postinc0	equ	0xFEE
 25120                           fsr0h	equ	0xFEA
 25121                           fsr0l	equ	0xFE9
 25122                           wreg	equ	0xFE8
 25123                           indf1	equ	0xFE7
 25124                           postinc1	equ	0xFE6
 25125                           postdec1	equ	0xFE5
 25126                           plusw1	equ	0xFE3
 25127                           fsr1h	equ	0xFE2
 25128                           fsr1l	equ	0xFE1
 25129                           indf2	equ	0xFDF
 25130                           postinc2	equ	0xFDE
 25131                           postdec2	equ	0xFDD
 25132                           plusw2	equ	0xFDB
 25133                           fsr2h	equ	0xFDA
 25134                           fsr2l	equ	0xFD9
 25135                           status	equ	0xFD8
 25136                           
 25137 ;; *************** function _dados_gps_to_sd *****************
 25138 ;; Defined at:
 25139 ;;		line 287 in file "bibliotecas/GPS.c"
 25140 ;; Parameters:    Size  Location     Type
 25141 ;;		None
 25142 ;; Auto vars:     Size  Location     Type
 25143 ;;		None
 25144 ;; Return value:  Size  Location     Type
 25145 ;;                  1    wreg      void 
 25146 ;; Registers used:
 25147 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25148 ;; Tracked objects:
 25149 ;;		On entry : 0/0
 25150 ;;		On exit  : 0/0
 25151 ;;		Unchanged: 0/0
 25152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25153 ;;      Params:         0       0       0       0       0       0       0       0       0
 25154 ;;      Locals:         0       0       0       0       0       0       0       0       0
 25155 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25156 ;;      Totals:         0       0       0       0       0       0       0       0       0
 25157 ;;Total ram usage:        0 bytes
 25158 ;; Hardware stack levels used:    1
 25159 ;; Hardware stack levels required when called:    5
 25160 ;; This function calls:
 25161 ;;		_monta_sd
 25162 ;; This function is called by:
 25163 ;;		_escrita_sdcard
 25164 ;;		_escalonador
 25165 ;; This function uses a non-reentrant model
 25166 ;;
 25167                           
 25168                           	psect	text107
 25169  00529C                     __ptext107:
 25170                           	opt stack 0
 25171  00529C                     _dados_gps_to_sd:
 25172                           	opt stack 21
 25173                           
 25174                           ;GPS.c: 289: monta_sd(0, rawTime);
 25175                           
 25176                           ; BSR set to: 0
 25177                           ;incstack = 0
 25178  00529C  0EAD               	movlw	low _rawTime
 25179  00529E  0100               	movlb	0	; () banked
 25180  0052A0  6F66               	movwf	monta_sd@dado& (0+255),b
 25181  0052A2  0E01               	movlw	high _rawTime
 25182  0052A4  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 25183  0052A6  0E00               	movlw	0
 25184  0052A8  EC7F  F00B         	call	_monta_sd
 25185                           
 25186                           ;GPS.c: 290: monta_sd(1, rawDate);
 25187  0052AC  0EB8               	movlw	low _rawDate
 25188  0052AE  0100               	movlb	0	; () banked
 25189  0052B0  6F66               	movwf	monta_sd@dado& (0+255),b
 25190  0052B2  0E01               	movlw	high _rawDate
 25191  0052B4  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 25192  0052B6  0E01               	movlw	1
 25193  0052B8  EC7F  F00B         	call	_monta_sd
 25194                           
 25195                           ;GPS.c: 291: monta_sd(2, rawLatitude);
 25196  0052BC  0EA2               	movlw	low _rawLatitude
 25197  0052BE  0100               	movlb	0	; () banked
 25198  0052C0  6F66               	movwf	monta_sd@dado& (0+255),b
 25199  0052C2  0E01               	movlw	high _rawLatitude
 25200  0052C4  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 25201  0052C6  0E02               	movlw	2
 25202  0052C8  EC7F  F00B         	call	_monta_sd
 25203                           
 25204                           ;GPS.c: 292: monta_sd(3, rawLongitude);
 25205  0052CC  0E8A               	movlw	low _rawLongitude
 25206  0052CE  0100               	movlb	0	; () banked
 25207  0052D0  6F66               	movwf	monta_sd@dado& (0+255),b
 25208  0052D2  0E01               	movlw	high _rawLongitude
 25209  0052D4  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 25210  0052D6  0E03               	movlw	3
 25211  0052D8  EC7F  F00B         	call	_monta_sd
 25212                           
 25213                           ;GPS.c: 293: monta_sd(5, rawTime);
 25214  0052DC  0EAD               	movlw	low _rawTime
 25215  0052DE  0100               	movlb	0	; () banked
 25216  0052E0  6F66               	movwf	monta_sd@dado& (0+255),b
 25217  0052E2  0E01               	movlw	high _rawTime
 25218  0052E4  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 25219  0052E6  0E05               	movlw	5
 25220  0052E8  EC7F  F00B         	call	_monta_sd
 25221                           
 25222                           ;GPS.c: 294: monta_sd(6, rawDate);
 25223  0052EC  0EB8               	movlw	low _rawDate
 25224  0052EE  0100               	movlb	0	; () banked
 25225  0052F0  6F66               	movwf	monta_sd@dado& (0+255),b
 25226  0052F2  0E01               	movlw	high _rawDate
 25227  0052F4  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 25228  0052F6  0E06               	movlw	6
 25229  0052F8  EC7F  F00B         	call	_monta_sd
 25230                           
 25231                           ;GPS.c: 295: monta_sd(7, rawSpeed);
 25232  0052FC  0EBF               	movlw	low _rawSpeed
 25233  0052FE  0100               	movlb	0	; () banked
 25234  005300  6F66               	movwf	monta_sd@dado& (0+255),b
 25235  005302  0E01               	movlw	high _rawSpeed
 25236  005304  6F67               	movwf	(monta_sd@dado+1)& (0+255),b
 25237  005306  0E07               	movlw	7
 25238  005308  EC7F  F00B         	call	_monta_sd
 25239  00530C  0012               	return	
 25240  00530E                     __end_of_dados_gps_to_sd:
 25241                           	opt stack 0
 25242                           tosu	equ	0xFFF
 25243                           tosh	equ	0xFFE
 25244                           tosl	equ	0xFFD
 25245                           pclath	equ	0xFFA
 25246                           tblptru	equ	0xFF8
 25247                           tblptrh	equ	0xFF7
 25248                           tblptrl	equ	0xFF6
 25249                           tablat	equ	0xFF5
 25250                           prodh	equ	0xFF4
 25251                           prodl	equ	0xFF3
 25252                           intcon	equ	0xFF2
 25253                           intcon2	equ	0xFF1
 25254                           intcon3	equ	0xFF0
 25255                           indf0	equ	0xFEF
 25256                           postinc0	equ	0xFEE
 25257                           fsr0h	equ	0xFEA
 25258                           fsr0l	equ	0xFE9
 25259                           wreg	equ	0xFE8
 25260                           indf1	equ	0xFE7
 25261                           postinc1	equ	0xFE6
 25262                           postdec1	equ	0xFE5
 25263                           plusw1	equ	0xFE3
 25264                           fsr1h	equ	0xFE2
 25265                           fsr1l	equ	0xFE1
 25266                           indf2	equ	0xFDF
 25267                           postinc2	equ	0xFDE
 25268                           postdec2	equ	0xFDD
 25269                           plusw2	equ	0xFDB
 25270                           fsr2h	equ	0xFDA
 25271                           fsr2l	equ	0xFD9
 25272                           status	equ	0xFD8
 25273                           
 25274 ;; *************** function _monta_sd *****************
 25275 ;; Defined at:
 25276 ;;		line 295 in file "bibliotecas/SDCard.c"
 25277 ;; Parameters:    Size  Location     Type
 25278 ;;  index           1    wreg     unsigned char 
 25279 ;;  dado            2    6[BANK0 ] PTR unsigned char 
 25280 ;;		 -> STR_27(7), STR_26(5), rawDate(7), rawSpeed(6), 
 25281 ;;		 -> rawLongitude(12), rawLatitude(11), rawTime(11), 
 25282 ;; Auto vars:     Size  Location     Type
 25283 ;;  index           1    9[BANK0 ] unsigned char 
 25284 ;;  i               1   10[BANK0 ] unsigned char 
 25285 ;;  size            1    8[BANK0 ] unsigned char 
 25286 ;; Return value:  Size  Location     Type
 25287 ;;                  1    wreg      void 
 25288 ;; Registers used:
 25289 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25290 ;; Tracked objects:
 25291 ;;		On entry : 0/0
 25292 ;;		On exit  : 0/0
 25293 ;;		Unchanged: 0/0
 25294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25295 ;;      Params:         0       2       0       0       0       0       0       0       0
 25296 ;;      Locals:         0       3       0       0       0       0       0       0       0
 25297 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25298 ;;      Totals:         0       5       0       0       0       0       0       0       0
 25299 ;;Total ram usage:        5 bytes
 25300 ;; Hardware stack levels used:    1
 25301 ;; Hardware stack levels required when called:    4
 25302 ;; This function calls:
 25303 ;;		_strlen
 25304 ;; This function is called by:
 25305 ;;		_dados_gps_to_sd
 25306 ;;		_verifica_fence
 25307 ;; This function uses a non-reentrant model
 25308 ;;
 25309                           
 25310                           	psect	text108
 25311  0016FE                     __ptext108:
 25312                           	opt stack 0
 25313  0016FE                     _monta_sd:
 25314                           	opt stack 23
 25315                           
 25316                           ;incstack = 0
 25317                           ;monta_sd@index stored from wreg
 25318  0016FE  0100               	movlb	0	; () banked
 25319  001700  6F69               	movwf	monta_sd@index& (0+255),b
 25320                           
 25321                           ;SDCard.c: 297: unsigned char i, size;
 25322                           ;SDCard.c: 298: size = strlen(dado);
 25323  001702  C066  F060         	movff	monta_sd@dado,strlen@s
 25324  001706  C067  F061         	movff	monta_sd@dado+1,strlen@s+1
 25325  00170A  EC14  F02B         	call	_strlen	;wreg free
 25326  00170E  0100               	movlb	0	; () banked
 25327  001710  5160               	movf	?_strlen& (0+255),w,b
 25328  001712  6F68               	movwf	monta_sd@size& (0+255),b
 25329                           
 25330                           ;SDCard.c: 299: switch(index)
 25331  001714  D19A               	goto	l653
 25332  001716                     
 25333                           ; BSR set to: 0
 25334                           ;SDCard.c: 302: for(i=0; i<6;i++)
 25335                           
 25336                           ; BSR set to: 0
 25337  001716  0E00               	movlw	0
 25338  001718  6F6A               	movwf	monta_sd@i& (0+255),b
 25339  00171A                     l11876:
 25340                           
 25341                           ; BSR set to: 0
 25342  00171A  0E05               	movlw	5
 25343  00171C  656A               	cpfsgt	monta_sd@i& (0+255),b
 25344  00171E  D001               	goto	l655
 25345  001720  0012               	return	
 25346  001722                     l655:
 25347                           
 25348                           ; BSR set to: 0
 25349                           ;SDCard.c: 303: {
 25350                           ;SDCard.c: 304: string_dado.hora[i] = *dado;
 25351                           
 25352                           ; BSR set to: 0
 25353  001722  C066  FFF6         	movff	monta_sd@dado,tblptrl
 25354  001726  C067  FFF7         	movff	monta_sd@dado+1,tblptrh
 25355  00172A  6AF8               	clrf	tblptru,c
 25356  00172C  516A               	movf	monta_sd@i& (0+255),w,b
 25357  00172E  0D01               	mullw	1
 25358  001730  0E07               	movlw	low (_string_dado+7)
 25359  001732  24F3               	addwf	prodl,w,c
 25360  001734  6ED9               	movwf	fsr2l,c
 25361  001736  0E02               	movlw	high (_string_dado+7)
 25362  001738  20F4               	addwfc	prodh,w,c
 25363  00173A  6EDA               	movwf	fsr2h,c
 25364  00173C  0E07               	movlw	(high __ramtop+-1)
 25365  00173E  64F7               	cpfsgt	tblptrh,c
 25366  001740  D003               	bra	u15127
 25367  001742  0008               	tblrd		*
 25368  001744  50F5               	movf	tablat,w,c
 25369  001746  D005               	bra	u15120
 25370  001748                     u15127:
 25371  001748  CFF6 FFE9          	movff	tblptrl,fsr0l
 25372  00174C  CFF7 FFEA          	movff	tblptrh,fsr0h
 25373  001750  50EF               	movf	indf0,w,c
 25374  001752                     u15120:
 25375  001752  6EDF               	movwf	indf2,c
 25376                           
 25377                           ;SDCard.c: 305: dado++;
 25378  001754  0100               	movlb	0	; () banked
 25379  001756  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 25380  001758  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 25381                           
 25382                           ; BSR set to: 0
 25383  00175A  2B6A               	incf	monta_sd@i& (0+255),f,b
 25384  00175C  D7DE               	goto	l11876
 25385  00175E                     
 25386                           ; BSR set to: 0
 25387                           ;SDCard.c: 310: for(i=0; i<6;i++)
 25388                           
 25389                           ; BSR set to: 0
 25390  00175E  0E00               	movlw	0
 25391  001760  6F6A               	movwf	monta_sd@i& (0+255),b
 25392  001762                     l11890:
 25393                           
 25394                           ; BSR set to: 0
 25395  001762  0E05               	movlw	5
 25396  001764  656A               	cpfsgt	monta_sd@i& (0+255),b
 25397  001766  D001               	goto	l659
 25398  001768  0012               	return	
 25399  00176A                     l659:
 25400                           
 25401                           ; BSR set to: 0
 25402                           ;SDCard.c: 311: {
 25403                           ;SDCard.c: 312: string_dado.data[i] = *dado;
 25404                           
 25405                           ; BSR set to: 0
 25406  00176A  C066  FFF6         	movff	monta_sd@dado,tblptrl
 25407  00176E  C067  FFF7         	movff	monta_sd@dado+1,tblptrh
 25408  001772  6AF8               	clrf	tblptru,c
 25409  001774  516A               	movf	monta_sd@i& (0+255),w,b
 25410  001776  0D01               	mullw	1
 25411  001778  0E00               	movlw	low _string_dado
 25412  00177A  24F3               	addwf	prodl,w,c
 25413  00177C  6ED9               	movwf	fsr2l,c
 25414  00177E  0E02               	movlw	high _string_dado
 25415  001780  20F4               	addwfc	prodh,w,c
 25416  001782  6EDA               	movwf	fsr2h,c
 25417  001784  0E07               	movlw	(high __ramtop+-1)
 25418  001786  64F7               	cpfsgt	tblptrh,c
 25419  001788  D003               	bra	u15157
 25420  00178A  0008               	tblrd		*
 25421  00178C  50F5               	movf	tablat,w,c
 25422  00178E  D005               	bra	u15150
 25423  001790                     u15157:
 25424  001790  CFF6 FFE9          	movff	tblptrl,fsr0l
 25425  001794  CFF7 FFEA          	movff	tblptrh,fsr0h
 25426  001798  50EF               	movf	indf0,w,c
 25427  00179A                     u15150:
 25428  00179A  6EDF               	movwf	indf2,c
 25429                           
 25430                           ;SDCard.c: 313: dado++;
 25431  00179C  0100               	movlb	0	; () banked
 25432  00179E  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 25433  0017A0  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 25434                           
 25435                           ; BSR set to: 0
 25436  0017A2  2B6A               	incf	monta_sd@i& (0+255),f,b
 25437  0017A4  D7DE               	goto	l11890
 25438  0017A6                     
 25439                           ; BSR set to: 0
 25440                           ;SDCard.c: 318: dado++;
 25441                           
 25442                           ; BSR set to: 0
 25443  0017A6  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 25444  0017A8  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 25445                           
 25446                           ; BSR set to: 0
 25447                           ;SDCard.c: 319: for(i=0; i<11;i++)
 25448  0017AA  0E00               	movlw	0
 25449  0017AC  6F6A               	movwf	monta_sd@i& (0+255),b
 25450  0017AE                     l11906:
 25451                           
 25452                           ; BSR set to: 0
 25453  0017AE  0E0A               	movlw	10
 25454  0017B0  656A               	cpfsgt	monta_sd@i& (0+255),b
 25455  0017B2  D001               	goto	l662
 25456  0017B4  0012               	return	
 25457  0017B6                     l662:
 25458                           
 25459                           ; BSR set to: 0
 25460                           ;SDCard.c: 320: {
 25461                           ;SDCard.c: 321: if(*dado != '-')
 25462                           
 25463                           ; BSR set to: 0
 25464  0017B6  C066  FFF6         	movff	monta_sd@dado,tblptrl
 25465  0017BA  C067  FFF7         	movff	monta_sd@dado+1,tblptrh
 25466  0017BE  6AF8               	clrf	tblptru,c
 25467  0017C0  0E07               	movlw	(high __ramtop+-1)
 25468  0017C2  64F7               	cpfsgt	tblptrh,c
 25469  0017C4  D003               	bra	u15187
 25470  0017C6  0008               	tblrd		*
 25471  0017C8  50F5               	movf	tablat,w,c
 25472  0017CA  D005               	bra	u15180
 25473  0017CC                     u15187:
 25474  0017CC  CFF6 FFE9          	movff	tblptrl,fsr0l
 25475  0017D0  CFF7 FFEA          	movff	tblptrh,fsr0h
 25476  0017D4  50EF               	movf	indf0,w,c
 25477  0017D6                     u15180:
 25478  0017D6  0A2D               	xorlw	45
 25479  0017D8  B4D8               	btfsc	status,2,c
 25480  0017DA  D01A               	goto	l664
 25481                           
 25482                           ;SDCard.c: 322: {
 25483                           ;SDCard.c: 323: string_dado.lt[i] = *dado;
 25484  0017DC  C066  FFF6         	movff	monta_sd@dado,tblptrl
 25485  0017E0  C067  FFF7         	movff	monta_sd@dado+1,tblptrh
 25486  0017E4  6AF8               	clrf	tblptru,c
 25487  0017E6  0100               	movlb	0	; () banked
 25488  0017E8  516A               	movf	monta_sd@i& (0+255),w,b
 25489  0017EA  0D01               	mullw	1
 25490  0017EC  0E16               	movlw	low (_string_dado+22)
 25491  0017EE  24F3               	addwf	prodl,w,c
 25492  0017F0  6ED9               	movwf	fsr2l,c
 25493  0017F2  0E02               	movlw	high (_string_dado+22)
 25494  0017F4  20F4               	addwfc	prodh,w,c
 25495  0017F6  6EDA               	movwf	fsr2h,c
 25496  0017F8  0E07               	movlw	(high __ramtop+-1)
 25497  0017FA  64F7               	cpfsgt	tblptrh,c
 25498  0017FC  D003               	bra	u15207
 25499  0017FE  0008               	tblrd		*
 25500  001800  50F5               	movf	tablat,w,c
 25501  001802  D005               	bra	u15200
 25502  001804                     u15207:
 25503  001804  CFF6 FFE9          	movff	tblptrl,fsr0l
 25504  001808  CFF7 FFEA          	movff	tblptrh,fsr0h
 25505  00180C  50EF               	movf	indf0,w,c
 25506  00180E                     u15200:
 25507  00180E  6EDF               	movwf	indf2,c
 25508  001810                     l664:
 25509                           
 25510                           ;SDCard.c: 324: }
 25511                           ;SDCard.c: 325: dado++;
 25512  001810  0100               	movlb	0	; () banked
 25513  001812  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 25514  001814  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 25515                           
 25516                           ; BSR set to: 0
 25517  001816  2B6A               	incf	monta_sd@i& (0+255),f,b
 25518  001818  D7CA               	goto	l11906
 25519  00181A                     
 25520                           ; BSR set to: 0
 25521                           ;SDCard.c: 330: dado++;
 25522                           
 25523                           ; BSR set to: 0
 25524  00181A  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 25525  00181C  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 25526                           
 25527                           ; BSR set to: 0
 25528                           ;SDCard.c: 331: for(i=0; i<12;i++)
 25529  00181E  0E00               	movlw	0
 25530  001820  6F6A               	movwf	monta_sd@i& (0+255),b
 25531  001822                     l11924:
 25532                           
 25533                           ; BSR set to: 0
 25534  001822  0E0B               	movlw	11
 25535  001824  656A               	cpfsgt	monta_sd@i& (0+255),b
 25536  001826  D001               	goto	l666
 25537  001828  0012               	return	
 25538  00182A                     l666:
 25539                           
 25540                           ; BSR set to: 0
 25541                           ;SDCard.c: 332: {
 25542                           ;SDCard.c: 333: if(*dado != '-')
 25543                           
 25544                           ; BSR set to: 0
 25545  00182A  C066  FFF6         	movff	monta_sd@dado,tblptrl
 25546  00182E  C067  FFF7         	movff	monta_sd@dado+1,tblptrh
 25547  001832  6AF8               	clrf	tblptru,c
 25548  001834  0E07               	movlw	(high __ramtop+-1)
 25549  001836  64F7               	cpfsgt	tblptrh,c
 25550  001838  D003               	bra	u15237
 25551  00183A  0008               	tblrd		*
 25552  00183C  50F5               	movf	tablat,w,c
 25553  00183E  D005               	bra	u15230
 25554  001840                     u15237:
 25555  001840  CFF6 FFE9          	movff	tblptrl,fsr0l
 25556  001844  CFF7 FFEA          	movff	tblptrh,fsr0h
 25557  001848  50EF               	movf	indf0,w,c
 25558  00184A                     u15230:
 25559  00184A  0A2D               	xorlw	45
 25560  00184C  B4D8               	btfsc	status,2,c
 25561  00184E  D01A               	goto	l668
 25562                           
 25563                           ;SDCard.c: 334: {
 25564                           ;SDCard.c: 335: string_dado.lo[i] = *dado;
 25565  001850  C066  FFF6         	movff	monta_sd@dado,tblptrl
 25566  001854  C067  FFF7         	movff	monta_sd@dado+1,tblptrh
 25567  001858  6AF8               	clrf	tblptru,c
 25568  00185A  0100               	movlb	0	; () banked
 25569  00185C  516A               	movf	monta_sd@i& (0+255),w,b
 25570  00185E  0D01               	mullw	1
 25571  001860  0E23               	movlw	low (_string_dado+35)
 25572  001862  24F3               	addwf	prodl,w,c
 25573  001864  6ED9               	movwf	fsr2l,c
 25574  001866  0E02               	movlw	high (_string_dado+35)
 25575  001868  20F4               	addwfc	prodh,w,c
 25576  00186A  6EDA               	movwf	fsr2h,c
 25577  00186C  0E07               	movlw	(high __ramtop+-1)
 25578  00186E  64F7               	cpfsgt	tblptrh,c
 25579  001870  D003               	bra	u15257
 25580  001872  0008               	tblrd		*
 25581  001874  50F5               	movf	tablat,w,c
 25582  001876  D005               	bra	u15250
 25583  001878                     u15257:
 25584  001878  CFF6 FFE9          	movff	tblptrl,fsr0l
 25585  00187C  CFF7 FFEA          	movff	tblptrh,fsr0h
 25586  001880  50EF               	movf	indf0,w,c
 25587  001882                     u15250:
 25588  001882  6EDF               	movwf	indf2,c
 25589  001884                     l668:
 25590                           
 25591                           ;SDCard.c: 336: }
 25592                           ;SDCard.c: 337: dado++;
 25593  001884  0100               	movlb	0	; () banked
 25594  001886  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 25595  001888  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 25596                           
 25597                           ; BSR set to: 0
 25598  00188A  2B6A               	incf	monta_sd@i& (0+255),f,b
 25599  00188C  D7CA               	goto	l11924
 25600  00188E                     
 25601                           ; BSR set to: 0
 25602                           ;SDCard.c: 343: for(i=0; i<6;i++)
 25603                           
 25604                           ; BSR set to: 0
 25605  00188E  0E00               	movlw	0
 25606  001890  6F6A               	movwf	monta_sd@i& (0+255),b
 25607  001892                     l11940:
 25608                           
 25609                           ; BSR set to: 0
 25610  001892  0E05               	movlw	5
 25611  001894  656A               	cpfsgt	monta_sd@i& (0+255),b
 25612  001896  D001               	goto	l670
 25613  001898  0012               	return	
 25614  00189A                     l670:
 25615                           
 25616                           ; BSR set to: 0
 25617                           ;SDCard.c: 344: {
 25618                           ;SDCard.c: 345: if(*dado != ' ' && *dado != '\0')
 25619                           
 25620                           ; BSR set to: 0
 25621  00189A  C066  FFF6         	movff	monta_sd@dado,tblptrl
 25622  00189E  C067  FFF7         	movff	monta_sd@dado+1,tblptrh
 25623  0018A2  6AF8               	clrf	tblptru,c
 25624  0018A4  0E07               	movlw	(high __ramtop+-1)
 25625  0018A6  64F7               	cpfsgt	tblptrh,c
 25626  0018A8  D003               	bra	u15287
 25627  0018AA  0008               	tblrd		*
 25628  0018AC  50F5               	movf	tablat,w,c
 25629  0018AE  D005               	bra	u15280
 25630  0018B0                     u15287:
 25631  0018B0  CFF6 FFE9          	movff	tblptrl,fsr0l
 25632  0018B4  CFF7 FFEA          	movff	tblptrh,fsr0h
 25633  0018B8  50EF               	movf	indf0,w,c
 25634  0018BA                     u15280:
 25635  0018BA  0A20               	xorlw	32
 25636  0018BC  B4D8               	btfsc	status,2,c
 25637  0018BE  D02D               	goto	l672
 25638  0018C0  C066  FFF6         	movff	monta_sd@dado,tblptrl
 25639  0018C4  C067  FFF7         	movff	monta_sd@dado+1,tblptrh
 25640  0018C8  6AF8               	clrf	tblptru,c
 25641  0018CA  0E07               	movlw	(high __ramtop+-1)
 25642  0018CC  64F7               	cpfsgt	tblptrh,c
 25643  0018CE  D003               	bra	u15307
 25644  0018D0  0008               	tblrd		*
 25645  0018D2  50F5               	movf	tablat,w,c
 25646  0018D4  D005               	bra	u15300
 25647  0018D6                     u15307:
 25648  0018D6  CFF6 FFE9          	movff	tblptrl,fsr0l
 25649  0018DA  CFF7 FFEA          	movff	tblptrh,fsr0h
 25650  0018DE  50EF               	movf	indf0,w,c
 25651  0018E0                     u15300:
 25652  0018E0  0900               	iorlw	0
 25653  0018E2  B4D8               	btfsc	status,2,c
 25654  0018E4  D01A               	goto	l672
 25655                           
 25656                           ;SDCard.c: 346: {
 25657                           ;SDCard.c: 347: string_dado.fence[i] = *dado;
 25658  0018E6  C066  FFF6         	movff	monta_sd@dado,tblptrl
 25659  0018EA  C067  FFF7         	movff	monta_sd@dado+1,tblptrh
 25660  0018EE  6AF8               	clrf	tblptru,c
 25661  0018F0  0100               	movlb	0	; () banked
 25662  0018F2  516A               	movf	monta_sd@i& (0+255),w,b
 25663  0018F4  0D01               	mullw	1
 25664  0018F6  0E34               	movlw	low (_string_dado+52)
 25665  0018F8  24F3               	addwf	prodl,w,c
 25666  0018FA  6ED9               	movwf	fsr2l,c
 25667  0018FC  0E02               	movlw	high (_string_dado+52)
 25668  0018FE  20F4               	addwfc	prodh,w,c
 25669  001900  6EDA               	movwf	fsr2h,c
 25670  001902  0E07               	movlw	(high __ramtop+-1)
 25671  001904  64F7               	cpfsgt	tblptrh,c
 25672  001906  D003               	bra	u15327
 25673  001908  0008               	tblrd		*
 25674  00190A  50F5               	movf	tablat,w,c
 25675  00190C  D005               	bra	u15320
 25676  00190E                     u15327:
 25677  00190E  CFF6 FFE9          	movff	tblptrl,fsr0l
 25678  001912  CFF7 FFEA          	movff	tblptrh,fsr0h
 25679  001916  50EF               	movf	indf0,w,c
 25680  001918                     u15320:
 25681  001918  6EDF               	movwf	indf2,c
 25682  00191A                     l672:
 25683                           
 25684                           ;SDCard.c: 348: }
 25685                           ;SDCard.c: 349: dado++;
 25686  00191A  0100               	movlb	0	; () banked
 25687  00191C  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 25688  00191E  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 25689                           
 25690                           ; BSR set to: 0
 25691  001920  2B6A               	incf	monta_sd@i& (0+255),f,b
 25692  001922  D7B7               	goto	l11940
 25693  001924                     
 25694                           ; BSR set to: 0
 25695                           ;SDCard.c: 354: for(i=0; i<4;i++)
 25696                           
 25697                           ; BSR set to: 0
 25698  001924  0E00               	movlw	0
 25699  001926  6F6A               	movwf	monta_sd@i& (0+255),b
 25700  001928                     l11958:
 25701                           
 25702                           ; BSR set to: 0
 25703  001928  0E03               	movlw	3
 25704  00192A  656A               	cpfsgt	monta_sd@i& (0+255),b
 25705  00192C  D001               	goto	l674
 25706  00192E  0012               	return	
 25707  001930                     l674:
 25708                           
 25709                           ; BSR set to: 0
 25710                           ;SDCard.c: 355: {
 25711                           ;SDCard.c: 356: string_dado.hora_name[i] = *dado;
 25712                           
 25713                           ; BSR set to: 0
 25714  001930  C066  FFF6         	movff	monta_sd@dado,tblptrl
 25715  001934  C067  FFF7         	movff	monta_sd@dado+1,tblptrh
 25716  001938  6AF8               	clrf	tblptru,c
 25717  00193A  516A               	movf	monta_sd@i& (0+255),w,b
 25718  00193C  0D01               	mullw	1
 25719  00193E  0E14               	movlw	low (_string_dado+20)
 25720  001940  24F3               	addwf	prodl,w,c
 25721  001942  6ED9               	movwf	fsr2l,c
 25722  001944  0E02               	movlw	high (_string_dado+20)
 25723  001946  20F4               	addwfc	prodh,w,c
 25724  001948  6EDA               	movwf	fsr2h,c
 25725  00194A  0E07               	movlw	(high __ramtop+-1)
 25726  00194C  64F7               	cpfsgt	tblptrh,c
 25727  00194E  D003               	bra	u15357
 25728  001950  0008               	tblrd		*
 25729  001952  50F5               	movf	tablat,w,c
 25730  001954  D005               	bra	u15350
 25731  001956                     u15357:
 25732  001956  CFF6 FFE9          	movff	tblptrl,fsr0l
 25733  00195A  CFF7 FFEA          	movff	tblptrh,fsr0h
 25734  00195E  50EF               	movf	indf0,w,c
 25735  001960                     u15350:
 25736  001960  6EDF               	movwf	indf2,c
 25737                           
 25738                           ;SDCard.c: 357: dado++;
 25739  001962  0100               	movlb	0	; () banked
 25740  001964  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 25741  001966  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 25742                           
 25743                           ; BSR set to: 0
 25744  001968  2B6A               	incf	monta_sd@i& (0+255),f,b
 25745  00196A  D7DE               	goto	l11958
 25746  00196C                     
 25747                           ; BSR set to: 0
 25748                           ;SDCard.c: 363: for(i=0; i<4;i++)
 25749                           
 25750                           ; BSR set to: 0
 25751  00196C  0E00               	movlw	0
 25752  00196E  6F6A               	movwf	monta_sd@i& (0+255),b
 25753  001970                     l11972:
 25754                           
 25755                           ; BSR set to: 0
 25756  001970  0E03               	movlw	3
 25757  001972  656A               	cpfsgt	monta_sd@i& (0+255),b
 25758  001974  D001               	goto	l677
 25759  001976  0012               	return	
 25760  001978                     l677:
 25761                           
 25762                           ; BSR set to: 0
 25763                           ;SDCard.c: 364: {
 25764                           ;SDCard.c: 365: string_dado.data_name[i] = *dado;
 25765                           
 25766                           ; BSR set to: 0
 25767  001978  C066  FFF6         	movff	monta_sd@dado,tblptrl
 25768  00197C  C067  FFF7         	movff	monta_sd@dado+1,tblptrh
 25769  001980  6AF8               	clrf	tblptru,c
 25770  001982  516A               	movf	monta_sd@i& (0+255),w,b
 25771  001984  0D01               	mullw	1
 25772  001986  0E12               	movlw	low (_string_dado+18)
 25773  001988  24F3               	addwf	prodl,w,c
 25774  00198A  6ED9               	movwf	fsr2l,c
 25775  00198C  0E02               	movlw	high (_string_dado+18)
 25776  00198E  20F4               	addwfc	prodh,w,c
 25777  001990  6EDA               	movwf	fsr2h,c
 25778  001992  0E07               	movlw	(high __ramtop+-1)
 25779  001994  64F7               	cpfsgt	tblptrh,c
 25780  001996  D003               	bra	u15387
 25781  001998  0008               	tblrd		*
 25782  00199A  50F5               	movf	tablat,w,c
 25783  00199C  D005               	bra	u15380
 25784  00199E                     u15387:
 25785  00199E  CFF6 FFE9          	movff	tblptrl,fsr0l
 25786  0019A2  CFF7 FFEA          	movff	tblptrh,fsr0h
 25787  0019A6  50EF               	movf	indf0,w,c
 25788  0019A8                     u15380:
 25789  0019A8  6EDF               	movwf	indf2,c
 25790                           
 25791                           ;SDCard.c: 366: dado++;
 25792  0019AA  0100               	movlb	0	; () banked
 25793  0019AC  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 25794  0019AE  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 25795                           
 25796                           ; BSR set to: 0
 25797  0019B0  2B6A               	incf	monta_sd@i& (0+255),f,b
 25798  0019B2  D7DE               	goto	l11972
 25799  0019B4                     
 25800                           ; BSR set to: 0
 25801                           ;SDCard.c: 371: for(i=0; i<6;i++)
 25802                           
 25803                           ; BSR set to: 0
 25804  0019B4  0E00               	movlw	0
 25805  0019B6  6F6A               	movwf	monta_sd@i& (0+255),b
 25806  0019B8                     l11986:
 25807                           
 25808                           ; BSR set to: 0
 25809  0019B8  0E05               	movlw	5
 25810  0019BA  656A               	cpfsgt	monta_sd@i& (0+255),b
 25811  0019BC  D001               	goto	l680
 25812  0019BE  0012               	return	
 25813  0019C0                     l680:
 25814                           
 25815                           ; BSR set to: 0
 25816                           ;SDCard.c: 372: {
 25817                           ;SDCard.c: 373: if(*dado != ' ' && *dado != '\0')
 25818                           
 25819                           ; BSR set to: 0
 25820  0019C0  C066  FFF6         	movff	monta_sd@dado,tblptrl
 25821  0019C4  C067  FFF7         	movff	monta_sd@dado+1,tblptrh
 25822  0019C8  6AF8               	clrf	tblptru,c
 25823  0019CA  0E07               	movlw	(high __ramtop+-1)
 25824  0019CC  64F7               	cpfsgt	tblptrh,c
 25825  0019CE  D003               	bra	u15417
 25826  0019D0  0008               	tblrd		*
 25827  0019D2  50F5               	movf	tablat,w,c
 25828  0019D4  D005               	bra	u15410
 25829  0019D6                     u15417:
 25830  0019D6  CFF6 FFE9          	movff	tblptrl,fsr0l
 25831  0019DA  CFF7 FFEA          	movff	tblptrh,fsr0h
 25832  0019DE  50EF               	movf	indf0,w,c
 25833  0019E0                     u15410:
 25834  0019E0  0A20               	xorlw	32
 25835  0019E2  B4D8               	btfsc	status,2,c
 25836  0019E4  D02D               	goto	l682
 25837  0019E6  C066  FFF6         	movff	monta_sd@dado,tblptrl
 25838  0019EA  C067  FFF7         	movff	monta_sd@dado+1,tblptrh
 25839  0019EE  6AF8               	clrf	tblptru,c
 25840  0019F0  0E07               	movlw	(high __ramtop+-1)
 25841  0019F2  64F7               	cpfsgt	tblptrh,c
 25842  0019F4  D003               	bra	u15437
 25843  0019F6  0008               	tblrd		*
 25844  0019F8  50F5               	movf	tablat,w,c
 25845  0019FA  D005               	bra	u15430
 25846  0019FC                     u15437:
 25847  0019FC  CFF6 FFE9          	movff	tblptrl,fsr0l
 25848  001A00  CFF7 FFEA          	movff	tblptrh,fsr0h
 25849  001A04  50EF               	movf	indf0,w,c
 25850  001A06                     u15430:
 25851  001A06  0900               	iorlw	0
 25852  001A08  B4D8               	btfsc	status,2,c
 25853  001A0A  D01A               	goto	l682
 25854                           
 25855                           ;SDCard.c: 374: {
 25856                           ;SDCard.c: 375: string_dado.vel[i] = *dado;
 25857  001A0C  C066  FFF6         	movff	monta_sd@dado,tblptrl
 25858  001A10  C067  FFF7         	movff	monta_sd@dado+1,tblptrh
 25859  001A14  6AF8               	clrf	tblptru,c
 25860  001A16  0100               	movlb	0	; () banked
 25861  001A18  516A               	movf	monta_sd@i& (0+255),w,b
 25862  001A1A  0D01               	mullw	1
 25863  001A1C  0E30               	movlw	low (_string_dado+48)
 25864  001A1E  24F3               	addwf	prodl,w,c
 25865  001A20  6ED9               	movwf	fsr2l,c
 25866  001A22  0E02               	movlw	high (_string_dado+48)
 25867  001A24  20F4               	addwfc	prodh,w,c
 25868  001A26  6EDA               	movwf	fsr2h,c
 25869  001A28  0E07               	movlw	(high __ramtop+-1)
 25870  001A2A  64F7               	cpfsgt	tblptrh,c
 25871  001A2C  D003               	bra	u15457
 25872  001A2E  0008               	tblrd		*
 25873  001A30  50F5               	movf	tablat,w,c
 25874  001A32  D005               	bra	u15450
 25875  001A34                     u15457:
 25876  001A34  CFF6 FFE9          	movff	tblptrl,fsr0l
 25877  001A38  CFF7 FFEA          	movff	tblptrh,fsr0h
 25878  001A3C  50EF               	movf	indf0,w,c
 25879  001A3E                     u15450:
 25880  001A3E  6EDF               	movwf	indf2,c
 25881  001A40                     l682:
 25882                           
 25883                           ;SDCard.c: 376: }
 25884                           ;SDCard.c: 378: dado++;
 25885  001A40  0100               	movlb	0	; () banked
 25886  001A42  4B66               	infsnz	monta_sd@dado& (0+255),f,b
 25887  001A44  2B67               	incf	(monta_sd@dado+1)& (0+255),f,b
 25888                           
 25889                           ; BSR set to: 0
 25890  001A46  2B6A               	incf	monta_sd@i& (0+255),f,b
 25891  001A48  D7B7               	goto	l11986
 25892  001A4A                     l653:
 25893                           
 25894                           ; BSR set to: 0
 25895                           
 25896                           ; BSR set to: 0
 25897  001A4A  5169               	movf	monta_sd@index& (0+255),w,b
 25898                           
 25899                           ; Switch size 1, requested type "space"
 25900                           ; Number of cases is 8, Range of values is 0 to 7
 25901                           ; switch strategies available:
 25902                           ; Name         Instructions Cycles
 25903                           ; simple_byte           25    13 (average)
 25904                           ;	Chosen strategy is simple_byte
 25905  001A4C  0A00               	xorlw	0	; case 0
 25906  001A4E  B4D8               	btfsc	status,2,c
 25907  001A50  D662               	goto	l654
 25908  001A52  0A01               	xorlw	1	; case 1
 25909  001A54  B4D8               	btfsc	status,2,c
 25910  001A56  D683               	goto	l658
 25911  001A58  0A03               	xorlw	3	; case 2
 25912  001A5A  B4D8               	btfsc	status,2,c
 25913  001A5C  D6A4               	goto	l661
 25914  001A5E  0A01               	xorlw	1	; case 3
 25915  001A60  B4D8               	btfsc	status,2,c
 25916  001A62  D6DB               	goto	l665
 25917  001A64  0A07               	xorlw	7	; case 4
 25918  001A66  B4D8               	btfsc	status,2,c
 25919  001A68  D712               	goto	l669
 25920  001A6A  0A01               	xorlw	1	; case 5
 25921  001A6C  B4D8               	btfsc	status,2,c
 25922  001A6E  D75A               	goto	l673
 25923  001A70  0A03               	xorlw	3	; case 6
 25924  001A72  B4D8               	btfsc	status,2,c
 25925  001A74  D77B               	goto	l676
 25926  001A76  0A01               	xorlw	1	; case 7
 25927  001A78  A4D8               	btfss	status,2,c
 25928  001A7A  0012               	return	
 25929  001A7C  D79B               	goto	l679
 25930  001A7E                     __end_of_monta_sd:
 25931                           	opt stack 0
 25932                           tosu	equ	0xFFF
 25933                           tosh	equ	0xFFE
 25934                           tosl	equ	0xFFD
 25935                           pclath	equ	0xFFA
 25936                           tblptru	equ	0xFF8
 25937                           tblptrh	equ	0xFF7
 25938                           tblptrl	equ	0xFF6
 25939                           tablat	equ	0xFF5
 25940                           prodh	equ	0xFF4
 25941                           prodl	equ	0xFF3
 25942                           intcon	equ	0xFF2
 25943                           intcon2	equ	0xFF1
 25944                           intcon3	equ	0xFF0
 25945                           indf0	equ	0xFEF
 25946                           postinc0	equ	0xFEE
 25947                           fsr0h	equ	0xFEA
 25948                           fsr0l	equ	0xFE9
 25949                           wreg	equ	0xFE8
 25950                           indf1	equ	0xFE7
 25951                           postinc1	equ	0xFE6
 25952                           postdec1	equ	0xFE5
 25953                           plusw1	equ	0xFE3
 25954                           fsr1h	equ	0xFE2
 25955                           fsr1l	equ	0xFE1
 25956                           indf2	equ	0xFDF
 25957                           postinc2	equ	0xFDE
 25958                           postdec2	equ	0xFDD
 25959                           plusw2	equ	0xFDB
 25960                           fsr2h	equ	0xFDA
 25961                           fsr2l	equ	0xFD9
 25962                           status	equ	0xFD8
 25963                           
 25964 ;; *************** function _strlen *****************
 25965 ;; Defined at:
 25966 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
 25967 ;; Parameters:    Size  Location     Type
 25968 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 25969 ;;		 -> STR_27(7), STR_26(5), rawDate(7), rawSpeed(6), 
 25970 ;;		 -> rawLongitude(12), rawLatitude(11), rawTime(11), 
 25971 ;; Auto vars:     Size  Location     Type
 25972 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 25973 ;;		 -> STR_27(7), STR_26(5), rawDate(7), rawSpeed(6), 
 25974 ;;		 -> rawLongitude(12), rawLatitude(11), rawTime(11), 
 25975 ;; Return value:  Size  Location     Type
 25976 ;;                  2    0[BANK0 ] unsigned int 
 25977 ;; Registers used:
 25978 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 25979 ;; Tracked objects:
 25980 ;;		On entry : 0/0
 25981 ;;		On exit  : 0/0
 25982 ;;		Unchanged: 0/0
 25983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25984 ;;      Params:         0       2       0       0       0       0       0       0       0
 25985 ;;      Locals:         0       2       0       0       0       0       0       0       0
 25986 ;;      Temps:          0       2       0       0       0       0       0       0       0
 25987 ;;      Totals:         0       6       0       0       0       0       0       0       0
 25988 ;;Total ram usage:        6 bytes
 25989 ;; Hardware stack levels used:    1
 25990 ;; Hardware stack levels required when called:    3
 25991 ;; This function calls:
 25992 ;;		Nothing
 25993 ;; This function is called by:
 25994 ;;		_monta_sd
 25995 ;; This function uses a non-reentrant model
 25996 ;;
 25997                           
 25998                           	psect	text109
 25999  005628                     __ptext109:
 26000                           	opt stack 0
 26001  005628                     _strlen:
 26002                           	opt stack 23
 26003                           
 26004                           ; BSR set to: 0
 26005                           ;incstack = 0
 26006  005628  C060  F064         	movff	strlen@s,strlen@cp
 26007  00562C  C061  F065         	movff	strlen@s+1,strlen@cp+1
 26008  005630  D003               	goto	l2274
 26009  005632  0100               	movlb	0	; () banked
 26010  005634  4B64               	infsnz	strlen@cp& (0+255),f,b
 26011  005636  2B65               	incf	(strlen@cp+1)& (0+255),f,b
 26012  005638                     l2274:
 26013                           
 26014                           ; BSR set to: 0
 26015  005638  C064  FFF6         	movff	strlen@cp,tblptrl
 26016  00563C  C065  FFF7         	movff	strlen@cp+1,tblptrh
 26017  005640  6AF8               	clrf	tblptru,c
 26018  005642  0E07               	movlw	(high __ramtop+-1)
 26019  005644  64F7               	cpfsgt	tblptrh,c
 26020  005646  D003               	bra	u14507
 26021  005648  0008               	tblrd		*
 26022  00564A  50F5               	movf	tablat,w,c
 26023  00564C  D005               	bra	u14500
 26024  00564E                     u14507:
 26025  00564E  CFF6 FFE9          	movff	tblptrl,fsr0l
 26026  005652  CFF7 FFEA          	movff	tblptrh,fsr0h
 26027  005656  50EF               	movf	indf0,w,c
 26028  005658                     u14500:
 26029  005658  0900               	iorlw	0
 26030  00565A  A4D8               	btfss	status,2,c
 26031  00565C  D7EA               	goto	l2275
 26032  00565E  C060  F062         	movff	strlen@s,??_strlen
 26033  005662  C061  F063         	movff	strlen@s+1,??_strlen+1
 26034  005666  0100               	movlb	0	; () banked
 26035  005668  1F62               	comf	??_strlen& (0+255),f,b
 26036  00566A  1F63               	comf	(??_strlen+1)& (0+255),f,b
 26037  00566C  4B62               	infsnz	??_strlen& (0+255),f,b
 26038  00566E  2B63               	incf	(??_strlen+1)& (0+255),f,b
 26039  005670  5164               	movf	strlen@cp& (0+255),w,b
 26040  005672  2562               	addwf	??_strlen& (0+255),w,b
 26041  005674  6F60               	movwf	?_strlen& (0+255),b
 26042  005676  5165               	movf	(strlen@cp+1)& (0+255),w,b
 26043  005678  2163               	addwfc	(??_strlen+1)& (0+255),w,b
 26044  00567A  6F61               	movwf	(?_strlen+1)& (0+255),b
 26045  00567C  0012               	return	
 26046  00567E                     __end_of_strlen:
 26047                           	opt stack 0
 26048                           tosu	equ	0xFFF
 26049                           tosh	equ	0xFFE
 26050                           tosl	equ	0xFFD
 26051                           pclath	equ	0xFFA
 26052                           tblptru	equ	0xFF8
 26053                           tblptrh	equ	0xFF7
 26054                           tblptrl	equ	0xFF6
 26055                           tablat	equ	0xFF5
 26056                           prodh	equ	0xFF4
 26057                           prodl	equ	0xFF3
 26058                           intcon	equ	0xFF2
 26059                           intcon2	equ	0xFF1
 26060                           intcon3	equ	0xFF0
 26061                           indf0	equ	0xFEF
 26062                           postinc0	equ	0xFEE
 26063                           fsr0h	equ	0xFEA
 26064                           fsr0l	equ	0xFE9
 26065                           wreg	equ	0xFE8
 26066                           indf1	equ	0xFE7
 26067                           postinc1	equ	0xFE6
 26068                           postdec1	equ	0xFE5
 26069                           plusw1	equ	0xFE3
 26070                           fsr1h	equ	0xFE2
 26071                           fsr1l	equ	0xFE1
 26072                           indf2	equ	0xFDF
 26073                           postinc2	equ	0xFDE
 26074                           postdec2	equ	0xFDD
 26075                           plusw2	equ	0xFDB
 26076                           fsr2h	equ	0xFDA
 26077                           fsr2l	equ	0xFD9
 26078                           status	equ	0xFD8
 26079                           
 26080 ;; *************** function _desliga_uart *****************
 26081 ;; Defined at:
 26082 ;;		line 223 in file "bibliotecas/uart.c"
 26083 ;; Parameters:    Size  Location     Type
 26084 ;;		None
 26085 ;; Auto vars:     Size  Location     Type
 26086 ;;		None
 26087 ;; Return value:  Size  Location     Type
 26088 ;;                  1    wreg      void 
 26089 ;; Registers used:
 26090 ;;		wreg, status,2
 26091 ;; Tracked objects:
 26092 ;;		On entry : 0/0
 26093 ;;		On exit  : 0/0
 26094 ;;		Unchanged: 0/0
 26095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26096 ;;      Params:         0       0       0       0       0       0       0       0       0
 26097 ;;      Locals:         0       0       0       0       0       0       0       0       0
 26098 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26099 ;;      Totals:         0       0       0       0       0       0       0       0       0
 26100 ;;Total ram usage:        0 bytes
 26101 ;; Hardware stack levels used:    1
 26102 ;; Hardware stack levels required when called:    3
 26103 ;; This function calls:
 26104 ;;		Nothing
 26105 ;; This function is called by:
 26106 ;;		_grava_sd
 26107 ;;		_sdcard_init
 26108 ;;		_leitura_sdcard
 26109 ;; This function uses a non-reentrant model
 26110 ;;
 26111                           
 26112                           	psect	text110
 26113  005F1A                     __ptext110:
 26114                           	opt stack 0
 26115  005F1A                     _desliga_uart:
 26116                           	opt stack 24
 26117                           
 26118                           ;uart.c: 226: TRISCbits.RC6 = 1;
 26119                           
 26120                           ; BSR set to: 0
 26121                           ;incstack = 0
 26122  005F1A  8C94               	bsf	3988,6,c	;volatile
 26123                           
 26124                           ;uart.c: 227: TRISCbits.RC7 = 1;
 26125  005F1C  8E94               	bsf	3988,7,c	;volatile
 26126                           
 26127                           ;uart.c: 230: TXSTA = 0x00;
 26128  005F1E  0E00               	movlw	0
 26129  005F20  6EAC               	movwf	4012,c	;volatile
 26130                           
 26131                           ;uart.c: 232: RCSTA = 0x00;
 26132  005F22  0E00               	movlw	0
 26133  005F24  6EAB               	movwf	4011,c	;volatile
 26134                           
 26135                           ;uart.c: 233: RCREG = 0x00;
 26136  005F26  0E00               	movlw	0
 26137  005F28  6EAE               	movwf	4014,c	;volatile
 26138  005F2A  0012               	return		;funcret
 26139  005F2C                     __end_of_desliga_uart:
 26140                           	opt stack 0
 26141                           tosu	equ	0xFFF
 26142                           tosh	equ	0xFFE
 26143                           tosl	equ	0xFFD
 26144                           pclath	equ	0xFFA
 26145                           tblptru	equ	0xFF8
 26146                           tblptrh	equ	0xFF7
 26147                           tblptrl	equ	0xFF6
 26148                           tablat	equ	0xFF5
 26149                           prodh	equ	0xFF4
 26150                           prodl	equ	0xFF3
 26151                           intcon	equ	0xFF2
 26152                           intcon2	equ	0xFF1
 26153                           intcon3	equ	0xFF0
 26154                           indf0	equ	0xFEF
 26155                           postinc0	equ	0xFEE
 26156                           fsr0h	equ	0xFEA
 26157                           fsr0l	equ	0xFE9
 26158                           wreg	equ	0xFE8
 26159                           indf1	equ	0xFE7
 26160                           postinc1	equ	0xFE6
 26161                           postdec1	equ	0xFE5
 26162                           plusw1	equ	0xFE3
 26163                           fsr1h	equ	0xFE2
 26164                           fsr1l	equ	0xFE1
 26165                           indf2	equ	0xFDF
 26166                           postinc2	equ	0xFDE
 26167                           postdec2	equ	0xFDD
 26168                           plusw2	equ	0xFDB
 26169                           fsr2h	equ	0xFDA
 26170                           fsr2l	equ	0xFD9
 26171                           status	equ	0xFD8
 26172                           
 26173 ;; *************** function _desliga_SPI *****************
 26174 ;; Defined at:
 26175 ;;		line 75 in file "bibliotecas/SPI.c"
 26176 ;; Parameters:    Size  Location     Type
 26177 ;;		None
 26178 ;; Auto vars:     Size  Location     Type
 26179 ;;		None
 26180 ;; Return value:  Size  Location     Type
 26181 ;;                  1    wreg      void 
 26182 ;; Registers used:
 26183 ;;		wreg, status,2
 26184 ;; Tracked objects:
 26185 ;;		On entry : 0/0
 26186 ;;		On exit  : 0/0
 26187 ;;		Unchanged: 0/0
 26188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26189 ;;      Params:         0       0       0       0       0       0       0       0       0
 26190 ;;      Locals:         0       0       0       0       0       0       0       0       0
 26191 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26192 ;;      Totals:         0       0       0       0       0       0       0       0       0
 26193 ;;Total ram usage:        0 bytes
 26194 ;; Hardware stack levels used:    1
 26195 ;; Hardware stack levels required when called:    3
 26196 ;; This function calls:
 26197 ;;		Nothing
 26198 ;; This function is called by:
 26199 ;;		_grava_sd
 26200 ;;		_leitura_sdcard
 26201 ;; This function uses a non-reentrant model
 26202 ;;
 26203                           
 26204                           	psect	text111
 26205  005F3E                     __ptext111:
 26206                           	opt stack 0
 26207  005F3E                     _desliga_SPI:
 26208                           	opt stack 24
 26209                           
 26210                           ;SPI.c: 77: SSPSTAT = 0x00;
 26211                           
 26212                           ;incstack = 0
 26213  005F3E  0E00               	movlw	0
 26214  005F40  6EC7               	movwf	4039,c	;volatile
 26215                           
 26216                           ;SPI.c: 78: SSPCON1 = 0x00;
 26217  005F42  0E00               	movlw	0
 26218  005F44  6EC6               	movwf	4038,c	;volatile
 26219                           
 26220                           ;SPI.c: 79: SSPCON1bits.SSPEN = 0;
 26221  005F46  9AC6               	bcf	4038,5,c	;volatile
 26222                           
 26223                           ;SPI.c: 80: SSPBUF = 0x00;
 26224  005F48  0E00               	movlw	0
 26225  005F4A  6EC9               	movwf	4041,c	;volatile
 26226  005F4C  0012               	return		;funcret
 26227  005F4E                     __end_of_desliga_SPI:
 26228                           	opt stack 0
 26229                           tosu	equ	0xFFF
 26230                           tosh	equ	0xFFE
 26231                           tosl	equ	0xFFD
 26232                           pclath	equ	0xFFA
 26233                           tblptru	equ	0xFF8
 26234                           tblptrh	equ	0xFF7
 26235                           tblptrl	equ	0xFF6
 26236                           tablat	equ	0xFF5
 26237                           prodh	equ	0xFF4
 26238                           prodl	equ	0xFF3
 26239                           intcon	equ	0xFF2
 26240                           intcon2	equ	0xFF1
 26241                           intcon3	equ	0xFF0
 26242                           indf0	equ	0xFEF
 26243                           postinc0	equ	0xFEE
 26244                           fsr0h	equ	0xFEA
 26245                           fsr0l	equ	0xFE9
 26246                           wreg	equ	0xFE8
 26247                           indf1	equ	0xFE7
 26248                           postinc1	equ	0xFE6
 26249                           postdec1	equ	0xFE5
 26250                           plusw1	equ	0xFE3
 26251                           fsr1h	equ	0xFE2
 26252                           fsr1l	equ	0xFE1
 26253                           indf2	equ	0xFDF
 26254                           postinc2	equ	0xFDE
 26255                           postdec2	equ	0xFDD
 26256                           plusw2	equ	0xFDB
 26257                           fsr2h	equ	0xFDA
 26258                           fsr2l	equ	0xFD9
 26259                           status	equ	0xFD8
 26260                           
 26261 ;; *************** function _fix *****************
 26262 ;; Defined at:
 26263 ;;		line 261 in file "bibliotecas/GPS.c"
 26264 ;; Parameters:    Size  Location     Type
 26265 ;;		None
 26266 ;; Auto vars:     Size  Location     Type
 26267 ;;		None
 26268 ;; Return value:  Size  Location     Type
 26269 ;;                  2    0[BANK0 ] PTR unsigned char 
 26270 ;; Registers used:
 26271 ;;		wreg, status,2, status,0
 26272 ;; Tracked objects:
 26273 ;;		On entry : 0/0
 26274 ;;		On exit  : 0/0
 26275 ;;		Unchanged: 0/0
 26276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26277 ;;      Params:         0       2       0       0       0       0       0       0       0
 26278 ;;      Locals:         0       0       0       0       0       0       0       0       0
 26279 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26280 ;;      Totals:         0       2       0       0       0       0       0       0       0
 26281 ;;Total ram usage:        2 bytes
 26282 ;; Hardware stack levels used:    1
 26283 ;; Hardware stack levels required when called:    3
 26284 ;; This function calls:
 26285 ;;		Nothing
 26286 ;; This function is called by:
 26287 ;;		_disparo_gravacao
 26288 ;;		_troca_de_tela
 26289 ;; This function uses a non-reentrant model
 26290 ;;
 26291                           
 26292                           	psect	text112
 26293  005F90                     __ptext112:
 26294                           	opt stack 0
 26295  005F90                     _fix:
 26296                           	opt stack 25
 26297                           
 26298                           ;GPS.c: 263: return rawFix;
 26299                           
 26300                           ;incstack = 0
 26301  005F90  0ECB               	movlw	low _rawFix
 26302  005F92  0100               	movlb	0	; () banked
 26303  005F94  6F60               	movwf	?_fix& (0+255),b
 26304  005F96  0E01               	movlw	high _rawFix
 26305  005F98  6F61               	movwf	(?_fix+1)& (0+255),b
 26306  005F9A  0012               	return	
 26307  005F9C                     __end_of_fix:
 26308                           	opt stack 0
 26309                           tosu	equ	0xFFF
 26310                           tosh	equ	0xFFE
 26311                           tosl	equ	0xFFD
 26312                           pclath	equ	0xFFA
 26313                           tblptru	equ	0xFF8
 26314                           tblptrh	equ	0xFF7
 26315                           tblptrl	equ	0xFF6
 26316                           tablat	equ	0xFF5
 26317                           prodh	equ	0xFF4
 26318                           prodl	equ	0xFF3
 26319                           intcon	equ	0xFF2
 26320                           intcon2	equ	0xFF1
 26321                           intcon3	equ	0xFF0
 26322                           indf0	equ	0xFEF
 26323                           postinc0	equ	0xFEE
 26324                           fsr0h	equ	0xFEA
 26325                           fsr0l	equ	0xFE9
 26326                           wreg	equ	0xFE8
 26327                           indf1	equ	0xFE7
 26328                           postinc1	equ	0xFE6
 26329                           postdec1	equ	0xFE5
 26330                           plusw1	equ	0xFE3
 26331                           fsr1h	equ	0xFE2
 26332                           fsr1l	equ	0xFE1
 26333                           indf2	equ	0xFDF
 26334                           postinc2	equ	0xFDE
 26335                           postdec2	equ	0xFDD
 26336                           plusw2	equ	0xFDB
 26337                           fsr2h	equ	0xFDA
 26338                           fsr2l	equ	0xFD9
 26339                           status	equ	0xFD8
 26340                           
 26341 ;; *************** function _isr *****************
 26342 ;; Defined at:
 26343 ;;		line 106 in file "main.c"
 26344 ;; Parameters:    Size  Location     Type
 26345 ;;		None
 26346 ;; Auto vars:     Size  Location     Type
 26347 ;;  cont            1   32[COMRAM] unsigned char 
 26348 ;; Return value:  Size  Location     Type
 26349 ;;                  1    wreg      void 
 26350 ;; Registers used:
 26351 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26352 ;; Tracked objects:
 26353 ;;		On entry : 0/0
 26354 ;;		On exit  : 0/0
 26355 ;;		Unchanged: 0/0
 26356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26357 ;;      Params:         0       0       0       0       0       0       0       0       0
 26358 ;;      Locals:         1       0       0       0       0       0       0       0       0
 26359 ;;      Temps:         20       0       0       0       0       0       0       0       0
 26360 ;;      Totals:        21       0       0       0       0       0       0       0       0
 26361 ;;Total ram usage:       21 bytes
 26362 ;; Hardware stack levels used:    1
 26363 ;; Hardware stack levels required when called:    2
 26364 ;; This function calls:
 26365 ;;		_GPSRead
 26366 ;;		_recebe_dado_uart
 26367 ;;		i2_write_timer_zero
 26368 ;; This function is called by:
 26369 ;;		Interrupt level 2
 26370 ;; This function uses a non-reentrant model
 26371 ;;
 26372                           
 26373                           	psect	intcode
 26374  000008                     __pintcode:
 26375                           	opt stack 0
 26376  000008                     _isr:
 26377                           	opt stack 12
 26378                           
 26379                           ; BSR set to: 0
 26380                           ;incstack = 0
 26381  000008  8243               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 26382  00000A  EDA7  F01C         	call	int_func,f	;refresh shadow registers
 26383                           tosu	equ	0xFFF
 26384                           tosh	equ	0xFFE
 26385                           tosl	equ	0xFFD
 26386                           pclath	equ	0xFFA
 26387                           tblptru	equ	0xFF8
 26388                           tblptrh	equ	0xFF7
 26389                           tblptrl	equ	0xFF6
 26390                           tablat	equ	0xFF5
 26391                           prodh	equ	0xFF4
 26392                           prodl	equ	0xFF3
 26393                           intcon	equ	0xFF2
 26394                           intcon2	equ	0xFF1
 26395                           intcon3	equ	0xFF0
 26396                           indf0	equ	0xFEF
 26397                           postinc0	equ	0xFEE
 26398                           fsr0h	equ	0xFEA
 26399                           fsr0l	equ	0xFE9
 26400                           wreg	equ	0xFE8
 26401                           indf1	equ	0xFE7
 26402                           postinc1	equ	0xFE6
 26403                           postdec1	equ	0xFE5
 26404                           plusw1	equ	0xFE3
 26405                           fsr1h	equ	0xFE2
 26406                           fsr1l	equ	0xFE1
 26407                           indf2	equ	0xFDF
 26408                           postinc2	equ	0xFDE
 26409                           postdec2	equ	0xFDD
 26410                           plusw2	equ	0xFDB
 26411                           fsr2h	equ	0xFDA
 26412                           fsr2l	equ	0xFD9
 26413                           status	equ	0xFD8
 26414                           
 26415                           	psect	intcode_body
 26416  00394E                     __pintcode_body:
 26417                           	opt stack 12
 26418  00394E                     int_func:
 26419                           	opt stack 12
 26420  00394E  0006               	pop		; remove dummy address from shadow register refresh
 26421  003950  CFFA F00F          	movff	pclath,??_isr+2
 26422  003954  CFFB F010          	movff	pclatu,??_isr+3
 26423  003958  CFE9 F011          	movff	fsr0l,??_isr+4
 26424  00395C  CFEA F012          	movff	fsr0h,??_isr+5
 26425  003960  CFE1 F013          	movff	fsr1l,??_isr+6
 26426  003964  CFE2 F014          	movff	fsr1h,??_isr+7
 26427  003968  CFD9 F015          	movff	fsr2l,??_isr+8
 26428  00396C  CFDA F016          	movff	fsr2h,??_isr+9
 26429  003970  CFF3 F017          	movff	prodl,??_isr+10
 26430  003974  CFF4 F018          	movff	prodh,??_isr+11
 26431  003978  CFF6 F019          	movff	tblptrl,??_isr+12
 26432  00397C  CFF7 F01A          	movff	tblptrh,??_isr+13
 26433  003980  CFF8 F01B          	movff	tblptru,??_isr+14
 26434  003984  CFF5 F01C          	movff	tablat,??_isr+15
 26435  003988  C043  F01D         	movff	btemp,??_isr+16
 26436  00398C  C044  F01E         	movff	btemp+1,??_isr+17
 26437  003990  C045  F01F         	movff	btemp+2,??_isr+18
 26438  003994  C046  F020         	movff	btemp+3,??_isr+19
 26439                           
 26440                           ;main.c: 108: unsigned char cont;
 26441                           ;main.c: 111: if (PIE1bits.RCIE && PIR1bits.RCIF)
 26442  003998  BA9D               	btfsc	3997,5,c	;volatile
 26443  00399A  AA9E               	btfss	3998,5,c	;volatile
 26444  00399C  D014               	goto	i2l1429
 26445                           
 26446                           ;main.c: 112: {
 26447                           ;main.c: 113: PIR1bits.RCIF = 0;
 26448  00399E  9A9E               	bcf	3998,5,c	;volatile
 26449                           
 26450                           ;main.c: 114: data_uart_recebe = recebe_dado_uart();
 26451  0039A0  EC96  F02F         	call	_recebe_dado_uart	;wreg free
 26452  0039A4  6E3A               	movwf	_data_uart_recebe,c
 26453                           
 26454                           ;main.c: 115: GPSRead(data_uart_recebe);
 26455  0039A6  503A               	movf	_data_uart_recebe,w,c
 26456  0039A8  EC15  F014         	call	_GPSRead
 26457                           
 26458                           ;main.c: 116: PORTBbits.RB2 = !PORTBbits.RB2;
 26459  0039AC  B481               	btfsc	3969,2,c	;volatile
 26460  0039AE  D003               	goto	i2u1265_40
 26461  0039B0  6A0D               	clrf	??_isr& (0+255),c
 26462  0039B2  2A0D               	incf	??_isr& (0+255),f,c
 26463  0039B4  D001               	goto	i2u1266_48
 26464  0039B6                     i2u1265_40:
 26465  0039B6  6A0D               	clrf	??_isr& (0+255),c
 26466  0039B8                     i2u1266_48:
 26467  0039B8  460D               	rlncf	??_isr,f,c
 26468  0039BA  460D               	rlncf	??_isr,f,c
 26469  0039BC  5081               	movf	3969,w,c	;volatile
 26470  0039BE  180D               	xorwf	??_isr,w,c
 26471  0039C0  0BFB               	andlw	-5
 26472  0039C2  180D               	xorwf	??_isr,w,c
 26473  0039C4  6E81               	movwf	3969,c	;volatile
 26474  0039C6                     i2l1429:
 26475                           
 26476                           ;main.c: 117: }
 26477                           ;main.c: 120: unsigned char cont;
 26478                           ;main.c: 122: if (TMR0IF && T0IF)
 26479  0039C6  B4F2               	btfsc	intcon,2,c	;volatile
 26480  0039C8  A4F2               	btfss	intcon,2,c	;volatile
 26481  0039CA  D046               	goto	i2l1430
 26482                           
 26483                           ;main.c: 123: {
 26484                           ;main.c: 124: INTCONbits.TMR0IF = 0;
 26485  0039CC  94F2               	bcf	intcon,2,c	;volatile
 26486                           
 26487                           ;main.c: 125: sinaliza_int_timer = 1;
 26488  0039CE  0E01               	movlw	1
 26489  0039D0  0100               	movlb	0	; () banked
 26490  0039D2  6FFF               	movwf	_sinaliza_int_timer& (0+255),b
 26491                           
 26492                           ;main.c: 127: for(cont= 0; cont<4;cont++)
 26493  0039D4  0E00               	movlw	0
 26494  0039D6  6E21               	movwf	isr@cont,c
 26495  0039D8                     i2l10276:
 26496                           
 26497                           ; BSR set to: 0
 26498  0039D8  0E03               	movlw	3
 26499  0039DA  6421               	cpfsgt	isr@cont,c
 26500  0039DC  D001               	goto	i2l1431
 26501  0039DE  D019               	goto	i2u1271_40
 26502  0039E0                     i2l1431:
 26503                           
 26504                           ;main.c: 128: {
 26505                           ;main.c: 129: if(tempo_tarefa[cont]>0) tempo_tarefa[cont]--;
 26506                           
 26507                           ; BSR set to: 0
 26508  0039E0  5021               	movf	isr@cont,w,c
 26509  0039E2  0D02               	mullw	2
 26510  0039E4  0E0A               	movlw	low _tempo_tarefa
 26511  0039E6  24F3               	addwf	prodl,w,c
 26512  0039E8  6ED9               	movwf	fsr2l,c
 26513  0039EA  0E01               	movlw	high _tempo_tarefa
 26514  0039EC  20F4               	addwfc	prodh,w,c
 26515  0039EE  6EDA               	movwf	fsr2h,c
 26516  0039F0  50DE               	movf	postinc2,w,c
 26517  0039F2  10DE               	iorwf	postinc2,w,c
 26518  0039F4  B4D8               	btfsc	status,2,c
 26519  0039F6  D00B               	goto	i2l1433
 26520  0039F8  5021               	movf	isr@cont,w,c
 26521  0039FA  0D02               	mullw	2
 26522  0039FC  0E0A               	movlw	low _tempo_tarefa
 26523  0039FE  24F3               	addwf	prodl,w,c
 26524  003A00  6ED9               	movwf	fsr2l,c
 26525  003A02  0E01               	movlw	high _tempo_tarefa
 26526  003A04  20F4               	addwfc	prodh,w,c
 26527  003A06  6EDA               	movwf	fsr2h,c
 26528  003A08  06DE               	decf	postinc2,f,c
 26529  003A0A  0E00               	movlw	0
 26530  003A0C  5ADD               	subwfb	postdec2,f,c
 26531  003A0E                     i2l1433:
 26532  003A0E  2A21               	incf	isr@cont,f,c
 26533  003A10  D7E3               	goto	i2l10276
 26534  003A12                     i2u1271_40:
 26535                           
 26536                           ;main.c: 131: }
 26537                           ;main.c: 132: if(time_sd > 0) time_sd--;
 26538  003A12  5034               	movf	_time_sd,w,c
 26539  003A14  1035               	iorwf	_time_sd+1,w,c
 26540  003A16  B4D8               	btfsc	status,2,c
 26541  003A18  D003               	goto	i2l1434
 26542  003A1A  0634               	decf	_time_sd,f,c
 26543  003A1C  A0D8               	btfss	status,0,c
 26544  003A1E  0635               	decf	_time_sd+1,f,c
 26545  003A20                     i2l1434:
 26546                           
 26547                           ;main.c: 133: if(time_atualizacao > 0) time_atualizacao--;
 26548  003A20  5032               	movf	_time_atualizacao,w,c
 26549  003A22  1033               	iorwf	_time_atualizacao+1,w,c
 26550  003A24  B4D8               	btfsc	status,2,c
 26551  003A26  D003               	goto	i2l1435
 26552  003A28  0632               	decf	_time_atualizacao,f,c
 26553  003A2A  A0D8               	btfss	status,0,c
 26554  003A2C  0633               	decf	_time_atualizacao+1,f,c
 26555  003A2E                     i2l1435:
 26556                           
 26557                           ;main.c: 135: if(tarefa_em_execucao == 1)
 26558  003A2E  0439               	decf	_tarefa_em_execucao,w,c	;volatile
 26559  003A30  A4D8               	btfss	status,2,c
 26560  003A32  D00C               	goto	i2l1437
 26561                           
 26562                           ;main.c: 136: {
 26563                           ;main.c: 137: timeout_tarefa--;
 26564  003A34  0101               	movlb	1	; () banked
 26565  003A36  0742               	decf	_timeout_tarefa& (0+255),f,b
 26566  003A38  A0D8               	btfss	status,0,c
 26567  003A3A  0743               	decf	(_timeout_tarefa+1)& (0+255),f,b
 26568                           
 26569                           ; BSR set to: 1
 26570                           ;main.c: 138: if(!timeout_tarefa)
 26571  003A3C  5142               	movf	_timeout_tarefa& (0+255),w,b
 26572  003A3E  1143               	iorwf	(_timeout_tarefa+1)& (0+255),w,b
 26573  003A40  A4D8               	btfss	status,2,c
 26574  003A42  D004               	goto	i2l1437
 26575                           
 26576                           ; BSR set to: 1
 26577                           ;main.c: 139: {
 26578                           ;main.c: 141: PCLATH = 0;
 26579  003A44  0E00               	movlw	0
 26580  003A46  6EFA               	movwf	pclath,c	;volatile
 26581                           
 26582                           ;main.c: 142: PCL = 0;
 26583  003A48  0E00               	movlw	0
 26584  003A4A  6EF9               	movwf	pcl,c	;volatile
 26585  003A4C                     i2l1437:
 26586                           
 26587                           ;main.c: 143: }
 26588                           ;main.c: 144: }
 26589                           ;main.c: 148: write_timer_zero(0x45);
 26590                           
 26591                           ; BSR set to: 1
 26592                           
 26593                           ; BSR set to: 1
 26594  003A4C  0E00               	movlw	0
 26595  003A4E  6E02               	movwf	i2write_timer_zero@timer0+1,c
 26596  003A50  0E45               	movlw	69
 26597  003A52  6E01               	movwf	i2write_timer_zero@timer0,c
 26598  003A54  ECD3  F02F         	call	i2_write_timer_zero	;wreg free
 26599  003A58                     i2l1430:
 26600                           
 26601                           ;main.c: 149: }
 26602                           ;main.c: 151: if (INT0IF && INT0IE)
 26603  003A58  B2F2               	btfsc	intcon,1,c	;volatile
 26604  003A5A  A8F2               	btfss	intcon,4,c	;volatile
 26605  003A5C  D001               	goto	i2l1438
 26606                           
 26607                           ;main.c: 152: {
 26608                           ;main.c: 153: INT0IF = 0;
 26609  003A5E  92F2               	bcf	intcon,1,c	;volatile
 26610  003A60                     i2l1438:
 26611  003A60  C020  F046         	movff	??_isr+19,btemp+3
 26612  003A64  C01F  F045         	movff	??_isr+18,btemp+2
 26613  003A68  C01E  F044         	movff	??_isr+17,btemp+1
 26614  003A6C  C01D  F043         	movff	??_isr+16,btemp
 26615  003A70  C01C  FFF5         	movff	??_isr+15,tablat
 26616  003A74  C01B  FFF8         	movff	??_isr+14,tblptru
 26617  003A78  C01A  FFF7         	movff	??_isr+13,tblptrh
 26618  003A7C  C019  FFF6         	movff	??_isr+12,tblptrl
 26619  003A80  C018  FFF4         	movff	??_isr+11,prodh
 26620  003A84  C017  FFF3         	movff	??_isr+10,prodl
 26621  003A88  C016  FFDA         	movff	??_isr+9,fsr2h
 26622  003A8C  C015  FFD9         	movff	??_isr+8,fsr2l
 26623  003A90  C014  FFE2         	movff	??_isr+7,fsr1h
 26624  003A94  C013  FFE1         	movff	??_isr+6,fsr1l
 26625  003A98  C012  FFEA         	movff	??_isr+5,fsr0h
 26626  003A9C  C011  FFE9         	movff	??_isr+4,fsr0l
 26627  003AA0  C010  FFFB         	movff	??_isr+3,pclatu
 26628  003AA4  C00F  FFFA         	movff	??_isr+2,pclath
 26629  003AA8  9243               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 26630  003AAA  0011               	retfie		f
 26631  003AAC                     __end_of_isr:
 26632                           	opt stack 0
 26633                           tosu	equ	0xFFF
 26634                           tosh	equ	0xFFE
 26635                           tosl	equ	0xFFD
 26636                           pclatu	equ	0xFFB
 26637                           pclath	equ	0xFFA
 26638                           pcl	equ	0xFF9
 26639                           tblptru	equ	0xFF8
 26640                           tblptrh	equ	0xFF7
 26641                           tblptrl	equ	0xFF6
 26642                           tablat	equ	0xFF5
 26643                           prodh	equ	0xFF4
 26644                           prodl	equ	0xFF3
 26645                           intcon	equ	0xFF2
 26646                           intcon2	equ	0xFF1
 26647                           intcon3	equ	0xFF0
 26648                           indf0	equ	0xFEF
 26649                           postinc0	equ	0xFEE
 26650                           fsr0h	equ	0xFEA
 26651                           fsr0l	equ	0xFE9
 26652                           wreg	equ	0xFE8
 26653                           indf1	equ	0xFE7
 26654                           postinc1	equ	0xFE6
 26655                           postdec1	equ	0xFE5
 26656                           plusw1	equ	0xFE3
 26657                           fsr1h	equ	0xFE2
 26658                           fsr1l	equ	0xFE1
 26659                           indf2	equ	0xFDF
 26660                           postinc2	equ	0xFDE
 26661                           postdec2	equ	0xFDD
 26662                           plusw2	equ	0xFDB
 26663                           fsr2h	equ	0xFDA
 26664                           fsr2l	equ	0xFD9
 26665                           status	equ	0xFD8
 26666                           
 26667 ;; *************** function i2_write_timer_zero *****************
 26668 ;; Defined at:
 26669 ;;		line 134 in file "bibliotecas/hardware.c"
 26670 ;; Parameters:    Size  Location     Type
 26671 ;;  timer0          2    0[COMRAM] unsigned int 
 26672 ;; Auto vars:     Size  Location     Type
 26673 ;;		None
 26674 ;; Return value:  Size  Location     Type
 26675 ;;                  1    wreg      void 
 26676 ;; Registers used:
 26677 ;;		None
 26678 ;; Tracked objects:
 26679 ;;		On entry : 0/0
 26680 ;;		On exit  : 0/0
 26681 ;;		Unchanged: 0/0
 26682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26683 ;;      Params:         2       0       0       0       0       0       0       0       0
 26684 ;;      Locals:         0       0       0       0       0       0       0       0       0
 26685 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26686 ;;      Totals:         2       0       0       0       0       0       0       0       0
 26687 ;;Total ram usage:        2 bytes
 26688 ;; Hardware stack levels used:    1
 26689 ;; This function calls:
 26690 ;;		Nothing
 26691 ;; This function is called by:
 26692 ;;		_isr
 26693 ;; This function uses a non-reentrant model
 26694 ;;
 26695                           
 26696                           	psect	text114
 26697  005FA6                     __ptext114:
 26698                           	opt stack 0
 26699  005FA6                     i2_write_timer_zero:
 26700                           	opt stack 13
 26701                           
 26702                           ;hardware.c: 142: TMR0 = timer0;
 26703                           
 26704                           ;incstack = 0
 26705  005FA6  C001  FFD6         	movff	i2write_timer_zero@timer0,4054	;volatile
 26706  005FAA  C002  FFD7         	movff	i2write_timer_zero@timer0+1,4055	;volatile
 26707  005FAE  0012               	return		;funcret
 26708  005FB0                     __end_ofi2_write_timer_zero:
 26709                           	opt stack 0
 26710                           tosu	equ	0xFFF
 26711                           tosh	equ	0xFFE
 26712                           tosl	equ	0xFFD
 26713                           pclatu	equ	0xFFB
 26714                           pclath	equ	0xFFA
 26715                           pcl	equ	0xFF9
 26716                           tblptru	equ	0xFF8
 26717                           tblptrh	equ	0xFF7
 26718                           tblptrl	equ	0xFF6
 26719                           tablat	equ	0xFF5
 26720                           prodh	equ	0xFF4
 26721                           prodl	equ	0xFF3
 26722                           intcon	equ	0xFF2
 26723                           intcon2	equ	0xFF1
 26724                           intcon3	equ	0xFF0
 26725                           indf0	equ	0xFEF
 26726                           postinc0	equ	0xFEE
 26727                           fsr0h	equ	0xFEA
 26728                           fsr0l	equ	0xFE9
 26729                           wreg	equ	0xFE8
 26730                           indf1	equ	0xFE7
 26731                           postinc1	equ	0xFE6
 26732                           postdec1	equ	0xFE5
 26733                           plusw1	equ	0xFE3
 26734                           fsr1h	equ	0xFE2
 26735                           fsr1l	equ	0xFE1
 26736                           indf2	equ	0xFDF
 26737                           postinc2	equ	0xFDE
 26738                           postdec2	equ	0xFDD
 26739                           plusw2	equ	0xFDB
 26740                           fsr2h	equ	0xFDA
 26741                           fsr2l	equ	0xFD9
 26742                           status	equ	0xFD8
 26743                           
 26744 ;; *************** function _recebe_dado_uart *****************
 26745 ;; Defined at:
 26746 ;;		line 138 in file "bibliotecas/uart.c"
 26747 ;; Parameters:    Size  Location     Type
 26748 ;;		None
 26749 ;; Auto vars:     Size  Location     Type
 26750 ;;		None
 26751 ;; Return value:  Size  Location     Type
 26752 ;;                  1    wreg      unsigned char 
 26753 ;; Registers used:
 26754 ;;		wreg, status,2
 26755 ;; Tracked objects:
 26756 ;;		On entry : 0/0
 26757 ;;		On exit  : 0/0
 26758 ;;		Unchanged: 0/0
 26759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26760 ;;      Params:         0       0       0       0       0       0       0       0       0
 26761 ;;      Locals:         0       0       0       0       0       0       0       0       0
 26762 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26763 ;;      Totals:         0       0       0       0       0       0       0       0       0
 26764 ;;Total ram usage:        0 bytes
 26765 ;; Hardware stack levels used:    1
 26766 ;; This function calls:
 26767 ;;		Nothing
 26768 ;; This function is called by:
 26769 ;;		_isr
 26770 ;;		_recebe_string_uart
 26771 ;; This function uses a non-reentrant model
 26772 ;;
 26773                           
 26774                           	psect	text115
 26775  005F2C                     __ptext115:
 26776                           	opt stack 0
 26777  005F2C                     _recebe_dado_uart:
 26778                           	opt stack 13
 26779                           
 26780                           ;uart.c: 140: while(RCIF==0);
 26781                           
 26782                           ;incstack = 0
 26783  005F2C  AA9E               	btfss	3998,5,c	;volatile
 26784  005F2E  D7FE               	goto	_recebe_dado_uart
 26785                           
 26786                           ;uart.c: 141: if(RCSTAbits.OERR)
 26787  005F30  A2AB               	btfss	4011,1,c	;volatile
 26788  005F32  D003               	goto	i2l1288
 26789                           
 26790                           ;uart.c: 142: {
 26791                           ;uart.c: 143: CREN = 0;
 26792  005F34  98AB               	bcf	4011,4,c	;volatile
 26793                           
 26794                           ;uart.c: 144: __nop();
 26795  005F36  F000               	nop	
 26796                           
 26797                           ;uart.c: 145: CREN=1;
 26798  005F38  88AB               	bsf	4011,4,c	;volatile
 26799  005F3A                     i2l1288:
 26800                           
 26801                           ;uart.c: 146: }
 26802                           ;uart.c: 147: return(RCREG);
 26803  005F3A  50AE               	movf	4014,w,c	;volatile
 26804  005F3C  0012               	return	
 26805  005F3E                     __end_of_recebe_dado_uart:
 26806                           	opt stack 0
 26807                           tosu	equ	0xFFF
 26808                           tosh	equ	0xFFE
 26809                           tosl	equ	0xFFD
 26810                           pclatu	equ	0xFFB
 26811                           pclath	equ	0xFFA
 26812                           pcl	equ	0xFF9
 26813                           tblptru	equ	0xFF8
 26814                           tblptrh	equ	0xFF7
 26815                           tblptrl	equ	0xFF6
 26816                           tablat	equ	0xFF5
 26817                           prodh	equ	0xFF4
 26818                           prodl	equ	0xFF3
 26819                           intcon	equ	0xFF2
 26820                           intcon2	equ	0xFF1
 26821                           intcon3	equ	0xFF0
 26822                           indf0	equ	0xFEF
 26823                           postinc0	equ	0xFEE
 26824                           fsr0h	equ	0xFEA
 26825                           fsr0l	equ	0xFE9
 26826                           wreg	equ	0xFE8
 26827                           indf1	equ	0xFE7
 26828                           postinc1	equ	0xFE6
 26829                           postdec1	equ	0xFE5
 26830                           plusw1	equ	0xFE3
 26831                           fsr1h	equ	0xFE2
 26832                           fsr1l	equ	0xFE1
 26833                           indf2	equ	0xFDF
 26834                           postinc2	equ	0xFDE
 26835                           postdec2	equ	0xFDD
 26836                           plusw2	equ	0xFDB
 26837                           fsr2h	equ	0xFDA
 26838                           fsr2l	equ	0xFD9
 26839                           status	equ	0xFD8
 26840                           
 26841 ;; *************** function _GPSRead *****************
 26842 ;; Defined at:
 26843 ;;		line 61 in file "bibliotecas/GPS.c"
 26844 ;; Parameters:    Size  Location     Type
 26845 ;;  buff            1    wreg     unsigned char 
 26846 ;; Auto vars:     Size  Location     Type
 26847 ;;  buff            1   10[COMRAM] unsigned char 
 26848 ;;  c               1   11[COMRAM] unsigned char 
 26849 ;; Return value:  Size  Location     Type
 26850 ;;                  2  356[None  ] int 
 26851 ;; Registers used:
 26852 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26853 ;; Tracked objects:
 26854 ;;		On entry : 0/0
 26855 ;;		On exit  : 0/0
 26856 ;;		Unchanged: 0/0
 26857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26858 ;;      Params:         0       0       0       0       0       0       0       0       0
 26859 ;;      Locals:         2       0       0       0       0       0       0       0       0
 26860 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26861 ;;      Totals:         2       0       0       0       0       0       0       0       0
 26862 ;;Total ram usage:        2 bytes
 26863 ;; Hardware stack levels used:    1
 26864 ;; Hardware stack levels required when called:    1
 26865 ;; This function calls:
 26866 ;;		_strcmp
 26867 ;;		_stringcpy
 26868 ;; This function is called by:
 26869 ;;		_isr
 26870 ;; This function uses a non-reentrant model
 26871 ;;
 26872                           
 26873                           	psect	text116
 26874  00282A                     __ptext116:
 26875                           	opt stack 0
 26876  00282A                     _GPSRead:
 26877                           	opt stack 12
 26878                           
 26879                           ;incstack = 0
 26880                           ;GPSRead@buff stored from wreg
 26881  00282A  6E0B               	movwf	GPSRead@buff,c
 26882                           
 26883                           ;GPS.c: 63: uint8_t c = buff;
 26884  00282C  C00B  F00C         	movff	GPSRead@buff,GPSRead@c
 26885                           
 26886                           ;GPS.c: 65: switch(c) {
 26887  002830  D12D               	goto	i2l357
 26888  002832                     
 26889                           ;GPS.c: 67: if(SentenceType == 1)
 26890  002832  0440               	decf	_SentenceType,w,c
 26891  002834  A4D8               	btfss	status,2,c
 26892  002836  D005               	goto	i2l359
 26893                           
 26894                           ;GPS.c: 68: GPRMC_ok = 1;
 26895  002838  0E00               	movlw	0
 26896  00283A  0100               	movlb	0	; () banked
 26897  00283C  6FFB               	movwf	(_GPRMC_ok+1)& (0+255),b
 26898  00283E  0E01               	movlw	1
 26899  002840  6FFA               	movwf	_GPRMC_ok& (0+255),b
 26900  002842                     i2l359:
 26901                           
 26902                           ;GPS.c: 69: if(SentenceType == 2)
 26903                           
 26904                           ; BSR set to: 0
 26905  002842  0E02               	movlw	2
 26906  002844  1840               	xorwf	_SentenceType,w,c
 26907  002846  A4D8               	btfss	status,2,c
 26908  002848  D005               	goto	i2l360
 26909                           
 26910                           ;GPS.c: 70: GPGGA_ok = 1;
 26911  00284A  0E00               	movlw	0
 26912  00284C  0100               	movlb	0	; () banked
 26913  00284E  6FF9               	movwf	(_GPGGA_ok+1)& (0+255),b
 26914  002850  0E01               	movlw	1
 26915  002852  6FF8               	movwf	_GPGGA_ok& (0+255),b
 26916  002854                     i2l360:
 26917                           
 26918                           ;GPS.c: 71: if(GPRMC_ok && GPGGA_ok) {
 26919                           
 26920                           ; BSR set to: 0
 26921  002854  0100               	movlb	0	; () banked
 26922  002856  51FA               	movf	_GPRMC_ok& (0+255),w,b
 26923  002858  11FB               	iorwf	(_GPRMC_ok+1)& (0+255),w,b
 26924  00285A  B4D8               	btfsc	status,2,c
 26925  00285C  0012               	return	
 26926                           
 26927                           ; BSR set to: 0
 26928  00285E  51F8               	movf	_GPGGA_ok& (0+255),w,b
 26929  002860  11F9               	iorwf	(_GPGGA_ok+1)& (0+255),w,b
 26930  002862  B4D8               	btfsc	status,2,c
 26931  002864  0012               	return	
 26932                           
 26933                           ; BSR set to: 0
 26934                           ;GPS.c: 72: GPRMC_ok = GPGGA_ok = 0;
 26935  002866  0E00               	movlw	0
 26936  002868  6FF9               	movwf	(_GPGGA_ok+1)& (0+255),b
 26937  00286A  0E00               	movlw	0
 26938  00286C  6FF8               	movwf	_GPGGA_ok& (0+255),b
 26939  00286E  C0F8  F0FA         	movff	_GPGGA_ok,_GPRMC_ok
 26940  002872  C0F9  F0FB         	movff	_GPGGA_ok+1,_GPRMC_ok+1
 26941                           
 26942                           ; BSR set to: 0
 26943                           ;GPS.c: 74: }
 26944                           ;GPS.c: 75: break;
 26945                           
 26946                           ; BSR set to: 0
 26947                           ;GPS.c: 73: return 1;
 26948                           ;	Return value of _GPSRead is never used
 26949  002876  0012               	return	
 26950  002878                     
 26951                           ;GPS.c: 78: Term = char_number = 0;
 26952                           
 26953                           ; BSR set to: 0
 26954  002878  0E00               	movlw	0
 26955  00287A  6E41               	movwf	_char_number,c
 26956  00287C  C041  F03F         	movff	_char_number,_Term
 26957                           
 26958                           ;GPS.c: 79: break;
 26959  002880  0012               	return	
 26960  002882                     
 26961                           ;GPS.c: 82: buffer[char_number] = '\0';
 26962  002882  5041               	movf	_char_number,w,c
 26963  002884  0D01               	mullw	1
 26964  002886  0E96               	movlw	low _buffer
 26965  002888  24F3               	addwf	prodl,w,c
 26966  00288A  6ED9               	movwf	fsr2l,c
 26967  00288C  0E01               	movlw	high _buffer
 26968  00288E  20F4               	addwfc	prodh,w,c
 26969  002890  6EDA               	movwf	fsr2h,c
 26970  002892  0E00               	movlw	0
 26971  002894  6EDF               	movwf	indf2,c
 26972                           
 26973                           ;GPS.c: 83: if(Term == 0) {
 26974  002896  503F               	movf	_Term,w,c
 26975  002898  A4D8               	btfss	status,2,c
 26976  00289A  D032               	goto	i2l370
 26977                           
 26978                           ;GPS.c: 84: stringcpy(buffer, sentence, 0, 5);
 26979  00289C  0E96               	movlw	low _buffer
 26980  00289E  6E01               	movwf	stringcpy@str1,c
 26981  0028A0  0E01               	movlw	high _buffer
 26982  0028A2  6E02               	movwf	stringcpy@str1+1,c
 26983  0028A4  0EC5               	movlw	low _sentence
 26984  0028A6  6E03               	movwf	stringcpy@str2,c
 26985  0028A8  0E01               	movlw	high _sentence
 26986  0028AA  6E04               	movwf	stringcpy@str2+1,c
 26987  0028AC  0E00               	movlw	0
 26988  0028AE  6E06               	movwf	stringcpy@dir+1,c
 26989  0028B0  0E00               	movlw	0
 26990  0028B2  6E05               	movwf	stringcpy@dir,c
 26991  0028B4  0E05               	movlw	5
 26992  0028B6  6E07               	movwf	stringcpy@size,c
 26993  0028B8  ECBB  F02B         	call	_stringcpy	;wreg free
 26994                           
 26995                           ;GPS.c: 85: if(strcmp(sentence, "GPRMC") == 0)
 26996  0028BC  0EC5               	movlw	low _sentence
 26997  0028BE  6E01               	movwf	strcmp@s1,c
 26998  0028C0  0E01               	movlw	high _sentence
 26999  0028C2  6E02               	movwf	strcmp@s1+1,c
 27000  0028C4  0E54               	movlw	low STR_5
 27001  0028C6  6E03               	movwf	strcmp@s2,c
 27002  0028C8  0E62               	movlw	high STR_5
 27003  0028CA  6E04               	movwf	strcmp@s2+1,c
 27004  0028CC  ECBE  F02C         	call	_strcmp	;wreg free
 27005  0028D0  5001               	movf	?_strcmp,w,c
 27006  0028D2  1002               	iorwf	?_strcmp+1,w,c
 27007  0028D4  A4D8               	btfss	status,2,c
 27008  0028D6  D002               	goto	i2l367
 27009                           
 27010                           ;GPS.c: 86: SentenceType = 1;
 27011  0028D8  0E01               	movlw	1
 27012  0028DA  D011               	goto	L12
 27013  0028DC                     i2l367:
 27014                           
 27015                           ;GPS.c: 87: else if(strcmp(sentence, "GPGGA") == 0)
 27016  0028DC  0EC5               	movlw	low _sentence
 27017  0028DE  6E01               	movwf	strcmp@s1,c
 27018  0028E0  0E01               	movlw	high _sentence
 27019  0028E2  6E02               	movwf	strcmp@s1+1,c
 27020  0028E4  0E4E               	movlw	low STR_6
 27021  0028E6  6E03               	movwf	strcmp@s2,c
 27022  0028E8  0E62               	movlw	high STR_6
 27023  0028EA  6E04               	movwf	strcmp@s2+1,c
 27024  0028EC  ECBE  F02C         	call	_strcmp	;wreg free
 27025  0028F0  5001               	movf	?_strcmp,w,c
 27026  0028F2  1002               	iorwf	?_strcmp+1,w,c
 27027  0028F4  A4D8               	btfss	status,2,c
 27028  0028F6  D002               	goto	i2l369
 27029                           
 27030                           ;GPS.c: 88: SentenceType = 2;
 27031  0028F8  0E02               	movlw	2
 27032  0028FA  D001               	goto	L12
 27033  0028FC                     i2l369:
 27034                           
 27035                           ;GPS.c: 89: else
 27036                           ;GPS.c: 90: SentenceType = 3;
 27037  0028FC  0E03               	movlw	3
 27038  0028FE                     L12:
 27039  0028FE  6E40               	movwf	_SentenceType,c
 27040  002900                     i2l370:
 27041                           
 27042                           ;GPS.c: 91: }
 27043                           ;GPS.c: 94: if(Term == 1 && SentenceType == 1) {
 27044  002900  043F               	decf	_Term,w,c
 27045  002902  A4D8               	btfss	status,2,c
 27046  002904  D015               	goto	i2l371
 27047  002906  0440               	decf	_SentenceType,w,c
 27048  002908  A4D8               	btfss	status,2,c
 27049  00290A  D012               	goto	i2l371
 27050                           
 27051                           ;GPS.c: 95: stringcpy(buffer, rawTime, 0, 6);
 27052  00290C  0E96               	movlw	low _buffer
 27053  00290E  6E01               	movwf	stringcpy@str1,c
 27054  002910  0E01               	movlw	high _buffer
 27055  002912  6E02               	movwf	stringcpy@str1+1,c
 27056  002914  0EAD               	movlw	low _rawTime
 27057  002916  6E03               	movwf	stringcpy@str2,c
 27058  002918  0E01               	movlw	high _rawTime
 27059  00291A  6E04               	movwf	stringcpy@str2+1,c
 27060  00291C  0E00               	movlw	0
 27061  00291E  6E06               	movwf	stringcpy@dir+1,c
 27062  002920  0E00               	movlw	0
 27063  002922  6E05               	movwf	stringcpy@dir,c
 27064  002924  0E06               	movlw	6
 27065  002926  6E07               	movwf	stringcpy@size,c
 27066  002928  ECBB  F02B         	call	_stringcpy	;wreg free
 27067                           
 27068                           ;GPS.c: 97: gps_flag[0].flag = 1;
 27069  00292C  0101               	movlb	1	; () banked
 27070  00292E  812F               	bsf	_gps_flag& (0+255),0,b
 27071  002930                     i2l371:
 27072                           
 27073                           ;GPS.c: 98: }
 27074                           ;GPS.c: 101: if((Term == 3) && (SentenceType == 1)) {
 27075                           
 27076                           ; BSR set to: 1
 27077  002930  0E03               	movlw	3
 27078  002932  183F               	xorwf	_Term,w,c
 27079  002934  A4D8               	btfss	status,2,c
 27080  002936  D015               	goto	i2l372
 27081  002938  0440               	decf	_SentenceType,w,c
 27082  00293A  A4D8               	btfss	status,2,c
 27083  00293C  D012               	goto	i2l372
 27084                           
 27085                           ;GPS.c: 102: stringcpy(buffer, rawLatitude, 1, 10);
 27086  00293E  0E96               	movlw	low _buffer
 27087  002940  6E01               	movwf	stringcpy@str1,c
 27088  002942  0E01               	movlw	high _buffer
 27089  002944  6E02               	movwf	stringcpy@str1+1,c
 27090  002946  0EA2               	movlw	low _rawLatitude
 27091  002948  6E03               	movwf	stringcpy@str2,c
 27092  00294A  0E01               	movlw	high _rawLatitude
 27093  00294C  6E04               	movwf	stringcpy@str2+1,c
 27094  00294E  0E00               	movlw	0
 27095  002950  6E06               	movwf	stringcpy@dir+1,c
 27096  002952  0E01               	movlw	1
 27097  002954  6E05               	movwf	stringcpy@dir,c
 27098  002956  0E0A               	movlw	10
 27099  002958  6E07               	movwf	stringcpy@size,c
 27100  00295A  ECBB  F02B         	call	_stringcpy	;wreg free
 27101                           
 27102                           ;GPS.c: 103: gps_flag[1].flag = 1;
 27103  00295E  0101               	movlb	1	; () banked
 27104  002960  8130               	bsf	(_gps_flag+1)& (0+255),0,b
 27105  002962                     i2l372:
 27106                           
 27107                           ;GPS.c: 104: }
 27108                           ;GPS.c: 106: if((Term == 4) && (SentenceType == 1)) {
 27109                           
 27110                           ; BSR set to: 1
 27111  002962  0E04               	movlw	4
 27112  002964  183F               	xorwf	_Term,w,c
 27113  002966  A4D8               	btfss	status,2,c
 27114  002968  D00C               	goto	i2l375
 27115  00296A  0440               	decf	_SentenceType,w,c
 27116  00296C  A4D8               	btfss	status,2,c
 27117  00296E  D009               	goto	i2l375
 27118                           
 27119                           ;GPS.c: 107: if(buffer[0] == 'N')
 27120  002970  0E4E               	movlw	78
 27121  002972  0101               	movlb	1	; () banked
 27122  002974  1996               	xorwf	_buffer& (0+255),w,b
 27123  002976  A4D8               	btfss	status,2,c
 27124  002978  D002               	goto	i2l374
 27125                           
 27126                           ; BSR set to: 1
 27127                           ;GPS.c: 108: rawLatitude[0] = '0';
 27128  00297A  0E30               	movlw	48
 27129  00297C  D001               	goto	L13
 27130  00297E                     i2l374:
 27131                           
 27132                           ; BSR set to: 1
 27133                           ;GPS.c: 109: else
 27134                           ;GPS.c: 110: rawLatitude[0] = '-';
 27135                           
 27136                           ; BSR set to: 1
 27137  00297E  0E2D               	movlw	45
 27138  002980                     L13:
 27139  002980  6FA2               	movwf	_rawLatitude& (0+255),b
 27140  002982                     i2l375:
 27141                           
 27142                           ;GPS.c: 111: }
 27143                           ;GPS.c: 114: if((Term == 5) && (SentenceType == 1)) {
 27144                           
 27145                           ; BSR set to: 1
 27146                           
 27147                           ; BSR set to: 1
 27148  002982  0E05               	movlw	5
 27149  002984  183F               	xorwf	_Term,w,c
 27150  002986  A4D8               	btfss	status,2,c
 27151  002988  D015               	goto	i2l376
 27152  00298A  0440               	decf	_SentenceType,w,c
 27153  00298C  A4D8               	btfss	status,2,c
 27154  00298E  D012               	goto	i2l376
 27155                           
 27156                           ;GPS.c: 115: stringcpy(buffer, rawLongitude, 1, 11);
 27157  002990  0E96               	movlw	low _buffer
 27158  002992  6E01               	movwf	stringcpy@str1,c
 27159  002994  0E01               	movlw	high _buffer
 27160  002996  6E02               	movwf	stringcpy@str1+1,c
 27161  002998  0E8A               	movlw	low _rawLongitude
 27162  00299A  6E03               	movwf	stringcpy@str2,c
 27163  00299C  0E01               	movlw	high _rawLongitude
 27164  00299E  6E04               	movwf	stringcpy@str2+1,c
 27165  0029A0  0E00               	movlw	0
 27166  0029A2  6E06               	movwf	stringcpy@dir+1,c
 27167  0029A4  0E01               	movlw	1
 27168  0029A6  6E05               	movwf	stringcpy@dir,c
 27169  0029A8  0E0B               	movlw	11
 27170  0029AA  6E07               	movwf	stringcpy@size,c
 27171  0029AC  ECBB  F02B         	call	_stringcpy	;wreg free
 27172                           
 27173                           ;GPS.c: 116: gps_flag[2].flag = 1;
 27174  0029B0  0101               	movlb	1	; () banked
 27175  0029B2  8131               	bsf	(_gps_flag+2)& (0+255),0,b
 27176  0029B4                     i2l376:
 27177                           
 27178                           ;GPS.c: 117: }
 27179                           ;GPS.c: 119: if((Term == 6) && (SentenceType == 1)) {
 27180                           
 27181                           ; BSR set to: 1
 27182  0029B4  0E06               	movlw	6
 27183  0029B6  183F               	xorwf	_Term,w,c
 27184  0029B8  A4D8               	btfss	status,2,c
 27185  0029BA  D00C               	goto	i2l379
 27186  0029BC  0440               	decf	_SentenceType,w,c
 27187  0029BE  A4D8               	btfss	status,2,c
 27188  0029C0  D009               	goto	i2l379
 27189                           
 27190                           ;GPS.c: 120: if(buffer[0] == 'E')
 27191  0029C2  0E45               	movlw	69
 27192  0029C4  0101               	movlb	1	; () banked
 27193  0029C6  1996               	xorwf	_buffer& (0+255),w,b
 27194  0029C8  A4D8               	btfss	status,2,c
 27195  0029CA  D002               	goto	i2l378
 27196                           
 27197                           ; BSR set to: 1
 27198                           ;GPS.c: 121: rawLongitude[0] = '0';
 27199  0029CC  0E30               	movlw	48
 27200  0029CE  D001               	goto	L14
 27201  0029D0                     i2l378:
 27202                           
 27203                           ; BSR set to: 1
 27204                           ;GPS.c: 122: else
 27205                           ;GPS.c: 123: rawLongitude[0] = '-';
 27206                           
 27207                           ; BSR set to: 1
 27208  0029D0  0E2D               	movlw	45
 27209  0029D2                     L14:
 27210  0029D2  6F8A               	movwf	_rawLongitude& (0+255),b
 27211  0029D4                     i2l379:
 27212                           
 27213                           ;GPS.c: 124: }
 27214                           ;GPS.c: 127: if((Term == 7) && (SentenceType == 1)) {
 27215                           
 27216                           ; BSR set to: 1
 27217                           
 27218                           ; BSR set to: 1
 27219  0029D4  0E07               	movlw	7
 27220  0029D6  183F               	xorwf	_Term,w,c
 27221  0029D8  A4D8               	btfss	status,2,c
 27222  0029DA  D015               	goto	i2l380
 27223  0029DC  0440               	decf	_SentenceType,w,c
 27224  0029DE  A4D8               	btfss	status,2,c
 27225  0029E0  D012               	goto	i2l380
 27226                           
 27227                           ;GPS.c: 128: stringcpy(buffer, rawSpeed, 0, 3);
 27228  0029E2  0E96               	movlw	low _buffer
 27229  0029E4  6E01               	movwf	stringcpy@str1,c
 27230  0029E6  0E01               	movlw	high _buffer
 27231  0029E8  6E02               	movwf	stringcpy@str1+1,c
 27232  0029EA  0EBF               	movlw	low _rawSpeed
 27233  0029EC  6E03               	movwf	stringcpy@str2,c
 27234  0029EE  0E01               	movlw	high _rawSpeed
 27235  0029F0  6E04               	movwf	stringcpy@str2+1,c
 27236  0029F2  0E00               	movlw	0
 27237  0029F4  6E06               	movwf	stringcpy@dir+1,c
 27238  0029F6  0E00               	movlw	0
 27239  0029F8  6E05               	movwf	stringcpy@dir,c
 27240  0029FA  0E03               	movlw	3
 27241  0029FC  6E07               	movwf	stringcpy@size,c
 27242  0029FE  ECBB  F02B         	call	_stringcpy	;wreg free
 27243                           
 27244                           ;GPS.c: 129: gps_flag[5].flag = 1;
 27245  002A02  0101               	movlb	1	; () banked
 27246  002A04  8134               	bsf	(_gps_flag+5)& (0+255),0,b
 27247  002A06                     i2l380:
 27248                           
 27249                           ;GPS.c: 130: }
 27250                           ;GPS.c: 138: if(Term == 9 && SentenceType == 1) {
 27251                           
 27252                           ; BSR set to: 1
 27253  002A06  0E09               	movlw	9
 27254  002A08  183F               	xorwf	_Term,w,c
 27255  002A0A  A4D8               	btfss	status,2,c
 27256  002A0C  D015               	goto	i2l381
 27257  002A0E  0440               	decf	_SentenceType,w,c
 27258  002A10  A4D8               	btfss	status,2,c
 27259  002A12  D012               	goto	i2l381
 27260                           
 27261                           ;GPS.c: 139: stringcpy(buffer, rawDate, 0, 6);
 27262  002A14  0E96               	movlw	low _buffer
 27263  002A16  6E01               	movwf	stringcpy@str1,c
 27264  002A18  0E01               	movlw	high _buffer
 27265  002A1A  6E02               	movwf	stringcpy@str1+1,c
 27266  002A1C  0EB8               	movlw	low _rawDate
 27267  002A1E  6E03               	movwf	stringcpy@str2,c
 27268  002A20  0E01               	movlw	high _rawDate
 27269  002A22  6E04               	movwf	stringcpy@str2+1,c
 27270  002A24  0E00               	movlw	0
 27271  002A26  6E06               	movwf	stringcpy@dir+1,c
 27272  002A28  0E00               	movlw	0
 27273  002A2A  6E05               	movwf	stringcpy@dir,c
 27274  002A2C  0E06               	movlw	6
 27275  002A2E  6E07               	movwf	stringcpy@size,c
 27276  002A30  ECBB  F02B         	call	_stringcpy	;wreg free
 27277                           
 27278                           ;GPS.c: 140: gps_flag[3].flag = 1;
 27279  002A34  0101               	movlb	1	; () banked
 27280  002A36  8132               	bsf	(_gps_flag+3)& (0+255),0,b
 27281  002A38                     i2l381:
 27282                           
 27283                           ;GPS.c: 141: }
 27284                           ;GPS.c: 154: if((Term == 6) && (SentenceType == 2)) {
 27285                           
 27286                           ; BSR set to: 1
 27287  002A38  0E06               	movlw	6
 27288  002A3A  183F               	xorwf	_Term,w,c
 27289  002A3C  A4D8               	btfss	status,2,c
 27290  002A3E  D016               	goto	i2l382
 27291  002A40  0E02               	movlw	2
 27292  002A42  1840               	xorwf	_SentenceType,w,c
 27293  002A44  A4D8               	btfss	status,2,c
 27294  002A46  D012               	goto	i2l382
 27295                           
 27296                           ;GPS.c: 155: stringcpy(buffer, rawFix, 0, 2);
 27297  002A48  0E96               	movlw	low _buffer
 27298  002A4A  6E01               	movwf	stringcpy@str1,c
 27299  002A4C  0E01               	movlw	high _buffer
 27300  002A4E  6E02               	movwf	stringcpy@str1+1,c
 27301  002A50  0ECB               	movlw	low _rawFix
 27302  002A52  6E03               	movwf	stringcpy@str2,c
 27303  002A54  0E01               	movlw	high _rawFix
 27304  002A56  6E04               	movwf	stringcpy@str2+1,c
 27305  002A58  0E00               	movlw	0
 27306  002A5A  6E06               	movwf	stringcpy@dir+1,c
 27307  002A5C  0E00               	movlw	0
 27308  002A5E  6E05               	movwf	stringcpy@dir,c
 27309  002A60  0E02               	movlw	2
 27310  002A62  6E07               	movwf	stringcpy@size,c
 27311  002A64  ECBB  F02B         	call	_stringcpy	;wreg free
 27312                           
 27313                           ;GPS.c: 156: gps_flag[4].flag = 1;
 27314  002A68  0101               	movlb	1	; () banked
 27315  002A6A  8133               	bsf	(_gps_flag+4)& (0+255),0,b
 27316  002A6C                     i2l382:
 27317                           
 27318                           ;GPS.c: 158: }
 27319                           ;GPS.c: 159: Term++;
 27320                           
 27321                           ; BSR set to: 1
 27322  002A6C  2A3F               	incf	_Term,f,c
 27323                           
 27324                           ;GPS.c: 160: char_number = 0;
 27325  002A6E  0E00               	movlw	0
 27326  002A70  6E41               	movwf	_char_number,c
 27327                           
 27328                           ;GPS.c: 161: break;
 27329  002A72  0012               	return	
 27330  002A74                     
 27331                           ;GPS.c: 164: buffer[char_number++] = c;
 27332  002A74  5041               	movf	_char_number,w,c
 27333  002A76  0D01               	mullw	1
 27334  002A78  0E96               	movlw	low _buffer
 27335  002A7A  24F3               	addwf	prodl,w,c
 27336  002A7C  6ED9               	movwf	fsr2l,c
 27337  002A7E  0E01               	movlw	high _buffer
 27338  002A80  20F4               	addwfc	prodh,w,c
 27339  002A82  6EDA               	movwf	fsr2h,c
 27340  002A84  C00C  FFDF         	movff	GPSRead@c,indf2
 27341  002A88  2A41               	incf	_char_number,f,c
 27342                           
 27343                           ;GPS.c: 166: }
 27344                           
 27345                           ;GPS.c: 165: break;
 27346  002A8A  0012               	return	
 27347  002A8C                     i2l357:
 27348  002A8C  500C               	movf	GPSRead@c,w,c
 27349                           
 27350                           ; Switch size 1, requested type "space"
 27351                           ; Number of cases is 3, Range of values is 13 to 44
 27352                           ; switch strategies available:
 27353                           ; Name         Instructions Cycles
 27354                           ; simple_byte           10     6 (average)
 27355                           ;	Chosen strategy is simple_byte
 27356  002A8E  0A0D               	xorlw	13	; case 13
 27357  002A90  B4D8               	btfsc	status,2,c
 27358  002A92  D6CF               	goto	i2l358
 27359  002A94  0A29               	xorlw	41	; case 36
 27360  002A96  B4D8               	btfsc	status,2,c
 27361  002A98  D6EF               	goto	i2l364
 27362  002A9A  0A08               	xorlw	8	; case 44
 27363  002A9C  B4D8               	btfsc	status,2,c
 27364  002A9E  D6F1               	goto	i2l365
 27365  002AA0  D7E9               	goto	i2l383
 27366  002AA2                     __end_of_GPSRead:
 27367                           	opt stack 0
 27368                           tosu	equ	0xFFF
 27369                           tosh	equ	0xFFE
 27370                           tosl	equ	0xFFD
 27371                           pclatu	equ	0xFFB
 27372                           pclath	equ	0xFFA
 27373                           pcl	equ	0xFF9
 27374                           tblptru	equ	0xFF8
 27375                           tblptrh	equ	0xFF7
 27376                           tblptrl	equ	0xFF6
 27377                           tablat	equ	0xFF5
 27378                           prodh	equ	0xFF4
 27379                           prodl	equ	0xFF3
 27380                           intcon	equ	0xFF2
 27381                           intcon2	equ	0xFF1
 27382                           intcon3	equ	0xFF0
 27383                           indf0	equ	0xFEF
 27384                           postinc0	equ	0xFEE
 27385                           fsr0h	equ	0xFEA
 27386                           fsr0l	equ	0xFE9
 27387                           wreg	equ	0xFE8
 27388                           indf1	equ	0xFE7
 27389                           postinc1	equ	0xFE6
 27390                           postdec1	equ	0xFE5
 27391                           plusw1	equ	0xFE3
 27392                           fsr1h	equ	0xFE2
 27393                           fsr1l	equ	0xFE1
 27394                           indf2	equ	0xFDF
 27395                           postinc2	equ	0xFDE
 27396                           postdec2	equ	0xFDD
 27397                           plusw2	equ	0xFDB
 27398                           fsr2h	equ	0xFDA
 27399                           fsr2l	equ	0xFD9
 27400                           status	equ	0xFD8
 27401                           
 27402 ;; *************** function _stringcpy *****************
 27403 ;; Defined at:
 27404 ;;		line 52 in file "bibliotecas/GPS.c"
 27405 ;; Parameters:    Size  Location     Type
 27406 ;;  str1            2    0[COMRAM] PTR unsigned char 
 27407 ;;		 -> buffer(12), 
 27408 ;;  str2            2    2[COMRAM] PTR unsigned char 
 27409 ;;		 -> rawFix(2), rawDate(7), rawSpeed(6), rawLongitude(12), 
 27410 ;;		 -> rawLatitude(11), rawTime(11), sentence(6), 
 27411 ;;  dir             2    4[COMRAM] int 
 27412 ;;  size            1    6[COMRAM] unsigned char 
 27413 ;; Auto vars:     Size  Location     Type
 27414 ;;  chr             1    9[COMRAM] unsigned char 
 27415 ;; Return value:  Size  Location     Type
 27416 ;;                  1    wreg      void 
 27417 ;; Registers used:
 27418 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 27419 ;; Tracked objects:
 27420 ;;		On entry : 0/0
 27421 ;;		On exit  : 0/0
 27422 ;;		Unchanged: 0/0
 27423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27424 ;;      Params:         7       0       0       0       0       0       0       0       0
 27425 ;;      Locals:         1       0       0       0       0       0       0       0       0
 27426 ;;      Temps:          2       0       0       0       0       0       0       0       0
 27427 ;;      Totals:        10       0       0       0       0       0       0       0       0
 27428 ;;Total ram usage:       10 bytes
 27429 ;; Hardware stack levels used:    1
 27430 ;; This function calls:
 27431 ;;		Nothing
 27432 ;; This function is called by:
 27433 ;;		_GPSRead
 27434 ;; This function uses a non-reentrant model
 27435 ;;
 27436                           
 27437                           	psect	text117
 27438  005776                     __ptext117:
 27439                           	opt stack 0
 27440  005776                     _stringcpy:
 27441                           	opt stack 12
 27442                           
 27443                           ;GPS.c: 54: uint8_t chr = 0;
 27444                           
 27445                           ;incstack = 0
 27446  005776  0E00               	movlw	0
 27447  005778  6E0A               	movwf	stringcpy@chr,c
 27448  00577A                     
 27449                           ;GPS.c: 57: str2[chr + dir] = str1[chr];
 27450  00577A  500A               	movf	stringcpy@chr,w,c
 27451  00577C  0D01               	mullw	1
 27452  00577E  50F3               	movf	prodl,w,c
 27453  005780  2401               	addwf	stringcpy@str1,w,c
 27454  005782  6ED9               	movwf	fsr2l,c
 27455  005784  50F4               	movf	prodh,w,c
 27456  005786  2002               	addwfc	stringcpy@str1+1,w,c
 27457  005788  6EDA               	movwf	fsr2h,c
 27458  00578A  500A               	movf	stringcpy@chr,w,c
 27459  00578C  2405               	addwf	stringcpy@dir,w,c
 27460  00578E  6E08               	movwf	??_stringcpy& (0+255),c
 27461  005790  0E00               	movlw	0
 27462  005792  2006               	addwfc	stringcpy@dir+1,w,c
 27463  005794  6E09               	movwf	(??_stringcpy+1)& (0+255),c
 27464  005796  5008               	movf	??_stringcpy,w,c
 27465  005798  2403               	addwf	stringcpy@str2,w,c
 27466  00579A  6EE1               	movwf	fsr1l,c
 27467  00579C  5009               	movf	??_stringcpy+1,w,c
 27468  00579E  2004               	addwfc	stringcpy@str2+1,w,c
 27469  0057A0  6EE2               	movwf	fsr1h,c
 27470  0057A2  CFDF FFE7          	movff	indf2,indf1
 27471                           
 27472                           ;GPS.c: 58: } while(str1[chr++] != '\0');
 27473  0057A6  2A0A               	incf	stringcpy@chr,f,c
 27474  0057A8  040A               	decf	stringcpy@chr,w,c
 27475  0057AA  6E08               	movwf	??_stringcpy& (0+255),c
 27476  0057AC  5008               	movf	??_stringcpy,w,c
 27477  0057AE  0D01               	mullw	1
 27478  0057B0  50F3               	movf	prodl,w,c
 27479  0057B2  2401               	addwf	stringcpy@str1,w,c
 27480  0057B4  6ED9               	movwf	fsr2l,c
 27481  0057B6  50F4               	movf	prodh,w,c
 27482  0057B8  2002               	addwfc	stringcpy@str1+1,w,c
 27483  0057BA  6EDA               	movwf	fsr2h,c
 27484  0057BC  50DF               	movf	indf2,w,c
 27485  0057BE  B4D8               	btfsc	status,2,c
 27486  0057C0  0012               	return	
 27487  0057C2  D7DB               	goto	i2l352
 27488  0057C4                     __end_of_stringcpy:
 27489                           	opt stack 0
 27490                           tosu	equ	0xFFF
 27491                           tosh	equ	0xFFE
 27492                           tosl	equ	0xFFD
 27493                           pclatu	equ	0xFFB
 27494                           pclath	equ	0xFFA
 27495                           pcl	equ	0xFF9
 27496                           tblptru	equ	0xFF8
 27497                           tblptrh	equ	0xFF7
 27498                           tblptrl	equ	0xFF6
 27499                           tablat	equ	0xFF5
 27500                           prodh	equ	0xFF4
 27501                           prodl	equ	0xFF3
 27502                           intcon	equ	0xFF2
 27503                           intcon2	equ	0xFF1
 27504                           intcon3	equ	0xFF0
 27505                           indf0	equ	0xFEF
 27506                           postinc0	equ	0xFEE
 27507                           fsr0h	equ	0xFEA
 27508                           fsr0l	equ	0xFE9
 27509                           wreg	equ	0xFE8
 27510                           indf1	equ	0xFE7
 27511                           postinc1	equ	0xFE6
 27512                           postdec1	equ	0xFE5
 27513                           plusw1	equ	0xFE3
 27514                           fsr1h	equ	0xFE2
 27515                           fsr1l	equ	0xFE1
 27516                           indf2	equ	0xFDF
 27517                           postinc2	equ	0xFDE
 27518                           postdec2	equ	0xFDD
 27519                           plusw2	equ	0xFDB
 27520                           fsr2h	equ	0xFDA
 27521                           fsr2l	equ	0xFD9
 27522                           status	equ	0xFD8
 27523                           
 27524 ;; *************** function _strcmp *****************
 27525 ;; Defined at:
 27526 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
 27527 ;; Parameters:    Size  Location     Type
 27528 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 27529 ;;		 -> sentence(6), 
 27530 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 27531 ;;		 -> STR_6(6), STR_5(6), 
 27532 ;; Auto vars:     Size  Location     Type
 27533 ;;  r               1    5[COMRAM] char 
 27534 ;; Return value:  Size  Location     Type
 27535 ;;                  2    0[COMRAM] int 
 27536 ;; Registers used:
 27537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 27538 ;; Tracked objects:
 27539 ;;		On entry : 0/0
 27540 ;;		On exit  : 0/0
 27541 ;;		Unchanged: 0/0
 27542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27543 ;;      Params:         4       0       0       0       0       0       0       0       0
 27544 ;;      Locals:         1       0       0       0       0       0       0       0       0
 27545 ;;      Temps:          1       0       0       0       0       0       0       0       0
 27546 ;;      Totals:         6       0       0       0       0       0       0       0       0
 27547 ;;Total ram usage:        6 bytes
 27548 ;; Hardware stack levels used:    1
 27549 ;; This function calls:
 27550 ;;		Nothing
 27551 ;; This function is called by:
 27552 ;;		_GPSRead
 27553 ;; This function uses a non-reentrant model
 27554 ;;
 27555                           
 27556                           	psect	text118
 27557  00597C                     __ptext118:
 27558                           	opt stack 0
 27559  00597C                     _strcmp:
 27560                           	opt stack 12
 27561                           
 27562                           ;incstack = 0
 27563  00597C  D004               	goto	i2l2260
 27564  00597E  4A01               	infsnz	strcmp@s1,f,c
 27565  005980  2A02               	incf	strcmp@s1+1,f,c
 27566  005982  4A03               	infsnz	strcmp@s2,f,c
 27567  005984  2A04               	incf	strcmp@s2+1,f,c
 27568  005986                     i2l2260:
 27569  005986  C001  FFD9         	movff	strcmp@s1,fsr2l
 27570  00598A  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 27571  00598E  50DF               	movf	indf2,w,c
 27572  005990  6E05               	movwf	??_strcmp& (0+255),c
 27573  005992  C003  FFF6         	movff	strcmp@s2,tblptrl
 27574  005996  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 27575  00599A                     	if	0	;tblptru may be non-zero
 27576  00599A                     	endif
 27577  00599A                     	if	0	;tblptru may be non-zero
 27578  00599A                     	endif
 27579  00599A  0008               	tblrd		*
 27580  00599C  50F5               	movf	tablat,w,c
 27581  00599E  0800               	sublw	0
 27582  0059A0  2405               	addwf	??_strcmp,w,c
 27583  0059A2  6E06               	movwf	strcmp@r,c
 27584  0059A4  5006               	movf	strcmp@r,w,c
 27585  0059A6  A4D8               	btfss	status,2,c
 27586  0059A8  D007               	goto	i2u1151_40
 27587  0059AA  C001  FFD9         	movff	strcmp@s1,fsr2l
 27588  0059AE  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 27589  0059B2  50DF               	movf	indf2,w,c
 27590  0059B4  A4D8               	btfss	status,2,c
 27591  0059B6  D7E3               	goto	i2l2261
 27592  0059B8                     i2u1151_40:
 27593  0059B8  5006               	movf	strcmp@r,w,c
 27594  0059BA  6E01               	movwf	?_strcmp,c
 27595  0059BC  6A02               	clrf	?_strcmp+1,c
 27596  0059BE  BE01               	btfsc	?_strcmp,7,c
 27597  0059C0  0602               	decf	?_strcmp+1,f,c
 27598  0059C2  0012               	return	
 27599  0059C4                     __end_of_strcmp:
 27600                           	opt stack 0
 27601                           tosu	equ	0xFFF
 27602                           tosh	equ	0xFFE
 27603                           tosl	equ	0xFFD
 27604                           pclatu	equ	0xFFB
 27605                           pclath	equ	0xFFA
 27606                           pcl	equ	0xFF9
 27607                           tblptru	equ	0xFF8
 27608                           tblptrh	equ	0xFF7
 27609                           tblptrl	equ	0xFF6
 27610                           tablat	equ	0xFF5
 27611                           prodh	equ	0xFF4
 27612                           prodl	equ	0xFF3
 27613                           intcon	equ	0xFF2
 27614                           intcon2	equ	0xFF1
 27615                           intcon3	equ	0xFF0
 27616                           indf0	equ	0xFEF
 27617                           postinc0	equ	0xFEE
 27618                           fsr0h	equ	0xFEA
 27619                           fsr0l	equ	0xFE9
 27620                           wreg	equ	0xFE8
 27621                           indf1	equ	0xFE7
 27622                           postinc1	equ	0xFE6
 27623                           postdec1	equ	0xFE5
 27624                           plusw1	equ	0xFE3
 27625                           fsr1h	equ	0xFE2
 27626                           fsr1l	equ	0xFE1
 27627                           indf2	equ	0xFDF
 27628                           postinc2	equ	0xFDE
 27629                           postdec2	equ	0xFDD
 27630                           plusw2	equ	0xFDB
 27631                           fsr2h	equ	0xFDA
 27632                           fsr2l	equ	0xFD9
 27633                           status	equ	0xFD8
 27634                           tosu	equ	0xFFF
 27635                           tosh	equ	0xFFE
 27636                           tosl	equ	0xFFD
 27637                           pclatu	equ	0xFFB
 27638                           pclath	equ	0xFFA
 27639                           pcl	equ	0xFF9
 27640                           tblptru	equ	0xFF8
 27641                           tblptrh	equ	0xFF7
 27642                           tblptrl	equ	0xFF6
 27643                           tablat	equ	0xFF5
 27644                           prodh	equ	0xFF4
 27645                           prodl	equ	0xFF3
 27646                           intcon	equ	0xFF2
 27647                           intcon2	equ	0xFF1
 27648                           intcon3	equ	0xFF0
 27649                           indf0	equ	0xFEF
 27650                           postinc0	equ	0xFEE
 27651                           fsr0h	equ	0xFEA
 27652                           fsr0l	equ	0xFE9
 27653                           wreg	equ	0xFE8
 27654                           indf1	equ	0xFE7
 27655                           postinc1	equ	0xFE6
 27656                           postdec1	equ	0xFE5
 27657                           plusw1	equ	0xFE3
 27658                           fsr1h	equ	0xFE2
 27659                           fsr1l	equ	0xFE1
 27660                           indf2	equ	0xFDF
 27661                           postinc2	equ	0xFDE
 27662                           postdec2	equ	0xFDD
 27663                           plusw2	equ	0xFDB
 27664                           fsr2h	equ	0xFDA
 27665                           fsr2l	equ	0xFD9
 27666                           status	equ	0xFD8
 27667                           
 27668                           	psect	text119
 27669  000000                     __ptext119:
 27670                           	opt stack 0
 27671                           tosu	equ	0xFFF
 27672                           tosh	equ	0xFFE
 27673                           tosl	equ	0xFFD
 27674                           pclatu	equ	0xFFB
 27675                           pclath	equ	0xFFA
 27676                           pcl	equ	0xFF9
 27677                           tblptru	equ	0xFF8
 27678                           tblptrh	equ	0xFF7
 27679                           tblptrl	equ	0xFF6
 27680                           tablat	equ	0xFF5
 27681                           prodh	equ	0xFF4
 27682                           prodl	equ	0xFF3
 27683                           intcon	equ	0xFF2
 27684                           intcon2	equ	0xFF1
 27685                           intcon3	equ	0xFF0
 27686                           indf0	equ	0xFEF
 27687                           postinc0	equ	0xFEE
 27688                           fsr0h	equ	0xFEA
 27689                           fsr0l	equ	0xFE9
 27690                           wreg	equ	0xFE8
 27691                           indf1	equ	0xFE7
 27692                           postinc1	equ	0xFE6
 27693                           postdec1	equ	0xFE5
 27694                           plusw1	equ	0xFE3
 27695                           fsr1h	equ	0xFE2
 27696                           fsr1l	equ	0xFE1
 27697                           indf2	equ	0xFDF
 27698                           postinc2	equ	0xFDE
 27699                           postdec2	equ	0xFDD
 27700                           plusw2	equ	0xFDB
 27701                           fsr2h	equ	0xFDA
 27702                           fsr2l	equ	0xFD9
 27703                           status	equ	0xFD8
 27704                           
 27705                           	psect	rparam
 27706  0000                     tosu	equ	0xFFF
 27707                           tosh	equ	0xFFE
 27708                           tosl	equ	0xFFD
 27709                           pclatu	equ	0xFFB
 27710                           pclath	equ	0xFFA
 27711                           pcl	equ	0xFF9
 27712                           tblptru	equ	0xFF8
 27713                           tblptrh	equ	0xFF7
 27714                           tblptrl	equ	0xFF6
 27715                           tablat	equ	0xFF5
 27716                           prodh	equ	0xFF4
 27717                           prodl	equ	0xFF3
 27718                           intcon	equ	0xFF2
 27719                           intcon2	equ	0xFF1
 27720                           intcon3	equ	0xFF0
 27721                           indf0	equ	0xFEF
 27722                           postinc0	equ	0xFEE
 27723                           fsr0h	equ	0xFEA
 27724                           fsr0l	equ	0xFE9
 27725                           wreg	equ	0xFE8
 27726                           indf1	equ	0xFE7
 27727                           postinc1	equ	0xFE6
 27728                           postdec1	equ	0xFE5
 27729                           plusw1	equ	0xFE3
 27730                           fsr1h	equ	0xFE2
 27731                           fsr1l	equ	0xFE1
 27732                           indf2	equ	0xFDF
 27733                           postinc2	equ	0xFDE
 27734                           postdec2	equ	0xFDD
 27735                           plusw2	equ	0xFDB
 27736                           fsr2h	equ	0xFDA
 27737                           fsr2l	equ	0xFD9
 27738                           status	equ	0xFD8
 27739                           
 27740                           	psect	temp
 27741  000043                     btemp:
 27742                           	opt stack 0
 27743  000043                     	ds	1
 27744  0000                     int$flags	set	btemp
 27745  0000                     wtemp6	set	btemp+1
 27746                           tosu	equ	0xFFF
 27747                           tosh	equ	0xFFE
 27748                           tosl	equ	0xFFD
 27749                           pclatu	equ	0xFFB
 27750                           pclath	equ	0xFFA
 27751                           pcl	equ	0xFF9
 27752                           tblptru	equ	0xFF8
 27753                           tblptrh	equ	0xFF7
 27754                           tblptrl	equ	0xFF6
 27755                           tablat	equ	0xFF5
 27756                           prodh	equ	0xFF4
 27757                           prodl	equ	0xFF3
 27758                           intcon	equ	0xFF2
 27759                           intcon2	equ	0xFF1
 27760                           intcon3	equ	0xFF0
 27761                           indf0	equ	0xFEF
 27762                           postinc0	equ	0xFEE
 27763                           fsr0h	equ	0xFEA
 27764                           fsr0l	equ	0xFE9
 27765                           wreg	equ	0xFE8
 27766                           indf1	equ	0xFE7
 27767                           postinc1	equ	0xFE6
 27768                           postdec1	equ	0xFE5
 27769                           plusw1	equ	0xFE3
 27770                           fsr1h	equ	0xFE2
 27771                           fsr1l	equ	0xFE1
 27772                           indf2	equ	0xFDF
 27773                           postinc2	equ	0xFDE
 27774                           postdec2	equ	0xFDD
 27775                           plusw2	equ	0xFDB
 27776                           fsr2h	equ	0xFDA
 27777                           fsr2l	equ	0xFD9
 27778                           status	equ	0xFD8


Data Sizes:
    Strings     304
    Constant    118
    Data        15
    BSS         860
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     33      66
    BANK0           160    143     160
    BANK1           256     37     256
    BANK2           256     41     103
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    escalonador$3512	PTR FTN()void  size(2) Largest target is 1
		 -> troca_de_tela(), disparo_gravacao(), verifica_dados_operacionais(), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    temp_buff_long	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    point_buff_gps_long	PTR volatile unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    point_buff_gps_lat	PTR volatile unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_27(CODE[7]), STR_26(CODE[5]), rawDate(BANK1[7]), rawSpeed(BANK1[6]), 
		 -> rawLongitude(BANK1[12]), rawLatitude(BANK1[11]), rawTime(BANK1[11]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_27(CODE[7]), STR_26(CODE[5]), rawDate(BANK1[7]), rawSpeed(BANK1[6]), 
		 -> rawLongitude(BANK1[12]), rawLatitude(BANK1[11]), rawTime(BANK1[11]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_15(CODE[7]), STR_8(CODE[13]), STR_7(CODE[12]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 20
		 -> filename(BANK1[20]), rawLongitude(BANK1[12]), rawLatitude(BANK1[11]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 20
		 -> filename(BANK1[20]), rawLongitude(BANK1[12]), rawLatitude(BANK1[11]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_6(CODE[6]), STR_5(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 6
		 -> sentence(BANK1[6]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_16(CODE[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 20
		 -> filename(BANK1[20]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 20
		 -> filename(BANK1[20]), 

    memset@p1	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memset@p	PTR unsigned char  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    memcpy@d1	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK1[20]), fs(BIGRAM[544]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK1[20]), fs(BIGRAM[544]), 

    memcpy@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), f_open@fn(BANK1[12]), NULL(NULL[0]), 
		 -> fs(BIGRAM[544]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), STR_23(CODE[4]), 

    memcmp@s1	PTR const void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_lcd@texto(BANK0[7]), 

    ltoa@buf	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_lcd@texto(BANK0[7]), 

    ltoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_lcd@texto(BANK0[7]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), 

    atol@s	PTR const unsigned char  size(2) Largest target is 44
		 -> convert_to_int_point_long@convert_str_long(BANK0[10]), convert_to_int_point_lat@convert_str_lat(BANK0[9]), fence_diff_long(CODE[44]), fence_diff_lat(CODE[40]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3
		 -> Speed(), 

    temp_buff_lat	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    convert_to_int_point_lat@temp_str_lat	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    convert_to_int@p_buff	PTR const unsigned char  size(2) Largest target is 44
		 -> fence_diff_long(CODE[44]), fence_diff_lat(CODE[40]), 

    armazena_ltlo@buffer	PTR unsigned char  size(2) Largest target is 11
		 -> longitude_to_convert@longitude(BANK0[11]), latitude_to_convert@latitude(BANK0[9]), 

    disparo_gravacao@fix_gps	PTR unsigned char  size(2) Largest target is 2
		 -> rawFix(BANK1[2]), 

    p_tarefas	PTR FTN()void [4] size(2) Largest target is 1
		 -> troca_de_tela(), disparo_gravacao(), verifica_dados_operacionais(), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_uart@valor_final(COMRAM[7]), 

    fprintf@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fprintf@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_21(CODE[6]), STR_20(CODE[10]), STR_19(CODE[10]), STR_18(CODE[15]), 
		 -> STR_17(CODE[5]), 

    fprintf@arp	PTR void [1] size(2) Largest target is 2
		 -> ?_fprintf(BANK1[2]), 

    fputs@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    fputs@str	PTR const unsigned char  size(2) Largest target is 62
		 -> fprintf@s(BANK2[16]), string_dado(BANK2[62]), 

    fputc@fil	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    sp__fgets	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    f_readdir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_opendir@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_lseek@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_close@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_sync@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_write@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> fputc@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 1
		 -> fputc@c(BANK0[1]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_read@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__memcpy	PTR void  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), dado_arquivo(BANK1[20]), fs(BIGRAM[544]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_22(CODE[13]), filename(BANK1[20]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_open@fp	PTR struct _FIL size(2) Largest target is 30
		 -> fil(BANK1[28]), 

    dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    f_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> fs(BIGRAM[544]), 

    validate@fs	PTR const struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    auto_mount@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_opendir@path(COMRAM[2]), f_open@path(BANK0[2]), 

    auto_mount@p	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_22(CODE[13]), filename(BANK1[20]), 

    check_fs@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_open@dir(BANK1[2]), 

    reserve_direntry@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    reserve_direntry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    reserve_direntry@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    trace_path@dir	PTR PTR unsigned char  size(2) Largest target is 2
		 -> f_opendir@dir(COMRAM[2]), f_open@dir(BANK1[2]), 

    trace_path@path	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_22(CODE[13]), filename(BANK1[20]), 

    trace_path@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    trace_path@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    trace_path@dptr	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> trace_path@path(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 544
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), NULL(NULL[0]), fs(BIGRAM[544]), 

    make_dirfile@dirname	PTR unsigned char  size(2) Largest target is 12
		 -> f_opendir@fn(COMRAM[12]), f_open@fn(BANK1[12]), 

    S1415_DIR_E$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    next_dir_entry@dj	PTR struct _DIR_E size(2) Largest target is 15
		 -> f_open@dj(BANK1[14]), 

    clust2sect@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    create_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    remove_chain@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@p	PTR unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), NULL(NULL[0]), fs(BIGRAM[544]), 

    put_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    get_cluster@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sync@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    FatFs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    move_window@fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    monta_sd@dado	PTR unsigned char  size(2) Largest target is 12
		 -> STR_27(CODE[7]), STR_26(CODE[5]), rawDate(BANK1[7]), rawSpeed(BANK1[6]), 
		 -> rawLongitude(BANK1[12]), rawLatitude(BANK1[11]), rawTime(BANK1[11]), 

    sp__leitura_sdcard	PTR unsigned char  size(2) Largest target is 20
		 -> dado_arquivo(BANK1[20]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 20
		 -> filename(BANK1[20]), 

    S743_FIL$dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.dir_ptr	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    S743_FIL$fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    fil.fs	PTR struct _FATFS size(2) Largest target is 544
		 -> NULL(NULL[0]), fs(BIGRAM[544]), 

    sp__Speed	PTR unsigned char  size(2) Largest target is 6
		 -> rawSpeed(BANK1[6]), 

    sp__fix	PTR unsigned char  size(2) Largest target is 2
		 -> rawFix(BANK1[2]), 

    sp__longitude_to_display	PTR unsigned char  size(2) Largest target is 12
		 -> rawLongitude(BANK1[12]), 

    sp__latitude_to_display	PTR unsigned char  size(2) Largest target is 11
		 -> rawLatitude(BANK1[11]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> filename(BANK1[20]), rawLongitude(BANK1[12]), rawLatitude(BANK1[11]), 

    stringcpy@str1	PTR unsigned char  size(2) Largest target is 12
		 -> buffer(BANK1[12]), 

    stringcpy@str2	PTR unsigned char  size(2) Largest target is 12
		 -> rawFix(BANK1[2]), rawDate(BANK1[7]), rawSpeed(BANK1[6]), rawLongitude(BANK1[12]), 
		 -> rawLatitude(BANK1[11]), rawTime(BANK1[11]), sentence(BANK1[6]), 

    escreve_frase_ram_lcd@buffer	PTR unsigned char  size(2) Largest target is 21
		 -> STR_39(CODE[8]), STR_38(CODE[9]), STR_37(CODE[4]), STR_36(CODE[4]), 
		 -> STR_35(CODE[5]), STR_34(CODE[2]), STR_33(CODE[5]), STR_32(CODE[7]), 
		 -> STR_31(CODE[7]), STR_30(CODE[2]), STR_29(CODE[5]), STR_28(CODE[7]), 
		 -> STR_25(CODE[11]), mensagem_inicial@msg_dois(BANK0[17]), mensagem_inicial@msg_linha_um(BANK0[17]), STR_14(CODE[9]), 
		 -> STR_13(CODE[10]), STR_12(CODE[10]), STR_11(CODE[14]), STR_10(CODE[21]), 
		 -> STR_9(CODE[15]), rawFix(BANK1[2]), rawLongitude(BANK1[12]), rawLatitude(BANK1[11]), 
		 -> escreve_inteiro_lcd@texto(BANK0[7]), STR_4(CODE[11]), STR_3(CODE[10]), STR_2(CODE[16]), 
		 -> STR_1(CODE[11]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 7
		 -> escreve_inteiro_lcd@texto(BANK0[7]), 

    sdc_disk_write@p_buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    sdc_disk_read@p_buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK1[20]), fs(BIGRAM[544]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 544
		 -> fs.win(BIGRAM[512]), fputc@c(BANK0[1]), NULL(NULL[0]), fs(BIGRAM[544]), 

    data_buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 544
		 -> NULL(NULL[0]), dado_arquivo(BANK1[20]), fs(BIGRAM[544]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_GPSRead
    _GPSRead->_stringcpy

Critical Paths under _main in BANK0

    _mensagem_inicial->_posicao_cursor_lcd
    _init_lcd->_escreve_cmd_lcd
    _config_timer_zero->_write_timer_zero
    _verifica_dados_operacionais->_verifica_fence
    _atoi->___wmul
    ___fttol->___ftmul
    ___ftmul->___awtoft
    ___awtoft->_atoi
    _troca_de_tela->_escreve_inteiro_lcd
    _mostra_dados_display->_posicao_cursor_lcd
    _escreve_inteiro_lcd->_ltoa
    _ltoa->_ultoa
    _ultoa->___lldiv
    _escreve_cmd_lcd->_delay
    _verifica_fence->_longitude_to_convert
    _longitude_to_convert->_armazena_ltlo
    _latitude_to_convert->_armazena_ltlo
    _armazena_ltlo->_diferenca
    _diferenca->_convert_to_int_point_lat
    _convert_to_int_point_long->_atol
    _convert_to_int_point_lat->_atol
    _convert_to_int->_atol
    _atol->___lmul
    _inicializa_uart->_configura_baudrate_uart
    _configura_baudrate_uart->___aldiv
    _fprintf->_fputs
    _fputs->_fputc
    _fputc->_f_write
    _f_write->_create_chain
    _f_open->_trace_path
    _trace_path->_next_dir_entry
    _make_dirfile->_memset
    _reserve_direntry->_create_chain
    _next_dir_entry->_get_cluster
    _clust2sect->___lmul
    _remove_chain->_put_cluster
    _auto_mount->_check_fs
    _disk_initialize->_sdc_disk_initialize
    _sdc_disk_initialize->_sdc_reset
    _sdc_reset->_command
    _posicao_cursor_lcd->_endereco_cursor_lcd
    _endereco_cursor_lcd->_delay
    _escreve_frase_ram_lcd->_escreve_caractere_lcd
    _escreve_caractere_lcd->_delay
    _check_fs->_disk_read
    _f_lseek->_create_chain
    _create_chain->_put_cluster
    _put_cluster->_move_window
    _get_cluster->_move_window
    _f_close->_f_sync
    _f_sync->_sync
    _validate->_disk_status
    _disk_status->_sdc_disk_status
    _sync->_move_window
    _move_window->_disk_read
    _move_window->_disk_write
    _disk_write->_sdc_disk_write
    _sdc_disk_write->_command
    _disk_read->_sdc_disk_read
    _sdc_disk_read->_command
    _proceed->_escreve_SPI
    _command->_dummy_clocks
    _command->_wait_ready
    _get_fattime->_GPSDay
    _get_fattime->_GPSHour
    _get_fattime->_GPSMinute
    _get_fattime->_GPSMonth
    _get_fattime->_GPSSecond
    _get_fattime->_GPSyear
    _GPSyear->___wmul
    _GPSSecond->___wmul
    _GPSMonth->___wmul
    _GPSMinute->___wmul
    _GPSHour->___wmul
    _GPSDay->___wmul
    _dados_gps_to_sd->_monta_sd
    _monta_sd->_strlen

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _grava_sd->_escrita_sdcard
    _escrita_sdcard->_f_open
    _fprintf->_fputs

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_escalonador
    _escalonador->_disparo_gravacao
    _escrita_sdcard->_fprintf

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  546647
                        _escalonador
                 _inicializa_tarefas
                    _inicializa_uart
                      _init_hardware
                           _init_lcd
                   _mensagem_inicial
 ---------------------------------------------------------------------------------
 (1) _mensagem_inicial                                    36    36      0    7363
                                              6 BANK0     36    36      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     613
                                              3 BANK0      1     1      0
                              _delay
                    _escreve_cmd_lcd
 ---------------------------------------------------------------------------------
 (1) _init_hardware                                        0     0      0     176
                  _config_timer_dois
                  _config_timer_zero
                     _init_interrupt
                     _init_oscilador
                         _init_ports
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_oscilador                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_timer_zero                                    0     0      0     176
                   _write_timer_zero
 ---------------------------------------------------------------------------------
 (3) _write_timer_zero                                     2     0      2     176
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _config_timer_dois                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializa_tarefas                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _escalonador                                          3     3      0  537377
                                             38 BANK2      3     3      0
                    _dados_gps_to_sd
                   _disparo_gravacao *
                      _troca_de_tela *
        _verifica_dados_operacionais *
 ---------------------------------------------------------------------------------
 (2) _verifica_dados_operacionais                          8     8      0   28020
                                             78 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
                               _atoi
                     _verifica_fence
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    2885
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     731
                                             32 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                               _atoi (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3761
                                             17 BANK0     15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                               _atoi (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3176
                                             13 BANK0      4     1      3
                           ___ftpack
                               _atoi (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2773
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _troca_de_tela                                        1     1      0   20961
                                             47 BANK0      1     1      0
                    _escreve_cmd_lcd
              _escreve_frase_ram_lcd
                _escreve_inteiro_lcd
                                _fix
               _mostra_dados_display
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _mostra_dados_display                                 0     0      0    6806
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_inteiro_lcd                                 11     7      4    6872
                                             36 BANK0     11     7      4
              _escreve_frase_ram_lcd
                               _ltoa
 ---------------------------------------------------------------------------------
 (4) _ltoa                                                10     2      8    3063
                                             26 BANK0     10     2      8
                              _ultoa
 ---------------------------------------------------------------------------------
 (5) _ultoa                                               13     5      8    2560
                                             13 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (2) _escreve_cmd_lcd                                      1     1      0     477
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _disparo_gravacao                                     3     3      0  485822
                                             35 BANK2      3     3      0
                                _fix
                           _grava_sd
                     _verifica_fence
 ---------------------------------------------------------------------------------
 (3) _verifica_fence                                       2     2      0   17334
                                             76 BANK0      2     2      0
                _latitude_to_convert
               _longitude_to_convert
                           _monta_sd
        _verifica_plausibilidade_lat
       _verifica_plausibilidade_long
                 _verifica_recep_gps
 ---------------------------------------------------------------------------------
 (4) _verifica_recep_gps                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _verifica_plausibilidade_long                         1     1      0      34
                                              0 BANK0      1     1      0
                       _posicao_long
 ---------------------------------------------------------------------------------
 (4) _verifica_plausibilidade_lat                          1     1      0      34
                                              0 BANK0      1     1      0
                        _posicao_lat
 ---------------------------------------------------------------------------------
 (4) _longitude_to_convert                                15    15      0    7439
                                             61 BANK0     15    15      0
                      _armazena_ltlo
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _latitude_to_convert                                 13    13      0    7439
                                             61 BANK0     13    13      0
                      _armazena_ltlo
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _armazena_ltlo                                        5     2      3    6419
                                             56 BANK0      5     2      3
                          _diferenca
 ---------------------------------------------------------------------------------
 (6) _diferenca                                           13    13      0    5657
                                             43 BANK0     13    13      0
                     _convert_to_int
           _convert_to_int_point_lat
          _convert_to_int_point_long
 ---------------------------------------------------------------------------------
 (7) _convert_to_int_point_long                           19    15      4    1782
                                             26 BANK0     16    12      4
                               _atol
 ---------------------------------------------------------------------------------
 (7) _convert_to_int_point_lat                            17    13      4    1785
                                             26 BANK0     17    13      4
                               _atol
 ---------------------------------------------------------------------------------
 (7) _convert_to_int                                       4     0      4    1929
                                             26 BANK0      4     0      4
                               _atol
 ---------------------------------------------------------------------------------
 (8) _atol                                                14    10      4    1535
                                             12 BANK0     14    10      4
                             ___lmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (9) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _grava_sd                                             0     0      0  468454
                        _desliga_SPI
                       _desliga_uart
                     _escrita_sdcard
                     _inicializa_SPI
                    _inicializa_uart
 ---------------------------------------------------------------------------------
 (1) _inicializa_uart                                      0     0      0    1118
            _configura_baudrate_uart
 ---------------------------------------------------------------------------------
 (2) _configura_baudrate_uart                             14    10      4    1118
                                             14 BANK0     14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     805
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _inicializa_SPI                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _escrita_sdcard                                       9     9      0  467336
                                             35 BANK1      2     2      0
                    _dados_gps_to_sd
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _fprintf
                        _posicao_lat
                       _posicao_long
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4     649
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _strcat                                               6     2      4     323
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _posicao_long                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _posicao_lat                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fprintf                                             49    37     12  135392
                                              4 BANK1     14     2     12
                                              0 BANK2     35    35      0
                            ___lldiv
                            ___llmod
                             ___wmul
                              _fputc
                              _fputs
                        _posicao_lat (ARG)
                       _posicao_long (ARG)
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4   64271
                                            140 BANK0      3     3      0
                                              0 BANK1      4     0      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                7     3      4   63778
                                            133 BANK0      7     3      4
                            _f_write
 ---------------------------------------------------------------------------------
 (8) _f_write                                             33    25      8   62966
                                            100 BANK0     33    25      8
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memcpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     592
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (5) _f_open                                              44    39      5  224916
                                            119 BANK0      9     4      5
                                              0 BANK1     35    35      0
                         _auto_mount
                        _get_fattime
                             _memcpy
                             _memset
                        _move_window
                       _remove_chain
                   _reserve_direntry
                         _trace_path
 ---------------------------------------------------------------------------------
 (6) _trace_path                                          23    15      8   40758
                                             96 BANK0     23    15      8
                         _clust2sect
                       _make_dirfile
                             _memcmp
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (7) _make_dirfile                                        13     9      4    2753
                                              8 BANK0     13     9      4
                             _memset
 ---------------------------------------------------------------------------------
 (6) _reserve_direntry                                    18    14      4   80431
                                            100 BANK0     18    14      4
                         _clust2sect
                       _create_chain
                         _disk_write
                             _memset
                        _move_window
                     _next_dir_entry
 ---------------------------------------------------------------------------------
 (7) _next_dir_entry                                      13    11      2   19903
                                             83 BANK0     13    11      2
                         _clust2sect
                        _get_cluster
 ---------------------------------------------------------------------------------
 (9) _clust2sect                                          11     7      4    1667
                                             12 BANK0     11     7      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) _remove_chain                                         8     6      2   35473
                                             86 BANK0      8     6      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (9) _memcpy                                              11     5      6    1018
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (6) _auto_mount                                          40    37      3   34103
                                             51 BANK0     40    37      3
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                             _memset
 ---------------------------------------------------------------------------------
 (8) _memset                                               8     2      6    1217
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (7) _disk_initialize                                      4     4      0   21836
                                             32 BANK0      2     2      0
                _sdc_disk_initialize
 ---------------------------------------------------------------------------------
 (8) _sdc_disk_initialize                                 13    13      0   21706
                                             19 BANK0     13    13      0
                            _command
                       _dummy_clocks
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
                          _sdc_reset
 ---------------------------------------------------------------------------------
 (9) _sdc_reset                                           20    20      0   10419
                                             12 BANK0      7     7      0
                            _command
              _escreve_frase_ram_lcd
                 _posicao_cursor_lcd
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (2) _posicao_cursor_lcd                                   3     2      1    3657
                                              3 BANK0      3     2      1
                _endereco_cursor_lcd
 ---------------------------------------------------------------------------------
 (3) _endereco_cursor_lcd                                  1     1      0     353
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _escreve_frase_ram_lcd                                2     0      2    3149
                                              3 BANK0      2     0      2
              _escreve_caractere_lcd
                                _fix (ARG)
 ---------------------------------------------------------------------------------
 (3) _escreve_caractere_lcd                                1     1      0     384
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _check_fs                                             8     4      4    6655
                                             43 BANK0      8     4      4
                          _disk_read
                             _memcmp
 ---------------------------------------------------------------------------------
 (7) _memcmp                                               9     3      6     701
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (9) ___lmul                                              12     4      8     696
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) _f_mount                                              3     1      2     394
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _f_lseek                                             29    23      6   58470
                                            100 BANK0     29    23      6
                            ___lldiv
                       _create_chain
                        _get_cluster
                           _validate
 ---------------------------------------------------------------------------------
 (9) _create_chain                                        14    12      2   36536
                                             86 BANK0     14    12      2
                        _get_cluster
                        _put_cluster
 ---------------------------------------------------------------------------------
 (10) _put_cluster                                        22    18      4   17693
                                             64 BANK0     22    18      4
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (10) _get_cluster                                        19    17      2   17402
                                             64 BANK0     19    17      2
                             ___wmul
                        _move_window
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8    1261
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _f_close                                              3     1      2   44841
                                             75 BANK0      3     1      2
                             _f_sync
 ---------------------------------------------------------------------------------
 (6) _f_sync                                               9     7      2   44378
                                             66 BANK0      9     7      2
                        _get_fattime
                        _move_window
                               _sync
                           _validate
 ---------------------------------------------------------------------------------
 (9) _validate                                             6     2      4    1250
                                              7 BANK0      6     2      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (10) _disk_status                                         5     5      0     226
                                              2 BANK0      5     5      0
                    _sdc_disk_status
 ---------------------------------------------------------------------------------
 (11) _sdc_disk_status                                     4     4      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _sync                                                 2     2      0   14169
                                             64 BANK0      2     2      0
                         _disk_ioctl
                        _move_window
 ---------------------------------------------------------------------------------
 (9) _move_window                                         21    17      4   13831
                                             43 BANK0     21    17      4
                          _disk_read
                         _disk_write
 ---------------------------------------------------------------------------------
 (10) _disk_write                                         12     5      7    6078
                                             31 BANK0     12     5      7
                     _sdc_disk_write
 ---------------------------------------------------------------------------------
 (11) _sdc_disk_write                                     19    12      7    4614
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                        _escreve_SPI
                        _leitura_SPI
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (10) _disk_read                                          12     5      7    5647
                                             31 BANK0     12     5      7
                      _sdc_disk_read
 ---------------------------------------------------------------------------------
 (11) _sdc_disk_read                                      24    17      7    4450
                                             12 BANK0     19    12      7
                            _command
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (12) _response                                            1     1      0      34
                                              0 BANK0      1     1      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (12) _proceed                                             0     0      0      34
                        _escreve_SPI
 ---------------------------------------------------------------------------------
 (12) _command                                             7     2      5    3403
                                              5 BANK0      7     2      5
                       _dummy_clocks
                        _escreve_SPI
                         _wait_ready
 ---------------------------------------------------------------------------------
 (13) _wait_ready                                         15    15      0      99
                                              0 BANK0      5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (13) _escreve_SPI                                         2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (12) _dummy_clocks                                        5     5      0      68
                                              0 BANK0      5     5      0
                        _leitura_SPI
 ---------------------------------------------------------------------------------
 (13) _leitura_SPI                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _disk_ioctl                                           7     4      3     304
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (6) _get_fattime                                         52    48      4   14561
                                             10 BANK0     52    48      4
                             _GPSDay
                            _GPSHour
                          _GPSMinute
                           _GPSMonth
                          _GPSSecond
                            _GPSyear
 ---------------------------------------------------------------------------------
 (7) _GPSyear                                              4     2      2    2362
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) _GPSSecond                                            4     2      2    2362
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) _GPSMonth                                             4     2      2    2362
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) _GPSMinute                                            4     2      2    2362
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) _GPSHour                                              4     2      2    2362
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) _GPSDay                                               4     2      2    2362
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2362
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _dados_gps_to_sd                                      0     0      0    2351
                           _monta_sd
 ---------------------------------------------------------------------------------
 (4) _monta_sd                                             5     3      2    2351
                                              6 BANK0      5     3      2
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     220
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _desliga_uart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _desliga_SPI                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fix                                                  2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (17) _isr                                                21    21      0    2883
                                             12 COMRAM    21    21      0
                            _GPSRead
                   _recebe_dado_uart
                 i2_write_timer_zero
 ---------------------------------------------------------------------------------
 (18) i2_write_timer_zero                                  2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (18) _recebe_dado_uart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (18) _GPSRead                                             2     2      0    2745
                                             10 COMRAM     2     2      0
                             _strcmp
                          _stringcpy
 ---------------------------------------------------------------------------------
 (19) _stringcpy                                          10     3      7    2283
                                              0 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (19) _strcmp                                              6     2      4     395
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 19
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _escalonador
     _dados_gps_to_sd
       _monta_sd
         _strlen
     _disparo_gravacao *
       _fix
       _grava_sd
         _desliga_SPI
         _desliga_uart
         _escrita_sdcard
           _dados_gps_to_sd
             _monta_sd
               _strlen
           _f_close
             _f_sync
               _get_fattime
                 _GPSDay
                   ___wmul
                 _GPSHour
                   ___wmul
                 _GPSMinute
                   ___wmul
                 _GPSMonth
                   ___wmul
                 _GPSSecond
                   ___wmul
                 _GPSyear
                   ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _sync
                 _disk_ioctl
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _validate
                 _disk_status
                   _sdc_disk_status
           _f_lseek
             ___lldiv
             _create_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _get_cluster
               ___wmul
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
             _validate
               _disk_status
                 _sdc_disk_status
           _f_mount
           _f_open
             _auto_mount
               ___lldiv
               ___lmul
               _check_fs
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _memcmp
               _disk_initialize
                 _sdc_disk_initialize
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_frase_ram_lcd
                     _escreve_caractere_lcd
                       _delay
                     _fix (ARG)
                   _posicao_cursor_lcd
                     _endereco_cursor_lcd
                       _delay
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
                   _sdc_reset
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _escreve_frase_ram_lcd
                       _escreve_caractere_lcd
                         _delay
                       _fix (ARG)
                     _posicao_cursor_lcd
                       _endereco_cursor_lcd
                         _delay
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _disk_status
                 _sdc_disk_status
               _memset
             _get_fattime
               _GPSDay
                 ___wmul
               _GPSHour
                 ___wmul
               _GPSMinute
                 ___wmul
               _GPSMonth
                 ___wmul
               _GPSSecond
                 ___wmul
               _GPSyear
                 ___wmul
             _memcpy
             _memset
             _move_window
               _disk_read
                 _sdc_disk_read
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
             _remove_chain
               _get_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
               _put_cluster
                 ___wmul
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
             _reserve_direntry
               _clust2sect
                 ___lmul
               _create_chain
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                 _put_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
               _disk_write
                 _sdc_disk_write
                   _command
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _wait_ready
                       _leitura_SPI
                   _dummy_clocks
                     _leitura_SPI
                   _escreve_SPI
                   _leitura_SPI
                   _proceed
                     _escreve_SPI
                   _response
                     _leitura_SPI
               _memset
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _next_dir_entry
                 _clust2sect
                   ___lmul
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
             _trace_path
               _clust2sect
                 ___lmul
               _make_dirfile
                 _memset
               _memcmp
               _move_window
                 _disk_read
                   _sdc_disk_read
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
               _next_dir_entry
                 _clust2sect
                   ___lmul
                 _get_cluster
                   ___wmul
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
           _fprintf
             ___lldiv
             ___llmod
             ___wmul
             _fputc
               _f_write
                 _clust2sect
                   ___lmul
                 _create_chain
                   _get_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                   _put_cluster
                     ___wmul
                     _move_window
                       _disk_read
                         _sdc_disk_read
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                       _disk_write
                         _sdc_disk_write
                           _command
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _wait_ready
                               _leitura_SPI
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _leitura_SPI
                           _proceed
                             _escreve_SPI
                           _response
                             _leitura_SPI
                 _disk_write
                   _sdc_disk_write
                     _command
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _wait_ready
                         _leitura_SPI
                     _dummy_clocks
                       _leitura_SPI
                     _escreve_SPI
                     _leitura_SPI
                     _proceed
                       _escreve_SPI
                     _response
                       _leitura_SPI
                 _memcpy
                 _move_window
                   _disk_read
                     _sdc_disk_read
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                 _validate
                   _disk_status
                     _sdc_disk_status
             _fputs
               _fputc
                 _f_write
                   _clust2sect
                     ___lmul
                   _create_chain
                     _get_cluster
                       ___wmul
                       _move_window
                         _disk_read
                           _sdc_disk_read
                             _command
                               _dummy_clocks
                                 _leitura_SPI
                               _escreve_SPI
                               _wait_ready
                                 _leitura_SPI
                             _dummy_clocks
                               _leitura_SPI
                             _proceed
                               _escreve_SPI
                             _response
                               _leitura_SPI
                         _disk_write
                           _sdc_disk_write
                             _command
                               _dummy_clocks
                                 _leitura_SPI
                               _escreve_SPI
                               _wait_ready
                                 _leitura_SPI
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _leitura_SPI
                             _proceed
                               _escreve_SPI
                             _response
                               _leitura_SPI
                     _put_cluster
                       ___wmul
                       _move_window
                         _disk_read
                           _sdc_disk_read
                             _command
                               _dummy_clocks
                                 _leitura_SPI
                               _escreve_SPI
                               _wait_ready
                                 _leitura_SPI
                             _dummy_clocks
                               _leitura_SPI
                             _proceed
                               _escreve_SPI
                             _response
                               _leitura_SPI
                         _disk_write
                           _sdc_disk_write
                             _command
                               _dummy_clocks
                                 _leitura_SPI
                               _escreve_SPI
                               _wait_ready
                                 _leitura_SPI
                             _dummy_clocks
                               _leitura_SPI
                             _escreve_SPI
                             _leitura_SPI
                             _proceed
                               _escreve_SPI
                             _response
                               _leitura_SPI
                   _disk_write
                     _sdc_disk_write
                       _command
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _wait_ready
                           _leitura_SPI
                       _dummy_clocks
                         _leitura_SPI
                       _escreve_SPI
                       _leitura_SPI
                       _proceed
                         _escreve_SPI
                       _response
                         _leitura_SPI
                   _memcpy
                   _move_window
                     _disk_read
                       _sdc_disk_read
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                     _disk_write
                       _sdc_disk_write
                         _command
                           _dummy_clocks
                             _leitura_SPI
                           _escreve_SPI
                           _wait_ready
                             _leitura_SPI
                         _dummy_clocks
                           _leitura_SPI
                         _escreve_SPI
                         _leitura_SPI
                         _proceed
                           _escreve_SPI
                         _response
                           _leitura_SPI
                   _validate
                     _disk_status
                       _sdc_disk_status
             _posicao_lat (ARG)
             _posicao_long (ARG)
           _posicao_lat
           _posicao_long
           _strcat
           _strcpy
         _inicializa_SPI
         _inicializa_uart
           _configura_baudrate_uart
             ___aldiv
       _verifica_fence
         _latitude_to_convert
           _armazena_ltlo
             _diferenca
               _convert_to_int
                 _atol
                   ___lmul
                   _isdigit
               _convert_to_int_point_lat
                 _atol
                   ___lmul
                   _isdigit
               _convert_to_int_point_long
                 _atol
                   ___lmul
                   _isdigit
           _strcpy
         _longitude_to_convert
           _armazena_ltlo
             _diferenca
               _convert_to_int
                 _atol
                   ___lmul
                   _isdigit
               _convert_to_int_point_lat
                 _atol
                   ___lmul
                   _isdigit
               _convert_to_int_point_long
                 _atol
                   ___lmul
                   _isdigit
           _strcpy
         _monta_sd
           _strlen
         _verifica_plausibilidade_lat
           _posicao_lat
         _verifica_plausibilidade_long
           _posicao_long
         _verifica_recep_gps
     _troca_de_tela *
       _escreve_cmd_lcd
         _delay
       _escreve_frase_ram_lcd
         _escreve_caractere_lcd
           _delay
         _fix (ARG)
       _escreve_inteiro_lcd
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
           _fix (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _fix
       _mostra_dados_display
         _escreve_frase_ram_lcd
           _escreve_caractere_lcd
             _delay
           _fix (ARG)
         _posicao_cursor_lcd
           _endereco_cursor_lcd
             _delay
       _posicao_cursor_lcd
         _endereco_cursor_lcd
           _delay
     _verifica_dados_operacionais *
       ___awtoft
         ___ftpack
         _atoi (ARG)
           ___wmul
           _isdigit
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
           _atoi (ARG)
             ___wmul
             _isdigit
         ___ftpack (ARG)
         _atoi (ARG)
           ___wmul
           _isdigit
       ___fttol
         ___awtoft (ARG)
           ___ftpack
           _atoi (ARG)
             ___wmul
             _isdigit
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _atoi (ARG)
               ___wmul
               _isdigit
           ___ftpack (ARG)
           _atoi (ARG)
             ___wmul
             _isdigit
         _atoi (ARG)
           ___wmul
           _isdigit
       _atoi
         ___wmul
         _isdigit
       _verifica_fence
         _latitude_to_convert
           _armazena_ltlo
             _diferenca
               _convert_to_int
                 _atol
                   ___lmul
                   _isdigit
               _convert_to_int_point_lat
                 _atol
                   ___lmul
                   _isdigit
               _convert_to_int_point_long
                 _atol
                   ___lmul
                   _isdigit
           _strcpy
         _longitude_to_convert
           _armazena_ltlo
             _diferenca
               _convert_to_int
                 _atol
                   ___lmul
                   _isdigit
               _convert_to_int_point_lat
                 _atol
                   ___lmul
                   _isdigit
               _convert_to_int_point_long
                 _atol
                   ___lmul
                   _isdigit
           _strcpy
         _monta_sd
           _strlen
         _verifica_plausibilidade_lat
           _posicao_lat
         _verifica_plausibilidade_long
           _posicao_long
         _verifica_recep_gps
   _inicializa_tarefas
   _inicializa_uart
     _configura_baudrate_uart
       ___aldiv
   _init_hardware
     _config_timer_dois
     _config_timer_zero
       _write_timer_zero
     _init_interrupt
     _init_oscilador
     _init_ports
   _init_lcd
     _delay
     _escreve_cmd_lcd
       _delay
   _mensagem_inicial
     _escreve_cmd_lcd
       _delay
     _escreve_frase_ram_lcd
       _escreve_caractere_lcd
         _delay
       _fix (ARG)
     _posicao_cursor_lcd
       _endereco_cursor_lcd
         _delay

 _isr (ROOT)
   _GPSRead
     _strcmp
     _stringcpy
   _recebe_dado_uart
   i2_write_timer_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     220      21       26.6%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     29      67       9       40.2%
BITBANK1           100      0       0       6        0.0%
BANK1              100     25     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8F      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     21      42       1       70.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     249      20        0.0%
DATA                 0      0     469       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue May 17 16:26:04 2022

                          next_dir_entry@idx 00BE                     __end_of_mensagem_inicial 4B0E  
                        next_dir_entry@clust 00BC                                  _SSPSTATbits 000FC7  
                           ??_init_interrupt 0060                                           l51 4DF6  
                                         l35 5962                                           l43 5A2A  
                                         l52 4D86                                           l60 4F2A  
                                         l36 593A                                           l44 5A0E  
                                         l70 5D24                                           l54 4DB8  
                                         l62 4F5C                                           l38 594A  
                                         l46 5A1A                                           l71 5D28  
                                         l55 4DF2                                           l63 4F8E  
                                         l39 595E                                           l47 5A26  
                                         l80 49C0                                           l67 5D2C  
                                         l59 4F92                                           l75 4940  
                                         l68 5D20                                           l76 495E  
                                         l92 1C88                                           l93 1B2E  
                                         l85 1AD8                                           l94 1B38  
                                         l86 1AEE                                           l95 1B62  
                                         l88 1AFA                 __size_of_escreve_inteiro_lcd 0048  
                                         _fs 0267                          ___wmul@multiplicand 0062  
                                _put_cluster 25B0                             disk_write@sector 0081  
                               ?_escalonador 0001                               create_chain@fs 00BC  
                           disk_write@result 0088                             ?_inicializa_uart 0001  
                                        l100 1BEC                                          l111 1CB8  
                                        l112 1CE2                                          l200 4D38  
                                        l201 4D40                                          l122 1DB2  
                                        l202 4D42                                          l131 3CB2  
                                        l203 4D4A                                          l220 53C2  
                                        l108 1C78                                          l204 4D4C  
                                        l133 3CCE                                          l221 53CA  
                                        l213 5394                                          l117 1D46  
                                        l205 4D54                                          l134 3CC6  
                                        l222 53CC                                          l214 5396  
                                        l230 512C                                          l118 1D70  
                                        l206 4D56                                          l127 3C8C  
                                        l223 53D4                                          l215 539E  
                                        l231 510A                       __size_of_troca_de_tela 02A6  
                                        l136 3CFA                                          l128 3C78  
                                        l152 2DFE                                          l144 2DB4  
                                        l224 53D6                                          l216 53A0  
                                        l232 50C6                                          l137 3CE2  
                                        l145 2D00                                          l161 5EDA  
                                        l225 53DE                                          l217 53A8  
                                        l233 5126                                          l154 2E32  
                                        l250 526E                                          l242 5238  
                                        l226 53E0                                          l218 53AA  
                                        l234 50D2                                          l410 45E6  
                                        l139 3D34                                          l147 2D54  
                                        l251 5270                                          l243 523A  
                                        l219 53C0                                          l235 50E2  
                                        l156 2E7A                                          l252 5278  
                                        l244 5242                                          l236 50F2  
                                        l404 469A                                          l412 4658  
                                        l149 2D84                                          l181 5D7E  
                                        l253 527A                                          l245 5244  
                                        l237 5102                                          l254 5282  
                                        l246 524C                                          l406 470C  
                                        l183 5D8E                                          l255 5284  
                                        l247 524E                                          l191 4D00  
                                        l256 528C                                          l248 5256  
                                        l440 5DBE                                          l192 4D02  
                                        l257 528E                                          l249 5258  
                                        l193 4D0A                                          l194 4D0C  
                                        l275 56FE                                          l195 4D14  
                                        l276 56D4                                          l196 4D16  
                                        l197 4D1E                                          l606 59F4  
                                        l198 4D20                                          l607 59E6  
                                        l615 5BF8                                          l623 546C  
                                        l199 4D36                                          l624 5466  
                                        l640 3262                                          l801 27FA  
                                        l802 25D8                                          l642 3368  
                                        l723 5F88                                          l811 275A  
                                        l803 2638                                          l643 3390  
                                        l820 48FC                                          l900 35EA  
                                        l653 1A4A                                          l661 17A6  
                                        l821 488A                                          l670 189A  
                                        l662 17B6                                          l654 1716  
                                        l814 2816                                          l806 2672  
                                        l822 48AC                                          l910 3602  
                                        l655 1722                                          l815 2784  
                                        l831 2EEA                                          l911 360A  
                                        l680 19C0                                          l672 191A  
                                        l664 1810                                          l816 27B8  
                                        l808 26A6                                          l824 48CA  
                                        l920 3646                                          l912 3612  
                                        l673 1924                                          l665 181A  
                                        l729 5F02                                          l817 27F6  
                                        l809 2702                                          l841 2F6A  
                                        l825 48F4                                          l682 1A40  
                                        l674 1930                                          l666 182A  
                                        l658 175E                                          l930 1E9C  
                                        l659 176A                                          l843 2FB2  
                                        l835 2F34                                          l851 4558  
                                        l915 362C                                          l676 196C  
                                        l668 1884                                          l772 30D0  
                                        l844 2F9A                                          l836 2F16  
                                        l860 3504                                          l924 3662  
                                        l908 35FA                                          l677 1978  
                                        l669 188E                                          l781 5558  
                                        l861 34C6                                          l941 1F98  
                                        l933 1EC0                                          l790 2CB8  
                                        l846 2FD6                                          l838 2F2C  
                                        l926 3664                                          l918 3644  
                                        l942 1FC6                                          l679 19B4  
                                        l775 3156                                          l783 5576  
                                        l847 3006                                          l839 2F3C  
                                        l935 1EEC                                          l848 3044  
                                        l856 341C                                          l936 1F52  
                                        l777 3200                                          l793 2C10  
                                        l953 2388                                          l945 1FBA  
                                        l778 31E2                                          l970 256A  
                                        l962 24A6                                          l954 23B0  
                                        l938 1F46                                          l787 2C9E  
                                        l955 23C4                                          l883 354C  
                                        l788 2AEE                                          l980 05E4  
                                        l956 23F0                                          l884 35BC  
                                        l948 1FE0                                          l797 2C30  
                                        l981 05DE                                          l965 24CC  
                                        l949 1FF4                                          l974 4E4A  
                                        l990 06C6                                          l958 245C  
                                        l983 0636                                          l976 4E6A  
                                        l992 073A                                          l984 065C  
                                        l968 257A                                          l888 3686  
                                        l977 4E98                                          l993 075C  
                                        l969 253A                                          l987 068C  
                                        l996 07A4                                          l988 0688  
                                        l997 08E0                                          l989 06BA  
                                        l998 09D2                                          l999 09E8  
                                        _PCL 000FF9                                          _PR2 000FCB  
                        _latitude_to_convert 466E                                          _fil 0146  
                           ??_init_oscilador 0060                                          _fix 5F90  
                                        _isr 0008                __size_of_longitude_to_convert 00B4  
                               disk_read@res 008A                                          prod 000FF3  
                             ??_create_chain 00B8                                          tosl 000FFD  
                                        wreg 000FE8                              ?_verifica_fence 0001  
                  __size_of_write_timer_zero 000A                              create_chain@mcl 00BA  
                            create_chain@ncl 00C2                              create_chain@scl 00C0  
                    ??_escreve_frase_ram_lcd 0065                                         l1002 5846  
                                       l1011 57EC                                         l1012 580C  
                                       l1020 15C6                                         l1021 1466  
                                       l1006 5858                                         l1110 0B90  
                                       l1030 1536                                         l1022 13EE  
                                       l1023 1412                                         l1120 0DF8  
                                       l1112 0D4C                                         l1113 0DAE  
                                       l1009 57D4                                         l1025 1470  
                                       l1201 11A6                                         l1114 0D9A  
                                       l1026 1498                                         l1018 13A2  
                                       l1123 0E0C                                         l1035 15D2  
                                       l1211 12B2                                         l1116 0F78  
                                       l1036 15EE                                         l1212 130C  
                                       l2021 5060                                         l1029 1566  
                                       l1213 12E0                                         l1205 11EA  
                                       l2022 5054                                         l1118 0E7E  
                                       l1206 1202                                         l1127 0F12  
                                       l1119 0DB8                                         l1039 160A  
                                       l2031 540E                                         l1215 12EE  
                                       l1207 1236                                         l2112 4A52  
                                       l2120 58FE                                         l2032 5402  
                                       l2025 5094                                         l2113 49CC  
                                       l1073 054A                                         l2026 50A2  
                                       l2114 4A4A                                         l1090 03C2  
                                       l1074 00D4                                         l2035 5436  
                                       l1075 03D0                                         l1163 55E6  
                                       l1171 5508                                         l2036 5444  
                                       l1076 020A                                         l1172 54CA  
                                       l1500 20A2                                         l2125 5CDA  
                                       l1085 05B8                                         l1093 0492  
                                       l1077 0190                                         l1173 54FC  
                                       l1181 0FFC                                         l1501 212A  
                                       l2126 5CC8                                         l1094 05A6  
                                       l1086 0352                                         l1166 561E  
                                       l1190 10AC                                         l1262 3E66  
                                       l2070 56AC                                         l1502 2256  
                                       l2119 5920                                         l1087 02FA  
                                       l1079 01B0                                         l1183 1356  
                                       l1191 10E6                                         l1511 2310  
                                       l1503 2198                                         l1192 1132  
                                       l1600 4BA0                                         l1504 2220  
                                       l1089 0510                                         l1185 1080  
                                       l1505 22C8                                         l1098 3FA6  
                                       l1194 1142                                         l1186 102A  
                                       l1178 0FAE                                         l2074 3FBA  
                                       l1099 3EEE                                         l1195 114E  
                                       l2251 58B4                                         l1611 5202  
                                       l1196 115A                                         l2252 58AE  
                                       l2076 4016                                         l1508 227A  
                                       l2077 4084                                         l1509 22C4  
                                       l1445 47E0                                         l1453 5D5E  
                                       l1630 558C                                         l1198 1180  
                                       l2254 58CE                                         l1550 4BF6  
                                       l1470 519A                                         l1631 55A0  
                                       l2255 58C4                                         l1615 5320  
                                       l1551 4C06                                         l1447 4876  
                                       l1560 3738                                         l1544 4C3A  
                                       l1609 51C6                                         l1617 535C  
                                       l1553 4C32                                         l1545 4BB0  
                                       l1481 44C2                                         l2274 5638  
                                       l1546 4BC2                                         l2275 5632  
                                       l1803 385C                                         l1467 513E  
                                       l2268 5CA0                                         l1548 4BEE  
                                       l1564 4F1A                                         l1468 513A  
                                       l2269 5C96                                         l1557 37E0  
                                       l1549 4C46                                         l1565 4EA6  
                                       l1806 38F6                                         l1558 3690  
                                       l1574 4EE0                                         l1566 4EC0  
                                       l1807 3886                                         l1583 4BA4  
                                       l1575 4EFA                                         l1584 4B18  
                                       l1488 5C4C                                         l1496 225A  
                                       l1681 43D2                                         l1809 393C  
                                       l1593 4B52                                         l1585 4B32  
                                       l1577 4F16                                         l1569 4EDC  
                                       l1682 43C6                                         l1594 4B6C  
                                       l1499 214E                                         l1596 4B84  
                                       l1588 4B4E                                         l1685 4406  
                                       l1686 4414                                         l1678 438C  
                                       l1870 476A                                         l1687 442A  
                                       l1679 43A4                                         l1847 5BC2  
                                       l1951 424C                                         l1872 47A8  
                                       l1952 425C                                         l1792 4330  
                                       l1873 479E                                         l1945 41CA  
                                       l1793 42F2                                         l1866 474C  
                                       l1786 429E                                         ?_fix 0060  
                                       l1867 4742                                         l1947 41F2  
                                       l1795 4364                                         l1787 4298  
                                       l1948 4224                                         l1981 5E4C  
                                       l1869 4780                                         l1949 4234  
                                       l1789 42E0                                         l1974 4172  
                                       l1966 40D6                                         l1975 4166  
                                       l1968 414E                                         l1977 418E  
                                       l1969 413E                                         ?_isr 0001  
                      _escreve_caractere_lcd 5224                                         STR_1 61DC  
                                       STR_2 6164                                         STR_3 620F  
                                       STR_4 61D1                                         STR_5 6254  
                                       STR_6 624E                                         STR_7 61BA  
                                       STR_8 61AD                                         STR_9 6183  
                             timer_dois@flag 003E                                         _BRGH 007D62  
                            __end_of_GPSRead 2AA2                                         _CREN 007D5C  
                                       _T0IF 007F92                                 ?_escreve_SPI 0001  
                            __end_of_GPSHour 5B70                                         _LATB 000F8A  
                                       _PIE1 000F9D                                         _RCIF 007CF5  
                                       _TMR0 000FD6                                         _TMR2 000FCC  
                                       _SPEN 007D5F                                         _TRMT 007D61  
                                       _TXEN 007D65                                         _SYNC 007D64  
                               trace_path@dj 00C0                                 trace_path@fn 00C2  
                               trace_path@ds 00D4                                 trace_path@fs 00D0  
                              ?_make_dirfile 0068                              __end_of_GPSyear 5A80  
                                       _Term 003F                                         _dado 0100  
                                       _atoi 4296                                         _atol 37EC  
                                       _main 5D46                                         _fsid 0144  
                               ___ftpack@arg 0060                                 ___ftpack@exp 0063  
                                       _ltoa 567E                                         fsr0h 000FEA  
                    __end_of_fence_diff_long 6127                                         fsr1h 000FE2  
                                       indf0 000FEF                                         fsr2h 000FDA  
                                       fsr0l 000FE9                                         indf1 000FE7  
                                       indf2 000FDF                                         fsr1l 000FE1  
                                       fsr2l 000FD9                                         btemp 0043  
                                       _sync 5520                                disk_ioctl@cmd 0060  
                              disk_read@buff 007F                                disk_ioctl@res 0064  
                              disk_read@pdrv 0087                         ?_latitude_to_convert 0001  
                                       prodh 000FF4                                         prodl 000FF3  
                                       start 000E                                 ___ftmul@cntr 007E  
                  sdc_disk_initialize@buff_i 007B                                 ___param_bank 000000  
                               ___ftmul@sign 007F                    sdc_disk_initialize@count1 0077  
                  sdc_disk_initialize@count2 007D                                  _string_dado 0200  
                        diferenca@valor_long 0094                                 ___fttol@exp1 008E  
                                      ??_fix 0062                                 ___fttol@lval 008A  
                                      ??_isr 000D                      __size_of_escrita_sdcard 0190  
                         __size_of_GPSMinute 003C                           __size_of_GPSSecond 003C  
           __size_of_configura_baudrate_uart 0132                   ??_convert_to_int_point_lat 007E  
                                      l11032 4980                                        l11140 5842  
                                      l11070 2F3C                                        l11066 2F16  
                                      l11226 1B84                                        l11156 58FE  
                                      l11256 1C1C                                        l10562 2D78  
                                      l10802 314E                                        l13114 4EFA  
                                      l12264 0758                                        l13144 4B32  
                                      l10594 2E26                                        l11386 49CC  
                                      l11378 5CC8                                        l12346 54FC  
                                      l13090 4EC0                                        l10692 5D86  
                                      l10686 5D76                                        l12438 4BBA  
                                      l11832 5318                                        l12456 4BFE  
                                      l13168 4B6C                                        l13336 432C  
                                      l11906 17AE                                        l13178 4B84  
                                      l11940 1892                                        l11924 1822  
                                      l12820 11C0                                        l12760 106C  
                                      l12728 0FAE                                        l11890 1762  
                                      l12930 4692                                        l11972 1970  
                                      l11876 171A                                        l11958 1928  
                                      l11986 19B8                                        l12958 45DE  
                                      l13786 47D8                              __end_of___aldiv 443C  
                                      ?_atoi 0066                                        ?_atol 006C  
                                      ?_main 0001                                        STR_10 614F  
                                      ?_ltoa 007A                                        STR_11 6192  
                                      STR_12 6205                                        STR_20 61F1  
                                      STR_21 6248                                        STR_13 61FB  
                                      STR_30 627D                                        STR_14 6222  
                                      STR_22 61A0                                        STR_23 6276  
                                      STR_15 6241                                        STR_31 6233  
                                      STR_32 623A                                        STR_24 627A  
                                      STR_16 6269                                        STR_33 625F  
                                      STR_17 6264                                        STR_25 61C6  
                                      STR_34 627D                                        STR_26 625F  
                                      STR_18 6174                                        STR_35 625A  
                                      STR_27 623A                                        STR_19 61E7  
                                      STR_28 623A                                        STR_36 6272  
                                      STR_29 625F                                        STR_37 626E  
                                      STR_38 6219                                        STR_39 622B  
                               ?_leitura_SPI 0001                              __end_of___lldiv 50B4  
                                      ?_sync 0001                              __end_of___ftmul 4296  
                                      _T0CON 000FD5                                        u13110 2E4C  
                                      u13120 2E88                                        u14000 1C1C  
                            __end_of___llmod 5456                                        u14020 1C28  
                                      u13045 2D26                              __end_of___fttol 41A0  
                                      u13070 2D9E                                        u13150 5D96  
                                      u14110 1D88                                        u14120 1DC0  
                                      _T2CON 000FCA                                        u13330 308E  
                                      u14140 49FA                                        u13420 56F4  
                                      u13085 2DD0                                        u13430 571E  
                                      u14070 1D0C                                        u15200 180E  
                                      u15120 1752                                        u14160 4A22  
                                      u14400 380C                                        u15040 5206  
                                      u13450 2AB8                                        u14147 49F0  
                                      u13427 56EA                                        u14500 5658  
                                      u15300 18E0                                        u13380 31A6  
                                      u13700 2EE0                                        u13525 2C1C  
                                      u13605 2766                                        u13437 5714  
                                      u15230 184A                                        u15150 179A  
                                      u15070 5360                                        u15207 1804  
                                      u15127 1748                                        u14167 4A18  
                                      u14335 033E                                        u14407 3802  
                                      u15320 1918                                        u12920 5C1C  
                                      u14600 34C2                                        u16120 5412  
                                      u14440 385A                                        u13545 2608  
                                      u15410 19E0                                        u15250 1882  
                                      u15090 5064                                        u13810 3032  
                                      u13650 4980                                        u14610 3584  
                                      u14507 564E                                        u15307 18D6  
                                      u13475 2B1E                                        u15180 17D6  
                                      u12940 5476                                        u15500 490A  
                                      u14380 0552                                        u14460 3884  
                                      u15237 1840                                        u15157 1790  
                                      u15430 1A06                                        u15350 1960  
                                      u15510 4922                                        u14630 3596  
                                      u16310 1494                                        u14470 38EE  
                                      u15327 190E                                        u13495 2B92  
                                      u13575 26D2                                        u14295 0258  
                                      u14447 3858                                        u15280 18BA  
                                      u13920 1B0A                                        u15520 1E82  
                                      u16080 43D6                                        u17120 465C  
                                      u18000 21CA                                        u15417 19D6  
                                      u15257 1878                                        u14617 357A  
                                      u15450 1A3E                                        u13850 5842  
                                      u13690 2ED4                                        u13930 1B1A  
                                      u18010 220E                                        u15187 17CC  
                                      u12955 3C26                                        u14467 387A  
                                      u15380 19A8                                        u15700 2448  
                                      u16340 1532                                        u17060 4710  
                                      u15437 19FC                                        u15357 1956  
                                      u13941 1B24                                        u14477 38E4  
                                      u14590 349E                                        u17310 4F12  
                                      u18030 2266                                        u15287 18B0  
                                      u14575 3428                                        u15527 1E78  
                                      u16600 0ED8                                        u13960 1B84  
                                      u15800 062A                                        u17320 4B2A  
                                      u18008 21CE                                        u15457 1A34  
                                      u15490 48E2                                        u15730 24A2  
                                      u17410 4B9C                                        u17250 4EBC  
                                      u18018 2212                                        u15387 199E  
                                      u14940 4E66                                        u16380 15EA  
                                      u18300 4A7C                                        u16605 0ECE  
                                      u15565 1F0C                                        u15750 24C8  
                                      u17350 4B4A                                        u17270 4ED8  
                                      u17430 4734                                        u18310 4A94  
                                      u15807 0620                                        u17280 4EF2  
                                      u17600 4D7A                                        u16570 0E1A  
                                      u15930 0758                                        u16730 1128  
                                      u17370 4B68                                        u17611 5866  
                                      u15780 0604                                        u16660 0FFA  
                                      u14965 3B14                                        u15685 2410  
                                      u16901 1366                                        u16590 0E92  
                                      u17390 4B80                                        u17470 47B2  
                                      u14975 3B30                                        u16495 0C04  
                                      u16840 1292                                        u14985 3B60  
                                      u17721 41B2                                        u15970 09CE  
                                      u16690 108E                                        u17650 5188  
                                      u17810 40F4                                        u18290 487A  
                                      u14995 3B80                                        u15787 05FA  
                                      u16915 3D60                                        u15980 09E4  
                                      u15965 08F8                                        u16925 3DAC  
                                      u17741 41DA                                        u17815 40EC  
                                      u18607 4C72                                        u18288 4834  
                                      u16945 3DF0                                        u18289 4848  
                                      u18617 4C8E                                        u16890 132E  
                                      u17850 4178                                        u17930 207A  
                                      u15995 0A6C                                        u16955 3E3A  
                                      u18627 4CAA                                        u18637 1AA4  
                                      u18647 1C38                                        u17791 40BA  
                                      u17960 20D4                                        u18657 1CEA  
                                      u17890 44EA                                        u17970 2118  
                                      u18667 59D0                                        u18597 4ADE  
                                      u17895 44E0                                        u17968 20D8  
                                      u17978 211C                             __end_of_GPSMonth 5AF8  
                                      i2l352 577A                                        i2l360 2854  
                                      i2l370 2900                                        i2l371 2930  
                                      i2l380 2A06                                        i2l372 2962  
                                      i2l364 2878                                        i2l357 2A8C  
                                      i2l381 2A38                                        i2l365 2882  
                                      i2l382 2A6C                                        i2l374 297E  
                                      i2l358 2832                                        i2l383 2A74  
                                      i2l375 2982                                        i2l367 28DC  
                                      i2l359 2842                                        i2l376 29B4  
                                      i2l369 28FC                                        i2l378 29D0  
                                      i2l379 29D4                                        _RCREG 000FAE  
                                      _RCSTA 000FAB                                        _TMR0H 000FD7  
                                      _TMR0L 000FD6                                        _SPBRG 000FAF  
                                      _TRISA 000F92                                        _TRISB 000F93  
                                      _TRISC 000F94                                        _TRISD 000F95  
                                      _TRISE 000F96                              __end_of_f_close 5D1A  
                                      _TXREG 000FAD                                trace_path@dir 00C6  
                                      _TXSTA 000FAC                                        _FatFs 00F6  
                            __end_of_f_lseek 0F8A                          ___lmul@multiplicand 0064  
                 __size_of_config_timer_dois 000E                              __end_of_f_mount 5810  
                            ??_armazena_ltlo 009B                              __end_of_f_write 05CC  
                 __size_of_config_timer_zero 001C                                        _Speed 000000  
                              get_cluster@bc 00AF                                get_cluster@fs 00B1  
                              get_cluster@wc 00A9                              __end_of_command 54BE  
                              ___awtoft@sign 0070                                        _delay 5D70  
                            clust2sect@clust 006C                              __end_of_fprintf 1368  
                                      _fputc 55D2                                        _fputs 54BE  
                            __end_of_isdigit 5E54                     __size_of_escreve_cmd_lcd 0094  
                              ___ftpack@sign 0064                                        atoi@a 006B  
                                      atol@a 0075                                        atol@c 0079  
                                      atoi@s 0066                                        atol@s 006C  
                                      _ultoa 3FAA                               ??_make_dirfile 006C  
                             disk_ioctl@buff 0061                                        pclath 000FFA  
                             disk_read@count 0085                                        tablat 000FF5  
                             disk_ioctl@pdrv 0063                             ?_dados_gps_to_sd 0001  
                            __end_of_proceed 5F84                                        plusw1 000FE3  
                                      plusw2 000FDB                        longitude_to_convert@i 00AB  
                      longitude_to_convert@j 00AA                                        status 000FD8  
                              _troca_de_tela 2070                                        wtemp6 0044  
                      ??_latitude_to_convert 009D                                disk_write@res 008A  
                            __initialization 4FAC                          disk_initialize@pdrv 0080  
                        disk_initialize@stat 0081                                 __end_of_atoi 436E  
                               __end_of_atol 394E                                 __end_of_main 5D70  
                               clust2sect@fs 0075                                 __end_of_ltoa 56D2  
                               __end_of_sync 557A                           _inicializa_tarefas 5726  
                            escalonador@cont 0266      convert_to_int_point_lat@convert_str_lat 007E  
                        reserve_direntry@dir 00C6                            create_chain@clust 00B6  
                                auto_mount@p 00B1                            create_chain@cstat 00BE  
                              sdc_reset@buff 0072                                       ??_atoi 0068  
                                     ??_atol 0070                                       ??_main 00EF  
                              ___fttol@sign1 0089                                       ??_ltoa 0082  
                                     ??_sync 00A0                                __activetblptr 000002  
                        ?_inicializa_tarefas 0001                         __end_of_desliga_uart 5F2C  
                                  ??_GPSRead 000B                                    ??_GPSHour 0068  
                ??_convert_to_int_point_long 007E                               _next_dir_entry 3394  
                       __size_of_desliga_SPI 0010                            get_fattime@f_time 0094  
                                  ??_GPSyear 0068                             ??_sdc_disk_write 0073  
                                     ?_delay 0001                       ?_escreve_caractere_lcd 0001  
                                     _ADCON1 000FC1                                       ?_fputc 00E5  
                           ___llmod@dividend 0060                                       ?_fputs 01CD  
                             _convert_to_int 5DEA                           auto_mount@bootsect 00A9  
                           __end_of___awtoft 5BE6                             __end_of___ftpack 47D2  
                                     ?_ultoa 006D                                       _INT0IE 007F94  
                                     _INT0IF 007F91                                ?_dummy_clocks 0001  
                          __end_of_GPSMinute 5B34                               armazena_ltlo@i 009C  
                                     i2l1430 3A58                               armazena_ltlo@j 009B  
                                     i2l1431 39E0                            __end_of_GPSSecond 5ABC  
                                     i2l1433 3A0E                                       i2l1434 3A20  
                                     i2l1435 3A2E                                       i2l2260 5986  
                                     i2l2261 597E                                       i2l1437 3A4C  
                                     i2l1429 39C6                                       i2l1438 3A60  
                                     i2l1288 5F3A                                       _PCLATH 000FFA  
                                     _INTCON 000FF2                                       _GPSDay 5B70  
                  convert_to_int_point_lat@i 008A                    convert_to_int_point_lat@j 0089  
                    __size_of_inicializa_SPI 0020                               ?_troca_de_tela 0001  
                                     _TMR0IF 007F92                                       _TMR2IF 007CF1  
                         auto_mount@maxclust 00A5                     __end_of_recebe_dado_uart 5F3E  
                                     _SPPCFG 000F63                                       _SPPCON 000F65  
                                     _SSPBUF 000FC9                     __size_of_sdc_disk_status 0018  
                           __end_of_check_fs 4E9C                         ??_inicializa_tarefas 0060  
                          ?_disparo_gravacao 0001                               trace_path@dptr 00D5  
                             trace_path@path 00C4                       reserve_direntry@sector 00CA  
                   __size_of_disk_initialize 003C                   __end_of_posicao_cursor_lcd 5132  
                         ??_disparo_gravacao 0261                               auto_mount@path 0093  
                               ?_move_window 008B                         __end_of_create_chain 304E  
                               _dado_arquivo 0162                       __size_of_init_hardware 0016  
                             auto_mount@stat 00B4                         __size_of_get_fattime 015C  
                               put_cluster@p 00B2                 ?_verifica_dados_operacionais 0001  
                       __size_of_get_cluster 0222                                       ___lmul 557A  
                                  ??___aldiv 0068                         __size_of_disk_status 0048  
                                     ___wmul 5DC2                                    ??___lldiv 0068  
                                  ??___ftmul 0077                                       _f_open 1368  
                                  ??___llmod 0068                                    ??___fttol 0084  
                           __end_of_grava_sd 5EC6                                       _f_sync 3E80  
                                     _buffer 0196                                       _estado 003B  
                                     _memcmp 49CA                                       _memcpy 58EC  
                           __end_of_init_lcd 4CEC                                       _memset 5CBE  
                                  ??_f_close 00AD                                       _rawFix 01CB  
                                     clear_0 4FE6                                       clear_1 4FF8  
                                     clear_2 5004                                       clear_3 5010  
                                     clear_4 501C                                    ??_f_lseek 00CA  
                                  ??_f_mount 0062                     configura_baudrate_uart@x 007A  
                                  ??_f_write 00CC                                       _strcat 58A4  
                                     _strcmp 597C                          _sdc_disk_initialize 1A7E  
                                  ??_command 006A                                  GPSRead@buff 000B  
                                     _strcpy 5C8C                                       _strlen 5628  
                      ___ftmul@f3_as_product 007B                             put_cluster@clust 00A0  
                                     fputc@c 00E9                           get_cluster@fatsect 00AB  
                           __end_of_monta_sd 1A7E                     __end_of_reserve_direntry 25B0  
                           __end_of_validate 585C                       __end_of_next_dir_entry 351C  
                                  ??_fprintf 01DD                                 __pdataCOMRAM 0042  
                                     fputs@n 00ED                                    ??_isdigit 0060  
                       __size_of_escalonador 00AE                                       ltoa@cp 0082  
                           __end_of_response 5F78                                 __mediumconst 60D8  
                            disk_read@sector 0081                              disk_read@result 0088  
                                     tblptrh 000FF7                                       tblptrl 000FF6  
                                     tblptru 000FF8                       __end_of_convert_to_int 5E0E  
                                  ??_proceed 0062                             _write_timer_zero 5F9C  
                               ?_posicao_lat 0001                                       ultoa@c 0079  
                                     ultoa@v 0075                                       sync@fs 00A0  
                  escreve_caractere_lcd@data 0062                               ??_dummy_clocks 0060  
                        _escreve_inteiro_lcd 585C                              sdc_disk_write@i 0077  
                            sdc_disk_write@j 007C                                   __accesstop 0060  
                    __end_of__initialization 5022                         ?_sdc_disk_initialize 0001  
                             disk_write@buff 007F                               disk_write@pdrv 0087  
                       __size_of_escreve_SPI 0014                                ___rparam_used 000001  
                          ??_escreve_cmd_lcd 0062                 ?_verifica_plausibilidade_lat 0001  
                  _convert_to_int_point_long 530E                                   ___awtoft@c 006D  
                                  ?_GPSMonth 0066                                   ___ftmul@f1 0071  
                                 ___ftmul@f2 0074                                   ___fttol@f1 0080  
                             __pcstackCOMRAM 0001                  __end_of_endereco_cursor_lcd 53EE  
                               __pidataBANK1 5F4E                            ?_mensagem_inicial 0001  
                    _configura_baudrate_uart 3D4E                                __end_of_delay 5D9A  
                             _escrita_sdcard 3204                                __end_of_fputc 5628  
                              __end_of_fputs 5520                         ?_escreve_inteiro_lcd 0084  
              ??_verifica_dados_operacionais 00AE             __end_of_convert_to_int_point_lat 5224  
                              __end_of_ultoa 40A8                               diferenca@index 008F  
                         ??_mensagem_inicial 0066                         __end_of_make_dirfile 368A  
                               ?_put_cluster 00A0                __size_of_mostra_dados_display 0036  
                         __size_of_diferenca 0162                            reserve_direntry@c 00D1  
                          reserve_direntry@n 00CE                             ??_verifica_fence 00AC  
                         _tarefa_em_execucao 0039                   __end_ofi2_write_timer_zero 5FB0  
                            ?_next_dir_entry 00B3                       __size_of_sdc_disk_read 0146  
            configura_baudrate_uart@baudrate 006E                         reserve_direntry@dptr 00CF  
                       __size_of_leitura_SPI 000C                                _init_hardware 5EDE  
                               auto_mount@fs 00B9                           __size_of_disk_read 0090  
                            ?_convert_to_int 007A                   __end_of_verifica_recep_gps 5DC2  
                                    ??_delay 0060                               sdc_reset@count 0070  
                                    ??_fputc 00E9                                      ??_fputs 00EC  
                            ??_troca_de_tela 008F                                      ??_ultoa 0075  
               mensagem_inicial@msg_linha_um 0068                                   __pbssBANK0 00EF  
                                 __pbssBANK1 0100                                   __pbssBANK2 0200  
             __size_of_escreve_frase_ram_lcd 0054                                      ?_GPSDay 0066  
              __end_of_escreve_frase_ram_lcd 5726                        ??_sdc_disk_initialize 0073  
        verifica_plausibilidade_long@posicao 0060                 __end_of_longitude_to_convert 466E  
                                 ??_GPSMonth 0068                    escreve_inteiro_uart@F3958 01F2  
              ??_verifica_plausibilidade_lat 0060                       __end_of_escrita_sdcard 3394  
                         __size_of_sdc_reset 00A4                           troca_de_tela@state 0037  
                                    ?___lmul 0060                            ??_sdc_disk_status 0060  
                              make_dirfile@a 0072                                make_dirfile@b 0070  
                              make_dirfile@c 0074                                make_dirfile@n 0073  
                              make_dirfile@t 0071                                      ?___wmul 0060  
                      mensagem_inicial@F4430 60D9                        mensagem_inicial@F4428 60EA  
                      ??_escreve_inteiro_lcd 0088                                      ?_f_open 00D7  
                                 _fence_flag 00F3                                      ?_f_sync 00A2  
                          ??_disk_initialize 0080                        __size_of_desliga_uart 0012  
                                    ?_memcmp 0060                                      ?_memcpy 0060  
                                    ?_memset 0060                               ___lmul@product 0068  
                                  ?___awtoft 006D                                    ?___ftpack 0060  
        verifica_dados_operacionais@flag_gps 00B2                                      ?_strcat 0060  
                                    ?_strcmp 0001                                      ?_strcpy 0060  
                                    ?_strlen 0060                                      i2l10276 39D8  
        verifica_dados_operacionais@contador 00FE                                      _INTCON2 000FF1  
                                    _INTCON3 000FF0                               ?_init_hardware 0001  
                                  ?_check_fs 008B                                   _disk_ioctl 5D1A  
                                    _GPSRead 282A                                      _GPSHour 5B34  
                                 _disk_write 4F24                                      _GPSyear 5A44  
                             remove_chain@fs 00BC         __size_of_verifica_dados_operacionais 00C8  
                                    _SSPCON1 000FC6                     __size_of_inicializa_uart 0024  
                                    _SSPSTAT 000FC7                                   _clust2sect 4504  
                             _inicializa_SPI 5E54                              trace_path@clust 00D2  
                                  ?_grava_sd 0001                              __size_of_GPSDay 003C  
                              ?_remove_chain 00B6                        __size_of_create_chain 01C0  
                                  ?_init_lcd 0001                           __size_of_stringcpy 004E  
                          __end_of_diferenca 37EC                                _sdc_disk_read 3C08  
                               _desliga_uart 5F1A                                   _auto_mount 05CC  
                                    __Hparam 0000                    ??_configura_baudrate_uart 0072  
                                    __Lparam 0000                                    ?_monta_sd 0066  
                                  ?_validate 0067                              ?_escrita_sdcard 0001  
                          __end_of_disk_read 4E10                                put_cluster@bc 00B0  
                                  ?_response 0001                                put_cluster@fs 00B4  
                                    ___aldiv 436E                                   f_close@res 00AD  
                            __size_of___lmul 0058                                      ___lldiv 5030  
                            __size_of___wmul 0028                                      ___ftmul 41A0  
                                    ___llmod 53EE                                      ___fttol 40A8  
                       __size_of_move_window 01B6                                   check_fs@fs 0091  
                            __size_of_f_open 0396                              __size_of_f_sync 012A  
                       __end_of_dummy_clocks 5A08                                      _f_close 5CEE  
                                    __pcinit 4FAC                              __size_of_memcmp 00A4  
                            __size_of_memcpy 0048                                   ??___awtoft 0070  
                                 ??___ftpack 0065                              __size_of_memset 0030  
                                    _f_lseek 0B00                                   _init_ports 5E74  
                                    __ramtop 0800                                      _f_mount 57C4  
                                    __ptext0 5D46                                      __ptext1 4A6E  
                                    __ptext2 4C4E                                      __ptext3 5EDE  
                                    __ptext4 5E74                                      __ptext5 5FB0  
                                    __ptext6 5F08                                      __ptext7 5E90  
                                    __ptext8 5F9C                                      __ptext9 5F5C  
                                    _f_write 0012                                      _command 5456  
                                  _T0CONbits 000FD5                          auto_mount@totalsect 00AD  
                            __size_of_strcat 0048                              __size_of_strcmp 0048  
                            __size_of_strcpy 0032                              __size_of_strlen 0056  
                endereco_cursor_lcd@endereco 0062                                      _fprintf 0F8A  
                               __size_of_fix 000C                                      _rawDate 01B8  
                                    _isdigit 5E32                                 __size_of_isr 3AA4  
       __size_of_verifica_plausibilidade_lat 00A0                      ??_escreve_caractere_lcd 0062  
                                 ??_check_fs 008F                                      _rawTime 01AD  
                           ___aldiv@dividend 0060                                 stringcpy@chr 000A  
                               stringcpy@dir 0005                                      _time_sd 0034  
                               _create_chain 2E8E                                      _proceed 5F78  
                    __size_of_init_interrupt 0012                           _point_buff_gps_lat 013E  
                          __end_of_sdc_reset 49CA         convert_to_int_point_lat@temp_str_lat 0087  
                     __end_of_inicializa_SPI 5E74                        __end_of_armazena_ltlo 4C4E  
                __end_of_latitude_to_convert 4722                                   f_lseek@ofs 00C6  
                             __pintcode_body 394E                                   f_lseek@res 00D6  
                       end_of_initialization 5022         __end_of_verifica_plausibilidade_long 4F24  
      __size_of_verifica_plausibilidade_long 0088                 _verifica_plausibilidade_long 4E9C  
          __size_of_convert_to_int_point_lat 0078                         __size_of_posicao_lat 0006  
                                 f_open@mode 00DB                                   f_open@path 00D9  
                  ?_convert_to_int_point_lat 007A                               ??_remove_chain 00B8  
                                    isr@cont 0021                                      memcmp@n 0064  
                                 ??_grava_sd 00EF                                      memcpy@d 0067  
                                    memcpy@n 0064                                      memcpy@s 0069  
                    __size_of_init_oscilador 0008                                      fputc@bw 00EA  
                                    memset@c 0062                                      memset@n 0064  
                                    memset@p 0066                         sdc_disk_initialize@i 0074  
                              __Lmediumconst 60D8                                   ??_init_lcd 0063  
                                    int_func 394E                            ?_recebe_dado_uart 0001  
                            disk_status@pdrv 0065                                    i2u1151_40 59B8  
                            disk_status@stat 0066                               ?_sdc_disk_read 006C  
                                  i2u1271_40 3A12                                      ltoa@buf 007A  
                                  i2u1265_40 39B6                                    i2u1266_48 39B8  
                                    ltoa@val 007C                                    _GPSMinute 5AF8  
                                  _GPSSecond 5A80                       write_timer_zero@timer0 0060  
                            ___lldiv@divisor 0064                                _rawSatellites 0135  
                                 f_mount@drv 0062                           ??_recebe_dado_uart 0001  
                           sdc_disk_read@ptr 0077                              ___lldiv@counter 006C  
                                 ??_monta_sd 0068                                   ??_validate 006B  
                      __size_of_make_dirfile 016E                     __size_of_dados_gps_to_sd 0072  
                             _fence_diff_lat 6127                                   ??_response 0060  
                                  _RCSTAbits 000FAB                     __end_of_write_timer_zero 5FA6  
                           ___aldiv@quotient 006A                                      postdec1 000FE5  
                                    postdec2 000FDD                                      postinc0 000FEE  
                                    postinc1 000FE6                                      postinc2 000FDE  
                              ?_posicao_long 0001                                   _wait_ready 5BE6  
                                    strcmp@r 0006                                      strlen@s 0060  
              longitude_to_convert@longitude 009E           __size_of_convert_to_int_point_long 0070  
                                  _PORTBbits 000F81                    __size_of_disparo_gravacao 0036  
                                  _PORTDbits 000F83                                    _PORTEbits 000F84  
                            ??_init_hardware 0062                                   _trace_path 1DC4  
                         _posicao_cursor_lcd 50B4                            __end_of_stringcpy 57C4  
                              ??_desliga_SPI 0060                         __size_of_put_cluster 027A  
            __end_of_configura_baudrate_uart 3E80                                  ?_disk_ioctl 0060  
                       _longitude_to_convert 45BA                            ?_reserve_direntry 00C4  
                                 f_write@btw 00C8                                   f_write@res 00D8  
                  longitude_to_convert@index 00A9                                    _TRISBbits 000F93  
                                ?_disk_write 007F                                    _TRISCbits 000F94  
                                  _TRISDbits 000F95                             next_dir_entry@dj 00B3  
                            _escreve_cmd_lcd 4CEC                           ??_reserve_direntry 00C8  
                        ?_posicao_cursor_lcd 0063                              ?_inicializa_SPI 0001  
                            disk_write@count 0085                                  ?_clust2sect 006C  
                           _put_cluster$1572 00A8                             _put_cluster$1573 00AA  
             verifica_dados_operacionais@vel 00B3                                   command@CMD 006A  
                                 command@CRC 0069                                   command@arg 0065  
                               _make_dirfile 351C                ?_verifica_plausibilidade_long 0001  
                             __end_of_GPSDay 5BAC                                ??_get_fattime 006E  
                          ??_inicializa_uart 007C                  __size_of_inicializa_tarefas 0050  
                                 ?_GPSMinute 0066                                   ?_GPSSecond 0066  
                              ??_get_cluster 00A2                       __end_of_fence_diff_lat 614F  
                              ??_disk_status 0062                                  ?_auto_mount 0093  
                          _make_dirfile$1682 006E                                  ___ftmul@exp 007A  
                            command@argument 006B                           diferenca@valor_lat 0090  
                       ??_posicao_cursor_lcd 0064                            __size_of_GPSMonth 003C  
                             ??_posicao_long 0060                               __end_of___lmul 55D2  
                             _temp_buff_long 013A                             ??_next_dir_entry 00B5  
                             __end_of___wmul 5DEA                               __end_of_f_open 16FE  
                              __pidataCOMRAM 5FC4                                ??_escalonador 0264  
                                ?_init_ports 0001                               __end_of_f_sync 3FAA  
                           ??_convert_to_int 007E                               __end_of_memcmp 4A6E  
                             __end_of_memcpy 5934                               __end_of_memset 5CEE  
          __end_of_convert_to_int_point_long 537E                        ?_longitude_to_convert 0001  
                             __end_of_strcat 58EC                               __end_of_strcmp 59C4  
                             __end_of_strcpy 5CBE                               __end_of_strlen 567E  
                           _time_atualizacao 0032                          start_initialization 4FAC  
                                __end_of_fix 5F9C                                  __end_of_isr 3AAC  
                  __size_of_mensagem_inicial 00A0                           reserve_direntry@dj 00C4  
                         reserve_direntry@fs 00D4                          __end_of_desliga_SPI 5F4E  
                              ??_escreve_SPI 0060                 __end_of_mostra_dados_display 5C8C  
                                   ??_GPSDay 0068                              _sdc_disk_status 5EC6  
                            ??_sdc_disk_read 0073                            auto_mount@fatsize 00B5  
                         i2_write_timer_zero 5FA6                              ___llmod@divisor 0064  
                            _disk_initialize 5A08                              ___llmod@counter 0068  
                         _verifica_recep_gps 5D9A                        reserve_direntry@clust 00D2  
                    __size_of_sdc_disk_write 01CA                             _data_uart_recebe 003A  
                          wait_ready@timeout 0060                        __size_of_dummy_clocks 0044  
                              auto_mount@fmt 00B3                          __size_of_disk_ioctl 002C  
                        ?i2_write_timer_zero 0001                          __size_of_disk_write 0088  
                                   ??___lmul 0068                                   fprintf@fil 01D1  
                                 fprintf@arp 025A                                     ??___wmul 0064  
                                 fprintf@res 024E                                   fprintf@val 0256  
                                 fprintf@str 01D3                          __end_of_get_fattime 3C08  
                                   ??_f_open 00DC                          ?_verifica_recep_gps 0001  
                                   ??_f_sync 00A4                                  ?_wait_ready 0001  
                                __pdataBANK1 01F2                          __end_of_get_cluster 2CC4  
                                   ??_memcmp 0066                          __end_of_disk_status 597C  
                                   ??_memcpy 0066                          __size_of_clust2sect 00B6  
                                   ??_memset 0066                       sdc_disk_read@start_add 0078  
                       __end_of_remove_chain 4926                            ??_dados_gps_to_sd 006B  
                    sdc_disk_initialize@buff 007F                                ??_leitura_SPI 0060  
                    __end_of_escreve_cmd_lcd 4D80                                     ??_strcat 0064  
                                   ??_strcmp 0005                                     ??_strcpy 0064  
                                   ??_strlen 0062                      sdc_disk_initialize@stat 0076  
                                ?_trace_path 00C0                 __size_of_endereco_cursor_lcd 0070  
                               _fprintf$2176 0250                            __size_of___awtoft 003A  
                          __size_of___ftpack 00B0                                  __pbssBIGRAM 0267  
                              monta_sd@index 0069                                  __pbssCOMRAM 0022  
                            _trace_path$1731 00CE                              _trace_path$1729 00CC  
                                   ?_GPSRead 0001                                     ?_GPSHour 0066  
                              __pcstackBANK0 0060                                __pcstackBANK1 01CD  
                              __pcstackBANK2 023E                               _init_interrupt 5F08  
                        __size_of_auto_mount 0534                         ??i2_write_timer_zero 0003  
                        __end_of_escalonador 4880                  __end_of_sdc_disk_initialize 1DC4  
                                   ?_GPSyear 0066                            __size_of_check_fs 008C  
                               _isdigit$2961 0061                                 check_fs@sect 008B  
                                _char_number 0041                         ??_verifica_recep_gps 0060  
                                 sdc_reset@i 006C                                 _dummy_clocks 59C4  
                             _init_oscilador 5FB0                        __end_of_troca_de_tela 2316  
                                   GPSRead@c 000C                             ??_escrita_sdcard 01F0  
                        __size_of_init_ports 001C                        _escreve_frase_ram_lcd 56D2  
                          __size_of_grava_sd 001A                                  ??_GPSMinute 0068  
                                ??_GPSSecond 0068                                    _data_buff 00FC  
                                  _data_hoje 003D                  __end_of_escreve_inteiro_lcd 58A4  
                        __end_of_escreve_SPI 5F08                            __size_of_init_lcd 009E  
                          delay@contador_int 0061                            delay@contador_ext 0060  
             ??_verifica_plausibilidade_long 0060          __end_of_verifica_dados_operacionais 4504  
                _verifica_dados_operacionais 443C                                    _diferenca 368A  
                                  __pintcode 0008                                __pmediumconst 60D8  
                                   ?___aldiv 0060                         latitude_to_convert@i 00A9  
                       latitude_to_convert@j 00A8                                    __ptext100 5A44  
                                  __ptext101 5A80                                    __ptext110 5F1A  
                                  __ptext102 5ABC                                    __ptext111 5F3E  
                                  __ptext103 5AF8                                    __ptext112 5F90  
                                  __ptext104 5B34                                    __ptext105 5B70  
                                  __ptext114 5FA6                                    __ptext106 5DC2  
                                  __ptext115 5F2C                                    __ptext107 529C  
                                  __ptext116 282A                                    __ptext108 16FE  
                                  __ptext117 5776                                    __ptext109 5628  
                                  __ptext118 597C                                    __ptext119 0000  
                          __size_of_monta_sd 0380                                     ?___lldiv 0060  
                                   ?___ftmul 0071                                     ?___llmod 0060  
                          __size_of_validate 004C                                     ?___fttol 0080  
                          __size_of_response 000E                                     ?_f_close 00AB  
                                  _disk_read 4D80                           _sinaliza_int_timer 00FF  
                                   ?_f_lseek 00C4                                     ?_f_mount 0060  
                           _disparo_gravacao 5C20                                     ?_f_write 00C4  
                     ??_longitude_to_convert 009D                                     ?_command 0065  
                     __end_of_init_interrupt 5F1A                                     ?_fprintf 01D1  
                                   ?_isdigit 0001                                  _desliga_SPI 5F3E  
                        sdc_disk_read@p_buff 006C                      troca_de_tela@last_state 0036  
                        sdc_disk_read@length 007C                          sdc_disk_read@sector 006E  
                    __end_of_sdc_disk_status 5EDE               __size_of_escreve_caractere_lcd 0078  
              __end_of_escreve_caractere_lcd 529C                                     ?_proceed 0001  
                                  f_close@fp 00AB                          __end_of_leitura_SPI 5F90  
                             __size_of_delay 002A                      __end_of_disk_initialize 5A44  
                     __end_of_init_oscilador 5FB8                               __size_of_fputc 0056  
                             __size_of_fputs 0062                          make_dirfile@dirname 006A  
                                 validate@id 0069                                   validate@fs 0067  
                       __end_of_posicao_long 5FBE                                    _p_tarefas 011A  
                             __size_of_ultoa 00FE                      __size_of_verifica_fence 007A  
                                  _rawCourse 0129                             make_dirfile@path 0068  
                                   _GPGGA_ok 00F8                                    _sdc_reset 4926  
                        __size_of_wait_ready 003A                              ___aldiv@divisor 0064  
                latitude_to_convert@latitude 009E                              ___aldiv@counter 0068  
                             ___wmul@product 0064                                     _LATBbits 000F8A  
                                  f_lseek@fp 00C4                                     _LATCbits 000F8B  
        __end_of_verifica_plausibilidade_lat 4BAE                  _verifica_plausibilidade_lat 4B0E  
                                   _GPRMC_ok 00FA                                    f_open@dir 01E0  
                                  f_open@res 01DF                                     _PIE1bits 000F9D  
                                _get_fattime 3AAC                                 _rawLongitude 018A  
                        __size_of_trace_path 02AC                                  _get_cluster 2AA2  
                                   _GPSMonth 5ABC                                  _disk_status 5934  
                              ??_move_window 008F                                    f_mount@fs 0060  
                                   _PIR1bits 000F9E                                   ?_diferenca 0001  
                              move_window@fs 009E           verifica_plausibilidade_lat@posicao 0060  
verifica_dados_operacionais@velocidade_atual 00B4  verifica_dados_operacionais@velocidade_media 00EF  
                          ?_write_timer_zero 0060                              remove_chain@nxt 00BA  
                                  f_sync@dir 00A9                                    f_sync@res 00A8  
                                  f_sync@tim 00A4                     posicao_cursor_lcd@coluna 0063  
                                 ?_disk_read 007F                           ??_write_timer_zero 0062  
                                  f_write@cc 00DF                   posicao_cursor_lcd@endereco 0065  
                                  f_write@bw 00CA                                    f_write@fp 00C4  
                       _mostra_dados_display 5C56                    __size_of_recebe_dado_uart 0012  
                                _escalonador 47D2                            ___wmul@multiplier 0060  
                           ?_escreve_cmd_lcd 0001                  escreve_frase_ram_lcd@buffer 0063  
                           ??_inicializa_SPI 0060                              ?_init_interrupt 0001  
                               ??_disk_ioctl 0063                                 ??_disk_write 0086  
                        armazena_ltlo@buffer 0098                                 f_lseek@clust 00DF  
                            _inicializa_uart 5E0E                                 f_lseek@csize 00DB  
                               f_lseek@ifptr 00D7                                    _stringcpy 5776  
                           __size_of_GPSRead 0278                             _mensagem_inicial 4A6E  
                           __size_of_GPSHour 003C                                ??_posicao_lat 0060  
                   latitude_to_convert@index 00A7                                _temp_buff_lat 0138  
                            ?_init_oscilador 0001                                 ??_clust2sect 0070  
                           __size_of_GPSyear 003C                            ___lmul@multiplier 0060  
                                  copy_data0 4FC0                                  _escreve_SPI 5EF4  
                              _flag_anomalia 0038                                   ?_sdc_reset 0001  
                        sdc_reset@count_nosd 006E                     ?_configura_baudrate_uart 006E  
                     ?_escreve_frase_ram_lcd 0063                             auto_mount@chk_wp 0095  
                          move_window@sector 008B                               _sdc_disk_write 2CC4  
                  __size_of_reserve_direntry 029A                 __size_of_latitude_to_convert 00B4  
                   escreve_inteiro_lcd@F3966 01F9                                 ??_auto_mount 0096  
                                   __Hrparam 0000                                    memcpy@tmp 0066  
                                   __Lrparam 0000                                    fprintf@cc 025C  
                         __end_of_disk_ioctl 5D46                        __size_of_remove_chain 00A6  
                             put_cluster@val 00A2                             get_cluster@clust 00A0  
                         __end_of_disk_write 4FAC                                 _SentenceType 0040  
                           __size_of___aldiv 00CE                       sdc_disk_initialize@ocr 007C  
                     __size_of_armazena_ltlo 00A0                                 monta_sd@dado 0066  
                           __size_of___lldiv 0084                             __size_of___ftmul 00F6  
                           __size_of___llmod 0068                             __size_of___fttol 00F8  
                              ??_put_cluster 00A4                                 monta_sd@size 0068  
                      ?_mostra_dados_display 0001                                 ??_init_ports 0060  
                        __end_of_move_window 3204                                     ___awtoft 5BAC  
                                   ___ftpack 4722                           __end_of_clust2sect 45BA  
                   escreve_inteiro_lcd@valor 0084                             __size_of_f_close 002C  
                   escreve_inteiro_lcd@texto 0088                             __size_of_f_lseek 048A  
                           __size_of_f_mount 004C                                  _leitura_SPI 5F84  
                           __size_of_f_write 05BA                            disk_status@result 0063  
                           __size_of_command 0068                        __end_of_init_hardware 5EF4  
                                   _check_fs 4E10                                   strcat@from 0062  
                           __size_of_fprintf 03DE                             __size_of_isdigit 0022  
                           ?_sdc_disk_status 0001                                   ?_stringcpy 0001  
                              _time_recovery 0140                     _convert_to_int_point_lat 51AC  
                         __end_of_auto_mount 0B00                                     __ptext10 5726  
                                   __ptext11 47D2                                     __ptext20 5C56  
                                   __ptext12 2070                                     __ptext21 585C  
                                   __ptext13 5C20                                     __ptext30 466E  
                                   __ptext22 567E                                     __ptext14 443C  
                                   __ptext31 4BAE                                     __ptext23 3FAA  
                                   __ptext15 4296                                     __ptext40 3D4E  
                                   __ptext32 368A                                     __ptext24 4CEC  
                                   __ptext16 40A8                                     __ptext41 436E  
                                   __ptext33 530E                                     __ptext25 5132  
                                   __ptext17 41A0                                     __ptext50 55D2  
                                   __ptext42 5E54                                     __ptext34 51AC  
                                   __ptext26 5D9A                                     __ptext18 5BAC  
                                   __ptext51 0012                                     __ptext43 3204  
                                   __ptext35 5DEA                                     __ptext27 4E9C  
                                   __ptext19 4722                                     __ptext60 58EC  
                                   __ptext52 53EE                                     __ptext44 5C8C  
                                   __ptext36 37EC                                     __ptext28 4B0E  
                                   __ptext61 05CC                                     __ptext53 1368  
                                   __ptext45 58A4                                     __ptext37 5E32  
                                   __ptext29 45BA                                     __ptext70 5D70  
                                   __ptext62 5CBE                                     __ptext54 1DC4  
                                   __ptext46 5FB8                                     __ptext38 5EAC  
                                   __ptext71 4E10                                     __ptext63 5A08  
                                   __ptext55 351C                                     __ptext47 5FBE  
                                   __ptext39 5E0E                                     __ptext80 5CEE  
                                   __ptext72 49CA                                     __ptext64 1A7E  
                                   __ptext56 2316                                     __ptext48 0F8A  
                                   __ptext81 3E80                                     __ptext73 557A  
                                   __ptext65 4926                                     __ptext57 3394  
                                   __ptext49 54BE                                     __ptext90 3C08  
                                   __ptext82 5810                                     __ptext74 57C4  
                                   __ptext66 50B4                                     __ptext58 4504  
                                   __ptext91 5F6A                                     __ptext83 5934  
                                   __ptext75 0B00                                     __ptext67 537E  
                                   __ptext59 4880                                     __ptext92 5F78  
                                   __ptext84 5EC6                                     __ptext76 2E8E  
                                   __ptext68 56D2                                     __ptext93 5456  
                                   __ptext85 5520                                     __ptext77 25B0  
                                   __ptext69 5224                                     __ptext94 5BE6  
                                   __ptext86 304E                                     __ptext78 2AA2  
                                   __ptext95 5EF4                                     __ptext87 4F24  
                                   __ptext79 5030                                     __ptext96 59C4  
                                   __ptext88 2CC4                                     __ptext97 5F84  
                                   __ptext89 4D80                                     __ptext98 5D1A  
                                   __ptext99 3AAC                             __size_of_proceed 000C  
                                   _filename 0176                                  _rawAltitude 0122  
                           ?_disk_initialize 0001                               _timeout_tarefa 0142  
                         sdc_disk_read@count 0072                                   strcpy@from 0062  
                        escrita_sdcard@f_fix 003C                   __end_of_inicializa_tarefas 5776  
                   i2write_timer_zero@timer0 0001                                     _grava_sd 5EAC  
                     __end_of_sdc_disk_write 2E8E                                    monta_sd@i 006A  
                                   _gps_flag 012F                                  _rawLatitude 01A2  
                                   _init_lcd 4C4E                                __size_of_atoi 00D8  
                              __size_of_atol 0162                                __size_of_main 002A  
                               _remove_chain 4880                                __size_of_ltoa 0054  
                        __end_of_posicao_lat 5FC4                                __size_of_sync 005A  
                        _endereco_cursor_lcd 537E                           __end_of_init_ports 5E90  
                                   _rawSpeed 01BF                                dummy_clocks@i 0063  
                                   f_open@dj 01E2                                dummy_clocks@n 0062  
                                   f_open@fn 01CD                                     f_open@fp 00D7  
                                   f_open@dw 01DB                                     f_open@rs 01D9  
                            _dados_gps_to_sd 529C                                     _monta_sd 16FE  
                                   _validate 5810                                  ??_diferenca 008B  
                                   _sentence 01C5                                 move_window@n 0099  
                              stringcpy@str1 0001                                stringcpy@str2 0003  
                                   _response 5F6A                                stringcpy@size 0007  
                                   f_sync@fp 00A2                          _point_buff_gps_long 013C  
                __size_of_posicao_cursor_lcd 007E                                     int$flags 0043  
                    posicao_cursor_lcd@linha 0064                                     atoi@sign 006A  
                                   atol@sign 0074                                 ??_wait_ready 0060  
                                ??_disk_read 0086                           armazena_ltlo@index 009A  
                    __end_of_inicializa_uart 5E32                         convert_to_int@p_buff 007A  
                               ??_trace_path 00C8                         ?_endereco_cursor_lcd 0001  
                      verifica_fence@timeout 00AD                           put_cluster@fatsect 00AC  
                                 _INTCONbits 000FF2                        __size_of_posicao_long 0006  
                 ?_convert_to_int_point_long 007A                                     memcmp@s1 0060  
                                   memcmp@s2 0062                             move_window@wsect 009A  
                                   memcpy@d1 0060                                     memcpy@s1 0062  
                        __end_of_put_cluster 282A                                     fprintf@c 0260  
                                   fprintf@f 0254                                     fprintf@i 025E  
                                   fprintf@r 0255                                     fprintf@s 023E  
                                   fprintf@w 0252                                     fputc@chr 00E5  
                                   fputc@fil 00E7                                     isdigit@c 0062  
                                   memset@p1 0060                                    ultoa@base 0073  
                          _config_timer_dois 5F5C                                 _tempo_backup 0112  
                                   fputs@fil 01CF                                     fputs@str 01CD  
                          _config_timer_zero 5E90                               _verifica_fence 5132  
                              _armazena_ltlo 4BAE                                 _poligono_ext 0022  
                              wait_ready@res 0064                                     intlevel2 0000  
                         ?_config_timer_dois 0001                     mensagem_inicial@msg_dois 0079  
                                ??_sdc_reset 006C                                     ltoa@base 0080  
                         ?_config_timer_zero 0001                                 _tempo_tarefa 010A  
                            ?_sdc_disk_write 006C                           __end_of_wait_ready 5C20  
                   __end_of_disparo_gravacao 5C56                             ___lldiv@dividend 0060  
                          sdc_disk_read@buff 007E                        __end_of_sdc_disk_read 3D4E  
                        sdc_disk_status@pdrv 0061                          sdc_disk_status@stat 0060  
                              ?_desliga_uart 0001                          ??_config_timer_dois 0060  
                                 _OSCCONbits 000FD3                           __end_of_trace_path 2070  
                        ??_config_timer_zero 0062                                  _move_window 304E  
                            _fence_diff_long 60FB                       ??_mostra_dados_display 0066  
                               _posicao_long 5FB8                         sdc_disk_write@count1 0079  
                       sdc_disk_write@p_buff 006C                             _recebe_dado_uart 5F2C  
                                   ultoa@buf 006D                         sdc_disk_write@sector 006E  
                      ??_endereco_cursor_lcd 0062                                     ultoa@val 006F  
                               response@buff 0060                                     strcat@cp 0064  
                                   strcat@to 0060                                     strcmp@s1 0001  
                                   strcmp@s2 0003                                 ?_desliga_SPI 0001  
                           ___lldiv@quotient 0068                   convert_to_int_point_long@i 0089  
                 convert_to_int_point_long@j 0088                                     strcpy@cp 0064  
                                   strlen@cp 0064                                     strcpy@to 0060  
                          remove_chain@clust 00B6                    __end_of_config_timer_dois 5F6A  
                               ___aldiv@sign 0069                                ?_create_chain 00B6  
                  __end_of_config_timer_zero 5EAC                       __end_of_verifica_fence 51AC  
                                ??_stringcpy 0008                  __size_ofi2_write_timer_zero 000A  
                                _SSPCON1bits 000FC6                      __size_of_next_dir_entry 0188  
                                _posicao_lat 5FBE                       escreve_cmd_lcd@comando 0062  
                         escreve_SPI@TempVar 0060                               ?_armazena_ltlo 0098  
                        sdc_disk_write@count 0072                  __size_of_verifica_recep_gps 0028  
                    __size_of_convert_to_int 0024                sdc_disk_initialize@crc_number 0079  
  convert_to_int_point_long@convert_str_long 007E                      __end_of_dados_gps_to_sd 530E  
                         sdc_disk_write@buff 007E                 __size_of_sdc_disk_initialize 0346  
                               f_write@clust 00E1                               ??_desliga_uart 0060  
                         leitura_sdcard@size 0042                                 f_write@wbuff 00D9  
                               ?_get_fattime 006A                             _reserve_direntry 2316  
                    disparo_gravacao@fix_gps 0262                                  f_write@buff 00C6  
                          sdc_disk_write@res 007B                                 ?_get_cluster 00A0  
                                f_write@sect 00DB                                  f_write@wcnt 00E3  
                               ?_disk_status 0001                __end_ofmensagem_inicial@F4430 60EA  
              __end_ofmensagem_inicial@F4428 60FB                              escreve_SPI@dado 0061  
